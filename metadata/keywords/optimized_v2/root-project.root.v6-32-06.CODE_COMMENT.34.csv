quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,filename,wiki,url,total_similar,target_keywords,target_matched_words
Testability,# Parse the test sources and extract test properties,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:12,test,test,12,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,2,['test'],['test']
Testability,"# Part 3b : Choose Test Statistic; # --------------------------------------------------------------; # To make an equivalent calculation we need to use x as the test; # statistic. This is not a built-in test statistic in RooStats; # so we define it above. The new class inherits from the; # RooStats.TestStatistic interface, and simply returns the value; # of x in the dataset.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py:19,Test,Test,19,tutorials/roostats/HybridStandardForm.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py,4,"['Test', 'test']","['Test', 'TestStatistic', 'test']"
Testability,"# Part 3b : Choose Test Statistic; # ----------------------------------; # To make an equivalent calculation we need to use x as the test; # statistic. This is not a built-in test statistic in RooStats; # so we define it above. The new class inherits from the; # TestStatistic interface, and simply returns the value; # of x in the dataset.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py:19,Test,Test,19,tutorials/roostats/HybridInstructional.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py,4,"['Test', 'test']","['Test', 'TestStatistic', 'test']"
Testability,"# Pass None as `npartitions`. The tests will modify this member; # according to needs",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py:34,test,tests,34,bindings/experimental/distrdf/test/test_callable_generator.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py,5,['test'],['tests']
Testability,"# Perform another fit. In self configuration only the number of errors per; # likelihood evaluation is shown, it is greater than zero. The; # EvalErrorWall(kFALSE) arguments disables the default error handling strategy; # and will cause the actual (problematic) value of the likelihood to be passed; # to MINUIT.; #; # NB: Use of self option is NOT recommended as default strategt as broken -log(L) values; # can often be lower than 'good' ones because offending events are removed.; # ROOT.This may effectively create a False minimum in problem areas. ROOT.This is clearly; # illustrated in the second plot",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf606_nllerrorhandling.py:392,log,log,392,tutorials/roofit/rf606_nllerrorhandling.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf606_nllerrorhandling.py,1,['log'],['log']
Testability,# Perform test discovery.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitTestCase.py:10,test,test,10,interpreter/llvm-project/llvm/utils/lit/lit/LitTestCase.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitTestCase.py,1,['test'],['test']
Testability,"# Plot the negative logarithmic summed likelihood",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf615_simulation_based_inference.py:20,log,logarithmic,20,tutorials/roofit/rf615_simulation_based_inference.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf615_simulation_based_inference.py,2,['log'],['logarithmic']
Testability,# Prepare the input values passed to the test function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py:41,test,test,41,interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py,1,['test'],['test']
Testability,# Print the diff in the log so that it is viewable there,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/code-format-helper.py:24,log,log,24,interpreter/llvm-project/llvm/utils/git/code-format-helper.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/code-format-helper.py,2,['log'],['log']
Testability,"# Python 3.10 offers zip(..., strict=True). The following assertion; # mimics it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py:58,assert,assertion,58,interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/CmpRuns.py,1,['assert'],['assertion']
Testability,"# Python's strerror may not supply the same message; # as C++ std::error_code. One example of such a platform is; # Visual Studio. errc_messages may be supplied which contains the error; # messages for ENOENT, EISDIR, EINVAL and EACCES as a semi colon; # separated string. LLVM testsuites can use get_errc_messages in cmake; # to automatically get the messages and pass them into lit.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py:278,test,testsuites,278,interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,1,['test'],['testsuites']
Testability,"# ROOT-9935: test null proxied cpp object",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pretty_printing.py:13,test,test,13,bindings/pyroot/pythonizations/test/pretty_printing.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pretty_printing.py,1,['test'],['test']
Testability,# Re-run failed tests up to test.allowed_retries times.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:16,test,tests,16,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,2,['test'],"['test', 'tests']"
Testability,# Remove some clang arguments to speed up the interestingness test,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py:62,test,test,62,interpreter/llvm-project/clang/utils/creduce-clang-crash.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py,1,['test'],['test']
Testability,# Remove the log file. It leaks absolute path names.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:13,log,log,13,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,1,['log'],['log']
Testability,"# Reopen stdout in binary mode to avoid CRLF translation. The versions; # of echo we are replacing on Windows all emit plain LF, and the LLVM; # tests now depend on this.; # When we open as binary, however, this also means that we have to write; # 'bytes' objects to stdout instead of 'str' objects.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:145,test,tests,145,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,1,['test'],['tests']
Testability,"# Report micro-tests separately, if present",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/reports.py:15,test,tests,15,interpreter/llvm-project/llvm/utils/lit/lit/reports.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/reports.py,1,['test'],['tests']
Testability,"# Report micro-tests, if present",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/display.py:15,test,tests,15,interpreter/llvm-project/llvm/utils/lit/lit/display.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/display.py,1,['test'],['tests']
Testability,"# Report test metrics, if present.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/display.py:9,test,test,9,interpreter/llvm-project/llvm/utils/lit/lit/display.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/display.py,1,['test'],['test']
Testability,"# Reset the mock list of nodes so old nodes are not kept",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py:12,mock,mock,12,bindings/experimental/distrdf/test/test_callable_generator.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_callable_generator.py,1,['mock'],['mock']
Testability,# Return a unittest test suite which just runs the tests in order.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitTestCase.py:20,test,test,20,interpreter/llvm-project/llvm/utils/lit/lit/LitTestCase.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitTestCase.py,2,['test'],"['test', 'tests']"
Testability,"# Returns a random vector type to be tested; # In case one of the dimensions (scalar type/number of elements) is provided,; # fill the blank dimension and return appropriate Type object.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py:37,test,tested,37,interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py,1,['test'],['tested']
Testability,"# Run custom logon file (must be after creation of ROOT globals)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_facade.py:13,log,logon,13,bindings/pyroot/pythonizations/python/ROOT/_facade.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_facade.py,1,['log'],['logon']
Testability,"# Run single tests on CI with this; # runSingleTest('Prompt/ValuePrinter/Regression.C'); # runSingleTest('Prompt/ValuePrinter')",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py:13,test,tests,13,interpreter/cling/tools/packaging/cpt.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py,1,['test'],['tests']
Testability,# Run the test.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitTestCase.py:10,test,test,10,interpreter/llvm-project/llvm/utils/lit/lit/LitTestCase.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitTestCase.py,1,['test'],['test']
Testability,"# Run training, test and evaluation",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/keras/ClassificationKeras.py:16,test,test,16,tutorials/tmva/keras/ClassificationKeras.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/keras/ClassificationKeras.py,2,['test'],['test']
Testability,"# Same as previous test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_ranges.py:19,test,test,19,bindings/experimental/distrdf/test/test_ranges.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_ranges.py,1,['test'],['test']
Testability,"# Scan -log(L) vs alpha; # -----------------------------------------; # Show scan -log(L) of dataset w.r.t alpha",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf705_linearmorph.py:8,log,log,8,tutorials/roofit/rf705_linearmorph.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf705_linearmorph.py,2,['log'],['log']
Testability,# Search for tests.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:13,test,tests,13,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,1,['test'],['tests']
Testability,"# See https://github.com/root-project/root/issues/7541 and; # https://bugs.llvm.org/show_bug.cgi?id=49692 :; # llvm JIT fails to catch exceptions on M1, so we disable their testing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_headnode.py:173,test,testing,173,bindings/experimental/distrdf/test/test_headnode.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/test_headnode.py,2,['test'],['testing']
Testability,"# See if this has been specified via UTC_ARGS. This is a ""global"" option; # that affects the entire generation of test checks. If it exists anywhere; # in the test, apply it to everything.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py:114,test,test,114,interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py,2,['test'],['test']
Testability,"# Show the test failure output, if requested.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/display.py:11,test,test,11,interpreter/llvm-project/llvm/utils/lit/lit/display.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/display.py,1,['test'],['test']
Testability,# Show the test result line.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/display.py:11,test,test,11,interpreter/llvm-project/llvm/utils/lit/lit/display.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/display.py,1,['test'],['test']
Testability,"# Since `all_reverts` contains reverts in log order (e.g., newer comes before; # older), we need to reverse this to keep with our guarantee of older =; # earlier in the result.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/revert_checker.py:42,log,log,42,interpreter/llvm-project/llvm/utils/revert_checker.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/revert_checker.py,1,['log'],['log']
Testability,"# Since we are capturing the result and using it in other command later,; # we don't need it for the reproducing steps.; # So no call to: log.add(command)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/.github/workflows/root-ci-config/build_utils.py:138,log,log,138,.github/workflows/root-ci-config/build_utils.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/.github/workflows/root-ci-config/build_utils.py,1,['log'],['log']
Testability,# Skip files which are under INPUTS trees or test trees.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/sort_includes.py:45,test,test,45,interpreter/llvm-project/llvm/utils/sort_includes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/sort_includes.py,1,['test'],['test']
Testability,"# Some already instantiated ROOT classes may match targets of @pythonization; # in some tests, and because of immediate pythonization they will be; # processed by the pythonizors. Just ignore them",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py:88,test,tests,88,bindings/pyroot/pythonizations/test/pythonization_decorator.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py,1,['test'],['tests']
Testability,# Some tests have un-redirected echo commands to help debug test failures.; # Buffer our output and return it to the caller.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:7,test,tests,7,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,2,['test'],"['test', 'tests']"
Testability,"# Somehow redundant, but good to test with real syntax",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/titer_iterator.py:33,test,test,33,bindings/pyroot/pythonizations/test/titer_iterator.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/titer_iterator.py,1,['test'],['test']
Testability,# Specify LINKTEST via `--test`. Default value is './link_test'.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/abtest.py:26,test,test,26,interpreter/llvm-project/llvm/utils/abtest.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/abtest.py,1,['test'],['test']
Testability,"# Split dataset by event number for training and testing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/tmva100_DataPreparation.py:49,test,testing,49,tutorials/tmva/tmva100_DataPreparation.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/tmva100_DataPreparation.py,1,['test'],['testing']
Testability,# Suite names are not necessarily unique. Include object identity in sort; # key to avoid mixing tests of different suites.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/reports.py:97,test,tests,97,interpreter/llvm-project/llvm/utils/lit/lit/reports.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/reports.py,1,['test'],['tests']
Testability,# TODO(bchetioui): match count directives more finely. We skip directives; # starting with 'CHECK-COUNT-' for the moment as they require more complex; # logic to be handled correctly.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/filecheck_lint/filecheck_lint.py:153,log,logic,153,interpreter/llvm-project/llvm/utils/filecheck_lint/filecheck_lint.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/filecheck_lint/filecheck_lint.py,1,['log'],['logic']
Testability,"# TODO(yln): interferes with progress bar; # Some tests use threads internally, and at least on Linux each of these; # threads counts toward the current process limit. Try to raise the (soft); # process limit so that tests don't fail due to resource exhaustion.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py:50,test,tests,50,interpreter/llvm-project/llvm/utils/lit/lit/run.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py,2,['test'],['tests']
Testability,"# TODO: #assert c_overload.__dispatch__('get_int', 'b_overload*')(c, b_overload()) == 13",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_overloads.py:9,assert,assert,9,bindings/pyroot/cppyy/cppyy/test/test_overloads.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_overloads.py,1,['assert'],['assert']
Testability,"# TODO: Many tests work across many language standards. Before; # https://discourse.llvm.org/t/lit-run-a-run-line-multiple-times-with-different-replacements/64932; # has a solution, provide substitutions to conveniently try every standard with LIT_CLANG_STD_GROUP.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py:13,test,tests,13,interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,1,['test'],['tests']
Testability,"# TODO: Need to test this in other platforms",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py:16,test,test,16,interpreter/cling/tools/packaging/cpt.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py,1,['test'],['test']
Testability,# TODO: compare data in old and new dataframes using statistical tests; # to check if they belong to the same distribution,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBenchmark.py:65,test,tests,65,interpreter/llvm-project/clang/utils/analyzer/SATestBenchmark.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBenchmark.py,1,['test'],['tests']
Testability,"# TODO: currently only classes are checked; typedefs of builtin types are; # mapped through the type mapper and as such can be anything; #assert ns.A.Val != ns.B.Val; #assert type(ns.A.Val(1)) == int; #assert type(ns.B.Val(1)) == float",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py:138,assert,assert,138,bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py,3,['assert'],['assert']
Testability,"# TODO: raises TypeError; the problem is that the type is resolved; # from UsingPtr::Test*const& to UsingPtr::Test*& (ie. `const` is lost); # assert ns.testfun[""UsingPtr::testptr""](cppyy.nullptr)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_templates.py:85,Test,Test,85,bindings/pyroot/cppyy/cppyy/test/test_templates.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_templates.py,5,"['Test', 'assert', 'test']","['Test', 'assert', 'testfun', 'testptr']"
Testability,"# TODO: this calls a conversion to int ...; #m.resize(cppyy.gbl.Eigen.NoChange_t(), 3); #assert m.rows() == 2; #assert m.cols() == 3",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_eigen.py:89,assert,assert,89,bindings/pyroot/cppyy/cppyy/test/test_eigen.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_eigen.py,2,['assert'],['assert']
Testability,"# TODO: vpadulan; # This module enables pickling/unpickling of the std::runtime_error Python proxy; # defined in cppyy (via CPPExcInstance). The same logic should be implemented; # in the CPython extension to be more generic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_runtime_error.py:150,log,logic,150,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_runtime_error.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_runtime_error.py,1,['log'],['logic']
Testability,"# TODO: why does the following fail, but succeed for shared_ptr??; # assert move_unique_ptr(std.move(dd)) == 100",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_cpp11features.py:69,assert,assert,69,bindings/pyroot/cppyy/cppyy/test/test_cpp11features.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_cpp11features.py,1,['assert'],['assert']
Testability,"# TODO:; # - struct improvements (flexible arrays, packed &; # unpacked, alignment); # - objective-c qualified id; # - anonymous / transparent unions; # - VLAs; # - block types; # - K&R functions; # - pass arguments of different types (test extension, transparent union); # - varargs; ###; # Actual type types",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/ABITest/TypeGen.py:236,test,test,236,interpreter/llvm-project/clang/utils/ABITest/TypeGen.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/ABITest/TypeGen.py,1,['test'],['test']
Testability,"# Test @pythonization where class_name (wrongly) includes namespace",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py:2,Test,Test,2,bindings/pyroot/pythonizations/test/pythonization_decorator.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py,1,['Test'],['Test']
Testability,"# Test @pythonization('', is_prefix=True)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py:2,Test,Test,2,bindings/pyroot/pythonizations/test/pythonization_decorator.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py,1,['Test'],['Test']
Testability,"# Test @pythonization('', ns='NS', is_prefix=True)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py:2,Test,Test,2,bindings/pyroot/pythonizations/test/pythonization_decorator.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py,1,['Test'],['Test']
Testability,"# Test @pythonization('MyClass')",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py:2,Test,Test,2,bindings/pyroot/pythonizations/test/pythonization_decorator.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py,1,['Test'],['Test']
Testability,"# Test @pythonization('NS::MyClass')",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py:2,Test,Test,2,bindings/pyroot/pythonizations/test/pythonization_decorator.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py,1,['Test'],['Test']
Testability,"# Test @pythonization('NS::Prefix', is_prefix=True)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py:2,Test,Test,2,bindings/pyroot/pythonizations/test/pythonization_decorator.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py,1,['Test'],['Test']
Testability,"# Test @pythonization('Prefix', is_prefix=True)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py:2,Test,Test,2,bindings/pyroot/pythonizations/test/pythonization_decorator.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py,1,['Test'],['Test']
Testability,"# Test @pythonization(['MyClass', 'MyClass'])",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py:2,Test,Test,2,bindings/pyroot/pythonizations/test/pythonization_decorator.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py,1,['Test'],['Test']
Testability,"# Test @pythonization(['OneClass', 'AnotherClass'])",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py:2,Test,Test,2,bindings/pyroot/pythonizations/test/pythonization_decorator.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py,1,['Test'],['Test']
Testability,"# Test @pythonization(['OneClass', 'AnotherClass'], ns='NS')",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py:2,Test,Test,2,bindings/pyroot/pythonizations/test/pythonization_decorator.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py,1,['Test'],['Test']
Testability,"# Test @pythonization(['OnePrefix', 'AnotherPrefix'], is_prefix=True)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py:2,Test,Test,2,bindings/pyroot/pythonizations/test/pythonization_decorator.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py,1,['Test'],['Test']
Testability,"# Test @pythonization(['OnePrefix', 'AnotherPrefix'], ns='NS', is_prefix=True)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py:2,Test,Test,2,bindings/pyroot/pythonizations/test/pythonization_decorator.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py,1,['Test'],['Test']
Testability,"# Test RDataFrame integration",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:2,Test,Test,2,bindings/pyroot/pythonizations/test/numbadeclare.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py,1,['Test'],['Test']
Testability,"# Test aliases",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/ttree_branch.py:2,Test,Test,2,bindings/pyroot/pythonizations/test/ttree_branch.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/ttree_branch.py,1,['Test'],['Test']
Testability,"# Test an overload that uses the original Branch proxy",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/ttree_branch.py:2,Test,Test,2,bindings/pyroot/pythonizations/test/ttree_branch.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/ttree_branch.py,1,['Test'],['Test']
Testability,"# Test an overload that uses the original SetBranchAddress proxy",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/ttree_setbranchaddress.py:2,Test,Test,2,bindings/pyroot/pythonizations/test/ttree_setbranchaddress.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/ttree_setbranchaddress.py,1,['Test'],['Test']
Testability,"# Test attributes",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:2,Test,Test,2,bindings/pyroot/pythonizations/test/numbadeclare.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py,1,['Test'],['Test']
Testability,"# Test both GNN on some simulated events",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_SOFIE_GNN.py:2,Test,Test,2,tutorials/tmva/TMVA_SOFIE_GNN.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_SOFIE_GNN.py,1,['Test'],['Test']
Testability,# Test classes.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:2,Test,Test,2,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py,1,['Test'],['Test']
Testability,"# Test cling integration",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:2,Test,Test,2,bindings/pyroot/pythonizations/test/numbadeclare.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py,1,['Test'],['Test']
Testability,"# Test column names",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_makenumpy.py:2,Test,Test,2,bindings/pyroot/pythonizations/test/rdataframe_makenumpy.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_makenumpy.py,1,['Test'],['Test']
Testability,"# Test comparison with None",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tobject_comparisonops.py:2,Test,Test,2,bindings/pyroot/pythonizations/test/tobject_comparisonops.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tobject_comparisonops.py,2,['Test'],['Test']
Testability,"# Test comparison with no TObject",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tobject_comparisonops.py:2,Test,Test,2,bindings/pyroot/pythonizations/test/tobject_comparisonops.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tobject_comparisonops.py,6,['Test'],['Test']
Testability,"# Test extreme cases with long ints",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py:2,Test,Test,2,bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,1,['Test'],['Test']
Testability,"# Test fall-back to __repr__",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pretty_printing.py:2,Test,Test,2,bindings/pyroot/pythonizations/test/pretty_printing.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pretty_printing.py,1,['Test'],['Test']
Testability,# Test getting implicit output file,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/test_check_cfc.py:2,Test,Test,2,interpreter/llvm-project/clang/utils/check_cfc/test_check_cfc.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/test_check_cfc.py,1,['Test'],['Test']
Testability,# Test identifying input file with quotes,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/test_check_cfc.py:2,Test,Test,2,interpreter/llvm-project/clang/utils/check_cfc/test_check_cfc.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/test_check_cfc.py,1,['Test'],['Test']
Testability,# Test if it is a source file,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py:2,Test,Test,2,interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/check_cfc.py,1,['Test'],['Test']
Testability,"# Test inherited class",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pretty_printing.py:2,Test,Test,2,bindings/pyroot/pythonizations/test/pretty_printing.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pretty_printing.py,1,['Test'],['Test']
Testability,"# Test instantiation + model arg as tuple",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_histo_profile.py:2,Test,Test,2,bindings/pyroot/pythonizations/test/rdataframe_histo_profile.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_histo_profile.py,1,['Test'],['Test']
Testability,"# Test mean",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_makenumpy.py:2,Test,Test,2,bindings/pyroot/pythonizations/test/rdataframe_makenumpy.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_makenumpy.py,1,['Test'],['Test']
Testability,# Test metric values.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:2,Test,Test,2,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py,1,['Test'],['Test']
Testability,"# Test model arg as tuple",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_histo_profile.py:2,Test,Test,2,bindings/pyroot/pythonizations/test/rdataframe_histo_profile.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_histo_profile.py,1,['Test'],['Test']
Testability,# Test multiple quotes,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/test_check_cfc.py:2,Test,Test,2,interpreter/llvm-project/clang/utils/check_cfc/test_check_cfc.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/test_check_cfc.py,1,['Test'],['Test']
Testability,"# Test optional name",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:2,Test,Test,2,bindings/pyroot/pythonizations/test/numbadeclare.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py,1,['Test'],['Test']
Testability,# Test output is specified,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/test_check_cfc.py:2,Test,Test,2,interpreter/llvm-project/clang/utils/check_cfc/test_check_cfc.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/test_check_cfc.py,1,['Test'],['Test']
Testability,# Test output not specified,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/test_check_cfc.py:2,Test,Test,2,interpreter/llvm-project/clang/utils/check_cfc/test_check_cfc.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/test_check_cfc.py,1,['Test'],['Test']
Testability,"# Test overloads",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/ttree_branch.py:2,Test,Test,2,bindings/pyroot/pythonizations/test/ttree_branch.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/ttree_branch.py,2,['Test'],['Test']
Testability,"# Test passing as target an iterable that is not a list",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py:2,Test,Test,2,bindings/pyroot/pythonizations/test/pythonization_decorator.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py,1,['Test'],['Test']
Testability,"# Test pythonization of already instantiated classes",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py:2,Test,Test,2,bindings/pyroot/pythonizations/test/pythonization_decorator.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py,1,['Test'],['Test']
Testability,"# Test pythonizor with a single parameter (the class proxy)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py:2,Test,Test,2,bindings/pyroot/pythonizations/test/pythonization_decorator.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py,1,['Test'],['Test']
Testability,"# Test pythonizor with wrong number of parameters",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py:2,Test,Test,2,bindings/pyroot/pythonizations/test/pythonization_decorator.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py,1,['Test'],['Test']
Testability,"# Test refcounts",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:2,Test,Test,2,bindings/pyroot/pythonizations/test/numbadeclare.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py,1,['Test'],['Test']
Testability,# Test removing last thing in path,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/test_check_cfc.py:2,Test,Test,2,interpreter/llvm-project/clang/utils/check_cfc/test_check_cfc.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/test_check_cfc.py,1,['Test'],['Test']
Testability,# Test removing non-canonical path,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/test_check_cfc.py:2,Test,Test,2,interpreter/llvm-project/clang/utils/check_cfc/test_check_cfc.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/test_check_cfc.py,1,['Test'],['Test']
Testability,# Test removing one entry and leaving others; # Also tests removing repeated path,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/test_check_cfc.py:2,Test,Test,2,interpreter/llvm-project/clang/utils/check_cfc/test_check_cfc.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/check_cfc/test_check_cfc.py,2,"['Test', 'test']","['Test', 'tests']"
Testability,# Test result codes.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:2,Test,Test,2,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py,1,['Test'],['Test']
Testability,# Test results.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:2,Test,Test,2,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py,1,['Test'],['Test']
Testability,"# Test stacking of @pythonization decorators",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py:2,Test,Test,2,bindings/pyroot/pythonizations/test/pythonization_decorator.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py,1,['Test'],['Test']
Testability,"# Test that @pythonization filters out non-matching classes",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py:2,Test,Test,2,bindings/pyroot/pythonizations/test/pythonization_decorator.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pythonization_decorator.py,1,['Test'],['Test']
Testability,# Test that an empty rsp file fails.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect_test/test.py:2,Test,Test,2,interpreter/llvm-project/llvm/utils/rsp_bisect_test/test.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect_test/test.py,1,['Test'],['Test']
Testability,# Test that an rsp file with one path and one extra arg succeeds.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect_test/test.py:2,Test,Test,2,interpreter/llvm-project/llvm/utils/rsp_bisect_test/test.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect_test/test.py,1,['Test'],['Test']
Testability,# Test that an rsp file with one path succeeds.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect_test/test.py:2,Test,Test,2,interpreter/llvm-project/llvm/utils/rsp_bisect_test/test.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect_test/test.py,1,['Test'],['Test']
Testability,# Test that an rsp file with three paths and one extra arg succeeds.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect_test/test.py:2,Test,Test,2,interpreter/llvm-project/llvm/utils/rsp_bisect_test/test.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect_test/test.py,1,['Test'],['Test']
Testability,# Test that an rsp file without any paths fails.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect_test/test.py:2,Test,Test,2,interpreter/llvm-project/llvm/utils/rsp_bisect_test/test.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect_test/test.py,1,['Test'],['Test']
Testability,"# Test that comparison operators enable list sorting",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tobject_comparisonops.py:2,Test,Test,2,bindings/pyroot/pythonizations/test/tobject_comparisonops.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/tobject_comparisonops.py,3,['Test'],['Test']
Testability,# Test that each non-undef result lane contains the expected value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py:2,Test,Test,2,interpreter/llvm-project/llvm/utils/shuffle_fuzz.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py,1,['Test'],['Test']
Testability,"# Test that rename argument has worked",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/rooworkspace.py:2,Test,Test,2,bindings/pyroot/pythonizations/test/roofit/rooworkspace.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/rooworkspace.py,1,['Test'],['Test']
Testability,"# Test the PCA",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/math/principal.py:2,Test,Test,2,tutorials/math/principal.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/math/principal.py,1,['Test'],['Test']
Testability,# Test the projects.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:2,Test,Test,2,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,1,['Test'],['Test']
Testability,"# Test to check if new functions are created",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/rooworkspace.py:2,Test,Test,2,bindings/pyroot/pythonizations/test/roofit/rooworkspace.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/rooworkspace.py,1,['Test'],['Test']
Testability,"# Test to check if new p.d.f.s are created",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/rooworkspace.py:2,Test,Test,2,bindings/pyroot/pythonizations/test/roofit/rooworkspace.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/rooworkspace.py,2,['Test'],['Test']
Testability,"# Test to check if new variables are created",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/rooworkspace.py:2,Test,Test,2,bindings/pyroot/pythonizations/test/roofit/rooworkspace.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/rooworkspace.py,2,['Test'],['Test']
Testability,"# Test whether this attribute was inherited",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_cpp11features.py:2,Test,Test,2,bindings/pyroot/cppyy/cppyy/test/test_cpp11features.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_cpp11features.py,1,['Test'],['Test']
Testability,"# Test wrappings",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py:2,Test,Test,2,bindings/pyroot/pythonizations/test/numbadeclare.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/numbadeclare.py,1,['Test'],['Test']
Testability,"# Tests",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/array_interface.py:2,Test,Tests,2,bindings/pyroot/pythonizations/test/array_interface.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/array_interface.py,41,['Test'],['Tests']
Testability,"# Tests; # Basic type and array do not actually need the pythonization,; # but testing anyway for the sake of completeness",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/ttree_branch.py:2,Test,Tests,2,bindings/pyroot/pythonizations/test/ttree_branch.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/ttree_branch.py,2,"['Test', 'test']","['Tests', 'testing']"
Testability,"# Tests; # Basic type, array and struct leaf list do not actually need the pythonization,; # but testing anyway for the sake of completeness",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/ttree_setbranchaddress.py:2,Test,Tests,2,bindings/pyroot/pythonizations/test/ttree_setbranchaddress.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/ttree_setbranchaddress.py,2,"['Test', 'test']","['Tests', 'testing']"
Testability,# The current implementation needs psutil on some platforms to set; # a timeout per test. Check it's available.; # See lit.util.killProcessAndChildren(),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py:84,test,test,84,interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py,1,['test'],['test']
Testability,"# The following create a unique type for fixed-size C arrays: ctypes.c_char_Array_9; # and neither inherits from a non-sized type nor implements the buffer interface.; # As such, it can't be handled. TODO?; #pbuf = ctypes.create_string_buffer(len(buf), buf); #assert f(pbuf, len(buf)) == total",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py:260,assert,assert,260,bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,1,['assert'],['assert']
Testability,# The log file name.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:6,log,log,6,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,1,['log'],['log']
Testability,# The metrics reported by this test.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:31,test,test,31,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py,1,['test'],['test']
Testability,# The micro-test results reported by this test.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:12,test,test,12,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py,2,['test'],['test']
Testability,# The name of the test runner.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py:18,test,test,18,interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py,1,['test'],['test']
Testability,"# The previous test elapsed time, if applicable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:15,test,test,15,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py,1,['test'],['test']
Testability,"# The previous test failure state, if applicable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:15,test,test,15,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py,1,['test'],['test']
Testability,"# The purpose of an ""@echo"" command is merely to add a debugging message; # directly to lit's output. It is used internally by lit's internal; # shell and is not currently documented for use in lit tests. However,; # if someone misuses it (e.g., both ""echo"" and ""@echo"" complain about; # stdin redirection), produce the normal execution trace to facilitate; # debugging.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:198,test,tests,198,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,1,['test'],['tests']
Testability,"# The same plot for the control sample slice. We do this with a different; # approach this time, for illustration purposes. Here, we are slicing the; # dataset and then use the data slice for the projection, because then the; # RooFit::Slice() becomes unnecessary. This approach is more general,; # because you can plot sums of slices by using logical or in the Cut(); # command.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf501_simultaneouspdf.py:344,log,logical,344,tutorials/roofit/rf501_simultaneouspdf.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf501_simultaneouspdf.py,1,['log'],['logical']
Testability,"# The series of tests below mostly exists already in other places, but these; # were used as examples for the CaaS' cppyy presentation and are preserved here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_doc_features.py:16,test,tests,16,bindings/pyroot/cppyy/cppyy/test/test_doc_features.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_doc_features.py,1,['test'],['tests']
Testability,# The test output.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:6,test,test,6,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py,1,['test'],['test']
Testability,"# The test result, once complete.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:6,test,test,6,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py,1,['test'],['test']
Testability,# The test suite configuration.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:6,test,test,6,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py,1,['test'],['test']
Testability,"# The wall timing to execute the test, if timing.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:33,test,test,33,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py,1,['test'],['test']
Testability,# There is no reason to cache successful tests because we will; # always reduce the changeset when we see one.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/token-delta.py:41,test,tests,41,interpreter/llvm-project/clang/utils/token-delta.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/token-delta.py,1,['test'],['tests']
Testability,# This data is no longer needed but keeping it around causes awful; # performance problems while the test suites run.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:101,test,test,101,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,1,['test'],['test']
Testability,"# This doesn't look like a valid gtest file. This can; # have a number of causes, none of them good. For; # instance, we could have created a broken executable.; # Alternatively, someone has cruft in their test; # directory. If we don't return a test here, then no; # failures will get reported, so return a dummy test name; # so that the failure is reported later.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py:206,test,test,206,interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py,3,['test'],['test']
Testability,# This is the default when regenerating existing tests. The default when; # generating new tests is determined by DEFAULT_VERSION.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py:49,test,tests,49,interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py,2,['test'],['tests']
Testability,# This list is used by TestRunner.py to restrict running only tests that; # require one of the features in this list if this list is non-empty.; # Configurations can set this list to restrict the set of tests to run.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py:23,Test,TestRunner,23,interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py,3,"['Test', 'test']","['TestRunner', 'tests']"
Testability,# This logic differs from upstream list2cmdline.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:7,log,logic,7,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,1,['log'],['logic']
Testability,# Try to make implicit int an error for more sensible test output,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py:54,test,test,54,interpreter/llvm-project/clang/utils/creduce-clang-crash.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/creduce-clang-crash.py,1,['test'],['test']
Testability,# Tune logging level.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py:7,log,logging,7,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/__init__.py,1,['log'],['logging']
Testability,"# Update local test object ""in place"" from remote test object. This; # ensures that the original test object which is used for printing test; # results reflects the changes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py:15,test,test,15,interpreter/llvm-project/llvm/utils/lit/lit/run.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py,4,['test'],['test']
Testability,"# Verbose mode of the test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/import_load_libs.py:22,test,test,22,bindings/pyroot/pythonizations/test/import_load_libs.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/import_load_libs.py,1,['test'],['test']
Testability,"# We found a test suite, create a new config for it and load it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:13,test,test,13,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,1,['test'],['test']
Testability,# We only use the last line of the function body for stress tests.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py:60,test,tests,60,interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py,1,['test'],['tests']
Testability,# We saw the option after already reading some test input lines.; # Warn about it.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py:47,test,test,47,interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/UpdateTestChecks/common.py,1,['test'],['test']
Testability,"# When running multiple shards, don't include skipped tests in the xunit; # output since merging the files will result in duplicates.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/main.py:54,test,tests,54,interpreter/llvm-project/llvm/utils/lit/lit/main.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/main.py,1,['test'],['tests']
Testability,"# Within lit, we try to always add '%dbg(...)' to command lines in order; # to maximize debuggability. However, custom lit test formats might not; # always add it, so add a generic debug message in that case.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:123,test,test,123,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,1,['test'],['test']
Testability,"# You should see in the previous fit result that the fit did not converge:; # the `MINIMIZE` return code should be -1 (a successful fit has status code zero).; # To improve the situation, we can apply a numeric trick: if we subtract in; # each bin a constant counterterm \f[n\log(n/N)\f], we get terms for each; # bin that are closer to each other in order of magnitude as long as the; # initial model is not extremely off. Proving this mathematically is left; # as an exercise to the reader.; # This counterterms can be enabled by passing the Offset(""bin"") option to; # RooAbsPdf::fitTo() or RooAbsPdf::createNLL().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf614_binned_fit_problems.py:276,log,log,276,tutorials/roofit/rf614_binned_fit_problems.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf614_binned_fit_problems.py,1,['log'],['log']
Testability,"# \file; # \ingroup tutorial_dataframe; #; # Configure a Dask connection to a HTCondor cluster hosted by the CERN batch; # service. To reproduce this tutorial, run the following steps:; #; # 1. Login to lxplus; # 2. Source an LCG release (minimum LCG104). See; # https://lcgdocs.web.cern.ch/lcgdocs/lcgreleases/introduction/ for details; # 3. Install the `dask_lxplus` package, which provides the `CernCluster` class; # needed to properly connect to the CERN condor pools. See; # https://batchdocs.web.cern.ch/specialpayload/dask.html for instructions; # 4. Run this tutorial; #; # The tutorial defines resources that each job will request to the condor; # scheduler, then creates a Dask client that can be used by RDataFrame to; # distribute computations.; #; # \macro_code; #; # \date September 2023; # \author Vincenzo Eduardo Padulano CERN",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/distrdf004_dask_lxbatch.py:194,Log,Login,194,tutorials/dataframe/distrdf004_dask_lxbatch.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/distrdf004_dask_lxbatch.py,1,['Log'],['Login']
Testability,"# \file; # \ingroup tutorial_roostats; # \notebook -js; # A hypothesis testing example based on number counting with background uncertainty.; #; # A hypothesis testing example based on number counting; # with background uncertainty.; #; # NOTE: This example is like HybridInstructional, but the model is more clearly; # generalizable to an analysis with shapes. There is a lot of flexibility; # for how one models a problem in RooFit/RooStats. Models come in a few; # common forms:; # - standard form: extended PDF of some discriminating variable m:; # eg: P(m) ~ S*fs(m) + B*fb(m), with S+B events expected; # in this case the dataset has N rows corresponding to N events; # and the extended term is Pois(N|S+B); #; # - fractional form: non-extended PDF of some discriminating variable m:; # eg: P(m) ~ s*fs(m) + (1-s)*fb(m), where s is a signal fraction; # in this case the dataset has N rows corresponding to N events; # and there is no extended term; #; # - number counting form: in which there is no discriminating variable; # and the counts are modeled directly (see HybridInstructional); # eg: P(N) = Pois(N|S+B); # in this case the dataset has 1 row corresponding to N events; # and the extended term is the PDF itself.; #; # Here we convert the number counting form into the standard form by; # introducing a dummy discriminating variable m with a uniform distribution.; #; # This example:; # - demonstrates the usage of the HybridCalcultor (Part 4-6); # - demonstrates the numerical integration of RooFit (Part 2); # - validates the RooStats against an example with a known analytic answer; # - demonstrates usage of different test statistics; # - explains subtle choices in the prior used for hybrid methods; # - demonstrates usage of different priors for the nuisance parameters; # - demonstrates usage of PROOF; #; # The basic setup here is that a main measurement has observed x events with an; # expectation of s+b. One can choose an ad hoc prior for the uncertainty on b,; # or try to ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py:71,test,testing,71,tutorials/roostats/HybridStandardForm.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py,2,['test'],['testing']
Testability,"# \file; # \ingroup tutorial_roostats; # \notebook -js; # Example demonstrating usage of HybridCalcultor; #; # A hypothesis testing example based on number counting; # with background uncertainty.; #; # NOTE: This example must be run with the ACLIC (the + option ) due to the; # new class that is defined.; #; # This example:; # - demonstrates the usage of the HybridCalcultor (Part 4-6); # - demonstrates the numerical integration of RooFit (Part 2); # - validates the RooStats against an example with a known analytic answer; # - demonstrates usage of different test statistics; # - explains subtle choices in the prior used for hybrid methods; # - demonstrates usage of different priors for the nuisance parameters; # - demonstrates usage of PROOF; #; # The basic setup here is that a main measurement has observed x events with an; # expectation of s+b. One can choose an ad hoc prior for the uncertainty on b,; # or try to base it on an auxiliary measurement. In this case, the auxiliary; # measurement (aka control measurement, sideband) is another counting experiment; # with measurement y and expectation tau*b. With an 'original prior' on b,; # called \f$\eta(b)\f$ then one can obtain a posterior from the auxiliary measurement; # \f$\pi(b) = \eta(b) * Pois(y|tau*b).\f$ This is a principled choice for a prior; # on b in the main measurement of x, which can then be treated in a hybrid; # Bayesian/Frequentist way. Additionally, one can try to treat the two; # measurements simultaneously, which is detailed in Part 6 of the tutorial.; #; # This tutorial is related to the FourBin.C tutorial in the modeling, but; # focuses on hypothesis testing instead of interval estimation.; #; # More background on this 'prototype problem' can be found in the; # following papers:; #; # - Evaluation of three methods for calculating statistical significance; # when incorporating a systematic uncertainty into a test of the; # background-only hypothesis for a Poisson process; # Authors: Robert D. Cous",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py:124,test,testing,124,tutorials/roostats/HybridInstructional.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py,2,['test'],"['test', 'testing']"
Testability,"# \file; # \ingroup tutorial_roostats; # \notebook -js; # TwoSidedFrequentistUpperLimitWithBands; #; #; # This is a standard demo that can be used with any ROOT file; # prepared in the standard way. You specify:; # - name for input ROOT file; # - name of workspace inside ROOT file that holds model and data; # - name of ModelConfig that specifies details for calculator tools; # - name of dataset; #; # With default parameters the macro will attempt to run the; # standard hist2workspace example and read the ROOT file; # that it produces.; #; # You may want to control:; # ~~~{.cpp}; # double confidenceLevel=0.95;; # double additionalToysFac = 1.;; # int nPointsToScan = 12;; # int nToyMC = 200;; # ~~~; #; # This uses a modified version of the profile likelihood ratio as; # a test statistic for upper limits (eg. test stat = 0 if muhat>mu).; #; # Based on the observed data, one defines a set of parameter points; # to be tested based on the value of the parameter of interest; # and the conditional MLE (eg. profiled) values of the nuisance parameters.; #; # At each parameter point, pseudo-experiments are generated using this; # fixed reference model and then the test statistic is evaluated.; # The auxiliary measurements (global observables) associated with the; # constraint terms in nuisance parameters are also fluctuated in the; # process of generating the pseudo-experiments in a frequentist manner; # forming an 'unconditional ensemble'. One could form a 'conditional'; # ensemble in which these auxiliary measurements are fixed. Note that the; # nuisance parameters are not randomized, which is a Bayesian procedure.; # Note, the nuisance parameters are floating in the fits. For each point,; # the threshold that defines the 95% acceptance region is found. This; # forms a ""Confidence Belt"".; #; # After constructing the confidence belt, one can find the confidence; # interval for any particular dataset by finding the intersection; # of the observed test statistic and the confiden",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py:781,test,test,781,tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py,3,['test'],"['test', 'tested']"
Testability,"# according to warnings, can't test ""import *"" ...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py:31,test,test,31,bindings/pyroot/cppyy/cppyy/test/test_fragile.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py,1,['test'],['test']
Testability,"# additional test from CPython's test suite",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py:13,test,test,13,bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,2,['test'],['test']
Testability,"# after CPython's Lib/test/seq_tests.py",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py:22,test,test,22,bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,1,['test'],['test']
Testability,"# as above, no strings; #assert type2test(c for c in ""123"") == type2test(""123"")",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py:25,assert,assert,25,bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,1,['assert'],['assert']
Testability,"# assert b1.ref_value == 42",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_templates.py:2,assert,assert,2,bindings/pyroot/cppyy/cppyy/test/test_templates.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_templates.py,1,['assert'],['assert']
Testability,"# assert b2.ref_value == 42",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_templates.py:2,assert,assert,2,bindings/pyroot/cppyy/cppyy/test/test_templates.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_templates.py,1,['assert'],['assert']
Testability,# assert base(lo) <= N < base(hi),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/ABITest/Enumeration.py:2,assert,assert,2,interpreter/llvm-project/clang/utils/ABITest/Enumeration.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/ABITest/Enumeration.py,1,['assert'],['assert']
Testability,"# assert not hasattr(cppyy.gbl, 'nullptr')",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_cpp11features.py:2,assert,assert,2,bindings/pyroot/cppyy/cppyy/test/test_cpp11features.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_cpp11features.py,1,['assert'],['assert']
Testability,"# assert t1 != t3 # fails to link (?!)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py:2,assert,assert,2,bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,1,['assert'],['assert']
Testability,"# assert(reduce(set.union, sets, set()) == c); # If there is nothing left we can remove, we are done.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/token-delta.py:2,assert,assert,2,interpreter/llvm-project/clang/utils/token-delta.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/token-delta.py,1,['assert'],['assert']
Testability,# benchmark subcommand,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATest.py:2,benchmark,benchmark,2,interpreter/llvm-project/clang/utils/analyzer/SATest.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATest.py,1,['benchmark'],['benchmark']
Testability,"# bit of regression testing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_templates.py:20,test,testing,20,bindings/pyroot/cppyy/cppyy/test/test_templates.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_templates.py,1,['test'],['testing']
Testability,"# can only recover once from each error on Windows, which is functionally; # enough, but precludes further testing here (change: now drop all, see above,; # as on some MSVC builds, no signals are caught ??)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py:107,test,testing,107,bindings/pyroot/cppyy/cppyy/test/test_fragile.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py,1,['test'],['testing']
Testability,"# debugging: run a test build",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/create_src_directory.py:19,test,test,19,bindings/pyroot/cppyy/cppyy-backend/cling/create_src_directory.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/create_src_directory.py,1,['test'],['test']
Testability,"# error testing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py:8,test,testing,8,bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,2,['test'],['testing']
Testability,"# evaluate model in test mode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/Conv1dModelGenerator.py:20,test,test,20,tmva/sofie/test/Conv1dModelGenerator.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/Conv1dModelGenerator.py,5,['test'],['test']
Testability,# exposed for testing since the order of files returned by glob is not guaranteed to be sorted,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py:14,test,testing,14,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/report.py,1,['test'],['testing']
Testability,"# firstPOI.setMin(0); # firstPOI.setMax(10); # -------------------------------------------------------; # create and use the FeldmanCousins tool; # to find and plot the 95% confidence interval; # on the parameter of interest as specified; # in the model config; # REMEMBER, we will change the test statistic; # so this is NOT a Feldman-Cousins interval",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py:293,test,test,293,tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py,1,['test'],['test']
Testability,"# for 2-d plots to inspect correlations:; # wspace.defineSet(""poi"",""s,rho""); # test simpler cases where parameters are known.; # wspace[""tau""].setConstant(); # wspace[""rho""].setConstant(); # wspace[""b""].setConstant(); # wspace[""bbar""].setConstant(); # inspect workspace; # wspace.Print(); # ----------------------------------------------------------; # Generate toy data; # generate toy data assuming current value of the parameters; # import into workspace.; # add Verbose() to see how it's being generated",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/FourBinInstructional.py:79,test,test,79,tutorials/roostats/FourBinInstructional.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/FourBinInstructional.py,1,['test'],['test']
Testability,"# for example: TCut mycutb = ""abs(var1)<0.5"";; # Tell the factory how to use the training and testing events; # If no numbers of events are given, half of the events in the tree are used; # for training, and the other half for testing:; # loader.PrepareTrainingAndTestTree( mycut, ""SplitMode=random:!V"" );; # It is possible also to specify the number of training and testing events,; # note we disable the computation of the correlation matrix of the input variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_CNN_Classification.py:94,test,testing,94,tutorials/tmva/TMVA_CNN_Classification.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_CNN_Classification.py,3,['test'],['testing']
Testability,"# for example: TCut mycutb = ""abs(var1)<0.5"";; # Tell the factory how to use the training and testing events; #; # If no numbers of events are given, half of the events in the tree are used; # for training, and the other half for testing:; # loader->PrepareTrainingAndTestTree( mycut, ""SplitMode=random:!V"" );; # To also specify the number of testing events, use:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_Higgs_Classification.py:94,test,testing,94,tutorials/tmva/TMVA_Higgs_Classification.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_Higgs_Classification.py,3,['test'],['testing']
Testability,"# further usage is tested in datatypes.py:test15_nullptr_passing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_cpp11features.py:19,test,tested,19,bindings/pyroot/cppyy/cppyy/test/test_cpp11features.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_cpp11features.py,1,['test'],['tested']
Testability,"# get a parameter point from the list of points to test.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/rs401c_FeldmanCousins.py:51,test,test,51,tutorials/roostats/rs401c_FeldmanCousins.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/rs401c_FeldmanCousins.py,1,['test'],['test']
Testability,"# get observed UL and value of test statistic evaluated there",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py:31,test,test,31,tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py,1,['test'],['test']
Testability,"# get test stat at observed UL in observed data",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py:6,test,test,6,tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py,1,['test'],['test']
Testability,"# https://github.com/root-project/root/issues/12817; # The threshold for the memory used is generously chosen to avoid tests; # spuriously failing b/c of fluctuations and is also well below the; # memory needed before the fix to the issue mentioned above, i.e. about; # 4 GB and several minutes to complete (!)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pretty_printing.py:119,test,tests,119,bindings/pyroot/pythonizations/test/pretty_printing.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/pretty_printing.py,1,['test'],['tests']
Testability,"# if you wanted to use the ad hoc Gaussian prior instead; # ~~~; # hc1.ForcePriorNuisanceAlt(w.pdf(""gauss_prior"")); # hc1.ForcePriorNuisanceNull(w.pdf(""gauss_prior"")); # ~~~; # if you wanted to use the ad hoc log-normal prior instead; # ~~~; # hc1.ForcePriorNuisanceAlt(w.pdf(""lognorm_prior"")); # hc1.ForcePriorNuisanceNull(w.pdf(""lognorm_prior"")); # ~~~; # these lines save current msg level and then kill any messages below ERROR",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py:209,log,log-normal,209,tutorials/roostats/HybridInstructional.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py,2,['log'],['log-normal']
Testability,"# if you wanted to use the ad hoc Gaussian prior instead; # ~~~; # hc2.ForcePriorNuisanceAlt(w.pdf(""gauss_prior"")); # hc2.ForcePriorNuisanceNull(w.pdf(""gauss_prior"")); # ~~~; # if you wanted to use the ad hoc log-normal prior instead; # ~~~; # hc2.ForcePriorNuisanceAlt(w.pdf(""lognorm_prior"")); # hc2.ForcePriorNuisanceNull(w.pdf(""lognorm_prior"")); # ~~~; # these lines save current msg level and then kill any messages below ERROR",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py:209,log,log-normal,209,tutorials/roostats/HybridInstructional.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py,2,['log'],['log-normal']
Testability,"# if you wanted to use the ad hoc Gaussian prior instead; # ~~~{.cpp}; # hc3.ForcePriorNuisanceAlt(w.pdf(""gauss_prior_y0"")); # hc3.ForcePriorNuisanceNull(w.pdf(""gauss_prior_y0"")); # ~~~; # choose fit-based test statistic",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py:206,test,test,206,tutorials/roostats/HybridInstructional.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py,1,['test'],['test']
Testability,"# implicit (called before other tests to check caching)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_templates.py:32,test,tests,32,bindings/pyroot/cppyy/cppyy/test/test_templates.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_templates.py,1,['test'],['tests']
Testability,"# inputFileName = ""tmva_class_example.root""; # --- Register the training and test trees",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_CNN_Classification.py:77,test,test,77,tutorials/tmva/TMVA_CNN_Classification.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_CNN_Classification.py,1,['test'],['test']
Testability,"# keep the running time short by default; # -------------------------------------------------------------------------; # # P A R T 5 : U S I N G H Y B R I D C A L C U L A T O R W I T H; # # A N A L T E R N A T I V E T E S T S T A T I S T I C; #; # A likelihood ratio test statistics should be 1-to-1 with the count x; # when the value of b is fixed in the likelihood. This is implemented; # by the SimpleLikelihoodRatioTestStat",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py:267,test,test,267,tutorials/roostats/HybridStandardForm.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py,1,['test'],['test']
Testability,"# list tables in database ""test"" (the permission tables)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/sql/sqlselect.py:27,test,test,27,tutorials/sql/sqlselect.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/sql/sqlselect.py,1,['test'],['test']
Testability,"# logic is too confusing supporting both at the same time",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py:2,log,logic,2,interpreter/cling/tools/packaging/cpt.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/cpt.py,1,['log'],['logic']
Testability,"# loop over points to test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/rs401c_FeldmanCousins.py:22,test,test,22,tutorials/roostats/rs401c_FeldmanCousins.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/rs401c_FeldmanCousins.py,1,['test'],['test']
Testability,"# loop through the points that were tested and ask confidence belt; # what the upper/lower thresholds were.; # For FeldmanCousins, the lower cut off is always 0",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py:36,test,tested,36,tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py,1,['test'],['tested']
Testability,"# move forced; #assert len(extract) == 0 # not guaranteed by the standard; # TODO: we hit boost::any_cast<int>(boost::any* operand) instead; # of the reference version which raises",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_boost.py:16,assert,assert,16,bindings/pyroot/cppyy/cppyy/test/test_boost.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_boost.py,1,['assert'],['assert']
Testability,"# namespace; # TODO: think this through ... probably want this, but interferes with; # the (new) policy of lazy lookups; #assert 'fglobal' in members # function",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py:122,assert,assert,122,bindings/pyroot/cppyy/cppyy/test/test_fragile.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py,1,['assert'],['assert']
Testability,"# not a true test, but this'll take a noticable amount of time (>1min) if; # there is a regression somehow",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py:13,test,test,13,bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,1,['test'],['test']
Testability,"# number of points to test per parameter",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/IntervalExamples.py:22,test,test,22,tutorials/roostats/IntervalExamples.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/IntervalExamples.py,2,['test'],['test']
Testability,"# number of points to test per parameter; # use the Feldman-Cousins tool",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/rs401c_FeldmanCousins.py:22,test,test,22,tutorials/roostats/rs401c_FeldmanCousins.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/rs401c_FeldmanCousins.py,1,['test'],['test']
Testability,# number of tests in a shard,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py:12,test,tests,12,interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py,1,['test'],['tests']
Testability,"# order of moving and normal functions are reversed in 1, 2, for; # overload resolution testing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_cpp11features.py:88,test,testing,88,bindings/pyroot/cppyy/cppyy/test/test_cpp11features.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_cpp11features.py,1,['test'],['testing']
Testability,# print the actual test function by dumping the generated instructions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py:19,test,test,19,interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py,1,['test'],['test']
Testability,"# profile likelihood where alternate is best fit value of signal yield; # $\lambda(0) = -log L(s=0,\hat\hat{b})/L(\hat{s},\hat{b})$",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py:89,log,log,89,tutorials/roostats/HybridInstructional.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py,1,['log'],['log']
Testability,"# query database and print results; # sql = ""select dataset,rawfilepath from test.runcatalog "" \; # ""WHERE tag&(1<<2) AND (run=490001 OR run=300122)""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/sql/sqlselect.py:77,test,test,77,tutorials/sql/sqlselect.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/sql/sqlselect.py,1,['test'],['test']
Testability,"# ratio Ntoys Null/ntoys ALT; # -------------------------------------------------------; # A New Test Statistic Class for this example.; # It simply returns the sum of the values in a particular; # column of a dataset.; # You can ignore this class and focus on the macro below",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py:97,Test,Test,97,tutorials/roostats/HybridStandardForm.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py,1,['Test'],['Test']
Testability,"# ratio Ntoys Null/ntoys ALT; # ----------------------------------; # A New Test Statistic Class for this example.; # It simply returns the sum of the values in a particular; # column of a dataset.; # You can ignore this class and focus on the macro below",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py:76,Test,Test,76,tutorials/roostats/HybridInstructional.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py,1,['Test'],['Test']
Testability,"# re.compile() has a built-in LRU cache with 512 entries. In some; # test suites lit ends up thrashing that cache, which made e.g.; # check-llvm run 50% slower. Use an explicit, unbounded cache; # to prevent that from happening. Since lit is fairly; # short-lived, since the set of substitutions is fairly small, and; # since thrashing has such bad consequences, not bounding the cache; # seems reasonable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:69,test,test,69,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,1,['test'],['test']
Testability,"# remove testing, examples, and notebook",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/create_src_directory.py:9,test,testing,9,bindings/pyroot/cppyy/cppyy-backend/cling/create_src_directory.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/create_src_directory.py,1,['test'],['testing']
Testability,"# reuse the code from the C++ unit tests to create some files",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_datasetspec.py:35,test,tests,35,tree/dataframe/test/dataframe_datasetspec.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_datasetspec.py,1,['test'],['tests']
Testability,"# save the information in the belt for plotting; # -------------------------------------------------------; # Feldman-Cousins is a unified limit by definition; # but the tool takes care of a few things for us like which values; # of the nuisance parameters should be used to generate toys.; # so let's just change the test statistic and realize this is; # no longer ""Feldman-Cousins"" but is a fully frequentist Neyman-Construction.; # fc.GetTestStatSampler().SetTestStatistic(onesided); # fc.GetTestStatSampler().SetGenerateBinned(True)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py:318,test,test,318,tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/TwoSidedFrequentistUpperLimitWithBands.py,1,['test'],['test']
Testability,"# self.assertEqual(fr3[j], expectedRess[i][j])",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_datasetspec.py:7,assert,assertEqual,7,tree/dataframe/test/dataframe_datasetspec.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_datasetspec.py,1,['assert'],['assertEqual']
Testability,"# set size of test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/rs401c_FeldmanCousins.py:14,test,test,14,tutorials/roostats/rs401c_FeldmanCousins.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/rs401c_FeldmanCousins.py,1,['test'],['test']
Testability,"# set the test statistic",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py:10,test,test,10,tutorials/roostats/HybridInstructional.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py,1,['test'],['test']
Testability,"# set the test statistic; # toymcs1.SetGenerateBinned()",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py:10,test,test,10,tutorials/roostats/HybridStandardForm.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py,1,['test'],['test']
Testability,# short validation logic,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py:19,log,logic,19,interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libscanbuild/arguments.py,1,['log'],['logic']
Testability,"# single C++ exception during overload selection: assumes this is a logic; # error and prioritizes the C++ exception",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_overloads.py:68,log,logic,68,bindings/pyroot/cppyy/cppyy/test/test_overloads.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_overloads.py,1,['log'],['logic']
Testability,"# skip the IndexErorr test: pythonization for __getitem__[index] < size(); # can not be applied strict enough (instead of an index, this could be an; # associative container, with 'index' a key, not a counter; #raises(IndexError, d.__getitem__, 1)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_pythonization.py:22,test,test,22,bindings/pyroot/cppyy/cppyy/test/test_pythonization.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_pythonization.py,1,['test'],['test']
Testability,"# so standard tutorial runs faster; # ---------------------------------------------; # OUTPUT W/O PROOF (2.66 GHz Intel Core i7); # ============================================; # -----------------------------------------; # Part 3; # Z_Bi p-value (analytic): 0.00094165; # Z_Bi significance (analytic): 3.10804; # Real time 0:00:00, CP time 0.610; # Results HybridCalculator_result:; # - Null p-value = 0.00103333 +/- 0.000179406; # - Significance = 3.08048 sigma; # - Number of S+B toys: 1000; # - Number of B toys: 30000; # - Test statistic evaluated on data: 150; # - CL_b: 0.998967 +/- 0.000185496; # - CL_s+b: 0.495 +/- 0.0158106; # - CL_s: 0.495512 +/- 0.0158272; # Real time 0:04:43, CP time 283.780; # With PROOF; # -----------------------------------------; # Part 5; # Results HybridCalculator_result:; # - Null p-value = 0.00105 +/- 0.000206022; # - Significance = 3.07571 sigma; # - Number of S+B toys: 1000; # - Number of B toys: 20000; # - Test statistic evaluated on data: 10.8198; # - CL_b: 0.99895 +/- 0.000229008; # - CL_s+b: 0.491 +/- 0.0158088; # - CL_s: 0.491516 +/- 0.0158258; # Real time 0:02:22, CP time 0.990; # -------------------------------------------------------; # Comparison; # -------------------------------------------------------; # LEPStatToolsForLHC; # https:#plone4.fnal.gov:4430/P0/phystat/packages/0703002; # Uses Gaussian prior; # CL_b = 6.218476e-04, Significance = 3.228665 sigma; #; # -------------------------------------------------------; # Comparison; # -------------------------------------------------------; # Asymptotic; # From the value of the profile likelihood ratio (5.0338); # The significance can be estimated using Wilks's theorem; # significance = sqrt(2*profileLR) = 3.1729 sigma",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py:529,Test,Test,529,tutorials/roostats/HybridStandardForm.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridStandardForm.py,2,['Test'],['Test']
Testability,"# tar up the execution directory (which contains everything that's needed; # to run the test), and copy the tarball over to the remote host.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/remote-exec.py:88,test,test,88,interpreter/llvm-project/llvm/utils/remote-exec.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/remote-exec.py,1,['test'],['test']
Testability,"# test also direct conversion",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rtensor.py:2,test,test,2,bindings/pyroot/pythonizations/test/rtensor.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rtensor.py,1,['test'],['test']
Testability,"# test arrays in mixed order, to give overload resolution a workout",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py:2,test,test,2,bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,1,['test'],['test']
Testability,"# test assignment",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py:2,test,test,2,bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,1,['test'],['test']
Testability,"# test both by-ref and by rvalue",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_boost.py:2,test,test,2,bindings/pyroot/cppyy/cppyy/test/test_boost.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_boost.py,1,['test'],['test']
Testability,# test code; # print '\n',MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/DSAextract.py:2,test,test,2,interpreter/llvm-project/llvm/utils/DSAextract.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/DSAextract.py,1,['test'],['test']
Testability,"# test counter",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py:2,test,test,2,bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py,1,['test'],['test']
Testability,"# test existence",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_cpp11features.py:2,test,test,2,bindings/pyroot/cppyy/cppyy/test/test_cpp11features.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_cpp11features.py,1,['test'],['test']
Testability,"# test forced creation of subsequent overloads",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_templates.py:2,test,test,2,bindings/pyroot/cppyy/cppyy/test/test_templates.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_templates.py,1,['test'],['test']
Testability,"# test if parameters are fine",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/fit/fitNormSum.py:2,test,test,2,tutorials/fit/fitNormSum.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/fit/fitNormSum.py,1,['test'],['test']
Testability,"# test if we can correctly iterate over a RooLinkedList, also in; # reverse.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/roolinkedlist.py:2,test,test,2,bindings/pyroot/pythonizations/test/roofit/roolinkedlist.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/roolinkedlist.py,1,['test'],['test']
Testability,"# test that AttributeError is raised; # if keyword does not correspong to CmdArg",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/rooabspdf_fitto.py:2,test,test,2,bindings/pyroot/pythonizations/test/roofit/rooabspdf_fitto.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/rooabspdf_fitto.py,2,['test'],['test']
Testability,"# test that fitting with keyword arguments leads to the same result; # as doing the same fit with passed ROOT objects",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/rooabspdf_fitto.py:2,test,test,2,bindings/pyroot/pythonizations/test/roofit/rooabspdf_fitto.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/rooabspdf_fitto.py,1,['test'],['test']
Testability,"# test that fitting with keyword arguments leads to the same result; # as doing the same plot with passed ROOT objects",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/rooabsreal_ploton.py:2,test,test,2,bindings/pyroot/pythonizations/test/roofit/rooabsreal_ploton.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/rooabsreal_ploton.py,1,['test'],['test']
Testability,"# test that kwargs can be passed; # and lead to correct result",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/rooabspdf_fitto.py:2,test,test,2,bindings/pyroot/pythonizations/test/roofit/rooabspdf_fitto.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/rooabspdf_fitto.py,2,['test'],['test']
Testability,"# test that no error is causes if python style and cpp style; # args are provided to fitto and that results are identical",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/rooabspdf_fitto.py:2,test,test,2,bindings/pyroot/pythonizations/test/roofit/rooabspdf_fitto.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/rooabspdf_fitto.py,1,['test'],['test']
Testability,"# test that no error is causes if python style and cpp style; # args are provided to plotOn and that results are identical",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/rooabsreal_ploton.py:2,test,test,2,bindings/pyroot/pythonizations/test/roofit/rooabsreal_ploton.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/roofit/rooabsreal_ploton.py,1,['test'],['test']
Testability,"# test that the enum is accessible as a type",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py:2,test,test,2,bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,1,['test'],['test']
Testability,"# test type",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py:2,test,test,2,bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py,1,['test'],['test']
Testability,"# test type accessible",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py:2,test,test,2,bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_datatypes.py,1,['test'],['test']
Testability,"# test values",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py:2,test,test,2,bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_asnumpy.py,1,['test'],['test']
Testability,"# test whether the pch is older than the include directory",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/loader.py:2,test,test,2,bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/loader.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/loader.py,1,['test'],['test']
Testability,"# test writability of __module__",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py:2,test,test,2,bindings/pyroot/cppyy/cppyy/test/test_fragile.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py,1,['test'],['test']
Testability,"# the following does not work for type-checked containers; #s = ""this is also a sequence""; #vv = type2test(s); #assert len(vv) == len(s); # Create from various iteratables; # as above, can not put strings in type-checked containers; #for s in (""123"", """", range(1000), ('do', 1.2), range(2000,2200,5)):",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py:112,assert,assert,112,bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,1,['assert'],['assert']
Testability,"# the following is invalid, GDB fails with:; # Python Exception <class 'gdb.error'> Attempt to take address of value; # not located in memory.; # because isEqual took parameter (for the unsigned long key I was testing); # by const ref, and GDB; # It's also not entirely general - we should be accessing the ""getFirst()""; # member function, not the 'first' member variable, but I've yet to figure; # out how to find/call member functions (especially (const) overloaded; # ones) on a gdb.Value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/gdb-scripts/prettyprinters.py:210,test,testing,210,interpreter/llvm-project/llvm/utils/gdb-scripts/prettyprinters.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/gdb-scripts/prettyprinters.py,1,['test'],['testing']
Testability,"# the following two fail b/c PySlice_GetIndices succeeds w/o error, while; # returning an overflown value (list object uses different internal APIs); #assert a[ -pow(2,128): 3 ] == type2test([0,1,2]); #assert a[ 3: pow(2,145) ] == type2test([3,4])",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py:151,assert,assert,151,bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_stltypes.py,2,['assert'],['assert']
Testability,"# this corresponds to the ""Z_N"" calculation.; #; # or one could use the analogous log-normal prior",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py:82,log,log-normal,82,tutorials/roostats/HybridInstructional.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py,2,['log'],['log-normal']
Testability,"# this is a switch to check the sampling distribution; # of -2 log LR for two comparisons:; # the first is for n-1 vs. n degree polynomial corrections; # the second is for n vs. n+1 degree polynomial corrections; # Here we choose n to be the one chosen by the tolerance; # criterion above, eg. n = ""degree"" in the code.; # Setting this to true is takes about 10 min.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/rs_bernsteinCorrection.py:63,log,log,63,tutorials/roostats/rs_bernsteinCorrection.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/rs_bernsteinCorrection.py,1,['log'],['log']
Testability,"# this is meant to be used only to run tutorials as tests",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/.enableImplicitMTWrapper.py:52,test,tests,52,tutorials/.enableImplicitMTWrapper.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/.enableImplicitMTWrapper.py,1,['test'],['tests']
Testability,"# to test effect of caching",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_cpp11features.py:5,test,test,5,bindings/pyroot/cppyy/cppyy/test/test_cpp11features.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_cpp11features.py,1,['test'],['test']
Testability,"# touch __version__ as a test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_doc_features.py:25,test,test,25,bindings/pyroot/cppyy/cppyy/test/test_doc_features.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_doc_features.py,1,['test'],['test']
Testability,"# training2 = ROOT.TString(""LearningRate=1e-3,Momentum=0.9""; # ""ConvergenceSteps=10,BatchSize=128,TestRepetitions=1,""; # ""MaxEpochs=20,WeightDecay=1e-4,Regularization=None,""; # ""Optimizer=SGD,DropConfig=0.0+0.0+0.0+0.""); # General Options.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_Higgs_Classification.py:98,Test,TestRepetitions,98,tutorials/tmva/TMVA_Higgs_Classification.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_Higgs_Classification.py,1,['Test'],['TestRepetitions']
Testability,"# typing package doesn't have a separate type for Queue, but has a generic stub; # We still want to have a type-safe checked project queue, for this reason,; # we specify generic type for mypy.; #; # It is a common workaround for this situation:; # https://mypy.readthedocs.io/en/stable/common_issues.html#using-classes-that-are-generic-in-stubs-but-not-at-runtime",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:75,stub,stub,75,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,2,['stub'],"['stub', 'stubs-but-not-at-runtime']"
Testability,"# use option TF1 if too slow (plot.Draw(""tf1""); # if requested perform also an hypothesis test for the significance",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/StandardProfileLikelihoodDemo.py:90,test,test,90,tutorials/roostats/StandardProfileLikelihoodDemo.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/StandardProfileLikelihoodDemo.py,1,['test'],['test']
Testability,"# w.var(""kk"").setVal(4.) # test a large kk",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/TestNonCentral.py:27,test,test,27,tutorials/roostats/TestNonCentral.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/TestNonCentral.py,1,['test'],['test']
Testability,"# without this print, their can be a crash when using PROOF. Strange.; # w.Print(); # Test statistics like the profile likelihood ratio; # (or the ratio of profiled likelihoods (Tevatron) or the MLE for s); # will now work, since the nuisance parameter b is constrained by y.; # ratio of alt and null likelihoods with background yield profiled.; #; # NOTE: These are slower because they have to run fits for each toy; # Tevatron-style Ratio of profiled likelihoods; # $Q_Tev = -log L(s=0,\hat\hat{b})/L(s=50,\hat\hat{b})$",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py:86,Test,Test,86,tutorials/roostats/HybridInstructional.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py,2,"['Test', 'log']","['Test', 'log']"
Testability,#!/usr/bin/env python3; # Automatically formatted with yapf (https://github.com/google/yapf); # Fake 'opt' program that can be made to crash on request. For testing; # the 'reduce_pipeline.py' automatic 'opt' NPM pipeline reducer.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline_test/fake_opt.py:157,test,testing,157,interpreter/llvm-project/llvm/utils/reduce_pipeline_test/fake_opt.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline_test/fake_opt.py,1,['test'],['testing']
Testability,"#!/usr/bin/env python; # ===- test.py - ---------------------------------------------*- python -*--===#; #; # Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; # See https://llvm.org/LICENSE.txt for license information.; # SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; #; # ===------------------------------------------------------------------------===#",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/include-mapping/test.py:30,test,test,30,interpreter/llvm-project/clang/tools/include-mapping/test.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/include-mapping/test.py,1,['test'],['test']
Testability,"#!/usr/bin/env python; # Auto-generates an exhaustive and repetitive test for correct bundle-locked; # alignment on x86.; # For every possible offset in an aligned bundle, a bundle-locked group of every; # size in the inclusive range [1, bundle_size] is inserted. An appropriate CHECK; # is added to verify that NOP padding occurred (or did not occur) as expected.; # Run with --align-to-end to generate a similar test with align_to_end for each; # .bundle_lock directive.; # This script runs with Python 2.7 and 3.2+",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/testgen/mc-bundling-x86-gen.py:69,test,test,69,interpreter/llvm-project/llvm/utils/testgen/mc-bundling-x86-gen.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/testgen/mc-bundling-x86-gen.py,2,['test'],['test']
Testability,"#!/usr/bin/env python; # Given a -print-before-all and/or -print-after-all -print-module-scope log from; # an opt invocation, chunk it into a series of individual IR files, one for each; # pass invocation. If the log ends with an obvious stack trace, try to split off; # a separate ""crashinfo.txt"" file leaving only the valid input IR in the last; # chunk. Files are written to current working directory.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/chunk-print-before-all.py:95,log,log,95,interpreter/llvm-project/llvm/utils/chunk-print-before-all.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/chunk-print-before-all.py,2,['log'],['log']
Testability,#!/usr/bin/env python; #; # Debugify summary for the original debug info testing.; #,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/llvm-original-di-preservation.py:73,test,testing,73,interpreter/llvm-project/llvm/utils/llvm-original-di-preservation.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/llvm-original-di-preservation.py,1,['test'],['testing']
Testability,"#!/usr/bin/env python; #; # Given a previous good compile narrow down miscompiles.; # Expects two directories named ""before"" and ""after"" each containing a set of; # assembly or object files where the ""after"" version is assumed to be broken.; # You also have to provide a script called ""link_test"". It is called with a; # list of files which should be linked together and result tested. ""link_test""; # should returns with exitcode 0 if the linking and testing succeeded.; #; # If a response file is provided, only the object files that are listed in the; # file are inspected. In addition, the ""link_test"" is called with a temporary; # response file representing one iteration of bisection.; #; # abtest.py operates by taking all files from the ""before"" directory and; # in each step replacing one of them with a file from the ""bad"" directory.; #; # Additionally you can perform the same steps with a single .s file. In this; # mode functions are identified by "" -- Begin function FunctionName"" and; # "" -- End function"" markers. The abtest.py then takes all; # function from the file in the ""before"" directory and replaces one function; # with the corresponding function from the ""bad"" file in each step.; #; # Example usage to identify miscompiled files:; # 1. Create a link_test script, make it executable. Simple Example:; # clang ""$@"" -o /tmp/test && /tmp/test || echo ""PROBLEM""; # 2. Run the script to figure out which files are miscompiled:; # > ./abtest.py; # somefile.s: ok; # someotherfile.s: skipped: same content; # anotherfile.s: failed: './link_test' exitcode != 0; # ...; # Example usage to identify miscompiled functions inside a file:; # 3. Run the tests on a single file (assuming before/file.s and; # after/file.s exist); # > ./abtest.py file.s; # funcname1 [0/XX]: ok; # funcname2 [1/XX]: ok; # funcname3 [2/XX]: skipped: same content; # funcname4 [3/XX]: failed: './link_test' exitcode != 0; # ...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/abtest.py:378,test,tested,378,interpreter/llvm-project/llvm/utils/abtest.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/abtest.py,5,['test'],"['test', 'tested', 'testing', 'tests']"
Testability,"## By construction, the mock model will always output the first liverange that can be evicted.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/models/gen-regalloc-priority-test-model.py:24,mock,mock,24,interpreter/llvm-project/llvm/lib/Analysis/models/gen-regalloc-priority-test-model.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/models/gen-regalloc-priority-test-model.py,1,['mock'],['mock']
Testability,"## Test all methods; # Now we test and evaluate all methods using the test data set",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_Higgs_Classification.py:3,Test,Test,3,tutorials/tmva/TMVA_Higgs_Classification.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_Higgs_Classification.py,3,"['Test', 'test']","['Test', 'test']"
Testability,"## Test and Evaluate Methods",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_CNN_Classification.py:3,Test,Test,3,tutorials/tmva/TMVA_CNN_Classification.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_CNN_Classification.py,1,['Test'],['Test']
Testability,"## \file; ## \ingroup tutorial_pyroot; ## \notebook; ## This macro is an example of graphs in log scales with annotations.; ##; ## The presented results; ## are predictions of invariant cross-section of Direct Photons produced; ## at RHIC energies, based on the universality of scaling function H(z).; ##; ##; ## These Figures were published in JINR preprint E2-98-64, Dubna,; ## 1998 and submitted to CPC.; ##; ## \macro_image; ## \macro_code; ##; ## \authors Michael Tokarev, Elena Potrebenikova (JINR Dubna)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/zdemo.py:94,log,log,94,tutorials/pyroot/zdemo.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/pyroot/zdemo.py,1,['log'],['log']
Testability,"## \file; ## \ingroup tutorial_roofit; ## \notebook -nodraw; ## Organization and simultaneous fits: tuning and customizing the ROOT.RooFit message logging facility; ##; ## \macro_code; ## \macro_output; ##; ## \date February 2018; ## \authors Clemens Lange, Wouter Verkerke (C++ version)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf506_msgservice.py:147,log,logging,147,tutorials/roofit/rf506_msgservice.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf506_msgservice.py,1,['log'],['logging']
Testability,"## \file; ## \ingroup tutorial_roofit; ## \notebook; ## Use Morphing in RooFit.; ##; ## This tutorial shows how to use template morphing inside RooFit. As input we have several; ## Gaussian distributions. The output is one gaussian, with a specific mean value.; ## Since likelihoods are often used within the framework of morphing, we provide a; ## way to estimate the negative log likelihood (nll).; ##; ## Based on example of Kyle Cranmer https://gist.github.com/cranmer/46fff8d22015e5a26619.; ##; ## \macro_image; ## \macro_code; ## \macro_output; ##; ## \date August 2024; ## \author Robin Syring",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf616_morphing.py:378,log,log,378,tutorials/roofit/rf616_morphing.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf616_morphing.py,1,['log'],['log']
Testability,"## \file; ## \ingroup tutorial_roofit; ## \notebook; ## Use Simulation Based Inference (SBI) in RooFit.; ##; ## This tutorial shows how to use SBI in ROOT. As reference distribution we; ## choose a simple uniform distribution. The target distribution is chosen to; ## be gaussian with different mean values.; ## The classifier is trained to discriminate between the reference and target; ## distribution.; ## We see how the neural networks generalize to unknown mean values.; ##; ## We compare the approach of using the likelihood ratio trick to morphing.; ##; ## An introduction of SBI can be found in https://arxiv.org/pdf/2010.06439.; ##; ## A short recap:; ## The idea of SBI is to fit a surrogate model to the data, in order to really; ## learn the likelihood function instead of calculating it. Therefore, a classifier is trained to discriminate between; ## samples from a target distribution (here the Gaussian) $$x\sim p(x|\theta)$$ and a reference distribution (here the Uniform); ## $$x\sim p_{ref}(x|\theta)$$.; ##; ## The output of the classifier $$\hat{s}(\theta)$$ is a monotonic function of the likelihood ration and can be turned into an estimate of the likelihood ratio; ## via $$\hat{r}(\theta)=\frac{1-\hat{s}(\theta)}{\hat{s}(\theta)}.$$; ## This is called the likelihood ratio trick.; ##; ## In the end we compare the negative logarithmic likelihoods of the learned, morphed and analytical likelihood with minuit and as a plot.; ##; ## \macro_image; ## \macro_code; ## \macro_output; ##; ## \date July 2024; ## \author Robin Syring",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf615_simulation_based_inference.py:1348,log,logarithmic,1348,tutorials/roofit/rf615_simulation_based_inference.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf615_simulation_based_inference.py,1,['log'],['logarithmic']
Testability,"## \file; ## \ingroup tutorial_roofit; ## \notebook; ## Use Simulation Based Inference (SBI) in multiple dimensions in RooFit.; ##; ## This tutorial shows how to use SBI in higher dimension in ROOT.; ## This tutorial transfers the simple concepts of the 1D case introduced in; ## rf615_simulation_based_inference.py onto the higher dimensional case.; ##; ## Again as reference distribution we; ## choose a simple uniform distribution. The target distribution is chosen to; ## be Gaussian with different mean values.; ## The classifier is trained to discriminate between the reference and target; ## distribution.; ## We see how the neural networks generalize to unknown mean values.; ##; ## Furthermore, we compare SBI to the approach of moment morphing. In this case,; ## we can conclude, that SBI is way more sample eficcient when it comes to; ## estimating the negative log likelihood ratio.; ##; ## For an introductory background see rf615_simulation_based_inference.py; ##; ## \macro_image; ## \macro_code; ## \macro_output; ##; ## \date July 2024; ## \author Robin Syring",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf617_simulation_based_inference_multidimensional.py:873,log,log,873,tutorials/roofit/rf617_simulation_based_inference_multidimensional.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roofit/rf617_simulation_based_inference_multidimensional.py,1,['log'],['log']
Testability,"## \file; ## \ingroup tutorial_roostats; ## \notebook -nodraw; ## 'Number Counting Utils' RooStats tutorial; ##; ## This tutorial shows an example of the RooStats standalone; ## utilities that calculate the p-value or Z value (eg. significance in; ## 1-sided Gaussian standard deviations) for a number counting experiment.; ## This is a hypothesis test between background only and signal-plus-background.; ## The background estimate has uncertainty derived from an auxiliary or sideband; ## measurement.; ##; ## Documentation for these utilities can be found here:; ## https://root.cern.ch/doc/master/namespaceNumberCountingUtils.html; ##; ##; ## This problem is often called a proto-type problem for high energy physics.; ## In some references it is referred to as the on/off problem.; ##; ## The problem is treated in a fully frequentist fashion by; ## interpreting the relative background uncertainty as; ## being due to an auxiliary or sideband observation; ## that is also Poisson distributed with only background.; ## Finally, one considers the test as a ratio of Poisson means; ## where an interval is well known based on the conditioning on the total; ## number of events and the binomial distribution.; ## For more on this, see; ## - http://arxiv.org/abs/0905.3831; ## - http://arxiv.org/abs/physics/physics/0702156; ## - http://arxiv.org/abs/physics/0511028; ##; ##; ## \macro_image; ## \macro_output; ## \macro_code; ##; ## \date July 2022; ## \authors Artem Busorgin, Kyle Cranmer (C++ version)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/rs_numbercountingutils.py:348,test,test,348,tutorials/roostats/rs_numbercountingutils.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/rs_numbercountingutils.py,2,['test'],['test']
Testability,"## \file; ## \ingroup tutorial_roostats; ## \notebook; ## Comparison of MCMC and PLC in a multi-variate gaussian problem; ##; ## This tutorial produces an N-dimensional multivariate Gaussian; ## with a non-trivial covariance matrix. By default N=4 (called ""dim"").; ##; ## A subset of these are considered parameters of interest.; ## This problem is tractable analytically.; ##; ## We use this mainly as a test of Markov Chain Monte Carlo; ## and we compare the result to the profile likelihood ratio.; ##; ## We use the proposal helper to create a customized; ## proposal function for this problem.; ##; ## For N=4 and 2 parameters of interest it takes about 10-20 seconds; ## and the acceptance rate is 37%; ##; ## \macro_image; ## \macro_output; ## \macro_code; ##; ## \date July 2022; ## \authors Artem Busorgin, Kevin Belasco and Kyle Cranmer (C++ version)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/MultivariateGaussianTest.py:405,test,test,405,tutorials/roostats/MultivariateGaussianTest.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/MultivariateGaussianTest.py,1,['test'],['test']
Testability,"## \file; ## \ingroup tutorial_sql; ## \notebook -nodraw; ## Create a runcatalog table in a MySQL test database.; ##; ## Based on the code sqlcreatedb.C by Sergey Linev; ##; ## \macro_code; ##; ## \author Juan Fernando Jaramillo Botero",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/sql/sqlcreatedb.py:98,test,test,98,tutorials/sql/sqlcreatedb.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/sql/sqlcreatedb.py,1,['test'],['test']
Testability,"## \file; ## \ingroup tutorial_sql; ##; ## Query example to MySQL test database.; ## Example of query by using the test database made in MySQL, you need the; ## database test installed in localhost, with user nobody without password.; ##; ## Based on sqlselect.C by Sergey Linev; ##; ## \macro_code; ##; ## \author Juan Fernando Jaramillo Botero",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/sql/sqlselect.py:66,test,test,66,tutorials/sql/sqlselect.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/sql/sqlselect.py,3,['test'],['test']
Testability,"## \file; ## \ingroup tutorial_tmva; ## \notebook -nodraw; ## This tutorial illustrates how you can test a trained BDT model using the fast; ## tree inference engine offered by TMVA and external tools such as scikit-learn.; ##; ## \macro_code; ## \macro_output; ##; ## \date August 2019; ## \author Stefan Wunsch",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/tmva102_Testing.py:100,test,test,100,tutorials/tmva/tmva102_Testing.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/tmva102_Testing.py,1,['test'],['test']
Testability,"## actual test run",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_pythonization.py:10,test,test,10,bindings/pyroot/cppyy/cppyy/test/test_pythonization.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_pythonization.py,1,['test'],['test']
Testability,"### User configuration; # If you want to use a different 'benchmark' than building clang, make this; # function do what you want. out_dir is the build directory for clang, so all; # of the clang binaries will live under ""${out_dir}/bin/"". Using clang in; # ${out_dir} will magically have the profiles go to the right place.; #; # You may assume that out_dir is a freshly-built directory that you can reach; # in to build more things, if you'd like.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/collect_and_build_with_pgo.py:58,benchmark,benchmark,58,interpreter/llvm-project/llvm/utils/collect_and_build_with_pgo.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/collect_and_build_with_pgo.py,1,['benchmark'],['benchmark']
Testability,"### pass by ptr/ptr with allocation (ptr/ptr is ambiguous in it's task, so many; # types are allowed to pass; this tests allocation into the pointer)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_lowlevel.py:115,test,tests,115,bindings/pyroot/cppyy/cppyy/test/test_lowlevel.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_lowlevel.py,1,['test'],['tests']
Testability,###############################################################################; # Test harness logic.; ###############################################################################,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py:83,Test,Test,83,interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/analyzer/SATestBuild.py,2,"['Test', 'log']","['Test', 'logic']"
Testability,#######; # Tests,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/BooleanExpression.py:11,Test,Tests,11,interpreter/llvm-project/llvm/utils/lit/lit/BooleanExpression.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/BooleanExpression.py,1,['Test'],['Tests']
Testability,"#)root/roostats:$Id$; // Authors: Kevin Belasco 17/06/2009; // Authors: Kyle Cranmer 17/06/2009; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::MetropolisHastings; \ingroup Roostats. This class uses the Metropolis-Hastings algorithm to construct a Markov Chain; of data points using Monte Carlo. In the main algorithm, new points in the; parameter space are proposed and then visited based on their relative; likelihoods. This class can use any implementation of the ProposalFunction,; including non-symmetric proposal functions, to propose parameter points and; still maintain detailed balance when constructing the chain. The ""Likelihood"" function that is sampled when deciding what steps to take in; the chain has been given a very generic implementation. The user can create; any RooAbsReal based on the parameters and pass it to a MetropolisHastings; object with the method SetFunction(RooAbsReal&). Be sure to tell; MetropolisHastings whether your RooAbsReal is on a (+/-) regular or log scale,; so that it knows what logic to use when sampling your RooAbsReal. For example,; a common use is to sample from a -log(Likelihood) distribution (NLL), for which; the appropriate configuration calls are SetType(MetropolisHastings::kLog);; SetSign(MetropolisHastings::kNegative);; If you're using a traditional likelihood function:; SetType(MetropolisHastings::kRegular); SetSign(MetropolisHastings::kPositive);; You must set these type and sign flags or MetropolisHastings will not construct; a MarkovChain. Also note that in ConstructChain(), the values of the variables are randomized; uniformly over their intervals before construction of the MarkovChain begins. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MetropolisHastings.cxx:1327,log,log,1327,roofit/roostats/src/MetropolisHastings.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MetropolisHastings.cxx,3,['log'],"['log', 'logic']"
Testability,"#; # All Qt-specific logic is driven from these identifiers. Setting them to; # nonsense values would effectively disable all Qt-specific logic.; #",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/_cppyy_generator.py:21,log,logic,21,bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/_cppyy_generator.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/_cppyy_generator.py,2,['log'],['logic']
Testability,"#; # Happens e.g. if the template is a dependent type; instead, try to parse; # its definition (brittle, but the original code just had '1' as a guess,; # which is even worse ...).; #; # logger.error(_(""Unexpected template_arg_count={} for {}"").format(tmp, typedef.type.get_typedef_name()))",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/_cppyy_generator.py:187,log,logger,187,bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/_cppyy_generator.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/python/cppyy_backend/_cppyy_generator.py,1,['log'],['logger']
Testability,"#Constructing random test dataset",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/generatePyTorchModels.py:21,test,test,21,tmva/pymva/test/generatePyTorchModels.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/generatePyTorchModels.py,3,['test'],['test']
Testability,"#assert ""char or small int type expected"" in str(e)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py:1,assert,assert,1,bindings/pyroot/cppyy/cppyy/test/test_fragile.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py,1,['assert'],['assert']
Testability,"#assert ""int/long conversion expects an integer object"" in str(e)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py:1,assert,assert,1,bindings/pyroot/cppyy/cppyy/test/test_fragile.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py,1,['assert'],['assert']
Testability,"#assert ""no converter available for 'fragile::no_such_class*'"" in str(e)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py:1,assert,assert,1,bindings/pyroot/cppyy/cppyy/test/test_fragile.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_fragile.py,1,['assert'],['assert']
Testability,"#assert (~n).i == ~42",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_operators.py:1,assert,assert,1,bindings/pyroot/cppyy/cppyy/test/test_operators.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_operators.py,1,['assert'],['assert']
Testability,"#assert o == cppyy.bind_object(cobj, some_concrete_class); #assert o == cppyy.bind_object(cobj, type(o)); #assert o == cppyy.bind_object(cobj, o.__class__); #assert o == cppyy.bind_object(cobj, ""some_concrete_class"")",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py:1,assert,assert,1,bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_advancedcpp.py,4,['assert'],['assert']
Testability,"#assert type(cmp2) != PyComponentWithValue; # rebind cmp2 to the python type",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py:1,assert,assert,1,bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_crossinheritance.py,1,['assert'],['assert']
Testability,"#assert type(d.get1['double'](5)) == float; #assert d.get1['double'](5) == 10.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_templates.py:1,assert,assert,1,bindings/pyroot/cppyy/cppyy/test/test_templates.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/test_templates.py,2,['assert'],['assert']
Testability,"#run the inference on the test data",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_SOFIE_Models.py:26,test,test,26,tutorials/tmva/TMVA_SOFIE_Models.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_SOFIE_Models.py,1,['test'],['test']
Testability,"#split data in training and test data",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_SOFIE_Models.py:28,test,test,28,tutorials/tmva/TMVA_SOFIE_Models.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_SOFIE_Models.py,1,['test'],['test']
Testability,"$ \\phi \\f$ between \\f$\\textbf{w}_L\\f$ and \\f$\\textbf{D}\\f$"". ## Test 2; Let \f$\textbf{D}\f$ be the data vector to be fitted. As illustrated in; figure 1, the \f$L^{\mbox{th}}\f$ function \f$\textbf{w}_L\f$; will contribute significantly to the reduction of \f$ S\f$, if the angle; \f$\phi^\prime\f$ between \f$\textbf{w}_L\f$ and \f$\textbf{D}\f$ is smaller than; an upper limit \f$ \phi \f$, defined by the user (MultiDimFit::SetMaxAngle). However, the method automatically readjusts the value of this angle; while fitting is in progress, in order to make the selection criteria; less and less difficult to be fulfilled. The result is that the; functions contributing most to the reduction of \f$ S\f$ are chosen first; (TMultiDimFit::TestFunction). In case \f$ \phi \f$ isn't defined, an alternative method of; performing this second test is used: The \f$L^{\mbox{th}}\f$; function \f$\textbf{f}_L\f$ is accepted if (refer also to equation (13)); \f[; \Delta S_L > \frac{S_{L-1}}{L_{max}-L}; \f]; where \f$ S_{L-1}\f$ is the sum of the \f$ L-1\f$ first residuals from the; \f$ L-1\f$ functions previously accepted; and \f$ L_{max}\f$ is the total number; of functions allowed in the final expression of the fit (defined by; user). From this we see, that by restricting \f$ L_{max}\f$ -- the number of; terms in the final model -- the fit is more difficult to perform,; since the above selection criteria is more limiting. The more coefficients we evaluate, the more the sum of squares of; residuals \f$ S\f$ will be reduced. We can evaluate \f$ S\f$ before inverting; \f$\mathsf{B}\f$ as shown below. ## Coefficients and Coefficient Errors; Having found a parameterization, that is the \f$ F_l\f$'s and \f$ L\f$, that; minimizes \f$ S\f$, we still need to determine the coefficients; \f$ c_l\f$. However, it's a feature of how we choose the significant; functions, that the evaluation of the \f$ c_l\f$'s becomes trivial [5]. To derive; \f$\mathbf{c}\f$, we first note that; equation (4) c",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:11277,test,test,11277,hist/hist/src/TMultiDimFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx,1,['test'],['test']
Testability,"&& D); /// LHS RHS; /// ID=3 ID=5; ///; /// Visit RHS-Depth2: (D && F); /// LHS RHS; /// ID=2 ID=6; ///; /// Visit Depth1:; /// (A && B) || (C && D) || (D && F); /// ID=1 ID=4 ID=3 ID=5 ID=2 ID=6; ///; /// A node ID of '0' always means MC/DC isn't being tracked.; ///; /// As the AST walk proceeds recursively, the algorithm will also use a stack; /// to track the IDs of logical-AND and logical-OR operations on the RHS so; /// that it can be determined which nodes are executed next, depending on how; /// a LHS or RHS of a logical-AND or logical-OR is evaluated. This; /// information relies on the assigned IDs and are embedded within the; /// coverage region IDs of each branch region associated with a leaf-level; /// condition. This information helps the visualization tool reconstruct all; /// possible test vectors for the purposes of MC/DC analysis. If a ""next"" node; /// ID is '0', it means it's the end of the test vector. The following rules; /// are used:; ///; /// For logical-AND (""LHS && RHS""):; /// - If LHS is TRUE, execution goes to the RHS node.; /// - If LHS is FALSE, execution goes to the LHS node of the next logical-OR.; /// If that does not exist, execution exits (ID == 0).; ///; /// - If RHS is TRUE, execution goes to LHS node of the next logical-AND.; /// If that does not exist, execution exits (ID == 0).; /// - If RHS is FALSE, execution goes to the LHS node of the next logical-OR.; /// If that does not exist, execution exits (ID == 0).; ///; /// For logical-OR (""LHS || RHS""):; /// - If LHS is TRUE, execution goes to the LHS node of the next logical-AND.; /// If that does not exist, execution exits (ID == 0).; /// - If LHS is FALSE, execution goes to the RHS node.; ///; /// - If RHS is TRUE, execution goes to LHS node of the next logical-AND.; /// If that does not exist, execution exits (ID == 0).; /// - If RHS is FALSE, execution goes to the LHS node of the next logical-OR.; /// If that does not exist, execution exits (ID == 0).; ///; /// Finally, the c",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp:2084,log,logical-AND,2084,interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp,1,['log'],['logical-AND']
Testability,"'''; >>> s=""// hello""; >>> commentRemover(s); ''; >>> s=""int /** Test **/ main() {return 0;}""; >>> commentRemover(s); 'int main() {return 0;}'; '''",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/jupyroot/python/JupyROOT/helpers/utils.py:65,Test,Test,65,bindings/jupyroot/python/JupyROOT/helpers/utils.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/jupyroot/python/JupyROOT/helpers/utils.py,1,['Test'],['Test']
Testability,"'''; Abstract base class that defines some common logic to properly pythonize; method templates. More precisely, it provides an implementation of; `__getitem__` that makes wrappers subscriptable and allows them to capture; template arguments.; Subclasses of this class must redefine `__call__` with the actual; pythonization of the method template. Attributes:; _original_method (cppyy TemplateProxy): original implementation of the; method template that is bound to the instance on which the template; was accessed.; _extra_args (tuple): extra arguments to be used when receiving a call.; '''",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_pyz_utils.py:50,log,logic,50,bindings/pyroot/pythonizations/python/ROOT/_pythonization/_pyz_utils.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_pyz_utils.py,1,['log'],['logic']
Testability,"'''; Test conversion of model constructor arguments, passed as a tuple, to; an actual model object.; '''",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_histo_profile.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/rdataframe_histo_profile.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_histo_profile.py,1,['Test'],['Test']
Testability,'''; Test that RVec is accessible from the ROOT and ROOT::VecOps namespace; ''',MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rvec.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/rvec.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rvec.py,1,['Test'],['Test']
Testability,'''; Test that parsed GNN model from a graphnets model generates correct; inference code; ''',MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/sofie_gnn.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/sofie_gnn.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/sofie_gnn.py,1,['Test'],['Test']
Testability,'''; Test that parsed GraphIndependent model from a graphnets model generates correct; inference code; ''',MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/sofie_gnn.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/sofie_gnn.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/sofie_gnn.py,1,['Test'],['Test']
Testability,'''; Test that parsed stack of SOFIE GNN and GraphIndependent modules generate the correct; inference code; ''',MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/sofie_gnn.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/sofie_gnn.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/sofie_gnn.py,1,['Test'],['Test']
Testability,'''; Test that the pythonized methods support being subscripted (explicit; template instantiation).; ''',MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_histo_profile.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/rdataframe_histo_profile.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_histo_profile.py,1,['Test'],['Test']
Testability,"'''; Test the iteration over the iterator of an iterator. This breaks if __iter__ or tp_iter is not defined for the iterator and causes; issues, e.g., in comparison to numpy arrays.; '''",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rvec.py:5,Test,Test,5,bindings/pyroot/pythonizations/test/rvec.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rvec.py,1,['Test'],['Test']
Testability,'''; Tests for the pythonization of HistoXD and ProfileXD methods.; ''',MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_histo_profile.py:5,Test,Tests,5,bindings/pyroot/pythonizations/test/rdataframe_histo_profile.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/rdataframe_histo_profile.py,1,['Test'],['Tests']
Testability,"'''; using FourVector = ROOT::Math::XYZTVector;; using FourVectorVec = std::vector<FourVector>;; using CylFourVector = ROOT::Math::RhoEtaPhiVector;. // A simple helper function to fill a test tree: this makes the example; // stand-alone.; void fill_tree(const char *filename, const char *treeName); {; const double M = 0.13957; // set pi+ mass; TRandom3 R(1);. auto genTracks = [&](){; FourVectorVec tracks;; const auto nPart = R.Poisson(15);; tracks.reserve(nPart);; for (int j = 0; j < nPart; ++j) {; const auto px = R.Gaus(0, 10);; const auto py = R.Gaus(0, 10);; const auto pt = sqrt(px * px + py * py);; const auto eta = R.Uniform(-3, 3);; const auto phi = R.Uniform(0.0, 2 * TMath::Pi());; CylFourVector vcyl(pt, eta, phi);; // set energy; auto E = sqrt(vcyl.R() * vcyl.R() + M * M);; // fill track vector; tracks.emplace_back(vcyl.X(), vcyl.Y(), vcyl.Z(), E);; }; return tracks;; };. ROOT::RDataFrame d(64);; d.Define(""tracks"", genTracks).Snapshot<FourVectorVec>(treeName, filename, {""tracks""});; }; '''",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df002_dataModel.py:187,test,test,187,tutorials/dataframe/df002_dataModel.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/dataframe/df002_dataModel.py,1,['test'],['test']
Testability,'''This method is run once after _each_ test method is executed''',MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/tests/test_cppyy_backend.py:40,test,test,40,bindings/pyroot/cppyy/cppyy-backend/cling/tests/test_cppyy_backend.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/tests/test_cppyy_backend.py,1,['test'],['test']
Testability,'''This method is run once before _each_ test method is executed''',MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/tests/test_cppyy_backend.py:41,test,test,41,bindings/pyroot/cppyy/cppyy-backend/cling/tests/test_cppyy_backend.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/tests/test_cppyy_backend.py,1,['test'],['test']
Testability,"'''\""*** Do not use '%s' in tests, use '%s'. ***\""'''",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py:28,test,tests,28,interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,1,['test'],['tests']
Testability,"(#)root/test:$name: $:$id: stressSpectrum.cxx,v 1.15 2002/10/25 10:47:51 rdm exp $; // Author: Rene Brun 17/01/2006; /////////////////////////////////////////////////////////////////; //; // TSPectrum test suite; // ====================; //; // This stress program tests many elements of the TSpectrum, TSpectrum2 classes.; //; // To run in batch, do; // stressSpectrum : run 100 experiments with graphics (default); // stressSpectrum 1000 : run 1000 experiments with graphics; // stressSpectrum -b 200 : run 200 experiments in batch mode; // stressSpectrum -b : run 100 experiments in batch mode; //; // To run interactively, do; // root -b; // Root > .x stressSpectrum.cxx : run 100 experiments with graphics (default); // Root > .x stressSpectrum.cxx(20) : run 20 experiments; // Root > .x stressSpectrum.cxx+(30) : run 30 experiments via ACLIC; //; // Several tests are run sequentially. Each test will produce one line (Test OK or Test FAILED) .; // At the end of the test a table is printed showing the global results; // Real Time and Cpu Time.; // One single number (ROOTMARKS) is also calculated showing the relative; // performance of your machine compared to a reference machine; // a Pentium IV 3.0 Ghz) with 512 MBytes of memory; // and 120 GBytes IDE disk.; //; // An example of output when all the tests run OK is shown below:; //; //////////////////////////////////////////////////////////////////////////; // //; //****************************************************************************; //* Starting stress S P E C T R U M *; //****************************************************************************; //Peak1 : found = 70.21/ 73.75, good = 65.03/ 68.60, ghost = 8.54/ 8.39,--- OK; //Peak2 : found =163/300, good =163, ghost =8,---------------------------- OK; //****************************************************************************; //stressSpectrum: Real Time = 19.86 seconds Cpu Time = 19.04 seconds; //*************************************************************",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressSpectrum.cxx:977,test,test,977,test/stressSpectrum.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressSpectrum.cxx,1,['test'],['test']
Testability,"(*fTree);; dcopy->SetPruneStrength(alpha+=delta);; dcopy->PruneTree();; q.push_back(TestTreeQuality(dcopy));; quality.insert(std::pair<const Double_t,Double_t>(q.back(),alpha));; nnodes=dcopy->GetNNodes();; if (previousNnodes == nnodes) troubleCount++;; else {; troubleCount=0; // reset counter; if (nnodes < previousNnodes / 2 ) fDeltaPruneStrength /= 2.;; }; previousNnodes = nnodes;; if (troubleCount > 20) {; if (methodIndex == 0 && fPruneStrength <=0) {//maybe you need larger stepsize ??; fDeltaPruneStrength *= 5;; Log() << kINFO << ""<PruneTree> trouble determining optimal prune strength""; << "" for Tree "" << methodIndex; << "" --> first try to increase the step size""; << "" currently Prunestrenght= "" << alpha; << "" stepsize "" << fDeltaPruneStrength << "" "" << Endl;; troubleCount = 0; // try again; fPruneStrength = 1; // if it was for the first time..; } else if (methodIndex == 0 && fPruneStrength <=2) {//maybe you need much larger stepsize ??; fDeltaPruneStrength *= 5;; Log() << kINFO << ""<PruneTree> trouble determining optimal prune strength""; << "" for Tree "" << methodIndex; << "" --> try to increase the step size even more.. ""; << "" if that still didn't work, TRY IT BY HAND""; << "" currently Prunestrenght= "" << alpha; << "" stepsize "" << fDeltaPruneStrength << "" "" << Endl;; troubleCount = 0; // try again; fPruneStrength = 3; // if it was for the first time..; } else {; forceStop=kTRUE;; Log() << kINFO << ""<PruneTree> trouble determining optimal prune strength""; << "" for Tree "" << methodIndex << "" at tested prune strength: "" << alpha << "" --> abort forced, use same strength as for previous tree:""; << fPruneStrength << Endl;; }; }; if (fgDebugLevel==1) Log() << kINFO << ""Pruneed with (""<<alpha; << "") give quality: "" << q.back(); << "" and #nodes: "" << nnodes; << Endl;; delete dcopy;; }; if (!forceStop) {; multimap<Double_t,Double_t>::reverse_iterator it=quality.rend();; it++;; fPruneStrength = it->second;; // adjust the step size for the next tree.. think that 20 steps ar",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDT.cxx:1394,Log,Log,1394,tmva/tmva/src/MethodDT.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDT.cxx,1,['Log'],['Log']
Testability,"(fname); // check if file in local directory exists; } else {; TFile::SetCacheFileDir(""."");; input = TFile::Open(""http://root.cern/files/tmva_class_example.root"", ""CACHEREAD"");; }; if (!input) {; std::cout << ""ERROR: could not open data file"" << std::endl;; exit(1);; }. // Register the training and test trees. TTree *signalTree = (TTree *)input->Get(""TreeS"");; TTree *background = (TTree *)input->Get(""TreeB"");. TMVA::DataLoader *dataloader = new TMVA::DataLoader(""dataset"");. dataloader->AddVariable(""myvar1 := var1+var2"", 'F');; dataloader->AddVariable(""myvar2 := var1-var2"", ""Expression 2"", """", 'F');; dataloader->AddVariable(""var3"", ""Variable 3"", ""units"", 'F');; dataloader->AddVariable(""var4"", ""Variable 4"", ""units"", 'F');. dataloader->AddSpectator(""spec1 := var1*2"", ""Spectator 1"", ""units"", 'F');; dataloader->AddSpectator(""spec2 := var1*3"", ""Spectator 2"", ""units"", 'F');. // global event weights per tree (see below for setting event-wise weights); Double_t signalWeight = 1.0;; Double_t backgroundWeight = 1.0;. dataloader->SetBackgroundWeightExpression(""weight"");. TMVA::Experimental::Classification *cl = new TMVA::Experimental::Classification(dataloader, Form(""Jobs=%d"", jobs));. cl->BookMethod(TMVA::Types::kBDT, ""BDTG"", ""!H:!V:NTrees=2000:MinNodeSize=2.5%:BoostType=Grad:Shrinkage=0.10:""; ""UseBaggedBoost:BaggedSampleFraction=0.5:nCuts=20:MaxDepth=2"");; cl->BookMethod(TMVA::Types::kSVM, ""SVM"", ""Gamma=0.25:Tol=0.001:VarTransform=Norm"");. cl->Evaluate(); // Train and Test all methods. auto &results = cl->GetResults();. TCanvas *c = new TCanvas(Form(""ROC""));; c->SetTitle(""ROC-Integral Curve"");. auto mg = new TMultiGraph();; for (UInt_t i = 0; i < results.size(); i++) {; auto roc = results[i].GetROCGraph();; roc->SetLineColorAlpha(i + 1, 0.1);; mg->Add(roc);; }; mg->Draw(""AL"");; mg->GetXaxis()->SetTitle("" Signal Efficiency "");; mg->GetYaxis()->SetTitle("" Background Rejection "");; c->BuildLegend(0.15, 0.15, 0.3, 0.3);; c->Draw();. delete cl;; }; * \endcode; *; \ingroup TMVA; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Classification.h:3163,Test,Test,3163,tmva/tmva/inc/TMVA/Classification.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Classification.h,1,['Test'],['Test']
Testability,") == DISABLE ) ... @endcode; * <li> Cumulative option (-v verbose, -vv more verbose, -vvv even more verbose):; * @code int verbosity = options[VERBOSE].count(); @endcode; * <li> Iterate over all --file=&lt;fname> arguments:; * @code for (Option* opt = options[FILE]; opt; opt = opt->next()); * fname = opt->arg; ... @endcode; * <li> If you really want to, you can still process all arguments in order:; * @code; * for (int i = 0; i < p.optionsCount(); ++i) {; * Option& opt = buffer[i];; * switch(opt.index()) {; * case HELP: ...; * case VERBOSE: ...; * case FILE: fname = opt.arg; ...; * case UNKNOWN: ...; * @endcode; * </ul>; * </ul> @n; * Despite these features the code size remains tiny.; * It is smaller than <a href=""http://uclibc.org"">uClibc</a>'s GNU getopt() and just a; * couple 100 bytes larger than uClibc's SUSv3 getopt(). @n; * (This does not include the usage formatter, of course. But you don't have to use that.); *; * @par Download:; * Tarball with examples and test programs:; * <a style=""font-size:larger;font-weight:bold"" href=""http://sourceforge.net/projects/optionparser/files/optionparser-1.3.tar.gz/download"">optionparser-1.3.tar.gz</a> @n; * Just the header (this is all you really need):; * <a style=""font-size:larger;font-weight:bold"" href=""http://optionparser.sourceforge.net/optionparser.h"">optionparser.h</a>; *; * @par Changelog:; * <b>Version 1.3:</b> Compatible with Microsoft Visual C++. @n; * <b>Version 1.2:</b> Added @ref ROOT::option::Option::namelen ""Option::namelen"" and removed the extraction; * of short option characters into a special buffer. @n; * Changed @ref ROOT::option::Arg::Optional ""Arg::Optional"" to accept arguments if they are attached; * rather than separate. This is what GNU getopt() does and how POSIX recommends; * utilities should interpret their arguments.@n; * <b>Version 1.1:</b> Optional mode with argument reordering as done by GNU getopt(), so that; * options and non-options can be mixed. See; * @ref ROOT::option::Parser::parse(",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:2344,test,test,2344,core/dictgen/res/OptionParser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h,1,['test'],['test']
Testability,")"");; myExec->SetAction("".x script.C"");; ~~~. When a TRef is dereferenced via TRef::GetObject, its TExec will be; automatically executed. In the function/script being executed, one or more; of the following actions can be executed:. - load a file containing the referenced object. This function typically; looks in the file catalog (GRID).; - compute a pointer to the referenced object and communicate this pointer; back to the calling function TRef::GetObject via:; ~~~ {.cpp}; TRef::SetStaticObject(object).; ~~~; When the TExec is called, it has access to the dereferencing TRef; by calling GetStaticObject() (TRef::GetObject() sets fgObject to ""this""; before the call to TExec). This can be useful for accessing the TRef's; fUniqueID. As soon as an object is returned to GetObject, the fUniqueID of the TRef is set; to the fUniqueID of the referenced object. At the next call to GetObject,; the pointer stored in fPid:fObjects[fUniqueID] will be returned directly. An example of action on demand is shown in $ROOTSYS/test/Event.h with; the member:; ~~~ {.cpp}; TRef fWebHistogram; //EXEC:GetWebHistogram; ~~~; When calling fWebHistogram.GetObject(), the function GetObject; will automatically invoke a script GetWebHistogram.C via the interpreter. An example of a GetWebHistogram.C script is shown below; ~~~ {.cpp}; void GetWebHistogram() {; TFile *f= TFile::Open(""http://root.cern/files/pippa.root"");; f->cd(""DM/CJ"");; TH1 *h6 = (TH1*)gDirectory->Get(""h6"");; h6->SetDirectory(0);; delete f;; TRef::SetStaticObject(h6);; }; ~~~; In the above example, a call to fWebHistogram.GetObject() executes the; script with the function GetWebHistogram. This script connects a file; with histograms: pippa.root on the ROOT Web site and returns the object h6; to TRef::GetObject. Note that if the definition of the TRef fWebHistogram had been:; ~~~ {.cpp}; TRef fWebHistogram; //EXEC:GetWebHistogram(); ~~~; then, the compiled or interpreted function GetWebHistogram() would have; been called instead of the",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRef.cxx:7603,test,test,7603,core/base/src/TRef.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRef.cxx,1,['test'],['test']
Testability,"). And, so,; // we might produce code like this:; //; // .Ltmp526:; // addis 3, 2, .LC12@toc@ha; // .Ltmp1628:; // std 2, 40(1); // ld 5, 0(27); // ld 2, 8(27); // ld 11, 16(27); // ld 3, .LC12@toc@l(3); // rldicl 4, 4, 0, 32; // mtctr 5; // bctrl; // ld 2, 40(1); //; // And there is nothing wrong with this code, as such, but there is a linker bug; // in binutils (https://sourceware.org/bugzilla/show_bug.cgi?id=18414) that will; // misoptimize this code sequence to this:; // nop; // std r2,40(r1); // ld r5,0(r27); // ld r2,8(r27); // ld r11,16(r27); // ld r3,-32472(r2); // clrldi r4,r4,32; // mtctr r5; // bctrl; // ld r2,40(r1); // because the linker does not know (and does not check) that the value in r2; // changed in between the instruction using the .LC12@toc@ha (TOC-relative); // relocation and the instruction using the .LC12@toc@l(3) relocation.; // Because it finds these instructions using the relocations (and not by; // scanning the instructions), it has been asserted that there is no good way; // to detect the change of r2 in between. As a result, this bug may never be; // fixed (i.e. it may become part of the definition of the ABI). GCC was; // updated to add extra dependencies on r2 to instructions using the @toc@l; // relocations to avoid this problem, and we'll do the same here.; //; // This is done as a separate pass because:; // 1. These extra r2 dependencies are not really properties of the; // instructions, but rather due to a linker bug, and maybe one day we'll be; // able to get rid of them when targeting linkers without this bug (and,; // thus, keeping the logic centralized here will make that; // straightforward).; // 2. There are ISel-level peephole optimizations that propagate the @toc@l; // relocations to some user instructions, and so the exta dependencies do; // not apply only to a fixed set of instructions (without undesirable; // definition replication).; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCTOCRegDeps.cpp:2209,log,logic,2209,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCTOCRegDeps.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCTOCRegDeps.cpp,1,['log'],['logic']
Testability,"* //; // * verbose [Int_t] increasing verbosity (0 == minimal) * //; // * dyn [Bool_t] if kTRUE run in dynamic startup mode * //; // * skipds [Bool_t] if kTRUE the dataset related tests are skipped * //; // * * //; // * A certain number of swithces can also be controlled via environment * //; // * variables: check './stressProof -h' * //; // * * //; // * The stressProof function returns 0 on success, 1 on failure. * //; // * * //; // * The successful output looks like this: * //; // * * //; // * ****************************************************************** * //; // * * Starting P R O O F - S T R E S S suite * * //; // * ****************************************************************** * //; // * * Log file: /tmp/ProofStress_XrcwBe * //; // * ****************************************************************** * //; // * Test 1 : Open a session ................................... OK * * //; // * Test 2 : Get session logs ................................. OK * * //; // * Test 3 : Simple random number generation .................. OK * * //; // * Test 4 : Dataset handling with H1 files ................... OK * * //; // * Test 5 : H1: chain processing ............................. OK * * //; // * Test 6 : H1: file collection processing ................... OK * * //; // * Test 7 : H1: file collection, TPacketizerAdaptive ......... OK * * //; // * Test 8 : H1: by-name processing ........................... OK * * //; // * Test 9 : H1: multi dataset processing ..................... OK * * //; // * Test 10 : H1: multi dataset and entry list ................. OK * * //; // * Test 11 : Package management with 'event' .................. OK * * //; // * Test 12 : Package argument passing ......................... OK * * //; // * Test 13 : Simple 'event' generation ........................ OK * * //; // * Test 14 : Input data propagation ........................... OK * * //; // * Test 15 : H1, Simple: async mode :.......................... OK * * //; // * Test 16 : Admin fun",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:1853,Test,Test,1853,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['Test'],['Test']
Testability,"**************** * //; // * * Log file: /tmp/ProofStress_XrcwBe * //; // * ****************************************************************** * //; // * Test 1 : Open a session ................................... OK * * //; // * Test 2 : Get session logs ................................. OK * * //; // * Test 3 : Simple random number generation .................. OK * * //; // * Test 4 : Dataset handling with H1 files ................... OK * * //; // * Test 5 : H1: chain processing ............................. OK * * //; // * Test 6 : H1: file collection processing ................... OK * * //; // * Test 7 : H1: file collection, TPacketizerAdaptive ......... OK * * //; // * Test 8 : H1: by-name processing ........................... OK * * //; // * Test 9 : H1: multi dataset processing ..................... OK * * //; // * Test 10 : H1: multi dataset and entry list ................. OK * * //; // * Test 11 : Package management with 'event' .................. OK * * //; // * Test 12 : Package argument passing ......................... OK * * //; // * Test 13 : Simple 'event' generation ........................ OK * * //; // * Test 14 : Input data propagation ........................... OK * * //; // * Test 15 : H1, Simple: async mode :.......................... OK * * //; // * Test 16 : Admin functionality .............................. OK * * //; // * Test 17 : Dynamic sub-mergers functionality ................ OK * * //; // * Test 18 : Event range processing ........................... OK * * //; // * Test 19 : Event range, TPacketizerAdaptive ................. OK * * //; // * Test 20 : File-resident output: merge ...................... OK * * //; // * Test 21 : File-resident output: merge w/ submergers ........ OK * * //; // * Test 22 : File-resident output: create dataset ............. OK * * //; // * Test 23 : File-resident output: multi trees ................ OK * * //; // * Test 24 : TTree friends (and TPacketizerFile) .............. OK * * //; // * Test 25 :",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:2539,Test,Test,2539,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['Test'],['Test']
Testability,"********************************** * //; // * * Starting P R O O F - S T R E S S suite * * //; // * ****************************************************************** * //; // * * Log file: /tmp/ProofStress_XrcwBe * //; // * ****************************************************************** * //; // * Test 1 : Open a session ................................... OK * * //; // * Test 2 : Get session logs ................................. OK * * //; // * Test 3 : Simple random number generation .................. OK * * //; // * Test 4 : Dataset handling with H1 files ................... OK * * //; // * Test 5 : H1: chain processing ............................. OK * * //; // * Test 6 : H1: file collection processing ................... OK * * //; // * Test 7 : H1: file collection, TPacketizerAdaptive ......... OK * * //; // * Test 8 : H1: by-name processing ........................... OK * * //; // * Test 9 : H1: multi dataset processing ..................... OK * * //; // * Test 10 : H1: multi dataset and entry list ................. OK * * //; // * Test 11 : Package management with 'event' .................. OK * * //; // * Test 12 : Package argument passing ......................... OK * * //; // * Test 13 : Simple 'event' generation ........................ OK * * //; // * Test 14 : Input data propagation ........................... OK * * //; // * Test 15 : H1, Simple: async mode :.......................... OK * * //; // * Test 16 : Admin functionality .............................. OK * * //; // * Test 17 : Dynamic sub-mergers functionality ................ OK * * //; // * Test 18 : Event range processing ........................... OK * * //; // * Test 19 : Event range, TPacketizerAdaptive ................. OK * * //; // * Test 20 : File-resident output: merge ...................... OK * * //; // * Test 21 : File-resident output: merge w/ submergers ........ OK * * //; // * Test 22 : File-resident output: create dataset ............. OK * * //; // * Test 23 : Fil",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:2385,Test,Test,2385,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['Test'],['Test']
Testability,"*************************************************************** * //; // * Test 1 : Open a session ................................... OK * * //; // * Test 2 : Get session logs ................................. OK * * //; // * Test 3 : Simple random number generation .................. OK * * //; // * Test 4 : Dataset handling with H1 files ................... OK * * //; // * Test 5 : H1: chain processing ............................. OK * * //; // * Test 6 : H1: file collection processing ................... OK * * //; // * Test 7 : H1: file collection, TPacketizerAdaptive ......... OK * * //; // * Test 8 : H1: by-name processing ........................... OK * * //; // * Test 9 : H1: multi dataset processing ..................... OK * * //; // * Test 10 : H1: multi dataset and entry list ................. OK * * //; // * Test 11 : Package management with 'event' .................. OK * * //; // * Test 12 : Package argument passing ......................... OK * * //; // * Test 13 : Simple 'event' generation ........................ OK * * //; // * Test 14 : Input data propagation ........................... OK * * //; // * Test 15 : H1, Simple: async mode :.......................... OK * * //; // * Test 16 : Admin functionality .............................. OK * * //; // * Test 17 : Dynamic sub-mergers functionality ................ OK * * //; // * Test 18 : Event range processing ........................... OK * * //; // * Test 19 : Event range, TPacketizerAdaptive ................. OK * * //; // * Test 20 : File-resident output: merge ...................... OK * * //; // * Test 21 : File-resident output: merge w/ submergers ........ OK * * //; // * Test 22 : File-resident output: create dataset ............. OK * * //; // * Test 23 : File-resident output: multi trees ................ OK * * //; // * Test 24 : TTree friends (and TPacketizerFile) .............. OK * * //; // * Test 25 : TTree friends, same file ......................... OK * * //; // * Test 26 :",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:2616,Test,Test,2616,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['Test'],['Test']
Testability,***********************************************************************; // * Starting stress H I S T O F I T *; // ****************************************************************************; // Test 1D and 2D objects; // Test 1: 'Histogram 1D Variable' with 'GAUS'...................OK; // Test 2: 'Histogram 1D' with 'GAUS'............................OK; // Test 3: 'TGraph 1D' with 'GAUS'...............................OK; // Test 4: 'TGraphErrors 1D' with 'GAUS'.........................OK; // Test 5: 'THnSparse 1D' with 'GAUS'............................OK; // Test 6: 'Histogram 1D Variable' with 'Polynomial'.............OK; // Test 7: 'Histogram 1D' with 'Polynomial'......................OK; // Test 8: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 9: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 10: 'THnSparse 1D' with 'Polynomial'......................OK; // Test 11: 'Histogram 2D Variable' with 'gaus2D'.................OK; // Test 12: 'Histogram 2D' with 'gaus2D'..........................OK; // Test 13: 'TGraph 2D' with 'gaus2D'.............................OK; // Test 14: 'TGraphErrors 2DGE' with 'gaus2D'.....................OK; // Test 15: 'THnSparse 2D' with 'gaus2D'..........................OK; // Test Linear fits; // Test 16: 'Histogram 1D Variable' with 'Polynomial'.............OK; // Test 17: 'Histogram 1D' with 'Polynomial'......................OK; // Test 18: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 19: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 20: 'THnSparse 1D' with 'Polynomial'......................OK; // Test 21: 'Histogram 2D Variable' with 'Poly2D'.................OK; // Test 22: 'Histogram 2D' with 'Poly2D'..........................OK; // Test 23: 'TGraph 2D' with 'Poly2D'.............................OK; // Test 24: 'TGraphErrors 2DGE' with 'Poly2D'.....................OK; // Test 25: 'THnSparse 2D' with 'Poly2D'..........................OK; // Test unbinned f,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:2036,Test,Test,2036,test/stressHistoFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx,1,['Test'],['Test']
Testability,"*********************************************************; // * Starting R O O T - S T R E S S test suite with 1000 events; // ******************************************************************; // Test 1 : Functions, Random Numbers, Histogram Fits............. OK; // Test 2 : Check size & compression factor of a Root file........ OK; // Test 3 : Purge, Reuse of gaps in TFile......................... OK; // Test 4 : Test of 2-d histograms, functions, 2-d fits........... OK; // Test 5 : Test graphics & Postscript............................ OK; // Test 6 : Test subdirectories in a Root file.................... OK; // Test 7 : TNtuple, selections, TCut, TCutG, TEventList.......... OK; // Test 8 : Trees split and compression modes..................... OK; // Test 9 : Analyze Event.root file of stress 8................... OK; // Test 10 : Create 10 files starting from Event.root.............. OK; // Test 11 : Test chains of Trees using the 10 files............... OK; // Test 12 : Compare histograms of test 9 and 11................... OK; // Test 13 : Test merging files of a chain......................... OK; // Test 14 : Check correct rebuilt of Event.root in test 13........ OK; // Test 15 : Divert Tree branches to separate files................ OK; // Test 16 : CINT test (3 nested loops) with LHCb trigger.......... OK; // Test 17 : Test mkdir............................................ OK; // ******************************************************************; //* Linux pcbrun.cern.ch 2.4.20 #1 Thu Jan 9 12:21:02 MET 2003; //******************************************************************; //stress : Total I/O = 703.7 Mbytes, I = 535.2, O = 168.5; //stress : Compr I/O = 557.0 Mbytes, I = 425.1, O = 131.9; //stress : Real Time = 64.84 seconds Cpu Time = 61.00 seconds; //******************************************************************; //* ROOTMARKS = 600.1 * Root4.02/00 20041217/1146; //******************************************************************; //; //_______",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:2594,Test,Test,2594,test/stress.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx,2,"['Test', 'test']","['Test', 'test']"
Testability,*************************************************; // Test 1D and 2D objects; // Test 1: 'Histogram 1D Variable' with 'GAUS'...................OK; // Test 2: 'Histogram 1D' with 'GAUS'............................OK; // Test 3: 'TGraph 1D' with 'GAUS'...............................OK; // Test 4: 'TGraphErrors 1D' with 'GAUS'.........................OK; // Test 5: 'THnSparse 1D' with 'GAUS'............................OK; // Test 6: 'Histogram 1D Variable' with 'Polynomial'.............OK; // Test 7: 'Histogram 1D' with 'Polynomial'......................OK; // Test 8: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 9: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 10: 'THnSparse 1D' with 'Polynomial'......................OK; // Test 11: 'Histogram 2D Variable' with 'gaus2D'.................OK; // Test 12: 'Histogram 2D' with 'gaus2D'..........................OK; // Test 13: 'TGraph 2D' with 'gaus2D'.............................OK; // Test 14: 'TGraphErrors 2DGE' with 'gaus2D'.....................OK; // Test 15: 'THnSparse 2D' with 'gaus2D'..........................OK; // Test Linear fits; // Test 16: 'Histogram 1D Variable' with 'Polynomial'.............OK; // Test 17: 'Histogram 1D' with 'Polynomial'......................OK; // Test 18: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 19: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 20: 'THnSparse 1D' with 'Polynomial'......................OK; // Test 21: 'Histogram 2D Variable' with 'Poly2D'.................OK; // Test 22: 'Histogram 2D' with 'Poly2D'..........................OK; // Test 23: 'TGraph 2D' with 'Poly2D'.............................OK; // Test 24: 'TGraphErrors 2DGE' with 'Poly2D'.....................OK; // Test 25: 'THnSparse 2D' with 'Poly2D'..........................OK; // Test unbinned fits; // Test 26: 'tree' with 'gausn'...................................OK; // Test 27: 'tree' with 'gaus2Dn'.................................O,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:2176,Test,Test,2176,test/stressHistoFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx,1,['Test'],['Test']
Testability,"*******************************************; // * Starting stress H I S T O G R A M *; // ****************************************************************************; // Test 1: Testing Histogram Projections without weights....................OK; // Test 2: Testing Profile Projections without weights......................OK; // Test 3: Testing Histogram Projections with weights.......................OK; // Test 4: Testing Profile Projections with weights.......................OK; // Test 5: Projection with Range for Histograms and Profiles................OK; // Test 6: Histogram Rebinning..............................................OK; // Test 7: Add tests for 1D, 2D and 3D Histograms and Profiles..............OK; // Test 8: Multiply tests for 1D, 2D and 3D Histograms......................OK; // Test 9: Divide tests for 1D, 2D and 3D Histograms........................OK; // Test 10: Copy tests for 1D, 2D and 3D Histograms and Profiles.............OK; // Test 11: Read/Write tests for 1D, 2D and 3D Histograms and Profiles.......OK; // Test 12: Merge tests for 1D, 2D and 3D Histograms and Profiles............OK; // Test 13: Label tests for 1D and 2D Histograms ............................OK; // Test 14: Interpolation tests for Histograms...............................OK; // Test 15: Scale tests for Profiles.........................................OK; // Test 16: Integral tests for Histograms....................................OK; // Test 17: Buffer tests for Histograms......................................OK; // Test 18: Extend axis tests for Histograms.................................OK; // Test 19: TH1-THn[Sparse] Conversion tests.................................OK; // Test 20: FillData tests for Histograms and Sparses........................OK; // Test 21: Reference File Read for Histograms and Profiles..................OK; // ****************************************************************************; // stressHistogram: Real Time = 86.22 seconds Cpu Time = 85.64",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:2422,Test,Test,2422,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,2,"['Test', 'test']","['Test', 'tests']"
Testability,"******************************/; /** \class RooStats::ProfileLikelihoodCalculator; \ingroup Roostats. The ProfileLikelihoodCalculator is a concrete implementation of CombinedCalculator; (the interface class for tools which can produce both a RooStats HypoTestResult; and ConfInterval). The tool uses the profile likelihood ratio as a test statistic,; and assumes that Wilks' theorem is valid. Wilks' theorem states that \f$ -2 \cdot \ln(\lambda) \f$; (profile likelihood ratio) is asymptotically distributed as a \f$ \chi^2 \f$ distribution; with \f$ N \f$ degrees of freedom. Thus, \f$p\f$-values can be; constructed, and the profile likelihood ratio can be used to construct a; LikelihoodInterval. (In the future, this class could be extended to use toy; Monte Carlo to calibrate the distribution of the test statistic). Usage: It uses the interface of the CombinedCalculator, so that it can be; configured by specifying:. - A model common model (*e.g.* a family of specific models, which includes both; the null and alternate); - A data set; - A set of parameters of interest. The nuisance parameters will be all other; parameters of the model.; - A set of parameters which specify the null hypothesis (including values; and const/non-const status). The interface allows one to pass the model, data, and parameters either directly; or via a ModelConfig class. The alternate hypothesis leaves the parameter free; to take any value other than those specified by the null hypothesis. There is; therefore no need to specify the alternate parameters. After configuring the calculator, one only needs to call GetHypoTest() (which; will return a HypoTestResult pointer) or GetInterval() (which will return a; ConfInterval pointer). This calculator can work with both one-dimensional intervals or multi-; dimensional ones (contours). Note that for hypothesis tests, it is often better to use the; AsymptoticCalculator, which can compute in addition the expected; \f$p\f$-value using an Asimov data set. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodCalculator.cxx:2242,test,tests,2242,roofit/roostats/src/ProfileLikelihoodCalculator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodCalculator.cxx,1,['test'],['tests']
Testability,"*************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooMCStudy.cxx; \class RooMCStudy; \ingroup Roofitcore. Helper class to facilitate Monte Carlo studies; such as 'goodness-of-fit' studies, that involve fitting a PDF; to multiple toy Monte Carlo sets. These may be generated from either same PDF; or from a different PDF with similar parameters. Given a fit and a generator PDF (they might be identical), RooMCStudy can produce; toyMC samples and/or fit these.; It accumulates the post-fit parameters of each iteration in a dataset. These can be; retrieved using fitParams() or fitParDataSet(). This dataset additionally contains the; variables; - NLL: The value of the negative log-likelihood for each run.; - ngen: The number of events generated for each run. Additional plotting routines simplify the task of plotting; the distribution of the minimized likelihood, the fitted parameter values,; fitted error and pull distribution. RooMCStudy provides the option to insert add-in modules; that modify the generate-and-fit cycle and allow to perform; extra steps in the cycle. Output of these modules can be stored; alongside the fit results in the aggregate results dataset.; These study modules should derive from the class RooAbsMCStudyModule. Check the RooFit tutorials; - rf801_mcstudy.C; - rf802_mcstudy_addons.C; - rf803_mcstudy_addons2.C; - rf804_mcstudy_constr.C; for usage examples.; **/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMCStudy.cxx:1334,log,log-likelihood,1334,roofit/roofitcore/src/RooMCStudy.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMCStudy.cxx,1,['log'],['log-likelihood']
Testability,"**********************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TVirtualFFT; \ingroup Base. TVirtualFFT is an interface class for Fast Fourier Transforms. The default FFT library is FFTW. To use it, FFTW3 library should already; be installed, and ROOT should be have fftw3 module enabled, with the directories; of fftw3 include file and library specified (see installation instructions).; Function SetDefaultFFT() allows to change the default library. ## Available transform types:; FFT:; - ""C2CFORWARD"" - a complex input/output discrete Fourier transform (DFT); in one or more dimensions, -1 in the exponent; - ""C2CBACKWARD""- a complex input/output discrete Fourier transform (DFT); in one or more dimensions, +1 in the exponent; - ""R2C"" - a real-input/complex-output discrete Fourier transform (DFT); in one or more dimensions,; - ""C2R"" - inverse transforms to ""R2C"", taking complex input; (storing the non-redundant half of a logically Hermitian array); to real output; - ""R2HC"" - a real-input DFT with output in ¡Èhalfcomplex¡É format,; i.e. real and imaginary parts for a transform of size n stored as; r0, r1, r2, ..., rn/2, i(n+1)/2-1, ..., i2, i1; - ""HC2R"" - computes the reverse of FFTW_R2HC, above; - ""DHT"" - computes a discrete Hartley transform. ## Sine/cosine transforms:; Different types of transforms are specified by parameter kind of the SineCosine() static; function. 4 different kinds of sine and cosine transforms are available. - DCT-I (REDFT00 in FFTW3 notation)- kind=0; - DCT-II (REDFT01 in FFTW3 notation)- kind=1; - DCT-III(REDFT10 in FFTW3 notation)- kind=2; - DCT-IV (REDFT11 in FFTW3 notation)- kind=3; - DST-I (RODFT00 in FFTW3 notation)- kind=4; - DST-II (RODFT01 in FFTW3 notation)- kind=5; - DST-III(RODFT10 in FFT",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualFFT.cxx:1293,log,logically,1293,core/base/src/TVirtualFFT.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualFFT.cxx,1,['log'],['logically']
Testability,"****************; * Project: RooStats; * Package: RooFit/RooStats; * @(#)root/roofit/roostats:$Id$; * Authors:; * Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke, Sven Kreiss; *; *****************************************************************************/; /** \class RooStats::HypoTestResult; \ingroup Roostats. HypoTestResult is a base class for results from hypothesis tests.; Any tool inheriting from HypoTestCalculator can return a HypoTestResult.; As such, it stores a p-value for the null-hypothesis (eg. background-only); and an alternate hypothesis (eg. signal+background).; The p-values can also be transformed into confidence levels; (\f$CL_{b}\f$, \f$CL_{s+b}\f$) in a trivial way.; The ratio of the \f$CL_{s+b}\f$ to \f$CL_{b}\f$ is often called; \f$CL_{s}\f$, and is considered useful, though it is not a probability.; Finally, the p-value of the null can be transformed into a number of; equivalent Gaussian sigma using the Significance method. The p-value of the null for a given test statistic is rigorously defined and; this is the starting point for the following conventions. ### Conventions used in this class. The p-value for the null and alternate are on the **same side** of the; observed value of the test statistic. This is the more standard; convention and avoids confusion when doing inverted tests. For exclusion, we also want the formula \f$CL_{s} = CL_{s+b} / CL_{b}\f$; to hold which therefore defines our conventions for \f$CL_{s+b}\f$ and; \f$CL_{b}\f$. \f$CL_{s}\f$ was specifically invented for exclusion; and therefore all quantities need be related through the assignments; as they are for exclusion: \f$CL_{s+b} = p_{s+b}\f$; \f$CL_{b} = p_{b}\f$. This; is derived by considering the scenarios of a powerful and not powerful; inverted test, where for the not so powerful test, \f$CL_{s}\f$ must be; close to one. For results of Hypothesis tests,; \f$CL_{s}\f$ has no similar direct interpretation as for exclusion and can; be larger than one. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestResult.cxx:1546,test,test,1546,roofit/roostats/src/HypoTestResult.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestResult.cxx,6,['test'],"['test', 'tests']"
Testability,"**************; // Test 1: Testing Histogram Projections without weights....................OK; // Test 2: Testing Profile Projections without weights......................OK; // Test 3: Testing Histogram Projections with weights.......................OK; // Test 4: Testing Profile Projections with weights.......................OK; // Test 5: Projection with Range for Histograms and Profiles................OK; // Test 6: Histogram Rebinning..............................................OK; // Test 7: Add tests for 1D, 2D and 3D Histograms and Profiles..............OK; // Test 8: Multiply tests for 1D, 2D and 3D Histograms......................OK; // Test 9: Divide tests for 1D, 2D and 3D Histograms........................OK; // Test 10: Copy tests for 1D, 2D and 3D Histograms and Profiles.............OK; // Test 11: Read/Write tests for 1D, 2D and 3D Histograms and Profiles.......OK; // Test 12: Merge tests for 1D, 2D and 3D Histograms and Profiles............OK; // Test 13: Label tests for 1D and 2D Histograms ............................OK; // Test 14: Interpolation tests for Histograms...............................OK; // Test 15: Scale tests for Profiles.........................................OK; // Test 16: Integral tests for Histograms....................................OK; // Test 17: Buffer tests for Histograms......................................OK; // Test 18: Extend axis tests for Histograms.................................OK; // Test 19: TH1-THn[Sparse] Conversion tests.................................OK; // Test 20: FillData tests for Histograms and Sparses........................OK; // Test 21: Reference File Read for Histograms and Profiles..................OK; // ****************************************************************************; // stressHistogram: Real Time = 86.22 seconds Cpu Time = 85.64 seconds; // ROOTMARKS = 1292.62 ROOT version: 6.05/01 remotes/origin/master@v6-05-01-336-g5c3d5ff; // ************************************************",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:2584,Test,Test,2584,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,2,"['Test', 'test']","['Test', 'tests']"
Testability,"***; // * Starting R O O T - S T R E S S test suite with 1000 events; // ******************************************************************; // Test 1 : Functions, Random Numbers, Histogram Fits............. OK; // Test 2 : Check size & compression factor of a Root file........ OK; // Test 3 : Purge, Reuse of gaps in TFile......................... OK; // Test 4 : Test of 2-d histograms, functions, 2-d fits........... OK; // Test 5 : Test graphics & Postscript............................ OK; // Test 6 : Test subdirectories in a Root file.................... OK; // Test 7 : TNtuple, selections, TCut, TCutG, TEventList.......... OK; // Test 8 : Trees split and compression modes..................... OK; // Test 9 : Analyze Event.root file of stress 8................... OK; // Test 10 : Create 10 files starting from Event.root.............. OK; // Test 11 : Test chains of Trees using the 10 files............... OK; // Test 12 : Compare histograms of test 9 and 11................... OK; // Test 13 : Test merging files of a chain......................... OK; // Test 14 : Check correct rebuilt of Event.root in test 13........ OK; // Test 15 : Divert Tree branches to separate files................ OK; // Test 16 : CINT test (3 nested loops) with LHCb trigger.......... OK; // Test 17 : Test mkdir............................................ OK; // ******************************************************************; //* Linux pcbrun.cern.ch 2.4.20 #1 Thu Jan 9 12:21:02 MET 2003; //******************************************************************; //stress : Total I/O = 703.7 Mbytes, I = 535.2, O = 168.5; //stress : Compr I/O = 557.0 Mbytes, I = 425.1, O = 131.9; //stress : Real Time = 64.84 seconds Cpu Time = 61.00 seconds; //******************************************************************; //* ROOTMARKS = 600.1 * Root4.02/00 20041217/1146; //******************************************************************; //; //_____________________________batch only_____________________",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:2666,Test,Test,2666,test/stress.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx,9,"['Test', 'test']","['Test', 'test']"
Testability,**; // * Starting stress H I S T O F I T *; // ****************************************************************************; // Test 1D and 2D objects; // Test 1: 'Histogram 1D Variable' with 'GAUS'...................OK; // Test 2: 'Histogram 1D' with 'GAUS'............................OK; // Test 3: 'TGraph 1D' with 'GAUS'...............................OK; // Test 4: 'TGraphErrors 1D' with 'GAUS'.........................OK; // Test 5: 'THnSparse 1D' with 'GAUS'............................OK; // Test 6: 'Histogram 1D Variable' with 'Polynomial'.............OK; // Test 7: 'Histogram 1D' with 'Polynomial'......................OK; // Test 8: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 9: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 10: 'THnSparse 1D' with 'Polynomial'......................OK; // Test 11: 'Histogram 2D Variable' with 'gaus2D'.................OK; // Test 12: 'Histogram 2D' with 'gaus2D'..........................OK; // Test 13: 'TGraph 2D' with 'gaus2D'.............................OK; // Test 14: 'TGraphErrors 2DGE' with 'gaus2D'.....................OK; // Test 15: 'THnSparse 2D' with 'gaus2D'..........................OK; // Test Linear fits; // Test 16: 'Histogram 1D Variable' with 'Polynomial'.............OK; // Test 17: 'Histogram 1D' with 'Polynomial'......................OK; // Test 18: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 19: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 20: 'THnSparse 1D' with 'Polynomial'......................OK; // Test 21: 'Histogram 2D Variable' with 'Poly2D'.................OK; // Test 22: 'Histogram 2D' with 'Poly2D'..........................OK; // Test 23: 'TGraph 2D' with 'Poly2D'.............................OK; // Test 24: 'TGraphErrors 2DGE' with 'Poly2D'.....................OK; // Test 25: 'THnSparse 2D' with 'Poly2D'..........................OK; // Test unbinned fits; // Test 26: 'tree' with 'gausn'................................,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:2106,Test,Test,2106,test/stressHistoFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx,1,['Test'],['Test']
Testability,"*; * Usage: options are given through Factory: *; * factory->BookMethod( ""MethodCFMlpANN"", OptionsString ); *; * *; * where: *; * TString OptionsString = ""n_training_cycles:n_hidden_layers"" *; * *; * default is: n_training_cycles = 5000, n_layers = 4 *; * note that the number of hidden layers in the NN is *; * *; * n_hidden_layers = n_layers - 2 *; * *; * since there is one input and one output layer. The number of *; * nodes (neurons) is predefined to be *; * *; * n_nodes[i] = nvars + 1 - i (where i=1..n_layers) *; * *; * with nvars being the number of variables used in the NN. *; * Hence, the default case is: n_neurons(layer 1 (input)) : nvars *; * n_neurons(layer 2 (hidden)): nvars-1 *; * n_neurons(layer 3 (hidden)): nvars-1 *; * n_neurons(layer 4 (out)) : 2 *; * *; * This artificial neural network usually needs a relatively large *; * number of cycles to converge (8000 and more). Overtraining can *; * be efficiently tested by comparing the signal and background *; * output of the NN for the events that were used for training and *; * an independent data sample (with equal properties). If the separation *; * performance is significantly better for the training sample, the *; * NN interprets statistical effects, and is hence overtrained. In *; * this case, the number of cycles should be reduced, or the size *; * of the training sample increased. *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Xavier Prudent <prudent@lapp.in2p3.fr> - LAPP, France *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * LAPP, Annecy, France *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; * *; ************************",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCFMlpANN.h:1886,test,tested,1886,tmva/tmva/inc/TMVA/MethodCFMlpANN.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCFMlpANN.h,1,['test'],['tested']
Testability,"*iqr. - `a = 0`; no anchor drawn; - `a = 1`; the anchors are drawn. - `p = 0`; no points drawn; - `p = 1`; only outliers are drawn; - `p = 2`; all datapoints are drawn; - `p = 3`: all datapoints are drawn scattered. - `h = 0`; no histogram is drawn; - `h = 1`; histogram at the left or bottom side is drawn; - `h = 2`; histogram at the right or top side is drawn; - `h = 3`; histogram at left and right or top and bottom (violin-style) is drawn. - `z = 0`; no zero indicator line is drawn; - `z = 1`; zero indicator line is drawn. As one can see all individual options for both candle and violin plots can be accessed by this; mechanism. In deed the keywords CANDLE(<option-string>) and VIOLIN(<option-string>) have the same; meaning. So you can parametrise an option-string for a candle plot and use the keywords VIOLIN and; vice versa, if you wish. Using a logarithmic x- or y-axis is possible for candle and violin charts. \since **ROOT version 6.11/01**. a logarithmic z-axis is possible, too but will only affect violin charts of course. \anchor HP140a; #### The CANDLE option. <a href=""http://en.wikipedia.org/wiki/Box_plot"">A Candle plot</a> (also known as; a ""box plot"" or ""whisker plot"") was invented in 1977 by John Tukey. It is a convenient; way to describe graphically a data distribution (D) with only five numbers:. 1. The minimum value of the distribution D (bottom or left whisker).; 2. The lower quartile (Q1): 25% of the data points in D are less than Q1 (bottom of the box).; 3. The median (M): 50% of the data points in D are less than M.; 4. The upper quartile (Q3): 75% of the data points in D are less than Q3 (top of the box).; 5. The maximum value of the distribution D (top or right whisker). In this implementation a TH2 is considered as a collection of TH1 along; X (option `CANDLE` or `CANDLEX`) or Y (option `CANDLEY`).; Each TH1 is represented as one candle. Begin_Macro(source); ../../../tutorials/hist/candleplotwhiskers.C; End_Macro. The candle reduces the informati",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx:44823,log,logarithmic,44823,hist/histpainter/src/THistPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx,1,['log'],['logarithmic']
Testability,",""f2"");; A2->SetTitle(""exponential axis"");; A2->SetLabelSize(0.03);; A2->SetTitleSize(0.03);; A2->SetTitleOffset(1.2);; A2->Draw();. TF1 *f3=new TF1(""f3"",""log10(x)"",1,1000);; TGaxis *A3 = new TGaxis(2,-2,2,0,""f3"",505,"""");; A3->SetTitle(""logarithmic axis"");; A3->SetLabelSize(0.02);; A3->SetTitleSize(0.03);; A3->SetTitleOffset(0.); // Axis title automatically placed; A3->Draw();; }; End_Macro. Note that this functionality has some limitations and does not follow all the TGaxis setting.; In particular the number of divisions or the maximum number digits do not apply. \anchor GA02; ## Logarithmic axis. By default axis are linear. To define a `TGaxis` as logarithmic, it is; enough to create it with the option `""G""`. When plotting an histogram or a graph the logarithmic scale can be set using:. - `gPad->SetLogx(1);` set the logarithmic scale on the X axis; - `gPad->SetLogy(1);` set the logarithmic scale on the Y axis. When the `SetMoreLogLabels()` method is called more labels are drawn; when in logarithmic scale and there is a small number of decades (less than 3). \anchor GA03; ## Blank axis; To draw only the axis tick marks without the axis body, it is enough to specify; the option `""B""`. It useful to superpose axis. \anchor GA03a; ## Arrow on axis; \since **ROOT version 6.27/01:**. To draw an arrow at the end of the axis use the option `"">""`. To draw it at the beginning; of the axis use the option `""<""`. To draw it on both ends use `""<>""`. Begin_Macro(source); {; auto c = new TCanvas(""c"",""c"",0,0,500,500);; c->Range(-11,-11,11,11);. auto f2 = new TF1(""x2"",""x*x"",-10,10);; f2->SetLineColor(kRed);; f2->Draw(""same"");. auto f3 = new TF1(""x3"",""x*x*x"",-10,10);; f3->SetLineColor(kBlue);; f3->Draw(""same"");. // Draw the axis with arrows; auto ox = new TGaxis(-10,0,10,0,-10.,10.,510,""+-S>"");; ox->SetTickSize(0.009);; ox->SetLabelFont(42);; ox->SetLabelSize(0.025);; ox->Draw();; auto oy = new TGaxis(0,-10,0,10,-10,10,510,""+-S>"");; oy->SetTickSize(0.009);; oy->SetLabelFont(42);; oy-",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/graf/src/TGaxis.cxx:4887,log,logarithmic,4887,graf2d/graf/src/TGaxis.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/graf/src/TGaxis.cxx,1,['log'],['logarithmic']
Testability,"- 0.0157871; # Real time 0:00:34, CP time 34.360; # -----------------------------------------; # Part 6; # Results HybridCalculator_result:; # - Null p-value = 0.000666667 +/- 0.000149021; # - Significance = 3.20871 sigma; # - Number of S+B toys: 1000; # - Number of B toys: 30000; # - Test statistic evaluated on data: 5.03388; # - CL_b: 0.999333 +/- 0.000149021; # - CL_s+b: 0.511 +/- 0.0158076; # - CL_s: 0.511341 +/- 0.0158183; # Real time 0:05:06, CP time 306.330; # ---------------------------------------------------------; # OUTPUT w/ PROOF (2.66 GHz Intel Core i7, 4 virtual cores); # =========================================================; # -----------------------------------------; # Part 5; # Results HybridCalculator_result:; # - Null p-value = 0.00075 +/- 0.000173124; # - Significance = 3.17468 sigma; # - Number of S+B toys: 1000; # - Number of B toys: 20000; # - Test statistic evaluated on data: 10.8198; # - CL_b: 0.99925 +/- 0.000193577; # - CL_s+b: 0.454 +/- 0.0157443; # - CL_s: 0.454341 +/- 0.0157564; # Real time 0:00:16, CP time 0.990; # -----------------------------------------; # Part 6; # Results HybridCalculator_result:; # - Null p-value = 0.0007 +/- 0.000152699; # - Significance = 3.19465 sigma; # - Number of S+B toys: 1000; # - Number of B toys: 30000; # - Test statistic evaluated on data: 5.03388; # - CL_b: 0.9993 +/- 0.000152699; # - CL_s+b: 0.518 +/- 0.0158011; # - CL_s: 0.518363 +/- 0.0158124; # Real time 0:01:25, CP time 0.580; # ----------------------------------; # Comparison; # ----------------------------------; # LEPStatToolsForLHC; # https:#plone4.fnal.gov:4430/P0/phystat/packages/0703002; # Uses Gaussian prior; # CL_b = 6.218476e-04, Significance = 3.228665 sigma; #; # ----------------------------------; # Comparison; # ----------------------------------; # Asymptotic; # From the value of the profile likelihood ratio (5.0338); # The significance can be estimated using Wilks's theorem; # significance = sqrt(2*profileLR) = 3.1729 sigma",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py:2521,Test,Test,2521,tutorials/roostats/HybridInstructional.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py,1,['Test'],['Test']
Testability,"- TypeBasedAliasAnalysis.cpp - Type-Based Alias Analysis -------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the TypeBasedAliasAnalysis pass, which implements; // metadata-based TBAA.; //; // In LLVM IR, memory does not have types, so LLVM's own type system is not; // suitable for doing TBAA. Instead, metadata is added to the IR to describe; // a type system of a higher level language. This can be used to implement; // typical C/C++ TBAA, but it can also be used to implement custom alias; // analysis behavior for other languages.; //; // We now support two types of metadata format: scalar TBAA and struct-path; // aware TBAA. After all testing cases are upgraded to use struct-path aware; // TBAA and we can auto-upgrade existing bc files, the support for scalar TBAA; // can be dropped.; //; // The scalar TBAA metadata format is very simple. TBAA MDNodes have up to; // three fields, e.g.:; // !0 = !{ !""an example type tree"" }; // !1 = !{ !""int"", !0 }; // !2 = !{ !""float"", !0 }; // !3 = !{ !""const float"", !2, i64 1 }; //; // The first field is an identity field. It can be any value, usually; // an MDString, which uniquely identifies the type. The most important; // name in the tree is the name of the root node. Two trees with; // different root node names are entirely disjoint, even if they; // have leaves with common names.; //; // The second field identifies the type's parent node in the tree, or; // is null or omitted for a root node. A type is considered to alias; // all of its descendants and all of its ancestors in the tree. Also,; // a type is considered to alias all types in other trees, so that; // bitcode produced from multiple front-ends is handled conservatively.; //; // If th",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/TypeBasedAliasAnalysis.cpp:935,test,testing,935,interpreter/llvm-project/llvm/lib/Analysis/TypeBasedAliasAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/TypeBasedAliasAnalysis.cpp,1,['test'],['testing']
Testability,"--------+ | +----------+; | | | | |; this->| | | | |<--sib; +----------+ | +----------+; V; data; ~~~; It is conceptually VERY convenient to think of the data as being the; very first element of the sib node. Any primitive that tells sib to; perform some action on n nodes should include this 'hidden' element.; For InnerNodes, the hidden element has (physical) index 0 in the array,; and in LeafNodes, the hidden element has (virtual) index -1 in the array.; Therefore, there are two 'size' primitives for nodes:; ~~~ {.cpp}; Psize - the physical size: how many elements are contained in the; array in the node.; Vsize - the 'virtual' size; if the node is pointed to by; element 0 of the parent node, then Vsize == Psize;; otherwise the element in the parent item that points to this; node 'belongs' to this node, and Vsize == Psize+1;; ~~~; Parent nodes are always InnerNodes. These are the primitive operations on Nodes:; ~~~ {.cpp}; Append(elt) - adds an element to the end of the array of elements in a; node. It must never be called where appending the element; would fill the node.; Split() - divide a node in two, and create two new nodes.; SplitWith(sib) - create a third node between this node and the sib node,; divvying up the elements of their arrays.; PushLeft(n) - move n elements into the left sibling; PushRight(n) - move n elements into the right sibling; BalanceWithRight() - even up the number of elements in the two nodes.; BalanceWithLeft() - ditto; ~~~; To allow this implementation of btrees to also be an implementation of; sorted arrays/lists, the overhead is included to allow O(log n) access; of elements by their rank (`give me the 5th largest element').; Therefore, each Item keeps track of the number of keys in and below it; in the tree (remember, each item's tree is all keys to the RIGHT of the; item's own key).; ~~~ {.cpp}; [ [ < 0 1 2 3 > 4 < 5 6 7 > 8 < 9 10 11 12 > ] 13 [ < 14 15 16 > 17 < 18 19 20 > ] ]; 4 1 1 1 1 4 1 1 1 5 1 1 1 1 7 3 1 1 1 4 1 1 1; ~~~; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TBtree.cxx:7468,log,log,7468,core/cont/src/TBtree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TBtree.cxx,1,['log'],['log']
Testability,"-----------------------------"" << Endl;; FindListOfNodes((DecisionTreeNode*)dt->GetRoot());; for( UInt_t i = 0; i < fPruneSequence.size(); i++ ); fPruneSequence[i]->SetTerminal(); // prune all the nodes from the sequence; // test the quality of the pruned tree; Double_t quality = 1.0 - dt->TestPrunedTreeQuality()/weights;; fQualityMap.insert(std::make_pair<const Double_t,Double_t>(quality,fPruneStrength));. nnodes = CountNodes((DecisionTreeNode*)dt->GetRoot()); // count the number of nodes in the pruned tree. Log() << ""Prune strength : "" << fPruneStrength << Endl;; Log() << ""Had "" << lastNodeCount << "" nodes, now have "" << nnodes << Endl;; Log() << ""Quality index is: "" << quality << Endl;. if (lastNodeCount == nnodes) errCount++;; else {; errCount=0; // reset counter; if ( nnodes < lastNodeCount / 2 ) {; Log() << ""Decreasing fDeltaPruneStrength to "" << fDeltaPruneStrength/2.0; << "" because the number of nodes in the tree decreased by a factor of 2."" << Endl;; fDeltaPruneStrength /= 2.;; }; }; lastNodeCount = nnodes;; if (errCount > 20) {; Log() << ""Increasing fDeltaPruneStrength to "" << fDeltaPruneStrength*2.0; << "" because the number of nodes in the tree didn't change."" << Endl;; fDeltaPruneStrength *= 2.0;; }; if (errCount > 40) {; Log() << ""Having difficulty determining the optimal prune strength, bailing out!"" << Endl;; forceStop = kTRUE;; }; // reset the tree for the next iteration; for( UInt_t i = 0; i < fPruneSequence.size(); i++ ); fPruneSequence[i]->SetTerminal(false);; fPruneSequence.clear();; }; // from the set of pruned trees, find the one with the optimal quality index; std::multimap<Double_t,Double_t>::reverse_iterator it = fQualityMap.rend(); ++it;; fPruneStrength = it->second;; FindListOfNodes((DecisionTreeNode*)dt->GetRoot());. // adjust the step size for the next tree automatically; fPruneStrength = 1.0e-3;; fDeltaPruneStrength = (fPruneStrength - 1.0)/(Double_t)fQualityMap.size();. return new PruningInfo(it->first, it->second, fPruneSequence);; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx:1735,Log,Log,1735,tmva/tmva/src/ExpectedErrorPruneTool.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx,2,['Log'],['Log']
Testability,"--------------------------------------------------------------------===//; //; // DependenceAnalysis is an LLVM pass that analyses dependences between memory; // accesses. Currently, it is an (incomplete) implementation of the approach; // described in; //; // Practical Dependence Testing; // Goff, Kennedy, Tseng; // PLDI 1991; //; // There's a single entry point that analyzes the dependence between a pair; // of memory references in a function, returning either NULL, for no dependence,; // or a more-or-less detailed description of the dependence between them.; //; // Currently, the implementation cannot propagate constraints between; // coupled RDIV subscripts and lacks a multi-subscript MIV test.; // Both of these are conservative weaknesses;; // that is, not a source of correctness problems.; //; // Since Clang linearizes some array subscripts, the dependence; // analysis is using SCEV->delinearize to recover the representation of multiple; // subscripts, and thus avoid the more expensive and less precise MIV tests. The; // delinearization is controlled by the flag -da-delinearize.; //; // We should pay some careful attention to the possibility of integer overflow; // in the implementation of the various tests. This could happen with Add,; // Subtract, or Multiply, with both APInt's and SCEV's.; //; // Some non-linear subscript pairs can be handled by the GCD test; // (and perhaps other tests).; // Should explore how often these things occur.; //; // Finally, it seems like certain test cases expose weaknesses in the SCEV; // simplification, especially in the handling of sign and zero extensions.; // It could be useful to spend time exploring these.; //; // Please note that this is work in progress and the interface is subject to; // change.; //; //===----------------------------------------------------------------------===//; // //; // In memory of Ken Kennedy, 1945 - 2007 //; // //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp:1528,test,tests,1528,interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,4,['test'],"['test', 'tests']"
Testability,"-------------------------------------------------------------------===//; //; // Place garbage collection safepoints at appropriate locations in the IR. This; // does not make relocation semantics or variable liveness explicit. That's; // done by RewriteStatepointsForGC.; //; // Terminology:; // - A call is said to be ""parseable"" if there is a stack map generated for the; // return PC of the call. A runtime can determine where values listed in the; // deopt arguments and (after RewriteStatepointsForGC) gc arguments are located; // on the stack when the code is suspended inside such a call. Every parse; // point is represented by a call wrapped in an gc.statepoint intrinsic.; // - A ""poll"" is an explicit check in the generated code to determine if the; // runtime needs the generated code to cooperate by calling a helper routine; // and thus suspending its execution at a known state. The call to the helper; // routine will be parseable. The (gc & runtime specific) logic of a poll is; // assumed to be provided in a function of the name ""gc.safepoint_poll"".; //; // We aim to insert polls such that running code can quickly be brought to a; // well defined state for inspection by the collector. In the current; // implementation, this is done via the insertion of poll sites at method entry; // and the backedge of most loops. We try to avoid inserting more polls than; // are necessary to ensure a finite period between poll sites. This is not; // because the poll itself is expensive in the generated code; it's not. Polls; // do tend to impact the optimizer itself in negative ways; we'd like to avoid; // perturbing the optimization of the method as much as we can.; //; // We also need to make most call sites parseable. The callee might execute a; // poll (or otherwise be inspected by the GC). If so, the entire stack; // (including the suspended frame of the current method) must be parseable.; //; // This pass will insert:; // - Call parse points (""call safepoints"") for any cal",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/PlaceSafepoints.h:1279,log,logic,1279,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/PlaceSafepoints.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/PlaceSafepoints.h,2,['log'],['logic']
Testability,"----------------------------------===//; //; // Demo program which implements an example LLVM exception implementation, and; // shows several test cases including the handling of foreign exceptions.; // It is run with type info types arguments to throw. A test will; // be run for each given type info type. While type info types with the value; // of -1 will trigger a foreign C++ exception to be thrown; type info types; // <= 6 and >= 1 will cause the associated generated exceptions to be thrown; // and caught by generated test functions; and type info types > 6; // will result in exceptions which pass through to the test harness. All other; // type info types are not supported and could cause a crash. In all cases,; // the ""finally"" blocks of every generated test functions will executed; // regardless of whether or not that test function ignores or catches the; // thrown exception.; //; // examples:; //; // ExceptionDemo; //; // causes a usage to be printed to stderr; //; // ExceptionDemo 2 3 7 -1; //; // results in the following cases:; // - Value 2 causes an exception with a type info type of 2 to be; // thrown and caught by an inner generated test function.; // - Value 3 causes an exception with a type info type of 3 to be; // thrown and caught by an outer generated test function.; // - Value 7 causes an exception with a type info type of 7 to be; // thrown and NOT be caught by any generated function.; // - Value -1 causes a foreign C++ exception to be thrown and not be; // caught by any generated function; //; // Cases -1 and 7 are caught by a C++ test harness where the validity of; // of a C++ catch(...) clause catching a generated exception with a; // type info type of 7 is explained by: example in rules 1.6.4 in; // http://itanium-cxx-abi.github.io/cxx-abi/abi-eh.html (v1.22); //; // This code uses code from the llvm compiler-rt project and the llvm; // Kaleidoscope project.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:1499,test,test,1499,interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,3,['test'],['test']
Testability,"--------------------------===//; //; // This pass looks for equivalent functions that are mergable and folds them.; //; // Order relation is defined on set of functions. It was made through; // special function comparison procedure that returns; // 0 when functions are equal,; // -1 when Left function is less than right function, and; // 1 for opposite case. We need total-ordering, so we need to maintain; // four properties on the functions set:; // a <= a (reflexivity); // if a <= b and b <= a then a = b (antisymmetry); // if a <= b and b <= c then a <= c (transitivity).; // for all a and b: a <= b or b <= a (totality).; //; // Comparison iterates through each instruction in each basic block.; // Functions are kept on binary tree. For each new function F we perform; // lookup in binary tree.; // In practice it works the following way:; // -- We define Function* container class with custom ""operator<"" (FunctionPtr).; // -- ""FunctionPtr"" instances are stored in std::set collection, so every; // std::set::insert operation will give you result in log(N) time.; //; // As an optimization, a hash of the function structure is calculated first, and; // two functions are only compared if they have the same hash. This hash is; // cheap to compute, and has the property that if function F == G according to; // the comparison function, then hash(F) == hash(G). This consistency property; // is critical to ensuring all possible merging opportunities are exploited.; // Collisions in the hash affect the speed of the pass but not the correctness; // or determinism of the resulting transformation.; //; // When a match is found the functions are folded. If both functions are; // overridable, we move the functionality into a new internal function and; // leave two overridable thunks to it.; //; //===----------------------------------------------------------------------===//; //; // Future work:; //; // * virtual functions.; //; // Many functions have their address taken by the virtual fu",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/MergeFunctions.cpp:1403,log,log,1403,interpreter/llvm-project/llvm/lib/Transforms/IPO/MergeFunctions.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/MergeFunctions.cpp,1,['log'],['log']
Testability,"-------------------===//; //; // The LoopPredication pass tries to convert loop variant range checks to loop; // invariant by widening checks across loop iterations. For example, it will; // convert; //; // for (i = 0; i < n; i++) {; // guard(i < len);; // ...; // }; //; // to; //; // for (i = 0; i < n; i++) {; // guard(n - 1 < len);; // ...; // }; //; // After this transformation the condition of the guard is loop invariant, so; // loop-unswitch can later unswitch the loop by this condition which basically; // predicates the loop by the widened condition:; //; // if (n - 1 < len); // for (i = 0; i < n; i++) {; // ...; // }; // else; // deoptimize; //; // It's tempting to rely on SCEV here, but it has proven to be problematic.; // Generally the facts SCEV provides about the increment step of add; // recurrences are true if the backedge of the loop is taken, which implicitly; // assumes that the guard doesn't fail. Using these facts to optimize the; // guard results in a circular logic where the guard is optimized under the; // assumption that it never fails.; //; // For example, in the loop below the induction variable will be marked as nuw; // basing on the guard. Basing on nuw the guard predicate will be considered; // monotonic. Given a monotonic condition it's tempting to replace the induction; // variable in the condition with its value on the last iteration. But this; // transformation is not correct, e.g. e = 4, b = 5 breaks the loop.; //; // for (int i = b; i != e; i++); // guard(i u< len); //; // One of the ways to reason about this problem is to use an inductive proof; // approach. Given the loop:; //; // if (B(0)) {; // do {; // I = PHI(0, I.INC); // I.INC = I + Step; // guard(G(I));; // } while (B(I));; // }; //; // where B(x) and G(x) are predicates that map integers to booleans, we want a; // loop invariant expression M such the following program has the same semantics; // as the above:; //; // if (B(0)) {; // do {; // I = PHI(0, I.INC); // I.INC = I + ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopPredication.cpp:1344,log,logic,1344,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopPredication.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopPredication.cpp,1,['log'],['logic']
Testability,"----------------===//; // getSplitIteration -; // Rather than spend rarely-used space recording the splitting iteration; // during the Weak-Crossing SIV test, we re-compute it on demand.; // The re-computation is basically a repeat of the entire dependence test,; // though simplified since we know that the dependence exists.; // It's tedious, since we must go through all propagations, etc.; //; // Care is required to keep this code up to date with respect to the routine; // above, depends().; //; // Generally, the dependence analyzer will be used to build; // a dependence graph for a function (basically a map from instructions; // to dependences). Looking for cycles in the graph shows us loops; // that cannot be trivially vectorized/parallelized.; //; // We can try to improve the situation by examining all the dependences; // that make up the cycle, looking for ones we can break.; // Sometimes, peeling the first or last iteration of a loop will break; // dependences, and we've got flags for those possibilities.; // Sometimes, splitting a loop at some other iteration will do the trick,; // and we've got a flag for that case. Rather than waste the space to; // record the exact iteration (since we rarely know), we provide; // a method that calculates the iteration. It's a drag that it must work; // from scratch, but wonderful in that it's possible.; //; // Here's an example:; //; // for (i = 0; i < 10; i++); // A[i] = ...; // ... = A[11 - i]; //; // There's a loop-carried flow dependence from the store to the load,; // found by the weak-crossing SIV test. The dependence will have a flag,; // indicating that the dependence can be broken by splitting the loop.; // Calling getSplitIteration will return 5.; // Splitting the loop breaks the dependence, like so:; //; // for (i = 0; i <= 5; i++); // A[i] = ...; // ... = A[11 - i]; // for (i = 6; i < 10; i++); // A[i] = ...; // ... = A[11 - i]; //; // breaks the dependence and allows us to vectorize/parallelize; // both loops.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp:1632,test,test,1632,interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,1,['test'],['test']
Testability,"----------===//; // APInt Class; //===----------------------------------------------------------------------===//; /// Class for arbitrary precision integers.; ///; /// APInt is a functional replacement for common case unsigned integer type like; /// ""unsigned"", ""unsigned long"" or ""uint64_t"", but also allows non-byte-width; /// integer sizes and large integer value types such as 3-bits, 15-bits, or more; /// than 64-bits of precision. APInt provides a variety of arithmetic operators; /// and methods to manipulate integer values of any bit-width. It supports both; /// the typical integer arithmetic and comparison operations as well as bitwise; /// manipulation.; ///; /// The class has several invariants worth noting:; /// * All bit, byte, and word positions are zero-based.; /// * Once the bit width is set, it doesn't change except by the Truncate,; /// SignExtend, or ZeroExtend operations.; /// * All binary operators must be on APInt instances of the same bit width.; /// Attempting to use these operators on instances with different bit; /// widths will yield an assertion.; /// * The value is stored canonically as an unsigned value. For operations; /// where it makes a difference, there are both signed and unsigned variants; /// of the operation. For example, sdiv and udiv. However, because the bit; /// widths must be the same, operations such as Mul and Add produce the same; /// results regardless of whether the values are interpreted as signed or; /// not.; /// * In general, the class tries to follow the style of computation that LLVM; /// uses in its IR. This simplifies its use for LLVM.; /// * APInt supports zero-bit-width values, but operations that require bits; /// are not defined on it (e.g. you cannot ask for the sign of a zero-bit; /// integer). This means that operations like zero extension and logical; /// shifts are defined, but sign extension and ashr is not. Zero bit values; /// compare and hash equal to themselves, and countLeadingZeros returns 0.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:1142,assert,assertion,1142,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,2,"['assert', 'log']","['assertion', 'logical']"
Testability,"------; # Part 4; # Results HybridCalculator_result:; # - Null p-value = 0.00115 +/- 0.000228984; # - Significance = 3.04848 sigma; # - Number of S+B toys: 1000; # - Number of B toys: 20000; # - Test statistic evaluated on data: 150; # - CL_b: 0.99885 +/- 0.000239654; # - CL_s+b: 0.476 +/- 0.0157932; # - CL_s: 0.476548 +/- 0.0158118; # Real time 0:00:07, CP time 7.620; # -----------------------------------------; # Part 5; # Results HybridCalculator_result:; # - Null p-value = 0.0009 +/- 0.000206057; # - Significance = 3.12139 sigma; # - Number of S+B toys: 1000; # - Number of B toys: 20000; # - Test statistic evaluated on data: 10.8198; # - CL_b: 0.9991 +/- 0.000212037; # - CL_s+b: 0.465 +/- 0.0157726; # - CL_s: 0.465419 +/- 0.0157871; # Real time 0:00:34, CP time 34.360; # -----------------------------------------; # Part 6; # Results HybridCalculator_result:; # - Null p-value = 0.000666667 +/- 0.000149021; # - Significance = 3.20871 sigma; # - Number of S+B toys: 1000; # - Number of B toys: 30000; # - Test statistic evaluated on data: 5.03388; # - CL_b: 0.999333 +/- 0.000149021; # - CL_s+b: 0.511 +/- 0.0158076; # - CL_s: 0.511341 +/- 0.0158183; # Real time 0:05:06, CP time 306.330; # ---------------------------------------------------------; # OUTPUT w/ PROOF (2.66 GHz Intel Core i7, 4 virtual cores); # =========================================================; # -----------------------------------------; # Part 5; # Results HybridCalculator_result:; # - Null p-value = 0.00075 +/- 0.000173124; # - Significance = 3.17468 sigma; # - Number of S+B toys: 1000; # - Number of B toys: 20000; # - Test statistic evaluated on data: 10.8198; # - CL_b: 0.99925 +/- 0.000193577; # - CL_s+b: 0.454 +/- 0.0157443; # - CL_s: 0.454341 +/- 0.0157564; # Real time 0:00:16, CP time 0.990; # -----------------------------------------; # Part 6; # Results HybridCalculator_result:; # - Null p-value = 0.0007 +/- 0.000152699; # - Significance = 3.19465 sigma; # - Number of S+B toys: 1000; # ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py:1510,Test,Test,1510,tutorials/roostats/HybridInstructional.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/roostats/HybridInstructional.py,1,['Test'],['Test']
Testability,"->Draw('Muon_pt', 'Muon_pt > 100'); /// ~~~; /// \endparblock; /// \param [in] option; /// \parblock; /// The drawing option.; /// - When an histogram is produced it can be any histogram drawing option; /// listed in THistPainter.; /// - when no option is specified:; /// - the default histogram drawing option is used; /// if the expression is of the form ""e1"".; /// - if the expression is of the form ""e1:e2""or ""e1:e2:e3"" a cloud of; /// unbinned 2D or 3D points is drawn respectively.; /// - if the expression has four fields ""e1:e2:e3:e4"" a cloud of unbinned 3D; /// points is produced with e1 vs e2 vs e3, and e4 is mapped on the current color; /// palette.; /// - If option COL is specified when varexp has three fields:; /// ~~~ {.cpp}; /// tree.Draw(""e1:e2:e3"","""",""col"");; /// ~~~; /// a 2D scatter is produced with e1 vs e2, and e3 is mapped on the current; /// color palette. The colors for e3 are evaluated once in linear scale before; /// painting. Therefore changing the pad to log scale along Z as no effect; /// on the colors.; /// - if expression has more than four fields the option ""PARA""or ""CANDLE""; /// can be used.; /// - If option contains the string ""goff"", no graphics is generated.; /// \endparblock; /// \param [in] nentries The number of entries to process (default is all); /// \param [in] firstentry The first entry to process (default is 0); ///; /// ### Drawing expressions using arrays and array elements; ///; /// Let assumes, a leaf fMatrix, on the branch fEvent, which is a 3 by 3 array,; /// or a TClonesArray.; /// In a TTree::Draw expression you can now access fMatrix using the following; /// syntaxes:; ///; /// | String passed | What is used for each entry of the tree; /// |-----------------|--------------------------------------------------------|; /// | `fMatrix` | the 9 elements of fMatrix |; /// | `fMatrix[][]` | the 9 elements of fMatrix |; /// | `fMatrix[2][2]` | only the elements fMatrix[2][2] |; /// | `fMatrix[1]` | the 3 elements fMatrix[1][0], ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx:4435,log,log,4435,tree/tree/src/TTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx,1,['log'],['log']
Testability,"-of-process execution; // with debug support. A few notes beforehand:; //; // * Debuggers must implement the GDB JIT interface (gdb, udb, lldb 12+).; // * Debug support is currently limited to ELF on x86-64 platforms that run; // Unix-like systems.; // * There is a test for this example and it ships an IR file that is prepared; // for the instructions below.; //; //; // The following command line session provides a complete walkthrough of the; // feature using LLDB 12:; //; // [Terminal 1] Prepare a debuggable out-of-process JIT session:; //; // > cd llvm-project/build; // > ninja LLJITWithRemoteDebugging llvm-jitlink-executor; // > cp ../llvm/test/Examples/OrcV2Examples/Inputs/argc_sub1_elf.ll .; // > bin/LLJITWithRemoteDebugging --wait-for-debugger argc_sub1_elf.ll; // Found out-of-process executor: bin/llvm-jitlink-executor; // Launched executor in subprocess: 65535; // Attach a debugger and press any key to continue.; //; //; // [Terminal 2] Attach a debugger to the child process:; //; // (lldb) log enable lldb jit; // (lldb) settings set plugin.jit-loader.gdb.enable on; // (lldb) settings set target.source-map Inputs/ \; // /path/to/llvm-project/llvm/test/Examples/OrcV2Examples/Inputs/; // (lldb) attach -p 65535; // JITLoaderGDB::SetJITBreakpoint looking for JIT register hook; // JITLoaderGDB::SetJITBreakpoint setting JIT breakpoint; // Process 65535 stopped; // (lldb) b sub1; // Breakpoint 1: no locations (pending).; // WARNING: Unable to resolve breakpoint to any actual locations.; // (lldb) c; // Process 65535 resuming; //; //; // [Terminal 1] Press a key to start code generation and execution:; //; // Parsed input IR code from: argc_sub1_elf.ll; // Initialized LLJIT for remote executor; // Running: argc_sub1_elf.ll; //; //; // [Terminal 2] Breakpoint hits; we change the argc value from 1 to 42:; //; // (lldb) JITLoaderGDB::JITDebugBreakpointHit hit JIT breakpoint; // JITLoaderGDB::ReadJITDescriptorImpl registering JIT entry at 0x106b34000; // 1 location add",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithRemoteDebugging/LLJITWithRemoteDebugging.cpp:1453,log,log,1453,interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithRemoteDebugging/LLJITWithRemoteDebugging.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithRemoteDebugging/LLJITWithRemoteDebugging.cpp,1,['log'],['log']
Testability,". Here \f${\vec\theta}_0\f$ is some initial value of parameters. In general case:. \f[; {\partial^2\chi^2\over\partial\theta_i\partial\theta_k}=; \sum^n_{j=1}{1\over\sigma^2_j}{\partial f_j\over\theta_i}; {\partial f_j\over\theta_k} +; \sum^n_{j=1}{(f_j - F_j)\over\sigma^2_j}\cdot; {\partial^2f_j\over\partial\theta_i\partial\theta_k}\tag{4}; \f]. In FUMILI algorithm for second derivatives of Chi-square approximate; expression is used when last term in (4) is discarded. It is often; done, not always wittingly, and sometimes causes troubles, for example,; if user wants to limit parameters with positive values by writing down; \f$\theta_i^2\f$ instead of \f$\theta_i\f$. FUMILI will fail if one tries; minimize \f$\chi^2 = g^2(\vec\theta)\f$ where g is arbitrary function. Approximate value is:; \f[{\partial^2\chi^2\over\partial\theta_i\partial\theta_k}\approx; Z_{ik}=; \sum^n_{j=1}{1\over\sigma^2_j}{\partial f_j\over\theta_i}; {\partial f_j\over\theta_k}\tag{5}; \f]. Then the equations for parameter increments are; \f[\left(\partial\chi^2\over\partial\theta_i\right)_{\vec\theta={\vec\theta}^0}; +\sum_k Z_{ik}\cdot(\theta_k-\theta^0_k) = 0,; \qquad i=1\ldots m\tag{6}; \f]. Remarkable feature of algorithm is the technique for step; restriction. For an initial value of parameter \f${\vec\theta}^0\f$ a; parallelepiped \f$P_0\f$ is built with the center at \f${\vec\theta}^0\f$ and; axes parallel to coordinate axes \f$\theta_i\f$. The lengths of; parallelepiped sides along i-th axis is \f$2b_i\f$, where \f$b_i\f$ is such a; value that the functions \f$f_j(\vec\theta)\f$ are quasi-linear all over; the parallelepiped. FUMILI takes into account simple linear inequalities in the form:; \f[; \theta_i^{\rm min}\le\theta_i\le\theta^{\rm max}_i\tag{7}; \f]. They form parallelepiped \f$P\f$ (\f$P_0\f$ may be deformed by \f$P\f$).; Very similar step formulae are used in FUMILI for negative logarithm; of the likelihood function with the same idea - linearization of; function argument. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/fumili/src/TFumili.cxx:3305,log,logarithm,3305,math/fumili/src/TFumili.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/fumili/src/TFumili.cxx,1,['log'],['logarithm']
Testability,". If a matching token is; // found, extend the current sequence. If the current line cannot be part of a; // sequence, e.g. because there is an empty line before it or it contains only; // non-matching tokens, finalize the previous sequence.; // The value returned is the token on which we stopped, either because we; // exhausted all items inside Changes, or because we hit a scope level higher; // than our initial scope.; // This function is recursive. Each invocation processes only the scope level; // equal to the initial level, which is the level of Changes[StartAt].; // If we encounter a scope level greater than the initial level, then we call; // ourselves recursively, thereby avoiding the pollution of the current state; // with the alignment requirements of the nested sub-level. This recursive; // behavior is necessary for aligning function prototypes that have one or more; // arguments.; // If this function encounters a scope level less than the initial level,; // it returns the current position.; // There is a non-obvious subtlety in the recursive behavior: Even though we; // defer processing of nested levels to recursive invocations of this; // function, when it comes time to align a sequence of tokens, we run the; // alignment on the entire sequence, including the nested levels.; // When doing so, most of the nested tokens are skipped, because their; // alignment was already handled by the recursive invocations of this function.; // However, the special exception is that we do NOT skip function parameters; // that are split across multiple lines. See the test case in FormatTest.cpp; // that mentions ""split function parameter alignment"" for an example of this.; // When the parameter RightJustify is true, the operator will be; // right-justified. It is used to align compound assignments like `+=` and `=`.; // When RightJustify and ACS.PadOperators are true, operators in each block to; // be aligned will be padded on the left to the same length before aligning.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/WhitespaceManager.cpp:1796,test,test,1796,interpreter/llvm-project/clang/lib/Format/WhitespaceManager.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/WhitespaceManager.cpp,1,['test'],['test']
Testability,". Rebinning //; // 3. Addition, multiplication an division operations. //; // 4. Building and copying instances. //; // 5. I/O functionality (including reference with older versions). //; // 6. Labeling. //; // 7. Interpolation //; // //; // To see the tests individually, at the bottom of the file the tests //; // are exectued using the structure TTestSuite, that defines the //; // subset, the number of routines to be tested as well as the pointes //; // for these. Every tests is mean to be simple enough to be understood //; // without much comments. //; // //; // Finally, for debugging reasons, the struct compareOptions can be //; // used to define the level of output of the tests, beging set //; // generally for the whole suit in defaultEqualOptions. //; // >> stressHistogram 1 : to print result for all tests //; // >> stressHistogram 2 : ro print each comparison, done for each bin //; // //; // An example of output when all the tests run OK is shown below: //; // ****************************************************************************; // * Starting stress H I S T O G R A M *; // ****************************************************************************; // Test 1: Testing Histogram Projections without weights....................OK; // Test 2: Testing Profile Projections without weights......................OK; // Test 3: Testing Histogram Projections with weights.......................OK; // Test 4: Testing Profile Projections with weights.......................OK; // Test 5: Projection with Range for Histograms and Profiles................OK; // Test 6: Histogram Rebinning..............................................OK; // Test 7: Add tests for 1D, 2D and 3D Histograms and Profiles..............OK; // Test 8: Multiply tests for 1D, 2D and 3D Histograms......................OK; // Test 9: Divide tests for 1D, 2D and 3D Histograms........................OK; // Test 10: Copy tests for 1D, 2D and 3D Histograms and Profiles.............OK; // Test 11: Read/Wri",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:1255,test,tests,1255,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,4,"['Test', 'test']","['Test', 'Testing', 'tests']"
Testability,".............OK; // Test 2: Testing Profile Projections without weights......................OK; // Test 3: Testing Histogram Projections with weights.......................OK; // Test 4: Testing Profile Projections with weights.......................OK; // Test 5: Projection with Range for Histograms and Profiles................OK; // Test 6: Histogram Rebinning..............................................OK; // Test 7: Add tests for 1D, 2D and 3D Histograms and Profiles..............OK; // Test 8: Multiply tests for 1D, 2D and 3D Histograms......................OK; // Test 9: Divide tests for 1D, 2D and 3D Histograms........................OK; // Test 10: Copy tests for 1D, 2D and 3D Histograms and Profiles.............OK; // Test 11: Read/Write tests for 1D, 2D and 3D Histograms and Profiles.......OK; // Test 12: Merge tests for 1D, 2D and 3D Histograms and Profiles............OK; // Test 13: Label tests for 1D and 2D Histograms ............................OK; // Test 14: Interpolation tests for Histograms...............................OK; // Test 15: Scale tests for Profiles.........................................OK; // Test 16: Integral tests for Histograms....................................OK; // Test 17: Buffer tests for Histograms......................................OK; // Test 18: Extend axis tests for Histograms.................................OK; // Test 19: TH1-THn[Sparse] Conversion tests.................................OK; // Test 20: FillData tests for Histograms and Sparses........................OK; // Test 21: Reference File Read for Histograms and Profiles..................OK; // ****************************************************************************; // stressHistogram: Real Time = 86.22 seconds Cpu Time = 85.64 seconds; // ROOTMARKS = 1292.62 ROOT version: 6.05/01 remotes/origin/master@v6-05-01-336-g5c3d5ff; // ****************************************************************************; // //; //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:2665,Test,Test,2665,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,2,"['Test', 'test']","['Test', 'tests']"
Testability,".; /// delete event;; /// event = 0;; /// ~~~; /// These rules affect users of TTree::Branch(),; /// TTree::SetBranchAddress(), and TChain::SetBranchAddress(); /// as well because those routines call this one.; ///; /// An example of a tree with branches with objects allocated; /// and owned by us:; /// ~~~ {.cpp}; /// TFile* f1 = new TFile(""myfile_original.root"");; /// TTree* t1 = (TTree*) f->Get(""MyTree"");; /// TFile* f2 = new TFile(""myfile_copy.root"", ""recreate"");; /// TTree* t2 = t1->Clone(0);; /// for (Int_t i = 0; i < 10; ++i) {; /// t1->GetEntry(i);; /// t2->Fill();; /// }; /// t2->Write(); /// delete f2;; /// f2 = 0;; /// delete f1;; /// f1 = 0;; /// ~~~; /// An example of a branch with an object allocated by us,; /// but owned by the caller:; /// ~~~ {.cpp}; /// TFile* f = new TFile(""myfile.root"", ""recreate"");; /// TTree* t = new TTree(""t"", ""A test tree.""); /// Event* event = 0;; /// TBranchElement* br = t->Branch(""event."", &event);; /// for (Int_t i = 0; i < 10; ++i) {; /// ... Fill event with meaningful data in some way.; /// t->Fill();; /// }; /// t->Write();; /// delete event;; /// event = 0;; /// delete f;; /// f = 0;; /// ~~~; /// Notice that the only difference between this example; /// and the following example is that the event pointer; /// is zero when the branch is created.; ///; /// An example of a branch with an object allocated and; /// owned by the caller:; /// ~~~ {.cpp}; /// TFile* f = new TFile(""myfile.root"", ""recreate"");; /// TTree* t = new TTree(""t"", ""A test tree.""); /// Event* event = new Event();; /// TBranchElement* br = t->Branch(""event."", &event);; /// for (Int_t i = 0; i < 10; ++i) {; /// ... Fill event with meaningful data in some way.; /// t->Fill();; /// }; /// t->Write();; /// delete event;; /// event = 0;; /// delete f;; /// f = 0;; /// ~~~; /// If AutoDelete is on (see TBranch::SetAutoDelete),; /// the top level objet will be deleted and recreate; /// each time an entry is read, whether or not the; /// TTree owns the object.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranchElement.cxx:3017,test,test,3017,tree/tree/src/TBranchElement.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranchElement.cxx,1,['test'],['test']
Testability,".M. Seltzer and M.J. Berger: Energy loss stragglin of protons and mesons:; Tabulation of the Vavilov distribution, pp 187-203; in: National Research Council (U.S.), Committee on Nuclear Science:; Studies in penetration of charged particles in matter,; Nat. Akad. Sci. Publication 1133,; Nucl. Sci. Series Report No. 39,; Washington (Nat. Akad. Sci.) 1964, 388 pp.; Available from; <A HREF=""http://books.google.de/books?id=kmMrAAAAYAAJ&lpg=PP9&pg=PA187#v=onepage&q&f=false"">Google books</A>. Therefore, for small values of \f$\kappa < 0.01\f$,; pdf approaches the Landau distribution. For values \f$\kappa > 10\f$, the Gauss approximation should be used; with \f$\mu\f$ and \f$\sigma\f$ given by Vavilov::mean(kappa, beta2); and sqrt(Vavilov::variance(kappa, beta2). For values \f$\kappa > 10\f$, the Gauss approximation should be used; with \f$\mu\f$ and \f$\sigma\f$ given by Vavilov::mean(kappa, beta2); and sqrt(Vavilov::variance(kappa, beta2). The original Vavilov pdf is obtained by; v.Pdf(lambdaV/kappa-log(kappa))/kappa. For detailed description see; A. Rotondi and P. Montagna, Fast calculation of Vavilov distribution,; <A HREF=""http://dx.doi.org/10.1016/0168-583X(90)90749-K"">Nucl. Instr. and Meth. B47 (1990) 215-224</A>,; which has been implemented in; <A HREF=""https://cern-tex.web.cern.ch/cern-tex/shortwrupsdir/g115/top.html"">; CERNLIB (G115)</A>. The class stores coefficients needed to calculate \f$p(\lambda; \kappa, \beta^2)\f$; for fixed values of \f$\kappa\f$ and \f$\beta^2\f$.; Changing these values is computationally expensive. The parameter \f$\kappa\f$ must be in the range \f$0.01 \le \kappa \le 12\f$. The parameter \f$\beta^2\f$ must be in the range \f$0 \le \beta^2 \le 1\f$. Average times on a Pentium Core2 Duo P8400 2.26GHz:; - 9.9us per call to SetKappaBeta2 or constructor; - 0.095us per call to Pdf, Cdf; - 3.7us per first call to Quantile after SetKappaBeta2 or constructor; - 0.137us per subsequent call to Quantile. Benno List, June 2010. @ingroup StatFunc; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/VavilovFast.h:1913,log,log,1913,math/mathmore/inc/Math/VavilovFast.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/VavilovFast.h,1,['log'],['log']
Testability,"/ The nuts-and-bolts of the TMath::KolmogorovTest() algorithm is a for-loop; /// over the two sorted arrays a and b representing empirical distribution; /// functions. The for-loop handles 3 cases: when the next points to be; /// evaluated satisfy a>b, a<b, or a=b:; ///; /// ~~~ {.cpp}; /// for (Int_t i=0;i<na+nb;i++) {; /// if (a[ia-1] < b[ib-1]) {; /// rdiff -= sa;; /// ia++;; /// if (ia > na) {ok = kTRUE; break;}; /// } else if (a[ia-1] > b[ib-1]) {; /// rdiff += sb;; /// ib++;; /// if (ib > nb) {ok = kTRUE; break;}; /// } else {; /// rdiff += sb - sa;; /// ia++;; /// ib++;; /// if (ia > na) {ok = kTRUE; break;}; /// if (ib > nb) {ok = kTRUE; break;}; /// }; /// rdmax = TMath::Max(rdmax,TMath::Abs(rdiff));; /// }; /// ~~~; ///; /// For the last case, a=b, the algorithm advances each array by one index in an; /// attempt to move through the equality. However, this is incorrect when one or; /// the other of a or b (or both) have a repeated value, call it x. For the KS; /// statistic to be computed properly, rdiff needs to be calculated after all of; /// the a and b at x have been tallied (this is due to the definition of the; /// empirical distribution function; another way to convince yourself that the; /// old CERNLIB method is wrong is that it implies that the function defined as the; /// difference between a and b is multi-valued at x -- besides being ugly, this; /// would invalidate Kolmogorov's theorem).; ///; /// The solution is to just add while-loops into the equality-case handling to; /// perform the tally:; ///; /// ~~~ {.cpp}; /// } else {; /// double x = a[ia-1];; /// while(a[ia-1] == x && ia <= na) {; /// rdiff -= sa;; /// ia++;; /// }; /// while(b[ib-1] == x && ib <= nb) {; /// rdiff += sb;; /// ib++;; /// }; /// if (ia > na) {ok = kTRUE; break;}; /// if (ib > nb) {ok = kTRUE; break;}; /// }; /// ~~~; ///; /// ### Note:; /// A good description of the Kolmogorov test can be seen at:; /// http://www.itl.nist.gov/div898/handbook/eda/section3/eda35g.htm",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:3636,test,test,3636,math/mathcore/src/TMath.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx,1,['test'],['test']
Testability,"/ performance of your machine compared to a reference machine; // a Pentium IV 2.4 Ghz) with 512 MBytes of memory; // and 120 GBytes IDE disk.; //; // An example of output when all the tests run OK is shown below:; // ******************************************************************; // * Starting R O O T - S T R E S S test suite with 1000 events; // ******************************************************************; // Test 1 : Functions, Random Numbers, Histogram Fits............. OK; // Test 2 : Check size & compression factor of a Root file........ OK; // Test 3 : Purge, Reuse of gaps in TFile......................... OK; // Test 4 : Test of 2-d histograms, functions, 2-d fits........... OK; // Test 5 : Test graphics & Postscript............................ OK; // Test 6 : Test subdirectories in a Root file.................... OK; // Test 7 : TNtuple, selections, TCut, TCutG, TEventList.......... OK; // Test 8 : Trees split and compression modes..................... OK; // Test 9 : Analyze Event.root file of stress 8................... OK; // Test 10 : Create 10 files starting from Event.root.............. OK; // Test 11 : Test chains of Trees using the 10 files............... OK; // Test 12 : Compare histograms of test 9 and 11................... OK; // Test 13 : Test merging files of a chain......................... OK; // Test 14 : Check correct rebuilt of Event.root in test 13........ OK; // Test 15 : Divert Tree branches to separate files................ OK; // Test 16 : CINT test (3 nested loops) with LHCb trigger.......... OK; // Test 17 : Test mkdir............................................ OK; // ******************************************************************; //* Linux pcbrun.cern.ch 2.4.20 #1 Thu Jan 9 12:21:02 MET 2003; //******************************************************************; //stress : Total I/O = 703.7 Mbytes, I = 535.2, O = 168.5; //stress : Compr I/O = 557.0 Mbytes, I = 425.1, O = 131.9; //stress : Real Time = 64.84 seconds Cpu ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:2379,Test,Test,2379,test/stress.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx,1,['Test'],['Test']
Testability,"/ with the amount of I/O, Real Time and Cpu Time.; // One single number (ROOTMARKS) is also calculated showing the relative; // performance of your machine compared to a reference machine; // a Pentium IV 2.4 Ghz) with 512 MBytes of memory; // and 120 GBytes IDE disk.; //; // An example of output when all the tests run OK is shown below:; // ******************************************************************; // * Starting R O O T - S T R E S S test suite with 1000 events; // ******************************************************************; // Test 1 : Functions, Random Numbers, Histogram Fits............. OK; // Test 2 : Check size & compression factor of a Root file........ OK; // Test 3 : Purge, Reuse of gaps in TFile......................... OK; // Test 4 : Test of 2-d histograms, functions, 2-d fits........... OK; // Test 5 : Test graphics & Postscript............................ OK; // Test 6 : Test subdirectories in a Root file.................... OK; // Test 7 : TNtuple, selections, TCut, TCutG, TEventList.......... OK; // Test 8 : Trees split and compression modes..................... OK; // Test 9 : Analyze Event.root file of stress 8................... OK; // Test 10 : Create 10 files starting from Event.root.............. OK; // Test 11 : Test chains of Trees using the 10 files............... OK; // Test 12 : Compare histograms of test 9 and 11................... OK; // Test 13 : Test merging files of a chain......................... OK; // Test 14 : Check correct rebuilt of Event.root in test 13........ OK; // Test 15 : Divert Tree branches to separate files................ OK; // Test 16 : CINT test (3 nested loops) with LHCb trigger.......... OK; // Test 17 : Test mkdir............................................ OK; // ******************************************************************; //* Linux pcbrun.cern.ch 2.4.20 #1 Thu Jan 9 12:21:02 MET 2003; //******************************************************************; //stress : Total I/O = 703.7 Mby",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:2237,Test,Test,2237,test/stress.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx,1,['Test'],['Test']
Testability,/* #define kMAXSTIR kMAXLOG/log(kMAXLOG) */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:28,log,log,28,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,3,['log'],['log']
Testability,"/* 'nmcl' */; /* A NamedColor profile is also device specific, however it doesn't; * contain an AToB0 tag that is open to misinterpretation. Almost; * certainly it will fail the tests below.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:178,test,tests,178,graf2d/asimage/src/libAfterImage/libpng/png.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c,1,['test'],['tests']
Testability,/* (this test assumes unsigned comparison) */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/zip/src/ZInflate.c:9,test,test,9,core/zip/src/ZInflate.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/zip/src/ZInflate.c,1,['test'],['test']
Testability,"/* ******************************************************************; * debug; * Part of FSE library; * Copyright (c) 2013-2020, Yann Collet, Facebook, Inc.; *; * You can contact the author at :; * - Source repository : https://github.com/Cyan4973/FiniteStateEntropy; *; * This source code is licensed under both the BSD-style license (found in the; * LICENSE file in the root directory of this source tree) and the GPLv2 (found; * in the COPYING file in the root directory of this source tree).; * You may select, at your option, one of the above-listed licenses.; ****************************************************************** */; /*; * The purpose of this header is to enable debug functions.; * They regroup assert(), DEBUGLOG() and RAWLOG() for run-time,; * and DEBUG_STATIC_ASSERT() for compile-time.; *; * By default, DEBUGLEVEL==0, which means run-time debug is disabled.; *; * Level 1 enables assert() only.; * Starting level 2, traces can be generated and pushed to stderr.; * The higher the level, the more verbose the traces.; *; * It's possible to dynamically adjust level using variable g_debug_level,; * which is only declared if DEBUGLEVEL>=2,; * and is a global variable, not multi-thread protected (use with care); */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/debug.h:717,assert,assert,717,builtins/zstd/common/debug.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/debug.h,2,['assert'],['assert']
Testability,"/* - When there is no dictionary : loadedDictEnd == 0.; In which case, the test (blockEndIdx > maxDist) is merely to avoid; overflowing next operation `newLowLimit = blockEndIdx - maxDist`.; - When there is a standard dictionary :; Index referential is copied from the dictionary,; which means it starts from 0.; In which case, loadedDictEnd == dictSize,; and it makes sense to compare `blockEndIdx > maxDist + dictSize`; since `blockEndIdx` also starts from zero.; - When there is an attached dictionary :; loadedDictEnd is expressed within the referential of the context,; so it can be directly compared against blockEndIdx.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h:75,test,test,75,builtins/zstd/compress/zstd_compress_internal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h,1,['test'],['test']
Testability,"/* - to test if that way is better for large b/ (comment out from Cephes version); if ( (bb * xx) <= 1.0 && xx <= 0.95); {; t = pseries(aa, bb, xx);; goto done;; }. **/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:8,test,test,8,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['test'],['test']
Testability,"/* - to test if that way is better for large b/ (comment out from Cephes version); if( (bb * xx) <= 1.0 && xx <= 0.95); {; t = pseries(aa, bb, xx);; goto done;; }. **/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephes.cxx:8,test,test,8,math/mathcore/src/SpecFuncCephes.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephes.cxx,1,['test'],['test']
Testability,"/* -*- coding: utf-8 -*-; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; */; /**; * This file implements a shared library. This library can be pre-loaded by; * the dynamic linker of the Operating System (OS). It implements a few function; * related to process creation. By pre-load this library the executed process; * uses these functions instead of those from the standard library.; *; * The idea here is to inject a logic before call the real methods. The logic is; * to dump the call into a file. To call the real method this library is doing; * the job of the dynamic linker.; *; * The only input for the log writing is about the destination directory.; * This is passed as environment variable.; */; // NOLINTNEXTLINE",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libear/ear.c:576,log,logic,576,interpreter/llvm-project/clang/tools/scan-build-py/lib/libear/ear.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libear/ear.c,3,['log'],"['log', 'logic']"
Testability,"/* --- simple histogram functions --- */; /*! HIST_count():; * Provides the precise count of each byte within a table 'count'.; * 'count' is a table of unsigned int, of minimum size (*maxSymbolValuePtr+1).; * Updates *maxSymbolValuePtr with actual largest symbol value detected.; * @return : count of the most frequent symbol (which isn't identified).; * or an error code, which can be tested using HIST_isError().; * note : if return == srcSize, there is only one symbol.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/hist.h:386,test,tested,386,builtins/zstd/compress/hist.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/hist.h,1,['test'],['tested']
Testability,/* ---- static assert (debug) --- */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_internal.h:15,assert,assert,15,builtins/zstd/common/zstd_internal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_internal.h,1,['assert'],['assert']
Testability,"/* // MB : old bit of interpolation code; while( (param=(RooAbsReal*)_paramIter->Next()) ) {; low = (RooAbsReal*)lowIntIter->Next() ;; high = (RooAbsReal*)highIntIter->Next() ;. if(param->getVal()>0) {; value += param->getVal()*(high->getVal() - nominal );; } else {; value += param->getVal()*(nominal - low->getVal());; }; ++i;; }; */; /* KC: the code below is wrong. Can't pull out a constant change to a non-linear shape deformation.; while( (param=(RooAbsReal*)paramIter.next()) ) {; low = (RooAbsReal*)lowIntIter.next() ;; high = (RooAbsReal*)highIntIter.next() ;. if(_interpCode.empty() || _interpCode.at(i)==0){; // piece-wise linear; if(param->getVal()>0); value += param->getVal()*(high->getVal() - nominal );; else; value += param->getVal()*(nominal - low->getVal());; } else if(_interpCode.at(i)==1){; // piece-wise log; if(param->getVal()>=0); value *= pow(high->getVal()/nominal, +param->getVal());; else; value *= pow(low->getVal()/nominal, -param->getVal());; } else if(_interpCode.at(i)==2){; // parabolic with linear; double a = 0.5*(high->getVal()+low->getVal())-nominal;; double b = 0.5*(high->getVal()-low->getVal());; double c = 0;; if(param->getVal()>1 ){; value += (2*a+b)*(param->getVal()-1)+high->getVal()-nominal;; } else if(param->getVal()<-1 ) {; value += -1*(2*a-b)*(param->getVal()+1)+low->getVal()-nominal;; } else {; value += a*pow(param->getVal(),2) + b*param->getVal()+c;; }; } else if(_interpCode.at(i)==3){; //parabolic version of log-normal; double a = 0.5*(high->getVal()+low->getVal())-nominal;; double b = 0.5*(high->getVal()-low->getVal());; double c = 0;; if(param->getVal()>1 ){; value += (2*a+b)*(param->getVal()-1)+high->getVal()-nominal;; } else if(param->getVal()<-1 ) {; value += -1*(2*a-b)*(param->getVal()+1)+low->getVal()-nominal;; } else {; value += a*pow(param->getVal(),2) + b*param->getVal()+c;; }. } else {; coutE(InputArguments) << ""PiecewiseInterpolation::analyticalIntegralWN ERROR: "" << param->GetName(); << "" with unknown interpolation code",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/PiecewiseInterpolation.cxx:827,log,log,827,roofit/histfactory/src/PiecewiseInterpolation.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/PiecewiseInterpolation.cxx,1,['log'],['log']
Testability,"/* 16BIT */; /* The 'exp()' case must invert the above, taking a 20-bit fixed point; * logarithmic value and returning a 16 or 8-bit number as appropriate. In; * each case only the low 16 bits are relevant - the fraction - since the; * integer bits (the top 4) simply determine a shift.; *; * The worst case is the 16-bit distinction between 65535 and 65534. This; * requires perhaps spurious accuracy in the decoding of the logarithm to; * distinguish log2(65535/65534.5) - 10^-5 or 17 bits. There is little chance; * of getting this accuracy in practice.; *; * To deal with this the following exp() function works out the exponent of the; * fractional part of the logarithm by using an accurate 32-bit value from the; * top four fractional bits then multiplying in the remaining bits.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:87,log,logarithmic,87,graf2d/asimage/src/libAfterImage/libpng/png.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c,3,['log'],"['logarithm', 'logarithmic']"
Testability,"/* 2. We enforce the maximum offset allowed.; *; * kMaxChunkSize should be small enough that we don't lose too much of; * the window through early invalidation.; * TODO: * Test the chunk size.; * * Try invalidation after the sequence generation and test the; * the offset against maxDist directly.; *; * NOTE: Because of dictionaries + sequence splitting we MUST make sure; * that any offset used is valid at the END of the sequence, since it may; * be split into two sequences. This condition holds when using; * ZSTD_window_enforceMaxDist(), but if we move to checking offsets; * against maxDist directly, we'll have to carefully handle that case.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.c:172,Test,Test,172,builtins/zstd/compress/zstd_ldm.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_ldm.c,2,"['Test', 'test']","['Test', 'test']"
Testability,"/* ; This is a clang style test case for checking that preprocessor; defines match gcc.; */; /*; RUN: for arch in -m32 -m64; do \; RUN: for lang in -std=gnu89 -ansi -std=c99 -std=gnu99; do \; RUN: for input in c objective-c; do \; RUN: for opts in ""-O0"" ""-O1 -dynamic"" ""-O2 -static"" ""-Os""; do \; RUN: echo ""-- $arch, $lang, $input, $opts --""; \; RUN: for cc in 0 1; do \; RUN: if [ ""$cc"" == 0 ]; then \; RUN: cc_prog=clang; \; RUN: output=%t0; \; RUN: else \; RUN: cc_prog=gcc; \; RUN: output=%t1; \; RUN: fi; \; RUN: $cc_prog $arch $lang $opts -march=core2 -dM -E -x $input %s | sort > $output; \; RUN: done; \; RUN: if (! diff %t0 %t1); then exit 1; fi; \; RUN: done; \; RUN: done; \; RUN: done; \; RUN: done;; */; /* We don't care about this difference */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/builtin-defines.c:27,test,test,27,interpreter/llvm-project/clang/utils/builtin-defines.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/builtin-defines.c,1,['test'],['test']
Testability,"/* === Experimental API === */; /* Symbols defined below must be considered tied to a specific library version. */; /*; * XXH3_generateSecret():; *; * Derive a high-entropy secret from any user-defined content, named customSeed.; * The generated secret can be used in combination with `*_withSecret()` functions.; * The `_withSecret()` variants are useful to provide a higher level of protection than 64-bit seed,; * as it becomes much more difficult for an external actor to guess how to impact the calculation logic.; *; * The function accepts as input a custom seed of any length and any content,; * and derives from it a high-entropy secret of length XXH3_SECRET_DEFAULT_SIZE; * into an already allocated buffer secretBuffer.; * The generated secret is _always_ XXH_SECRET_DEFAULT_SIZE bytes long.; *; * The generated secret can then be used with any `*_withSecret()` variant.; * Functions `XXH3_128bits_withSecret()`, `XXH3_64bits_withSecret()`,; * `XXH3_128bits_reset_withSecret()` and `XXH3_64bits_reset_withSecret()`; * are part of this list. They all accept a `secret` parameter; * which must be very long for implementation reasons (>= XXH3_SECRET_SIZE_MIN); * _and_ feature very high entropy (consist of random-looking bytes).; * These conditions can be a high bar to meet, so; * this function can be used to generate a secret of proper quality.; *; * customSeed can be anything. It can have any size, even small ones,; * and its content can be anything, even stupidly ""low entropy"" source such as a bunch of zeroes.; * The resulting `secret` will nonetheless provide all expected qualities.; *; * Supplying NULL as the customSeed copies the default secret into `secretBuffer`.; * When customSeedSize > 0, supplying NULL as customSeed is undefined behavior.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h:512,log,logic,512,builtins/xxhash/xxhash.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h,1,['log'],['logic']
Testability,"/* === Prototypes === */; /* note: prototypes already published within `zstd.h` :; * ZSTD_decompressBlock(); */; /* note: prototypes already published within `zstd_internal.h` :; * ZSTD_getcBlockSize(); * ZSTD_decodeSeqHeaders(); */; /* ZSTD_decompressBlock_internal() :; * decompress block, starting at `src`,; * into destination buffer `dst`.; * @return : decompressed block size,; * or an error code (which can be tested using ZSTD_isError()); */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.h:417,test,tested,417,builtins/zstd/decompress/zstd_decompress_block.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.h,1,['test'],['tested']
Testability,"/* === XXH3 streaming === */; /*; * Malloc's a pointer that is always aligned to align.; *; * This must be freed with `XXH_alignedFree()`.; *; * malloc typically guarantees 16 byte alignment on 64-bit systems and 8 byte; * alignment on 32-bit. This isn't enough for the 32 byte aligned loads in AVX2; * or on 32-bit, the 16 byte aligned loads in SSE2 and NEON.; *; * This underalignment previously caused a rather obvious crash which went; * completely unnoticed due to XXH3_createState() not actually being tested.; * Credit to RedSpah for noticing this bug.; *; * The alignment is done manually: Functions like posix_memalign or _mm_malloc; * are avoided: To maintain portability, we would have to write a fallback; * like this anyways, and besides, testing for the existence of library; * functions without relying on external build tools is impossible.; *; * The method is simple: Overallocate, manually align, and store the offset; * to the original behind the returned pointer.; *; * Align must be a power of 2 and 8 <= align <= 128.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h:508,test,tested,508,builtins/xxhash/xxhash.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h,2,['test'],"['tested', 'testing']"
Testability,"/* ============================ */; /** Block level API */; /* ============================ */; /*!; Block functions produce and decode raw zstd blocks, without frame metadata.; Frame metadata cost is typically ~12 bytes, which can be non-negligible for very small blocks (< 100 bytes).; But users will have to take in charge needed metadata to regenerate data, such as compressed and content sizes. A few rules to respect :; - Compressing and decompressing require a context structure; + Use ZSTD_createCCtx() and ZSTD_createDCtx(); - It is necessary to init context before starting; + compression : any ZSTD_compressBegin*() variant, including with dictionary; + decompression : any ZSTD_decompressBegin*() variant, including with dictionary; + copyCCtx() and copyDCtx() can be used too; - Block size is limited, it must be <= ZSTD_getBlockSize() <= ZSTD_BLOCKSIZE_MAX == 128 KB; + If input is larger than a block size, it's necessary to split input data into multiple blocks; + For inputs larger than a single block, consider using regular ZSTD_compress() instead.; Frame metadata is not that costly, and quickly becomes negligible as source size grows larger than a block.; - When a block is considered not compressible enough, ZSTD_compressBlock() result will be 0 (zero) !; ===> In which case, nothing is produced into `dst` !; + User __must__ test for such outcome and deal directly with uncompressed data; + A block cannot be declared incompressible if ZSTD_compressBlock() return value was != 0.; Doing so would mess up with statistics history, leading to potential data corruption.; + ZSTD_decompressBlock() _doesn't accept uncompressed data as input_ !!; + In case of multiple successive blocks, should some of them be uncompressed,; decoder must be informed of their existence in order to follow proper history.; Use ZSTD_insertBlock() for such a case.; */; /*===== Raw zstd block functions =====*/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:1350,test,test,1350,builtins/zstd/zstd.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h,1,['test'],['test']
Testability,/* =========================================================================; * Put a short in the pending buffer. The 16-bit value is put in MSB order.; * IN assertion: the stream state is correct and there is enough room in; * pending_buf.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate.c:159,assert,assertion,159,builtins/zlib/deflate.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate.c,3,['assert'],['assertion']
Testability,"/* ===========================================================================; * Compute the optimal bit lengths for a tree and update the total bit length; * for the current block.; * IN assertion: the fields freq and dad are set, heap[heap_max] and; * above are the tree nodes sorted by increasing frequency.; * OUT assertions: the field len is set to the optimal bit length, the; * array bl_count contains the frequencies for each bit length.; * The length opt_len is updated; static_len is also updated if stree is; * not null.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees.c:189,assert,assertion,189,builtins/zlib/trees.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees.c,8,['assert'],"['assertion', 'assertions']"
Testability,/* ===========================================================================; * Construct one Huffman tree and assigns the code bit strings and lengths.; * Update the total bit length for the current block.; * IN assertion: the field freq is set for all tree elements.; * OUT assertions: the fields len and code are set to the optimal bit length; * and corresponding code. The length opt_len is updated; static_len is; * also updated if stree is not null. The field max_code is set.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees.c:215,assert,assertion,215,builtins/zlib/trees.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees.c,8,['assert'],"['assertion', 'assertions']"
Testability,"/* ===========================================================================; * Fill the window when the lookahead becomes insufficient.; * Updates strstart and lookahead, and sets state->eofile if end of input file.; *; * IN assertion: state->lookahead < MIN_LOOKAHEAD && strstart + state->lookahead > 0; * OUT assertions: at least one byte has been read, or state->eofile is set;; * file reads are performed for at least two bytes (required for the; * translate_eol option).; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/zip/src/ZDeflate.c:228,assert,assertion,228,core/zip/src/ZDeflate.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/zip/src/ZDeflate.c,2,['assert'],"['assertion', 'assertions']"
Testability,"/* ===========================================================================; * Fill the window when the lookahead becomes insufficient.; * Updates strstart and lookahead.; *; * IN assertion: lookahead < MIN_LOOKAHEAD; * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD; * At least one byte has been read, or avail_in == 0; reads are; * performed for at least two bytes (required for the zip translate_eol; * option -- not supported here).; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:183,assert,assertion,183,builtins/zlib/deflate_cf.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c,2,['assert'],"['assertion', 'assertions']"
Testability,"/* ===========================================================================; * Flush the current block, with given end-of-file flag.; * IN assertion: strstart is set to the end of the current match.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate.c:142,assert,assertion,142,builtins/zlib/deflate.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate.c,4,['assert'],['assertion']
Testability,/* ===========================================================================; * Generate the codes for a given tree and bit counts (which need not be; * optimal).; * IN assertion: the array bl_count contains the bit length statistics for; * the given tree and the field len is set for all tree elements.; * OUT assertion: the field code is set for all tree elements of non; * zero code length.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees.c:171,assert,assertion,171,builtins/zlib/trees.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees.c,8,['assert'],['assertion']
Testability,"/* ===========================================================================; * Initialize the ""longest match"" routines for a new file; *; * IN assertion: window_size is > 0 if the input file is already read or; * mmap'ed in the window[] array, 0 otherwise. In the first case,; * window_size is sufficient to contain the whole input file plus; * MIN_LOOKAHEAD bytes (to avoid referencing memory beyond the end; * of window[] when looking for matches towards the end).; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/zip/src/ZDeflate.c:146,assert,assertion,146,core/zip/src/ZDeflate.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/zip/src/ZDeflate.c,1,['assert'],['assertion']
Testability,/* ===========================================================================; * Insert string s in the dictionary and set match_head to the previous head; * of the hash chain (the most recent string with same hash key). Return; * the previous length of the hash chain.; * IN assertion: all calls to to INSERT_STRING are made with consecutive; * input characters and the first MIN_MATCH bytes of s are valid; * (except for the last MIN_MATCH-1 bytes of the input file).; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/zip/src/ZDeflate.c:277,assert,assertion,277,core/zip/src/ZDeflate.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/zip/src/ZDeflate.c,1,['assert'],['assertion']
Testability,/* ===========================================================================; * Insert string str in the dictionary and return the previous head; * of the hash chain (the most recent string with same hash key).; * IN assertion: ACTUAL_MIN_MATCH bytes of str are valid; * (except for the last ACTUAL_MIN_MATCH-1 bytes of the input file).; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c:219,assert,assertion,219,builtins/zlib/deflate_cf.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.c,1,['assert'],['assertion']
Testability,"/* ===========================================================================; * Insert string str in the dictionary and set match_head to the previous head; * of the hash chain (the most recent string with same hash key). Return; * the previous length of the hash chain.; * If this file is compiled with -DFASTEST, the compression level is forced; * to 1, and no hash chains are maintained.; * IN assertion: all calls to to INSERT_STRING are made with consecutive; * input characters and the first MIN_MATCH bytes of str are valid; * (except for the last MIN_MATCH-1 bytes of the input file).; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate.c:399,assert,assertion,399,builtins/zlib/deflate.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate.c,2,['assert'],['assertion']
Testability,/* ===========================================================================; * Output a short LSB first on the stream.; * IN assertion: there is enough room in pendingBuf.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.h:128,assert,assertion,128,builtins/zlib/deflate_cf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate_cf.h,3,['assert'],['assertion']
Testability,/* ===========================================================================; * Return true if the zip file can be seeked. This is used to check if; * the local header can be re-rewritten. This function always returns; * true for in-memory compression.; * IN assertion: the local header has already been written (ftell() > 0).; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/zip/src/Bits.c:261,assert,assertion,261,core/zip/src/Bits.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/zip/src/Bits.c,1,['assert'],['assertion']
Testability,"/* ===========================================================================; * Reverse the first len bits of a code, using straightforward code (a faster; * method would use a table); * IN assertion: 1 <= len <= 15; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/zip/src/Bits.c:192,assert,assertion,192,core/zip/src/Bits.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/zip/src/Bits.c,1,['assert'],['assertion']
Testability,"/* ===========================================================================; * Reverse the first len bits of a code, using straightforward code (a faster; * method would use a table); * IN assertion: 1 <= len <= 15; */; /* unsigned code; the value to invert */; /* int len; its bit length */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/zip/src/Bits.h:192,assert,assertion,192,core/zip/src/Bits.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/zip/src/Bits.h,1,['assert'],['assertion']
Testability,/* ===========================================================================; * Send a value on a given number of bits.; * IN assertion: length <= 16 and value fits in length bits.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees.c:128,assert,assertion,128,builtins/zlib/trees.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees.c,3,['assert'],['assertion']
Testability,/* ===========================================================================; * Send a value on a given number of bits.; * IN assertion: length <= 16 and value fits in length bits.; */; /* int value; value to send */; /* int length; number of bits */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/zip/src/Bits.h:128,assert,assertion,128,core/zip/src/Bits.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/zip/src/Bits.h,1,['assert'],['assertion']
Testability,/* ===========================================================================; * Send a value on a given number of bits.; * IN assertion: length <= 64 and value fits in length bits.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees_cf.c:128,assert,assertion,128,builtins/zlib/trees_cf.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees_cf.c,1,['assert'],['assertion']
Testability,"/* ===========================================================================; * Send the header for a block using dynamic Huffman trees: the counts, the; * lengths of the bit length codes, the literal tree and the distance tree.; * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees.c:237,assert,assertion,237,builtins/zlib/trees.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees.c,4,['assert'],['assertion']
Testability,"/* ===========================================================================; * Set match_start to the longest match starting at the given string and; * return its length. Matches shorter or equal to prev_length are discarded,; * in which case the result is equal to prev_length and match_start is; * garbage.; * IN assertions: cur_match is the head of the hash chain for the current; * string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1; * OUT assertion: the match length is not greater than s->lookahead.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate.c:318,assert,assertions,318,builtins/zlib/deflate.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate.c,4,['assert'],"['assertion', 'assertions']"
Testability,"/* ===========================================================================; * Set match_start to the longest match starting at the given string and; * return its length. Matches shorter or equal to prev_length are discarded,; * in which case the result is equal to prev_length and match_start is; * garbage.; * IN assertions: cur_match is the head of the hash chain for the current; * string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/zip/src/ZDeflate.c:318,assert,assertions,318,core/zip/src/ZDeflate.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/zip/src/ZDeflate.c,1,['assert'],['assertions']
Testability,"/* ===========================================================================; * Update a hash value with the given input byte; * IN assertion: all calls to to UPDATE_HASH are made with consecutive; * input characters, so that a running hash key can be computed from the; * previous key instead of complete recalculation each time.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate.c:134,assert,assertion,134,builtins/zlib/deflate.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate.c,3,['assert'],['assertion']
Testability,"/* ===========================================================================; Check the gzip header of a gz_stream opened for reading. Set the stream; mode to transparent if the gzip magic header is not present; set s->err; to Z_DATA_ERROR if the magic header is present but the rest of the header; is incorrect.; IN assertion: the stream s has already been created sucessfully;; s->stream.avail_in is zero for the first time, but may be non-zero; for concatenated .gz files.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/gzio.c:319,assert,assertion,319,graf2d/asimage/src/libAfterImage/zlib/gzio.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/gzio.c,1,['assert'],['assertion']
Testability,/* ===========================================================================; Read a byte from a gz_stream; update next_in and avail_in. Return EOF; for end of file.; IN assertion: the stream s has been sucessfully opened for reading.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/gzio.c:172,assert,assertion,172,graf2d/asimage/src/libAfterImage/zlib/gzio.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/gzio.c,1,['assert'],['assertion']
Testability,"/* ??? also need to test for upsample-time rescaling, when & if supported */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c:20,test,test,20,graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c,1,['test'],['test']
Testability,"/* @(#)root/clib:$Id$ */; /* Author: Tomi Salo & Fons Rademakers */; /*; Portable snprintf and vsnprintf implementation. Format:; snprintf(holder, sizeof_holder, format, ...); vsnprintf(holder, sizeof_holder, format, args). Return values:; number of characters written or -1 if truncated or -2 if there is an; error in format specification. Author:; Tomi Salo; Original code. Modified:; Fons Rademakers; Return -1 in case of truncation; Added test program.; M.Asokan; Return -2 in case of error in format specification; Distinguish between missing precision and a specified precision of 0. To test snprintf and vsnprintf compile this file with:; cc -g -DSNTEST `root-config --cflags` snprintf.c -o snprintf; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/clib/src/snprintf.c:443,test,test,443,core/clib/src/snprintf.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clib/src/snprintf.c,2,['test'],['test']
Testability,/* A warning is only logged if there is no prior warning or error. */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c:21,log,logged,21,graf2d/asimage/src/libAfterImage/libpng/pngerror.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c,1,['log'],['logged']
Testability,"/* After finish_decompress, we can close the input file.; 	 * Here we postpone it until after no more JPEG errors are possible,; 	 * so as to simplify the setjmp error logic above. (Actually, I don't; 	 * think that jpeg_destroy can do an error exit, but why assume anything...); 	 */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/import.c:168,log,logic,168,graf2d/asimage/src/libAfterImage/import.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/import.c,1,['log'],['logic']
Testability,"/* Align the decompression loop to 32 + 16 bytes.; *; * zstd compiled with gcc-9 on an Intel i9-9900k shows 10% decompression; * speed swings based on the alignment of the decompression loop. This; * performance swing is caused by parts of the decompression loop falling; * out of the DSB. The entire decompression loop should fit in the DSB,; * when it can't we get much worse performance. You can measure if you've; * hit the good case or the bad case with this perf command for some; * compressed file test.zst:; *; * perf stat -e cycles -e instructions -e idq.all_dsb_cycles_any_uops \; * -e idq.all_mite_cycles_any_uops -- ./zstd -tq test.zst; *; * If you see most cycles served out of the MITE you've hit the bad case.; * If you see most cycles served out of the DSB you've hit the good case.; * If it is pretty even then you may be in an okay case.; *; * I've been able to reproduce this issue on the following CPUs:; * - Kabylake: Macbook Pro (15-inch, 2019) 2.4 GHz Intel Core i9; * Use Instruments->Counters to get DSB/MITE cycles.; * I never got performance swings, but I was able to; * go from the good case of mostly DSB to half of the; * cycles served from MITE.; * - Coffeelake: Intel i9-9900k; *; * I haven't been able to reproduce the instability or DSB misses on any; * of the following CPUS:; * - Haswell; * - Broadwell: Intel(R) Xeon(R) CPU E5-2680 v4 @ 2.40GH; * - Skylake; *; * If you are seeing performance stability this script can help test.; * It tests on 4 commits in zstd where I saw performance change.; *; * https://gist.github.com/terrelln/9889fc06a423fd5ca6e99351564473f4; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c:505,test,test,505,builtins/zstd/decompress/zstd_decompress_block.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c,4,['test'],"['test', 'tests']"
Testability,"/* All functions and global variables declared anywhere should use; one of the following attributes:. RPY_EXPORTED: the symbol is exported out of libpypy-c.so. RPY_EXTERN: the symbol is not exported out of libpypy-c.so, but; otherwise works like 'extern' by being available to; other C sources. static: as usual, this means the symbol is local to this C file. Don't use _RPY_HIDDEN directly. For tests involving building a custom; .so, translator/tool/cbuild.py overrides RPY_EXTERN so that it becomes; equal to RPY_EXPORTED. Any function or global variable declared with no attribute at all is; a bug; please report or fix it.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/precommondefs.h:396,test,tests,396,bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/precommondefs.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/precommondefs.h,1,['test'],['tests']
Testability,"/* Allow machine dependent optimization for post-increment or pre-increment.; Based on testing to date,; Pre-increment preferred for:; - PowerPC G3 (Adler); - MIPS R5000 (Randers-Pehrson); Post-increment preferred for:; - none; No measurable difference:; - Pentium III (Anderson); - M68060 (Nikl); */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inffast.c:87,test,testing,87,builtins/zlib/inffast.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inffast.c,2,['test'],['testing']
Testability,/* Allow the variable to be controlled manually for testing */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3_dispatch.c:52,test,testing,52,interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3_dispatch.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3_dispatch.c,1,['test'],['testing']
Testability,"/* An error is always logged here, overwriting anything (typically a warning); * that is already there:; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c:22,log,logged,22,graf2d/asimage/src/libAfterImage/libpng/pngerror.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c,1,['log'],['logged']
Testability,"/* Analytical integrals need testing. Int_t RooHypatia2::getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char*) const; {; if (matchArgs(allVars, analVars, _x); && _beta == 0. && _beta.arg().isConstant(); && _zeta == 0. && _zeta.arg().isConstant(); && _lambda.max() < 0.) return 1;; return 0 ;; }. double RooHypatia2::analyticalIntegral(Int_t code, const char* rangeName) const; {; if (_beta != 0. || _zeta != 0. || _lambda >= 0) {; auto& logstream = coutF(Integration) << ""When the PDF "" << GetName(); << "" was constructed, beta,zeta were 0, lambda<0 and all three were constant.\n""; << ""This allowed for analytic integration, but now, numeric integration would be required.\n""; << ""These parameters must either be kept constant, or be floating from the beginning. ""; << "" Terminating fit ...""; << std::endl;; RooArgSet vars;; vars.add(_beta.arg());; vars.add(_zeta.arg());; vars.add(_lambda.arg());; vars.printStream(logstream, vars.defaultPrintContents(nullptr), RooPrintable::kVerbose);; throw std::runtime_error(""RooHypatia2 cannot be integrated analytically since parameters changed."");; }. // The formulae to follow still use beta and zeta to facilitate comparisons with the; // evaluate function. Since beta and zeta are zero, all relevant terms will be disabled; // by defining these two constexpr:; constexpr double beta = 0.;; constexpr double cons1 = 1.;. if (code != 1) {; throw std::logic_error(""Trying to compute analytic integral with unknown configuration."");; }. const double asigma = _a * _sigma;; const double a2sigma = _a2 * _sigma;; const double d0 = _x.min(rangeName) - _mu;; const double d1 = _x.max(rangeName) - _mu;. double delta;; if (_lambda <= -1.0) {; delta = _sigma * sqrt(-2. + -2.*_lambda);; }; else {; delta = _sigma;; }; const double deltaSq = delta*delta;. if ((d0 > -asigma) && (d1 < a2sigma)) {; return stIntegral(d1, delta, _lambda) - stIntegral(d0, delta, _lambda);; }. if (d0 > a2sigma) {; const double phi = 1. + a2sigma*a2sigma/deltaSq;; ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooHypatia2.cxx:29,test,testing,29,roofit/roofitmore/src/RooHypatia2.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooHypatia2.cxx,3,"['log', 'test']","['logstream', 'testing']"
Testability,"/* Analytical integrals need testing. Int_t getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* rangeName=nullptr) const override;; double analyticalIntegral(Int_t code, const char* rangeName=nullptr) const override;. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/inc/RooHypatia2.h:29,test,testing,29,roofit/roofitmore/inc/RooHypatia2.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/inc/RooHypatia2.h,1,['test'],['testing']
Testability,"/* And simply copy these bytes. Some optimization is possible here,; * depending on the value of 'bytes_to_copy'. Special case the low; * byte counts, which we know to be frequent.; *; * Notice that these cases all 'return' rather than 'break' - this; * avoids an unnecessary test on whether to restore the last byte; * below.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:276,test,test,276,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,1,['test'],['test']
Testability,/* And skip this test */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c:17,test,test,17,graf2d/asimage/src/libAfterImage/libpng/pngtest.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c,1,['test'],['test']
Testability,"/* As I don't have a tilt-sensing tablet,; * I cannot test this code.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/gdk/win32/gdkinput-win32.c:54,test,test,54,graf2d/win32gdk/gdk/src/gdk/win32/gdkinput-win32.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/gdk/win32/gdkinput-win32.c,1,['test'],['test']
Testability,/* Assert that we have correctly flushed the ctx params into the ms's copy */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:3,Assert,Assert,3,builtins/zstd/compress/zstd_compress.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c,1,['Assert'],['Assert']
Testability,/* Assert that we the ms params match the params we're being given */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:3,Assert,Assert,3,builtins/zstd/compress/zstd_compress.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c,1,['Assert'],['Assert']
Testability,/* At present if the check_gamma test fails the gamma of the colorspace is; * not updated however the colorspace is not invalidated. This; * corresponds to the case where the existing gamma comes from an sRGB; * chunk or profile. An error message has already been output.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:33,test,test,33,graf2d/asimage/src/libAfterImage/libpng/png.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c,1,['test'],['test']
Testability,/* At this point you may want to check to see whether any corrupt-data; 	 * warnings occurred (test whether jerr.pub.num_warnings is nonzero).; 	 */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/import.c:95,test,test,95,graf2d/asimage/src/libAfterImage/import.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/import.c,1,['test'],['test']
Testability,"/* Behavior of FORTRAN LOGICAL. All machines' LOGICAL is same size as C's int.; Conversion is automatic except for arrays which require F2CLOGICALV/C2FLOGICALV.; f2c, MIPS f77 [DECstation, SGI], VAX Ultrix f77,; HP-UX f77 : as in C.; VAX/VMS FORTRAN, VAX Ultrix fort,; Absoft Unix Fortran, IBM RS/6000 xlf : LS Bit = 0/1 = TRUE/FALSE.; Apollo : neg. = TRUE, else FALSE.; [Apollo accepts -1 as TRUE for function values, but NOT all other neg. values.]; [DECFortran for Ultrix RISC is also called f77 but is the same as VAX/VMS.]; [MIPS f77 treats .eqv./.neqv. as .eq./.ne. and hence requires LOGICAL_STRICT.]*/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/montecarlo/eg/inc/cfortran.h:23,LOG,LOGICAL,23,montecarlo/eg/inc/cfortran.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/montecarlo/eg/inc/cfortran.h,2,['LOG'],['LOGICAL']
Testability,/* Bit Test */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avx512fintrin.h:7,Test,Test,7,interpreter/llvm-project/clang/lib/Headers/avx512fintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avx512fintrin.h,1,['Test'],['Test']
Testability,"/* Bit Test */; /// Given two 128-bit floating-point vectors of [2 x double], perform an; /// element-by-element comparison of the double-precision element in the; /// first source vector and the corresponding element in the second source; /// vector.; ///; /// The EFLAGS register is updated as follows: \n; /// If there is at least one pair of double-precision elements where the; /// sign-bits of both elements are 1, the ZF flag is set to 0. Otherwise the; /// ZF flag is set to 1. \n; /// If there is at least one pair of double-precision elements where the; /// sign-bit of the first element is 0 and the sign-bit of the second element; /// is 1, the CF flag is set to 0. Otherwise the CF flag is set to 1. \n; /// This intrinsic returns the value of the ZF flag.; ///; /// \headerfile <x86intrin.h>; ///; /// This intrinsic corresponds to the <c> VTESTPD </c> instruction.; ///; /// \param __a; /// A 128-bit vector of [2 x double].; /// \param __b; /// A 128-bit vector of [2 x double].; /// \returns the ZF flag in the EFLAGS register.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avxintrin.h:7,Test,Test,7,interpreter/llvm-project/clang/lib/Headers/avxintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avxintrin.h,1,['Test'],['Test']
Testability,/* Bit tests; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/gutils.h:7,test,tests,7,graf2d/win32gdk/gdk/src/glib/gutils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/gutils.h,1,['test'],['tests']
Testability,"/* By default the 'intrinsics' code in arm/filter_neon_intrinsics.c is used; * if possible - if __ARM_NEON__ is set and the compiler version is not known; * to be broken. This is controlled by PNG_ARM_NEON_IMPLEMENTATION which can; * be:; *; * 1 The intrinsics code (the default with __ARM_NEON__); * 2 The hand coded assembler (the default without __ARM_NEON__); *; * It is possible to set PNG_ARM_NEON_IMPLEMENTATION in CPPFLAGS, however; * this is *NOT* supported and may cease to work even after a minor revision; * to libpng. It *is* valid to do this for testing purposes, e.g. speed; * testing or a new compiler, but the results should be communicated to the; * libpng implementation list for incorporation in the next minor release.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:560,test,testing,560,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,2,['test'],['testing']
Testability,"/* By the IN assertion, the window is not empty so we can't confuse; * more == 0 with more == 64K on a 16 bit machine.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/zip/src/ZDeflate.c:13,assert,assertion,13,core/zip/src/ZDeflate.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/zip/src/ZDeflate.c,1,['assert'],['assertion']
Testability,/* CGI program explicitly sent an error */; /* Write the error message to the internal log */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c:87,log,log,87,net/http/civetweb/civetweb.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c,1,['log'],['log']
Testability,"/* CQTESTF -- ""Conditionally Quiet TEST with Fail message""; * macro that prints PASS or FAIL messages; * parms:	quiet:	if TRUE, only print FAIL messages; *		expr:	the expression to test; *		failfmt:if expr is FALSE, print this message; *			(both format and args); */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/gdk/testgdk.c:35,TEST,TEST,35,graf2d/win32gdk/gdk/src/gdk/testgdk.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/gdk/testgdk.c,2,"['TEST', 'test']","['TEST', 'test']"
Testability,/* Calculate the base logarithm from the top 8 bits as a 28-bit fractional; * value.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:22,log,logarithm,22,graf2d/asimage/src/libAfterImage/libpng/png.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c,1,['log'],['logarithm']
Testability,"/* Called when civetweb has received new HTTP request.; 	 If the callback returns one, it must process the request; 	 by sending valid HTTP headers and a body. Civetweb will not do; 	 any further processing. Otherwise it must return zero.; 	 Note that since V1.7 the ""begin_request"" function is called; 	 before an authorization check. If an authorization check is; 	 required, use a request_handler instead.; 	 Return value:; 	 0: civetweb will process the request itself. In this case,; 	 the callback must not send any data to the client.; 	 1-999: callback already processed the request. Civetweb will; 	 not send any data after the callback returned. The; 	 return code is stored as a HTTP status code for the; 	 access log. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.h:725,log,log,725,net/http/civetweb/civetweb.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.h,1,['log'],['log']
Testability,"/* Called when civetweb is about to log a message. If callback returns; 	 non-zero, civetweb does not log anything. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.h:36,log,log,36,net/http/civetweb/civetweb.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.h,2,['log'],['log']
Testability,"/* Called when civetweb is about to log access. If callback returns; 	 non-zero, civetweb does not log anything. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.h:36,log,log,36,net/http/civetweb/civetweb.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.h,2,['log'],['log']
Testability,/* Cannot determine if socket is already closed. This should; 		 * not occur and never did in a test. Log an error message; 		 * and continue. */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c:96,test,test,96,net/http/civetweb/civetweb.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c,2,"['Log', 'test']","['Log', 'test']"
Testability,"/* Changed in libpng-1.5.4 to limit the values to ensure overflow can't; * occur. Since the fixed point representation is asymmetrical it is; * possible for 1/gamma to overflow the limit of 21474 and this means the; * gamma value must be at least 5/100000 and hence at most 20000.0. For; * safety the limits here are a little narrower. The values are 0.00016 to; * 6250.0, which are truly ridiculous gamma values (and will produce; * displays that are all black or all white.); *; * In 1.6.0 this test replaces the ones in pngrutil.c, in the gAMA chunk; * handling code, which only required the value to be >0.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:497,test,test,497,graf2d/asimage/src/libAfterImage/libpng/png.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c,1,['test'],['test']
Testability,/* Check for two outgoing edges with same slope -- process these; * before any intersection tests (see example in __gl_computeInterior).; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/glu/sweep.c:92,test,tests,92,graf3d/eve7/glu/sweep.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/glu/sweep.c,1,['test'],['tests']
Testability,/* Check if there's testing sample */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.c:20,test,testing,20,builtins/zstd/dictBuilder/cover.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.c,2,['test'],['testing']
Testability,/* Check whether the normalized exponent is high enough to overflow; max during the log-rebasing in the max-exponent check below. */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp:84,log,log-rebasing,84,interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,1,['log'],['log-rebasing']
Testability,"/* Claim: the ONLY property the sweep algorithm relies on is that; * MIN(x,y) <= r <= MAX(x,y). This is a nasty way to test that.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/glu/geom.c:119,test,test,119,graf3d/eve7/glu/geom.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/glu/geom.c,1,['test'],['test']
Testability,"/* Compile time options.; * =====================; * In a multi-arch build the compiler may compile the code several times for the; * same object module, producing different binaries for different architectures.; * When this happens configure-time setting of the target host options cannot be; * done and this interferes with the handling of the ARM NEON optimizations, and; * possibly other similar optimizations. Put additional tests here; in general; * this is needed when the same option can be changed at both compile time and; * run time depending on the target OS (i.e. iOS vs Android.); *; * NOTE: symbol prefixing does not pass $(CFLAGS) to the preprocessor, because; * this is not possible with certain compilers (Oracle SUN OS CC), as a result; * it is necessary to ensure that all extern functions that *might* be used; * regardless of $(CFLAGS) get declared in this file. The test on __ARM_NEON__; * below is one example of this behavior because it is controlled by the; * presence or not of -mfpu=neon on the GCC command line, it is possible to do; * this in $(CC), e.g. ""CC=gcc -mfpu=neon"", but people who build libpng rarely; * do this.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:430,test,tests,430,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,2,['test'],"['test', 'tests']"
Testability,/* Compiler specific tests for systems where size_t is known to be less than; * 32 bits (some of these systems may no longer work because of the lack of; * 'far' support; see above.); */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngconf.h:21,test,tests,21,graf2d/asimage/src/libAfterImage/libpng/pngconf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngconf.h,1,['test'],['tests']
Testability,"/* Complementary insertion */; /* done after iLimit test, as candidates could be > iend-8 */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_double_fast.c:52,test,test,52,builtins/zstd/compress/zstd_double_fast.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_double_fast.c,2,['test'],['test']
Testability,"/* Consistent with all the above colorspace handling an obviously *invalid*; * chunk is just ignored, so does not invalidate the color space. An; * alternative is to set the 'invalid' flags at the start of this routine; * and only clear them in they were not set before and all the tests pass.; */; /* The keyword must be at least one character and there is a; * terminator (0) byte and the compression method byte, and the; * 'zlib' datastream is at least 11 bytes.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:282,test,tests,282,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,1,['test'],['tests']
Testability,/* Copy test from Lua into log_buf */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c:8,test,test,8,net/http/civetweb/civetweb.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c,1,['test'],['test']
Testability,/* Create a top-level window used by other tests; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/gdk/testgdk.c:43,test,tests,43,graf2d/win32gdk/gdk/src/gdk/testgdk.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/gdk/testgdk.c,1,['test'],['tests']
Testability,"/* Create pixmaps, check that properties are as expected.; * No graphic operations tested yet.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/gdk/testgdk.c:83,test,tested,83,graf2d/win32gdk/gdk/src/gdk/testgdk.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/gdk/testgdk.c,1,['test'],['tested']
Testability,"/* Currently the width can't be set by PrintInfo(). This test will be enabled when this feature is added.; TEST(RNTuplePrint, TooShort); {; FileRaii fileGuard(""test.root"");; {; auto model = RNTupleModel::Create();; auto fieldPt = model->MakeField<float>(""pt"");; auto ntuple = RNTupleWriter::Recreate(std::move(model), ""Staff"", ""test.root"");; }; auto ntuple2 = RNTupleReader::Open(""Staff"", ""test.root"");; std::ostringstream os;; ntuple2->PrintInfo(ROOT::Experimental::ENTupleInfo::kSummary, os, '+', 29);; std::string fString{""The width is too small! Should be at least 30.\n""};; EXPECT_EQ(fString, os.str());; }; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/ntuple_print.cxx:57,test,test,57,tree/ntuple/v7/test/ntuple_print.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/ntuple_print.cxx,5,"['TEST', 'test']","['TEST', 'test']"
Testability,"/* DEBUG */; /* ===========================================================================; * Fill the window when the lookahead becomes insufficient.; * Updates strstart and lookahead.; *; * IN assertion: lookahead < MIN_LOOKAHEAD; * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD; * At least one byte has been read, or avail_in == 0; reads are; * performed for at least two bytes (required for the zip translate_eol; * option -- not supported here).; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate.c:196,assert,assertion,196,builtins/zlib/deflate.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate.c,6,['assert'],"['assertion', 'assertions']"
Testability,"/* Default FSE distribution tables.; * These are pre-calculated FSE decoding tables using default distributions as defined in specification :; * https://github.com/facebook/zstd/blob/release/doc/zstd_compression_format.md#default-distributions; * They were generated programmatically with following method :; * - start from default distributions, present in /lib/common/zstd_internal.h; * - generate tables normally, using ZSTD_buildFSETable(); * - printout the content of tables; * - pretify output, report below, test with fuzzer to ensure it's correct */; /* Default FSE distribution table for Literal Lengths */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c:515,test,test,515,builtins/zstd/decompress/zstd_decompress_block.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress_block.c,1,['test'],['test']
Testability,/* Default to using aligned access optimizations and requiring alignment to a; * multiple of the data type size. Override in a compiler specific fashion; * if necessary by inserting tests here:; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:182,test,tests,182,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,1,['test'],['tests']
Testability,/* Define if memory allocation logging and debugging is desired */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/win32/config.h:31,log,logging,31,graf2d/asimage/src/libAfterImage/win32/config.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/win32/config.h,1,['log'],['logging']
Testability,"/* Design notes: 1) We want to delay the costly conversion from object references to; strings to a point after we have decided whether or not to; show that string to the user at all. 2) We want to offer a customization point for; external libraries that want to replace the MnPrint logging. The actual; implementation is in a separate file, MnPrintImpl.cxx file that external libraries; can replace with their own implementation.; */; // logging class for messages of varying severity",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnPrint.h:282,log,logging,282,math/minuit2/inc/Minuit2/MnPrint.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnPrint.h,2,['log'],['logging']
Testability,"/* Divide the coefficient value by qval, ensuring proper rounding.; 	 * Since C does not specify the direction of rounding for negative; 	 * quotients, we have to force the dividend positive for portability.; 	 *; 	 * In most files, at least half of the output values will be zero; 	 * (at default quantization settings, more like three-quarters...); 	 * so we should ensure that this case is fast. On many machines,; 	 * a comparison is enough cheaper than a divide to make a special test; 	 * a win. Since both inputs will be nonnegative, we need only test; 	 * for a < b to discover whether a/b is 0.; 	 * If your machine's division is fast enough, define FAST_DIVIDE.; 	 */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jcdctmgr.c:485,test,test,485,graf2d/asimage/src/libAfterImage/libjpeg/jcdctmgr.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jcdctmgr.c,2,['test'],['test']
Testability,"/* Do nothing, callback has served the request. Store; 				 * then return value as status code for the log and discard; 				 * all data from the client not used by the callback. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c:103,log,log,103,net/http/civetweb/civetweb.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c,1,['log'],['log']
Testability,"/* Do some consistency checking on the memory allocation settings, I'm; * not sure this matters, but it is nice to know, the first of these; * tests should be impossible because of the way the macros are set; * in pngconf.h; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c:143,test,tests,143,graf2d/asimage/src/libAfterImage/libpng/pngtest.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c,1,['test'],['tests']
Testability,/* Double check the convoluted logic below. We expect to get here with; * libpng doing rgb to gray and gamma correction but background processing; * left to the png_image_read_background function. The rows libpng produce; * might be 8 or 16-bit but should always have two channels; gray plus alpha.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:31,log,logic,31,graf2d/asimage/src/libAfterImage/libpng/pngread.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c,1,['log'],['logic']
Testability,/* END of code to check that libpng has the required text support */; /* Test one file */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c:73,Test,Test,73,graf2d/asimage/src/libAfterImage/libpng/pngtest.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c,1,['Test'],['Test']
Testability,/* Each iteration through the following loop writes at most one character; * to msg[i++] then returns here to validate that there is still space for; * the trailing '\0'. It may (in the case of a parameter) read more than; * one character from message[]; it must check for '\0' and continue to the; * test if it finds the end of string.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c:301,test,test,301,graf2d/asimage/src/libAfterImage/libpng/pngerror.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c,1,['test'],['test']
Testability,/* Each memory allocation is bounded by a header structure and a trailer; byte. I.E. <size><magicword><user's allocation><magicbyte>. The pointer returned to the user points to the first byte in the; user's allocation area. The magic word can be tested to detect; buffer underruns and the magic byte can be tested to detect overruns. */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/clib/src/mmcheck.c:246,test,tested,246,core/clib/src/mmcheck.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clib/src/mmcheck.c,2,['test'],['tested']
Testability,"/* Each time 'x' is multiplied by 2, 1 must be subtracted off the final log,; * because the log is actually negate that means adding 1. The final; * returned value thus has the range 0 (for 255 input) to 7.994 (for 1; * input), return -1 for the overflow (log 0) case, - so the result is; * always at most 19 bits.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:72,log,log,72,graf2d/asimage/src/libAfterImage/libpng/png.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c,3,['log'],['log']
Testability,"/* Feature Test Macros. The following are defined here to ensure that correctly; * implemented libraries reveal the APIs libpng needs to build and hide those; * that are not needed and potentially damaging to the compilation.; *; * Feature Test Macros must be defined before any system header is included (see; * POSIX 1003.1 2.8.2 ""POSIX Symbols.""; *; * These macros only have an effect if the operating system supports either; * POSIX 1003.1 or C99, or both. On other operating systems (particularly; * Windows/Visual Studio) there is no effect; the OS specific tests below are; * still required (as of 2011-05-02.); */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:11,Test,Test,11,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,3,"['Test', 'test']","['Test', 'tests']"
Testability,"/* Feature added to libpng-1.6.11 for testing purposes, not; * enabled by default.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtrans.c:38,test,testing,38,graf2d/asimage/src/libAfterImage/libpng/pngtrans.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtrans.c,1,['test'],['testing']
Testability,"/* File system access:; * NO_FILES = do not serve any files from the file system automatically.; * However, with NO_FILES CivetWeb may still write log files, read access; * control files, default error page files or use API functions like; * mg_send_file in callbacks to send files from the server local; * file system.; * NO_FILES only disables the automatic mapping between URLs and local; * file names.; * NO_FILESYSTEM = do not access any file at all. Useful for embedded; * devices without file system. Logging to files in not available; * (use callbacks instead) and API functions like mg_send_file are not; * available.; * If NO_FILESYSTEM is set, NO_FILES must be set as well.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c:147,log,log,147,net/http/civetweb/civetweb.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c,2,"['Log', 'log']","['Logging', 'log']"
Testability,"/* First lay down the symbols in order.; * We use a uint64_t to lay down 8 bytes at a time. This reduces branch; * misses since small blocks generally have small table logs, so nearly; * all symbols have counts <= 8. We ensure we have 8 bytes at the end of; * our buffer to handle the over-write.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse_decompress.c:168,log,logs,168,builtins/zstd/common/fse_decompress.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse_decompress.c,2,['log'],['logs']
Testability,"/* Fixed point gamma.; *; * The code to calculate the tables used below can be found in the shell script; * contrib/tools/intgamma.sh; *; * To calculate gamma this code implements fast log() and exp() calls using only; * fixed point arithmetic. This code has sufficient precision for either 8-bit; * or 16-bit sample values.; *; * The tables used here were calculated using simple 'bc' programs, but C double; * precision floating point arithmetic would work fine.; *; * 8-bit log table; * This is a table of -log(value/255)/log(2) for 'value' in the range 128 to; * 255, so it's the base 2 logarithm of a normalized 8-bit floating point; * mantissa. The numbers are 32-bit fractions.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:185,log,log,185,graf2d/asimage/src/libAfterImage/libpng/png.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c,5,['log'],"['log', 'logarithm']"
Testability,"/* For non-opaque input composite on the sRGB background - this; * requires inverting the encoding for each component. The input; * is still converted to the sRGB encoding because this is a; * reasonable approximate to the logarithmic curve of human; * visual sensitivity, at least over the narrow range which PNG; * represents. Consequently 'G' is always sRGB encoded, while; * 'A' is linear. We need the linear background colors.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:223,log,logarithmic,223,graf2d/asimage/src/libAfterImage/libpng/pngread.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c,1,['log'],['logarithmic']
Testability,"/* For pixel depths up to 4 bpp the 8-pixel mask can be expanded to fit; * into 32 bits, then a single loop over the bytes using the four byte; * values in the 32-bit mask can be used. For the 'display' option the; * expanded mask may also not require any masking within a byte. To; * make this work the PACKSWAP option must be taken into account - it; * simply requires the pixels to be reversed in each byte.; *; * The 'regular' case requires a mask for each of the first 6 passes,; * the 'display' case does a copy for the even passes in the range; * 0..6. This has already been handled in the test above.; *; * The masks are arranged as four bytes with the first byte to use in; * the lowest bits (little-endian) regardless of the order (PACKSWAP or; * not) of the pixels in each byte.; *; * NOTE: the whole of this logic depends on the caller of this function; * only calling it on rows appropriate to the pass. This function only; * understands the 'x' logic; the 'y' logic is handled by the caller.; *; * The following defines allow generation of compile time constant bit; * masks for each pixel depth and each possibility of swapped or not; * swapped bytes. Pass 'p' is in the range 0..6; 'x', a pixel index,; * is in the range 0..7; and the result is 1 if the pixel is to be; * copied in the pass, 0 if not. 'S' is for the sparkle method, 'B'; * for the block method.; *; * With some compilers a compile time expression of the general form:; *; * (shift >= 32) ? (a >> (shift-32)) : (b >> shift); *; * Produces warnings with values of 'shift' in the range 33 to 63; * because the right hand side of the ?: expression is evaluated by; * the compiler even though it isn't used. Microsoft Visual C (various; * versions) and the Intel C compiler are known to do this. To avoid; * this the following macros are used in 1.5.6. This is a temporary; * solution to avoid destabilizing the code during the release process.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:597,test,test,597,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,4,"['log', 'test']","['logic', 'test']"
Testability,"/* Force C2FLOGICAL to generate only the values for either .TRUE. or .FALSE.; SX/PowerStationFortran only have 0 and 1 defined.; Elsewhere, only needed if you want to do:; logical lvariable; if (lvariable .eq. .true.) then ! (1); instead of; if (lvariable .eqv. .true.) then ! (2); - (1) may not even be FORTRAN/77 and that Apollo's f77 and IBM's xlf; refuse to compile (1), so you are probably well advised to stay away from; (1) and from LOGICAL_STRICT.; - You pay a (slight) performance penalty for using LOGICAL_STRICT. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/montecarlo/eg/inc/cfortran.h:172,log,logical,172,montecarlo/eg/inc/cfortran.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/montecarlo/eg/inc/cfortran.h,1,['log'],['logical']
Testability,"/* From Andreas Dilger e-mail to png-implement, 26 March 1998:; *; * In most cases, the ""simple transparency"" should be done prior to doing; * gray-to-RGB, or you will have to test 3x as many bytes to check if a; * pixel is transparent. You would also need to make sure that the; * transparency information is upgraded to RGB.; *; * To summarize, the current flow is:; * - Gray + simple transparency -> compare 1 or 2 gray bytes and composite; * with background ""in place"" if transparent,; * convert to RGB if necessary; * - Gray + alpha -> composite with gray background and remove alpha bytes,; * convert to RGB if necessary; *; * To support RGB backgrounds for gray images we need:; * - Gray + simple transparency -> convert to RGB + simple transparency,; * compare 3 or 6 bytes and composite with; * background ""in place"" if transparent; * (3x compare/pixel compared to doing; * composite with gray bkgrnd); * - Gray + alpha -> convert to RGB + alpha, composite with background and; * remove alpha bytes (3x float; * operations/pixel compared with composite; * on gray background); *; * Greg's change will do this. The reason it wasn't done before is for; * performance, as this increases the per-pixel operations. If we would check; * in advance if the background was gray or RGB, and position the gray-to-RGB; * transform appropriately, then it would save a lot of work/time.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:176,test,test,176,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,1,['test'],['test']
Testability,"/* GLIB - Library of useful routines for C programming; * Copyright (C) 1995-1997 Peter Mattis, Spencer Kimball and Josh MacDonald; *; * giowin32.c: IO Channels for Win32.; * Copyright 1998 Owen Taylor and Tor Lillqvist; * Copyright 1999-2000 Tor Lillqvist and Craig Setera; * Copyright 2001 Andrew Lanoix; *; * This library is free software; you can redistribute it and/or; * modify it under the terms of the GNU Lesser General Public; * License as published by the Free Software Foundation; either; * version 2 of the License, or (at your option) any later version.; *; * This library is distributed in the hope that it will be useful,; * but WITHOUT ANY WARRANTY; without even the implied warranty of; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU; * Lesser General Public License for more details.; *; * You should have received a copy of the GNU Lesser General Public; * License along with this library; if not, write to the; * Free Software Foundation, Inc., 59 Temple Place - Suite 330,; * Boston, MA 02111-1307, USA.; */; /*; * Modified by the GLib Team and others 1997-2000. See the AUTHORS; * file for a list of people on the GLib Team. See the ChangeLog; * files for a list of changes. These files are distributed with; * GLib at ftp://ftp.gtk.org/pub/gtk/.; */; /* Define this to get (very) verbose logging of all channels */; /* #define G_IO_WIN32_DEBUG */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/giowin32.c:1332,log,logging,1332,graf2d/win32gdk/gdk/src/glib/giowin32.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/giowin32.c,1,['log'],['logging']
Testability,/* GLib log levels */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/gmessages.h:8,log,log,8,graf2d/win32gdk/gdk/src/glib/gmessages.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/gmessages.h,1,['log'],['log']
Testability,/* GLib log levels that are considered fatal by default */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/gmessages.h:8,log,log,8,graf2d/win32gdk/gdk/src/glib/gmessages.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/gmessages.h,1,['log'],['log']
Testability,"/* Given an valid file descriptor on an open file, test to see if that file; is a valid mmalloc produced file, and if so, attempt to remap it into the; current process at the same address to which it was previously mapped. Note that we have to update the file descriptor number in the malloc-; descriptor read from the file to match the current valid one, before; trying to map the file in, and again after a successful mapping and; after we've switched over to using the mapped in malloc descriptor; rather than the temporary one on the stack. Once we've switched over to using the mapped in malloc descriptor, we; have to update the pointer to the morecore function, since it almost; certainly will be at a different address if the process reusing the; mapped region is from a different executable. Also note that if the heap being remapped previously used the mmcheck(); routines, we need to update the hooks since their target functions; will have certainly moved if the executable has changed in any way.; We do this by calling mmcheck() internally. Returns a pointer to the malloc descriptor if successful, or NULL if; unsuccessful for some reason. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/clib/src/attach.c:51,test,test,51,core/clib/src/attach.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clib/src/attach.c,1,['test'],['test']
Testability,/* Glib log levels and flags.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/gmessages.h:8,log,log,8,graf2d/win32gdk/gdk/src/glib/gmessages.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/gmessages.h,1,['log'],['log']
Testability,/* HUF_MAX_TABLELOG test just to please gcc 5+; but it should not be necessary */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/huf_compress.c:20,test,test,20,builtins/zstd/compress/huf_compress.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/huf_compress.c,1,['test'],['test']
Testability,"/* Handle the quick cases. First the case of no significant digits,; i.e. zero, and then exponents that are obviously too large or too; small. Writing L for log 10 / log 2, a number d.ddddd*10^exp; definitely overflows if. (exp - 1) * L >= maxExponent. and definitely underflows to zero where. (exp + 1) * L <= minExponent - precision. With integer arithmetic the tightest bounds for L are. 93/28 < L < 196/59 [ numerator <= 256 ]; 42039/12655 < L < 28738/8651 [ numerator <= 65536 ]; */; // Test if we have a zero number allowing for strings with no null terminators; // and zero decimals with non-zero exponents.; //; // We computed firstSigDigit by ignoring all zeros and dots. Thus if; // D->firstSigDigit equals str.end(), every digit must be a zero and there can; // be at most one dot. On the other hand, if we have a zero with a non-zero; // exponent, then we know that D.firstSigDigit will be non-numeric.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp:157,log,log,157,interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,3,"['Test', 'log']","['Test', 'log']"
Testability,/* Hash table lookup needs to be fast.; * We therefore remove the extra conditional of testing; * whether to call the key_equal_func or not from; * the inner loop.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/ghash.c:87,test,testing,87,graf2d/win32gdk/gdk/src/glib/ghash.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/ghash.c,1,['test'],['testing']
Testability,/* Here we have a log message in log_buf. Call the callback */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c:18,log,log,18,net/http/civetweb/civetweb.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c,1,['log'],['log']
Testability,/* I'm not 100% sure about the 24bpp tests - but testing will show */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/gdk/gdkrgb.c:37,test,tests,37,graf2d/win32gdk/gdk/src/gdk/gdkrgb.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/gdk/gdkrgb.c,2,['test'],"['testing', 'tests']"
Testability,/* IDAT logic needs to happen here to simplify getting the two flags; * right.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:8,log,logic,8,graf2d/asimage/src/libAfterImage/libpng/pngread.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c,1,['log'],['logic']
Testability,"/* IMPLEMENTATION NOTE: this 'half_window_size' stuff is only here to; * work round a Microsoft Visual C misbehavior which, contrary to C-90,; * widens the result of the following shift to 64-bits if (and,; * apparently, only if) it is used in a test.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c:246,test,test,246,graf2d/asimage/src/libAfterImage/libpng/pngwutil.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c,1,['test'],['test']
Testability,"/* If HAVE_CONFIG_H is defined during the build then the build system must; * provide an appropriate ""config.h"" file on the include path. The header file; * must provide definitions as required below (search for ""HAVE_CONFIG_H"");; * see configure.ac for more details of the requirements. The macro; * ""PNG_NO_CONFIG_H"" is provided for maintainers to test for dependencies on; * 'configure'; define this macro to prevent the configure build including the; * configure generated config.h. Libpng is expected to compile without *any*; * special build system support on a reasonably ANSI-C compliant system.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:350,test,test,350,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,1,['test'],['test']
Testability,"/* If correct type is being requested, allocate an; * instance of TestType and return the IUnknown interface.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/main.c:66,Test,TestType,66,misc/rootsl/main.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/main.c,1,['Test'],['TestType']
Testability,"/* If it wasn't, then it also wasn't high enough to overflow max; during the log-rebasing in the min-exponent check. Check that it; won't overflow min in either check, then perform the min-exponent; check. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp:77,log,log-rebasing,77,interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,1,['log'],['log-rebasing']
Testability,"/* If the coef was previously nonzero, it only needs a correction bit.; * NOTE: a straight translation of the spec's figure G.7 would suggest; * that we also need to test r > 15. But if r > 15, we can only get here; * if k > EOB, which implies that this coefficient is not 1.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jchuff.c:166,test,test,166,graf2d/asimage/src/libAfterImage/libjpeg/jchuff.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jchuff.c,2,['test'],['test']
Testability,"/* If there doesn't seem to be enough space, try to get the minimum; * anyway. This allows a ""stub"" implementation of jpeg_mem_available().; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:94,stub,stub,94,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,1,['stub'],['stub']
Testability,"/* If we are forced to suspend, we must undo the assignments to any newly; * nonzero coefficients in the block, because otherwise we'd get confused; * next time about which coefficients were already nonzero.; * But we need not undo addition of bits to already-nonzero coefficients;; * instead, we can test the current bit to see if we already did it.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c:301,test,test,301,graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c,1,['test'],['test']
Testability,"/* If we did not get a log message from Lua, create it here. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c:23,log,log,23,net/http/civetweb/civetweb.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c,1,['log'],['log']
Testability,/* Ignore truncation in access log */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c:31,log,log,31,net/http/civetweb/civetweb.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c,1,['log'],['log']
Testability,"/* Important: using local struct mg_file to test path for; 			 * is_directory flag. If filep is used, mg_stat() makes it; 			 * appear as if auth file was opened.; 			 * TODO(mid): Check if this is still required after rewriting; 			 * mg_stat */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c:44,test,test,44,net/http/civetweb/civetweb.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c,1,['test'],['test']
Testability,"/* Improve previous approximations to the integral and test for; accuracy. We write these expressions in the same way as the original; QUADPACK code so that the rounding errors are the same, which; makes testing easier. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:55,test,test,55,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,2,['test'],"['test', 'testing']"
Testability,"/* Increase window log to fit the entire dictionary and source if the; * source size is known. Limit the increase to 19, which is the; * window log for compression level 1 with the largest source size.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:19,log,log,19,builtins/zstd/compress/zstd_compress.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c,2,['log'],['log']
Testability,"/* Initialize the default malloc descriptor if this is the first time; a request has been made to use the default sbrk'd region. Since no alignment guarantees are made about the initial value returned; by sbrk, test the initial value and (if necessary) sbrk enough additional; memory to start off with alignment to BLOCKSIZE. We actually only need; it aligned to an alignment suitable for any object, so this is overkill.; But at most it wastes just part of one BLOCKSIZE chunk of memory and; minimizes portability problems by avoiding us having to figure out; what the actual minimal alignment is. The rest of the malloc code; avoids this as well, by always aligning to the minimum of the requested; size rounded up to a power of two, or to BLOCKSIZE. Note that we are going to use some memory starting at this initial sbrk; address for the sbrk region malloc descriptor, which is a struct, so the; base address must be suitably aligned. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/clib/src/sbrksup.c:211,test,test,211,core/clib/src/sbrksup.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clib/src/sbrksup.c,1,['test'],['test']
Testability,/* Is the given gamma significantly different from sRGB? The test is the same; * one used in pngrtran.c when deciding whether to do gamma correction. The; * arithmetic optimizes the division by using the fact that the inverse of the; * file sRGB gamma is 2.2; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:61,test,test,61,graf2d/asimage/src/libAfterImage/libpng/pngread.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c,1,['test'],['test']
Testability,"/* It is not obvious which comparison below gets optimized in such a way that; * signed overflow would change the result; looking through the code does not; * reveal any tests which have the form GCC complains about, so presumably the; * optimizer is moving an add or subtract into the 'if' somewhere.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:170,test,tests,170,graf2d/asimage/src/libAfterImage/libpng/png.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c,1,['test'],['tests']
Testability,/* It's the only filter so no testing is needed */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c:30,test,testing,30,graf2d/asimage/src/libAfterImage/libpng/pngwutil.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c,1,['test'],['testing']
Testability,"/* Keep stderr and stdout in two different pipes.; 			 * Stdout will be sent back to the client,; 			 * stderr should go into a server error log. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c:141,log,log,141,net/http/civetweb/civetweb.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c,1,['log'],['log']
Testability,/* Larger than max window log */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:26,log,log,26,builtins/zstd/compress/zstd_compress.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c,1,['log'],['log']
Testability,"/* Load the initial translation unit -- we do this without honoring remapped; * files, so that we have a way to test results after changing the source. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/c-index-test/c-index-test.c:112,test,test,112,interpreter/llvm-project/clang/tools/c-index-test/c-index-test.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/c-index-test/c-index-test.c,1,['test'],['test']
Testability,"/* Local variables */; // integer inta, intb, zcode;; /* -- LAPACK auxiliary routine (version 2.0) -- */; /* Univ. of Tennessee, Univ. of California Berkeley, NAG Ltd., */; /* Courant Institute, Argonne National Lab, and Rice University */; /* January 31, 1994 */; /* .. Scalar Arguments .. */; /* .. */; /* Purpose */; /* ======= */; /* LSAME returns .TRUE. if CA is the same letter as CB regardless of */; /* case. */; /* Arguments */; /* ========= */; /* CA (input) CHARACTER*1 */; /* CB (input) CHARACTER*1 */; /* CA and CB specify the single characters to be compared. */; /* ===================================================================== */; /* .. Intrinsic Functions .. */; /* .. */; /* .. Local Scalars .. */; /* .. */; /* .. Executable Statements .. */; /* Test if the characters are equal */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/mnlsame.cxx:773,Test,Test,773,math/minuit2/src/mnlsame.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/mnlsame.cxx,1,['Test'],['Test']
Testability,"/* Log bucket size for collision resolution, at most 8 */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h:3,Log,Log,3,builtins/zstd/compress/zstd_compress_internal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h,1,['Log'],['Log']
Testability,"/* Log is written to a file and/or a callback. If both are not set,; 	 * executing the rest of the function is pointless. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c:3,Log,Log,3,net/http/civetweb/civetweb.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c,1,['Log'],['Log']
Testability,/* Log level shift offset for user defined; * log levels (0-7 are used by GLib).; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/gmessages.h:3,Log,Log,3,graf2d/win32gdk/gdk/src/glib/gmessages.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/gmessages.h,2,"['Log', 'log']","['Log', 'log']"
Testability,/* Log number of entries to skip */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h:3,Log,Log,3,builtins/zstd/compress/zstd_compress_internal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h,1,['Log'],['Log']
Testability,"/* Log size of each bucket in the LDM hash table for collision resolution.; * Larger values improve collision resolution but decrease compression speed.; * The maximum value is ZSTD_LDM_BUCKETSIZELOG_MAX.; * Special: value 0 means ""use default value"" (default: 3). */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:3,Log,Log,3,builtins/zstd/zstd.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h,1,['Log'],['Log']
Testability,/* Log size of hashTable */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h:3,Log,Log,3,builtins/zstd/compress/zstd_compress_internal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h,1,['Log'],['Log']
Testability,/* Logarithm of gamma function */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephes.h:3,Log,Logarithm,3,math/mathcore/src/SpecFuncCephes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephes.h,1,['Log'],['Logarithm']
Testability,/* Logging mechanism; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/gmessages.h:3,Log,Logging,3,graf2d/win32gdk/gdk/src/glib/gmessages.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/gmessages.h,1,['Log'],['Logging']
Testability,/* Logical */; /// Performs a bitwise AND of two 256-bit vectors of [4 x double].; ///; /// \headerfile <x86intrin.h>; ///; /// This intrinsic corresponds to the <c> VANDPD </c> instruction.; ///; /// \param __a; /// A 256-bit vector of [4 x double] containing one of the source operands.; /// \param __b; /// A 256-bit vector of [4 x double] containing one of the source operands.; /// \returns A 256-bit vector of [4 x double] containing the bitwise AND of the; /// values between both operands.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avxintrin.h:3,Log,Logical,3,interpreter/llvm-project/clang/lib/Headers/avxintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avxintrin.h,1,['Log'],['Logical']
Testability,/* Logical Operators */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm-c/Core.h:3,Log,Logical,3,interpreter/llvm-project/llvm/include/llvm-c/Core.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm-c/Core.h,1,['Log'],['Logical']
Testability,"/* Logically, MIN (strlen (d), dest_size) */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/gstrfuncs.c:3,Log,Logically,3,graf2d/win32gdk/gdk/src/glib/gstrfuncs.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/gstrfuncs.c,1,['Log'],['Logically']
Testability,/* Main fastloop assertion: We can always wildcopy FASTLOOP_SAFE_DISTANCE */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4.c:17,assert,assertion,17,builtins/lz4/lz4.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4.c,1,['assert'],['assertion']
Testability,"/* Make it possible to override the charset.alias location. This is; 	 necessary for running the testsuite before ""make install"". */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/iconv/localcharset.c:97,test,testsuite,97,graf2d/win32gdk/gdk/src/iconv/localcharset.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/iconv/localcharset.c,1,['test'],['testsuite']
Testability,/* Make sure to avoid that in the master control logic!; * We are fully adaptive here and need no extra; * statistics gathering pass!; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jcarith.c:49,log,logic,49,graf2d/asimage/src/libAfterImage/libjpeg/jcarith.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jcarith.c,1,['log'],['logic']
Testability,"/* MathCore/tests/test_SpecFunc.cpp; *; * Copyright (C) 2004 Andras Zsenei; *; This program is free software; you can redistribute it and/or modify; it under the terms of the GNU General Public License as published by; the Free Software Foundation; either version 2 of the License, or; (at your option) any later version. This program is distributed in the hope that it will be useful,; but WITHOUT ANY WARRANTY; without even the implied warranty of; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; GNU General Public License for more details. You should have received a copy of the GNU General Public License; along with this program; if not, write to the Free Software; Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA. */; /**. Test file for the special functions implemented in MathMore. For; the moment nothing exceptional. Evaluates the functions and checks; if the value is right against values copied from the GSL tests. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testSpecFunc.cxx:12,test,tests,12,math/mathmore/test/testSpecFunc.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testSpecFunc.cxx,3,"['Test', 'test']","['Test', 'tests']"
Testability,/* Maybe we should make those test lead to warning messages */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx:30,test,test,30,tree/treeplayer/src/TTreeFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx,1,['test'],['test']
Testability,/* Must be 2bpp gray */; /* assert(channels == 1 && shift[0] == 1) */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:28,assert,assert,28,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,1,['assert'],['assert']
Testability,/* Must be 4bpp gray */; /* assert(channels == 1) */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:28,assert,assert,28,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,1,['assert'],['assert']
Testability,"/* NOTE: Uncomment the following #define if you want to use the; * given formula for calculating the AC conditioning parameter Kx; * for spectral selection progressive coding in section G.1.3.2; * of the spec (Kx = Kmin + SRL (8 + Se - Kmin) 4).; * Although the spec and P&M authors claim that this ""has proven; * to give good results for 8 bit precision samples"", I'm not; * convinced yet that this is really beneficial.; * Early tests gave only very marginal compression enhancements; * (a few - around 5 or so - bytes even for very large files),; * which would turn out rather negative if we'd suppress the; * DAC (Define Arithmetic Conditioning) marker segments for; * the default parameters in the future.; * Note that currently the marker writing module emits 12-byte; * DAC segments for a full-component scan in a color image.; * This is not worth worrying about IMHO. However, since the; * spec defines the default values to be used if the tables; * are omitted (unlike Huffman tables, which are required; * anyway), one might optimize this behaviour in the future,; * and then it would be disadvantageous to use custom tables if; * they don't provide sufficient gain to exceed the DAC size.; *; * On the other hand, I'd consider it as a reasonable result; * that the conditioning has no significant influence on the; * compression performance. This means that the basic; * statistical model is already rather stable.; *; * Thus, at the moment, we use the default conditioning values; * anyway, and do not use the custom formula.; *; #define CALCULATE_SPECTRAL_CONDITIONING; */; /* IRIGHT_SHIFT is like RIGHT_SHIFT, but works on int rather than INT32.; * We assume that int right shift is unsigned if INT32 right shift is,; * which should be safe.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jcarith.c:431,test,tests,431,graf2d/asimage/src/libAfterImage/libjpeg/jcarith.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jcarith.c,1,['test'],['tests']
Testability,"/* NOTE: below 'PNG_READ_ALPHA_MODE_SUPPORTED' is presumed to also enable the; * background support (see the comments in scripts/pnglibconf.dfa), this; * allows pre-multiplication of the alpha channel to be implemented as; * compositing on black. This is probably sub-optimal and has been done in; * 1.5.4 betas simply to enable external critique and testing (i.e. to; * implement the new API quickly, without lots of internal changes.); */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:351,test,testing,351,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,1,['test'],['testing']
Testability,/* NOTE: prior to 1.5.4 this test used to include PNG_BACKGROUND (now; * PNG_COMPOSE). This effectively smashed the background calculation for; * 16-bit output because the 8-bit table assumes the result will be; * reduced to 8 bits.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:29,test,test,29,graf2d/asimage/src/libAfterImage/libpng/png.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c,1,['test'],['test']
Testability,"/* NOTE: the unsupported_chunks escape is permitted here because; * unsupported text chunk compression will result in the compression; * mode being changed (to NONE) yet, in the test case, the result; * can be exactly the same size!; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c:178,test,test,178,graf2d/asimage/src/libAfterImage/libpng/pngtest.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c,1,['test'],['test']
Testability,/* NTRAIN: Nb of events used during the learning */; /* NTEST: Nb of events used for the test */; /* TIN: Input variables */; /* TOUT: type of the event */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN_Utils.cxx:89,test,test,89,tmva/tmva/src/MethodCFMlpANN_Utils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN_Utils.cxx,2,['test'],['test']
Testability,"/* Narrow images may have no bits in a pass; the caller should handle; * this, but this test is cheap:; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:88,test,test,88,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,1,['test'],['test']
Testability,"/* No, doesn't work any better anyway. Just testing. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/gdk/win32/gdkwindow-win32.c:44,test,testing,44,graf2d/win32gdk/gdk/src/gdk/win32/gdkwindow-win32.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/gdk/win32/gdkwindow-win32.c,1,['test'],['testing']
Testability,"/* No, don't use delayed rendering after all. It works only if the; * delayed SetClipboardData is called from the WindowProc, it; * seems. (The #else part below is test code for that. It succeeds; * in setting the clipboard data. But if I call SetClipboardData; * in gdk_property_change (as a consequence of the; * GDK_SELECTION_REQUEST event), it fails. I deduce that this is; * because delayed rendering requires that SetClipboardData is; * called in the window procedure.); */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/gdk/win32/gdkevents-win32.c:164,test,test,164,graf2d/win32gdk/gdk/src/gdk/win32/gdkevents-win32.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/gdk/win32/gdkevents-win32.c,1,['test'],['test']
Testability,"/* Normalize fp and correct exp_b10, after this fp is in the; * range [.1,1) and exp_b10 is both the exponent and the digit; * *before* which the decimal point should be inserted; * (starting with 0 for the first digit). Note that this; * works even if 10^exp_b10 is out of range because of the; * test on DBL_MAX above.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:298,test,test,298,graf2d/asimage/src/libAfterImage/libpng/png.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c,1,['test'],['test']
Testability,"/* Normally one would use Z_DEFAULT_STRATEGY for text compression.; * This is here just to make pngtest replicate the results from libpng; * versions prior to 1.5.4, and to test this new API.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c:173,test,test,173,graf2d/asimage/src/libAfterImage/libpng/pngtest.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c,1,['test'],['test']
Testability,/* Not more than the distance to the end of the image. Need this test; * in case the image height is not a multiple of max_v_samp_factor:; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdsample.c:65,test,test,65,graf2d/asimage/src/libAfterImage/libjpeg/jdsample.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdsample.c,1,['test'],['test']
Testability,/* Note: conditions tested here should match those in switch statement; * in jtransform_request_workspace(); */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.c:20,test,tested,20,graf2d/asimage/src/libAfterImage/libjpeg/transupp.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.c,1,['test'],['tested']
Testability,/* Old size is a fragment; type is logarithm; to base two of the fragment size. */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/clib/src/mrealloc.c:35,log,logarithm,35,core/clib/src/mrealloc.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clib/src/mrealloc.c,1,['log'],['logarithm']
Testability,"/* Order size using quicksort. This implementation incorporates; * four optimizations discussed in Sedgewick:; *; * 1. Non-recursive, using an explicit stack of pointer that store the next; * array partition to sort. To save time, this maximum amount of space; * required to store an array of MAX_INT is allocated on the stack. Assuming; * a 32-bit integer, this needs only 32 * sizeof(stack_node) == 136 bits.; * Pretty cheap, actually.; *; * 2. Chose the pivot element using a median-of-three decision tree. This; * reduces the probability of selecting a bad pivot value and eliminates; * certain * extraneous comparisons.; *; * 3. Only quicksorts TOTAL_ELEMS / MAX_THRESH partitions, leaving insertion; * sort to order the MAX_THRESH items within each partition. This is a big; * win, since insertion sort is faster for small, mostly sorted array; * segments.; *; * 4. The larger of the two sub-partitions is always pushed onto the stack; * first, with the algorithm then concentrating on the smaller partition.; * This *guarantees* no more than log (n) stack size is needed (actually O(1); * in this case)!; */; /**; * g_qsort_with_data:; * @pbase: start of array to sort; * @total_elems: elements in the array; * @size: size of each element; * @compare_func: function to compare elements; * @user_data: data to pass to @compare_func; *; * This is just like the standard C qsort() function, but; * the comparison routine accepts a user data argument.; * ; **/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/gqsort.c:1049,log,log,1049,graf2d/win32gdk/gdk/src/glib/gqsort.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/gqsort.c,1,['log'],['log']
Testability,/* Our zeroes don't have a significand to test. */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp:42,test,test,42,interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,1,['test'],['test']
Testability,/* Output a byte on the stream.; * IN assertion: there is enough room in pending_buf.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate.h:38,assert,assertion,38,builtins/zlib/deflate.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/deflate.h,3,['assert'],['assertion']
Testability,"/* PNG_IMAGE macros; *; * These are convenience macros to derive information from a png_image; * structure. The PNG_IMAGE_SAMPLE_ macros return values appropriate to the; * actual image sample values - either the entries in the color-map or the; * pixels in the image. The PNG_IMAGE_PIXEL_ macros return corresponding values; * for the pixels and will always return 1 for color-mapped formats. The; * remaining macros return information about the rows in the image and the; * complete image.; *; * NOTE: All the macros that take a png_image::format parameter are compile time; * constants if the format parameter is, itself, a constant. Therefore these; * macros can be used in array declarations and case labels where required.; * Similarly the macros are also pre-processor constants (sizeof is not used) so; * they can be used in #if tests.; *; * First the information about the samples.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:837,test,tests,837,graf2d/asimage/src/libAfterImage/libpng/png.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h,1,['test'],['tests']
Testability,"/* Parse the translation unit. When we're testing clang_getCursor() after; reparsing, don't remap unsaved files until the second parse. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/c-index-test/c-index-test.c:42,test,testing,42,interpreter/llvm-project/clang/tools/c-index-test/c-index-test.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/c-index-test/c-index-test.c,3,['test'],['testing']
Testability,"/* Percentage of samples used for training: Only used for optimization : the first nbSamples * splitPoint samples will be used to training, the last nbSamples * (1 - splitPoint) samples will be used for testing, 0 means default (0.75), 1.0 when all samples are used for both training and testing */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h:203,test,testing,203,builtins/zstd/zdict.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h,2,['test'],['testing']
Testability,"/* Percentage of samples used for training: Only used for optimization : the first nbSamples * splitPoint samples will be used to training, the last nbSamples * (1 - splitPoint) samples will be used for testing, 0 means default (1.0), 1.0 when all samples are used for both training and testing */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h:203,test,testing,203,builtins/zstd/zdict.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h,2,['test'],['testing']
Testability,/* Pre-rotate __A left 3 (logically right 1) elements. */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/ppc_wrappers/emmintrin.h:26,log,logically,26,interpreter/llvm-project/clang/lib/Headers/ppc_wrappers/emmintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/ppc_wrappers/emmintrin.h,1,['log'],['logically']
Testability,"/* Preset additional state variables for context mode.; * These aren't used in non-context mode, so we needn't test which mode.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jcprepct.c:111,test,test,111,graf2d/asimage/src/libAfterImage/libjpeg/jcprepct.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jcprepct.c,1,['test'],['test']
Testability,/* Print error message to the opened error log stream. */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c:43,log,log,43,net/http/civetweb/civetweb.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c,1,['log'],['log']
Testability,"/* Print error message to the opened error log stream.; This utilizes the provided logging configuration.; conn: connection (not used for sending data, but to get perameters); fmt: format string without the line return; ...: variable argument list; Example:; mg_cry(conn,""i like %s"", ""logging""); */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.h:43,log,log,43,net/http/civetweb/civetweb.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.h,3,['log'],"['log', 'logging']"
Testability,"/* Prior to 1.5.4 these tests were performed from png_set_gamma, 1.5.4 adds; * png_set_alpha_mode and this is another source for a default file gamma so; * the test needs to be performed later - here. In addition prior to 1.5.4; * the tests were repeated for the PALETTE color type here - this is no; * longer necessary (and doesn't seem to have been necessary before.); */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:24,test,tests,24,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,3,['test'],"['test', 'tests']"
Testability,"/* Provide macros for error handling. The ""assert"" macros will; * exit on failure. The ""return"" macros will exit the current; * function. Two different definitions are given for the macros; * if G_DISABLE_ASSERT is not defined, in order to support gcc's; * __PRETTY_FUNCTION__ capability.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/gmessages.h:43,assert,assert,43,graf2d/win32gdk/gdk/src/glib/gmessages.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/gmessages.h,1,['assert'],['assert']
Testability,/* R__read_buf = R__mem_read; */; /* assert(R__read_buf == R__mem_read); */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/zip/src/Bits.c:37,assert,assert,37,core/zip/src/Bits.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/zip/src/Bits.c,1,['assert'],['assert']
Testability,"/* Relabel R/G/B as components 0/1/2, respecting the RGB ordering defined; * in jmorecfg.h. As the code stands, it will do the right thing for R,G,B; * and B,G,R orders. If you define some other weird order in jmorecfg.h,; * you'll get compile errors until you extend this logic. In that case; * you'll probably want to tweak the histogram sizes too.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c:273,log,logic,273,graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jquant2.c,1,['log'],['logic']
Testability,"/* Resize the given region to the new size, returning a pointer; to the (possibly moved) region. This is optimized for speed;; some benchmarks seem to indicate that greater compactness is; achieved by unconditionally allocating and copying to a; new region. This module has incestuous knowledge of the; internals of both mfree and mmalloc. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/clib/src/mrealloc.c:132,benchmark,benchmarks,132,core/clib/src/mrealloc.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clib/src/mrealloc.c,1,['benchmark'],['benchmarks']
Testability,/* Resort to logarithms. */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:13,log,logarithms,13,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,3,['log'],['logarithms']
Testability,/* Returning LOGICAL in FUNn and SUBn */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/montecarlo/eg/inc/cfortran.h:13,LOG,LOGICAL,13,montecarlo/eg/inc/cfortran.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/montecarlo/eg/inc/cfortran.h,1,['LOG'],['LOGICAL']
Testability,"/* Rows of zeroes can be exploited in the same way as we did with columns.; * However, the column calculation has created many nonzero AC terms, so; * the simplification applies less often (typically 5% to 10% of the time).; * And testing floats for zero is relatively expensive, so we don't bother.; */; /* Even part */; /* Apply signed->unsigned and prepare float->int conversion */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctflt.c:231,test,testing,231,graf2d/asimage/src/libAfterImage/libjpeg/jidctflt.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctflt.c,1,['test'],['testing']
Testability,"/* Rows of zeroes can be exploited in the same way as we did with columns.; * However, the column calculation has created many nonzero AC terms, so; * the simplification applies less often (typically 5% to 10% of the time).; * On machines with very fast multiplication, it's possible that the; * test takes more time than it's worth. In that case this section; * may be commented out.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctfst.c:296,test,test,296,graf2d/asimage/src/libAfterImage/libjpeg/jidctfst.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctfst.c,2,['test'],['test']
Testability,"/* SIGMA mapps differently depending on whether it is; 	 * final or not. The following simplified test would; 	 * fail in the case of combining marks following the; 	 * sigma, but I don't think that occurs in real text.; 	 * The test here matches that in ICU.; 	 */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/guniprop.c:98,test,test,98,graf2d/win32gdk/gdk/src/glib/guniprop.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/guniprop.c,2,['test'],['test']
Testability,/* SSE4 128-bit Packed Integer Comparisons. */; /// Tests whether the specified bits in a 128-bit integer vector are all; /// zeros.; ///; /// \headerfile <x86intrin.h>; ///; /// This intrinsic corresponds to the <c> VPTEST / PTEST </c> instruction.; ///; /// \param __M; /// A 128-bit integer vector containing the bits to be tested.; /// \param __V; /// A 128-bit integer vector selecting which bits to test in operand \a __M.; /// \returns TRUE if the specified bits are all zeros; FALSE otherwise.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/smmintrin.h:52,Test,Tests,52,interpreter/llvm-project/clang/lib/Headers/smmintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/smmintrin.h,3,"['Test', 'test']","['Tests', 'test', 'tested']"
Testability,"/* START of code to validate stdio-free compilation */; /* These copies of the default read/write functions come from pngrio.c and; * pngwio.c. They allow ""don't include stdio"" testing of the library.; * This is the function that does the actual reading of data. If you are; * not reading from a standard C stream, you should create a replacement; * read_data function and use it at run time with png_set_read_fn(), rather; * than changing the library.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c:177,test,testing,177,graf2d/asimage/src/libAfterImage/libpng/pngtest.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c,1,['test'],['testing']
Testability,"/* Set log message to ""empty"" */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c:7,log,log,7,net/http/civetweb/civetweb.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c,1,['log'],['log']
Testability,/* Set login timeout to 5 seconds. */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCServer.cxx:7,log,login,7,sql/odbc/src/TODBCServer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/odbc/src/TODBCServer.cxx,1,['log'],['login']
Testability,/* Set status (for log) */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c:19,log,log,19,net/http/civetweb/civetweb.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c,1,['log'],['log']
Testability,"/* Set the library compression level. Currently, valid values range from; * 0 - 9, corresponding directly to the zlib compression levels 0 - 9; * (0 - no compression, 9 - ""maximal"" compression). Note that tests have; * shown that zlib compression levels 3-6 usually perform as well as level 9; * for PNG images, and do considerably fewer calculations. In the future,; * these values may not correspond directly to the zlib compression levels.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:205,test,tests,205,graf2d/asimage/src/libAfterImage/libpng/png.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h,1,['test'],['tests']
Testability,"/* Should test for MSB visual here, and set speed if so. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/gdk/gdkrgb.c:10,test,test,10,graf2d/win32gdk/gdk/src/gdk/gdkrgb.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/gdk/gdkrgb.c,1,['test'],['test']
Testability,"/* Similarly, if the computed intersection lies to the right of the; * rightmost origin (which should rarely happen), it can cause; * unbelievable inefficiency on sufficiently degenerate inputs.; * (If you have the test program, try running test54.d with the; * ""X zoom"" option turned on).; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/glu/sweep.c:215,test,test,215,graf3d/eve7/glu/sweep.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/glu/sweep.c,1,['test'],['test']
Testability,"/* Since this is only a debugging stub, we can cheat a little by using; * fprintf directly rather than going through the trace message code.; * This is helpful because message parm array can't handle longs.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:34,stub,stub,34,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,1,['stub'],['stub']
Testability,/* Small allocation to receive a fragment of a block.; Determine the logarithm to base two of the fragment size. */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/clib/src/mmalloc.c:69,log,logarithm,69,core/clib/src/mmalloc.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clib/src/mmalloc.c,1,['log'],['logarithm']
Testability,/* Split samples into testing and training sets */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.c:22,test,testing,22,builtins/zstd/dictBuilder/cover.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/cover.c,2,['test'],['testing']
Testability,/* Stub = */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:3,Stub,Stub,3,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,2,['Stub'],['Stub']
Testability,"/* Summarize any warnings or errors and in 'strict' mode fail the test.; * Unsupported chunks can result in warnings, in that case ignore the strict; * setting, otherwise fail the test on warnings as well as errors.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c:66,test,test,66,graf2d/asimage/src/libAfterImage/libpng/pngtest.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c,2,['test'],['test']
Testability,"/* Supposedly following the Unicode 2.1.9 table means that the; decompositions come out in canonical order. I haven't tested; this, but we rely on it here. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/gunidecomp.c:118,test,tested,118,graf2d/win32gdk/gdk/src/glib/gunidecomp.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/gunidecomp.c,1,['test'],['tested']
Testability,"/* TMath::ASinH(x) needs to be replaced with ln( x + sqrt(x^2+1)); * argasinh -> the argument of TMath::ASinH(); * argln -> the argument of the logarithm that replaces AsinH; * asinh -> the value that the function evaluates to; *; * ln is the logarithm that was solely present in the initial; * formula, that is before the asinh replacement; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/batchcompute/src/ComputeFunctions.cxx:144,log,logarithm,144,roofit/batchcompute/src/ComputeFunctions.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/batchcompute/src/ComputeFunctions.cxx,2,['log'],['logarithm']
Testability,/* TODO (mid): Define proper return values - maybe return length?; 	 * For the first test use <0 for error and >0 for OK */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c:85,test,test,85,net/http/civetweb/civetweb.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c,1,['test'],['test']
Testability,"/* TODO (mid): This check does not seem to make any sense ! */; /* TODO (mid): Add a webdav unit test first, before changing; 		 * anything here. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c:97,test,test,97,net/http/civetweb/civetweb.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c,1,['test'],['test']
Testability,"/* TODO: The current implementation here just calls the old; 	 * implementations, without using any new options. This is just a first; 	 * step to test the new interfaces. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c:147,test,test,147,net/http/civetweb/civetweb.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c,1,['test'],['test']
Testability,"/* TODO: data-block IDs for RDataSources are not supported yet; TEST_P(RDFSampleCallback, DataSource) {; auto df = ROOT::RDF::MakeTrivialDataFrame(NENTRIES);; auto result = df.Book<>(CounterHelper(), {});; // RTrivialDS tries to produce NSLOTS tasks; const auto expected = ROOT::IsImplicitMTEnabled() ? std::min(NENTRIES, df.GetNSlots()) : 1u;; EXPECT_EQ(*result, expected);; }; */; // instantiate single-thread tests",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_samplecallback.cxx:412,test,tests,412,tree/dataframe/test/dataframe_samplecallback.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_samplecallback.cxx,1,['test'],['tests']
Testability,/* TODO: just a stub for now - need to implement compression */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/asstorage.c:16,stub,stub,16,graf2d/asimage/src/libAfterImage/asstorage.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/asstorage.c,1,['stub'],['stub']
Testability,"/* TODO; // Not supported yet; TEST(DefinePerSample, DataSource); {; ROOT::RDataFrame df(std::make_unique<ROOT::RDF::RTrivialDS>(1));; auto r = df.DefinePerSample(""col0"", [] { return 42; }).Max<int>(""col0"");; EXPECT_EQ(*r, 42);; }; */; // instantiate single-thread tests",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_definepersample.cxx:31,TEST,TEST,31,tree/dataframe/test/dataframe_definepersample.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_definepersample.cxx,2,"['TEST', 'test']","['TEST', 'tests']"
Testability,"/* Test and see what color map to use, and from it # bits per pixel: */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/egif_lib.c:3,Test,Test,3,graf2d/asimage/src/libAfterImage/libungif/egif_lib.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/egif_lib.c,1,['Test'],['Test']
Testability,"/* Test code, to see if SetClipboardData works when called from; * the window procedure.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/gdk/win32/gdkevents-win32.c:3,Test,Test,3,graf2d/win32gdk/gdk/src/gdk/win32/gdkevents-win32.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/gdk/win32/gdkevents-win32.c,1,['Test'],['Test']
Testability,/* Test colourmaps.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/gdk/testgdk.c:3,Test,Test,3,graf2d/win32gdk/gdk/src/gdk/testgdk.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/gdk/testgdk.c,1,['Test'],['Test']
Testability,/* Test colours.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/gdk/testgdk.c:3,Test,Test,3,graf2d/win32gdk/gdk/src/gdk/testgdk.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/gdk/testgdk.c,1,['Test'],['Test']
Testability,/* Test creating temp windows.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/gdk/testgdk.c:3,Test,Test,3,graf2d/win32gdk/gdk/src/gdk/testgdk.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/gdk/testgdk.c,1,['Test'],['Test']
Testability,"/* Test drawing arcs. Results don't have to be exactly as on X11,; * but ""close"".; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/gdk/testgdk.c:3,Test,Test,3,graf2d/win32gdk/gdk/src/gdk/testgdk.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/gdk/testgdk.c,1,['Test'],['Test']
Testability,/* Test drawing lines.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/gdk/testgdk.c:3,Test,Test,3,graf2d/win32gdk/gdk/src/gdk/testgdk.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/gdk/testgdk.c,1,['Test'],['Test']
Testability,/* Test drawing points.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/gdk/testgdk.c:3,Test,Test,3,graf2d/win32gdk/gdk/src/gdk/testgdk.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/gdk/testgdk.c,1,['Test'],['Test']
Testability,/* Test drawing rectangles.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/gdk/testgdk.c:3,Test,Test,3,graf2d/win32gdk/gdk/src/gdk/testgdk.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/gdk/testgdk.c,1,['Test'],['Test']
Testability,/* Test end of chunk */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4.c:3,Test,Test,3,builtins/lz4/lz4.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4.c,1,['Test'],['Test']
Testability,/* Test for different ways to format this string */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c:3,Test,Test,3,net/http/civetweb/civetweb.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c,1,['Test'],['Test']
Testability,/* Test for roundoff and eventually set error flag */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:3,Test,Test,3,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,1,['Test'],['Test']
Testability,/* Test next position */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4.c:3,Test,Test,3,builtins/lz4/lz4.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4.c,1,['Test'],['Test']
Testability,"/* Test of haystack has the needle prefix, comparing case; * insensitive. haystack may be UTF-8, but needle must; * contain only ascii. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/gconvert.c:3,Test,Test,3,graf2d/win32gdk/gdk/src/glib/gconvert.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/gconvert.c,1,['Test'],['Test']
Testability,/* Test on accuracy */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:3,Test,Test,3,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,2,['Test'],['Test']
Testability,/* Test on divergence. */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:3,Test,Test,3,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,1,['Test'],['Test']
Testability,/* Test on flag values as defined in the spec (section 5.4): */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:3,Test,Test,3,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,1,['Test'],['Test']
Testability,/* Test region operations.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/gdk/testgdk.c:3,Test,Test,3,graf2d/win32gdk/gdk/src/gdk/testgdk.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/gdk/testgdk.c,1,['Test'],['Test']
Testability,"/* Test the 'compatibility' setting here, if it is available. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c:3,Test,Test,3,graf2d/asimage/src/libAfterImage/libpng/pngtest.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c,1,['Test'],['Test']
Testability,"/* Test the reading of a simple mock category that has the states; * one = 0; * two = 1; * three = 2; * four = 3; * The ranges ""evens"" and ""odds"" for even and odd state names are defined.; * Now, we check that set ranges are read and written properly, and that; * sharing of those ranges works even after reading back.; * A mock file can be created as follows:; RooCategory cat(""cat"", ""a category""); cat.defineType(""one""); cat.defineType(""two""); cat.defineType(""three""); cat.defineType(""four""); cat.addToRange(""evens"", ""two,four""); cat.addToRange(""odds"", ""one,three""); RooDataSet data(""data"", ""a dataset with a category"", RooArgSet(cat)); data.fill(); TFile outfile(""/tmp/testCategories.root"", ""RECREATE""); outfile.WriteObject(&cat, ""catOrig""); outfile.WriteObject(&data, ""data""); */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testProxiesAndCategories.cxx:3,Test,Test,3,roofit/roofitcore/test/testProxiesAndCategories.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testProxiesAndCategories.cxx,4,"['Test', 'mock', 'test']","['Test', 'mock', 'testCategories']"
Testability,"/* Test to detect irregular behaviour in the table, and; eventually omit a part of the table by adjusting the value of; n. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:3,Test,Test,3,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,1,['Test'],['Test']
Testability,/* Test visuals; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/gdk/testgdk.c:3,Test,Test,3,graf2d/win32gdk/gdk/src/gdk/testgdk.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/gdk/testgdk.c,1,['Test'],['Test']
Testability,/* Tests on the sticky non-zero and negative flags. To pass these checks; * the state must also indicate that the whole number is valid - this is; * achieved by testing PNG_FP_SAW_DIGIT (see the implementation for why this; * is equivalent to PNG_FP_OK above.); */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:3,Test,Tests,3,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,2,"['Test', 'test']","['Tests', 'testing']"
Testability,/* The 'threshold' test is repeated here because it can arise for one of; * the 16-bit tables even if the others don't hit it.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:19,test,test,19,graf2d/asimage/src/libAfterImage/libpng/png.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c,1,['test'],['test']
Testability,"/* The actual parser. This can be called repeatedly. It updates; * the index into the string and the state variable (which must; * be initialized to 0). It returns a result code, as above. There; * is no point calling the parser any more if it fails to advance to; * the end of the string - it is stuck on an invalid character (or; * terminated by '\0').; *; * Note that the pointer will consume an E or even an E+ and then leave; * a 'maybe' state even though a preceding integer.fraction is valid.; * The PNG_FP_WAS_VALID flag indicates that a preceding substring was; * a valid number. It's possible to recover from this by calling; * the parser again (from the start, with state 0) but with a string; * that omits the last character (i.e. set the size to the index of; * the problem character.) This has not been tested within libpng.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:817,test,tested,817,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,1,['test'],['tested']
Testability,"/* The basic operations are insertion of a new key (pqInsert),; * and examination/extraction of a key whose value is minimum; * (pqMinimum/pqExtractMin). Deletion is also allowed (pqDelete);; * for this purpose pqInsert returns a ""handle"" which is supplied; * as the argument.; *; * An initial heap may be created efficiently by calling pqInsert; * repeatedly, then calling pqInit. In any case pqInit must be called; * before any operations other than pqInsert are used.; *; * If the heap is empty, pqMinimum/pqExtractMin will return a NULL key.; * This may also be tested with pqIsEmpty.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/glu/priorityq-heap.h:566,test,tested,566,graf3d/eve7/glu/priorityq-heap.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/glu/priorityq-heap.h,3,['test'],['tested']
Testability,"/* The converted number corresponds to the time the nounce has been; 	 * created. This should not be earlier than the server start. */; /* Server side nonce check is valuable in all situations but one:; 	 * if the server restarts frequently, but the client should not see; 	 * that, so the server should accept nonces from previous starts. */; /* However, the reasonable default is to not accept a nonce from a; 	 * previous start, so if anyone changed the access rights between; 	 * two restarts, a new login is required. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c:504,log,login,504,net/http/civetweb/civetweb.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c,1,['log'],['login']
Testability,"/* The end points are normally quoted to two decimal digits, so allow +/-0.01; * on this test.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:89,test,test,89,graf2d/asimage/src/libAfterImage/libpng/png.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c,1,['test'],['test']
Testability,/* The following are the values for 16-bit tables - these work fine for the; * 8-bit conversions but produce very slightly larger errors in the 16-bit; * log (about 1.2 as opposed to 0.7 absolute error in the final value). To; * use these all the shifts below must be adjusted appropriately.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:154,log,log,154,graf2d/asimage/src/libAfterImage/libpng/png.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c,1,['log'],['log']
Testability,"/* The following definitions for FAR are needed only for MSDOS mixed; * model programming (small or medium model with some far allocations).; * This was tested only with MSC; for other MSDOS compilers you may have; * to define NO_MEMCPY in zutil.h. If you don't need the mixed model,; * just define FAR to be empty.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zconf.h:153,test,tested,153,builtins/zlib/zconf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zconf.h,3,['test'],['tested']
Testability,"/* The following virtual functions are used in register allocation.; * They are not implemented because the existing interface and the logic; * at the caller side do not work for the elementized vector load and store.; *; * virtual unsigned isLoadFromStackSlot(const MachineInstr *MI,; * int &FrameIndex) const;; * virtual unsigned isStoreToStackSlot(const MachineInstr *MI,; * int &FrameIndex) const;; * virtual void storeRegToStackSlot(MachineBasicBlock &MBB,; * MachineBasicBlock::iterator MBBI,; * unsigned SrcReg, bool isKill, int FrameIndex,; * const TargetRegisterClass *RC,; * Register VReg) const;; * virtual void loadRegFromStackSlot(MachineBasicBlock &MBB,; * MachineBasicBlock::iterator MBBI,; * unsigned DestReg, int FrameIndex,; * const TargetRegisterClass *RC,; * const TargetRegisterInfo *TRI,; * Register VReg) const;; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXInstrInfo.h:135,log,logic,135,interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXInstrInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXInstrInfo.h,1,['log'],['logic']
Testability,/* The order of the tests in the following line is important to; prevent a segmentation fault */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:20,test,tests,20,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,1,['test'],['tests']
Testability,/* The output reference is to as symbol stub. */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm-c/DisassemblerTypes.h:40,stub,stub,40,interpreter/llvm-project/llvm/include/llvm-c/DisassemblerTypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm-c/DisassemblerTypes.h,1,['stub'],['stub']
Testability,/* The plane is still wrong despite our tests in gl2psGetPlane.; Let's return a dummy value for now (this is a hack: we should; do more intelligent tests in GetPlane) */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/gl2ps.cxx:40,test,tests,40,graf3d/gl/src/gl2ps.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/gl2ps.cxx,2,['test'],['tests']
Testability,"/* The prediction method we use is to find which method provides the; * smallest value when summing the absolute values of the distances; * from zero, using anything >= 128 as negative numbers. This is known; * as the ""minimum sum of absolute differences"" heuristic. Other; * heuristics are the ""weighted minimum sum of absolute differences""; * (experimental and can in theory improve compression), and the ""zlib; * predictive"" method (not implemented yet), which does test compressions; * of lines using different filter methods, and then chooses the; * (series of) filter(s) that give minimum compressed data size (VERY; * computationally expensive).; *; * GRR 980525: consider also; *; * (1) minimum sum of absolute differences from running average (i.e.,; * keep running sum of non-absolute differences & count of bytes); * [track dispersion, too? restart average if dispersion too large?]; *; * (1b) minimum sum of absolute differences from sliding average, probably; * with window size <= deflate window (usually 32K); *; * (2) minimum sum of squared differences from zero or running average; * (i.e., ~ root-mean-square approach); */; /* We don't need to test the 'no filter' case if this is the only filter; * that has been chosen, as it doesn't actually do anything to the data.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c:469,test,test,469,graf2d/asimage/src/libAfterImage/libpng/pngwutil.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwutil.c,2,['test'],['test']
Testability,"/* The square bracket for the dimension part of the type name. \; * In 'logic [1:0] x[1:0]', only the first '['. This way we can have space \; * before the first bracket but not the second. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/FormatToken.h:72,log,logic,72,interpreter/llvm-project/clang/lib/Format/FormatToken.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/FormatToken.h,1,['log'],['logic']
Testability,"/* The standard Huffman tables are only valid for 8-bit data precision.; * If the precision is higher, force optimization on so that usable; * tables will be computed. This test can be removed if default tables; * are supplied that are valid for the desired precision.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jcparam.c:173,test,test,173,graf2d/asimage/src/libAfterImage/libjpeg/jcparam.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jcparam.c,1,['test'],['test']
Testability,"/* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.; * Otherwise we can't have processed more than WSIZE input bytes since; * the last block flush, because compression would have been; * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to; * transform a block into a stored block.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees.c:7,test,test,7,builtins/zlib/trees.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/trees.c,4,['test'],['test']
Testability,"/* The test is that alpha/257 (rounded) is less than 255, the first value; * that becomes 255 is 65407.; * NOTE: this must agree with the PNG_DIV257 macro (which must, therefore,; * be exact!) [Could also test reciprocal != 0]; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c:7,test,test,7,graf2d/asimage/src/libAfterImage/libpng/pngwrite.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c,2,['test'],['test']
Testability,"/* The version tests may need to be added to, but the problem warning has; * consistently been fixed in GCC versions which obtain wide-spread release.; * The problem is that many versions of GCC rearrange comparison expressions in; * the optimizer in such a way that the results of the comparison will change; * if signed integer overflow occurs. Such comparisons are not permitted in; * ANSI C90, however GCC isn't clever enough to work out that that do not occur; * below in png_ascii_from_fp and png_muldiv, so it produces a warning with; * -Wextra. Unfortunately this is highly dependent on the optimizer and the; * machine architecture so the warning comes and goes unpredictably and is; * impossible to ""fix"", even were that a good idea.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:15,test,tests,15,graf2d/asimage/src/libAfterImage/libpng/png.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c,1,['test'],['tests']
Testability,"/* These functions give the user control over the scan-line filtering in; * libpng and the compression methods used by zlib. These functions are; * mainly useful for testing, as the defaults should work with most users.; * Those users who are tight on memory or want faster performance at the; * expense of compression can modify them. See the compression library; * header file (zlib.h) for an explanation of the compression functions.; */; /* Set the filtering method(s) used by libpng. Currently, the only valid; * value for ""method"" is 0.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:166,test,testing,166,graf2d/asimage/src/libAfterImage/libpng/png.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h,1,['test'],['testing']
Testability,"/* This code is not really all that safe, but it works fine for testing. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/c-index-test/c-index-test.c:64,test,testing,64,interpreter/llvm-project/clang/tools/c-index-test/c-index-test.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/c-index-test/c-index-test.c,1,['test'],['testing']
Testability,/* This encoding occurs quite frequently in test cases because PngSuite; * includes a gAMA 1.0 chunk with most images.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:44,test,test,44,graf2d/asimage/src/libAfterImage/libpng/pngread.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c,1,['test'],['test']
Testability,"/* This function is called to verify that a chunk name is valid.; * This function can't have the ""critical chunk check"" incorporated; * into it, since in the future we will need to be able to call user; * functions to handle unknown critical chunks after we check that; * the chunk name itself is valid.; */; /* Bit hacking: the test for an invalid byte in the 4 byte chunk name is:; *; * ((c) < 65 || (c) > 122 || ((c) > 90 && (c) < 97)); */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:329,test,test,329,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,1,['test'],['test']
Testability,"/* This is 'png_gamma_threshold' from pngrtran.c; the test used for; * gamma correction, the screen gamma hasn't been set on png_struct; * yet; it's set below. png_struct::gamma, however, is set to the; * final value.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c:54,test,test,54,graf2d/asimage/src/libAfterImage/libpng/pngread.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngread.c,1,['test'],['test']
Testability,"/* This is a global switch to set the compilation for an installed system; * (a release build). It can be set for testing debug builds to ensure that; * they will compile when the build type is switched to RC or STABLE, the; * default is just to use PNG_LIBPNG_BUILD_BASE_TYPE. Set this in CPPFLAGS; * with either:; *; * -DPNG_RELEASE_BUILD Turns on the release compile path; * -DPNG_RELEASE_BUILD=0 Turns it off; * or in your pngusr.h with; * #define PNG_RELEASE_BUILD=1 Turns on the release compile path; * #define PNG_RELEASE_BUILD=0 Turns it off; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:114,test,testing,114,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,1,['test'],['testing']
Testability,/* This is the same but it checks a complete string and returns true; * only if it just contains a floating point number. As of 1.5.4 this; * function also returns the state at the end of parsing the number if; * it was valid (otherwise it returns 0.) This can be used for testing; * for negative or zero values using the sticky flag.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:273,test,testing,273,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,1,['test'],['testing']
Testability,/* This is the shared test on whether a gamma value is 'significant' - whether; * it is worth doing gamma correction.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:22,test,test,22,graf2d/asimage/src/libAfterImage/libpng/png.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c,1,['test'],['test']
Testability,"/* This is used because in some compiler implementations non-aligned; * structure members are supported, so the offsetof approach below fails.; * Set PNG_ALIGN_SIZE=0 for compiler combinations where unaligned access; * is good for performance. Do not do this unless you have tested the; * result and understand it.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:275,test,tested,275,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,1,['test'],['tested']
Testability,"/* This needs to change - in the palette image case a whole set of tables are; * built when it would be quicker to just calculate the correct value for; * each palette entry directly. Also, the test is too tricky - why check; * PNG_RGB_TO_GRAY if PNG_GAMMA is not set? The answer seems to be that; * PNG_GAMMA is cancelled even if the gamma is known? The test excludes the; * PNG_COMPOSE case, so apparently if there is no *overall* gamma correction; * the gamma tables will not be built even if composition is required on a; * gamma encoded value.; *; * In 1.5.4 this is addressed below by an additional check on the individual; * file gamma - if it is not 1.0 both RGB_TO_GRAY and COMPOSE need the; * tables.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:194,test,test,194,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,2,['test'],['test']
Testability,"/* This test is here since in ROOT5, when using genreflex,; * for pods, iotype is ignored */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:8,test,test,8,core/dictgen/src/rootcling_impl.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx,1,['test'],['test']
Testability,/* This test must be static */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse_decompress.c:8,test,test,8,builtins/zstd/common/fse_decompress.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse_decompress.c,3,['test'],['test']
Testability,/* This test removed from libpng version 1.0.13 and 1.2.0:; * if (row_info->bit_depth == 1 &&; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtrans.c:8,test,test,8,graf2d/asimage/src/libAfterImage/libpng/pngtrans.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtrans.c,1,['test'],['test']
Testability,"/* This will occur, if a HTTP/1.1 request should be upgraded; 				 * to HTTP/2 - but not if HTTP/2 is negotiated using ALPN.; 				 * Since most (all?) major browsers only support HTTP/2 using; 				 * ALPN, this is hard to test and very low priority.; 				 * Deactivate it (at least for now).; 				 */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c:222,test,test,222,net/http/civetweb/civetweb.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c,1,['test'],['test']
Testability,"/* To allow for future enhancements to the profile accept unrecognized; * profile classes with a warning, these then hit the test below on the; * tag content to ensure they are backward compatible with one of the; * understood profiles.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:125,test,test,125,graf2d/asimage/src/libAfterImage/libpng/png.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c,1,['test'],['test']
Testability,"/* To classify outputLabel in Deep AutoEncoder. Should be used after PreTrain if required.; * Currently, it used Logistic Regression Layer. Otherwise we can use any other classification layer also.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h:113,Log,Logistic,113,tmva/tmva/inc/TMVA/DNN/DeepNet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h,1,['Log'],['Logistic']
Testability,"/* To validate that the context re-use logic is sound, and that we don't; * access stuff that this compression hasn't initialized, we re-""poison""; * the workspace (or at least the non-static, non-table parts of it); * every time we start a new compression. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h:39,log,logic,39,builtins/zstd/compress/zstd_cwksp.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h,1,['log'],['logic']
Testability,"/* To validate that the table re-use logic is sound, and that we don't; * access table space that we haven't cleaned, we re-""poison"" the table; * space every time we mark it dirty. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h:37,log,logic,37,builtins/zstd/compress/zstd_cwksp.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h,1,['log'],['logic']
Testability,"/* To validate that the table re-use logic is sound, and that we don't; * access table space that we haven't cleaned, we re-""poison"" the table; * space every time we mark it dirty.; *; * This function however is intended to operate on those dirty tables and; * re-clean them. So when this function is used correctly, we can unpoison; * the memory it operated on. This introduces a blind spot though, since; * if we now try to operate on __actually__ poisoned memory, we will not; * detect that. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:37,log,logic,37,builtins/zstd/compress/zstd_compress.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c,1,['log'],['logic']
Testability,/* USER_MEM && DEBUG */; /* END of code to test memory allocation/deallocation */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c:43,test,test,43,graf2d/asimage/src/libAfterImage/libpng/pngtest.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c,1,['test'],['test']
Testability,/* Use Lua background state for access log */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c:39,log,log,39,net/http/civetweb/civetweb.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c,1,['log'],['log']
Testability,"/* User-defined data */; /* Part 2 - Logical domain:; 	 * This holds hostname, TLS certificate, document root, ...; 	 * set for a domain hosted at the server.; 	 * There may be multiple domains hosted at one physical server.; 	 * The default domain ""dd"" is the first element of a list of; 	 * domains.; 	 */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c:37,Log,Logical,37,net/http/civetweb/civetweb.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c,1,['Log'],['Logical']
Testability,/* Utility to log an error. */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:14,log,log,14,graf2d/asimage/src/libAfterImage/libpng/png.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c,1,['log'],['log']
Testability,/* Utility to log an error; this also cleans up the png_image; the function; * always returns 0 (false).; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:14,log,log,14,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,1,['log'],['log']
Testability,"/* Utility to safely execute a piece of libpng code catching and logging any; * errors that might occur. Returns true on success, false on failure (either; * of the function or as a result of a png_error.); */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:65,log,logging,65,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,1,['log'],['logging']
Testability,"/* Validate the counts. We do this here mainly so we can copy the right; * number of symbols from the val[] array, without risking marching off; * the end of memory. jchuff.c will do a more thorough test later.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jcparam.c:199,test,test,199,graf2d/asimage/src/libAfterImage/libjpeg/jcparam.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jcparam.c,1,['test'],['test']
Testability,"/* Validate the value to ensure it is in a reasonable range. The value; * is expected to be 1 or greater, but this range test allows for some; * viewing correction values. The intent is to weed out users of this API; * who use the inverse of the gamma value accidentally! Since some of these; * values are reasonable this may have to be changed:; *; * 1.6.x: changed from 0.07..3 to 0.01..100 (to accommodate the optimal 16-bit; * gamma of 36, and its reciprocal.); */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c:121,test,test,121,graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrtran.c,1,['test'],['test']
Testability,"/* WARNING: this may break if size_t is less than 32 bits; it is assumed; * that the PNG_MAX_MALLOC_64K test is enabled in this case, but this is a; * potential breakage point if the types in pngconf.h aren't exactly right.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c:104,test,test,104,graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngrutil.c,1,['test'],['test']
Testability,"/* WRITE_COMPRESSED_TEXT */; /* This is a highly dubious configuration option; by default it is off,; * but it may be appropriate for private builds that are testing; * extensions not conformant to the current specification, or of; * applications that must not fail to write at all costs!; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c:158,test,testing,158,graf2d/asimage/src/libAfterImage/libpng/pngwrite.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngwrite.c,1,['test'],['testing']
Testability,"/* We could a use a for loop here, but that combined with; -funroll-loops can expand to a lot of code. The while; loop avoids unrolling and the compiler commons the xor; from clearing the mask bit with the (m != 0) test. The; result is a more compact loop setup and body. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/ppc_wrappers/bmi2intrin.h:215,test,test,215,interpreter/llvm-project/clang/lib/Headers/ppc_wrappers/bmi2intrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/ppc_wrappers/bmi2intrin.h,1,['test'],['test']
Testability,"/* We do not set a ""Cache-Control"" header here, but leave the default.; 	 * Since browsers do not send an OPTIONS request, we can not test the; 	 * effect anyway. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c:134,test,test,134,net/http/civetweb/civetweb.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c,1,['test'],['test']
Testability,/* We should really test for _POSIX_SYNCRONIZED_IO here */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/clib/src/attach.c:20,test,test,20,core/clib/src/attach.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clib/src/attach.c,3,['test'],['test']
Testability,"/* We use standard functions from math.h, but not printf because; * that would require stdio. The caller must supply a buffer of; * sufficient size or we will png_error. The tests on size and; * the space in ascii[] consumed are indicated below.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:174,test,tests,174,graf2d/asimage/src/libAfterImage/libpng/png.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c,1,['test'],['tests']
Testability,"/* We want the smaller of 'idat_size' and 'current_buffer_size', but they; * are of different types and we don't know which variable has the fewest; * bits. Carefully select the smaller and cast it to the type of the; * larger - this cannot overflow. Do not cast in the following test - it; * will break on either 16-bit or 64-bit platforms.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpread.c:280,test,test,280,graf2d/asimage/src/libAfterImage/libpng/pngpread.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpread.c,1,['test'],['test']
Testability,/* Window log for the LDM */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h:10,log,log,10,builtins/zstd/compress/zstd_compress_internal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress_internal.h,1,['log'],['log']
Testability,/* Windows emulation stubs for common Unix functions; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/gwin32.h:21,stub,stubs,21,graf2d/win32gdk/gdk/src/glib/gwin32.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/gwin32.h,1,['stub'],['stubs']
Testability,"/* Work around a bug in Apple GCC 4.0.1 build 5465: In C99 mode, it supports; the ISO C 99 semantics of 'extern inline' (unlike the GNU C semantics of; earlier versions), but does not display it by setting __GNUC_STDC_INLINE__.; __APPLE__ && __MACH__ test for MacOS X.; __APPLE_CC__ tests for the Apple compiler and its version.; __STDC_VERSION__ tests for the C99 mode. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/iconv/config.h:251,test,test,251,graf2d/win32gdk/gdk/src/iconv/config.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/iconv/config.h,3,['test'],"['test', 'tests']"
Testability,/* ZSTD_DEPS_NEED_MATH64 */; /* Need:; * assert(); */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_deps.h:41,assert,assert,41,builtins/zstd/common/zstd_deps.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_deps.h,1,['assert'],['assert']
Testability,"/* Zero for a large block, or positive giving the; logarithm to the base two of the fragment size. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/clib/res/mmprivate.h:51,log,logarithm,51,core/clib/res/mmprivate.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clib/res/mmprivate.h,1,['log'],['logarithm']
Testability,"/* __gl_meshTessellateMonoRegion( face ) tessellates a monotone region; * (what else would it do??) The region must consist of a single; * loop of half-edges (see mesh.h) oriented CCW. ""Monotone"" in this; * case means that any vertical line intersects the interior of the; * region in a single interval. ; *; * Tessellation consists of adding interior edges (actually pairs of; * half-edges), to split the region into non-overlapping triangles.; *; * The basic idea is explained in Preparata and Shamos (which I don''t; * have handy right now), although their implementation is more; * complicated than this one. The are two edge chains, an upper chain; * and a lower chain. We process all vertices from both chains in order,; * from right to left.; *; * The algorithm ensures that the following invariant holds after each; * vertex is processed: the untessellated region consists of two; * chains, where one chain (say the upper) is a single edge, and; * the other chain is concave. The left vertex of the single edge; * is always to the left of all vertices in the concave chain.; *; * Each step consists of adding the rightmost unprocessed vertex to one; * of the two chains, and forming a fan of triangles from the rightmost; * of two chain endpoints. Determining whether we can add each triangle; * to the fan is a simple orientation test. By making the fan as large; * as possible, we restore the invariant (check it yourself).; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/glu/tessmono.c:1339,test,test,1339,graf3d/eve7/glu/tessmono.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/glu/tessmono.c,1,['test'],['test']
Testability,/* __x86_64__ */; /// Counts the number of bits in the source operand having a value of 1.; ///; /// \headerfile <x86intrin.h>; ///; /// This intrinsic corresponds to the \c POPCNT instruction or a; /// a sequence of arithmetic and logic ops to calculate it.; ///; /// \param __A; /// An unsigned 32-bit integer operand.; /// \returns A 32-bit integer containing the number of bits with value 1 in the; /// source operand.; /// \see _popcnt32,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/ia32intrin.h:232,log,logic,232,interpreter/llvm-project/clang/lib/Headers/ia32intrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/ia32intrin.h,1,['log'],['logic']
Testability,/* assert */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse_decompress.c:3,assert,assert,3,builtins/zstd/common/fse_decompress.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse_decompress.c,2,['assert'],['assert']
Testability,"/* assert may be already defined, due to prior #include <assert.h> */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/debug.h:3,assert,assert,3,builtins/zstd/common/debug.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/debug.h,2,['assert'],['assert']
Testability,/* assert( vEvent->anEdge->Onext->Onext == vEvent->anEdge ); */; /* Get a pointer to the active region containing vEvent */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/glu/sweep.c:3,assert,assert,3,graf3d/eve7/glu/sweep.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/glu/sweep.c,1,['assert'],['assert']
Testability,/* assert() interferes w debug printouts */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c:3,assert,assert,3,interpreter/llvm-project/llvm/lib/Support/regcomp.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c,1,['assert'],['assert']
Testability,"/* assert(), DEBUGLOG(), RAWLOG() */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h:3,assert,assert,3,builtins/zstd/common/bitstream.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h,1,['assert'],['assert']
Testability,"/* assert, DEBUGLOG */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/fse_compress.c:3,assert,assert,3,builtins/zstd/compress/fse_compress.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/fse_compress.c,2,['assert'],['assert']
Testability,"/* assert, DEBUGLOG, RAWLOG, g_debuglevel */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_internal.h:3,assert,assert,3,builtins/zstd/common/zstd_internal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/zstd_internal.h,1,['assert'],['assert']
Testability,/* c-arcmt-test.c */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/c-arcmt-test/c-arcmt-test.c:11,test,test,11,interpreter/llvm-project/clang/tools/c-arcmt-test/c-arcmt-test.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/c-arcmt-test/c-arcmt-test.c,1,['test'],['test']
Testability,/* c-index-test.c */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/c-index-test/c-index-test.c:11,test,test,11,interpreter/llvm-project/clang/tools/c-index-test/c-index-test.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/c-index-test/c-index-test.c,1,['test'],['test']
Testability,"/* call ""log()"" in Lua */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c:9,log,log,9,net/http/civetweb/civetweb.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c,1,['log'],['log']
Testability,/* callback already processed the request. Store the; 			return value as a status code for the access log. */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c:102,log,log,102,net/http/civetweb/civetweb.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c,1,['log'],['log']
Testability,/* can exit outer loop without test */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jcprepct.c:31,test,test,31,graf2d/asimage/src/libAfterImage/libjpeg/jcprepct.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jcprepct.c,1,['test'],['test']
Testability,"/* check corruption */; /* note : should not be necessary : op# advance in lock step, and we control op4.; * but curiously, binary generated by gcc 7.2 & 7.3 with -mbmi2 runs faster when >=1 test is present */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/huf_decompress.c:191,test,test,191,builtins/zstd/decompress/huf_decompress.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/huf_decompress.c,1,['test'],['test']
Testability,/* code only tested on 32 and 64 bits systems */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h:13,test,tested,13,builtins/zstd/common/mem.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/mem.h,1,['test'],['tested']
Testability,"/* determine if there is a ""log()"" function in Lua background script */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c:28,log,log,28,net/http/civetweb/civetweb.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c,1,['log'],['log']
Testability,/* disable assert (default) */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/debug.h:11,assert,assert,11,builtins/zstd/common/debug.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/debug.h,1,['assert'],['assert']
Testability,/* do not log if callack returns non-zero */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c:10,log,log,10,net/http/civetweb/civetweb.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c,1,['log'],['log']
Testability,/* downcaret ∨ LOGICAL OR */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/gdk/win32/gdkevents-win32.c:15,LOG,LOGICAL,15,graf2d/win32gdk/gdk/src/gdk/win32/gdkevents-win32.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/gdk/win32/gdkevents-win32.c,2,['LOG'],['LOGICAL']
Testability,/* else not a parameter and there is a character after the @ sign; just; * copy that. This is known not to be '\0' because of the test above.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c:130,test,test,130,graf2d/asimage/src/libAfterImage/libpng/pngerror.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c,1,['test'],['test']
Testability,"/* else the corresponding function is defined below, inside the scope of the; * cplusplus test.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h:90,test,test,90,graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngpriv.h,1,['test'],['test']
Testability,/* empty; only used for doc-string testing */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/fragile.cxx:35,test,testing,35,bindings/pyroot/cppyy/cppyy/test/fragile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/fragile.cxx,1,['test'],['testing']
Testability,/* fLogAmp = std::log( p[0] ); */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/GaussFunction.h:18,log,log,18,roofit/roofit/test/GaussFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/GaussFunction.h,1,['log'],['log']
Testability,/* first logical row # in the buffer */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:9,log,logical,9,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,2,['log'],['logical']
Testability,"/* for safety if init fails */; /* Check for configuration errors.; * SIZEOF(ALIGN_TYPE) should be a power of 2; otherwise, it probably; * doesn't reflect any real hardware alignment requirement.; * The test is a little tricky: for X>0, X and X-1 have no one-bits; * in common if and only if X is a power of 2, ie has only one one-bit.; * Some compilers may give an ""unreachable code"" warning here; ignore it.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:203,test,test,203,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,1,['test'],['test']
Testability,/* for use in asserts; shuts lint up */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c:14,assert,asserts,14,interpreter/llvm-project/llvm/lib/Support/regcomp.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c,1,['assert'],['asserts']
Testability,/* fpont 12/99 */; /* pont.net */; /* udpserver.c */; /* Converted to echo client/server with select() (timeout option).; See testTUDPSocket.C */; /* Compile with: gcc udpserver.c -o udpserver */; /* on Windows: cl -nologo -Z7 -MD -GR -EHsc udpserver.c */; /* 3/30/05 John Schultz */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/net/udpserver.c:126,test,testTUDPSocket,126,tutorials/net/udpserver.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/net/udpserver.c,1,['test'],['testTUDPSocket']
Testability,"/* function still to develop tests for:; void SetCurrentEvent( Long64_t ievt ) const { fCurrentEventIdx = ievt; }; void SetCurrentType ( Types::ETreeType type ) const { fCurrentTreeIdx = TreeIndex(type); }. void SetEventCollection( std::vector<Event*>*, Types::ETreeType );; const std::vector<Event*>& GetEventCollection( Types::ETreeType type = Types::kMaxTreeType ) const;; const TTree* GetEventCollectionAsTree();. Results* GetResults ( const TString &,Types::ETreeType type, Types::EAnalysisType analysistype );; void DivideTrainingSet( UInt_t blockNum );; void MoveTrainingBlock( Int_t blockInd,Types::ETreeType dest, Bool_t applyChanges = kTRUE );; void IncrementNClassEvents( Int_t type, UInt_t classNumber );; Long64_t GetNClassEvents ( Int_t type, UInt_t classNumber );; void ClearNClassEvents ( Int_t type );; TTree* GetTree( Types::ETreeType type );; void InitSampling( Float_t fraction, Float_t weight, UInt_t seed = 0 );; void EventResult( Bool_t successful, Long64_t evtNumber = -1 );; void CreateSampling() const;; UInt_t TreeIndex(Types::ETreeType type) const;; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:29,test,tests,29,tmva/tmva/test/stressTMVA.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx,1,['test'],['tests']
Testability,"/* gspawn-win32.c - Process launching on Win32; *; * Copyright 2000 Red Hat, Inc.; *; * GLib is free software; you can redistribute it and/or; * modify it under the terms of the GNU Lesser General Public License as; * published by the Free Software Foundation; either version 2 of the; * License, or (at your option) any later version.; *; * GLib is distributed in the hope that it will be useful,; * but WITHOUT ANY WARRANTY; without even the implied warranty of; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU; * Lesser General Public License for more details.; *; * You should have received a copy of the GNU Lesser General Public; * License along with GLib; see the file COPYING.LIB. If not, write; * to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,; * Boston, MA 02111-1307, USA.; */; /*; * Implementation details on Win32.; *; * - There is no way to set the no-inherit flag for; * a ""file descriptor"" in the MS C runtime. The flag is there,; * and the dospawn() function uses it, but unfortunately; * this flag can only be set when opening the file.; * - As there is no fork(), we cannot reliably change directory; * before starting the child process. (There might be several threads; * running, and the current directory is common for all threads.); *; * Thus, we must in most cases use a helper program to handle closing; * of (inherited) file descriptors and changing of directory. In fact,; * we do it all the time.; */; /* Define this to get some logging all the time */; /* #define G_SPAWN_WIN32_DEBUG */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/gspawn-win32.c:1497,log,logging,1497,graf2d/win32gdk/gdk/src/glib/gspawn-win32.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/gspawn-win32.c,1,['log'],['logging']
Testability,"/* if (pos >= RSYNC_LENGTH) assert(ZSTD_rollingHash_compute(istart + pos - RSYNC_LENGTH, RSYNC_LENGTH) == hash); */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c:28,assert,assert,28,builtins/zstd/compress/zstdmt_compress.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstdmt_compress.c,1,['assert'],['assert']
Testability,"/* if compiler fails here, assertion is wrong */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/huf_decompress.c:27,assert,assertion,27,builtins/zstd/decompress/huf_decompress.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/huf_decompress.c,1,['assert'],['assertion']
Testability,/* intentional overflow : do not test positions overlapping 2 memory segments */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_opt.c:33,test,test,33,builtins/zstd/compress/zstd_opt.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_opt.c,2,['test'],['test']
Testability,/* just a stub */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4hc.c:10,stub,stub,10,builtins/lz4/lz4hc.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4hc.c,1,['stub'],['stub']
Testability,"/* k-sample Anderson-Darling test statistics in both original and; alternative versions, AkN2 and AakN2, are stored in the given; double array adk */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GoFTest.cxx:29,test,test,29,math/mathcore/src/GoFTest.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GoFTest.cxx,1,['test'],['test']
Testability,/* log base 2 of distinct color values */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/xwrap.h:3,log,log,3,graf2d/asimage/src/libAfterImage/xwrap.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/xwrap.h,1,['log'],['log']
Testability,/* log base 2 of requested window size */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.h:3,log,log,3,builtins/zlib/inflate.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.h,2,['log'],['log']
Testability,/* log factor when using previous stats to init next stats */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_opt.c:3,log,log,3,builtins/zstd/compress/zstd_opt.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_opt.c,1,['log'],['log']
Testability,/* log flags */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/gmessages.h:3,log,log,3,graf2d/win32gdk/gdk/src/glib/gmessages.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/gmessages.h,1,['log'],['log']
Testability,/* log of size of frequency array : constraint: 0 < f <= 31 : 1 means default(20)*/,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h:3,log,log,3,builtins/zstd/zdict.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h,1,['log'],['log']
Testability,/* log returned true: continue logging */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c:3,log,log,3,net/http/civetweb/civetweb.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c,2,['log'],"['log', 'logging']"
Testability,/* log( sqrt( 2*pi ) ) */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephes.cxx:3,log,log,3,math/mathcore/src/SpecFuncCephes.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephes.cxx,1,['log'],['log']
Testability,/* log() returned empty string: do not log */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c:3,log,log,3,net/http/civetweb/civetweb.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c,2,['log'],['log']
Testability,/* log() returned false: do not log */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c:3,log,log,3,net/http/civetweb/civetweb.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.c,2,['log'],['log']
Testability,/* logical operation */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/xwrap.h:3,log,logical,3,graf2d/asimage/src/libAfterImage/xwrap.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/xwrap.h,1,['log'],['logical']
Testability,/* logicaland ∧ LOGICAL AND */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/gdk/win32/gdkevents-win32.c:3,log,logicaland,3,graf2d/win32gdk/gdk/src/gdk/win32/gdkevents-win32.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/gdk/win32/gdkevents-win32.c,4,"['LOG', 'log']","['LOGICAL', 'logicaland']"
Testability,/* logicalor ∨ LOGICAL OR */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/gdk/win32/gdkevents-win32.c:3,log,logicalor,3,graf2d/win32gdk/gdk/src/gdk/win32/gdkevents-win32.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/gdk/win32/gdkevents-win32.c,4,"['LOG', 'log']","['LOGICAL', 'logicalor']"
Testability,"/* look for gzip magic bytes -- if there, do gzip decoding (note: there is; a logical dilemma here when considering the case of a partially written; gzip file, to wit, if a single 31 byte is written, then we cannot tell; whether this is a single-byte file, or just a partially written gzip; file -- for here we assume that if a gzip file is being written, then; the header will be written in a single operation, so that reading a; single byte is sufficient indication that it is not a gzip file) */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzread.c:78,log,logical,78,builtins/zlib/gzread.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/gzread.c,1,['log'],['logical']
Testability,"/* mg_request_handler. Called when a new request comes in. This callback is URI based; and configured with mg_set_request_handler(). Parameters:; conn: current connection information.; cbdata: the callback data configured with mg_set_request_handler().; Returns:; 0: the handler could not handle the request, so fall through.; 1 - 999: the handler processed the request. The return code is; stored as a HTTP status code for the access log. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.h:435,log,log,435,net/http/civetweb/civetweb.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/civetweb.h,1,['log'],['log']
Testability,/* minstacksize = log(SS_BLOCKSIZE) / log(3) * 2 */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/divsufsort.c:18,log,log,18,builtins/zstd/dictBuilder/divsufsort.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/divsufsort.c,2,['log'],['log']
Testability,/* no assertions please */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regutils.h:6,assert,assertions,6,interpreter/llvm-project/llvm/lib/Support/regutils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regutils.h,1,['assert'],['assertions']
Testability,"/* not debugging, so can't rely on the assert() in llvm_regexec() */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c:39,assert,assert,39,interpreter/llvm-project/llvm/lib/Support/regcomp.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c,1,['assert'],['assert']
Testability,/* note : comparing this constant to an unsigned results in a tautological test */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:75,test,test,75,builtins/zstd/zstd.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h,1,['test'],['test']
Testability,"/* only test matches of minimum length; slightly faster, but misses a few bytes */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4hc.c:8,test,test,8,builtins/lz4/lz4hc.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4hc.c,1,['test'],['test']
Testability,/* other criteria could be tested here for actual pixel format; 	 choosing in an application:; 	 ; 	 for (...each pixel format...) {; 	 if (pfd.dwFlags & PFD_SUPPORT_OPENGL &&; 	 pfd.dwFlags & PFD_DOUBLEBUFFER &&; 	 pfd.cDepthBits >= 24 &&; 	 pfd.cColorBits >= 24); 	 {; 	 goto found;; 	 }; 	 }; 	 ... not found so exit ...; 	 found:; 	 ... found so use it ...; */; /* print out the information for this pixel format */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/glew/src/visualinfo.c:27,test,tested,27,builtins/glew/src/visualinfo.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/glew/src/visualinfo.c,1,['test'],['tested']
Testability,/* others evaluate LOGICALs as for C. */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/montecarlo/eg/inc/cfortran.h:19,LOG,LOGICALs,19,montecarlo/eg/inc/cfortran.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/montecarlo/eg/inc/cfortran.h,1,['LOG'],['LOGICALs']
Testability,"/* png_malloc has already tested for NULL; png_create_struct calls; * png_debug_malloc directly, with png_ptr == NULL which is OK; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c:26,test,tested,26,graf2d/asimage/src/libAfterImage/libpng/pngtest.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c,1,['test'],['tested']
Testability,"/* pngerror.c - stub functions for i/o and memory allocation; *; * Copyright (c) 2018 Cosmin Truta; * Copyright (c) 1998-2002,2004,2006-2017 Glenn Randers-Pehrson; * Copyright (c) 1996-1997 Andreas Dilger; * Copyright (c) 1995-1996 Guy Eric Schalnat, Group 42, Inc.; *; * This code is released under the libpng license.; * For conditions of distribution and use, see the disclaimer; * and license in png.h; *; * This file provides a location for all error handling. Users who; * need special error handling are expected to write replacement functions; * and use png_set_error_fn() to use those functions. See the instructions; * at each function.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c:16,stub,stub,16,graf2d/asimage/src/libAfterImage/libpng/pngerror.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngerror.c,1,['stub'],['stub']
Testability,"/* pngmem.c - stub functions for memory allocation; *; * Copyright (c) 2018 Cosmin Truta; * Copyright (c) 1998-2002,2004,2006-2014,2016 Glenn Randers-Pehrson; * Copyright (c) 1996-1997 Andreas Dilger; * Copyright (c) 1995-1996 Guy Eric Schalnat, Group 42, Inc.; *; * This code is released under the libpng license.; * For conditions of distribution and use, see the disclaimer; * and license in png.h; *; * This file provides a location for all memory allocation. Users who; * need special memory handling are expected to supply replacement; * functions for png_malloc() and png_free(), and to use; * png_create_read_struct_2() and png_create_write_struct_2() to; * identify the replacement functions.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngmem.c:14,stub,stub,14,graf2d/asimage/src/libAfterImage/libpng/pngmem.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngmem.c,1,['stub'],['stub']
Testability,"/* pngtest.c - a simple test program to test libpng; *; * Copyright (c) 2018-2019 Cosmin Truta; * Copyright (c) 1998-2002,2004,2006-2018 Glenn Randers-Pehrson; * Copyright (c) 1996-1997 Andreas Dilger; * Copyright (c) 1995-1996 Guy Eric Schalnat, Group 42, Inc.; *; * This code is released under the libpng license.; * For conditions of distribution and use, see the disclaimer; * and license in png.h; *; * This program reads in a PNG image, writes it out again, and then; * compares the two files. If the files are identical, this shows that; * the basic chunk handling, filtering, and (de)compression code is working; * properly. It does not currently test all of the transforms, although; * it probably should.; *; * The program will report ""FAIL"" in certain legitimate cases:; * 1) when the compression level or filter selection method is changed.; * 2) when the maximum IDAT size (PNG_ZBUF_SIZE in pngconf.h) is not 8192.; * 3) unknown unsafe-to-copy ancillary chunks or unknown critical chunks; * exist in the input file.; * 4) others not listed here...; * In these cases, it is best to check with another tool such as ""pngcheck""; * to see what the differences between the two files are.; *; * If a filename is given on the command-line, then this file is used; * for the input, rather than the default ""pngtest.png"". This allows; * testing a wide variety of files easily. You can also test a number; * of files at once by typing ""pngtest -m file1.png file2.png ...""; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c:24,test,test,24,graf2d/asimage/src/libAfterImage/libpng/pngtest.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/pngtest.c,5,['test'],"['test', 'testing']"
Testability,/* provides the minimum logSize to safely represent a distribution */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/fse_compress.c:24,log,logSize,24,builtins/zstd/compress/fse_compress.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/fse_compress.c,1,['log'],['logSize']
Testability,"/* recommended values for DEBUGLEVEL :; * 0 : release mode, no debug, all run-time checks disabled; * 1 : enables assert() only, no display; * 2 : reserved, for currently active debug path; * 3 : events once per object lifetime (CCtx, CDict, etc.); * 4 : events once per frame; * 5 : events once per block; * 6 : events once per sequence (verbose); * 7+: events at every position (*very* verbose); *; * It's generally inconvenient to output traces > 5.; * In which case, it's possible to selectively trigger high verbosity levels; * by modifying g_debug_level.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/debug.h:114,assert,assert,114,builtins/zstd/common/debug.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/debug.h,1,['assert'],['assert']
Testability,/* rest of block is handled by EOB logic */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c:35,log,logic,35,graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdhuff.c,1,['log'],['logic']
Testability,/* set of small tests for snprintf() */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/clib/src/snprintf.c:16,test,tests,16,core/clib/src/snprintf.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clib/src/snprintf.c,1,['test'],['tests']
Testability,/* some <assert.h>s have bugs too */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c:9,assert,assert,9,interpreter/llvm-project/llvm/lib/Support/regcomp.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c,1,['assert'],['assert']
Testability,"/* static assert is triggered at compile time, leaving no runtime artefact.; * static assert only works with compile-time constants.; * Also, this variant can only be used inside a function. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/debug.h:10,assert,assert,10,builtins/zstd/common/debug.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/debug.h,2,['assert'],['assert']
Testability,/* static test */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4.c:10,test,test,10,builtins/lz4/lz4.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4.c,1,['test'],['test']
Testability,/* switch off assertions (if not already off) if no REDEBUG */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regutils.h:14,assert,assertions,14,interpreter/llvm-project/llvm/lib/Support/regutils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regutils.h,1,['assert'],['assertions']
Testability,/* test bit 2 */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/fse_compress.c:3,test,test,3,builtins/zstd/compress/fse_compress.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/fse_compress.c,1,['test'],['test']
Testability,/* test only non-destroyed hooks */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/ghook.c:3,test,test,3,graf2d/win32gdk/gdk/src/glib/ghook.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/ghook.c,4,['test'],['test']
Testability,/* test whether the interval to be bisected next is the; smallest interval. */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx:3,test,test,3,roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx,1,['test'],['test']
Testability,/* testStatistic */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/DebuggingSampler.h:3,test,testStatistic,3,roofit/roostats/inc/RooStats/DebuggingSampler.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/DebuggingSampler.h,1,['test'],['testStatistic']
Testability,"/* testgdk -- validation program for GDK; * Copyright (C) 2000 Tor Lillqvist; *; * This library is free software; you can redistribute it and/or; * modify it under the terms of the GNU Library General Public; * License as published by the Free Software Foundation; either; * version 2 of the License, or (at your option) any later version.; *; * This library is distributed in the hope that it will be useful,; * but WITHOUT ANY WARRANTY; without even the implied warranty of; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU; * Library General Public License for more details.; *; * You should have received a copy of the GNU Library General Public; * License along with this library; if not, write to the; * Free Software Foundation, Inc., 59 Temple Place - Suite 330,; * Boston, MA 02111-1307, USA.; */; /* This program is intended to be used to validate the correctness of; * the basic graphics operations in a GDK backend. The results of the; * operations are compared against those produced by a correctly; * functioning X11 backend (and X11 server).; *; * Obviously, only the most basic operations reasonably be expected to; * produce pixel-by-pixel identical results as the X11 backend. We; * don't even try to test the correctness of ellipses, tiles or; * stipples. Not to mention fonts.; *; * But, for those operations we do test, we should try to test quite; * many combinations of parameters.; *; * This is just a quick hack, and could be improved a lot. There are; * copy-pasted code snippets all over that need to be factored out; * into separate functions.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/gdk/testgdk.c:3,test,testgdk,3,graf2d/win32gdk/gdk/src/gdk/testgdk.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/gdk/testgdk.c,4,['test'],"['test', 'testgdk']"
Testability,/* the following logic is stolen from gimp and altered for our color format and beauty*/,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/transform.c:17,log,logic,17,graf2d/asimage/src/libAfterImage/transform.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/transform.c,1,['log'],['logic']
Testability,"/* these are some convenience macros that expand to nothing if GLib; * was configured with --disable-threads. for using StaticMutexes,; * you define them with G_LOCK_DEFINE_STATIC (name) or G_LOCK_DEFINE (name); * if you need to export the mutex. With G_LOCK_EXTERN (name) you can; * declare such an globally defined lock. name is a unique identifier; * for the protected varibale or code portion. locking, testing and; * unlocking of such mutexes can be done with G_LOCK(), G_UNLOCK() and; * G_TRYLOCK() respectively.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/gthread.h:407,test,testing,407,graf2d/win32gdk/gdk/src/glib/gthread.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/gthread.h,1,['test'],['testing']
Testability,/* these variables are not used when assert() is disabled */; /* ensure there will be no no underflow; * when translating a dict index into a local index */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_fast.c:37,assert,assert,37,builtins/zstd/compress/zstd_fast.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_fast.c,1,['assert'],['assert']
Testability,/* this method is to write log about the process creation. */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libear/ear.c:27,log,log,27,interpreter/llvm-project/clang/tools/scan-build-py/lib/libear/ear.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/lib/libear/ear.c,1,['log'],['log']
Testability,"/* this test is actually R2 == Q3, written in a form suitable; for exact computation with integers */; /* Due to finite precision some double roots may be missed, and; will be considered to be a pair of complex roots z = x +/-; epsilon i close to the real axis. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/zsolve_cubic.cxx:8,test,test,8,math/mathmore/src/zsolve_cubic.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/zsolve_cubic.cxx,1,['test'],['test']
Testability,/* this test must be static */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/fse_compress.c:8,test,test,8,builtins/zstd/compress/fse_compress.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/fse_compress.c,2,['test'],['test']
Testability,/* to be able to test this code on machines that have snprintf */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/clib/src/snprintf.c:17,test,test,17,core/clib/src/snprintf.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clib/src/snprintf.c,1,['test'],['test']
Testability,/* to support ill-conceived Java test suite */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c:33,test,test,33,builtins/zlib/inflate.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c,2,['test'],['test']
Testability,"/* up->Dst is on the left. It is safe to form triangles from lo->Org.; * The EdgeGoesLeft test guarantees progress even when some triangles; * are CW, given that the upper and lower chains are truly monotone.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/glu/tessmono.c:90,test,test,90,graf3d/eve7/glu/tessmono.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/glu/tessmono.c,1,['test'],['test']
Testability,/* upcaret ∧ LOGICAL AND */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/gdk/win32/gdkevents-win32.c:13,LOG,LOGICAL,13,graf2d/win32gdk/gdk/src/gdk/win32/gdkevents-win32.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/gdk/win32/gdkevents-win32.c,2,['LOG'],['LOGICAL']
Testability,"/* we are used for a log level that is not defined by GLib itself,; * try to make the best out of it.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/gmessages.c:21,log,log,21,graf2d/win32gdk/gdk/src/glib/gmessages.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/gmessages.c,1,['log'],['log']
Testability,/* z = log(ROOT::Math::Pi()) - log( z ) - w;*/,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephes.cxx:7,log,log,7,math/mathcore/src/SpecFuncCephes.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephes.cxx,2,['log'],['log']
Testability,"/*! Checks condition `e` and reports a fatal error if it's false.; * \warning; * - this check is NOT stripped in release mode, so it should not be used for hot paths.; * For those cases, prefer a regular `assert()`;; * - depending on `gErrorIgnoreLevel`, this might not terminate the program, \see ::Fatal.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/TError.h:205,assert,assert,205,core/foundation/inc/TError.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/TError.h,1,['assert'],['assert']
Testability,"/*! FSE_buildCTable():; Builds `ct`, which must be already allocated, using FSE_createCTable().; @return : 0, or an errorCode, which can be tested using FSE_isError() */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:140,test,tested,140,builtins/zstd/common/fse.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h,1,['test'],['tested']
Testability,"/*! FSE_buildDTable():; Builds 'dt', which must be already allocated, using FSE_createDTable().; return : 0, or an errorCode, which can be tested using FSE_isError() */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:139,test,tested,139,builtins/zstd/common/fse.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h,1,['test'],['tested']
Testability,"/*! FSE_compress_usingCTable():; Compress `src` using `ct` into `dst` which must be already allocated.; @return : size of compressed data (<= `dstCapacity`),; or 0 if compressed data could not fit into `dst`,; or an errorCode, which can be tested using FSE_isError() */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:240,test,tested,240,builtins/zstd/common/fse.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h,1,['test'],['tested']
Testability,"/*! FSE_decompress():; Decompress FSE data from buffer 'cSrc', of size 'cSrcSize',; into already allocated destination buffer 'dst', of size 'dstCapacity'.; @return : size of regenerated data (<= maxDstSize),; or an error code, which can be tested using FSE_isError() . ** Important ** : FSE_decompress() does not decompress non-compressible nor RLE data !!!; Why ? : making this distinction requires a header.; Header management is intentionally delegated to the user layer, which can better manage special cases.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:241,test,tested,241,builtins/zstd/common/fse.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h,1,['test'],['tested']
Testability,"/*! FSE_decompress_usingDTable():; Decompress compressed source `cSrc` of size `cSrcSize` using `dt`; into `dst` which must be already allocated.; @return : size of regenerated data (necessarily <= `dstCapacity`),; or an errorCode, which can be tested using FSE_isError() */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:245,test,tested,245,builtins/zstd/common/fse.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h,1,['test'],['tested']
Testability,"/*! FSE_normalizeCount():; normalize counts so that sum(count[]) == Power_of_2 (2^tableLog); 'normalizedCounter' is a table of short, of minimum size (maxSymbolValue+1).; useLowProbCount is a boolean parameter which trades off compressed size for; faster header decoding. When it is set to 1, the compressed data will be slightly; smaller. And when it is set to 0, FSE_readNCount() and FSE_buildDTable() will be; faster. If you are compressing a small amount of data (< 2 KB) then useLowProbCount=0; is a good default, since header deserialization makes a big speed difference.; Otherwise, useLowProbCount=1 is a good default, since the speed difference is small.; @return : tableLog,; or an errorCode, which can be tested using FSE_isError() */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:716,test,tested,716,builtins/zstd/common/fse.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h,1,['test'],['tested']
Testability,"/*! FSE_writeNCount():; Compactly save 'normalizedCounter' into 'buffer'.; @return : size of the compressed table,; or an errorCode, which can be tested using FSE_isError(). */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:146,test,tested,146,builtins/zstd/common/fse.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h,1,['test'],['tested']
Testability,"/*! Function for adding logisticRegressionLayer in the Deep Neural Network, when; * the layer is already created. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h:24,log,logisticRegressionLayer,24,tmva/tmva/inc/TMVA/DNN/DeepNet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h,1,['log'],['logisticRegressionLayer']
Testability,"/*! Function for adding logisticRegressionLayer in the Deep Neural Network,; * with given number of inputUnits and outputUnits. It classifies the outputUnits. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h:24,log,logisticRegressionLayer,24,tmva/tmva/inc/TMVA/DNN/DeepNet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h,1,['log'],['logisticRegressionLayer']
Testability,"/*! Generate a DeepNet, test backward pass */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/GRU/TestGRUBackpropagation.h:24,test,test,24,tmva/tmva/test/DNN/GRU/TestGRUBackpropagation.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/GRU/TestGRUBackpropagation.h,4,['test'],['test']
Testability,"/*! Generate a conv net, test the backward pass, always with stride 1. */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNet.h:25,test,test,25,tmva/tmva/test/DNN/CNN/TestConvNet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNet.h,1,['test'],['test']
Testability,"/*! Generic sample test for forward propagation in GRU network. */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/GRU/TestGRUForwardPass.h:19,test,test,19,tmva/tmva/test/DNN/GRU/TestGRUForwardPass.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/GRU/TestGRUForwardPass.h,1,['test'],['test']
Testability,"/*! Generic sample test for forward propagation in LSTM network. */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/LSTM/TestLSTMForwardPass.h:19,test,test,19,tmva/tmva/test/DNN/LSTM/TestLSTMForwardPass.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/LSTM/TestLSTMForwardPass.h,1,['test'],['test']
Testability,"/*! LZ4F_compressBegin() :; * init streaming compression and writes frame header into dstBuffer.; * dstBuffer must be >= LZ4F_HEADER_SIZE_MAX bytes.; * preferencesPtr can be NULL, in which case default parameters are selected.; * @return : number of bytes written into dstBuffer for the header; * or an error code (can be tested using LZ4F_isError()); */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4frame.c:322,test,tested,322,builtins/lz4/lz4frame.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4frame.c,1,['test'],['tested']
Testability,/*! LZ4F_compressBegin_usingCDict() :; * init streaming compression and writes frame header into dstBuffer.; * dstBuffer must be >= LZ4F_HEADER_SIZE_MAX bytes.; * @return : number of bytes written into dstBuffer for the header; * or an error code (can be tested using LZ4F_isError()); */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4frame.c:255,test,tested,255,builtins/lz4/lz4frame.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4frame.c,1,['test'],['tested']
Testability,"/*! LZ4F_compressEnd() :; * When you want to properly finish the compressed frame, just call LZ4F_compressEnd().; * It will flush whatever data remained within compressionContext (like LZ4_flush()); * but also properly finalize the frame, with an endMark and an (optional) checksum.; * LZ4F_compressOptions_t structure is optional : you can provide NULL as argument.; * @return: the number of bytes written into dstBuffer (necessarily >= 4 (endMark size)); * or an error code if it fails (can be tested using LZ4F_isError()); * The context can then be used again to compress a new frame, starting with LZ4F_compressBegin().; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4frame.c:496,test,tested,496,builtins/lz4/lz4frame.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4frame.c,1,['test'],['tested']
Testability,"/*! LZ4F_compressFrame() :; * Compress an entire srcBuffer into a valid LZ4 frame, in a single step.; * dstBuffer MUST be >= LZ4F_compressFrameBound(srcSize, preferencesPtr).; * The LZ4F_preferences_t structure is optional : you can provide NULL as argument. All preferences will be set to default.; * @return : number of bytes written into dstBuffer.; * or an error code if it fails (can be tested using LZ4F_isError()); */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4frame.c:392,test,tested,392,builtins/lz4/lz4frame.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4frame.c,1,['test'],['tested']
Testability,"/*! LZ4F_compressFrame_usingCDict() :; * Compress srcBuffer using a dictionary, in a single step.; * cdict can be NULL, in which case, no dictionary is used.; * dstBuffer MUST be >= LZ4F_compressFrameBound(srcSize, preferencesPtr).; * The LZ4F_preferences_t structure is optional : you may provide NULL as argument,; * however, it's the only way to provide a dictID, so it's not recommended.; * @return : number of bytes written into dstBuffer,; * or an error code if it fails (can be tested using LZ4F_isError()); */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4frame.c:485,test,tested,485,builtins/lz4/lz4frame.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4frame.c,1,['test'],['tested']
Testability,"/*! LZ4F_compressUpdate() :; * LZ4F_compressUpdate() can be called repetitively to compress as much data as necessary.; * dstBuffer MUST be >= LZ4F_compressBound(srcSize, preferencesPtr).; * LZ4F_compressOptions_t structure is optional : you can provide NULL as argument.; * @return : the number of bytes written into dstBuffer. It can be zero, meaning input data was just buffered.; * or an error code if it fails (which can be tested using LZ4F_isError()); */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4frame.c:429,test,tested,429,builtins/lz4/lz4frame.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4frame.c,1,['test'],['tested']
Testability,"/*! LZ4F_decodeHeader() :; * input : `src` points at the **beginning of the frame**; * output : set internal values of dctx, such as; * dctx->frameInfo and dctx->dStage.; * Also allocates internal buffers.; * @return : nb Bytes read from src (necessarily <= srcSize); * or an error code (testable with LZ4F_isError()); */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4frame.c:288,test,testable,288,builtins/lz4/lz4frame.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4frame.c,1,['test'],['testable']
Testability,"/*! LZ4F_decompress() :; * Call this function repetitively to regenerate compressed data in srcBuffer.; * The function will attempt to decode up to *srcSizePtr bytes from srcBuffer; * into dstBuffer of capacity *dstSizePtr.; *; * The number of bytes regenerated into dstBuffer will be provided within *dstSizePtr (necessarily <= original value).; *; * The number of bytes effectively read from srcBuffer will be provided within *srcSizePtr (necessarily <= original value).; * If number of bytes read is < number of bytes provided, then decompression operation is not complete.; * Remaining data will have to be presented again in a subsequent invocation.; *; * The function result is an hint of the better srcSize to use for next call to LZ4F_decompress.; * Schematically, it's the size of the current (or remaining) compressed block + header of next block.; * Respecting the hint provides a small boost to performance, since it allows less buffer shuffling.; * Note that this is just a hint, and it's always possible to any srcSize value.; * When a frame is fully decoded, @return will be 0.; * If decompression failed, @return is an error code which can be tested using LZ4F_isError().; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4frame.c:1159,test,tested,1159,builtins/lz4/lz4frame.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4frame.c,1,['test'],['tested']
Testability,"/*! LZ4F_flush() :; * When compressed data must be sent immediately, without waiting for a block to be filled,; * invoke LZ4_flush(), which will immediately compress any remaining data stored within LZ4F_cctx.; * The result of the function is the number of bytes written into dstBuffer.; * It can be zero, this means there was no data left within LZ4F_cctx.; * The function outputs an error code if it fails (can be tested using LZ4F_isError()); * LZ4F_compressOptions_t* is optional. NULL is a valid argument.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4frame.c:416,test,tested,416,builtins/lz4/lz4frame.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4frame.c,1,['test'],['tested']
Testability,"/*! LZ4F_getFrameInfo() :; * This function extracts frame parameters (max blockSize, frame checksum, etc.).; * Usage is optional. Objective is to provide relevant information for allocation purposes.; * This function works in 2 situations :; * - At the beginning of a new frame, in which case it will decode this information from `srcBuffer`, and start the decoding process.; * Amount of input data provided must be large enough to successfully decode the frame header.; * A header size is variable, but is guaranteed to be <= LZ4F_HEADER_SIZE_MAX bytes. It's possible to provide more input data than this minimum.; * - After decoding has been started. In which case, no input is read, frame parameters are extracted from dctx.; * The number of bytes consumed from srcBuffer will be updated within *srcSizePtr (necessarily <= original value).; * Decompression must resume from (srcBuffer + *srcSizePtr).; * @return : an hint about how many srcSize bytes LZ4F_decompress() expects for next call,; * or an error code which can be tested using LZ4F_isError(); * note 1 : in case of error, dctx is not modified. Decoding operations can resume from where they stopped.; * note 2 : frame parameters are *copied into* an already allocated LZ4F_frameInfo_t structure.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4frame.c:1028,test,tested,1028,builtins/lz4/lz4frame.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4frame.c,1,['test'],['tested']
Testability,"/*! LZ4F_headerSize() :; * @return : size of frame header; * or an error code, which can be tested using LZ4F_isError(); */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4frame.c:92,test,tested,92,builtins/lz4/lz4frame.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4frame.c,1,['test'],['tested']
Testability,"/*! LZ4_attach_dictionary() :; * This is an experimental API that allows; * efficient use of a static dictionary many times.; *; * Rather than re-loading the dictionary buffer into a working context before; * each compression, or copying a pre-loaded dictionary's LZ4_stream_t into a; * working LZ4_stream_t, this function introduces a no-copy setup mechanism,; * in which the working stream references the dictionary stream in-place.; *; * Several assumptions are made about the state of the dictionary stream.; * Currently, only streams which have been prepared by LZ4_loadDict() should; * be expected to work.; *; * Alternatively, the provided dictionaryStream may be NULL,; * in which case any existing dictionary stream is unset.; *; * If a dictionary is provided, it replaces any pre-existing stream history.; * The dictionary contents are the only history that can be referenced and; * logically immediately precede the data compressed in the first subsequent; * compression call.; *; * The dictionary will only remain attached to the working stream through the; * first compression call, at the end of which it is cleared. The dictionary; * stream (and source buffer) must remain in-place / accessible / unchanged; * through the completion of the first compression call on the stream.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4.h:893,log,logically,893,builtins/lz4/lz4.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4.h,1,['log'],['logically']
Testability,"/*! LZ4_compress_destSize() :; * Reverse the logic : compresses as much data as possible from 'src' buffer; * into already allocated buffer 'dst', of size >= 'targetDestSize'.; * This function either compresses the entire 'src' content into 'dst' if it's large enough,; * or fill 'dst' buffer completely with as much data as possible from 'src'.; * note: acceleration parameter is fixed to ""default"".; *; * *srcSizePtr : will be modified to indicate how many bytes where read from 'src' to fill 'dst'.; * New value is necessarily <= input value.; * @return : Nb bytes written into 'dst' (necessarily <= targetDestSize); * or 0 if compression fails.; *; * Note : from v1.8.2 to v1.9.1, this function had a bug (fixed un v1.9.2+):; * the produced compressed content could, in specific circumstances,; * require to be decompressed into a destination buffer larger; * by at least 1 byte than the content to decompress.; * If an application uses `LZ4_compress_destSize()`,; * it's highly recommended to update liblz4 to v1.9.2 or better.; * If this can't be done or ensured,; * the receiving decompression function should provide; * a dstCapacity which is > decompressedSize, by at least 1 byte.; * See https://github.com/lz4/lz4/issues/859 for details; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4.h:45,log,logic,45,builtins/lz4/lz4.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/lz4/lz4.h,1,['log'],['logic']
Testability,"/*! Test computation of the first derivative of the Gauss activation function. */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctions.h:4,Test,Test,4,tmva/tmva/test/DNN/TestActivationFunctions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctions.h,1,['Test'],['Test']
Testability,"/*! Test computation of the first derivative of the ReLU function. */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctions.h:4,Test,Test,4,tmva/tmva/test/DNN/TestActivationFunctions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctions.h,1,['Test'],['Test']
Testability,"/*! Test computation of the first derivative of the Sigmoid function. */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctions.h:4,Test,Test,4,tmva/tmva/test/DNN/TestActivationFunctions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctions.h,1,['Test'],['Test']
Testability,"/*! Test computation of the first derivative of the identity function. */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctions.h:4,Test,Test,4,tmva/tmva/test/DNN/TestActivationFunctions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctions.h,1,['Test'],['Test']
Testability,"/*! Test computation of the first derivative of the soft sign function. */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctions.h:4,Test,Test,4,tmva/tmva/test/DNN/TestActivationFunctions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctions.h,1,['Test'],['Test']
Testability,"/*! Test computation of the first derivative of the symmetric ReLU function. */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctions.h:4,Test,Test,4,tmva/tmva/test/DNN/TestActivationFunctions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctions.h,1,['Test'],['Test']
Testability,"/*! Test computation of the first derivative of the tanh function. */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctions.h:4,Test,Test,4,tmva/tmva/test/DNN/TestActivationFunctions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctions.h,1,['Test'],['Test']
Testability,"/*! Test derivatives of all activation functions and return the maximum relative; * error. Prints the result for each function to the stdout. */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestDerivatives.h:4,Test,Test,4,tmva/tmva/test/DNN/TestDerivatives.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestDerivatives.h,1,['Test'],['Test']
Testability,"/*! Test gradients of all loss function for the given architecture type and; * return the maximum relative error. Prints results for each function to; * standard out. */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestDerivatives.h:4,Test,Test,4,tmva/tmva/test/DNN/TestDerivatives.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestDerivatives.h,1,['Test'],['Test']
Testability,"/*! ZDICT_finalizeDictionary():; * Given a custom content as a basis for dictionary, and a set of samples,; * finalize dictionary by adding headers and statistics according to the zstd; * dictionary format.; *; * Samples must be stored concatenated in a flat buffer `samplesBuffer`,; * supplied with an array of sizes `samplesSizes`, providing the size of each; * sample in order. The samples are used to construct the statistics, so they; * should be representative of what you will compress with this dictionary.; *; * The compression level can be set in `parameters`. You should pass the; * compression level you expect to use in production. The statistics for each; * compression level differ, so tuning the dictionary for the compression level; * can help quite a bit.; *; * You can set an explicit dictionary ID in `parameters`, or allow us to pick; * a random dictionary ID for you, but we can't guarantee no collisions.; *; * The dstDictBuffer and the dictContent may overlap, and the content will be; * appended to the end of the header. If the header + the content doesn't fit in; * maxDictSize the beginning of the content is truncated to make room, since it; * is presumed that the most profitable content is at the end of the dictionary,; * since that is the cheapest to reference.; *; * `dictContentSize` must be >= ZDICT_CONTENTSIZE_MIN bytes.; * `maxDictSize` must be >= max(dictContentSize, ZSTD_DICTSIZE_MIN).; *; * @return: size of dictionary stored into `dstDictBuffer` (<= `maxDictSize`),; * or an error code, which can be tested by ZDICT_isError().; * Note: ZDICT_finalizeDictionary() will push notifications into stderr if; * instructed to, using notificationLevel>0.; * NOTE: This function currently may fail in several edge cases including:; * * Not enough samples; * * Samples are uncompressible; * * Samples are all exactly the same; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h:1544,test,tested,1544,builtins/zstd/zdict.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h,1,['test'],['tested']
Testability,"/*! ZDICT_optimizeTrainFromBuffer_cover():; * The same requirements as above hold for all the parameters except `parameters`.; * This function tries many parameter combinations and picks the best parameters.; * `*parameters` is filled with the best parameters found,; * dictionary constructed with those parameters is stored in `dictBuffer`.; *; * All of the parameters d, k, steps are optional.; * If d is non-zero then we don't check multiple values of d, otherwise we check d = {6, 8}.; * if steps is zero it defaults to its default value.; * If k is non-zero then we don't check multiple values of k, otherwise we check steps values in [50, 2000].; *; * @return: size of dictionary stored into `dictBuffer` (<= `dictBufferCapacity`); * or an error code, which can be tested with ZDICT_isError().; * On success `*parameters` contains the parameters selected.; * See ZDICT_trainFromBuffer() for details on failure modes.; * Note: ZDICT_optimizeTrainFromBuffer_cover() requires about 8 bytes of memory for each input byte and additionally another 5 bytes of memory for each byte of memory for each thread.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h:771,test,tested,771,builtins/zstd/zdict.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h,1,['test'],['tested']
Testability,"/*! ZDICT_optimizeTrainFromBuffer_fastCover():; * The same requirements as above hold for all the parameters except `parameters`.; * This function tries many parameter combinations (specifically, k and d combinations); * and picks the best parameters. `*parameters` is filled with the best parameters found,; * dictionary constructed with those parameters is stored in `dictBuffer`.; * All of the parameters d, k, steps, f, and accel are optional.; * If d is non-zero then we don't check multiple values of d, otherwise we check d = {6, 8}.; * if steps is zero it defaults to its default value.; * If k is non-zero then we don't check multiple values of k, otherwise we check steps values in [50, 2000].; * If f is zero, default value of 20 is used.; * If accel is zero, default value of 1 is used.; *; * @return: size of dictionary stored into `dictBuffer` (<= `dictBufferCapacity`); * or an error code, which can be tested with ZDICT_isError().; * On success `*parameters` contains the parameters selected.; * See ZDICT_trainFromBuffer() for details on failure modes.; * Note: ZDICT_optimizeTrainFromBuffer_fastCover() requires about 6 * 2^f bytes of memory for each thread.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h:918,test,tested,918,builtins/zstd/zdict.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h,1,['test'],['tested']
Testability,"/*! ZDICT_trainFromBuffer():; * Train a dictionary from an array of samples.; * Redirect towards ZDICT_optimizeTrainFromBuffer_fastCover() single-threaded, with d=8, steps=4,; * f=20, and accel=1.; * Samples must be stored concatenated in a single flat buffer `samplesBuffer`,; * supplied with an array of sizes `samplesSizes`, providing the size of each sample, in order.; * The resulting dictionary will be saved into `dictBuffer`.; * @return: size of dictionary stored into `dictBuffer` (<= `dictBufferCapacity`); * or an error code, which can be tested with ZDICT_isError().; * Note: Dictionary training will fail if there are not enough samples to construct a; * dictionary, or if most of the samples are too small (< 8 bytes being the lower limit).; * If dictionary training fails, you should use zstd without a dictionary, as the dictionary; * would've been ineffective anyways. If you believe your samples would benefit from a dictionary; * please open an issue with details, and we can look into it.; * Note: ZDICT_trainFromBuffer()'s memory usage is about 6 MB.; * Tips: In general, a reasonable dictionary has a size of ~ 100 KB.; * It's possible to select smaller or larger size, just by specifying `dictBufferCapacity`.; * In general, it's recommended to provide a few thousands samples, though this can vary a lot.; * It's recommended that total size of all samples be about ~x100 times the target size of dictionary.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h:550,test,tested,550,builtins/zstd/zdict.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h,1,['test'],['tested']
Testability,"/*! ZDICT_trainFromBuffer_cover():; * Train a dictionary from an array of samples using the COVER algorithm.; * Samples must be stored concatenated in a single flat buffer `samplesBuffer`,; * supplied with an array of sizes `samplesSizes`, providing the size of each sample, in order.; * The resulting dictionary will be saved into `dictBuffer`.; * @return: size of dictionary stored into `dictBuffer` (<= `dictBufferCapacity`); * or an error code, which can be tested with ZDICT_isError().; * See ZDICT_trainFromBuffer() for details on failure modes.; * Note: ZDICT_trainFromBuffer_cover() requires about 9 bytes of memory for each input byte.; * Tips: In general, a reasonable dictionary has a size of ~ 100 KB.; * It's possible to select smaller or larger size, just by specifying `dictBufferCapacity`.; * In general, it's recommended to provide a few thousands samples, though this can vary a lot.; * It's recommended that total size of all samples be about ~x100 times the target size of dictionary.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h:462,test,tested,462,builtins/zstd/zdict.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h,1,['test'],['tested']
Testability,"/*! ZDICT_trainFromBuffer_fastCover():; * Train a dictionary from an array of samples using a modified version of COVER algorithm.; * Samples must be stored concatenated in a single flat buffer `samplesBuffer`,; * supplied with an array of sizes `samplesSizes`, providing the size of each sample, in order.; * d and k are required.; * All other parameters are optional, will use default values if not provided; * The resulting dictionary will be saved into `dictBuffer`.; * @return: size of dictionary stored into `dictBuffer` (<= `dictBufferCapacity`); * or an error code, which can be tested with ZDICT_isError().; * See ZDICT_trainFromBuffer() for details on failure modes.; * Note: ZDICT_trainFromBuffer_fastCover() requires 6 * 2^f bytes of memory.; * Tips: In general, a reasonable dictionary has a size of ~ 100 KB.; * It's possible to select smaller or larger size, just by specifying `dictBufferCapacity`.; * In general, it's recommended to provide a few thousands samples, though this can vary a lot.; * It's recommended that total size of all samples be about ~x100 times the target size of dictionary.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h:587,test,tested,587,builtins/zstd/zdict.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h,1,['test'],['tested']
Testability,"/*! ZDICT_trainFromBuffer_legacy():; * Train a dictionary from an array of samples.; * Samples must be stored concatenated in a single flat buffer `samplesBuffer`,; * supplied with an array of sizes `samplesSizes`, providing the size of each sample, in order.; * The resulting dictionary will be saved into `dictBuffer`.; * `parameters` is optional and can be provided with values set to 0 to mean ""default"".; * @return: size of dictionary stored into `dictBuffer` (<= `dictBufferCapacity`); * or an error code, which can be tested with ZDICT_isError().; * See ZDICT_trainFromBuffer() for details on failure modes.; * Tips: In general, a reasonable dictionary has a size of ~ 100 KB.; * It's possible to select smaller or larger size, just by specifying `dictBufferCapacity`.; * In general, it's recommended to provide a few thousands samples, though this can vary a lot.; * It's recommended that total size of all samples be about ~x100 times the target size of dictionary.; * Note: ZDICT_trainFromBuffer_legacy() will send notifications into stderr if instructed to, using notificationLevel>0.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h:525,test,tested,525,builtins/zstd/zdict.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h,1,['test'],['tested']
Testability,"/*! ZDICT_trainFromBuffer_unsafe_legacy() :; * Warning : `samplesBuffer` must be followed by noisy guard band.; * @return : size of dictionary, or an error code which can be tested with ZDICT_isError(); */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/zdict.c:174,test,tested,174,builtins/zstd/dictBuilder/zdict.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/dictBuilder/zdict.c,1,['test'],['tested']
Testability,"/*! ZSTD_CCtxParams_getParameter() :; * Similar to ZSTD_CCtx_getParameter.; * Get the requested value of one compression parameter, selected by enum ZSTD_cParameter.; * @result : 0, or an error code (which can be tested with ZSTD_isError()).; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:213,test,tested,213,builtins/zstd/zstd.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h,1,['test'],['tested']
Testability,"/*! ZSTD_CCtxParams_setParameter() :; * Similar to ZSTD_CCtx_setParameter.; * Set one compression parameter, selected by enum ZSTD_cParameter.; * Parameters must be applied to a ZSTD_CCtx using; * ZSTD_CCtx_setParametersUsingCCtxParams().; * @result : a code representing success or failure (which can be tested with; * ZSTD_isError()).; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:305,test,tested,305,builtins/zstd/zstd.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h,1,['test'],['tested']
Testability,"/*! ZSTD_CCtx_getParameter() :; * Get the requested compression parameter value, selected by enum ZSTD_cParameter,; * and store it into int* value.; * @return : 0, or an error code (which can be tested with ZSTD_isError()).; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:195,test,tested,195,builtins/zstd/zstd.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h,1,['test'],['tested']
Testability,"/*! ZSTD_CCtx_refCDict() :; * Reference a prepared dictionary, to be used for all next compressed frames.; * Note that compression parameters are enforced from within CDict,; * and supersede any compression parameter previously set within CCtx.; * The parameters ignored are labled as ""superseded-by-cdict"" in the ZSTD_cParameter enum docs.; * The ignored parameters will be used again if the CCtx is returned to no-dictionary mode.; * The dictionary will remain valid for future compressed frames using same CCtx.; * @result : 0, or an error code (which can be tested with ZSTD_isError()).; * Special : Referencing a NULL CDict means ""return to no-dictionary mode"".; * Note 1 : Currently, only one dictionary can be managed.; * Referencing a new dictionary effectively ""discards"" any previous one.; * Note 2 : CDict is just referenced, its lifetime must outlive its usage within CCtx. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:562,test,tested,562,builtins/zstd/zstd.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h,1,['test'],['tested']
Testability,"/*! ZSTD_CCtx_refPrefix() :; * Reference a prefix (single-usage dictionary) for next compressed frame.; * A prefix is **only used once**. Tables are discarded at end of frame (ZSTD_e_end).; * Decompression will need same prefix to properly regenerate data.; * Compressing with a prefix is similar in outcome as performing a diff and compressing it,; * but performs much faster, especially during decompression (compression speed is tunable with compression level).; * @result : 0, or an error code (which can be tested with ZSTD_isError()).; * Special: Adding any prefix (including NULL) invalidates any previous prefix or dictionary; * Note 1 : Prefix buffer is referenced. It **must** outlive compression.; * Its content must remain unmodified during compression.; * Note 2 : If the intention is to diff some large src data blob with some prior version of itself,; * ensure that the window size is large enough to contain the entire source.; * See ZSTD_c_windowLog.; * Note 3 : Referencing a prefix involves building tables, which are dependent on compression parameters.; * It's a CPU consuming operation, with non-negligible impact on latency.; * If there is a need to use the same prefix multiple times, consider loadDictionary instead.; * Note 4 : By default, the prefix is interpreted as raw content (ZSTD_dct_rawContent).; * Use experimental ZSTD_CCtx_refPrefix_advanced() to alter dictionary interpretation. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:512,test,tested,512,builtins/zstd/zstd.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h,1,['test'],['tested']
Testability,"/*! ZSTD_CCtx_reset() :; * There are 2 different things that can be reset, independently or jointly :; * - The session : will stop compressing current frame, and make CCtx ready to start a new one.; * Useful after an error, or to interrupt any ongoing compression.; * Any internal data not yet flushed is cancelled.; * Compression parameters and dictionary remain unchanged.; * They will be used to compress next frame.; * Resetting session never fails.; * - The parameters : changes all parameters back to ""default"".; * This removes any reference to any dictionary too.; * Parameters can only be changed between 2 sessions (i.e. no compression is currently ongoing); * otherwise the reset fails, and function returns an error value (which can be tested using ZSTD_isError()); * - Both : similar to resetting the session, followed by resetting parameters.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:747,test,tested,747,builtins/zstd/zstd.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h,1,['test'],['tested']
Testability,"/*! ZSTD_CCtx_setParameter() :; * Set one compression parameter, selected by enum ZSTD_cParameter.; * All parameters have valid bounds. Bounds can be queried using ZSTD_cParam_getBounds().; * Providing a value beyond bound will either clamp it, or trigger an error (depending on parameter).; * Setting a parameter is generally only possible during frame initialization (before starting compression).; * Exception : when using multi-threading mode (nbWorkers >= 1),; * the following parameters can be updated _during_ compression (within same frame):; * => compressionLevel, hashLog, chainLog, searchLog, minMatch, targetLength and strategy.; * new parameters will be active for next job only (after a flush()).; * @return : an error code (which can be tested using ZSTD_isError()).; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:752,test,tested,752,builtins/zstd/zstd.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h,1,['test'],['tested']
Testability,"/*! ZSTD_CCtx_setPledgedSrcSize() :; * Total input data size to be compressed as a single frame.; * Value will be written in frame header, unless if explicitly forbidden using ZSTD_c_contentSizeFlag.; * This value will also be controlled at end of frame, and trigger an error if not respected.; * @result : 0, or an error code (which can be tested with ZSTD_isError()).; * Note 1 : pledgedSrcSize==0 actually means zero, aka an empty frame.; * In order to mean ""unknown content size"", pass constant ZSTD_CONTENTSIZE_UNKNOWN.; * ZSTD_CONTENTSIZE_UNKNOWN is default value for any new frame.; * Note 2 : pledgedSrcSize is only valid once, for the next frame.; * It's discarded at the end of the frame, and replaced by ZSTD_CONTENTSIZE_UNKNOWN.; * Note 3 : Whenever all input data is provided and consumed in a single round,; * for example with ZSTD_compress2(),; * or invoking immediately ZSTD_compressStream2(,,,ZSTD_e_end),; * this value is automatically overridden by srcSize instead.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:341,test,tested,341,builtins/zstd/zstd.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h,1,['test'],['tested']
Testability,"/*! ZSTD_DCtx_getParameter() :; * Get the requested decompression parameter value, selected by enum ZSTD_dParameter,; * and store it into int* value.; * @return : 0, or an error code (which can be tested with ZSTD_isError()).; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:197,test,tested,197,builtins/zstd/zstd.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h,1,['test'],['tested']
Testability,"/*! ZSTD_DCtx_loadDictionary() :; * Create an internal DDict from dict buffer,; * to be used to decompress next frames.; * The dictionary remains valid for all future frames, until explicitly invalidated.; * @result : 0, or an error code (which can be tested with ZSTD_isError()).; * Special : Adding a NULL (or 0-size) dictionary invalidates any previous dictionary,; * meaning ""return to no-dictionary mode"".; * Note 1 : Loading a dictionary involves building tables,; * which has a non-negligible impact on CPU usage and latency.; * It's recommended to ""load once, use many times"", to amortize the cost; * Note 2 :`dict` content will be copied internally, so `dict` can be released after loading.; * Use ZSTD_DCtx_loadDictionary_byReference() to reference dictionary content instead.; * Note 3 : Use ZSTD_DCtx_loadDictionary_advanced() to take control of; * how dictionary content is loaded and interpreted.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:252,test,tested,252,builtins/zstd/zstd.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h,1,['test'],['tested']
Testability,"/*! ZSTD_DCtx_refDDict() :; * Reference a prepared dictionary, to be used to decompress next frames.; * The dictionary remains active for decompression of future frames using same DCtx.; * @result : 0, or an error code (which can be tested with ZSTD_isError()).; * Note 1 : Currently, only one dictionary can be managed.; * Referencing a new dictionary effectively ""discards"" any previous one.; * Special: referencing a NULL DDict means ""return to no-dictionary mode"".; * Note 2 : DDict is just referenced, its lifetime must outlive its usage from DCtx.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:233,test,tested,233,builtins/zstd/zstd.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h,1,['test'],['tested']
Testability,"/*! ZSTD_DCtx_refPrefix() :; * Reference a prefix (single-usage dictionary) to decompress next frame.; * This is the reverse operation of ZSTD_CCtx_refPrefix(),; * and must use the same prefix as the one used during compression.; * Prefix is **only used once**. Reference is discarded at end of frame.; * End of frame is reached when ZSTD_decompressStream() returns 0.; * @result : 0, or an error code (which can be tested with ZSTD_isError()).; * Note 1 : Adding any prefix (including NULL) invalidates any previously set prefix or dictionary; * Note 2 : Prefix buffer is referenced. It **must** outlive decompression.; * Prefix buffer must remain unmodified up to the end of frame,; * reached when ZSTD_decompressStream() returns 0.; * Note 3 : By default, the prefix is treated as raw content (ZSTD_dct_rawContent).; * Use ZSTD_CCtx_refPrefix_advanced() to alter dictMode (Experimental section); * Note 4 : Referencing a raw content prefix has almost no cpu nor memory cost.; * A full dictionary is more costly, as it requires building tables.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:416,test,tested,416,builtins/zstd/zstd.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h,1,['test'],['tested']
Testability,"/*! ZSTD_DCtx_reset() :; * Return a DCtx to clean state.; * Session and parameters can be reset jointly or separately.; * Parameters can only be reset when no active frame is being decompressed.; * @return : 0, or an error code, which can be tested with ZSTD_isError(); */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:242,test,tested,242,builtins/zstd/zstd.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h,1,['test'],['tested']
Testability,"/*! ZSTD_DCtx_setFormat() :; * Instruct the decoder context about what kind of data to decode next.; * This instruction is mandatory to decode data without a fully-formed header,; * such ZSTD_f_zstd1_magicless for example.; * @return : 0, or an error code (which can be tested using ZSTD_isError()). */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:270,test,tested,270,builtins/zstd/zstd.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h,1,['test'],['tested']
Testability,"/*! ZSTD_DCtx_setMaxWindowSize() :; * Refuses allocating internal buffers for frames requiring a window size larger than provided limit.; * This protects a decoder context from reserving too much memory for itself (potential attack scenario).; * This parameter is only useful in streaming mode, since no internal buffer is allocated in single-pass mode.; * By default, a decompression context accepts all window sizes <= (1 << ZSTD_WINDOWLOG_LIMIT_DEFAULT); * @return : 0, or an error code (which can be tested using ZSTD_isError()).; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:504,test,tested,504,builtins/zstd/zstd.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h,1,['test'],['tested']
Testability,"/*! ZSTD_DCtx_setParameter() :; * Set one compression parameter, selected by enum ZSTD_dParameter.; * All parameters have valid bounds. Bounds can be queried using ZSTD_dParam_getBounds().; * Providing a value beyond bound will either clamp it, or trigger an error (depending on parameter).; * Setting a parameter is only possible during frame initialization (before starting decompression).; * @return : 0, or an error code (which can be tested using ZSTD_isError()).; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:439,test,tested,439,builtins/zstd/zstd.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h,1,['test'],['tested']
Testability,"/*! ZSTD_cParam_getBounds() :; * All parameters must belong to an interval with lower and upper bounds,; * otherwise they will either trigger an error or be automatically clamped.; * @return : a structure, ZSTD_bounds, which contains; * - an error status field, which must be tested using ZSTD_isError(); * - lower and upper bounds, both inclusive; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:276,test,tested,276,builtins/zstd/zstd.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h,1,['test'],['tested']
Testability,"/*! ZSTD_compress2() :; * Behave the same as ZSTD_compressCCtx(), but compression parameters are set using the advanced API.; * ZSTD_compress2() always starts a new frame.; * Should cctx hold data from a previously unfinished frame, everything about it is forgotten.; * - Compression parameters are pushed into CCtx before starting compression, using ZSTD_CCtx_set*(); * - The function is always blocking, returns when compression is completed.; * Hint : compression runs faster if `dstCapacity` >= `ZSTD_compressBound(srcSize)`.; * @return : compressed size written into `dst` (<= `dstCapacity),; * or an error code if it fails (which can be tested using ZSTD_isError()).; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:643,test,tested,643,builtins/zstd/zstd.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h,1,['test'],['tested']
Testability,"/*! ZSTD_compressStream2() :; * Behaves about the same as ZSTD_compressStream, with additional control on end directive.; * - Compression parameters are pushed into CCtx before starting compression, using ZSTD_CCtx_set*(); * - Compression parameters cannot be changed once compression is started (save a list of exceptions in multi-threading mode); * - output->pos must be <= dstCapacity, input->pos must be <= srcSize; * - output->pos and input->pos will be updated. They are guaranteed to remain below their respective limit.; * - endOp must be a valid directive; * - When nbWorkers==0 (default), function is blocking : it completes its job before returning to caller.; * - When nbWorkers>=1, function is non-blocking : it copies a portion of input, distributes jobs to internal worker threads, flush to output whatever is available,; * and then immediately returns, just indicating that there is some data remaining to be flushed.; * The function nonetheless guarantees forward progress : it will return only after it reads or write at least 1+ byte.; * - Exception : if the first call requests a ZSTD_e_end directive and provides enough dstCapacity, the function delegates to ZSTD_compress2() which is always blocking.; * - @return provides a minimum amount of data remaining to be flushed from internal buffers; * or an error code, which can be tested using ZSTD_isError().; * if @return != 0, flush is not fully completed, there is still some data left within internal buffers.; * This is useful for ZSTD_e_flush, since in this case more flushes are necessary to empty all buffers.; * For ZSTD_e_end, @return == 0 when internal buffers are fully flushed and frame is completed.; * - after a ZSTD_e_end directive, if internal buffer is not fully flushed (@return != 0),; * only ZSTD_e_end or ZSTD_e_flush operations are allowed.; * Before starting a new compression job, or changing compression parameters,; * it is required to fully flush internal buffers.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:1350,test,tested,1350,builtins/zstd/zstd.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h,1,['test'],['tested']
Testability,"/*! ZSTD_dParam_getBounds() :; * All parameters must belong to an interval with lower and upper bounds,; * otherwise they will either trigger an error or be automatically clamped.; * @return : a structure, ZSTD_bounds, which contains; * - an error status field, which must be tested using ZSTD_isError(); * - both lower and upper bounds, inclusive; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:276,test,tested,276,builtins/zstd/zstd.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h,1,['test'],['tested']
Testability,"/*! ZSTD_decompress() :; * `compressedSize` : must be the _exact_ size of some number of compressed and/or skippable frames.; * `dstCapacity` is an upper bound of originalSize to regenerate.; * If user cannot imply a maximum upper bound, it's better to use streaming mode to decompress data.; * @return : the number of bytes decompressed into `dst` (<= `dstCapacity`),; * or an errorCode if it fails (which can be tested using ZSTD_isError()). */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:414,test,tested,414,builtins/zstd/zstd.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h,1,['test'],['tested']
Testability,"/*! ZSTD_getFrameHeader() :; * decode Frame Header, or requires larger `srcSize`.; * @return : 0, `zfhPtr` is correctly filled,; * >0, `srcSize` is too small, value is wanted `srcSize` amount,; * or an error code, which can be tested using ZSTD_isError() */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:227,test,tested,227,builtins/zstd/zstd.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h,1,['test'],['tested']
Testability,"/*! ZSTD_resetCStream() :; * This function is deprecated, and is equivalent to:; * ZSTD_CCtx_reset(zcs, ZSTD_reset_session_only);; * ZSTD_CCtx_setPledgedSrcSize(zcs, pledgedSrcSize);; *; * start a new frame, using same parameters from previous frame.; * This is typically useful to skip dictionary loading stage, since it will re-use it in-place.; * Note that zcs must be init at least once before using ZSTD_resetCStream().; * If pledgedSrcSize is not known at reset time, use macro ZSTD_CONTENTSIZE_UNKNOWN.; * If pledgedSrcSize > 0, its value must be correct, as it will be written in header, and controlled at the end.; * For the time being, pledgedSrcSize==0 is interpreted as ""srcSize unknown"" for compatibility with older programs,; * but it will change to mean ""empty"" in future version, so use macro ZSTD_CONTENTSIZE_UNKNOWN instead.; * @return : 0, or an error code (which can be tested using ZSTD_isError()); * Note : this prototype will be marked as deprecated and generate compilation warnings on reaching v1.5.x; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:890,test,tested,890,builtins/zstd/zstd.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h,1,['test'],['tested']
Testability,/*! \brief start the training; *; * \param weights weight vector; * \param trainPattern training pattern; * \param testPattern test pattern; * \param minimizer use this minimizer for training (e.g. SGD); * \param settings settings used for this training run; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h:115,test,testPattern,115,tmva/tmva/inc/TMVA/NeuralNet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h,2,['test'],"['test', 'testPattern']"
Testability,"/*! \class TMVA::ClassificationResult; * Class to save the results of the classifier.; * Every machine learning method booked have an object for the results; * in the classification process, in this class is stored the mvas,; * data loader name and ml method name and title.; * You can to display the results calling the method Show, get the ROC-integral with the; * method GetROCIntegral or get the TMVA::ROCCurve object calling GetROC.; \ingroup TMVA; */; /*! \class TMVA::Classification; * Class to perform two class classification.; * The first step before any analysis is to prepare the data,; * to do that you need to create an object of TMVA::DataLoader,; * in this object you need to configure the variables and the number of events; * to train/test.; * The class TMVA::Experimental::Classification needs a TMVA::DataLoader object,; * optional a TFile object to save the results and some extra options in a string; * like ""V:Color:Transformations=I;D;P;U;G:Silent:DrawProgressBar:ModelPersistence:Jobs=2"" where:; * V = verbose output; * Color = coloured screen output; * Silent = batch mode: boolean silent flag inhibiting any output from TMVA; * Transformations = list of transformations to test.; * DrawProgressBar = draw progress bar to display training and testing.; * ModelPersistence = to save the trained model in xml or serialized files.; * Jobs = number of ml methods to test/train in parallel using MultiProc, requires to call Evaluate method.; * Basic example.; * \code; void classification(UInt_t jobs = 2); {; TMVA::Tools::Instance();. TFile *input(0);; TString fname = ""./tmva_class_example.root"";; if (!gSystem->AccessPathName(fname)) {; input = TFile::Open(fname); // check if file in local directory exists; } else {; TFile::SetCacheFileDir(""."");; input = TFile::Open(""http://root.cern/files/tmva_class_example.root"", ""CACHEREAD"");; }; if (!input) {; std::cout << ""ERROR: could not open data file"" << std::endl;; exit(1);; }. // Register the training and test trees. TTree *si",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Classification.h:753,test,test,753,tmva/tmva/inc/TMVA/Classification.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Classification.h,2,['test'],['test']
Testability,"/*! \class TMVA::IPruneTool; \ingroup TMVA; IPruneTool - a helper interface class to prune a decision tree. Any tool which implements the interface should provide two modes for tree pruning:. 1. automatically find the ""best"" prune strength by minimizing the error rate on a test sample; if SetAutomatic() is called, or if automatic = kTRUE argument is set in CalculatePruningInfo(); In this case, the PruningInfo object returned contains the error rate of the optimally pruned; tree, the optimal prune strength, and the sequence of nodes to prune to obtain the optimal; pruned tree from the original DecisionTree. 2. a user-provided pruning strength parameter is used to prune the tree, in which case the returned; PruningInfo object has QualityIndex = -1, PruneStrength = user prune strength, and PruneSequence; is the list of nodes to prune; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/IPruneTool.h:274,test,test,274,tmva/tmva/inc/TMVA/IPruneTool.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/IPruneTool.h,1,['test'],['test']
Testability,"/*! \namespace NumberCountingUtils; \brief RooStats standalone utilities. These are RooStats standalone utilities; that calculate the p-value or Z value (eg. significance in; 1-sided Gaussian standard deviations) for a number counting experiment.; This is a hypothesis test between background only and signal-plus-background.; The background estimate has uncertainty derived from an auxiliary or sideband; measurement. This is based on code and comments from Bob Cousins; and on the following papers:. - Evaluation of three methods for calculating statistical significance when incorporating a; systematic uncertainty into a test of the background-only hypothesis for a Poisson process<br>; Authors: Robert D. Cousins, James T. Linnemann, Jordan Tucker<br>; http://arxiv.org/abs/physics/0702156<br>; NIM A 595 (2008) 480--501<br>. - Statistical Challenges for Searches for New Physics at the LHC<br>; Authors: Kyle Cranmer<br>; http://arxiv.org/abs/physics/0511028. - Measures of Significance in HEP and Astrophysics<br>; Authors: J. T. Linnemann<br>; http://arxiv.org/abs/physics/0312059. The problem is treated in a fully frequentist fashion by; interpreting the relative background uncertainty as; being due to an auxiliary or sideband observation; that is also Poisson distributed with only background.; Finally, one considers the test as a ratio of Poisson means; where an interval is well known based on the conditioning on the total; number of events and the binomial distribution. In short, this is an exact frequentist solution to the problem of; a main measurement x distributed as a Poisson around s+b and a sideband or; auxiliary measurement y distributed as a Poisson around tau*b. Eg. \f[ L(x,y|s,b,\tau) = Pois(x|s+b) Pois(y|\tau b) \f]. ```; Naming conventions:; Exp = Expected; Obs = Observed; P = p-value; Z = Z-value or significance in sigma (one-sided convention); ```; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/NumberCountingUtils.h:269,test,test,269,roofit/roostats/inc/RooStats/NumberCountingUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/NumberCountingUtils.h,3,['test'],['test']
Testability,"/*!; * XXH32():; * Calculate the 32-bit hash of sequence ""length"" bytes stored at memory address ""input"".; * The memory between input & input+length must be valid (allocated and read-accessible).; * ""seed"" can be used to alter the result predictably.; * Speed on Core 2 Duo @ 3 GHz (single thread, SMHasher benchmark): 5.4 GB/s; *; * Note: XXH3 provides competitive speed for both 32-bit and 64-bit systems,; * and offers true 64/128 bit hash results. It provides a superior level of; * dispersion, and greatly reduces the risks of collisions.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h:307,benchmark,benchmark,307,builtins/xxhash/xxhash.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h,1,['benchmark'],['benchmark']
Testability,"/*!; * XXH64():; * Returns the 64-bit hash of sequence of length @length stored at memory; * address @input.; * @seed can be used to alter the result predictably.; *; * This function usually runs faster on 64-bit systems, but slower on 32-bit; * systems (see benchmark).; *; * Note: XXH3 provides competitive speed for both 32-bit and 64-bit systems,; * and offers true 64/128 bit hash results. It provides a superior level of; * dispersion, and greatly reduces the risks of collisions.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h:259,benchmark,benchmark,259,builtins/xxhash/xxhash.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h,1,['benchmark'],['benchmark']
Testability,"/*!; Tutorial :; ----------; (Note : these functions only decompress FSE-compressed blocks.; If block is uncompressed, use memcpy() instead; If block is a single repeated byte, use memset() instead ). The first step is to obtain the normalized frequencies of symbols.; This can be performed by FSE_readNCount() if it was saved using FSE_writeNCount().; 'normalizedCounter' must be already allocated, and have at least 'maxSymbolValuePtr[0]+1' cells of signed short.; In practice, that means it's necessary to know 'maxSymbolValue' beforehand,; or size the table to handle worst case situations (typically 256).; FSE_readNCount() will provide 'tableLog' and 'maxSymbolValue'.; The result of FSE_readNCount() is the number of bytes read from 'rBuffer'.; Note that 'rBufferSize' must be at least 4 bytes, even if useful information is less than that.; If there is an error, the function will return an error code, which can be tested using FSE_isError(). The next step is to build the decompression tables 'FSE_DTable' from 'normalizedCounter'.; This is performed by the function FSE_buildDTable().; The space required by 'FSE_DTable' must be already allocated using FSE_createDTable().; If there is an error, the function will return an error code, which can be tested using FSE_isError(). `FSE_DTable` can then be used to decompress `cSrc`, with FSE_decompress_usingDTable().; `cSrcSize` must be strictly correct, otherwise decompression will fail.; FSE_decompress_usingDTable() result will tell how many bytes were regenerated (<=`dstCapacity`).; If there is an error, the function will return an error code, which can be tested using FSE_isError(). (ex: dst buffer too small); */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:924,test,tested,924,builtins/zstd/common/fse.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h,3,['test'],['tested']
Testability,"/*!; Tutorial :; ----------; The first step is to count all symbols. FSE_count() does this job very fast.; Result will be saved into 'count', a table of unsigned int, which must be already allocated, and have 'maxSymbolValuePtr[0]+1' cells.; 'src' is a table of bytes of size 'srcSize'. All values within 'src' MUST be <= maxSymbolValuePtr[0]; maxSymbolValuePtr[0] will be updated, with its real value (necessarily <= original value); FSE_count() will return the number of occurrence of the most frequent symbol.; This can be used to know if there is a single symbol within 'src', and to quickly evaluate its compressibility.; If there is an error, the function will return an ErrorCode (which can be tested using FSE_isError()). The next step is to normalize the frequencies.; FSE_normalizeCount() will ensure that sum of frequencies is == 2 ^'tableLog'.; It also guarantees a minimum of 1 to any Symbol with frequency >= 1.; You can use 'tableLog'==0 to mean ""use default tableLog value"".; If you are unsure of which tableLog value to use, you can ask FSE_optimalTableLog(),; which will provide the optimal valid tableLog given sourceSize, maxSymbolValue, and a user-defined maximum (0 means ""default""). The result of FSE_normalizeCount() will be saved into a table,; called 'normalizedCounter', which is a table of signed short.; 'normalizedCounter' must be already allocated, and have at least 'maxSymbolValue+1' cells.; The return value is tableLog if everything proceeded as expected.; It is 0 if there is a single symbol within distribution.; If there is an error (ex: invalid tableLog value), the function will return an ErrorCode (which can be tested using FSE_isError()). 'normalizedCounter' can be saved in a compact manner to a memory area using FSE_writeNCount().; 'buffer' must be already allocated.; For guaranteed success, buffer size must be at least FSE_headerBound().; The result of the function is the number of bytes written into 'buffer'.; If there is an error, the function will",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:701,test,tested,701,builtins/zstd/common/fse.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h,1,['test'],['tested']
Testability,"/** ********************************************************************************************; \ingroup HistFactory. <p>; This is a package that creates a RooFit probability density function from ROOT histograms; of expected distributions and histograms that represent the +/- 1 sigma variations; from systematic effects. The resulting probability density function can then be used; with any of the statistical tools provided within RooStats, such as the profile; likelihood ratio, Feldman-Cousins, etc. In this version, the model is directly; fed to a likelihood ratio test, but it needs to be further factorized.</p>. <p>; The user needs to provide histograms (in picobarns per bin) and configure the job; with XML. The configuration XML is defined in the file `$ROOTSYS/config/HistFactorySchema.dtd`, but essentially; it is organized as follows (see the examples in `${ROOTSYS}/tutorials/histfactory/`)</p>. <ul>; <li> a top level 'Combination' that is composed of:</li>; <ul>; <li> several 'Channels' (eg. ee, emu, mumu), which are composed of:</li>; <ul>; <li> several 'Samples' (eg. signal, bkg1, bkg2, ...), each of which has:</li>; <ul>; <li> a name</li>; <li> if the sample is normalized by theory (eg N = L*sigma) or not (eg. data driven)</li>; <li> a nominal expectation histogram</li>; <li> a named 'Normalization Factor' (which can be fixed or allowed to float in a fit)</li>; <li> several 'Overall Systematics' in normalization with:</li>; <ul>; <li> a name</li>; <li> +/- 1 sigma variations (eg. 1.05 and 0.95 for a 5% uncertainty)</li>; </ul>; <li> several 'Histogram Systematics' in shape with:</li>; <ul>; <li> a name (which can be shared with the OverallSyst if correlated)</li>; <li> +/- 1 sigma variational histograms</li>; </ul>; </ul>; </ul>; <li> several 'Measurements' (corresponding to a full fit of the model) each of which specifies</li>; <ul>; <li> a name for this fit to be used in tables and files</li>; <li> what is the luminosity associated to the measurement in pi",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/MakeModelAndMeasurementsFast.cxx:573,test,test,573,roofit/histfactory/src/MakeModelAndMeasurementsFast.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/MakeModelAndMeasurementsFast.cxx,1,['test'],['test']
Testability,"/** @brief class representing a page pool; *; * @author Manuel Schiller <manuel.schiller@nikhef.nl>; * @date 2013-07-24; *; * pool of mmapped pages (on systems which support it, on all others, the; * functionality is emulated with dynamically allocated memory); *; * in most operating systems there is a limit to how many mappings any one; * process is allowed to request; for this reason, we mmap a relatively; * large amount up front, and then carve off little pieces as we need them; *; * Moreover, some systems have too large a physical page size in their MMU; * for the code to handle (we want offsets and lengths to fit into 16; * bits), so we carve such big physical pages into smaller logical Pages; * if needed. The largest logical page size is currently 16 KiB.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:693,log,logical,693,roofit/roofitcore/src/BidirMMapPipe.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx,2,['log'],['logical']
Testability,"/** @brief logical failure (e.g. I/O on closed BidirMMapPipe); *; * @returns true in case of grave logical error (I/O on closed pipe,...); */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:11,log,logical,11,roofit/roofitcore/src/BidirMMapPipe.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h,2,['log'],['logical']
Testability,"/** @fn RooAbsPdf::createNLL(); *; * @brief Construct representation of -log(L) of PDF with given dataset.; *; * If dataset is unbinned, an unbinned likelihood is constructed.; * If the dataset is binned, a binned likelihood is constructed.; *; * @param data Reference to a RooAbsData object representing the dataset.; * @param cmdArgs Variadic template arguments representing optional command arguments.; * You can pass either an arbitrary number of RooCmdArg instances; * or a single RooLinkedList that points to the RooCmdArg objects.; * @return An owning pointer to the created RooAbsReal NLL object.; *; * @tparam CmdArgs_t Template types for optional command arguments.; * Can either be an arbitrary number of RooCmdArg or a single RooLinkedList.; *; * \note This front-end function should not be re-implemented in derived PDF types.; * If you mean to customize the NLL creation routine,; * you need to override the virtual RooAbsPdf::createNLLImpl() method.; *; * The following named arguments are supported:; *; * <table>; * <tr><th> Type of CmdArg <th> Effect on NLL; * <tr><td> `ConditionalObservables(Args_t &&... argsOrArgSet)` <td> Do not normalize PDF over listed observables.; * Arguments can either be multiple RooRealVar or a single RooArgSet containing them.; * <tr><td> `Extended(bool flag)` <td> Add extended likelihood term, off by default.; * <tr><td> `Range(const char* name)` <td> Fit only data inside range with given name. Multiple comma-separated range names can be specified.; * In this case, the unnormalized PDF \f$f(x)\f$ is normalized by the integral over all ranges \f$r_i\f$:; * \f[; * p(x) = \frac{f(x)}{\sum_i \int_{r_i} f(x) dx}.; * \f]; * <tr><td> `Range(double lo, double hi)` <td> Fit only data inside given range. A range named ""fit"" is created on the fly on all observables.; * <tr><td> `SumCoefRange(const char* name)` <td> Set the range in which to interpret the coefficients of RooAddPdf components; * <tr><td> `NumCPU(int num, int istrat)` <td> Paralleliz",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:73,log,log,73,roofit/roofitcore/src/RooAbsPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx,1,['log'],['log']
Testability,/** @summary Change axis log scale kind */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:25,log,log,25,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['log'],['log']
Testability,"/** @summary Change log state of specified axis; * @param {number} value - 0 (linear), 1 (log) or 2 (log2) */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:20,log,log,20,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,4,['log'],['log']
Testability,/** @summary Check zooming value for log scale; * @private */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:37,log,log,37,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['log'],['log']
Testability,/** @summary Create log scale for axis bins; * @private */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:20,log,log,20,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['log'],['log']
Testability,/** @summary Default log x scale */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:21,log,log,21,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['log'],['log']
Testability,/** @summary Default log y scale */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:21,log,log,21,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['log'],['log']
Testability,/** @summary Default log z scale */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:21,log,log,21,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['log'],['log']
Testability,"/** @summary Draw object in specified HTML element with given draw options.; * @param {string|object} dom - id of div element to draw or directly DOMElement; * @param {object} obj - object to draw, object type should be registered before with {@link addDrawFunc}; * @param {string} opt - draw options separated by space, comma or semicolon; * @return {Promise} with painter object; * @public; * @desc An extensive list of support draw options can be found on [examples page]{@link https://root.cern/js/latest/examples.htm}; * @example; * import { openFile } from 'https://root.cern/js/latest/modules/io.mjs';; * import { draw } from 'https://root.cern/js/latest/modules/draw.mjs';; * let file = await openFile('https://root.cern/js/files/hsimple.root');; * let obj = await file.readObject('hpxpy;1');; * await draw('drawing', obj, 'colz;logx;gridx;gridy'); */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:837,log,logx,837,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['log'],['logx']
Testability,/** @summary LogNormal function; * @memberof Math */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:13,Log,LogNormal,13,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['Log'],['LogNormal']
Testability,/** @summary Performs generic I/O test for all branches in the TTree; * @desc Used when 'testio' draw option for TTree is specified; * @private */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:34,test,test,34,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,4,['test'],"['test', 'testio']"
Testability,/** @summary Provide label for log axis */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:31,log,log,31,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['log'],['log']
Testability,/** @summary Provide logical node for the id.; * @desc Either use existing one from the full model or create one based on specified item description */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/ui5/geom/model/GeomBrowserModel.js:21,log,logical,21,ui5/geom/model/GeomBrowserModel.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/ui5/geom/model/GeomBrowserModel.js,1,['log'],['logical']
Testability,"/** @summary Read any object from a root file; * @desc One could specify cycle number in the object name or as separate argument; * @param {string} obj_name - name of object, may include cycle number like 'hpxpy;1'; * @param {number} [cycle] - cycle number, also can be included in obj_name; * @return {Promise} promise with object read; * @example; * import { openFile } from 'https://root.cern/js/latest/modules/io.mjs';; * let f = await openFile('https://root.cern/js/files/hsimple.root');; * let obj = await f.readObject('hpxpy;1');; * console.log(`Read object of type ${obj._typename}`); */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:548,log,log,548,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['log'],['log']
Testability,/** @summary Should be called when depth test flag is changed */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:41,test,test,41,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['test'],['test']
Testability,"/** @summary Submit asynchronous http request; * @desc Following requests kind can be specified:; * - 'bin' - abstract binary data, result as string; * - 'buf' - abstract binary data, result as ArrayBuffer (default); * - 'text' - returns req.responseText; * - 'object' - returns parse(req.responseText); * - 'multi' - returns correctly parsed multi.json request; * - 'xml' - returns req.responseXML; * - 'head' - returns request itself, uses 'HEAD' request method; * - 'post' - creates post request, submits req.send(post_data); * - 'postbuf' - creates post request, expects binary data as response; * @param {string} url - URL for the request; * @param {string} kind - kind of requested data; * @param {string} [post_data] - data submitted with post kind of request; * @return {Promise} Promise for requested data, result type depends from the kind; * @example; * import { httpRequest } from 'https://root.cern/js/latest/modules/core.mjs';; * httpRequest('https://root.cern/js/files/thstack.json.gz', 'object'); * .then(obj => console.log(`Get object of type ${obj._typename}`)); * .catch(err => console.error(err.message)); */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:1036,log,log,1036,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['log'],['log']
Testability,/** @summary Test fGeoAtt bits; * @private */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:13,Test,Test,13,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['Test'],['Test']
Testability,/** @summary Toggle log scale on the specified axes */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:20,log,log,20,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['log'],['log']
Testability,/** @summary Toggle log state on the specified axis */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:20,log,log,20,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['log'],['log']
Testability,"/** @summary decodes URL options after '?' mark; * @desc Following options supported ?opt1&opt2=3; * @param {string} [url] URL string with options, document.URL will be used when not specified; * @return {Object} with ```.has(opt)``` and ```.get(opt,dflt)``` methods; * @example; * import { decodeUrl } from 'https://root.cern/js/latest/modules/core.mjs';; * let d = decodeUrl('any?opt1&op2=3');; * console.log(`Has opt1 ${d.has('opt1')}`); // true; * console.log(`Get opt1 ${d.get('opt1')}`); // ''; * console.log(`Get opt2 ${d.get('opt2')}`); // '3'; * console.log(`Get opt3 ${d.get('opt3','-')}`); // '-' */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:407,log,log,407,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,8,['log'],['log']
Testability,"/** @summary lgam function, logarithm from gamma; * @memberof Math */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:28,log,logarithm,28,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['log'],['logarithm']
Testability,/** @summary log normal pdf; * @memberof Math */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:13,log,log,13,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['log'],['log']
Testability,/** @summary reset all kind of advanced features like depth test */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:60,test,test,60,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['test'],['test']
Testability,/** @summary return pad log state x or y are allowed */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:24,log,log,24,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,4,['log'],['log']
Testability,"/** @summary set, test or reset timeout of specified name; * @desc Used to prevent overloading of websocket for specific function */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:18,test,test,18,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,4,['test'],['test']
Testability,/** @summary test camera position; * @desc function analyzes camera position and start redraw of geometry; * if objects in view may be changed */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:13,test,test,13,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['test'],['test']
Testability,/** @summary used by geometry viewer to show more nodes; * @desc These nodes excluded from selection logic and always inserted into the model; * Shape already should be created and assigned to the node */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:101,log,logic,101,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['log'],['logic']
Testability,/** Access to elements of device matrices provided through TCudaDeviceReference; * class. Note that access is synchronous end enforces device synchronization; * on all streams. Only used for testing. */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaMatrix.h:191,test,testing,191,tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaMatrix.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaMatrix.h,1,['test'],['testing']
Testability,/** Basic tests for histograms of integral precision using vector<atomic> storage.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/atomics.cxx:10,test,tests,10,hist/histv7/test/atomics.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/atomics.cxx,1,['test'],['tests']
Testability,"/** HUF_decompress() :; * Decompress HUF data from buffer 'cSrc', of size 'cSrcSize',; * into already allocated buffer 'dst', of minimum size 'dstSize'.; * `originalSize` : **must** be the ***exact*** size of original (uncompressed) data.; * Note : in contrast with FSE, HUF_decompress can regenerate; * RLE (cSrcSize==1) and uncompressed (cSrcSize==dstSize) data,; * because it knows size to regenerate (originalSize).; * @return : size of regenerated data (== originalSize),; * or an error code, which can be tested using HUF_isError(); */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h:511,test,tested,511,builtins/zstd/common/huf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/huf.h,1,['test'],['tested']
Testability,/** Increases the minimization step counter by the test error evaluation; * period and uses the current internal value of the test error to; * determine if the minimization has converged. */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h:51,test,test,51,tmva/tmva/inc/TMVA/DNN/DLMinimizers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h,4,['test'],['test']
Testability,/** Increases the minimization step counter by the test error evaluation; * period and uses the provided test error value to determine if the; * minimization has converged. */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h:51,test,test,51,tmva/tmva/inc/TMVA/DNN/DLMinimizers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h,4,['test'],['test']
Testability,/** Logical AND operator. */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang-c/Index.h:4,Log,Logical,4,interpreter/llvm-project/clang/include/clang-c/Index.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang-c/Index.h,1,['Log'],['Logical']
Testability,/** Logical OR operator. */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang-c/Index.h:4,Log,Logical,4,interpreter/llvm-project/clang/include/clang-c/Index.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang-c/Index.h,1,['Log'],['Logical']
Testability,/** Similar to testMinimization() as the function above except that; * it uses momentum for the training */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMinimization.h:15,test,testMinimization,15,tmva/tmva/test/DNN/TestMinimization.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMinimization.h,1,['test'],['testMinimization']
Testability,/** Test collected entries if it looks like integer values and one can use better binning */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/browsable/src/RFieldProvider.hxx:4,Test,Test,4,gui/browsable/src/RFieldProvider.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/browsable/src/RFieldProvider.hxx,1,['Test'],['Test']
Testability,"/** Test hadamard operation on; * architecture specific matrix and tensor types and compare with results; * obtained with TMatrixT.; */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmetic.h:4,Test,Test,4,tmva/tmva/test/DNN/TestMatrixArithmetic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmetic.h,1,['Test'],['Test']
Testability,/** Test if render data has vertex buffer. Make logging if not. Only for debug purposes */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/EveElements.js:4,Test,Test,4,ui5/eve7/lib/EveElements.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/EveElements.js,2,"['Test', 'log']","['Test', 'logging']"
Testability,"/** Test multiplication (standard, transpose ) operation on; * architecture specific matrix types and compare with results; * obtained with TMatrixT.; */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmetic.h:4,Test,Test,4,tmva/tmva/test/DNN/TestMatrixArithmetic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmetic.h,1,['Test'],['Test']
Testability,"/** Test that the data loader loads all data in the data set by summing; * up all elements batch wise and comparing to the result obtained by summing; * over the complete dataset.; */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestDataLoader.h:4,Test,Test,4,tmva/tmva/test/DNN/TestDataLoader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestDataLoader.h,2,['Test'],['Test']
Testability,"/** Test the addition of a constant to every element of; * the given matrix.; */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmetic.h:4,Test,Test,4,tmva/tmva/test/DNN/TestMatrixArithmetic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmetic.h,1,['Test'],['Test']
Testability,"/** Test the application of reciprocating every element of; * the given matrix.; */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmetic.h:4,Test,Test,4,tmva/tmva/test/DNN/TestMatrixArithmetic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmetic.h,1,['Test'],['Test']
Testability,"/** Test the application of squaring every element of; * the given matrix.; */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmetic.h:4,Test,Test,4,tmva/tmva/test/DNN/TestMatrixArithmetic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmetic.h,1,['Test'],['Test']
Testability,"/** Test the application of taking square root of every element of; * the given matrix.; */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmetic.h:4,Test,Test,4,tmva/tmva/test/DNN/TestMatrixArithmetic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmetic.h,1,['Test'],['Test']
Testability,"/** Test the data loader by loading identical input and output data, running it; * through an identity neural network and computing the mean squared error,; * should obviously be zero. */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestDataLoader.h:4,Test,Test,4,tmva/tmva/test/DNN/TestDataLoader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestDataLoader.h,2,['Test'],['Test']
Testability,"/** Test the multiplication of a constant to every element of; * the given matrix.; */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmetic.h:4,Test,Test,4,tmva/tmva/test/DNN/TestMatrixArithmetic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmetic.h,1,['Test'],['Test']
Testability,"/** Test the summing over columns by summing by the sums obtained; * from a matrix filled with column indices as elements.; */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmetic.h:4,Test,Test,4,tmva/tmva/test/DNN/TestMatrixArithmetic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmetic.h,1,['Test'],['Test']
Testability,"/** Testing the entire pipeline of the Method DL, when only a Convolutional Net; * is constructed. */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestMethodDLCNN.h:4,Test,Testing,4,tmva/tmva/test/DNN/CNN/TestMethodDLCNN.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestMethodDLCNN.h,1,['Test'],['Testing']
Testability,"/** Testing the entire pipeline of the Method DL, when only a Multilayer Percepton; * is constructed with various optimizers. */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLOptimization.h:4,Test,Testing,4,tmva/tmva/test/DNN/TestMethodDLOptimization.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLOptimization.h,1,['Test'],['Testing']
Testability,"/** Testing the entire pipeline of the Method DL, when only a Multilayer Percepton; * is constructed. */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestRegressionMethodDL.cxx:4,Test,Testing,4,tmva/tmva/test/DNN/TestRegressionMethodDL.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestRegressionMethodDL.cxx,1,['Test'],['Testing']
Testability,"/** Testing the image to column function. Check wheether the matrix A after; * the transformation will be equal to the matrix B. */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNet.h:4,Test,Testing,4,tmva/tmva/test/DNN/CNN/TestConvNet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNet.h,1,['Test'],['Testing']
Testability,"/** Testing the rotation of the weights function. Check whether the rotated; * weight matrix A, will be equal to the matrix B. */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNet.h:4,Test,Testing,4,tmva/tmva/test/DNN/CNN/TestConvNet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNet.h,1,['Test'],['Testing']
Testability,"/** Train the given net using the given training input data (events), training; output data (labels), test input data (events), test output data (labels). */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Minimizers.h:102,test,test,102,tmva/tmva/inc/TMVA/DNN/Minimizers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Minimizers.h,2,['test'],['test']
Testability,"/** ZSTD_decodeFrameHeader() :; * `headerSize` must be the size provided by ZSTD_frameHeaderSize().; * @return : 0 if success, or an error code, which can be tested using ZSTD_isError() */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c:158,test,tested,158,builtins/zstd/decompress/zstd_decompress.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c,1,['test'],['tested']
Testability,"/** ZSTD_decompressContinue() :; * srcSize : must be the exact nb of bytes expected (see ZSTD_nextSrcSizeToDecompress()); * @return : nb of bytes generated into `dst` (necessarily <= `dstCapacity); * or an error code, which can be tested using ZSTD_isError() */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c:231,test,tested,231,builtins/zstd/decompress/zstd_decompress.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c,1,['test'],['tested']
Testability,/** ZSTD_dictAndWindowLog() :; * Returns an adjusted window log that is large enough to fit the source and the dictionary.; * The zstd format says that the entire dictionary is valid if one byte of the dictionary; * is within the window. So the hashLog and chainLog should be large enough to reference both; * the dictionary and the window. So we must use this adjusted dictAndWindowLog when downsizing; * the hashLog and windowLog.; * NOTE: srcSize must not be ZSTD_CONTENTSIZE_UNKNOWN.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c:60,log,log,60,builtins/zstd/compress/zstd_compress.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_compress.c,1,['log'],['log']
Testability,"/** ZSTD_frameHeaderSize_internal() :; * srcSize must be large enough to reach header size fields.; * note : only works for formats ZSTD_f_zstd1 and ZSTD_f_zstd1_magicless.; * @return : size of the Frame Header; * or an error code, which can be tested with ZSTD_isError() */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c:245,test,tested,245,builtins/zstd/decompress/zstd_decompress.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c,1,['test'],['tested']
Testability,"/** ZSTD_getFrameHeader() :; * decode Frame Header, or require larger `srcSize`.; * note : this function does not consume input, it only reads it.; * @return : 0, `zfhPtr` is correctly filled,; * >0, `srcSize` is too small, value is wanted `srcSize` amount,; * or an error code, which can be tested using ZSTD_isError() */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c:292,test,tested,292,builtins/zstd/decompress/zstd_decompress.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c,1,['test'],['tested']
Testability,"/** ZSTD_getFrameHeader_advanced() :; * decode Frame Header, or require larger `srcSize`.; * note : only works for formats ZSTD_f_zstd1 and ZSTD_f_zstd1_magicless; * @return : 0, `zfhPtr` is correctly filled,; * >0, `srcSize` is too small, value is wanted `srcSize` amount,; * or an error code, which can be tested using ZSTD_isError() */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c:308,test,tested,308,builtins/zstd/decompress/zstd_decompress.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_decompress.c,1,['test'],['tested']
Testability,/** \brief action to be done after the computation of a test sample (e.g. update some monitoring output); *; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/NeuralNet.cxx:56,test,test,56,tmva/tmva/src/NeuralNet.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/NeuralNet.cxx,1,['test'],['test']
Testability,/** \brief action to be done when the test cycle is started (e.g. update some monitoring output); *; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/NeuralNet.cxx:38,test,test,38,tmva/tmva/src/NeuralNet.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/NeuralNet.cxx,1,['test'],['test']
Testability,"/** \class CombinedCalculator; \ingroup Roostats. CombinedCalculator is an interface class for a tools which can produce both RooStats; HypoTestResults and ConfIntervals. The interface currently assumes that any such; calculator can be configured by specifying:. - a model common model (eg. a family of specific models which includes both the null and alternate),; - a data set,; - a set of parameters of which specify the null (including values and const/non-const status),; - a set of parameters of which specify the alternate (including values and const/non-const status),; - a set of parameters of nuisance parameters (including values and const/non-const status). The interface allows one to pass the model, data, and parameters via a workspace; and then specify them with names. The interface also allows one to pass the model,; data, and parameters without a workspace (which is created internally). After configuring the calculator, one only needs to ask GetHypoTest() (which will; return a HypoTestResult pointer) or GetInterval() (which will return an ConfInterval pointer). The concrete implementations of this interface should deal with the details of how; the nuisance parameters are dealt with (eg. integration vs. profiling) and which test-statistic is used (perhaps this should be added to the interface). The motivation for this interface is that we hope to be able to specify the problem; in a common way for several concrete calculators. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/CombinedCalculator.h:1250,test,test-statistic,1250,roofit/roostats/inc/RooStats/CombinedCalculator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/CombinedCalculator.h,1,['test'],['test-statistic']
Testability,"/** \class DebuggingSampler; \ingroup Roostats. DebuggingSampler is a simple implementation of the DistributionCreator interface used for debugging.; The sampling distribution is uniformly random between [0,1] and is INDEPENDENT of the data. So it is not useful; for true statistical tests, but it is useful for debugging. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/DebuggingSampler.h:284,test,tests,284,roofit/roostats/inc/RooStats/DebuggingSampler.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/DebuggingSampler.h,1,['test'],['tests']
Testability,"/** \class DebuggingTestStat; \ingroup Roostats. DebuggingTestStat is a simple implementation of the DistributionCreator interface used for debugging.; The sampling distribution is uniformly random between [0,1] and is INDEPENDENT of the data. So it is not useful; for true statistical tests, but it is useful for debugging. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/DebuggingTestStat.h:286,test,tests,286,roofit/roostats/inc/RooStats/DebuggingTestStat.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/DebuggingTestStat.h,1,['test'],['tests']
Testability,"/** \class HypoTestCalculator; \ingroup Roostats. HypoTestCalculator is an interface class for a tools which produce RooStats; HypoTestResults. The interface currently assumes that any hypothesis test; calculator can be configured by specifying:. - a model for the null,; - a model for the alternate,; - a data set,; - a set of parameters of which specify the null (including values and const/non-const status), and; - a set of parameters of which specify the alternate (including values and const/non-const status). The interface allows one to pass the model, data, and parameters via a workspace; and then specify them with names. The interface will be extended so that one does; not need to use a workspace. After configuring the calculator, one only needs to ask GetHypoTest, which will; return a HypoTestResult pointer. The concrete implementations of this interface should deal with the details of; how the nuisance parameters are dealt with (eg. integration vs. profiling) and; which test-statistic is used (perhaps this should be added to the interface). The motivation for this interface is that we hope to be able to specify the; problem in a common way for several concrete calculators. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestCalculator.h:196,test,test,196,roofit/roostats/inc/RooStats/HypoTestCalculator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestCalculator.h,2,['test'],"['test', 'test-statistic']"
Testability,"/** \class IntervalCalculator; \ingroup Roostats. IntervalCalculator is an interface class for a tools which produce RooStats; ConfIntervals. The interface currently assumes that any interval calculator can; be configured by specifying:. - a model,; - a data set,; - a set of parameters of interest,; - a set of nuisance parameters (eg. parameters on which the model depends, but are not of interest), and; - a confidence level or size of the test (eg. rate of Type I error). The interface allows one to pass the model, data, and parameters via a workspace; and then specify them with names. The interface will be extended so that one does; not need to use a workspace. After configuring the calculator, one only needs to ask GetInterval, which will; return a ConfInterval pointer. The concrete implementations of this interface should deal with the details of; how the nuisance parameters are dealt with (eg. integration vs. profiling) and; which test-statistic is used (perhaps this should be added to the interface). The motivation for this interface is that we hope to be able to specify the; problem in a common way for several concrete calculators. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/IntervalCalculator.h:443,test,test,443,roofit/roostats/inc/RooStats/IntervalCalculator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/IntervalCalculator.h,2,['test'],"['test', 'test-statistic']"
Testability,"/** \class LikelihoodSerial; * \brief Serial likelihood calculation strategy implementation; *; * This class serves as a baseline reference implementation of the LikelihoodWrapper. It reimplements the previous; * RooNLLVar ""BulkPartition"" single CPU strategy in the new RooFit::TestStatistics framework.; *; * \note The class is not intended for use by end-users. We recommend to either use RooMinimizer with a RooAbsL derived; * likelihood object, or to use a higher level entry point like RooAbsPdf::fitTo() or RooAbsPdf::createNLL().; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/TestStatistics/LikelihoodSerial.cxx:278,Test,TestStatistics,278,roofit/roofitcore/src/TestStatistics/LikelihoodSerial.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/TestStatistics/LikelihoodSerial.cxx,1,['Test'],['TestStatistics']
Testability,/** \class MaxLikelihoodEstimateTestStat; \ingroup Roostats; MaxLikelihoodEstimateTestStat: TestStatistic that returns maximum likelihood; estimate of a specified parameter.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MaxLikelihoodEstimateTestStat.h:92,Test,TestStatistic,92,roofit/roostats/inc/RooStats/MaxLikelihoodEstimateTestStat.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MaxLikelihoodEstimateTestStat.h,1,['Test'],['TestStatistic']
Testability,"/** \class Messenger; *; * \brief Manages ZeroMQ sockets and wraps send and receive calls; *; * This class is used for all interprocess communication between the master,; * queue and worker processes. It sets up ZeroMQ sockets between all processes; * over IPC socket files stored in /tmp on the filesystem.; *; * Several sockets are used for communication between different places for; * different purposes:; * - Master and queue processes each have a PUSH-PULL socket pair to directly; * send/receive data between only the master and queue processes. This is; * currently used mainly for sending tasks to the queue from master. The; * socket from queue back to master is used only to test connections and may; * be removed in the future.; * - The queue process also has a PUSH-PULL socket pair with each worker; * process. These are used by the workers to obtain tasks from the queue.; * - The master has a PUB socket that the workers subscribe to with SUB; * sockets. These are used to update state. Note that to ensure robust; * reception of all messages on the SUB socket, it's important to send over; * state in as little messages as possible. For instance, it's best to send; * arrays over in a single big message instead of sending over each element; * separately. This also improves performance, since each message has some; * fixed overhead.; * - Each worker has a PUSH socket connected to a PULL socket on master that; * is used to send back task results from workers to master in; * 'JobManager::retrieve()'.; *; * @param process_manager ProcessManager instance which manages the master,; * queue and worker processes that we want to set up; * communication for in this Messenger.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/src/Messenger.cxx:686,test,test,686,roofit/multiprocess/src/Messenger.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/src/Messenger.cxx,1,['test'],['test']
Testability,/** \class MinNLLTestStat; \ingroup Roostats. MinNLLTestStat is an implementation of the TestStatistic interface that; calculates the minimum value of the negative log likelihood; function and returns it as a test statistic.; Internally it operates by delegating to a MinNLLTestStat object. */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MinNLLTestStat.h:89,Test,TestStatistic,89,roofit/roostats/inc/RooStats/MinNLLTestStat.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MinNLLTestStat.h,3,"['Test', 'log', 'test']","['TestStatistic', 'log', 'test']"
Testability,"/** \class ProcessTimer; *; * \brief Can be used to generate timings of multiple processes simultaneously and output logs; *; * This static class records timings of multiple processes simultaneously and allows for these; * timings to be written out in json format, one file for each process. Multiple overlapping; * sections can be timed independently on the same process. It also allows for the timings; * to be written out to json logfiles in a specified interval, for example every half hour.; *; * Note that this class logs timings in milliseconds.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/src/ProcessTimer.cxx:117,log,logs,117,roofit/multiprocess/src/ProcessTimer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/src/ProcessTimer.cxx,3,['log'],"['logfiles', 'logs']"
Testability,"/** \class RAttrAxis; \ingroup GpadROOT7; \author Sergey Linev <s.linev@gsi.de>; \date 2020-02-20; \brief All supported axes attributes for: line, ticks, labels, title, min/max, log, reverse, ...; \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback is welcome!; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpadv7/inc/ROOT/RAttrAxis.hxx:178,log,log,178,graf2d/gpadv7/inc/ROOT/RAttrAxis.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpadv7/inc/ROOT/RAttrAxis.hxx,1,['log'],['log']
Testability,"/** \class RooSpline; \ingroup Roofit; \brief A RooFit class for creating spline functions. This class provides the functionality to create spline functions in RooFit,; , using ROOT TSpline. It supports splines of order 3 or 5. It also support; interpolation in the log-space (x or y), for example; exp(spline({x0}, {log y0})), useful when you have something (as xsections); that is more similar to exponentials than polynomials. Usage example:; ~~~ {.cpp}; RooRealVar x{""x"", ""x"", 0, 5};. std::vector<double> x0{1., 2, 3};; std::vector<double> y0{10., 20, 50};. RooSpline spline{""myspline"", ""my spline"", x, x0, y0};. auto frame = x.frame();; spline.plotOn(frame);; frame->Draw();; ~~~; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooSpline.cxx:266,log,log-space,266,roofit/roofit/src/RooSpline.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooSpline.cxx,2,['log'],"['log', 'log-space']"
Testability,"/** \class RooStats::FeldmanCousins; \ingroup Roostats. The FeldmanCousins class (like the Feldman-Cousins technique) is essentially a; specific configuration of the more general NeymanConstruction. It is a concrete; implementation of the IntervalCalculator interface that, which uses the; NeymanConstruction in a particular way. As the name suggests, it returns a; ConfidenceInterval. In particular, it produces a RooStats::PointSetInterval,; which is a concrete implementation of the ConfInterval interface. The Neyman Construction is not a uniquely defined statistical technique, it; requires that one specify an ordering rule or ordering principle, which is; usually encoded by choosing a specific test statistic and limits of integration; (corresponding to upper/lower/central limits). As a result, this class must be; configured with the corresponding information before it can produce an interval. In the case of the Feldman-Cousins approach, the ordering principle is the; likelihood ratio -- motivated by the Neyman-Pearson lemma. When nuisance; parameters are involved, the profile likelihood ratio is the natural; generalization. One may either choose to perform the construction over the full; space of the nuisance parameters, or restrict the nuisance parameters to their; conditional MLE (eg. profiled values). */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FeldmanCousins.cxx:702,test,test,702,roofit/roostats/src/FeldmanCousins.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FeldmanCousins.cxx,1,['test'],['test']
Testability,/** \class RooStats::FrequentistCalculator; \ingroup Roostats. Does a frequentist hypothesis test. Hypothesis Test Calculator using a full frequentist procedure for sampling the; test statistic distribution.; The nuisance parameters are fixed to their MLEs.; The use of ToyMCSampler as the TestStatSampler is assumed. */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FrequentistCalculator.cxx:93,test,test,93,roofit/roostats/src/FrequentistCalculator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FrequentistCalculator.cxx,4,"['Test', 'test']","['Test', 'TestStatSampler', 'test']"
Testability,"/** \class RooStats::TestStatSampler; \ingroup Roostats. TestStatSampler is an interface class for a tools which produce RooStats; SamplingDistributions. Tools that implement this interface are expected to be; used for coverage studies, the Neyman Construction, etc. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/TestStatSampler.h:21,Test,TestStatSampler,21,roofit/roostats/inc/RooStats/TestStatSampler.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/TestStatSampler.h,2,['Test'],['TestStatSampler']
Testability,/** \class RooStats::TestStatistic; \ingroup Roostats. TestStatistic is an interface class to provide a facility for construction test statistics; distributions to the NeymanConstruction class. All the actual samplers inherit from this class.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/TestStatistic.h:21,Test,TestStatistic,21,roofit/roostats/inc/RooStats/TestStatistic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/TestStatistic.h,3,"['Test', 'test']","['TestStatistic', 'test']"
Testability,"/** \class RooSumL; * \ingroup Roofitcore; *; * \brief Likelihood class that sums over multiple -log components; *; * The likelihood is often a product of components, for instance when fitting simultaneous pdfs, but also when using; * subsidiary pdfs. Hence, the negative log likelihood that we, in fact, calculate is often a sum over these components.; * This sum is implemented by this class.; **/; /// \param[in] pdf Raw pointer to the pdf; will not be cloned in this object.; /// \param[in] data Raw pointer to the dataset; will not be cloned in this object.; /// \param[in] components The component likelihoods.; /// \param extended Set extended term calculation on, off or use Extended::Auto to determine automatically based on the; /// pdf whether to activate or not. \warning components must be passed with std::move, otherwise it cannot be moved into; /// the RooSumL because of the unique_ptr! \note The number of events in RooSumL is that of the full dataset. Components; /// will have their own number of events that may be more relevant.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/TestStatistics/RooSumL.cxx:97,log,log,97,roofit/roofitcore/src/TestStatistics/RooSumL.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/TestStatistics/RooSumL.cxx,2,['log'],['log']
Testability,"/** \class TBenchmark; \ingroup Base. This class is a ROOT utility to help benchmarking applications; */; ////////////////////////////////////////////////////////////////////////////////; /// Benchmark default constructor",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx:75,benchmark,benchmarking,75,core/base/src/TBenchmark.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx,2,"['Benchmark', 'benchmark']","['Benchmark', 'benchmarking']"
Testability,"/** \class TBuffer3D; \ingroup Base. Generic 3D primitive description class.; See TBuffer3DTypes for producer classes. ### Filling TBuffer3D and Adding to Viewer. The viewers behind the TVirtualViewer3D interface differ greatly in their; capabilities e.g. - Some know how to draw certain shapes natively (e.g. spheres/tubes in OpenGL); - others always require a raw tessellation description of points/lines/segments.; - Some need the 3D object positions in the global frame, others can cope with; local frames + a translation matrix - which can give considerable performance; benefits. To cope with these situations the object buffer is filled out in negotiation; with the viewer. TBuffer3D classes are conceptually divided into enumerated; sections Core, BoundingBox, Raw etc (see TBuffer3D.h for more details). \image html base_tbuffer3d.png. The `SectionsValid() / SetSectionsValid / ClearSectionsValid()` methods of; TBuffer3D are used to test/set/clear these section valid flags. The sections found in TBuffer3D (`Core/BoundingBox/Raw Sizes/Raw`) are sufficient; to describe any tessellated shape in a generic fashion. An additional; `ShapeSpecific` section in derived shape specific classes allows a more abstract; shape description (""a sphere of inner radius x, outer radius y""). This; enables a viewer which knows how to draw (tessellate) the shape itself to do so,; which can bring considerable performance and quality benefits, while providing a; generic fallback suitable for all viewers. The rules for client negotiation with the viewer are:. - If suitable specialized TBuffer3D class exists, use it, otherwise use TBuffer3D.; - Complete the mandatory Core section.; - Complete the ShapeSpecific section if applicable.; - Complete the BoundingBox if you can.; - Pass this buffer to the viewer using one of the AddObject() methods - see below. If the viewer requires more sections to be completed (Raw/RawSizes) AddObject(); will return flags indicating which ones, otherwise it returns kNo",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx:943,test,test,943,core/base/src/TBuffer3D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx,1,['test'],['test']
Testability,"/** \class TDSet; \ingroup proofkernel. This class implements a data set to be used for PROOF processing.; The TDSet defines the class of which objects will be processed,; the directory in the file where the objects of that type can be; found and the list of files to be processed. The files can be; specified as logical file names (LFN's) or as physical file names; (PFN's). In case of LFN's the resolution to PFN's will be done; according to the currently active GRID interface.; Examples:; TDSet treeset(""TTree"", ""AOD"");; treeset.Add(""lfn:/alien.cern.ch/alice/prod2002/file1"");; ...; treeset.AddFriend(friendset);. or. TDSet objset(""MyEvent"", ""*"", ""/events"");; objset.Add(""root://cms.cern.ch/user/prod2002/hprod_1.root"");; ...; objset.Add(set2003);. Validity of file names will only be checked at processing time; (typically on the PROOF master server), not at creation time. */; ////////////////////////////////////////////////////////////////////////////////; /// Default ctor.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TDSet.cxx:313,log,logical,313,proof/proof/src/TDSet.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TDSet.cxx,1,['log'],['logical']
Testability,"/** \class TExec; \ingroup Base. TExec is a utility class that can be used to execute a C++ command; when some event happens in a pad.; The command in turn can invoke a C++ macro to paint graphics objects; at positions depending on the histogram or graph contents. ### Case 1:. The TExec object is in the list of pad primitives (after exec.Draw()).; When the pad is drawn, the TExec::Paint function is called. This function; will execute the specified command.; The following example uses the services of the class Aclock created; in `$ROOTSYS/test/Aclock.cxx`.; This examples uses a TTimer to redraw a pad at regular intervals (clock).; When the clock is updated, a string with the current date&time is drawn.; ~~~ {.cpp}; {; gSystem->Load(""$ROOTSYS/test/Aclock"");; Aclock ck(400);; gPad->SetFillColor(5);; TDatime dt;; TText t(.5,.3,""t"");; t.SetTextAlign(22);; t.SetTextSize(.07);; t.SetTextColor(4);; t.Draw();; TExec ex(""ex"",""dt.Set();t.SetTitle(dt.AsString())"");; ex.Draw();; }; ~~~. ### Case 2:. The TExec object may be added to the list of functions of a TH1 or TGraph; object via hist->GetListOfFunctions()->Add(exec).; When the histogram (or graph) is drawn, the TExec will be executed.; If the histogram is made persistent on a file, the TExec object; is also saved with the histogram. When redrawing the histogram in a; new session, the TExec will be executed. Example:. Assume an histogram TH1F *h already filled.; ~~~ {.cpp}; TExec *ex1 = new TExec(""ex1"",""DoSomething()"");; TExec *ex2 = new TExec(""ex2"","".x macro.C"");; h->GetListOfFunctions()->Add(ex1);; h->GetListOfFunctions()->Add(ex2);; h->Draw();; ~~~. When the Paint function for the histogram will be called, the ""DoSomething""; function will be called (interpreted or compiled) and also the macro.C. ### Case 3:. A TExec object is automatically generated when invoking TPad::AddExec.; Each pad contains a TList of TExecs (0, 1 or more). When a mouse event; (motion, click, etc) happens, the pad object executes sequentially; this l",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TExec.cxx:544,test,test,544,core/base/src/TExec.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TExec.cxx,2,['test'],['test']
Testability,"/** \class TGLBoundingBox; \ingroup opengl; Concrete class describing an orientated (free) or axis aligned box; of 8 vertices. Supports methods for setting aligned or orientated; boxes, find volume, axes, extents, centers, face planes etc.; Also tests for overlap testing of planes and other bounding boxes,; with fast sphere approximation.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLBoundingBox.cxx:246,test,tests,246,graf3d/gl/src/TGLBoundingBox.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLBoundingBox.cxx,2,['test'],"['testing', 'tests']"
Testability,"/** \class TGLCamera; \ingroup opengl; Abstract base camera class - concrete classes for orthographic and; perspective cameras derive from it. This class maintains values for; the current:; 1. Viewport; 2. Projection, modelview and clip matrices - extracted from GL; 3. The 6 frustum planes; 4. Expanded frustum interest box. It provides methods for various projection, overlap and intersection; tests for viewport and world locations, against the true frustum and; expanded interest box, and for extracting eye position and direction. It also defines the pure virtual manipulation interface methods the; concrete ortho and perspective classes must implement.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLCamera.cxx:396,test,tests,396,graf3d/gl/src/TGLCamera.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLCamera.cxx,1,['test'],['tests']
Testability,"/** \class TGLHistPainter; \ingroup opengl; The histogram painter class using OpenGL. Histograms are, by default, drawn via the `THistPainter` class.; `TGLHistPainter` allows to paint them using the OpenGL 3D graphics; library. The plotting options provided by `TGLHistPainter` start with; `GL` keyword. ### General information: plot types and supported options. The following types of plots are provided:. #### Lego - (`TGLLegoPainter`); The supported options are:. - `""GLLEGO"" :` Draw a lego plot.; - `""GLLEGO2"" :` Bins with color levels.; - `""GLLEGO3"" :` Cylindrical bars. Lego painter in cartesian supports logarithmic scales for X, Y, Z.; In polar only Z axis can be logarithmic, in cylindrical only Y (if you see; what it means). #### Surfaces (`TF2` and `TH2` with `""GLSURF""` options) - (`TGLSurfacePainter`); The supported options are:. - `""GLSURF"" :` Draw a surface.; - `""GLSURF1"" :` Surface with color levels; - `""GLSURF2"" :` The same as `""GLSURF1""` but without polygon outlines.; - `""GLSURF3"" :` Color level projection on top of plot (works only in cartesian coordinate system).; - `""GLSURF4"" :` Same as `""GLSURF""` but without polygon outlines. The surface painting in cartesian coordinates supports logarithmic scales along X, Y, Z axis.; In polar coordinates only the Z axis can be logarithmic, in cylindrical coordinates only the Y axis. #### Additional options to `SURF` and `LEGO` - Coordinate systems:; The supported options are:. - `"" "" :` Default, cartesian coordinates system.; - `""POL"" :` Polar coordinates system.; - `""CYL"" :` Cylindrical coordinates system.; - `""SPH"" :` Spherical coordinates system. #### `TH3` as boxes (spheres) - (`TGLBoxPainter`); The supported options are:. - `""GLBOX"" :` TH3 as a set of boxes, size of box is proportional to bin content.; - `""GLBOX1"":` the same as ""glbox"", but spheres are drawn instead of boxes. #### `TH3` as iso-surface(s) - (`TGLIsoPainter`); The supported option is:. - `""GLISO"" :` TH3 is drawn using iso-surfaces. #### `TH3` as colo",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLHistPainter.cxx:611,log,logarithmic,611,graf3d/gl/src/TGLHistPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLHistPainter.cxx,2,['log'],['logarithmic']
Testability,"/** \class TGLLogicalShape; \ingroup opengl; Abstract logical shape - a GL 'drawable' - base for all shapes -; faceset sphere etc. Logical shapes are a unique piece of geometry,; described in it's local frame - e.g if we have three spheres in :. - Sphere A - Radius r1, center v1; - Sphere B - Radius r2, center v2; - Sphere C - Radius r1, center v3. Spheres A and C can share a common logical sphere of radius r1 - and; place them with two physicals with translations of v1 & v2. Sphere B; requires a different logical (radius r2), placed with physical with; translation v2. Physical shapes know about and can share logicals. Logicals do not; about (aside from reference counting) physicals or share them. This sharing of logical shapes greatly reduces memory consumption and; scene (re)build times in typical detector geometries which have many; repeated objects placements. TGLLogicalShapes have reference counting, performed by the client; physical shapes which are using it. Display list information is also stored here, possibly per LOD; level. Most classes do not support LOD (only sphere and tube) and; therefore reasonable defaults are encoded in the following virtual; functions:; ~~~ {.cpp}; * ELODAxes SupportedLODAxes() { return kLODAxesNone; }; * Int_t DLCacheSize() { return 1; }; * UInt_t DLOffset(lod); // Transform lod into DL offset.; * Short_t QuantizeShapeLOD(); // Quantize lod.; ~~~; Classes that have per-LOD display-lists than override these functions.; 'UShort_t fDLValid' is used as a bit-field determining validity of; each quantized LOD-level; hopefully one will not have more than 16; LOD levels per class.; See also: TGLPhysicalShape::CalculateShapeLOD() where LOD is calculated. See base/src/TVirtualViewer3D for description of common external 3D; viewer architecture and how external viewer clients use it.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLLogicalShape.cxx:54,log,logical,54,graf3d/gl/src/TGLLogicalShape.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLLogicalShape.cxx,7,"['Log', 'log']","['Logical', 'Logicals', 'logical', 'logicals']"
Testability,"/** \class TGLManip; \ingroup opengl; Abstract base class for viewer manipulators, which allow direct in; viewer manipulation of a (TGlPhysicalShape) object - currently; translation, scaling and rotation along/round objects local axes.; See derived classes for these implementations. This class provides binding to the zero or one manipulated physical,; hit testing (selection) for manipulator sub component (widget), and; some common mouse action handling/tracking.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLManip.cxx:358,test,testing,358,graf3d/gl/src/TGLManip.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLManip.cxx,1,['test'],['testing']
Testability,"/** \class TGLPhysicalShape; \ingroup opengl; Concrete physical shape - a GL drawable. Physical shapes are the; objects the user can actually see, select, move in the viewer. It is; a placement of the associated local frame TGLLogicaShape into the; world frame. The draw process is:. Load attributes - material colors etc; Load translation matrix - placement; Load gl name (for selection); Call our associated logical shape Draw() to draw placed shape. The physical shape supports translation, scaling and rotation,; selection, color changes, and permitted modification flags etc.; A physical shape cannot modify or be bound to another (or no); logical shape - hence const & handle. It can perform mutable; reference counting on the logical to enable purging. Physical shape also maintains a list of references to it and; provides notifications of change and destruction.; See class TGLPShapeRef which needs to be sub-classes for real use. See base/src/TVirtualViewer3D for description of common external 3D; viewer architecture and how external viewer clients use it.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLPhysicalShape.cxx:410,log,logical,410,graf3d/gl/src/TGLPhysicalShape.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLPhysicalShape.cxx,3,['log'],['logical']
Testability,"/** \class TGLPlotCoordinates; \ingroup opengl; Helper class for plot-painters holding information about axis; ranges, numbers of bins and flags if certain axis is logarithmic.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLPlotPainter.cxx:164,log,logarithmic,164,graf3d/gl/src/TGLPlotPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLPlotPainter.cxx,1,['log'],['logarithmic']
Testability,"/** \class TGLRnrCtx; \ingroup opengl; The TGLRnrCtx class aggregates data for a given redering context as; needed by various parts of the ROOT's OpenGL infrastructure. It; serves as a connecting point between the steering part of the; infrastructure (viewer, scene) and concrete rendering classes; (logical, physical shape). It is just a data-holder, there is no; functionality in it. Development notes:. One RnrCtx is created by each viewer and it is just an extension of; the viewer context that changes along the render; descend. Separating this also has some abstract benefit of hiding; viewer implementation from those that do not need to know it. Current scene / scene-info part is always initialized by viewer,; scenes can assume they're ok.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLRnrCtx.cxx:300,log,logical,300,graf3d/gl/src/TGLRnrCtx.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLRnrCtx.cxx,1,['log'],['logical']
Testability,"/** \class TGLScene; \ingroup opengl; TGLScene provides management and rendering of ROOT's default 3D; /object representation as logical and physical shapes. A GL scene is the container for all the viewable objects (shapes); loaded into the viewer. It consists of two main stl::maps containing; the TGLLogicalShape and TGLPhysicalShape collections, and interface; functions enabling viewers to manage objects in these. The physical; shapes defined the placement of copies of the logical shapes - see; TGLLogicalShape/TGLPhysicalShape for more information on relationship. The scene can be drawn by owning viewer, passing camera, draw style; & quality (LOD), clipping etc - see Draw(). The scene can also be; drawn for selection in similar fashion - see Select(). The scene; keeps track of a single selected physical - which can be modified by; viewers. The scene maintains a lazy calculated bounding box for the total; scene extents, axis aligned round TGLPhysicalShape shapes. Currently a scene is owned exclusively by one viewer - however it is; intended that it could easily be shared by multiple viewers - for; efficiency and synchronisation reasons. Hence viewer variant objects; camera, clips etc being owned by viewer and passed at draw/select; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScene.cxx:129,log,logical,129,graf3d/gl/src/TGLScene.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScene.cxx,2,['log'],['logical']
Testability,"/** \class TGaxis; \ingroup BasicGraphics. The axis painter class. Instances of this class are generated by the histograms and graphs painting; classes when `TAxis` are drawn. `TGaxis` is the ""painter class"" of; `TAxis`. Therefore it is mainly used via `TAxis`, even if is some; occasion it can be used directly to draw an axis which is not part of a graph; or an instance. For instance to draw an extra scale on a plot. - [Basic definition](\ref GA00); - [Definition with a function](\ref GA01); - [Logarithmic axis](\ref GA02); - [Blank axis](\ref GA03); - [Arrow on axis](\ref GA03a); - [Tick marks' orientation](\ref GA04); - [Tick marks' size](\ref GA05); - [Labels' positioning](\ref GA06); - [Labels' orientation](\ref GA07); - [Labels' position on tick marks](\ref GA08); - [Labels' format](\ref GA09); - [Alphanumeric labels](\ref GA10); - [Changing axis labels](\ref GA10a); - [Number of divisions optimisation](\ref GA11); - [Maximum Number of Digits for the axis labels](\ref GA12); - [Optional grid](\ref GA13); - [Time axis](\ref GA14). \anchor GA00; ## Basic definition; A `TGaxis` is defined the following way:; ~~~ {.cpp}; TGaxis::TGaxis(Double_t xmin, Double_t ymin, Double_t xmax, Double_t ymax,; Double_t wmin, Double_t wmax, Int_t ndiv, Option_t *chopt,; Double_t gridlength); ~~~; Where:. - xmin : X origin coordinate in user's coordinates space.; - xmax : X end axis coordinate in user's coordinates space.; - ymin : Y origin coordinate in user's coordinates space.; - ymax : Y end axis coordinate in user's coordinates space.; - wmin : Lowest value for the tick mark labels written on the axis.; - wmax : Highest value for the tick mark labels written on the axis.; - ndiv : Number of divisions.; - ndiv=N1 + 100*N2 + 10000*N3; - N1=number of 1st divisions.; - N2=number of 2nd divisions.; - N3=number of 3rd divisions. e.g.:; - ndiv=0 --> no tick marks.; - ndiv=2 --> 2 divisions, one tick mark in the middle of the axis.; - chopt : Drawing options (see below).; - gridlength:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/graf/src/TGaxis.cxx:500,Log,Logarithmic,500,graf2d/graf/src/TGaxis.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/graf/src/TGaxis.cxx,1,['Log'],['Logarithmic']
Testability,"/** \class TGeoExtension; \ingroup Geometry_classes. ABC for user objects attached to TGeoVolume or TGeoNode.; Provides interface for getting a reference (grab) and; releasing the extension object (release), allowing for; derived classes to implement reference counted sharing.; The user who should attach extensions to logical volumes; or nodes BEFORE applying misalignment information so that; these will be available to all copies.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoExtension.cxx:320,log,logical,320,geom/geom/src/TGeoExtension.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoExtension.cxx,1,['log'],['logical']
Testability,"/** \class TGeoRCPtr; \ingroup Geometry_classes. A reference counting-managed pointer for classes derived from TGeoExtension; which can be used as C pointer. Based on CodeProject implementation example. ### Example:. ~~~ {.cpp}; class MyExtension : public TGeoExtension {; public:; MyExtension() : TGeoExtension(), fRC(0) {printf(""Created MyExtension\n"");}; virtual ~MyExtension() {printf(""Deleted MyExtension\n"");}. virtual TGeoExtension *Grab() const {fRC++; return (TGeoExtension*)this;}; virtual void Release() const {assert(fRC > 0); fRC--; if (fRC ==0) delete this;}; void print() const {printf(""MyExtension object %p\n"", this);}; private:; mutable Int_t fRC; // Reference counter; ClassDefOverride(MyExtension,1); };; ~~~. ### Usage:. ~~~ {.cpp}; // Module 1 creates an object; TGeoRCPtr<MyExtension> a2 = new MyExtension(); //fRC=1. // Module 2 grabs object; TGeoRCPtr<MyExtension> ptr2 = a2; //fRC=2. // Module 2 invokes a method; ptr2->Print();; (*ptr2).Print();. // Module 1 no longer needs object; a2 = 0; //RC=1. // Module 2 no longer needs object; ptr2 = 0; //object will be destroyed here; ~~~. ### Note:. Event if one forgets to call ptr2 = 0, the object gets delete when the method; using ptr2 gets out of scope.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/inc/TGeoRCPtr.h:522,assert,assert,522,geom/geom/inc/TGeoRCPtr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/inc/TGeoRCPtr.h,1,['assert'],['assert']
Testability,"/** \class THtml; \brief Legacy ROOT documentation system. \deprecated; We keep THtml for those who still need it for legacy use cases.; ROOT has since several years moved to [doxygen](https://www.doxygen.nl) as documentation generator.; THtml is not developed nor supported anymore; please migrate to [doxygen](https://www.doxygen.nl) instead. <p>The THtml class is designed to easily document; classes, code, and code related text files (like change logs). It generates HTML; pages conforming to the XHTML 1.0 transitional specifications; an example of; these pages is ROOT's own <a href=""http://root.cern.ch/root/html/ClassIndex.html"">; reference guide</a>. This page was verified to be valid XHTML 1.0 transitional,; which proves that all pages generated by THtml can be valid, as long as the user; provided XHTML (documentation, header, etc) is valid. You can check the current; THtml by clicking this icon:; <a href=""http://validator.w3.org/check?uri=referer""><img; src=""http://www.w3.org/Icons/valid-xhtml10""; alt=""Valid XHTML 1.0 Transitional"" height=""31"" width=""88"" style=""border: none;""/></a></p>; Overview:; <ol style=""list-style-type: upper-roman;"">; <li><a href=""#usage"">Usage</a></li>; <li><a href=""#conf"">Configuration</a>; <ol><li><a href=""#conf:input"">Input files</a></li>; <li><a href=""#conf:output"">Output directory</a></li>; <li><a href=""#conf:liblink"">Linking other documentation</a></li>; <li><a href=""#conf:classdoc"">Recognizing class documentation</a></li>; <li><a href=""#conf:tags"">Author, copyright, etc.</a></li>; <li><a href=""#conf:header"">Header and footer</a></li>; <li><a href=""#conf:search"">Links to searches, home page, ViewVC</a></li>; <li><a href=""#conf:charset"">HTML Charset</a></li>; </ol></li>; <li><a href=""#syntax"">Documentation syntax</a>; <ol><li><a href=""#syntax:classdesc"">Class description</a></li>; <li><a href=""#syntax:classidx"">Class index</a></li>; <li><a href=""#syntax:meth"">Method documentation</a></li>; <li><a href=""#syntax:datamem"">Data member doc",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/html/src/THtml.cxx:452,log,logs,452,html/src/THtml.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/html/src/THtml.cxx,1,['log'],['logs']
Testability,/** \class TObjectRefSpy; \class TObjectSpy; \ingroup Base. Monitors objects for deletion and reflects the deletion by reverting; the internal pointer to zero. When this pointer is zero we know the; object has been deleted. This avoids the unsafe TestBit(kNotDeleted); hack. The spied object must have the kMustCleanup bit set otherwise; you will get an error.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/gui/src/TObjectSpy.cxx:247,Test,TestBit,247,core/gui/src/TObjectSpy.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/gui/src/TObjectSpy.cxx,1,['Test'],['TestBit']
Testability,"/** \class TParallelCoordVar. TParallelCoord axes. Class containing a variable for the TParallelCoord. Options can be defined each axis separately using the right mouse click. These; options can be applied to every axes using the editor. - Axis width: If set to 0, the axis is simply a line. If higher, a color; histogram is drawn on the axis.; - Axis histogram height: If not 0, a usual bar histogram is drawn on the plot. The order in which the variables are drawn is essential to see the clusters. The; axes can be dragged to change their position. A zoom is also available. The; logarithm scale is also available by right clicking on the axis.; */; ////////////////////////////////////////////////////////////////////////////////; /// Default constructor.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeviewer/src/TParallelCoordVar.cxx:583,log,logarithm,583,tree/treeviewer/src/TParallelCoordVar.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeviewer/src/TParallelCoordVar.cxx,1,['log'],['logarithm']
Testability,"/** \class TPolyLine3D; \ingroup g3d; A 3-dimensional polyline. It has 4 different constructors. First one, without any parameters TPolyLine3D(), we call 'default; constructor' and it's used in a case that just an initialisation is; needed (i.e. pointer declaration). Example:. ~~~ {.cpp}; TPolyLine3D *pl1 = new TPolyLine3D;; ~~~. Second one is 'normal constructor' with, usually, one parameter; n (number of points), and it just allocates a space for the points. Example:. ~~~ {.cpp}; TPolyLine3D pl1(150);; ~~~. Third one allocates a space for the points, and also makes; initialisation from the given array. Example:. ~~~ {.cpp}; TPolyLine3D pl1(150, pointerToAnArray);; ~~~. Fourth one is, almost, similar to the constructor above, except; initialisation is provided with three independent arrays (array of; x coordinates, y coordinates and z coordinates). Example:. ~~~ {.cpp}; TPolyLine3D pl1(150, xArray, yArray, zArray);; ~~~. Example:. Begin_Macro(source); {; TCanvas *c1 = new TCanvas(""c1"",""c1"",500,500);; TView *view = TView::CreateView(1);; view->SetRange(0,0,0,2,2,2);; const Int_t n = 500;; auto r = new TRandom();; Double_t x, y, z;; TPolyLine3D *l = new TPolyLine3D(n);; for (Int_t i=0;i<n;i++) {; r->Sphere(x, y, z, 1);; l->SetPoint(i,x+1,y+1,z+1);; }; l->Draw();; }; End_Macro. TPolyLine3D is a basic graphics primitive which ignores the fact the current pad; has logarithmic scale(s). It simply draws the 3D line in the current user coordinates.; If logarithmic scale is set along one of the three axis, the logarithm of; vector coordinates along this axis should be use. Alternatively and higher level; class, knowing about logarithmic scales, might be used. For instance TGraph2D with; option `L`.; */; ////////////////////////////////////////////////////////////////////////////////; /// 3-D polyline default constructor.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/g3d/src/TPolyLine3D.cxx:1383,log,logarithmic,1383,graf3d/g3d/src/TPolyLine3D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/g3d/src/TPolyLine3D.cxx,4,['log'],"['logarithm', 'logarithmic']"
Testability,"/** \class TRootGuiBuilder; \ingroup guibuilder. ### %ROOT GUI Builder principles. With the GUI builder, we try to make the next step from WYSIWYG; to embedded editing concept - WYSIWYE (""what you see is what you edit"").; The ROOT GUI Builder allows modifying real GUI objects.; For example, one can edit the existing GUI application created by; $ROOTSYS/tutorials/gui/guitest.C.; GUI components can be added to a design area from a widget palette,; or can be borrowed from another application.; One can drag and and drop TCanvas's menu bar into the application.; GUI objects can be resized and dragged, copied and pasted.; ROOT GUI Builder allows changing the layout, snap to grid, change object's; layout order via the GUI Builder toolbar, or by options in the right-click; context menus.; A final design can be immediatly tested and used, or saved as a C++ macro.; For example, it's possible to rearrange buttons in control bar,; add separators etc. and continue to use a new fancy control bar in the; application. The following is a short description of the GUI Builder actions and key shortcuts:. - Press Ctrl-Double-Click to start/stop edit mode; - Press Double-Click to activate quick edit action (defined in root.mimes); - Warning: some shortcuts might not work if NumLock is enabled. ### Selection, grabbing, dropping. It is possible to select, drag any frame and drop it to any frame. - Click left mouse button or Ctrl-Click to select an object to edit.; - Press right mouse button to activate context menu; - Multiple selection (grabbing):; - draw lasso and press Return key; - press Shift key and draw lasso; - Dropping:; - select frame and press Ctrl-Return key; - Changing layout order:; - select frame and use arrow keys to change layout order; - Alignment:; - draw lasso and press arrow keys (or Shift-Arrow key) to align frames. ### Key shortcuts. - Return - grab selected frames; - Ctrl-Return - drop frames; - Del - delete selected frame; - Shift-Del - crop action; - Ctrl-X - cut a",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/guibuilder/src/TRootGuiBuilder.cxx:825,test,tested,825,gui/guibuilder/src/TRootGuiBuilder.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/guibuilder/src/TRootGuiBuilder.cxx,1,['test'],['tested']
Testability,/** \class TSessionLogView; \ingroup sessionviewer. Dialog used to display session logs from the session viewer. */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionLogView.cxx:83,log,logs,83,gui/sessionviewer/src/TSessionLogView.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionLogView.cxx,1,['log'],['logs']
Testability,"/** \class TSpider; Spider class. A spider view is a handy way to visualize a set of data stored in a TTree.; It draws as many polar axes as selected data members. For each of them, it draws; on the axis the position of the present event between the min and max of the; data member. Two modes are available:. - The spider view: With each points on the axes is drawn a polyline.; - The segment view: For each data member is drawn an arc segment with the; radius corresponding to the event. The spider plot is available from the treeviewer called by; ""atree->StartViewer()"", or simply by calling its constructor and defining the; variables to display. Begin_Macro(source); {; TCanvas *c1 = new TCanvas(""c1"",""TSpider example"",200,10,700,700);; TFile *f = new TFile(""$(ROOTSYS)/tutorials/hsimple.root"");; if (!f || f->IsZombie()) {; printf(""Please run <ROOT location>/tutorials/hsimple.C before."");; return;; }; TNtuple* ntuple = (TNtuple*)f->Get(""ntuple"");; TString varexp = ""px:py:pz:random:sin(px):log(px/py):log(pz)"";; TString selectStr = ""px>0 && py>0 && pz>0"";; TString options = ""average"";; TSpider *spider = new TSpider(ntuple,varexp.Data(),selectStr.Data(),options.Data());; spider->Draw();; c1->ToggleEditor();; c1->Selected(c1,spider,1);; return c1;; }; End_Macro; */; ////////////////////////////////////////////////////////////////////////////////; /// Default constructor.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeviewer/src/TSpider.cxx:997,log,log,997,tree/treeviewer/src/TSpider.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeviewer/src/TSpider.cxx,2,['log'],['log']
Testability,"/** \class TXTRU; \ingroup g3d; A poly-extrusion. \image html g3d_xtru.png. XTRU is a poly-extrusion with fixed outline shape in x-y,; a sequence of z extents (segments) and two end faces perpendicular; to the z axis. The x-y outline is defined by an ordered list of; points; the overall scale of the outline scales linearly between; z points and the center can have an x-y offset specified; at each segment end. A TXTRU has the following parameters:. - name: name of the shape; - title: shape's title; - material: (see TMaterial); - nxy: number of x-y vertex points constituting the outline --; this number should be at least 3; - nz: number of planes perpendicular to the z axis where; the scaling dimension of the section is given --; this number should be at least 2; - Xvtx: array [nxy] of X coordinates of vertices; - Yvtx: array [nxy] of Y coordinates of vertices; - z: array [nz] of z plane positions; - scale: array [nz] of scale factors; - x0: array [nz] of x offsets; - y0: array [nz] of y offsets. All XTRU shapes are correctly rendered in wire mode but can encounter; difficulty when rendered as a solid with hidden surfaces. These; exceptions occur if the outline shape is not a convex polygon.; Both the X3D and OpenGL renderers expect polygons to be convex.; The OpenGL spec specifies that points defining a polygon using the; GL_POLYGON primitive may be rendered as the convex hull of that set. Solid rendering under X3D can also give unexpected artifacts if; the combination of x-y-z offsets and scales for the segments are; chosen in such a manner that they represent a concave shape when; sliced along a plane parallel to the z axis. Choosing sets of point that represent a malformed polygon is; not supported, but testing for such a condition is not implemented; and thus it is left to the user to avoid this mistake. \image html g3d_polytype.png; */; ////////////////////////////////////////////////////////////////////////////////; /// TXTRU shape - default constructor",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/g3d/src/TXTRU.cxx:1735,test,testing,1735,graf3d/g3d/src/TXTRU.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/g3d/src/TXTRU.cxx,1,['test'],['testing']
Testability,"/*** \class TDLGradientDescent; *; * Generic implementation of gradient descent minimization for the; * deep learning neural nets.; *; * The TDLGradientDescent class implements an architecture, input data and; * deep learning neural network type independent implementation of the gradient; * descent minimization algorithm.; *; * This is provided by the Step(...), StepMomentum(...) and; * StepNesterov(...) functions that perform a single minimization step.; *; * The main training characteristics are defined by the provided learning rate,; * the test interval, and the convergence steps required for convergence. The; * test interval defines how often the error on the validation set is computed,; * and the values with which the step counter is increased each time the; * HasConverged() member function is called. A convergence step is defined as; * a step in which the test error is NOT less than 0.999 times the current; * minimal test error that has been reached. If between two subsequent calls; * to HasConverged(Double_t) the test error has not been sufficiently reduced; * it is assumed that a number of convergence steps equal to the test interval; * has been performed.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h:549,test,test,549,tmva/tmva/inc/TMVA/DNN/DLMinimizers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h,6,['test'],['test']
Testability,/**** REGRESSION TESTS ****/,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_ranges.cxx:17,TEST,TESTS,17,tree/dataframe/test/dataframe_ranges.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_ranges.cxx,1,['TEST'],['TESTS']
Testability,/****** END REGRESSION TESTS ******/,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_ranges.cxx:23,TEST,TESTS,23,tree/dataframe/test/dataframe_ranges.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_ranges.cxx,1,['TEST'],['TESTS']
Testability,/****** Run RDataFrame tests both with and without IMT enabled *******/,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_display.cxx:23,test,tests,23,tree/dataframe/test/dataframe_display.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_display.cxx,2,['test'],['tests']
Testability,/******** Multi-thread tests **********/,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_callbacks.cxx:23,test,tests,23,tree/dataframe/test/dataframe_callbacks.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_callbacks.cxx,1,['test'],['tests']
Testability,/********* MULTI THREAD TESTS ***********/,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_snapshot.cxx:24,TEST,TESTS,24,tree/dataframe/test/dataframe_snapshot.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_snapshot.cxx,1,['TEST'],['TESTS']
Testability,/********* SINGLE THREAD TESTS ***********/,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_snapshot.cxx:25,TEST,TESTS,25,tree/dataframe/test/dataframe_snapshot.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_snapshot.cxx,1,['TEST'],['TESTS']
Testability,/********* TESTS *********/,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_callbacks.cxx:11,TEST,TESTS,11,tree/dataframe/test/dataframe_callbacks.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_callbacks.cxx,1,['TEST'],['TESTS']
Testability,/************ These tests are run in single- and multi-thread mode (they use TEST_P instead of TEST) ************/,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_vary.cxx:20,test,tests,20,tree/dataframe/test/dataframe_vary.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_vary.cxx,2,"['TEST', 'test']","['TEST', 'tests']"
Testability,"/**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Im2Col method *; * *; * Authors (alphabetical): *; * Vladimir Ilievsky <ilievski.vladimir@live.com> - CERN, Switzerland *; * Manos Stergiadis <em.stergiadis@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the method Im2col //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestIm2Col.h:225,Test,Testing,225,tmva/tmva/test/DNN/CNN/TestIm2Col.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestIm2Col.h,2,['Test'],['Testing']
Testability,"/**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Im2Col method on the GPU *; * *; * Authors (alphabetical): *; * Manos Stergiadis <em.stergiadis@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Concrete instantiation of the generic Im2Col test for //; // CUDA architectures. //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestIm2ColCuda.cxx:225,Test,Testing,225,tmva/tmva/test/DNN/CNN/TestIm2ColCuda.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestIm2ColCuda.cxx,2,"['Test', 'test']","['Testing', 'test']"
Testability,"/**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing the Pooling layer in an architecture agnostic manner. *; * *; * Authors (alphabetical): *; * Manos Stergiadis <em.stergiadis@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the Max Pooling Layer //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestPoolingLayer.h:225,Test,Testing,225,tmva/tmva/test/DNN/CNN/TestPoolingLayer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestPoolingLayer.h,2,['Test'],['Testing']
Testability,"/**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Interval *; * *; * *; * Description: *; * Extension of the Interval to ""logarithmic"" intervals *; * *; * *; * *; * Authors (alphabetical): *; * Helge Voss <helge.voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LogInterval.h:264,log,logarithmic,264,tmva/tmva/inc/TMVA/LogInterval.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LogInterval.h,1,['log'],['logarithmic']
Testability,"/**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Interval *; * *; * *; * Description: *; * Extension of the Interval to ""logarithmic"" intervals *; * *; * *; * *; * Authors (alphabetical): *; * Helge Voss <helge.voss@cern.ch> - MPI-K Heidelberg, Germany *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::LogInterval; \ingroup TMVA. The TMVA::Interval Class. - LogInterval definition, continuous and discrete. - LogInterval(min,max) : a continous interval [min,max]; - LogInterval(min,max,n): a ""discrete interval"" [min,max], i.e the n numbers:. 1,10,100,1000. 1,2,4,8,16,32,64,128,512,1024. or alike .. ~~~ {.cpp}; Example:; LogInterval(1,10000,5); i=0 --> 1 note: StepSize(ibin=0) = not defined !!; i=1 --> 10 StepSize(ibin=1) = 9; i=2 --> 100 StepSize(ibin=2) = 99; i=3 --> 1000 StepSize(ibin=3) = 999; i=4 --> 10000 StepSize(ibin=4) = 9999. LogInterval(1,1000,11); i=0 --> 1; i=1 --> 1.99526; i=2 --> 3.98107; i=3 --> 7.94328; i=4 --> 15.8489; i=5 --> 31.6228; i=6 --> 63.0957; i=7 --> 125.893; i=8 --> 251.189; i=9 --> 501.187; i=10 --> 1000. LogInterval(1,1024,11); i=0 --> 1; i=1 --> 2; i=2 --> 4; i=3 --> 8; i=4 --> 16; i=5 --> 32; i=6 --> 64; i=7 --> 128; i=8 --> 256; i=9 --> 512; i=10 --> 1024; ~~~; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/LogInterval.cxx:264,log,logarithmic,264,tmva/tmva/src/LogInterval.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/LogInterval.cxx,8,"['Log', 'log']","['LogInterval', 'logarithmic']"
Testability,/*********************************************************************************/; /* The end !!!! 																 */; /*********************************************************************************/; /*********************************************************************************/; /* Test container : 																 */; /*********************************************************************************/,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/draw.c:295,Test,Test,295,graf2d/asimage/src/libAfterImage/draw.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/draw.c,1,['Test'],['Test']
Testability,"/*******************************************************************************; * Advanced dictionary and prefix API; *; * This API allows dictionaries to be used with ZSTD_compress2(),; * ZSTD_compressStream2(), and ZSTD_decompress(). Dictionaries are sticky, and; * only reset with the context is reset with ZSTD_reset_parameters or; * ZSTD_reset_session_and_parameters. Prefixes are single-use.; ******************************************************************************/; /*! ZSTD_CCtx_loadDictionary() :; * Create an internal CDict from `dict` buffer.; * Decompression will have to use same dictionary.; * @result : 0, or an error code (which can be tested with ZSTD_isError()).; * Special: Loading a NULL (or 0-size) dictionary invalidates previous dictionary,; * meaning ""return to no-dictionary mode"".; * Note 1 : Dictionary is sticky, it will be used for all future compressed frames.; * To return to ""no-dictionary"" situation, load a NULL dictionary (or reset parameters).; * Note 2 : Loading a dictionary involves building tables.; * It's also a CPU consuming operation, with non-negligible impact on latency.; * Tables are dependent on compression parameters, and for this reason,; * compression parameters can no longer be changed after loading a dictionary.; * Note 3 :`dict` content will be copied internally.; * Use experimental ZSTD_CCtx_loadDictionary_byReference() to reference content instead.; * In such a case, dictionary buffer must outlive its users.; * Note 4 : Use ZSTD_CCtx_loadDictionary_advanced(); * to precisely select how dictionary content must be interpreted. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:661,test,tested,661,builtins/zstd/zstd.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h,1,['test'],['tested']
Testability,/******************************************************************************/; /* Bitwidth testing. */; /******************************************************************************/,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/c-index-test/c-index-test.c:94,test,testing,94,interpreter/llvm-project/clang/tools/c-index-test/c-index-test.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/c-index-test/c-index-test.c,1,['test'],['testing']
Testability,/******************************************************************************/; /* Declaration attributes testing */; /******************************************************************************/,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/c-index-test/c-index-test.c:108,test,testing,108,interpreter/llvm-project/clang/tools/c-index-test/c-index-test.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/c-index-test/c-index-test.c,1,['test'],['testing']
Testability,/******************************************************************************/; /* Inclusion stack testing. */; /******************************************************************************/,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/c-index-test/c-index-test.c:101,test,testing,101,interpreter/llvm-project/clang/tools/c-index-test/c-index-test.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/c-index-test/c-index-test.c,1,['test'],['testing']
Testability,/******************************************************************************/; /* Linkage testing. */; /******************************************************************************/,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/c-index-test/c-index-test.c:93,test,testing,93,interpreter/llvm-project/clang/tools/c-index-test/c-index-test.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/c-index-test/c-index-test.c,1,['test'],['testing']
Testability,"/******************************************************************************/; /* Logic for testing clang code completion. */; /******************************************************************************/; /* Parse file:line:column from the input string. Returns 0 on success, non-zero; on failure. If successful, the pointer *filename will contain newly-allocated; memory (that will be owned by the caller) to store the file name. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/c-index-test/c-index-test.c:85,Log,Logic,85,interpreter/llvm-project/clang/tools/c-index-test/c-index-test.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/c-index-test/c-index-test.c,2,"['Log', 'test']","['Logic', 'testing']"
Testability,/******************************************************************************/; /* Logic for testing clang_getCursor(). */; /******************************************************************************/,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/c-index-test/c-index-test.c:85,Log,Logic,85,interpreter/llvm-project/clang/tools/c-index-test/c-index-test.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/c-index-test/c-index-test.c,2,"['Log', 'test']","['Logic', 'testing']"
Testability,/******************************************************************************/; /* Logic for testing traversal. */; /******************************************************************************/,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/c-index-test/c-index-test.c:85,Log,Logic,85,interpreter/llvm-project/clang/tools/c-index-test/c-index-test.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/c-index-test/c-index-test.c,2,"['Log', 'test']","['Logic', 'testing']"
Testability,/******************************************************************************/; /* Mangling testing. */; /******************************************************************************/,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/c-index-test/c-index-test.c:94,test,testing,94,interpreter/llvm-project/clang/tools/c-index-test/c-index-test.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/c-index-test/c-index-test.c,1,['test'],['testing']
Testability,/******************************************************************************/; /* Target information testing. */; /******************************************************************************/,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/c-index-test/c-index-test.c:104,test,testing,104,interpreter/llvm-project/clang/tools/c-index-test/c-index-test.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/c-index-test/c-index-test.c,1,['test'],['testing']
Testability,/******************************************************************************/; /* Type declaration testing */; /******************************************************************************/,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/c-index-test/c-index-test.c:102,test,testing,102,interpreter/llvm-project/clang/tools/c-index-test/c-index-test.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/c-index-test/c-index-test.c,1,['test'],['testing']
Testability,/******************************************************************************/; /* Typekind testing. */; /******************************************************************************/,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/c-index-test/c-index-test.c:94,test,testing,94,interpreter/llvm-project/clang/tools/c-index-test/c-index-test.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/c-index-test/c-index-test.c,1,['test'],['testing']
Testability,/******************************************************************************/; /* USR testing. */; /******************************************************************************/,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/c-index-test/c-index-test.c:89,test,testing,89,interpreter/llvm-project/clang/tools/c-index-test/c-index-test.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/c-index-test/c-index-test.c,1,['test'],['testing']
Testability,/******************************************************************************/; /* Visibility testing. */; /******************************************************************************/,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/c-index-test/c-index-test.c:96,test,testing,96,interpreter/llvm-project/clang/tools/c-index-test/c-index-test.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/c-index-test/c-index-test.c,1,['test'],['testing']
Testability,/******************************************************************************/; // Rendering of polymarkers and lines from logical-shapes.; /******************************************************************************/,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLUtil.cxx:125,log,logical-shapes,125,graf3d/gl/src/TGLUtil.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLUtil.cxx,1,['log'],['logical-shapes']
Testability,/******************************************************************************; * Debugging routine to print the hit ratio - number of times the hash table *; * was tested per operation. This routine was used to test the KeyItem routine *; ******************************************************************************/,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_hash.c:166,test,tested,166,graf2d/asimage/src/libAfterImage/libungif/gif_hash.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_hash.c,2,['test'],"['test', 'tested']"
Testability,"/******************************************************************************; * Routine to set current GIF version. All files open for write will be *; * using this version until next call to this routine. Version consists of *; * 3 characters as ""87a"" or ""89a"". No test is made to validate the version. *; ******************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/egif_lib.c:269,test,test,269,graf2d/asimage/src/libAfterImage/libungif/egif_lib.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/egif_lib.c,1,['test'],['test']
Testability,"/******************************************************************************; * Routine to test if given Key exists in HashTable and if so returns its code *; * Returns the Code if key was found, -1 if not.				 *; ******************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_hash.c:94,test,test,94,graf2d/asimage/src/libAfterImage/libungif/gif_hash.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_hash.c,1,['test'],['test']
Testability,/******************************************************************************; Display the Logo.; ******************************************************************************/,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/x3d/src/x3d.c:93,Log,Logo,93,graf3d/x3d/src/x3d.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/x3d/src/x3d.c,1,['Log'],['Logo']
Testability,"/*****************************************************************************; * ""Gif-Lib"" - Yet another gif library.				 *; *									 *; * Written by: Gershon Elber			IBM PC Ver 0.1,	Jun. 1989 *; ******************************************************************************; * Module to support the following operations:				 *; *									 *; * 1. InitHashTable - initialize hash table.				 *; * 2. ClearHashTable - clear the hash table to an empty state.		 *; * 2. InsertHashTable - insert one item into data structure.		 *; * 3. ExistsHashTable - test if item exists in data structure.		 *; *									 *; * This module is used to hash the GIF codes during encoding.		 *; ******************************************************************************; * History:								 *; * 14 Jun 89 - Version 1.0 by Gershon Elber.				 *; *****************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_hash.c:552,test,test,552,graf2d/asimage/src/libAfterImage/libungif/gif_hash.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libungif/gif_hash.c,1,['test'],['test']
Testability,"/*****************************************************************************; * Project: RooFit *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooProfileLL.cxx; \class RooProfileLL; \ingroup Roofitcore. Implements the profile likelihood estimator for; a given likelihood and set of parameters of interest. The value return by; RooProfileLL is the input likelihood nll minimized w.r.t all nuisance parameters; (which are all parameters except for those listed in the constructor) minus; the -log(L) of the best fit. Note that this function is slow to evaluate; as a MIGRAD minimization step is executed for each function evaluation; **/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooProfileLL.cxx:866,log,log,866,roofit/roofitcore/src/RooProfileLL.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooProfileLL.cxx,1,['log'],['log']
Testability,/*****************************************************************************; * Project: RooFit *; * @(#)root/roofit:$Id$ *; * *; * RooFit Lognormal PDF *; * *; * Author: Gregory Schott and Stefan Schmitz *; * *; *****************************************************************************/,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/inc/RooLognormal.h:141,Log,Lognormal,141,roofit/roofit/inc/RooLognormal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/inc/RooLognormal.h,1,['Log'],['Lognormal']
Testability,"/*****************************************************************************; * Project: RooFit *; * @(#)root/roofit:$Id$ *; * *; * RooFit Lognormal PDF *; * *; * Author: Gregory Schott and Stefan Schmitz *; * *; *****************************************************************************/; /** \class RooLognormal; \ingroup Roofit. RooFit Lognormal PDF. The two parameters are:; - `m0`: the median of the distribution; - `k = exp(sigma)`: sigma is called the shape parameter in the TMath parameterization. \f[; \mathrm{RooLognormal}(x \, | \, m_0, k) = \frac{1}{\sqrt{2\pi \cdot \ln(k) \cdot x}} \cdot \exp\left(; \frac{-\ln^2(\frac{x}{m_0})}{2 \ln^2(k)} \right) \f]. The parameterization here is physics driven and differs from the ROOT::Math::lognormal_pdf() in `x,m,s,x0` with:; - `m = log(m0)`; - `s = log(k)`; - `x0 = 0`; **/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooLognormal.cxx:141,Log,Lognormal,141,roofit/roofit/src/RooLognormal.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooLognormal.cxx,4,"['Log', 'log']","['Lognormal', 'log']"
Testability,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * AL, Alfio Lazzaro, INFN Milan, alfio.lazzaro@mi.infn.it *; * PB, Patrick Bos, Netherlands eScience Center, p.bos@esciencecenter.nl *; * *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; //////////////////////////////////////////////////////////////////////////////; //; // RooAbsMinimizerFcn is an interface class to the ROOT::Math function; // for minimization. It contains only the ""logistics"" of synchronizing; // between Minuit and RooFit. Its subclasses implement actual interfacing; // to Minuit by subclassing IMultiGenFunction or IMultiGradFunction.; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.cxx:788,log,logistics,788,roofit/roofitcore/src/RooAbsMinimizerFcn.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.cxx,1,['log'],['logistics']
Testability,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooAbsOptTestStatistic.cxx; \class RooAbsOptTestStatistic; \ingroup Roofitcore. Abstract base class for test; statistics objects that evaluate a function or PDF at each point of a given; dataset. This class provides generic optimizations, such as; caching and precalculation of constant terms that can be made for; all such quantities. Implementations should define evaluatePartition(), which calculates the; value of a (sub)range of the dataset and optionally combinedValue(),; which combines the values calculated for each partition. If combinedValue(); is not overloaded, the default implementation will add the partition results; to obtain the combined result. Support for calculation in partitions is needed to allow multi-core; parallelized calculation of test statistics.; **/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx:810,test,test,810,roofit/roofitcore/src/RooAbsOptTestStatistic.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx,2,['test'],['test']
Testability,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooAbsTestStatistic.cxx; \class RooAbsTestStatistic; \ingroup Roofitcore. Abstract base class for all test; statistics. Test statistics that evaluate the PDF at each data; point should inherit from the RooAbsOptTestStatistic class which; implements several generic optimizations that can be done for such; quantities. This test statistic base class organizes calculation of test; statistic values for RooSimultaneous PDF as a combination of test; statistic values for the PDF components of the simultaneous PDF and; organizes multi-processor parallel calculation of test statistic; values. For the latter, the test statistic value is calculated in; partitions in parallel executing processes and a posteriori; combined in the main thread.; **/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx:808,test,test,808,roofit/roofitcore/src/RooAbsTestStatistic.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx,7,"['Test', 'test']","['Test', 'test']"
Testability,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooConstraintSum.cxx; \class RooConstraintSum; \ingroup Roofitcore. Calculates the sum of the -(log) likelihoods of; a set of RooAbsPfs that represent constraint functions. This class; is used to calculate the composite -log(L) of constraints to be; added to the regular -log(L) in RooAbsPdf::fitTo() with Constrain(..); arguments.; **/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooConstraintSum.cxx:802,log,log,802,roofit/roofitcore/src/RooConstraintSum.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooConstraintSum.cxx,3,['log'],['log']
Testability,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooDLLSignificanceMCSModule.cxx; \class RooDLLSignificanceMCSModule; \ingroup Roofitcore. Add-on module to RooMCStudy that; calculates the significance of a signal by comparing the likelihood of; a fit fit with a given parameter floating with a fit with that given; parameter fixed to a nominal value (usually zero). The difference in; the -log(L) of those two fits can be interpreted as the probability; that a statistical background fluctation may result in a signal as large; or larger than the signal observed. This interpretation is contingent; on underlying normal sampling distributions and a MC study is a good way; to test that assumption.; **/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDLLSignificanceMCSModule.cxx:1047,log,log,1047,roofit/roofitcore/src/RooDLLSignificanceMCSModule.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDLLSignificanceMCSModule.cxx,2,"['log', 'test']","['log', 'test']"
Testability,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooNLLVar.cxx; \class RooNLLVar; \ingroup Roofitcore. Implements a -log(likelihood) calculation from a dataset; and a PDF. The NLL is calculated as; \f[; \sum_\mathrm{data} -\log( \mathrm{pdf}(x_\mathrm{data})); \f]; In extended mode, a; \f$ N_\mathrm{expect} - N_\mathrm{observed}*log(N_\mathrm{expect}) \f$ term is added.; **/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooNLLVar.cxx:774,log,log,774,roofit/roofitcore/src/RooNLLVar.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooNLLVar.cxx,3,['log'],['log']
Testability,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooRealIntegral.cxx; \class RooRealIntegral; \ingroup Roofitcore. Performs hybrid numerical/analytical integrals of RooAbsReal objects.; The class performs none of the actual integration, but only manages the logic; of what variables can be integrated analytically, accounts for eventual jacobian; terms and defines what numerical integrations needs to be done to complement the; analytical integral.; The actual analytical integrations (if any) are done in the PDF themselves, the numerical; integration is performed in the various implementations of the RooAbsIntegrator base class.; **/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooRealIntegral.cxx:915,log,logic,915,roofit/roofitcore/src/RooRealIntegral.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooRealIntegral.cxx,1,['log'],['logic']
Testability,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitModels *; * @(#)root/roofit:$Id: RooNonCentralChiSquare *; * Authors: *; * Kyle Cranmer; * *; *****************************************************************************/; /** \class RooNonCentralChiSquare; \ingroup Roofit. The PDF of the Non-Central Chi Square distribution for n degrees of freedom.; It is the asymptotic distribution of the profile likelihood ratio test q_mu; when a different mu' is true. It is Wald's generalization of Wilks' Theorem. See:. Asymptotic formulae for likelihood-based tests of new physics. By Glen Cowan, Kyle Cranmer, Eilam Gross, Ofer Vitells; http://arXiv.org/abs/arXiv:1007.1727. [Wikipedia](http://en.wikipedia.org/wiki/Noncentral_chi-square_distribution#Approximation). It requires MathMore to evaluate for non-integer degrees of freedom, k. When the Mathmore library is available we can use the MathMore libraries implemented using GSL.; It makes use of the modified Bessel function of the first kind (for k > 2). For k < 2 it uses; the hypergeometric function 0F1.; When is not available we use explicit summation of normal chi-squared distributions; The usage of the sum can be forced by calling SetForceSum(true);. This implementation could be improved. BOOST has a nice implementation:. http://live.boost.org/doc/libs/1_42_0/libs/math/doc/sf_and_dist/html/math_toolkit/dist/dist_ref/dists/nc_chi_squared_dist.html. http://wesnoth.repositoryhosting.com/trac/wesnoth_wesnoth/browser/trunk/include/boost/math/distributions/non_central_chi_squared.hpp?rev=6; **/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooNonCentralChiSquare.cxx:488,test,test,488,roofit/roofitmore/src/RooNonCentralChiSquare.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooNonCentralChiSquare.cxx,2,['test'],"['test', 'tests']"
Testability,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitModels *; * File: $Id: RooNDKeysPdf.cxx 31258 2009-11-17 22:41:06Z wouter $; * Authors: *; * Max Baak, CERN, mbaak@cern.ch *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /** \class RooNDKeysPdf; \ingroup Roofit. Generic N-dimensional implementation of a kernel estimation p.d.f. This p.d.f. models the distribution; of an arbitrary input dataset as a superposition of Gaussian kernels, one for each data point,; each contributing 1/N to the total integral of the p.d.f.; If the 'adaptive mode' is enabled, the width of the Gaussian is adaptively calculated from the; local density of events, i.e. narrow for regions with high event density to preserve details and; wide for regions with log event density to promote smoothness. The details of the general algorithm; are described in the following paper:; Cranmer KS, Kernel Estimation in High-Energy Physics.; Computer Physics Communications 136:198-207,2001 - e-Print Archive: hep ex/0011057; For multi-dimensional datasets, the kernels are modeled by multidimensional Gaussians. The kernels are; constructed such that they reflect the correlation coefficients between the observables; in the input dataset.; **/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooNDKeysPdf.cxx:1041,log,log,1041,roofit/roofit/src/RooNDKeysPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooNDKeysPdf.cxx,1,['log'],['log']
Testability,"/**************************************************************************/; // GLCtxIdentity; /**************************************************************************/; ////////////////////////////////////////////////////////////////////////////////; /// Release all GL resources for current context identity.; /// Requires iteration over all logical shapes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScene.cxx:348,log,logical,348,graf3d/gl/src/TGLScene.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScene.cxx,1,['log'],['logical']
Testability,"/**************************************************************************/; // Helpers; /**************************************************************************/; ////////////////////////////////////////////////////////////////////////////////; /// Return memory cost of scene.; /// Warning: NOT CORRECT at present - doesn't correctly calculate size.; /// of logical shapes with dynamic internal contents.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScene.cxx:364,log,logical,364,graf3d/gl/src/TGLScene.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScene.cxx,1,['log'],['logical']
Testability,"/**************************************************************************/; // Logical shapes; /**************************************************************************/; ////////////////////////////////////////////////////////////////////////////////; /// Adopt dynamically created logical 'shape' - add to internal map; /// and take responsibility for deleting.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScene.cxx:81,Log,Logical,81,graf3d/gl/src/TGLScene.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScene.cxx,2,"['Log', 'log']","['Logical', 'logical']"
Testability,"/**************************************************************************/; // Rendering; /**************************************************************************/; ////////////////////////////////////////////////////////////////////////////////; /// Initialize rendering.; /// Pass to base-class where most work is done.; /// Check if GL-ctx is shared with the previous one; if not; /// wipe display-lists of all logicals.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScene.cxx:419,log,logicals,419,graf3d/gl/src/TGLScene.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScene.cxx,1,['log'],['logicals']
Testability,"/**************************************************************************/; // Smart refresh; /**************************************************************************/; ////////////////////////////////////////////////////////////////////////////////; /// Moves logicals that support smart-refresh to intermediate cache.; /// Destroys the others and returns the number of destroyed ones.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScene.cxx:266,log,logicals,266,graf3d/gl/src/TGLScene.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScene.cxx,1,['log'],['logicals']
Testability,/*************************************************************************/; /* test code */; /*************************************************************************/,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/asstorage.c:80,test,test,80,graf2d/asimage/src/libAfterImage/asstorage.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/asstorage.c,1,['test'],['test']
Testability,"/*************************************************************************; * Test 1: Backward Propagation; * batch size = 1; * image depth = 2, image height = 5, image width = 5,; * num frames = 2, filter height = 3, filter width = 3,; * stride rows = 1, stride cols = 1,; * zero-padding height = 0, zero-padding width = 0,; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvLayer.h:78,Test,Test,78,tmva/tmva/test/DNN/CNN/TestConvLayer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvLayer.h,1,['Test'],['Test']
Testability,"/*************************************************************************; * Test 1: Forward Propagation; * batch size = 1; * image depth = 2, image height = 4, image width = 4,; * num frames = 3, filter height = 2, filter width = 2,; * stride rows = 2, stride cols = 2,; * zero-padding height = 0, zero-padding width = 0,; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvLayer.h:78,Test,Test,78,tmva/tmva/test/DNN/CNN/TestConvLayer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvLayer.h,1,['Test'],['Test']
Testability,"/*************************************************************************; * Test 1:; * depth = 1, image height = 5, image width = 5,; * filter depth = 1, filter height = 2, filter width = 2,; * stride rows = 1, stride cols = 1,; * zero-padding height = 1, zero-padding width = 1,; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestIm2Col.h:78,Test,Test,78,tmva/tmva/test/DNN/CNN/TestIm2Col.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestIm2Col.h,1,['Test'],['Test']
Testability,"/*************************************************************************; * Test 1:; * depth = 1, image height = 6, image width = 6,; * frame depth = 1, filter height = 2, filter width = 3,; * stride rows = 1, stride cols = 3,; * zero-padding height = 0, zero-padding width = 0,; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestPoolingLayer.h:78,Test,Test,78,tmva/tmva/test/DNN/CNN/TestPoolingLayer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestPoolingLayer.h,1,['Test'],['Test']
Testability,"/*************************************************************************; * Test 1:; * depth = 2, image height = 4, image width = 5,; * frame depth = 2, filter height = 2, filter width = 2,; * stride rows = 2, stride cols = 1,; * zero-padding height = 0, zero-padding width = 0,; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestPoolingLayer.h:78,Test,Test,78,tmva/tmva/test/DNN/CNN/TestPoolingLayer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestPoolingLayer.h,1,['Test'],['Test']
Testability,"/*************************************************************************; * Test 1:; * depth = 3, width = 5, height = 5; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestReshape.h:78,Test,Test,78,tmva/tmva/test/DNN/CNN/TestReshape.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestReshape.h,2,['Test'],['Test']
Testability,"/*************************************************************************; * Test 1:; * filter depth = 3, filter height = 2, filter width = 2, num. filters = 4; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestRotateWeights.h:78,Test,Test,78,tmva/tmva/test/DNN/CNN/TestRotateWeights.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestRotateWeights.h,1,['Test'],['Test']
Testability,"/*************************************************************************; * Test 2:; * depth = 2, image height = 5, image width = 5,; * filter depth = 2, filter height = 2, filter width = 3,; * stride rows = 1, stride cols = 1,; * zero-padding height = 1, zero-padding width = 1,; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestIm2Col.h:78,Test,Test,78,tmva/tmva/test/DNN/CNN/TestIm2Col.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestIm2Col.h,1,['Test'],['Test']
Testability,"/*************************************************************************; * Test 2:; * filter depth = 2, filter height = 2, filter width = 3, num. filters = 4; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestRotateWeights.h:78,Test,Test,78,tmva/tmva/test/DNN/CNN/TestRotateWeights.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestRotateWeights.h,1,['Test'],['Test']
Testability,"/*************************************************************************; * Test 3:; * depth = 3, image height = 2, image width = 3,; * filter depth = 3, filter height = 3, filter width = 2,; * stride rows = 3, stride cols = 1,; * zero-padding height = 2, zero-padding width = 1,; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestIm2Col.h:78,Test,Test,78,tmva/tmva/test/DNN/CNN/TestIm2Col.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestIm2Col.h,1,['Test'],['Test']
Testability,"/*************************************************************************; * Test BackWard 1:; * depth = 1, image height = 6, image width = 6,; * frame depth = 1, filter height = 2, filter width = 3,; * stride rows = 1, stride cols = 3,; * zero-padding height = 0, zero-padding width = 0,; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestPoolingLayer.h:78,Test,Test,78,tmva/tmva/test/DNN/CNN/TestPoolingLayer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestPoolingLayer.h,1,['Test'],['Test']
Testability,"/*************************************************************************; // * Test Backward 2:; // * depth = 2, image height = 4, image width = 5,; // * frame depth = 2, filter height = 2, filter width = 2,; // * stride rows = 2, stride cols = 1,; // * zero-padding height = 0, zero-padding width = 0,; // *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestPoolingLayer.h:81,Test,Test,81,tmva/tmva/test/DNN/CNN/TestPoolingLayer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestPoolingLayer.h,1,['Test'],['Test']
Testability,"/**********************************************************************; * *; * Copyright (c) 2005 , FNAL LCG ROOT MathLib Team *; * *; * *; **********************************************************************/; // RotationApplication.cpp; //; // Created by: M. Fischler, Aug 10, 2005; //; // Tests that each Rotation produces correct results when applied to; // each form of vector in each coordinate system, and incidentally that products; // of rotations work properly.; //; // The strategy is to build up sequences of rotations about the X, Y, and Z; // axes, such that we can easily determine the correct vector answer.; //; // =================================================================",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/rotationApplication.cxx:295,Test,Tests,295,math/genvector/test/rotationApplication.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/rotationApplication.cxx,1,['Test'],['Tests']
Testability,"/***************************************; * Simple API; ***************************************/; /*! ZSTD_compress() :; * Compresses `src` content as a single zstd compressed frame into already allocated `dst`.; * Hint : compression runs faster if `dstCapacity` >= `ZSTD_compressBound(srcSize)`.; * @return : compressed size written into `dst` (<= `dstCapacity),; * or an error code if it fails (which can be tested using ZSTD_isError()). */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:410,test,tested,410,builtins/zstd/zstd.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h,1,['test'],['tested']
Testability,/*************************************/; /* testing code for ROOT from CERN : */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/draw.c:44,test,testing,44,graf2d/asimage/src/libAfterImage/draw.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/draw.c,1,['test'],['testing']
Testability,"/***/; /* We intentionally run in a separate thread to ensure we at least minimal; * testing of a multithreaded environment (for example, having a reduced stack; * size). */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/c-arcmt-test/c-arcmt-test.c:85,test,testing,85,interpreter/llvm-project/clang/tools/c-arcmt-test/c-arcmt-test.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/c-arcmt-test/c-arcmt-test.c,2,['test'],['testing']
Testability,/**. Calculates the function for the maximum likelihood method. The user must; implement in a class which inherits from FumiliChi2FCN the member function; Elements() which will supply the Elements for the sum. @param par vector containing the Parameter values for the model function. @return The sum of the natural logarithm of the Elements multiplied by -1. @see FumiliFCNBase#elements. */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliMaximumLikelihoodFCN.h:315,log,logarithm,315,math/minuit2/inc/Minuit2/FumiliMaximumLikelihoodFCN.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliMaximumLikelihoodFCN.h,1,['log'],['logarithm']
Testability,"/**. Calculates the logarithm of the gamma function. The implementation used is that of <A HREF=""http://www.netlib.org/cephes"">Cephes</A> from S. Moshier.; @ingroup SpecFunc. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/SpecFuncMathCore.h:20,log,logarithm,20,math/mathcore/inc/Math/SpecFuncMathCore.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/SpecFuncMathCore.h,1,['log'],['logarithm']
Testability,"/**. Class to generate a Delaunay triangulation of a 2D set of points.; Algorithm based on [CDT](https://github.com/artem-ogre/CDT), a C++ library for; generating constraint or conforming Delaunay triangulations. After having found the triangles using the above library, barycentric coordinates are used; to test whether a point is inside a triangle (inTriangle test) and for interpolation.; All this below is implemented in the DoInterpolateNormalized function. Given triangle ABC and point P, P can be expressed by. P.x = la * A.x + lb * B.x + lc * C.x; P.y = la * A.y + lb * B.y + lc * C.y. with lc = 1 - la - lb. P.x = la * A.x + lb * B.x + (1-la-lb) * C.x; P.y = la * A.y + lb * B.y + (1-la-lb) * C.y. Rearranging yields. la * (A.x - C.x) + lb * (B.x - C.x) = P.x - C.x; la * (A.y - C.y) + lb * (B.y - C.y) = P.y - C.y. Thus. la = ( (B.y - C.y)*(P.x - C.x) + (C.x - B.x)*(P.y - C.y) ) / ( (B.y - C.y)*(A.x - C.x) + (C.x - B.x)*(A.y - C.y) ); lb = ( (C.y - A.y)*(P.x - C.x) + (A.x - C.x)*(P.y - C.y) ) / ( (B.y - C.y)*(A.x - C.x) + (C.x - B.x)*(A.y - C.y) ); lc = 1 - la - lb. We save the inverse denominator to speedup computation. invDenom = 1 / ( (B.y - C.y)*(A.x - C.x) + (C.x - B.x)*(A.y - C.y) ). P is in triangle (including edges if. 0 <= [la, lb, lc] <= 1. The interpolation of P.z is. P.z = la * A.z + lb * B.z + lc * C.z. To speed up localisation of points (to see to which triangle belong) a grid is laid over the internal coordinate space.; A reference to triangle ABC is added to _all_ grid cells that include ABC's bounding box.; The size of the grid is defined to be 25x25. Optionally (if the compiler macro `HAS_GCAL` is defined ) the triangle findings and interpolation can be computed; using the GCAL library. This is however not supported when using the class within ROOT. \ingroup MathCore; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/Delaunay2D.h:308,test,test,308,math/mathcore/inc/Math/Delaunay2D.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/Delaunay2D.h,2,['test'],['test']
Testability,"/**. Complement of the cumulative distribution function of the lognormal distribution; (upper tail). \f[ D(x) = \int_{x}^{+\infty} {1 \over x' \sqrt{2 \pi s^2} } e^{-(\ln{x'} - m)^2/2 s^2} dx' \f]. For detailed description see; <A HREF=""http://mathworld.wolfram.com/LogNormalDistribution.html"">; Mathworld</A>. @ingroup ProbFunc. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/ProbFuncMathCore.h:63,log,lognormal,63,math/mathcore/inc/Math/ProbFuncMathCore.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/ProbFuncMathCore.h,2,"['Log', 'log']","['LogNormalDistribution', 'lognormal']"
Testability,"/**. Cumulative distribution function of the Landau; distribution (lower tail). \f[ D(x) = \int_{-\infty}^{x} p(x) dx \f]. where \f$p(x)\f$ is the Landau probability density function :; \f[ p(x) = \frac{1}{\xi} \phi (\lambda) \f]; with; \f[ \phi(\lambda) = \frac{1}{2 \pi i}\int_{c-i\infty}^{c+i\infty} e^{\lambda s + s \log{s}} ds\f]; with \f$\lambda = (x-x_0)/\xi\f$. For a detailed description see; K.S. K&ouml;lbig and B. Schorr, A program package for the Landau distribution,; <A HREF=""http://dx.doi.org/10.1016/0010-4655(84)90085-7"">Computer Phys. Comm. 31 (1984) 97-111</A>; <A HREF=""http://dx.doi.org/10.1016/j.cpc.2008.03.002"">[Erratum-ibid. 178 (2008) 972]</A>.; The same algorithms as in; <A HREF=""https://cern-tex.web.cern.ch/cern-tex/shortwrupsdir/g110/top.html"">; CERNLIB</A> (DISLAN) is used. @param x The argument \f$x\f$; @param xi The width parameter \f$\xi\f$; @param x0 The location parameter \f$x_0\f$. @ingroup ProbFunc. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/ProbFuncMathCore.h:321,log,log,321,math/mathcore/inc/Math/ProbFuncMathCore.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/ProbFuncMathCore.h,1,['log'],['log']
Testability,"/**. Cumulative distribution function of the lognormal distribution; (lower tail). \f[ D(x) = \int_{-\infty}^{x} {1 \over x' \sqrt{2 \pi s^2} } e^{-(\ln{x'} - m)^2/2 s^2} dx' \f]. For detailed description see; <A HREF=""http://mathworld.wolfram.com/LogNormalDistribution.html"">; Mathworld</A>. @ingroup ProbFunc. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/ProbFuncMathCore.h:45,log,lognormal,45,math/mathcore/inc/Math/ProbFuncMathCore.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/ProbFuncMathCore.h,2,"['Log', 'log']","['LogNormalDistribution', 'lognormal']"
Testability,"/**. Error definition of the function. MINUIT defines Parameter errors as the; change in Parameter Value required to change the function Value by up. Normally,; for chisquared fits it is 1, and for negative log likelihood, its Value is 0.5.; If the user wants instead the 2-sigma errors for chisquared fits, it becomes 4,; as Chi2(x+n*sigma) = Chi2(x) + n*n. Comment a little bit better with links!!!!!!!!!!!!!!!!!. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FCNBase.h:207,log,log,207,math/minuit2/inc/Minuit2/FCNBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FCNBase.h,1,['log'],['log']
Testability,"/**. Error definition of the function. MINUIT defines Parameter errors as the; change in Parameter Value required to change the function Value by up. Normally,; for chisquared fits it is 1, and for negative log likelihood, its Value is 0.5.; If the user wants instead the 2-sigma errors for chisquared fits, it becomes 4,; as Chi2(x+n*sigma) = Chi2(x) + n*n. \todo Comment a little bit better with links!!!!!!!!!!!!!!!!! Idem for ErrorDef(). */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FCNBase.h:207,log,log,207,math/minuit2/inc/Minuit2/FCNBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FCNBase.h,1,['log'],['log']
Testability,"/**. Extension of the FCNBase for the Fumili method. Fumili applies only to; minimization problems used for fitting. The method is based on a; linearization of the model function negleting second derivatives.; User needs to provide the model function. In this cased the function; to be minimized is the sum of the logarithms of the model function; for the different measurements times -1. @author Andras Zsenei and Lorenzo Moneta, Creation date: 3 Sep 2004. @see <A HREF=""http://www.cern.ch/winkler/minuit/tutorial/mntutorial.pdf"">MINUIT Tutorial</A> on function minimization,; section 5. @see FumiliStandardMaximumLikelihoodFCN. @ingroup Minuit. \todo Insert a nice latex formula... */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliMaximumLikelihoodFCN.h:314,log,logarithms,314,math/minuit2/inc/Minuit2/FumiliMaximumLikelihoodFCN.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliMaximumLikelihoodFCN.h,1,['log'],['logarithms']
Testability,"/**. Inverse (\f$D^{-1}(z)\f$) of the cumulative distribution; function of the lower tail of the lognormal distribution; (#lognormal_cdf). For detailed description see; <A HREF=""http://mathworld.wolfram.com/LogNormalDistribution.html"">; Mathworld</A>. The implementation used is that of; <A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_19.html#SEC302"">GSL</A>. @ingroup QuantFunc. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/QuantFuncMathCore.h:97,log,lognormal,97,math/mathcore/inc/Math/QuantFuncMathCore.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/QuantFuncMathCore.h,2,"['Log', 'log']","['LogNormalDistribution', 'lognormal']"
Testability,"/**. Inverse (\f$D^{-1}(z)\f$) of the cumulative distribution; function of the upper tail of the lognormal distribution; (#lognormal_cdf_c). For detailed description see; <A HREF=""http://mathworld.wolfram.com/LogNormalDistribution.html"">; Mathworld</A>. The implementation used is that of; <A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_19.html#SEC302"">GSL</A>. @ingroup QuantFunc. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/QuantFuncMathCore.h:97,log,lognormal,97,math/mathcore/inc/Math/QuantFuncMathCore.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/QuantFuncMathCore.h,2,"['Log', 'log']","['LogNormalDistribution', 'lognormal']"
Testability,/**. NumEventsTestStat is a simple implementation of the TestStatistic interface used for simple number counting.; It should probably support simple cuts as well. \ingroup Roostats; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/NumEventsTestStat.h:57,Test,TestStatistic,57,roofit/roostats/inc/RooStats/NumEventsTestStat.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/NumEventsTestStat.h,1,['Test'],['TestStatistic']
Testability,"/**. Probability density function of the Landau distribution:; \f[ p(x) = \frac{1}{\xi} \phi (\lambda) \f]; with; \f[ \phi(\lambda) = \frac{1}{2 \pi i}\int_{c-i\infty}^{c+i\infty} e^{\lambda s + s \log{s}} ds\f]; where \f$\lambda = (x-x_0)/\xi\f$. For a detailed description see; K.S. K&ouml;lbig and B. Schorr, A program package for the Landau distribution,; <A HREF=""http://dx.doi.org/10.1016/0010-4655(84)90085-7"">Computer Phys. Comm. 31 (1984) 97-111</A>; <A HREF=""http://dx.doi.org/10.1016/j.cpc.2008.03.002"">[Erratum-ibid. 178 (2008) 972]</A>.; The same algorithms as in; <A HREF=""https://cern-tex.web.cern.ch/cern-tex/shortwrupsdir/g110/top.html"">; CERNLIB</A> (DENLAN) is used. @param x The argument \f$x\f$; @param xi The width parameter \f$\xi\f$; @param x0 The location parameter \f$x_0\f$. @ingroup PdfFunc. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/PdfFuncMathCore.h:198,log,log,198,math/mathcore/inc/Math/PdfFuncMathCore.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/PdfFuncMathCore.h,1,['log'],['log']
Testability,"/**. Probability density function of the lognormal distribution. \f[ p(x) = {1 \over x \sqrt{2 \pi s^2} } e^{-(\ln{x} - m)^2/2 s^2} \f]. for x>0. For detailed description see; <A HREF=""http://mathworld.wolfram.com/LogNormalDistribution.html"">; Mathworld</A>.; @param x x variable; @param m M = 0 for lognormal; @param s scale parameter (not the sigma of the distribution which is not even defined); @param x0 location parameter, corresponds approximately to the most probable value. For x0 = 0, sigma = 1, the x_mpv = -0.22278. @ingroup PdfFunc. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/PdfFuncMathCore.h:41,log,lognormal,41,math/mathcore/inc/Math/PdfFuncMathCore.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/PdfFuncMathCore.h,3,"['Log', 'log']","['LogNormalDistribution', 'lognormal']"
Testability,"/**; 	 * Changes this controller into a dropdown of options.; 	 *; 	 * Calling this method on an option controller will simply update the options. However, if this; 	 * controller was not already an option controller, old references to this controller are; 	 * destroyed, and a new controller is added to the end of the GUI.; 	 * @example; 	 * // safe usage; 	 *; 	 * gui.add( obj, 'prop1' ).options( [ 'a', 'b', 'c' ] );; 	 * gui.add( obj, 'prop2' ).options( { Big: 10, Small: 1 } );; 	 * gui.add( obj, 'prop3' );; 	 *; 	 * // danger; 	 *; 	 * const ctrl1 = gui.add( obj, 'prop1' );; 	 * gui.add( obj, 'prop2' );; 	 *; 	 * // calling options out of order adds a new controller to the end...; 	 * const ctrl2 = ctrl1.options( [ 'a', 'b', 'c' ] );; 	 *; 	 * // ...and ctrl1 now references a controller that doesn't exist; 	 * assert( ctrl2 !== ctrl1 ); 	 * @param {object|Array} options; 	 * @returns {Controller}; 	 */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:825,assert,assert,825,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['assert'],['assert']
Testability,"/**; 	 * Pass a function to be called after this controller has been modified and loses focus.; 	 * @param {Function} callback; 	 * @returns {this}; 	 * @example; 	 * const controller = gui.add( object, 'property' );; 	 *; 	 * controller.onFinishChange( function( v ) {; 	 * 	console.log( 'Changes complete: ' + v );; 	 * 	console.assert( this === controller );; 	 * } );; 	 */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:284,log,log,284,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,4,"['assert', 'log']","['assert', 'log']"
Testability,/**; 	 * Pass a function to be called when this GUI or its descendants are opened or closed.; 	 * @param {function(GUI)} callback; 	 * @returns {this}; 	 * @example; 	 * gui.onOpenClose( changedGUI => {; 	 * 	console.log( changedGUI._closed );; 	 * } );; 	 */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:217,log,log,217,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['log'],['log']
Testability,"/**; 	 * Pass a function to be called whenever the value is modified by this controller.; 	 * The function receives the new value as its first parameter. The value of `this` will be the; 	 * controller.; 	 *; 	 * For function controllers, the `onChange` callback will be fired on click, after the function; 	 * executes.; 	 * @param {Function} callback; 	 * @returns {this}; 	 * @example; 	 * const controller = gui.add( object, 'property' );; 	 *; 	 * controller.onChange( function( v ) {; 	 * 	console.log( 'The value is now ' + v );; 	 * 	console.assert( this === controller );; 	 * } );; 	 */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:504,log,log,504,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,4,"['assert', 'log']","['assert', 'log']"
Testability,"/**; * @brief A parsed option from the command line together with its argument if it has one.; *; * The Parser chains all parsed options with the same Descriptor::index together; * to form a linked list. This allows you to easily implement all of the common ways; * of handling repeated options and enable/disable pairs.; *; * @li Test for presence of a switch in the argument vector:; * @code if ( options[QUIET] ) ... @endcode; * @li Evaluate --enable-foo/--disable-foo pair where the last one used wins:; * @code if ( options[FOO].last()->type() == DISABLE ) ... @endcode; * @li Cumulative option (-v verbose, -vv more verbose, -vvv even more verbose):; * @code int verbosity = options[VERBOSE].count(); @endcode; * @li Iterate over all --file=&lt;fname> arguments:; * @code for (Option* opt = options[FILE]; opt; opt = opt->next()); * fname = opt->arg; ... @endcode; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:331,Test,Test,331,core/dictgen/res/OptionParser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h,1,['Test'],['Test']
Testability,"/**; * @brief Casts from Option to Option* but only if this Option is valid.; *; * If this Option is valid (i.e. @c desc!=NULL), returns this.; * Otherwise returns NULL. This allows testing an Option directly; * in an if-clause to see if it is used:; * @code; * if (options[CREATE]); * {; * ...; * }; * @endcode; * It also allows you to write loops like this:; * @code for (Option* opt = options[FILE]; opt; opt = opt->next()); * fname = opt->arg; ... @endcode; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:182,test,testing,182,core/dictgen/res/OptionParser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h,1,['test'],['testing']
Testability,"/**; * @brief Casts from Option to const Option* but only if this Option is valid.; *; * If this Option is valid (i.e. @c desc!=NULL), returns this.; * Otherwise returns NULL. This allows testing an Option directly; * in an if-clause to see if it is used:; * @code; * if (options[CREATE]); * {; * ...; * }; * @endcode; * It also allows you to write loops like this:; * @code for (Option* opt = options[FILE]; opt; opt = opt->next()); * fname = opt->arg; ... @endcode; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:188,test,testing,188,core/dictgen/res/OptionParser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h,1,['test'],['testing']
Testability,"/**; * @brief Kolmogorov-Smirnov 1-Sample Test.; *; The Kolmogorov-Smirnov 1-Sample Test algorithm for a specific distribution is described at; http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/kstest.htm; and described and taken from (4); Press W. H., Teukolsky S.A., Vetterling W.T., Flannery B.P. (2007), Numerical Recipes -; The Art of Scientific Computing (Third Edition), Cambridge University Press; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/GoFTest.h:42,Test,Test,42,math/mathcore/inc/Math/GoFTest.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/GoFTest.h,2,['Test'],['Test']
Testability,/**; * @brief Kolmogorov-Smirnov 2-Samples Test.; The Kolmogorov-Smirnov 2-Samples Test algorithm is described at; http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/ks2samp.htm; and described and taken from; https://root.cern/doc/master/namespaceTMath.html; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/GoFTest.h:43,Test,Test,43,math/mathcore/inc/Math/GoFTest.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/GoFTest.h,2,['Test'],['Test']
Testability,/**; * @brief Perform prediction using int as spectator variable; * @param method Path to a method weight file.; * This tests check if issue #9115 is fixed since it uses an integer; * type in TMVA::Reader; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/TestCrossValidationIntVar.cxx:120,test,tests,120,tmva/tmva/test/crossvalidation/TestCrossValidationIntVar.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/TestCrossValidationIntVar.cxx,1,['test'],['tests']
Testability,/**; * @brief Pointer to this Option's Descriptor.; *; * Remember that the first dummy descriptor (see @ref Descriptor::longopt) is used; * for unknown options.; *; * @attention; * @c desc==NULL signals that this Option is unused. This is the default state of; * elements in the result array. You don't need to test @c desc explicitly. You; * can simply write something like this:; * @code; * if (options[CREATE]); * {; * ...; * }; * @endcode; * This works because of <code> operator const Option*() </code>.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:311,test,test,311,core/dictgen/res/OptionParser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h,1,['test'],['test']
Testability,"/**; * @brief Returns Descriptor::type of this Option's Descriptor, or 0 if this Option; * is invalid (unused).; *; * Because this method (and last(), too) can be used even on unused Options with desc==0, you can (provided; * you arrange your types properly) switch on type() without testing validity first.; * @code; * enum OptionType { UNUSED=0, DISABLED=0, ENABLED=1 };; * enum OptionIndex { FOO };; * const Descriptor usage[] = {; * { FOO, ENABLED, """", ""enable-foo"", Arg::None, 0 },; * { FOO, DISABLED, """", ""disable-foo"", Arg::None, 0 },; * { 0, 0, 0, 0, 0, 0 } };; * ...; * switch(options[FOO].last()->type()) // no validity check required!; * {; * case ENABLED: ...; * case DISABLED: ... // UNUSED==DISABLED !; * }; * @endcode; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:284,test,testing,284,core/dictgen/res/OptionParser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h,1,['test'],['testing']
Testability,/**; * @brief Writes a warning message to the RooFit message service.; *; * @param str The warning message to be logged.; * @return std::ostream& A reference to the output stream.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/hs3/src/RooJSONFactoryWSTool.cxx:113,log,logged,113,roofit/hs3/src/RooJSONFactoryWSTool.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/hs3/src/RooJSONFactoryWSTool.cxx,1,['log'],['logged']
Testability,/**; * @brief Writes an error message to the RooFit message service and throws a runtime_error.; *; * @param s The error message to be logged and thrown.; * @return void; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/hs3/src/RooJSONFactoryWSTool.cxx:135,log,logged,135,roofit/hs3/src/RooJSONFactoryWSTool.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/hs3/src/RooJSONFactoryWSTool.cxx,1,['log'],['logged']
Testability,"/**; * @name setOptions( options ); * @function; * Sets options for Bidi conversion; * @param {Object}:; * - isInputVisual {boolean} (defaults to false): allowed values: true(Visual mode), false(Logical mode); * - isInputRtl {boolean}: allowed values true(Right-to-left direction), false (Left-to-right directiion), undefined(Contectual direction, i.e.direction defined by first strong character of input string); * - isOutputVisual {boolean} (defaults to false): allowed values: true(Visual mode), false(Logical mode); * - isOutputRtl {boolean}: allowed values true(Right-to-left direction), false (Left-to-right directiion), undefined(Contectual direction, i.e.direction defined by first strong characterof input string); * - isSymmetricSwapping {boolean} (defaults to false): allowed values true(needs symmetric swapping), false (no need in symmetric swapping),; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:195,Log,Logical,195,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,4,['Log'],['Logical']
Testability,"/**; * @}; */; /**; * \defgroup CINDEX_DEBUG Debugging facilities; *; * These routines are used for testing and debugging, only, and should not; * be relied upon.; *; * @{; */; /* for debug/testing */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang-c/Index.h:100,test,testing,100,interpreter/llvm-project/clang/include/clang-c/Index.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang-c/Index.h,2,['test'],['testing']
Testability,/**; * A minimal RRawFile implementation that serves data from a string. It keeps a counter of the number of read calls; * to help veryfing the buffer logic in the base class.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/test/RRawFile.cxx:151,log,logic,151,io/io/test/RRawFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/test/RRawFile.cxx,1,['log'],['logic']
Testability,"/**; * Abstract base class of interpolants over parametric samples.; *; * The parameter domain is one dimensional, typically the time or a path; * along a curve defined by the data.; *; * The sample values can have any dimensionality and derived classes may; * apply special interpretations to the data.; *; * This class provides the interval seek in a Template Method, deferring; * the actual interpolation to derived classes.; *; * Time complexity is O(1) for linear access crossing at most two points; * and O(log N) for random access, where N is the number of positions.; *; * References:; *; * 		http://www.oodesign.com/template-method-pattern.html; *; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/modules/three.mjs:513,log,log,513,js/modules/three.mjs,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/modules/three.mjs,1,['log'],['log']
Testability,"/**; * Add Language Tag to the generated PDF; *; * @name setLanguage; * @function; * @param {string} langCode The Language code as ISO-639-1 (e.g. 'en') or as country language code (e.g. 'en-GB').; * @returns {jsPDF}; * @example; * var doc = new jsPDF(); * doc.text(10, 10, 'This is a test'); * doc.setLanguage(""en-US""); * doc.save('english.pdf'); */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:285,test,test,285,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['test'],['test']
Testability,/**; * Add a point to this contour. This function tests for duplicate; * points.; *; * @param point The point to be added to the contour.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/ftgl/inc/FTContour.h:50,test,tests,50,graf3d/ftgl/inc/FTContour.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/ftgl/inc/FTContour.h,1,['test'],['tests']
Testability,"/**; * Attempt to claim responsibility for new definitions. This method can be; * used to claim responsibility for symbols that are added to a; * materialization unit during the compilation process (e.g. literal pool; * symbols). Symbol linkage rules are the same as for symbols that are; * defined up front: duplicate strong definitions will result in errors.; * Duplicate weak definitions will be discarded (in which case they will; * not be added to this responsibility instance).; *; * This method can be used by materialization units that want to add; * additional symbols at materialization time (e.g. stubs, compile; * callbacks, metadata); */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm-c/Orc.h:608,stub,stubs,608,interpreter/llvm-project/llvm/include/llvm-c/Orc.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm-c/Orc.h,1,['stub'],['stubs']
Testability,"/**; * Canvas text measuring is a lot faster than svg measuring. However, it is inaccurate for some fonts. So test each; * font once and decide if canvas is accurate enough.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:110,test,test,110,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['test'],['test']
Testability,/**; * Compute a base 10 logarithm over an implementationdefined; * range. The maximum error is implementationdefined.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/opencl-c.h:25,log,logarithm,25,interpreter/llvm-project/clang/lib/Headers/opencl-c.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/opencl-c.h,1,['log'],['logarithm']
Testability,/**; * Compute a base 10 logarithm.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/opencl-c.h:25,log,logarithm,25,interpreter/llvm-project/clang/lib/Headers/opencl-c.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/opencl-c.h,1,['log'],['logarithm']
Testability,/**; * Compute a base 2 logarithm over an implementationdefined; * range. The maximum error is implementationdefined.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/opencl-c.h:24,log,logarithm,24,interpreter/llvm-project/clang/lib/Headers/opencl-c.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/opencl-c.h,1,['log'],['logarithm']
Testability,/**; * Compute a base 2 logarithm.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/opencl-c.h:24,log,logarithm,24,interpreter/llvm-project/clang/lib/Headers/opencl-c.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/opencl-c.h,1,['log'],['logarithm']
Testability,/**; * Compute natural logarithm over an implementationdefined; * range. The maximum error is implementation; * defined.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/opencl-c.h:23,log,logarithm,23,interpreter/llvm-project/clang/lib/Headers/opencl-c.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/opencl-c.h,1,['log'],['logarithm']
Testability,/**; * Compute natural logarithm.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/opencl-c.h:23,log,logarithm,23,interpreter/llvm-project/clang/lib/Headers/opencl-c.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/opencl-c.h,1,['log'],['logarithm']
Testability,"/**; * Create a custom MaterializationUnit.; *; * Name is a name for this MaterializationUnit to be used for identification; * and logging purposes (e.g. if this MaterializationUnit produces an; * object buffer then the name of that buffer will be derived from this name).; *; * The Syms list contains the names and linkages of the symbols provided by this; * unit. This function takes ownership of the elements of the Syms array. The; * Name fields of the array elements are taken to have been retained for this; * function. The client should *not* release the elements of the array, but is; * still responsible for destroying the array itself.; *; * The InitSym argument indicates whether or not this MaterializationUnit; * contains static initializers. If three are no static initializers (the common; * case) then this argument should be null. If there are static initializers; * then InitSym should be set to a unique name that also appears in the Syms; * list with the LLVMJITSymbolGenericFlagsMaterializationSideEffectsOnly flag; * set. This function takes ownership of the InitSym, which should have been; * retained twice on behalf of this function: once for the Syms entry and once; * for InitSym. If clients wish to use the InitSym value after this function; * returns they must retain it once more for themselves.; *; * If any of the symbols in the Syms list is looked up then the Materialize; * function will be called.; *; * If any of the symbols in the Syms list is overridden then the Discard; * function will be called.; *; * The caller owns the underling MaterializationUnit and is responsible for; * either passing it to a JITDylib (via LLVMOrcJITDylibDefine) or disposing; * of it by calling LLVMOrcDisposeMaterializationUnit.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm-c/Orc.h:131,log,logging,131,interpreter/llvm-project/llvm/include/llvm-c/Orc.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm-c/Orc.h,1,['log'],['logging']
Testability,/**; * DEPRECATED: Enabled chained precompiled preambles in C++.; *; * Note: this is a *temporary* option that is available only while; * we are testing C++ precompiled preamble support. It is deprecated.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang-c/Index.h:145,test,testing,145,interpreter/llvm-project/clang/include/clang-c/Index.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang-c/Index.h,1,['test'],['testing']
Testability,"/**; * Dedicated Dictionary Search Structure bucket log. In the; * ZSTD_dedicatedDictSearch mode, the hashTable has; * 2 ** ZSTD_LAZY_DDSS_BUCKET_LOG entries in each bucket, rather than just; * one.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.h:52,log,log,52,builtins/zstd/compress/zstd_lazy.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_lazy.h,1,['log'],['log']
Testability,"/**; * Display the source-location information where the; * diagnostic was located.; *; * When set, diagnostics will be prefixed by the file, line, and; * (optionally) column to which the diagnostic refers. For example,; *; * \code; * test.c:28: warning: extra tokens at end of #endif directive; * \endcode; *; * This option corresponds to the clang flag \c -fshow-source-location.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang-c/CXDiagnostic.h:235,test,test,235,interpreter/llvm-project/clang/include/clang-c/CXDiagnostic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang-c/CXDiagnostic.h,1,['test'],['test']
Testability,/**; * FTFont is the public interface for the FTGL library.; *; * Specific font classes are derived from this class. It uses the helper; * classes FTFace and FTSize to access the Freetype library. This class; * is abstract and deriving classes must implement the protected; * <code>MakeGlyph</code> function to create glyphs of the; * appropriate type.; *; * It is good practice after using these functions to test the error; * code returned. <code>FT_Error Error()</code>. Check the freetype file fterrdef.h; * for error definitions.; *; * @see FTFace; * @see FTSize; * @see FTGlyphContainer; * @see FTGlyph; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/ftgl/inc/FTFont.h:410,test,test,410,graf3d/ftgl/inc/FTFont.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/ftgl/inc/FTFont.h,1,['test'],['test']
Testability,"/**; * Intern a string in the ExecutionSession's SymbolStringPool and return a; * reference to it. This increments the ref-count of the pool entry, and the; * returned value should be released once the client is done with it by; * calling LLVMOrcReleaseSymbolStringPoolEntry.; *; * Since strings are uniqued within the SymbolStringPool; * LLVMOrcSymbolStringPoolEntryRefs can be compared by value to test string; * equality.; *; * Note that this function does not perform linker-mangling on the string.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm-c/Orc.h:400,test,test,400,interpreter/llvm-project/llvm/include/llvm-c/Orc.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm-c/Orc.h,1,['test'],['test']
Testability,"/**; * Makes the PDF automatically open the print-Dialog when opened in a PDF-viewer.; *; * @name autoPrint; * @function; * @param {Object} options (optional) Set the attribute variant to 'non-conform' (default) or 'javascript' to activate different methods of automatic printing when opening in a PDF-viewer .; * @returns {jsPDF}; * @example; * var doc = new jsPDF();; * doc.text(10, 10, 'This is a test');; * doc.autoPrint({variant: 'non-conform'});; * doc.save('autoprint.pdf');; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:400,test,test,400,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['test'],['test']
Testability,/**; * Notifies the target JITDylib (and any pending queries on that JITDylib); * that all symbols covered by this MaterializationResponsibility instance; * have been emitted.; *; * This method will return an error if any symbols being resolved have been; * moved to the error state due to the failure of a dependency. If this; * method returns an error then clients should log it and call; * LLVMOrcMaterializationResponsibilityFailMaterialization.; * If no dependencies have been registered for the symbols covered by this; * MaterializationResponsibility then this method is guaranteed to return; * LLVMErrorSuccess.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm-c/Orc.h:374,log,log,374,interpreter/llvm-project/llvm/include/llvm-c/Orc.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm-c/Orc.h,1,['log'],['log']
Testability,"/**; * Notifies the target JITDylib that the given symbols have been resolved.; * This will update the given symbols' addresses in the JITDylib, and notify; * any pending queries on the given symbols of their resolution. The given; * symbols must be ones covered by this MaterializationResponsibility; * instance. Individual calls to this method may resolve a subset of the; * symbols, but all symbols must have been resolved prior to calling emit.; *; * This method will return an error if any symbols being resolved have been; * moved to the error state due to the failure of a dependency. If this; * method returns an error then clients should log it and call; * LLVMOrcMaterializationResponsibilityFailMaterialization. If no dependencies; * have been registered for the symbols covered by this; * MaterializationResponsibility then this method is guaranteed to return; * LLVMErrorSuccess.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm-c/Orc.h:647,log,log,647,interpreter/llvm-project/llvm/include/llvm-c/Orc.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm-c/Orc.h,1,['log'],['log']
Testability,/**; * Operator != Tests for non equality; *; * @param a; * @param b; * @return true if a & b are not equal; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/ftgl/inc/FTPoint.h:19,Test,Tests,19,graf3d/ftgl/inc/FTPoint.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/ftgl/inc/FTPoint.h,1,['Test'],['Tests']
Testability,/**; * Operator == Tests for eqaulity; *; * @param a; * @param b; * @return true if a & b are equal; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/ftgl/inc/FTPoint.h:19,Test,Tests,19,graf3d/ftgl/inc/FTPoint.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/ftgl/inc/FTPoint.h,1,['Test'],['Tests']
Testability,/**; * Return the temporary point list. For testing only.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/ftgl/inc/FTVectoriser.h:44,test,testing,44,graf3d/ftgl/inc/FTVectoriser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/ftgl/inc/FTVectoriser.h,1,['test'],['testing']
Testability,/**; * Sets the invocation emission path option in a CXIndex.; *; * This function is DEPRECATED. Set CXIndexOptions::InvocationEmissionPath and; * call clang_createIndexWithOptions() instead.; *; * The invocation emission path specifies a path which will contain log; * files for certain libclang invocations. A null value (default) implies that; * libclang invocations are not logged..; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang-c/Index.h:263,log,log,263,interpreter/llvm-project/clang/include/clang-c/Index.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang-c/Index.h,2,['log'],"['log', 'logged']"
Testability,/**; * Specifies a path which will contain log files for certain libclang; * invocations. A null value implies that libclang invocations are not logged.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang-c/Index.h:43,log,log,43,interpreter/llvm-project/clang/include/clang-c/Index.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang-c/Index.h,2,['log'],"['log', 'logged']"
Testability,"/**; * Subgroups have different requirements on forward progress, so just test; * all the relevant macros.; * CL 3.0 sub-groups ""they are not guaranteed to make independent forward progress""; * KHR subgroups ""Subgroups within a workgroup are independent, make forward progress with respect to each other""; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/opencl-c-base.h:74,test,test,74,interpreter/llvm-project/clang/lib/Headers/opencl-c-base.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/opencl-c-base.h,1,['test'],['test']
Testability,"/**; * Test against issue #6523 and #6640; * Try to force `TTree::ChangeFile` behaviour. Within RDataFrame, this should; * not happen and both sequential and multithreaded Snapshot should only create; * one file.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_snapshot.cxx:7,Test,Test,7,tree/dataframe/test/dataframe_snapshot.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_snapshot.cxx,1,['Test'],['Test']
Testability,/**; * Test if a module has support for ThinLTO linking.; *; * \since LTO_API_VERSION=18; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm-c/lto.h:7,Test,Test,7,interpreter/llvm-project/llvm/include/llvm-c/lto.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm-c/lto.h,1,['Test'],['Test']
Testability,/**; * Tests supplied object to determine if ArrayBuffer; *; * @name isArrayBuffer; * @function; * @param {Object} object an Object; *; * @returns {boolean}; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:7,Test,Tests,7,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['Test'],['Tests']
Testability,/**; * Tests supplied object to determine if it implements the ArrayBufferView (TypedArray) interface; *; * @name isArrayBufferView; * @function; * @param {Object} object an Object; * @returns {boolean}; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:7,Test,Tests,7,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['Test'],['Tests']
Testability,/**; * The ElementStruct has no purpose except to provide; * inputs to the test cases.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/test/ElementStruct.h:75,test,test,75,tree/tree/test/ElementStruct.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/test/ElementStruct.h,1,['test'],['test']
Testability,/**; * The SillyStruct has no purpose except to provide; * inputs to the test cases.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/test/SillyStruct.h:73,test,test,73,tree/tree/test/SillyStruct.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/test/SillyStruct.h,1,['test'],['test']
Testability,/**; * The toDataURL() method is just a stub to throw an error if accidently called.; *; * @name toDataURL; * @function; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:40,stub,stub,40,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['stub'],['stub']
Testability,/**; * Toggle debug logging when running the PassBuilder; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm-c/Transforms/PassBuilder.h:20,log,logging,20,interpreter/llvm-project/llvm/include/llvm-c/Transforms/PassBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm-c/Transforms/PassBuilder.h,1,['log'],['logging']
Testability,/**; * Used to test serialization and deserialization of classes in RNTuple with TClass; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/NTupleStruct.hxx:15,test,test,15,tree/dataframe/test/NTupleStruct.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/NTupleStruct.hxx,1,['test'],['test']
Testability,"/**; * \brief Namespace for new RooFit test statistic calculation.; *; * RooFit::TestStatistics contains a major refactoring of the RooAbsTestStatistic-RooAbsOptTestStatistic-RooNLLVar; * inheritance tree into:; * 1. statistics-based classes on the one hand;; * 2. calculation/evaluation/optimization based classes on the other hand.; *; * The likelihood is the central unit on the statistics side. The RooAbsL class is implemented for four kinds of; * likelihoods: binned, unbinned, ""subsidiary"" (an optimization for numerical stability that gathers components like; * global observables) and ""sum"" (over multiple components of the other types). These classes provide ways to compute; * their components in parallelizable chunks that can be used by the calculator classes as they see fit.; *; * On top of the likelihood classes, we also provide for convenience a likelihood builder buildLikelihood, as a free; * function in the namespace. This function analyzes the pdf and automatically constructs the proper likelihood, built; * up from the available RooAbsL subclasses.; *; * The calculator ""Wrapper"" classes are abstract interfaces. These can be implemented for different kinds of algorithms,; * or with different kinds of optimization ""back-ends"" in mind. In an upcoming PR, we will introduce the fork-based; * multi-processing implementation based on RooFit::MultiProcess. Other possible implementations could use the GPU or; * external tools like TensorFlow.; *; * The coupling of all these classes to RooMinimizer is made via the MinuitFcnGrad class, which owns the Wrappers that; * calculate the likelihood components.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/TestStatistics/buildLikelihood.cxx:39,test,test,39,roofit/roofitcore/src/TestStatistics/buildLikelihood.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/TestStatistics/buildLikelihood.cxx,2,"['Test', 'test']","['TestStatistics', 'test']"
Testability,"/**; * \class TMVA::CrossValidation; * \ingroup TMVA; * \brief. Use html for explicit line breaking<br>; Markdown links? [class reference](#reference)?. ~~~{.cpp}; ce->BookMethod(dataloader, options);; ce->Evaluate();; ~~~. Cross-evaluation will generate a new training and a test set dynamically from; from `K` folds. These `K` folds are generated by splitting the input training; set. The input test set is currently ignored. This means that when you specify your DataSet you should include all events; in your training set. One way of doing this would be the following:. ~~~{.cpp}; dataloader->AddTree( signalTree, ""cls1"" );; dataloader->AddTree( background, ""cls2"" );; dataloader->PrepareTrainingAndTestTree( """", """", ""nTest_cls1=1:nTest_cls2=1"" );; ~~~. ## Split Expression; See CVSplit documentation?. */; ////////////////////////////////////////////////////////////////////////////////; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CrossValidation.cxx:276,test,test,276,tmva/tmva/src/CrossValidation.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CrossValidation.cxx,2,['test'],['test']
Testability,"/**; * \param Comment a \c CXComment_TParamCommand AST node.; *; * \returns zero-based nesting depth of this parameter in the template parameter list.; *; * For example,; * \verbatim; * template<typename C, template<typename T> class TT>; * void test(TT<int> aaa);; * \endverbatim; * for C and TT nesting depth is 0,; * for T nesting depth is 1.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang-c/Documentation.h:246,test,test,246,interpreter/llvm-project/clang/include/clang-c/Documentation.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang-c/Documentation.h,1,['test'],['test']
Testability,"/**; * \param Comment a \c CXComment_TParamCommand AST node.; *; * \returns zero-based parameter index in the template parameter list at a; * given nesting depth.; *; * For example,; * \verbatim; * template<typename C, template<typename T> class TT>; * void test(TT<int> aaa);; * \endverbatim; * for C and TT nesting depth is 0, so we can ask for index at depth 0:; * at depth 0 C's index is 0, TT's index is 1.; *; * For T nesting depth is 1, so we can ask for index at depth 0 and 1:; * at depth 0 T's index is 1 (same as TT's),; * at depth 1 T's index is 0.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang-c/Documentation.h:258,test,test,258,interpreter/llvm-project/clang/include/clang-c/Documentation.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang-c/Documentation.h,1,['test'],['test']
Testability,"/**; * \test TBufferMerger, SetMaxTreeSize; * \brief Test to avoid issue #6523.; * ; * `TTree`'s default behaviour of changing the file it is attached to when reaching; * a size greater than `fgMaxTreeSize` doesn't fit in the design of TBufferMerger.; * The `TTree::Fill` method has been modified accordingly, avoiding this behaviour; * when the tree is attached to a TMemFile (thus also a TBufferMergerFile). This; * test tries to trigger the behaviour forcedly by calling `TTree::SetMaxTreeSize`; * but the TBufferMergerFile is never detached from the tree.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/test/TBufferMerger.cxx:8,test,test,8,io/io/test/TBufferMerger.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/test/TBufferMerger.cxx,3,"['Test', 'test']","['Test', 'test']"
Testability,"/**; * g_file_test:; * @filename: a filename to test; * @test: bitfield of #GFileTest flags; * ; * Returns TRUE if any of the tests in the bitfield @test are; * TRUE. For example, (G_FILE_TEST_EXISTS | G_FILE_TEST_IS_DIR); * will return TRUE if the file exists; the check whether it's; * a directory doesn't matter since the existence test is TRUE.; * With the current set of available tests, there's no point; * passing in more than one test at a time.; *; * Return value: whether a test was TRUE; **/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/gfileutils.c:48,test,test,48,graf2d/win32gdk/gdk/src/glib/gfileutils.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/glib/gfileutils.c,8,['test'],"['test', 'tests']"
Testability,"/**; @defgroup GoFClasses Goodness of Fit Tests; Classical one-dimensional goodness of git tests for unbinned data.; ROOT provides 1 sample goodness of fit test (comparison of data with a theoretical distribution) and; 2-sample test (comparison of two data sets) through the class ROOT::Math::GoFTest; The algorithms provided are the Kolmogorov-Smirnov and Anderson-Darling.; These tests could be applied approximately also to binned data, assuming the bin size is much smaller than the intrinsic; data variations. It is assumed than a bin is like many data at the same bin center value.; For these binned version tests look at `TH1::KolmogorovTest` and `TH1::AndersonDarlingTest`; @ingroup MathCore; */; /**; * GoFTest class implementing the 1 sample and 2 sample goodness of fit tests; * for uni-variate distributions and data.; * The class implements the AndersonDarling and the KolmogorovSmirnov tests; *; * In the case of the 1-sample test the user needs to provide:; * - input data; * - theoretical distribution. The distribution can be provided as a function object (functor) or an object implementing; * the `ROOT::Math::IGenFunction` interface. One can provide either the PDF (default) of the CDF (cumulative distribution); * One can also provide a pre-defined function. In that case one needs to give also the distribution parameters otherwise the default values will be used.; * The pre-defined distributions are:; * - kGaussian with default parameter mean=0, sigma=1; * - kExponential with default parameter rate=1; * - kLogNormal with default parameter meanlog=0, sigmalog=1; *; * Note that one should not use data computed distribution parameters, otherwise the test will be biased.; * The 1-sample KS test using data computed quantities is called Lilliefors test (see https://en.wikipedia.org/wiki/Lilliefors_test); *; * @ingroup GoFClasses; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/GoFTest.h:42,Test,Tests,42,math/mathcore/inc/Math/GoFTest.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/GoFTest.h,12,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,/**; A RLogHandler that multiplexes diagnostics to different client `RLogHandler`s; and keeps track of the sum of `RLogDiagCount`s for all channels. `RLogHandler::Get()` returns the process's (static) log manager.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/RLogger.hxx:201,log,log,201,core/foundation/inc/ROOT/RLogger.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/RLogger.hxx,1,['log'],['log']
Testability,"/**; A log configuration for a channel, e.g. ""RHist"".; Each ROOT module has its own log, with potentially distinct verbosity.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/RLogger.hxx:7,log,log,7,core/foundation/inc/ROOT/RLogger.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/RLogger.hxx,2,['log'],['log']
Testability,/**; Abstract RLogHandler base class. ROOT logs everything from info to error; to entities of this class.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/RLogger.hxx:43,log,logs,43,core/foundation/inc/ROOT/RLogger.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/RLogger.hxx,1,['log'],['logs']
Testability,"/**; Buffer-less streaming decompression (synchronous mode). A ZSTD_DCtx object is required to track streaming operations.; Use ZSTD_createDCtx() / ZSTD_freeDCtx() to manage it.; A ZSTD_DCtx object can be re-used multiple times. First typical operation is to retrieve frame parameters, using ZSTD_getFrameHeader().; Frame header is extracted from the beginning of compressed frame, so providing only the frame's beginning is enough.; Data fragment must be large enough to ensure successful decoding.; `ZSTD_frameHeaderSize_max` bytes is guaranteed to always be large enough.; @result : 0 : successful decoding, the `ZSTD_frameHeader` structure is correctly filled.; >0 : `srcSize` is too small, please provide at least @result bytes on next attempt.; errorCode, which can be tested using ZSTD_isError(). It fills a ZSTD_frameHeader structure with important information to correctly decode the frame,; such as the dictionary ID, content size, or maximum back-reference distance (`windowSize`).; Note that these values could be wrong, either because of data corruption, or because a 3rd party deliberately spoofs false information.; As a consequence, check that values remain within valid application range.; For example, do not allocate memory blindly, check that `windowSize` is within expectation.; Each application can set its own limits, depending on local restrictions.; For extended interoperability, it is recommended to support `windowSize` of at least 8 MB. ZSTD_decompressContinue() needs previous data blocks during decompression, up to `windowSize` bytes.; ZSTD_decompressContinue() is very sensitive to contiguity,; if 2 blocks don't follow each other, make sure that either the compressor breaks contiguity at the same place,; or that previous contiguous segment is large enough to properly handle maximum back-reference distance.; There are multiple ways to guarantee this condition. The most memory efficient way is to use a round buffer of sufficient size.; Sufficient size is determin",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:775,test,tested,775,builtins/zstd/zstd.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h,1,['test'],['tested']
Testability,/**; Calculate eta given rho and zeta.; This formula is faster than the standard calculation (below) from log(tan(theta/2); but one has to be careful when rho is much smaller than z (large eta values); Formula is eta = log( zs + sqrt(zs^2 + 1) ) where zs = z/rho. For large value of z_scaled (tan(theta) ) one can approximate the sqrt via a Taylor expansion; We do the approximation of the sqrt if the numerical error is of the same order of second term of; the sqrt.expansion:; eps > 1/zs^4 => zs > 1/(eps^0.25). When rho == 0 we use etaMax (see definition in etaMax.h). */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/genvector/inc/Math/GenVector/eta.h:106,log,log,106,math/genvector/inc/Math/GenVector/eta.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/inc/Math/GenVector/eta.h,2,['log'],['log']
Testability,"/**; Constructor from a TF1 objects specifying the pdf and optionally from another function; representing the derivative of the pdf. The flag isLogPdf can be used to pass instead of the pdf; (and its derivative) the log (and the derivative of the log) of the pdf.; By default the distribution has not domain set (it is defined between [-inf,+inf], no mode, no pdf area and no; cdf explicitly defined. UnuRan, if needed, can compute some of this quantities, but the user if they know them can; set them in order to speed up the algorithm. For example in case of the Cdf, if the user has not set it, a numerical; integration algorithm is used to estimate the Cdf from the Pdf.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/unuran/inc/TUnuranContDist.h:216,log,log,216,math/unuran/inc/TUnuranContDist.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/inc/TUnuranContDist.h,2,['log'],['log']
Testability,/**; Constructor with a generator instance and given level of log output; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/unuran/inc/TUnuran.h:62,log,log,62,math/unuran/inc/TUnuran.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/inc/TUnuran.h,1,['log'],['log']
Testability,"/**; Exact component-by-component equality; Note: Peculiar representations of the zero vector such as (0,1,0) will; not test as equal to one another.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/genvector/inc/Math/GenVector/CylindricalEta3D.h:120,test,test,120,math/genvector/inc/Math/GenVector/CylindricalEta3D.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/inc/Math/GenVector/CylindricalEta3D.h,1,['test'],['test']
Testability,/**; Fit an un-binned data set using the negative log-likelihood method.; This function copies the input data.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/Fitter.h:50,log,log-likelihood,50,math/mathcore/inc/Fit/Fitter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/Fitter.h,1,['log'],['log-likelihood']
Testability,/**; Fit an un-binned data set using the negative log-likelihood method.; This function uses a `shared_ptr` to avoid copying the input data.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/Fitter.h:50,log,log-likelihood,50,math/mathcore/inc/Fit/Fitter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/Fitter.h,1,['log'],['log-likelihood']
Testability,"/**; Get errors on the point (coordinate errors and asymmetric value errors) for the; given fit point.; It must be called only when the coordinate errors and asymmetric errors are stored; otherwise it will produce an assert.; */; // not threadsafe, to be replaced with never constructs!; // for example: just return std::array or std::vector, there's; // is going to be only minor overhead in c++11.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/BinData.h:217,assert,assert,217,math/mathcore/inc/Fit/BinData.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/BinData.h,1,['assert'],['assert']
Testability,/**; Helper functions to test convergence of Root-Finding algorithms.; Used by ROOT::Math::RootFinder class (see there for the doc); */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLRootHelper.h:25,test,test,25,math/mathmore/inc/Math/GSLRootHelper.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLRootHelper.h,1,['test'],['test']
Testability,/**; Implementation of eta from -log(tan(theta/2)).; This is convenient when theta is already known (for example in a polar coorindate system); */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/genvector/inc/Math/GenVector/eta.h:33,log,log,33,math/genvector/inc/Math/GenVector/eta.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/inc/Math/GenVector/eta.h,1,['log'],['log']
Testability,/**; Log Normal distribution; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLRandomFunctions.h:5,Log,Log,5,math/mathmore/inc/Math/GSLRandomFunctions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLRandomFunctions.h,2,['Log'],['Log']
Testability,/**; Logistic distribution; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLRandomFunctions.h:5,Log,Logistic,5,math/mathmore/inc/Math/GSLRandomFunctions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLRandomFunctions.h,2,['Log'],['Logistic']
Testability,"/**; Performs the Anderson-Darling 1-Sample Test.; The Anderson-Darling 1-Sample Test algorithm for a specific distribution is described at; http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/andedarl.htm; and described and taken from (2); Marsaglia J.C.W., Marsaglia G. (2004), Evaluating the Anderson-Darling Distribution, Journal of Statistical Software, Volume 09, Issue i02.; and described and taken from (3); Lewis P.A.W. (1961), The Annals of Mathematical Statistics, Distribution of the Anderson-Darling Statistic, Volume 32, Number 4, 1118-1124.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/GoFTest.h:44,Test,Test,44,math/mathcore/inc/Math/GoFTest.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/GoFTest.h,2,['Test'],['Test']
Testability,/**; Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/genvector/inc/Math/GenVector/LorentzVector.h:59,log,log,59,math/genvector/inc/Math/GenVector/LorentzVector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/inc/Math/GenVector/LorentzVector.h,1,['log'],['log']
Testability,"/**; Retrieve the errors on the point (coordinate and value) for the given fit point; It must be called only when the coordinate errors are stored otherwise it will produce an; assert.; */; // not threadsafe, to be replaced with never constructs!; // for example: just return std::array or std::vector, there's; // is going to be only minor overhead in c++11.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/BinData.h:177,assert,assert,177,math/mathcore/inc/Fit/BinData.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/BinData.h,1,['assert'],['assert']
Testability,/**; Set a log grid scan (default is equidistant bins); will work only if xlow > 0; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/BrentMinimizer1D.h:11,log,log,11,math/mathcore/inc/Math/BrentMinimizer1D.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/BrentMinimizer1D.h,2,['log'],['log']
Testability,/**; Small test to verify that radiation length and nuclear interaction length; are computed correctly when ROOT uses G4 units.; \author Makus Frank; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/test/test_material_units.cxx:11,test,test,11,geom/test/test_material_units.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/test/test_material_units.cxx,1,['test'],['test']
Testability,"/**; TUnuranMultiContDist class describing multi dimensional continuous distributions.; It is used by TUnuran to generate a set of random numbers according to this distribution via; TUnuran::Sample(double *).; The class can be constructed from a multi-dimensional function (TF1 pointer, which can be actually also a; TF2 or a TF3).; It provides a method to set the domain of the distribution ( SetDomain ) which will correspond to the range; of the generated random numbers. By default the domain is [(-inf,-inf,...)(+inf,+inf,...)], independently of the; range set in the TF1 class used to construct the distribution. The derivatives of the pdf which are used by some UNURAN methods are estimated numerically in the; Derivative() method. Some extra information (like distribution mode) can be set using SetMode.; Some methods require instead of the pdf the log of the pdf.; This can also be controlled by setting a flag when constructing this class. \ingroup Unuran. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/unuran/inc/TUnuranMultiContDist.h:858,log,log,858,math/unuran/inc/TUnuranMultiContDist.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/inc/TUnuranMultiContDist.h,1,['log'],['log']
Testability,/**; Test convergence of the interval.; The test returns success if; \f[; |x_{min}-x_{truemin}| < epsAbs + epsRel *x_{truemin}; \f]; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMinimizer1D.h:5,Test,Test,5,math/mathmore/inc/Math/GSLMinimizer1D.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMinimizer1D.h,2,"['Test', 'test']","['Test', 'test']"
Testability,/**; Test of ROOT finder for various function. case = 0 simple function (polynomial); case = 1 function which fails for a bug in BrentMethod::MinimBrent fixed with r = 32544 (5.27.01); */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx:5,Test,Test,5,math/mathcore/test/testRootFinder.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx,1,['Test'],['Test']
Testability,/**; Test the cdf values against the integral of the pdf; Returns 0 if the test is passed. @param v The Vavilov test object; @param os Output stream; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/VavilovTest.h:5,Test,Test,5,math/mathmore/test/VavilovTest.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/VavilovTest.h,3,"['Test', 'test']","['Test', 'test']"
Testability,/**; Test the cdf values against the integral of the pdf; Returns 0 if the test is passed. @param v The Vavilov test object; @param os Output stream; @param maxabsdiff max abs difference; @param maxcdfdiff max cdf difference; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/VavilovTest.h:5,Test,Test,5,math/mathmore/test/VavilovTest.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/VavilovTest.h,3,"['Test', 'test']","['Test', 'test']"
Testability,/**; Test the pdf values against the tables of Seltzer and Berger.; Returns 0 if the test is passed. @param v The Vavilov test object; @param os Output stream; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/VavilovTest.h:5,Test,Test,5,math/mathmore/test/VavilovTest.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/VavilovTest.h,6,"['Test', 'test']","['Test', 'test']"
Testability,/**; Test the quantile values against the cdf; Returns 0 if the test is passed. @param v The Vavilov test object; @param os Output stream; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/VavilovTest.h:5,Test,Test,5,math/mathmore/test/VavilovTest.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/VavilovTest.h,6,"['Test', 'test']","['Test', 'test']"
Testability,/**; The following function could be called to provide the maximum possible; value of pseudorapidity for a non-zero rho. This is log ( max/min ); where max and min are the extrema of positive values for type; long double.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/genvector/inc/Math/GenVector/etaMax.h:129,log,log,129,math/genvector/inc/Math/GenVector/etaMax.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/inc/Math/GenVector/etaMax.h,1,['log'],['log']
Testability,/**; Unit test for TMVA::IPythonInteractive located in TMVA/MethodBase.h; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:10,test,test,10,tmva/tmva/test/stressTMVA.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx,1,['test'],['test']
Testability,"/**; \class ROOT::Experimental::Internal::RPageNullSink; \ingroup NTuple; \brief Dummy sink that discards all pages. The RPageNullSink class is for internal testing only and can be used to measure the software overhead of serializing; elements into pages, without actually writing them onto disk or even serializing the RNTuple headers and footers.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RPageNullSink.hxx:157,test,testing,157,tree/ntuple/v7/inc/ROOT/RPageNullSink.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RPageNullSink.hxx,1,['test'],['testing']
Testability,"/**; \class TUnuranContDist; \ingroup Unuran. TUnuranContDist class describing one dimensional continuous distribution.; It is used by TUnuran to generate random numbers according to this distribution via; TUnuran::Sample(). The class can be constructed from a function (TF1) representing the probability density; function of the distribution. Optionally the derivative of the pdf can also be passed. It provides a method to set the domain of the distribution ( SetDomain ) which will correspond to the range; of the generated random numbers. By default the domain is (-inf, + inf), independently of the; range set in the TF1 class used to construct the distribution. In addition, some UNURAN methods requires extra information (cdf function, distribution mode,; area of pdf, etc...). This information can as well be set.; Some methods require instead of the pdf the log of the pdf.; This can also be controlled by setting a flag when constructing this class.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/unuran/inc/TUnuranContDist.h:867,log,log,867,math/unuran/inc/TUnuranContDist.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/inc/TUnuranContDist.h,1,['log'],['log']
Testability,"/**; apply a Log transformation of the data values; can be used for example when fitting an exponential or gaussian; Transform the data in place need to copy if want to preserve original data; The data sets must not contain negative values. IN case it does,; an empty data set is returned; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/BinData.h:13,Log,Log,13,math/mathcore/inc/Fit/BinData.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/BinData.h,2,['Log'],['Log']
Testability,/**; apply correction in the error matrix for the weights for likelihood fits; This method can be called only after a fit. The; passed function (loglw2) is a log-likelihood function implemented using the; sum of weight squared; When using FitConfig.SetWeightCorrection() this correction is applied; automatically when doing a likelihood fit (binned or unbinned); */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/Fitter.h:158,log,log-likelihood,158,math/mathcore/inc/Fit/Fitter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/Fitter.h,1,['log'],['log-likelihood']
Testability,"/**; declarations for functions which are not implemented by some compilers; */; /// log(1+x) with error cancelation when x is small",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/Math.h:85,log,log,85,math/mathcore/inc/Math/Math.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/Math.h,1,['log'],['log']
Testability,/**; flag to control if given function represent the log of a pdf; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/unuran/inc/TUnuranContDist.h:53,log,log,53,math/unuran/inc/TUnuranContDist.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/inc/TUnuranContDist.h,2,['log'],['log']
Testability,"/**; read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/inc/Math/SMatrix.h:117,assert,assert,117,math/smatrix/inc/Math/SMatrix.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/inc/Math/SMatrix.h,1,['assert'],['assert']
Testability,/**; read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/inc/Math/SMatrix.h:117,assert,assert,117,math/smatrix/inc/Math/SMatrix.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/inc/Math/SMatrix.h,1,['assert'],['assert']
Testability,/**; set log level; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/unuran/inc/TUnuran.h:9,log,log,9,math/unuran/inc/TUnuran.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/inc/TUnuran.h,1,['log'],['log']
Testability,/**; set stream for log and error (not yet implemented); */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/unuran/inc/TUnuran.h:20,log,log,20,math/unuran/inc/TUnuran.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/inc/TUnuran.h,1,['log'],['log']
Testability,"/**<; These functions are inner components of FSE_compress_usingCTable().; They allow the creation of custom streams, mixing multiple tables and bit sources. A key property to keep in mind is that encoding and decoding are done **in reverse direction**.; So the first symbol you will encode is the last you will decode, like a LIFO stack. You will need a few variables to track your CStream. They are :. FSE_CTable ct; // Provided by FSE_buildCTable(); BIT_CStream_t bitStream; // bitStream tracking structure; FSE_CState_t state; // State tracking structure (can have several). The first thing to do is to init bitStream and state.; size_t errorCode = BIT_initCStream(&bitStream, dstBuffer, maxDstSize);; FSE_initCState(&state, ct);. Note that BIT_initCStream() can produce an error code, so its result should be tested, using FSE_isError();; You can then encode your input data, byte after byte.; FSE_encodeSymbol() outputs a maximum of 'tableLog' bits at a time.; Remember decoding will be done in reverse direction.; FSE_encodeByte(&bitStream, &state, symbol);. At any time, you can also add any bit sequence.; Note : maximum allowed nbBits is 25, for compatibility with 32-bits decoders; BIT_addBits(&bitStream, bitField, nbBits);. The above methods don't commit data to memory, they just store it into local register, for speed.; Local register size is 64-bits on 64-bits systems, 32-bits on 32-bits systems (size_t).; Writing data to memory is a manual operation, performed by the flushBits function.; BIT_flushBits(&bitStream);. Your last FSE encoding operation shall be to flush your last state value(s).; FSE_flushState(&bitStream, &state);. Finally, you must close the bitStream.; The function returns the size of CStream in bytes.; If data couldn't fit into dstBuffer, it will return a 0 ( == not compressible); If there is an error, it returns an errorCode (which can be tested using FSE_isError()).; size_t size = BIT_closeCStream(&bitStream);; */; /* ***********************************",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:814,test,tested,814,builtins/zstd/common/fse.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h,1,['test'],['tested']
Testability,/*+test-under-mask*/,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZTargetTransformInfo.cpp:3,test,test-under-mask,3,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZTargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZTargetTransformInfo.cpp,1,['test'],['test-under-mask']
Testability,"/*-***************************************************************************; * Streaming decompression - HowTo; *; * A ZSTD_DStream object is required to track streaming operations.; * Use ZSTD_createDStream() and ZSTD_freeDStream() to create/release resources.; * ZSTD_DStream objects can be re-used multiple times.; *; * Use ZSTD_initDStream() to start a new decompression operation.; * @return : recommended first input size; * Alternatively, use advanced API to set specific properties.; *; * Use ZSTD_decompressStream() repetitively to consume your input.; * The function will update both `pos` fields.; * If `input.pos < input.size`, some input has not been consumed.; * It's up to the caller to present again remaining data.; * The function tries to flush all data decoded immediately, respecting output buffer size.; * If `output.pos < output.size`, decoder has flushed everything it could.; * But if `output.pos == output.size`, there might be some data left within internal buffers.,; * In which case, call ZSTD_decompressStream() again to flush whatever remains in the buffer.; * Note : with no additional input provided, amount of data flushed is necessarily <= ZSTD_BLOCKSIZE_MAX.; * @return : 0 when a frame is completely decoded and fully flushed,; * or an error code, which can be tested using ZSTD_isError(),; * or any other value > 0, which means there is still some decoding or flushing to do to complete current frame :; * the return value is a suggested next input size (just a hint for better latency); * that will never request more than the remaining frame size.; * *******************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:1300,test,tested,1300,builtins/zstd/zstd.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h,1,['test'],['tested']
Testability,"/*-**************************************************************; * bitStream encoding; ****************************************************************/; /*! BIT_initCStream() :; * `dstCapacity` must be > sizeof(size_t); * @return : 0 if success,; * otherwise an error code (can be tested using ERR_isError()) */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h:284,test,tested,284,builtins/zstd/common/bitstream.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/bitstream.h,1,['test'],['tested']
Testability,"/*---- unlikely / likely expressions -----------------------------------------*/; // These are meant to use in cases like:; // if (R__unlikely(expression)) { ... }; // in performance-critical sections. R__unlikely / R__likely provide hints to; // the compiler code generation to heavily optimize one side of a conditional,; // causing the other branch to have a heavy performance cost.; //; // It is best to use this for conditionals that test for rare error cases or; // backward compatibility code.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/RConfig.hxx:439,test,test,439,core/foundation/inc/ROOT/RConfig.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/RConfig.hxx,1,['test'],['test']
Testability,"/*---------------------------------------------------------------------------*/; /* Logarithm of gamma function */; /* A[]: Stirling's formula expansion of log gamma; * B[], C[]: log gamma function between 2 and 3; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephes.cxx:84,Log,Logarithm,84,math/mathcore/src/SpecFuncCephes.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephes.cxx,3,"['Log', 'log']","['Logarithm', 'log']"
Testability,"/*---------------------------------------------------------------------------*/; /* implementation of the incomplete beta function */; /**; * DESCRIPTION:; *; * Returns incomplete beta integral of the arguments, evaluated; * from zero to x. The function is defined as; *; * x; * - -; * | (a+b) | | a-1 b-1; * ----------- | t (1-t) dt.; * - - | |; * | (a) | (b) -; * 0; *; * The domain of definition is 0 <= x <= 1. In this; * implementation a and b are restricted to positive values.; * The integral from x to 1 may be obtained by the symmetry; * relation; *; * 1 - incbet( a, b, x ) = incbet( b, a, 1-x ).; *; * The integral is evaluated by a continued fraction expansion; * or, when b*x is small, by a power series.; *; * ACCURACY:; *; * Tested at uniformly distributed random points (a,b,x) with a and b; * in ""domain"" and x between 0 and 1.; * Relative error; * arithmetic domain # trials peak rms; * IEEE 0,5 10000 6.9e-15 4.5e-16; * IEEE 0,85 250000 2.2e-13 1.7e-14; * IEEE 0,1000 30000 5.3e-12 6.3e-13; * IEEE 0,10000 250000 9.3e-11 7.1e-12; * IEEE 0,100000 10000 8.7e-10 4.8e-11; * Outputs smaller than the IEEE gradual underflow threshold; * were excluded from these statistics.; *; * ERROR MESSAGES:; * message condition value returned; * incbet domain x<0, x>1 0.0; * incbet underflow 0.0; *; * Cephes Math Library, Release 2.8: June, 2000; * Copyright 1984, 1995, 2000 by Stephen L. Moshier; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephes.cxx:740,Test,Tested,740,math/mathcore/src/SpecFuncCephes.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephes.cxx,1,['Test'],['Tested']
Testability,/*---------------------------------------------------------------------------*/; //#define kMAXLGM 2.556348e305; /*---------------------------------------------------------------------------*/; /* implementation based on cephes log gamma */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephes.cxx:228,log,log,228,math/mathcore/src/SpecFuncCephes.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephes.cxx,1,['log'],['log']
Testability,/*----------------------------------------------------------------------------*\; |* Bit Counting and Testing; \*----------------------------------------------------------------------------*/,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/intrin.h:102,Test,Testing,102,interpreter/llvm-project/clang/lib/Headers/intrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/intrin.h,1,['Test'],['Testing']
Testability,"/*. Double_t alpha = 0;; Double_t delta = fDeltaPruneStrength;. DecisionTree* dcopy;; std::vector<Double_t> q;; multimap<Double_t,Double_t> quality;; Int_t nnodes=fTree->GetNNodes();. // find the maximum prune strength that still leaves some nodes; Bool_t forceStop = kFALSE;; Int_t troubleCount=0, previousNnodes=nnodes;. nnodes=fTree->GetNNodes();; while (nnodes > 3 && !forceStop) {; dcopy = new DecisionTree(*fTree);; dcopy->SetPruneStrength(alpha+=delta);; dcopy->PruneTree();; q.push_back(TestTreeQuality(dcopy));; quality.insert(std::pair<const Double_t,Double_t>(q.back(),alpha));; nnodes=dcopy->GetNNodes();; if (previousNnodes == nnodes) troubleCount++;; else {; troubleCount=0; // reset counter; if (nnodes < previousNnodes / 2 ) fDeltaPruneStrength /= 2.;; }; previousNnodes = nnodes;; if (troubleCount > 20) {; if (methodIndex == 0 && fPruneStrength <=0) {//maybe you need larger stepsize ??; fDeltaPruneStrength *= 5;; Log() << kINFO << ""<PruneTree> trouble determining optimal prune strength""; << "" for Tree "" << methodIndex; << "" --> first try to increase the step size""; << "" currently Prunestrenght= "" << alpha; << "" stepsize "" << fDeltaPruneStrength << "" "" << Endl;; troubleCount = 0; // try again; fPruneStrength = 1; // if it was for the first time..; } else if (methodIndex == 0 && fPruneStrength <=2) {//maybe you need much larger stepsize ??; fDeltaPruneStrength *= 5;; Log() << kINFO << ""<PruneTree> trouble determining optimal prune strength""; << "" for Tree "" << methodIndex; << "" --> try to increase the step size even more.. ""; << "" if that still didn't work, TRY IT BY HAND""; << "" currently Prunestrenght= "" << alpha; << "" stepsize "" << fDeltaPruneStrength << "" "" << Endl;; troubleCount = 0; // try again; fPruneStrength = 3; // if it was for the first time..; } else {; forceStop=kTRUE;; Log() << kINFO << ""<PruneTree> trouble determining optimal prune strength""; << "" for Tree "" << methodIndex << "" at tested prune strength: "" << alpha << "" --> abort forced, use same st",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDT.cxx:495,Test,TestTreeQuality,495,tmva/tmva/src/MethodDT.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDT.cxx,1,['Test'],['TestTreeQuality']
Testability,/*; * $Header$; * $Log$; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/periodic/NdbDefs.h:19,Log,Log,19,test/periodic/NdbDefs.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/NdbDefs.h,12,['Log'],['Log']
Testability,/*; * $Header$; * $Log$; *; * Array of Elements with names and mnemonics; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSElementList.h:19,Log,Log,19,test/periodic/XSElementList.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSElementList.h,1,['Log'],['Log']
Testability,"/*; * $Header$; * $Log$; *; * Fills a listbox with the elements sorted, by name, mnemonic, or Z; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSElementList.cxx:19,Log,Log,19,test/periodic/XSElementList.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSElementList.cxx,1,['Log'],['Log']
Testability,/*; * $Header$; * $Log$; *; * Implements the periodic table of elements; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSPeriodicTable.cxx:19,Log,Log,19,test/periodic/XSPeriodicTable.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSPeriodicTable.cxx,1,['Log'],['Log']
Testability,/*; * $Header$; * $Log$; *; * The graphical user interface for the Neutron Cross section database; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSGui.cxx:19,Log,Log,19,test/periodic/XSGui.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSGui.cxx,1,['Log'],['Log']
Testability,"/*; * $Header$; * $Log$; *; * Various routines, and global variables; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSVarious.cxx:19,Log,Log,19,test/periodic/XSVarious.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/XSVarious.cxx,2,['Log'],['Log']
Testability,"/*; * About virtual array management:; *; * The above ""normal"" array routines are only used to allocate strip buffers; * (as wide as the image, but just a few rows high). Full-image-sized buffers; * are handled as ""virtual"" arrays. The array is still accessed a strip at a; * time, but the memory manager must save the whole array for repeated; * accesses. The intended implementation is that there is a strip buffer in; * memory (as high as is possible given the desired memory limit), plus a; * backing file that holds the rest of the array.; *; * The request_virt_array routines are told the total size of the image and; * the maximum number of rows that will be accessed at once. The in-memory; * buffer must be at least as large as the maxaccess value.; *; * The request routines create control blocks but not the in-memory buffers.; * That is postponed until realize_virt_arrays is called. At that time the; * total amount of space needed is known (approximately, anyway), so free; * memory can be divided up fairly.; *; * The access_virt_array routines are responsible for making a specific strip; * area accessible (after reading or writing the backing file, if necessary).; * Note that the access routines are told whether the caller intends to modify; * the accessed strip; during a read-only pass this saves having to rewrite; * data to disk. The access routines are also responsible for pre-zeroing; * any newly accessed rows, if pre-zeroing was requested.; *; * In current usage, the access requests are usually for nonoverlapping; * strips; that is, successive access start_row numbers differ by exactly; * num_rows = maxaccess. This means we can get good performance with simple; * buffer dump/reload logic, by making the in-memory buffer be a multiple; * of the access height; then there will never be accesses across bufferload; * boundaries. The code will still work with overlapping access requests,; * but it doesn't handle bufferload overlaps very efficiently.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:1716,log,logic,1716,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,1,['log'],['logic']
Testability,"/*; * Check the upper and lower edge of ""regUp"", to make sure that the; * eUp->Dst is above eLo, or eLo->Dst is below eUp (depending on which; * destination is rightmost).; *; * Theoretically, this should always be true. However, splitting an edge; * into two pieces can change the results of previous tests. For example,; * suppose at one point we checked eUp and eLo, and decided that eUp->Dst; * is barely above eLo. Then later, we split eLo into two edges (eg. from; * a splice operation like this one). This can change the result of; * the test so that now eUp->Dst is incident to eLo, or barely below it.; * We must correct this condition to maintain the dictionary invariants; * (otherwise new edges might get inserted in the wrong place in the; * dictionary, and bad stuff will happen).; *; * We fix the problem by just splicing the offending vertex into the; * other edge.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/glu/sweep.c:302,test,tests,302,graf3d/eve7/glu/sweep.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/glu/sweep.c,2,['test'],"['test', 'tests']"
Testability,"/*; * Check the upper and lower edge of ""regUp"", to make sure that the; * eUp->Org is above eLo, or eLo->Org is below eUp (depending on which; * origin is leftmost).; *; * The main purpose is to splice right-going edges with the same; * dest vertex and nearly identical slopes (ie. we can't distinguish; * the slopes numerically). However the splicing can also help us; * to recover from numerical errors. For example, suppose at one; * point we checked eUp and eLo, and decided that eUp->Org is barely; * above eLo. Then later, we split eLo into two edges (eg. from; * a splice operation like this one). This can change the result of; * our test so that now eUp->Org is incident to eLo, or barely below it.; * We must correct this condition to maintain the dictionary invariants.; *; * One possibility is to check these edges for intersection again; * (ie. CheckForIntersect). This is what we do if possible. However; * CheckForIntersect requires that tess->event lies between eUp and eLo,; * so that it has something to fall back on when the intersection; * calculation gives us an unusable answer. So, for those cases where; * we can't check for intersection, this routine fixes the problem; * by just splicing the offending vertex into the other edge.; * This is a guaranteed solution, no matter how degenerate things get.; * Basically this is a combinatorial solution to a numerical problem.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/glu/sweep.c:642,test,test,642,graf3d/eve7/glu/sweep.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/glu/sweep.c,1,['test'],['test']
Testability,"/*; * Copyright (c) 2016-2020, Yann Collet, Facebook, Inc.; * All rights reserved.; *; * This source code is licensed under both the BSD-style license (found in the; * LICENSE file in the root directory of this source tree) and the GPLv2 (found; * in the COPYING file in the root directory of this source tree).; * You may select, at your option, one of the above-listed licenses.; */; /* zstd_ddict.c :; * concentrates all logic that needs to know the internals of ZSTD_DDict object */; /*-*******************************************************; * Dependencies; *********************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_ddict.c:424,log,logic,424,builtins/zstd/decompress/zstd_ddict.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/decompress/zstd_ddict.c,1,['log'],['logic']
Testability,"/*; * Creates data for use by the test. Returns a tuple of a TTree and an id; * vector. The TTree can be used by a dataloader to create a DataSet. The id; * vector can be used to verify that the splitting was done correctly.; *; * \param nPoints Number of data points to generate; * \param start Start value for the id, can be used to differentiate trees.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/TestCrossValidationSplitting.cxx:34,test,test,34,tmva/tmva/test/crossvalidation/TestCrossValidationSplitting.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/TestCrossValidationSplitting.cxx,1,['test'],['test']
Testability,"/*; * Debug(!) function for printing matrices.; *; * Prints the input expression `mat` using preprocessor directives (with; * `#mat`). E.g. `PrintMatrix(matA, ""Test"")` _could_ generate; * ""matA is null pointer"".; *; * Note: This is a preprocessor macro. It does _not_ respect namespaces.; *; * @param mat Matrix to print; * @param text Name of matrix; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuMatrix.h:160,Test,Test,160,tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuMatrix.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuMatrix.h,1,['Test'],['Test']
Testability,"/*; * Forcibly suppress or un-suppress all quantization and Huffman tables.; * Marks all currently defined tables as already written (if suppress); * or not written (if !suppress). This will control whether they get emitted; * by a subsequent jpeg_start_compress call.; *; * This routine is exported for use by applications that want to produce; * abbreviated JPEG datastreams. It logically belongs in jcparam.c, but; * since it is called by jpeg_start_compress, we put it here --- otherwise; * jcparam.o would be linked whether the application used it or not.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jcapimin.c:381,log,logically,381,graf2d/asimage/src/libAfterImage/libjpeg/jcapimin.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jcapimin.c,1,['log'],['logically']
Testability,"/*; * Load validation data to numpy array; */; // NOTE: TMVA Validation data is a subset of all the training data; // we will not use test data for validation. They will be used for the real testing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx:134,test,test,134,tmva/pymva/src/MethodPyTorch.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyTorch.cxx,2,['test'],"['test', 'testing']"
Testability,"/*; * Load validation data to numpy array; */; // NOTE: from TMVA, we get the validation data as a subset of all the training data; // we will not use test data for validation. They will be used for the real testing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx:151,test,test,151,tmva/pymva/src/MethodPyKeras.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx,2,['test'],"['test', 'testing']"
Testability,"/*; * Non-NULL select and dcomp pointers are *NOT* tested, but should be OK.; * They are not used by afterstep however, so this implementation should; * be good enough.; *; * c.ridd@isode.com; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/afterbase.c:51,test,tested,51,graf2d/asimage/src/libAfterImage/afterbase.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/afterbase.c,1,['test'],['tested']
Testability,"/*; * Project: RooFit; * Authors:; * PB, Patrick Bos, Netherlands eScience Center, p.bos@esciencecenter.nl; *; * Copyright (c) 2021, CERN; *; * Redistribution and use in source and binary forms,; * with or without modification, are permitted according to the terms; * listed in LICENSE (http://roofit.sourceforge.net/license.txt); */; /**; \file RooBinnedL.cxx; \class RooBinnedL; \ingroup Roofitcore. Implements a -log(likelihood) calculation from a dataset; (assumed to be binned) and a PDF. The NLL is calculated as; \f[; \sum_\mathrm{data} -\log( \mathrm{pdf}(x_\mathrm{data})); \f]; In extended mode, a; \f$ N_\mathrm{expect} - N_\mathrm{observed}*log(N_\mathrm{expect}) \f$ term is added.; **/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/TestStatistics/RooBinnedL.cxx:416,log,log,416,roofit/roofitcore/src/TestStatistics/RooBinnedL.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/TestStatistics/RooBinnedL.cxx,3,['log'],['log']
Testability,"/*; * Project: RooFit; * Authors:; * PB, Patrick Bos, Netherlands eScience Center, p.bos@esciencecenter.nl; *; * Copyright (c) 2021, CERN; *; * Redistribution and use in source and binary forms,; * with or without modification, are permitted according to the terms; * listed in LICENSE (http://roofit.sourceforge.net/license.txt); */; /**; \file RooSubsidiaryL.cxx; \class RooSubsidiaryL; \ingroup Roofitcore. \brief Calculates the sum of the -(log) likelihoods of a set of RooAbsPdf objects that represent; subsidiary or constraint functions. This class is used to gather all subsidiary PDF terms from the component PDFs of RooSumL likelihoods and calculate the; composite -log(L). Such subsidiary terms can be marked using RooFit::Constrain arguments to RooAbsPdf::fitTo() or; RooAbsPdf::createNLL(). Subsidiary terms are summed separately for increased numerical stability, since these terms are often small and cause; numerical variances in their original PDFs, whereas by summing as one separate subsidiary collective term, it is; numerically very stable. \note When a subsidiary PDF is part of multiple component PDFs, it will only be summed once in this class! This doesn't; change the derivative of the log likelihood (which is what matters in fitting the likelihood), but does change the; value of the (log-)likelihood itself.; **/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/TestStatistics/RooSubsidiaryL.cxx:445,log,log,445,roofit/roofitcore/src/TestStatistics/RooSubsidiaryL.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/TestStatistics/RooSubsidiaryL.cxx,4,['log'],['log']
Testability,"/*; * Project: RooFit; * Authors:; * PB, Patrick Bos, Netherlands eScience Center, p.bos@esciencecenter.nl; *; * Copyright (c) 2021, CERN; *; * Redistribution and use in source and binary forms,; * with or without modification, are permitted according to the terms; * listed in LICENSE (http://roofit.sourceforge.net/license.txt); */; /**; \file RooUnbinnedL.cxx; \class RooUnbinnedL; \ingroup Roofitcore. A -log(likelihood) calculation from a dataset; (assumed to be unbinned) and a PDF. The NLL is calculated as; \f[; \sum_\mathrm{data} -\log( \mathrm{pdf}(x_\mathrm{data})); \f]; In extended mode, a; \f$ N_\mathrm{expect} - N_\mathrm{observed}*log(N_\mathrm{expect}) \f$ term is added.; **/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/TestStatistics/RooUnbinnedL.cxx:409,log,log,409,roofit/roofitcore/src/TestStatistics/RooUnbinnedL.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/TestStatistics/RooUnbinnedL.cxx,3,['log'],['log']
Testability,"/*; * Several decompression processes need to range-limit values to the range; * 0..MAXJSAMPLE; the input value may fall somewhat outside this range; * due to noise introduced by quantization, roundoff error, etc. These; * processes are inner loops and need to be as fast as possible. On most; * machines, particularly CPUs with pipelines or instruction prefetch,; * a (subscript-check-less) C table lookup; *		x = sample_range_limit[x];; * is faster than explicit tests; *		if (x < 0) x = 0;; *		else if (x > MAXJSAMPLE) x = MAXJSAMPLE;; * These processes all use a common table prepared by the routine below.; *; * For most steps we can mathematically guarantee that the initial value; * of x is within MAXJSAMPLE+1 of the legal range, so a table running from; * -(MAXJSAMPLE+1) to 2*MAXJSAMPLE+1 is sufficient. But for the initial; * limiting step (just after the IDCT), a wildly out-of-range value is ; * possible if the input data is corrupt. To avoid any chance of indexing; * off the end of memory and getting a bad-pointer trap, we perform the; * post-IDCT limiting thus:; *		x = range_limit[x & MASK];; * where MASK is 2 bits wider than legal sample data, ie 10 bits for 8-bit; * samples. Under normal circumstances this is more than enough range and; * a correct output will be generated; with bogus input data the mask will; * cause wraparound, and we will safely generate a bogus-but-in-range output.; * For the post-IDCT step, we want to convert the data from signed to unsigned; * representation by adding CENTERJSAMPLE at the same time that we limit it.; * So the post-IDCT limiting table ends up looking like this:; * CENTERJSAMPLE,CENTERJSAMPLE+1,...,MAXJSAMPLE,; * MAXJSAMPLE (repeat 2*(MAXJSAMPLE+1)-CENTERJSAMPLE times),; * 0 (repeat 2*(MAXJSAMPLE+1)-CENTERJSAMPLE times),; * 0,1,...,CENTERJSAMPLE-1; * Negative inputs select values from the upper half of the table after; * masking.; *; * We can save some space by overlapping the start of the post-IDCT table; * with the simpler ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c:465,test,tests,465,graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c,1,['test'],['tests']
Testability,"/*; * Structure for [] character-set representation. Character sets are; * done as bit vectors, grouped 8 to a byte vector for compactness.; * The individual set therefore has both a pointer to the byte vector; * and a mask to pick out the relevant bit of each byte. A hash code; * simplifies testing whether two sets could be identical.; *; * This will get trickier for multicharacter collating elements. As; * preliminary hooks for dealing with such things, we also carry along; * a string of multi-character elements, and decide the size of the; * vectors at run time.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regex2.h:293,test,testing,293,interpreter/llvm-project/llvm/lib/Support/regex2.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regex2.h,1,['test'],['testing']
Testability,/*; * The tests above are checking for IMAGE_FILE_HEADER.Machine; * if it contains supported machine formats (currently ARM and x86); * and IMAGE_FILE_HEADER.Characteristics == 0 indicating that; * this is not linked COFF OBJ file;; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/misc/win/bindexplib/bindexplib.cxx:10,test,tests,10,misc/win/bindexplib/bindexplib.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/win/bindexplib/bindexplib.cxx,1,['test'],['tests']
Testability,/*; * The tolerance for the curve test is put to 0.4 instead of 0.2 to take into; * account the small variations in the values of the likelihood which can occur; * in presence of a different treatment of floating point numbers.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/res/RooUnitTest.h:34,test,test,34,roofit/roofitcore/res/RooUnitTest.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/res/RooUnitTest.h,1,['test'],['test']
Testability,/*; * This class is a friend class to the unit under test and its main purpose is; * to forward calls to private functions.; *; * It also provides a static test environment so that the creation of dataset; * and any potetial shared operations (e.g. training) is executed only once; * for all tests.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/TestOptimizeConfigParameters.cxx:53,test,test,53,tmva/tmva/test/TestOptimizeConfigParameters.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/TestOptimizeConfigParameters.cxx,3,['test'],"['test', 'tests']"
Testability,/*; * This method checks if the given test string is matched against the pattern; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/BaseSelectionRule.cxx:38,test,test,38,core/dictgen/src/BaseSelectionRule.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/BaseSelectionRule.cxx,1,['test'],['test']
Testability,"/*; * This test reproduces a particular issue happening in analysis logic; * including both systematic variations and filters, with the order; *; * 1. Some call to Vary; * 2. Filter depending on the first Vary; * 3. Another Vary that depends on the Filter; *; * The logic that reproduces the problem is shown in the above function; * `dataframe_cloning_vary_with_filters_analysis`. In particular, the; * lambda used in the Vary call (3) calls ROOT::VecOps::Take(vec, 4),; * thus only works if `vec` has at least size `4`.; *; * In a previous implementation of cloning `RVariedAction`, the cloned action; * was connected to the wrong upstream filter (in fact, it was using a varied; * filter from the original action as if it was the nominal filter). This would; * then pass to the lambda used in the downstream Vary call (3) a vector; * `jet_pt` from which only 3 entries pass `jet_pt_mask`, eventually producing; * an error when reaching the `Take(jet_pt[jet_pt_mask], 4)` call.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_cloning.cxx:11,test,test,11,tree/dataframe/test/dataframe_cloning.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_cloning.cxx,3,"['log', 'test']","['logic', 'test']"
Testability,"/*; * \brief Evaluate (part of) the likelihood over a given range of events and components; *; * A fractional event range is used because components may have different numbers of events. For a; * multi-component RooSumL, for instance, this means the caller need not indicate for each component which event; * ranges they want to evaluate, but can just pass one overall fractional range.; *; * \param[in] events The fractional event range.; * \param[in] components_begin The first component to be calculated.; * \param[in] components_end The *exclusive* upper limit to the range of components to be calculated, i.e. the; * component *before this one* is the last to be included. \return The value of part of the negative log likelihood,; * returned as a KahanSum object which also includes a carry term.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/TestStatistics/RooAbsL.h:720,log,log,720,roofit/roofitcore/inc/RooFit/TestStatistics/RooAbsL.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/TestStatistics/RooAbsL.h,1,['log'],['log']
Testability,"/*; * delaunayTriangulation.cxx; *; * Created on: Jun 30, 2014; * Author: dfunke; *; * This test creates a TGraph2D, fills it with 3 points and then performs; * the Delaunay triangulation of them.; *; * Because of bug ROOT-XXX the data structures were not properly initialized and no triangle was found; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/delaunayTriangulation.cxx:92,test,test,92,test/delaunayTriangulation.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/delaunayTriangulation.cxx,1,['test'],['test']
Testability,"/*; * jcdctmgr.c; *; * Copyright (C) 1994-1996, Thomas G. Lane.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains the forward-DCT management logic.; * This code selects a particular DCT implementation to be used,; * and it performs related housekeeping chores including coefficient; * quantization.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jcdctmgr.c:256,log,logic,256,graf2d/asimage/src/libAfterImage/libjpeg/jcdctmgr.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jcdctmgr.c,1,['log'],['logic']
Testability,"/*; * jcinit.c; *; * Copyright (C) 1991-1997, Thomas G. Lane.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains initialization logic for the JPEG compressor.; * This routine is in charge of selecting the modules to be executed and; * making an initialization call to each one.; *; * Logically, this code belongs in jcmaster.c. It's split out because; * linking this routine implies linking the entire compression library.; * For a transcoding-only application, we want to be able to use jcmaster.c; * without linking in the whole library.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jcinit.c:242,log,logic,242,graf2d/asimage/src/libAfterImage/libjpeg/jcinit.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jcinit.c,2,"['Log', 'log']","['Logically', 'logic']"
Testability,"/*; * jcmaster.c; *; * Copyright (C) 1991-1997, Thomas G. Lane.; * Modified 2003-2010 by Guido Vollbeding.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains master control logic for the JPEG compressor.; * These routines are concerned with parameter validation, initial setup,; * and inter-pass control (determining the number of passes and the work ; * to be done in each pass).; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jcmaster.c:287,log,logic,287,graf2d/asimage/src/libAfterImage/libjpeg/jcmaster.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jcmaster.c,1,['log'],['logic']
Testability,"/*; * jddctmgr.c; *; * Copyright (C) 1994-1996, Thomas G. Lane.; * Modified 2002-2010 by Guido Vollbeding.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains the inverse-DCT management logic.; * This code selects a particular IDCT implementation to be used,; * and it performs related housekeeping chores. No code in this file; * is executed per IDCT step, only during output pass setup.; *; * Note that the IDCT routines are responsible for performing coefficient; * dequantization as well as the IDCT proper. This module sets up the; * dequantization multiplier table needed by the IDCT routine.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jddctmgr.c:299,log,logic,299,graf2d/asimage/src/libAfterImage/libjpeg/jddctmgr.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jddctmgr.c,1,['log'],['logic']
Testability,"/*; * jdinput.c; *; * Copyright (C) 1991-1997, Thomas G. Lane.; * Modified 2002-2009 by Guido Vollbeding.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains input control logic for the JPEG decompressor.; * These routines are concerned with controlling the decompressor's input; * processing (marker reading and coefficient decoding). The actual input; * reading is done in jdmarker.c, jdhuff.c, and jdarith.c.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdinput.c:285,log,logic,285,graf2d/asimage/src/libAfterImage/libjpeg/jdinput.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdinput.c,1,['log'],['logic']
Testability,"/*; * jdmaster.c; *; * Copyright (C) 1991-1997, Thomas G. Lane.; * Modified 2002-2009 by Guido Vollbeding.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains master control logic for the JPEG decompressor.; * These routines are concerned with selecting the modules to be executed; * and with determining the number of passes and the work to be done in each; * pass.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c:287,log,logic,287,graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmaster.c,1,['log'],['logic']
Testability,"/*; * jmemmgr.c; *; * Copyright (C) 1991-1997, Thomas G. Lane.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains the JPEG system-independent memory management; * routines. This code is usable across a wide variety of machines; most; * of the system dependencies have been isolated in a separate file.; * The major functions provided here are:; * * pool-based allocation and freeing of memory;; * * policy decisions about how to divide available memory among the; * virtual arrays;; * * control logic for swapping virtual arrays between main memory and; * backing storage.; * The separate system-dependent file provides the actual backing-storage; * access code, and it contains the policy decision about how much total; * main memory to use.; * This file is system-dependent in the sense that some of its functions; * are unnecessary in some systems. For example, if there is enough virtual; * memory so that backing storage will never be used, much of the virtual; * array control logic could be removed. (Of course, if you have that much; * memory then you shouldn't care about a little bit of unused code...); */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c:609,log,logic,609,graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jmemmgr.c,2,['log'],['logic']
Testability,"/*; * jpeg_natural_order[i] is the natural-order position of the i'th element; * of zigzag order.; *; * When reading corrupted data, the Huffman decoders could attempt; * to reference an entry beyond the end of this array (if the decoded; * zero run length reaches past the end of the block). To prevent; * wild stores without adding an inner-loop test, we put some extra; * ""63""s after the real entries. This will cause the extra coefficient; * to be stored in location 63 of the block, not somewhere random.; * The worst case would be a run-length of 15, which means we need 16; * fake entries.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jutils.c:348,test,test,348,graf2d/asimage/src/libAfterImage/libjpeg/jutils.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jutils.c,1,['test'],['test']
Testability,"/*; * runtime test, presumed to simplify to a constant by compiler; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h:14,test,test,14,builtins/xxhash/xxhash.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h,1,['test'],['test']
Testability,"/*; * testbits.cxx -- unit tests for the new functionality in the TBits class; * by Filip Pizlo, 2004; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/testbits.cxx:6,test,testbits,6,test/testbits.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/testbits.cxx,2,['test'],"['testbits', 'tests']"
Testability,"/*; *; * Inverse of Normal distribution function; *; *; *; * SYNOPSIS:; *; * double x, y, ndtri();; *; * x = ndtri( y );; *; *; *; * DESCRIPTION:; *; * Returns the argument, x, for which the area under the; * Gaussian probability density function (integrated from; * minus infinity to x) is equal to y.; *; *; * For small arguments 0 < y < exp(-2), the program computes; * z = sqrt( -2.0 * log(y) ); then the approximation is; * x = z - log(z)/z - (1/z) P(1/z) / Q(1/z).; * There are two rational functions P/Q, one for 0 < y < exp(-32); * and the other for y up to exp(-2). For larger arguments,; * w = y - 0.5, and x/sqrt(2pi) = w + w**3 R(w**2)/S(w**2)).; *; *; * ACCURACY:; *; * Relative error:; * arithmetic domain # trials peak rms; * DEC 0.125, 1 5500 9.5e-17 2.1e-17; * DEC 6e-39, 0.135 3500 5.7e-17 1.3e-17; * IEEE 0.125, 1 20000 7.2e-16 1.3e-16; * IEEE 3e-308, 0.135 50000 4.6e-16 9.8e-17; *; *; * ERROR MESSAGES:; *; * message condition value returned; * ndtri domain x <= 0 -MAXNUM; * ndtri domain x >= 1 MAXNUM; *; */; /*; Cephes Math Library Release 2.8: June, 2000; Copyright 1984, 1987, 1989, 2000 by Stephen L. Moshier; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephesInv.cxx:390,log,log,390,math/mathcore/src/SpecFuncCephesInv.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephesInv.cxx,2,['log'],['log']
Testability,"/*; *; * Inverse of complemented incomplete gamma integral; *; *; *; * SYNOPSIS:; *; * double a, x, p, igami();; *; * x = igami( a, p );; *; * DESCRIPTION:; *; * Given p, the function finds x such that; *; * igamc( a, x ) = p.; *; * Starting with the approximate value; *; * 3; * x = a t; *; * where; *; * t = 1 - d - ndtri(p) sqrt(d); *; * and; *; * d = 1/9a,; *; * the routine performs up to 10 Newton iterations to find the; * root of igamc(a,x) - p = 0.; *; * ACCURACY:; *; * Tested at random a, p in the intervals indicated.; *; * a p Relative error:; * arithmetic domain domain # trials peak rms; * IEEE 0.5,100 0,0.5 100000 1.0e-14 1.7e-15; * IEEE 0.01,0.5 0,0.5 100000 9.0e-14 3.4e-15; * IEEE 0.5,10000 0,0.5 20000 2.3e-13 3.8e-14; */; /*; Cephes Math Library Release 2.8: June, 2000; Copyright 1984, 1987, 1995, 2000 by Stephen L. Moshier; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephesInv.cxx:480,Test,Tested,480,math/mathcore/src/SpecFuncCephesInv.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephesInv.cxx,1,['Test'],['Tested']
Testability,"/*; // The contiguity has been dropped since now caching is backed up by a TDS; // TODO: we can optimise this. The reason why addresses are not contiguous with; // data sources (now cache is achieved with a data source) is linked to Snapshot.; // Indeed we need to set an address for each branch and keep that constant; // through the entire event loop (this is how the TTree works!).; // We could remove this constraint from data sources if Snapshot offered some; // sort of cache to which the data is copied.; TEST(Cache, Contiguity); {; ROOT::RDataFrame tdf(2);; auto f = 0.f;; auto cached = tdf.Define(""float"", [&f]() { return f++; }).Cache<float>({""float""});; int counter = 0;; float *fPrec = nullptr;; auto count = [&counter, &fPrec](float &ff) {; if (1 == counter++) {; EXPECT_EQ(1, std::distance(fPrec, &ff));; }; fPrec = &ff;; };; cached.Foreach(count, {""float""});; }; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_cache.cxx:512,TEST,TEST,512,tree/dataframe/test/dataframe_cache.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_cache.cxx,1,['TEST'],['TEST']
Testability,"/*; /// This test was deactivated because it is not possible to Sum Strings using a Kahan Sum.; /// The reason is that there is no minus operator for that case.; TEST(RDFSimpleTests, SumOfStrings); {; auto df = RDataFrame(2).Define(""str"", []() -> std::string { return ""bla""; });; EXPECT_EQ(*df.Sum<std::string>(""str""), ""blabla"");; }; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_simple.cxx:13,test,test,13,tree/dataframe/test/dataframe_simple.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_simple.cxx,2,"['TEST', 'test']","['TEST', 'test']"
Testability,"/*; ////////////////////////////////////////////////////////////////////////////////; /// logical operation source1 != val. template<class Element>; TMatrixT<Element> operator!=(const TMatrixT<Element> &source1,Element val); {; TMatrixT<Element> target; target.ResizeTo(source1);. const Element *sp = source1.GetMatrixArray();; Element *tp = target.GetMatrixArray();; const Element * const tp_last = tp+target.GetNoElements();; while (tp != tp_last) {; *tp++ = (*sp != val); sp++;; }. return target;; }. ////////////////////////////////////////////////////////////////////////////////; /// logical operation source1 != val. template<class Element>; TMatrixT<Element> operator!=(Element val,const TMatrixT<Element> &source1); {; return operator!=(source1,val);; }; */; ////////////////////////////////////////////////////////////////////////////////; /// Modify addition: target += scalar * source.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx:90,log,logical,90,math/matrix/src/TMatrixT.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx,2,['log'],['logical']
Testability,"/*; ////////////////////////////////////////////////////////////////////////////////; ///; /// Test size to build kdtree; ///. void TestSizeIF(Int_t nsec, Int_t nrows, Int_t npoints, Int_t bsize, Int_t mode); {; Float_t before =Mem();; for (Int_t isec=0; isec<nsec;isec++); for (Int_t irow=0;irow<nrows;irow++){; TestkdtreeIF(npoints,1,mode,bsize);; }; Float_t after = Mem();; printf(""Memory usage %f\n"",after-before);; }; */; /*; ////////////////////////////////////////////////////////////////////////////////; ///; /// Test speed and functionality of 2D kdtree.; /// Input parameters:; /// npoints - number of data points; /// bsize - bucket size; /// nloop - number of loops; /// mode - tasks to be performed by the kdTree; /// - 0 : time building the tree; ///. void TestkdtreeIF(Int_t npoints, Int_t bsize, Int_t nloop, Int_t mode); {. Float_t rangey = 100;; Float_t rangez = 100;; Float_t drangey = 0.1;; Float_t drangez = 0.1;. //; Float_t *data0 = new Float_t[npoints*2];; Float_t *data[2];; data[0] = &data0[0];; data[1] = &data0[npoints];; //Int_t i;; for (Int_t i=0; i<npoints; i++){; data[0][i] = gRandom->Uniform(-rangey, rangey);; data[1][i] = gRandom->Uniform(-rangez, rangez);; }; TStopwatch timer;. // check time build; printf(""building kdTree ...\n"");; timer.Start(kTRUE);; TKDTreeIF *kdtree = new TKDTreeIF(npoints, 2, bsize, data);; kdtree->Build();; timer.Stop();; timer.Print();; if(mode == 0) return;. Float_t countern=0;; Float_t counteriter = 0;; Float_t counterfound = 0;. if (mode ==2){; if (nloop) timer.Start(kTRUE);; Int_t *res = new Int_t[npoints];; Int_t nfound = 0;; for (Int_t kloop = 0;kloop<nloop;kloop++){; if (kloop==0){; counteriter = 0;; counterfound= 0;; countern = 0;; }; for (Int_t i=0;i<npoints;i++){; Float_t point[2]={data[0][i],data[1][i]};; Float_t delta[2]={drangey,drangez};; Int_t iter =0;; nfound =0;; Int_t bnode =0;; //kdtree->FindBNode(point,delta, bnode);; //continue;; kdtree->FindInRangeA(point,delta,res,nfound,iter,bnode);; if (kloop==0){; ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/kDTreeTest.cxx:95,Test,Test,95,math/mathcore/test/kDTreeTest.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/kDTreeTest.cxx,5,['Test'],"['Test', 'TestSizeIF', 'TestkdtreeIF']"
Testability,"/*; //fill fine binned histos for testing; if(prefix.Contains(""Test"")){; std::vector<std::vector<TH1F*> > histos_highbin;; for (UInt_t iCls = 0; iCls < dsi->GetNClasses(); iCls++) {; histos_highbin.push_back(std::vector<TH1F*>(0));; for (UInt_t jCls = 0; jCls < dsi->GetNClasses(); jCls++) {; TString name = TString::Format(""%s_%s_prob_for_%s_HIGHBIN"",prefix.Data(),; dsi->GetClassInfo( jCls )->GetName().Data(),; dsi->GetClassInfo( iCls )->GetName().Data());; histos_highbin.at(iCls).push_back(new TH1F(name,name,nbins_high,xmin,xmax));; }; }. for (Int_t ievt=0; ievt<ds->GetNEvents(); ievt++) {; const Event* ev = ds->GetEvent(ievt);; Int_t cls = ev->GetClass();; Float_t w = ev->GetWeight();; for (UInt_t jCls = 0; jCls < dsi->GetNClasses(); jCls++) {; histos_highbin.at(cls).at(jCls)->Fill(fMultiClassValues[ievt][jCls],w);; }; }; for (UInt_t iCls = 0; iCls < dsi->GetNClasses(); iCls++) {; for (UInt_t jCls = 0; jCls < dsi->GetNClasses(); jCls++) {; gTools().NormHist( histos_highbin.at(iCls).at(jCls) );; Store(histos_highbin.at(iCls).at(jCls));; }; }; }; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ResultsMulticlass.cxx:34,test,testing,34,tmva/tmva/src/ResultsMulticlass.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ResultsMulticlass.cxx,2,"['Test', 'test']","['Test', 'testing']"
Testability,"/*; All dynamically allocated data structures for this stream are freed.; This function discards any unprocessed input and does not flush any pending; output. inflateEnd returns Z_OK if success, Z_STREAM_ERROR if the stream state; was inconsistent. In the error case, msg may be set but then points to a; static string (which must not be deallocated).; */; /* Advanced functions */; /*; The following functions are needed only in some special applications.; */; /*; ZEXTERN int ZEXPORT deflateInit2 OF((z_streamp strm,; int level,; int method,; int windowBits,; int memLevel,; int strategy));. This is another version of deflateInit with more compression options. The; fields next_in, zalloc, zfree and opaque must be initialized before by the; caller. The method parameter is the compression method. It must be Z_DEFLATED in; this version of the library. The windowBits parameter is the base two logarithm of the window size; (the size of the history buffer). It should be in the range 8..15 for this; version of the library. Larger values of this parameter result in better; compression at the expense of memory usage. The default value is 15 if; deflateInit is used instead. windowBits can also be -8..-15 for raw deflate. In this case, -windowBits; determines the window size. deflate() will then generate raw deflate data; with no zlib header or trailer, and will not compute an adler32 check value. windowBits can also be greater than 15 for optional gzip encoding. Add; 16 to windowBits to write a simple gzip header and trailer around the; compressed data instead of a zlib wrapper. The gzip header will have no; file name, no extra data, no comment, no modification time (set to zero), no; header crc, and the operating system will be set to 255 (unknown). If a; gzip stream is being written, strm->adler is a crc32 instead of an adler32. The memLevel parameter specifies how much memory should be allocated; for the internal compression state. memLevel=1 uses minimum memory but is; slow and",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:897,log,logarithm,897,builtins/zlib/zlib.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h,1,['log'],['logarithm']
Testability,"/*; All dynamically allocated data structures for this stream are freed.; This function discards any unprocessed input and does not flush any; pending output. inflateEnd returns Z_OK if success, Z_STREAM_ERROR if the stream state; was inconsistent. In the error case, msg may be set but then points to a; static string (which must not be deallocated).; */; /* Advanced functions */; /*; The following functions are needed only in some special applications.; */; /*; ZEXTERN int ZEXPORT deflateInit2 OF((z_streamp strm,; int level,; int method,; int windowBits,; int memLevel,; int strategy));. This is another version of deflateInit with more compression options. The; fields next_in, zalloc, zfree and opaque must be initialized before by; the caller. The method parameter is the compression method. It must be Z_DEFLATED in; this version of the library. The windowBits parameter is the base two logarithm of the window size; (the size of the history buffer). It should be in the range 8..15 for this; version of the library. Larger values of this parameter result in better; compression at the expense of memory usage. The default value is 15 if; deflateInit is used instead. windowBits can also be -8..-15 for raw deflate. In this case, -windowBits; determines the window size. deflate() will then generate raw deflate data; with no zlib header or trailer, and will not compute an adler32 check value. windowBits can also be greater than 15 for optional gzip encoding. Add; 16 to windowBits to write a simple gzip header and trailer around the; compressed data instead of a zlib wrapper. The gzip header will have no; file name, no extra data, no comment, no modification time (set to zero),; no header crc, and the operating system will be set to 255 (unknown). If a; gzip stream is being written, strm->adler is a crc32 instead of an adler32. The memLevel parameter specifies how much memory should be allocated; for the internal compression state. memLevel=1 uses minimum memory but; is slow and",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:897,log,logarithm,897,graf2d/asimage/src/libAfterImage/zlib/zlib.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h,1,['log'],['logarithm']
Testability,"/*; Computation of p-values according to ; ""K-Sample Anderson-Darling Tests"" by F.W. Scholz ; and M.A. Stephens (1987), Journal of the American Statistical Association, ; Vol 82, No. 399, pp 918-924.; Code from kSamples package from R (author F. Scholtz). This function uses the upper T_m quantiles as obtained via simulation of; the Anderson-Darling test statistics (Nsim = 2*10^6) with sample sizes n=500; for each sample, and after standardization, in order to emulate the Table 1 ; values given in the above reference. However, here we estimate p-quantiles; for p = .00001,.00005,.0001,.0005,.001,.005,.01,.025,.05,.075,; .1,.2,.3,.4,.5,.6,.7,.8,.9,.925,.95,.975,.99,.9925,.995,.9975,.999,; .99925,.9995,.99975,.9999,.999925,.99995,.999975,.99999; First the appropriate p-quantiles are determined from those simulated; for ms = 1,2,3,4,6,8,10, Inf, interpolating to the given value of m. ; Since we use only m=2 we avoid this interpolation. . Next linear inetrpolation to find the observed p value given the observed test statistic value. ; We use interpolation in the test statistic -> log((1-p)/p) domain; and we extrapolatelinearly) beyond p = .00001 and .99999.; */; // sample values ; //double ms[] = { 1, 2, 3, 4, 6, 8, 10, TMath::Infinity() };; //int ns = ms.size();",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GoFTest.cxx:70,Test,Tests,70,math/mathcore/src/GoFTest.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GoFTest.cxx,5,"['Test', 'log', 'test']","['Tests', 'log', 'test']"
Testability,"/*; Compute Anderson Darling test for two binned data set. ; A binned data set can be seen as many identical observation happening at the center of the bin; In this way it is trivial to apply the formula (6) in the paper of W. Scholz, M. Stephens, ""K-Sample Anderson-Darling Tests""; to the case of histograms. See also http://arxiv.org/pdf/0804.0380v1.pdf paragraph 3.3.5; It is important that empty bins are not present ; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GoFTest.cxx:29,test,test,29,math/mathcore/src/GoFTest.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GoFTest.cxx,2,"['Test', 'test']","['Tests', 'test']"
Testability,"/*; Data set adapted from the paper (1); ""K-Sample Anderson-Darling Tests of Fit for continuous and discrete cases"" by Scholz and Stephens; values of expected A2 taken by running R kSamples code; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stressGoFTest.cxx:68,Test,Tests,68,math/mathcore/test/stressGoFTest.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stressGoFTest.cxx,1,['Test'],['Tests']
Testability,"/*; Data sets adapted from the paper (1); ""K-Sample Anderson-Darling Tests of Fit for continuous and discrete cases"" by Scholz and Stephens; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stressGoFTest.cxx:69,Test,Tests,69,math/mathcore/test/stressGoFTest.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stressGoFTest.cxx,1,['Test'],['Tests']
Testability,"/*; For each region boundary point, mark if it is begin or end (or both) of; the region. Boundary points are inclusive. Log the sample count as well; so we can use it when we compute the sample count of each disjoint region; later. Note that there might be multiple ranges with different sample; count that share same begin/end point. We need to accumulate the sample; count for the boundary point for such case, because for the example; below,. |<--100-->|; |<------200------>|; A B C. sample count for disjoint region [A,B] would be 300.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfileGenerator.h:120,Log,Log,120,interpreter/llvm-project/llvm/tools/llvm-profgen/ProfileGenerator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfileGenerator.h,1,['Log'],['Log']
Testability,"/*; For the above example. With boundary points, follwing logic finds two; disjoint region of. [A,B]: 300; [B+1,C]: 200. If there is a boundary point that both begin and end, the point itself; becomes a separate disjoint region. For example, if we have original; ranges of. |<--- 100 --->|; |<--- 200 --->|; A B C. there are three boundary points with their begin/end counts of. A: (100, 0); B: (200, 100); C: (0, 200). the disjoint ranges would be. [A, B-1]: 100; [B, B]: 300; [B+1, C]: 200. Example for zero value range:. |<--- 100 --->|; |<--- 200 --->|; |<--------------- 0 ----------------->|; A B C D E F. [A, B-1] : 0; [B, C] : 100; [C+1, D-1]: 0; [D, E] : 200; [E+1, F] : 0; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfileGenerator.cpp:58,log,logic,58,interpreter/llvm-project/llvm/tools/llvm-profgen/ProfileGenerator.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfileGenerator.cpp,1,['log'],['logic']
Testability,"/*; TEST(ONNX, ConvTranspose3d); {; constexpr float TOLERANCE = DEFAULT_TOLERANCE;. // Preparing the standard all-ones input; std::vector<float> input(8);; std::iota(input.begin(), input.end(), 0.0f);; TMVA_SOFIE_ConvTranspose3d::Session s(""ConvTranspose3d_FromONNX.dat"");; std::vector<float> output(s.infer(input.data()));. // Checking output size; EXPECT_EQ(output.size(), sizeof(ConvTranspose3d_ExpectedOutput::output) / sizeof(float));. float *correct = ConvTranspose3d_ExpectedOutput::output;. // Checking every output value, one by one; for (size_t i = 0; i < output.size(); ++i) {; EXPECT_LE(std::abs(output[i] - correct[i]), TOLERANCE);; }; }; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestCustomModelsFromONNX.cxx:4,TEST,TEST,4,tmva/sofie/test/TestCustomModelsFromONNX.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestCustomModelsFromONNX.cxx,1,['TEST'],['TEST']
Testability,"/*; TEST(ROOT, Linear32); {; constexpr float TOLERANCE = DEFAULT_TOLERANCE;. // Preparing the standard all-ones input; std::vector<float> input(3200);; std::fill_n(input.data(), input.size(), 1.0f);; TMVA_SOFIE_Linear_32::Session s(""Linear_32_FromROOT.dat"");; std::vector<float> output = s.infer(input.data());. // Testing the actual and expected output sizes; EXPECT_EQ(output.size(), sizeof(Linear_32_ExpectedOutput::all_ones) / sizeof(float));. float *correct = Linear_32_ExpectedOutput::all_ones;. // Testing the actual and expected output values; for (size_t i = 0; i < output.size(); ++i) {; EXPECT_LE(std::abs(output[i] - correct[i]), TOLERANCE);; }; }. TEST(ROOT, Linear64); {; constexpr float TOLERANCE = DEFAULT_TOLERANCE;. // Preparing the standard all-ones input; std::vector<float> input(6400);; std::fill_n(input.data(), input.size(), 1.0f);; TMVA_SOFIE_Linear_64::Session s(""Linear_64_FromROOT.dat"");; std::vector<float> output = s.infer(input.data());. // Testing the actual and expected output values; EXPECT_EQ(output.size(), sizeof(Linear_64_ExpectedOutput::all_ones) / sizeof(float));. float *correct = Linear_64_ExpectedOutput::all_ones;. // Testing the actual and expected output values; for (size_t i = 0; i < output.size(); ++i) {; EXPECT_LE(std::abs(output[i] - correct[i]), TOLERANCE);; }; }; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestCustomModelsFromROOT.cxx:4,TEST,TEST,4,tmva/sofie/test/TestCustomModelsFromROOT.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestCustomModelsFromROOT.cxx,6,"['TEST', 'Test']","['TEST', 'Testing']"
Testability,"/*; TGLFormat class describes the pixel format of a drawing surface.; It's a generic analog of PIXELFORMATDESCRIPTOR (win32) or; array of integer constants array for glXChooseVisual (X11).; This class is in a very preliminary state, different; options have not been tested yet, only defaults. Surface can be:; -RGBA; -with/without depth buffer; -with/without stencil buffer; -with/without accum buffer; -double/single buffered; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/inc/TGLFormat.h:266,test,tested,266,graf3d/gl/inc/TGLFormat.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/inc/TGLFormat.h,1,['test'],['tested']
Testability,"/*; Test macro for TKDTree. TestBuild(); // test build function of kdTree for memory leaks; TestSpeed(); // test the CPU consumption to build kdTree; TestkdtreeIF(); // test functionality of the kdTree; TestSizeIF(); // test the size of kdtree - search application - Alice TPC tracker situation; //; */; //#include <malloc.h>",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/kDTreeTest.cxx:4,Test,Test,4,math/mathcore/test/kDTreeTest.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/kDTreeTest.cxx,9,"['Test', 'test']","['Test', 'TestBuild', 'TestSizeIF', 'TestSpeed', 'TestkdtreeIF', 'test']"
Testability,"/*; The logic here is the following - we have bool name - it shows if we have read (or are reading) an attribute name; bool equalfound - shows if we have found the = symbol after the name; bool value - shows if we have found or are reading the attribute value; bool newattr - do we have other attributes to read; char lastsymbol - I use it to detect a situation like name = xx""value""; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx:8,log,logic,8,core/dictgen/src/XMLReader.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx,1,['log'],['logic']
Testability,/*; These tests help us checking that the binning of the final histograms/profiles is correct.; We test construction of models with full blown histos/profiles and also using constructors; that mimick the ones of those very classes.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_histomodels.cxx:10,test,tests,10,tree/dataframe/test/dataframe_histomodels.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_histomodels.cxx,2,['test'],"['test', 'tests']"
Testability,"/*; cout << ""NC CHECK: "" << i << endl;; point->Print();; fPOI->Print(""v"");; fData.Print();; cout <<""thisTestStatistic = "" << thisTestStatistic << endl;; */; // find the lower & upper thresholds on the test statistic that; // define the acceptance region in the data",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NeymanConstruction.cxx:201,test,test,201,roofit/roostats/src/NeymanConstruction.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NeymanConstruction.cxx,1,['test'],['test']
Testability,"/*; dt->ApplyValidationSample(validationSample);; Double_t weights = dt->GetSumWeights(validationSample);; // set the initial prune strength; fPruneStrength = 1.0e-3; //! FIXME somehow make this automatic, it depends strongly on the tree structure; // better to set it too small, it will be increased automatically; fDeltaPruneStrength = 1.0e-5;; Int_t nnodes = this->CountNodes((DecisionTreeNode*)dt->GetRoot());. Bool_t forceStop = kFALSE;; Int_t errCount = 0,; lastNodeCount = nnodes;. // find the maximum prune strength that still leaves the root's daughter nodes. while ( nnodes > 1 && !forceStop ) {; fPruneStrength += fDeltaPruneStrength;; Log() << ""----------------------------------------------------"" << Endl;; FindListOfNodes((DecisionTreeNode*)dt->GetRoot());; for( UInt_t i = 0; i < fPruneSequence.size(); i++ ); fPruneSequence[i]->SetTerminal(); // prune all the nodes from the sequence; // test the quality of the pruned tree; Double_t quality = 1.0 - dt->TestPrunedTreeQuality()/weights;; fQualityMap.insert(std::make_pair<const Double_t,Double_t>(quality,fPruneStrength));. nnodes = CountNodes((DecisionTreeNode*)dt->GetRoot()); // count the number of nodes in the pruned tree. Log() << ""Prune strength : "" << fPruneStrength << Endl;; Log() << ""Had "" << lastNodeCount << "" nodes, now have "" << nnodes << Endl;; Log() << ""Quality index is: "" << quality << Endl;. if (lastNodeCount == nnodes) errCount++;; else {; errCount=0; // reset counter; if ( nnodes < lastNodeCount / 2 ) {; Log() << ""Decreasing fDeltaPruneStrength to "" << fDeltaPruneStrength/2.0; << "" because the number of nodes in the tree decreased by a factor of 2."" << Endl;; fDeltaPruneStrength /= 2.;; }; }; lastNodeCount = nnodes;; if (errCount > 20) {; Log() << ""Increasing fDeltaPruneStrength to "" << fDeltaPruneStrength*2.0; << "" because the number of nodes in the tree didn't change."" << Endl;; fDeltaPruneStrength *= 2.0;; }; if (errCount > 40) {; Log() << ""Having difficulty determining the optimal prune strength,",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx:647,Log,Log,647,tmva/tmva/src/ExpectedErrorPruneTool.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ExpectedErrorPruneTool.cxx,3,"['Log', 'Test', 'test']","['Log', 'TestPrunedTreeQuality', 'test']"
Testability,"/*; if (flag == 1) {; read input data,; calculate any necessary constants, etc.; }; if (flag == 2) {; calculate GRAD, the first derivatives of FVAL; (this is optional); }; Always calculate the value of the function, FVAL,; which is usually a chisquare or log likelihood.; if (iflag == 3) {; will come here only after the fit is finished.; Perform any final calculations, output fitted data, etc.; }; */; // See concrete examples in TH1::H1FitChisquare, H1FitLikelihood",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:255,log,log,255,math/minuit/src/TMinuit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx,1,['log'],['log']
Testability,"/*; int testRootFinder() {. int status = 0;; status |= runTest(0); // test pol function; if (status) std::cerr << ""Test pol function FAILED"" << std::endl;. status |= runTest(1); // test gamma_cdf; if (status) std::cerr << ""Test gamma function FAILED"" << std::endl;. std::cerr << ""*************************************************************\n"";; std::cerr << ""\nTest RootFinder :\t"";; if (status == 0); std::cerr << ""OK "" << std::endl;; else; std::cerr << ""Failed !"" << std::endl;. return status;; }; */; //_________________________________________; // Parabola tests",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx:8,test,testRootFinder,8,math/mathcore/test/testRootFinder.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx,6,"['Test', 'test']","['Test', 'test', 'testRootFinder', 'tests']"
Testability,"/*; printf(""Suite of test for snprintf:\n"");; printf(""a_format\n"");; printf(""printf() format\n"");; printf(""snprintf() format\n\n"");; */; /* Checking the field widths */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/clib/src/snprintf.c:21,test,test,21,core/clib/src/snprintf.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clib/src/snprintf.c,1,['test'],['test']
Testability,"/*; this macro plots the quadratic deviation of the estimated from the target value, averaged over the first nevt events in test sample (all if Nevt=-1); a) normal average; b) truncated average, using best 90%; created January 2009, Eckhard von Toerne, University of Bonn, Germany; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/src/regression_averagedevs.cxx:124,test,test,124,tmva/tmvagui/src/regression_averagedevs.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/src/regression_averagedevs.cxx,1,['test'],['test']
Testability,"/*; this macro plots the quadratic deviation of the estimated from the target value, averaged over the first nevt events in test sample (all if Nevt=-1);; a); normal average; b); truncated average, using best 90%; created January 2009, Eckhard von Toerne, University of Bonn, Germany; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/inc/TMVA/regression_averagedevs.h:124,test,test,124,tmva/tmvagui/inc/TMVA/regression_averagedevs.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/inc/TMVA/regression_averagedevs.h,1,['test'],['test']
Testability,"/*; title = TString::Format( ""(%ic) Classifier Probability Distributions (test sample)"", ic );; MultiClassActionButton( cbar,; TString::Format( ""(%ic) Classifier Probability Distributions (test sample)"", ic ),; TString::Format( ""TMVA::mvas(\""%s\"",TMVA::kProbaType)"", fName ),; ""Plots the probability of each classifier for the test data (macro mvas(...,1))"",; buttonType, defaultRequiredClassifier );. title =TString::Format( ""(%id) Classifier Rarity Distributions (test sample)"", ic );; MultiClassActionButton( cbar,; TString::Format( ""(%id) Classifier Rarity Distributions (test sample)"", ic ),; TString::Format( ""TMVA::mvas(\""%s\"",TMVA::kRarityType)"", fName ),; ""Plots the Rarity of each classifier for the test data (macro mvas(...,2)) - background distribution should be; uniform"", buttonType, defaultRequiredClassifier );. title =TString::Format( ""(%ia) Classifier Cut Efficiencies"", ++ic );; MultiClassActionButton( cbar,; title,; TString::Format( ""TMVA::mvaeffs(\""%s\"")"", fName ),; ""Plots signal and background efficiencies versus cut on classifier output (macro mvaeffs.cxx)"",; buttonType, defaultRequiredClassifier );; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/src/TMVAMultiClassGui.cxx:74,test,test,74,tmva/tmvagui/src/TMVAMultiClassGui.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/src/TMVAMultiClassGui.cxx,6,['test'],['test']
Testability,"/*; void ClearDataSet() const;; Int_t FindVarIndex( const TString& ) const;; std::vector<TString> GetListOfVariables() const;; const TMatrixD* CorrelationMatrix ( const TString& className ) const;; void SetCorrelationMatrix ( const TString& className, TMatrixD* matrix );; TH2* CreateCorrelationMatrixHist( const TMatrixD* m, const TString& hName, const TString& hTitle ); const;; */; /*; unclear to me, what to test:; void SetRootDir(TDirectory* d) { fOwnRootDir = d; }; TDirectory* GetRootDir() const { return fOwnRootDir; }; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:412,test,test,412,tmva/tmva/test/stressTMVA.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx,1,['test'],['test']
Testability,/*< Write log to stderr; 0 = none (default); 1 = errors; 2 = progression; 3 = details; 4 = debug; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h:10,log,log,10,builtins/zstd/zdict.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zdict.h,1,['log'],['log']
Testability,"/*===- count.c - The 'count' testing tool ---------------------------------===*\; *; * Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; * See https://llvm.org/LICENSE.txt for license information.; * SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; *; \*===----------------------------------------------------------------------===*/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/count/count.c:29,test,testing,29,interpreter/llvm-project/llvm/utils/count/count.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/count/count.c,1,['test'],['testing']
Testability,"/*===-- attributes.c - tool for testing libLLVM and llvm-c API ------------===*\; |* *|; |* Part of the LLVM Project, under the Apache License v2.0 with LLVM *|; |* Exceptions. *|; |* See https://llvm.org/LICENSE.txt for license information. *|; |* SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception *|; |* *|; |*===----------------------------------------------------------------------===*|; |* *|; |* This file implements the --test-attributes and --test-callsite-attributes *|; |* commands in llvm-c-test. *|; |* *|; \*===----------------------------------------------------------------------===*/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-c-test/attributes.c:32,test,testing,32,interpreter/llvm-project/llvm/tools/llvm-c-test/attributes.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-c-test/attributes.c,4,['test'],"['test', 'test-attributes', 'test-callsite-attributes', 'testing']"
Testability,"/*===-- calc.c - tool for testing libLLVM and llvm-c API ------------------===*\; |* *|; |* Part of the LLVM Project, under the Apache License v2.0 with LLVM *|; |* Exceptions. *|; |* See https://llvm.org/LICENSE.txt for license information. *|; |* SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception *|; |* *|; |*===----------------------------------------------------------------------===*|; |* *|; |* This file implements the --calc command in llvm-c-test. --calc reads lines *|; |* from stdin, parses them as a name and an expression in reverse polish *|; |* notation and prints a module with a function with the expression. *|; |* *|; \*===----------------------------------------------------------------------===*/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-c-test/calc.c:26,test,testing,26,interpreter/llvm-project/llvm/tools/llvm-c-test/calc.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-c-test/calc.c,2,['test'],"['test', 'testing']"
Testability,"/*===-- debuginfo.c - tool for testing libLLVM and llvm-c API -------------===*\; |* *|; |* Part of the LLVM Project, under the Apache License v2.0 with LLVM *|; |* Exceptions. *|; |* See https://llvm.org/LICENSE.txt for license information. *|; |* SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception *|; |* *|; |*===----------------------------------------------------------------------===*|; |* *|; |* Tests for the LLVM C DebugInfo API *|; |* *|; \*===----------------------------------------------------------------------===*/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-c-test/debuginfo.c:31,test,testing,31,interpreter/llvm-project/llvm/tools/llvm-c-test/debuginfo.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-c-test/debuginfo.c,2,"['Test', 'test']","['Tests', 'testing']"
Testability,"/*===-- disassemble.c - tool for testing libLLVM and llvm-c API -----------===*\; |* *|; |* Part of the LLVM Project, under the Apache License v2.0 with LLVM *|; |* Exceptions. *|; |* See https://llvm.org/LICENSE.txt for license information. *|; |* SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception *|; |* *|; |*===----------------------------------------------------------------------===*|; |* *|; |* This file implements the --disassemble command in llvm-c-test. *|; |* --disassemble reads lines from stdin, parses them as a triple and hex *|; |* machine code, and prints disassembly of the machine code. *|; |* *|; \*===----------------------------------------------------------------------===*/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-c-test/disassemble.c:33,test,testing,33,interpreter/llvm-project/llvm/tools/llvm-c-test/disassemble.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-c-test/disassemble.c,2,['test'],"['test', 'testing']"
Testability,"/*===-- helpers.c - tool for testing libLLVM and llvm-c API ---------------===*\; |* *|; |* Part of the LLVM Project, under the Apache License v2.0 with LLVM *|; |* Exceptions. *|; |* See https://llvm.org/LICENSE.txt for license information. *|; |* SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception *|; |* *|; |*===----------------------------------------------------------------------===*|; |* *|; |* Helper functions *|; |* *|; \*===----------------------------------------------------------------------===*/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-c-test/helpers.c:29,test,testing,29,interpreter/llvm-project/llvm/tools/llvm-c-test/helpers.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-c-test/helpers.c,1,['test'],['testing']
Testability,"/*===-- include-all.c - tool for testing libLLVM and llvm-c API -----------===*\; |* *|; |* Part of the LLVM Project, under the Apache License v2.0 with LLVM *|; |* Exceptions. *|; |* See https://llvm.org/LICENSE.txt for license information. *|; |* SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception *|; |* *|; |*===----------------------------------------------------------------------===*|; |* *|; |* This file doesn't have any actual code. It just make sure that all *|; |* the llvm-c include files are good and doesn't generate any warnings *|; |* *|; \*===----------------------------------------------------------------------===*/; // FIXME: Autogenerate this list",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-c-test/include-all.c:33,test,testing,33,interpreter/llvm-project/llvm/tools/llvm-c-test/include-all.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-c-test/include-all.c,1,['test'],['testing']
Testability,"/*===-- llvm-c-test.h - tool for testing libLLVM and llvm-c API -----------===*\; |* *|; |* Part of the LLVM Project, under the Apache License v2.0 with LLVM *|; |* Exceptions. *|; |* See https://llvm.org/LICENSE.txt for license information. *|; |* SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception *|; |* *|; |*===----------------------------------------------------------------------===*|; |* *|; |* Header file for llvm-c-test *|; |* *|; \*===----------------------------------------------------------------------===*/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-c-test/llvm-c-test.h:15,test,test,15,interpreter/llvm-project/llvm/tools/llvm-c-test/llvm-c-test.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-c-test/llvm-c-test.h,3,['test'],"['test', 'testing']"
Testability,"/*===-- main.c - tool for testing libLLVM and llvm-c API ------------------===*\; |* *|; |* Part of the LLVM Project, under the Apache License v2.0 with LLVM *|; |* Exceptions. *|; |* See https://llvm.org/LICENSE.txt for license information. *|; |* SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception *|; |* *|; |*===----------------------------------------------------------------------===*|; |* *|; |* Main file for llvm-c-tests. ""Parses"" arguments and dispatches. *|; |* *|; \*===----------------------------------------------------------------------===*/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-c-test/main.c:26,test,testing,26,interpreter/llvm-project/llvm/tools/llvm-c-test/main.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-c-test/main.c,2,['test'],"['testing', 'tests']"
Testability,"/*===-- module.c - tool for testing libLLVM and llvm-c API ----------------===*\; |* *|; |* Part of the LLVM Project, under the Apache License v2.0 with LLVM *|; |* Exceptions. *|; |* See https://llvm.org/LICENSE.txt for license information. *|; |* SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception *|; |* *|; |*===----------------------------------------------------------------------===*|; |* *|; |* This file implements the --module-dump, --module-list-functions and *|; |* --module-list-globals commands in llvm-c-test. *|; |* *|; \*===----------------------------------------------------------------------===*/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-c-test/module.c:28,test,testing,28,interpreter/llvm-project/llvm/tools/llvm-c-test/module.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-c-test/module.c,2,['test'],"['test', 'testing']"
Testability,"/*===-- object.c - tool for testing libLLVM and llvm-c API ----------------===*\; |* *|; |* Part of the LLVM Project, under the Apache License v2.0 with LLVM *|; |* Exceptions. *|; |* See https://llvm.org/LICENSE.txt for license information. *|; |* SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception *|; |* *|; |*===----------------------------------------------------------------------===*|; |* *|; |* This file implements the --add-named-metadata-operand and --set-metadata *|; |* commands in llvm-c-test. *|; |* *|; \*===----------------------------------------------------------------------===*/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-c-test/metadata.c:28,test,testing,28,interpreter/llvm-project/llvm/tools/llvm-c-test/metadata.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-c-test/metadata.c,2,['test'],"['test', 'testing']"
Testability,"/*===-- object.c - tool for testing libLLVM and llvm-c API ----------------===*\; |* *|; |* Part of the LLVM Project, under the Apache License v2.0 with LLVM *|; |* Exceptions. *|; |* See https://llvm.org/LICENSE.txt for license information. *|; |* SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception *|; |* *|; |*===----------------------------------------------------------------------===*|; |* *|; |* This file implements the --object-list-sections and --object-list-symbols *|; |* commands in llvm-c-test. *|; |* *|; \*===----------------------------------------------------------------------===*/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-c-test/object.c:28,test,testing,28,interpreter/llvm-project/llvm/tools/llvm-c-test/object.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-c-test/object.c,2,['test'],"['test', 'testing']"
Testability,"/*===-- targets.c - tool for testing libLLVM and llvm-c API ---------------===*\; |* *|; |* Part of the LLVM Project, under the Apache License v2.0 with LLVM *|; |* Exceptions. *|; |* See https://llvm.org/LICENSE.txt for license information. *|; |* SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception *|; |* *|; |*===----------------------------------------------------------------------===*|; |* *|; |* This file implements the --targets command in llvm-c-test. *|; |* *|; \*===----------------------------------------------------------------------===*/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-c-test/targets.c:29,test,testing,29,interpreter/llvm-project/llvm/tools/llvm-c-test/targets.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-c-test/targets.c,2,['test'],"['test', 'testing']"
Testability,/*LogOnly=*/,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:2,Log,LogOnly,2,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp,1,['Log'],['LogOnly']
Testability,/*Logger=*/,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/DataflowAnalysisContext.h:2,Log,Logger,2,interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/DataflowAnalysisContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/DataflowAnalysisContext.h,3,['Log'],['Logger']
Testability,/*N.B.: The tests' expected values (expectedDn and expectedA2) were computed on Pcphsft54.cern.ch i386 GNU/Linux computer (slc4_ia32_gcc34). LM. (16/9/14) Expected values for AD2 test have been computed with R kSamples package; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stressGoFTest.cxx:12,test,tests,12,math/mathcore/test/stressGoFTest.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stressGoFTest.cxx,2,['test'],"['test', 'tests']"
Testability,"/*TEST(ONNX, Linear32RootFeature); {; constexpr float TOLERANCE = DEFAULT_TOLERANCE;. // Preparing the standard all-ones input; std::vector<float> input(3200);; std::fill_n(input.data(), input.size(), 1.0f);; TMVA_SOFIE_Linear32RootFeacture::Session s(""Linear_32_FromONNX.root"");; std::vector<float> output = s.infer(input.data());. // Checking output size; EXPECT_EQ(output.size(), sizeof(Linear_32_ExpectedOutput::all_ones) / sizeof(float));. float *correct = Linear_32_ExpectedOutput::all_ones;. // Checking every output value, one by one; for (size_t i = 0; i < output.size(); ++i) {; EXPECT_LE(std::abs(output[i] - correct[i]), TOLERANCE);; }; }*/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestCustomModelsFromONNX.cxx:2,TEST,TEST,2,tmva/sofie/test/TestCustomModelsFromONNX.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestCustomModelsFromONNX.cxx,1,['TEST'],['TEST']
Testability,/*TestIsStrictOp=*/,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:2,Test,TestIsStrictOp,2,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['Test'],['TestIsStrictOp']
Testability,"/*error = testIdentity<TCpu<Scalar_t>>();; std::cout << ""Identity: Maximum relative error = "" << error << std::endl;; maximumError = std::max(error, maximumError);*/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestTensorDataLoaderCpu.cxx:10,test,testIdentity,10,tmva/tmva/test/DNN/TestTensorDataLoaderCpu.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestTensorDataLoaderCpu.cxx,1,['test'],['testIdentity']
Testability,"/*error = testIdentity<TCuda<Scalar_t>>();; std::cout << ""Identity: Maximum relative error = "" << error << std::endl;; maximumError = std::max(error, maximumError);*/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestTensorDataLoaderCudnn.cxx:10,test,testIdentity,10,tmva/tmva/test/DNN/TestTensorDataLoaderCudnn.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestTensorDataLoaderCudnn.cxx,1,['test'],['testIdentity']
Testability,"/*error = testIdentity<TReference<Scalar_t>>();; std::cout << ""Identity: Maximum relative error = "" << error << std::endl;; maximumError = std::max(error, maximumError);*/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestTensorDataLoader.cxx:10,test,testIdentity,10,tmva/tmva/test/DNN/TestTensorDataLoader.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestTensorDataLoader.cxx,1,['test'],['testIdentity']
Testability,"/*error = testReciprocalElementWise<TCudnn<Double_t>>(1);; std::cout << ""Reciprocal ElementWise: ""; << ""Max. rel. error: "" << error << std::endl;; if (error > 1e-3); return 1;*/; /*error = testSquareElementWise<TCudnn<Double_t>>(1);; std::cout << ""Square ElementWise: ""; << ""Max. rel. error: "" << error << std::endl;; if (error > 1e-3); return 1;*/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx:10,test,testReciprocalElementWise,10,tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx,2,['test'],"['testReciprocalElementWise', 'testSquareElementWise']"
Testability,"/*error = testReciprocalElementWise<TCudnn<Real_t>>(1);; std::cout << ""Reciprocal ElementWise: ""; << ""Max. rel. error: "" << error << std::endl;; if (error > 1e-1); return 1;*/; /*error = testSquareElementWise<TCudnn<Real_t>>(1);; std::cout << ""Square ElementWise: ""; << ""Max. rel. error: "" << error << std::endl;; if (error > 1e-1); return 1;*/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx:10,test,testReciprocalElementWise,10,tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx,2,['test'],"['testReciprocalElementWise', 'testSquareElementWise']"
Testability,"/*error = testScaleAdd();; std::cout << ""Testing scale_add: max. rel. error = "";; std::cout << error << std::endl;*/; /*error = testHadamard();; std::cout << ""Testing hadamard: max. rel. error = "";; std::cout << error << std::endl;*/; /*error = testMultiply();; std::cout << ""Testing multiplication: max. rel. error = "";; std::cout << error << std::endl;*/; /*error = testAddRowWise();; std::cout << ""Testing add_row_wise: max. rel. error = "";; std::cout << error << std::endl;*/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestCudnn.cxx:10,test,testScaleAdd,10,tmva/tmva/test/DNN/TestCudnn.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestCudnn.cxx,8,"['Test', 'test']","['Testing', 'testAddRowWise', 'testHadamard', 'testMultiply', 'testScaleAdd']"
Testability,"/*error = testSumColumns<TCudnn<Double_t>>(1);; std::cout << ""Column Sum: ""; << ""Max. rel. error: "" << error << std::endl;; if (error > 1e-3); return 1;*/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx:10,test,testSumColumns,10,tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx,1,['test'],['testSumColumns']
Testability,"/*error = testSumColumns<TCudnn<Real_t>>(1);; std::cout << ""Column Sum: ""; << ""Max. rel. error: "" << error << std::endl;; if (error > 1e-1); return 1;*/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx:10,test,testSumColumns,10,tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmeticCudnn.cxx,1,['test'],['testSumColumns']
Testability,/*if (!ValidIndex(index)) {; assert(kFALSE);; return fVals[0];; } else {*/,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/inc/TGLUtil.h:29,assert,assert,29,graf3d/gl/inc/TGLUtil.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/inc/TGLUtil.h,4,['assert'],['assert']
Testability,/*loglevel*/,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualMonitoring.h:2,log,loglevel,2,core/base/inc/TVirtualMonitoring.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualMonitoring.h,3,['log'],['loglevel']
Testability,"/*out += ROOT::Math::gaussian_cdf((k-Lambda_low)/sigma_low) +; 2*Phi_m(poiVal,poi_primeVal,(Lambda_low - k_low)==0 ? 0 : ((Lambda_low -; k_low)/sigma_low),sigma,compatRegions); - Phi_m(poiVal,poi_primeVal,(Lambda_low - k)/sigma_low,sigma,compatFunc);; */; // handle case where poiVal = lowBound (e.g. testing mu=0 when lower bound is mu=0).; // sigma_low will be 0 and gaussian_cdf will end up being 1, but we need it to converge instead; // to 0.5 so that pValue(k=0) converges to 1 rather than 0.5.; // handle this by 'adding' back in the lower bound; // TODO: Think more about this?; /*if (sigma_low == 0) {; out -= 0.5;; }*/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/Asymptotics.cxx:301,test,testing,301,roofit/xroofit/src/Asymptotics.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/Asymptotics.cxx,1,['test'],['testing']
Testability,/*testStatistic*/,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/DebuggingSampler.h:2,test,testStatistic,2,roofit/roostats/inc/RooStats/DebuggingSampler.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/DebuggingSampler.h,2,['test'],['testStatistic']
Testability,"//			else	fprintf( stderr, ""test %d: position %d same - %8.8lX	and %8.8lX\n"", test_len, i, control_data[i], test_set1[i] );",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/test_mmx.c:28,test,test,28,graf2d/asimage/src/libAfterImage/test_mmx.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/test_mmx.c,1,['test'],['test']
Testability,"// !! This ok if master sub-classed from TAttBBox; //SetAxisAlignedBBox(((TEvePlot3D*)fExternalObj)->AssertBBox());",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/src/TEvePlot3DGL.cxx:101,Assert,AssertBBox,101,graf3d/eve/src/TEvePlot3DGL.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/src/TEvePlot3DGL.cxx,1,['Assert'],['AssertBBox']
Testability,// !testc -> !testz.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:4,test,testc,4,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,2,['test'],"['testc', 'testz']"
Testability,// !testz -> !testc.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:4,test,testz,4,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,2,['test'],"['testc', 'testz']"
Testability,"// ""Benchmark""-like optimization: single-source case",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/LTO/ThinLTOCodeGenerator.cpp:4,Benchmark,Benchmark,4,interpreter/llvm-project/llvm/lib/LTO/ThinLTOCodeGenerator.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/LTO/ThinLTOCodeGenerator.cpp,1,['Benchmark'],['Benchmark']
Testability,"// ""L"" Use Log Likelihood. Default is chisquare method except fitting THnsparse",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Foption.h:11,Log,Log,11,hist/hist/inc/Foption.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/Foption.h,1,['Log'],['Log']
Testability,"// ""Other"" is live and there is a DBG_VALUE of Reg: test if we should; // set it undef.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp:52,test,test,52,interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp,1,['test'],['test']
Testability,"// ""Test.is(!Negated)"" means ""branch condition is true"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonBitTracker.cpp:4,Test,Test,4,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonBitTracker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonBitTracker.cpp,1,['Test'],['Test']
Testability,"// ""bias"" of the regression on test data",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:31,test,test,31,tmva/tmva/src/Factory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx,1,['test'],['test']
Testability,"// ""dev"" of the regression on test data",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:30,test,test,30,tmva/tmva/src/Factory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx,1,['test'],['test']
Testability,"// ""minf"" of the regression on test data",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:31,test,test,31,tmva/tmva/src/Factory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx,1,['test'],['test']
Testability,"// ""return;"" is modeled to evaluate to an UndefinedVal. Allow UndefinedVal; // to be returned in functions returning void to support this pattern:; // void foo() {; // return;; // }; // void test() {; // return foo();; // }",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/ReturnUndefChecker.cpp:191,test,test,191,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/ReturnUndefChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/ReturnUndefChecker.cpp,1,['test'],['test']
Testability,"// ""rms"" of the regression on test data",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:30,test,test,30,tmva/tmva/src/Factory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx,1,['test'],['test']
Testability,"// ""setertti "" omitted. Ordinary user should not use this statement; // ""setstdio "" omitted. Ordinary user should not use this statement; // ""setstream "" omitted. Ordinary user should not use this statement; // ""stub"" omitted. Ordinary user should not use this statement",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/rint/src/TTabCom.cxx:212,stub,stub,212,core/rint/src/TTabCom.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/rint/src/TTabCom.cxx,1,['stub'],['stub']
Testability,"// ### FIXME:; // Want to update LLVM to 3.9 realease and better testing first, but; // ApplyHeaderSearchOptions shouldn't even be called here:; // 1. It's already been called via CI->createPreprocessor(TU_Complete); // 2. It could corrupt clang's directory cache; // HeaderSearchOptions.::AddSearchPath is a better alternative",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/CIFactory.cpp:65,test,testing,65,interpreter/cling/lib/Interpreter/CIFactory.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/CIFactory.cpp,1,['test'],['testing']
Testability,"// ################################################################; //; // testing IntegratorMultiDim class; //; // ################################################################",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testIntegrationMultiDim.cxx:76,test,testing,76,math/mathcore/test/testIntegrationMultiDim.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testIntegrationMultiDim.cxx,2,['test'],['testing']
Testability,"// ################################################################; //; // testing MCIntegrator class; //; // ################################################################",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testMCIntegration.cxx:76,test,testing,76,math/mathmore/test/testMCIntegration.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testMCIntegration.cxx,1,['test'],['testing']
Testability,"// ################################################################; //; // testing TF1::IntegralMultiple class; //; // ################################################################",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testIntegrationMultiDim.cxx:76,test,testing,76,math/mathcore/test/testIntegrationMultiDim.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testIntegrationMultiDim.cxx,1,['test'],['testing']
Testability,"// #2: Get session logs",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:19,log,logs,19,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['log'],['logs']
Testability,"// #ifdef LATER; // test using grad function",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/testFitPerf.cxx:20,test,test,20,roofit/roofit/test/testFitPerf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/testFitPerf.cxx,1,['test'],['test']
Testability,"// #ifdef LLVM_HAVE_TFLITE; /// The score injection pass.; /// This pass calculates the score for a function and inserts it in the log, but; /// this happens only in development mode. It's a no-op otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MLRegAllocEvictAdvisor.cpp:131,log,log,131,interpreter/llvm-project/llvm/lib/CodeGen/MLRegAllocEvictAdvisor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MLRegAllocEvictAdvisor.cpp,1,['log'],['log']
Testability,"// $Id $; //; // Tests that each form of 4-vector has all the properties that stem from; // owning and forwarding to a 4D coordinates instance; //; // 6/28/05 m fischler; // from contents of test_coordinates.h by L. Moneta.; //; // =================================================================",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/coordinates4D.cxx:17,Test,Tests,17,math/genvector/test/coordinates4D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/coordinates4D.cxx,1,['Test'],['Tests']
Testability,"// $Id $; //; // Tests that each form of vector has all the properties that stem from; // owning and forwarding to a coordinates instance, and that they give proper; // results.; //; // 3D vectors have:; //; // accessors x(), y(), z(), r(), theta(), phi(), rho(), eta(); //; // =================================================================",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/coordinates3D.cxx:17,Test,Tests,17,math/genvector/test/coordinates3D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/coordinates3D.cxx,1,['Test'],['Tests']
Testability,"// $Id: CoordinateTraits.h,v 1.1 2005/09/19 14:22:38 brun Exp $; //; // Coordinate System traits useful for testing purposes.; //; // For example, when reporting a problem, it is nice to be able; // to present a human-readable name for the system.; //; // Created by: Mark Fischler at Mon May 30 12:21:43 2005; //; // Last update: Wed Jun 1 2005",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/CoordinateTraits.h:108,test,testing,108,math/genvector/test/CoordinateTraits.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/CoordinateTraits.h,1,['test'],['testing']
Testability,"// $Id: RotationTraits.h,v 1.1 2005/08/11 14:18:00 fischler Exp $; //; // Rotation traits useful for testing purposes.; //; // For example, when reporting a problem, it is nice to be able; // to present a human-readable name for the rotation.; //; // Created by: Mark Fischler at Thu Aug 12 2005; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/RotationTraits.h:101,test,testing,101,math/genvector/test/RotationTraits.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/RotationTraits.h,1,['test'],['testing']
Testability,"// %label = testSetjmp(mem[%__THREW__.val], setjmpTable, setjmpTableSize);; // if (%label == 0)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyLowerEmscriptenEHSjLj.cpp:12,test,testSetjmp,12,interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyLowerEmscriptenEHSjLj.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyLowerEmscriptenEHSjLj.cpp,1,['test'],['testSetjmp']
Testability,"// %label = testSetjmp(mem[%env], setjmpTable, setjmpTableSize);; // if (%label == 0); // __wasm_longjmp(%env, %val); // catchret to %setjmp.dispatch",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyLowerEmscriptenEHSjLj.cpp:12,test,testSetjmp,12,interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyLowerEmscriptenEHSjLj.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyLowerEmscriptenEHSjLj.cpp,1,['test'],['testSetjmp']
Testability,// & gets special logic for several kinds of placeholder.; // The builtin code knows what to do.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:18,log,logic,18,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['log'],['logic']
Testability,// (3) Create stubs and call-through managers:,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithExecutorProcessControl/LLJITWithExecutorProcessControl.cpp:14,stub,stubs,14,interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithExecutorProcessControl/LLJITWithExecutorProcessControl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithExecutorProcessControl/LLJITWithExecutorProcessControl.cpp,2,['stub'],['stubs']
Testability,"// (Binop1 (Binop2 (logic_shift X, C), C1), (logic_shift Y, C)); // IFF; // 1) the logic_shifts match; // 2) either both binops are binops and one is `and` or; // BinOp1 is `and`; // (logic_shift (inv_logic_shift C1, C), C) == C1 or; //; // -> (logic_shift (Binop1 (Binop2 X, inv_logic_shift(C1, C)), Y), C); //; // (Binop1 (Binop2 (logic_shift X, Amt), Mask), (logic_shift Y, Amt)); // IFF; // 1) the logic_shifts match; // 2) BinOp1 == BinOp2 (if BinOp == `add`, then also requires `shl`).; //; // -> (BinOp (logic_shift (BinOp X, Y)), Mask); //; // (Binop1 (Binop2 (arithmetic_shift X, Amt), Mask), (arithmetic_shift Y, Amt)); // IFF; // 1) Binop1 is bitwise logical operator `and`, `or` or `xor`; // 2) Binop2 is `not`; //; // -> (arithmetic_shift Binop1((not X), Y), Amt)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp:662,log,logical,662,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp,1,['log'],['logical']
Testability,// (i32 (aext (i8 (x86isd::setcc_carry)))) -> (i32 (x86isd::setcc_carry)); // FIXME: Is this needed? We don't seem to have any tests for it.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:127,test,tests,127,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['test'],['tests']
Testability,"// (int) (((double) atoi(point_size)) / 720. * logpixelsy);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/gdk/win32/gdkfont-win32.c:47,log,logpixelsy,47,graf2d/win32gdk/gdk/src/gdk/win32/gdkfont-win32.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/gdk/win32/gdkfont-win32.c,1,['log'],['logpixelsy']
Testability,"// (j)---(i)---(k); // console.log('i,j,k', i, j , k)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:31,log,log,31,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['log'],['log']
Testability,"// (vt2 (assertzext (truncate vt0:x), vt1)) ->; // (vt2 (truncate (assertzext vt0:x, vt1)))",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUISelLowering.cpp:9,assert,assertzext,9,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUISelLowering.cpp,2,['assert'],['assertzext']
Testability,"// ***** ToyMCSampler specific *******; // check whether TestStatSampler is a ToyMCSampler",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FrequentistCalculator.cxx:57,Test,TestStatSampler,57,roofit/roostats/src/FrequentistCalculator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FrequentistCalculator.cxx,4,['Test'],['TestStatSampler']
Testability,"// ****** any TestStatSampler ********",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HybridCalculator.cxx:14,Test,TestStatSampler,14,roofit/roostats/src/HybridCalculator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HybridCalculator.cxx,2,['Test'],['TestStatSampler']
Testability,"// ****** any TestStatSampler ********; // create profile keeping everything but nuisance parameters fixed",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FrequentistCalculator.cxx:14,Test,TestStatSampler,14,roofit/roostats/src/FrequentistCalculator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FrequentistCalculator.cxx,2,['Test'],['TestStatSampler']
Testability,"// ************************************************************************* //; // * * //; // * s t r e s s P r o o f * //; // * * //; // * This file contains a set of test of PROOF related functionality. * //; // * The tests can be run as a standalone program or with the interpreter. * //; // * To run as a standalone program: * //; // * * //; // * $ cd $ROOTSYS/test * //; // * $ make stressProof * //; // * * //; // * Run stressProof with '-h' to get the list of supported options * //; // * $ ./stressProof -h * //; // * * //; // * To run interactively: * //; // * $ root * //; // * root[] .include $ROOTSYS/tutorials * //; // * root[] .L stressProof.cxx+ * //; // * root[] stressProof(master, tests, wrks, verbose, logfile, dyn, \ * //; // * dyn, skipds, h1src, eventsrc, dryrun) * //; // * * //; // * The arguments have the same meaning as above except for * //; // * verbose [Int_t] increasing verbosity (0 == minimal) * //; // * dyn [Bool_t] if kTRUE run in dynamic startup mode * //; // * skipds [Bool_t] if kTRUE the dataset related tests are skipped * //; // * * //; // * A certain number of swithces can also be controlled via environment * //; // * variables: check './stressProof -h' * //; // * * //; // * The stressProof function returns 0 on success, 1 on failure. * //; // * * //; // * The successful output looks like this: * //; // * * //; // * ****************************************************************** * //; // * * Starting P R O O F - S T R E S S suite * * //; // * ****************************************************************** * //; // * * Log file: /tmp/ProofStress_XrcwBe * //; // * ****************************************************************** * //; // * Test 1 : Open a session ................................... OK * * //; // * Test 2 : Get session logs ................................. OK * * //; // * Test 3 : Simple random number generation .................. OK * * //; // * Test 4 : Dataset handling with H1 files ................... OK * * //; /",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:169,test,test,169,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,6,"['log', 'test']","['logfile', 'test', 'tests']"
Testability,"// + std::log(std::abs(beta)+0.0001) );",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooHypatia2.cxx:10,log,log,10,roofit/roofitmore/src/RooHypatia2.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/RooHypatia2.cxx,1,['log'],['log']
Testability,// - Logical Screen Descriptor.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:5,Log,Logical,5,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['Log'],['Logical']
Testability,"// - on request - when Mod1 is pressed or logical-shape requests it;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/inc/TGLViewer.h:42,log,logical-shape,42,graf3d/gl/inc/TGLViewer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/inc/TGLViewer.h,1,['log'],['logical-shape']
Testability,"// -- Our name is the mother name, remove it.; // Note: The test is our parent is a top-level branch; // and our streamer is the base class streamer,; // this matches the exact test in TTree::Bronch().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranchElement.cxx:60,test,test,60,tree/tree/src/TBranchElement.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranchElement.cxx,2,['test'],['test']
Testability,"// -- Our parent's name is the mother name, remove it.; // Note: The test is our parent's parent is a top-level branch; // and our parent's streamer is the base class streamer,; // this matches the exact test in TTree::Bronch().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranchElement.cxx:69,test,test,69,tree/tree/src/TBranchElement.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranchElement.cxx,2,['test'],['test']
Testability,"// --- END OF RESULT LOGISTICS ---",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/TestStatistics/LikelihoodJob.cxx:21,LOG,LOGISTICS,21,roofit/roofitcore/src/TestStatistics/LikelihoodJob.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/TestStatistics/LikelihoodJob.cxx,1,['LOG'],['LOGISTICS']
Testability,"// --- RESULT LOGISTICS ---",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/TestStatistics/LikelihoodJob.cxx:14,LOG,LOGISTICS,14,roofit/roofitcore/src/TestStatistics/LikelihoodJob.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/TestStatistics/LikelihoodJob.cxx,2,['LOG'],['LOGISTICS']
Testability,"// --- collect all training (testing) events into the training (testing) eventvector; // create event vectors reserve enough space",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:29,test,testing,29,tmva/tmva/src/DataSetFactory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx,2,['test'],['testing']
Testability,// ---- Relativistic Properties ----; /**; Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/genvector/inc/Math/GenVector/LorentzVector.h:79,log,log,79,math/genvector/inc/Math/GenVector/LorentzVector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/inc/Math/GenVector/LorentzVector.h,1,['log'],['log']
Testability,"// ---- first validation: simple(st) possible chi2 test; // count number of empty bins",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDF.cxx:51,test,test,51,tmva/tmva/src/PDF.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDF.cxx,1,['test'],['test']
Testability,"// ---------- public evaluation methods --------------------------------------; // individual initialization for testing of each method; // overload this one for individual initialisation of the testing,; // it is then called automatically within the global ""TestInit""; // variables (and private member functions) for the Evaluation:; // get the efficiency. It fills a histogram for efficiency/vs/bkg; // and returns the one value fo the efficiency demanded for; // in the TString argument. (Watch the string format)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:113,test,testing,113,tmva/tmva/inc/TMVA/MethodBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h,3,"['Test', 'test']","['TestInit', 'testing']"
Testability,"// ------------ TEST CALLS ------------",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_tprofile2poly.cxx:16,TEST,TEST,16,hist/hist/test/test_tprofile2poly.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_tprofile2poly.cxx,1,['TEST'],['TEST']
Testability,"// -----------------------------------------------------------------------------; // testInterfaceFtbl definition; // -----------------------------------------------------------------------------; // The TestInterface function table.; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/main.c:85,test,testInterfaceFtbl,85,misc/rootsl/main.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/main.c,2,"['Test', 'test']","['TestInterface', 'testInterfaceFtbl']"
Testability,"// -------------------------------------------------------------------------; //; // ==== test of volume search =====; //; // #define TMVA::MethodPDERS__countByHand__Debug__",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx:90,test,test,90,tmva/tmva/src/MethodPDERS.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx,1,['test'],['test']
Testability,"// --------------------------------------------------------------------; // Implementation of permutation networks.; // Implementation of the node routing through butterfly networks:; // - Forward delta.; // - Reverse delta.; // - Benes.; //; //; // Forward delta network consists of log(N) steps, where N is the number; // of inputs. In each step, an input can stay in place, or it can get; // routed to another position[1]. The step after that consists of two; // networks, each half in size in terms of the number of nodes. In those; // terms, in the given step, an input can go to either the upper or the; // lower network in the next step.; //; // [1] Hexagon's vdelta/vrdelta allow an element to be routed to both; // positions as long as there is no conflict.; // Here's a delta network for 8 inputs, only the switching routes are; // shown:; //; // Steps:; // |- 1 ---------------|- 2 -----|- 3 -|; //; // Inp[0] *** *** *** *** Out[0]; // \ / \ / \ /; // \ / \ / X; // \ / \ / / \; // Inp[1] *** \ / *** X *** *** Out[1]; // \ \ / / \ / \ /; // \ \ / / X X; // \ \ / / / \ / \; // Inp[2] *** \ \ / / *** X *** *** Out[2]; // \ \ X / / / \ \ /; // \ \ / \ / / / \ X; // \ X X / / \ / \; // Inp[3] *** \ / \ / \ / *** *** *** Out[3]; // \ X X X /; // \ / \ / \ / \ /; // X X X X; // / \ / \ / \ / \; // / X X X \; // Inp[4] *** / \ / \ / \ *** *** *** Out[4]; // / X X \ \ / \ /; // / / \ / \ \ \ / X; // / / X \ \ \ / / \; // Inp[5] *** / / \ \ *** X *** *** Out[5]; // / / \ \ \ / \ /; // / / \ \ X X; // / / \ \ / \ / \; // Inp[6] *** / \ *** X *** *** Out[6]; // / \ / \ \ /; // / \ / \ X; // / \ / \ / \; // Inp[7] *** *** *** *** Out[7]; //; //; // Reverse delta network is same as delta network, with the steps in; // the opposite order.; //; //; // Benes network is a forward delta network immediately followed by; // a reverse delta network.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelDAGToDAGHVX.cpp:284,log,log,284,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelDAGToDAGHVX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelDAGToDAGHVX.cpp,1,['log'],['log']
Testability,"// ----------------------------------------------------------------; // Updates / removals of logical and physical shapes",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/inc/TGLScene.h:94,log,logical,94,graf3d/gl/inc/TGLScene.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/inc/TGLScene.h,1,['log'],['logical']
Testability,"// --------------------------------; // void Test(Int_t nquads);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/inc/TEveQuadSet.h:45,Test,Test,45,graf3d/eve/inc/TEveQuadSet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/inc/TEveQuadSet.h,1,['Test'],['Test']
Testability,"// --enable-privileged-webgl-extension; // console.log( '**' + type + '**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:51,log,log,51,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['log'],['log']
Testability,"// --no-sandbox is required to run chrome with super-user, but only in headless mode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebDisplayHandle.cxx:8,sandbox,sandbox,8,gui/webdisplay/src/RWebDisplayHandle.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebDisplayHandle.cxx,1,['sandbox'],['sandbox']
Testability,"// -2 log lambda, goes like significance^2; // check if we should keep going based on rate of Type I error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BernsteinCorrection.cxx:6,log,log,6,roofit/roostats/src/BernsteinCorrection.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BernsteinCorrection.cxx,1,['log'],['log']
Testability,"// ...even if they have the same name as a branch in the main tree; // this tests #7181",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_friends.cxx:76,test,tests,76,tree/dataframe/test/dataframe_friends.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_friends.cxx,1,['test'],['tests']
Testability,// ...except that we want to treat '1 << (blah)' as logically; // positive. It's an important idiom.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp:52,log,logically,52,interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,1,['log'],['logically']
Testability,"// // This code can be used to quickly test the STL Emulation layer; // Int_t k = TClassEdit::IsSTLCont(GetName());; // if (k==1||k==-1) { delete str; return; }",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx:39,test,test,39,core/meta/src/TClass.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx,1,['test'],['test']
Testability,"// // This code was used too quickly test the STL Emulation layer; // Int_t k = TClassEdit::IsSTLCont(GetName());; // if (k==1||k==-1) return;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx:37,test,test,37,core/meta/src/TClass.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx,1,['test'],['test']
Testability,"// // Used for evaluation, which is outside the life time of MethodCrossEval.; // Log() << kFATAL << ""Method CrossValidation should not be created manually,""; // "" only as part of using TMVA::Reader."" << Endl;; // return;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCrossValidation.cxx:82,Log,Log,82,tmva/tmva/src/MethodCrossValidation.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCrossValidation.cxx,1,['Log'],['Log']
Testability,"// // configure TestStatSampler for the Null run; // int PreNullHook(RooArgSet *parameterPoint, double obsTestStat) const;; // // configure TestStatSampler for the Alt run; // int PreAltHook(RooArgSet *parameterPoint, double obsTestStat) const;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/AsymptoticCalculator.h:16,Test,TestStatSampler,16,roofit/roostats/inc/RooStats/AsymptoticCalculator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/AsymptoticCalculator.h,2,['Test'],['TestStatSampler']
Testability,"// // constructor used for Testing + Application of the MVA,; // // only (no training), using given WeightFiles",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:27,Test,Testing,27,tmva/tmva/src/MethodBase.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx,1,['Test'],['Testing']
Testability,"// // iterate on fX; // TIterator* itr = fX->createIterator() ;; // RooAbsArg* arg = 0;; // while( ( arg = dynamic_cast<RooAbsArg*>(itr->Next() ) ) ) {; // assert(arg != 0);; // arg->setDirtyInhibit(true); // for having faster setter later in DoEval; // }",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/WrapperRooPdf.h:156,assert,assert,156,roofit/roofit/test/WrapperRooPdf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/WrapperRooPdf.h,1,['assert'],['assert']
Testability,"// // restore original range; // if (axis1->TestBit(TAxis::kAxisRange)) {; // if (hadRange1) const_cast<TAxis*>(axis1)->SetRange(iminOld1,imaxOld1);; // if (axis2->TestBit(TAxis::kAxisRange)) const_cast<TAxis*>(axis2)->SetRange(iminOld2,imaxOld2);; // // we need also to restore the original bits; // draw in current pad",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:44,Test,TestBit,44,hist/hist/src/TH3.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx,2,['Test'],['TestBit']
Testability,"// /// re-implement Gaussian; // double GausBM2(double mean, double sigma) {; // double y = Rndm_impl();; // double z = Rndm_impl();; // double x = z * 6.28318530717958623;; // double radius = std::sqrt(-2*std::log(y));; // double g = radius * std::sin(x);; // return mean + g * sigma;; // }; /// methods which are only for GSL random generators; /// Gamma functions (not implemented here, requires a GSL random engine)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/RandomFunctions.h:211,log,log,211,math/mathcore/inc/Math/RandomFunctions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/RandomFunctions.h,1,['log'],['log']
Testability,"// 0 size is terminator; // console.log(buf.slice(p, p+block_size).toString('ascii'));",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:36,log,log,36,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['log'],['log']
Testability,"// 1) Set up a diagnostic handler to avoid errors being printed out to; // stderr.; // 2) Use the stream to print the error with the associated node.; // 3) The stream will use the source manager to print the error, which will; // call the diagnostic handler.; // 4) The diagnostic handler will stream the error directly into this object's; // Message member, which is used when logging is asked for.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Remarks/YAMLRemarkParser.cpp:379,log,logging,379,interpreter/llvm-project/llvm/lib/Remarks/YAMLRemarkParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Remarks/YAMLRemarkParser.cpp,1,['log'],['logging']
Testability,"// 1) Smoke tests that the original scalar loop TripCount (TC) belongs to; // this loop. The scalar tripcount corresponds the number of elements; // processed by the loop, so we will refer to that from this point on.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/MVETailPredication.cpp:12,test,tests,12,interpreter/llvm-project/llvm/lib/Target/ARM/MVETailPredication.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/MVETailPredication.cpp,1,['test'],['tests']
Testability,"// 1-5 TEST PLC CONFINT SIMPLE GAUSSIAN : Confidence Level range is (0,1)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx:7,TEST,TEST,7,roofit/roostats/test/stressRooStats.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx,1,['TEST'],['TEST']
Testability,// 11.5 Vector Bitwise Logical Instructions,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVInstrInfo.cpp:23,Log,Logical,23,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVInstrInfo.cpp,1,['Log'],['Logical']
Testability,// 128-bit vector logical left / right shift,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h:18,log,logical,18,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h,1,['log'],['logical']
Testability,"// 14 TEST PLC HYPOTEST ON/OFF MODEL",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx:6,TEST,TEST,6,roofit/roostats/test/stressRooStats.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx,1,['TEST'],['TEST']
Testability,"// 15-18 TEST BC CONFINT CENTRAL SIMPLE POISSON : Observed value range is [0,100]",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx:9,TEST,TEST,9,roofit/roostats/test/stressRooStats.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx,1,['TEST'],['TEST']
Testability,"// 16-bit platforms like MSP430 and AVR take this path, so sink this; // assert to platforms that use it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfCompileUnit.cpp:73,assert,assert,73,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfCompileUnit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfCompileUnit.cpp,1,['assert'],['assert']
Testability,"// 161 is not a valid text font. This tests if the protection against; // invalid text font is working.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:38,test,tests,38,test/stressGraphics.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx,1,['test'],['tests']
Testability,"// 19 TEST BC CONFINT SHORTEST SIMPLE POISSON",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx:6,TEST,TEST,6,roofit/roostats/test/stressRooStats.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx,1,['TEST'],['TEST']
Testability,"// 1D testing direct profiles",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:6,test,testing,6,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['test'],['testing']
Testability,"// 1D testing e profiles",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:6,test,testing,6,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['test'],['testing']
Testability,"// 1D testing w profiles; // The error is not properly propagated when build with weights :S",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:6,test,testing,6,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['test'],['testing']
Testability,"// 2. Sort annotations in the temporal order FileCheck produced; // their associated diagnostics.; //; // This sort offers several benefits:; //; // A. On a single input line, the order of annotations reflects; // the FileCheck logic for processing directives/patterns.; // This can be helpful in understanding cases in which the; // order of the associated directives/patterns in the check; // file or on the command line either (i) does not match the; // temporal order in which FileCheck looks for matches for the; // directives/patterns (due to, for example, CHECK-LABEL,; // CHECK-NOT, or `--implicit-check-not`) or (ii) does match; // that order but does not match the order of those; // diagnostics along an input line (due to, for example,; // CHECK-DAG).; //; // On the other hand, because our presentation format presents; // input lines in order, there's no clear way to offer the; // same benefit across input lines. For consistency, it might; // then seem worthwhile to have annotations on a single line; // also sorted in input order (that is, by input column).; // However, in practice, this appears to be more confusing; // than helpful. Perhaps it's intuitive to expect annotations; // to be listed in the temporal order in which they were; // produced except in cases the presentation format obviously; // and inherently cannot support it (that is, across input; // lines).; //; // B. When diagnostics' annotations are split among multiple; // input lines, the user must track them from one input line; // to the next. One property of the sort chosen here is that; // it facilitates the user in this regard by ensuring the; // following: when comparing any two input lines, a; // diagnostic's annotations are sorted in the same position; // relative to all other diagnostics' annotations.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/FileCheck/FileCheck.cpp:228,log,logic,228,interpreter/llvm-project/llvm/utils/FileCheck/FileCheck.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/FileCheck/FileCheck.cpp,1,['log'],['logic']
Testability,"// 20-22 TEST BC CONFINT CENTRAL PRODUCT POISSON : Observed value range is [0,30] for x=s+b and [0,80] for; // y=2*s*1.2^beta",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx:9,TEST,TEST,9,roofit/roostats/test/stressRooStats.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx,1,['TEST'],['TEST']
Testability,"// 23-25 TEST MCMCC CONFINT PRODUCT POISSON : Observed value range is [0,30] for x=s+b and [0,80] for y=2*s*1.2^beta",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx:9,TEST,TEST,9,roofit/roostats/test/stressRooStats.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx,1,['TEST'],['TEST']
Testability,"// 26 TEST ZBI SIGNIFICANCE",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx:6,TEST,TEST,6,roofit/roostats/test/stressRooStats.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx,1,['TEST'],['TEST']
Testability,"// 27-31 TEST PLC VS AC SIGNIFICANCE : Observed value range is [0,300] for on source and [0,1100] for off-source; tau; // has the range [0.1,5.0]",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx:9,TEST,TEST,9,roofit/roostats/test/stressRooStats.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx,1,['TEST'],['TEST']
Testability,"// 2D Equal bins test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:17,test,test,17,test/stressHistoFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx,1,['test'],['test']
Testability,"// 2D Variable bins test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:20,test,test,20,test/stressHistoFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx,1,['test'],['test']
Testability,"// 2D tests with restricted range",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_THBinIterator.cxx:6,test,tests,6,hist/hist/test/test_THBinIterator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_THBinIterator.cxx,1,['test'],['tests']
Testability,// 2i64 vector logical shifts can efficiently avoid scalarization - do the; // shifts per-lane and then shuffle the partial results back together.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:15,log,logical,15,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['log'],['logical']
Testability,"// 3 reader usages + 3 tests with additional readers",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:23,test,tests,23,tmva/tmva/test/stressTMVA.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx,1,['test'],['tests']
Testability,"// 3-argument malloc(), as commonly used in {Free,Net,Open}BSD Kernels:; //; // void *malloc(unsigned long size, struct malloc_type *mtp, int flags);; //; // One of the possible flags is M_ZERO, which means 'give me back an; // allocation which is already zeroed', like calloc.; // 2-argument kmalloc(), as used in the Linux kernel:; //; // void *kmalloc(size_t size, gfp_t flags);; //; // Has the similar flag value __GFP_ZERO.; // This logic is largely cloned from O_CREAT in UnixAPIChecker, maybe some; // code could be shared.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/MallocChecker.cpp:438,log,logic,438,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/MallocChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/MallocChecker.cpp,1,['log'],['logic']
Testability,"// 3. If Second is known to be a constant, we can delete this point; // from the constraint asociated with First.; //; // So, if Second == 10, it means that First != 10.; // At the same time, the same logic does not apply to ranges.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RangeConstraintManager.cpp:201,log,logic,201,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RangeConstraintManager.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RangeConstraintManager.cpp,1,['log'],['logic']
Testability,"// 32-36 TEST HTC SIGNIFICANCE",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx:9,TEST,TEST,9,roofit/roostats/test/stressRooStats.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx,1,['TEST'],['TEST']
Testability,"// 32-bit extract of a 64-bit value is just access of a subregister, so free.; // TODO: Cost of 0 hits assert, though it's not clear it's what we really; // want.; // TODO: 32-bit insert to a 64-bit SGPR may incur a non-free copy due to SGPR; // alignment restrictions, but this probably isn't important.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPURegisterBankInfo.cpp:103,assert,assert,103,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPURegisterBankInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPURegisterBankInfo.cpp,1,['assert'],['assert']
Testability,"// 37-43 TEST HTI PRODUCT POISSON : Observed value range is [0,30] for x=s+b and [0,80] for y=2*s*1.2^beta",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx:9,TEST,TEST,9,roofit/roostats/test/stressRooStats.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx,1,['TEST'],['TEST']
Testability,"// 3D tests with restricted range",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_THBinIterator.cxx:6,test,tests,6,hist/hist/test/test_THBinIterator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_THBinIterator.cxx,1,['test'],['tests']
Testability,// 3rd priority is exact full unrolling. This will eliminate all copies; // of some exit test.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopUnrollPass.cpp:89,test,test,89,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopUnrollPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopUnrollPass.cpp,1,['test'],['test']
Testability,"// 4 elements expected: ""pair"", ""first type name"", ""second type name"", ""trailing stars""; // However legacy code had a test for 3, we will leave it here until; // a test is developed (or found :) ) that exercise these lines of code.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeGeneratorBase.cxx:118,test,test,118,tree/treeplayer/src/TTreeGeneratorBase.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeGeneratorBase.cxx,2,['test'],['test']
Testability,"// 44-48 TEST HTI S+B+E POISSON : Observed value range is [0,50] for x = e*s+b",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx:9,TEST,TEST,9,roofit/roostats/test/stressRooStats.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx,1,['TEST'],['TEST']
Testability,"// 4th priority is bounded unrolling.; // We can unroll by the upper bound amount if it's generally allowed or if; // we know that the loop is executed either the upper bound or zero times.; // (MaxOrZero unrolling keeps only the first loop test, so the number of; // loop tests remains the same compared to the non-unrolled version, whereas; // the generic upper bound unrolling keeps all but the last loop test so the; // number of loop tests goes up which may end up being worse on targets with; // constrained branch predictor resources so is controlled by an option.); // In addition we only unroll small upper bounds.; // Note that the cost of bounded unrolling is always strictly greater than; // cost of exact full unrolling. As such, if we have an exact count and; // found it unprofitable, we'll never chose to bounded unroll.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopUnrollPass.cpp:241,test,test,241,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopUnrollPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopUnrollPass.cpp,4,['test'],"['test', 'tests']"
Testability,"// :NOTE: Clang should not promote any i8 into i16 but for safety the; // following code will handle zexts or sexts generated by other; // front ends. Otherwise:; // If this is an 8 bit value, it is really passed promoted; // to 16 bits. Insert an assert[sz]ext to capture this, then; // truncate to the right size.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AVR/AVRISelLowering.cpp:248,assert,assert,248,interpreter/llvm-project/llvm/lib/Target/AVR/AVRISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AVR/AVRISelLowering.cpp,1,['assert'],['assert']
Testability,"// === String encodings ===; //; // JSON strings are character sequences (not byte sequences like std::string).; // We need to know the encoding, and for simplicity only support UTF-8.; //; // - When parsing, invalid UTF-8 is a syntax error like any other; //; // - When creating Values from strings, callers must ensure they are UTF-8.; // with asserts on, invalid UTF-8 will crash the program; // with asserts off, we'll substitute the replacement character (U+FFFD); // Callers can use json::isUTF8() and json::fixUTF8() for validation.; //; // - When retrieving strings from Values (e.g. asString()), the result will; // always be valid UTF-8.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h:346,assert,asserts,346,interpreter/llvm-project/llvm/include/llvm/Support/JSON.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h,2,['assert'],['asserts']
Testability,"// ===== Axial test section =============",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/rotationApplication.cxx:15,test,test,15,math/genvector/test/rotationApplication.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/rotationApplication.cxx,1,['test'],['test']
Testability,// ===================================; // Development mode-specifics; // ===================================; //; // Features we log,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MLRegAllocEvictAdvisor.cpp:130,log,log,130,interpreter/llvm-project/llvm/lib/CodeGen/MLRegAllocEvictAdvisor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MLRegAllocEvictAdvisor.cpp,2,['log'],['log']
Testability,// =============================================================================; // Returns whether a `trap` intrinsic should be emitted before I.; //; // This is a copy of the logic in SelectionDAGBuilder::visitUnreachable().; // =============================================================================,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXLowerUnreachable.cpp:178,log,logic,178,interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXLowerUnreachable.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXLowerUnreachable.cpp,1,['log'],['logic']
Testability,"// @(#)Root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss, Kai Voss, Eckhard von Toerne, Jan Therhaag; // Updated by: Omar Zapata, Kim Albertsson; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Factory *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors : *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <stelzer@cern.ch> - DESY, Germany *; * Peter Speckmayer <peter.speckmayer@cern.ch> - CERN, Switzerland *; * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * Omar Zapata <Omar.Zapata@cern.ch> - UdeA/ITM Colombia *; * Lorenzo Moneta <Lorenzo.Moneta@cern.ch> - CERN, Switzerland *; * Sergei Gleyzer <Sergei.Gleyzer@cern.ch> - U of Florida & CERN *; * Kim Albertsson <kim.albertsson@cern.ch> - LTU & CERN *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * UdeA/ITM, Colombia *; * U. of Florida, USA *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::Factory; \ingroup TMVA. This is the main MVA steering class.; It creates all MVA methods, and guides them through the training, testing and; evaluation phases.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:1767,test,testing,1767,tmva/tmva/src/Factory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx,1,['test'],['testing']
Testability,"// @(#)root/base:$Id$; // Author: Fons Rademakers 29/9/2001; /*************************************************************************; * Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TMD5; \ingroup Base. This code implements the MD5 message-digest algorithm.; The algorithm is due to Ron Rivest. This code was; written by Colin Plumb in 1993, no copyright is claimed.; This code is in the public domain; do with it what you wish. Equivalent code is available from RSA Data Security, Inc.; This code has been tested against that, and is equivalent,; except that you don't need to include two pages of legalese; with every copy. To compute the message digest of a chunk of bytes, create an; TMD5 object, call Update() as needed on buffers full of bytes, and; then call Final(), which will, optionally, fill a supplied 16-byte; array with the digest.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx:755,test,tested,755,core/base/src/TMD5.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMD5.cxx,1,['test'],['tested']
Testability,"// @(#)root/base:$Id$; // Author: Olivier Couet 05/10/2004; /*************************************************************************; * Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TVirtualViewer3D; \ingroup Base. Abstract 3D shapes viewer. The concrete implementations are:. - TViewerX3D : X3d viewer; - TGLViewer : OpenGL viewer. ## 3D Viewer Infrastructure Overview. The 3D Viewer infrastructure consists of:. - TVirtualViewer3D interface: An abstract handle to the viewer, allowing; client to test preferences, add objects, control the viewer via scripting; (to be added) etc.; -TBuffer3D class hierarchy: Used to describe 3D objects; (""shapes""); - filled /added by negotiation with viewer via TVirtualViewer3D. Together these allow clients to publish objects to any one of the 3D viewers; (currently OpenGL/x3d,TPad), free of viewer specific drawing code. They allow; our simple x3d viewer, and considerably more sophisticated OpenGL one to both; work with both geometry libraries (g3d and geom) efficiently. Publishing to a viewer consists of the following steps:. 1. Create / obtain viewer handle; 2. Begin scene on viewer; 3. Fill mandatory parts of TBuffer3D describing object; 4. Add to viewer; 5. Fill optional parts of TBuffer3D if requested by viewer, and add again; ... repeat 3/4/5 as required; 6. End scene on viewer. ## Creating / Obtaining Viewer. Create/obtain the viewer handle via local/global pad - the viewer is always; bound to a TPad object at present [This may be removed as a restriction in; the future] . You should perform the publishing to the viewer described below; in the Paint() method of the object you attach to the pad (via Draw()); ~~~ {.cpp}; TVirtualViewer3D * v = gPad->GetViewer3D(""xxxx"");; ~~~. "" xxxx"" is view",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualViewer3D.cxx:745,test,test,745,core/base/src/TVirtualViewer3D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualViewer3D.cxx,1,['test'],['test']
Testability,"// @(#)root/base:$Id$; // Author: Rene Brun 11/11/99; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TMessageHandler. \ingroup Base; Handle messages that might be generated by the system.; By default a handler only keeps track of the different messages; generated for a specific class. By deriving from this class and; overriding Notify() one can implement custom message handling.; In Notify() one has access to the message id and the object; generating the message. One can install more than one message; handler per class. A message handler can be removed or again; added when needed. - All Root ""Warnings"" are logged as message 1001; - All Root ""Errors"" are logged as message 1002; - All Root ""SysErrors"" are logged as message 1003; - All Root ""Fatals"" are logged as message 1004; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx:936,log,logged,936,core/base/src/TMessageHandler.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TMessageHandler.cxx,4,['log'],['logged']
Testability,"// @(#)root/base:$Id$; // Author: Rene Brun 12/12/94; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; // ---------------------------------- Benchmark.h",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TBenchmark.h:450,Benchmark,Benchmark,450,core/base/inc/TBenchmark.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TBenchmark.h,1,['Benchmark'],['Benchmark']
Testability,"// @(#)root/cont:$Id$; // Author: Philippe Canal 05/02/2001; // Feb 5 2001: Creation; // Feb 6 2001: Changed all int to unsigned int.; /** \class TBits; \ingroup Containers; Container of bits. This class provides a simple container of bits.; Each bit can be set and tested via the functions SetBitNumber and; TestBitNumber. The default value of all bits is kFALSE.; The size of the container is automatically extended when a bit; number is either set or tested. To reduce the memory size of the; container use the Compact function, this will discard the memory; occupied by the upper bits that are 0.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TBits.cxx:266,test,tested,266,core/cont/src/TBits.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TBits.cxx,3,"['Test', 'test']","['TestBitNumber', 'tested']"
Testability,"// @(#)root/fft:$Id$; // Author: Anna Kreshuk 07/4/2006; /*************************************************************************; * Copyright (C) 1995-2006, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////////////////////////; /// \class TFFTComplexReal; ///; /// One of the interface classes to the FFTW package, can be used directly; /// or via the TVirtualFFT class. Only the basic interface of FFTW is implemented.; ///; /// Computes the inverse of the real-to-complex transforms (class TFFTRealComplex); /// taking complex input (storing the non-redundant half of a logically Hermitian array); /// to real output (see FFTW manual for more details); ///; /// How to use it:; /// 1. Create an instance of TFFTComplexReal - this will allocate input and output; /// arrays (unless an in-place transform is specified); /// 2. Run the Init() function with the desired flags and settings; /// 3. Set the data (via SetPoints(), SetPoint() or SetPointComplex() functions); /// 4. Run the Transform() function; /// 5. Get the output (via GetPoints(), GetPoint() or GetPointReal() functions); /// 6. Repeat steps 3)-5) as needed; ///; /// For a transform of the same size, but with different flags, rerun the Init(); /// function and continue with steps 3)-5); ///; /// NOTE:; /// 1. running Init() function will overwrite the input array! Don't set any data; /// before running the Init() function; /// 2. FFTW computes unnormalized transform, so doing a transform followed by; /// its inverse will lead to the original array scaled by the transform size; /// 3. In Complex to Real transform the input array is destroyed. It cannot then; /// be retrieved when using the Get's methods.; ///; /////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/fftw/src/TFFTComplexReal.cxx:841,log,logically,841,math/fftw/src/TFFTComplexReal.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/fftw/src/TFFTComplexReal.cxx,1,['log'],['logically']
Testability,"// @(#)root/ged:$Id$; // Author: Ilka Antcheva 11/05/04; /*************************************************************************; * Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TAxisEditor; \ingroup ged. Implements GUI for axis attributes.; axis color; ticks parameters: length, setting on both axis sides,; logarithmic or linear scale along the selected axis,; primary, secondary and tertiary axis divisions,; setting more logarithmic labels,; optimizing labels' position if available; axis title - a title can be added via the text entry field; and can be set to be centered or rotated via the corresponding; check buttons, the title color, offset, font can be set easily; axis labels - their color, size, offset can be set similarly,; in addition there is a check box for no exponent choice,; and another one for setting the same decimal part for all labels. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/ged/src/TAxisEditor.cxx:557,log,logarithmic,557,gui/ged/src/TAxisEditor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/ged/src/TAxisEditor.cxx,2,['log'],['logarithmic']
Testability,"// @(#)root/geom:$Id$; // Author: Andrei Gheata 01/11/01; // CheckGeometry(), CheckOverlaps() by Mihaela Gheata; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TGeoChecker; \ingroup Geometry_painter. Geometry checking package. TGeoChecker class provides several geometry checking methods. There are two; types of tests that can be performed. One is based on random sampling or; ray-tracing and provides a visual check on how navigation methods work for; a given geometry. The second actually checks the validity of the geometry; definition in terms of overlapping/extruding objects. Both types of checks; can be done for a given branch (starting with a given volume) as well as for; the geometry as a whole. #### TGeoChecker::CheckPoint(Double_t x, Double_t y, Double_t z). This method can be called directly from the TGeoManager class and print a; report on how a given point is classified by the modeller: which is the; full path to the deepest node containing it, and the (under)estimation; of the distance to the closest boundary (safety). #### TGeoChecker::RandomPoints(Int_t npoints). Can be called from TGeoVolume class. It first draws the volume and its; content with the current visualization settings. Then randomly samples points; in its bounding box, plotting in the geometry display only the points; classified as belonging to visible volumes. #### TGeoChecker::RandomRays(Int_t nrays, Double_t startx, starty, startz). Can be called and acts in the same way as the previous, but instead of points,; rays having random isotropic directions are generated from the given point.; A raytracing algorithm propagates all rays until they exit geometry, plotting; all segmen",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geompainter/src/TGeoChecker.cxx:635,test,tests,635,geom/geompainter/src/TGeoChecker.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geompainter/src/TGeoChecker.cxx,1,['test'],['tests']
Testability,"// @(#)root/geom:$Id$; // Author: Andrei Gheata 18/10/17; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TGeoRegion; \ingroup Geometry_classes. Regions are groups of volumes having a common set of user tracking cuts. Class wrapper for regions used by Monte Carlo packages; A region is composed by a list of logical volumes and defines a set; of cuts. Used mainly to transport region information stored in; GDML format to the clients requiring it from the transient geometry. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoRegion.cxx:629,log,logical,629,geom/geom/src/TGeoRegion.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoRegion.cxx,1,['log'],['logical']
Testability,"// @(#)root/geom:$Id$; // Author: Mihaela Gheata 5/01/04; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TGeoPolygon; \ingroup Shapes_classes. An arbitrary polygon defined by vertices. The vertices; have to be defined CLOCKWISE in the XY plane, making either a convex; or concave polygon. No test for malformed polygons is performed. A polygon is a 2D shape defined by vertices in the XY plane. It is used by; TGeoXtru class for computing Contains() and Safety(). Only the pointers to; the actual lists of XY values are used - these are not owned by the class. To check if a point in XY plane is contained by a polygon, this is split; into an outscribed convex polygon and the remaining polygons of its subtraction; from the outscribed one. A point is INSIDE if it is; contained by the outscribed polygon but NOT by the remaining ones. Since these; can also be arbitrary polygons at their turn, a tree structure is formed:. ~~~ {.cpp}; P = Pconvex - (Pconvex-P) where (-) means 'subtraction'; Pconvex-P = P1 + P2 + ... where (+) means 'union'; ~~~. *Note that P1, P2, ... do not intersect each other and they are defined; by subsets of the list of vertices of P. They can be split in the same; way as P*. Therefore, if C(P) represents the Boolean : 'does P contains a given point?',; then:. ~~~ {.cpp}; C(P) = C(Pconvex) .and. not(C(P1) | C(P2) | ...); ~~~. For creating a polygon without TGeoXtru class, one has to call the constructor; TGeoPolygon(nvert) and then SetXY(Double_t *x, Double_t *y) providing the; arrays of X and Y vertex positions (defined clockwise) that have to 'live' longer; than the polygon they will describe. This complication is due to efficiency reasons",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoPolygon.cxx:614,test,test,614,geom/geom/src/TGeoPolygon.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoPolygon.cxx,1,['test'],['test']
Testability,"// @(#)root/io:$Id: 3a19890259ad6443ee313e090166614971ad4296 $; // Author: Rene Brun 28/11/94; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /**; \file TFile.cxx; \class TFile; \ingroup IO; \brief A ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-like logical structure, possibly including subdirectory hierarchies.; \sa \ref IO; \sa \ref rootio (or `io/doc/TFile` folder in your codebase). <details>; <summary>ROOT file data format specification</summary>. A ROOT file is composed of a header, followed by consecutive data records; (`TKey` instances) with a well defined format. The first data record starts at byte fBEGIN (currently set to kBEGIN).; Bytes 1->kBEGIN contain the file description, when fVersion >= 1000000; it is a large file (> 2 GB) and the offsets will be 8 bytes long and; fUnits will be set to 8:. Byte Range | Record Name | Description; ----------------|-------------|------------; 1->4 | ""root"" | Root file identifier; 5->8 | fVersion | File format version; 9->12 | fBEGIN | Pointer to first data record; 13->16 [13->20] | fEND | Pointer to first free word at the EOF; 17->20 [21->28] | fSeekFree | Pointer to FREE data record; 21->24 [29->32] | fNbytesFree | Number of bytes in FREE data record; 25->28 [33->36] | nfree | Number of free data records; 29->32 [37->40] | fNbytesName | Number of bytes in TNamed at creation time; 33->33 [41->41] | fUnits | Number of bytes for file pointers; 34->37 [42->45] | fCompress | Compression level and algorithm; 38->41 [46->53] | fSeekInfo | Pointer to TStreamerInfo record; 42->45 [54->57] | fNbytesInfo | Number of bytes in TStreamerInfo record; 46->63 [58->75] | fUUID | U",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TFile.cxx:613,log,logical,613,io/io/src/TFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TFile.cxx,1,['log'],['logical']
Testability,"// @(#)root/main:$Id$; // Author: Rene Brun 20/09/96; /////////////////////////////////////////////////////////////////////////; // Program to convert an HBOOK file into a ROOT file; // Author: Rene Brun; //; // This program is invoked via:; // h2root hbook_file_name root_file_name compress tolower; // if the second parameter root_file_name is missing the name will be; // automatically generated from the hbook file name. Example:; // h2root test.hbook; // is identical to; // h2root test.hbook test.root; // if compress is missing (or = 1)the ROOT file will be compressed; // if compress = 0 the ROOT file will not be compressed.; // if tolower is missing (or = 1) ntuple column names are converted to lower case; // but the first character is converted to upper case.; // if tolower = 2 same as tolower=1 except that the first character is also; // converted to lower case; /////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/main/src/h2root.cxx:445,test,test,445,main/src/h2root.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/main/src/h2root.cxx,3,['test'],['test']
Testability,"// @(#)root/mathcore:$Id$; // Author: C. Gumpert 09/2011; // program to test new KDTree class",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/newKDTreeTest.cxx:72,test,test,72,math/mathcore/test/newKDTreeTest.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/newKDTreeTest.cxx,1,['test'],['test']
Testability,"// @(#)root/mathcore:$Id$; // Author: Jonas Hahnfeld 11/2020; /*************************************************************************; * Copyright (C) 1995-2021, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; // This test uses EXPECT_EQ also for floating point numbers - the expected; // values are entered with enough digits to ensure binary equality.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/RanluxppEngine.cxx:428,test,test,428,math/mathcore/test/RanluxppEngine.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/RanluxppEngine.cxx,1,['test'],['test']
Testability,"// @(#)root/mathcore:$Id$; // Author: L. Moneta Fri Aug 17 14:29:24 2007; /**********************************************************************; * *; * Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; * *; * *; **********************************************************************/; // Header file for class LogLikelihoodFCN",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/LogLikelihoodFCN.h:316,Log,LogLikelihoodFCN,316,math/mathcore/inc/Fit/LogLikelihoodFCN.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/LogLikelihoodFCN.h,1,['Log'],['LogLikelihoodFCN']
Testability,"// @(#)root/mathcore:$Id$; // Author: Peter Malzacher 31/08/99; /**. \class TRandom3. Random number generator class based on; M. Matsumoto and T. Nishimura,; Mersenne Twister: A 623-diminsionally equidistributed; uniform pseudorandom number generator; ACM Transactions on Modeling and Computer Simulation,; Vol. 8, No. 1, January 1998, pp 3--30. For more information see the Mersenne Twister homepage; [http://www.math.keio.ac.jp/~matumoto/emt.html]. Advantage:. - large period 2**19937 -1; - relatively fast (slightly slower than TRandom2 but much faster than TRandom1). Drawback:; - a relative large internal state of 624 integers ; - generate only 32 random bits ; - not passing all the random generator tests. It fails some tests in TestU01; (see [http://simul.iro.umontreal.ca/testu01/tu01.html]). An altenativly excellent generator passing all tests of TestU01, having 61 random bits and ; fast as Mersenne and Twister is MIXMAX (TRandomMixMax). . @ingroup Random. */; //////////////////////////////////////////////////////////////////////; // Aug.99 ROOT implementation based on CLHEP by P.Malzacher; //; // the original code contains the following copyright notice:; /* This library is free software; you can redistribute it and/or */; /* modify it under the terms of the GNU Library General Public */; /* License as published by the Free Software Foundation; either */; /* version 2 of the License, or (at your option) any later */; /* version. */; /* This library is distributed in the hope that it will be useful, */; /* but WITHOUT ANY WARRANTY; without even the implied warranty of */; /* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. */; /* See the GNU Library General Public License for more details. */; /* You should have received a copy of the GNU Library General */; /* Public License along with this library; if not, write to the */; /* Free Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA */; /* 02111-1307 USA */; /* Copyright (C) 1997 Makoto Matsumoto and Takuji",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom3.cxx:707,test,tests,707,math/mathcore/src/TRandom3.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom3.cxx,3,['test'],['tests']
Testability,"// @(#)root/matrix:$Id$; // Authors: Fons Rademakers, Eddy Offermann Nov 2003; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TVectorT; \ingroup Matrix. TVectorT. Template class of Vectors in the linear algebra package. See the \ref Matrix page for the documentation of the linear algebra package. Unless otherwise specified, vector indices always start with 0,; spanning up to the specified limit-1. For (n) vectors where n <= kSizeMax (5 currently) storage space is; available on the stack, thus avoiding expensive allocation/; deallocation of heap space . However, this introduces of course; kSizeMax overhead for each vector object . If this is an issue; recompile with a new appropriate value (>=0) for kSizeMax. Another way to assign and store vector data is through Use; see for instance stressLinear.cxx file . Note that Constructors/assignments exists for all different matrix; views. For usage examples see `$ROOTSYS/test/stressLinear.cxx`. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TVectorT.cxx:1249,test,test,1249,math/matrix/src/TVectorT.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TVectorT.cxx,1,['test'],['test']
Testability,// @(#)root/minuit2:$Id$; // Author: L. Moneta 12/2005; /**; test of a pure minimization passing a user function; This is an example of running Minuit2 using the; Minuit2Minimizer class (via the Minimizer interface). */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/MnSim/demoMinimizer.cxx:61,test,test,61,math/minuit2/test/MnSim/demoMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/MnSim/demoMinimizer.cxx,1,['test'],['test']
Testability,"// @(#)root/mlp:$Id$; // Author: Christophe.Delaere@cern.ch 20/07/03; /*************************************************************************; * Copyright (C) 1995-2003, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TMultiLayerPerceptron. This class describes a neural network.; There are facilities to train the network and use the output. The input layer is made of inactive neurons (returning the; optionally normalized input) and output neurons are linear.; The type of hidden neurons is free, the default being sigmoids.; (One should still try to pass normalized inputs, e.g. between [0.,1]). The basic input is a TTree and two (training and test) TEventLists.; Input and output neurons are assigned a value computed for each event; with the same possibilities as for TTree::Draw().; Events may be weighted individually or via TTree::SetWeight().; 6 learning methods are available: kStochastic, kBatch,; kSteepestDescent, kRibierePolak, kFletcherReeves and kBFGS. This implementation, written by C. Delaere, is *inspired* from; the mlpfit package from J.Schwindling et al. with some extensions:. - the algorithms are globally the same; - in TMultilayerPerceptron, there is no limitation on the number of; layers/neurons, while MLPFIT was limited to 2 hidden layers; - TMultilayerPerceptron allows you to save the network in a root file, and; provides more export functionalities; - TMultilayerPerceptron gives more flexibility regarding the normalization of; inputs/outputs; - TMultilayerPerceptron provides, thanks to Andrea Bocci, the possibility to; use cross-entropy errors, which allows to train a network for pattern; classification based on Bayesian posterior probability. ### Introduction. Neural Networks are more and more used in various fields for data; analysis",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mlp/src/TMultiLayerPerceptron.cxx:870,test,test,870,math/mlp/src/TMultiLayerPerceptron.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mlp/src/TMultiLayerPerceptron.cxx,1,['test'],['test']
Testability,"// @(#)root/mlp:$Id$; // Author: Christophe.Delaere@cern.ch 25/04/04; /*************************************************************************; * Copyright (C) 1995-2003, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TMLPAnalyzer. This utility class contains a set of tests useful when developing; a neural network.; It allows you to check for unneeded variables, and to control; the network structure. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mlp/src/TMLPAnalyzer.cxx:490,test,tests,490,math/mlp/src/TMLPAnalyzer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mlp/src/TMLPAnalyzer.cxx,1,['test'],['tests']
Testability,"// @(#)root/mysql:$Id$; // Author: Fons Rademakers 15/02/2000; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; //////////////////////////////////////////////////////////////////////////; // //; // TMySQLServer //; // //; // MySQL server plugin implementing the TSQLServer interface. //; // //; // To open a connection to a server use the static method Connect(). //; // The db argument of Connect() is of the form: //; // mysql://<host>[:<port>][/<database>], e.g. //; // mysql://pcroot.cern.ch:3456/test //; // //; // As an example of connecting to mysql we assume that the server is //; // running on the local host and that you have access to a database //; // named ""test"" by connecting using an account that has a username and //; // password of ""tuser"" and ""tpass"". You can set up this account //; // by using the ""mysql"" program to connect to the server as the MySQL //; // root user and issuing the following statement: //; // //; // mysql> GRANT ALL ON test.* TO 'tuser'@'localhost' IDENTIFIED BY 'tpass';; // //; // If the test database does not exist, create it with this statement: //; // //; // mysql> CREATE DATABASE test; //; // //; // If you want to use a different server host, username, password, //; // or database name, just substitute the appropriate values. //; // To connect do: //; // //; // TSQLServer *db = TSQLServer::Connect(""mysql://localhost/test"", ""tuser"", ""tpass"");; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLServer.cxx:810,test,test,810,sql/mysql/src/TMySQLServer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLServer.cxx,6,['test'],['test']
Testability,"// @(#)root/net:$Id$; // Author: Fons Rademakers 25/11/99; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; //////////////////////////////////////////////////////////////////////////; // //; // TSQLServer //; // //; // Abstract base class defining interface to a SQL server. //; // //; // To open a connection to a server use the static method Connect(). //; // The db argument of Connect() is of the form: //; // <dbms>://<host>[:<port>][/<database>], e.g. //; // mysql://pcroot.cern.ch:3456/test, oracle://srv1.cern.ch/main, ... //; // Depending on the <dbms> specified an appropriate plugin library //; // will be loaded which will provide the real interface. //; // For SQLite, the syntax is slightly different: //; // sqlite://<database> //; // The string 'database' is directly passed to sqlite3_open(_v2), //; // so e.g. a filename or "":memory:"" are possible values. //; // For SQLite versions >= 3.7.7, SQLITE_OPEN_URI is activated to also //; // allow URI-parameters if needed. //; // //; // Related classes are TSQLResult and TSQLRow. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TSQLServer.cxx:802,test,test,802,net/net/src/TSQLServer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TSQLServer.cxx,1,['test'],['test']
Testability,"// @(#)root/postscript:$Id$; // Author: Valeriy Onuchin; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TImageDump; \ingroup PS. \brief Save canvas as an image (GIF, JPEG, PNG, XPM, TIFF etc.). Example:; ~~~ {.cpp}; $ root -b; root [0] .x hsimple.C; root [1] c1->Print(""c1.gif"");; ~~~; TImageDump can be used in any mode (batch, interactive) as follows; ~~~ {.cpp}; TCanvas *c1;; TImageDump *imgdump = new TImageDump(""test.png"");; c1->Paint();; imgdump->Close();; ~~~; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/postscript/src/TImageDump.cxx:740,test,test,740,graf2d/postscript/src/TImageDump.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/postscript/src/TImageDump.cxx,1,['test'],['test']
Testability,"// @(#)root/postscript:$Id: TPDF.cxx,v 1.0; // Author: Olivier Couet; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TPDF; \ingroup PS. \brief Interface to PDF. Like PostScript, PDF is a vector graphics output format allowing a very high; graphics output quality. The functionalities provided by this class are very; similar to those provided by `TPostScript`. Compare to PostScript output, the PDF files are usually smaller because some; parts of them can be compressed. PDF also allows to define table of contents. This facility can be used in ROOT.; The following example shows how to proceed:; ~~~ {.cpp}; {; TCanvas* canvas = new TCanvas(""canvas"");; TH1F* histo = new TH1F(""histo"",""test 1"",10,0.,10.);; histo->SetFillColor(2);; histo->Fill(2.);; histo->Draw();; canvas->Print(""plots.pdf("",""Title:One bin filled"");; histo->Fill(4.);; histo->Draw();; canvas->Print(""plots.pdf"",""Title:Two bins filled"");; histo->Fill(6.);; histo->Draw();; canvas->Print(""plots.pdf"",""Title:Three bins filled"");; histo->Fill(8.);; histo->Draw();; canvas->Print(""plots.pdf"",""Title:Four bins filled"");; histo->Fill(8.);; histo->Draw();; canvas->Print(""plots.pdf)"",""Title:The fourth bin content is 2"");; }; ~~~; Each character string following the keyword ""Title:"" makes a new entry in; the table of contents.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/postscript/src/TPDF.cxx:1009,test,test,1009,graf2d/postscript/src/TPDF.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/postscript/src/TPDF.cxx,1,['test'],['test']
Testability,"// @(#)root/proof:$Id$; // Author: G. Ganis 31/08/06; /*************************************************************************; * Copyright (C) 1995-2006, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TProofLog; \ingroup proofkernel. Implementation of the PROOF session log handler. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofLog.cxx:492,log,log,492,proof/proof/src/TProofLog.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofLog.cxx,1,['log'],['log']
Testability,"// @(#)root/proof:$Id$; // Author: G.Ganis, S.Ryu Feb 2011; /*************************************************************************; * Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /**; \defgroup proofbench PROOF benchmark utilities; \ingroup proof. Set of utilities to benchmark a PROOF facility. */; /** \class TProofBench; \ingroup proofbench. Steering class for PROOF benchmarks. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/src/TProofBench.cxx:450,benchmark,benchmark,450,proof/proofbench/src/TProofBench.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/src/TProofBench.cxx,3,['benchmark'],"['benchmark', 'benchmarks']"
Testability,"// @(#)root/proof:$Id$; // Author: Maarten Ballintijn 19/6/2002; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; //////////////////////////////////////////////////////////////////////////; // //; // TProofDebug //; // //; // Detailed logging / debug scheme. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofDebug.cxx:544,log,logging,544,proof/proof/src/TProofDebug.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofDebug.cxx,1,['log'],['logging']
Testability,"// @(#)root/proof:$Id$; // Author: Sangsu Ryu 22/06/2010; /*************************************************************************; * Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TProofBenchRun; \ingroup proofbench. Abstract base class for PROOF benchmark runs. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/src/TProofBenchRun.cxx:494,benchmark,benchmark,494,proof/proofbench/src/TProofBenchRun.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/src/TProofBenchRun.cxx,1,['benchmark'],['benchmark']
Testability,"// @(#)root/proof:$Id$; // Author: Sangsu Ryu 22/06/2010; /*************************************************************************; * Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TProofBenchRunCPU; \ingroup proofbench. CPU-intensive PROOF benchmark test generates events and fill 1, 2, or 3-D histograms.; No I/O activity is involved. . */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/src/TProofBenchRunCPU.cxx:487,benchmark,benchmark,487,proof/proofbench/src/TProofBenchRunCPU.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/src/TProofBenchRunCPU.cxx,2,"['benchmark', 'test']","['benchmark', 'test']"
Testability,"// @(#)root/proof:$Id$; // Author: Sangsu Ryu 22/06/2010; /*************************************************************************; * Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TProofBenchRunDataRead; \ingroup proofbench. I/O-intensive PROOF benchmark test reads in event files distributed; on the cluster. Number of events processed per second and size of; events processed per second are plotted against number of active; workers. Performance rate for unit packets and performance rate; for query are plotted. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/src/TProofBenchRunDataRead.cxx:492,benchmark,benchmark,492,proof/proofbench/src/TProofBenchRunDataRead.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/src/TProofBenchRunDataRead.cxx,2,"['benchmark', 'test']","['benchmark', 'test']"
Testability,"// @(#)root/proof:$Id$; // Author: Sangsu Ryu 22/06/2010; /*************************************************************************; * Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TSelEvent; \ingroup proofbench. Selector for PROOF I/O benchmark test.; For the I/O benchmark, event files are read in and histograms are filled.; For memory clean-up, dedicated files large enough to clean up memory ; cache on the machine are read in. Or memory clean-up can be ; accompolished by system call on Linux machine inside SlaveBegin(..) ; which should be much faster the reading in large files. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/src/TSelEvent.cxx:482,benchmark,benchmark,482,proof/proofbench/src/TSelEvent.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/src/TSelEvent.cxx,3,"['benchmark', 'test']","['benchmark', 'test']"
Testability,"// @(#)root/proof:$Id$; // Author: Sangsu Ryu 22/06/2010; /*************************************************************************; * Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TSelHist; \ingroup proofbench. PROOF selector for CPU-intensive benchmark test.; Events are generated and 1-D, 2-D, and/or 3-D histograms are filled. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/src/TSelHist.cxx:491,benchmark,benchmark,491,proof/proofbench/src/TSelHist.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/src/TSelHist.cxx,2,"['benchmark', 'test']","['benchmark', 'test']"
Testability,"// @(#)root/roostats:$Id$; /*************************************************************************; * Project: RooStats *; * Package: RooFit/RooStats *; * Authors: *; * Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke *; *************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::SamplingDistribution; \ingroup Roostats. This class simply holds a sampling distribution of some test statistic.; The distribution can either be an empirical distribution (eg. the samples themselves) or; a weighted set of points (eg. for the FFT method).; The class supports merging.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SamplingDistribution.cxx:712,test,test,712,roofit/roostats/src/SamplingDistribution.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SamplingDistribution.cxx,1,['test'],['test']
Testability,"// @(#)root/roostats:$Id$; // Author: Kyle Cranmer 28/07/2008; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::ProfileLikelihoodCalculator; \ingroup Roostats. The ProfileLikelihoodCalculator is a concrete implementation of CombinedCalculator; (the interface class for tools which can produce both a RooStats HypoTestResult; and ConfInterval). The tool uses the profile likelihood ratio as a test statistic,; and assumes that Wilks' theorem is valid. Wilks' theorem states that \f$ -2 \cdot \ln(\lambda) \f$; (profile likelihood ratio) is asymptotically distributed as a \f$ \chi^2 \f$ distribution; with \f$ N \f$ degrees of freedom. Thus, \f$p\f$-values can be; constructed, and the profile likelihood ratio can be used to construct a; LikelihoodInterval. (In the future, this class could be extended to use toy; Monte Carlo to calibrate the distribution of the test statistic). Usage: It uses the interface of the CombinedCalculator, so that it can be; configured by specifying:. - A model common model (*e.g.* a family of specific models, which includes both; the null and alternate); - A data set; - A set of parameters of interest. The nuisance parameters will be all other; parameters of the model.; - A set of parameters which specify the null hypothesis (including values; and const/non-const status). The interface allows one to pass the model, data, and parameters either directly; or via a ModelConfig class. The alternate hypothesis leaves the parameter free; to take any value other than those specified by the null hypothesis. There is; therefore no need to specify the alternate parameters. After configuring the calculator, one only needs to call GetHypo",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodCalculator.cxx:722,test,test,722,roofit/roostats/src/ProfileLikelihoodCalculator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodCalculator.cxx,1,['test'],['test']
Testability,"// @(#)root/roostats:$Id$; // Author: Kyle Cranmer 28/07/2008; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////////////////////////; /** \class RooStats::NumberCountingPdfFactory; \ingroup Roostats. A factory for building PDFs and data for a number counting combination.; The factory produces a PDF for N channels with uncorrelated background; uncertainty. Correlations can be added by extending this PDF with additional terms.; The factory relates the signal in each channel to a master signal strength times the; expected signal in each channel. Thus, the final test is performed on the master signal strength.; This yields a more powerful test than letting signal in each channel be independent. The problem has been studied in these references:. - http://arxiv.org/abs/physics/0511028; - http://arxiv.org/abs/physics/0702156; - http://cdsweb.cern.ch/record/1099969?ln=en. One can incorporate uncertainty on the expected signal by adding additional terms.; For the future, perhaps this factory should be extended to include the efficiency terms automatically. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NumberCountingPdfFactory.cxx:934,test,test,934,roofit/roostats/src/NumberCountingPdfFactory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NumberCountingPdfFactory.cxx,2,['test'],['test']
Testability,"// @(#)root/roostats:$Id$; // Author: Kyle Cranmer January 2009; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::NeymanConstruction; \ingroup Roostats. NeymanConstruction is a concrete implementation of the NeymanConstruction; interface that, as the name suggests, performs a NeymanConstruction. It produces; a RooStats::PointSetInterval, which is a concrete implementation of the; ConfInterval interface. The Neyman Construction is not a uniquely defined statistical technique, it; requires that one specify an ordering rule or ordering principle, which is; usually incoded by choosing a specific test statistic and limits of integration; (corresponding to upper/lower/central limits). As a result, this class must be; configured with the corresponding information before it can produce an interval.; Common configurations, such as the Feldman-Cousins approach, can be enforced by; other light weight classes. The Neyman Construction considers every point in the parameter space; independently, no assumptions are made that the interval is connected or of a; particular shape. As a result, the PointSetInterval class is used to represent; the result. The user indicate which points in the parameter space to perform; the construction by providing a PointSetInterval instance with the desired points. This class is fairly light weight, because the choice of parameter points to be; considered is factorized and so is the creation of the sampling distribution of; the test statistic (which is done by a concrete class implementing the; DistributionCreator interface). As a result, this class basically just drives the; construction by:. - using a DistributionCreator to c",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NeymanConstruction.cxx:929,test,test,929,roofit/roostats/src/NeymanConstruction.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NeymanConstruction.cxx,1,['test'],['test']
Testability,"// @(#)root/roostats:$Id$; // Author: Kyle Cranmer, George Lewis; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; //////////////////////////////////////////////////////////////////////////////; /** \class RooStats::HistFactory::RooBarlowBeestonLL; * \ingroup HistFactory; //; // Class RooBarlowBeestonLL implements the profile likelihood estimator for; // a given likelihood and set of parameters of interest. The value return by; // RooBarlowBeestonLL is the input likelihood nll minimized w.r.t all nuisance parameters; // (which are all parameters except for those listed in the constructor) minus; // the -log(L) of the best fit. Note that this function is slow to evaluate; // as a MIGRAD minimization step is executed for each function evaluation; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/RooBarlowBeestonLL.cxx:920,log,log,920,roofit/histfactory/src/RooBarlowBeestonLL.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/RooBarlowBeestonLL.cxx,1,['log'],['log']
Testability,"// @(#)root/roostats:$Id$; // Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke, Sven Kreiss; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /*****************************************************************************; * Project: RooStats; * Package: RooFit/RooStats; * @(#)root/roofit/roostats:$Id$; * Authors:; * Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke, Sven Kreiss; *; *****************************************************************************/; /** \class RooStats::HypoTestResult; \ingroup Roostats. HypoTestResult is a base class for results from hypothesis tests.; Any tool inheriting from HypoTestCalculator can return a HypoTestResult.; As such, it stores a p-value for the null-hypothesis (eg. background-only); and an alternate hypothesis (eg. signal+background).; The p-values can also be transformed into confidence levels; (\f$CL_{b}\f$, \f$CL_{s+b}\f$) in a trivial way.; The ratio of the \f$CL_{s+b}\f$ to \f$CL_{b}\f$ is often called; \f$CL_{s}\f$, and is considered useful, though it is not a probability.; Finally, the p-value of the null can be transformed into a number of; equivalent Gaussian sigma using the Significance method. The p-value of the null for a given test statistic is rigorously defined and; this is the starting point for the following conventions. ### Conventions used in this class. The p-value for the null and alternate are on the **same side** of the; observed value of the test statistic. This is the more standard; convention and avoids confusion when doing inverted tests. For exclusion, we also want the formula \f$CL_{s} = CL_{s+b} / CL_{b}\f$; to hold which therefore defines our conventions f",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestResult.cxx:922,test,tests,922,roofit/roostats/src/HypoTestResult.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestResult.cxx,1,['test'],['tests']
Testability,"// @(#)root/roostats:$Id$; // Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::HypoTestInverterPlot; \ingroup Roostats. Class to plot a HypoTestInverterResult, the output of the HypoTestInverter calculator. It can be used to plot the obtained p-values ( CLb, CLs+b or CLs) for each scanned point, as well as; the test statistic distributions (when a calculator based on pseudo-experiments is used) for the two; hypotheses. */; // include header file of this class",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterPlot.cxx:714,test,test,714,roofit/roostats/src/HypoTestInverterPlot.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterPlot.cxx,1,['test'],['test']
Testability,"// @(#)root/roostats:$Id$; // Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::HypoTestInverterResult; \ingroup Roostats. HypoTestInverterResult class holds the array of hypothesis test results and compute a confidence interval.; Based on the RatioFinder code available in the RooStatsCms package developed by Gregory Schott and Danilo Piparo; Ported and adapted to RooStats by Gregory Schott; Some contributions to this class have been written by Matthias Wolf (error estimation). */; // include header file of this class",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx:582,test,test,582,roofit/roostats/src/HypoTestInverterResult.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx,1,['test'],['test']
Testability,"// @(#)root/roostats:$Id$; // Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::RatioOfProfiledLikelihoodsTestStat; \ingroup Roostats. TestStatistic that returns the ratio of profiled likelihoods. By default the calculation is:. \f[; \log{ \frac{ \lambda(\mu_{alt} , {conditional \: MLE \: for \: alt \: nuisance}) }; { \lambda(\mu_{null} , {conditional \: MLE \: for \: null \: nuisance}) } }; \f]. where \f$ \lambda \f$ is the profile likelihood ratio, so the; MLE for the null and alternate are subtracted off. If `SetSubtractMLE(false)` then it calculates:. \f[; \log{ \frac{ L(\mu_{alt} , {conditional \: MLE \: for \: alt \: nuisance}) }; { L(\mu_{null} , {conditional \: MLE \: for \: null \: nuisance}) } }; \f]. where \f$ L \f$ is the Likelihood function. The values of the parameters of interest for the alternative; hypothesis are taken at the time of the construction.; If empty, it treats all free parameters as nuisance parameters. The value of the parameters of interest for the null hypotheses; are given at each call of Evaluate. This test statistic is often called the Tevatron test statistic, because it has; been used by the Tevatron experiments.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/RatioOfProfiledLikelihoodsTestStat.cxx:535,Test,TestStatistic,535,roofit/roostats/src/RatioOfProfiledLikelihoodsTestStat.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/RatioOfProfiledLikelihoodsTestStat.cxx,5,"['Test', 'log', 'test']","['TestStatistic', 'log', 'test']"
Testability,"// @(#)root/roostats:$Id$; // Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::SimpleLikelihoodRatioTestStat; \ingroup Roostats. TestStatistic class that returns -log(L[null] / L[alt]) where; L is the likelihood.; It is often called as the LEP Test statistic. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SimpleLikelihoodRatioTestStat.cxx:530,Test,TestStatistic,530,roofit/roostats/src/SimpleLikelihoodRatioTestStat.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SimpleLikelihoodRatioTestStat.cxx,3,"['Test', 'log']","['Test', 'TestStatistic', 'log']"
Testability,"// @(#)root/roostats:$Id$; // Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /*****************************************************************************; * Project: RooStats; * Package: RooFit/RooStats; * @(#)root/roofit/roostats:$Id$; * Authors:; * Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke; *; *****************************************************************************/; /** \class RooStats::LikelihoodInterval; \ingroup Roostats. LikelihoodInterval is a concrete implementation of the RooStats::ConfInterval interface.; It implements a connected N-dimensional intervals based on the contour of a likelihood ratio.; The boundary of the interval is equivalent to a MINUIT/MINOS contour about the maximum likelihood estimator. The interval does not need to be an ellipse (eg. it is not the HESSE error matrix).; The level used to make the contour is the same as that used in MINOS, eg. it uses Wilks' theorem,; which states that under certain regularity conditions the function -2* log (profile likelihood ratio) is asymptotically distributed as a chi^2 with N-dof, where; N is the number of parameters of interest. Note, a boundary on the parameter space (eg. s>= 0) or a degeneracy (eg. mass of signal if Nsig = 0) can lead to violations of the conditions necessary for Wilks'; theorem to be true. Also note, one can use any RooAbsReal as the function that will be used in the contour; however, the level of the contour; is based on Wilks' theorem as stated above. #### References. * 1. F. James., Minuit.Long writeup D506, CERN, 1998. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/LikelihoodInterval.cxx:1390,log,log,1390,roofit/roostats/src/LikelihoodInterval.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/LikelihoodInterval.cxx,1,['log'],['log']
Testability,"// @(#)root/roostats:$Id$; // Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke; // Additional Contributions: Giovanni Petrucciani; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::ProfileLikelihoodTestStat; \ingroup Roostats. ProfileLikelihoodTestStat is an implementation of the TestStatistic interface; that calculates the profile likelihood ratio at a particular parameter point; given a dataset. It does not constitute a statistical test, for that one may; either use:. - the ProfileLikelihoodCalculator that relies on asymptotic properties of the; Profile Likelihood Ratio; - the NeymanConstruction class with this class as a test statistic; - the HybridCalculator class with this class as a test statistic. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodTestStat.cxx:631,Test,TestStatistic,631,roofit/roostats/src/ProfileLikelihoodTestStat.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodTestStat.cxx,4,"['Test', 'test']","['TestStatistic', 'test']"
Testability,"// @(#)root/roostats:$Id$; // Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke; // Contributions: Giovanni Petrucciani and Annapaola Decosa; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::HypoTestInverter; \ingroup Roostats. A class for performing a hypothesis test inversion by scanning; the hypothesis test results of a HypoTestCalculator for various values of the; parameter of interest. By looking at the confidence level curve of the result, an; upper limit can be derived by computing the intersection of the confidence level curve with the desired confidence level.; The class implements the RooStats::IntervalCalculator interface, and returns a; RooStats::HypoTestInverterResult. The result is a SimpleInterval, which; via the method UpperLimit() returns to the user the upper limit value. ## Scanning options; The HypoTestInverter implements various options for performing the scan.; - HypoTestInverter::RunFixedScan will scan the parameter of interest using a fixed grid.; - HypoTestInverter::SetAutoScan will perform an automatic scan to find; optimally the curve. It will stop when the desired precision is obtained.; - HypoTestInverter::RunOnePoint computes the confidence level at a given point. ### CLs presciption; The class can scan the CLs+b values or alternatively CLs. For the latter,; call HypoTestInverter::UseCLs().; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx:614,test,test,614,roofit/roostats/src/HypoTestInverter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx,2,['test'],['test']
Testability,"// @(#)root/roostats:$Id$; // Author: Kyle Cranmer, Sven Kreiss 23/05/10; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::AsymptoticCalculator; \ingroup Roostats. Hypothesis Test Calculator based on the asymptotic formulae for the profile; likelihood ratio. It performs hypothesis tests using the asymptotic formula for the profile likelihood, and; uses the Asimov data set to compute expected significances or limits. See G. Cowan, K. Cranmer, E. Gross and O. Vitells: Asymptotic formulae for; likelihood- based tests of new physics. Eur. Phys. J., C71:1–19, 2011.; It provides methods to perform hypothesis tests using the likelihood function,; and computes the \f$p\f$-values for the null and the alternate hypothesis using the asymptotic; formulae for the profile likelihood ratio described in the given paper. The calculator provides methods to produce the Asimov dataset, *i.e.* a dataset; generated where the observed values are equal to the expected ones.; The Asimov data set is then used to compute the observed asymptotic \f$p\f$-value for; the alternate hypothesis and the asymptotic expected \f$p\f$-values. The asymptotic formulae are valid only for one POI (parameter of interest). So; the calculator works only for one-dimensional (one POI) models.; If more than one POI exists, only the first one is used. The calculator can generate Asimov datasets from two kinds of PDFs:; - ""Counting"" distributions: RooPoisson, RooGaussian, or products of RooPoissons.; - Extended, *i.e.* number of events can be read off from extended likelihood term.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx:505,Test,Test,505,roofit/roostats/src/AsymptoticCalculator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx,4,"['Test', 'test']","['Test', 'tests']"
Testability,"// @(#)root/roostats:$Id$; // Author: Kyle Cranmer, Sven Kreiss 23/05/10; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::HybridCalculator; \ingroup Roostats. Same purpose as HybridCalculatorOriginal, but different implementation. This class implements the Hypothesis test calculation using an hybrid; (frequentist/bayesian) procedure.A frequentist sampling of the test statistic; distribution is obtained but with marginalization of the nuisance parameters.; The toys are generated by sampling the nuisance parameters according to their; prior distribution. The use of the of ToyMCSampler as the TestStatSampler is assumed. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HybridCalculator.cxx:599,test,test,599,roofit/roostats/src/HybridCalculator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HybridCalculator.cxx,3,"['Test', 'test']","['TestStatSampler', 'test']"
Testability,"// @(#)root/roostats:$Id$; // Author: Kyle Cranmer, Sven Kreiss 23/05/10; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::HypoTestCalculatorGeneric; \ingroup Roostats. Common base class for the Hypothesis Test Calculators.; It is not designed to use directly but via its derived classes. Same purpose as HybridCalculatorOriginal, but different implementation. This is the ""generic"" version that works with any TestStatSampler. The; HybridCalculator derives from this class but explicitly uses the; ToyMCSampler as its TestStatSampler. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestCalculatorGeneric.cxx:536,Test,Test,536,roofit/roostats/src/HypoTestCalculatorGeneric.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestCalculatorGeneric.cxx,3,['Test'],"['Test', 'TestStatSampler']"
Testability,"// @(#)root/roostats:$Id$; // Author: Sven Kreiss June 2010; // Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke; /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class RooStats::NuisanceParametersSampler; \ingroup Roostats. Helper class for ToyMCSampler. Handles all of the nuisance parameter related; functions. Once instantiated, it gives a new nuisance parameter point; at each call to nextPoint(...).; */; /** \class RooStats::ToyMCSampler; \ingroup Roostats. ToyMCSampler is an implementation of the TestStatSampler interface.; It generates Toy Monte Carlo for a given parameter point and evaluates a; TestStatistic. For parallel runs, ToyMCSampler can be given an instance of ProofConfig; and then run in parallel using proof or proof-lite. Internally, it uses; ToyMCStudy with the RooStudyManager.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx:841,Test,TestStatSampler,841,roofit/roostats/src/ToyMCSampler.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx,2,['Test'],"['TestStatSampler', 'TestStatistic']"
Testability,"// @(#)root/roostats:$Id: cranmer $; // Author: Kyle Cranmer, Akira Shibata; // Author: Giovanni Petrucciani (UCSD) (log-interpolation); /*************************************************************************; * Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////////////////////////; /** \class RooStats::HistFactory::FlexibleInterpVar; * \ingroup HistFactory; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/FlexibleInterpVar.cxx:117,log,log-interpolation,117,roofit/histfactory/src/FlexibleInterpVar.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/FlexibleInterpVar.cxx,1,['log'],['log-interpolation']
Testability,"// @(#)root/rpdutils:$Id$; // Author: Fons Rademakers 11/08/97; // Modifified: Gerardo Ganis 8/04/2003; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; //////////////////////////////////////////////////////////////////////////; // //; // DaemonStart //; // //; // Detach a daemon process from login session context. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/daemon.cxx:603,log,login,603,net/rpdutils/src/daemon.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/daemon.cxx,1,['log'],['login']
Testability,"// @(#)root/test/RootIDE/:$Id$; // Author: Bertrand Bellenot 20/04/2007; /*************************************************************************; * Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/RootIDE/main.cxx:12,test,test,12,test/RootIDE/main.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootIDE/main.cxx,1,['test'],['test']
Testability,"// @(#)root/test/RootIDE/:$Id$; // Author: Bertrand Bellenot 20/04/2007; /*************************************************************************; * Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; //////////////////////////////////////////////////////////////////////////; // //; // TGRootIDE //; // //; // A simple IDE editor that uses the TGTextEdit widget. //; // It provides all functionalities of TGTextEdit as copy, paste, cut, //; // search, go to a given line number. In addition, it provides the //; // possibilities for compiling, executing or interrupting a running //; // macro. //; // //; // This class can be used in following ways: //; // - with file name as argument: //; // new TGRootIDE(""hsimple.C""); //; // - with a TMacro* as argument: //; // TMacro *macro = new TMacro(""hsimple.C""); //; // new TGRootIDE(macro); //; // //; // Basic Features: //; // //; // New Document //; // //; // To create a new blank document, select File menu / New, or click //; // the New toolbar button. It will create a new instance of //; // TGRootIDE. //; // //; // Open/Save File //; // //; // To open a file, select File menu / Open or click on the Open //; // toolbar button. This will bring up the standard File Dialog for //; // opening files. //; // If the current document has not been saved yet, you will be asked //; // either to save or abandon the changes. //; // To save the file using the same name, select File menu / Save or //; // the toolbar Save button. To change the file name use File menu / //; // Save As... or corresponding SaveAs button on the toolbar. //; // //; // Text Selection //; // //; // You can move the cursor by simply clicking on the desired location //; // with the left mouse button. To highlight some text, press the mouse //; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/RootIDE/TGRootIDE.cxx:12,test,test,12,test/RootIDE/TGRootIDE.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootIDE/TGRootIDE.cxx,1,['test'],['test']
Testability,"// @(#)root/test/rhtml/:$Id$; // Author: Bertrand Bellenot 09/05/2007; /*************************************************************************; * Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/rhtml/rhtml.cxx:12,test,test,12,test/rhtml/rhtml.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/rhtml/rhtml.cxx,2,['test'],['test']
Testability,"// @(#)root/test:$Id$; // Author: Alejandro García Montoro 07/2017",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradient.cxx:12,test,test,12,math/mathcore/test/testGradient.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradient.cxx,2,['test'],['test']
Testability,"// @(#)root/test:$Id$; // Author: Alejandro García Montoro 08/2017",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradientFitting.cxx:12,test,test,12,math/mathcore/test/testGradientFitting.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradientFitting.cxx,1,['test'],['test']
Testability,"// @(#)root/test:$Id$; // Author: Anar Manafov 01/04/2008; //----------------------------------------------------------------; // This is a tests ROOT Iterators and STL algorithms.; // The test project covers the following cases:; // 1 - TList with std::for_each (Full iteration: from the Begin up to the End); // 2 - TList with std::find_if; // 3 - TList with std::count_if; // 4 - TObjArray with std::for_each (Full iteration: from the Begin up to the End); // 5 - TObjArray with std::find_if; // 6 - TObjArray with std::count_if; // 7 - TMap with std::for_each (Full iteration: from the Begin up to the End); // 8 - TMap with std::for_each (Partial iteration: from the Begin up to the 3rd element); // 9 - TMap with std::find_if; // 10 - TMap with std::count_if; // 11 - TBtree with std::for_each (Full iteration: from the Begin up to the End); // 12 - TBtree with std::find_if; // 13 - TBtree with std::count_if; // 14 - TOrdCollection with std::for_each (Full iteration: from the Begin up to the End); // 15 - TOrdCollection with std::find_if; // 16 - TOrdCollection with std::count_if; // 17 - TRefArray with std::for_each (Full iteration: from the Begin up to the End); // 18 - TRefArray with std::find_if; // 19 - TRefArray with std::count_if; // STD",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressIterators.cxx:12,test,test,12,test/stressIterators.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressIterators.cxx,3,['test'],"['test', 'tests']"
Testability,"// @(#)root/test:$Id$; // Author: Anar Manafov 18/04/2008",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressIterators.h:12,test,test,12,test/stressIterators.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressIterators.h,1,['test'],['test']
Testability,"// @(#)root/test:$Id$; // Author: Axel Naumann, 2011-01-11; /////////////////////////////////////////////////////////////////; //; // Stress test (functionality and timing) for C++ interpreter.; //; /////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressInterpreter.cxx:12,test,test,12,test/stressInterpreter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressInterpreter.cxx,2,['test'],['test']
Testability,"// @(#)root/test:$Id$; // Author: Brett Viren 04/15/2001",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/guiviewer.h:12,test,test,12,test/guiviewer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/guiviewer.h,1,['test'],['test']
Testability,"// @(#)root/test:$Id$; // Author: Brett Viren 04/15/2001; // guiviewer.cxx: GUI test program showing TGTableLayout widget manager,; // embedded ROOT canvases, axis and sliders.; // To run it do: make guiviewer; guiviewer",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/guiviewer.cxx:12,test,test,12,test/guiviewer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/guiviewer.cxx,2,['test'],['test']
Testability,"// @(#)root/test:$Id$; // Author: David Smith 20/10/14; /////////////////////////////////////////////////////////////////; //; //___A test for I/O plugins by reading files___; //; // The files used in this test have been generated by; // stress.cxx and preplaced on some data servers.; // stressIOPlugins reads the remote files via various data; // access protocols to test ROOT IO plugins. The data read are; // tested via tests based on some of stress.cxx tests.; //; // Can be run as:; // stressIOPlugins [name]; //; // The name parameter is a protocol name, as expected; // in a url. The supported names are: xroot, root, http, https.; // If the name is omitted a selection of schemes are tested; // based on feature availability:; //; // feature protocol multithreaded test available; //; // xrootd root no; // davix http no; //; // An example of output of a non multithreaded test, when all the tests; // run OK is shown below:; //; // ****************************************************************************; // * Starting stressIOPlugins test for protocol http; // * Test files will be read from:; // * http://root.cern/files/StressIOPluginsTestFiles/; // ****************************************************************************; // Test 1 : Check size & compression factor of a Root file........ using stress_2.root; // : opened file with plugin class......................... TDavixFile; // : Check size & compression factor of a Root file........ OK; // Test 2 : Test graphics & Postscript............................ using stress_5.root; // : opened file with plugin class......................... TDavixFile; // : Test graphics & Postscript............................ OK; // Test 3 : Trees split and compression modes..................... using Event_8a.root; // : opened file with plugin class......................... TDavixFile; // : Trees split and compression modes..................... using Event_8b.root; // : opened file with plugin class......................... TDavix",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressIOPlugins.cxx:12,test,test,12,test/stressIOPlugins.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressIOPlugins.cxx,13,"['Test', 'test']","['Test', 'test', 'tested', 'tests']"
Testability,"// @(#)root/test:$Id$; // Author: Federico Carminati 22/04/2004; // test program for the class TComplex",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/ctorture.cxx:12,test,test,12,test/ctorture.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/ctorture.cxx,2,['test'],['test']
Testability,"// @(#)root/test:$Id$; // Author: Fons Rademakers 04/04/97; // This small demo shows the traditional ""Hello World"". Its main use is; // to show how to use ROOT graphics and how to enter the eventloop to; // be able to interact with the graphics.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/hworld.cxx:12,test,test,12,test/hworld.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/hworld.cxx,2,['test'],['test']
Testability,"// @(#)root/test:$Id$; // Author: Fons Rademakers 07/03/98; // guitest.cxx: test program for ROOT native GUI classes.; // To run it do: make guitest; guitest; // Another version with identical functionality but using the new signals; // and slots communication mechanism can be found in $ROOTSYS/tutorials.; // That version can be run entirely in the interpreter.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/guitest.cxx:12,test,test,12,test/guitest.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/guitest.cxx,2,['test'],['test']
Testability,"// @(#)root/test:$Id$; // Author: Fons Rademakers 14/11/97; //; // Sample code showing off a few advanced features; // and comparing them (time-wise) with traditional ones.; //; // Simple example: downsampling a matrix, that is, creating a matrix; // that is 4 times (twice in each dimension) smaller than the original; // matrix, by picking every other sample of the latter.; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/vlazy.cxx:12,test,test,12,test/vlazy.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/vlazy.cxx,1,['test'],['test']
Testability,"// @(#)root/test:$Id$; // Author: Fons Rademakers 19/08/96",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/tcollex.cxx:12,test,test,12,test/tcollex.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tcollex.cxx,2,['test'],['test']
Testability,"// @(#)root/test:$Id$; // Author: Fons Rademakers and Eddy Offermann Nov 2003; //////////////////////////////////////////////////////////////////////////; // //; // Linear Algebra Package -- Matrix Verifications. //; // //; // This file implements a large set of TMat operation tests. //; // ******************************************************************* //; // * Starting Matrix - S T R E S S suite //; // ******************************************************************* //; // Test 1 : Allocation, Resizing.................................. OK //; // Test 2 : Filling, Inserting, Using............................. OK //; // Test 3 : Uniform matrix operations............................. OK //; // Test 4 : Binary Matrix element-by-element operations............OK //; // Test 5 : Matrix transposition...................................OK //; // Test 6 : Haar/Hilbert Matrix....................................OK //; // Test 7 : Matrix promises........................................OK //; // Test 8 : Matrix Norms...........................................OK //; // Test 9 : Matrix Determinant.....................................OK //; // Test 10 : General Matrix Multiplications.........................OK //; // Test 11 : Symmetric Matrix Multiplications.......................OK //; // Test 12 : Matrix Vector Multiplications..........................OK //; // Test 13 : Matrix Inversion.......................................OK //; // Test 14 : Matrix Persistence.....................................OK //; // ******************************************************************* //; // //; //////////////////////////////////////////////////////////////////////////; //_____________________________batch only_____________________",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/vmatrix.cxx:12,test,test,12,test/vmatrix.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/vmatrix.cxx,16,"['Test', 'test']","['Test', 'test', 'tests']"
Testability,"// @(#)root/test:$Id$; // Author: Fons Rademakers and Eddy Offermann Nov 2003; //////////////////////////////////////////////////////////////////////////; // //; // Linear Algebra Package -- Vector Verifications. //; // //; // This file implements a large set of TVectorD operation tests. //; // ******************************************************************* //; // * Starting Vector - S T R E S S suite //; // ******************************************************************* //; // Test 1 : Allocation, Filling, Resizing......................... OK //; // Test 2 : Uniform vector operations............................. OK //; // Test 3 : Binary vector element-by-element operations............OK //; // Test 4 : Vector Norms...........................................OK //; // Test 5 : Matrix Slices to Vectors...............................OK //; // Test 6 : Vector Persistence.....................................OK //; // ******************************************************************* //; // //; //////////////////////////////////////////////////////////////////////////; //_____________________________batch only_____________________",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/vvector.cxx:12,test,test,12,test/vvector.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/vvector.cxx,8,"['Test', 'test']","['Test', 'test', 'tests']"
Testability,"// @(#)root/test:$Id$; // Author: Lorenzo Moneta 06/2005; // Martin Storø Nyfløtt 05/2017",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/testGenVector.cxx:12,test,test,12,math/mathcore/test/stress/testGenVector.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/testGenVector.cxx,8,['test'],['test']
Testability,"// @(#)root/test:$Id$; // Author: Lorenzo Moneta 06/2005; // Martin Storø Nyfløtt 05/2017; ///////////////////////////////////////////////////////////////////////////////////; //; // MathMore test suite; // ==============================; //; // This program performs tests :; // - numerical integration, derivation and root finders; // - it compares for various values of the gamma and beta distribution); // - the numerical calculated integral of pdf with cdf function,; // - the calculated derivative of cdf with pdf; // - the inverse (using root finder) of cdf with quantile; //; // to run the program outside ROOT do:; // > make stressMathMoreUnit; // > ctest -R gtest-math-mathmore-test-stressMathMoreUnit; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testStress.cxx:12,test,test,12,math/mathmore/test/testStress.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testStress.cxx,4,['test'],"['test', 'test-stressMathMoreUnit', 'tests']"
Testability,"// @(#)root/test:$Id$; // Author: Lorenzo Moneta 06/2005; ///////////////////////////////////////////////////////////////////////////////////; //; // MathCore Benchmark test suite; // ==============================; //; // This program performs tests :; // - mathematical functions in particular the statistical functions by estimating; // pdf, cdf and quantiles. cdf are estimated directly and compared with calculated integral from pdf; // - physics vectors (2D, 3D and 4D) including I/O for every type and for both double and Double32_t; // - SMatrix and SVectors including I/O for double and Double32_t types; // - I/O of complex objects which dictionary has been generated using CINT (default) or Reflex; // TrackD and TrackD32 which contain physics vectors of double and Double32_t; // TrackErrD and TrackErrD32 which contain physics vectors and an SMatrix of double and Double32_t; // VecTrackD which contains an std::vector<TrackD>; //; //; // the program cun run only in compiled mode.; // To run outside ROOT do:; //; // > cd $ROOTSYS/test; // > make stressMathMore; // > ./stressMathMore; //; // to run using REflex set before compiling the environment variable useReflex.; //; // > export useReflex=1; // > make stressMathMore; // > ./stressMathMore; //; // to run inside ROOT using ACliC; // for using CINT you need first to have the library libTrackMathCoreDict.so; // (type: make libTrackMathCoreDict.so to make it); //; // root> gSystem->Load(""libMathCore"");; // root> gSystem->Load(""libTree"");; // root> gSystem->Load(""libHist"");; // root> .x stressMathCore.cxx+; //; // for using Reflex dictionaries you need first to have the library libTrackMathCoreRflx.so; // (type: make libTrackMathCoreRflx.so to make it); //; // root> gSystem->Load(""libMathCore"");; // root> gSystem->Load(""libTree"");; // root> gSystem->Load(""libHist"");; // root> gSystem->Load(""libReflex"");; // root> gSystem->SetIncludePath(""-DUSE_REFLEX"");; // root> .x stressMathCore.cxx+; //; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx:12,test,test,12,test/stressMathCore.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx,5,"['Benchmark', 'test']","['Benchmark', 'test', 'tests']"
Testability,"// @(#)root/test:$Id$; // Author: Lorenzo Moneta 06/2005; ///////////////////////////////////////////////////////////////////////////////////; //; // MathCore Benchmark test suite; // ==============================; //; // This program performs tests of ROOT::Math 4D LorentzVectors comparing with TLorentzVector; // The time performing various vector operations on a collection of vectors is measured.; // The benchmarked operations are:; // - vector construction from 4 values; // - construction using a setter method; // - simple addition of all the vector pairs in the collection; // - calculation of deltaR = phi**2 + eta**2 of all vector pairs in the collection; // - two simple analysis:; // - the first requires some cut (on pt and eta) and on the invariant mass; // of the selected pairs; // - the second requires just some cut in pt, eta and delta R on all the; // vector pair; // - conversion between XYZTVectors to PtRhoEtaPhi based vectors; //; // The two analysis demonstrates, especially in the second case, the advantage of using; // vector based on cylindrical coordinate, given the fact that the time spent in the conversion is; // much less than the time spent in the analysis routine.; //; // To run the program do:; // stressVector : run standard test with collection of 1000 vectors; // stressVector 10000 : run with a collection of 10000 vectors; //; ///////////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/stress2D.cxx:12,test,test,12,math/genvector/test/stress2D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/stress2D.cxx,6,"['Benchmark', 'benchmark', 'test']","['Benchmark', 'benchmarked', 'test', 'tests']"
Testability,"// @(#)root/test:$Id$; // Author: Lorenzo Moneta 06/2005; ///////////////////////////////////////////////////////////////////////////////////; //; // MathCore Benchmark test suite; // ==============================; //; // This program performs tests of ROOT::Math 4D LorentzVectors comparing with TLorentzVector; // The time performing various vector operations on a collection of vectors is measured.; // The benchmarked operations are:; // - vector construction from 4 values; // - construction using a setter method; // - simple addition of all the vector pairs in the collection; // - calculation of deltaR = phi**2 + eta**2 of all vector pairs in the collection; // - two simple analysis:; // - the first requires some cut (on pt and eta) and on the invariant mass; // of the selected pairs; // - the second requires just some cut in pt, eta and delta R on all the; // vector pair; // - conversion between XYZTVectors to PtRhoEtaPhi based vectors; //; // The two analysis demostrates, especially in the second case, the advantage of using; // vector based on cylindrical coordinate, given the fact that the time spent in the conversion is; // much less than the time spent in the analysis routine.; //; // To run the program do:; // stressVector : run standard test with collection of 1000 vectors; // stressVector 10000 : run with a collection of 10000 vectors; //; ///////////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressVector.cxx:12,test,test,12,test/stressVector.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressVector.cxx,6,"['Benchmark', 'benchmark', 'test']","['Benchmark', 'benchmarked', 'test', 'tests']"
Testability,"// @(#)root/test:$Id$; // Author: Lorenzo Moneta 06/2005; ///////////////////////////////////////////////////////////////////////////////////; //; // MathMore Benchmark test suite; // ==============================; //; // This program performs tests :; // - numerical integration, derivation and root finders; // - it compares for various values of the gamma and beta distribution); // - the numerical calculated integral of pdf with cdf function,; // - the calculated derivative of cdf with pdf; // - the inverse (using root finder) of cdf with quantile; //; // to run the program outside ROOT do:; // > make stressMathMore; // > ./stressMathMore; //; // to run the program in ROOT; // root> gSystem->Load(""libMathMore""); // root> .x stressMathMore.cxx+; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx:12,test,test,12,test/stressMathMore.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx,4,"['Benchmark', 'test']","['Benchmark', 'test', 'tests']"
Testability,"// @(#)root/test:$Id$; // Author: Nikolay Root 05/07/98",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx:12,test,test,12,test/tcollbm.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx,1,['test'],['test']
Testability,"// @(#)root/test:$Id$; // Author: Peter Malzacher 19/06/99",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/TestVectors.cxx:12,test,test,12,test/TestVectors.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TestVectors.cxx,1,['test'],['test']
Testability,"// @(#)root/test:$Id$; // Author: Rene Brun 05/11/98; /////////////////////////////////////////////////////////////////; //; // R O O T T E S T S U I T E and B E N C H M A R K S; // ======================================================; //; // The suite of programs below test the essential parts of Root.; // In particular, there is an extensive test of the I/O and Trees.; // The test can be run in batch or with the interpreter.; // You must run; // gmake on Unix systems; // nmake on Windows; // To run in batch, do; // stress -b 1000 : with no parameters, run standard test with 1000 events; // stress -b 30: run test with 30 events only; //; // To run interactively, do; // root -b; // Root > .L stress.cxx; // Root > stress(1000) run standard test with 1000 events; // Root > stress(30) run with 30 events only; //; // The standard test with 1000 events will create several files.; // The size of all files is around 100 Mbytes.; // The test with 30 events only require around 20 Mbytes; // NB: The test must be run with more than 10 events; //; // The tests runs sequentially 16 tests. Each test will produce; // one line (Test OK or Test failed) with some result parameters.; // At the end of the test a table is printed showing the global results; // with the amount of I/O, Real Time and Cpu Time.; // One single number (ROOTMARKS) is also calculated showing the relative; // performance of your machine compared to a reference machine; // a Pentium IV 2.4 Ghz) with 512 MBytes of memory; // and 120 GBytes IDE disk.; //; // An example of output when all the tests run OK is shown below:; // ******************************************************************; // * Starting R O O T - S T R E S S test suite with 1000 events; // ******************************************************************; // Test 1 : Functions, Random Numbers, Histogram Fits............. OK; // Test 2 : Check size & compression factor of a Root file........ OK; // Test 3 : Purge, Reuse of gaps in TFile..........",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:12,test,test,12,test/stress.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx,8,['test'],['test']
Testability,"// @(#)root/test:$Id$; // Author: Rene Brun 10/01/97",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/eventa.cxx:12,test,test,12,test/eventa.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/eventa.cxx,3,['test'],['test']
Testability,"// @(#)root/test:$Id$; // Author: Rene Brun 12/09/2006; ///////////////////////////////////////////////////////////////////////////////; //; // R O O T S T R E S S H E P I X G L O B A L B E N C H M A R K; // ===============================================================; //; // HEPiX-HEPNT is an organization comprised of UNIX and Windows support staff; // in the High Energy Physics community.; // One of the HEPIX activities is to gather knowledge about new hardware; // and software and to recommend common solutions (eg Scientific Linux); // see: http://wwwhepix.web.cern.ch/wwwhepix/; //; // This benchmark suite has been implemented following several requests; // from HEPIX members interested by a collection of benchmarks representative; // of typical applications.; //; // stressHepix is a single benchmark inclusing several standard ROOT benchmarks; // with a mixture of CPU intensive tests and I/O tests.; // The output of stressHepix is one single number (the ROOTMARK).; // A Pentium IV 2.8GHz running Linux SLC3 and gcc3.2.3 runs this benchmark; // with a reference at 800 ROOTMARKs.; // To build the executable for this benchmark, do; // cd $ROOTSYS/test; // make; //; // The default configuration of ROOT is enough.; // The output of this benchmark looks like:; //; /// stressHepix; ///; ///; ///Starting stressHepix benchmark (details will be in stressHepix.log); ///Takes 442 CP seconds on a 500 rootmarks machine (IBM Thinkpad centrino 1.4GHz VC++7.1); ///Takes 278 CP seconds on a 800 rootmarks reference machine (P IV 2.8 GHz, SLC3 gcc3.2.3); ///Takes 239 CP seconds on a 924 rootmarks machine (MacBook 2.0GHz gcc4.0.1); ///Takes 209 CP seconds on a 1056 rootmarks machine (MacBook 2.0GHz icc9.1); ///Takes 147 CP seconds on a 1512 rootmarks machine (MacPro 3.0GHz gcc4.0.1); ///Takes 142 CP seconds on a 1550 rootmarks machine (AMD64/280, FC5 gcc4.1); ///Takes 121 CP seconds on a 1828 rootmarks machine (MacPro 3.0GHz icc9.1); ///; ///Running : stressFit Minuit 2000, (takes 1",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHepix.cxx:12,test,test,12,test/stressHepix.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHepix.cxx,7,"['benchmark', 'test']","['benchmark', 'benchmarks', 'test', 'tests']"
Testability,"// @(#)root/test:$Id$; // Author: Rene Brun 19/01/97; ////////////////////////////////////////////////////////////////////////; //; // A simple example with a ROOT tree; // =================================; //; // This program creates :; // - a ROOT file; // - a tree; // Additional arguments can be passed to the program to control the flow; // of execution. (see comments describing the arguments in the code).; // Event nevent comp split fill tracks IMT compression; // All arguments are optional. Default is:; // Event 400 1 1 1 400 0 1; //; // In this example, the tree consists of one single ""super branch""; // The statement ***tree->Branch(""event"", &event, 64000,split);*** below; // will parse the structure described in Event.h and will make; // a new branch for each data member of the class if split is set to 1.; // - 9 branches corresponding to the basic types fType, fNtrack,fNseg,; // fNvertex,fFlag,fTemperature,fMeasures,fMatrix,fClosesDistance.; // - 3 branches corresponding to the members of the subobject EventHeader.; // - one branch for each data member of the class Track of TClonesArray.; // - one branch for the TRefArray of high Pt tracks; // - one branch for the TRefArray of muon tracks; // - one branch for the reference pointer to the last track; // - one branch for the object fH (histogram of class TH1F).; //; // if split = 0 only one single branch is created and the complete event; // is serialized in one single buffer.; // if split = -2 the event is split using the old TBranchObject mechanism; // if split = -1 the event is streamed using the old TBranchObject mechanism; // if split > 0 the event is split using the new TBranchElement mechanism.; //; // if comp = 0 no compression at all.; // if comp = 1 event is compressed.; // if comp = 2 same as 1. In addition branches with floats in the TClonesArray; // are also compressed.; // The 4th argument fill can be set to 0 if one wants to time; // the percentage of time spent in creating the event structure a",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/MainEvent.cxx:12,test,test,12,test/MainEvent.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/MainEvent.cxx,1,['test'],['test']
Testability,"// @(#)root/test:$Id$; // Author: Rene Brun 19/08/96; //*-*-*-*-*-*-*Simple examples with histograms created/filled and saved*-*-*-*; //*-* ========================================================; //*-*; //*-* This program creates :; //*-* - a one dimensional histogram; //*-* - a two dimensional histogram; //*-* - a profile histogram; //*-* - an ntuple; //*-*; //*-* These objects are filled with some random numbers and saved on a file.; //*-*; //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/hsimple.cxx:12,test,test,12,test/hsimple.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/hsimple.cxx,1,['test'],['test']
Testability,// @(#)root/test:$Id$; // Author: Rene Brun 19/08/96; ////////////////////////////////////////////////////////////////////////; //; // Event and Track classes; // =======================; //; // The Event class is a naive/simple example of an event structure.; // public:; // char fType[20];; // char *fEventName; //run+event number in character format; // Int_t fNtrack;; // Int_t fNseg;; // Int_t fNvertex;; // UInt_t fFlag;; // Double32_t fTemperature;; // Int_t fMeasures[10];; // Double32_t fMatrix[4][4];; // Double32_t *fClosestDistance; //[fNvertex] indexed array!; // EventHeader fEvtHdr;; // TClonesArray *fTracks;; // TRefArray *fHighPt; //array of High Pt tracks only; // TRefArray *fMuons; //array of Muon tracks only; // TRef fLastTrack; //pointer to last track; // TRef fHistoWeb; //EXEC:GetHistoWeb reference to an histogram in a TWebFile; // TH1F *fH;; // TBits fTriggerBits; //Bits triggered by this event.; //; // The EventHeader class has 3 data members (integers):; // public:; // Int_t fEvtNum;; // Int_t fRun;; // Int_t fDate;; //; //; // The Event data member fTracks is a pointer to a TClonesArray.; // It is an array of a variable number of tracks per event.; // Each element of the array is an object of class Track with the members:; // private:; // Float_t fPx; //X component of the momentum; // Float_t fPy; //Y component of the momentum; // Float_t fPz; //Z component of the momentum; // Float_t fRandom; //A random track quantity; // Float_t fMass2; //The mass square of this particle; // Float_t fBx; //X intercept at the vertex; // Float_t fBy; //Y intercept at the vertex; // Float_t fMeanCharge; //Mean charge deposition of all hits of this track; // Float_t fXfirst; //X coordinate of the first point; // Float_t fXlast; //X coordinate of the last point; // Float_t fYfirst; //Y coordinate of the first point; // Float_t fYlast; //Y coordinate of the last point; // Float_t fZfirst; //Z coordinate of the first point; // Float_t fZlast; //Z coordinate of the last ,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/Event.cxx:12,test,test,12,test/Event.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/Event.cxx,2,['test'],['test']
Testability,"// @(#)root/test:$Id$; // Author: Rene Brun 22/08/95; //______________________________________________________________________________; //*-*-*-*-*-*-*-*-*-*-*-*The Minuit standard test program-*-*-*-*-*-*-*-*-*; //*-* ======================== *; //*-* *; //*-* This program is the translation to C++ of the minexam program *; //*-* distributed with the Minuit/Fortran source file. *; //*-* original author Fred James *; //*-* *; //*-* Fit randomly-generated leptonic K0 decays to the *; //*-* time distribution expected for interfering K1 and K2, *; //*-* with free parameters Re(X), Im(X), DeltaM, and GammaS. *; //*-* *; //*-* This program can be run in batch mode with the makefile *; //*-* or executed interactively with the command: *; //*-* Root > .x minexam.cxx *; //*-* *; //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/minexam.cxx:12,test,test,12,test/minexam.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/minexam.cxx,2,['test'],['test']
Testability,"// @(#)root/test:$Id$; // Author: Rene Brun 23/08/96",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/test2html.cxx:12,test,test,12,test/test2html.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/test2html.cxx,1,['test'],['test']
Testability,"// @(#)root/test:$Id$; // Author: Valeriy Onuchin & Fons Rademakers 04/10/98; ///////////////////////////////////////////////////////////////////; // Animated Text with cool wave effect.; //; // ROOT implementation of the hello world example borrowed; // from the Qt hello world example.; //; // To run this example do the following:; // $ root; // root [0] gSystem.Load(""Hello""); // root [1] Hello h; // <enjoy>; // root [2] .q; //; // Other ROOT fun examples: Tetris, Aclock ...; //; // Begin_Html; // <img src=""http://emcal06.rhic.bnl.gov/~onuchin/root/gif/hello_clock.gif"">; // End_Html; //; ///////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/Hello.cxx:12,test,test,12,test/Hello.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/Hello.cxx,1,['test'],['test']
Testability,"// @(#)root/test:$Id$; // Author: Valeriy Onuchin & Fons Rademakers 04/10/98; ///////////////////////////////////////////////////////////////////; // ROOT implementation of the X11 xclock.; //; // To run this example do the following:; //; // $ root; // root [0] gSystem->Load(""libGpad""); // root [1] gSystem->Load(""Aclock""); // root [1] Aclock a; // <enjoy>; // root [2] .q; //; // Other ROOT fun examples: Tetris, Hello ...; //; ///////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/Aclock.cxx:12,test,test,12,test/Aclock.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/Aclock.cxx,1,['test'],['test']
Testability,"// @(#)root/test:$Id$; // Author: Valeriy Onuchin & Fons Rademakers 04/10/98; ///////////////////////////////////////////////////////////////////; // ROOT implementation of the simple Tetris game; // Layout and some hints were taken from Qt /examples/tetris; //; // To run this game do the following:; // $ root; // root [0] gSystem.Load(""libGpad""); // root [1] gSystem.Load(""Tetris""); // root [2] Tetris t; // <play game>; // root [2] .q; //; ///////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/Tetris.cxx:12,test,test,12,test/Tetris.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/Tetris.cxx,1,['test'],['test']
Testability,"// @(#)root/test:$name: $:$id: filter.cxx,v 1.0 exp $; // Author: O.Couet; /// The ROOT doxygen filter implements ROOT's specific directives used to generate; /// the ROOT reference guide.; ///; /// ## In the ROOT classes; ///; /// ### `Begin_Macro` and `End_Macro`; /// The two tags where used the THtml version to generate images from ROOT code.; /// The generated picture is inlined exactly at the place where the macro is; /// defined. The Macro can be defined in two way:; /// - by direct in-lining of the C++ code; /// - by a reference to a C++ file; /// The tag `Begin_Macro` can have the parameter `(source)`. The directive becomes:; /// `Begin_Macro(source)`. This parameter allows to show the macro's code in addition.; /// `Begin_Macro` also accept the image file type as option. ""png"" or ""svg"".; /// ""png"" is the default value. For example: `Begin_Macro(source, svg)` will show; /// the code of the macro and the image will be is svg format. The ""width"" keyword; /// can be added to define the width of the picture in pixel: ""width=400"" will; /// scale a picture to 400 pixel width. This allow to define large pictures which; /// can then be scaled down to have a better definition.; ///; /// ## In the ROOT tutorials; ///; /// ROOT tutorials are also included in the ROOT documentation. The tutorials'; /// macros headers should look like:; ///; /// ~~~ {.cpp}; /// \file; /// \ingroup tutorial_hist; /// \notebook; /// Getting Contours From TH2D.; ///; /// #### Image produced by `.x ContourList.C`; /// The contours values are drawn next to each contour.; /// \macro_image; ///; /// #### Output produced by `.x ContourList.C`; /// It shows that 6 contours and 12 graphs were found.; /// \macro_output; ///; /// #### `ContourList.C`; /// \macro_code; ///; /// \authors Josh de Bever, Olivier Couet; /// ~~~; ///; /// This example shows that four new directives have been implemented:; ///; /// 1. `\macro_image`; /// The images produced by this macro are shown. A caption can be added to",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/doxygen/filter.cxx:12,test,test,12,documentation/doxygen/filter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/doxygen/filter.cxx,1,['test'],['test']
Testability,"// @(#)root/test:$name: $:$id: stressFit.cxx,v 1.15 2002/10/25 10:47:51 rdm exp $; // Authors: Rene Brun, Eddy Offermann April 2006; //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*//; // //; // Function Minimization Examples, Fred James //; // //; // from the //; // Proceedings of the 1972 CERN Computing and Data Processing School //; // Pertisau, Austria, 10-24 September, 1972 (CERN 72-21) //; // //; // Here a collection of test problems is assembled which were found to be //; // useful in verifying and comparing minimization routines. Many of these //; // are standard functions upon which it has become conventional to try all //; // new methods, quoting the performance in the publication of the algorithm //; // //; // Each test will produce one line (Test OK or Test FAILED) . At the end of //; // the test a table is printed showing the global results Real Time and //; // Cpu Time. One single number (ROOTMARKS) is also calculated showing the //; // relative performance of your machine compared to a reference machine //; // a Pentium IV 2.4 Ghz) with 512 MBytes of memory and 120 GBytes IDE disk. //; // //; // In the main routine the fitter can be chosen through TVirtualFitter : //; // - Minuit //; // - Minuit2 //; // - Fumili //; //; // To run the test, do, eg; // root -b -q stressFit.cxx; // root -b -q ""stressFit.cxx(\""Minuit2\"")""; // root -b -q ""stressFit.cxx+(\""Minuit2\"")""; // //; // The verbosity can be set through the global parameter gVerbose : //; // -1: off 1: on //; // The tolerance on the parameter deviation from the minimum can be set //; // through gAbsTolerance . //; // //; // An example of output when all the tests run OK is shown below: //; // ******************************************************************* //; // * Minimization - S T R E S S suite * //; // ******************************************************************* //; // ******************************************************************* //; // * Starting S T ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressFit.cxx:12,test,test,12,test/stressFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressFit.cxx,6,"['Test', 'test']","['Test', 'test']"
Testability,"// @(#)root/test:$name: $:$id: stressGUI.cxx,v 1.0 exp $; // Author: Bertrand Bellenot; //; // ROOT GUI test suite.; //; // The suite of programs below tests many elements of the ROOT GUI classes; //; // The test can only be run as a standalone program.; // To build and run it:; //; // make stressGUI; // stressGUI; //; // To get a short help:; // stressGUI -help; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:12,test,test,12,test/stressGUI.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx,4,['test'],"['test', 'tests']"
Testability,"// @(#)root/test:$name: $:$id: stressGraphics.cxx,v 1.0 exp $; // Author: O.Couet; //; // ROOT Graphics test suite and benchmarks.; //; // The suite of programs below tests many elements of the graphics classes; //; // The test can be run as a standalone program or with the interpreter.; //; // To run as a standalone program:; //; // make stressGraphics; // stressGraphics; //; // To get a short help:; //; // stressGraphics -h; //; // To run interactively, do:; //; // root -b; // root [0] .L stressGraphics.cxx; // root [1] stressGraphics(); //; // or:; //; // root -b; // root [0] .x stressGraphics.cxx",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:12,test,test,12,test/stressGraphics.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx,5,"['benchmark', 'test']","['benchmarks', 'test', 'tests']"
Testability,"// @(#)root/test:$name: $:$id: stressHistoFit.cxx,v 1.15 2002/10/25 10:47:51 rdm exp $; // Authors: David Gonzalez Maline November 2008; //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*//; // //; // //; // Set of tests for different minimization algorithms and for //; // different objects. The tests are divided into three types: //; // //; // 1. 1D and 2D Objects, including 1D and 2D histograms, 1D and 2D //; // histograms with variable bins, TGraph, TGraphErrors, TGraph2D, //; // TGraph2DErrors //; // 2. Same as before, but trying linear fitters. //; // 3. Unbinned fits with trees of different dimensions. //; // //; // Each test will performed fits with different functions and //; // different minimization algorithms selected. There is an error //; // tolerance for each one of them. There is also the possibility to //; // inspect each one of the test individually changing the //; // defaultOptions variable. //; // //; // //; // An example of output when all the tests run OK is shown below: //; // ****************************************************************************; // * Starting stress H I S T O F I T *; // ****************************************************************************; // Test 1D and 2D objects; // Test 1: 'Histogram 1D Variable' with 'GAUS'...................OK; // Test 2: 'Histogram 1D' with 'GAUS'............................OK; // Test 3: 'TGraph 1D' with 'GAUS'...............................OK; // Test 4: 'TGraphErrors 1D' with 'GAUS'.........................OK; // Test 5: 'THnSparse 1D' with 'GAUS'............................OK; // Test 6: 'Histogram 1D Variable' with 'Polynomial'.............OK; // Test 7: 'Histogram 1D' with 'Polynomial'......................OK; // Test 8: 'TGraph 1D' with 'Polynomial'.........................OK; // Test 9: 'TGraphErrors 1D' with 'Polynomial'...................OK; // Test 10: 'THnSparse 1D' with 'Polynomial'......................OK; // Test 11: 'Histogram 2D Variable' wi",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:12,test,test,12,test/stressHistoFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx,5,['test'],"['test', 'tests']"
Testability,"// @(#)root/test:$name: $:$id: stressHistogram.cxx,v 1.15 2002/10/25 10:47:51 rdm exp $; // Authors: David Gonzalez Maline November 2008; //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*//; // //; // //; // Here there is a set of tests for the histogram classes (including //; // histograms and profiles). The methods tested work on: //; // //; // 1. Projection testing (with and without weights) //; // 2. Rebinning //; // 3. Addition, multiplication an division operations. //; // 4. Building and copying instances. //; // 5. I/O functionality (including reference with older versions). //; // 6. Labeling. //; // 7. Interpolation //; // //; // To see the tests individually, at the bottom of the file the tests //; // are exectued using the structure TTestSuite, that defines the //; // subset, the number of routines to be tested as well as the pointes //; // for these. Every tests is mean to be simple enough to be understood //; // without much comments. //; // //; // Finally, for debugging reasons, the struct compareOptions can be //; // used to define the level of output of the tests, beging set //; // generally for the whole suit in defaultEqualOptions. //; // >> stressHistogram 1 : to print result for all tests //; // >> stressHistogram 2 : ro print each comparison, done for each bin //; // //; // An example of output when all the tests run OK is shown below: //; // ****************************************************************************; // * Starting stress H I S T O G R A M *; // ****************************************************************************; // Test 1: Testing Histogram Projections without weights....................OK; // Test 2: Testing Profile Projections without weights......................OK; // Test 3: Testing Histogram Projections with weights.......................OK; // Test 4: Testing Profile Projections with weights.......................OK; // Test 5: Projection with Range for Histograms and Profiles...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:12,test,test,12,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,8,['test'],"['test', 'tested', 'testing', 'tests']"
Testability,"// @(#)root/test:$name: $:$id: stressSpectrum.cxx,v 1.15 2002/10/25 10:47:51 rdm exp $; // Author: Rene Brun 17/01/2006; /////////////////////////////////////////////////////////////////; //; // TSPectrum test suite; // ====================; //; // This stress program tests many elements of the TSpectrum, TSpectrum2 classes.; //; // To run in batch, do; // stressSpectrum : run 100 experiments with graphics (default); // stressSpectrum 1000 : run 1000 experiments with graphics; // stressSpectrum -b 200 : run 200 experiments in batch mode; // stressSpectrum -b : run 100 experiments in batch mode; //; // To run interactively, do; // root -b; // Root > .x stressSpectrum.cxx : run 100 experiments with graphics (default); // Root > .x stressSpectrum.cxx(20) : run 20 experiments; // Root > .x stressSpectrum.cxx+(30) : run 30 experiments via ACLIC; //; // Several tests are run sequentially. Each test will produce one line (Test OK or Test FAILED) .; // At the end of the test a table is printed showing the global results; // Real Time and Cpu Time.; // One single number (ROOTMARKS) is also calculated showing the relative; // performance of your machine compared to a reference machine; // a Pentium IV 3.0 Ghz) with 512 MBytes of memory; // and 120 GBytes IDE disk.; //; // An example of output when all the tests run OK is shown below:; //; //////////////////////////////////////////////////////////////////////////; // //; //****************************************************************************; //* Starting stress S P E C T R U M *; //****************************************************************************; //Peak1 : found = 70.21/ 73.75, good = 65.03/ 68.60, ghost = 8.54/ 8.39,--- OK; //Peak2 : found =163/300, good =163, ghost =8,---------------------------- OK; //****************************************************************************; //stressSpectrum: Real Time = 19.86 seconds Cpu Time = 19.04 seconds; //*********************************************************",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressSpectrum.cxx:12,test,test,12,test/stressSpectrum.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressSpectrum.cxx,7,"['Test', 'test']","['Test', 'test', 'tests']"
Testability,"// @(#)root/thread:$Id$; /*; * Copyright (c) 2006-2011 High Performance Computing Center Stuttgart,; * University of Stuttgart. All rights reserved.; * Author: Rainer Keller, HLRS; * Modified: Fons Rademakers, CERN; * Modified: Philippe Canal, FNAL; *; * Thread-local storage (TLS) is not supported on all environments.; * This header file and test-program shows how to abstract away, using either; * __thread,; * __declspec(thread),; * thread_local or; * Pthread-Keys; * depending on the (configure-set) CPP-variables R__HAS___THREAD,; * R__HAS_DECLSPEC_THREAD or R__HAS_PTHREAD.; *; * Use the macros TTHREAD_TLS_DECLARE, TTHREAD_TLS_INIT, and the; * getters and setters TTHREAD_TLS_GET and TTHREAD_TLS_GET; * to work on the declared variables.; *; * In case of PThread keys, we need to resolve to using keys!; * In order to do so, we need to declare and access; * TLS variables through three macros:; * - TTHREAD_TLS_DECLARE; * - TTHREAD_TLS_INIT; * - TTHREAD_TLS_SET and; * - TTHREAD_TLS_GET; * We do depend on the following (GCC-)extension:; * - In case of function-local static functions,; * we declare a sub-function to create a specific key.; * Unfortunately, we do NOT use the following extensions:; * - Using typeof, we could get rid of the type-declaration; * which is used for casting, however typeof is not ANSI C.; * - We do NOT allow something like; * func (a, TTHREAD_TLS_SET(int, my_var, 5));; * as we do not use the gcc-extension of returning macro-values.; *; * C++11 requires the implementation of the thread_local storage.; *; * For simple type use:; * TTHREAD_TLS(int) varname;; *; * For array of simple type use:; * TTHREAD_TLS_ARRAY(int, arraysize, varname);; *; * For object use:; * TTHREAD_TLS_DECL(classname, varname);; * TTHREAD_TLS_DECL_ARG(classname, varname, arg);; * TTHREAD_TLS_DECL_ARG2(classname, varname, arg1, arg2);; *; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ThreadLocalStorage.h:344,test,test-program,344,core/foundation/inc/ThreadLocalStorage.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ThreadLocalStorage.h,1,['test'],['test-program']
Testability,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss, Eckhard von Toerne; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodTMlpANN *; * *; * *; * Description: *; * Implementation (see header for description) *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::MethodTMlpANN; \ingroup TMVA. This is the TMVA TMultiLayerPerceptron interface class. It provides the; training and testing the ROOT internal MLP class in the TMVA framework. Available learning methods:<br>. - Stochastic; - Batch; - SteepestDescent; - RibierePolak; - FletcherReeves; - BFGS. See the TMultiLayerPerceptron class description; for details on this ANN.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodTMlpANN.cxx:1126,test,testing,1126,tmva/tmva/src/MethodTMlpANN.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodTMlpANN.cxx,1,['test'],['testing']
Testability,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss,Or Cohen, Jan Therhaag, Eckhard von Toerne; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodCompositeBase *; * *; * *; * Description: *; * Virtual base class for all MVA method *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <Peter.Speckmazer@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::MethodBoost; \ingroup TMVA. Class for boosting a TMVA method. This class is meant to boost a single classifier. Boosting means; training the classifier a few times. Every time the weights of the; events are modified according to how well the classifier performed; on the test sample. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBoost.cxx:1532,test,test,1532,tmva/tmva/src/MethodBoost.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBoost.cxx,1,['test'],['test']
Testability,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::CrossEntropy *; * *; * *; * Description: Implementation of the CrossEntropy as separation criterion *; * -p log (p) - (1-p)log(1-p); p=purity *; * *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * Heidelberg U., Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::CrossEntropy; \ingroup TMVA. Implementation of the CrossEntropy as separation criterion. -p log (p) - (1-p)log(1-p); p=purity; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CrossEntropy.cxx:394,log,log,394,tmva/tmva/src/CrossEntropy.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CrossEntropy.cxx,4,['log'],['log']
Testability,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : TMVA::MethodCFMlpANN_utils *; * *; * *; * Reference for the original FORTRAN version ""mlpl3.F"": *; * Authors : J. Proriol and contributions from ALEPH-Clermont-Ferrand *; * Team members *; * Copyright: Laboratoire Physique Corpusculaire *; * Universite de Blaise Pascal, IN2P3/CNRS *; * *; * Modifications by present authors: *; * use dynamical data tables (not for all of them, but for the big ones) *; * *; * Description: *; * Utility routine translated from original mlpl3.F FORTRAN routine *; * *; * MultiLayerPerceptron : Training code *; * *; * NTRAIN: Nb of events used during the learning *; * NTEST: Nb of events used for the test *; * TIN: Input variables *; * TOUT: type of the event *; * *; * ---------------------------------------------------------------------------- *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Xavier Prudent <prudent@lapp.in2p3.fr> - LAPP, France *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * LAPP, Annecy, France *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; * *; **********************************************************************************/; /*! \class TMVA::MethodCFMlpANN_Utils; \ingroup TMVA. Implementation of Clermond-Ferrand artificial neural network. Reference for the original FORTRAN version ""mlpl3.F"":; - Authors : J. Proriol and contributions from ALEPH-Clermont-Ferrand; Team m",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN_Utils.cxx:915,test,test,915,tmva/tmva/src/MethodCFMlpANN_Utils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN_Utils.cxx,1,['test'],['test']
Testability,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss, Kai Voss, Eckhard von Toerne, Jan Therhaag; // Updated by: Omar Zapata, Lorenzo Moneta, Sergei Gleyzer; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : Factory *; * *; * *; * Description: *; * This is the main MVA steering class: it creates (books) all MVA methods, *; * and guides them through the training, testing and evaluation phases. *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <stelzer@cern.ch> - DESY, Germany *; * Peter Speckmayer <peter.speckmayer@cern.ch> - CERN, Switzerland *; * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * Omar Zapata <Omar.Zapata@cern.ch> - UdeA/ITM Colombia *; * Lorenzo Moneta <Lorenzo.Moneta@cern.ch> - CERN, Switzerland *; * Sergei Gleyzer <Sergei.Gleyzer@cern.ch> - U of Florida & CERN *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * UdeA/ITM, Colombia *; * U. of Florida, USA *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Factory.h:549,test,testing,549,tmva/tmva/inc/TMVA/Factory.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Factory.h,1,['test'],['testing']
Testability,"// @(#)root/tmva $Id$; // Author: Andreas Hoecker, Yair Mahalalel, Joerg Stelzer, Helge Voss, Kai Voss; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MethodPDERS *; * *; * *; * Description: *; * Multidimensional Likelihood using the ""Probability density estimator *; * range search"" (PDERS) method suggested in *; * T. Carli and B. Koblitz, NIM A 501, 576 (2003) *; * *; * The multidimensional PDFs for signal and background are modeled *; * by counting the events in the ""vicinity"" of a test point. The volume *; * that describes ""vicinity"" is user-defined through the option string. *; * A search method based on binary-trees is used to improve the selection *; * efficiency of the volume search. *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Yair Mahalalel <Yair.Mahalalel@cern.ch> - CERN, Switzerland *; * Peter Speckmayer <peter.speckmayer@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodPDERS.h:634,test,test,634,tmva/tmva/inc/TMVA/MethodPDERS.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodPDERS.h,1,['test'],['test']
Testability,"// @(#)root/tmva $Id$; // Author: Attila Krasznahorkay, Andreas Hoecker, Joerg Stelzer, Eckhard von Toerne; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : MsgLogger *; * *; * *; * Description: *; * TMVA output logger class producing nicely formatted log messages *; * *; * Author: *; * Attila Krasznahorkay <Attila.Krasznahorkay@cern.ch> - CERN, Switzerland *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Joerg Stelzer <stelzer@cern.ch> - DESY, Germany *; * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; * *; * Copyright (c) 2005-2011: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MsgLogger.h:355,log,logger,355,tmva/tmva/inc/TMVA/MsgLogger.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MsgLogger.h,2,['log'],"['log', 'logger']"
Testability,"// @(#)root/tmva $Id$; // Author: Kim Albertsson; /*************************************************************************; * Copyright (C) 2017, Kim Albertsson *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; //////////////////////////////////////////////////////////////////////; // Collection of tests to verify that roc curves and integrals are //; // calculated correctly. //; //////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/ROC/testRocWeights.cxx:476,test,tests,476,tmva/tmva/test/ROC/testRocWeights.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/ROC/testRocWeights.cxx,1,['test'],['tests']
Testability,"// @(#)root/tmva $Id$; // Author: Manos Stergiadis; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Flatten function for Reference backend *; * *; * Authors (alphabetical): *; * Manos Stergiadis <em.stergiadis@gmail.com - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing Flattening/Deflattening on the GPU //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestReshapeCuda.cxx:277,Test,Testing,277,tmva/tmva/test/DNN/CNN/TestReshapeCuda.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestReshapeCuda.cxx,2,['Test'],['Testing']
Testability,"// @(#)root/tmva $Id$; // Author: Manos Stergiadis; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Flatten function for Reference backend *; * *; * Authors (alphabetical): *; * Manos Stergiadis <em.stergiadis@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing Flatten/Deflatten on the CPU architecture //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestReshapeCpu.cxx:277,Test,Testing,277,tmva/tmva/test/DNN/CNN/TestReshapeCpu.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestReshapeCpu.cxx,2,['Test'],['Testing']
Testability,"// @(#)root/tmva $Id$; // Author: Manos Stergiadis; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Flatten function for every architecture using templates *; * *; * Authors (alphabetical): *; * Manos Stergiadis <em.stergiadis@gmail.com - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestReshape.h:277,Test,Testing,277,tmva/tmva/test/DNN/CNN/TestReshape.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestReshape.h,1,['Test'],['Testing']
Testability,"// @(#)root/tmva $Id$; // Author: Saurav Shekhar 01/08/17; /*************************************************************************; * Copyright (C) 2017, Saurav Shekhar *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////////////; //Testing RNNLayer forward pass for Reference implementation //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/RNN/TestRecurrentForwardPassCpu.cxx:468,Test,Testing,468,tmva/tmva/test/DNN/RNN/TestRecurrentForwardPassCpu.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/RNN/TestRecurrentForwardPassCpu.cxx,1,['Test'],['Testing']
Testability,"// @(#)root/tmva $Id$; // Author: Saurav Shekhar 02/08/17; /*************************************************************************; * Copyright (C) 2017, Saurav Shekhar *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////////////; //Testing RNNLayer for incrementing a number //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/RNN/TestFullRNN.cxx:468,Test,Testing,468,tmva/tmva/test/DNN/RNN/TestFullRNN.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/RNN/TestFullRNN.cxx,3,['Test'],['Testing']
Testability,"// @(#)root/tmva $Id$; // Author: Saurav Shekhar 16/02/17; /*************************************************************************; * Copyright (C) 2017, Saurav Shekhar *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing RNNLayer backpropagation //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/RNN/TestRecurrentBackpropagationCpu.cxx:469,Test,Testing,469,tmva/tmva/test/DNN/RNN/TestRecurrentBackpropagationCpu.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/RNN/TestRecurrentBackpropagationCpu.cxx,2,['Test'],['Testing']
Testability,"// @(#)root/tmva $Id$; // Author: Saurav Shekhar 22/06/17; /*************************************************************************; * Copyright (C) 2017, Saurav Shekhar *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////////////; //Testing RNNLayer forward pass for Reference implementation //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/RNN/TestRecurrentForwardPass.cxx:468,Test,Testing,468,tmva/tmva/test/DNN/RNN/TestRecurrentForwardPass.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/RNN/TestRecurrentForwardPass.cxx,1,['Test'],['Testing']
Testability,"// @(#)root/tmva $Id$; // Author: Saurav Shekhar 30/11/17; /*************************************************************************; * Copyright (C) 2017, Saurav Shekhar *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing RNNLayer backpropagation //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/RNN/TestRecurrentBackpropagation.cxx:469,Test,Testing,469,tmva/tmva/test/DNN/RNN/TestRecurrentBackpropagation.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/RNN/TestRecurrentBackpropagation.cxx,1,['Test'],['Testing']
Testability,"// @(#)root/tmva $Id$; // Author: Saurav Shekhar; /*************************************************************************; * Copyright (C) 2017, Saurav Shekhar *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////////////; // Generic tests of the RNNLayer Backward pass //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/RNN/TestRecurrentBackpropagation.h:468,test,tests,468,tmva/tmva/test/DNN/RNN/TestRecurrentBackpropagation.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/RNN/TestRecurrentBackpropagation.h,1,['test'],['tests']
Testability,"// @(#)root/tmva $Id$; // Author: Saurav Shekhar; /*************************************************************************; * Copyright (C) 2017, Saurav Shekhar *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////////////; // Generic tests of the RNNLayer Forward pass //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/RNN/TestFullRNN.h:468,test,tests,468,tmva/tmva/test/DNN/RNN/TestFullRNN.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/RNN/TestFullRNN.h,2,['test'],['tests']
Testability,"// @(#)root/tmva $Id$; // Author: Simon Pfreundschuh; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; //////////////////////////////////////////////////////////////////////; // Concrete instantiation of the generic activation function test //; // for the multi-threaded CPU implementation. //; //////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctionsCpu.cxx:528,test,test,528,tmva/tmva/test/DNN/TestActivationFunctionsCpu.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctionsCpu.cxx,1,['test'],['test']
Testability,"// @(#)root/tmva $Id$; // Author: Simon Pfreundschuh; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; //////////////////////////////////////////////////////////////////////; // Concrete instantiation of the generic activation function test //; // for the reference architecture. //; //////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctions.cxx:528,test,test,528,tmva/tmva/test/DNN/TestActivationFunctions.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctions.cxx,1,['test'],['test']
Testability,"// @(#)root/tmva $Id$; // Author: Simon Pfreundschuh; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; //////////////////////////////////////////////////////////////////////; // Generic tests for the derivatives and gradiens of acitvation, //; // loss and regularization functions. Each function generates a //; // random 10 x 10 matrix and uses a central finite difference and //; // to numerically compute the derivative of the function //; // w.r.t. this element. The result is compared to the result //; // obtained by the corresponding analytic derivative implemented by //; // the evaluateDerivative(...), evaluateGradients(...), //; // addRegularizationGradients(...) functions. //; //////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestDerivatives.h:478,test,tests,478,tmva/tmva/test/DNN/TestDerivatives.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestDerivatives.h,1,['test'],['tests']
Testability,"// @(#)root/tmva $Id$; // Author: Simon Pfreundschuh; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; //////////////////////////////////////////////////////////////////////; // Generic tests of the layer activation functions //; // //; // Contains tests for each of the layer activation functions that //; // test the evaluation of the function using the evaluate(...) //; // method and the computation of the derivatives using //; // evaluate_derivative(...) on a randomly generated matrix. Each //; // function returns the maximum relative error between the expected //; // result and the result obtained for the given arcthitecture. //; //////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctions.h:478,test,tests,478,tmva/tmva/test/DNN/TestActivationFunctions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctions.h,3,['test'],"['test', 'tests']"
Testability,"// @(#)root/tmva $Id$; // Author: Simon Pfreundschuh; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; //////////////////////////////////////////////////////////////////////; // Generic tests of the loss functions //; // //; // Contains generic test for architecture-specific implementations //; // of the loss functions. Requires the architecture-specific matrix //; // type to be constructible and convertible from/to the //; // TMatrixT<Double_t> type. //; //////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestLossFunctions.h:478,test,tests,478,tmva/tmva/test/DNN/TestLossFunctions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestLossFunctions.h,2,['test'],"['test', 'tests']"
Testability,"// @(#)root/tmva $Id$; // Author: Simon Pfreundschuh; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////////////; // Concrete instantiation of the generic backpropagation test for //; // CUDA architectures. //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagationCuda.cxx:522,test,test,522,tmva/tmva/test/DNN/TestBackpropagationCuda.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagationCuda.cxx,2,['test'],['test']
Testability,"// @(#)root/tmva $Id$; // Author: Simon Pfreundschuh; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////////////; // Concrete instantiation of the generic backpropagation test for //; // multi-threaded CPU architectures. //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagationCpu.cxx:522,test,test,522,tmva/tmva/test/DNN/TestBackpropagationCpu.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagationCpu.cxx,2,['test'],['test']
Testability,"// @(#)root/tmva $Id$; // Author: Simon Pfreundschuh; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ///////////////////////////////////////////////////////////////////; // Concrete instantiation of the generic derivative test for the //; // multi-threaded CPU implementation. //; ///////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestDerivativesCpu.cxx:516,test,test,516,tmva/tmva/test/DNN/TestDerivativesCpu.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestDerivativesCpu.cxx,1,['test'],['test']
Testability,"// @(#)root/tmva $Id$; // Author: Simon Pfreundschuh; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ///////////////////////////////////////////////////////////////////; // Concrete instantiation of the generic derivative test for the //; // reference implementation. //; ///////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestDerivatives.cxx:516,test,test,516,tmva/tmva/test/DNN/TestDerivatives.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestDerivatives.cxx,2,['test'],['test']
Testability,"// @(#)root/tmva $Id$; // Author: Simon Pfreundschuh; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ///////////////////////////////////////////////////////////////////; // Test for the loss function reference implementation using the //; // generic test defined in TestLossFunctions.h. //; ///////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestLossFunctions.cxx:467,Test,Test,467,tmva/tmva/test/DNN/TestLossFunctions.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestLossFunctions.cxx,6,"['Test', 'test']","['Test', 'TestLossFunctions', 'test']"
Testability,"// @(#)root/tmva $Id$; // Author: Simon Pfreundschuh; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; //////////////////////////////////////////////////////////////////; // Test for the loss function implementatoins for the //; // multi-threaded CPU version using the generic test defined in //; // TestLossFunctions.h. //; //////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestLossFunctionsCpu.cxx:466,Test,Test,466,tmva/tmva/test/DNN/TestLossFunctionsCpu.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestLossFunctionsCpu.cxx,3,"['Test', 'test']","['Test', 'TestLossFunctions', 'test']"
Testability,"// @(#)root/tmva $Id$; // Author: Simon Pfreundschuh; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh, Saurav Shekhar *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////////////; // Generic tests of the backpropagation algorithm. //; // //; // All tests randomly generate a net with identity activation //; // functions, i.e. which is completely linear and then tests the //; // computed gradients for each layer using numerical //; // derivation. The restriction to linear nets is to avoid the //; // required division by the finite difference interval used to //; // approximate the numerical derivatives, which would otherwise //; // cause precision loss. //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagationDL.h:492,test,tests,492,tmva/tmva/test/DNN/TestBackpropagationDL.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagationDL.h,6,['test'],['tests']
Testability,"// @(#)root/tmva $Id$; // Author: Simon Pfreundschuh; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /////////////////////////////////////////////////////////////////////; // Test Standard Minimizer //; // //; // This test trains a linear neural network on a linear function //; // F(x) = W * x and computes the relative error between the matrix //; // W' representing the linear function learned by the net to the //; // orignal matrix W. //; /////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMinimization.h:467,Test,Test,467,tmva/tmva/test/DNN/TestMinimization.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMinimization.h,2,"['Test', 'test']","['Test', 'test']"
Testability,"// @(#)root/tmva $Id$; // Author: Simon Pfreundschuh; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /////////////////////////////////////////////////////////////////////; // Use the generic tests defined in TestMinimization.h to test the //; // training of Neural Networks for CUDA architectures. //; /////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMinimizationCuda.cxx:483,test,tests,483,tmva/tmva/test/DNN/TestMinimizationCuda.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMinimizationCuda.cxx,3,"['Test', 'test']","['TestMinimization', 'test', 'tests']"
Testability,"// @(#)root/tmva $Id$; // Author: Simon Pfreundschuh; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////////////; // Concrete instantiation of the generic backpropagation test for //; // CUDA architectures. //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmeticCuda.cxx:520,test,test,520,tmva/tmva/test/DNN/TestMatrixArithmeticCuda.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmeticCuda.cxx,2,['test'],['test']
Testability,"// @(#)root/tmva $Id$; // Author: Simon Pfreundschuh; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////////////; // Concrete instantiation of the generic backpropagation test for //; // the reference architecture. //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagation.cxx:520,test,test,520,tmva/tmva/test/DNN/TestBackpropagation.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagation.cxx,6,['test'],['test']
Testability,"// @(#)root/tmva $Id$; // Author: Simon Pfreundschuh; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////////////; // Generic tests of the backpropagation algorithm. //; // //; // All tests randomly generate a net with identity activation //; // functions, i.e. which is completely linear and then tests the //; // computed gradients for each layer using numerical //; // derivation. The restriction to linear nets is to avoid the //; // required division by the finite difference interval used to //; // approximate the numerical derivatives, which would otherwise //; // cause precision loss. //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagation.h:474,test,tests,474,tmva/tmva/test/DNN/TestBackpropagation.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBackpropagation.h,3,['test'],['tests']
Testability,"// @(#)root/tmva $Id$; // Author: Simon Pfreundschuh; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////; // Test the Neural Network training using the reference //; // implementation. //; // //; // Calls the generic testMinimization function defined in //; // TestMinimization.cpp for the reference architecture. //; ////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMinimization.cxx:458,Test,Test,458,tmva/tmva/test/DNN/TestMinimization.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMinimization.cxx,3,"['Test', 'test']","['Test', 'TestMinimization', 'testMinimization']"
Testability,"// @(#)root/tmva $Id$; // Author: Surya S Dwivedi 02/07/19; /*************************************************************************; * Copyright (C) 2019, Surya S Dwivedi *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing full GRU network (for CPU) //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/GRU/TestFullGRUCpu.cxx:471,Test,Testing,471,tmva/tmva/test/DNN/GRU/TestFullGRUCpu.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/GRU/TestFullGRUCpu.cxx,2,['Test'],['Testing']
Testability,"// @(#)root/tmva $Id$; // Author: Surya S Dwivedi 02/07/19; /*************************************************************************; * Copyright (C) 2019, Surya S Dwivedi *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing full GRU network (for Reference) //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/GRU/TestFullGRU.cxx:471,Test,Testing,471,tmva/tmva/test/DNN/GRU/TestFullGRU.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/GRU/TestFullGRU.cxx,1,['Test'],['Testing']
Testability,"// @(#)root/tmva $Id$; // Author: Surya S Dwivedi 02/07/19; /*************************************************************************; * Copyright (C) 2019, Surya S Dwivedi *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing full LSTM network (for CPU) //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/LSTM/TestFullLSTMCpu.cxx:471,Test,Testing,471,tmva/tmva/test/DNN/LSTM/TestFullLSTMCpu.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/LSTM/TestFullLSTMCpu.cxx,2,['Test'],['Testing']
Testability,"// @(#)root/tmva $Id$; // Author: Surya S Dwivedi 02/07/19; /*************************************************************************; * Copyright (C) 2019, Surya S Dwivedi *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing full LSTM network (for Reference) //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/LSTM/TestFullLSTM.cxx:471,Test,Testing,471,tmva/tmva/test/DNN/LSTM/TestFullLSTM.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/LSTM/TestFullLSTM.cxx,1,['Test'],['Testing']
Testability,"// @(#)root/tmva $Id$; // Author: Surya S Dwivedi 07/06/2019; /*************************************************************************; * Copyright (C) 2019, Surya S Dwivedi *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////////////; // Generic tests of the GRU-Layer Forward Pass //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/GRU/TestGRUForwardPass.h:481,test,tests,481,tmva/tmva/test/DNN/GRU/TestGRUForwardPass.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/GRU/TestGRUForwardPass.h,1,['test'],['tests']
Testability,"// @(#)root/tmva $Id$; // Author: Surya S Dwivedi 07/06/2019; /*************************************************************************; * Copyright (C) 2019, Surya S Dwivedi *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////////////; // Generic tests of the LSTM-Layer Forward Pass //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/LSTM/TestLSTMForwardPass.h:481,test,tests,481,tmva/tmva/test/DNN/LSTM/TestLSTMForwardPass.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/LSTM/TestLSTMForwardPass.h,1,['test'],['tests']
Testability,"// @(#)root/tmva $Id$; // Author: Surya S Dwivedi 07/06/2019; /*************************************************************************; * Copyright (C) 2019, Surya S Dwivedi *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing GRU-Layer forward pass for CPU implementation //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/GRU/TestGRUForwardPassCpu.cxx:473,Test,Testing,473,tmva/tmva/test/DNN/GRU/TestGRUForwardPassCpu.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/GRU/TestGRUForwardPassCpu.cxx,4,['Test'],['Testing']
Testability,"// @(#)root/tmva $Id$; // Author: Surya S Dwivedi 07/06/2019; /*************************************************************************; * Copyright (C) 2019, Surya S Dwivedi *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing GRU-Layer forward pass for Reference implementation //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/GRU/TestGRUForwardPass.cxx:473,Test,Testing,473,tmva/tmva/test/DNN/GRU/TestGRUForwardPass.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/GRU/TestGRUForwardPass.cxx,1,['Test'],['Testing']
Testability,"// @(#)root/tmva $Id$; // Author: Surya S Dwivedi 07/06/2019; /*************************************************************************; * Copyright (C) 2019, Surya S Dwivedi *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing LSTM-Layer forward pass for CPU implementation //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/LSTM/TestLSTMForwardPassCpu.cxx:473,Test,Testing,473,tmva/tmva/test/DNN/LSTM/TestLSTMForwardPassCpu.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/LSTM/TestLSTMForwardPassCpu.cxx,1,['Test'],['Testing']
Testability,"// @(#)root/tmva $Id$; // Author: Surya S Dwivedi 07/06/2019; /*************************************************************************; * Copyright (C) 2019, Surya S Dwivedi *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing LSTM-Layer forward pass for Reference implementation //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/LSTM/TestLSTMForwardPass.cxx:473,Test,Testing,473,tmva/tmva/test/DNN/LSTM/TestLSTMForwardPass.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/LSTM/TestLSTMForwardPass.cxx,1,['Test'],['Testing']
Testability,"// @(#)root/tmva $Id$; // Author: Surya S Dwivedi 26/06/2019; /*************************************************************************; * Copyright (C) 2019, Surya S Dwivedi *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing GRULayer backpropagation //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/GRU/TestGRUBackpropagationCpu.cxx:473,Test,Testing,473,tmva/tmva/test/DNN/GRU/TestGRUBackpropagationCpu.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/GRU/TestGRUBackpropagationCpu.cxx,2,['Test'],['Testing']
Testability,"// @(#)root/tmva $Id$; // Author: Surya S Dwivedi 26/06/2019; /*************************************************************************; * Copyright (C) 2019, Surya S Dwivedi *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing LSTMLayer backpropagation //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/LSTM/TestLSTMBackpropagationCpu.cxx:473,Test,Testing,473,tmva/tmva/test/DNN/LSTM/TestLSTMBackpropagationCpu.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/LSTM/TestLSTMBackpropagationCpu.cxx,2,['Test'],['Testing']
Testability,"// @(#)root/tmva $Id$; // Author: Surya S Dwivedi 26/06219; /*************************************************************************; * Copyright (C) 2019, Surya S Dwivedi *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing GRULayer backpropagation //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/GRU/TestGRUBackpropagation.cxx:471,Test,Testing,471,tmva/tmva/test/DNN/GRU/TestGRUBackpropagation.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/GRU/TestGRUBackpropagation.cxx,1,['Test'],['Testing']
Testability,"// @(#)root/tmva $Id$; // Author: Surya S Dwivedi 26/06219; /*************************************************************************; * Copyright (C) 2019, Surya S Dwivedi *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing LSTMLayer backpropagation //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/LSTM/TestLSTMBackpropagation.cxx:471,Test,Testing,471,tmva/tmva/test/DNN/LSTM/TestLSTMBackpropagation.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/LSTM/TestLSTMBackpropagation.cxx,1,['Test'],['Testing']
Testability,"// @(#)root/tmva $Id$; // Author: Surya S Dwivedi; /*************************************************************************; * Copyright (C) 2019, Surya S Dwivedi *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////////////; // Generic tests of the GRULayer Backward pass //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/GRU/TestGRUBackpropagation.h:470,test,tests,470,tmva/tmva/test/DNN/GRU/TestGRUBackpropagation.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/GRU/TestGRUBackpropagation.h,1,['test'],['tests']
Testability,"// @(#)root/tmva $Id$; // Author: Surya S Dwivedi; /*************************************************************************; * Copyright (C) 2019, Surya S Dwivedi *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////////////; // Generic tests of the LSTMLayer Backward pass //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/LSTM/TestLSTMBackpropagation.h:470,test,tests,470,tmva/tmva/test/DNN/LSTM/TestLSTMBackpropagation.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/LSTM/TestLSTMBackpropagation.h,1,['test'],['tests']
Testability,"// @(#)root/tmva $Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Flatten function for Reference backend *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing Flatten/Deflatten on the Reference architecture //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestReshape.cxx:278,Test,Testing,278,tmva/tmva/test/DNN/CNN/TestReshape.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestReshape.cxx,2,['Test'],['Testing']
Testability,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Manos Stergiadis; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Downsample method on a CPU architecture *; * *; * Authors (alphabetical): *; * Manos Stergiadis <em.stergiadis@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the Convolutional Layer //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvLayer.h:286,Test,Testing,286,tmva/tmva/test/DNN/CNN/TestConvLayer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvLayer.h,4,['Test'],['Testing']
Testability,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Manos Stergiadis; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Downsample method on a CPU architecture *; * *; * Authors (alphabetical): *; * Manos Stergiadis <em.stergiadis@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the Convolutional Layer on the GPU. //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvLayerCuda.cxx:286,Test,Testing,286,tmva/tmva/test/DNN/CNN/TestConvLayerCuda.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvLayerCuda.cxx,4,['Test'],['Testing']
Testability,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Manos Stergiadis; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing RotateWeights method on a CPU architecture *; * *; * Authors (alphabetical): *; * Manos Stergiadis <em.stergiadis@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestRotateWeightsCuda.cxx:286,Test,Testing,286,tmva/tmva/test/DNN/CNN/TestRotateWeightsCuda.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestRotateWeightsCuda.cxx,1,['Test'],['Testing']
Testability,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Manos Stergiadis; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing RotateWeights method on a CPU architecture *; * *; * Authors (alphabetical): *; * Manos Stergiadis <em.stergiadis@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the Rotate Weights function //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestRotateWeights.h:286,Test,Testing,286,tmva/tmva/test/DNN/CNN/TestRotateWeights.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestRotateWeights.h,2,['Test'],['Testing']
Testability,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Manos Stergiadis; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing the Pooling Layer on a CPU architecture *; * *; * Authors (alphabetical): *; * Manos Stergiadis <em.stergiadis@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the Downsample function //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestPoolingLayerCpu.cxx:286,Test,Testing,286,tmva/tmva/test/DNN/CNN/TestPoolingLayerCpu.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestPoolingLayerCpu.cxx,6,['Test'],['Testing']
Testability,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Manos Stergiadis; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing the Pooling Layer on a CPU architecture *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <em.stergiadis@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the Downsample function //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestPoolingLayer.cxx:286,Test,Testing,286,tmva/tmva/test/DNN/CNN/TestPoolingLayer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestPoolingLayer.cxx,2,['Test'],['Testing']
Testability,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Siddhartha Rao Kamalakara; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Method DL for Regression *; * *; * Authors (alphabetical): *; * Siddhartha Rao Kamalakara <srk97c@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestRegressionMethodDL.cxx:295,Test,Testing,295,tmva/tmva/test/DNN/TestRegressionMethodDL.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestRegressionMethodDL.cxx,1,['Test'],['Testing']
Testability,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Conv Net Backpropagation *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the Conv Net Backward Pass //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvBackpropagation.cxx:287,Test,Testing,287,tmva/tmva/test/DNN/CNN/TestConvBackpropagation.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvBackpropagation.cxx,6,['Test'],['Testing']
Testability,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Conv Net Features *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNet.h:287,Test,Testing,287,tmva/tmva/test/DNN/CNN/TestConvNet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNet.h,1,['Test'],['Testing']
Testability,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Conv Net Forward Pass *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the Conv Net Forward Pass //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestForwardPass.cxx:287,Test,Testing,287,tmva/tmva/test/DNN/CNN/TestForwardPass.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestForwardPass.cxx,2,['Test'],['Testing']
Testability,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Conv Net Forward Pass for the CPU *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the Conv Net Forward Pass //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestForwardPassCpu.cxx:287,Test,Testing,287,tmva/tmva/test/DNN/CNN/TestForwardPassCpu.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestForwardPassCpu.cxx,8,['Test'],['Testing']
Testability,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Conv Net Loss *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the Conv Net Loss Function //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNetLoss.cxx:287,Test,Testing,287,tmva/tmva/test/DNN/CNN/TestConvNetLoss.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNetLoss.cxx,2,['Test'],['Testing']
Testability,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Conv Net Loss for CPU *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the Conv Net Loss Function //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNetLossCpu.cxx:287,Test,Testing,287,tmva/tmva/test/DNN/CNN/TestConvNetLossCpu.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNetLossCpu.cxx,2,['Test'],['Testing']
Testability,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Conv Net Prediction *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the Conv Net Prediction //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNetPrediction.cxx:287,Test,Testing,287,tmva/tmva/test/DNN/CNN/TestConvNetPrediction.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNetPrediction.cxx,2,['Test'],['Testing']
Testability,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Conv Net Prediction for CPU *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the Conv Net Prediction //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNetPredictionCpu.cxx:287,Test,Testing,287,tmva/tmva/test/DNN/CNN/TestConvNetPredictionCpu.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNetPredictionCpu.cxx,2,['Test'],['Testing']
Testability,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Deep Learning Minimizer *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestMinimization.h:287,Test,Testing,287,tmva/tmva/test/DNN/CNN/TestMinimization.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestMinimization.h,1,['Test'],['Testing']
Testability,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Deep Learning Minimizer for the CPU backend *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestMinimizationCpu.cxx:287,Test,Testing,287,tmva/tmva/test/DNN/CNN/TestMinimizationCpu.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestMinimizationCpu.cxx,1,['Test'],['Testing']
Testability,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Deep Learning Minimizer for the Reference backend *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestMinimization.cxx:287,Test,Testing,287,tmva/tmva/test/DNN/CNN/TestMinimization.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestMinimization.cxx,1,['Test'],['Testing']
Testability,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Im2Col method *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the method Im2col //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestIm2Col.cxx:287,Test,Testing,287,tmva/tmva/test/DNN/CNN/TestIm2Col.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestIm2Col.cxx,2,['Test'],['Testing']
Testability,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Im2Col method on a CPU architecture *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the method Im2col //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestIm2ColCpu.cxx:287,Test,Testing,287,tmva/tmva/test/DNN/CNN/TestIm2ColCpu.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestIm2ColCpu.cxx,2,['Test'],['Testing']
Testability,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Method DL for Conv Net *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestMethodDLCNN.h:287,Test,Testing,287,tmva/tmva/test/DNN/CNN/TestMethodDLCNN.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestMethodDLCNN.h,1,['Test'],['Testing']
Testability,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Method DL for Conv Net for the Reference backend *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestMethodDLCNN.cxx:287,Test,Testing,287,tmva/tmva/test/DNN/CNN/TestMethodDLCNN.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestMethodDLCNN.cxx,1,['Test'],['Testing']
Testability,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing RotateWeights method *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the Rotate Weights function //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestRotateWeights.cxx:287,Test,Testing,287,tmva/tmva/test/DNN/CNN/TestRotateWeights.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestRotateWeights.cxx,2,['Test'],['Testing']
Testability,"// @(#)root/tmva/tmva/cnn:$Id$; // Author: Vladimir Ilievski; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing RotateWeights method on a CPU architecture *; * *; * Authors (alphabetical): *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * Manos Stergiadis <em.stergiadis@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2015: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; ////////////////////////////////////////////////////////////////////; // Testing the Rotate Weights function on the CPU //; ////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestRotateWeightsCpu.cxx:287,Test,Testing,287,tmva/tmva/test/DNN/CNN/TestRotateWeightsCpu.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestRotateWeightsCpu.cxx,2,['Test'],['Testing']
Testability,"// @(#)root/tmva/tmva/dnn:$Id$ // Author: Simon Pfreundschuh 20/07/16; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ///////////////////////////////////////////////////////////////////; // Test arithmetic functions defined on matrices and compare the //; // results to the reference implementation. //; ///////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmetic.h:484,Test,Test,484,tmva/tmva/test/DNN/TestMatrixArithmetic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmetic.h,1,['Test'],['Test']
Testability,"// @(#)root/tmva/tmva/dnn:$Id$ // Author: Simon Pfreundschuh 20/07/16; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ///////////////////////////////////////////////////////////////////; // Test arithmetic on CpuMatrix class using the generic tests in //; // TestArithmetic.h //; ///////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmeticCpu.cxx:484,Test,Test,484,tmva/tmva/test/DNN/TestMatrixArithmeticCpu.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmeticCpu.cxx,3,"['Test', 'test']","['Test', 'TestArithmetic', 'tests']"
Testability,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Ravi Kiran S; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing MethodDL with DNN for Adadelta optimizer ( CPU backend ) *; * *; * Authors (alphabetical): *; * Ravi Kiran S <sravikiran0606@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2018: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLAdadeltaOptimizationCpu.cxx:282,Test,Testing,282,tmva/tmva/test/DNN/TestMethodDLAdadeltaOptimizationCpu.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLAdadeltaOptimizationCpu.cxx,1,['Test'],['Testing']
Testability,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Ravi Kiran S; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing MethodDL with DNN for Adagrad optimizer ( CPU backend ) *; * *; * Authors (alphabetical): *; * Ravi Kiran S <sravikiran0606@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2018: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLAdagradOptimizationCpu.cxx:282,Test,Testing,282,tmva/tmva/test/DNN/TestMethodDLAdagradOptimizationCpu.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLAdagradOptimizationCpu.cxx,1,['Test'],['Testing']
Testability,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Ravi Kiran S; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing MethodDL with DNN for Adam optimizer ( CPU backend ) *; * *; * Authors (alphabetical): *; * Ravi Kiran S <sravikiran0606@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2018: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLAdamOptimizationCpu.cxx:282,Test,Testing,282,tmva/tmva/test/DNN/TestMethodDLAdamOptimizationCpu.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLAdamOptimizationCpu.cxx,1,['Test'],['Testing']
Testability,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Ravi Kiran S; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing MethodDL with DNN for RMSProp optimizer ( CPU backend ) *; * *; * Authors (alphabetical): *; * Ravi Kiran S <sravikiran0606@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2018: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLRMSPropOptimizationCpu.cxx:282,Test,Testing,282,tmva/tmva/test/DNN/TestMethodDLRMSPropOptimizationCpu.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLRMSPropOptimizationCpu.cxx,1,['Test'],['Testing']
Testability,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Ravi Kiran S; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing Various Optimizers for training DeepNet *; * *; * Authors (alphabetical): *; * Ravi Kiran S <sravikiran0606@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2018: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimization.h:282,Test,Testing,282,tmva/tmva/test/DNN/TestOptimization.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimization.h,1,['Test'],['Testing']
Testability,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Ravi Kiran S; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing various optimizers for Cpu Backend *; * *; * Authors (alphabetical): *; * Ravi Kiran S <sravikiran0606@gmail.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2018: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimizationCpu.cxx:282,Test,Testing,282,tmva/tmva/test/DNN/TestOptimizationCpu.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimizationCpu.cxx,3,['Test'],['Testing']
Testability,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Simon Pfreundschuh 08/08/16; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ///////////////////////////////////////////////////////////////; // Test the generic data loader for the CUDA implementation. //; ///////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestDataLoaderCuda.cxx:481,Test,Test,481,tmva/tmva/test/DNN/TestDataLoaderCuda.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestDataLoaderCuda.cxx,2,['Test'],['Test']
Testability,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Simon Pfreundschuh 12/07/16; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////; // Test the reference data loader implementation. //; ////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestDataLoader.cxx:470,Test,Test,470,tmva/tmva/test/DNN/TestDataLoader.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestDataLoader.cxx,2,['Test'],['Test']
Testability,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Simon Pfreundschuh 12/07/16; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; //////////////////////////////////////////////////; // Generic test for DataLoader implementations. //; //////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestDataLoader.h:476,test,test,476,tmva/tmva/test/DNN/TestDataLoader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestDataLoader.h,2,['test'],['test']
Testability,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Simon Pfreundschuh 21/07/16; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /////////////////////////////////////////////////////////////; // Test the multi-threaded CPU data loader implementation. //; /////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestDataLoaderCpu.cxx:479,Test,Test,479,tmva/tmva/test/DNN/TestDataLoaderCpu.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestDataLoaderCpu.cxx,2,['Test'],['Test']
Testability,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Vladimir Ilievski, Ravi Kiran S; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing MethodDL with DNN for SGD optimizer ( CPU backend ) *; * *; * Authors (alphabetical): *; * Ravi Kiran S <sravikiran0606@gmail.com> - CERN, Switzerland *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2018: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLSGDOptimizationCpu.cxx:301,Test,Testing,301,tmva/tmva/test/DNN/TestMethodDLSGDOptimizationCpu.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLSGDOptimizationCpu.cxx,1,['Test'],['Testing']
Testability,"// @(#)root/tmva/tmva/dnn:$Id$; // Author: Vladimir Ilievski, Ravi Kiran S; /**********************************************************************************; * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; * Package: TMVA *; * Class : *; * *; * *; * Description: *; * Testing MethodDL with DNN for various optimizers *; * *; * Authors (alphabetical): *; * Ravi Kiran S <sravikiran0606@gmail.com> - CERN, Switzerland *; * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; * *; * Copyright (c) 2005-2018: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * MPI-K Heidelberg, Germany *; * U. of Bonn, Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLOptimization.h:301,Test,Testing,301,tmva/tmva/test/DNN/TestMethodDLOptimization.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLOptimization.h,1,['Test'],['Testing']
Testability,"// @(#)root/tmva/tmva/test/dnn $Id$; // Author: Simon Pfreundschuh; /*************************************************************************; * Copyright (C) 2016, Simon Pfreundschuh; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; //////////////////////////////////////////////////////////////////////; // Concrete instantiation of the generic activation function test //; // for the TCuda implementation. //; //////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctionsCuda.cxx:22,test,test,22,tmva/tmva/test/DNN/TestActivationFunctionsCuda.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctionsCuda.cxx,2,['test'],['test']
Testability,"// @(#)root/tree:$Id$; // Author: Rene Brun 12/01/96; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /**; \defgroup tree Tree Library. In order to store columnar datasets, ROOT provides the TTree, TChain,; TNtuple and TNtupleD classes.; The TTree class represents a columnar dataset. Any C++ type can be stored in the; columns. The TTree has allowed to store about **1 EB** of data coming from the LHC alone:; it is demonstrated to scale and it's battle tested. It has been optimized during the years; to reduce dataset sizes on disk and to deliver excellent runtime performance.; It allows to access only part of the columns of the datasets, too.; The TNtuple and TNtupleD classes are specialisations of the TTree class which can; only hold single precision and double precision floating-point numbers respectively;; The TChain is a collection of TTrees, which can be located also in different files. */; /** \class TTree; \ingroup tree. A TTree represents a columnar dataset. Any C++ type can be stored in its columns. A TTree, often called in jargon *tree*, consists of a list of independent columns or *branches*,; represented by the TBranch class.; Behind each branch, buffers are allocated automatically by ROOT.; Such buffers are automatically written to disk or kept in memory until the size stored in the; attribute fMaxVirtualSize is reached.; Variables of one branch are written to the same buffer. A branch buffer is; automatically compressed if the file compression attribute is set (default).; Branches may be written to different files (see TBranch::SetFile). The ROOT user can decide to make one single branch and serialize one object into; one single I/O buffer or to make ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx:765,test,tested,765,tree/tree/src/TTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx,1,['test'],['tested']
Testability,"// @(#)root/tree:$Id$; // Author: Rene Brun 14/04/97; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TCut; \ingroup tree. A specialized string object used for TTree selections.; A TCut object has a name and a title. It does not add any data; members compared to a TNamed. It only add a set of operators to; facilitate logical string concatenation. For example, assume; ~~~ {.cpp}; cut1 = ""x<1"" and cut2 = ""y>2""; ~~~; then; ~~~ {.cpp}; cut1 && cut2 will be the string ""(x<1)&&(y>2)""; ~~~; Operators =, +=, +, *, !, &&, || overloaded. Examples of use:; ~~~ {.cpp}; Root > TCut c1 = ""x<1""; Root > TCut c2 = ""y<0""; Root > TCut c3 = c1&&c2; Root > ntuple.Draw(""x"", c1); Root > ntuple.Draw(""x"", c1||""x>0""); Root > ntuple.Draw(""x"", c1&&c2); Root > ntuple.Draw(""x"", ""(x+y)""*(c1&&c2)); ~~~; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TCut.cxx:640,log,logical,640,tree/tree/src/TCut.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TCut.cxx,1,['log'],['logical']
Testability,"// @(#)root/treeplayer:$Id$; // Author: Philippe Canal 06/06/2004; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers and al. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /*; TODO:; Have separate names for the wrapper classes in the cases of: [done]; clones/non clones; split/non split; split levels. Have a solution for passing top+"".""+middle to the parents classes [probably done .. need testing]. Have a solution for the return by references of abstract classes [not done]. Have object inside ClonesArray properly treated! [done]; Why is there 2 TRef proxy classes? [done]. check why some inheritance are TObjProxy and not TPx_. Be smart enough to avoid issue about having 2 classes one unrolled and one non unrolled!. When using in interpreted mode understand why the reloading reloads the calling script and then crashes :(. CINT does not properly call the custom operators when doing return fNtrack. CINT does not handle fMatrix[2][1] well. The user's function in script.h are not exposed by ACLiC. Review the method to avoid the useless refreshing of the generated file; - for most efficiency it would require a different name for each tree; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeProxyGenerator.cxx:651,test,testing,651,tree/treeplayer/src/TTreeProxyGenerator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeProxyGenerator.cxx,1,['test'],['testing']
Testability,"// @(#)root/treeplayer:$Id$; // Author: Rene Brun 12/01/96; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /**; * \defgroup treeplayer TreePlayer Library; * \brief It contains utilities to plot data stored in a TTree.; * \sa Tree package documentation; * \sa Chapter about Trees and Selectors in the Users Guide; * \sa ROOT examples in tutorials and test directories: Event application, benchmarks; */; /** \class TTreePlayer. Implement some of the functionality of the class TTree requiring access to; extra libraries (Histogram, display, etc).; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreePlayer.cxx:661,test,test,661,tree/treeplayer/src/TTreePlayer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreePlayer.cxx,2,"['benchmark', 'test']","['benchmarks', 'test']"
Testability,"// A = sext i1 Cond; B = not ({bitcast} (sext (i1 Cond))); // TODO: The one-use checks are unnecessary or misplaced. If the caller; // checked for uses on logic ops/casts, that should be enough to; // make this transform worthwhile.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp:155,log,logic,155,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,1,['log'],['logic']
Testability,// A MCOperand index. This is used by the Dispatch logic to identify register; // reads. Implicit reads have negative indices. The actual operand index of an; // implicit read is the bitwise not of field OpIndex.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h:51,log,logic,51,interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Instruction.h,1,['log'],['logic']
Testability,// A MachineBasicBlock must not be created for the Entry block; code; // generation from an empty naked function in C source code also does not; // generate one. At least GlobalISel asserts if this invariant isn't; // respected.; // Set MF properties. We never use vregs...,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/IndirectThunks.h:182,assert,asserts,182,interpreter/llvm-project/llvm/include/llvm/CodeGen/IndirectThunks.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/IndirectThunks.h,1,['assert'],['asserts']
Testability,// A ON_CALL or EXPECT_CALL macro expands to different AST structures; // depending on whether the mock method has arguments or not.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/GtestMatchers.cpp:99,mock,mock,99,interpreter/llvm-project/clang/lib/ASTMatchers/GtestMatchers.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/GtestMatchers.cpp,1,['mock'],['mock']
Testability,"// A PPC branch relocation will need a stub function if the target is; // an external symbol (either Value.SymbolName is set, or SymType is; // Symbol::ST_Unknown) or if the target address is not within the; // signed 24-bits branch address.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp:39,stub,stub,39,interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp,1,['stub'],['stub']
Testability,// A Path insensitive marker to test whether the coro.begin escapes.; // It is intentional to make it path insensitive while it may not be; // precise since we don't want the process to be too slow.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Coroutines/CoroElide.cpp:32,test,test,32,interpreter/llvm-project/llvm/lib/Transforms/Coroutines/CoroElide.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Coroutines/CoroElide.cpp,1,['test'],['test']
Testability,"// A call to `RNTupleDescriptorBuilder::BeginHeaderExtension()` is not strictly required after serializing the; // header, which may happen, e.g., in unit tests. Ensure an empty schema extension is serialized in this case",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RNTupleSerialize.cxx:155,test,tests,155,tree/ntuple/v7/src/RNTupleSerialize.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RNTupleSerialize.cxx,1,['test'],['tests']
Testability,"// A class representing failures that happened during Benchmark, they are used; // to report informations to the user.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetGenerator.h:54,Benchmark,Benchmark,54,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetGenerator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetGenerator.h,1,['Benchmark'],['Benchmark']
Testability,"// A command-line option to keep implicit locals; // for the purpose of testing with lit/llc ONLY.; // This produces output which is not valid WebAssembly, and is not supported; // by assemblers/disassemblers and other MC based tools.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyTargetMachine.cpp:72,test,testing,72,interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyTargetMachine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyTargetMachine.cpp,1,['test'],['testing']
Testability,"// A concrete implementation of the TestStatistic interface, useful for debugging.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/DebuggingTestStat.h:36,Test,TestStatistic,36,roofit/roostats/inc/RooStats/DebuggingTestStat.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/DebuggingTestStat.h,1,['Test'],['TestStatistic']
Testability,// A cumulative representation of InterFace stubs.; // Both textual and binary stubs will read into and write from this object.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/InterfaceStub/IFSStub.h:44,stub,stubs,44,interpreter/llvm-project/llvm/include/llvm/InterfaceStub/IFSStub.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/InterfaceStub/IFSStub.h,2,['stub'],['stubs']
Testability,"// A fully-formed DBG_VALUE must have a location. Ignore partially formed; // DBG_VALUEs: these are convenient to use in tests, but should never get; // generated.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineVerifier.cpp:121,test,tests,121,interpreter/llvm-project/llvm/lib/CodeGen/MachineVerifier.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineVerifier.cpp,1,['test'],['tests']
Testability,// A global Random Number Generator to randomize configurations.; // FIXME: Move random number generation into an object and make it seedable for; // unit tests.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetGenerator.h:155,test,tests,155,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetGenerator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetGenerator.h,1,['test'],['tests']
Testability,"// A hack... we need to insert the aliasing info in a predictable order for; // lit tests. Would like to have them in a stable order already, ideally the; // same order they get allocated, which might mean an ordered set container",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp:84,test,tests,84,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp,1,['test'],['tests']
Testability,// A helper class to analyze benchmark results for a target.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Analysis.h:29,benchmark,benchmark,29,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Analysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Analysis.h,1,['benchmark'],['benchmark']
Testability,// A helper to create an unscaled BenchmarkMeasure.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkResult.h:34,Benchmark,BenchmarkMeasure,34,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkResult.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkResult.h,1,['Benchmark'],['BenchmarkMeasure']
Testability,// A helper to measure counters while executing a function in a sandboxed; // context.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.h:64,sandbox,sandboxed,64,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.h,1,['sandbox'],['sandboxed']
Testability,"// A layer of indirection to hide std::vector's second template parameter.; // This way we can generalize tests over RVec and std::vector using a template template parameter (see below).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/rfield_vector.cxx:106,test,tests,106,tree/ntuple/v7/test/rfield_vector.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/rfield_vector.cxx,1,['test'],['tests']
Testability,"// A loaded value compared with 0 with multiple users becomes Load and; // Test. The load is then not foldable, so return 0 cost for the ICmp.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZTargetTransformInfo.cpp:75,Test,Test,75,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZTargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZTargetTransformInfo.cpp,1,['Test'],['Test']
Testability,// A logical line.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h:5,log,logical,5,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h,1,['log'],['logical']
Testability,// A logical scope.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h:5,log,logical,5,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h,1,['log'],['logical']
Testability,"// A logical shifter is LSL, LSR, ASR or ROR.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AsmParser/AArch64AsmParser.cpp:5,log,logical,5,interpreter/llvm-project/llvm/lib/Target/AArch64/AsmParser/AArch64AsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AsmParser/AArch64AsmParser.cpp,1,['log'],['logical']
Testability,// A logical symbol.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h:5,log,logical,5,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h,1,['log'],['logical']
Testability,// A logical type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h:5,log,logical,5,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h,1,['log'],['logical']
Testability,// A logical vector shifter is a left shift by 0 or 8.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AsmParser/AArch64AsmParser.cpp:5,log,logical,5,interpreter/llvm-project/llvm/lib/Target/AArch64/AsmParser/AArch64AsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AsmParser/AArch64AsmParser.cpp,1,['log'],['logical']
Testability,"// A logical vector shifter is a left shift by 0, 8, 16, or 24.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AsmParser/AArch64AsmParser.cpp:5,log,logical,5,interpreter/llvm-project/llvm/lib/Target/AArch64/AsmParser/AArch64AsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AsmParser/AArch64AsmParser.cpp,1,['log'],['logical']
Testability,// A logical vector shifter is a left shift by 8 or 16.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AsmParser/AArch64AsmParser.cpp:5,log,logical,5,interpreter/llvm-project/llvm/lib/Target/AArch64/AsmParser/AArch64AsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AsmParser/AArch64AsmParser.cpp,1,['log'],['logical']
Testability,"// A logical: should predictor winnowing (i.e feature selection) be used?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodC50.h:5,log,logical,5,tmva/rmva/inc/TMVA/MethodC50.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodC50.h,1,['log'],['logical']
Testability,// A memory mapper with a fake offset applied only used for -noexec testing,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp:68,test,testing,68,interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp,1,['test'],['testing']
Testability,"// A mock of the RNTuple class, used to write a ""future version"" of RNTuple to a file.; // The idea is:; // 1. we write a ""RXTuple"" to a file, with a schema identical to RNTuple + some; // hypothetical future fields; // 2. we read back the file and patch the name to transmute the on-disk; // binary to a serialized RNTuple with some additional fields; // 3. we read back the patched file to ensure the current version of RNTuple can handle; // schema evolution in a fwd-compatible way.; // For ease of patching, the name of this struct has the same length as that of RNTuple.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/RXTuple.hxx:5,mock,mock,5,tree/ntuple/v7/test/RXTuple.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/RXTuple.hxx,1,['mock'],['mock']
Testability,// A pass for testing -print-on-crash.; // DO NOT USE THIS EXCEPT FOR TESTING!,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp:14,test,testing,14,interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,2,"['TEST', 'test']","['TESTING', 'testing']"
Testability,// A pass for testing message reporting of -verify-each failures.; // DO NOT USE THIS EXCEPT FOR TESTING!,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp:14,test,testing,14,interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,2,"['TEST', 'test']","['TESTING', 'testing']"
Testability,"// A pointer to an object in a function which neither frees, nor can arrange; // for another thread to free on its behalf, can not be freed in the scope; // of the function. Note that this logic is restricted to memory; // allocations in existance before the call; a nofree function *is* allowed; // to free memory it allocated.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Value.cpp:189,log,logic,189,interpreter/llvm-project/llvm/lib/IR/Value.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Value.cpp,1,['log'],['logic']
Testability,// A query call from a unit test.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SizeOpts.h:28,test,test,28,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SizeOpts.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SizeOpts.h,1,['test'],['test']
Testability,"// A real instruction is a non-meta, non-pseudo instruction. Some pseudos; // expand to nothing, and some expand to code. This logic conservatively assumes; // they might expand to nothing.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86AvoidTrailingCall.cpp:127,log,logic,127,interpreter/llvm-project/llvm/lib/Target/X86/X86AvoidTrailingCall.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86AvoidTrailingCall.cpp,1,['log'],['logic']
Testability,"// A shorthand time trace scope struct, prints source range, for example; // {""name"":""EvaluateAsRValue"",""args"":{""detail"":""<test.cc:8:21, col:25>""}}}",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp:123,test,test,123,interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,1,['test'],['test']
Testability,"// A signed comparison of i1 values produces the opposite result to an; // unsigned one if the condition code includes less-than or greater-than.; // This is because 1 is the most negative signed i1 number and the most; // positive unsigned i1 number. The CR-logical operations used for such; // comparisons are non-commutative so for signed comparisons vs. unsigned; // ones, the input operands just need to be swapped.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp:259,log,logical,259,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,1,['log'],['logical']
Testability,"// A simple helper function for determining all supported features.; // Crude, but works without making tests a 'friend' class of ROOT::TIOFeatures.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/test/TBasket.cxx:104,test,tests,104,tree/tree/test/TBasket.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/test/TBasket.cxx,1,['test'],['tests']
Testability,"// A simple implementation of the TestStatSampler interface",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ToyMCSampler.h:34,Test,TestStatSampler,34,roofit/roostats/inc/RooStats/ToyMCSampler.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ToyMCSampler.h,1,['Test'],['TestStatSampler']
Testability,"// A single vector of bytes may not suffice as the representation of; // svcount_t tuples because of the gap between the active 16bits of; // successive tuple members. Currently no such tuples are defined for; // svcount_t, so assert that NumVectors is 1.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:227,assert,assert,227,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,1,['assert'],['assert']
Testability,"// A temp file that would be deleted on destructor call. If destructor is not; // called for any reason, the file will be deleted at static objects'; // destruction.; // An assertion will fire if two TempPCHFiles are created with the same name,; // so it's not intended to be used outside preamble-handling.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/PrecompiledPreamble.cpp:173,assert,assertion,173,interpreter/llvm-project/clang/lib/Frontend/PrecompiledPreamble.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/PrecompiledPreamble.cpp,1,['assert'],['assertion']
Testability,"// A test for #10484",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_helpers.cxx:5,test,test,5,tree/dataframe/test/dataframe_helpers.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_helpers.cxx,1,['test'],['test']
Testability,"// A value is in a flag enum if either its bits are a subset of the enum's; // flag bits (the first condition) or we are allowing masks and the same is; // true of its complement (the second condition). When masks are allowed, we; // allow the common idiom of ~(enum1 | enum2) to be a valid enum value.; //; // While it's true that any value could be used as a mask, the assumption is; // that a mask will have all of the insignificant bits set. Anything else is; // likely a logic error.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:476,log,logic,476,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['log'],['logic']
Testability,"// A variation to test some additional parameters (ConstrainedParameters and offsetting); // The reference likelihood is using the legacy evaluation backend, because; // the multiprocess test statistics classes were designed to give values; // that are bit-by-bit identical with the old test statistics based on; // RooAbsTestStatistic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx:18,test,test,18,roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx,6,['test'],['test']
Testability,// A vector to contain all the CR logical operations,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCReduceCRLogicals.cpp:34,log,logical,34,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCReduceCRLogicals.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCReduceCRLogicals.cpp,1,['log'],['logical']
Testability,// A.BitVector::test(B) <=> A-B != {},MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonGenInsert.cpp:16,test,test,16,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonGenInsert.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonGenInsert.cpp,1,['test'],['test']
Testability,// A.test(B) <=> A-B != {},MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonBitSimplify.cpp:5,test,test,5,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonBitSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonBitSimplify.cpp,1,['test'],['test']
Testability,"// AAPCS requires i1 to be zero-extended to 8-bits by the caller.; //; // Check if we actually have to do this, because the value may; // already be zero-extended.; //; // We cannot just emit a (zext i8 (trunc (assert-zext i8))); // and rely on DAGCombiner to fold this, because the following; // (anyext i32) is combined with (zext i8) in DAG.getNode:; //; // (ext (zext x)) -> (zext x); //; // This will give us (zext i32), which we cannot remove, so; // try to check this beforehand.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:211,assert,assert-zext,211,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['assert'],['assert-zext']
Testability,"// AFloat sig = 1.0 / (1.0 + exp(- dataOutput[workerID]));; // Use more robust formula to compute log(sig) and log(1-sig) where sig= 1./(1+exp(-x)); // when sig is close to zero or to 1",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Cpu/LossFunctions.hxx:98,log,log,98,tmva/tmva/src/DNN/Architectures/Cpu/LossFunctions.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DNN/Architectures/Cpu/LossFunctions.hxx,2,['log'],['log']
Testability,"// AMD64-ABI 3.2.3p2: Rule 1. If the size of an object is larger than; // eight eightbytes, or it contains unaligned fields, it has class MEMORY.; //; // The only case a 256-bit or a 512-bit wide vector could be used is when; // the struct contains a single 256-bit or 512-bit element. Early check; // and fallback to memory.; //; // FIXME: Extended the Lo and Hi logic properly to work for size wider; // than 128.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:364,log,logic,364,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,1,['log'],['logic']
Testability,"// AMD64-ABI 3.2.3p2: Rule 5. Then a post merger cleanup is done:; //; // (a) If one of the classes is Memory, the whole argument is passed in; // memory.; //; // (b) If X87UP is not preceded by X87, the whole argument is passed in; // memory.; //; // (c) If the size of the aggregate exceeds two eightbytes and the first; // eightbyte isn't SSE or any other eightbyte isn't SSEUP, the whole; // argument is passed in memory. NOTE: This is necessary to keep the; // ABI working for processors that don't support the __m256 type.; //; // (d) If SSEUP is not preceded by SSE or SSEUP, it is converted to SSE.; //; // Some of these are enforced by the merging logic. Others can arise; // only with unions; for example:; // union { _Complex double; unsigned; }; //; // Note that clauses (b) and (c) were added in 0.98.; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:657,log,logic,657,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,1,['log'],['logic']
Testability,"// AND instruction will essentially update SF and clear OF, so; // NoSignFlag should be false in the sense that SF is modified by `AND`.; //; // However, the implementation artifically sets `NoSignFlag` to true; // to poison the SF bit; that is to say, if SF is looked at later, the; // optimization (to erase TEST64rr) will be disabled.; //; // The reason to poison SF bit is that SF bit value could be different; // in the `AND` and `TEST` operation; signed bit is not known for `AND`,; // and is known to be 0 as a result of `TEST64rr`.; //; // FIXME: As opposed to poisoning the SF bit directly, consider peeking into; // the AND instruction and using the static information to guide peephole; // optimization if possible. For example, it's possible to fold a; // conditional move into a copy if the relevant EFLAG bits could be deduced; // from an immediate operand of and operation.; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp:436,TEST,TEST,436,interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp,1,['TEST'],['TEST']
Testability,// ANDS needs a logical immediate for its immediate form. Check if we can; // fold one in.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp:16,log,logical,16,interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp,1,['log'],['logical']
Testability,"// AR may be a pointer type, while BECount is an integer type.; // AR may be wider than BECount. With eq/ne tests overflow is immaterial.; // AR may not be a narrower type, or we may never exit.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp:108,test,tests,108,interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp,1,['test'],['tests']
Testability,"// ASSERT(indexvar!=0);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx:3,ASSERT,ASSERT,3,tree/treeplayer/src/TTreeFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx,1,['ASSERT'],['ASSERT']
Testability,"// ASSERT_DOUBLE_EQ does not succeed on macOS, that's why we use ASSERT_NEAR; // with a relative error in this test. A relative error of 1.E-12 should be; // large enough to take into account some numerical differences. It is,; // however, unexpected that the test fails since the code to compute the bin; // error of the TProfile2Poly and the TProfile2D do the same operations.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_tprofile2poly.cxx:111,test,test,111,hist/hist/test/test_tprofile2poly.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_tprofile2poly.cxx,2,['test'],['test']
Testability,"// Abortion test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/proof/ProofEventProc.h:12,test,test,12,tutorials/proof/ProofEventProc.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/proof/ProofEventProc.h,1,['test'],['test']
Testability,"// Above the cutoff, we give a cost to each private memory object; // depending its size. If the array can be optimized by SROA this cost is not; // added to the total-cost in the inliner cost analysis.; //; // We choose the total cost of the alloca such that their sum cancels the; // bonus given in the threshold (ArgAllocaCost).; //; // Cost_Alloca_0 + ... + Cost_Alloca_N == ArgAllocaCost; //; // Awkwardly, the ArgAllocaCost bonus is multiplied by threshold-multiplier,; // the single-bb bonus and the vector-bonus.; //; // We compensate the first two multipliers, by repeating logic from the; // inliner-cost in here. The vector-bonus is 0 on AMDGPU.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUTargetTransformInfo.cpp:583,log,logic,583,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUTargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUTargetTransformInfo.cpp,1,['log'],['logic']
Testability,// Absolute offset within a section or a function.; // Currently only supported for metadata sections.; // See: test/MC/WebAssembly/blockaddress.ll,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/WasmObjectWriter.cpp:112,test,test,112,interpreter/llvm-project/llvm/lib/MC/WasmObjectWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/WasmObjectWriter.cpp,1,['test'],['test']
Testability,"// Accept two kinds of subregister movement:; // * When we merge from one register class into a larger register:; // %1:gr16 = some-inst; // ->; // %2:gr32.sub_16bit = some-inst; // * When the PHI is already in a subregister, and the larger class; // is coalesced:; // %2:gr32.sub_16bit = some-inst; // %3:gr32 = COPY %2; // ->; // %3:gr32.sub_16bit = some-inst; // Test for subregister move:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp:366,Test,Test,366,interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp,1,['Test'],['Test']
Testability,// Access the final symbol via sym$non_lazy_ptr and generate the appropriated; // non_lazy_ptr stubs.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TargetLoweringObjectFileImpl.cpp:95,stub,stubs,95,interpreter/llvm-project/llvm/lib/CodeGen/TargetLoweringObjectFileImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TargetLoweringObjectFileImpl.cpp,1,['stub'],['stubs']
Testability,"// According to psABI, PLT stub clobbers XMM8-XMM15.; // In Regcall calling convention those registers are used for passing; // parameters. Thus we need to prevent lazy binding in Regcall.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86Subtarget.cpp:27,stub,stub,27,interpreter/llvm-project/llvm/lib/Target/X86/X86Subtarget.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86Subtarget.cpp,1,['stub'],['stub']
Testability,"// According to the llvm language reference, we should be able to; // just return false in here if we have a GV, as we know it is; // dso_preemptable. At this point in time, the various IR producers; // have not been transitioned to always produce a dso_local when it; // is possible to do so.; //; // As a result we still have some logic in here to improve the quality of the; // generated code.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/TargetMachine.cpp:333,log,logic,333,interpreter/llvm-project/llvm/lib/Target/TargetMachine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/TargetMachine.cpp,1,['log'],['logic']
Testability,// Accumulate the percentage of base unique and test unique samples into; // ProfOverlap.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp:48,test,test,48,interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,1,['test'],['test']
Testability,"// Acquire pointers to ROOT's task arena from many threads in parallel.; // To create more chaos, half of the threads will immediately try to get the pointer,; // while the other half waits for a condition variable.; // To test destroying and recreating a task arena, the first half of the shared; // pointers will be destroyed before the other threads are released.; // Then, using a notify_all(), the other half of threads will wake up; // and race to create a task arena again.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/imt/test/testRTaskArena.cxx:223,test,test,223,core/imt/test/testRTaskArena.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/imt/test/testRTaskArena.cxx,1,['test'],['test']
Testability,"// Active logging unit",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:10,log,logging,10,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,1,['log'],['logging']
Testability,"// Actual test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/TestCrossValidationSplitting.cxx:10,test,test,10,tmva/tmva/test/crossvalidation/TestCrossValidationSplitting.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/TestCrossValidationSplitting.cxx,3,['test'],['test']
Testability,"// Actually, dominating is over-conservative. Test that the use would; // happen after the one selected use in the stack evaluation order.; //; // This is needed as a consequence of using implicit local.gets for; // uses and implicit local.sets for defs.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyRegStackify.cpp:46,Test,Test,46,interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyRegStackify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyRegStackify.cpp,1,['Test'],['Test']
Testability,// Add 64 bytes for a potential IFunc resolver stub,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyld.cpp:47,stub,stub,47,interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyld.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyld.cpp,1,['stub'],['stub']
Testability,// Add GOT/Stubs optimizer pass.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/JITLink/ELF_i386.cpp:11,Stub,Stubs,11,interpreter/llvm-project/llvm/lib/ExecutionEngine/JITLink/ELF_i386.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/JITLink/ELF_i386.cpp,3,['Stub'],['Stubs']
Testability,// Add a space separator where it is convenient for testing purposes.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/DependencyDirectivesScanner.cpp:52,test,testing,52,interpreter/llvm-project/clang/lib/Lex/DependencyDirectivesScanner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/DependencyDirectivesScanner.cpp,1,['test'],['testing']
Testability,// Add an assertion node.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:10,assert,assertion,10,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,1,['assert'],['assertion']
Testability,// Add an in-place GOT/Stubs pass.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/JITLink/MachO_arm64.cpp:23,Stub,Stubs,23,interpreter/llvm-project/llvm/lib/ExecutionEngine/JITLink/MachO_arm64.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/JITLink/MachO_arm64.cpp,2,['Stub'],['Stubs']
Testability,// Add an in-place GOT/Stubs/TLSInfoEntry build pass.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/JITLink/ELF_x86_64.cpp:23,Stub,Stubs,23,interpreter/llvm-project/llvm/lib/ExecutionEngine/JITLink/ELF_x86_64.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/JITLink/ELF_x86_64.cpp,1,['Stub'],['Stubs']
Testability,// Add an in-place GOT/TLS/Stubs build pass.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/JITLink/ELF_aarch64.cpp:27,Stub,Stubs,27,interpreter/llvm-project/llvm/lib/ExecutionEngine/JITLink/ELF_aarch64.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/JITLink/ELF_aarch64.cpp,1,['Stub'],['Stubs']
Testability,// Add an interface stubs merge action if necessary.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:20,stub,stubs,20,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp,2,['stub'],['stubs']
Testability,"// Add dedicated logging stream for errors that will remain active in silent mode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/stressRooFit.cxx:17,log,logging,17,roofit/roofitcore/test/stressRooFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/stressRooFit.cxx,2,['log'],['logging']
Testability,// Add floor(log(C)) bits to the numerator bits.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp:13,log,log,13,interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp,1,['log'],['log']
Testability,"// Add header to log file",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofQueryResult.cxx:17,log,log,17,proof/proof/src/TProofQueryResult.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofQueryResult.cxx,1,['log'],['log']
Testability,// Add information about the stub reference to ELFMMI so that the stub; // gets emitted by the asmprinter.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TargetLoweringObjectFileImpl.cpp:29,stub,stub,29,interpreter/llvm-project/llvm/lib/CodeGen/TargetLoweringObjectFileImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TargetLoweringObjectFileImpl.cpp,4,['stub'],['stub']
Testability,// Add information about the stub reference to MachOMMI so that the stub; // gets emitted by the asmprinter.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TargetLoweringObjectFileImpl.cpp:29,stub,stub,29,interpreter/llvm-project/llvm/lib/CodeGen/TargetLoweringObjectFileImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TargetLoweringObjectFileImpl.cpp,4,['stub'],['stub']
Testability,// Add logic for iteration count,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp:7,log,logic,7,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,1,['log'],['logic']
Testability,"// Add logical to scene",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScenePad.cxx:7,log,logical,7,graf3d/gl/src/TGLScenePad.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScenePad.cxx,1,['log'],['logical']
Testability,"// Add profile likelihood calculation of significance. Redo each; // fit while keeping parameter nsig fixed to zero. For each toy,; // the difference in -log(L) of both fits is stored, as well; // a simple significance interpretation of the delta(-logL); // using Dnll = 0.5 sigma^2",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/stressRooFit_tests.h:154,log,log,154,roofit/roofitcore/test/stressRooFit_tests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/stressRooFit_tests.h,2,['log'],"['log', 'logL']"
Testability,"// Add some header to logs",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofLite.cxx:22,log,logs,22,proof/proof/src/TProofLite.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofLite.cxx,2,['log'],['logs']
Testability,// Add space between the type name and dimension like `logic [1:0]`.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/TokenAnnotator.cpp:55,log,logic,55,interpreter/llvm-project/clang/lib/Format/TokenAnnotator.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/TokenAnnotator.cpp,1,['log'],['logic']
Testability,// Add stubbuf size alignment,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyld.cpp:7,stub,stubbuf,7,interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyld.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyld.cpp,1,['stub'],['stubbuf']
Testability,"// Add the PID to the shared memory name so that if we're running multiple; // processes at the same time, they won't interfere with each other.; // This comes up particularly often when running the exegesis tests with; // llvm-lit",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SubprocessMemory.cpp:208,test,tests,208,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SubprocessMemory.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SubprocessMemory.cpp,1,['test'],['tests']
Testability,// Add the testing module file extension.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInvocation.cpp:11,test,testing,11,interpreter/llvm-project/clang/lib/Frontend/CompilerInvocation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInvocation.cpp,1,['test'],['testing']
Testability,// Addend to the stub is zero.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/ppc64.h:17,stub,stub,17,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/ppc64.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/ppc64.h,1,['stub'],['stub']
Testability,"// Addends for external, PC-rel relocations on i386 point back to the zero; // offset. Calculate the final offset from the relocation target instead.; // This allows us to use the same logic for both external and internal; // relocations in resolveI386RelocationRef.; // bool IsExtern = Obj.getPlainRelocationExternal(RelInfo);; // if (IsExtern && RE.IsPCRel) {; // uint64_t RelocAddr = 0;; // RelI->getAddress(RelocAddr);; // Value.Addend += RelocAddr + 4;; // }",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/Targets/RuntimeDyldMachOI386.h:185,log,logic,185,interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/Targets/RuntimeDyldMachOI386.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/Targets/RuntimeDyldMachOI386.h,1,['log'],['logic']
Testability,"// Address space 8 pointers are 128-bit wide values, but the logic; // below will try to bitcast them to 2N x s64, which will fail.; // Therefore, as an intermediate step, wrap extracts/insertions from a; // ptrtoint-ing the vector and scalar arguments (or inttoptring the; // extraction result) in order to produce a vector operation that can; // be handled by the logic below.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp:61,log,logic,61,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp,2,['log'],['logic']
Testability,// Adds a log entry to end of the queue.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h:10,log,log,10,interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h,2,['log'],['log']
Testability,// Advance the offset pointer enough bytes to align to 32-byte records for; // basic mode logs.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/XRay/Trace.cpp:90,log,logs,90,interpreter/llvm-project/llvm/lib/XRay/Trace.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/XRay/Trace.cpp,1,['log'],['logs']
Testability,// Advanced Logic Corp. TinyJ embedded processor family,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/ELF.h:12,Log,Logic,12,interpreter/llvm-project/llvm/include/llvm/BinaryFormat/ELF.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/ELF.h,1,['Log'],['Logic']
Testability,"// After a redirection from stdout into stderr then undirecting stdout, the; // console will loose line-buffering. To get arround this we test if stdout; // is a tty during construction, and if so mark the case when stdout has; // returned from a redirection into stderr, then handle it ~RedirectOutput.; // We need two bits for 3 possible states.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/MetaProcessor/MetaProcessor.cpp:138,test,test,138,interpreter/cling/lib/MetaProcessor/MetaProcessor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/MetaProcessor/MetaProcessor.cpp,1,['test'],['test']
Testability,"// After running the loop pass, the parent loop might change and we need to; // notify the updater, otherwise U.ParentL might gets outdated and triggers; // assertion failures in addSiblingLoops and addChildLoops.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopPassManager.cpp:157,assert,assertion,157,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopPassManager.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopPassManager.cpp,2,['assert'],['assertion']
Testability,"// After the CGSCCPass is done, when assertions are enabled, use; // RefreshCallGraph to verify that the callgraph was correctly updated.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/CallGraphSCCPass.cpp:37,assert,assertions,37,interpreter/llvm-project/llvm/lib/Analysis/CallGraphSCCPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/CallGraphSCCPass.cpp,1,['assert'],['assertions']
Testability,"// After the assert above we can be sure that both operands are of the same; // valid type and use the same symbol/index/address, thus displacement shift; // calculation is rather simple.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86OptimizeLEAs.cpp:13,assert,assert,13,interpreter/llvm-project/llvm/lib/Target/X86/X86OptimizeLEAs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86OptimizeLEAs.cpp,1,['assert'],['assert']
Testability,// Again there is no symbol in the nlist symbol table for this so; // we set Sym effectivly to null and the rest of code in here must; // test for it and not do things like Sym.getFlags() for it.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-nm/llvm-nm.cpp:138,test,test,138,interpreter/llvm-project/llvm/tools/llvm-nm/llvm-nm.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-nm/llvm-nm.cpp,1,['test'],['test']
Testability,// Align DataSize to stub alignment if we have any stubs (PaddingSize will; // have been increased above to account for this).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyld.cpp:21,stub,stub,21,interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyld.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyld.cpp,2,['stub'],"['stub', 'stubs']"
Testability,// Alignment will be stored as a base-2 log of the alignment.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:40,log,log,40,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,1,['log'],['log']
Testability,"// AlignmentsTy::ABIAlign and AlignmentsTy::PrefAlign were once stored as; // uint16_t, it is unclear if there are requirements for alignment to be less; // than 2^16 other than storage. In the meantime we leave the restriction as; // an assert. See D67400 for context.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/DataLayout.cpp:238,assert,assert,238,interpreter/llvm-project/llvm/lib/IR/DataLayout.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/DataLayout.cpp,1,['assert'],['assert']
Testability,"// All KMASK RegClasses hold the same k registers, can be tested against; // anyone.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp:58,test,tested,58,interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp,1,['test'],['tested']
Testability,"// All analysis runs within a process will log to the same directory.; // Share a counter so they don't all overwrite each other's 0.html.; // (Don't share a logger, it's not threadsafe).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/DataflowAnalysisContext.cpp:43,log,log,43,interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/DataflowAnalysisContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/DataflowAnalysisContext.cpp,2,['log'],"['log', 'logger']"
Testability,"// All callbacks, weak references, and assertingVHs should be dropped by now.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Value.cpp:39,assert,assertingVHs,39,interpreter/llvm-project/llvm/lib/IR/Value.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Value.cpp,1,['assert'],['assertingVHs']
Testability,"// All conversions involving fixed point types should be handled by the; // EmitFixedPoint family functions. This is done to prevent bloating up this; // function more, and although fixed point numbers are represented by; // integers, we do not want to follow any logic that assumes they should be; // treated as integers.; // TODO(leonardchan): When necessary, add another if statement checking for; // conversions to fixed point types from other types.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:264,log,logic,264,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,1,['log'],['logic']
Testability,"// All logical elements added to the children, are sorted by any of the; // following criterias: offset, name, line number, kind.; // Do not add the line records to the children, as they represent the; // logical view for the text section and any sorting will not preserve; // the original sequence.; // Indicate that this tree branch has lines.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Core/LVScope.cpp:7,log,logical,7,interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Core/LVScope.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Core/LVScope.cpp,2,['log'],['logical']
Testability,"// All of the prolog/epilog functionality, including saving and restoring; // callee-saved registers is handled in emitPrologue. This is to have the; // logic for shrink-wrapping in one place.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonFrameLowering.h:153,log,logic,153,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonFrameLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonFrameLowering.h,1,['log'],['logic']
Testability,// Alloc type should be updated as we add in the MIBs. We should assert; // afterwards that it is not still None.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/MemProfContextDisambiguation.cpp:65,assert,assert,65,interpreter/llvm-project/llvm/lib/Transforms/IPO/MemProfContextDisambiguation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/MemProfContextDisambiguation.cpp,1,['assert'],['assert']
Testability,"// Allocate a slab of memory upfront, if required. This is used if; // we want to test small code models.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp:82,test,test,82,interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp,1,['test'],['test']
Testability,// Allocate memory for stubs and pointers in one call.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h:23,stub,stubs,23,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h,1,['stub'],['stubs']
Testability,"// AllocationSize is used only in asserts, prevent an ""unused private field""; // warning:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldImpl.h:34,assert,asserts,34,interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldImpl.h,1,['assert'],['asserts']
Testability,// Allow -fno-objc-arr to trump -fobjc-arr/-fobjc-arc.; // NOTE: This logic is duplicated in ToolChains.cpp.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:70,log,logic,70,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,1,['log'],['logic']
Testability,"// Allow 4, 8, and (for Linux core dumps) 0.; // TODO: Disallow 1 after all tests are fixed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELF.h:76,test,tests,76,interpreter/llvm-project/llvm/include/llvm/Object/ELF.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELF.h,1,['test'],['tests']
Testability,// Allow debug logging in this inline function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/CGSCCPassManager.h:15,log,logging,15,interpreter/llvm-project/llvm/include/llvm/Analysis/CGSCCPassManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/CGSCCPassManager.h,1,['log'],['logging']
Testability,// Allow forcing all i64 operations with equivalent SIMD instructions to use; // them. For stress-testing the transformation function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AdvSIMDScalarPass.cpp:98,test,testing,98,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AdvSIMDScalarPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AdvSIMDScalarPass.cpp,1,['test'],['testing']
Testability,// Allows for testing of the irsymtab writer and upgrade mechanism. This; // environment variable should not be set by users.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/IRSymtab.cpp:14,test,testing,14,interpreter/llvm-project/llvm/lib/Object/IRSymtab.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/IRSymtab.cpp,1,['test'],['testing']
Testability,"// Already have an entry with this inode, return it.; // FIXME: This hack ensures that `getDir()` will use the path that was; // used to lookup this file, even if we found a file by different path; // first. This is required in order to find a module's structure when its; // headers/module map are mapped in the VFS.; //; // See above for how this will eventually be removed. `IsVFSMapped`; // *cannot* be narrowed to `ExposesExternalVFSPath` as crash reproducers; // also depend on this logic and they have `use-external-paths: false`.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp:489,log,logic,489,interpreter/llvm-project/clang/lib/Basic/FileManager.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp,1,['log'],['logic']
Testability,"// Also generate the declaration attribute merging logic if the current; // attribute is one that can be inheritted on a declaration. It is assumed; // this code will be executed in the context of a function with parameters:; // Sema &S, Decl *D, Attr *A and that returns a bool (false on diagnostic,; // true on success).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp:51,log,logic,51,interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp,1,['log'],['logic']
Testability,"// Also test that HypoTestResults are coming back correctly",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/testHypoTestInvResult.cxx:8,test,test,8,roofit/roostats/test/testHypoTestInvResult.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/testHypoTestInvResult.cxx,1,['test'],['test']
Testability,"// Also, recognize the pattern generated by an FCMP_UNE. We can emit; // two branches instead of an explicit OR instruction with a; // separate test.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/M68kISelLowering.cpp:144,test,test,144,interpreter/llvm-project/llvm/lib/Target/M68k/M68kISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/M68kISelLowering.cpp,1,['test'],['test']
Testability,"// Although MachO 32-bit targets do not explicitly have a GOTPCREL relocation; // as 64-bit do, we replace the GOT equivalent by accessing the final symbol; // through a non_lazy_ptr stub instead. One advantage is that it allows the; // computation of deltas to final external symbols. Example:; //; // _extgotequiv:; // .long _extfoo; //; // _delta:; // .long _extgotequiv-_delta; //; // is transformed to:; //; // _delta:; // .long L_extfoo$non_lazy_ptr-(_delta+0); //; // .section __IMPORT,__pointers,non_lazy_symbol_pointers; // L_extfoo$non_lazy_ptr:; // .indirect_symbol _extfoo; // .long 0; //; // The indirect symbol table (and sections of non_lazy_symbol_pointers type); // may point to both local (same translation unit) and global (other; // translation units) symbols. Example:; //; // .section __DATA,__pointers,non_lazy_symbol_pointers; // L1:; // .indirect_symbol _myGlobal; // .long 0; // L2:; // .indirect_symbol _myLocal; // .long _myLocal; //; // If the symbol is local, instead of the symbol's index, the assembler; // places the constant INDIRECT_SYMBOL_LOCAL into the indirect symbol table.; // Then the linker will notice the constant in the table and will look at the; // content of the symbol.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TargetLoweringObjectFileImpl.cpp:183,stub,stub,183,interpreter/llvm-project/llvm/lib/CodeGen/TargetLoweringObjectFileImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TargetLoweringObjectFileImpl.cpp,1,['stub'],['stub']
Testability,"// Although a conservatively allocatable node can be allocated to a register,; // spilling it may provide a lower cost solution. Assert here that spilling; // is done by choice, not because there were no register available.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/ReductionRules.h:129,Assert,Assert,129,interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/ReductionRules.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/ReductionRules.h,1,['Assert'],['Assert']
Testability,"// Although the select has the same condition as PBI, the original branch; // weights for PBI do not apply to the new select because the select's; // 'logical' edges are incoming edges of the phi that is eliminated, not; // the outgoing edges of PBI.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp:151,log,logical,151,interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp,1,['log'],['logical']
Testability,"// Although we asserted, be extra safe for release build.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ARCMigrate/TransformActions.cpp:15,assert,asserted,15,interpreter/llvm-project/clang/lib/ARCMigrate/TransformActions.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ARCMigrate/TransformActions.cpp,1,['assert'],['asserted']
Testability,// Always conservatively report any backpressure events if the dispatch logic; // was stalled due to unavailable scheduler resources.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/ExecuteStage.cpp:72,log,logic,72,interpreter/llvm-project/llvm/lib/MCA/Stages/ExecuteStage.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/ExecuteStage.cpp,1,['log'],['logic']
Testability,"// Always keep a floating-point constant second, since comparisons with; // zero can use LOAD TEST and comparisons with other constants make a; // natural memory operand.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp:94,TEST,TEST,94,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,1,['TEST'],['TEST']
Testability,"// Always perform integer promotion before checking type equality.; // Otherwise, e.g. (bool) a + (bool) b could trigger a backend assertion",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h:131,assert,assertion,131,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h,1,['assert'],['assertion']
Testability,// Always split vXi64 logical shifts where we're extracting the upper 32-bits; // as this is very likely to fold into a shuffle/truncation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:22,log,logical,22,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['log'],['logical']
Testability,// Always test the initial module.; // Unwrap and print directly to avoid filtering problems in general routines.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp:10,test,test,10,interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp,1,['test'],['test']
Testability,"// An LE has been generated, but it's not the terminator - that is an; // unconditional branch. However, the logic has now been reversed with the; // CBN?Z being the conditional branch and the LE being the unconditional; // branch. So this means we can remove the redundant unconditional branch; // at the end of the block.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMConstantIslandPass.cpp:109,log,logic,109,interpreter/llvm-project/llvm/lib/Target/ARM/ARMConstantIslandPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMConstantIslandPass.cpp,1,['log'],['logic']
Testability,// An MCStreamer that reads a BenchmarkCode definition from a file.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetFile.cpp:30,Benchmark,BenchmarkCode,30,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetFile.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetFile.cpp,1,['Benchmark'],['BenchmarkCode']
Testability,"// An MSVC bug prevents the above from working, (last tested at CL version; // 19.28). ""Class5"" in TrailingObjectsTest.cpp tests the problematic case.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h:54,test,tested,54,interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h,2,['test'],"['tested', 'tests']"
Testability,// An additional counter is added around logical operators.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:41,log,logical,41,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,1,['log'],['logical']
Testability,"// An assert will add a lock to the lockset, but will not generate; // a warning if it is already there, and will not generate a warning; // if it is not removed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp:6,assert,assert,6,interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp,1,['assert'],['assert']
Testability,"// An easy first check is to see if point z is inside the triangle; // (if it's in the triangle it's also in the circle); // point z cannot be inside the triangle if it's further from (xx,yy); // than the furthest pointing making up the triangle - test this",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphDelaunay.cxx:248,test,test,248,hist/hist/src/TGraphDelaunay.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphDelaunay.cxx,1,['test'],['test']
Testability,"// An example of what is generated for the following code:; //; // #pragma omp simd collapse(2) ordered(2); // for (i = 0; i < NI; ++i); // for (k = 0; k < NK; ++k); // for (j = J0; j < NJ; j+=2) {; // <loop body>; // }; //; // We generate the code below.; // Note: the loop body may be outlined in CodeGen.; // Note: some counters may be C++ classes, operator- is used to find number of; // iterations and operator+= to calculate counter value.; // Note: decltype(NumIterations) must be integer type (in 'omp for', only i32; // or i64 is currently supported).; //; // #define NumIterations (NI * ((NJ - J0 - 1 + 2) / 2)); // for (int[32|64]_t IV = 0; IV < NumIterations; ++IV ) {; // .local.i = IV / ((NJ - J0 - 1 + 2) / 2);; // .local.j = J0 + (IV % ((NJ - J0 - 1 + 2) / 2)) * 2;; // // similar updates for vars in clauses (e.g. 'linear'); // <loop body (using local i and j)>; // }; // i = NI; // assign final values of counters; // j = NJ;; //; // Last iteration number is (I1 * I2 * ... In) - 1, where I1, I2 ... In are; // the iteration counts of the collapsed for loops.; // Precondition tests if there is at least one iteration (all conditions are; // true).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:1095,test,tests,1095,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['test'],['tests']
Testability,// An incomplete TypeString stub is placed in the cache for this RecordType; // so that recursive calls to this RecordType will use it whilst building a; // complete TypeString for this RecordType.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp:28,stub,stub,28,interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp,1,['stub'],['stub']
Testability,"// An initial vector size of 256 appears to work well in practice.; // Small/medium functions with vector content tend not to incur a; // reallocation at this size. Three of the vector tests in; // projects/test-suite reallocate, which seems like a reasonable rate.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCVSXSwapRemoval.cpp:185,test,tests,185,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCVSXSwapRemoval.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCVSXSwapRemoval.cpp,2,['test'],"['test-suite', 'tests']"
Testability,"// An integer type that asserts when:; // - constructed from a value that doesn't fit into intmax_t,; // - casted to a type that cannot hold the current value,; // - its internal representation overflows.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Sequence.h:24,assert,asserts,24,interpreter/llvm-project/llvm/include/llvm/ADT/Sequence.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Sequence.h,1,['assert'],['asserts']
Testability,"// An invalid DeclContext is one for which a dyn_cast() from a DeclContext; // pointer to a Decl pointer would fail an assertion or otherwise fall prey; // to undefined behavior as a result of an invalid associated DeclKind.; // Such invalidity is not supposed to happen of course, but, when it does,; // the information provided below is intended to provide some hints about; // what might have gone awry.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTDumper.cpp:119,assert,assertion,119,interpreter/llvm-project/clang/lib/AST/ASTDumper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTDumper.cpp,1,['assert'],['assertion']
Testability,"// An opaque configuration, that can be used to separate several benchmarks of; // the same instruction under different configurations.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkResult.h:65,benchmark,benchmarks,65,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkResult.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkResult.h,1,['benchmark'],['benchmarks']
Testability,"// An option for specifying an executable that will be called with the IR; // everytime it changes in the opt pipeline. It will also be called on; // the initial IR as it enters the pipeline. The executable will be passed; // the name of a temporary file containing the IR and the PassID. This may; // be used, for example, to call llc on the IR and run a test to determine; // which pass makes a change that changes the functioning of the IR.; // The usual modifier options work as expected.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp:356,test,test,356,interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp,1,['test'],['test']
Testability,// An unsigned 12-bit constant (for logic instructions).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/LoongArch.cpp:36,log,logic,36,interpreter/llvm-project/clang/lib/Basic/Targets/LoongArch.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/LoongArch.cpp,1,['log'],['logic']
Testability,"// An unsimplified select condition can match both LogicalAnd and LogicalOr; // (select true, true, false). Since below we assume that LogicalAnd implies; // InnerSel match the FVal and vice versa for LogicalOr, we can't match the; // alternative pattern here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp:51,Log,LogicalAnd,51,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp,4,['Log'],"['LogicalAnd', 'LogicalOr']"
Testability,"// An unterminated open brace is undefined. We treat the rest of the string; // as a literal replacement, but we assert to indicate that this is; // undefined and that we consider it an error.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FormatVariadic.cpp:113,assert,assert,113,interpreter/llvm-project/llvm/lib/Support/FormatVariadic.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FormatVariadic.cpp,1,['assert'],['assert']
Testability,// Analyses past this point are naive and don't expect an assertion.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:58,assert,assertion,58,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,1,['assert'],['assertion']
Testability,// And the other icmp needs to be decomposable into a bit test.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp:58,test,test,58,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,1,['test'],['test']
Testability,"// And/or are potentially poison-safe logical patterns like:; // select x, y, false; // select x, true, y",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:38,log,logical,38,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,1,['log'],['logical']
Testability,"// Anderson-Darling A^2 Test Statistic",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GoFTest.cxx:24,Test,Test,24,math/mathcore/src/GoFTest.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GoFTest.cxx,1,['Test'],['Test']
Testability,"// Anonymous like login with automatic passwd generation ...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx:18,log,login,18,net/auth/src/TAuthenticate.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx,1,['log'],['login']
Testability,"// Anonymous like login with user chosen passwd ...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx:18,log,login,18,net/auth/src/TAuthenticate.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx,1,['log'],['login']
Testability,// Any logical shift that exceeds scalar size will produce zero.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp:7,log,logical,7,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,1,['log'],['logical']
Testability,// Any non-call uses of the result of llvm.type.checked.load will; // prevent us from optimizing away the llvm.type.test.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ModuleSummaryAnalysis.cpp:116,test,test,116,interpreter/llvm-project/llvm/lib/Analysis/ModuleSummaryAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ModuleSummaryAnalysis.cpp,1,['test'],['test']
Testability,"// Append messages to active logging unit",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TApplicationRemote.cxx:29,log,logging,29,net/net/src/TApplicationRemote.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TApplicationRemote.cxx,3,['log'],['logging']
Testability,// Apply DeMorgan's Law for 'nand' / 'nor' logic with an inverted operand.; // We must eliminate the and/or (one-use) for these transforms to not increase; // the instruction count.; //; // ~(~X & Y) --> (X | ~Y); // ~(Y & ~X) --> (X | ~Y); //; // Note: The logical matches do not check for the commuted patterns because; // those are handled via SimplifySelectsFeedingBinaryOp().,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp:43,log,logic,43,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,2,['log'],"['logic', 'logical']"
Testability,// ArgTDecl won't be NULL because we asserted that this isn't a; // dependent context very early in the call chain.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/QualTypeNames.cpp:37,assert,asserted,37,interpreter/llvm-project/clang/lib/AST/QualTypeNames.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/QualTypeNames.cpp,1,['assert'],['asserted']
Testability,// Arithmetic and logic.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64MacroFusion.cpp:18,log,logic,18,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64MacroFusion.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64MacroFusion.cpp,1,['log'],['logic']
Testability,"// As an example, almost all the tripcount expressions (produced by the; // vectoriser) look like this:; //; // TC = ((-4 + (4 * ((3 + %N) /u 4))<nuw> - start) /u 4); //; // and ""ElementCount + (VW-1) / VW"":; //; // Ceil = ((3 + %N) /u 4); //; // Check for equality of TC and Ceil by calculating SCEV expression; // TC - Ceil and test it for zero.; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/MVETailPredication.cpp:330,test,test,330,interpreter/llvm-project/llvm/lib/Target/ARM/MVETailPredication.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/MVETailPredication.cpp,1,['test'],['test']
Testability,"// As an expensive check, test whether there are any duplicate substitution; // sources in the collection.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:26,test,test,26,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,1,['test'],['test']
Testability,// As an extra penalty for the validity test we require more cases.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp:40,test,test,40,interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp,1,['test'],['test']
Testability,"// As of Python 3.12, we can't use the PyMethod_GET_FUNCTION and; // PyMethod_GET_SELF macros anymore, as the contain asserts that check if the; // Python type is actually PyMethod_Type. If the Python type is; // CustomInstanceMethod_Type, we need our own macros. Technically they do they; // same, because the actual C++ type of the PyObject is PyMethodObject anyway.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx:118,assert,asserts,118,bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx,1,['assert'],['asserts']
Testability,"// As the DwarfContext object is valid only during the scopes creation,; // we need to create our own Target information, to be used during the; // logical view printing, in the case of instructions being requested.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVELFReader.cpp:148,log,logical,148,interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVELFReader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVELFReader.cpp,1,['log'],['logical']
Testability,"// As the command line options did not specify a request to print; // logical symbols (--print=symbols or --print=all or --print=elements),; // skip its creation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVELFReader.cpp:70,log,logical,70,interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVELFReader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVELFReader.cpp,1,['log'],['logical']
Testability,"// As the logical view is modeled on DWARF, for each dimension we have to; // create a DW_TAG_subrange_type, with dimension size.; // The subrange type can be: unsigned __int32 or unsigned __int64.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.cpp:10,log,logical,10,interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.cpp,1,['log'],['logical']
Testability,"// As with the one-use checks below, this is not strictly necessary, but we; // are being cautious to avoid potential perf regressions on targets that; // do not actually have a funnel/rotate instruction (where the funnel shift; // would be expanded back into math/shift/logic ops).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/AggressiveInstCombine/AggressiveInstCombine.cpp:271,log,logic,271,interpreter/llvm-project/llvm/lib/Transforms/AggressiveInstCombine/AggressiveInstCombine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/AggressiveInstCombine/AggressiveInstCombine.cpp,1,['log'],['logic']
Testability,// Assert as we enumerate users that 'UselessPad' doesn't have any unwind; // information that we'd be contradicting by making a map entry for it; // (which is something that getUnwindDestTokenHelper must have proved for; // us to get here). Just assert on is direct users here; the checks in; // this downward walk at its descendants will verify that they don't have; // any unwind edges that exit 'UselessPad' either (i.e. they either have no; // unwind edges or unwind to a sibling).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/InlineFunction.cpp:3,Assert,Assert,3,interpreter/llvm-project/llvm/lib/Transforms/Utils/InlineFunction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/InlineFunction.cpp,2,"['Assert', 'assert']","['Assert', 'assert']"
Testability,// Assert every BB has a valid counter.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/PGOInstrumentation.cpp:3,Assert,Assert,3,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/PGOInstrumentation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/PGOInstrumentation.cpp,1,['Assert'],['Assert']
Testability,// Assert if a new and unknown SCEVCastEXpr type is encountered.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp:3,Assert,Assert,3,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,1,['Assert'],['Assert']
Testability,// Assert if the register is defined in two or more unrelated defs.; // This could happen if there are two or more def operands defining it.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RDFGraph.cpp:3,Assert,Assert,3,interpreter/llvm-project/llvm/lib/CodeGen/RDFGraph.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RDFGraph.cpp,1,['Assert'],['Assert']
Testability,// Assert that all registers have been stackified at this point.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyExplicitLocals.cpp:3,Assert,Assert,3,interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyExplicitLocals.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyExplicitLocals.cpp,1,['Assert'],['Assert']
Testability,// Assert that all the CHR regions of the scope have a biased branch or select.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/ControlHeightReduction.cpp:3,Assert,Assert,3,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/ControlHeightReduction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/ControlHeightReduction.cpp,1,['Assert'],['Assert']
Testability,// Assert that all the condition values of the biased branches and selects have; // been hoisted to the pre-entry block or outside of the scope.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/ControlHeightReduction.cpp:3,Assert,Assert,3,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/ControlHeightReduction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/ControlHeightReduction.cpp,1,['Assert'],['Assert']
Testability,// Assert that all the non-padding elements have a corresponding element; // in the unpadded type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CGFunctionInfo.h:3,Assert,Assert,3,interpreter/llvm-project/clang/include/clang/CodeGen/CGFunctionInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CGFunctionInfo.h,1,['Assert'],['Assert']
Testability,// Assert that all the types match.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:3,Assert,Assert,3,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['Assert'],['Assert']
Testability,"// Assert that bitwidth of lhs and rhs are the same.; // This can happen if two different address spaces are used,; // and the bitwidths of the address spaces are different.; // See LIT case clang/test/Analysis/cstring-checker-addressspace.c; // FIXME: See comment above in the function assertEqualBitWidths",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/SimpleSValBuilder.cpp:3,Assert,Assert,3,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/SimpleSValBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/SimpleSValBuilder.cpp,3,"['Assert', 'assert', 'test']","['Assert', 'assertEqualBitWidths', 'test']"
Testability,// Assert that cloned instruction does not use any instructions from; // this chain other than LastClonedValue,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp:3,Assert,Assert,3,interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp,1,['Assert'],['Assert']
Testability,// Assert that the \c ContentCache objects will always be 8-byte aligned so; // that we can pack 3 bits of integer into pointers to such objects.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:3,Assert,Assert,3,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,1,['Assert'],['Assert']
Testability,"// Assert that the \c FileInfo objects are no bigger than \c ExpansionInfo; // objects. This controls the size of \c SLocEntry, of which we have one for; // each macro expansion. The number of (unloaded) macro expansions can be; // very large. Any other fields needed in FileInfo should go in ContentCache.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:3,Assert,Assert,3,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,1,['Assert'],['Assert']
Testability,"// Assert that the alloca that Declare uses is now linked to a dbg.assign; // describing the same variable (i.e. check that this dbg.declare has; // been replaced by a dbg.assign). Use DebugVariableAggregate to Discard; // the fragment part because trackAssignments may alter the; // fragment. e.g. if the alloca is smaller than the variable, then; // trackAssignments will create an alloca-sized fragment for the; // dbg.assign.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/DebugInfo.cpp:3,Assert,Assert,3,interpreter/llvm-project/llvm/lib/IR/DebugInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/DebugInfo.cpp,1,['Assert'],['Assert']
Testability,"// Assert that the arguments we computed match up. The IR verifier; // will catch this, but this is a common enough source of problems; // during IRGen changes that it's way better for debugging to catch; // it ourselves here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:3,Assert,Assert,3,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,1,['Assert'],['Assert']
Testability,// Assert that the cloned instruction does not use the RootOfChain; // or the AlternateLiveBase.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp:3,Assert,Assert,3,interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp,1,['Assert'],['Assert']
Testability,"// Assert that the converted value fits in the original type. If it doesn't; // (eg: because the value being converted is too big), then the result of the; // original operation was undefined anyway, so the assert is still correct.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp:3,Assert,Assert,3,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp,2,"['Assert', 'assert']","['Assert', 'assert']"
Testability,"// Assert that the converted value fits in the original type. If it doesn't; // (eg: because the value being converted is too big), then the result of the; // original operation was undefined anyway, so the assert is still correct.; //; // NOTE: fp-to-uint to fp-to-sint promotion guarantees zero extend. For example:; // before legalization: fp-to-uint16, 65534. -> 0xfffe; // after legalization: fp-to-sint32, 65534. -> 0x0000fffe",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:3,Assert,Assert,3,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,2,"['Assert', 'assert']","['Assert', 'assert']"
Testability,// Assert that the following invariants hold:; // 1. All active variables are unassigned.; // 2. All active variables form watched literals.; // 3. Unassigned variables that form watched literals are active.; // FIXME: Consider replacing these with test cases that fail if the any; // of the invariants is broken. That might not be easy due to the; // transformations performed by `buildCNF`.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp:3,Assert,Assert,3,interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp,2,"['Assert', 'test']","['Assert', 'test']"
Testability,// Assert that the layout is what we expect. It's easy to grow this object.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h:3,Assert,Assert,3,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,1,['Assert'],['Assert']
Testability,// Assert that the linux ABI is enabled for the current compilation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelLowering.cpp:3,Assert,Assert,3,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelLowering.cpp,1,['Assert'],['Assert']
Testability,// Assert that the opcode table is sorted. Use a static local constructor to; // ensure that the check only happens once on first run.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmWriterEmitter.cpp:3,Assert,Assert,3,interpreter/llvm-project/llvm/utils/TableGen/AsmWriterEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmWriterEmitter.cpp,1,['Assert'],['Assert']
Testability,// Assert that the rest of our infrastructure is setup properly.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/SARIFDiagnosticPrinter.cpp:3,Assert,Assert,3,interpreter/llvm-project/clang/lib/Frontend/SARIFDiagnosticPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/SARIFDiagnosticPrinter.cpp,2,['Assert'],['Assert']
Testability,// Assert that the top of stack contains the right FP register.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FloatingPoint.cpp:3,Assert,Assert,3,interpreter/llvm-project/llvm/lib/Target/X86/X86FloatingPoint.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FloatingPoint.cpp,1,['Assert'],['Assert']
Testability,// Assert that there aren't extra elements in the unpadded type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CGFunctionInfo.h:3,Assert,Assert,3,interpreter/llvm-project/clang/include/clang/CodeGen/CGFunctionInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CGFunctionInfo.h,1,['Assert'],['Assert']
Testability,// Assert that this symbol exists and has not reached the ready state; // already.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/Core.cpp:3,Assert,Assert,3,interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/Core.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/Core.cpp,1,['Assert'],['Assert']
Testability,// Assert that we have something to do.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp:3,Assert,Assert,3,interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp,1,['Assert'],['Assert']
Testability,"// Assert the files, if needed",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Assert,Assert,3,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,6,['Assert'],['Assert']
Testability,// Assert the invariant that the watched literal is always the first one; // in the clause.; // FIXME: Consider replacing this with a test case that fails if the; // invariant is broken by `updateWatchedLiterals`. That might not be easy; // due to the transformations performed by `buildCNF`.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp:3,Assert,Assert,3,interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp,2,"['Assert', 'test']","['Assert', 'test']"
Testability,"// Assert the path, if required",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:3,Assert,Assert,3,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,1,['Assert'],['Assert']
Testability,// Assert the values for the fractional and integral bits for each fixed point; // type follow the restrictions given in clause 6.2.6.3 of N1169.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h:3,Assert,Assert,3,interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,1,['Assert'],['Assert']
Testability,"// AssertZext demands all of the high bits, plus any of the low bits; // demanded by its users.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:3,Assert,AssertZext,3,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,1,['Assert'],['AssertZext']
Testability,// Asserting and Weak handles do not follow RAUW implicitly.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Value.cpp:3,Assert,Asserting,3,interpreter/llvm-project/llvm/lib/IR/Value.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Value.cpp,1,['Assert'],['Asserting']
Testability,"// Assertion ensures we don't use the same SourceMBB for the; // sources, because we cannot have different registers with; // identical predecessors, but we can have the same register for; // multiple predecessors.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUMachineCFGStructurizer.cpp:3,Assert,Assertion,3,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUMachineCFGStructurizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUMachineCFGStructurizer.cpp,1,['Assert'],['Assertion']
Testability,// Assertions to ensure this #if stays in sync with SmallVectorSizeType.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SmallVector.cpp:3,Assert,Assertions,3,interpreter/llvm-project/llvm/lib/Support/SmallVector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SmallVector.cpp,1,['Assert'],['Assertions']
Testability,"// Asserts about the size of the complex",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/inc/root_std_complex.h:3,Assert,Asserts,3,core/clingutils/inc/root_std_complex.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/inc/root_std_complex.h,1,['Assert'],['Asserts']
Testability,"// Asserts for parameters of type `VFParamKind::GlobalPredicate`, as; // prescribed by the Vector Function ABI specifications supported by; // this parser:; // 1. Uniqueness.; // 2. Must be the last in the parameter list.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/VFABIDemangler.cpp:3,Assert,Asserts,3,interpreter/llvm-project/llvm/lib/IR/VFABIDemangler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/VFABIDemangler.cpp,1,['Assert'],['Asserts']
Testability,// Asserts that LTO link has whole program visibility,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/gold/gold-plugin.cpp:3,Assert,Asserts,3,interpreter/llvm-project/llvm/tools/gold/gold-plugin.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/gold/gold-plugin.cpp,1,['Assert'],['Asserts']
Testability,// Asserts that a function argument (i32) is zero-extended to i8 by; // the caller,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.h:3,Assert,Asserts,3,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.h,1,['Assert'],['Asserts']
Testability,// Asserts that allow us to let the compiler implement the destructor and; // copy/move constructors,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerIntPair.h:3,Assert,Asserts,3,interpreter/llvm-project/llvm/include/llvm/ADT/PointerIntPair.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerIntPair.h,1,['Assert'],['Asserts']
Testability,"// Assume the most general case where the switch is lowered into; // either a jump table, bit test, or a balanced binary tree consisting of; // case clusters without merging adjacent clusters with the same; // destination. We do not consider the switches that are lowered with a mix; // of jump table/bit test/binary search tree. The cost of the switch is; // proportional to the size of the tree or the size of jump table range.; //; // NB: We convert large switches which are just used to initialize large phi; // nodes to lookup tables instead in simplifycfg, so this shouldn't prevent; // inlining those. It will prevent inlining in cases where the optimization; // does not (yet) fire.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InlineCost.cpp:94,test,test,94,interpreter/llvm-project/llvm/lib/Analysis/InlineCost.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InlineCost.cpp,2,['test'],['test']
Testability,"// Assumptions made by this algorithm:; // 1. The number of explicit and implicit register definitions in a MCInst; // matches the number of explicit and implicit definitions according to; // the opcode descriptor (MCInstrDesc).; // 2. Uses start at index #(MCDesc.getNumDefs()).; // 3. There can only be a single optional register definition, an it is; // either the last operand of the sequence (excluding extra operands; // contributed by variadic opcodes) or one of the explicit register; // definitions. The latter occurs for some Thumb1 instructions.; //; // These assumptions work quite well for most out-of-order in-tree targets; // like x86. This is mainly because the vast majority of instructions is; // expanded to MCInst using a straightforward lowering logic that preserves; // the ordering of the operands.; //; // About assumption 1.; // The algorithm allows non-register operands between register operand; // definitions. This helps to handle some special ARM instructions with; // implicit operand increment (-mtriple=armv7):; //; // vld1.32 {d18, d19}, [r1]! @ <MCInst #1463 VLD1q32wb_fixed; // @ <MCOperand Reg:59>; // @ <MCOperand Imm:0> (!!); // @ <MCOperand Reg:67>; // @ <MCOperand Imm:0>; // @ <MCOperand Imm:14>; // @ <MCOperand Reg:0>>; //; // MCDesc reports:; // 6 explicit operands.; // 1 optional definition; // 2 explicit definitions (!!); //; // The presence of an 'Imm' operand between the two register definitions; // breaks the assumption that ""register definitions are always at the; // beginning of the operand sequence"".; //; // To workaround this issue, this algorithm ignores (i.e. skips) any; // non-register operands between register definitions. The optional; // definition is still at index #(NumOperands-1).; //; // According to assumption 2. register reads start at #(NumExplicitDefs-1).; // That means, register R1 from the example is both read and written.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp:767,log,logic,767,interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp,1,['log'],['logic']
Testability,"// Assumptions: ndim >= 1. The macro tests for a corner case that should; // perhaps be explicitly forbidden in the PEP.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/LowLevelViews.cxx:37,test,tests,37,bindings/pyroot/cppyy/CPyCppyy/src/LowLevelViews.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/LowLevelViews.cxx,1,['test'],['tests']
Testability,"// Async Logger",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServ.cxx:9,Log,Logger,9,proof/proof/src/TProofServ.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServ.cxx,1,['Log'],['Logger']
Testability,"// At any time during the analysis, we're computing the state for some target; // program point.; /// Called when we start (re-)processing a block in the CFG.; /// The target program point is the entry to the specified block.; /// Calls to log() describe transferBranch(), join() etc.; /// `PostVisit` specifies whether we're processing the block for the; /// post-visit callback.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/Logger.h:240,log,log,240,interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/Logger.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/Logger.h,1,['log'],['log']
Testability,"// At most one of the register is a sub register, make it Src to avoid; // duplicating the test.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TargetRegisterInfo.cpp:91,test,test,91,interpreter/llvm-project/llvm/lib/CodeGen/TargetRegisterInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TargetRegisterInfo.cpp,1,['test'],['test']
Testability,"// At some point, RFieldBase::OnClusterCommit() may allow for a user-defined callback to change the; // column representation. For now, we inject this for testing and internal use only.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RFieldBase.hxx:155,test,testing,155,tree/ntuple/v7/inc/ROOT/RFieldBase.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RFieldBase.hxx,1,['test'],['testing']
Testability,"// At the moment, our matching logic for wideable conditions implicitly; // assumes we preserve the form: (br (and Cond, WC())). FIXME",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopPredication.cpp:31,log,logic,31,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopPredication.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopPredication.cpp,1,['log'],['logic']
Testability,"// At this point we could remove all type test assume sequences, as they; // were originally inserted for WPD. However, we can keep these in the; // code stream for later analysis (e.g. to help drive more efficient ICP; // sequences). They will eventually be removed by a second LowerTypeTests; // invocation that cleans them up. In order to do this correctly, the first; // LowerTypeTests invocation needs to know that they have ""Unknown"" type; // test resolution, so that they aren't treated as Unsat and lowered to; // False, which will break any uses on assumes. Below we remove any type; // test assumes that will not be treated as Unknown by LTT.; // The type test assumes will be treated by LTT as Unsat if the type id is; // not used on a global (in which case it has no entry in the TypeIdMap).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/WholeProgramDevirt.cpp:42,test,test,42,interpreter/llvm-project/llvm/lib/Transforms/IPO/WholeProgramDevirt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/WholeProgramDevirt.cpp,4,['test'],['test']
Testability,"// At this point we have checked for very specific options, to decide if the; // element will be printed. Include the caller's test for element general; // print.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Core/LVScope.cpp:127,test,test,127,interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Core/LVScope.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Core/LVScope.cpp,1,['test'],['test']
Testability,"// At this point, 'Target' can be null, in the case of the target element; // not being seen. But the correct bit is set, to indicate that the target; // is being referenced by (abstract_origin, extension, specification) or; // (import, type).; // We must differentiate between the kind of reference. This is needed to; // complete inlined function instances with dropped abstract references,; // in order to facilitate a logical comparison.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVELFReader.cpp:422,log,logical,422,interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVELFReader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVELFReader.cpp,1,['log'],['logical']
Testability,"// At this point, since we have made changes we have at least removed; // a call instruction. However, in the process we do some incremental; // simplification of the surrounding code. This simplification can; // essentially do all of the same things as a function pass and we can; // re-use the exact same logic for updating the call graph to reflect the; // change.; // Inside the update, we also update the FunctionAnalysisManager in the; // proxy for this particular SCC. We do this as the SCC may have changed and; // as we're going to mutate this particular function we want to make sure; // the proxy is in place to forward any invalidation events.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/Inliner.cpp:307,log,logic,307,interpreter/llvm-project/llvm/lib/Transforms/IPO/Inliner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/Inliner.cpp,1,['log'],['logic']
Testability,"// At this point, we heuristically assume that there are no casts at the; // start of the line. We assume that we have found most cases where there; // are by the logic above, e.g. ""(void)x;"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/TokenAnnotator.cpp:163,log,logic,163,interpreter/llvm-project/clang/lib/Format/TokenAnnotator.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/TokenAnnotator.cpp,1,['log'],['logic']
Testability,"// At this stage, the logical view contains all scopes, symbols and types.; // For PDBs we can use the module id, to access its specific compile unit.; // The line record addresses has been already resolved, so we can apply the; // flow as when processing DWARF.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVCodeViewReader.cpp:22,log,logical,22,interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVCodeViewReader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVCodeViewReader.cpp,1,['log'],['logical']
Testability,"// Attach the return PC to allow the debugger to disambiguate call paths; // from one function to another.; //; // The return PC is only really needed when the call /isn't/ a tail call, but; // GDB expects it in DWARF4 mode, even for tail calls (see the comment above; // the DW_AT_call_pc emission logic for an explanation).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfCompileUnit.cpp:299,log,logic,299,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfCompileUnit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfCompileUnit.cpp,1,['log'],['logic']
Testability,"// Attempt to expand an immediate as the AND of a pair of logical immediates.; // This is done by applying DeMorgan's law, under which logical immediates; // are closed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp:58,log,logical,58,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp,2,['log'],['logical']
Testability,// Attempt to expand an immediate as the ORR of a pair of logical immediates.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp:58,log,logical,58,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp,1,['log'],['logical']
Testability,"// Attempt to extract a i1 element by using MOVMSK to extract the signbits; // and then testing the relevant element.; //; // Note that we only combine extracts on the *same* result number, i.e.; // t0 = merge_values a0, a1, a2, a3; // i1 = extract_vector_elt t0, Constant:i64<2>; // i1 = extract_vector_elt t0, Constant:i64<3>; // but not; // i1 = extract_vector_elt t0:1, Constant:i64<2>; // since the latter would need its own MOVMSK.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:88,test,testing,88,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['test'],['testing']
Testability,// Attempt to find a 'not' op.; // TODO: Should we favor test+set even without the 'not' op?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:57,test,test,57,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['test'],['test']
Testability,// Attempt to optimize the test bit by walking over instructions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp:27,test,test,27,interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp,1,['test'],['test']
Testability,"// Attempt to perform logical operations on the results of comparisons while; // keeping the values in GPRs. Without doing so, these would end up being; // lowered to CR-logical operations which suffer from significant latency and; // low ILP.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp:22,log,logical,22,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,2,['log'],['logical']
Testability,"// Attempt to read the instruction so that we can attempt to decode it. If; // the buffer is not 4 bytes long, let the higher level logic figure out; // what to do with a size of zero and MCDisassembler::Fail.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/Disassembler/MipsDisassembler.cpp:132,log,logic,132,interpreter/llvm-project/llvm/lib/Target/Mips/Disassembler/MipsDisassembler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/Disassembler/MipsDisassembler.cpp,1,['log'],['logic']
Testability,"// Attempt to simplify AVX2 per-element shift intrinsics to a generic IR shift.; // Unlike the generic IR shifts, the intrinsics have defined behaviour for out; // of range shift amounts (logical - set to zero, arithmetic - splat sign bit).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstCombineIntrinsic.cpp:188,log,logical,188,interpreter/llvm-project/llvm/lib/Target/X86/X86InstCombineIntrinsic.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstCombineIntrinsic.cpp,1,['log'],['logical']
Testability,"// Attributes with standard syntax have strict rules for what they; // appertain to and hence should not use the ""distribution"" logic below.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp:128,log,logic,128,interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,1,['log'],['logic']
Testability,"// Author: Anna Kreshuk, March 2007; /////////////////////////////////////////////////////////////////; //; //___A stress test for the TEntryList class and operations with it___; //; // The functions below test different properties of TEntryList; // - Test1() - assembling entry lists for smaller chains from the lists; // for bigger chains and vice versa + using them in TTree::Draw; // - Test2() - adding and subtracting entry lists in different order; // and using "">>+elist"" in TTree::Draw; // - Test3() - transforming TEventList objects into TEntryList objects for a TChain; // - Test4() - same as Test3() but for a TTree; //; // To run in batch mode, do; // stressEntryList; // stressEntryList 1000; // stressEntryList 1000 10; // Here the 1st parameter is the number of entries in each TTree,; // 2nd parameter is the number of created files; // Default values are 10000 10; //; // An example of output when all tests pass:; // **********************************************************************; // ***************Starting TEntryList stress test************************; // **********************************************************************; // **********Generating 10 data files, 2 trees of 10000 in each**********; // **********************************************************************; // Test1: Applying different entry lists to different chains --------- OK; // Test2: Adding and subtracting entry lists-------------------------- OK; // Test3: TEntryList and TEventList for TChain------------------------ OK; // Test4: TEntryList and TEventList for TTree------------------------- OK; // **********************************************************************; // *******************Deleting the data files****************************; // **********************************************************************",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressEntryList.cxx:122,test,test,122,test/stressEntryList.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressEntryList.cxx,4,['test'],"['test', 'tests']"
Testability,"// Author: Christoph Rosemann Dec. 2009; // TMVA unit tests",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:54,test,tests,54,tmva/tmva/test/stressTMVA.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx,6,['test'],['tests']
Testability,"// Author: Christoph Rosemann Jul 2010; // TMVA unit tests; //; // this class acts as interface to create, train and evaluate the method; // specified in the constructor; // as additional argument the limits of the ROC integral can be given; // to determine the performance",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:53,test,tests,53,tmva/tmva/test/stressTMVA.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx,1,['test'],['tests']
Testability,"// Author: Christoph Rosemann Oct 2010; // TMVA unit tests; //; // this class acts as interface to create, train and evaluate the method; // specified in the constructor; // additionally the regression performance is evaluated",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:53,test,tests,53,tmva/tmva/test/stressTMVA.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx,1,['test'],['tests']
Testability,"// Author: D. Piparo, 2015; // TMVA unit tests; //; // this class acts as interface to several reader applications in MT mode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:41,test,tests,41,tmva/tmva/test/stressTMVA.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx,1,['test'],['tests']
Testability,"// Author: E. v. Toerne, Nov 2011, implementing unit tests by C. Rosemann; // TMVA unit tests; //; // this class acts as interface to several factory applications",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:53,test,tests,53,tmva/tmva/test/stressTMVA.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx,2,['test'],['tests']
Testability,"// Author: E. v. Toerne, Nov 2011, implementing unit tests by C. Rosemann; // TMVA unit tests; //; // this class acts as interface to several reader applications",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:53,test,tests,53,tmva/tmva/test/stressTMVA.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx,2,['test'],['tests']
Testability,"// Author: Eckhard von Toerne, uses Christoph Rosemann's MethodUnitTest as example Nov 2010; // TMVA unit tests; //; // this class acts as interface to create, train and evaluate the method; // specified in the constructor; // as additional argument the limits of the ROC integral can be given; // to determine the performance",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:106,test,tests,106,tmva/tmva/test/stressTMVA.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx,1,['test'],['tests']
Testability,"// Author: Sanjiban Sengupta; // Description:; // This program generates a RModel_GNN for testing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/GNN/EmitGNN.cxx:90,test,testing,90,tmva/sofie/test/GNN/EmitGNN.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/GNN/EmitGNN.cxx,1,['test'],['testing']
Testability,"// Author: Sanjiban Sengupta; // Description:; // This program generates a RModel_GraphIndependent for testing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/GNN/EmitGraphIndependent.cxx:103,test,testing,103,tmva/sofie/test/GNN/EmitGraphIndependent.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/GNN/EmitGraphIndependent.cxx,1,['test'],['testing']
Testability,"// Average from the single tests",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:27,test,tests,27,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['test'],['tests']
Testability,// Avoid adding incorrect test cases to the corpus.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-opt-fuzzer/llvm-opt-fuzzer.cpp:26,test,test,26,interpreter/llvm-project/llvm/tools/llvm-opt-fuzzer/llvm-opt-fuzzer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-opt-fuzzer/llvm-opt-fuzzer.cpp,1,['test'],['test']
Testability,"// Avoid adding the ""Stride == 1"" predicate when we know that; // Stride >= Trip-Count. Such a predicate will effectively optimize a single; // or zero iteration loop, as Trip-Count <= Stride == 1.; //; // TODO: We are currently not making a very informed decision on when it is; // beneficial to apply stride versioning. It might make more sense that the; // users of this analysis (such as the vectorizer) will trigger it, based on; // their specific cost considerations; For example, in cases where stride; // versioning does not help resolving memory accesses/dependences, the; // vectorizer should evaluate the cost of the runtime test, and the benefit; // of various possible stride specializations, considering the alternatives; // of using gather/scatters (if available).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp:636,test,test,636,interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,1,['test'],['test']
Testability,// Avoid assertion about validity of L.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBundleIterator.h:9,assert,assertion,9,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBundleIterator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBundleIterator.h,4,['assert'],['assertion']
Testability,// Avoid assertion about validity of R.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBundleIterator.h:9,assert,assertion,9,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBundleIterator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBundleIterator.h,4,['assert'],['assertion']
Testability,// Avoid assertion in appendMacroDirective.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/PPMacroExpansion.cpp:9,assert,assertion,9,interpreter/llvm-project/clang/lib/Lex/PPMacroExpansion.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/PPMacroExpansion.cpp,1,['assert'],['assertion']
Testability,"// Avoid assertion in the ~IncrementalParser.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/Interpreter.cpp:9,assert,assertion,9,interpreter/cling/lib/Interpreter/Interpreter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/Interpreter.cpp,1,['assert'],['assertion']
Testability,"// Avoid assertion on add.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/DeclUnloader.cpp:9,assert,assertion,9,interpreter/cling/lib/Interpreter/DeclUnloader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/DeclUnloader.cpp,1,['assert'],['assertion']
Testability,// Avoid assertions in unreachable code.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SSAUpdater.cpp:9,assert,assertions,9,interpreter/llvm-project/llvm/lib/Transforms/Utils/SSAUpdater.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SSAUpdater.cpp,1,['assert'],['assertions']
Testability,// Avoid calling isRenamable for virtual registers since we assert that; // renamable property is only queried/set for physical registers.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TargetInstrInfo.cpp:60,assert,assert,60,interpreter/llvm-project/llvm/lib/CodeGen/TargetInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TargetInstrInfo.cpp,1,['assert'],['assert']
Testability,// Avoid calling setIsRenamable for virtual registers since we assert that; // renamable property is only queried/set for physical registers.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TargetInstrInfo.cpp:63,assert,assert,63,interpreter/llvm-project/llvm/lib/CodeGen/TargetInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TargetInstrInfo.cpp,1,['assert'],['assert']
Testability,// Avoid converting a constant or loop invariant test back to a runtime; // test. This is critical for when SCEV's cached ExitCount is less precise; // than the current IR (such as after we've proven a particular exit is; // actually dead and thus the BE count never reaches our ExitCount.),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp:49,test,test,49,interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp,2,['test'],['test']
Testability,// Avoid linking compatibility stubs on i386 mac.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Darwin.cpp:31,stub,stubs,31,interpreter/llvm-project/clang/lib/Driver/ToolChains/Darwin.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Darwin.cpp,1,['stub'],['stubs']
Testability,// Avoid making expensive immediates by commuting shifts. (This logic; // only applies to Thumb1 because ARM and Thumb2 immediates can be shifted; // for free.),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp:64,log,logic,64,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,1,['log'],['logic']
Testability,// Avoid potential infinite loops by checking for non-constant condition.; // TODO: Can we assert instead by improving canonicalizeSelectToShuffle()?; // Scalar select must have simplified?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp:91,assert,assert,91,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp,1,['assert'],['assert']
Testability,// Avoid self-assignment due to incorrect assertions in libstdc++; // containers (https://gcc.gnu.org/bugzilla/show_bug.cgi?id=85828).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:42,assert,assertions,42,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,1,['assert'],['assertions']
Testability,"// Axel's advice; now sth seems slow, using old method below for test.; // return gROOT->GetInterpreter()->IsLoaded(mac);; // Previous version expected function with same name and used ROOT's; // list of global functions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/src/TEveUtil.cxx:65,test,test,65,graf3d/eve/src/TEveUtil.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/src/TEveUtil.cxx,2,['test'],['test']
Testability,"// Axis bining optimisation is ignored if:; // - the first and the last label are equal; // - the number of divisions is 0; // - less than 1 primary division is requested; // - logarithmic scale is requested",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/graf/src/TGaxis.cxx:177,log,logarithmic,177,graf2d/graf/src/TGaxis.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/graf/src/TGaxis.cxx,1,['log'],['logarithmic']
Testability,"// Back end -- Send message or check if particular logging configuration is active",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMsgService.h:51,log,logging,51,roofit/roofitcore/inc/RooMsgService.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMsgService.h,1,['log'],['logging']
Testability,"// Bail out if feederReg is a paired register (double regs in; // our case). One would think that we can check to see if a given; // register cmpReg1 or cmpReg2 is a sub register of feederReg; // using -- if (QRI->isSubRegister(feederReg, cmpReg1) logic; // before the callsite of this function; // But we can not as it comes in the following fashion.; // %d0 = Hexagon_S2_lsr_r_p killed %d0, killed %r2; // %r0 = KILL %r0, implicit killed %d0; // %p0 = CMPEQri killed %r0, 0; // Hence, we need to check if it's a KILL instruction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonNewValueJump.cpp:248,log,logic,248,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonNewValueJump.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonNewValueJump.cpp,1,['log'],['logic']
Testability,"// Base class to represent results of a hypothesis test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestResult.h:51,test,test,51,roofit/roostats/inc/RooStats/HypoTestResult.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestResult.h,1,['test'],['test']
Testability,// Base destructors are always called non-virtually.; // Skip CXXInstanceCall's devirtualization logic in this case.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/CallEvent.cpp:97,log,logic,97,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/CallEvent.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/CallEvent.cpp,1,['log'],['logic']
Testability,"// BaseStats and TestStats hold FuncSampleStats for each function, with; // function name as the key.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp:17,Test,TestStats,17,interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,1,['Test'],['TestStats']
Testability,"// Based on ConstrainedAndOffset, this test tests different parallelization strategies; // The reference likelihood is using the legacy evaluation backend, because; // the multiprocess test statistics classes were designed to give values; // that are bit-by-bit identical with the old test statistics based on; // RooAbsTestStatistic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx:39,test,test,39,roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx,4,['test'],"['test', 'tests']"
Testability,"// Based on the RealWorld1 test in `ntuple_extended.cxx`, but here some fields are added after the fact",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/ntuple_modelext.cxx:27,test,test,27,tree/ntuple/v7/test/ntuple_modelext.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/ntuple_modelext.cxx,1,['test'],['test']
Testability,"// Basic ""sanity check"" test -- can we create and delete trees?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/test/TBasket.cxx:24,test,test,24,tree/tree/test/TBasket.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/test/TBasket.cxx,1,['test'],['test']
Testability,"// Basic checks for the parameters passed to the test; // In case of invalid parameters, a warning is printed and the test is skipped",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:49,test,test,49,roofit/roostats/test/stressRooStats_tests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h,18,['test'],['test']
Testability,"// Basic logical shape management",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/inc/TGLScene.h:9,log,logical,9,graf3d/gl/inc/TGLScene.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/inc/TGLScene.h,1,['log'],['logical']
Testability,"// Be aware that `SimplifiedMemberSym` might refer to an already dead; // symbol. In that case, the eqclass of that might not be the same as the; // eqclass of `MemberSym`. This is because the dead symbols are not; // preserved in the `ClassMap`, hence; // `find(State, SimplifiedMemberSym)` will result in a trivial eqclass; // compared to the eqclass of `MemberSym`.; // These eqclasses should be the same if `SimplifiedMemberSym` is alive.; // --> assert(find(State, MemberSym) == find(State, SimplifiedMemberSym)); //; // Note that `MemberSym` must be alive here since that is from the; // `ClassMembers` where all the symbols are alive.; // Remove the old and more complex symbol.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RangeConstraintManager.cpp:451,assert,assert,451,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RangeConstraintManager.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RangeConstraintManager.cpp,1,['assert'],['assert']
Testability,"// Be extra careful sinking truncate. If it's free, there's no benefit in; // widening a binop. Also, don't create a logic op on an illegal type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:117,log,logic,117,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['log'],['logic']
Testability,"// Because a parallel snapshot does not preserve ordering of the events, we can just test; // an aggregate such as the sum of all values.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_concurrency.cxx:85,test,test,85,tree/dataframe/test/dataframe_concurrency.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_concurrency.cxx,1,['test'],['test']
Testability,"// Because char has a smaller range than uchar, we can actually get away; // without any newton steps. This requires that we use a weird bias; // of 0xb000, however (again, this has been exhaustively tested).; // float4 result = as_float4(as_int4(xf*recip) + 0xb000);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp:200,test,tested,200,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,1,['test'],['tested']
Testability,"// Because in wasm we merge all catch clauses into one big catchpad, in case; // none of the types in catch handlers matches after we test against each of; // them, we should unwind to the next EH enclosing scope. We generate a call; // to rethrow function here to do that.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp:134,test,test,134,interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp,1,['test'],['test']
Testability,"// Because of the type rules of C, we often end up computing a; // logical value, then zero extending it to int, then wanting it; // as a logical value again. Optimize this common case.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:67,log,logical,67,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,2,['log'],['logical']
Testability,"// Because short has a smaller range than ushort, we can actually get away; // with only a single newton step. This requires that we use a weird bias; // of 89, however (again, this has been exhaustively tested).; // float4 result = as_float4(as_int4(xf*recip) + 0x89);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp:204,test,tested,204,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,1,['test'],['tested']
Testability,"// Because the controlling expression undergoes lvalue conversion,; // array conversion, and function conversion, an association which is; // of array type, function type, or is qualified can never be; // reached. We will warn about this so users are less surprised by; // the unreachable association. However, we don't have to handle; // function types; that's not an object type, so it's handled above.; //; // The logic is somewhat different for C++ because C++ has different; // lvalue to rvalue conversion rules than C. [conv.lvalue]p1 says,; // If T is a non-class type, the type of the prvalue is the cv-; // unqualified version of T. Otherwise, the type of the prvalue is T.; // The result of these rules is that all qualified types in an; // association in C are unreachable, and in C++, only qualified non-; // class types are unreachable.; //; // NB: this does not apply when the first operand is a type rather; // than an expression, because the type form does not undergo; // conversion.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:417,log,logic,417,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['log'],['logic']
Testability,"// Before we do any further reading, we should check whether we're at the end; // of the current buffer we're been consuming. In FDR logs version >= 3, we; // rely on the buffer extents record to determine how many bytes we should be; // considering as valid records.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/XRay/FDRRecordProducer.cpp:133,log,logs,133,interpreter/llvm-project/llvm/lib/XRay/FDRRecordProducer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/XRay/FDRRecordProducer.cpp,1,['log'],['logs']
Testability,"// Before we resolve any references to other elements, check if we have; // to insert missing elements, that have been stripped, which will help; // the logical view comparison.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Core/LVScope.cpp:153,log,logical,153,interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Core/LVScope.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Core/LVScope.cpp,1,['log'],['logical']
Testability,"// Being here means we need to add a physical, maybe logical as well.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScenePad.cxx:53,log,logical,53,graf3d/gl/src/TGLScenePad.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScenePad.cxx,1,['log'],['logical']
Testability,"// Below we must test >= in case the tree has no entries.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TChain.cxx:17,test,test,17,tree/tree/src/TChain.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TChain.cxx,1,['test'],['test']
Testability,"// Benchmarking has shown that due to branch correlation duplicating 2 or; // more triangles is profitable, despite the calculations assuming; // independence.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineBlockPlacement.cpp:3,Benchmark,Benchmarking,3,interpreter/llvm-project/llvm/lib/CodeGen/MachineBlockPlacement.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineBlockPlacement.cpp,1,['Benchmark'],['Benchmarking']
Testability,// Best-effort fallback if assertions disabled.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:27,assert,assertions,27,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,1,['assert'],['assertions']
Testability,"// Bit reserved for forward-compatibility testing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleDescriptor.hxx:42,test,testing,42,tree/ntuple/v7/inc/ROOT/RNTupleDescriptor.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleDescriptor.hxx,1,['test'],['testing']
Testability,// Bit-hack form of a signbit test for iN type:; // ~(X >>s (N - 1)) --> sext i1 (X > -1) to iN,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp:30,test,test,30,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,1,['test'],['test']
Testability,"// Bit-twiddling to test for a power of 2: for x > 0, x & (x-1) is zero if; // and only if x is a power of 2.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp:20,test,test,20,interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,1,['test'],['test']
Testability,// Bits indicating post- and pre-operators should be tested and set using Is*; // and Make* utility functions,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Lanai/LanaiAluCode.h:53,test,tested,53,interpreter/llvm-project/llvm/lib/Target/Lanai/LanaiAluCode.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Lanai/LanaiAluCode.h,1,['test'],['tested']
Testability,// Bitwise operations are sometimes used as eager logical ops.; // Don't diagnose this.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:50,log,logical,50,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['log'],['logical']
Testability,// Bitwise ternary logic.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h:19,log,logic,19,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h,1,['log'],['logic']
Testability,// Block samples above BaseHotThreshold or TestHotThreshold are considered hot; // for tracking hot blocks.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp:43,Test,TestHotThreshold,43,interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,1,['Test'],['TestHotThreshold']
Testability,"// Block tests which single thread should execute region, and which threads; // should go straight to synchronisation point.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:9,test,tests,9,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,1,['test'],['tests']
Testability,"// Blocks until there are log entries in the queue, then pops and returns the; // first one.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h:26,log,log,26,interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h,1,['log'],['log']
Testability,// Bool selects with constant operands can be folded to logical ops.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp:56,log,logical,56,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp,1,['log'],['logical']
Testability,"// Bool_t full = kTRUE;; // if (TestShapeBit(kGeoThetaSeg) || TestShapeBit(kGeoPhiSeg)) full = kFALSE;; // Int_t ncenter = 1;; // if (full || TestShapeBit(kGeoRSeg)) ncenter = 0;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoSphere.cxx:32,Test,TestShapeBit,32,geom/geom/src/TGeoSphere.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoSphere.cxx,3,['Test'],['TestShapeBit']
Testability,// Both operands of the logic operation are casts. The casts must be the; // same kind for reduction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp:24,log,logic,24,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,1,['log'],['logic']
Testability,// Both the problem this endeavors to fix and the way the logic; // above works is specific to the NeXT runtime.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp:58,log,logic,58,interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp,1,['log'],['logic']
Testability,"// Branch analysis.; // Cond vector output format:; // 0 elements indicates an unconditional branch; // 2 elements indicates a conditional branch; the elements are; // the condition to check and the CPSR.; // 3 elements indicates a hardware loop end; the elements; // are the opcode, the operand value to test, and a dummy; // operand used to pad out to 3 operands.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMBaseInstrInfo.cpp:305,test,test,305,interpreter/llvm-project/llvm/lib/Target/ARM/ARMBaseInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMBaseInstrInfo.cpp,1,['test'],['test']
Testability,// Branch fusion can merge CMP and TEST with all conditional jumps.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86MacroFusion.cpp:35,TEST,TEST,35,interpreter/llvm-project/llvm/lib/Target/X86/X86MacroFusion.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86MacroFusion.cpp,1,['TEST'],['TEST']
Testability,// Branch to Arm needs interworking stub,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/JITLink/aarch32.cpp:36,stub,stub,36,interpreter/llvm-project/llvm/lib/ExecutionEngine/JITLink/aarch32.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/JITLink/aarch32.cpp,1,['stub'],['stub']
Testability,// Branch to Thumb needs interworking stub,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/JITLink/aarch32.cpp:38,stub,stub,38,interpreter/llvm-project/llvm/lib/ExecutionEngine/JITLink/aarch32.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/JITLink/aarch32.cpp,1,['stub'],['stub']
Testability,"// Bugpoint is intentionally not very trusting of LLVM transformations. In; // particular, we're not going to assume that the loop extractor works, so; // we're going to test the newly loop extracted program to make sure nothing; // has broken. If something broke, then we'll inform the user and stop; // extraction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/Miscompilation.cpp:170,test,test,170,interpreter/llvm-project/llvm/tools/bugpoint/Miscompilation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/Miscompilation.cpp,1,['test'],['test']
Testability,"// Bugzilla ID: 46767; // TODO: Check if fixing up the stack more than once is safe so we can; // outline these.; //; // An outline resulting in a caller that requires stack fixups at the; // callsite to a callee that also requires stack fixups can happen when; // there are no available registers at the candidate callsite for a; // candidate that itself also has calls.; //; // In other words if function_containing_sequence in the following pseudo; // assembly requires that we save LR at the point of the call, but there; // are no available registers: in this case we save using SP and as a; // result the SP offsets requires stack fixups by multiples of 16.; //; // function_containing_sequence:; // ...; // save LR to SP <- Requires stack instr fixups in OUTLINED_FUNCTION_N; // call OUTLINED_FUNCTION_N; // restore LR from SP; // ...; //; // OUTLINED_FUNCTION_N:; // save LR to SP <- Requires stack instr fixups in OUTLINED_FUNCTION_N; // ...; // bl foo; // restore LR from SP; // ret; //; // Because the code to handle more than one stack fixup does not; // currently have the proper checks for legality, these cases will assert; // in the AArch64 MachineOutliner. This is because the code to do this; // needs more hardening, testing, better checks that generated code is; // legal, etc and because it is only verified to handle a single pass of; // stack fixup.; //; // The assert happens in AArch64InstrInfo::buildOutlinedFrame to catch; // these cases until they are known to be handled. Bugzilla 46767 is; // referenced in comments at the assert site.; //; // To avoid asserting (or generating non-legal code on noassert builds); // we remove all candidates which would need more than one stack fixup by; // pruning the cases where the candidate has calls while also having no; // available LR and having no available general purpose registers to copy; // LR to (ie one extra stack save/restore).; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp:1131,assert,assert,1131,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,5,"['assert', 'test']","['assert', 'asserting', 'testing']"
Testability,// Build a mask by testing the condition against zero.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:19,test,testing,19,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['test'],['testing']
Testability,"// Build a set, so we can do fast tests for whether a RefSCC will end up as; // part of the merged RefSCC.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LazyCallGraph.cpp:34,test,tests,34,interpreter/llvm-project/llvm/lib/Analysis/LazyCallGraph.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LazyCallGraph.cpp,1,['test'],['tests']
Testability,"// Build and insert into an implicit UNDEF value. This is OK because; // we will be shifting and then extracting the lower 8/16-bits.; // This has the potential to cause partial register stall. e.g.; // movw (%rbp,%rcx,2), %dx; // leal -65(%rdx), %esi; // But testing has shown this *does* help performance in 64-bit mode (at; // least on modern x86 machines).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp:260,test,testing,260,interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp,1,['test'],['testing']
Testability,"// Build the actual funnel shift rotate logic.; // In the comments, ""int"" is used interchangeably with ""vector of int; // elements"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVPrepareFunctions.cpp:40,log,logic,40,interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVPrepareFunctions.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVPrepareFunctions.cpp,1,['log'],['logic']
Testability,"// Build the actual unsigned multiplication logic with the overflow; // indication. Do unsigned multiplication Mul = A * B. Then check; // if unsigned division Div = Mul / A is not equal to B. If so,; // then overflow has happened.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVPrepareFunctions.cpp:44,log,logic,44,interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVPrepareFunctions.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVPrepareFunctions.cpp,1,['log'],['logic']
Testability,// Build up a worklist of inner-loops to transform to avoid iterator; // invalidation.; // FIXME: This logic comes from other passes that actually change the loop; // nest structure. It isn't clear this is necessary (or useful) for a pass; // which merely optimizes the use of loads in a loop.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopLoadElimination.cpp:103,log,logic,103,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopLoadElimination.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopLoadElimination.cpp,1,['log'],['logic']
Testability,// Bump our stub offset counter,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp:12,stub,stub,12,interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp,1,['stub'],['stub']
Testability,// Bundles with call in them will pass the isCall() test below but do not; // have callee operand information so skip them here. Iterator will; // eventually reach the call MI.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.cpp:52,test,test,52,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.cpp,1,['test'],['test']
Testability,// But add invalid MCOperand to simplify logic.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp:41,log,logic,41,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp,1,['log'],['logic']
Testability,"// By current pack/unpack logic we need to generate only a single phi node: if; // a vector value for the predicated instruction exists at this point it means; // the instruction has vector users only, and a phi for the vector value is; // needed. In this case the recipe of the predicated instruction is marked to; // also do that packing, thereby ""hoisting"" the insert-element sequence.; // Otherwise, a phi node for the scalar value is needed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlanRecipes.cpp:26,log,logic,26,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlanRecipes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlanRecipes.cpp,1,['log'],['logic']
Testability,"// By design, DeclContext is required to be a base class of some class that; // derives from Decl. Thus, it should always be possible to dyn_cast() from; // a DeclContext pointer to a Decl pointer and Decl::castFromDeclContext(); // asserts that to be the case. Since this function is intended for use in a; // debugger, it performs an additional check in order to prevent a failed; // cast and assertion. If that check fails, then the (invalid) DeclContext; // is dumped with an indication of its invalidity.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTDumper.cpp:233,assert,asserts,233,interpreter/llvm-project/clang/lib/AST/ASTDumper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTDumper.cpp,2,['assert'],"['assertion', 'asserts']"
Testability,"// By making this unsigned, the value passed in to isalnum will always be; // in the range 0-255. This is important when building with MSVC because; // its implementation will assert. This situation can arise when dealing; // with UTF-8 multibyte characters.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AsmWriter.cpp:176,assert,assert,176,interpreter/llvm-project/llvm/lib/IR/AsmWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AsmWriter.cpp,1,['assert'],['assert']
Testability,"// Byte offset of the logical segment; // within the specified physical segment.; // If group is set in flags, offset is the; // offset of the group.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/RawTypes.h:22,log,logical,22,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/RawTypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/RawTypes.h,1,['log'],['logical']
Testability,"// C++ 5.2.9p4: Any expression can be explicitly converted to type ""cv void"".; // This test is outside everything else because it's the only case where; // a non-lvalue-reference target type does not lead to decay.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCast.cpp:87,test,test,87,interpreter/llvm-project/clang/lib/Sema/SemaCast.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCast.cpp,1,['test'],['test']
Testability,// C++ [expr.log.and]p2; // C++ [expr.log.or]p2; // The result is a bool.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:13,log,log,13,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,2,['log'],['log']
Testability,"// C++ [module.import/6] external definitions are not permitted in header; // units. Deleted and Defaulted functions are implicitly inline (but the; // inline state is not set at this point, so check the BodyKind explicitly).; // FIXME: Consider an alternate location for the test where the inlined(); // state is complete.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:276,test,test,276,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['test'],['test']
Testability,// C++ defines various feature-test macros starting with __cpp,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/PPDirectives.cpp:31,test,test,31,interpreter/llvm-project/clang/lib/Lex/PPDirectives.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/PPDirectives.cpp,1,['test'],['test']
Testability,"// C++0x [expr.typeid]p3:; // When typeid is applied to an expression other than an lvalue of a; // polymorphic class type [...] The expression is an unevaluated; // operand (Clause 5).; //; // Note that we can't tell whether the expression is an lvalue of a; // polymorphic class type until after we've parsed the expression; we; // speculatively assume the subexpression is unevaluated, and fix it up; // later.; //; // We enter the unevaluated context before trying to determine whether we; // have a type-id, because the tentative parse logic will try to resolve; // names, and must treat them as unevaluated.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseExprCXX.cpp:541,log,logic,541,interpreter/llvm-project/clang/lib/Parse/ParseExprCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseExprCXX.cpp,1,['log'],['logic']
Testability,"// C++0x [meta.rel]p4:; // Given the following function prototype:; //; // template <class T>; // typename add_rvalue_reference<T>::type create();; //; // the predicate condition for a template specialization; // is_convertible<From, To> shall be satisfied if and only if; // the return expression in the following code would be; // well-formed, including any implicit conversions to the return; // type of the function:; //; // To test() {; // return create<From>();; // }; //; // Access checking is performed as if in a context unrelated to To and; // From. Only the validity of the immediate context of the expression; // of the return-statement (including conversions to the return type); // is considered.; //; // We model the initialization as a copy-initialization of a temporary; // of the appropriate type, which for this expression is identical to the; // return statement (since NRVO doesn't apply).; // Functions aren't allowed to return function or array types.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp:432,test,test,432,interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp,1,['test'],['test']
Testability,// C++11 [expr.log.and]p1:; // [...] the second operand is not evaluated if the first operand is false.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp:15,log,log,15,interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,1,['log'],['log']
Testability,"// C++11 [expr.log.and]p2:; // If the second expression is evaluated, every value computation and; // side effect associated with the first expression is sequenced before; // every value computation and side effect associated with the; // second expression.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp:15,log,log,15,interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,1,['log'],['log']
Testability,// C++11 [expr.log.or]p1:; // [...] the second operand is not evaluated if the first operand; // evaluates to true.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp:15,log,log,15,interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,1,['log'],['log']
Testability,"// C++11 [expr.log.or]p2:; // If the second expression is evaluated, every value computation and; // side effect associated with the first expression is sequenced before; // every value computation and side effect associated with the; // second expression.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp:15,log,log,15,interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,1,['log'],['log']
Testability,"// C++11-style attributes have specific version information associated with; // them. If the attribute has no scope, the version information must not; // have the default value (1), as that's incorrect. Instead, the unscoped; // attribute version information should be taken from the SD-6 standing; // document, which can be found at:; // https://isocpp.org/std/standing-documents/sd-6-sg10-feature-test-recommendations; //; // C23-style attributes have the same kind of version information; // associated with them. The unscoped attribute version information should; // be taken from the specification of the attribute in the C Standard.; //; // Clang-specific attributes have the same kind of version information; // associated with them. This version is typically the default value (1).; // These version values are clang-specific and should typically be; // incremented once the attribute changes its syntax and/or semantics in a; // a way that is impactful to the end user.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp:399,test,test-recommendations,399,interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp,1,['test'],['test-recommendations']
Testability,"// C++23 [intro.execution]/p5; // A full-expression is ... an init-declarator ([dcl.decl]) or a; // mem-initializer.; // So we need to make sure temporary objects are destroyed after having; // evaluated the expression (per C++23 [class.temporary]/p4).; //; // FIXME: Otherwise this may break test/Modules/pr68702.cpp because the; // serialization code calls ParmVarDecl::getDefaultArg() which strips the; // outermost FullExpr, such as ExprWithCleanups.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp:293,test,test,293,interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,1,['test'],['test']
Testability,// C++23 [module.unit]p1: ... The identifiers module and import shall not; // appear as identifiers in a module-name or module-partition. All; // module-names either beginning with an identifier consisting of std; // followed by zero or more digits or containing a reserved identifier; // ([lex.name]) are reserved and shall not be specified in a; // module-declaration; no diagnostic is required.; // Test the first part of the path to see if it's std[0-9]+ but allow the; // name in a system header.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaModule.cpp:402,Test,Test,402,interpreter/llvm-project/clang/lib/Sema/SemaModule.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaModule.cpp,1,['Test'],['Test']
Testability,"// C99 6.2.5p10 (float, double, long double); /// isComplexType() does *not* include complex integers (a GCC extension).; /// isComplexIntegerType() can be used to test for complex integers.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:164,test,test,164,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,1,['test'],['test']
Testability,"// CALL64r, CALL64pcrel32 - These instructions used to have; // register inputs modeled as normal uses instead of implicit uses. As such,; // they we used to truncate off all but the first operand (the callee). This; // issue seems to have been fixed at some point. This assert verifies that.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86MCInstLower.cpp:271,assert,assert,271,interpreter/llvm-project/llvm/lib/Target/X86/X86MCInstLower.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86MCInstLower.cpp,1,['assert'],['assert']
Testability,"// CAUTION! The first constructor argument (""clang"") is not arbitrary,; // as it is for other tools. Some operations on a Tool actually test; // whether that tool is Clang based on the Tool's Name as a string.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:136,test,test,136,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,1,['test'],['test']
Testability,"// CAUTION! This state is only valid for the last click event.; // If the next itemPress is triggered by a keyboard or touch event, it will still; // read this outdated ctrlKeyPressed information!!; // So ALL events causing itemPress must clear/set ctrlKeyPressed; // or ctrlKeyPressed must be reset to false after a short timeout.; //; // Also, it is not tested whether for all types of events, the direct browser; // event is coming BEFORE the itemPress event handler invocation!",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/controller/Ged.controller.js:356,test,tested,356,ui5/eve7/controller/Ged.controller.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/controller/Ged.controller.js,1,['test'],['tested']
Testability,"// CEF applications have multiple sub-processes (render, plugin, GPU, etc); // that share the same executable. This function checks the command-line and,; // if this is a sub-process, executes the appropriate logic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/cefdisplay/src/cef_main.cxx:209,log,logic,209,gui/cefdisplay/src/cef_main.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/cefdisplay/src/cef_main.cxx,1,['log'],['logic']
Testability,"// CEF applications have multiple sub-processes (render, plugin, GPU, etc); // that share the same executable. This function checks the command-line and,; // if this is a sub-process, executes the appropriate logic.; /* int exit_code = CefExecuteProcess(main_args, nullptr, nullptr);; if (exit_code >= 0) {; // The sub-process has completed so return here.; return exit_code;; }; */; // Install xlib error handlers so that the application won't be terminated; // on non-fatal errors.; // XSetErrorHandler(XErrorHandlerImpl);; // XSetIOErrorHandler(XIOErrorHandlerImpl);; // Specify CEF global settings here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/cefdisplay/src/RCefWebDisplayHandle.cxx:209,log,logic,209,gui/cefdisplay/src/RCefWebDisplayHandle.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/cefdisplay/src/RCefWebDisplayHandle.cxx,1,['log'],['logic']
Testability,"// CFI-specific: if we are exporting and any llvm.type.checked.load; // intrinsics were *not* devirtualized, we need to add the resulting; // llvm.type.test intrinsics to the function summaries so that the; // LowerTypeTests pass will export them.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/WholeProgramDevirt.cpp:152,test,test,152,interpreter/llvm-project/llvm/lib/Transforms/IPO/WholeProgramDevirt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/WholeProgramDevirt.cpp,1,['test'],['test']
Testability,"// CHECK: format string is not a string literal.; //; // Dynamically generated format strings are difficult to; // automatically vet at compile time. Requiring that format strings; // are string literals: (1) permits the checking of format strings by; // the compiler and thereby (2) can practically remove the source of; // many format string exploits.; // Format string can be either ObjC string (e.g. @""%d"") or; // C string (e.g. ""%d""); // ObjC string uses the same format specifiers as C string, so we can use; // the same format string checking logic for both ObjC and C strings.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp:550,log,logic,550,interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,1,['log'],['logic']
Testability,// COFF .refptr stub.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.h:16,stub,stub,16,interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.h,1,['stub'],['stub']
Testability,"// CPU time used by the test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:24,test,test,24,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['test'],['test']
Testability,"// Cache constant nodes with dataset - also cache entries corresponding to zero-weights in data when using; // BinnedLikelihood; // NOTE: we pass nullptr as cache-owner here, because we don't use the cacheOwner() anywhere in TestStatistics; // TODO: make sure this (nullptr) is always correct",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/TestStatistics/ConstantTermsOptimizer.cxx:225,Test,TestStatistics,225,roofit/roofitcore/src/TestStatistics/ConstantTermsOptimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/TestStatistics/ConstantTermsOptimizer.cxx,1,['Test'],['TestStatistics']
Testability,"// Cache for the BitTracker's cell map. Map lookup has a logarithmic; // complexity, this class will memoize the lookup results to reduce; // the access time for repeated lookups of the same cell.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonGenInsert.cpp:57,log,logarithmic,57,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonGenInsert.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonGenInsert.cpp,1,['log'],['logarithmic']
Testability,// Caches boolean evaluations of expressions to avoid multiple re-evaluations; // during construction of branches for chained logical operators.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp:126,log,logical,126,interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,1,['log'],['logical']
Testability,"// Calculate T0 from Eq. (3.6), using x_- = fH[5]; // double e1h5 = (fH[5] > 40 ) ? 0 : -ROOT::Math::expint (-fH[5]);; // fT0 = (h4-fH[5]*logKappa-(fH[5]+beta2)*(std::log(fH[5])+e1h5)+std::exp(-fH[5]))/fH[5];",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/VavilovAccurate.cxx:138,log,logKappa,138,math/mathmore/src/VavilovAccurate.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/VavilovAccurate.cxx,2,['log'],"['log', 'logKappa']"
Testability,"// Calculate T1 from Eq. (3.6); // double e1h0 = (fH[0] > 40 ) ? 0 : -ROOT::Math::expint (-fH[0]);; // fT1 = h4*q-logKappa-(1+beta2*q)*(std::log(std::fabs(fH[0]))+e1h0)+std::exp(-fH[0])*q;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/VavilovAccurate.cxx:114,log,logKappa,114,math/mathmore/src/VavilovAccurate.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/VavilovAccurate.cxx,2,['log'],"['log', 'logKappa']"
Testability,// Calculate an index that is used to identify the test vector in a vector; // of test vectors. This index also corresponds to the index values of an; // MCDC Region's bitmap (see findExecutedTestVectors()).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp:51,test,test,51,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,2,['test'],['test']
Testability,"// Calculate derivatives of logpdf",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx:28,log,logpdf,28,roofit/roofitcore/src/FitHelpers.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx,1,['log'],['logpdf']
Testability,"// Calculate log(Poisson(N|mu) for this bin",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooNLLVar.cxx:13,log,log,13,roofit/roofitcore/src/RooNLLVar.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooNLLVar.cxx,3,['log'],['log']
Testability,"// Calculate the residuals over the test sample",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:36,test,test,36,hist/hist/src/TMultiDimFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx,1,['test'],['test']
Testability,"// Calculates log(|x|)+E_1(x)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/VavilovAccurate.h:14,log,log,14,math/mathmore/inc/Math/VavilovAccurate.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/VavilovAccurate.h,2,['log'],['log']
Testability,// Calculates the logical OR implication operator.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafetyLogical.cpp:18,log,logical,18,interpreter/llvm-project/clang/lib/Analysis/ThreadSafetyLogical.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafetyLogical.cpp,1,['log'],['logical']
Testability,// Call test as interesting IR has changed.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/StandardInstrumentations.h:8,test,test,8,interpreter/llvm-project/llvm/include/llvm/Passes/StandardInstrumentations.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/StandardInstrumentations.h,1,['test'],['test']
Testability,// Call the appropriate modeling method based the parameters and their; // types.; // We have AssertionResult(const &AssertionResult),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/GTestChecker.cpp:94,Assert,AssertionResult,94,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/GTestChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/GTestChecker.cpp,2,['Assert'],['AssertionResult']
Testability,"// CallExpr store some data in trailing objects. However since CallExpr; // is used a base of other expression classes we cannot use; // llvm::TrailingObjects. Instead we manually perform the pointer arithmetic; // and casts.; //; // The trailing objects are in order:; //; // * A single ""Stmt *"" for the callee expression.; //; // * An array of getNumPreArgs() ""Stmt *"" for the pre-argument expressions.; //; // * An array of getNumArgs() ""Stmt *"" for the argument expressions.; //; // * An optional of type FPOptionsOverride.; //; // Note that we store the offset in bytes from the this pointer to the start; // of the trailing objects. It would be perfectly possible to compute it; // based on the dynamic kind of the CallExpr. However 1.) we have plenty of; // space in the bit-fields of Stmt. 2.) It was benchmarked to be faster to; // compute this once and then load the offset from the bit-fields of Stmt,; // instead of re-computing the offset each time the trailing objects are; // accessed.; /// Return a pointer to the start of the trailing array of ""Stmt *"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:809,benchmark,benchmarked,809,interpreter/llvm-project/clang/include/clang/AST/Expr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h,1,['benchmark'],['benchmarked']
Testability,"// Callee contains any byval parameter is not supported, too.; // Note: This is a quick work around, because in some cases, e.g.; // caller's stack size > callee's stack size, we are still able to apply; // sibling call optimization. For example, gcc is able to do SCO for caller1; // in the following example, but not for caller2.; // struct test {; // long int a;; // char ary[56];; // } gTest;; // __attribute__((noinline)) int callee(struct test v, struct test *b) {; // b->a = v.a;; // return 0;; // }; // void caller1(struct test a, struct test c, struct test *b) {; // callee(gTest, b); }; // void caller2(struct test *b) { callee(gTest, b); }",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:343,test,test,343,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,7,['test'],['test']
Testability,// Caller should have verified that N is a left shift with constant shift; // amount; asserts that.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp:86,assert,asserts,86,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp,1,['assert'],['asserts']
Testability,"// Calls Test::run() repeatedly",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:9,Test,Test,9,tmva/tmva/test/stressTMVA.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx,1,['Test'],['Test']
Testability,// Calls generateCodeTemplate and expands it into one or more BenchmarkCode.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetGenerator.h:62,Benchmark,BenchmarkCode,62,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetGenerator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetGenerator.h,1,['Benchmark'],['BenchmarkCode']
Testability,// Can we replace a conditional branch with an intrinsic that sets the; // loop counter and tests that is not zero?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/HardwareLoops.cpp:92,test,tests,92,interpreter/llvm-project/llvm/lib/CodeGen/HardwareLoops.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/HardwareLoops.cpp,1,['test'],['tests']
Testability,// CanLowerReturn() guarantees this assertion.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AVR/AVRISelLowering.cpp:36,assert,assertion,36,interpreter/llvm-project/llvm/lib/Target/AVR/AVRISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AVR/AVRISelLowering.cpp,1,['assert'],['assertion']
Testability,"// Canonicalize logical or/and reductions:; // Or reduction for i1 is represented as:; // %val = bitcast <ReduxWidth x i1> to iReduxWidth; // %res = cmp ne iReduxWidth %val, 0; // And reduction for i1 is represented as:; // %val = bitcast <ReduxWidth x i1> to iReduxWidth; // %res = cmp eq iReduxWidth %val, 11111",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ExpandReductions.cpp:16,log,logical,16,interpreter/llvm-project/llvm/lib/CodeGen/ExpandReductions.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ExpandReductions.cpp,2,['log'],['logical']
Testability,"// Canonicalize logical-and-with-invert as logical-or-with-invert.; // This is done by inverting the condition and swapping successors:; // br (X && !Y), T, F --> br !(X && !Y), F, T --> br (!X || Y), F, T",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp:16,log,logical-and-with-invert,16,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp,2,['log'],"['logical-and-with-invert', 'logical-or-with-invert']"
Testability,"// Canonicalize min/max:; // (x > 0) ? x : 0 -> (x >= 0) ? x : 0; // (x < -1) ? x : -1 -> (x <= -1) ? x : -1; // This allows use of COND_S / COND_NS (see TranslateX86CC) which eliminates; // the need for an extra compare against zero. e.g.; // (a - b) > 0 : (a - b) ? 0 -> (a - b) >= 0 : (a - b) ? 0; // subl %esi, %edi; // testl %edi, %edi; // movl $0, %eax; // cmovgl %edi, %eax; // =>; // xorl %eax, %eax; // subl %esi, $edi; // cmovsl %eax, %edi; //; // We can also canonicalize; // (x s> 1) ? x : 1 -> (x s>= 1) ? x : 1 -> (x s> 0) ? x : 1; // (x u> 1) ? x : 1 -> (x u>= 1) ? x : 1 -> (x != 0) ? x : 1; // This allows the use of a test instruction for the compare.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:324,test,testl,324,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,2,['test'],"['test', 'testl']"
Testability,"// Canonicalize vector bitcasts to come before vector bitwise logic with a; // constant. This eases recognition of special constants for later ops.; // Example:; // icmp u/s (a ^ signmask), (b ^ signmask) --> icmp s/u a, b",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp:62,log,logic,62,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp,1,['log'],['logic']
Testability,"// Canonicalizing a sign bit comparison that gets used in a branch,; // pessimizes codegen by generating branch on zero instruction instead; // of a test and branch. So we avoid canonicalizing in such situations; // because test and branch instruction has better branch displacement; // than compare and branch instruction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp:149,test,test,149,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,2,['test'],['test']
Testability,"// Capability expressions are simple expressions involving the boolean logic; // operators &&, || or !, a simple DeclRefExpr, CastExpr or a ParenExpr. Once; // a DeclRefExpr is found, its type should be checked to determine whether it; // is a capability or not.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp:71,log,logic,71,interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp,1,['log'],['logic']
Testability,"// Capture the initial iterator which represents the LoopVar value at the; // zero's logical iteration. Since the original ForStmt/CXXForRangeStmt update; // it in every iteration, capture it by value before it is modified.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:85,log,logical,85,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['log'],['logical']
Testability,"// Case (4): in order to test that, generate a new state with the binding; // added. If it is the same state, then it escapes (since the store cannot; // represent the binding).; // Do this only if we know that the store is not supposed to generate the; // same state.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngine.cpp:25,test,test,25,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngine.cpp,1,['test'],['test']
Testability,"// Case C: balance the number of training and testing events",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:46,test,testing,46,tmva/tmva/src/DataSetFactory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx,1,['test'],['testing']
Testability,"// Cases #1 (return statements) and #3.; //; // It is hard to detect that something is an assertion or came; // from assertion. Here we use a simple heuristic:; //; // - If it came from a macro, it can be an assertion.; //; // Additionally, we can't assume a number of basic blocks or the CFG's; // structure because assertions might include loops and conditions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CalledOnceCheck.cpp:90,assert,assertion,90,interpreter/llvm-project/clang/lib/Analysis/CalledOnceCheck.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CalledOnceCheck.cpp,4,['assert'],"['assertion', 'assertions']"
Testability,"// Certain branches have two forms: e.g beq $1, $zero, dest vs beqz $1, dest; // Pick the zero form of the branch for readable assembly and for greater; // branch distance in non-microMIPS mode.; // Additional MIPSR6 does not permit the use of register $zero for compact; // branches.; // FIXME: Certain atomic sequences on mips64 generate 32bit references to; // Mips::ZERO, which is incorrect. This test should be updated to use; // Subtarget.getABI().GetZeroReg() when those atomic sequences and others; // are fixed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsInstrInfo.cpp:401,test,test,401,interpreter/llvm-project/llvm/lib/Target/Mips/MipsInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsInstrInfo.cpp,1,['test'],['test']
Testability,"// Certain vector constants, used to express things like logical NOT and; // arithmetic NEG, are passed through unmodified. This allows special; // patterns for these operations to match, which will lower these constants; // to whatever is proven necessary.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:57,log,logical,57,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['log'],['logical']
Testability,"// Chain in -diagnostic-log-file dumper, if requested.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInstance.cpp:24,log,log-file,24,interpreter/llvm-project/clang/lib/Frontend/CompilerInstance.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInstance.cpp,1,['log'],['log-file']
Testability,// Chain in the diagnostic client which will log the diagnostics.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInstance.cpp:45,log,log,45,interpreter/llvm-project/clang/lib/Frontend/CompilerInstance.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInstance.cpp,1,['log'],['log']
Testability,// Change SoName before emitting stubs.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ifs/llvm-ifs.cpp:33,stub,stubs,33,interpreter/llvm-project/llvm/tools/llvm-ifs/llvm-ifs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ifs/llvm-ifs.cpp,1,['stub'],['stubs']
Testability,// Change the calling convention to coldcc if either stress testing is; // enabled or the target would like to use coldcc on functions which are; // cold at all call sites and the callers contain no other non coldcc; // calls.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/GlobalOpt.cpp:60,test,testing,60,interpreter/llvm-project/llvm/lib/Transforms/IPO/GlobalOpt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/GlobalOpt.cpp,1,['test'],['testing']
Testability,"// Check Chi2 Test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:14,Test,Test,14,test/stressHistoFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx,1,['Test'],['Test']
Testability,// Check E. If it's in a success state then return the contained value.; // If it's in a failure state log the file error(s) and exit.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/llvm-exegesis.cpp:103,log,log,103,interpreter/llvm-project/llvm/tools/llvm-exegesis/llvm-exegesis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/llvm-exegesis.cpp,1,['log'],['log']
Testability,// Check Err. If it's in a failure state log the file error(s) and exit.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/llvm-exegesis.cpp:41,log,log,41,interpreter/llvm-project/llvm/tools/llvm-exegesis/llvm-exegesis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/llvm-exegesis.cpp,1,['log'],['log']
Testability,"// Check all record assertions: For each one, resolve the condition; // and message, then call CheckAssert().; // Note: The condition and message are probably already resolved,; // but resolving again allows calls before records are resolved.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Record.cpp:20,assert,assertions,20,interpreter/llvm-project/llvm/lib/TableGen/Record.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Record.cpp,1,['assert'],['assertions']
Testability,"// Check an assertion: Obtain the condition value and be sure it is true.; // If not, print a nonfatal error along with the message.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Error.cpp:12,assert,assertion,12,interpreter/llvm-project/llvm/lib/TableGen/Error.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Error.cpp,1,['assert'],['assertion']
Testability,// Check empty set first to quickly find poor test functions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DeltaAlgorithm.cpp:46,test,test,46,interpreter/llvm-project/llvm/lib/Support/DeltaAlgorithm.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DeltaAlgorithm.cpp,1,['test'],['test']
Testability,// Check for other compares that behave like bit test.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp:49,test,test,49,interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,1,['test'],['test']
Testability,// Check for repeated operand logic simplifications.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:30,log,logic,30,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['log'],['logic']
Testability,"// Check getInstSizeInBytes on explicitly specified CPUs (it cannot; // work correctly for the generic CPU).; //; // The isPseudo check really shouldn't be here, but unfortunately there are; // some negative lit tests that depend on being able to continue through; // here even when pseudo instructions haven't been lowered.; //; // We also overestimate branch sizes with the offset bug.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUMCInstLower.cpp:212,test,tests,212,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUMCInstLower.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUMCInstLower.cpp,1,['test'],['tests']
Testability,"// Check if any of the successors of TailBB has a PHI node in which the; // value corresponding to TailBB uses a subregister.; // If a phi node uses a register paired with a subregister, the actual; // ""value type"" of the phi may differ from the type of the register without; // any subregisters. Due to a bug, tail duplication may add a new operand; // without a necessary subregister, producing an invalid code. This is; // demonstrated by test/CodeGen/Hexagon/tail-dup-subreg-abort.ll.; // Disable tail duplication for this case for now, until the problem is; // fixed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TailDuplicator.cpp:442,test,test,442,interpreter/llvm-project/llvm/lib/CodeGen/TailDuplicator.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TailDuplicator.cpp,1,['test'],['test']
Testability,// Check if one of the arms of the VSELECT is a zero vector. If it's on; // the left side invert the predicate to simplify logic below.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:123,log,logic,123,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['log'],['logic']
Testability,// Check if one of the arms of the VSELECT is vector with all bits set.; // If it's on the left side invert the predicate to simplify logic below.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:134,log,logic,134,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['log'],['logic']
Testability,// Check if suitable for a bit test,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/BasicTTIImpl.h:31,test,test,31,interpreter/llvm-project/llvm/include/llvm/CodeGen/BasicTTIImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/BasicTTIImpl.h,1,['test'],['test']
Testability,"// Check if the EFLAGS register is marked as live-out. This shouldn't happen,; // because the calling convention defines the EFLAGS register as NOT; // preserved.; //; // Unfortunatelly the EFLAGS show up as live-out after branch folding. Adding; // an assert to track this and clear the register afterwards to avoid; // unnecessary crashes during release builds.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86RegisterInfo.cpp:253,assert,assert,253,interpreter/llvm-project/llvm/lib/Target/X86/X86RegisterInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86RegisterInfo.cpp,1,['assert'],['assert']
Testability,"// Check if the computed DFS numbers are correct. Note that DFS info may not; // be valid, and when that is the case, we don't verify the numbers.; // Running time: O(N log(N)).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h:169,log,log,169,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h,1,['log'],['log']
Testability,"// Check if the field name of the MemberExprs is ambiguous. Example:; // "" 'a.d' is equal to 'h.d' "" in 'test/Analysis/null-deref-path-notes.cpp'.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporterVisitors.cpp:105,test,test,105,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporterVisitors.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporterVisitors.cpp,1,['test'],['test']
Testability,"// Check if the generated schedule is valid. This function checks if; // an instruction that uses a physical register is scheduled in a; // different stage than the definition. The pipeliner does not handle; // physical register values that may cross a basic block boundary.; // Furthermore, if a physical def/use pair is assigned to the same; // cycle, orderDependence does not guarantee def/use ordering, so that; // case should be considered invalid. (The test checks for both; // earlier and same-cycle use to be more robust.)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachinePipeliner.cpp:459,test,test,459,interpreter/llvm-project/llvm/lib/CodeGen/MachinePipeliner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachinePipeliner.cpp,1,['test'],['test']
Testability,"// Check if the smallest large enough carry is added to the number instead of kept in the; // carry when it could have been added to the sum. Unlike test LargestLargeEnoughCarry, in this; // case there will also be a non-zero carry.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testKahan.cxx:149,test,test,149,math/mathcore/test/testKahan.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testKahan.cxx,1,['test'],['test']
Testability,"// Check if there are any stores, calls, etc. between any of the loads. If; // there are, then we can't safely perform the combine.; //; // MaxIter is chosen based off the (worst case) number of iterations it; // typically takes to succeed in the LLVM test suite plus some padding.; //; // FIXME: Is there a better way to check for load fold barriers?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp:252,test,test,252,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,1,['test'],['test']
Testability,// Check incr-expr for canonical loop form and return true if it; // does not conform.; // OpenMP [2.6] Canonical loop form. Test-expr may be one of the following:; // ++var; // var++; // --var; // var--; // var += incr; // var -= incr; // var = var + incr; // var = incr + var; // var = var - incr; //,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:125,Test,Test-expr,125,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['Test'],['Test-expr']
Testability,"// Check inputs up front. This is only relevant if addition overflows, but; // testing here should catch more bugs.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ScaledNumber.h:79,test,testing,79,interpreter/llvm-project/llvm/include/llvm/Support/ScaledNumber.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ScaledNumber.h,1,['test'],['testing']
Testability,"// Check log file length (before processing the next packet, so we have the; // chance to keep the latest logs)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TDSetProxy.cxx:9,log,log,9,proof/proof/src/TDSetProxy.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TDSetProxy.cxx,2,['log'],"['log', 'logs']"
Testability,"// Check log file length (before the action, so we have the chance to keep the; // latest logs)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServ.cxx:9,log,log,9,proof/proof/src/TProofServ.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServ.cxx,2,['log'],"['log', 'logs']"
Testability,"// Check test-expr for canonical form, save upper-bound UB, flags for; // less/greater and for strict/non-strict comparison.; // OpenMP [2.9] Canonical loop form. Test-expr may be one of the following:; // var relational-op b; // b relational-op var; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:9,test,test-expr,9,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,2,"['Test', 'test']","['Test-expr', 'test-expr']"
Testability,// Check test-expr.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:9,test,test-expr,9,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['test'],['test-expr']
Testability,"// Check that LEA def register can be used as MI address base. Some; // instructions can use a limited set of registers as address base, for; // example MOV8mr_NOREX. We could constrain the register class of the LEA; // def to suit MI, however since this case is very rare and hard to; // reproduce in a test it's just more reliable to skip the LEA.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86OptimizeLEAs.cpp:304,test,test,304,interpreter/llvm-project/llvm/lib/Target/X86/X86OptimizeLEAs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86OptimizeLEAs.cpp,1,['test'],['test']
Testability,// Check that any variable location records that fell off the end of a block; // when it's terminator was removed were eventually replaced. This assertion; // firing indicates that DPValues went missing during the lifetime of the; // LLVMContext.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/LLVMContextImpl.cpp:145,assert,assertion,145,interpreter/llvm-project/llvm/lib/IR/LLVMContextImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/LLVMContextImpl.cpp,1,['assert'],['assertion']
Testability,// Check that logical operators are only used with integral operands.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Verifier.cpp:14,log,logical,14,interpreter/llvm-project/llvm/lib/IR/Verifier.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Verifier.cpp,1,['log'],['logical']
Testability,"// Check that the logical structure of the destination and source buffers; // is identical.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/LowLevelViews.cxx:18,log,logical,18,bindings/pyroot/cppyy/CPyCppyy/src/LowLevelViews.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/LowLevelViews.cxx,1,['log'],['logical']
Testability,// Check that unpaddedCoerceToType has roughly the right shape.; // Assert that we only have a struct type if there are multiple elements.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CGFunctionInfo.h:68,Assert,Assert,68,interpreter/llvm-project/clang/include/clang/CodeGen/CGFunctionInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CGFunctionInfo.h,1,['Assert'],['Assert']
Testability,"// Check that we can compute the value of AddRec on the exiting iteration; // without soundness problems. evaluateAtIteration internally needs; // to multiply the stride of the iteration number - which may wrap around.; // The issue here is subtle because computing the result accounting for; // wrap is insufficient. In order to use the result in an exit test, we; // must also know that AddRec doesn't take the same value on any previous; // iteration. The simplest case to consider is a candidate IV which is; // narrower than the trip count (and thus original IV), but this can; // also happen due to non-unit strides on the candidate IVs.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp:356,test,test,356,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,1,['test'],['test']
Testability,// Check the GPU isn't generic. Generic is used for testing only; // and we don't want this pass to interfere with it.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPURemoveIncompatibleFunctions.cpp:52,test,testing,52,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPURemoveIncompatibleFunctions.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPURemoveIncompatibleFunctions.cpp,1,['test'],['testing']
Testability,"// Check the PHIs in the join block. If any of them use a register; // that is defined as IMPLICIT_DEF, do not convert this. This can; // legitimately happen if one side of the split never executes, but; // the compiler is unable to prove it. That side may then seem to; // provide an ""undef"" value to the join block, however it will never; // execute at run-time. If we convert this case, the ""undef"" will; // be used in a MUX instruction, and that may seem like actually; // using an undefined value to other optimizations. This could lead; // to trouble further down the optimization stream, cause assertions; // to fail, etc.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonEarlyIfConv.cpp:601,assert,assertions,601,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonEarlyIfConv.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonEarlyIfConv.cpp,1,['assert'],['assertions']
Testability,// Check the assertions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Record.cpp:13,assert,assertions,13,interpreter/llvm-project/llvm/lib/TableGen/Record.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Record.cpp,3,['assert'],['assertions']
Testability,// Check the cost of inserting the necessary logic before performing the; // transformation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp:45,log,logic,45,interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp,1,['log'],['logic']
Testability,// Check the global pointer predication based on; // (!is_share(p) && !is_private(p)). Note that logic 'and' is commutative and; // the order of 'is_shared' and 'is_private' is not significant.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUTargetMachine.cpp:97,log,logic,97,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUTargetMachine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUTargetMachine.cpp,1,['log'],['logic']
Testability,"// Check the passwd and login if ok ...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx:24,log,login,24,net/rpdutils/src/rpdutils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx,1,['log'],['login']
Testability,"// Check whether ""logging"" is a top-level namespace.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/Models/ChromiumCheckModel.cpp:18,log,logging,18,interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/Models/ChromiumCheckModel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/Models/ChromiumCheckModel.cpp,1,['log'],['logging']
Testability,"// Check whether C compares (shl X, 32) with 0 and whether X is; // also sign-extended. In that case it is better to test the result; // of the sign extension using LTGFR.; //; // This case is important because InstCombine transforms a comparison; // with (sext (trunc X)) into a comparison with (shl X, 32).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp:117,test,test,117,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,1,['test'],['test']
Testability,"// Check whether C compares a floating-point value with zero and if that; // floating-point value is also negated. In this case we can use the; // negation to set CC, so avoiding separate LOAD AND TEST and; // LOAD (NEGATIVE/COMPLEMENT) instructions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp:197,TEST,TEST,197,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,1,['TEST'],['TEST']
Testability,// Check whether C tests for equality between X and Y and whether X - Y; // or Y - X is also computed. In that case it's better to compare the; // result of the subtraction against zero.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp:19,test,tests,19,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,1,['test'],['tests']
Testability,"// Check whether a boolean test is testing a boolean value generated by; // X86ISD::SETCC. If so, return the operand of that SETCC and proper condition; // code.; //; // Simplify the following patterns:; // (Op (CMP (SETCC Cond EFLAGS) 1) EQ) or; // (Op (CMP (SETCC Cond EFLAGS) 0) NEQ); // to (Op EFLAGS Cond); //; // (Op (CMP (SETCC Cond EFLAGS) 0) EQ) or; // (Op (CMP (SETCC Cond EFLAGS) 1) NEQ); // to (Op EFLAGS !Cond); //; // where Op could be BRCOND or CMOV.; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:27,test,test,27,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,2,['test'],"['test', 'testing']"
Testability,"// Check whether an AND with Mask is suitable for a TEST UNDER MASK; // instruction and whether the CC value is descriptive enough to handle; // a comparison of type Opcode between the AND result and CmpVal.; // CCMask says which comparison result is being tested and BitSize is; // the number of bits in the operands. If TEST UNDER MASK can be used,; // return the corresponding CC mask, otherwise return 0.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp:52,TEST,TEST,52,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,3,"['TEST', 'test']","['TEST', 'tested']"
Testability,"// Check whether namespace is ""logging"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/Models/ChromiumCheckModel.cpp:31,log,logging,31,interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/Models/ChromiumCheckModel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/Models/ChromiumCheckModel.cpp,1,['log'],['logging']
Testability,"// Check whether the constant can be represented by exclusive-or of two 64-bit; // logical immediates. If so, materialize it with an ORR instruction followed; // by an EOR instruction.; //; // This encoding allows all remaining repeated byte patterns, and many repeated; // 16-bit values, to be encoded without needing four instructions. It can also; // represent some irregular bitmasks (although those would mostly only need; // three instructions otherwise).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp:83,log,logical,83,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp,1,['log'],['logical']
Testability,// Check whether the entries of BBtoRegion for the BBs of region; // SR are correct. Triggers an assertion if not. Calls itself recursively for; // subregions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/RegionInfo.h:97,assert,assertion,97,interpreter/llvm-project/llvm/include/llvm/Analysis/RegionInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/RegionInfo.h,1,['assert'],['assertion']
Testability,// Check whether the first split point gets us below the column; // limit. Note that we will execute this split below as part of; // the normal token breaking and reflow logic within the line.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/ContinuationIndenter.cpp:170,log,logic,170,interpreter/llvm-project/clang/lib/Format/ContinuationIndenter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/ContinuationIndenter.cpp,1,['log'],['logic']
Testability,// Check whether the icmp can be decomposed into a bit test.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp:55,test,test,55,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,1,['test'],['test']
Testability,// Check whether the register is asserted in regmask.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MIRPrinter.cpp:33,assert,asserted,33,interpreter/llvm-project/llvm/lib/CodeGen/MIRPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MIRPrinter.cpp,1,['assert'],['asserted']
Testability,"// Check whether we should continue with non-trivial conditions.; // EnableNonTrivialUnswitch: Global variable that forces non-trivial; // unswitching for testing and debugging.; // NonTrivial: Parameter that enables non-trivial unswitching for this; // invocation of the transform. But this should be allowed only; // for targets without branch divergence.; //; // FIXME: If divergence analysis becomes available to a loop; // transform, we should allow unswitching for non-trivial uniform; // branches even on targets that have divergence.; // https://bugs.llvm.org/show_bug.cgi?id=48819",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp:155,test,testing,155,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp,1,['test'],['testing']
Testability,"// CheckMipsBuiltinArgument - Checks the constant value passed to the; // intrinsic is correct. The switch statement is ordered by DSP, MSA. The; // ordering for DSP is unspecified. MSA is ordered by the data format used; // by the underlying instruction i.e., df/m, df/n and then by size.; //; // FIXME: The size tests here should instead be tablegen'd along with the; // definitions from include/clang/Basic/BuiltinsMips.def.; // FIXME: GCC is strict on signedness for some of these intrinsics, we should; // be too.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp:314,test,tests,314,interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,1,['test'],['tests']
Testability,// Checks hardware and software support for current benchmark mode.; // Returns an error if the target host does not have support to run the; // benchmark.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h:52,benchmark,benchmark,52,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h,2,['benchmark'],['benchmark']
Testability,"// Checks if the test string matches against the pattern (which has produced the list of sub-patterns patterns_list). There is; // difference if we are processing linkdef.h or selection.xmlpatterns",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/BaseSelectionRule.h:17,test,test,17,core/dictgen/res/BaseSelectionRule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/BaseSelectionRule.h,1,['test'],['test']
Testability,// Choose the type of comparison. Equality and inequality tests can; // use either signed or unsigned comparisons. The choice also doesn't; // matter if both sign bits are known to be clear. In those cases we; // want to give the main isel code the freedom to choose whichever; // form fits best.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp:58,test,tests,58,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,1,['test'],['tests']
Testability,"// Clang and Microsoft generated different debug information records:; // For functions definitions:; // Clang: S_GPROC32 -> LF_FUNC_ID -> LF_PROCEDURE; // Microsoft: S_GPROC32 -> LF_PROCEDURE; // For member function definition:; // Clang: S_GPROC32 -> LF_MFUNC_ID -> LF_MFUNCTION; // Microsoft: S_GPROC32 -> LF_MFUNCTION; // In order to support both sequences, if we found LF_FUNCTION_ID, just; // get the TypeIndex for LF_PROCEDURE.; // For the given test case, we have the sequence:; // namespace NSP_local {; // void foo_local() {; // }; // }; //; // 0x1000 | LF_STRING_ID String: NSP_local; // 0x1002 | LF_PROCEDURE; // return type = 0x0003 (void), # args = 0, param list = 0x1001; // calling conv = cdecl, options = None; // 0x1003 | LF_FUNC_ID; // name = foo_local, type = 0x1002, parent scope = 0x1000; // 0 | S_GPROC32_ID `NSP_local::foo_local`; // type = `0x1003 (foo_local)`; // 0x1004 | LF_STRING_ID String: suite; // 0x1005 | LF_STRING_ID String: suite_local.cpp; //; // The LF_STRING_ID can hold different information:; // 0x1000 - The enclosing namespace.; // 0x1004 - The compile unit directory name.; // 0x1005 - The compile unit name.; //; // Before deducting its scope, we need to evaluate its type and create any; // associated namespaces.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.cpp:453,test,test,453,interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.cpp,1,['test'],['test']
Testability,"// Class to encapsulate the types that define how the gradient test is; // performed; it also stores information strings about the types.; // DataType defines how to instantiate the gradient evaluation: Double_t,; // Double_v.; // ExecutionPolicyType defines the execution policy: kSerial, kMultithread...; // DataInfoStr points to a human-readable string describing DataType (e.g.,; // ""Scalar"", ""Vectorial""); // PolicyInfoStr points to a human-readable string describing; // ExecutionPolicyType (e.g., ""Serial"", ""Multithread"")",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradient.cxx:63,test,test,63,math/mathcore/test/testGradient.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradient.cxx,1,['test'],['test']
Testability,"// Class to make the Unit Testing. It is important than the test; // methods are inside the class as this in particular is defined as a; // friend of the TFitEditor. This way, we can access the private; // methods of TFitEditor to perform several types of tests.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/fitpanel/test/UnitTesting.cxx:26,Test,Testing,26,gui/fitpanel/test/UnitTesting.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/fitpanel/test/UnitTesting.cxx,3,"['Test', 'test']","['Testing', 'test', 'tests']"
Testability,// Class to represent a logical line.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVLine.h:24,log,logical,24,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVLine.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVLine.h,1,['log'],['logical']
Testability,"// Classes marked __declspec(dllimport) need vftables generated on the; // import-side in order to support features like constexpr. No other; // translation unit relies on the emission of the local vftable, translation; // units are expected to generate them as needed.; //; // Because of this unique behavior, we maintain this logic here instead of; // getVTableLinkage.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp:328,log,logic,328,interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,1,['log'],['logic']
Testability,// Classrefs pointing at Objective-C stub classes must be loaded by calling; // a special runtime function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:37,stub,stub,37,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,1,['stub'],['stub']
Testability,"// Clean up is disable and the object is such that we wont be able to 'mark' it; // as needing a clean up anyway, so we can not actually test it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TCheckHashRecursiveRemoveConsistency.h:137,test,test,137,core/meta/src/TCheckHashRecursiveRemoveConsistency.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TCheckHashRecursiveRemoveConsistency.h,1,['test'],['test']
Testability,"// Cleanup the log object",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx:15,log,log,15,gui/sessionviewer/src/TProofProgressLog.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx,1,['log'],['log']
Testability,"// Clear eval error log prior to forking; // to avoid confusions...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooRealMPFE.cxx:20,log,log,20,roofit/roofitcore/src/RooRealMPFE.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooRealMPFE.cxx,1,['log'],['log']
Testability,"// Clear logical's DLs",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScene.cxx:9,log,logical,9,graf3d/gl/src/TGLScene.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScene.cxx,1,['log'],['logical']
Testability,// Clear out the debug logging macro.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/CGSCCPassManager.h:23,log,logging,23,interpreter/llvm-project/llvm/include/llvm/Analysis/CGSCCPassManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/CGSCCPassManager.h,1,['log'],['logging']
Testability,"// Clear test bits we know must be false from the source value.; // fp_class (nnan x), qnan|snan|other -> fp_class (nnan x), other; // fp_class (ninf x), ninf|pinf|other -> fp_class (ninf x), other",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp:9,test,test,9,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp,1,['test'],['test']
Testability,"// Clear the rewriter cache, because values that are in the rewriter's cache; // can be deleted below, causing the AssertingVH in the cache to trigger.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCLoopInstrFormPrep.cpp:115,Assert,AssertingVH,115,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCLoopInstrFormPrep.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCLoopInstrFormPrep.cpp,2,['Assert'],['AssertingVH']
Testability,"// Clear the rewriter cache, because values that are in the rewriter's cache; // can be deleted in the loop below, causing the AssertingVH in the cache to; // trigger.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp:127,Assert,AssertingVH,127,interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp,1,['Assert'],['AssertingVH']
Testability,"// Clear the unwind codes in the EpilogMap, so that they don't get output; // in the logic below.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCWin64EH.cpp:85,log,logic,85,interpreter/llvm-project/llvm/lib/MC/MCWin64EH.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCWin64EH.cpp,2,['log'],['logic']
Testability,"// Client logging of messages from the master and slaves",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:10,log,logging,10,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,1,['log'],['logging']
Testability,"// Client logging of messages from the workers",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofLite.cxx:10,log,logging,10,proof/proof/src/TProofLite.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofLite.cxx,1,['log'],['logging']
Testability,"// Clients may or may not want to ignore defs when testing for equality.; // For example, machine CSE pass only cares about finding common; // subexpressions, so it's safe to ignore virtual register defs.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineInstr.cpp:51,test,testing,51,interpreter/llvm-project/llvm/lib/CodeGen/MachineInstr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineInstr.cpp,1,['test'],['testing']
Testability,"// Clobbers should always have a 1:1 mapping with registers, and may; // reference registers that have illegal (e.g. vector) types. Hence, we; // shouldn't try to apply any sort of splitting logic to them.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:191,log,logic,191,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,1,['log'],['logic']
Testability,"// Clone modules, the tester function will free them.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/Miscompilation.cpp:22,test,tester,22,interpreter/llvm-project/llvm/tools/bugpoint/Miscompilation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/Miscompilation.cpp,1,['test'],['tester']
Testability,"// Close and remove the log file; remove the cleanup script",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TApplicationServer.cxx:24,log,log,24,net/net/src/TApplicationServer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TApplicationServer.cxx,1,['log'],['log']
Testability,"// Close the current log file",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServLite.cxx:21,log,log,21,proof/proof/src/TProofServLite.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServLite.cxx,1,['log'],['log']
Testability,// Clusters[First..Last] should be lowered as bit tests instead.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SwitchLoweringUtils.cpp:50,test,tests,50,interpreter/llvm-project/llvm/lib/CodeGen/SwitchLoweringUtils.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SwitchLoweringUtils.cpp,1,['test'],['tests']
Testability,"// CodeGenPrepare can sink pointer compare past statepoint, which; // breaks assumption that statepoint kills tied-use register when; // in SSA form (see note in IR/SafepointIRVerifier.cpp). Fall back; // to generic tied register handling to avoid assertion failures.; // TODO: Recompute LIS/LV information for new range here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TwoAddressInstructionPass.cpp:248,assert,assertion,248,interpreter/llvm-project/llvm/lib/CodeGen/TwoAddressInstructionPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TwoAddressInstructionPass.cpp,1,['assert'],['assertion']
Testability,"// Collect function pointers in set first, as SmallSet uses a SmallVector; // internally and we have to remove the asserting value handles first.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/PredicateInfo.cpp:115,assert,asserting,115,interpreter/llvm-project/llvm/lib/Transforms/Utils/PredicateInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/PredicateInfo.cpp,1,['assert'],['asserting']
Testability,"// Collect inner loops and outer loops without irreducible control flow. For; // now, only collect outer loops that have explicit vectorization hints. If we; // are stress testing the VPlan H-CFG construction, we collect the outermost; // loop of every loop nest.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:172,test,testing,172,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,1,['test'],['testing']
Testability,"// Collect logs",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TApplicationRemote.cxx:11,log,logs,11,net/net/src/TApplicationRemote.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TApplicationRemote.cxx,1,['log'],['logs']
Testability,// Collect the copies in RPO so that when there are chains where a copy is in; // turn copied again we visit the first one first. This ensures we can find; // viable locations for testing the original EFLAGS that dominate all the; // uses across complex CFGs.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FlagsCopyLowering.cpp:180,test,testing,180,interpreter/llvm-project/llvm/lib/Target/X86/X86FlagsCopyLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FlagsCopyLowering.cpp,1,['test'],['testing']
Testability,"// Collect the set of virtual functions that are eligible for virtual constant; // propagation. Each eligible function must not access memory, must return; // an integer of width <=64 bits, must take at least one argument, must not; // use its first argument (assumed to be ""this"") and all arguments other than; // the first one must be of <=64 bit integer type.; //; // Note that we test whether this copy of the function is readnone, rather; // than testing function attributes, which must hold for any copy of the; // function, even a less optimized version substituted at link time. This is; // sound because the virtual constant propagation optimizations effectively; // inline all implementations of the virtual function into each call site,; // rather than using function attributes to perform local optimization.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/ThinLTOBitcodeWriter.cpp:384,test,test,384,interpreter/llvm-project/llvm/lib/Transforms/IPO/ThinLTOBitcodeWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/ThinLTOBitcodeWriter.cpp,2,['test'],"['test', 'testing']"
Testability,"// CollectUnexpandedParameterPacksVisitor does not expect to see a; // FunctionParmPackExpr, but diagnosing unexpected parameter packs may still; // see such an expression in a lambda body.; // We'll bail out early in this case to avoid triggering an assertion.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateVariadic.cpp:251,assert,assertion,251,interpreter/llvm-project/clang/lib/Sema/SemaTemplateVariadic.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateVariadic.cpp,1,['assert'],['assertion']
Testability,"// Collection under test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx:20,test,test,20,test/tcollbm.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx,1,['test'],['test']
Testability,"// Collects files whose existence would invalidate the preamble.; // Collecting *all* of these would make validating it too slow though, so we; // just find all the candidates for 'file not found' diagnostics.; //; // A caveat that may be significant for generated files: we'll omit files under; // search path entries whose roots don't exist when the preamble is built.; // These are pruned by InitHeaderSearch and so we don't see the search path.; // It would be nice to include them but we don't want to duplicate all the rest; // of the InitHeaderSearch logic to reconstruct them.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/PrecompiledPreamble.cpp:558,log,logic,558,interpreter/llvm-project/clang/lib/Frontend/PrecompiledPreamble.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/PrecompiledPreamble.cpp,1,['log'],['logic']
Testability,"// Combination of tests",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:18,test,tests,18,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['test'],['tests']
Testability,"// Combine `(select c, (X & 1), 0)` -> `(and (zext c), X)`.; // We canonicalize to the `select` form in the middle end, but the `and` form; // gets better codegen and all tested targets (arm, x86, riscv)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:171,test,tested,171,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['test'],['tested']
Testability,"// Combine folds into a training and test set",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/TestCrossValidationSplitting.cxx:37,test,test,37,tmva/tmva/test/crossvalidation/TestCrossValidationSplitting.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/TestCrossValidationSplitting.cxx,1,['test'],['test']
Testability,"// Combine the RooParamHistFunc with something else in a RooRealSumPdf.; // This is do make the test more similar to the Barlow-Beeston test,; // which is where the RooParamHistFunc is primarily used.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/testRooParamHistFunc.cxx:96,test,test,96,roofit/roofit/test/testRooParamHistFunc.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/testRooParamHistFunc.cxx,2,['test'],['test']
Testability,"// Combines two comparison operation and logic operation to one selection; // operation(min, max) and logic operation. Returns new constructed Node if; // conditions for optimization are satisfied.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:41,log,logic,41,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,2,['log'],['logic']
Testability,// Command line option to specify the file to read profile from. This is; // mainly used for testing.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/PGOInstrumentation.cpp:93,test,testing,93,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/PGOInstrumentation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/PGOInstrumentation.cpp,1,['test'],['testing']
Testability,// Common checks to verify the properties of the tree. O(N log N) at worst.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h:59,log,log,59,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h,1,['log'],['log']
Testability,// Common code for all benchmark modes.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.h:23,benchmark,benchmark,23,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.h,2,['benchmark'],['benchmark']
Testability,"// Common test items for RAxisBase child classes",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/axis.cxx:10,test,test,10,hist/histv7/test/axis.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/axis.cxx,1,['test'],['test']
Testability,"// Common test items for RAxisEquidistant child classes",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/axis.cxx:10,test,test,10,hist/histv7/test/axis.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/axis.cxx,1,['test'],['test']
Testability,"// Compare Stub output with existing Stub file.; // If Stub file unchanged, abort updating.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/InterfaceStub/ELFObjHandler.cpp:11,Stub,Stub,11,interpreter/llvm-project/llvm/lib/InterfaceStub/ELFObjHandler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/InterfaceStub/ELFObjHandler.cpp,3,['Stub'],['Stub']
Testability,// Compare executed test vectors against each other to find an independence; // pairs for each condition. This processing takes the most time.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp:20,test,test,20,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,1,['test'],['test']
Testability,"// Compare the contents of the cached buffer and the string we should; // process. If there are hash collisions this assert should trigger; // making it easier to debug.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/LookupHelper.cpp:117,assert,assert,117,interpreter/cling/lib/Interpreter/LookupHelper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/LookupHelper.cpp,1,['assert'],['assert']
Testability,"// Compare to the RHS.; // FIXME: We need to compare template parameters here to avoid incorrect; // collisions in mapMetadata when RF_ReuseAndMutateDistinctMDs and a; // ODR-DISubprogram has a non-ODR template parameter (i.e., a; // DICompositeType that does not have an identifier). Eventually we should; // decouple ODR logic from uniquing logic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/LLVMContextImpl.h:323,log,logic,323,interpreter/llvm-project/llvm/lib/IR/LLVMContextImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/LLVMContextImpl.h,2,['log'],['logic']
Testability,// Compared to every other executed test vector.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp:36,test,test,36,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,1,['test'],['test']
Testability,"// Comparison mode; // Retrieve benchmark",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooUnitTest.cxx:32,benchmark,benchmark,32,roofit/roofitcore/src/RooUnitTest.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooUnitTest.cxx,5,['benchmark'],['benchmark']
Testability,"// Compile-time test if we can still use TStrings for the constructors of; // RooDataClasses, either for both name and title or for only one of them.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataSet.cxx:16,test,test,16,roofit/roofitcore/src/RooDataSet.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataSet.cxx,1,['test'],['test']
Testability,"// Complex object addition - for adding physical objects which have common logical; // shapes. In this case buffer describes template shape (aside from kCore).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualViewer3D.h:75,log,logical,75,core/base/inc/TVirtualViewer3D.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualViewer3D.h,1,['log'],['logical']
Testability,// Compute (l.adj | r.adj) & 1 and test it against zero.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:35,test,test,35,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,1,['test'],['test']
Testability,"// Compute LogLikelihood (static function)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TLimit.cxx:11,Log,LogLikelihood,11,hist/hist/src/TLimit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TLimit.cxx,1,['Log'],['LogLikelihood']
Testability,"// Compute a sufficient number of bits that is always large enough but might; // be too large. This avoids the assertion in the constructor. This; // calculation doesn't work appropriately for the numbers 0-9, so just use 4; // bits in that case.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:111,assert,assertion,111,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp,1,['assert'],['assertion']
Testability,"// Compute how many bits are required. If the log is infinite, assume we need; // just bit. If the log is exact and value is negative, then the value is; // MinSignedValue with (log + 1) bits.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:46,log,log,46,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp,3,['log'],['log']
Testability,"// Compute numbering as follows:; // Grab an iterator to the start of the index list.; // Iterate over all MBBs, and within each MBB all MIs, keeping the MI; // iterator in lock-step (though skipping it over indexes which have; // null pointers in the instruction field).; // At each iteration assert that the instruction pointed to in the index; // is the same one pointed to by the MI iterator. This; // FIXME: This can be simplified. The mi2iMap_, Idx2MBBMap, etc. should; // only need to be set up once after the first numbering is computed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SlotIndexes.cpp:294,assert,assert,294,interpreter/llvm-project/llvm/lib/CodeGen/SlotIndexes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SlotIndexes.cpp,1,['assert'],['assert']
Testability,"// Compute test error.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDNN.cxx:11,test,test,11,tmva/tmva/src/MethodDNN.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDNN.cxx,2,['test'],['test']
Testability,"// Compute the cell position in cartesian coordinates; // and compute the LOG if necessary",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/TPainter3dAlgorithms.cxx:74,LOG,LOG,74,hist/histpainter/src/TPainter3dAlgorithms.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/TPainter3dAlgorithms.cxx,2,['LOG'],['LOG']
Testability,"// Compute the register pressure contribution by this instruction by count up; // for uses that are not live and down for defs. Only count register classes; // that are already under high pressure. As a side effect, compute the number of; // uses of registers that are already live.; //; // FIXME: This encompasses the logic in HighRegPressure and MayReduceRegPressure; // so could probably be factored.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:319,log,logic,319,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,1,['log'],['logic']
Testability,// Compute the stub buffer size required for a section,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldImpl.h:15,stub,stub,15,interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldImpl.h,1,['stub'],['stub']
Testability,// Compute the test mask that would return true for the ordered comparisons.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp:15,test,test,15,interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp,1,['test'],['test']
Testability,"// Computes the exact range that is equal to both the constant ranges returned; // by makeAllowedICmpRegion and makeSatisfyingICmpRegion. This is always true; // when RHS is a singleton such as an APInt and so the assert is valid.; // However for non-singleton RHS, for example ult [2,5) makeAllowedICmpRegion; // returns [0,4) but makeSatisfyICmpRegion returns [0,2).; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/ConstantRange.cpp:214,assert,assert,214,interpreter/llvm-project/llvm/lib/IR/ConstantRange.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/ConstantRange.cpp,1,['assert'],['assert']
Testability,"// Comunicate login user name to client",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx:14,log,login,14,net/rpdutils/src/rpdutils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx,2,['log'],['login']
Testability,// Cond value must be 'sign splat' to be converted to a logical op.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:56,log,logical,56,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['log'],['logical']
Testability,// Condition-code mask assignments for TEST UNDER MASK.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZ.h:39,TEST,TEST,39,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZ.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZ.h,1,['TEST'],['TEST']
Testability,// Condition-code mask assignments for Test Data Class.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZ.h:39,Test,Test,39,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZ.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZ.h,1,['Test'],['Test']
Testability,// Condition-code mask assignments for logical operations.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZ.h:39,log,logical,39,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZ.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZ.h,1,['log'],['logical']
Testability,"// Configure the validate function to not fire assertions, instead print; // errors and return true if there's a problem.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Verifier.cpp:47,assert,assertions,47,interpreter/llvm-project/llvm/lib/IR/Verifier.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Verifier.cpp,1,['assert'],['assertions']
Testability,"// Connect file generated in $ROOTSYS/test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/eventa.cxx:38,test,test,38,test/eventa.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/eventa.cxx,2,['test'],['test']
Testability,"// Conservatively mark all internal values as promoted. This interface is; // only used when doing importing via the function importing pass. The pass; // is only enabled when testing importing via the 'opt' tool, which does; // not do the ThinLink that would normally determine what values to promote.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionImport.cpp:176,test,testing,176,interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionImport.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionImport.cpp,1,['test'],['testing']
Testability,// Constant that can be used with a 32-bit logical instruction,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/AArch64.cpp:43,log,logical,43,interpreter/llvm-project/clang/lib/Basic/Targets/AArch64.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/AArch64.cpp,1,['log'],['logical']
Testability,// Constant that can be used with a 64-bit logical instruction,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/AArch64.cpp:43,log,logical,43,interpreter/llvm-project/clang/lib/Basic/Targets/AArch64.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/AArch64.cpp,1,['log'],['logical']
Testability,// ConstantRange asserts if the ranges are the same except for the min/max; // value. Leave the cases it tolerates for the empty range error below.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Verifier.cpp:17,assert,asserts,17,interpreter/llvm-project/llvm/lib/IR/Verifier.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Verifier.cpp,1,['assert'],['asserts']
Testability,"// Construct a blank object with the provided triple and features. Used in; // testing, where a sub class will dependency inject protected methods to; // allow analysis of raw binary, without requiring a fully valid ELF file.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-cfi-verify/lib/FileAnalysis.h:79,test,testing,79,interpreter/llvm-project/llvm/tools/llvm-cfi-verify/lib/FileAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-cfi-verify/lib/FileAnalysis.h,1,['test'],['testing']
Testability,"// Construct a histogram with the pulls of the data w.r.t the curve; // we set `useAverage` to false for this test because this was done for the reference histogram",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/stressRooFit_tests.h:110,test,test,110,roofit/roofitcore/test/stressRooFit_tests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/stressRooFit_tests.h,1,['test'],['test']
Testability,// Construct a new stub function that will re-route calls to F,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/Miscompilation.cpp:19,stub,stub,19,interpreter/llvm-project/llvm/tools/bugpoint/Miscompilation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/Miscompilation.cpp,1,['stub'],['stub']
Testability,// Construct a pass manager to run the LoopPass backedge logic. We; // need the pass manager to handle scheduling all the loop passes; // appropriately. Doing this by hand is painful and just not worth messing; // with for the moment.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/PlaceSafepoints.cpp:57,log,logic,57,interpreter/llvm-project/llvm/lib/Transforms/Scalar/PlaceSafepoints.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/PlaceSafepoints.cpp,1,['log'],['logic']
Testability,// Construct an IntelJITEventListener with a test Intel JIT API implementation,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITEventListener.h:45,test,test,45,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITEventListener.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITEventListener.h,1,['test'],['test']
Testability,// Construct an OProfileJITEventListener with a test opagent implementation,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITEventListener.h:48,test,test,48,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITEventListener.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITEventListener.h,1,['test'],['test']
Testability,"// Construct the log of the signal / signal+background probability",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/stressRooFit_tests.h:17,log,log,17,roofit/roofitcore/test/stressRooFit_tests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/stressRooFit_tests.h,1,['log'],['log']
Testability,// Construct the logical AND of all the constraints,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConstraintManager.h:17,log,logical,17,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConstraintManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConstraintManager.h,1,['log'],['logical']
Testability,"// Construct two (in)equalities, and a logical and/or",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h:39,log,logical,39,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h,1,['log'],['logical']
Testability,"// Construct variable that holds -log(L) fit with null hypothesis for given parameter",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooChi2MCSModule.cxx:34,log,log,34,roofit/roofit/src/RooChi2MCSModule.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooChi2MCSModule.cxx,3,['log'],['log']
Testability,"// Construct variable that holds significance corresponding to delta(-log(L)) w.r.t to null hypothesis for given parameter",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDLLSignificanceMCSModule.cxx:70,log,log,70,roofit/roofitcore/src/RooDLLSignificanceMCSModule.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDLLSignificanceMCSModule.cxx,1,['log'],['log']
Testability,// Constructor of profile likelihood given input likelihood nll w.r.t; // the given set of variables. The input log likelihood is minimized w.r.t; // to all other variables of the likelihood at each evaluation and the; // value of the global log likelihood minimum is always subtracted.; // Determine actual parameters and observables; /*; std::unique_ptr<RooArgSet> actualObs{nllIn.getObservables(observables)};; std::unique_ptr<RooArgSet> actualPars{nllIn.getParameters(observables)};. _obs.add(*actualObs) ;; _par.add(*actualPars) ;; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/RooBarlowBeestonLL.cxx:112,log,log,112,roofit/histfactory/src/RooBarlowBeestonLL.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/RooBarlowBeestonLL.cxx,2,['log'],['log']
Testability,"// Constructor parsing:; /* options=...; * possible options:; * nostreamer: set G__NOSTREAMER flag; * noinputoper: set G__NOINPUTOPERATOR flag; * evolution: set G__USEBYTECOUNT flag; * nomap: (ignored by roocling; prevents entry in ROOT's rootmap file); * stub: (ignored by rootcling was a directly for CINT code generation); * version(x): sets the version number of the class to x; * rntuple[un]split: enforce split/unsplit encoding in RNTuple; */; // We assume that the first toke in option or options; // assert( tok.getIdentifierInfo()->getName() != ""option"" or ""options"")",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/LinkdefReader.cxx:256,stub,stub,256,core/dictgen/src/LinkdefReader.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/LinkdefReader.cxx,2,"['assert', 'stub']","['assert', 'stub']"
Testability,"// Convert `APFloat` to appropriate IEEE type depending on `DstTy`. Otherwise,; // `buildFConstant` will assert on size mismatch. Only `G_FSQRT`, and; // `G_FLOG2` reach here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp:105,assert,assert,105,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,1,['assert'],['assert']
Testability,"// Convert a bitcasted integer logic operation that has one bitcasted; // floating-point operand into a floating-point logic operation. This may; // create a load of a constant, but that is cheaper than materializing the; // constant in an integer register and transferring it to an SSE register or; // transferring the SSE operand to integer register and back.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:31,log,logic,31,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,2,['log'],['logic']
Testability,// Convert a sign-bit test of an FP value into a cast and integer compare.; // TODO: Simplify if the copysign constant is 0.0 or NaN.; // TODO: Handle non-zero compare constants.; // TODO: Handle other predicates.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp:22,test,test,22,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,1,['test'],['test']
Testability,// Convert an artificial vector insert into more analyzable bitwise logic.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp:68,log,logic,68,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp,1,['log'],['logic']
Testability,"// Convert scalar FP compares and logic to vector compares (COMIS* to CMPS*); // and vector logic:; // logic (setcc N00, N01), (setcc N10, N11) -->; // extelt (logic (setcc (s2v N00), (s2v N01)), setcc (s2v N10), (s2v N11))), 0",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:34,log,logic,34,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,4,['log'],['logic']
Testability,"// Convert the i128 that an addrspace(8) pointer is natively represented as; // into the v4i32 that all the buffer intrinsics expect to receive. We can't; // add register classes for i128 on pain of the promotion logic going haywire,; // so this slightly ugly hack is what we've got. If passed a non-pointer; // argument (as would be seen in older buffer intrinsics), does nothing.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.h:213,log,logic,213,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.h,1,['log'],['logic']
Testability,// Convert the logical op for VSELECT if needed.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:15,log,logical,15,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,1,['log'],['logical']
Testability,// Convert the right node to record-form. This is either the logical we're; // looking at or it is the input node to the negation (if we're looking at; // a bitwise negation).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp:61,log,logical,61,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,1,['log'],['logical']
Testability,// Convert the stub size from a string to an integer.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCSectionMachO.cpp:15,stub,stub,15,interpreter/llvm-project/llvm/lib/MC/MCSectionMachO.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCSectionMachO.cpp,1,['stub'],['stub']
Testability,"// Convert to enum, asserts if Value cannot be represented as Enum's; // underlying type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Sequence.h:20,assert,asserts,20,interpreter/llvm-project/llvm/include/llvm/ADT/Sequence.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Sequence.h,1,['assert'],['asserts']
Testability,"// Convert to integral, asserts if Value cannot be represented as Integral.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Sequence.h:24,assert,asserts,24,interpreter/llvm-project/llvm/include/llvm/ADT/Sequence.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Sequence.h,1,['assert'],['asserts']
Testability,// Convert xor of signbit tests to signbit test of xor'd values:; // (X > -1) ^ (Y > -1) --> (X ^ Y) < 0; // (X < 0) ^ (Y < 0) --> (X ^ Y) < 0; // (X > -1) ^ (Y < 0) --> (X ^ Y) > -1; // (X < 0) ^ (Y > -1) --> (X ^ Y) > -1,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp:26,test,tests,26,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,2,['test'],"['test', 'tests']"
Testability,"// Copied from arrow/testing/builder.h",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/datasource_arrow.cxx:21,test,testing,21,tree/dataframe/test/datasource_arrow.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/datasource_arrow.cxx,1,['test'],['testing']
Testability,"// Copied/hacked up from Clang's CharacterLiteral::print - incomplete; // (doesn't actually support different character types/widths, sign; // handling's not done, and doesn't correctly test if a character is; // printable or needs to use a numeric escape sequence instead)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/DWARF/DWARFTypePrinter.cpp:186,test,test,186,interpreter/llvm-project/llvm/lib/DebugInfo/DWARF/DWARFTypePrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/DWARF/DWARFTypePrinter.cpp,1,['test'],['test']
Testability,// Copies benchmark function's bytes from benchmark object.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Assembler.h:10,benchmark,benchmark,10,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Assembler.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Assembler.h,2,['benchmark'],['benchmark']
Testability,// Copy assertions from class to instance.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Record.cpp:8,assert,assertions,8,interpreter/llvm-project/llvm/lib/TableGen/Record.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Record.cpp,1,['assert'],['assertions']
Testability,// Copy from an SDUse array into an SDValue array for use with; // the regular getNode logic.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:87,log,logic,87,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,1,['log'],['logic']
Testability,// Copy the completed test vector to the vector of testvectors.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp:22,test,test,22,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,2,['test'],"['test', 'testvectors']"
Testability,// Copy the subclass record's assertions to the new record.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:30,assert,assertions,30,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,1,['assert'],['assertions']
Testability,"// Copying constructor for the threadprivate variable.; // Must be NULL - reserved by runtime, but currently it requires that this; // parameter is always NULL. Otherwise it fires assertion.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:180,assert,assertion,180,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,1,['assert'],['assertion']
Testability,"// Coroutine promise field is always at the fixed offset from the beginning of; // the coroutine frame. i8* coro.promise(i8*, i1 from) intrinsic adds an offset; // to a passed pointer to move from coroutine frame to coroutine promise and; // vice versa. Since we don't know exactly which coroutine frame it is, we build; // a coroutine frame mock up starting with two function pointers, followed by a; // properly aligned coroutine promise field.; // TODO: Handle the case when coroutine promise alloca has align override.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Coroutines/CoroEarly.cpp:342,mock,mock,342,interpreter/llvm-project/llvm/lib/Transforms/Coroutines/CoroEarly.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Coroutines/CoroEarly.cpp,1,['mock'],['mock']
Testability,"// Costs should match the codegen from:; // BITREVERSE: llvm\test\CodeGen\X86\vector-bitreverse.ll; // BSWAP: llvm\test\CodeGen\X86\bswap-vector.ll; // CTLZ: llvm\test\CodeGen\X86\vector-lzcnt-*.ll; // CTPOP: llvm\test\CodeGen\X86\vector-popcnt-*.ll; // CTTZ: llvm\test\CodeGen\X86\vector-tzcnt-*.ll; // TODO: Overflow intrinsics (*ADDO, *SUBO, *MULO) with vector types are not; // specialized in these tables yet.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp:61,test,test,61,interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp,5,['test'],['test']
Testability,"// Could be an assertion, but this way we can see the failing form code; // easily, which helps track down where it came from.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DIE.cpp:15,assert,assertion,15,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DIE.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DIE.cpp,1,['assert'],['assertion']
Testability,"// Could inserting the [W|D]LSTP cause some unintended affects? In a perfect; // world the [w|d]lstp instruction would be last instruction in the preheader; // and so it would only affect instructions within the loop body. But due to; // scheduling, and/or the logic in this pass (above), the insertion point can; // be moved earlier. So if the Loop Start isn't the last instruction in the; // preheader, and if the initial element count is smaller than the vector; // width, the Loop Start instruction will immediately generate one or more; // false lane mask which can, incorrectly, affect the proceeding MVE; // instructions in the preheader.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMLowOverheadLoops.cpp:261,log,logic,261,interpreter/llvm-project/llvm/lib/Target/ARM/ARMLowOverheadLoops.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMLowOverheadLoops.cpp,1,['log'],['logic']
Testability,// Could remove this and the dtor if PointerUnion supported unique_ptr; // elements with a dynamic failure/assertion (like the one below) in the case; // where it was copied while being in an owning state.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp:107,assert,assertion,107,interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp,1,['assert'],['assertion']
Testability,"// Count the total number of inserions of each edge.; // Each insertion adds 1 and deletion subtracts 1. The end number should be; // one of {-1 (deletion), 0 (NOP), +1 (insertion)}. Otherwise, the sequence; // of updates contains multiple updates of the same kind and we assert for; // that case.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/CFGUpdate.h:272,assert,assert,272,interpreter/llvm-project/llvm/include/llvm/Support/CFGUpdate.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/CFGUpdate.h,1,['assert'],['assert']
Testability,// Counter tracks the right hand side of a logical and operator.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:43,log,logical,43,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,2,['log'],['logical']
Testability,// Counter tracks the right hand side of a logical or operator.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:43,log,logical,43,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,2,['log'],['logical']
Testability,"// Counts how many tests failed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:19,test,tests,19,test/stressHistoFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx,3,['test'],['tests']
Testability,"// Crash if the assertion fails, printing the message and testcase.; // More elegant error handling isn't needed for unit tests.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Testing/Annotations/Annotations.cpp:16,assert,assertion,16,interpreter/llvm-project/llvm/lib/Testing/Annotations/Annotations.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Testing/Annotations/Annotations.cpp,3,"['assert', 'test']","['assertion', 'testcase', 'tests']"
Testability,// Create PLT stub; // FIXME: check PLT stub of data symbol is not accessed,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/ExecutionUtils.cpp:14,stub,stub,14,interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/ExecutionUtils.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/ExecutionUtils.cpp,2,['stub'],['stub']
Testability,// Create a NEW `main' function with same type in the test module.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/Miscompilation.cpp:54,test,test,54,interpreter/llvm-project/llvm/tools/bugpoint/Miscompilation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/Miscompilation.cpp,1,['test'],['test']
Testability,"// Create a catchpad in which we catch a longjmp's env and val arguments, test; // if the longjmp corresponds to one of setjmps in the current function, and if; // so, jump to the setjmp dispatch BB from which we go to one of post-setjmp; // BBs. Refer to 4) of ""Wasm setjmp/longjmp handling"" section in the comments at; // top of the file for details.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyLowerEmscriptenEHSjLj.cpp:74,test,test,74,interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyLowerEmscriptenEHSjLj.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyLowerEmscriptenEHSjLj.cpp,1,['test'],['test']
Testability,// Create a dummy section for the ifunc stubs. It will be actually; // allocated in finalizeLoad() below.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp:40,stub,stubs,40,interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp,1,['stub'],['stubs']
Testability,"// Create a new DB called testdb:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/sqlitetest.cxx:26,test,testdb,26,test/sqlitetest.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/sqlitetest.cxx,1,['test'],['testdb']
Testability,// Create a new callback for the RawMemProfRecord iterator so that we can; // provide the symbol name if the reader was initialized with KeepSymbolName =; // true. This is useful for debugging and testing.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/RawMemProfReader.cpp:197,test,testing,197,interpreter/llvm-project/llvm/lib/ProfileData/RawMemProfReader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/RawMemProfReader.cpp,1,['test'],['testing']
Testability,// Create a new stub function (equivalent to a PLT entry).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp:16,stub,stub,16,interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp,1,['stub'],['stub']
Testability,// Create a new stub function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp:16,stub,stub,16,interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp,7,['stub'],['stub']
Testability,"// Create a small test file",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:18,test,test,18,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['test'],['test']
Testability,// Create a temporary file for the invocation log.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexer.cpp:46,log,log,46,interpreter/llvm-project/clang/tools/libclang/CIndexer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexer.cpp,1,['log'],['log']
Testability,"// Create a test model: RooSimultaneous with Gaussian in one component, and; // product of two Gaussians in the other.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/hs3/test/testRooFitHS3.cxx:12,test,test,12,roofit/hs3/test/testRooFitHS3.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/hs3/test/testRooFitHS3.cxx,1,['test'],['test']
Testability,"// Create a timer object to benchmark this loop",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/eventa.cxx:28,benchmark,benchmark,28,test/eventa.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/eventa.cxx,2,['benchmark'],['benchmark']
Testability,// Create all the blocks and logic.; // ParentBB:; // goto RegionCheckTidBB; // RegionCheckTidBB:; // Tid = __kmpc_hardware_thread_id(); // if (Tid != 0); // goto RegionBarrierBB; // RegionStartBB:; // <execute instructions guarded>; // goto RegionEndBB; // RegionEndBB:; // <store escaping values to shared mem>; // goto RegionBarrierBB; // RegionBarrierBB:; // __kmpc_simple_barrier_spmd(); // // second barrier is omitted if lacking escaping values.; // <load escaping values from shared mem>; // __kmpc_simple_barrier_spmd(); // goto RegionExitBB; // RegionExitBB:; // <execute rest of instructions>,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/OpenMPOpt.cpp:29,log,logic,29,interpreter/llvm-project/llvm/lib/Transforms/IPO/OpenMPOpt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/OpenMPOpt.cpp,1,['log'],['logic']
Testability,"// Create an `oldmain' prototype in the test module, which will; // corresponds to the real main function in the same module.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/Miscompilation.cpp:40,test,test,40,interpreter/llvm-project/llvm/tools/bugpoint/Miscompilation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/Miscompilation.cpp,1,['test'],['test']
Testability,// Create an alias instead of RAUW'ing the gep directly. On x86 this ensures; // that the pc-relative displacement is folded into the lea instead of the; // test instruction getting another displacement.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp:157,test,test,157,interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp,1,['test'],['test']
Testability,// Create basic block to hold stuff that comes after switch; // statement. We also need to create a default block now so that; // explicit case ranges tests can have a place to jump to on; // failure.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:151,test,tests,151,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,1,['test'],['tests']
Testability,"// Create file `filename` containing a test tree `treeName` with `nevents` events",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_simple.cxx:39,test,test,39,tree/dataframe/test/dataframe_simple.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_simple.cxx,1,['test'],['test']
Testability,"// Create function stubs for both PLT and GOT references, regardless of; // whether the GOT reference is to data or code. The stub contains the; // full address of the symbol, as needed by GOT references, and the; // executable part only adds an overhead of 8 bytes.; //; // We could try to conserve space by allocating the code and data; // parts of the stub separately. However, as things stand, we allocate; // a stub for every relocation, so using a GOT in JIT code should be; // no less space efficient than using an explicit constant pool.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp:19,stub,stubs,19,interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp,4,['stub'],"['stub', 'stubs']"
Testability,"// Create log string",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServ.cxx:10,log,log,10,proof/proof/src/TProofServ.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServ.cxx,1,['log'],['log']
Testability,"// Create logical if required.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScenePad.cxx:10,log,logical,10,graf3d/gl/src/TGLScenePad.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScenePad.cxx,1,['log'],['logical']
Testability,// Create logical operations on predicate registers.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonTargetMachine.cpp:10,log,logical,10,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonTargetMachine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonTargetMachine.cpp,1,['log'],['logical']
Testability,"// Create message box test dialog. Use this dialog to select the different; // message dialog box styles and show the message dialog by clicking the; // ""Test"" button.; // use hierarchical cleani",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/guitest.cxx:22,test,test,22,test/guitest.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/guitest.cxx,2,"['Test', 'test']","['Test', 'test']"
Testability,// Create stubs for external branch targets.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/JITLink/aarch32.cpp:10,stub,stubs,10,interpreter/llvm-project/llvm/lib/ExecutionEngine/JITLink/aarch32.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/JITLink/aarch32.cpp,1,['stub'],['stubs']
Testability,// Create syntax trees from subtrees not backed by the source code.; // Synthesis of Leafs; /// Create `Leaf` from token with `Spelling` and assert it has the desired; /// `TokenKind`.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Syntax/BuildTree.h:141,assert,assert,141,interpreter/llvm-project/clang/include/clang/Tooling/Syntax/BuildTree.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Syntax/BuildTree.h,1,['assert'],['assert']
Testability,"// Create template PDF based on data.; // For the extended case, we use a RooExtendPdf, and for the non-extended; // case a RooRealSumPdf so we can also test the binned likelihood code path.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx:153,test,test,153,roofit/roofitcore/test/testTestStatistics.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx,1,['test'],['test']
Testability,"// Create test main frame. A TGMainFrame is a top level window.; // use hierarchical cleaning",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/guitest.cxx:10,test,test,10,test/guitest.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/guitest.cxx,1,['test'],['test']
Testability,"// Create the IFunc stubs if necessary. This must be done before processing; // the GOT entries, as the IFunc stubs may create some.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp:20,stub,stubs,20,interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp,2,['stub'],['stubs']
Testability,// Create the alloca. Note that we set the name separately from; // building the instruction so that it's there even in no-asserts; // builds.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:123,assert,asserts,123,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,1,['assert'],['asserts']
Testability,"// Create the conditional branch based on the third operand of the; // instruction, which tells us if we are wrapping a normal or streaming; // function.; // We test the live value of pstate.sm and toggle pstate.sm if this is not the; // expected value for the callee (0 for a normal callee and 1 for a streaming; // callee).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandPseudoInsts.cpp:161,test,test,161,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandPseudoInsts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandPseudoInsts.cpp,1,['test'],['test']
Testability,// Create the logical element if not found.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.cpp:14,log,logical,14,interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.cpp,1,['log'],['logical']
Testability,// Create the logical line record.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.cpp:14,log,logical,14,interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.cpp,1,['log'],['logical']
Testability,// Create the logical view element for the current DIE.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVELFReader.cpp:14,log,logical,14,interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVELFReader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVELFReader.cpp,1,['log'],['logical']
Testability,"// Create the physical, bind it to the logical and add it to the scene.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScenePad.cxx:39,log,logical,39,graf3d/gl/src/TGLScenePad.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScenePad.cxx,1,['log'],['logical']
Testability,"// Create the subrange information, required by the logical view. Once; // the array has been processed, the dimension sizes will updated, as; // the sizes are a progression. For instance:; // sizeof(int) = 4; // int Array[2]; Sizes: 8 Dim: 8 / 4 -> [2]; // int Array[2][3]; Sizes: 24, 12 Dim: 24 / 12 -> [2]; // Dim: 12 / 4 -> [3]; // int Array[2][3][4]; sizes: 96, 48, 16 Dim: 96 / 48 -> [2]; // Dim: 48 / 16 -> [3]; // Dim: 16 / 4 -> [4]",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.cpp:52,log,logical,52,interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.cpp,1,['log'],['logical']
Testability,"// Create the test information to be send via input and retrieved",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:14,test,test,14,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['test'],['test']
Testability,"// Create the type id summary resolution regardlness of whether we can; // devirtualize, so that lower type tests knows the type id is used on; // a global and not Unsat. We do this here rather than in the loop over the; // CallSlots, since that handling will only see type tests that directly; // feed assumes, and we would miss any that aren't currently handled by WPD; // (such as type tests that feed assumes via phis).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/WholeProgramDevirt.cpp:108,test,tests,108,interpreter/llvm-project/llvm/lib/Transforms/IPO/WholeProgramDevirt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/WholeProgramDevirt.cpp,3,['test'],['tests']
Testability,"// Create weighted dataset and hist to test SumW2 feature",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx:39,test,test,39,roofit/roofitcore/test/testTestStatistics.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx,1,['test'],['test']
Testability,// Creates a SlotIndex from an IndexListEntry and a slot. Generally should; // not be used. This method is only public to facilitate writing certain; // unit tests.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SlotIndexes.h:158,test,tests,158,interpreter/llvm-project/llvm/include/llvm/CodeGen/SlotIndexes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SlotIndexes.h,1,['test'],['tests']
Testability,// Creates a benchmark runner for the given mode.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h:13,benchmark,benchmark,13,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h,1,['benchmark'],['benchmark']
Testability,// Creates a logical object of the given KIND. The signature for the created; // functions looks like:; // ...; // LVScope *createScope(); // LVScopeRoot *creatScopeRoot(); // LVType *createType();; // ...,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVReader.h:13,log,logical,13,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVReader.h,1,['log'],['logical']
Testability,"// Creates all of our needed .root files and deletes them once the testing is over.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/readspeed/test/readspeed_general.cxx:67,test,testing,67,tree/readspeed/test/readspeed_general.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/readspeed/test/readspeed_general.cxx,1,['test'],['testing']
Testability,// Creating Hi and Lo relocations for the filled stub instructions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp:49,stub,stub,49,interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp,2,['stub'],['stub']
Testability,"// Creating Highest, Higher, Hi and Lo relocations for the filled stub; // instructions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp:66,stub,stub,66,interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp,1,['stub'],['stub']
Testability,"// Cretate the logical volume reference node",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/gdml/src/TGDMLWrite.cxx:15,log,logical,15,geom/gdml/src/TGDMLWrite.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/gdml/src/TGDMLWrite.cxx,1,['log'],['logical']
Testability,"// Cretate the logical volume reference nodes",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/gdml/src/TGDMLWrite.cxx:15,log,logical,15,geom/gdml/src/TGDMLWrite.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/gdml/src/TGDMLWrite.cxx,1,['log'],['logical']
Testability,"// Cross-check to make sure the integration works correctly even if there is; // only one midpoint on the RooCurve. Covers GitHub issue #9838 (the reproducer; // in that issue was translated to this test).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooCurve.cxx:199,test,test,199,roofit/roofitcore/test/testRooCurve.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooCurve.cxx,1,['test'],['test']
Testability,"// CurMBB needs to add an unconditional branch to SuccMBB (we removed these; // branches temporarily for tail merging). In the case where CurMBB ends; // with a conditional branch to the next block, optimize by reversing the; // test and conditionally branching to SuccMBB instead.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/BranchFolding.cpp:229,test,test,229,interpreter/llvm-project/llvm/lib/CodeGen/BranchFolding.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/BranchFolding.cpp,1,['test'],['test']
Testability,// Current lane id; could be logical.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:29,log,logical,29,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,1,['log'],['logical']
Testability,"// CurrentLVarMap is moved to ExitMap on block exit.; // FIXME: the entry block will hold function parameters.; // assert(!CurrentLVarMap.valid() && ""CurrentLVarMap already initialized."");",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafetyCommon.cpp:115,assert,assert,115,interpreter/llvm-project/clang/lib/Analysis/ThreadSafetyCommon.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafetyCommon.cpp,1,['assert'],['assert']
Testability,"// Currently RegisterCoalesce degrades wasm debug info quality by a; // significant margin. As a quick fix, disable this for -O1, which is often; // used for debugging large applications. Disabling this increases code size; // of Emscripten core benchmarks by ~5%, which is acceptable for -O1, which is; // usually not used for production builds.; // TODO Investigate why RegisterCoalesce degrades debug info quality and fix; // it properly",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyTargetMachine.cpp:246,benchmark,benchmarks,246,interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyTargetMachine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyTargetMachine.cpp,1,['benchmark'],['benchmarks']
Testability,"// Currently clang and the llvm assembler do not support generating symbol; // stubs from assembly, so we skip the input on asm files. For ifs files; // we rely on the normal pipeline setup in the pipeline setup code above.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:79,stub,stubs,79,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp,1,['stub'],['stubs']
Testability,"// Currently we only recognize the simple pattern:; //; // test %reg, %reg; // je %label; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp:59,test,test,59,interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp,1,['test'],['test']
Testability,"// Currently, if a user specified a range, the clusters will be only globally obtained; // Assume that there are 3 files with entries: [0, 100], [0, 150], [0, 200] (in this order); // Since the cluster boundaries are obtained sequentially, applying the offsets, the boundaries; // would be: 0, 100, 250, 450. Now assume that the user provided the range (150, 300); // Then, in the first iteration, nothing is going to be added to entryRanges since:; // std::max(0, 150) < std::min(100, max). Then, by the same logic only a subset of the second; // tree is added, i.e.: currentStart is now 200 and currentEnd is 250 (locally from 100 to 150).; // Lastly, the last tree would take entries from 250 to 300 (or from 0 to 50 locally).; // The current file's offset to start and end is added to make them (chain) global",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeProcessorMT.cxx:510,log,logic,510,tree/treeplayer/src/TTreeProcessorMT.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeProcessorMT.cxx,1,['log'],['logic']
Testability,"// Currently, we get G_PTR_ADD only as a result of translating; // global variables, initialized with constant expressions like GV + Const; // (see test opencl/basic/progvar_prog_scope_init.ll).; // TODO: extend the handler once we have other cases.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVInstructionSelector.cpp:148,test,test,148,interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVInstructionSelector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVInstructionSelector.cpp,1,['test'],['test']
Testability,"// Currently, we only support relative addressing with statepoints.; // Otherwise, we'll need a scratch register to hold the target; // address. You'll fail asserts during load & relocation if this; // symbol is to far away. (TODO: support non-relative addressing)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86MCInstLower.cpp:157,assert,asserts,157,interpreter/llvm-project/llvm/lib/Target/X86/X86MCInstLower.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86MCInstLower.cpp,1,['assert'],['asserts']
Testability,"// Currently, we only support relative addressing with statepoints.; // Otherwise, we'll need a scratch register to hold the target; // immediate. You'll fail asserts during load & relocation if this; // address is to far away. (TODO: support non-relative addressing)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86MCInstLower.cpp:159,assert,asserts,159,interpreter/llvm-project/llvm/lib/Target/X86/X86MCInstLower.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86MCInstLower.cpp,1,['assert'],['asserts']
Testability,"// D3. [Calculate q'.].; // Set qp = (u[j+n]*b + u[j+n-1]) / v[n-1]. (qp=qprime=q'); // Set rp = (u[j+n]*b + u[j+n-1]) % v[n-1]. (rp=rprime=r'); // Now test if qp == b or qp*v[n-2] > b*rp + u[j+n-2]; if so, decrease; // qp by 1, increase rp by v[n-1], and repeat this test if rp < b. The test; // on v[n-2] determines at high speed most of the cases in which the trial; // value qp is one too large, and it eliminates all cases where qp is two; // too large.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:152,test,test,152,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp,3,['test'],['test']
Testability,"// D5. [Test remainder.] Set q[j] = qp. If the result of step D4 was; // negative, go to step D6; otherwise go on to step D7.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:8,Test,Test,8,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp,1,['Test'],['Test']
Testability,"// D6. [Add back]. The probability that this step is necessary is very; // small, on the order of only 2/b. Make sure that test data accounts for; // this possibility. Decrease q[j] by 1",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:123,test,test,123,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp,1,['test'],['test']
Testability,"// DSMTEST (datasetmanager test)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSetInfo.h:27,test,test,27,tmva/tmva/inc/TMVA/DataSetInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSetInfo.h,1,['test'],['test']
Testability,"// DT logic is only applicable if a single foam is trained",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx:6,log,logic,6,tmva/tmva/src/MethodPDEFoam.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx,1,['log'],['logic']
Testability,// DXILInstPrinter is a null stub because DXIL instructions aren't printed.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/DirectX/MCTargetDesc/DirectXMCTargetDesc.cpp:29,stub,stub,29,interpreter/llvm-project/llvm/lib/Target/DirectX/MCTargetDesc/DirectXMCTargetDesc.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/DirectX/MCTargetDesc/DirectXMCTargetDesc.cpp,1,['stub'],['stub']
Testability,"// Darwin passes an undocumented fourth argument of type char**. If; // other platforms start sprouting these, the logic below will start; // getting shifty.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:115,log,logic,115,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['log'],['logic']
Testability,"// Deal with a state change induce by recursive parsing. The first parsing is; // suspended and a (recursive) parsing is started between associated (in the upper/outer; // file) with a newer line (hence greater offset). After the end of the recursive; // parsing, we go back to the first parsing and any state change will done 'earlier'; // and trigger:; // assert(Last.Offset <= Offset && ""state transitions added out of order"");",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp:358,assert,assert,358,interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp,1,['assert'],['assert']
Testability,"// Deal with cases where we can add a value to force the sign bit; // to contain the right value. Putting the bit in 31 means we can; // use SRL rather than RISBG(L), and also makes it easier to get a; // 0/-1 value, so it has priority over the other tests below.; //; // These sequences rely on the fact that the upper two bits of the; // IPM result are zero.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelDAGToDAG.cpp:251,test,tests,251,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelDAGToDAG.cpp,1,['test'],['tests']
Testability,"// Death tests must run single-threaded:; // https://github.com/google/googletest/blob/main/docs/advanced.md#death-tests-and-threads",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/ntuple_minifile.cxx:9,test,tests,9,tree/ntuple/v7/test/ntuple_minifile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/ntuple_minifile.cxx,2,['test'],"['tests', 'tests-and-threads']"
Testability,// Debug logging for transformation and analysis passes.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/StandardInstrumentations.h:9,log,logging,9,interpreter/llvm-project/llvm/include/llvm/Passes/StandardInstrumentations.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/StandardInstrumentations.h,1,['log'],['logging']
Testability,"// Decide the bit width for the logical iteration counter. By default use the; // unsigned ptrdiff_t integer size (for iterators and pointers).; // TODO: For iterators, use iterator::difference_type,; // std::iterator_traits<>::difference_type or decltype(it - end).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:32,log,logical,32,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['log'],['logical']
Testability,"// Decide whether it's profitable to lower this range with bit tests. Each; // destination requires a bit test and branch, and there is an overall range; // check branch. For a small number of clusters, separate comparisons might; // be cheaper, and for many destinations, splitting the range might be; // better.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:63,test,tests,63,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,2,['test'],"['test', 'tests']"
Testability,"// Decide whether to include the next binop in this subexpression. For; // example, when parsing x+y*z and looking at '*', we want to recursively; // handle y*z as a single subexpression. We do this because the precedence; // of * is higher than that of +. The only strange case we have to handle; // here is for the ?: operator, where the precedence is actually lower than; // the LHS of the '?'. The grammar rule is:; //; // conditional-expression ::=; // logical-OR-expression ? expression : conditional-expression; // where 'expression' is actually comma-expression.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/PPExpressions.cpp:458,log,logical-OR-expression,458,interpreter/llvm-project/clang/lib/Lex/PPExpressions.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/PPExpressions.cpp,1,['log'],['logical-OR-expression']
Testability,// Decision to cluster mem ops is taken based on target dependent logic,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineScheduler.cpp:66,log,logic,66,interpreter/llvm-project/llvm/lib/CodeGen/MachineScheduler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineScheduler.cpp,1,['log'],['logic']
Testability,"// DecisionTreeNode* R = (DecisionTreeNode*)mdt->GetRoot();; // Double_t x = R->GetAlphaMinSubtree();; // Log() << ""alphaMin(Root) = "" << x << Endl;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CostComplexityPruneTool.cxx:106,Log,Log,106,tmva/tmva/src/CostComplexityPruneTool.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CostComplexityPruneTool.cxx,1,['Log'],['Log']
Testability,"// Declare that the GradientFittingTest class should be instantiated with the types defined by TestTypes",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradientFitting.cxx:95,Test,TestTypes,95,math/mathcore/test/testGradientFitting.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradientFitting.cxx,1,['Test'],['TestTypes']
Testability,"// Declare that we can analytically integrate all requested observables; // (basically, we will take care of the problem, and delegate where required); //assert(normSet==0);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooProduct.cxx:154,assert,assert,154,roofit/roofitcore/src/RooProduct.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooProduct.cxx,1,['assert'],['assert']
Testability,"// Decode renaming logic into suffix string and boolean for conflictOnly mode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooWorkspace.cxx:19,log,logic,19,roofit/roofitcore/src/RooWorkspace.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooWorkspace.cxx,2,['log'],['logic']
Testability,"// Deduction of index used for the line records.; //; // For the following test case: test.cpp; // void foo(void ParamPtr) { }; // Both GCC and Clang generate DWARF-5 .debug_line layout.; // * GCC (GNU C++17 11.3.0) - All DW_AT_decl_file use index 1.; //; // .debug_info:; // format = DWARF32, version = 0x0005; // DW_TAG_compile_unit; // DW_AT_name	(""test.cpp""); // DW_TAG_subprogram (""foo""); // DW_AT_decl_file (1); // DW_TAG_formal_parameter (""ParamPtr""); // DW_AT_decl_file (1); // .debug_line:; // Line table prologue: format (DWARF32), version (5); // include_directories[0] = ""...""; // file_names[0]: name (""test.cpp""), dir_index (0); // file_names[1]: name (""test.cpp""), dir_index (0); // * Clang (14.0.6) - All DW_AT_decl_file use index 0.; //; // .debug_info:; // format = DWARF32, version = 0x0005; // DW_AT_producer	(""clang version 14.0.6""); // DW_AT_name	(""test.cpp""); //; // DW_TAG_subprogram (""foo""); // DW_AT_decl_file (0); // DW_TAG_formal_parameter (""ParamPtr""); // DW_AT_decl_file (0); // .debug_line:; // Line table prologue: format (DWARF32), version (5); // include_directories[0] = ""...""; // file_names[0]: name (""test.cpp""), dir_index (0); // From DWARFDebugLine::getFileNameByIndex documentation:; // In Dwarf 4, the files are 1-indexed.; // In Dwarf 5, the files are 0-indexed.; // Additional discussions here:; // https://www.mail-archive.com/dwarf-discuss@lists.dwarfstd.org/msg00883.html; // The ELF Reader is expecting the files are 1-indexed, so using; // the .debug_line header information decide if the indexed require; // an internal adjustment.; // For the case of GCC (DWARF5), if the entries[0] and [1] are the; // same, do not perform any adjustment.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVELFReader.cpp:75,test,test,75,interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVELFReader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVELFReader.cpp,7,['test'],['test']
Testability,"// Default compare result in gpr register will be `true`.; // We will move `false` (MIPS::Zero) to gpr result when fcmp gives false; // using MOVF_I. When orignal predicate (Cond) is logically negated; // MipsFCMPCondCode, result is inverted i.e. MOVT_I is used.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsInstructionSelector.cpp:183,log,logically,183,interpreter/llvm-project/llvm/lib/Target/Mips/MipsInstructionSelector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsInstructionSelector.cpp,1,['log'],['logically']
Testability,"// Default options that all tests will have",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:28,test,tests,28,test/stressHistoFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx,1,['test'],['tests']
Testability,"// Default to the <driver-path>/../lib directory. This works fine on the; // platforms that we have tested so far. We will probably have to re-fine; // this in the future. In particular, on some platforms, we may need to use; // lib64 instead of lib.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/CommonArgs.cpp:100,test,tested,100,interpreter/llvm-project/clang/lib/Driver/ToolChains/CommonArgs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/CommonArgs.cpp,1,['test'],['tested']
Testability,// Default to the same logic as loads.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:23,log,logic,23,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,1,['log'],['logic']
Testability,"// Defensive maneuver for ill-formed code: we're likely not to make it to; // a point where we set the access specifier, so default it to ""public""; // to avoid triggering asserts elsewhere in the front end.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/DeclBase.cpp:171,assert,asserts,171,interpreter/llvm-project/clang/lib/AST/DeclBase.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/DeclBase.cpp,1,['assert'],['asserts']
Testability,// Defer to generic logic.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp:20,log,logic,20,interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp,1,['log'],['logic']
Testability,// Define AIX OS-Version Macros.; // Includes logic for legacy versions of AIX; no specific intent to support.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/OSTargets.h:46,log,logic,46,interpreter/llvm-project/clang/lib/Basic/Targets/OSTargets.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/OSTargets.h,1,['log'],['logic']
Testability,// Defines the number of triangles tested for a Delaunay triangle; // (number of iterations) before abandoning the search,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:35,test,tested,35,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['test'],['tested']
Testability,"// Delete all objects in the sandbox",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooWorkspace.cxx:29,sandbox,sandbox,29,roofit/roofitcore/src/RooWorkspace.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooWorkspace.cxx,1,['sandbox'],['sandbox']
Testability,// Delete any unreachable statepoints so that we don't have unrewritten; // statepoints surviving this pass. This makes testing easier and the; // resulting IR less confusing to human readers.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp:120,test,testing,120,interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp,1,['test'],['testing']
Testability,"// Delete test dialog widgets.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/guitest.cxx:10,test,test,10,test/guitest.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/guitest.cxx,1,['test'],['test']
Testability,"// Delete the log file unless we are in debug mode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TApplicationServer.cxx:14,log,log,14,net/net/src/TApplicationServer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TApplicationServer.cxx,1,['log'],['log']
Testability,"// Deletes tests",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:11,test,tests,11,tmva/tmva/test/stressTMVA.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx,1,['test'],['tests']
Testability,"// Depending on the logical op, inner select might be in different hand.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp:20,log,logical,20,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp,1,['log'],['logical']
Testability,"// Depending on which version of the ELF ABI is in use, we need to; // generate one of two variants of the stub. They both start with; // the same sequence to load the target address into r12.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyld.cpp:107,stub,stub,107,interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyld.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyld.cpp,1,['stub'],['stub']
Testability,"// Detect VTST (Vector Test Bits) = icmp ne (and (op0, op1), zero).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp:23,Test,Test,23,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,1,['Test'],['Test']
Testability,// Detects if a memory operation has an erroneous base register modification.; // Memory operations are detected by matching the types of operands.; //; // TODO: This test is focussed on one specific instance (ld/st).; // Extend it to handle more cases or be more robust.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Lanai/AsmParser/LanaiAsmParser.cpp:167,test,test,167,interpreter/llvm-project/llvm/lib/Target/Lanai/AsmParser/LanaiAsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Lanai/AsmParser/LanaiAsmParser.cpp,1,['test'],['test']
Testability,// Determine if the machine instruction is a supported memory operation by; // testing if the computed merge opcode is a valid memory operation opcode.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Lanai/LanaiMemAluCombiner.cpp:79,test,testing,79,interpreter/llvm-project/llvm/lib/Target/Lanai/LanaiMemAluCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Lanai/LanaiMemAluCombiner.cpp,1,['test'],['testing']
Testability,"// Determine the larger repetition size of the two possible logical; // immediates, by finding the repetition size of Imm.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp:60,log,logical,60,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp,1,['log'],['logical']
Testability,"// Determine the number of bytes left to be read from the log file.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TApplicationServer.cxx:58,log,log,58,net/net/src/TApplicationServer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TApplicationServer.cxx,2,['log'],['log']
Testability,"// Determine the test type",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/src/TSelEventGen.cxx:17,test,test,17,proof/proofbench/src/TSelEventGen.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/src/TSelEventGen.cxx,1,['test'],['test']
Testability,// Determine the type of the test operands.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:29,test,test,29,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,1,['test'],['test']
Testability,"// Determining a target is external or not is deferred in PostPrunePass.; // We assume branching to local entry by default, since in PostPrunePass,; // we don't have any context to determine LocalEntryOffset. If it finally; // turns out to be an external call, we'll have a stub for the external; // target, the target of this edge will be the stub and its addend will be; // set 0.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/JITLink/ELF_ppc64.cpp:274,stub,stub,274,interpreter/llvm-project/llvm/lib/ExecutionEngine/JITLink/ELF_ppc64.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/JITLink/ELF_ppc64.cpp,2,['stub'],['stub']
Testability,"// Diagnose cases where a scalar was implicitly converted to a vector and; // diagnose the underlying types. Otherwise, diagnose the error; // as invalid vector logical operands for non-C++ cases.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:161,log,logical,161,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['log'],['logical']
Testability,// Diagnose cases where the user write a logical and/or but probably meant a; // bitwise one. We do this when the LHS is a non-bool integer and the RHS; // is a constant.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:41,log,logical,41,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['log'],['logical']
Testability,"// Dialog used to test the different supported progress bars.; // use hierarchical cleani",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/guitest.cxx:18,test,test,18,test/guitest.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/guitest.cxx,1,['test'],['test']
Testability,"// Dialog used to test the different supported sliders.; // use hierarchical cleani",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/guitest.cxx:18,test,test,18,test/guitest.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/guitest.cxx,1,['test'],['test']
Testability,"// Dialog used to test the different supported sliders.; // use hierarchical cleaning",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:18,test,test,18,test/stressGUI.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx,1,['test'],['test']
Testability,// Did the test fail?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/BasicBlock.cpp:11,test,test,11,interpreter/llvm-project/llvm/lib/IR/BasicBlock.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/BasicBlock.cpp,1,['test'],['test']
Testability,"// Differences from Instruction::isSameOperationAs:; // * replace type comparison with calls to cmpTypes.; // * we test for I->getRawSubclassOptionalData (nuw/nsw/tail) at the top.; // * because of the above, we don't test for the tail bit on calls later on.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/FunctionComparator.cpp:115,test,test,115,interpreter/llvm-project/llvm/lib/Transforms/Utils/FunctionComparator.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/FunctionComparator.cpp,2,['test'],['test']
Testability,"// Directory for this test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:22,test,test,22,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['test'],['test']
Testability,// Disable LSan for this test.; // FIXME: Re-enable once we can assume GCC 13.2 or higher.; // https://llvm.org/github.com/llvm/llvm-project/issues/67586.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-repl/ClangRepl.cpp:25,test,test,25,interpreter/llvm-project/clang/tools/clang-repl/ClangRepl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-repl/ClangRepl.cpp,1,['test'],['test']
Testability,// Disable debugger support by default in noexec tests.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp:49,test,tests,49,interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp,1,['test'],['tests']
Testability,"// Disable first all the tests",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:25,test,tests,25,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['test'],['tests']
Testability,// Disable processing of fdiv so we can better test the backend implementations.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUCodeGenPrepare.cpp:47,test,test,47,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUCodeGenPrepare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUCodeGenPrepare.cpp,1,['test'],['test']
Testability,// Disable the verification pass in asserts builds unless otherwise specified.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:36,assert,asserts,36,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,1,['assert'],['asserts']
Testability,"// Disabled until CallFunc is informed about unloading, and can; // re-generate the wrapper (if the decl is still available). See; // https://github.com/root-project/root/issues/10898; // We still have to release the allocations which resets their addresses; // to FinalizedAlloc::InvalidAddr, or the assertion in ~FinalizedAlloc; // will be unhappy...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/IncrementalJIT.cpp:301,assert,assertion,301,interpreter/cling/lib/Interpreter/IncrementalJIT.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/IncrementalJIT.cpp,1,['assert'],['assertion']
Testability,// Disables definitions of device-side runtime support stubs in; // cuda_device_runtime_api.h,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/__clang_cuda_runtime_wrapper.h:55,stub,stubs,55,interpreter/llvm-project/clang/lib/Headers/__clang_cuda_runtime_wrapper.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/__clang_cuda_runtime_wrapper.h,1,['stub'],['stubs']
Testability,"// Disables elapsed time by default.; //::testing::GTEST_FLAG(print_time) = false;; // Parse command line arguments",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_THBinIterator.cxx:42,test,testing,42,hist/hist/test/test_THBinIterator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_THBinIterator.cxx,2,['test'],['testing']
Testability,"// Disables test (asymmetric padding not supported)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestCustomModelsFromONNX.cxx:12,test,test,12,tmva/sofie/test/TestCustomModelsFromONNX.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestCustomModelsFromONNX.cxx,1,['test'],['test']
Testability,"// Disabling the assert and returning first call probe seen so far.; // Subsequent call probes, if any, are ignored. Due to the the way; // .pseudo_probe section is decoded, probes of the same-named independent; // static functions are merged thus multiple call probes may be seen for a; // callsite. This should only happen to compiler-generated statics, with; // -funique-internal-linkage-names where user statics get unique names.; //; // TODO: re-enable or narrow down the assert to static functions only.; //; // assert(!CallProbe &&; // ""There should be only one call probe corresponding to address ""; // ""which is a callsite."");",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCPseudoProbe.cpp:17,assert,assert,17,interpreter/llvm-project/llvm/lib/MC/MCPseudoProbe.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCPseudoProbe.cpp,3,['assert'],['assert']
Testability,// Discard value names in assert builds unless otherwise specified.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:26,assert,assert,26,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,1,['assert'],['assert']
Testability,"// Display all logfiles directly on this terminal. Useful for getting; // test results without accessing the test machine (i.e. with CDash)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:15,log,logfiles,15,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,3,"['log', 'test']","['logfiles', 'test']"
Testability,// Disregard v2i64. Memcpy lowering produces those and splitting; // them regresses performance on micro-benchmarks and olden/bh.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:105,benchmark,benchmarks,105,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,2,['benchmark'],['benchmarks']
Testability,// Do a log(n) search of the Preds list for the entry we want.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/PromoteMemoryToRegister.cpp:8,log,log,8,interpreter/llvm-project/llvm/lib/Transforms/Utils/PromoteMemoryToRegister.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/PromoteMemoryToRegister.cpp,1,['log'],['log']
Testability,// Do form the 'bit test' pattern.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:20,test,test,20,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,1,['test'],['test']
Testability,"// Do hypothesis test with AsymptoticCalculator",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:17,test,test,17,roofit/roostats/test/stressRooStats_tests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h,1,['test'],['test']
Testability,"// Do hypothesis test with ProfileLikelihoodCalculator",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:17,test,test,17,roofit/roostats/test/stressRooStats_tests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h,1,['test'],['test']
Testability,"// Do not apply discount if scalable, because that would lead to; // invalid scalarization costs.; // Do not apply discount logic if hacked cost is needed; // for emulated masked memrefs.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:124,log,logic,124,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,1,['log'],['logic']
Testability,"// Do not change a 'not' of logical shift because that would create a normal; // 'xor'. The 'not' is likely better for analysis, SCEV, and codegen.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineShifts.cpp:28,log,logical,28,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineShifts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineShifts.cpp,1,['log'],['logical']
Testability,"// Do not emit the builtin arguments in the arguments of a function call,; // because the evaluation order of function arguments is not specified in C++.; // This is important when testing to ensure the arguments are emitted in the; // same order every time. Eg:; // Instead of:; // return Builder.CreateFDiv(EmitScalarExpr(E->getArg(0)),; // EmitScalarExpr(E->getArg(1)), ""swdiv"");; // Use:; // Value *Op0 = EmitScalarExpr(E->getArg(0));; // Value *Op1 = EmitScalarExpr(E->getArg(1));; // return Builder.CreateFDiv(Op0, Op1, ""swdiv"")",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:181,test,testing,181,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,1,['test'],['testing']
Testability,"// Do not generate two replacements for the same location. As a special; // case, it is allowed if there is a replacement for the empty range; // between 2 tokens and another non-empty range at the start of the second; // token. We didn't implement logic to combine replacements for 2; // consecutive source ranges into a single replacement, because the; // program works fine without it.; //; // We can't eliminate empty original whitespace ranges. They appear when; // 2 tokens have no whitespace in between in the input. It does not; // matter whether whitespace is to be added. If no whitespace is to be; // added, the replacement will be empty, and it gets eliminated after this; // step in storeReplacement. For example, if the input is `foo();`,; // there will be a replacement for the range between every consecutive; // pair of tokens.; //; // A replacement at the start of a token can be added by; // BreakableStringLiteralUsingOperators::insertBreak when it adds braces; // around the string literal. Say Verilog code is being formatted and the; // first line is to become the next 2 lines.; // x(""long string"");; // x({""long "",; // ""string""});; // There will be a replacement for the empty range between the parenthesis; // and the string and another replacement for the quote character. The; // replacement for the empty range between the parenthesis and the quote; // comes from ContinuationIndenter::addTokenOnCurrentLine when it changes; // the original empty range between the parenthesis and the string to; // another empty one. The replacement for the quote character comes from; // BreakableStringLiteralUsingOperators::insertBreak when it adds the; // brace. In the example, the replacement for the empty range is the same; // as the original text. However, eliminating replacements that are same; // as the original does not help in general. For example, a newline can; // be inserted, causing the first line to become the next 3 lines.; // xxxxxxxxxxx(""long string"");; // xxxxxx",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/WhitespaceManager.cpp:249,log,logic,249,interpreter/llvm-project/clang/lib/Format/WhitespaceManager.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/WhitespaceManager.cpp,1,['log'],['logic']
Testability,"// Do not handle the case where the shift amount (can be zero if no srl; // was found) is not constant. We could handle this case, but it would; // require run-time logic that would be more expensive than just; // emitting the srl/and pair.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelDAGToDAG.cpp:165,log,logic,165,interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelDAGToDAG.cpp,1,['log'],['logic']
Testability,// Do not optimize away the return value. Inspired by; // https://github.com/google/benchmark/blob/main/include/benchmark/benchmark.h#L307-L345,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/vfabi-demangle-fuzzer/vfabi-demangler-fuzzer.cpp:84,benchmark,benchmark,84,interpreter/llvm-project/llvm/tools/vfabi-demangle-fuzzer/vfabi-demangler-fuzzer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/vfabi-demangle-fuzzer/vfabi-demangler-fuzzer.cpp,3,['benchmark'],['benchmark']
Testability,// Do not save PDT to local variable as it is only used in asserts and thus; // will trigger an unused variable warning if building without asserts.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFuse.cpp:59,assert,asserts,59,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFuse.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFuse.cpp,2,['assert'],['asserts']
Testability,"// Do not trace into ""or"" unless it is equivalent to ""add"". If LHS and RHS; // don't have common bits, (LHS | RHS) is equivalent to (LHS + RHS).; // FIXME: this does not appear to be covered by any tests; // (with x86/aarch64 backends at least)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SeparateConstOffsetFromGEP.cpp:198,test,tests,198,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SeparateConstOffsetFromGEP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SeparateConstOffsetFromGEP.cpp,1,['test'],['tests']
Testability,// Do not unswitch vector selects and logical and/or selects,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp:38,log,logical,38,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp,1,['log'],['logical']
Testability,// Do some basic validation checking on our liveness results before; // performing relocation. Relocation can and will turn mistakes in liveness; // results into non-sensical code which is must harder to debug.; // TODO: It would be nice to test consistency as well,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp:241,test,test,241,interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp,1,['test'],['test']
Testability,// Do some quick tests for rejection cases.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/PPMacroExpansion.cpp:17,test,tests,17,interpreter/llvm-project/clang/lib/Lex/PPMacroExpansion.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/PPMacroExpansion.cpp,1,['test'],['tests']
Testability,"// Do the logic op in the intermediate width, then widen more.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp:10,log,logic,10,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,1,['log'],['logic']
Testability,"// Do we need to register an additional line for another log?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:57,log,log,57,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,1,['log'],['log']
Testability,"// Don't add the default paramater onto std classes.; // We really need this for __shared_ptr which add a enum constant value which; // is spelled in its 'numeral' form and thus the resulting type name is; // incorrect. We also can used this for any of the STL collections where we; // know we don't want the default argument. For the other members of the; // std namespace this is dubious (because TMetaUtils::GetNormalizedName would; // not drop those defaults). [I.e. the real test ought to be is std and; // name is __shared_ptr or vector or list or set or etc.]",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:480,test,test,480,core/clingutils/src/TClingUtils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx,1,['test'],['test']
Testability,"// Don't assert if we are in a CrashRecovery context, as this invariant may; // be invalidated during a crash.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp:9,assert,assert,9,interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp,1,['assert'],['assert']
Testability,// Don't bother inserting AssertZext for packed IDs since we're emitting the; // masking operations anyway.; //; // TODO: We could assert the top bit is 0 for the source copy.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp:26,Assert,AssertZext,26,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp,4,"['Assert', 'assert']","['AssertZext', 'assert']"
Testability,"// Don't bother printing reason, just return to the test function,; // since a fatal error represents a successful parse (i.e. it correctly; // terminated with an error message to the user).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-as-fuzzer/llvm-as-fuzzer.cpp:52,test,test,52,interpreter/llvm-project/llvm/tools/llvm-as-fuzzer/llvm-as-fuzzer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-as-fuzzer/llvm-as-fuzzer.cpp,1,['test'],['test']
Testability,// Don't combine AND since emitComparison converts the AND to an ANDS; // (a.k.a. TST) and the test in the test bit and branch instruction; // becomes redundant. This would also increase register pressure.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:95,test,test,95,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,4,['test'],['test']
Testability,"// Don't custom lower most intrinsics.; // ptest and testp intrinsics. The intrinsic these come from are designed to; // return an integer value, not just an instruction so lower it to the ptest; // or testp pattern and a setcc for the result.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:53,test,testp,53,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,2,['test'],['testp']
Testability,// Don't do any of the memmove_collectable tests if GC isn't set.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp:43,test,tests,43,interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp,1,['test'],['tests']
Testability,"// Don't do anything when nothing is live, this is friendly with tests.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionImport.cpp:65,test,tests,65,interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionImport.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionImport.cpp,1,['test'],['tests']
Testability,// Don't do this transform for sign bit tests. Let foldLogicOfSetCCs; // handle it using OR/AND.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:40,test,tests,40,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['test'],['tests']
Testability,// Don't do this unless assertions are enabled.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/LegacyPassManager.cpp:24,assert,assertions,24,interpreter/llvm-project/llvm/lib/IR/LegacyPassManager.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/LegacyPassManager.cpp,1,['assert'],['assertions']
Testability,// Don't even attempt to generate code for MIPS-V. It has not; // been tested and currently exists for the integrated assembler only.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsSubtarget.cpp:71,test,tested,71,interpreter/llvm-project/llvm/lib/Target/Mips/MipsSubtarget.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsSubtarget.cpp,1,['test'],['tested']
Testability,"// Don't even go down this path for i64, since different logic will be; // necessary for rldicl/rldicr/rldimi.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp:57,log,logic,57,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,1,['log'],['logic']
Testability,// Don't fold into a copy to a physical register with the same class. Doing; // so would interfere with the register coalescer's logic which would avoid; // redundant initializations.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIFoldOperands.cpp:129,log,logic,129,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIFoldOperands.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIFoldOperands.cpp,1,['log'],['logic']
Testability,// Don't forward functions which are external in the test module too.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/Miscompilation.cpp:53,test,test,53,interpreter/llvm-project/llvm/tools/bugpoint/Miscompilation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/Miscompilation.cpp,1,['test'],['test']
Testability,"// Don't generate a stub for a destructor that does nothing; // This also fixes printing of lambdas and C structures as they; // have no dtor test/ValuePrinter/Destruction.C",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/Interpreter.cpp:20,stub,stub,20,interpreter/cling/lib/Interpreter/Interpreter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/Interpreter.cpp,2,"['stub', 'test']","['stub', 'test']"
Testability,// Don't insert type test assumes if we are forcing public; // visibility.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp:21,test,test,21,interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp,1,['test'],['test']
Testability,// Don't insert type tests if we are forcing public visibility.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:21,test,tests,21,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,1,['test'],['tests']
Testability,"// Don't let ParseOptionalCXXScopeSpecifier() ""correct""; // `int A; struct { ~A::A(); };` to `int A; struct { ~A:A(); };`,; // it will confuse this recovery logic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseExprCXX.cpp:157,log,logic,157,interpreter/llvm-project/clang/lib/Parse/ParseExprCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseExprCXX.cpp,1,['log'],['logic']
Testability,"// Don't mark as devirtualized because there may be callers compiled without; // retpoline mitigation, which would mean that they are lowered to; // llvm.type.test and therefore require an llvm.type.test resolution for the; // type identifier.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/WholeProgramDevirt.cpp:159,test,test,159,interpreter/llvm-project/llvm/lib/Transforms/IPO/WholeProgramDevirt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/WholeProgramDevirt.cpp,2,['test'],['test']
Testability,"// Don't repeat logging architecture info if the useGPU option didn't change",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFit/Evaluator.cxx:16,log,logging,16,roofit/roofitcore/src/RooFit/Evaluator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFit/Evaluator.cxx,1,['log'],['logging']
Testability,"// Don't set MaxLookAhead until we find at least one nonzero stage.; // This way, an itinerary with no stages has MaxLookAhead==0, which; // completely bypasses the scoreboard hazard logic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ScoreboardHazardRecognizer.cpp:183,log,logic,183,interpreter/llvm-project/llvm/lib/CodeGen/ScoreboardHazardRecognizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ScoreboardHazardRecognizer.cpp,1,['log'],['logic']
Testability,// Don't split the operation if we can match one of the combined; // logical operations provided by miscellaneous-extensions-3.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelDAGToDAG.cpp:69,log,logical,69,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelDAGToDAG.cpp,1,['log'],['logical']
Testability,// Don't split v2i64 vectors. Memcpy lowering produces those and splitting; // those up regresses performance on micro-benchmarks and olden/bh.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:119,benchmark,benchmarks,119,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['benchmark'],['benchmarks']
Testability,"// Don't use `NotAnd` as even though `not` is generally shorter code size than; // `add`, `add` can lower to LEA which can save moves / spills. Any case where; // `NotAnd` applies, `AddAnd` does as well.; // TODO: Currently we lower (icmp eq/ne (and ~X, Y), 0) -> `test (not X), Y`,; // if we change that to `andn Y, X` it may be worth prefering `NotAnd` here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:265,test,test,265,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['test'],['test']
Testability,// Don't use the allocation hints for ISAFuture.; // The WACC registers used in ISAFuture are unlike the ACC registers on; // Power 10 and so this logic to register allocation hints does not apply.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCRegisterInfo.cpp:147,log,logic,147,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCRegisterInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCRegisterInfo.cpp,1,['log'],['logic']
Testability,"// Don't warn about ""clang -c -DPIC -fPIC test.i"" because libtool.m4 assumes; // that ""The compiler can only warn and ignore the option if not recognized"".; // When building with ccache, it will pass -D options to clang even on; // preprocessed inputs and configure concludes that -fPIC is not supported.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:42,test,test,42,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,1,['test'],['test']
Testability,"// Don't write same same log entry twice when FilePath == Path",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Utils/Paths.cpp:25,log,log,25,interpreter/cling/lib/Utils/Paths.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Utils/Paths.cpp,1,['log'],['log']
Testability,"// Draw Log scale on radial axis if option activated.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/graf/src/TGraphPolargram.cxx:8,Log,Log,8,graf2d/graf/src/TGraphPolargram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/graf/src/TGraphPolargram.cxx,1,['Log'],['Log']
Testability,"// Draw test against passed clipping planes.; // Do before camera clipping on assumption clip planes remove; // more objects.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScene.cxx:8,test,test,8,graf3d/gl/src/TGLScene.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScene.cxx,1,['test'],['test']
Testability,"// Draw the grid only; // test for options BAR or HBAR",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx:26,test,test,26,hist/histpainter/src/THistPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx,1,['test'],['test']
Testability,"// Draw the intermediate LOG grid if only three decades are requested",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/graf/src/TGaxis.cxx:25,LOG,LOG,25,graf2d/graf/src/TGaxis.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/graf/src/TGaxis.cxx,1,['LOG'],['LOG']
Testability,"// Draw the intermediate LOG labels if requested",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/graf/src/TGaxis.cxx:25,LOG,LOG,25,graf2d/graf/src/TGaxis.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/graf/src/TGaxis.cxx,1,['LOG'],['LOG']
Testability,"// Draw three axis rings where permitted; // Not drawing will prevent interaction; // GL name loading for hit testing - 0 reserved for no selection",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLRotateManip.cxx:110,test,testing,110,graf3d/gl/src/TGLRotateManip.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLRotateManip.cxx,1,['test'],['testing']
Testability,"// Draw three axis widgets out of bounding box where permitted; // Not drawing will prevent interaction; // GL name loading for hit testing - 0 reserved for no selection",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScaleManip.cxx:132,test,testing,132,graf3d/gl/src/TGLScaleManip.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScaleManip.cxx,2,['test'],['testing']
Testability,"// Driver for the register assignment and splitting heuristics.; // Manages iteration over the LiveIntervalUnions.; //; // This is a minimal implementation of register assignment and splitting that; // spills whenever we run out of registers.; //; // selectOrSplit can only be called once per live virtual register. We then do a; // single interference test for each register the correct class until we find an; // available register. So, the number of interference tests in the worst case is; // |vregs| * |machineregs|. And since the number of interference tests is; // minimal, there is no value in caching them outside the scope of; // selectOrSplit().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegAllocBasic.cpp:353,test,test,353,interpreter/llvm-project/llvm/lib/CodeGen/RegAllocBasic.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegAllocBasic.cpp,3,['test'],"['test', 'tests']"
Testability,"// Drop logical's DLs",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScene.cxx:8,log,logical,8,graf3d/gl/src/TGLScene.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScene.cxx,1,['log'],['logical']
Testability,// Dummy event that does not require access to counters (for tests).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PerfHelper.h:61,test,tests,61,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PerfHelper.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PerfHelper.h,1,['test'],['tests']
Testability,// Dump the contents of the temp object file gen if the user requested that.; // We support this option to enable testing of behavior with -###.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/HIPUtility.cpp:114,test,testing,114,interpreter/llvm-project/clang/lib/Driver/ToolChains/HIPUtility.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/HIPUtility.cpp,1,['test'],['testing']
Testability,"// During the parsing of the debug information, the logical elements are; // created with information extracted from its description entries (DIE).; // But they are not complete for the logical view concept. A second pass; // is executed in order to collect their additional information.; // The following functions 'resolve' some of their properties, such as; // name, references, parents, extra information based on the element kind.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h:52,log,logical,52,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h,2,['log'],['logical']
Testability,"// During the traversal of the debug information sections, we created the; // logical lines representing the disassembled instructions from the text; // section and the logical lines representing the line records from the; // debug line section. Using the ranges associated with the logical scopes,; // we will allocate those logical lines to their logical scopes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVBinaryReader.cpp:78,log,logical,78,interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVBinaryReader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVBinaryReader.cpp,5,['log'],['logical']
Testability,"// ELFDATANONE is an invalid data encoding, but we accept it because; // we want to be able to produce invalid binaries for the tests.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/ELFYAML.cpp:128,test,tests,128,interpreter/llvm-project/llvm/lib/ObjectYAML/ELFYAML.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/ELFYAML.cpp,1,['test'],['tests']
Testability,// Each jump table must be either ARM or Thumb as a whole for the bit-test math; // to work. Pick one that matches the majority of members to minimize interop; // veneers inserted by the linker.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp:70,test,test,70,interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp,1,['test'],['test']
Testability,// Each logical operand can be multiple MI operands.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/InstrInfoEmitter.cpp:8,log,logical,8,interpreter/llvm-project/llvm/utils/TableGen/InstrInfoEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/InstrInfoEmitter.cpp,1,['log'],['logical']
Testability,"// Each record is represented as a json dictionary with function name,; // type of B for begin or E for end, thread id, process id,; // timestamp in microseconds, and a stack frame id. The ids are logged; // in an id dictionary after the events.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-converter.cpp:197,log,logged,197,interpreter/llvm-project/llvm/tools/llvm-xray/xray-converter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-converter.cpp,1,['log'],['logged']
Testability,"// Each stub uses a single block that can have 2 entryponts, one for Arm and; // one for Thumb",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h:8,stub,stub,8,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h,1,['stub'],['stub']
Testability,"// Earlier stores to this address are effectively deadcode.; // With opaque pointers it is possible for one pointer to be used with; // different sizes of stored values:; // store i32 0, ptr %x; // store i8 0, ptr %x; // The latest store doesn't complitely overwrite the first one in the; // example. That is why we have to make sure that types of stored; // values are same.; // TODO: Check that bitwidth of unhandled store is smaller then the; // one that overwrites it and add a test.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorizationLegality.cpp:482,test,test,482,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorizationLegality.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorizationLegality.cpp,1,['test'],['test']
Testability,// Early exit if both a jump table and bit test are not allowed.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/BasicTTIImpl.h:43,test,test,43,interpreter/llvm-project/llvm/include/llvm/CodeGen/BasicTTIImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/BasicTTIImpl.h,1,['test'],['test']
Testability,// Early exit if errors were found by the code region parsing logic.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/llvm-mca.cpp:62,log,logic,62,interpreter/llvm-project/llvm/tools/llvm-mca/llvm-mca.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/llvm-mca.cpp,1,['log'],['logic']
Testability,// Early exit if errors were found by the instrumentation parsing logic.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/llvm-mca.cpp:66,log,logic,66,interpreter/llvm-project/llvm/tools/llvm-mca/llvm-mca.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/llvm-mca.cpp,1,['log'],['logic']
Testability,// Early test to determine if the intrinsics are used.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUImageIntrinsicOptimizer.cpp:9,test,test,9,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUImageIntrinsicOptimizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUImageIntrinsicOptimizer.cpp,1,['test'],['test']
Testability,// Eat the 'assert' token.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:12,assert,assert,12,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,1,['assert'],['assert']
Testability,"// Either we hit the assert, really have no accesses, or we have both; // accesses and an access list. Same with defs.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MemorySSA.cpp:21,assert,assert,21,interpreter/llvm-project/llvm/lib/Analysis/MemorySSA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MemorySSA.cpp,1,['assert'],['assert']
Testability,"// Else, if we do *NOT* have BMI2, let's find out if the if the 'X' is; // *logically* shifted (potentially with one-use trunc inbetween),; // and the truncation was the only use of the shift,; // and if so look past one-use truncation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp:76,log,logically,76,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,1,['log'],['logically']
Testability,// Emit a ABS32_LO / ABS32_HI relocation stub.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp:41,stub,stub,41,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp,1,['stub'],['stub']
Testability,"// Emit a CMP with 0, which is the TEST pattern.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/M68kISelLowering.cpp:35,TEST,TEST,35,interpreter/llvm-project/llvm/lib/Target/M68k/M68kISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/M68kISelLowering.cpp,4,['TEST'],['TEST']
Testability,"// Emit a CORINFO_EH_CLAUSE :; /*; struct CORINFO_EH_CLAUSE; {; CORINFO_EH_CLAUSE_FLAGS Flags; // actually a CorExceptionFlag; DWORD TryOffset;; DWORD TryLength; // actually TryEndOffset; DWORD HandlerOffset;; DWORD HandlerLength; // actually HandlerEndOffset; union; {; DWORD ClassToken; // use for catch clauses; DWORD FilterOffset; // use for filter clauses; };; };. enum CORINFO_EH_CLAUSE_FLAGS; {; CORINFO_EH_CLAUSE_NONE = 0,; CORINFO_EH_CLAUSE_FILTER = 0x0001, // This clause is for a filter; CORINFO_EH_CLAUSE_FINALLY = 0x0002, // This clause is a finally clause; CORINFO_EH_CLAUSE_FAULT = 0x0004, // This clause is a fault clause; };; typedef enum CorExceptionFlag; {; COR_ILEXCEPTION_CLAUSE_NONE,; COR_ILEXCEPTION_CLAUSE_FILTER = 0x0001, // This is a filter clause; COR_ILEXCEPTION_CLAUSE_FINALLY = 0x0002, // This is a finally clause; COR_ILEXCEPTION_CLAUSE_FAULT = 0x0004, // This is a fault clause; COR_ILEXCEPTION_CLAUSE_DUPLICATED = 0x0008, // duplicated clause. This; // clause was duplicated; // to a funclet which was; // pulled out of line; } CorExceptionFlag;; */; // Add 1 to the start/end of the EH clause; the IP associated with a; // call when the runtime does its scan is the IP of the next instruction; // (the one to which control will return after the call), so we need; // to add 1 to the end of the clause to cover that offset. We also add; // 1 to the start of the clause to make sure that the ranges reported; // for all clauses are disjoint. Note that we'll need some additional; // logic when machine traps are supported, since in that case the IP; // that the runtime uses is the offset of the faulting instruction; // itself; if such an instruction immediately follows a call but the; // two belong to different clauses, we'll need to insert a nop between; // them so the runtime can distinguish the point to which the call will; // return from the point at which the fault occurs.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/WinException.cpp:1515,log,logic,1515,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/WinException.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/WinException.cpp,1,['log'],['logic']
Testability,"// Emit a `RLogEntry` to the RLogHandlers.; // Returns false if further emission of this Log should be suppressed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/RLogger.hxx:89,Log,Log,89,core/foundation/inc/ROOT/RLogger.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/RLogger.hxx,1,['Log'],['Log']
Testability,// Emit a stub for __cfi_check function so that the linker knows about this; // symbol in LTO mode.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:10,stub,stub,10,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,1,['stub'],['stub']
Testability,// Emit a testl or testw.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp:10,test,testl,10,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,2,['test'],"['testl', 'testw']"
Testability,// Emit bit tests and jumps,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:12,test,tests,12,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,1,['test'],['tests']
Testability,// Emit bit tests and jumps.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/IRTranslator.cpp:12,test,tests,12,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/IRTranslator.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/IRTranslator.cpp,1,['test'],['tests']
Testability,// Emit intrinsic responsible for updating the global bitmap corresponding to; // a boolean expression. The index being set is based on the value loaded; // from a pointer to a dedicated temporary value on the stack that is itself; // updated via emitMCDCCondBitmapReset() and emitMCDCCondBitmapUpdate(). The; // index represents an executed test vector.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:342,test,test,342,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,1,['test'],['test']
Testability,// Emit needed stubs; //,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsAsmPrinter.cpp:15,stub,stubs,15,interpreter/llvm-project/llvm/lib/Target/Mips/MipsAsmPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsAsmPrinter.cpp,1,['stub'],['stubs']
Testability,"// Emit the code; // If all cases cover a contiguous range, it is not necessary to jump to; // the default block after the last bit test fails. This is because the; // range check during bit test header creation has guaranteed that every; // case here doesn't go outside the range. In this case, there is no need; // to perform the last bit test, as it will always be true. Instead, make; // the second-to-last bit-test fall through to the target of the last bit; // test, and delete the last bit test.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:132,test,test,132,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,6,['test'],['test']
Testability,// Emit the loop body: Convert the logical iteration number to the loop; // variable and emit the body.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:35,log,logical,35,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,1,['log'],['logical']
Testability,// Emit the test for the real part becoming NaN and create a branch to; // handle it. We test for NaN by comparing the number to itself.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprComplex.cpp:12,test,test,12,interpreter/llvm-project/clang/lib/CodeGen/CGExprComplex.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprComplex.cpp,2,['test'],['test']
Testability,// Empirical tests suggest this is rarely worth it for vectors of length <= 2.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:13,test,tests,13,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['test'],['tests']
Testability,"// Empty file to test TProof::Load in runProof.C and StressProof.cxx in; // conjunction with ProcFileElements and ProofEventProc .",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/proof/EmptyInclude.h:17,test,test,17,tutorials/proof/EmptyInclude.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/proof/EmptyInclude.h,1,['test'],['test']
Testability,"// Enable fast-isel for any target, for testing only.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMSubtarget.cpp:40,test,testing,40,interpreter/llvm-project/llvm/lib/Target/ARM/ARMSubtarget.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMSubtarget.cpp,1,['test'],['testing']
Testability,// Enable testing of whole program devirtualization on this module by invoking; // the facility for updating public visibility to linkage unit visibility when; // specified by an internal option. This is normally done during LTO which is; // not performed via opt.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt/opt.cpp:10,test,testing,10,interpreter/llvm-project/llvm/tools/opt/opt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt/opt.cpp,1,['test'],['testing']
Testability,"// Enable the required test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:23,test,test,23,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['test'],['test']
Testability,"// Enable the required tests",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:23,test,tests,23,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['test'],['tests']
Testability,// Enable this assertion for testing.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprClassification.cpp:15,assert,assertion,15,interpreter/llvm-project/clang/lib/AST/ExprClassification.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprClassification.cpp,2,"['assert', 'test']","['assertion', 'testing']"
Testability,// Enable vectorization per default according to the optimization level; // selected. For optimization levels that want vectorization we use the alias; // option to simplify the hasFlag logic.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:186,log,logic,186,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,1,['log'],['logic']
Testability,"// Enabling or Disabling the latency heuristic is a close call: It seems to; // help nearly no benchmark on out-of-order architectures, on the other hand; // it regresses register pressure on a few benchmarking.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64Subtarget.cpp:95,benchmark,benchmark,95,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64Subtarget.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64Subtarget.cpp,2,['benchmark'],"['benchmark', 'benchmarking']"
Testability,// Encapsulate the logic around creation/insertion/etc of a new block.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/BasicBlockUtils.cpp:19,log,logic,19,interpreter/llvm-project/llvm/lib/Transforms/Utils/BasicBlockUtils.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/BasicBlockUtils.cpp,1,['log'],['logic']
Testability,// Encode the immadiate value for generated Stub instruction (MOVZ),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/Targets/RuntimeDyldCOFFAArch64.h:44,Stub,Stub,44,interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/Targets/RuntimeDyldCOFFAArch64.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/Targets/RuntimeDyldCOFFAArch64.h,1,['Stub'],['Stub']
Testability,"// End NS Internal; //////////////////////////////////////////////////////////////////////////; /// \brief Class constructor.; /// If the scheduler is active (e.g. because another TThreadExecutor is in flight, or ROOT::EnableImplicitMT() was; /// called), work with the current pool of threads.; /// If not, initialize the pool of threads, spawning nThreads. nThreads' default value, 0, initializes the; /// pool with as many logical threads as are available in the system (see NLogicalCores in RTaskArenaWrapper.cxx).; ///; /// At construction time, TThreadExecutor automatically enables ROOT's thread-safety locks as per calling; /// ROOT::EnableThreadSafety().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/imt/src/TThreadExecutor.cxx:426,log,logical,426,core/imt/src/TThreadExecutor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/imt/src/TThreadExecutor.cxx,1,['log'],['logical']
Testability,"// End anonymous namespace.; /// Model a call to an un-inlined AssertionResult(bool) or; /// AssertionResult(bool &, ...).; /// To do so, constrain the value of the newly-constructed instance's 'success_'; /// field to be equal to the passed-in boolean value.; ///; /// \param IsRef Whether the boolean parameter is a reference or not.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/GTestChecker.cpp:63,Assert,AssertionResult,63,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/GTestChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/GTestChecker.cpp,2,['Assert'],['AssertionResult']
Testability,"// End: Loop Over Attributes; // Based on the input, determine; // if we should use a histogram or not:; // Logic: One turns on using a histogram; // by setting the attribute ""HistoName""; // If this is set AND the InputFile or; // HistoPath aren't set, we set those; // to the current default values",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/ConfigParser.cxx:108,Log,Logic,108,roofit/histfactory/src/ConfigParser.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/ConfigParser.cxx,1,['Log'],['Logic']
Testability,"// Endianness of the input value profile data.; // It should be LE by default, but can be changed; // for testing purpose.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfReader.h:106,test,testing,106,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfReader.h,1,['test'],['testing']
Testability,// Enforce the algorithm to use the scavenged register even when the original; // destination register is the correct color. Used for testing.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp:134,test,testing,134,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp,1,['test'],['testing']
Testability,// Ensure MOVMSK was testing every signbit of BC.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:21,test,testing,21,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['test'],['testing']
Testability,// Ensure both alignment and source value have the same bit width so that we; // don't assert when computing the resulting value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp:87,assert,assert,87,interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,1,['assert'],['assert']
Testability,// Ensure each test has a unique name by numbering them.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp:15,test,test,15,interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp,1,['test'],['test']
Testability,"// Ensure either we have different ABIs between host and device compilations,; // says host compilation following MSVC ABI but device compilation follows; // Itanium C++ ABI or, if they follow the same ABI, kernel names after; // mangling should be the same after name stubbing. The later checking is; // very important as the device kernel name being mangled in host-compilation; // is used to resolve the device binaries to be executed. Inconsistent naming; // result in undefined behavior. Even though we cannot check that naming; // directly between host- and device-compilations, the host- and; // device-mangling in host compilation could help catching certain ones.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:269,stub,stubbing,269,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,1,['stub'],['stubbing']
Testability,"// Ensure that the PHI nodes are all grouped together at the top of the block.; // This can be tested by checking whether the instruction before this is; // either nonexistent (because this is begin()) or is a PHI node. If not,; // then there is some other instruction before a PHI.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Verifier.cpp:95,test,tested,95,interpreter/llvm-project/llvm/lib/IR/Verifier.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Verifier.cpp,1,['test'],['tested']
Testability,// Ensure that the bit width of the constants are the same and that; // the splat arguments are logical inverses as per the pattern we; // are trying to simplify.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp:96,log,logical,96,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,1,['log'],['logical']
Testability,"// Ensure we always have a single empty entry, it simplifies the emission; // logic so it doesn't need to handle the case where there are no perms.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp:78,log,logic,78,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp,1,['log'],['logic']
Testability,// Ensure we don't have inconsistently split LTO units with type tests.; // FIXME: this checks both LTO and ThinLTO. It happens to work as we take; // this path both cases but eventually this should be split into two and; // do the ThinLTO checks in `runThinLTO`.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/LTO/LTO.cpp:65,test,tests,65,interpreter/llvm-project/llvm/lib/LTO/LTO.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/LTO/LTO.cpp,1,['test'],['tests']
Testability,"// Ensure we only shuffle whole vector src elements, unless its a logical; // binops where we can more aggressively move shuffles from dst to src.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:66,log,logical,66,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['log'],['logical']
Testability,// Entrypoint to generate the functions for testing all OpenCL builtin; // functions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp:44,test,testing,44,interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp,2,['test'],['testing']
Testability,"// Enum constructor, asserts if Value cannot be represented as intmax_t.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Sequence.h:21,assert,asserts,21,interpreter/llvm-project/llvm/include/llvm/ADT/Sequence.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Sequence.h,1,['assert'],['asserts']
Testability,"// Epilogue vectorization code has not been auditted to ensure it handles; // non-latch exits properly. It may be fine, but it needs auditted and; // tested.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:150,test,tested,150,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,1,['test'],['tested']
Testability,// Equality operator for unit testing.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h:30,test,testing,30,interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h,1,['test'],['testing']
Testability,"// Equality test.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/textinput/src/textinput/Color.h:12,test,test,12,core/textinput/src/textinput/Color.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/textinput/src/textinput/Color.h,1,['test'],['test']
Testability,"// Equals - Test if the profile for X would match ID, using TempID; // to compute a temporary ID if necessary. The default implementation; // just calls Profile and does a regular comparison. Implementations; // can override this to provide more efficient implementations.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h:12,Test,Test,12,interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h,1,['Test'],['Test']
Testability,"// Equivalent to ""A EqP B"". This may be the same as the condition tested; // in the max/min; if so, we can just return that.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp:66,test,tested,66,interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,2,['test'],['tested']
Testability,"// Equivalent to ""A InvEqP B"". This may be the same as the condition; // tested in the max/min; if so, we can just return that.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp:73,test,tested,73,interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,2,['test'],['tested']
Testability,// Erase the $gp operand if this isn't the first time a function has; // been called. $gp needs to be set up only if the function call can go; // through a lazy binding stub.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsOptimizePICCall.cpp:169,stub,stub,169,interpreter/llvm-project/llvm/lib/Target/Mips/MipsOptimizePICCall.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsOptimizePICCall.cpp,1,['stub'],['stub']
Testability,"// Error handler streams error-level messages to client log",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/src/REveManager.cxx:56,log,log,56,graf3d/eve7/src/REveManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/src/REveManager.cxx,1,['log'],['log']
Testability,"// Error should go down faster than 0.5^nSteps because the integrator uses series acceleration,; // so test if it goes down faster than 0.333^nSteps",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRombergIntegrator.cxx:103,test,test,103,roofit/roofitcore/test/testRooRombergIntegrator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRombergIntegrator.cxx,1,['test'],['test']
Testability,// Estimated cost of a load-hit-store delay. This was obtained; // experimentally as a minimum needed to prevent unprofitable; // vectorization for the paq8p benchmark. It may need to be; // raised further if other unprofitable cases remain.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCTargetTransformInfo.cpp:158,benchmark,benchmark,158,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCTargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCTargetTransformInfo.cpp,1,['benchmark'],['benchmark']
Testability,"// Eval on Testing set",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CrossValidation.cxx:11,Test,Testing,11,tmva/tmva/src/CrossValidation.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CrossValidation.cxx,1,['Test'],['Testing']
Testability,"// EvalLog protects against 0 values of fval but don't want to add in the -log sum; // negative values of fval",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/FitUtil.h:75,log,log,75,math/mathcore/inc/Fit/FitUtil.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/FitUtil.h,2,['log'],['log']
Testability,"// Evaluate a call to stub_addr/got_addr.; // Look up and return the address of the stub for the given; // (<file name>, <section name>, <symbol name>) tuple.; // On success, returns a pair containing the stub address, plus the expression; // remaining to be evaluated.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldChecker.cpp:84,stub,stub,84,interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldChecker.cpp,2,['stub'],['stub']
Testability,// Evaluating the test vector bitmap for the decision region entails; // calculating precisely what bits are pertinent to this region alone.; // This is calculated based on the recorded offset into the global; // profile bitmap; the length is calculated based on the recorded; // number of conditions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp:18,test,test,18,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,1,['test'],['test']
Testability,"// Evaluation error logging",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h:20,log,logging,20,roofit/roofitcore/inc/RooAbsReal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h,1,['log'],['logging']
Testability,"// Even if the streamerInfo exist, it could still need to be 'build'; // It is important to figure this out, because; // a) if it is not build, we need to build; // b) if is build, we should not build it (or we could end up in an; // infinite loop, if the element and its counter are in the same; // class!; // Checking IsCompiled is sufficient here even-though it is set only at; // the end of the call to Build as this function has an; // internal recursion prevention (setting and testing kBuildRunning).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TVirtualStreamerInfo.cxx:484,test,testing,484,core/meta/src/TVirtualStreamerInfo.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TVirtualStreamerInfo.cxx,1,['test'],['testing']
Testability,"// Even though the logic below is general enough and can be applied to; // non-OpenCL mode too, we fast-path above because no other languages; // define overlapping address spaces currently.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCast.cpp:19,log,logic,19,interpreter/llvm-project/clang/lib/Sema/SemaCast.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCast.cpp,1,['log'],['logic']
Testability,"// Even though this code does not necessarily needs the base pointer to; // be ESI, we check for that. The reason: if this assert fails, there are; // some changes happened in the compiler base pointer handling, which most; // probably have to be addressed somehow here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:123,assert,assert,123,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['assert'],['assert']
Testability,"// Even though, for simplicity, parentheses and unary logical-NOT operators; // are considered part of their underlying condition for both MC/DC and; // branch coverage, the condition IDs themselves are assigned and tracked; // using the underlying condition itself. This is done solely for; // consistency since parentheses and logical-NOTs are ignored when checking; // whether the condition is actually an instrumentable condition. This can; // also make debugging a bit easier.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:54,log,logical-NOT,54,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,2,['log'],"['logical-NOT', 'logical-NOTs']"
Testability,// Events generated by the Dispatch logic.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HWEventListener.h:36,log,logic,36,interpreter/llvm-project/llvm/include/llvm/MCA/HWEventListener.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HWEventListener.h,1,['log'],['logic']
Testability,"// Eventually loop over the list of gracefully terminated workers: we'll get; // logfiles from those workers as well. They'll be shown with a special; // status of ""2""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:81,log,logfiles,81,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,1,['log'],['logfiles']
Testability,"// Every call to saveSetjmp can change setjmpTable and setjmpTableSize; // (when buffer reallocation occurs); // entry:; // setjmpTableSize = 4;; // setjmpTable = (int *) malloc(40);; // setjmpTable[0] = 0;; // ...; // somebb:; // setjmpTable = saveSetjmp(env, label, setjmpTable, setjmpTableSize);; // setjmpTableSize = getTempRet0();; // So we need to make sure the SSA for these variables is valid so that every; // saveSetjmp and testSetjmp calls have the correct arguments.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyLowerEmscriptenEHSjLj.cpp:434,test,testSetjmp,434,interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyLowerEmscriptenEHSjLj.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyLowerEmscriptenEHSjLj.cpp,1,['test'],['testSetjmp']
Testability,"// Every instance of a RooAbsCache or inherigin class that is the member of; // a RooFit arg is automatically added to the RooAbsArg::_cacheList data; // member by reference.; //; // This test makes sure that the _cacheList still has the correct pointers; // after reading back a RooFit model. Now that the RooAbsCache and child; // classes don't take part in the IO anymore it should be no problem, but in; // the past there were inconsistencies.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooCacheManager.cxx:188,test,test,188,roofit/roofitcore/test/testRooCacheManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooCacheManager.cxx,1,['test'],['test']
Testability,"// Exectute the command saving the logs to macro",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:35,log,logs,35,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,3,['log'],['logs']
Testability,"// Execute a python stand-alone script, with argv CLI arguments.; //; // example of use:; // CPyCppyy::ExecScript(""test.py"", {""1"", ""2"", ""3""});",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/API.cxx:115,test,test,115,bindings/pyroot/cppyy/CPyCppyy/src/API.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/API.cxx,1,['test'],['test']
Testability,"// Execute logon macro",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/rint/src/TRint.cxx:11,log,logon,11,core/rint/src/TRint.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/rint/src/TRint.cxx,4,['log'],['logon']
Testability,"// Exhaustively test, for all valid bit widths, packing and unpacking of 0 to N random doubles.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/ntuple_packing.cxx:16,test,test,16,tree/ntuple/v7/test/ntuple_packing.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/ntuple_packing.cxx,2,['test'],['test']
Testability,"// Exhaustively test, for all valid bit widths, packing and unpacking of 0 to N random floats.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/ntuple_packing.cxx:16,test,test,16,tree/ntuple/v7/test/ntuple_packing.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/ntuple_packing.cxx,2,['test'],['test']
Testability,"// Exiting early, but still log all non-existant paths that we have",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Utils/Paths.cpp:28,log,log,28,interpreter/cling/lib/Utils/Paths.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Utils/Paths.cpp,1,['log'],['log']
Testability,"// Expand into a bunch of logical ops, followed by a select_cc.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:26,log,logical,26,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,1,['log'],['logical']
Testability,// Expand into a bunch of logical ops. Note that these ops; // depend on the PPC behavior for oversized shift amounts.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:26,log,logical,26,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,2,['log'],['logical']
Testability,// Expand pseudo logical vector instructions for VM512 registers.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/VE/VEInstrInfo.cpp:17,log,logical,17,interpreter/llvm-project/llvm/lib/Target/VE/VEInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/VE/VEInstrInfo.cpp,1,['log'],['logical']
Testability,// Expand reduction intrinsics into shuffle sequences if the target wants to.; // Allow disabling it for testing purposes.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TargetPassConfig.cpp:105,test,testing,105,interpreter/llvm-project/llvm/lib/CodeGen/TargetPassConfig.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TargetPassConfig.cpp,1,['test'],['testing']
Testability,"// Explain 'this' object here - if it's not wrapped by an ElementRegion.; // TODO: Explain CXXThisRegion itself, find a way to test it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Checkers/SValExplainer.h:127,test,test,127,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Checkers/SValExplainer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Checkers/SValExplainer.h,1,['test'],['test']
Testability,// Exposed for resource monitoring & error feedback via renderer.info:,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:15,resource monitor,resource monitoring,15,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['resource monitor'],['resource monitoring']
Testability,"// Extract the run of set bits starting with bit zero from the bitwise; // inverse of ImmValue, and test that the inverse of this is the same; // as the original value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsSEISelDAGToDAG.cpp:100,test,test,100,interpreter/llvm-project/llvm/lib/Target/Mips/MipsSEISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsSEISelDAGToDAG.cpp,1,['test'],['test']
Testability,"// Extract the run of set bits starting with bit zero, and test that the; // result is the same as the original value",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsSEISelDAGToDAG.cpp:59,test,test,59,interpreter/llvm-project/llvm/lib/Target/Mips/MipsSEISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsSEISelDAGToDAG.cpp,1,['test'],['test']
Testability,"// Extrusion case. Test vol2 extrude vol1.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geompainter/src/TGeoChecker.cxx:19,Test,Test,19,geom/geompainter/src/TGeoChecker.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geompainter/src/TGeoChecker.cxx,1,['Test'],['Test']
Testability,"// F I N D X - , Y - , Z - C R I T I C A L; // This logic works for parallel projection only.; // For central projection another logic should be implemented.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/TPainter3dAlgorithms.cxx:52,log,logic,52,hist/histpainter/src/TPainter3dAlgorithms.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/TPainter3dAlgorithms.cxx,2,['log'],['logic']
Testability,// FADD is commutable. Try to commute the operands; // and then test again.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:64,test,test,64,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['test'],['test']
Testability,// FIXME (Alex L): Test for BlockDecl.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Refactoring/ASTSelection.cpp:19,Test,Test,19,interpreter/llvm-project/clang/lib/Tooling/Refactoring/ASTSelection.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Refactoring/ASTSelection.cpp,1,['Test'],['Test']
Testability,"// FIXME : Register with Stub Address, after JITLink Fix.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Speculation.h:25,Stub,Stub,25,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Speculation.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Speculation.h,1,['Stub'],['Stub']
Testability,"// FIXME(ibiryukov): handle the missing op, re-add the assertion.; // assert(false && ""unhandled binary op"");",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp:55,assert,assertion,55,interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp,2,['assert'],"['assert', 'assertion']"
Testability,"// FIXME: ""generic"" is more modern than llc tests expect.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86Subtarget.cpp:44,test,tests,44,interpreter/llvm-project/llvm/lib/Target/X86/X86Subtarget.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86Subtarget.cpp,1,['test'],['tests']
Testability,"// FIXME: #pragma clang attribute does not currently support statement; // attributes, so test whether the subject is one that appertains to a; // declaration node. However, it may be reasonable for support for statement; // attributes to be added.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp:90,test,test,90,interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp,1,['test'],['test']
Testability,"// FIXME: A decl meant to be added in the lookup already exists; // in the lookup table. My assumption is that the DeclUnloader; // adds it here. This needs to be investigated mode. For now; // std::find gets promoted from assert to condition :); // DeclContext::lookup_result::iterator is not an InputIterator; // (const member, thus no op=(const iterator&)), thus we cannot use; // std::find. MSVC actually cares!",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/DeclUnloader.cpp:223,assert,assert,223,interpreter/cling/lib/Interpreter/DeclUnloader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/DeclUnloader.cpp,1,['assert'],['assert']
Testability,// FIXME: A number of transformation tests seem to require these values; // which seems a little odd for how arbitary there are.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfoImpl.h:37,test,tests,37,interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfoImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfoImpl.h,1,['test'],['tests']
Testability,"// FIXME: ARM looks for a case where the block containing the compare; // has been split from the block containing the branch. If this happens,; // there is a vreg available containing the result of the compare. I'm; // not sure we can do much, as we've lost the predicate information with; // the compare instruction -- we have a 4-bit CR but don't know which bit; // to test here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCFastISel.cpp:372,test,test,372,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCFastISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCFastISel.cpp,1,['test'],['test']
Testability,// FIXME: Add assert to check FixIts range requirements.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h:14,assert,assert,14,interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,1,['assert'],['assert']
Testability,// FIXME: Add assertions about ConvCall.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVVMReflect.cpp:14,assert,assertions,14,interpreter/llvm-project/llvm/lib/Target/NVPTX/NVVMReflect.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVVMReflect.cpp,1,['assert'],['assertions']
Testability,// FIXME: Add logging.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexCodeCompletion.cpp:14,log,logging,14,interpreter/llvm-project/clang/tools/libclang/CIndexCodeCompletion.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexCodeCompletion.cpp,1,['log'],['logging']
Testability,"// FIXME: Add other base types after adding tests.; // It's OK to always overwrite the bound nodes, as if there was; // no match in this recursive branch, the result set is empty; // anyway.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp:44,test,tests,44,interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp,1,['test'],['tests']
Testability,// FIXME: Add test for the nullptr case.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Refactoring/Rename/USRFinder.cpp:14,test,test,14,interpreter/llvm-project/clang/lib/Tooling/Refactoring/Rename/USRFinder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Refactoring/Rename/USRFinder.cpp,1,['test'],['test']
Testability,// FIXME: Add tests for Point == End.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Refactoring/Rename/USRFinder.cpp:14,test,tests,14,interpreter/llvm-project/clang/lib/Tooling/Refactoring/Rename/USRFinder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Refactoring/Rename/USRFinder.cpp,1,['test'],['tests']
Testability,"// FIXME: Add tests that excercise CK_UncheckedDerivedToBase,; // CK_ConstructorConversion, and CK_UserDefinedConversion.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/Transfer.cpp:14,test,tests,14,interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/Transfer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/Transfer.cpp,1,['test'],['tests']
Testability,"// FIXME: Add this assertion to make sure we always get instantiation points.; // assert(!Loc.isInvalid() && ""Invalid location in RequireCompleteType"");; // FIXME: Add this assertion to help us flush out problems with; // checking for dependent types and type-dependent expressions.; //; // assert(!T->isDependentType() &&; // ""Can't ask whether a dependent type is complete"");",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp:19,assert,assertion,19,interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,4,['assert'],"['assert', 'assertion']"
Testability,"// FIXME: After switching to the new passmanager, simplify the logic below; // by checking only the callsite hotness/coldness as we will reliably; // have local profile information.; //; // Callsite hotness and coldness can be determined if sample profile is; // used (which adds hotness metadata to calls) or if caller's; // BlockFrequencyInfo is available.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InlineCost.cpp:63,log,logic,63,interpreter/llvm-project/llvm/lib/Analysis/InlineCost.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InlineCost.cpp,1,['log'],['logic']
Testability,"// FIXME: Although all systems tested with (Linux, OS X), do not need this; // header file included. A user on ubuntu reported, undefined symbols; // for stderr, and fprintf, and the addition of this include fixed the; // issue for them. Given that LLVM's best practices include the goal; // of reducing the number of redundant header files included, the; // correct solution would be to find out why these symbols are not; // defined for the system in question, and fix the issue by finding out; // which LLVM header file, if any, would include these symbols.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:31,test,tested,31,interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,1,['test'],['tested']
Testability,"// FIXME: An STL container as a base class gets TStreamerSTL as its class, so this test is not enough.; // See InitializeOffsets() for the proper test.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranchElement.cxx:83,test,test,83,tree/tree/src/TBranchElement.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranchElement.cxx,2,['test'],['test']
Testability,"// FIXME: Assert during selection that this is only selected for; // ieee_mode. Currently a combine can produce the ieee version for non-ieee; // mode functions, but this happens to be OK since it's only done in cases; // where there is known no sNaN.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp:10,Assert,Assert,10,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp,1,['Assert'],['Assert']
Testability,"// FIXME: Assert that Opcode is either InsertElement or ExtractElement.; // This is mentioned in the interface description and respected by all; // callers, but never asserted upon.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/TargetTransformInfo.cpp:10,Assert,Assert,10,interpreter/llvm-project/llvm/lib/Analysis/TargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/TargetTransformInfo.cpp,4,"['Assert', 'assert']","['Assert', 'asserted']"
Testability,// FIXME: Assert that `LParenToken` is indeed a `l_paren` once we have fixed; // the test on decltype desctructors.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Syntax/BuildTree.cpp:10,Assert,Assert,10,interpreter/llvm-project/clang/lib/Tooling/Syntax/BuildTree.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Syntax/BuildTree.cpp,2,"['Assert', 'test']","['Assert', 'test']"
Testability,// FIXME: Assert that `LParenToken` is indeed a `l_paren` once we have; // fixed the test on decltype desctructors.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Syntax/BuildTree.cpp:10,Assert,Assert,10,interpreter/llvm-project/clang/lib/Tooling/Syntax/BuildTree.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Syntax/BuildTree.cpp,2,"['Assert', 'test']","['Assert', 'test']"
Testability,"// FIXME: Assertion temporarily disabled due to a bug in; // ASTMatcher internal behavior in presence of GNU; // statement-expressions. We need to properly investigate this; // because it can screw up our algorithm in other ways.; // assert(Defs.count(VD) == 0 && ""Definition already discovered!"");",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp:10,Assert,Assertion,10,interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,2,"['Assert', 'assert']","['Assertion', 'assert']"
Testability,// FIXME: Can the logic below also be used for these cost kinds?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZTargetTransformInfo.cpp:18,log,logic,18,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZTargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZTargetTransformInfo.cpp,1,['log'],['logic']
Testability,// FIXME: Can this actually happen? We have no test coverage for it.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp:47,test,test,47,interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp,1,['test'],['test']
Testability,// FIXME: Can this assert ever happen? Needs a test.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp:19,assert,assert,19,interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,2,"['assert', 'test']","['assert', 'test']"
Testability,"// FIXME: Can't test RAxisGrow::Grow() as this method is not implemented.; // Once it's implemented, please factor out commonalities with; // the RAxisGrow test.; // Now let's add some new bins",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/axis.cxx:16,test,test,16,hist/histv7/test/axis.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/axis.cxx,2,['test'],['test']
Testability,"// FIXME: Can't test RAxisGrow::Grow() as this method is not implemented.; // Once it's implemented, please factor out commonalities with; // the RAxisLabels test.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/axis.cxx:16,test,test,16,hist/histv7/test/axis.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/axis.cxx,2,['test'],['test']
Testability,"// FIXME: Come up with a sane mapping of state to; // presence-of-MaterializingInfo so that we can assert presence / absence; // here, rather than testing it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/Core.cpp:99,assert,assert,99,interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/Core.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/Core.cpp,2,"['assert', 'test']","['assert', 'testing']"
Testability,"// FIXME: Consider an option to allow short exception handling clauses on; // a single line.; // FIXME: This isn't covered by tests.; // FIXME: For catch, __except, __finally the first token on the line; // is '}', so this isn't correct here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/UnwrappedLineFormatter.cpp:126,test,tests,126,interpreter/llvm-project/clang/lib/Format/UnwrappedLineFormatter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/UnwrappedLineFormatter.cpp,1,['test'],['tests']
Testability,"// FIXME: Converting constructors should also be accepted.; // But to fix this, the logic that digs down into a CXXConstructExpr; // to find the source object needs to handle it.; // Right now it assumes the source object is passed directly as the; // first argument.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp:84,log,logic,84,interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,1,['log'],['logic']
Testability,"// FIXME: Currently we can't recognize temporary or local symbols and call all; // of the appropriate forms to create them. However, this handles basic cases; // well as most of the special aspects are recognized by a prefix on their; // name, and the input names should already be unique. For test cases, keeping; // the symbol name out of the symbol table isn't terribly important.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MIRParser/MIParser.cpp:294,test,test,294,interpreter/llvm-project/llvm/lib/CodeGen/MIRParser/MIParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MIRParser/MIParser.cpp,1,['test'],['test']
Testability,// FIXME: Deleting the `TraverseParenTypeLoc` override doesn't change test; // results. Find test coverage or remove it.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Syntax/BuildTree.cpp:70,test,test,70,interpreter/llvm-project/clang/lib/Tooling/Syntax/BuildTree.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Syntax/BuildTree.cpp,2,['test'],['test']
Testability,"// FIXME: Dirty hack for apparent invariant that doesn't hold when; // subreg_to_reg is coalesced with ordinary copies, such that the bits that; // were asserted as 0 are now undef.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp:153,assert,asserted,153,interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp,1,['assert'],['asserted']
Testability,"// FIXME: Do we need the other base class tests here?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranchElement.cxx:42,test,tests,42,tree/tree/src/TBranchElement.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranchElement.cxx,1,['test'],['tests']
Testability,"// FIXME: Do we need to use the other tests for a base class here?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranchElement.cxx:38,test,tests,38,tree/tree/src/TBranchElement.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranchElement.cxx,1,['test'],['tests']
Testability,"// FIXME: Enable feature predicate checks once all the test pass.; // AMDGPU_MC::verifyInstructionPredicates(MI->getOpcode(),; // getSubtargetInfo().getFeatureBits());",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUMCInstLower.cpp:55,test,test,55,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUMCInstLower.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUMCInstLower.cpp,1,['test'],['test']
Testability,"// FIXME: Enable feature predicate checks once all the test pass.; // Mips_MC::verifyInstructionPredicates(MI->getOpcode(),; // getSubtargetInfo().getFeatureBits());",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsAsmPrinter.cpp:55,test,test,55,interpreter/llvm-project/llvm/lib/Target/Mips/MipsAsmPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsAsmPrinter.cpp,1,['test'],['test']
Testability,"// FIXME: Enable feature predicate checks once all the test pass.; // X86_MC::verifyInstructionPredicates(MI->getOpcode(),; // Subtarget->getFeatureBits());",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86MCInstLower.cpp:55,test,test,55,interpreter/llvm-project/llvm/lib/Target/X86/X86MCInstLower.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86MCInstLower.cpp,1,['test'],['test']
Testability,"// FIXME: Enable this once we have a good control on the ownership.; //assert(m_Module.use_count() <= 1 && ""There is still a reference!"");",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/Transaction.cpp:71,assert,assert,71,interpreter/cling/lib/Interpreter/Transaction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/Transaction.cpp,1,['assert'],['assert']
Testability,"// FIXME: Fails for r600 tests; //assert(!isVarArg && Outs.empty() && OutVals.empty() &&; // ""wave terminate should not have return values"");",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUISelLowering.cpp:25,test,tests,25,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUISelLowering.cpp,2,"['assert', 'test']","['assert', 'tests']"
Testability,// FIXME: Figure out how to unify with namespace init_convenience from; // tools/clang-import-test/clang-import-test.cpp,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Interpreter/Interpreter.cpp:94,test,test,94,interpreter/llvm-project/clang/lib/Interpreter/Interpreter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Interpreter/Interpreter.cpp,2,['test'],['test']
Testability,// FIXME: Find best threshold value (benchmark).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp:37,benchmark,benchmark,37,interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp,1,['benchmark'],['benchmark']
Testability,"// FIXME: Fix a dependency issue by instantiating the ABI object to some; // default based off the triple. The triple doesn't describe the target; // fully, but any external user of the API that uses the MCTargetStreamer; // would otherwise crash on assertion failure.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MCTargetDesc/MipsTargetStreamer.cpp:250,assert,assertion,250,interpreter/llvm-project/llvm/lib/Target/Mips/MCTargetDesc/MipsTargetStreamer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MCTargetDesc/MipsTargetStreamer.cpp,1,['assert'],['assertion']
Testability,// FIXME: Hack. We rely on AssertZext to be able to fold DS addressing; // modes on SI to know the high bits are 0 so pointer adds don't wrap. We; // can't represent this with range metadata because it's only allowed for; // integer types.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerKernelArguments.cpp:27,Assert,AssertZext,27,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerKernelArguments.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerKernelArguments.cpp,1,['Assert'],['AssertZext']
Testability,// FIXME: Handle #assert,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/PPExpressions.cpp:18,assert,assert,18,interpreter/llvm-project/clang/lib/Lex/PPExpressions.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/PPExpressions.cpp,1,['assert'],['assert']
Testability,"// FIXME: Handle cases, where the cling is part of a library/framework.; // There we can't rely on the find executable logic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/CIFactory.cpp:119,log,logic,119,interpreter/cling/lib/Interpreter/CIFactory.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/CIFactory.cpp,1,['log'],['logic']
Testability,"// FIXME: Here, the offset of the start of the line is supposed to be; // expressed in terms of the original input not the ""real"" rewrite; // buffer. How do we compute that reliably? It might be tempting to use; // curLineStartOffs + OrigOffset - RealOffset, but that assumes the; // difference between the original and real offset is the same at the; // removed text and at the start of the line, but that's not true if; // edits were previously made earlier on the line. This bug is also; // documented by a FIXME on the definition of; // clang::Rewriter::RewriteOptions::RemoveLineIfEmpty. A reproducer for; // the implementation below is the test RemoveLineIfEmpty in; // clang/unittests/Rewrite/RewriteBufferTest.cpp.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Rewrite/Rewriter.cpp:646,test,test,646,interpreter/llvm-project/clang/lib/Rewrite/Rewriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Rewrite/Rewriter.cpp,1,['test'],['test']
Testability,"// FIXME: I don't think NumCmps is the correct metric: a single case and a; // range of cases both require only one branch to lower. Just looking at the; // number of clusters and destinations should be enough to decide whether to; // build bit tests.; // To lower a range with bit tests, the range must fit the bitwidth of a; // machine word.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:245,test,tests,245,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,2,['test'],['tests']
Testability,"// FIXME: I doubt that it is correct to resolve a dangling DbgValue as a; // FuncArgumentDbgValue (it would be hoisted to the function entry, and if; // we couldn't resolve it directly when examining the DbgValue intrinsic; // in the first place we should not be more successful here). Unless we; // have some test case that prove this to be correct we should avoid; // calling EmitFuncArgumentDbgValue here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:310,test,test,310,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,1,['test'],['test']
Testability,"// FIXME: I would like to be convinced that this code is worth being as; // complicated as it is, binary search isn't that slow.; //; // If it is worth being optimized, then in my opinion it could be more; // performant, simpler, and more obviously correct by just ""galloping"" outward; // from the queried file position. In fact, this could be incorporated into a; // generic algorithm such as lower_bound_with_hint.; //; // If someone gives me a test case where this matters, and I will do it! - DWD; // If the previous query was to the same file, we know both the file pos from; // that query and the line number returned. This allows us to narrow the; // search space from the entire file to something near the match.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp:447,test,test,447,interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,1,['test'],['test']
Testability,"// FIXME: If LPtrToVoid, we should presumably convert the LHS rather than; // the RHS, but we have test coverage for this behavior.; // FIXME: Consider using convertPointersToCompositeType in C++.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:99,test,test,99,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['test'],['test']
Testability,"// FIXME: If RelType == COFF::IMAGE_REL_AMD64_ADDR32NB we should be able; // to ignore the __ImageBase requirement and just forward to the stub; // directly as an offset of this section:; // write32BitOffset(Section.getAddressWithOffset(Offset), 0, StubOffset);; // .xdata exception handler's aren't having this though.; // Resolve original relocation to stub function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/Targets/RuntimeDyldCOFFX86_64.h:139,stub,stub,139,interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/Targets/RuntimeDyldCOFFX86_64.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/Targets/RuntimeDyldCOFFX86_64.h,3,"['Stub', 'stub']","['StubOffset', 'stub']"
Testability,"// FIXME: If the offset won't fit in 24-bits, compute the offset into a; // scratch register. If DestReg is a virtual register, use it as the; // scratch register; otherwise, create a new virtual register (to be; // replaced by the scavenger at the end of PEI). That case can be optimized; // slightly if DestReg is SP which is always 16-byte aligned, so the scratch; // register can be loaded with offset%8 and the add/sub can use an extending; // instruction with LSL#3.; // Currently the function handles any offsets but generates a poor sequence; // of code.; // assert(Offset < (1 << 24) && ""unimplemented reg plus immediate"");",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp:567,assert,assert,567,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,1,['assert'],['assert']
Testability,// FIXME: If the operand types don't match the type of the divide; // then don't attempt this transform. The code below doesn't have the; // logic to deal with a signed divide and an unsigned compare (and; // vice versa). This is because (x /s C2) <s C produces different; // results than (x /s C2) <u C or (x /u C2) <s C or even; // (x /u C2) <u C. Simply casting the operands and result won't; // work. :( The if statement below tests that condition and bails; // if it finds it.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp:141,log,logic,141,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,2,"['log', 'test']","['logic', 'tests']"
Testability,"// FIXME: If there's already a constraint tracker for this variable,; // we shouldn't emit anything here (c.f. the double note in; // test/Analysis/inlining/path-notes.c)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporterVisitors.cpp:134,test,test,134,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporterVisitors.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporterVisitors.cpp,1,['test'],['test']
Testability,"// FIXME: If we knew where the '=' was, we could easily provide a fix-it; // hint here. Alternatively, we could walk the type-source information; // for NewParam to find the last source location in the type... but it; // isn't worth the effort right now. This is the kind of test case that; // is hard to get right:; // int f(int);; // void g(int (*fp)(int) = f);; // void g(int (*fp)(int) = &f);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp:275,test,test,275,interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,1,['test'],['test']
Testability,"// FIXME: In case when the modulemap is not yet loaded we will return the; // wrong result. Consider a call to HasPCMForLibrary(../test/libEvent.so); // We will only load the modulemap for libEvent.so after we dlopen libEvent; // which may happen after calling this interface. Maybe we should also check; // if there is a Event.pcm file and a module.modulemap, load it and return; // true.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TCling.cxx:131,test,test,131,core/metacling/src/TCling.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TCling.cxx,1,['test'],['test']
Testability,// FIXME: Injecting into the DAGISel pipeline seems to cause issues with; // analyses needing to be re-run. This can result in being unable to; // schedule passes (particularly with 'Function Alias Analysis; // Results'). It's not entirely clear why but AFAICT this seems to be; // due to one FunctionPassManager not being able to use analyses from a; // previous one. As we're injecting a ModulePass we break the usual; // pass manager into two. GlobalISel with the fallback path disabled; // and -run-pass seem to be unaffected. The majority of GlobalISel; // testing uses -run-pass so this probably isn't too bad.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TargetPassConfig.cpp:562,test,testing,562,interpreter/llvm-project/llvm/lib/CodeGen/TargetPassConfig.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TargetPassConfig.cpp,1,['test'],['testing']
Testability,"// FIXME: Ironically, this assert actually fails in some cases.; //assert(L.isValid());",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/PathDiagnostic.cpp:27,assert,assert,27,interpreter/llvm-project/clang/lib/Analysis/PathDiagnostic.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/PathDiagnostic.cpp,2,['assert'],['assert']
Testability,// FIXME: Is division-by-2 the correct step? Should we assert that the; // register size is a power-of-2?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:55,assert,assert,55,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,1,['assert'],['assert']
Testability,// FIXME: Is it useful to form a vwadd.wx or vwsub.wx if it removes a scalar; // sext/zext?; // Control this behavior behind an option (AllowSplatInVW_W) for testing; // purposes.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:158,test,testing,158,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,1,['test'],['testing']
Testability,"// FIXME: Is this actually dangerous as WritingAnLLVMPass.html claims? Seems; // that, short of multithreaded LLVM, it should be safe; all that is; // necessary is that a simple Module::iterator loop not be invalidated.; // Appending to the GlobalVariable list is safe in that sense.; //; // All of the output passes emit globals last. The ExecutionEngine; // explicitly supports adding globals to the module after; // initialization.; //; // Still, if it isn't deemed acceptable, then this transformation needs; // to be a ModulePass (which means it cannot be in the 'llc' pipeline; // (which uses a FunctionPassManager (which segfaults (not asserts) if; // provided a ModulePass))).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ShadowStackGCLowering.cpp:643,assert,asserts,643,interpreter/llvm-project/llvm/lib/CodeGen/ShadowStackGCLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ShadowStackGCLowering.cpp,1,['assert'],['asserts']
Testability,// FIXME: It is marginally lame that we just do nothing here if we see an; // entry we don't recognize. It might not be unreasonable for the verifier; // to not even allow this and just assert here.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/ExecutionEngine.cpp:186,assert,assert,186,interpreter/llvm-project/llvm/lib/ExecutionEngine/ExecutionEngine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/ExecutionEngine.cpp,1,['assert'],['assert']
Testability,// FIXME: It would be awesome of updateTerminator would just return rather; // than assert when the branch cannot be analyzed in order to remove this; // boiler plate.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineBlockPlacement.cpp:84,assert,assert,84,interpreter/llvm-project/llvm/lib/CodeGen/MachineBlockPlacement.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineBlockPlacement.cpp,1,['assert'],['assert']
Testability,"// FIXME: It's currently possible that we generate a wrapper that is similar to the; // call we use to initialize k2. In this case we generate a wrapper that doesn't; // compile and we crash. As it seems to be impossible/difficult to call template; // operators through the interface we use in the other tests, we just demonstrate; // the failing declaration of the wrapper here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/metacling/test/TClingCallFuncTests.cxx:304,test,tests,304,core/metacling/test/TClingCallFuncTests.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/test/TClingCallFuncTests.cxx,1,['test'],['tests']
Testability,"// FIXME: Look at the registration of at_quick_exit and uncomment.; // assert(m_JIT->getSymbolAddress(Name, /*IncludeHostSymbols*/true) &&; // ""The symbol must exist"");",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/IncrementalExecutor.cpp:71,assert,assert,71,interpreter/cling/lib/Interpreter/IncrementalExecutor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/IncrementalExecutor.cpp,1,['assert'],['assert']
Testability,// FIXME: Make CFI on member function calls compatible with cross-DSO CFI.; // There are currently two problems:; // - Virtual function call checks need to pass a pointer to the function; // address to llvm.type.test and a pointer to the address point to the; // diagnostic function. Currently we pass the same pointer to both; // places.; // - Non-virtual function call checks may need to check multiple type; // identifiers.; // Fixing both of those may require changes to the cross-DSO CFI; // interface.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:212,test,test,212,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,1,['test'],['test']
Testability,// FIXME: Maybe this should be an assertion. Are there cases; // were it is not an EnumConstantDecl?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporter.cpp:34,assert,assertion,34,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporter.cpp,1,['assert'],['assertion']
Testability,"// FIXME: More logic required here (like in ReadLeaves)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranchElement.cxx:15,log,logic,15,tree/tree/src/TBranchElement.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranchElement.cxx,1,['log'],['logic']
Testability,// FIXME: Move allocation logic out of MachineFunctionInfo and initialize; // once.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIMachineFunctionInfo.cpp:26,log,logic,26,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIMachineFunctionInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIMachineFunctionInfo.cpp,1,['log'],['logic']
Testability,// FIXME: Move the assert before the single decl case when we fix the; // duplication coming from the ASTReader reading builtin types.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclContextInternals.h:19,assert,assert,19,interpreter/llvm-project/clang/include/clang/AST/DeclContextInternals.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclContextInternals.h,1,['assert'],['assert']
Testability,// FIXME: Move the checking logic to MemDep!,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/GVN.cpp:28,log,logic,28,interpreter/llvm-project/llvm/lib/Transforms/Scalar/GVN.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/GVN.cpp,1,['log'],['logic']
Testability,// FIXME: Move the tentative declaration logic into ClassifyName so we can; // typo-correct to tentatively-declared identifiers.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/Parser.cpp:41,log,logic,41,interpreter/llvm-project/clang/lib/Parse/Parser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/Parser.cpp,1,['log'],['logic']
Testability,"// FIXME: Needs test, missing MIR serialization.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/ReducerWorkItem.cpp:16,test,test,16,interpreter/llvm-project/llvm/tools/llvm-reduce/ReducerWorkItem.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/ReducerWorkItem.cpp,1,['test'],['test']
Testability,// FIXME: No tests exist for this code and it is questionable:; // How to handle multiple metadata for the same region?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporter.cpp:13,test,tests,13,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporter.cpp,1,['test'],['tests']
Testability,// FIXME: Null TD never excercised in test suite.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/TypePrinter.cpp:38,test,test,38,interpreter/llvm-project/clang/lib/AST/TypePrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/TypePrinter.cpp,1,['test'],['test']
Testability,"// FIXME: Once we get to more remarks like this one, we need to re-evaluate how; // much of this logic should actually go into the remark emitter.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/MemoryOpRemark.h:97,log,logic,97,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/MemoryOpRemark.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/MemoryOpRemark.h,1,['log'],['logic']
Testability,"// FIXME: One external symbol can only have one PLT stub in a object file.; // This is a limitation when we need different PLT stubs for the same symbol.; // For example, we need two different PLT stubs for `bl __tls_get_addr` and; // `bl __tls_get_addr@notoc`.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/ppc64.h:52,stub,stub,52,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/ppc64.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/ppc64.h,3,['stub'],"['stub', 'stubs']"
Testability,// FIXME: Part of this logic is duplicated in the MCELFStreamer. What is; // the best way for us to get access to it?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/ELFAsmParser.cpp:23,log,logic,23,interpreter/llvm-project/llvm/lib/MC/MCParser/ELFAsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/ELFAsmParser.cpp,1,['log'],['logic']
Testability,"// FIXME: Pre-increment to avoid failing tests.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/IncrementalParser.cpp:41,test,tests,41,interpreter/cling/lib/Interpreter/IncrementalParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/IncrementalParser.cpp,1,['test'],['tests']
Testability,"// FIXME: Prepare forward pass for this test; /*std::cout << ""Test Back-propagation 2: "" << std::endl;; if (!testBackward2<TCpu<Scalar_t>>()) {; std::cerr << ""ERROR - Back-propagation failed "" << std::endl;; return -1;; }*/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestPoolingLayerCudnn.cxx:40,test,test,40,tmva/tmva/test/DNN/CNN/TestPoolingLayerCudnn.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestPoolingLayerCudnn.cxx,2,"['Test', 'test']","['Test', 'test']"
Testability,"// FIXME: Rather than create a NoSanitizeSpecificAttr, this creates a; // NoSanitizeAttr object; but we need to calculate the correct spelling list; // index rather than incorrectly assume the index for NoSanitizeSpecificAttr; // has the same spellings as the index for NoSanitizeAttr. We don't have a; // general way to ""translate"" between the two, so this hack attempts to work; // around the issue with hard-coded indices. This is critical for calling; // getSpelling() or prettyPrint() on the resulting semantic attribute object; // without failing assertions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp:553,assert,assertions,553,interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp,1,['assert'],['assertions']
Testability,"// FIXME: Re-enable assert once PR20057 is resolved.; // assert(i <= (HazardRec->getMaxLookAhead() + MaxObservedStall) &&; // ""permanent hazard"");",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineScheduler.cpp:20,assert,assert,20,interpreter/llvm-project/llvm/lib/CodeGen/MachineScheduler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineScheduler.cpp,2,['assert'],['assert']
Testability,// FIXME: Reduce unit test case.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/BreakableToken.cpp:22,test,test,22,interpreter/llvm-project/clang/lib/Format/BreakableToken.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/BreakableToken.cpp,1,['test'],['test']
Testability,// FIXME: Refactor this code; this duplicates logic in LibCallsShrinkWrap; // (and to some extent ConstantFoldScalarCall).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ConstantFolding.cpp:46,log,logic,46,interpreter/llvm-project/llvm/lib/Analysis/ConstantFolding.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ConstantFolding.cpp,1,['log'],['logic']
Testability,// FIXME: Remove this switch when all testcases are fixed!,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegAllocFast.cpp:38,test,testcases,38,interpreter/llvm-project/llvm/lib/CodeGen/RegAllocFast.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegAllocFast.cpp,1,['test'],['testcases']
Testability,"// FIXME: Replace the uses of is(), get() and dyn_cast() with; // isa<T>, cast<T> and the llvm::dyn_cast<T>; /// Test if the Union currently holds the type matching T.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerUnion.h:113,Test,Test,113,interpreter/llvm-project/llvm/include/llvm/ADT/PointerUnion.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerUnion.h,1,['Test'],['Test']
Testability,"// FIXME: Revisit this once flow conditions are added to the framework. For; // `a = b ? c : d` we can add `b => a == c && !b => a == d` to the flow; // condition.; // When we do this, we will need to retrieve the values of the operands from; // the environments for the basic blocks they are computed in, in a similar; // way to how this is done for short-circuited logical operators in; // `getLogicOperatorSubExprValue()`.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/Transfer.cpp:367,log,logical,367,interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/Transfer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/Transfer.cpp,1,['log'],['logical']
Testability,"// FIXME: Share logic with ExtVectorElementExpr::containsDuplicateElements,; // see FIXME there.; //; // FIXME: This logic can be greatly simplified by splitting it along; // halving/not halving and reworking the component checking.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprMember.cpp:16,log,logic,16,interpreter/llvm-project/clang/lib/Sema/SemaExprMember.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprMember.cpp,2,['log'],['logic']
Testability,// FIXME: Should move the logic from DeclSpec::Finish to here for validity; // checking.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp:26,log,logic,26,interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,1,['log'],['logic']
Testability,// FIXME: Should this be an assert?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp:28,assert,assert,28,interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp,1,['assert'],['assert']
Testability,"// FIXME: Should we move the logic that tries to recover from a missing tag; // (struct, union, enum) from Parser::ParseImplicitInt here, instead?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:29,log,logic,29,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['log'],['logic']
Testability,"// FIXME: Sink this logic into the module, similar to the handling of; // globals. This will make moving to a concurrent model much easier.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/ModuleUtils.cpp:20,log,logic,20,interpreter/llvm-project/llvm/lib/Transforms/Utils/ModuleUtils.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/ModuleUtils.cpp,1,['log'],['logic']
Testability,"// FIXME: Sometimes tryInstructionTransform() will add instructions and; // test whether they can be folded before keeping them. In this case it; // sets a kill before recursively calling tryInstructionTransform() again.; // If there is no interval available, we assume that this instruction is; // one of those. A kill flag is manually inserted on the operand so the; // check below will handle it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TwoAddressInstructionPass.cpp:76,test,test,76,interpreter/llvm-project/llvm/lib/CodeGen/TwoAddressInstructionPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TwoAddressInstructionPass.cpp,1,['test'],['test']
Testability,"// FIXME: Such case is described ROOT-7765 where; // ROOT_GENERATE_DICTIONARY does not contain the list of headers.; // They are specified as #includes in the LinkDef file. This leads to; // generation of incomplete modulemap files and this logic fails to; // compute the corresponding module of D.; // FIXME: If we want to support such a case, we should not rely on; // the contents of the modulemap but mangle D and look it up in the; // .so files.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TCling.cxx:241,log,logic,241,core/metacling/src/TCling.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TCling.cxx,1,['log'],['logic']
Testability,// FIXME: Support vectors once we have tests.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:39,test,tests,39,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,1,['test'],['tests']
Testability,"// FIXME: Take the code here https://github.com/root-project/root/blob/550fb2644f3c07d1db72b9b4ddc4eba5a99ddc12/interpreter/cling/lib/Utils/AST.cpp#L316-L350; // to make hist/histdrawv7/test/histhistdrawv7testUnit work into; // QualTypeNames.h in clang; //type_name = clang::TypeName::getFullyQualifiedName(QT, C, Policy);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TClingCallFunc.cxx:186,test,test,186,core/metacling/src/TClingCallFunc.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TClingCallFunc.cxx,1,['test'],['test']
Testability,// FIXME: TestResultForARC,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/arcmt-test/arcmt-test.cpp:10,Test,TestResultForARC,10,interpreter/llvm-project/clang/tools/arcmt-test/arcmt-test.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/arcmt-test/arcmt-test.cpp,1,['Test'],['TestResultForARC']
Testability,// FIXME: Testing one of two paired registers is sufficient to guarantee; // ordering?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:10,Test,Testing,10,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,1,['Test'],['Testing']
Testability,"// FIXME: The below just finds *a* unused register. Maybe code could be; // optimized more if this looks for the register that isn't used for the; // longest time around this place, to enable more scheduling freedom. Not; // sure if that would actually result in a big performance difference; // though. Maybe RegisterScavenger::findSurvivorBackwards has some logic; // already to do this - but it's unclear if that could easily be used here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64SpeculationHardening.cpp:360,log,logic,360,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64SpeculationHardening.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64SpeculationHardening.cpp,1,['log'],['logic']
Testability,"// FIXME: The big likely candidate here are PHI nodes. We could in theory; // handle PHI nodes, but it gets really, really hard. Insanely hard. Hard; // enough that it is probably better to change every other part of LLVM; // to avoid creating them. The issue is that once we have PHIs we won't; // know which original EFLAGS value we need to capture with our setCCs; // below. The end result will be computing a complete set of setCCs that; // we *might* want, computing them in every place where we copy *out* of; // EFLAGS and then doing SSA formation on all of them to insert necessary; // PHI nodes and consume those here. Then hoping that somehow we DCE the; // unnecessary ones. This DCE seems very unlikely to be successful and so; // we will almost certainly end up with a glut of dead setCC; // instructions. Until we have a motivating test case and fail to avoid; // it by changing other parts of LLVM's lowering, we refuse to handle; // this complex case here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FlagsCopyLowering.cpp:846,test,test,846,interpreter/llvm-project/llvm/lib/Target/X86/X86FlagsCopyLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FlagsCopyLowering.cpp,1,['test'],['test']
Testability,// FIXME: The check for C++ here is for GCC compatibility. GCC rejects the; // usage of the logical operators && and || with vectors in C. This; // check could be notionally dropped.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:92,log,logical,92,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['log'],['logical']
Testability,// FIXME: The fallback on the search of partial; // specialization using ContextType should be eventually removed since; // it doesn't handle the case of constrained template parameters; // correctly. Currently removing this fallback would change the; // diagnostic output for invalid code in a number of tests.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCXXScopeSpec.cpp:305,test,tests,305,interpreter/llvm-project/clang/lib/Sema/SemaCXXScopeSpec.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCXXScopeSpec.cpp,1,['test'],['tests']
Testability,"// FIXME: The hint threshold has the same value used by the regular inliner; // when not optimzing for size. This should probably be lowered after; // performance testing.; // FIXME: this comment is cargo culted from the old pass manager, revisit).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:163,test,testing,163,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,1,['test'],['testing']
Testability,"// FIXME: The logic for deciding if an unaligned store should be split should; // be included in TLI.allowsMisalignedMemoryAccesses(), and there should be; // a call to that function here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:14,log,logic,14,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['log'],['logic']
Testability,"// FIXME: The logic to identify tainted regions could be more; // complete. For example, this would not currently identify; // overlapping fields in a union as tainted. To identify this we can; // check for overlapping/nested byte offsets.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/Taint.cpp:14,log,logic,14,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/Taint.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/Taint.cpp,1,['log'],['logic']
Testability,// FIXME: The lookup for allocation function is a standalone process.; // (We can find the logics in Sema::FindAllocationFunctions); //; // Such structure makes it a problem when we instantiate a template; // declaration using placement allocation function if the placement; // allocation function is invisible.; // (See https://github.com/llvm/llvm-project/issues/59601); //; // Here we workaround it by making the placement allocation functions; // always acceptable. The downside is that we can't diagnose the direct; // use of the invisible placement allocation functions. (Although such uses; // should be rare).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaLookup.cpp:91,log,logics,91,interpreter/llvm-project/clang/lib/Sema/SemaLookup.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaLookup.cpp,1,['log'],['logics']
Testability,"// FIXME: The proper thing to do is to really iterate over the; // container. We will do this with dispatch logic to the store.; // For now, just 'conjure' up a symbolic value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngineObjC.cpp:108,log,logic,108,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngineObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngineObjC.cpp,1,['log'],['logic']
Testability,"// FIXME: The special namespace treatment (not sending itself to; // CodeGen, but only its content - if the contained decl should be; // emitted) works around issue with the static initialization when; // having a PCH and loading a library. We don't want to generate; // code for the static that will come through the library.; //; // This will be fixed with the clang::Modules. Make sure we remember.; // assert(!getCI()->getLangOpts().Modules && ""Please revisit!"");",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/DeclCollector.cpp:406,assert,assert,406,interpreter/cling/lib/Interpreter/DeclCollector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/DeclCollector.cpp,1,['assert'],['assert']
Testability,// FIXME: There are no test cases covering this block.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/CodeView/CodeViewRecordIO.cpp:23,test,test,23,interpreter/llvm-project/llvm/lib/DebugInfo/CodeView/CodeViewRecordIO.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/CodeView/CodeViewRecordIO.cpp,1,['test'],['test']
Testability,// FIXME: There are no test cases covering this function.; // This may be because we always consider enumerators to be unsigned.; // See FIXME at CodeViewDebug.cpp : CodeViewDebug::lowerTypeEnum.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/CodeView/CodeViewRecordIO.cpp:23,test,test,23,interpreter/llvm-project/llvm/lib/DebugInfo/CodeView/CodeViewRecordIO.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/CodeView/CodeViewRecordIO.cpp,1,['test'],['test']
Testability,// FIXME: There should probably be logic here to find libc++ on Windows.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/MSVC.cpp:35,log,logic,35,interpreter/llvm-project/clang/lib/Driver/ToolChains/MSVC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/MSVC.cpp,1,['log'],['logic']
Testability,// FIXME: This assert can fail if there's a race between the above check; // and the removal of the directory.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/HeaderSearch.cpp:15,assert,assert,15,interpreter/llvm-project/clang/lib/Lex/HeaderSearch.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/HeaderSearch.cpp,1,['assert'],['assert']
Testability,// FIXME: This assert should hold if we computed the column correctly.; // assert((int)C.StartOfTokenColumn >= C.Spaces);,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/WhitespaceManager.cpp:15,assert,assert,15,interpreter/llvm-project/clang/lib/Format/WhitespaceManager.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/WhitespaceManager.cpp,2,['assert'],['assert']
Testability,// FIXME: This assert will not hold in the presence of modules.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:15,assert,assert,15,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,3,['assert'],['assert']
Testability,"// FIXME: This assertion cannot be enabled (yet) because the ObjC rewriter; // functionality creates a function without a prototype regardless of; // language mode (so it makes them even in C++). Once the rewriter has been; // fixed, this assertion can be enabled again.; //assert(!LangOpts.requiresStrictPrototypes() &&; // ""strict prototypes are disabled"");; // Unique functions, to guarantee there is only one function of a particular; // structure.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp:15,assert,assertion,15,interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,3,['assert'],"['assert', 'assertion']"
Testability,"// FIXME: This assertion is intended to catch unintended use of multibyte; // characters in fixits. If we decide to do this, we'll have to track; // separate byte widths for the source and fixit lines.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SourceMgr.cpp:15,assert,assertion,15,interpreter/llvm-project/llvm/lib/Support/SourceMgr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SourceMgr.cpp,1,['assert'],['assertion']
Testability,"// FIXME: This can easily happen, if we have a reference to a submodule that; // did not result in us loading a module file for that submodule. For; // instance, a cross-top-level-module 'conflict' declaration will hit this.; // assert((ID || !Mod) &&; // ""asked for module ID for non-local, non-imported module"");",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp:229,assert,assert,229,interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp,1,['assert'],['assert']
Testability,"// FIXME: This causes a lot of test failures, for some reason it causes; // the call to HandleMissingFunction to be elided.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/IncrementalExecutor.cpp:31,test,test,31,interpreter/cling/lib/Interpreter/IncrementalExecutor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/IncrementalExecutor.cpp,1,['test'],['test']
Testability,"// FIXME: This condition should be a lot more complicated that it is here.; // Ideally it should test for properties of the ABI and not the ABI; // itself.; // For the moment, I'm only correcting enough to make MIPS-IV work.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsAsmPrinter.cpp:97,test,test,97,interpreter/llvm-project/llvm/lib/Target/Mips/MipsAsmPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsAsmPrinter.cpp,1,['test'],['test']
Testability,"// FIXME: This duplicates logic in ASTContext::getTypeAlignIfKnown. But; // that doesn't return the information we need to compute BaseInfo.; // Honor alignment typedef attributes even on incomplete types.; // We also honor them straight for C++ class types, even as pointees;; // there's an expressivity gap here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:26,log,logic,26,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,1,['log'],['logic']
Testability,"// FIXME: This is a hack so that we can override the preamble file during; // crash-recovery testing, which is the only case where the preamble files; // are not necessarily cleaned up.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/PrecompiledPreamble.cpp:93,test,testing,93,interpreter/llvm-project/clang/lib/Frontend/PrecompiledPreamble.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/PrecompiledPreamble.cpp,1,['test'],['testing']
Testability,// FIXME: This is a workaround that should be removed when we fix; // http://llvm.org/PR53699. An assertion later below verifies this.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/WhitespaceManager.cpp:98,assert,assertion,98,interpreter/llvm-project/clang/lib/Format/WhitespaceManager.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/WhitespaceManager.cpp,1,['assert'],['assertion']
Testability,"// FIXME: This is checking that our DynamicTypeInfo is at least as good as; // the static type. However, because we currently don't update; // DynamicTypeInfo when an object is cast, we can't actually be sure the; // DynamicTypeInfo is up to date. This assert should be re-enabled once; // this is fixed.; //; // assert(!MD->getParent()->isDerivedFrom(RD) && ""Bad DynamicTypeInfo"");",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/CallEvent.cpp:253,assert,assert,253,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/CallEvent.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/CallEvent.cpp,2,['assert'],['assert']
Testability,"// FIXME: This is not good enough, an STL container can be; // a base, and the test will fail.; // See TBranchElement::InitializeOffsets() for the; // correct test.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranchElement.cxx:79,test,test,79,tree/tree/src/TBranchElement.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranchElement.cxx,2,['test'],['test']
Testability,"// FIXME: This is not very precise. Here we just check to see if the; // value comes from a macro, but we can do much better. This is likely; // to be over conservative. This logic is factored into a separate function; // so that we can refine it later.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ReachableCode.cpp:175,log,logic,175,interpreter/llvm-project/clang/lib/Analysis/ReachableCode.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ReachableCode.cpp,1,['log'],['logic']
Testability,"// FIXME: This is untested and unused anywhere in the LLVM project, it's; // used/needed by Julia (an external project). It should have some coverage; // (at least tests, but ideally example functionality).; /// Obtain a copy of this LoadedObjectInfo.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DIContext.h:164,test,tests,164,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DIContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DIContext.h,1,['test'],['tests']
Testability,// FIXME: This is very simple and misses some cases which should be handled when; // motivating examples are found.; //; // The copy rewriting logic should look at uses as well as defs and be able to; // eliminate copies across blocks.; //; // Later copies that are subregister extracts will also not be eliminated since; // only the first copy is considered.; //; // e.g.; // %1 = COPY %0; // %2 = COPY %0:sub1; //; // Should replace %2 uses with %1:sub1,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp:143,log,logic,143,interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp,1,['log'],['logic']
Testability,// FIXME: This is wrong since G_BITCAST is not allowed to change the; // number of bits but it's what the previous code described and fixing; // it breaks tests.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64LegalizerInfo.cpp:155,test,tests,155,interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64LegalizerInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64LegalizerInfo.cpp,1,['test'],['tests']
Testability,"// FIXME: This isn't correct for AArch64. Just moving the ""generic"" logic; // into the targets for now.; //; // Relax if the value is too big for a (signed) i8.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/MCTargetDesc/AArch64AsmBackend.cpp:68,log,logic,68,interpreter/llvm-project/llvm/lib/Target/AArch64/MCTargetDesc/AArch64AsmBackend.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/MCTargetDesc/AArch64AsmBackend.cpp,1,['log'],['logic']
Testability,"// FIXME: This logic is meant to generate exactly the same output as; // Darwin's classic dsymutil. There is a nicer way to implement this; // by simply putting all the relocated line info in NewRows and simply; // sorting NewRows before passing it to emitLineTableForUnit. This; // should be correct as sequences for a function should stay; // together in the sorted output. There are a few corner cases that; // look suspicious though, and that required to implement the logic; // this way. Revisit that once initial validation is finished.; // Iterate over the object file line info and extract the sequences; // that correspond to linked functions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DWARFLinker/Classic/DWARFLinker.cpp:15,log,logic,15,interpreter/llvm-project/llvm/lib/DWARFLinker/Classic/DWARFLinker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DWARFLinker/Classic/DWARFLinker.cpp,4,['log'],['logic']
Testability,// FIXME: This logic should be sunk into a target-specific interface so that; // we don't have to recompute the register.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp:15,log,logic,15,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,1,['log'],['logic']
Testability,"// FIXME: This logic should probably go higher up, where we can; // test these conditions symbolically.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BasicValueFactory.cpp:15,log,logic,15,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BasicValueFactory.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BasicValueFactory.cpp,4,"['log', 'test']","['logic', 'test']"
Testability,// FIXME: This logical is mostly duplicated with; // DeadMachineInstructionElim::isDead. Why is LOCAL_ESCAPE not considered in; // MachineInstr::isLabel?; // Don't delete frame allocation labels.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/Utils.cpp:15,log,logical,15,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/Utils.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/Utils.cpp,1,['log'],['logical']
Testability,// FIXME: This might not be the best algorithm for finding bit test clusters.; // Base case: There is only one way to partition Clusters[N-1].,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SwitchLoweringUtils.cpp:63,test,test,63,interpreter/llvm-project/llvm/lib/CodeGen/SwitchLoweringUtils.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SwitchLoweringUtils.cpp,1,['test'],['test']
Testability,// FIXME: This needs testing w/ member access expressions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiate.cpp:21,test,testing,21,interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiate.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiate.cpp,1,['test'],['testing']
Testability,"// FIXME: This option is only to test if the strict fp operation processed; // correctly by preventing mutating strict fp operation to normal fp operation; // during development. When the backend supports strict float operation, this; // option will be meaningless.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TargetLoweringBase.cpp:33,test,test,33,interpreter/llvm-project/llvm/lib/CodeGen/TargetLoweringBase.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TargetLoweringBase.cpp,1,['test'],['test']
Testability,// FIXME: This option should be removed once it has received sufficient testing.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsConstantIslandPass.cpp:72,test,testing,72,interpreter/llvm-project/llvm/lib/Target/Mips/MipsConstantIslandPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsConstantIslandPass.cpp,1,['test'],['testing']
Testability,"// FIXME: This should assert.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/MetaProcessor/MetaSema.cpp:22,assert,assert,22,interpreter/cling/lib/MetaProcessor/MetaSema.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/MetaProcessor/MetaSema.cpp,1,['assert'],['assert']
Testability,"// FIXME: This should be removed when template instantiation propagates; // attributes at template specialization definition, not; // declaration. When it is removed the test needs to be enabled; // in SemaDeclAttr.cpp.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/Consumed.cpp:170,test,test,170,interpreter/llvm-project/clang/lib/Analysis/Consumed.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/Consumed.cpp,1,['test'],['test']
Testability,"// FIXME: This should have already been handled by the memory legalizer.; // Removing this currently doesn't affect any lit tests, but we need to; // verify that nothing was relying on this. The number of buffer invalidates; // being handled here should not be expanded.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInsertWaitcnts.cpp:124,test,tests,124,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInsertWaitcnts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInsertWaitcnts.cpp,1,['test'],['tests']
Testability,"// FIXME: This should ideally happen in the right order without explicitly; // doing this. We started seeing failing tests (eg, tutorial-hist-cumulative,; // JITLink turned on) with assertion failure in ~FinalizedAlloc after commit; // [cling] Move generators to ProcessSymbols JITDylib; // This likely changed the destruction order that caused the assertion to; // trigger.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/IncrementalJIT.cpp:117,test,tests,117,interpreter/cling/lib/Interpreter/IncrementalJIT.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/IncrementalJIT.cpp,3,"['assert', 'test']","['assertion', 'tests']"
Testability,"// FIXME: This should not be used during template instantiation. We should; // pick up the set of unqualified lookup results for the != and + operators; // in the initial parse.; //; // Testcase (accepts-invalid):; // template<typename T> void f() { for (auto x : T()) {} }; // namespace N { struct X { X begin(); X end(); int operator*(); }; }; // bool operator!=(N::X, N::X); void operator++(N::X);; // void g() { f<N::X>(); }",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp:186,Test,Testcase,186,interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp,1,['Test'],['Testcase']
Testability,"// FIXME: This upgrade is done during linking to support the C API. Once the; // old form is deprecated, we should move this upgrade to; // llvm::UpgradeGlobalVariable() and simplify the logic here and in; // Mapper::mapAppendingVariable() in ValueMapper.cpp.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Linker/IRMover.cpp:187,log,logic,187,interpreter/llvm-project/llvm/lib/Linker/IRMover.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Linker/IRMover.cpp,1,['log'],['logic']
Testability,// FIXME: This used enable V6T2 support implicitly for Thumb2 mode.; // Assert this for now to make the change obvious.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMSubtarget.cpp:72,Assert,Assert,72,interpreter/llvm-project/llvm/lib/Target/ARM/ARMSubtarget.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMSubtarget.cpp,1,['Assert'],['Assert']
Testability,"// FIXME: Uncomment and debug the various type mismatches.; //#define ASSERT_TYPE_MISMATCH(name) AssertTypeMismatch(STRINGIFY(name))",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/Interpreter/Value.h:97,Assert,AssertTypeMismatch,97,interpreter/cling/include/cling/Interpreter/Value.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/Interpreter/Value.h,1,['Assert'],['AssertTypeMismatch']
Testability,// FIXME: Use DefaultFunctionArrayLValueConversion() in place of the logic; // that adds implicit casts here.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAttr.cpp:69,log,logic,69,interpreter/llvm-project/clang/lib/Sema/SemaAttr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAttr.cpp,1,['log'],['logic']
Testability,"// FIXME: Use SCEV and reuse GVN/CSE logic to check for equivalence between; // Values.; // Currently, isEquivalent rely on other passes to ensure equivalent conditions; // have the same value, e.g. GVN.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/CodeMoverUtils.cpp:37,log,logic,37,interpreter/llvm-project/llvm/lib/Transforms/Utils/CodeMoverUtils.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/CodeMoverUtils.cpp,1,['log'],['logic']
Testability,"// FIXME: Use function attribute ""OptimizeForSize"" and/or CodeGenOptLevel to; // decide if we should generate a 16-byte constant mask when we only need 4 or; // 8 bytes for the scalar case.; // There are no scalar bitwise logical SSE/AVX instructions, so we; // generate a 16-byte vector constant and logic op even for the scalar case.; // Using a 16-byte mask allows folding the load of the mask with; // the logic op, so it can save (~4 bytes) on code size.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:222,log,logical,222,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,3,['log'],"['logic', 'logical']"
Testability,"// FIXME: Using the instsimplify logic directly for this is inefficient; // because we have to continually rebuild the argument list even when no; // simplifications can be performed. Until that is fixed with remapping; // inside of instsimplify, directly constant fold calls here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InlineCost.cpp:33,log,logic,33,interpreter/llvm-project/llvm/lib/Analysis/InlineCost.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InlineCost.cpp,1,['log'],['logic']
Testability,"// FIXME: We capture more information than the dag can represent. For; // now, just use the tightest assertzext/assertsext possible.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:101,assert,assertzext,101,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,2,['assert'],"['assertsext', 'assertzext']"
Testability,"// FIXME: We could introduce new blocks and will need to fix the outer loop.; // Until then, keep track of the number of blocks to assert that we don't.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/InstructionSelect.cpp:131,assert,assert,131,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/InstructionSelect.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/InstructionSelect.cpp,1,['assert'],['assert']
Testability,"// FIXME: We currently cannot assert that temporaries are clear, because; // lifetime extended temporaries are not always modelled correctly. In some; // cases when we materialize the temporary, we do; // createTemporaryRegionIfNeeded(), and the region changes, and also the; // respective destructor becomes automatic from temporary. So for now clean up; // the state manually before asserting. Ideally, this braced block of code; // should go away.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngine.cpp:30,assert,assert,30,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngine.cpp,2,['assert'],"['assert', 'asserting']"
Testability,"// FIXME: We currently only set the profile data when it is missing.; // With PGO, this can be used to refine even existing profile data with; // context information. This needs to be done after more performance; // testing.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/JumpThreading.cpp:216,test,testing,216,interpreter/llvm-project/llvm/lib/Transforms/Scalar/JumpThreading.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/JumpThreading.cpp,1,['test'],['testing']
Testability,"// FIXME: We do not model vector arithmetic yet. When adding support for; // that, note that the CFG-based reasoning below does not apply, because; // logical operators on vectors are not short-circuit. Currently they are; // modeled as short-circuit in Clang CFG but this is incorrect.; // Do not set the value for the expression. It'd be UnknownVal by default.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngineC.cpp:151,log,logical,151,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngineC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngineC.cpp,1,['log'],['logical']
Testability,"// FIXME: We don't currently support bit-fields. A lot of the logic for; // this is in CodeGen, so we need to factor it around.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp:62,log,logic,62,interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,1,['log'],['logic']
Testability,"// FIXME: We don't lock recursively. Can we assert it?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/IncrementalJIT.h:44,assert,assert,44,interpreter/cling/lib/Interpreter/IncrementalJIT.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/IncrementalJIT.h,1,['assert'],['assert']
Testability,// FIXME: We don't use assert here to prevent instr-ref-unreachable.mir; // failing.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:23,assert,assert,23,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,1,['assert'],['assert']
Testability,"// FIXME: We inherit EnableImplicitIMT from TBufferMerger tests (we are sharing the same executable) where we call; // EnableThreadSafety(). Here, we hit a race condition in TBranch::FlushBaskets. Once we get that fixed we probably; // should re-enable implicit MT.; //; // In general, we should probably have a way to conditionally enable/disable thread safety.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/test/TFileMergerTests.cxx:58,test,tests,58,io/io/test/TFileMergerTests.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/test/TFileMergerTests.cxx,1,['test'],['tests']
Testability,"// FIXME: We need to build the lookups table, which is logically const.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp:55,log,logically,55,interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp,1,['log'],['logically']
Testability,"// FIXME: We really want to get out of the tool chain level argument; // translation business, as it makes the driver functionality much; // more opaque. For now, we follow gcc closely solely for the; // purpose of easily achieving feature parity & testability. Once we; // have something that works, we should reevaluate each translation; // and try to push it down into tool specific logic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Darwin.cpp:249,test,testability,249,interpreter/llvm-project/clang/lib/Driver/ToolChains/Darwin.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Darwin.cpp,2,"['log', 'test']","['logic', 'testability']"
Testability,// FIXME: We should assert that the EH_LABEL is the first MI in the landing; // pad.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp:20,assert,assert,20,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,1,['assert'],['assert']
Testability,"// FIXME: We should be able to assert that block is non-null, but; // the CFG analysis can skip potentially-evaluated expressions in; // edge cases; see test/Sema/vla-2.c.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/AnalysisBasedWarnings.cpp:31,assert,assert,31,interpreter/llvm-project/clang/lib/Sema/AnalysisBasedWarnings.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/AnalysisBasedWarnings.cpp,2,"['assert', 'test']","['assert', 'test']"
Testability,"// FIXME: We should be able to assert this for FunctionDecls as well!; // FIXME: We should be able to assert this for all DeclRefExprs, not just; // those with a valid source location.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:31,assert,assert,31,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,2,['assert'],['assert']
Testability,"// FIXME: We should def X86::FPCW for x87 as well. But it affects a lot of lit; // tests at the moment, which is not what we expected.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLoweringCall.cpp:83,test,tests,83,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLoweringCall.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLoweringCall.cpp,1,['test'],['tests']
Testability,"// FIXME: We should remove all of them. However, AArch64 emits an; // invalid `DBG_VALUE $lr` with only one operand instead of; // the usual three and has a test that depends on it's; // preservation. Preserve it for now.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineStripDebug.cpp:157,test,test,157,interpreter/llvm-project/llvm/lib/CodeGen/MachineStripDebug.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineStripDebug.cpp,1,['test'],['test']
Testability,// FIXME: We use a fatal error here because historically LLVM has tried; // lower some of these physreg copies and we want to ensure we get; // reasonable bug reports if someone encounters a case no other testing; // found. This path should be removed after the LLVM 7 release.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp:205,test,testing,205,interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp,1,['test'],['testing']
Testability,"// FIXME: We want bug reports to always have the same checker name associated; // with them, yet here, if RetainCountChecker is disabled but; // OSObjectRetainCountChecker is enabled, the checker names will be different.; // This hack will make it so that the checker name depends on which checker is; // enabled rather than on the registration order.; // For the most part, we want **non-hidden checkers** to be associated with; // diagnostics, and **hidden checker options** with the fine-tuning of; // modeling. Following this logic, OSObjectRetainCountChecker should be the; // latter, but we can't just remove it for backward compatibility reasons.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/RetainCountChecker/RetainCountChecker.cpp:530,log,logic,530,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/RetainCountChecker/RetainCountChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/RetainCountChecker/RetainCountChecker.cpp,1,['log'],['logic']
Testability,"// FIXME: We've expanded Count where we hope to insert the counter setting; // intrinsic. But, in the case of the 'test and set' form, we may fallback to; // the just 'set' form and in which case the insertion block is most likely; // different. It means there will be instruction(s) in a block that possibly; // aren't needed. The isLoopEntryGuardedByCond is trying to avoid this issue,; // but it's doesn't appear to work in all cases.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/HardwareLoops.cpp:115,test,test,115,interpreter/llvm-project/llvm/lib/CodeGen/HardwareLoops.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/HardwareLoops.cpp,1,['test'],['test']
Testability,"// FIXME: When we have full support for OpenACC, we should set this to the; // version we support. Until then, set as '1' by default, but provide a; // temporary mechanism for users to override this so real-world examples can; // be tested against.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/InitPreprocessor.cpp:233,test,tested,233,interpreter/llvm-project/clang/lib/Frontend/InitPreprocessor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/InitPreprocessor.cpp,1,['test'],['tested']
Testability,"// FIXME: When we've addressed sample profiling, restore the assertion; //; // We cannot calculate branch probability if either of these invariants aren't; // met. However, MisExpect diagnostics should not prevent code from compiling,; // so we simply forgo emitting diagnostics here, and return early.; // assert((TotalBranchWeight >= LikelyBranchWeight) && (TotalBranchWeight > 0); // && ""TotalBranchWeight is less than the Likely branch weight"");",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/MisExpect.cpp:61,assert,assertion,61,interpreter/llvm-project/llvm/lib/Transforms/Utils/MisExpect.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/MisExpect.cpp,2,['assert'],"['assert', 'assertion']"
Testability,"// FIXME: Without optimizations, the temporary result from `await_suspend()`; // may be put on the coroutine frame since the coroutine frame constructor; // will think the temporary variable will escape from the; // `coroutine_handle<>::address()` call. This is problematic since the; // coroutine should be considered to be suspended after it enters; // `await_suspend` so it shouldn't access/update the coroutine frame after; // that.; //; // See https://github.com/llvm/llvm-project/issues/65054 for the report.; //; // The long term solution may wrap the whole logic about `await-suspend`; // into a standalone function. This is similar to the proposed solution; // in tryMarkAwaitSuspendNoInline. See the comments there for details.; //; // The short term solution here is to mark `coroutine_handle<>::address()`; // function as always-inline so that the coroutine frame constructor won't; // think the temporary result is escaped incorrectly.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCoroutine.cpp:565,log,logic,565,interpreter/llvm-project/clang/lib/Sema/SemaCoroutine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCoroutine.cpp,1,['log'],['logic']
Testability,"// FIXME: `std::advance()` should not create a new iterator position but; // change existing ones. However, in case of iterators implemented as; // pointers the handling of parameters in `std::advance()`-like; // functions is still incomplete which may result in cases where; // the new position is assigned to the wrong pointer. This causes; // crash if we use an assertion here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/IteratorModeling.cpp:365,assert,assertion,365,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/IteratorModeling.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/IteratorModeling.cpp,1,['assert'],['assertion']
Testability,// FIXME: add other typespec types and change this to an assert.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp:57,assert,assert,57,interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,1,['assert'],['assert']
Testability,// FIXME: all this logic will change if/when we have MemRegion::getLocation().,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/SimpleSValBuilder.cpp:19,log,logic,19,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/SimpleSValBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/SimpleSValBuilder.cpp,1,['log'],['logic']
Testability,// FIXME: assert that NewState is between CatchLow and CatchHigh.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/WinException.cpp:10,assert,assert,10,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/WinException.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/WinException.cpp,1,['assert'],['assert']
Testability,// FIXME: assert that Op1 isn't/doesn't contain undef.; // log2(2^C) -> C,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineMulDivRem.cpp:10,assert,assert,10,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineMulDivRem.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineMulDivRem.cpp,1,['assert'],['assert']
Testability,// FIXME: assert?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTImporter.cpp:10,assert,assert,10,interpreter/llvm-project/clang/lib/AST/ASTImporter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTImporter.cpp,1,['assert'],['assert']
Testability,"// FIXME: equivalent assert?; // assert(!CS.hasInAllocaArgument() &&; // ""sret demotion is incompatible with inalloca"");",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:21,assert,assert,21,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,2,['assert'],['assert']
Testability,"// FIXME: if the flag is given a value, write an HTML log to a file.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/DataflowAnalysisContext.cpp:54,log,log,54,interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/DataflowAnalysisContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/DataflowAnalysisContext.cpp,1,['log'],['log']
Testability,// FIXME: implement error logging which does not block other threads.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/dsymutil/DwarfLinkerForBinary.cpp:26,log,logging,26,interpreter/llvm-project/llvm/tools/dsymutil/DwarfLinkerForBinary.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/dsymutil/DwarfLinkerForBinary.cpp,2,['log'],['logging']
Testability,// FIXME: implement warning logging which does not block other threads.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/dsymutil/DwarfLinkerForBinary.cpp:28,log,logging,28,interpreter/llvm-project/llvm/tools/dsymutil/DwarfLinkerForBinary.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/dsymutil/DwarfLinkerForBinary.cpp,2,['log'],['logging']
Testability,// FIXME: is this even reachable? Test it.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:34,Test,Test,34,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['Test'],['Test']
Testability,"// FIXME: it would be good to better handle attribute merging rather than; // silently replacing the existing attribute, so long as it does not break; // the expected codegen tests.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp:175,test,tests,175,interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp,1,['test'],['tests']
Testability,"// FIXME: jitlink for ppc64 hasn't been well tested, leave it unsupported; // right now.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/ELFNixPlatform.cpp:45,test,tested,45,interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/ELFNixPlatform.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/ELFNixPlatform.cpp,1,['test'],['tested']
Testability,"// FIXME: lli aims to provide both, RuntimeDyld and JITLink, as the dynamic; // loaders for it's JIT implementations. And they both offer debugging via the; // GDB JIT interface, which builds on the two well-known symbol names below.; // As these symbols must be unique accross the linked executable, we can only; // define them in one of the libraries and make the other depend on it.; // OrcTargetProcess is a minimal stub for embedding a JIT client in remote; // executors. For the moment it seems reasonable to have the definition there; // and let ExecutionEngine depend on it, until we find a better solution.; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/GDBRegistrationListener.cpp:420,stub,stub,420,interpreter/llvm-project/llvm/lib/ExecutionEngine/GDBRegistrationListener.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/GDBRegistrationListener.cpp,1,['stub'],['stub']
Testability,// FIXME: move the computing dependency logic to ComputeDependence.h,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConcepts.cpp:40,log,logic,40,interpreter/llvm-project/clang/lib/AST/ExprConcepts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConcepts.cpp,1,['log'],['logic']
Testability,// FIXME: no test coverage.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTReaderStmt.cpp:13,test,test,13,interpreter/llvm-project/clang/lib/Serialization/ASTReaderStmt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTReaderStmt.cpp,6,['test'],['test']
Testability,// FIXME: possibly refactor with logic in CXStoredDiagnostic.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXLoadedDiagnostic.cpp:33,log,logic,33,interpreter/llvm-project/clang/tools/libclang/CXLoadedDiagnostic.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXLoadedDiagnostic.cpp,1,['log'],['logic']
Testability,// FIXME: re-enable it when there is way to retrieve token kind in Leaf.; // assert(cast<Leaf>(C).getToken()->kind() == L->getDelimiterTokenKind());,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Syntax/Tree.cpp:77,assert,assert,77,interpreter/llvm-project/clang/lib/Tooling/Syntax/Tree.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Syntax/Tree.cpp,1,['assert'],['assert']
Testability,"// FIXME: remove this once PR18663 has been properly fixed. For now,; // return a conservative answer:; // assert(IsSub && ""Expecting group subregister"");",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AggressiveAntiDepBreaker.cpp:107,assert,assert,107,interpreter/llvm-project/llvm/lib/CodeGen/AggressiveAntiDepBreaker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AggressiveAntiDepBreaker.cpp,1,['assert'],['assert']
Testability,// FIXME: should this be a test for macosx-fragile specifically?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp:27,test,test,27,interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,1,['test'],['test']
Testability,// FIXME: this isn't fully correct; we also need to test whether the; // members of the union would all have the same calling convention as the; // first member of the union. Checking just the size and alignment isn't; // sufficient (consider structs passed on the stack instead of in registers; // as an example).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp:52,test,test,52,interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp,1,['test'],['test']
Testability,"// FIXME: this should verify that we are targeting a 486 or better. If not,; // we will turn this bswap into something that will be lowered to logical; // ops instead of emitting the bswap asm. For now, we don't support 486 or; // lower so don't worry about this.; // bswap $0",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:143,log,logical,143,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['log'],['logical']
Testability,"// FIXME: this state can be merged with (1), but the following assert; // is useful to check the correcteness of the sequence due to semantic; // change of bitcast.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Instructions.cpp:63,assert,assert,63,interpreter/llvm-project/llvm/lib/IR/Instructions.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Instructions.cpp,2,['assert'],['assert']
Testability,"// FIXME: this state can be merged with (2), but the following assert; // is useful to check the correcteness of the sequence due to semantic; // change of bitcast.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Instructions.cpp:63,assert,assert,63,interpreter/llvm-project/llvm/lib/IR/Instructions.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Instructions.cpp,1,['assert'],['assert']
Testability,// FIXME: using parseBool is causing multiple tests to fail.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h:46,test,tests,46,interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,1,['test'],['tests']
Testability,"// FIXME: we can't yet diagnose indirect calls. When/if we can, we; // should instead assert that LocCookie.isValid().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp:86,assert,assert,86,interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp,1,['assert'],['assert']
Testability,"// FIXME: we shouldn't repeat this logic in both the Features and Cost; // analyzer - instead, we should abstract it to a common method in the; // CallAnalyzer",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InlineCost.cpp:35,log,logic,35,interpreter/llvm-project/llvm/lib/Analysis/InlineCost.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InlineCost.cpp,1,['log'],['logic']
Testability,"// FIXME: when clang starts to support msp430x ISA additional logic; // to select between multilib must be implemented; // MultilibBuilder MSP430xMultilib = MultilibBuilder(""/large"");",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Gnu.cpp:62,log,logic,62,interpreter/llvm-project/clang/lib/Driver/ToolChains/Gnu.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Gnu.cpp,1,['log'],['logic']
Testability,// FIXME: write more tests that actually use the dumpLayout output to prevent; // ItaniumVTableBuilder regressions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp:21,test,tests,21,interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp,1,['test'],['tests']
Testability,// Fabricate val-num for dead-code in order to suppress assertion in; // performPRE().,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/GVN.cpp:56,assert,assertion,56,interpreter/llvm-project/llvm/lib/Transforms/Scalar/GVN.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/GVN.cpp,1,['assert'],['assertion']
Testability,"// Factorize the product in one 1D and one 2D pdf to get a more complicated; // and complete test case.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooProdPdf.cxx:93,test,test,93,roofit/roofitcore/test/testRooProdPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooProdPdf.cxx,1,['test'],['test']
Testability,"// Factory function.; // If `Triple` is empty, uses the host triple.; // If `CpuName` is empty, uses the host CPU.; // If `UseDummyPerfCounters` is set, does not query the kernel; // for event counts.; // `UseDummyPerfCounters` and `Features` are intended for tests.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/LlvmState.h:260,test,tests,260,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/LlvmState.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/LlvmState.h,1,['test'],['tests']
Testability,"// Failure to match is not an error, it's just a normal return value.; // Any other error code is considered abnormal, and is logged in the Error.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Regex.cpp:126,log,logged,126,interpreter/llvm-project/llvm/lib/Support/Regex.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Regex.cpp,1,['log'],['logged']
Testability,"// FastCC has less than 1% performance improvement for some particular; // benchmark. But theoretically, it may has benenfit for some cases.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:75,benchmark,benchmark,75,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,1,['benchmark'],['benchmark']
Testability,"// FastISel does not have plumbing to deal with extensions where the SrcVT or; // DestVT are odd things, so test to make sure that they are both types we can; // handle (i1/i8/i16/i32 for SrcVT and i8/i16/i32/i64 for DestVT), otherwise; // bail out to SelectionDAG.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:108,test,test,108,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,2,['test'],['test']
Testability,"// Feature tests are special, they don't consume operands.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCInstPrinter.cpp:11,test,tests,11,interpreter/llvm-project/llvm/lib/MC/MCInstPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCInstPrinter.cpp,1,['test'],['tests']
Testability,"// Figure out which matcher we've found, and call the appropriate; // subclass constructor.; // FIXME: Can we do this more logarithmically?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp:123,log,logarithmically,123,interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,1,['log'],['logarithmically']
Testability,"// File is an IgProf log. Override all patterns and preprocess it",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofLog.cxx:21,log,log,21,proof/proof/src/TProofLog.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofLog.cxx,1,['log'],['log']
Testability,"// File name: the default is <session-tag>.log",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx:43,log,log,43,gui/sessionviewer/src/TProofProgressLog.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx,1,['log'],['log']
Testability,"// File where to log: default stderr",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServ.cxx:17,log,log,17,proof/proof/src/TProofServ.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServ.cxx,1,['log'],['log']
Testability,"// Files on same inode (but this is not unique on AFS so we need the next 2 test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:76,test,test,76,core/base/src/TSystem.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx,2,['test'],['test']
Testability,"// Fill event, header and tracks with some random numbers; // Create a timer object to benchmark this loop",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/MainEvent.cxx:87,benchmark,benchmark,87,test/MainEvent.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/MainEvent.cxx,1,['benchmark'],['benchmark']
Testability,// Fill in the relative address of the GOT Entry into the stub,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp:58,stub,stub,58,interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp,1,['stub'],['stub']
Testability,// Fill remaining bytes with 0. This will only get hit in partially; // specified test cases.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/MachOEmitter.cpp:82,test,test,82,interpreter/llvm-project/llvm/lib/ObjectYAML/MachOEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/MachOEmitter.cpp,1,['test'],['test']
Testability,// Fill the last physical record of a logical record with zero bytes.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/GOFFEmitter.cpp:38,log,logical,38,interpreter/llvm-project/llvm/lib/ObjectYAML/GOFFEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/GOFFEmitter.cpp,1,['log'],['logical']
Testability,// Filters the output of the filename associated with the element being; // printed in order to see clearly which logical elements belongs to; // a particular filename. It is value is reset after the element; // that represents the Compile Unit is printed.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVOptions.h:114,log,logical,114,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVOptions.h,1,['log'],['logical']
Testability,"// Finally, do the actual predication for all predicatable blocks. A couple; // of notes here:; // 1) We don't bother to constant fold dominated exits with identical exit; // counts; that's simply a form of CSE/equality propagation and we leave; // it for dedicated passes.; // 2) We insert the comparison at the branch. Hoisting introduces additional; // legality constraints and we leave that to dedicated logic. We want to; // predicate even if we can't insert a loop invariant expression as; // peeling or unrolling will likely reduce the cost of the otherwise loop; // varying check.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp:408,log,logic,408,interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp,1,['log'],['logic']
Testability,"// Finally, if everything is ok, fold the branches to logical ops.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp:54,log,logical,54,interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp,1,['log'],['logical']
Testability,"// Finally, match the condition that was driving the outermost `select`,; // it should be a logical operation between the condition that was driving; // the innermost `select` (after accounting for the possible inversions; // of the condition), and some other condition.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp:92,log,logical,92,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp,1,['log'],['logical']
Testability,"// Find all the potential call graph edges in this function. We track both; // actual call edges and indirect references to functions. The direct calls; // are trivially added, but to accumulate the latter we walk the instructions; // and add every operand which is a constant to the worklist to process; // afterward.; //; // Note that we consider *any* function with a definition to be a viable; // edge. Even if the function's definition is subject to replacement by; // some other module (say, a weak definition) there may still be; // optimizations which essentially speculate based on the definition and; // a way to check that the specific definition is in fact the one being; // used. For example, this could be done by moving the weak definition to; // a strong (internal) definition and making the weak definition be an; // alias. Then a test of the address of the weak function against the new; // strong definition's address would be an effective way to determine the; // safety of optimizing a direct call edge.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LazyCallGraph.cpp:848,test,test,848,interpreter/llvm-project/llvm/lib/Analysis/LazyCallGraph.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LazyCallGraph.cpp,1,['test'],['test']
Testability,// Find all value cycles that contain logical right shifts by 1.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonLoopIdiomRecognition.cpp:38,log,logical,38,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonLoopIdiomRecognition.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonLoopIdiomRecognition.cpp,1,['log'],['logical']
Testability,"// Find all virtual calls via a virtual table pointer %p under an assumption; // of the form llvm.assume(llvm.type.test(%p, %md)). This indicates that %p; // points to a member of the type identifier %md. Group calls by (type ID,; // offset) pair (effectively the identity of the virtual function) and store; // to CallSlots.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/WholeProgramDevirt.cpp:115,test,test,115,interpreter/llvm-project/llvm/lib/Transforms/IPO/WholeProgramDevirt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/WholeProgramDevirt.cpp,1,['test'],['test']
Testability,"// Find an integer type with the same bitwidth as the bitfield size. If; // no suitable type is present in the target, give up on producing debug; // information as it would be wrong. It is certainly possible to produce; // correct debug info, but the logic isn't currently implemented.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:252,log,logic,252,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,1,['log'],['logic']
Testability,// Find and erase llvm.assume intrinsics for this llvm.type.test call.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp:60,test,test,60,interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp,1,['test'],['test']
Testability,// Find bitwise logic op. Check that it is a BinaryOperator explicitly so we; // don't match ConstantExpr that aren't meaningful for this transform.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp:16,log,logic,16,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp,1,['log'],['logic']
Testability,"// Find first non-alloca instruction and create insertion point. This is; // safe if block is well-formed: it always have terminator, otherwise; // we'll get and assertion.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/Reg2Mem.cpp:162,assert,assertion,162,interpreter/llvm-project/llvm/lib/Transforms/Scalar/Reg2Mem.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/Reg2Mem.cpp,1,['assert'],['assertion']
Testability,"// Find largest difference for Kolmogorov Test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:42,Test,Test,42,hist/hist/src/TH1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx,1,['Test'],['Test']
Testability,// Find llvm.assume intrinsics for this llvm.type.test call.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/TypeMetadataUtils.cpp:50,test,test,50,interpreter/llvm-project/llvm/lib/Analysis/TypeMetadataUtils.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/TypeMetadataUtils.cpp,1,['test'],['test']
Testability,// Find test's function pointer,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:8,test,test,8,interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,1,['test'],['test']
Testability,"// Find the index of the selected PhysReg. We need it for logging,; // otherwise this is wasted cycles (but so would starting development mode; // without a model nor logging)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MLRegAllocEvictAdvisor.cpp:58,log,logging,58,interpreter/llvm-project/llvm/lib/CodeGen/MLRegAllocEvictAdvisor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MLRegAllocEvictAdvisor.cpp,2,['log'],['logging']
Testability,"// Find the largest logical immediate covering the remaining bits, allowing; // for additional bits to be set that were also set in the original immediate.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp:20,log,logical,20,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp,1,['log'],['logical']
Testability,// Find the largest logical immediate that fits within the full immediate.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp:20,log,logical,20,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp,1,['log'],['logical']
Testability,"// Find the logical immediate that covers the most bits in RemainingBits,; // allowing for additional bits to be set that were set in OriginalBits.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp:12,log,logical,12,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp,1,['log'],['logical']
Testability,// Find the logical namespace for the 'Name' component.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.cpp:12,log,logical,12,interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.cpp,1,['log'],['logical']
Testability,"// Find the smaller repetition size of the two possible logical immediates by; // counting the number of runs of one-bits within the BigSize-bit value. Both; // sizes may be the same. The EOR may add one or subtract one from the; // power-of-two count that can be represented by a logical immediate, or it; // may be left unchanged.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp:56,log,logical,56,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp,2,['log'],['logical']
Testability,// Finish logic for block addresses now that all global values have been; // handled.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/ValueMapper.cpp:10,log,logic,10,interpreter/llvm-project/llvm/lib/Transforms/Utils/ValueMapper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/ValueMapper.cpp,1,['log'],['logic']
Testability,// Finish the sandboxing sequence by emitting branch delay.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MCTargetDesc/MipsNaClELFStreamer.cpp:14,sandbox,sandboxing,14,interpreter/llvm-project/llvm/lib/Target/Mips/MCTargetDesc/MipsNaClELFStreamer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MCTargetDesc/MipsNaClELFStreamer.cpp,1,['sandbox'],['sandboxing']
Testability,"// First : cheap square approximation test. If distance of our; // center to plane > our half extent length we are outside plane",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLBoundingBox.cxx:38,test,test,38,graf3d/gl/src/TGLBoundingBox.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLBoundingBox.cxx,1,['test'],['test']
Testability,"// First OR all the WideShadows (i.e., 64bit or 32bit shadow chunks) linearly;; // then OR individual shadows within the combined WideShadow by binary ORing.; // This is fewer instructions than ORing shadows individually, since it; // needs logN shift/or instructions (N being the bytes of the combined wide; // shadow).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/DataFlowSanitizer.cpp:241,log,logN,241,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/DataFlowSanitizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/DataFlowSanitizer.cpp,1,['log'],['logN']
Testability,"// First check if testArg is self",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:18,test,testArg,18,roofit/roofitcore/src/RooAbsArg.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx,1,['test'],['testArg']
Testability,// First check if there are type tests / type checked loads in the; // merged regular LTO module IR.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/LTO/LTO.cpp:33,test,tests,33,interpreter/llvm-project/llvm/lib/LTO/LTO.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/LTO/LTO.cpp,1,['test'],['tests']
Testability,// First see if we can fold in fabs/fneg into the test.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp:50,test,test,50,interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp,1,['test'],['test']
Testability,"// First step: make sure the Event shared library exists; // This test dynamic linking when running in interpreted mode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:66,test,test,66,test/stress.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx,1,['test'],['test']
Testability,// First test if the original triple can find a sysroot with the triple; // name.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/MinGW.cpp:9,test,test,9,interpreter/llvm-project/clang/lib/Driver/ToolChains/MinGW.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/MinGW.cpp,1,['test'],['test']
Testability,"// First test, but only if didn't user specify",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:9,test,test,9,hist/hist/src/TMultiDimFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx,1,['test'],['test']
Testability,"// First, check for a zero value and just short circuit the logic below.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:60,log,logic,60,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp,1,['log'],['logic']
Testability,"// First, if the main function is in the Safe module, we must add a stub to; // the Test module to call into it. Thus, we create a new function `main'; // which just calls the old one.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/Miscompilation.cpp:68,stub,stub,68,interpreter/llvm-project/llvm/tools/bugpoint/Miscompilation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/Miscompilation.cpp,2,"['Test', 'stub']","['Test', 'stub']"
Testability,"// First, see if the module uses either of the llvm.type.test or; // llvm.type.checked.load intrinsics, which indicates that splitting globals; // may be beneficial.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/GlobalSplit.cpp:57,test,test,57,interpreter/llvm-project/llvm/lib/Transforms/IPO/GlobalSplit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/GlobalSplit.cpp,1,['test'],['test']
Testability,"// First, we need a perfect hash function and a few constexpr helper functions; // for converting a string literal into a numeric value which can be used to; // parametrize a template. We can not use string literals for that as that would; // require C++20.; //; // The hash function was generated with 'gperf' and then manually converted into; // its constexpr equivalent.; //; // NOTE: the perfect hashing scheme comes with inherent self-test. If the hash; // function has a collision for any of the texture operations, the compilation; // will fail due to an attempt to redefine a tag with the same value. If the; // header compiles, then the hash function is good enough for the job.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/__clang_cuda_texture_intrinsics.h:440,test,test,440,interpreter/llvm-project/clang/lib/Headers/__clang_cuda_texture_intrinsics.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/__clang_cuda_texture_intrinsics.h,1,['test'],['test']
Testability,"// First: Do a simple & cheap sphere approximation containment test.; // In many uses b will be completely contained by a and very much smaller; // these cases short circuited here; // We need the inner sphere for the container (box a) - radius = shortest box half length",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLBoundingBox.cxx:63,test,test,63,graf3d/gl/src/TGLBoundingBox.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLBoundingBox.cxx,1,['test'],['test']
Testability,"// FirstSPAdjustAmount is chosen as (2048 - StackAlign) because 2048 will; // cause sp = sp + 2048 in the epilogue to be split into multiple; // instructions. Offsets smaller than 2048 can fit in a single load/store; // instruction, and we have to stick with the stack alignment.; // So (2048 - StackAlign) will satisfy the stack alignment.; //; // FIXME: This place may seem odd. When using multiple ADDI instructions to; // adjust the stack in Prologue, and there are no callee-saved registers, we; // can take advantage of the logic of split sp ajustment to reduce code; // changes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/LoongArch/LoongArchFrameLowering.cpp:530,log,logic,530,interpreter/llvm-project/llvm/lib/Target/LoongArch/LoongArchFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/LoongArch/LoongArchFrameLowering.cpp,1,['log'],['logic']
Testability,"// Fit tests have a small bias. Unclear why.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/testPoisson.cxx:7,test,tests,7,roofit/roofit/test/vectorisedPDFs/testPoisson.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/testPoisson.cxx,1,['test'],['tests']
Testability,"// Fit yields to the data with all other variables held constant; // This is necessary because SPlot assumes the yields minimise -Log(likelihood)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SPlot.cxx:130,Log,Log,130,roofit/roostats/src/SPlot.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SPlot.cxx,1,['Log'],['Log']
Testability,"// Fixed-size array, same logic as ROOT::RVec.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RNTupleDS.cxx:26,log,logic,26,tree/dataframe/src/RNTupleDS.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RNTupleDS.cxx,1,['log'],['logic']
Testability,"// Fixing a problem with ""clang C:test.c"" on Windows.; // Stat(""C:"") does not recognize ""C:"" as a valid directory",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp:34,test,test,34,interpreter/llvm-project/clang/lib/Basic/FileManager.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp,1,['test'],['test']
Testability,"// Fixture for all tests in this file. If parameter is true, run with implicit MT, else run sequentially",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_regression.cxx:19,test,tests,19,tree/dataframe/test/dataframe_regression.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_regression.cxx,2,['test'],['tests']
Testability,// Flip the logic operation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp:12,log,logic,12,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,2,['log'],['logic']
Testability,// Float comparison can be safely commuted for; // Ordered/Unordered/Equal/NotEqual tests,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp:84,test,tests,84,interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp,1,['test'],['tests']
Testability,"// Fold (assertalign (assertalign x, AL0), AL1) ->; // (assertalign x, max(AL0, AL1))",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:9,assert,assertalign,9,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,3,['assert'],['assertalign']
Testability,"// Fold (shift (logic X, C2), C1) -> (logic (shift X, C1), (shift C2, C1)); // Don't break NOT patterns.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:16,log,logic,16,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,2,['log'],['logic']
Testability,"// Fold any combination of BUILD_VECTOR or UNDEF nodes into one BUILD_VECTOR.; // We have already tested above for an UNDEF only concatenation.; // fold (concat_vectors (BUILD_VECTOR A, B, ...), (BUILD_VECTOR C, D, ...)); // -> (BUILD_VECTOR A, B, ..., C, D, ...)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:98,test,tested,98,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['test'],['tested']
Testability,// Fold constant phis. They may be congruent to other constant phis and; // would confuse the logic below that expects proper IVs.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/ScalarEvolutionExpander.cpp:94,log,logic,94,interpreter/llvm-project/llvm/lib/Transforms/Utils/ScalarEvolutionExpander.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/ScalarEvolutionExpander.cpp,1,['log'],['logic']
Testability,"// Fold loads into extends when possible.; // FIXME: We can have multiple redundant extend/trunc instructions; // following a load. The folding only picks up one. Extend this; // to check subsequent instructions for the same pattern and remove; // them. Thus ResultReg should be the def reg for the last redundant; // instruction in a chain, and all intervening instructions can be; // removed from parent. Change test/CodeGen/PowerPC/fast-isel-fold.ll; // to add ELF64-NOT: rldicl to the appropriate tests when this works.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCFastISel.cpp:414,test,test,414,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCFastISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCFastISel.cpp,2,['test'],"['test', 'tests']"
Testability,"// Fold movmsk(logic(X,C)) -> logic(movmsk(X),C)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:15,log,logic,15,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,2,['log'],['logic']
Testability,"// Fold number iFold is kept as test set",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/TestCrossValidationSplitting.cxx:32,test,test,32,tmva/tmva/test/crossvalidation/TestCrossValidationSplitting.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/TestCrossValidationSplitting.cxx,1,['test'],['test']
Testability,// Fold out compares that express a class test.; //; // FIXME: Should be able to perform folds without context; // instruction. Always pass in the context function?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp:42,test,test,42,interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,1,['test'],['test']
Testability,"// Fold out scale-if-equals-zero pattern.; //; // This pattern appears in code with denormal range checks after it's; // assumed denormals are treated as zero. This drops a canonicalization.; // TODO: Could relax the signed zero logic. We just need to know the sign; // of the result matches (fmul x, y has the same sign as x).; //; // TODO: Handle always-canonicalizing variant that selects some value or 1; // scaling factor in the fmul visitor.; // TODO: Handle ldexp too",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp:229,log,logic,229,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp,1,['log'],['logic']
Testability,"// Fold: icmp pred ([us]div X, C2), C -> range test; // Fold this div into the comparison, producing a range check.; // Determine, based on the divide type, what the range is being; // checked. If there is an overflow on the low or high side, remember; // it, otherwise compute the range [low, hi) bounding the new value.; // See: InsertRangeTest above for the kinds of replacements possible.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp:47,test,test,47,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,1,['test'],['test']
Testability,"// Folding the subtraction while preserving range information can be tricky; // (because of INT_MIN, etc.); if the prior test failed, swap AS and BS; // and try again to see if things fold better that way.; // Compute the difference between the two pointers.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolutionAliasAnalysis.cpp:121,test,test,121,interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolutionAliasAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolutionAliasAnalysis.cpp,1,['test'],['test']
Testability,"// Follow the convention of emitting flags as a boolean value, but only; // emit if true to avoid unnecessary verbosity and test churn.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AsmWriter.cpp:124,test,test,124,interpreter/llvm-project/llvm/lib/IR/AsmWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AsmWriter.cpp,1,['test'],['test']
Testability,"// Following test does NOT adjust InputSize downwards for signed inputs,; // because the most negative value still requires all the mantissa bits; // to distinguish it from one less than that value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp:13,test,test,13,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,1,['test'],['test']
Testability,"// For AND, keep a CMP so that we can match the test pattern.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:48,test,test,48,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['test'],['test']
Testability,"// For AssertZext, we look through the operand and; // mark the bits known to be zero.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp:7,Assert,AssertZext,7,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,1,['Assert'],['AssertZext']
Testability,"// For CoreCLR, it just involves a type test.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp:40,test,test,40,interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp,1,['test'],['test']
Testability,"// For FCMP_OEQ, we can emit; // two branches instead of an explicit AND instruction with a; // separate test. However, we only do this if this block doesn't; // have a fall-through edge, because this requires an explicit; // jmp when the condition is false.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:105,test,test,105,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['test'],['test']
Testability,"// For FCMP_UNE, we can emit; // two branches instead of an explicit OR instruction with a; // separate test.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:104,test,test,104,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['test'],['test']
Testability,"// For HIP compilation the handle itself does not change, so we only need; // to update the Stub value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp:92,Stub,Stub,92,interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,1,['Stub'],['Stub']
Testability,"// For MinGW environments, manually export the __chkstk function from the lli; // executable.; //; // Normally, this function is provided by compiler-rt builtins or libgcc.; // It is named ""_alloca"" on i386, ""___chkstk_ms"" on x86_64, and ""__chkstk"" on; // arm/aarch64. In MSVC configurations, it's named ""__chkstk"" in all; // configurations.; //; // When Orc tries to resolve symbols at runtime, this succeeds in MSVC; // configurations, somewhat by accident/luck; kernelbase.dll does export a; // symbol named ""__chkstk"" which gets found by Orc, even if regular applications; // never link against that function from that DLL (it's linked in statically; // from a compiler support library).; //; // The MinGW specific symbol names aren't available in that DLL though.; // Therefore, manually export the relevant symbol from lli, to let it be; // found at runtime during tests.; //; // For real JIT uses, the real compiler support libraries should be linked; // in, somehow; this is a workaround to let tests pass.; //; // We need to make sure that this symbol actually is linked in when we; // try to export it; if no functions allocate a large enough stack area,; // nothing would reference it. Therefore, manually declare it and add a; // reference to it. (Note, the declarations of _alloca/___chkstk_ms/__chkstk; // are somewhat bogus, these functions use a different custom calling; // convention.); //; // TODO: Move this into libORC at some point, see; // https://github.com/llvm/llvm-project/issues/56603.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/lli/lli.cpp:871,test,tests,871,interpreter/llvm-project/llvm/tools/lli/lli.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/lli/lli.cpp,2,['test'],['tests']
Testability,"// For NON_EXTLOAD, generic code in getLoad assert(ValVT == MemVT)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:44,assert,assert,44,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,2,['assert'],['assert']
Testability,"// For PROOF-Lite we redirect this output to a the open log file so that the; // memory monitor can pick these messages up",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TProofPlayer.cxx:56,log,log,56,proof/proofplayer/src/TProofPlayer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TProofPlayer.cxx,1,['log'],['log']
Testability,"// For SMULFIX[SAT] we only expect to find Scale<VTSize, but this assert will; // cover for unhandled cases below, while still being valid for UMULFIX[SAT].",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:66,assert,assert,66,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,1,['assert'],['assert']
Testability,"// For SampleOverlapStats instances representing functions, weights of the; // function in base and test profiles",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp:100,test,test,100,interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,1,['test'],['test']
Testability,"// For SystemZ we define the models as follows:; //; // Small: BRASL can call any function and will use a stub if necessary.; // Locally-binding symbols will always be in range of LARL.; //; // Medium: BRASL can call any function and will use a stub if necessary.; // GOT slots and locally-defined text will always be in range; // of LARL, but other symbols might not be.; //; // Large: Equivalent to Medium for now.; //; // Kernel: Equivalent to Medium for now.; //; // This means that any PIC module smaller than 4GB meets the; // requirements of Small, so Small seems like the best default there.; //; // All symbols bind locally in a non-PIC module, so the choice is less; // obvious. There are two cases:; //; // - When creating an executable, PLTs and copy relocations allow; // us to treat external symbols as part of the executable.; // Any executable smaller than 4GB meets the requirements of Small,; // so that seems like the best default.; //; // - When creating JIT code, stubs will be in range of BRASL if the; // image is less than 4GB in size. GOT entries will likewise be; // in range of LARL. However, the JIT environment has no equivalent; // of copy relocs, so locally-binding data symbols might not be in; // the range of LARL. We need the Medium model in that case.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZTargetMachine.cpp:106,stub,stub,106,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZTargetMachine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZTargetMachine.cpp,3,['stub'],"['stub', 'stubs']"
Testability,"// For ThinLTO importing, we need to remove the type test assumes if this is; // an MDString type id without a corresponding TypeIdSummary. Any; // non-MDString type ids are ignored and treated as Unknown by LTT, so their; // type test assumes can be kept. If the MDString type id is missing a; // TypeIdSummary (e.g. because there was no use on a vcall, preventing the; // exporting phase of WPD from analyzing it), then it would be treated as; // Unsat by LTT and we need to remove its type test assumes here. If not; // used on a vcall we don't need them for later optimization use in any; // case.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/WholeProgramDevirt.cpp:53,test,test,53,interpreter/llvm-project/llvm/lib/Transforms/IPO/WholeProgramDevirt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/WholeProgramDevirt.cpp,3,['test'],['test']
Testability,"// For VPlan build stress testing, we bail out after VPlan construction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:26,test,testing,26,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,1,['test'],['testing']
Testability,"// For X86, we need to sort Registers and RegisterTuples together to list; // new registers and register tuples at a later position. So that we can; // reduce unnecessary iterations on unsupported registers in LiveVariables.; // TODO: Remove this logic when migrate from LiveVariables to LiveIntervals; // completely.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp:247,log,logic,247,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp,1,['log'],['logic']
Testability,"// For a logical right shift, we can fold if the comparison is not signed.; // We can also fold a signed comparison if the shifted mask value and the; // shifted comparison value are not negative. These constraints may not be; // obvious, but we can prove that they are correct using an SMT solver.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp:9,log,logical,9,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,1,['log'],['logical']
Testability,"// For accessor stubs, go back to the interface.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/DeclObjC.cpp:16,stub,stubs,16,interpreter/llvm-project/clang/lib/AST/DeclObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/DeclObjC.cpp,1,['stub'],['stubs']
Testability,"// For an argument attribute to transfer from a callsite to the parent, the; // call must be guaranteed to execute every time the parent is called.; // Conservatively, just check for calls in the entry block that are guaranteed; // to execute.; // TODO: This could be enhanced by testing if the callsite post-dominates the; // entry block or by doing simple forward walks or backward walks to the; // callsite.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionAttrs.cpp:280,test,testing,280,interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionAttrs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionAttrs.cpp,1,['test'],['testing']
Testability,"// For any type id used on a global's type metadata, create the type id; // summary resolution regardless of whether we can devirtualize, so that; // lower type tests knows the type id is not Unsat. If it was not used on; // a global's type metadata, the TypeIdMap entry set will be empty, and; // we don't want to create an entry (with the default Unknown type; // resolution), which can prevent detection of the Unsat.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/WholeProgramDevirt.cpp:161,test,tests,161,interpreter/llvm-project/llvm/lib/Transforms/IPO/WholeProgramDevirt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/WholeProgramDevirt.cpp,1,['test'],['tests']
Testability,"// For automatic generation of LDG (through SelectLoad[Vector], not the; // intrinsics), we may have an extending load like:; //; // i32,ch = load<LD1[%data1(addrspace=1)], zext from i8> t0, t7, undef:i64; //; // In this case, the matching logic above will select a load for the original; // memory type (in this case, i8) and our types will not match (the node needs; // to return an i32 in this case). Our LDG/LDU nodes do not support the; // concept of sign-/zero-extension, so emulate it here by adding an explicit; // CVT instruction. Ptxas should clean up any redundancies here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelDAGToDAG.cpp:240,log,logic,240,interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelDAGToDAG.cpp,1,['log'],['logic']
Testability,"// For branch that stays in loop by TRUE condition, go through AND. For branch; // that stays in loop by FALSE condition, go through OR. Both gives the; // similar logic: ""stay in loop iff all conditions are true(false)"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp:164,log,logic,164,interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp,1,['log'],['logic']
Testability,// For compatibility with opt's -analyze feature under legacy pass manager; // which was not ported to NPM. This keeps tests using; // update_analyze_test_checks.py working.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp:119,test,tests,119,interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,1,['test'],['tests']
Testability,// For debugging/testing.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFlatten.cpp:17,test,testing,17,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFlatten.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFlatten.cpp,1,['test'],['testing']
Testability,// For each executed test vector.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp:21,test,test,21,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,1,['test'],['test']
Testability,"// For each of these checks we need to be careful if the sign flag is; // being used. It is only safe to use the sign flag in two conditions,; // either the sign bit in the shrunken mask is zero or the final test; // size is equal to the original compare size.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp:208,test,test,208,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,1,['test'],['test']
Testability,"// For equality to 0 of a no-wrap multiply, decompose and test each op:; // X * Y == 0 --> (X == 0) || (Y == 0); // X * Y != 0 --> (X != 0) && (Y != 0); // TODO: This bails out if minsize is set, but if the target doesn't have a; // single instruction multiply for this type, it would likely be; // smaller to decompose.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:58,test,test,58,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,1,['test'],['test']
Testability,"// For every pointer, there must be exactly two stores, one coming from; // PTB or PFB, and the other from QTB or QFB. We don't support more than one; // store (to any address) in PTB,PFB or QTB,QFB.; // FIXME: We could relax this restriction with a bit more work and performance; // testing.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp:284,test,testing,284,interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp,1,['test'],['testing']
Testability,"// For example, ""testl %eax, $32776"" to ""testw %ax, $32776"".; // NOTE: We only want to form TESTW instructions if optimizing for; // min size. Otherwise we only save one byte and possibly get a length; // changing prefix penalty in the decoders.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp:17,test,testl,17,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,3,"['TEST', 'test']","['TESTW', 'testl', 'testw']"
Testability,"// For example, ""testq %rax, $268468232"" to ""testl %eax, $268468232"".; // NOTE: We only want to run that transform if N0 is 32 or 64 bits.; // Otherwize, we find ourselves in a position where we have to do; // promotion. If previous passes did not promote the and, we assume; // they had a good reason not to and do not promote here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp:17,test,testq,17,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,2,['test'],"['testl', 'testq']"
Testability,"// For example, convert ""testl %eax, $8"" to ""testb %al, $8""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp:25,test,testl,25,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,2,['test'],"['testb', 'testl']"
Testability,"// For example,; // `ON_CALL(mock, TwoParamMethod(m1, m2))` is expanded to; // `mock.gmock_TwoParamMethod(m1,m2)(WithoutMatchers(),; // nullptr).InternalDefaultActionSetAt(...)`.; // EXPECT_CALL is the same except that it calls `InternalExpectedAt` instead; // of `InternalDefaultActionSetAt` in the end.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/GtestMatchers.cpp:29,mock,mock,29,interpreter/llvm-project/clang/lib/ASTMatchers/GtestMatchers.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/GtestMatchers.cpp,2,['mock'],['mock']
Testability,"// For example,; // `ON_CALL(mock, TwoParamMethod)` is expanded to; // `mock.gmock_TwoArgsMethod(WithoutMatchers(),; // nullptr).InternalDefaultActionSetAt(...)`.; // EXPECT_CALL is the same except; // that it calls `InternalExpectedAt` instead of `InternalDefaultActionSetAt`; // in the end.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/GtestMatchers.cpp:29,mock,mock,29,interpreter/llvm-project/clang/lib/ASTMatchers/GtestMatchers.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/GtestMatchers.cpp,2,['mock'],['mock']
Testability,"// For feature tests where just one feature is required in a list, set the; // predicate result bit to whether the expression will return true, and only; // return the real result at the end of list marker.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCInstPrinter.cpp:15,test,tests,15,interpreter/llvm-project/llvm/lib/MC/MCInstPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCInstPrinter.cpp,1,['test'],['tests']
Testability,"// For floating-point precision of 12:; //; // LogOfMantissa =; // -1.7417939f +; // (2.8212026f +; // (-1.4699568f +; // (0.44717955f - 0.56570851e-1f * x) * x) * x) * x;; //; // error 0.000061011436, which is 14 bits",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:47,Log,LogOfMantissa,47,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,1,['Log'],['LogOfMantissa']
Testability,"// For floating-point precision of 6:; //; // LogofMantissa =; // -1.1609546f +; // (1.4034025f - 0.23903021f * x) * x;; //; // error 0.0034276066, which is better than 8 bits",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:46,Log,LogofMantissa,46,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,1,['Log'],['LogofMantissa']
Testability,"// For function member pointers, we only need to test the function pointer; // field. The other fields if any can be garbage.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp:49,test,test,49,interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,1,['test'],['test']
Testability,"// For globals that require a load from a stub to get the address, emit the; // load.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/M68kISelLowering.cpp:42,stub,stub,42,interpreter/llvm-project/llvm/lib/Target/M68k/M68kISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/M68kISelLowering.cpp,2,['stub'],['stub']
Testability,"// For local targets, create interworking stubs if we switch Arm/Thumb with an; // instruction that cannot switch the instruction set state natively.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/JITLink/aarch32.cpp:42,stub,stubs,42,interpreter/llvm-project/llvm/lib/ExecutionEngine/JITLink/aarch32.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/JITLink/aarch32.cpp,1,['stub'],['stubs']
Testability,"// For log scales, histogram coordinates are LOG10(ymin) and; // LOG10(ymax). Final adjustment (if not option ""Same""; // or ""+"" for ymax) of ymax and ymin for logarithmic scale, if; // Maximum and Minimum are not defined.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx:7,log,log,7,hist/histpainter/src/THistPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx,4,['log'],"['log', 'logarithmic']"
Testability,"// For log scales, histogram coordinates are log10(ymin) and; // log10(ymax). Final adjustment (if not option ""Same""); // or ""+"" for ymax) of ymax and ymin for logarithmic scale, if; // Maximum and Minimum are not defined.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx:7,log,log,7,hist/histpainter/src/THistPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx,2,['log'],"['log', 'logarithmic']"
Testability,"// For logical operations, we still have the case where some branches; // use the traditional ""merge"" approach and others sink the branch; // directly into the basic blocks representing the logical operation.; // We need to distinguish between those two cases here.; // The invariants are still shifting, but it is possible that the; // last element in a CFGBlock is not a CFGStmt. Look for the last; // CFGStmt as the value of the condition.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngine.cpp:7,log,logical,7,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngine.cpp,2,['log'],['logical']
Testability,"// For managed capabilities, the destructor should unlock in the right mode; // anyway. For asserted capabilities no unlocking is needed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp:92,assert,asserted,92,interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp,1,['assert'],['asserted']
Testability,// For moveLowLatencies. After all Scheduling variants are tested.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIMachineScheduler.h:59,test,tested,59,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIMachineScheduler.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIMachineScheduler.h,1,['test'],['tested']
Testability,// For no-asserts builds.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCVSXSwapRemoval.cpp:10,assert,asserts,10,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCVSXSwapRemoval.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCVSXSwapRemoval.cpp,1,['assert'],['asserts']
Testability,"// For non-HIP compilation, erase the old Stub and fall-through to creating; // new entries.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp:42,Stub,Stub,42,interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,1,['Stub'],['Stub']
Testability,"// For non-floating point types, check for self-comparisons of the form; // x == x, x != x, x < x, etc. These always evaluate to a constant, and; // often indicate logic errors in the program.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:164,log,logic,164,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,2,['log'],['logic']
Testability,"// For non-floating point types, check for self-comparisons of the form; // x == x, x != x, x < x, etc. These always evaluate to a constant, and; // often indicate logic errors in the program.; //; // NOTE: Don't warn about comparison expressions resulting from macro; // expansion. Also don't warn about comparisons which are only self; // comparisons within a template instantiation. The warnings should catch; // obvious cases in the definition of the template anyways. The idea is to; // warn when the typed comparison operator will always evaluate to the same; // result.; // Used for indexing into %select in warn_comparison_always",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:164,log,logic,164,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['log'],['logic']
Testability,"// For now we only use special logic for call sites. However, the tracker; // itself knows about a lot of other non-capturing cases already.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp:31,log,logic,31,interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,2,['log'],['logic']
Testability,"// For now, assert that the start of the string exactly; // corresponds to the start of a token.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseStmtAsm.cpp:12,assert,assert,12,interpreter/llvm-project/clang/lib/Parse/ParseStmtAsm.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseStmtAsm.cpp,1,['assert'],['assert']
Testability,"// For now, assert that the string we're working with is a substring; // of what we gave to MC. This lets us use the original tokens.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseStmtAsm.cpp:12,assert,assert,12,interpreter/llvm-project/clang/lib/Parse/ParseStmtAsm.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseStmtAsm.cpp,1,['assert'],['assert']
Testability,"// For now, only add this when we have a byval argument.; // TODO: be less lazy about updating test cases.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:95,test,test,95,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,1,['test'],['test']
Testability,"// For now, only performCSELCombine and performBRCONDCombine call this; // function. And both of them pass 2 for CCIndex, 3 for CmpIndex with 4; // operands. So just init the ops direct to simplify the code. If we have some; // other case with different CCIndex, CmpIndex, we need to use for loop to; // rewrite the code here.; // TODO: Do we need to assert number of operand is 4 here?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:351,assert,assert,351,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['assert'],['assert']
Testability,"// For now, the just return the union of the flags. If the flags get more; // complicated over time, we might need more logic here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineInstr.cpp:120,log,logic,120,interpreter/llvm-project/llvm/lib/CodeGen/MachineInstr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineInstr.cpp,1,['log'],['logic']
Testability,"// For offline mode, one needs a a full URL or the request; // gets forwarded to openi5.hana.ondemand.com.; // This has to be understood and fixed. Loading of shaders; // afterwards fails, too.; // // console.log(window.location.pathname); // where are we loading from?; // import(""https://desire.physics.ucsd.edu/matevz/alja.github.io/rootui5/eve7/rnr_core/RenderCore.js"").then((module) => {",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/GlViewerRCore.js:209,log,log,209,ui5/eve7/lib/GlViewerRCore.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/GlViewerRCore.js,1,['log'],['log']
Testability,"// For pointer IVs, we chose to not strip inbounds which requires us not; // to add a potentially UB introducing use. We need to either a) show; // the loop test we're modifying is already in post-inc form, or b) show; // that adding a use must not introduce UB.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp:157,test,test,157,interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp,1,['test'],['test']
Testability,// For side effect of calling assert on invalid usage.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Value.h:30,assert,assert,30,interpreter/llvm-project/llvm/include/llvm/IR/Value.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Value.h,1,['assert'],['assert']
Testability,"// For stress testing, precompute live ranges of all physical register; // units, including reserved registers.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveIntervals.cpp:14,test,testing,14,interpreter/llvm-project/llvm/lib/CodeGen/LiveIntervals.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveIntervals.cpp,1,['test'],['testing']
Testability,"// For symbols that require a load from a stub to get the address, emit the; // load.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/M68kISelLowering.cpp:42,stub,stub,42,interpreter/llvm-project/llvm/lib/Target/M68k/M68kISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/M68kISelLowering.cpp,1,['stub'],['stub']
Testability,// For testing only.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/WholeProgramDevirt.h:7,test,testing,7,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/WholeProgramDevirt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/WholeProgramDevirt.h,1,['test'],['testing']
Testability,// For testing purposes we tell it to not use relaxed load forms so that it; // will split blocks.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsConstantIslandPass.cpp:7,test,testing,7,interpreter/llvm-project/llvm/lib/Target/Mips/MipsConstantIslandPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsConstantIslandPass.cpp,1,['test'],['testing']
Testability,"// For testing purposes, we consider four special cases for which the values are known from; // the Cousins et al. paper mentioned above. The inputs for each of these cases are (using; // the notations from the paper): n_on, n_off and Z_PL. We provide a certain fixed input set; // for each case.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:7,test,testing,7,roofit/roostats/test/stressRooStats_tests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h,2,['test'],['testing']
Testability,"// For testing purposes, we print the LocCookie here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llc/NewPMDriver.cpp:7,test,testing,7,interpreter/llvm-project/llvm/tools/llc/NewPMDriver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llc/NewPMDriver.cpp,1,['test'],['testing']
Testability,"// For testing the linear fitter we can force the use by setting Linear the default minimizer and use; // the G option. In this case the fit is linearized using the gradient as the linear components; // Use option ""X"" to force Chi2 calculations",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:7,test,testing,7,test/stressHistoFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx,1,['test'],['testing']
Testability,"// For testing with a mock opagent implementation, skips the dynamic load and; // the function resolution.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/OProfileWrapper.h:7,test,testing,7,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/OProfileWrapper.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/OProfileWrapper.h,2,"['mock', 'test']","['mock', 'testing']"
Testability,"// For the WeakSIV test, it's possible the loop isn't common to the; // Src and Dst loops. If it isn't, then there's no need to record a direction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp:19,test,test,19,interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,1,['test'],['test']
Testability,"// For the WeakSIV test, it's possible the loop isn't common to; // the Src and Dst loops. If it isn't, then there's no need to; // record a direction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp:19,test,test,19,interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,1,['test'],['test']
Testability,"// For the following condition the following CFG would be built:; //; // ------------->; // / \; // [B1] -> [B2] -> [B3] -> [sink]; // assert(A && B || C); \ \; // -----------> [go on with the execution]; //; // It so happens that CFGBlock::getTerminatorCondition returns 'A' for block; // B1, 'A && B' for B2, and 'A && B || C' for B3. Let's check whether we; // reached the end of the condition!",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporterVisitors.cpp:135,assert,assert,135,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporterVisitors.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporterVisitors.cpp,1,['assert'],['assert']
Testability,// For the given 'Scopes' returns a scope that is logically equal; // to the current scope; otherwise 'nullptr'.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h:50,log,logically,50,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h,5,['log'],['logically']
Testability,"// For the given compile unit, collect all scopes ranges.; // For a complete ranges and lines mapping, the logical view support; // needs for the compile unit to have a low and high pc values. We; // can traverse the 'Modules' section and get the information for the; // specific module. Another option, is from all the ranges collected; // to take the first and last values.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVCodeViewReader.cpp:107,log,logical,107,interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVCodeViewReader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVCodeViewReader.cpp,1,['log'],['logical']
Testability,"// For the given inlinesite, get the initial line number and its; // source filename. Update the logical scope representing it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.cpp:97,log,logical,97,interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.cpp,1,['log'],['logical']
Testability,"// For the given test case:; //; // struct S { enum E { ... }; };; // S::E V;; //; // 0 | S_LOCAL `V`; // type=0x1004 (S::E), flags = none; // 0x1004 | LF_ENUM `S::E`; // options: has unique name | is nested; // 0x1009 | LF_STRUCTURE `S`; // options: contains nested class; //; // When the local 'V' is processed, its type 'E' is created. But There is; // no direct reference to its parent 'S'. We use the scoped name for 'E',; // to create its parents.; // The input scoped name must have at least parent and nested names.; // Drop the last element name, as it corresponds to the nested type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.cpp:17,test,test,17,interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.cpp,1,['test'],['test']
Testability,"// For the last bit test, fall through to Default.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/IRTranslator.cpp:20,test,test,20,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/IRTranslator.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/IRTranslator.cpp,2,['test'],['test']
Testability,"// For the next N - 1 pages, just probe. I tried to take advantage of; // natural probes but it implies much more logic and there was very few; // interesting natural probes to interleave.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FrameLowering.cpp:114,log,logic,114,interpreter/llvm-project/llvm/lib/Target/X86/X86FrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FrameLowering.cpp,1,['log'],['logic']
Testability,"// For the scalar case extend to a 128-bit vector, perform the logic op,; // and extract the scalar result back out.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:63,log,logic,63,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['log'],['logic']
Testability,"// For the testing locator, use the same payload as Object64. We're not gonna really read it back anyway.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RNTupleSerialize.cxx:11,test,testing,11,tree/ntuple/v7/src/RNTupleSerialize.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RNTupleSerialize.cxx,1,['test'],['testing']
Testability,"// For the transform to be legal, the load must produce only two values; // (the value loaded and the chain). Don't transform a pre-increment; // load, for example, which produces an extra value. Otherwise the; // transformation is not equivalent, and the downstream logic to replace; // uses gets things wrong.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:267,log,logic,267,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['log'],['logic']
Testability,"// For this test, ensure at least some columns have multiple pages",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/ntuple_storage.cxx:12,test,test,12,tree/ntuple/v7/test/ntuple_storage.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/ntuple_storage.cxx,1,['test'],['test']
Testability,"// For this test, use a uniform non-unity weight of 1.5. It was set to 0.1; // in the past, but then there were fourth-digit differences between the; // scalar mode and the batch mode. However, this is most likeliy not; // pointing towards a flaw in the batch mode, which is why a value was; // handpicked for which the differences disappear. Any residual problems are; // most likely caused by the unnecessarily complicated implementation of the; // RooAddPdf extended term in the scalar mode: the coefficients are; // projected to the subrange by cached scale factors, while the batch mode; // just uses the same scaling factor as for the full likelihood.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testSumW2Error.cxx:12,test,test,12,roofit/roofitcore/test/testSumW2Error.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testSumW2Error.cxx,1,['test'],['test']
Testability,"// For use with a SegIndex, SegOffset, and PointerSize triple in; // MachOBindEntry::moveNext() to validate a MachOBindEntry or MachORebaseEntry.; //; // Given a SegIndex, SegOffset, and PointerSize, verify a valid section exists; // that fully contains a pointer at that location. Multiple fixups in a bind; // (such as with the BIND_OPCODE_DO_BIND_ULEB_TIMES_SKIPPING_ULEB opcode) can; // be tested via the Count and Skip parameters.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp:394,test,tested,394,interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp,1,['test'],['tested']
Testability,"// For version 4 onwards, of the FDR log, we want to also capture the CPU ID; // of the custom event.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/XRay/RecordInitializer.cpp:37,log,log,37,interpreter/llvm-project/llvm/lib/XRay/RecordInitializer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/XRay/RecordInitializer.cpp,1,['log'],['log']
Testability,// Force the Function analysis manager to also be available so that it can; // be accessed in an SCC analysis and proxied onward to function passes.; // FIXME: It is pretty awkward to just drop the result here and assert that; // we can find it again later.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/CGSCCPassManager.cpp:214,assert,assert,214,interpreter/llvm-project/llvm/lib/Analysis/CGSCCPassManager.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/CGSCCPassManager.cpp,1,['assert'],['assert']
Testability,"// Formatting with 1 Column isn't really a column layout, so we don't need the; // special logic here. We can just avoid bin packing any of the parameters.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/FormatToken.cpp:91,log,logic,91,interpreter/llvm-project/clang/lib/Format/FormatToken.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/FormatToken.cpp,1,['log'],['logic']
Testability,"// Forward dec of unit test class, so that we can peer into the LDV object.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.h:23,test,test,23,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.h,1,['test'],['test']
Testability,// Forward declarations so we can use Logger anywhere in the framework.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/Logger.h:38,Log,Logger,38,interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/Logger.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/Logger.h,1,['Log'],['Logger']
Testability,"// Forward slash is allowed to be unquoted, but we quote it anyway. We have; // many tests that use FileCheck against YAML output, and this output often; // contains paths. If we quote backslashes but not forward slashes then; // paths will come out either quoted or unquoted depending on which platform; // the test is run on, making FileCheck comparisons difficult.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h:85,test,tests,85,interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,2,['test'],"['test', 'tests']"
Testability,"// From here, the implementation of the different tests. The names; // of the test should be enough to know what they are testing, as; // these tests are mean to be as simple as possible.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/fitpanel/test/UnitTesting.cxx:50,test,tests,50,gui/fitpanel/test/UnitTesting.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/fitpanel/test/UnitTesting.cxx,4,['test'],"['test', 'testing', 'tests']"
Testability,// Function pointer types for testing implementation of Intel jitprofiling; // library,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/IntelJITEvents/IntelJITEventsWrapper.h:30,test,testing,30,interpreter/llvm-project/llvm/lib/ExecutionEngine/IntelJITEvents/IntelJITEventsWrapper.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/IntelJITEvents/IntelJITEventsWrapper.h,1,['test'],['testing']
Testability,"// Function to be executed for the test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:35,test,test,35,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['test'],['test']
Testability,"// Functions could be referenced by global vars - e.g. a vtable; but we; // don't currently imagine a reason those would be imported here, rather; // than as part of the logic deciding which functions to import (i.e.; // based on profile information). Should we decide to handle them here,; // we can refactor accordingly at that time.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionImport.cpp:170,log,logic,170,interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionImport.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionImport.cpp,1,['log'],['logic']
Testability,"// Functions for marking a declaration referenced. These functions also; // contain the relevant logic for marking if a reference to a function or; // variable is an odr-use (in the C++11 sense). There are separate variants; // for expressions referring to a decl; these exist because odr-use marking; // needs to be delayed for some constant variables when we build one of the; // named expressions.; //; // MightBeOdrUse indicates whether the use could possibly be an odr-use, and; // should usually be true. This only needs to be set to false if the lack of; // odr-use cannot be determined from the current context (for instance,; // because the name denotes a virtual function and was written without an; // explicit nested-name-specifier).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:97,log,logic,97,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['log'],['logic']
Testability,"// Functions for testing concurrentfill",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/concurrentfill.cxx:17,test,testing,17,hist/histv7/test/concurrentfill.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/concurrentfill.cxx,1,['test'],['testing']
Testability,// Functions for testing operand type,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Lanai/AsmParser/LanaiAsmParser.cpp:17,test,testing,17,interpreter/llvm-project/llvm/lib/Target/Lanai/AsmParser/LanaiAsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Lanai/AsmParser/LanaiAsmParser.cpp,1,['test'],['testing']
Testability,// Functions for testing.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StdLibraryFunctionsChecker.cpp:17,test,testing,17,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StdLibraryFunctionsChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StdLibraryFunctionsChecker.cpp,1,['test'],['testing']
Testability,"// Functions like isZIPMask return true when a ISD::VECTOR_SHUFFLE's mask; // represents the same logical operation as performed by a ZIP instruction. In; // isolation these functions do not mean the ISD::VECTOR_SHUFFLE is exactly; // equivalent to an AArch64 instruction. There's the extra component of; // ISD::VECTOR_SHUFFLE's value type to consider. Prior to SVE these functions; // only operated on 64/128bit vector types that have a direct mapping to a; // target register and so an exact mapping is implied.; // However, when using SVE for fixed length vectors, most legal vector types; // are actually sub-vectors of a larger SVE register. When mapping; // ISD::VECTOR_SHUFFLE to an SVE instruction care must be taken to consider; // how the mask's indices translate. Specifically, when the mapping requires; // an exact meaning for a specific vector index (e.g. Index X is the last; // vector element in the register) then such mappings are often only safe when; // the exact SVE register size is know. The main exception to this is when; // indices are logically relative to the first element of either; // ISD::VECTOR_SHUFFLE operand because these relative indices don't change; // when converting from fixed-length to scalable vector types (i.e. the start; // of a fixed length vector is always the start of a scalable vector).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:98,log,logical,98,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,2,['log'],"['logical', 'logically']"
Testability,"// Functions on COFF can be non-DSO local for three reasons:; // - They are intrinsic functions (!GV); // - They are marked dllimport; // - They are extern_weak, and a stub is needed",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86Subtarget.cpp:168,stub,stub,168,interpreter/llvm-project/llvm/lib/Target/X86/X86Subtarget.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86Subtarget.cpp,1,['stub'],['stub']
Testability,// Fusing guarded loops is handled slightly differently than non-guarded; // loops and has been broken out into a separate method instead of trying to; // intersperse the logic within a single method.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFuse.cpp:171,log,logic,171,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFuse.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFuse.cpp,1,['log'],['logic']
Testability,// Future tests are not against members and so do not have; // instance context.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp:10,test,tests,10,interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp,1,['test'],['tests']
Testability,// Future-proofing assertion: this function assumes the IntervalMap; // constructor doesn't add any nodes.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:19,assert,assertion,19,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,2,['assert'],['assertion']
Testability,"// GA evaluation of best cut for sig eff * sig pur. Slow, disabled for now.; // Log() << kINFO <<Form(""Dataset[%s] : "",DataInfo().GetName())<< ""Determine optimal multiclass cuts for test; // data..."" << Endl; for (UInt_t icls = 0; icls<DataInfo().GetNClasses(); ++icls) {; // resMulticlass->GetBestMultiClassCuts(icls);; // }; // Create histograms for use in TMVA GUI",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:80,Log,Log,80,tmva/tmva/src/MethodBase.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx,2,"['Log', 'test']","['Log', 'test']"
Testability,"// GCC rejects rem/and/or/xor for integer complex.; // Logical and/or always return int, never complex.; // No comparisons produce a complex result.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprComplex.cpp:55,Log,Logical,55,interpreter/llvm-project/clang/lib/CodeGen/CGExprComplex.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprComplex.cpp,1,['Log'],['Logical']
Testability,"// GCC supports case insensitive register names. Some of the AVR registers; // are all lower case, some are all upper case but non are mixed. We prefer; // to use the original names in the register definitions. That is why we; // have to test both upper and lower case here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AVR/AsmParser/AVRAsmParser.cpp:238,test,test,238,interpreter/llvm-project/llvm/lib/Target/AVR/AsmParser/AVRAsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AVR/AsmParser/AVRAsmParser.cpp,1,['test'],['test']
Testability,"// GCC's logic around choosing a default `-mabi=` is complex. If GCC is not; // configured using `--with-abi=`, then the logic for the default choice is; // defined in config.gcc. This function is based on the logic in GCC 9.2.0.; //; // The logic used in GCC 9.2.0 is the following, in order:; // 1. Explicit choices using `--with-abi=`; // 2. A default based on `--with-arch=`, if provided; // 3. A default based on the target triple's arch; //; // The logic in config.gcc is a little circular but it is not inconsistent.; //; // Clang does not have `--with-arch=` or `--with-abi=`, so we use `-march=`; // and `-mabi=` respectively instead.; //; // In order to make chosing logic more clear, Clang uses the following logic,; // in order:; // 1. Explicit choices using `-mabi=`; // 2. A default based on the architecture as determined by getRISCVArch; // 3. Choose a default based on the triple; // 1. If `-mabi=` is specified, use it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Arch/RISCV.cpp:9,log,logic,9,interpreter/llvm-project/clang/lib/Driver/ToolChains/Arch/RISCV.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Arch/RISCV.cpp,7,['log'],['logic']
Testability,"// GCC's logic around choosing a default `-march=` is complex. If GCC is not; // configured using `--with-arch=`, then the logic for the default choice is; // defined in config.gcc. This function is based on the logic in GCC 9.2.0. We; // deviate from GCC's default on additional `-mcpu` option (GCC does not; // support `-mcpu`) and baremetal targets (UnknownOS) where neither `-march`; // nor `-mabi` is specified.; //; // The logic used in GCC 9.2.0 is the following, in order:; // 1. Explicit choices using `--with-arch=`; // 2. A default based on `--with-abi=`, if provided; // 3. A default based on the target triple's arch; //; // The logic in config.gcc is a little circular but it is not inconsistent.; //; // Clang does not have `--with-arch=` or `--with-abi=`, so we use `-march=`; // and `-mabi=` respectively instead.; //; // Clang uses the following logic, in order:; // 1. Explicit choices using `-march=`; // 2. Based on `-mcpu` if the target CPU has a default ISA string; // 3. A default based on `-mabi`, if provided; // 4. A default based on the target triple's arch; //; // Clang does not yet support MULTILIB_REUSE, so we use `rv{XLEN}imafdc`; // instead of `rv{XLEN}gc` though they are (currently) equivalent.; // 1. If `-march=` is specified, use it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Arch/RISCV.cpp:9,log,logic,9,interpreter/llvm-project/clang/lib/Driver/ToolChains/Arch/RISCV.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Arch/RISCV.cpp,6,['log'],['logic']
Testability,// GLIBC_INITS_RSEQ; // The frontend that generates the memory annotation structures should; // validate that the address to map the snippet in at is a multiple of; // the page size. Assert that this is true here.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.cpp:183,Assert,Assert,183,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.cpp,1,['Assert'],['Assert']
Testability,"// GPRs and FPRs are saved in pairs of 64-bit regs. We expect the CSI; // list to come in sorted by frame index so that we can issue the store; // pair instructions directly. Assert if we see anything otherwise.; //; // The order of the registers in the list is controlled by; // getCalleeSavedRegs(), so they will always be in-order, as well.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:175,Assert,Assert,175,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,1,['Assert'],['Assert']
Testability,"// GRU tests",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestCustomModelsFromONNX.cxx:7,test,tests,7,tmva/sofie/test/TestCustomModelsFromONNX.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestCustomModelsFromONNX.cxx,1,['test'],['tests']
Testability,"// Gather/scatters do allow loading from arbitrary strides, at; // least if they are loop invariant.; // TODO: Loop variant strides should in theory work, too, but; // this requires further testing.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMTargetTransformInfo.cpp:190,test,testing,190,interpreter/llvm-project/llvm/lib/Target/ARM/ARMTargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMTargetTransformInfo.cpp,1,['test'],['testing']
Testability,"// General matrix EigenVector algorithm tested on symmetric matrix",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressLinear.cxx:40,test,tested,40,test/stressLinear.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressLinear.cxx,1,['test'],['tested']
Testability,"// Generally SrcSize is never greater than DstSize, since this means we are; // losing bits. However, this can happen in cases where the structure has; // additional padding, for example due to a user specified alignment.; //; // FIXME: Assert that we aren't truncating non-padding bits when have access; // to that information.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:237,Assert,Assert,237,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,1,['Assert'],['Assert']
Testability,"// Generate a conditional expression to check if the current target satisfies; // the conditions for a TargetSpecificAttr record, and append the code for; // those checks to the Test string. If the FnName string pointer is non-null,; // append a unique suffix to distinguish this set of target checks from other; // TargetSpecificAttr records.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp:178,Test,Test,178,interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp,1,['Test'],['Test']
Testability,"// Generate a function call to testSetjmp function and preamble/postamble; // code to figure out (1) whether longjmp occurred (2) if longjmp; // occurred, which setjmp it corresponds to",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyLowerEmscriptenEHSjLj.cpp:31,test,testSetjmp,31,interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyLowerEmscriptenEHSjLj.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyLowerEmscriptenEHSjLj.cpp,1,['test'],['testSetjmp']
Testability,// Generate a node for each of the successors.; // Our logic for EH analysis can certainly be improved.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/CoreEngine.cpp:55,log,logic,55,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/CoreEngine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/CoreEngine.cpp,1,['log'],['logic']
Testability,"// Generate induction resume values. These variables save the new starting; // indexes for the scalar loop. They are used to test if there are any tail; // iterations left once the vector loop has completed.; // Note that when the vectorized epilogue is skipped due to iteration count; // check, then the resume value for the induction variable comes from; // the trip count of the main vector loop, hence passing the AdditionalBypass; // argument.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:125,test,test,125,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,1,['test'],['test']
Testability,// Generate test code using function throwCppException(...) as; // the function which throws foreign exceptions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:12,test,test,12,interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,1,['test'],['test']
Testability,"// Generate testSetjmp function call seqence with preamble and postamble.; // The code this generates is equivalent to the following JavaScript code:; // %__threwValue.val = __threwValue;; // if (%__THREW__.val != 0 & %__threwValue.val != 0) {; // %label = testSetjmp(mem[%__THREW__.val], setjmpTable, setjmpTableSize);; // if (%label == 0); // emscripten_longjmp(%__THREW__.val, %__threwValue.val);; // setTempRet0(%__threwValue.val);; // } else {; // %label = -1;; // }; // %longjmp_result = getTempRet0();; //; // As output parameters. returns %label, %longjmp_result, and the BB the last; // instruction (%longjmp_result = ...) is in.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyLowerEmscriptenEHSjLj.cpp:12,test,testSetjmp,12,interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyLowerEmscriptenEHSjLj.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyLowerEmscriptenEHSjLj.cpp,2,['test'],['testSetjmp']
Testability,// Generate the ParsedAttrInfo subclass logic for declarations.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp:40,log,logic,40,interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp,1,['log'],['logic']
Testability,"// Generic locality test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TFile.cxx:20,test,test,20,io/io/src/TFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TFile.cxx,1,['test'],['test']
Testability,// Generic processor model is for testing only.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Cuda.h:34,test,testing,34,interpreter/llvm-project/clang/include/clang/Basic/Cuda.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Cuda.h,1,['test'],['testing']
Testability,"// Generic test that an N-dimensional histogram with a certain axis; // configuration is binned correctly.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/binning.cxx:11,test,test,11,hist/histv7/test/binning.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/binning.cxx,1,['test'],['test']
Testability,"// Get Session dir (sandbox)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServLite.cxx:20,sandbox,sandbox,20,proof/proof/src/TProofServLite.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServLite.cxx,1,['sandbox'],['sandbox']
Testability,"// Get file descriptor for log file",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServLite.cxx:27,log,log,27,proof/proof/src/TProofServLite.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServLite.cxx,1,['log'],['log']
Testability,"// Get log file from master or slave after a hard interrupt",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TSlave.cxx:7,log,log,7,proof/proof/src/TSlave.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TSlave.cxx,1,['log'],['log']
Testability,"// Get log file from master or slave after a soft interrupt",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TSlave.cxx:7,log,log,7,proof/proof/src/TSlave.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TSlave.cxx,1,['log'],['log']
Testability,"// Get log file from server after a hard interrupt",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TApplicationRemote.cxx:7,log,log,7,net/net/src/TApplicationRemote.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TApplicationRemote.cxx,1,['log'],['log']
Testability,"// Get log file from server after a soft interrupt",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TApplicationRemote.cxx:7,log,log,7,net/net/src/TApplicationRemote.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TApplicationRemote.cxx,1,['log'],['log']
Testability,"// Get log step / alt key",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGNumberEntry.cxx:7,log,log,7,gui/gui/src/TGNumberEntry.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGNumberEntry.cxx,3,['log'],['log']
Testability,"// Get logs",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:7,log,logs,7,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['log'],['logs']
Testability,// Get prot flags.; // FIXME: Make sure this test is correct (it's probably missing cases; // as-is).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/JITLink/MachOLinkGraphBuilder.cpp:45,test,test,45,interpreter/llvm-project/llvm/lib/ExecutionEngine/JITLink/MachOLinkGraphBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/JITLink/MachOLinkGraphBuilder.cpp,1,['test'],['test']
Testability,// Get rid of mismatch (otherwise Success assertions will fail); // by computing a new value matching the type of E.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp:42,assert,assertions,42,interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,1,['assert'],['assertions']
Testability,// Get rounded size of the argument.GCC does not allow vararg of; // size < 4 bytes. We follow the same logic here.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/Hexagon.cpp:104,log,logic,104,interpreter/llvm-project/clang/lib/CodeGen/Targets/Hexagon.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/Hexagon.cpp,1,['log'],['logic']
Testability,"// Get some useful info about the cluster (the sandbox dir ...)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:47,sandbox,sandbox,47,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['sandbox'],['sandbox']
Testability,"// Get the TestStatistic",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/NumEventsTestStat.h:11,Test,TestStatistic,11,roofit/roostats/inc/RooStats/NumEventsTestStat.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/NumEventsTestStat.h,1,['Test'],['TestStatistic']
Testability,"// Get the frequency for checking memory consumption and logging information",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TProofPlayer.cxx:57,log,logging,57,proof/proofplayer/src/TProofPlayer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TProofPlayer.cxx,1,['log'],['logging']
Testability,// Get the list of architectures to be tested for.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp:39,test,tested,39,interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp,1,['test'],['tested']
Testability,"// Get the log (during collection this will be done at the end",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TApplicationRemote.cxx:11,log,log,11,net/net/src/TApplicationRemote.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TApplicationRemote.cxx,1,['log'],['log']
Testability,// Get the new source to rewrite. TODO: Only enable handling of multiple; // sources (PHIs) once we have a motivating example and testcases for it.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp:130,test,testcases,130,interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp,1,['test'],['testcases']
Testability,"// Get the original event vectors for testing and training from the dataset.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CvSplit.cxx:38,test,testing,38,tmva/tmva/src/CvSplit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CvSplit.cxx,1,['test'],['testing']
Testability,// Get the secure log path.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/DarwinAsmParser.cpp:18,log,log,18,interpreter/llvm-project/llvm/lib/MC/MCParser/DarwinAsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/DarwinAsmParser.cpp,1,['log'],['log']
Testability,// Get the size of the bundle without asserting.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonVLIWPacketizer.cpp:38,assert,asserting,38,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonVLIWPacketizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonVLIWPacketizer.cpp,1,['assert'],['asserting']
Testability,// Get the split that we need to reflow next logical line into the end; // of the current one; the split will include any leading whitespace of; // the next logical line.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/ContinuationIndenter.cpp:45,log,logical,45,interpreter/llvm-project/clang/lib/Format/ContinuationIndenter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/ContinuationIndenter.cpp,2,['log'],['logical']
Testability,"// Get the stub function type, int(*)(int,...).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp:11,stub,stub,11,interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp,1,['stub'],['stub']
Testability,"// Get user logon name",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx:12,log,logon,12,net/auth/src/TAuthenticate.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx,4,['log'],['logon']
Testability,// Gets the Edge::Kind from one function to another by looking at the function's; // instructions. Asserts if there is no edge.; // Useful for determining what type of edge should exist between functions when; // the edge hasn't been created yet.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LazyCallGraph.cpp:99,Assert,Asserts,99,interpreter/llvm-project/llvm/lib/Analysis/LazyCallGraph.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LazyCallGraph.cpp,1,['Assert'],['Asserts']
Testability,// Gets the registers that might potentially need to be saved by while; // the setup in the test harness executes.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h:92,test,test,92,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h,1,['test'],['test']
Testability,// Getters functions that assert if the required values are not present.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:26,assert,assert,26,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,1,['assert'],['assert']
Testability,// Give discount for some combined logical operations if supported.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZTargetTransformInfo.cpp:35,log,logical,35,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZTargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZTargetTransformInfo.cpp,1,['log'],['logical']
Testability,"// Given a SegIndex, SegOffset, and PointerSize, verify a valid section exists; // that fully contains a pointer at that location. Multiple fixups in a bind; // (such as with the BIND_OPCODE_DO_BIND_ULEB_TIMES_SKIPPING_ULEB opcode) can; // be tested via the Count and Skip parameters.; //; // This is used by MachOBindEntry::moveNext() to validate a MachOBindEntry.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/MachO.h:243,test,tested,243,interpreter/llvm-project/llvm/include/llvm/Object/MachO.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/MachO.h,1,['test'],['tested']
Testability,"// Given a SegIndex, SegOffset, and PointerSize, verify a valid section exists; // that fully contains a pointer at that location. Multiple fixups in a rebase; // (such as with the REBASE_OPCODE_DO_*_TIMES* opcodes) can be tested via the; // Count and Skip parameters.; //; // This is used by MachORebaseEntry::moveNext() to validate a MachORebaseEntry",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/MachO.h:223,test,tested,223,interpreter/llvm-project/llvm/include/llvm/Object/MachO.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/MachO.h,1,['test'],['tested']
Testability,"// Given a filename, FileIndex picks the best matching file from the underlying; // DB. This is the proxy file whose CompileCommand will be reused. The; // heuristics incorporate file name, extension, and directory structure.; // Strategy:; // - Build indexes of each of the substrings we want to look up by.; // These indexes are just sorted lists of the substrings.; // - Each criterion corresponds to a range lookup into the index, so we only; // need O(log N) string comparisons to determine scores.; //; // Apart from path proximity signals, also takes file extensions into account; // when scoring the candidates.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/InterpolatingCompilationDatabase.cpp:457,log,log,457,interpreter/llvm-project/clang/lib/Tooling/InterpolatingCompilationDatabase.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/InterpolatingCompilationDatabase.cpp,1,['log'],['log']
Testability,"// Given a set of serialized instruction benchmarks, returns the set of; // triples and CPUs that appear in the list of benchmarks.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkResult.h:41,benchmark,benchmarks,41,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkResult.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkResult.h,2,['benchmark'],['benchmarks']
Testability,"// Given an instruction Opcode and Config, in which clusters do benchmarks of; // this instruction lie? Normally, they all should be in the same cluster.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.cpp:64,benchmark,benchmarks,64,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.cpp,1,['benchmark'],['benchmarks']
Testability,"// Given an instruction Opcode, we can make benchmarks (measurements) of the; // instruction characteristics/performance. Then, to facilitate further analysis; // we group the benchmarks with *similar* characteristics into clusters.; // Now, this is all not entirely deterministic. Some instructions have variable; // characteristics, depending on their arguments. And thus, if we do several; // benchmarks of the same instruction Opcode, we may end up with *different*; // performance characteristics measurements. And when we then do clustering,; // these several benchmarks of the same instruction Opcode may end up being; // clustered into *different* clusters. This is not great for further analysis.; // We shall find every opcode with benchmarks not in just one cluster, and move; // *all* the benchmarks of said Opcode into one new unstable cluster per Opcode.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.cpp:44,benchmark,benchmarks,44,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.cpp,6,['benchmark'],['benchmarks']
Testability,"// Given an instruction Opcode, which sched class id's are represented,; // and which are the benchmarks for each sched class?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.cpp:94,benchmark,benchmarks,94,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.cpp,1,['benchmark'],['benchmarks']
Testability,"// Given our assertion, hitting this part must mean; // !OldClass->memory_empty()",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/NewGVN.cpp:13,assert,assertion,13,interpreter/llvm-project/llvm/lib/Transforms/Scalar/NewGVN.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/NewGVN.cpp,1,['assert'],['assertion']
Testability,"// Given pattern:; // icmp eq/ne (and ((x shift Q), (y oppositeshift K))), 0; // we should move shifts to the same hand of 'and', i.e. rewrite as; // icmp eq/ne (and (x shift (Q+K)), y), 0 iff (Q+K) u< bitwidth(x); // We are only interested in opposite logical shifts here.; // One of the shifts can be truncated.; // If we can, we want to end up creating 'lshr' shift.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp:253,log,logical,253,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,1,['log'],['logical']
Testability,"// Given something like this:; //; // %x = ...Something...; // %one = G_CONSTANT i64 1; // %zero = G_CONSTANT i64 0; // %and = G_AND %x, %one; // %cmp = G_ICMP intpred(ne), %and, %zero; // %cmp_trunc = G_TRUNC %cmp; // G_BRCOND %cmp_trunc, %bb.3; //; // We want to try and fold the AND into the G_BRCOND and produce either a; // TBNZ (when we have intpred(ne)) or a TBZ (when we have intpred(eq)).; //; // In this case, we'd get; //; // TBNZ %x %bb.3; //; // Check if the AND has a constant on its RHS which we can use as a mask.; // If it's a power of 2, then it's the same as checking a specific bit.; // (e.g, ANDing with 8 == ANDing with 000...100 == testing if bit 3 is set)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp:655,test,testing,655,interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp,1,['test'],['testing']
Testability,"// Global logical predicate that acts on all lanes; // of the input and output mask concurrently. For; // example, it is implied by the `M` token in the; // Vector Function ABI mangled name.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/VFABIDemangler.h:10,log,logical,10,interpreter/llvm-project/llvm/include/llvm/IR/VFABIDemangler.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/VFABIDemangler.h,1,['log'],['logical']
Testability,"// Go back to the normal schedule since we need a valid point; // of instantiation:; // Assertion failed: (Loc.isValid() &&; // ""point of instantiation must be valid!""),; // function setPointOfInstantiation, file DeclTemplate.h,; // line 1520.; // Which can happen here because the simple name maybe a; // typedef to a template (for example std::string).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/LookupHelper.cpp:88,Assert,Assertion,88,interpreter/cling/lib/Interpreter/LookupHelper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/LookupHelper.cpp,1,['Assert'],['Assertion']
Testability,"// Go back to the normal schedule since we need a valid point; // of instantiation:; // Assertion failed: (Loc.isValid() &&; // ""point of instantiation must be valid!""),; // function setPointOfInstantiation, file DeclTemplate.h,; // line 1520.; // Which can happen here because the simple name maybe a; // typedef to a template (for example std::string).; // break;; // the next code executed must be the TransactionRAII below",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/LookupHelper.cpp:88,Assert,Assertion,88,interpreter/cling/lib/Interpreter/LookupHelper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/LookupHelper.cpp,1,['Assert'],['Assertion']
Testability,// Go through every cluster which we recorded as containing benchmarks; // of this UnstableOpcode. NOTE: we only recorded valid clusters.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.cpp:60,benchmark,benchmarks,60,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.cpp,1,['benchmark'],['benchmarks']
Testability,// Go up the chain of (vector) values to find a scalar load that we can; // combine with the broadcast.; // TODO: Combine this logic with findEltLoadSrc() used by; // EltsFromConsecutiveLoads().,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:127,log,logic,127,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['log'],['logic']
Testability,"// Got a power of 2. So, the amount we'll shift is the log base-2 of that.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp:55,log,log,55,interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp,1,['log'],['log']
Testability,"// Guard against an invalid SourceLocation, or we may assert in one; // of the following calls.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:54,assert,assert,54,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,1,['assert'],['assert']
Testability,// GuessIndirectSymbol returns the name of the indirect symbol for the; // ReferenceValue passed in or nullptr. This is used when ReferenceValue maybe; // an address of a symbol stub or a lazy or non-lazy pointer to associate the; // symbol name being referenced by the stub or pointer.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp:178,stub,stub,178,interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp,2,['stub'],['stub']
Testability,// HACK to make MIR tests with no uses happy,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIFixSGPRCopies.cpp:20,test,tests,20,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIFixSGPRCopies.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIFixSGPRCopies.cpp,1,['test'],['tests']
Testability,// HACK: This is a big hammer to avoid warning when there are defensive; // nil checks in -init and -copy methods. We should add more sophisticated; // logic here to suppress on common defensive idioms but still; // warn when there is a likely problem.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/NullabilityChecker.cpp:152,log,logic,152,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/NullabilityChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/NullabilityChecker.cpp,1,['log'],['logic']
Testability,// HIP function pointer contains kernel handle when it is used in triple; // chevron. The kernel stub needs to be loaded from kernel handle and used; // as callee.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:97,stub,stub,97,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,1,['stub'],['stub']
Testability,"// Half length extents; // Following tests are greatly simplified; // if we convert into our local frame; // Find translation in parent frame",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLBoundingBox.cxx:37,test,tests,37,graf3d/gl/src/TGLBoundingBox.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLBoundingBox.cxx,1,['test'],['tests']
Testability,"// Hand selection of correct classes, those classes should be; // cross-checked in testHashRecursiveRemove.cxx",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx:83,test,testHashRecursiveRemove,83,core/meta/src/TClass.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx,1,['test'],['testHashRecursiveRemove']
Testability,"// Handle 'eof' separately, calling text() on it produces an empty string.; // FIXME: this special logic is for syntax::Leaf dump, move it when we; // have a direct way to retrive token kind in the syntax::Leaf.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Syntax/TokenBufferTokenManager.h:99,log,logic,99,interpreter/llvm-project/clang/include/clang/Tooling/Syntax/TokenBufferTokenManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Syntax/TokenBufferTokenManager.h,1,['log'],['logic']
Testability,// Handle <> tests using (or (ogt y x) (ogt x y)).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp:13,test,tests,13,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,1,['test'],['tests']
Testability,// Handle `assert #0` and `assert final`.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/UnwrappedLineParser.cpp:11,assert,assert,11,interpreter/llvm-project/clang/lib/Format/UnwrappedLineParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/UnwrappedLineParser.cpp,2,['assert'],['assert']
Testability,"// Handle a #pragma found by the Preprocessor.; // check whether we care about the pragma - we are a named handler,; // thus this could actually be transformed into an assert:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/LinkdefReader.cxx:168,assert,assert,168,core/dictgen/src/LinkdefReader.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/LinkdefReader.cxx,4,['assert'],['assert']
Testability,// Handle a formal type change to avoid asserting.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:40,assert,asserting,40,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,1,['assert'],['asserting']
Testability,"// Handle comparison of pointer to null explicitly, as it will not be; // covered by the m_APInt() logic below.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp:99,log,logic,99,interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp,1,['log'],['logic']
Testability,"// Handle messages send to the TestMainFrame object. E.g. all menu button; // messages.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/guitest.cxx:31,Test,TestMainFrame,31,test/guitest.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/guitest.cxx,1,['Test'],['TestMainFrame']
Testability,// Handle non-continuous numbers (to make test simplification easier).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/AsmParser/LLParser.cpp:42,test,test,42,interpreter/llvm-project/llvm/lib/AsmParser/LLParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/AsmParser/LLParser.cpp,1,['test'],['test']
Testability,// Handle out of range shifts.; // If LogicalShift - set to BitWidth (special case).; // If ArithmeticShift - set to (BitWidth - 1) (sign splat).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstCombineIntrinsic.cpp:38,Log,LogicalShift,38,interpreter/llvm-project/llvm/lib/Target/X86/X86InstCombineIntrinsic.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstCombineIntrinsic.cpp,1,['Log'],['LogicalShift']
Testability,"// Handle references to XMM physical registers that got mapped into the; // wrong class. This can happen with constraints like {xmm0} where the; // target independent register mapper will just pick the first match it can; // find, ignoring the required type.; // TODO: Handle f128 and i128 in FR128RegClass after it is tested well.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:319,test,tested,319,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['test'],['tested']
Testability,"// Handle shrink case: destroy the elements in the pages that are not; // needed any more and deallocate the pages.; //; // On the other hand, we do not destroy the extra elements in the last page,; // because we might need them later and the logic is simpler if we do not; // destroy them. This means that elements are only destroyed when the; // page they belong to is destroyed. This is similar to what happens on; // access of the elements of a page, where all the elements of the page are; // constructed not only the one effectively needed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PagedVector.h:243,log,logic,243,interpreter/llvm-project/llvm/include/llvm/ADT/PagedVector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PagedVector.h,1,['log'],['logic']
Testability,// Handle tests for order using (or (ogt y x) (oge x y)).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp:10,test,tests,10,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,1,['test'],['tests']
Testability,"// Handle the command-line summary arguments. This code is for testing; // purposes only, so we handle errors directly.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp:63,test,testing,63,interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp,2,['test'],['testing']
Testability,"// Handle the remaining open tokens:; // - expand the closing parenthesis, if it exists, including an optional; // trailing comment; // - handle tokens that were already reconstructed at an inner expansion; // level; // - handle tokens when a macro call had more than the expected number of; // arguments, i.e. when #define M(x) is called as M(a, b, c) we'll end; // up with the sequence "", b, c)"" being open at the end of the; // reconstruction; we want to gracefully handle that case; //; // FIXME: See the above debug-check for what we will need to do to be; // able to assert this.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/MacroCallReconstructor.cpp:573,assert,assert,573,interpreter/llvm-project/clang/lib/Format/MacroCallReconstructor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/MacroCallReconstructor.cpp,1,['assert'],['assert']
Testability,"// Handle this production specially:; // logical-OR-expression '?' expression ':' conditional-expression; // In particular, the RHS of the '?' is 'expression', not; // 'logical-OR-expression' as we might expect.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseExpr.cpp:41,log,logical-OR-expression,41,interpreter/llvm-project/clang/lib/Parse/ParseExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseExpr.cpp,2,['log'],['logical-OR-expression']
Testability,"// Handle value-propagation when control flow merges on entry to a block. For; // any location without a PHI already placed, the location has the same value; // as its predecessors. If a PHI is placed, test to see whether it's now a; // redundant PHI that we can eliminate.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:202,test,test,202,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,1,['test'],['test']
Testability,"// Handles special logic around deleting / reseting the entry offset pointer.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/inc/TBasket.h:19,log,logic,19,tree/tree/inc/TBasket.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/inc/TBasket.h,1,['log'],['logic']
Testability,"// Handling expressions which produce invariant results, but *haven't* yet; // been removed from the loop serves two important purposes.; // 1) Most importantly, it resolves a pass ordering cycle which would; // otherwise need us to iteration licm, loop-predication, and either; // loop-unswitch or loop-peeling to make progress on examples with lots of; // predicable range checks in a row. (Since, in the general case, we can't; // hoist the length checks until the dominating checks have been discharged; // as we can't prove doing so is safe.); // 2) As a nice side effect, this exposes the value of peeling or unswitching; // much more obviously in the IR. Otherwise, the cost modeling for other; // transforms would end up needing to duplicate all of this logic to model a; // check which becomes predictable based on a modeled peel or unswitch.; //; // The cost of doing so in the worst case is an extra fill from the stack in; // the loop to materialize the loop invariant test value instead of checking; // against the original IV which is presumable in a register inside the loop.; // Such cases are presumably rare, and hint at missing oppurtunities for; // other passes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopPredication.cpp:762,log,logic,762,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopPredication.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopPredication.cpp,2,"['log', 'test']","['logic', 'test']"
Testability,"// Handling the overflow by a multiplication with 0 or 1 is cheaper; // than branching with an if statement, which the compiler does not; // optimize to this equivalent code. Note that we could do entirely; // without this overflow handling when summing up the intermediate; // products differently as described in the following SO answer:; // https://stackoverflow.com/a/51587262; // However, this approach takes at least the same amount of thinking; // why a) the code gives the same results without b) overflowing due; // to the mixture of 32 bit arithmetic. Moreover, my tests show that; // the scheme implemented here is actually slightly more performant.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/ranluxpp/mulmod.h:575,test,tests,575,math/mathcore/src/ranluxpp/mulmod.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/ranluxpp/mulmod.h,1,['test'],['tests']
Testability,// Handling this case would require extra logic that would make this; // transformation non-profitable,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelDAGToDAG.cpp:42,log,logic,42,interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelDAGToDAG.cpp,1,['log'],['logic']
Testability,"// Have to save this information here, in case gProof is dead when; // the logs are requested",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressDialog.cxx:75,log,logs,75,gui/sessionviewer/src/TProofProgressDialog.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressDialog.cxx,1,['log'],['logs']
Testability,"// Having only one phase of training to reduce the test time.; // TString training1(""LearningRate=1e-2,Optimizer="" + optimizerStr +; // "",Momentum=0.9,Repetitions=1,""; // ""ConvergenceSteps=20,BatchSize=256,TestRepetitions=10,""; // ""WeightDecay=1e-4,Regularization=L2,""; // ""DropConfig=0.0+0.0+0.0+0.0,Multithreading=True"");; // TString training2(""LearningRate=1e-3,Optimizer="" + optimizerStr +; // "",Momentum=0.9,Repetitions=1,""; // ""ConvergenceSteps=20,BatchSize=256,TestRepetitions=10,""; // ""WeightDecay=1e-4,Regularization=L2,""; // ""DropConfig=0.0+0.0+0.0+0.0,Multithreading=True"");",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLOptimization.h:51,test,test,51,tmva/tmva/test/DNN/TestMethodDLOptimization.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLOptimization.h,3,"['Test', 'test']","['TestRepetitions', 'test']"
Testability,// Header maps need to be marked as used whenever the filename matches.; // The case where the target file **exists** is handled by callee of this; // function as part of the regular logic that applies to include search paths.; // The case where the target file **does not exist** is handled here:,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/HeaderSearch.cpp:183,log,logic,183,interpreter/llvm-project/clang/lib/Lex/HeaderSearch.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/HeaderSearch.cpp,1,['log'],['logic']
Testability,"// Header search paths should be handled by each of the subclasses.; // Historically, they have not been, and instead have been handled inside of; // the CC1-layer frontend. As the logic is hoisted out, this generic function; // will slowly stop being called.; //; // While it is being called, replicate a bit of a hack to propagate the; // '-stdlib=' flag down to CC1 so that it can in turn customize the C++; // header search paths with it. Once all systems are overriding this; // function, the CC1 flag and this line can be removed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChain.cpp:181,log,logic,181,interpreter/llvm-project/clang/lib/Driver/ToolChain.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChain.cpp,1,['log'],['logic']
Testability,"// Helper class to test branch with array member",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/TreeHelper.h:19,test,test,19,bindings/pyroot/pythonizations/test/TreeHelper.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/TreeHelper.h,1,['test'],['test']
Testability,"// Helper function for GenerateTargetSpecificAttrChecks that alters the 'Test'; // parameter with only a single check type, if applicable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp:73,Test,Test,73,interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp,1,['Test'],['Test']
Testability,// Helper function that logs the error(s) and exits.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/llvm-exegesis.cpp:24,log,logs,24,interpreter/llvm-project/llvm/tools/llvm-exegesis/llvm-exegesis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/llvm-exegesis.cpp,1,['log'],['logs']
Testability,"// Helper function which gets the next record by speculatively reading through; // the log, finding a buffer extents record.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/XRay/FDRRecordProducer.h:87,log,log,87,interpreter/llvm-project/llvm/include/llvm/XRay/FDRRecordProducer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/XRay/FDRRecordProducer.h,1,['log'],['log']
Testability,"// Helper lambda for reporting failures: via assertion, printing, and return; // value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/BasicBlock.cpp:45,assert,assertion,45,interpreter/llvm-project/llvm/lib/IR/BasicBlock.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/BasicBlock.cpp,1,['assert'],['assertion']
Testability,"// Helper struct for this test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/TreeHelper.h:26,test,test,26,bindings/pyroot/pythonizations/test/TreeHelper.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/TreeHelper.h,1,['test'],['test']
Testability,"// Here is the test Eval function specialization. Here the CallExpr to the; // function is created.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/DynamicLookup.cpp:15,test,test,15,interpreter/cling/lib/Interpreter/DynamicLookup.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/DynamicLookup.cpp,1,['test'],['test']
Testability,"// Here we add logical lines to the Instructions. Later on,; // the 'processLines()' function will move each created logical line; // to its enclosing logical scope, using the debug ranges information; // and they will be released when its scope parent is deleted.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVBinaryReader.cpp:15,log,logical,15,interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVBinaryReader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVBinaryReader.cpp,3,['log'],['logical']
Testability,"// Here we can test the type of VT and return false when the type does not; // match, but since it is done prior to that call in the current context; // we turned that into an assert to avoid redundant code.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp:15,test,test,15,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp,4,"['assert', 'test']","['assert', 'test']"
Testability,"// Here we collect logical debug lines in CULines. Later on,; // the 'processLines()' function will move each created logical line; // to its enclosing logical scope, using the debug ranges information; // and they will be released when its scope parent is deleted.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVELFReader.cpp:19,log,logical,19,interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVELFReader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVELFReader.cpp,3,['log'],['logical']
Testability,"// Here we create a dummy tree necessary to create a minimal NN; // to be used for testing, evaluation and application",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodTMlpANN.cxx:83,test,testing,83,tmva/tmva/src/MethodTMlpANN.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodTMlpANN.cxx,1,['test'],['testing']
Testability,"// Here we filter out anything that's not set to DefaultVisibility.; // DefaultVisibility is set on a decl when -fvisibility is not specified on; // the command line (or specified as default) and the decl does not have; // __attribute__((visibility(""hidden""))) set or when the command line; // argument is set to hidden but the decl explicitly has; // __attribute__((visibility (""default""))) set. We do this so that the user; // can have fine grain control of what they want to expose in the stub.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/InterfaceStubFunctionsConsumer.cpp:492,stub,stub,492,interpreter/llvm-project/clang/lib/Frontend/InterfaceStubFunctionsConsumer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/InterfaceStubFunctionsConsumer.cpp,1,['stub'],['stub']
Testability,"// Here we have a collection of functors and functions used by the test suit; //______________________________________________________________________________",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressIterators.h:67,test,test,67,test/stressIterators.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressIterators.h,1,['test'],['test']
Testability,"// Here we need gradients of Log likelihood function; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/fumili/src/TFumili.cxx:29,Log,Log,29,math/fumili/src/TFumili.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/fumili/src/TFumili.cxx,2,['Log'],['Log']
Testability,"// Here we test behavior when sections are smaller than a single event or; // generally speaking when they do not align perfectly with integer event; // boundaries. For instance, when we have 10 events, but 9 sections (one; // must contain two events, but which section?), or 11 (one must be empty,; // but which one?).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx:11,test,test,11,roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx,1,['test'],['test']
Testability,"// Heuristically pick the better replacement -- the choice of heuristic; // isn't terribly important here, but the fact we canonicalize on some; // replacement is for exposing other simplifications.; // TODO: pull this out as a helper function and reuse w/existing; // (slightly different) logic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/GVN.cpp:290,log,logic,290,interpreter/llvm-project/llvm/lib/Transforms/Scalar/GVN.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/GVN.cpp,1,['log'],['logic']
Testability,"// HiEqMBB:; //; // Otherwise, use VECTOR COMPARE HIGH LOGICAL.; // Since we already know the high parts are equal, the CC; // result will only depend on the low parts:; // CC 1 if low(Op0) > low(Op1); // CC 3 if low(Op0) <= low(Op1); //; // VCHLGS Tmp, Op0, Op1; // # fallthrough to JoinMBB",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp:55,LOG,LOGICAL,55,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,1,['LOG'],['LOGICAL']
Testability,// Historically this pass has had issues with the dominator tree so verify it; // in asserts builds.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp:85,assert,asserts,85,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp,1,['assert'],['asserts']
Testability,"// Historically, PIC code for MIPS was associated with -mabicalls, a.k.a; // SVR4 abicalls. Static code does not use SVR4 calling sequences. An ABI; // extension was developed by Richard Sandiford & Code Sourcery to support; // static code calling PIC code (CPIC). For O32 and N32 this means we have; // several combinations of PIC/static and abicalls. Pure static, static; // with the CPIC extension, and pure PIC code.; // At final link time, O32 and N32 with CPIC will have another section; // added to the binary which contains the stub functions to perform; // any fixups required for PIC code.; // For N64, the situation is more regular: code can either be static; // (non-abicalls) or PIC (abicalls). GCC has traditionally picked PIC code; // code for N64. Since Clang has already built the relocation model portion; // of the commandline, we pick add +noabicalls feature in the N64 static; // case.; // The is another case to be accounted for: -msym32, which enforces that all; // symbols have 32 bits in size. In this case, N64 can in theory use CPIC; // but it is unsupported.; // The combinations for N64 are:; // a) Static without abicalls and 64bit symbols.; // b) Static with abicalls and 32bit symbols.; // c) PIC with abicalls and 64bit symbols.; // For case (a) we need to add +noabicalls for N64.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Arch/Mips.cpp:536,stub,stub,536,interpreter/llvm-project/clang/lib/Driver/ToolChains/Arch/Mips.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Arch/Mips.cpp,1,['stub'],['stub']
Testability,"// Hold on to a default advisor for:; // 1) the implementation of canEvictHintInterference, because we didn't; // learn that nuance yet; 2) for bootstrapping (logging) in the development; // mode case.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MLRegAllocEvictAdvisor.cpp:159,log,logging,159,interpreter/llvm-project/llvm/lib/CodeGen/MLRegAllocEvictAdvisor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MLRegAllocEvictAdvisor.cpp,1,['log'],['logging']
Testability,"// Holds a PC to file:line table. Some data to parse this subsection; // is stored in the other subsections, so just check sanity and store; // the pointers for deferred processing.; // Collect function and ranges only if we need to print logical lines.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVCodeViewReader.cpp:239,log,logical,239,interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVCodeViewReader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVCodeViewReader.cpp,1,['log'],['logical']
Testability,"// Honour log-to-macro-saving settings",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:10,log,log-to-macro-saving,10,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,1,['log'],['log-to-macro-saving']
Testability,// Hook: dataTraverseStmtPost() is invoked by the AST visitor after visiting; // an AST Stmt node. MC/DC will use it to to signal when the top of a; // logical operation (boolean expression) nest is encountered.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:152,log,logical,152,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,1,['log'],['logical']
Testability,"// Horizontal adds can use the 'addv' instruction. We model the cost of these; // instructions as twice a normal vector add, plus 1 for each legalization; // step (LT.first). This is the only arithmetic vector reduction operation for; // which we have an instruction.; // OR, XOR and AND costs should match the codegen from:; // OR: llvm/test/CodeGen/AArch64/reduce-or.ll; // XOR: llvm/test/CodeGen/AArch64/reduce-xor.ll; // AND: llvm/test/CodeGen/AArch64/reduce-and.ll",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetTransformInfo.cpp:338,test,test,338,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetTransformInfo.cpp,3,['test'],['test']
Testability,"// Host-side references to a __global__ function refer to the stub, so the; // function itself is never emitted and therefore should not be marked.; // If we have host fn calls kernel fn calls host+device, the HD function; // does not get instantiated on the host. We model this by omitting at the; // call to the kernel from the callgraph. This ensures that, when compiling; // for host, only HD functions actually called from the host get marked as; // known-emitted.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:62,stub,stub,62,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['stub'],['stub']
Testability,"// How many times to perform a test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx:31,test,test,31,test/tcollbm.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx,1,['test'],['test']
Testability,"// However, when we encounter a logical operator as a branch condition,; // then the condition is actually its RHS, because LHS would be; // the condition for the logical operator terminator.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporterVisitors.cpp:32,log,logical,32,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporterVisitors.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporterVisitors.cpp,2,['log'],['logical']
Testability,"// Hypothesis test between previous correction (null); // and this one (alternate). Use -2 log LR for test statistic",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BernsteinCorrection.cxx:14,test,test,14,roofit/roostats/src/BernsteinCorrection.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BernsteinCorrection.cxx,6,"['log', 'test']","['log', 'test']"
Testability,"// I think we can avoid cloning the model function; //fFitFunc = dynamic_cast<IModelFunction *>( func->Clone() );; //assert(fFitFunc);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx:117,assert,assert,117,math/mathcore/src/FitResult.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx,1,['assert'],['assert']
Testability,"// ILP32 case not reached here, tested with isNonILP32reloc",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/MCTargetDesc/AArch64ELFObjectWriter.cpp:32,test,tested,32,interpreter/llvm-project/llvm/lib/Target/AArch64/MCTargetDesc/AArch64ELFObjectWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/MCTargetDesc/AArch64ELFObjectWriter.cpp,1,['test'],['tested']
Testability,"// ISD::AND; // Also, recognize the pattern generated by an FCMP_OEQ. We can emit; // two branches instead of an explicit AND instruction with a; // separate test. However, we only do this if this block doesn't; // have a fall-through edge, because this requires an explicit; // jmp when the condition is false.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/M68kISelLowering.cpp:158,test,test,158,interpreter/llvm-project/llvm/lib/Target/M68k/M68kISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/M68kISelLowering.cpp,1,['test'],['test']
Testability,"// ISO C++ does not guarantee neither specific layout nor member names for `std::tuple`. However, most; // implementations including libstdc++ (gcc), libc++ (llvm), and MSVC name members as `_0`, `_1`, ..., `_N-1`,; // following the order of the type list.; // Use TClass to get their offsets; in case a particular `std::tuple` implementation does not define such; // members, the assertion below will fail.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RField.cxx:381,assert,assertion,381,tree/ntuple/v7/src/RField.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RField.cxx,1,['assert'],['assertion']
Testability,"// Identifies a virtual call made by this function using an; // llvm.assume(llvm.type.test) intrinsic with all constant integer arguments.; // [typeid, offset, n x arg]",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Bitcode/LLVMBitCodes.h:86,test,test,86,interpreter/llvm-project/llvm/include/llvm/Bitcode/LLVMBitCodes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Bitcode/LLVMBitCodes.h,1,['test'],['test']
Testability,"// If !noundef is not present, then !range violation results in a poison; // value rather than immediate undefined behavior. In theory, transferring; // these annotations to SDAG is fine, but in practice there are key SDAG; // transforms that are known not to be poison-safe, such as folding logical; // and/or to bitwise and/or. For now, only transfer !range if !noundef is; // also present.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:292,log,logical,292,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,1,['log'],['logical']
Testability,"// If (i - i') is a power of 2, Bump = -sext/trunc(S) << log(i' - i).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/StraightLineStrengthReduce.cpp:57,log,log,57,interpreter/llvm-project/llvm/lib/Transforms/Scalar/StraightLineStrengthReduce.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/StraightLineStrengthReduce.cpp,1,['log'],['log']
Testability,"// If (i' - i) is a power of 2, Bump = sext/trunc(S) << log(i' - i).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/StraightLineStrengthReduce.cpp:56,log,log,56,interpreter/llvm-project/llvm/lib/Transforms/Scalar/StraightLineStrengthReduce.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/StraightLineStrengthReduce.cpp,1,['log'],['log']
Testability,"// If -Ofast is the optimization level, then -fstrict-aliasing should be; // enabled. This alias option is being used to simplify the hasFlag logic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:142,log,logic,142,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,1,['log'],['logic']
Testability,"// If -earlycse-debug-hash was specified, return a constant -- this; // will force all hashing to collide, so we'll exhaustively search; // the table for a match, and the assertion in isEqual will fire if; // there's a bug causing equal keys to hash differently.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/EarlyCSE.cpp:171,assert,assertion,171,interpreter/llvm-project/llvm/lib/Transforms/Scalar/EarlyCSE.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/EarlyCSE.cpp,1,['assert'],['assertion']
Testability,"// If -phicse-debug-hash was specified, return a constant -- this; // will force all hashing to collide, so we'll exhaustively search; // the table for a match, and the assertion in isEqual will fire if; // there's a bug causing equal keys to hash differently.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/Local.cpp:169,assert,assertion,169,interpreter/llvm-project/llvm/lib/Transforms/Utils/Local.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/Local.cpp,1,['assert'],['assertion']
Testability,"// If Alignment > RegSizeInBytes, the first arg register must be even.; // FIXME: This condition happens to do the right thing but it's not the; // right way to test it. We want to check that the stack frame offset; // of the register is aligned.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsISelLowering.cpp:161,test,test,161,interpreter/llvm-project/llvm/lib/Target/Mips/MipsISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsISelLowering.cpp,1,['test'],['test']
Testability,"// If BaseFunc or TestFunc is nullptr, it means the functions do not overlap.; // In this case, we use DefaultFuncInternalSimilarity as the function internal; // similarity.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp:18,Test,TestFunc,18,interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,1,['Test'],['TestFunc']
Testability,"// If ByteSize of the splat is bigger than the element size of the; // build_vector, then we have a case where we are checking for a splat where; // multiple elements of the buildvector are folded together into a single; // logical element of the splat (e.g. ""vsplish 1"" to splat {0,1}*8).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:224,log,logical,224,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,1,['log'],['logical']
Testability,"// If EFLAGS are defined, it's as-if they were killed. We can stop; // scanning here.; //; // NB!!! Many instructions only modify some flags. LLVM currently; // models this as clobbering all flags, but if that ever changes; // this will need to be carefully updated to handle that more; // complex logic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FlagsCopyLowering.cpp:298,log,logic,298,interpreter/llvm-project/llvm/lib/Target/X86/X86FlagsCopyLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FlagsCopyLowering.cpp,1,['log'],['logic']
Testability,"// If EnableShrinkWrap is set, it takes precedence on whatever the; // target sets. The rational is that we assume we want to test; // something related to shrink-wrapping.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ShrinkWrap.cpp:126,test,test,126,interpreter/llvm-project/llvm/lib/CodeGen/ShrinkWrap.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ShrinkWrap.cpp,1,['test'],['test']
Testability,"// If HasNCSR is asserted (attribute NoCallerSavedRegisters exists),; // use X86_INTR calling convention because it has the same CSR mask; // (same preserved registers).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLoweringCall.cpp:17,assert,asserted,17,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLoweringCall.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLoweringCall.cpp,1,['assert'],['asserted']
Testability,"// If I is freeze(undef), check its uses and fold it to a fixed constant.; // - or: pick -1; // - select's condition: if the true value is constant, choose it by making; // the condition true.; // - default: pick 0; //; // Note that this transform is intentionally done here rather than; // via an analysis in InstSimplify or at individual user sites. That is; // because we must produce the same value for all uses of the freeze -; // it's the reason ""freeze"" exists!; //; // TODO: This could use getBinopAbsorber() / getBinopIdentity() to avoid; // duplicating logic for binops at least.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp:563,log,logic,563,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp,1,['log'],['logic']
Testability,"// If ID's layout is known, then make the global constant. This serves as a; // useful assertion: we'll never use this variable to calculate ivar offsets,; // so if the runtime tries to patch it then we should crash.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:87,assert,assertion,87,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,1,['assert'],['assertion']
Testability,"// If LOD is pixel or less can draw pixel(point) directly, skipping; // any logical call, caching etc.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLPhysicalShape.cxx:76,log,logical,76,graf3d/gl/src/TGLPhysicalShape.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLPhysicalShape.cxx,1,['log'],['logical']
Testability,"// If LogicNonShiftReg is the same to Shift1Base, and shift1 const is the same; // to MatchInfo.Shift2 const, CSEMIRBuilder will reuse the old shift1 when; // build shift2. So, if we erase MatchInfo.Shift2 at the end, actually we; // remove old shift1. And it will cause crash later. So erase it earlier to; // avoid the crash.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp:6,Log,LogicNonShiftReg,6,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,1,['Log'],['LogicNonShiftReg']
Testability,// If LogicalShift - just return zero.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstCombineIntrinsic.cpp:6,Log,LogicalShift,6,interpreter/llvm-project/llvm/lib/Target/X86/X86InstCombineIntrinsic.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstCombineIntrinsic.cpp,1,['Log'],['LogicalShift']
Testability,"// If MC/DC is enabled, disable folding so that we can instrument all; // conditions to yield complete test vectors. We still keep track of; // folded conditions during region mapping and visualization.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:103,test,test,103,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,1,['test'],['test']
Testability,"// If MC/DC is enabled, set the MaxConditions to a preset value. Otherwise,; // set it to zero. This value impacts the number of conditions accepted in a; // given boolean expression, which impacts the size of the bitmap used to; // track test vector execution for that boolean expression. Because the; // bitmap scales exponentially (2^n) based on the number of conditions seen,; // the maximum value is hard-coded at 6 conditions, which is more than enough; // for most embedded applications. Setting a maximum value prevents the; // bitmap footprint from growing too large without the user's knowledge. In; // the future, this value could be adjusted with a command-line option.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:239,test,test,239,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,1,['test'],['test']
Testability,"// If MI is a load instruction, try to convert it into a LOAD AND TEST.; // Return true on success.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZElimCompare.cpp:66,TEST,TEST,66,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZElimCompare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZElimCompare.cpp,1,['TEST'],['TEST']
Testability,"// If Opcode is a load instruction that has a LOAD AND TEST form,; // return the opcode for the testing form, otherwise return 0.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZInstrInfo.h:55,TEST,TEST,55,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZInstrInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZInstrInfo.h,2,"['TEST', 'test']","['TEST', 'testing']"
Testability,"// If OutputDir is not a directory, create_directories may still succeed if; // all components of the path prefix are directories. Test is_directory as; // well.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ar/llvm-ar.cpp:131,Test,Test,131,interpreter/llvm-project/llvm/tools/llvm-ar/llvm-ar.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ar/llvm-ar.cpp,1,['Test'],['Test']
Testability,"// If PDF is a RooProdPdf (with possible constraint terms); // analyze pdf for actual parameters (i.e those in unconnected constraint terms should be; // ignored as here so that the test statistic will not be recalculated if those; // are changed",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx:182,test,test,182,roofit/roofitcore/src/RooAbsOptTestStatistic.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx,1,['test'],['test']
Testability,"// If SE->isKnownPredicate can't prove the condition,; // we try the brute-force approach of subtracting; // and testing the difference.; // By testing with SE->isKnownPredicate first, we avoid; // the possibility of overflow when the arguments are constants.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp:113,test,testing,113,interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,2,['test'],['testing']
Testability,"// If SiblingIdx is set for non-root dies we could be sure that DWARF is; // correct and ""end of children marker"" must be found. For root die we do not; // have such a guarantee(parsing root die might be stopped if ""end of children; // marker"" is missing, SiblingIdx is always zero for root die). That is why we; // do not use assertion for checking for ""end of children marker"" for root; // die.; // TODO: Instead of checking here for invalid die we might reject; // invalid dies at parsing stage(DWARFUnit::extractDIEsToVector).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/DWARF/DWARFUnit.cpp:327,assert,assertion,327,interpreter/llvm-project/llvm/lib/DebugInfo/DWARF/DWARFUnit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/DWARF/DWARFUnit.cpp,1,['assert'],['assertion']
Testability,"// If TClonesArray object does not exist we have no information, so let go; // on. This is a weakish test since the TClonesArray object might exist in; // the next entry ... In other word, we ONLY rely on the information available; // in entry #0.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx:101,test,test,101,tree/treeplayer/src/TTreeFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx,1,['test'],['test']
Testability,"// If TrainTestSplit_<class> is set, set number of requested training events to split*num_all_events; // Requested number of testing events is set to zero and therefore takes all other events; // The option TrainTestSplit_<class> overrides nTrain_<class> or nTest_<class>",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:125,test,testing,125,tmva/tmva/src/DataSetFactory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx,1,['test'],['testing']
Testability,"// If VariationsFor is called after the nominal result has already been produced/filled, the copies; // of the result object used to produced the varied results have to be reset to an empty/initial state.; // Here we test that this is the case for histograms and TStatistic objects.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_vary.cxx:217,test,test,217,tree/dataframe/test/dataframe_vary.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_vary.cxx,1,['test'],['test']
Testability,"// If X/C can be simplified by the division-by-constant logic, lower; // X%C to the equivalent of X-X/C*C.; // Reuse the SDIVLike/UDIVLike combines - to avoid mangling nodes, the; // speculative DIV must not cause a DIVREM conversion. We guard against this; // by skipping the simplification if isIntDivCheap(). When div is not cheap,; // combine will not return a DIVREM. Regardless, checking cheapness here; // makes sense since the simplification results in fatter code.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:56,log,logic,56,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['log'],['logic']
Testability,// If __cxa_atexit is defined (e.g. in the case of LTO) and arg0 is not; // actually used (i.e. it's dummy/stub function as used in emscripten when; // the program never exits) we can simply return early and clear out; // @llvm.global_dtors.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LowerGlobalDtors.cpp:107,stub,stub,107,interpreter/llvm-project/llvm/lib/Transforms/Utils/LowerGlobalDtors.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LowerGlobalDtors.cpp,1,['stub'],['stub']
Testability,"// If a field of the parent record is incomplete, lookup will fail.; // and we would return InvalidFieldName instead of Incomplete.; // But this erroneous results does protects again a hidden assertion failure; // in the RecordLayoutBuilder",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXType.cpp:192,assert,assertion,192,interpreter/llvm-project/clang/tools/libclang/CXType.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXType.cpp,1,['assert'],['assertion']
Testability,"// If a function is first declared with a calling convention, but is later; // declared or defined without one, all following decls assume the calling; // convention of the first.; //; // It's OK if a function is first declared without a calling convention,; // but is later declared or defined with the default calling convention.; //; // To test if either decl has an explicit calling convention, we look for; // AttributedType sugar nodes on the type as written. If they are missing or; // were canonicalized away, we assume the calling convention was implicit.; //; // Note also that we DO NOT return at this point, because we still have; // other tests to run.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:343,test,test,343,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,2,['test'],"['test', 'tests']"
Testability,"// If a segment has neither prolog nor epilog, ""With full .xdata record,; // Epilog Count = 1. Epilog Start Index points to end_c.""; // https://docs.microsoft.com/en-us/cpp/build/arm64-exception-handling#function-fragments; // TODO: We can remove this if testing shows zero epilog scope is ok with; // MS unwinder.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCWin64EH.cpp:255,test,testing,255,interpreter/llvm-project/llvm/lib/MC/MCWin64EH.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCWin64EH.cpp,1,['test'],['testing']
Testability,// If a subtarget has a fastpath LSL we can fold a logical shift into; // the add/sub and save a cycle.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp:51,log,logical,51,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp,1,['log'],['logical']
Testability,// If a subtarget has a fastpath LSL we can fold a logical shift into; // the addressing mode and save a cycle.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp:51,log,logical,51,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp,1,['log'],['logical']
Testability,"// If a target has multiple condition registers, then it likely has logical; // operations on those registers.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:68,log,logical,68,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,1,['log'],['logical']
Testability,"// If a user is an AND, add all its users to the work list. We only; // propagate ""pred != null"" condition through AND because it is only; // correct to assume that all conditions of AND are met in true branch.; // TODO: Support similar logic of OR and EQ predicate?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp:237,log,logic,237,interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp,1,['log'],['logic']
Testability,"// If all cases cover a contiguous range, it is not necessary to jump to; // the default block after the last bit test fails. This is because the; // range check during bit test header creation has guaranteed that every; // case here doesn't go outside the range. In this case, there is no need; // to perform the last bit test, as it will always be true. Instead, make; // the second-to-last bit-test fall through to the target of the last bit; // test, and delete the last bit test.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/IRTranslator.cpp:114,test,test,114,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/IRTranslator.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/IRTranslator.cpp,6,['test'],['test']
Testability,"// If all tests are made, it doesn't matter what the value is.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp:10,test,tests,10,interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,1,['test'],['tests']
Testability,"// If an accessor is specified, promote it to a comparator. In this case we; // can test whether the search value is (self-) comparable. We can’t do this; // for a comparator (except for specific, known comparators) because we can’t; // tell if the comparator is symmetric, and an asymmetric comparator can’t be; // used to test whether a single value is comparable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:84,test,test,84,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,4,['test'],['test']
Testability,"// If any indirect uses, create a direct use to ensure allocation; // TODO: Simpler to unconditionally mark used but that regresses; // codegen in test/CodeGen/AMDGPU/noclobber-barrier.ll",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp:147,test,test,147,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp,1,['test'],['test']
Testability,"// If any of the declaration in the chain contains an Inheritable attribute,; // it needs to be added to all the declarations in the redeclarable chain.; // FIXME: Only the logic of merging MSInheritableAttr is present, it should; // be extended for all inheritable attributes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTReaderDecl.cpp:173,log,logic,173,interpreter/llvm-project/clang/lib/Serialization/ASTReaderDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTReaderDecl.cpp,1,['log'],['logic']
Testability,"// If any of the instruction's operands are uniform after vectorization,; // the instruction cannot be scalarized. This prevents, for example, a; // masked load from being scalarized.; //; // We assume we will only emit a value for lane zero of an instruction; // marked uniform after vectorization, rather than VF identical values.; // Thus, if we scalarize an instruction that uses a uniform, we would; // create uses of values corresponding to the lanes we aren't emitting code; // for. This behavior can be changed by allowing getScalarValue to clone; // the lane zero values for uniforms rather than asserting.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:605,assert,asserting,605,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,1,['assert'],['asserting']
Testability,"// If any of the stack slot references may be out of range of an immediate; // offset, make sure a register (or a spill slot) is available for the; // register scavenger. Note that if we're indexing off the frame pointer, the; // effective stack size is 4 bytes larger since the FP points to the stack; // slot of the previous FP. Also, if we have variable sized objects in the; // function, stack slot references will often be negative, and some of; // our instructions are positive-offset only, so conservatively consider; // that case to want a spill slot (or register) as well. Similarly, if; // the function adjusts the stack pointer during execution and the; // adjustments aren't already part of our stack size estimate, our offset; // calculations may be off, so be conservative.; // FIXME: We could add logic to be more precise about negative offsets; // and which instructions will need a scratch register for them. Is it; // worth the effort and added fragility?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMFrameLowering.cpp:812,log,logic,812,interpreter/llvm-project/llvm/lib/Target/ARM/ARMFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMFrameLowering.cpp,1,['log'],['logic']
Testability,"// If arch= specifies an x86-64 micro-architecture level, test the feature; // with __builtin_cpu_supports, otherwise use __builtin_cpu_is.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:58,test,test,58,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,1,['test'],['test']
Testability,// If atomic AND need to be masking all be one bit and testing the one bit; // unset in the mask.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:55,test,testing,55,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['test'],['testing']
Testability,// If atomic XOR/OR need to be setting and testing the same bit.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:43,test,testing,43,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['test'],['testing']
Testability,"// If both operands are complex, emit the core math directly, and then; // test for NaNs. If we find NaNs in the result, we delegate to a libcall; // to carefully re-compute the correct infinity representation if; // possible. The expectation is that the presence of NaNs here is; // *extremely* rare, and so the cost of the libcall is almost irrelevant.; // This is good, because the libcall re-computes the core multiplication; // exactly the same as we do here and re-tests for NaNs in order to be; // a generic complex*complex libcall.; // First compute the four products.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprComplex.cpp:75,test,test,75,interpreter/llvm-project/clang/lib/CodeGen/CGExprComplex.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprComplex.cpp,2,['test'],"['test', 'tests']"
Testability,"// If both operands are known to be non-negative, change signed predicates to; // unsigned ones. This increases the reasoning effectiveness in combination; // with the signed <-> unsigned transfer logic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/ConstraintElimination.cpp:197,log,logic,197,interpreter/llvm-project/llvm/lib/Transforms/Scalar/ConstraintElimination.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/ConstraintElimination.cpp,1,['log'],['logic']
Testability,"// If clipping planes are passed as argument, we test against them.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScene.cxx:49,test,test,49,graf3d/gl/src/TGLScene.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScene.cxx,1,['test'],['test']
Testability,"// If constraint is a distance, returns D.; // Otherwise assert.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp:57,assert,assert,57,interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,1,['assert'],['assert']
Testability,"// If constraint is a line AX + BY = C, returns A.; // Otherwise assert.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp:65,assert,assert,65,interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,1,['assert'],['assert']
Testability,"// If constraint is a line AX + BY = C, returns B.; // Otherwise assert.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp:65,assert,assert,65,interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,1,['assert'],['assert']
Testability,"// If constraint is a line AX + BY = C, returns C.; // Otherwise assert.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp:65,assert,assert,65,interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,1,['assert'],['assert']
Testability,"// If constraint is a point <X, Y>, returns Y.; // Otherwise assert.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp:61,assert,assert,61,interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,1,['assert'],['assert']
Testability,"// If current error logging state is not the same as remote state; // update the remote state",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooRealMPFE.cxx:20,log,logging,20,roofit/roofitcore/src/RooRealMPFE.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooRealMPFE.cxx,1,['log'],['logging']
Testability,"// If destroyed from the logical shape itself the pointer has already; // been cleared.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLPhysicalShape.cxx:25,log,logical,25,graf3d/gl/src/TGLPhysicalShape.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLPhysicalShape.cxx,1,['log'],['logical']
Testability,"// If every element is an all-sign value, see if we can use TESTP/MOVMSK; // to more efficiently extract the sign bits and compare that.; // TODO: Handle TESTC with comparison inversion.; // TODO: Can we remove SimplifyMultipleUseDemandedBits and rely on; // TESTP/MOVMSK combines to make sure its never worse than PTEST?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:60,TEST,TESTP,60,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,3,['TEST'],"['TESTC', 'TESTP']"
Testability,"// If fast is on, users promise that the sets have the same layout:; //; // assert(!fast || strcmp(internalVar->GetName(), theVar->GetName()) == 0);; //; // This assert is commented out for the same reasons that applied to the; // other assert explained above.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx:76,assert,assert,76,roofit/roofitcore/src/RooDataHist.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx,3,['assert'],['assert']
Testability,"// If for some reason we failed setting a redirection file for the logs; // we cannot continue",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServ.cxx:67,log,logs,67,proof/proof/src/TProofServ.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServ.cxx,3,['log'],['logs']
Testability,"// If idle restore logs to main session window",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:19,log,logs,19,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,2,['log'],['logs']
Testability,"// If inside an assembly, go logically up in the hierarchy",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoNavigator.cxx:29,log,logically,29,geom/geom/src/TGeoNavigator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoNavigator.cxx,2,['log'],['logically']
Testability,"// If instruction is S2_tstbit_i, test for 1, otherwise test for 0.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonBitTracker.cpp:34,test,test,34,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonBitTracker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonBitTracker.cpp,2,['test'],['test']
Testability,"// If it is a critical edge, and the succesor is an exception block, handle; // the split edge logic in this specific function",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/BasicBlockUtils.cpp:95,log,logic,95,interpreter/llvm-project/llvm/lib/Transforms/Utils/BasicBlockUtils.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/BasicBlockUtils.cpp,1,['log'],['logic']
Testability,"// If it is an assertion, then it's a top-level one, so check it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:15,assert,assertion,15,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,1,['assert'],['assertion']
Testability,"// If it is known (which we tested above) but it doesn't have a value,; // then we can assume `undef` and hence the instruction is UB.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp:28,test,tested,28,interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,1,['test'],['tested']
Testability,"// If it's a field, require the containing struct to have a; // complete definition so that we can compute the layout.; //; // This can happen in C++11 onwards, either by naming the member; // in a way that is not transformed into a member access expression; // (in an unevaluated operand, for instance), or by naming the member; // in a trailing-return-type.; //; // For the record, since __alignof__ on expressions is a GCC; // extension, GCC seems to permit this but always gives the; // nonsensical answer 0.; //; // We don't really need the layout here --- we could instead just; // directly check for all the appropriate alignment-lowing; // attributes --- but that would require duplicating a lot of; // logic that just isn't worth duplicating for such a marginal; // use-case.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:711,log,logic,711,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['log'],['logic']
Testability,"// If logx, we must bin in logx and not in x; // otherwise in case of several decades, one gets wrong results.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:6,log,logx,6,hist/hist/src/TF1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx,2,['log'],['logx']
Testability,"// If moreLogLabels = kTRUE more Log Intermediate Labels are drawn.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/graf/src/TGaxis.cxx:33,Log,Log,33,graf2d/graf/src/TGaxis.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/graf/src/TGaxis.cxx,1,['Log'],['Log']
Testability,"// If no version was requested by the user, use the default value from the; // back end. This is consistent with the value returned from; // getAMDGPUCodeObjectVersion. This lets clang emit IR for amdgpu without; // requiring the corresponding llvm to have the AMDGPU target enabled,; // provided the user (e.g. front end tests) can use the default.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:322,test,tests,322,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,1,['test'],['tests']
Testability,"// If none of the previous checks caused a CFG build, trigger one here; // for the logical error handler.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/AnalysisBasedWarnings.cpp:83,log,logical,83,interpreter/llvm-project/clang/lib/Sema/AnalysisBasedWarnings.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/AnalysisBasedWarnings.cpp,1,['log'],['logical']
Testability,"// If none of the tests which can return false are possible, fold to true.; // fp_class (nnan x), ~(qnan|snan) -> true; // fp_class (ninf x), ~(ninf|pinf) -> true",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp:18,test,tests,18,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp,1,['test'],['tests']
Testability,"// If not PROOF-Lite, stop the daemon used for the test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:51,test,test,51,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['test'],['test']
Testability,"// If not at the top of the logical operator nest, update MCDC temp with the; // boolean result of the evaluated condition.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:28,log,logical,28,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,1,['log'],['logical']
Testability,"// If not in sandbox, construct the base URI using session defaults; // (group, user) (syntax: /group/user/dsname[#[subdir/]objname])",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TDataSetManager.cxx:13,sandbox,sandbox,13,proof/proof/src/TDataSetManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TDataSetManager.cxx,2,['sandbox'],['sandbox']
Testability,"// If not, test a couple other possible arch names that might be what was; // intended.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/MinGW.cpp:11,test,test,11,interpreter/llvm-project/clang/lib/Driver/ToolChains/MinGW.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/MinGW.cpp,1,['test'],['test']
Testability,"// If not, we may be able to unfold a load and hoist that.; // First test whether the instruction is loading from an amenable; // memory location.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineLICM.cpp:69,test,test,69,interpreter/llvm-project/llvm/lib/CodeGen/MachineLICM.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineLICM.cpp,1,['test'],['test']
Testability,"// If only some modules were split, flag this in the index so that; // we can skip or error on optimizations that need consistently split; // modules (whole program devirt and lower type tests).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/LTO/LTO.cpp:187,test,tests,187,interpreter/llvm-project/llvm/lib/LTO/LTO.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/LTO/LTO.cpp,1,['test'],['tests']
Testability,"// If only some of the modules were split, we cannot correctly handle; // code that contains type tests or type checked loads.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/LTO/LTO.cpp:98,test,tests,98,interpreter/llvm-project/llvm/lib/LTO/LTO.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/LTO/LTO.cpp,1,['test'],['tests']
Testability,"// If only some of the modules were split, we cannot correctly perform; // this transformation. We already checked for the presense of type tests; // with partially split modules during the thin link, and would have emitted; // an error if any were found, so here we can simply return.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp:140,test,tests,140,interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp,2,['test'],['tests']
Testability,"// If only the low half of a general register is needed, generate; // a GPRC copy instead of a G8RC copy. (EXTRACT_SUBREG can't be; // used along the fast-isel path (not lowered), and downstream logic; // also doesn't like a direct subreg copy on a physical reg.)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCFastISel.cpp:195,log,logic,195,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCFastISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCFastISel.cpp,1,['log'],['logic']
Testability,"// If option ""READ"" test existence and access",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TFile.cxx:20,test,test,20,io/io/src/TFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TFile.cxx,1,['test'],['test']
Testability,"// If part of simultaneous PDF normalize probability over; // number of simultaneous PDFs: -sum(log(p/n)) = -sum(log(p)) + N*log(n)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/TestStatistics/RooBinnedL.cxx:96,log,log,96,roofit/roofitcore/src/TestStatistics/RooBinnedL.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/TestStatistics/RooBinnedL.cxx,6,['log'],['log']
Testability,"// If part of simultaneous PDF normalize probability over; // number of simultaneous PDFs: -sum(log(p/n)) = -sum(log(p)) + N*log(n); // If we do bin-by bin offsetting, we don't do this because it cancels out",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooNLLVarNew.cxx:96,log,log,96,roofit/roofitcore/src/RooNLLVarNew.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooNLLVarNew.cxx,3,['log'],['log']
Testability,"// If pdf is marked as binned - do a binned likelihood calculation here (sum of log-Poisson for each bin)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooNLLVar.cxx:80,log,log-Poisson,80,roofit/roofitcore/src/RooNLLVar.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooNLLVar.cxx,1,['log'],['log-Poisson']
Testability,"// If requested, simply import all functions in the index. This is used; // when testing distributed backend handling via the opt tool, when; // we have distributed indexes containing exactly the summaries to import.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionImport.cpp:81,test,testing,81,interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionImport.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionImport.cpp,1,['test'],['testing']
Testability,// If so drop any the type test assume sequences inserted for whole program; // vtables so that codegen doesn't complain.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp:27,test,test,27,interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp,1,['test'],['test']
Testability,"// If successful, the top of the file stack will mark the end of the Argv; // stream. A failure here indicates a bug in the stack popping logic above.; // Note that FileStack may have more than one element at this point because we; // don't have a chance to pop the stack when encountering recursive files at; // the end of the stream, so seeing that doesn't indicate a bug.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp:138,log,logic,138,interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp,1,['log'],['logic']
Testability,"// If target does not have legal shift left, do not emit bit tests at all.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SwitchLoweringUtils.cpp:61,test,tests,61,interpreter/llvm-project/llvm/lib/CodeGen/SwitchLoweringUtils.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SwitchLoweringUtils.cpp,1,['test'],['tests']
Testability,// If template type is not ODR-used its definition is only available; // in the template definition not its instantiation.; // FIXME: This logic doesn't work for types that depend on template; // parameter (PR58590).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:139,log,logic,139,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['log'],['logic']
Testability,"// If test and tty",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServ.cxx:6,test,test,6,proof/proof/src/TProofServ.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServ.cxx,1,['test'],['test']
Testability,"// If test and tty, we are done",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServ.cxx:6,test,test,6,proof/proof/src/TProofServ.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServ.cxx,1,['test'],['test']
Testability,"// If that assert breaks, that means we do not do the right thing; // in canUseAsEpilogue.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FrameLowering.cpp:11,assert,assert,11,interpreter/llvm-project/llvm/lib/Target/X86/X86FrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FrameLowering.cpp,1,['assert'],['assert']
Testability,"// If that failed, look for an ""implicit"" property by seeing if the nullary; // selector is implemented.; // FIXME: The logic for looking up nullary and unary selectors should be; // shared with the code in ActOnInstanceMessage.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprObjC.cpp:120,log,logic,120,interpreter/llvm-project/clang/lib/Sema/SemaExprObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprObjC.cpp,1,['log'],['logic']
Testability,"// If the ""Other"" register is live at a slot Idx, test whether Reg can; // safely be merged with it, or should be marked undef.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp:50,test,test,50,interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp,1,['test'],['test']
Testability,"// If the 'X' is *logically* shifted, we can fold that shift into 'control'.; // FIXME: only if the shift is one-use?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp:18,log,logically,18,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,1,['log'],['logically']
Testability,"// If the -dataflow-log command-line flag was set, synthesize a logger.; // This is ugly but provides a uniform method for ad-hoc debugging dataflow-; // based tools.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/DataflowAnalysisContext.cpp:20,log,log,20,interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/DataflowAnalysisContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/DataflowAnalysisContext.cpp,2,['log'],"['log', 'logger']"
Testability,"// If the Base came from a SHR #C, we can deduce that it is really testing bit; // #C in the base of the SHR.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp:67,test,testing,67,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,1,['test'],['testing']
Testability,"// If the CFG was constructed without elements for temporary destructors; // and the just-called constructor created a temporary object then; // stop exploration if the temporary object has a noreturn constructor.; // This can lose coverage because the destructor, if it were present; // in the CFG, would be called at the end of the full expression or; // later (for life-time extended temporaries) -- but avoids infeasible; // paths when no-return temporary destructors are used for assertions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngineCXX.cpp:485,assert,assertions,485,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngineCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngineCXX.cpp,1,['assert'],['assertions']
Testability,"// If the LHS is '(and load, const)', the RHS is 0, the test is for; // equality or unsigned, and all 1 bits of the const are in the same; // partial word, see if we can shorten the load.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:56,test,test,56,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,1,['test'],['test']
Testability,"// If the MemoMap had an entry mapping AncestorPad to nullptr, since we; // haven't yet called getUnwindDestTokenHelper for AncestorPad in this; // call to getUnwindDestToken, that would mean that AncestorPad had no; // information in itself, its descendants, or its ancestors. If that; // were the case, then we should also have recorded the lack of information; // for the descendant that we're coming from. So assert that we don't; // find a null entry in the MemoMap for AncestorPad.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/InlineFunction.cpp:413,assert,assert,413,interpreter/llvm-project/llvm/lib/Transforms/Utils/InlineFunction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/InlineFunction.cpp,1,['assert'],['assert']
Testability,"// If the RHS can be constant folded, and if it constant folds to something; // that isn't 0 or 1 (which indicate a potential logical operation that; // happened to fold to true/false) then warn.; // Parens on the RHS are ignored.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:126,log,logical,126,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['log'],['logical']
Testability,"// If the _refCoefNorm is empty or it's equal to normSet anyway, this is not; // a conditional pdf and we don't need to do any transformation. See also; // RooAddPdf::compileForNormSet() for more explanations on a similar logic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:222,log,logic,222,roofit/roofitcore/src/RooAddPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx,1,['log'],['logic']
Testability,"// If the address of 'self' is being passed to the call, assume that the; // 'self' after the call will have the same flags.; // EX: log(&self)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/ObjCSelfInitChecker.cpp:133,log,log,133,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/ObjCSelfInitChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/ObjCSelfInitChecker.cpp,1,['log'],['log']
Testability,"// If the arg is fake, it's the user's job to supply it: general parsing; // logic shouldn't need to know anything about it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp:77,log,logic,77,interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp,1,['log'],['logic']
Testability,"// If the argument has been promoted from a smaller type, insert an; // assertion to capture this.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp:72,assert,assertion,72,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,1,['assert'],['assertion']
Testability,"// If the array size expression is a conditional expression whose branches; // are both integer constant expressions, one negative and one positive,; // then it's assumed to be like an old-style static assertion. e.g.,; // int old_style_assert[expr ? 1 : -1];; // We will accept any integer constant expressions instead of assuming the; // values 1 and -1 are always used.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp:202,assert,assertion,202,interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,1,['assert'],['assertion']
Testability,"// If the attribute does not contain a Subjects definition, then use the; // default appertainsTo logic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp:98,log,logic,98,interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp,1,['log'],['logic']
Testability,"// If the bit set is all ones, testing against it is unnecessary.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp:31,test,testing,31,interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp,1,['test'],['testing']
Testability,"// If the bit set is sufficiently small, we can avoid a load by bit testing; // a constant.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp:68,test,testing,68,interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp,1,['test'],['testing']
Testability,"// If the callee is preemptable, then the static linker will use a plt-stub; // which saves the toc to the stack, and needs a nop after the call; // instruction to convert to a toc-restore.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:71,stub,stub,71,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,1,['stub'],['stub']
Testability,"// If the caller will change MI to use ConvOpc, only test whether; // ConvOpc is suitable; it is on the caller to set the MI flag.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZElimCompare.cpp:53,test,test,53,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZElimCompare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZElimCompare.cpp,1,['test'],['test']
Testability,"// If the caller will not change MI, we test the MI flag here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZElimCompare.cpp:40,test,test,40,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZElimCompare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZElimCompare.cpp,1,['test'],['test']
Testability,"// If the cases in bit test don't form a contiguous range, we evenly; // distribute the probability on the edge to Fallthrough to two; // successors of CurMBB.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/IRTranslator.cpp:23,test,test,23,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/IRTranslator.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/IRTranslator.cpp,2,['test'],['test']
Testability,"// If the cast is an enum, get its declaration.; // If the isEnumeralType() returned true, then the declaration must exist; // even if it is a stub declaration. It is up to the getDeclValuesForEnum(); // function to handle this.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/EnumCastOutOfRangeChecker.cpp:143,stub,stub,143,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/EnumCastOutOfRangeChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/EnumCastOutOfRangeChecker.cpp,1,['stub'],['stub']
Testability,"// If the char is variable but the input str and length are not we can turn; // this memchr call into a simple bit field test. Of course this only works; // when the return value is only checked against null.; //; // It would be really nice to reuse switch lowering here but we can't change; // the CFG at this point.; //; // memchr(""\r\n"", C, 2) != nullptr -> (1 << C & ((1 << '\r') | (1 << '\n'))); // != 0; // after bounds check.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyLibCalls.cpp:121,test,test,121,interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyLibCalls.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyLibCalls.cpp,1,['test'],['test']
Testability,"// If the compare constant has significant bits above the lowest sign-bit,; // then convert an unsigned cmp to a test of the sign-bit:; // (ashr X, ShiftC) u> C --> X s< 0; // (ashr X, ShiftC) u< C --> X s> -1",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp:113,test,test,113,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,1,['test'],['test']
Testability,"// If the comparison is testing for a positive value, we have to invert; // the sign bit mask, so only do that transform if the target has a bitwise; // 'and not' instruction (the invert is free).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:24,test,testing,24,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['test'],['testing']
Testability,"// If the condition is a logical '&&' or '||', build a more accurate CFG.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp:25,log,logical,25,interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,1,['log'],['logical']
Testability,"// If the current scope is in the 'LinkageNames' table, update its; // logical scope. For other scopes, always we will assume the default; // "".text"" section index.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVELFReader.cpp:71,log,logical,71,interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVELFReader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVELFReader.cpp,1,['log'],['logical']
Testability,"// If the cycle contains LogLen-1, move it to the front of the cycle.; // Otherwise, return the cycle unchanged.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelDAGToDAGHVX.cpp:25,Log,LogLen-,25,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelDAGToDAGHVX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelDAGToDAGHVX.cpp,1,['Log'],['LogLen-']
Testability,"// If the declaration is dependent or is in a dependent context, then the; // mangling is unlikely to be meaningful (and in some cases may cause; // ""don't know how to mangle this"" assertion failures.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/JSONNodeDumper.cpp:181,assert,assertion,181,interpreter/llvm-project/clang/lib/AST/JSONNodeDumper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/JSONNodeDumper.cpp,1,['assert'],['assertion']
Testability,// If the executing code set a test result override then use that.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp:31,test,test,31,interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp,1,['test'],['test']
Testability,"// If the first character on the new line is a lambda's closing brace, the; // stack still contains that lambda's parenthesis. As such, we need to; // recurse further down the stack than usual to find the parenthesis level; // containing the lambda, which is where we want to set; // BreakBeforeParameter.; //; // We specifically special case ""OuterScope""-formatted lambdas here; // because, when using that setting, breaking before the parameter; // directly following the lambda is particularly unsightly. However, when; // ""OuterScope"" is not set, the logic to find the parent parenthesis level; // still appears to be sometimes incorrect. It has not been fixed yet; // because it would lead to significant changes in existing behaviour.; //; // TODO: fix the non-""OuterScope"" case too.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/ContinuationIndenter.cpp:555,log,logic,555,interpreter/llvm-project/clang/lib/Format/ContinuationIndenter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/ContinuationIndenter.cpp,1,['log'],['logic']
Testability,// If the icmp tests for a known zero bit we can constant fold it.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp:15,test,tests,15,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp,1,['test'],['tests']
Testability,"// If the input vector has vector elements wider than the target test size,; // then cast to <X x i64> so it will safely split.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:65,test,test,65,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['test'],['test']
Testability,"// If the instruction simplified to a constant, there is no cost to this; // instruction. Visit the instructions using our InstVisitor to account for; // all of the per-instruction logic. The visit tree returns true if we; // consumed the instruction in any way, and false if the instruction's base; // cost should count against inlining.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InlineCost.cpp:181,log,logic,181,interpreter/llvm-project/llvm/lib/Analysis/InlineCost.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InlineCost.cpp,1,['log'],['logic']
Testability,"// If the literal can be inlined as-is, apply it and short-circuit the; // tests below. The main motivation for this is to avoid unintuitive; // uses of opsel.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIFoldOperands.cpp:75,test,tests,75,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIFoldOperands.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIFoldOperands.cpp,1,['test'],['tests']
Testability,"// If the load command is present but the data offset has been zeroed out,; // as is the case for dylib stubs, return std::nullopt (no error).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp:104,stub,stubs,104,interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp,1,['stub'],['stubs']
Testability,"// If the log element has been retrieved at least once",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx:10,log,log,10,gui/sessionviewer/src/TProofProgressLog.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx,1,['log'],['log']
Testability,// If the log element is active by default; /** \class TProofProgressLog; \ingroup sessionviewer. Dialog used to display Proof session logs from the Proof progress; dialog.; It uses TProofMgr::GetSessionLogs() mechanism internally. */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx:10,log,log,10,gui/sessionviewer/src/TProofProgressLog.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx,2,['log'],"['log', 'logs']"
Testability,"// If the logical is created without an external object reference,; // we create a generic here and delete it during the destruction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLLogicalShape.cxx:10,log,logical,10,graf3d/gl/src/TGLLogicalShape.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLLogicalShape.cxx,1,['log'],['logical']
Testability,"// If the logical-not of the result is required, perform that now.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:10,log,logical-not,10,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,2,['log'],['logical-not']
Testability,"// If the loop we broke had a parent, then changeToUnreachable might have; // caused a block to be removed from the parent loop (see loop_nest_lcssa; // test case in zero-btc.ll for an example), thus changing the parent's; // exit blocks. If that happened, we need to rebuild LCSSA on the outermost; // loop which might have a had a block removed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopUtils.cpp:153,test,test,153,interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopUtils.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopUtils.cpp,1,['test'],['test']
Testability,"// If the mask covers the least significant bit, then we can replace; // TEST+AND with a SHL and check eflags.; // This emits a redundant TEST which is subsequently eliminated.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp:73,TEST,TEST,73,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,2,['TEST'],['TEST']
Testability,"// If the mask covers the most significant bit, then we can replace; // TEST+AND with a SHR and check eflags.; // This emits a redundant TEST which is subsequently eliminated.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp:72,TEST,TEST,72,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,2,['TEST'],['TEST']
Testability,"// If the mask is not v1i1, use scalar bit test operations. This generates; // better results on X86 at least.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/ScalarizeMaskedMemIntrin.cpp:43,test,test,43,interpreter/llvm-project/llvm/lib/Transforms/Scalar/ScalarizeMaskedMemIntrin.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/ScalarizeMaskedMemIntrin.cpp,6,['test'],['test']
Testability,"// If the method we are checking overrides a method from its base; // don't warn about the other overloaded methods. Clang deviates from; // GCC by only diagnosing overloads of inherited virtual functions that; // do not override any other virtual functions in the base. GCC's; // -Woverloaded-virtual diagnoses any derived function hiding a virtual; // function from a base class. These cases may be better served by a; // warning (not specific to virtual functions) on call sites when the; // call would select a different function from the base class, were it; // visible.; // See FIXME in test/SemaCXX/warn-overload-virtual.cpp for an example.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp:593,test,test,593,interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,1,['test'],['test']
Testability,"// If the name ends with ""*"", create 2 logical types: a pointer and a; // pointee type. TypeIndex is composed of a SympleTypeMode byte followed; // by a SimpleTypeKind byte. The logical pointer will be identified by; // the full TypeIndex value and the pointee by the SimpleTypeKind.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.cpp:39,log,logical,39,interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.cpp,2,['log'],['logical']
Testability,"// If the nested loop is an innermost loop, prefer to a 32-byte alignment,; // so that we can decrease cache misses and branch-prediction misses.; // Actual alignment of the loop will depend on the hotness check and other; // logic in alignBlocks.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:226,log,logic,226,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,1,['log'],['logic']
Testability,"// If the object requires destruction and is not lifetime-extended,; // then it must have a BTE within its MTE, otherwise it shouldn't.; // FIXME: This should be an assertion.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ConstructionContext.cpp:165,assert,assertion,165,interpreter/llvm-project/clang/lib/Analysis/ConstructionContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ConstructionContext.cpp,1,['assert'],['assertion']
Testability,"// If the only user of a logical operation is move to exec, fold it now; // to prevent forming of saveexec. I.e.:; //; // %0:sreg_64 = COPY $exec; // %1:sreg_64 = S_AND_B64 %0:sreg_64, %2:sreg_64; // =>; // %1 = S_AND_B64 $exec, %2:sreg_64",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIOptimizeExecMaskingPreRA.cpp:25,log,logical,25,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIOptimizeExecMaskingPreRA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIOptimizeExecMaskingPreRA.cpp,1,['log'],['logical']
Testability,"// If the operand is a logical right shift, we can fold it into this; // instruction: rldicl(rldicl(x, 64-n, n), 0, mb) -> rldicl(x, 64-n, mb); // for n <= mb. The right shift is really a left rotate followed by a; // mask, and this mask is a more-restrictive sub-mask of the mask implied; // by the shift.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp:23,log,logical,23,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,1,['log'],['logical']
Testability,"// If the operand of the truncate is not an instruction, we will not have; // any information on the dropped bits.; // (Actually we could for constant but it is not worth the extra logic).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp:181,log,logic,181,interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,1,['log'],['logic']
Testability,"// If the pair only contains int values, we will save two bitwise; // instructions and increase one store instruction (costing one more; // store buffer). Since the benefit is more blurred so we leave; // such pair out until we get testcase to prove it is a win.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h:232,test,testcase,232,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h,1,['test'],['testcase']
Testability,"// If the pair only contains int values, we will save two bitwise; // instructions and increase one store instruction (costing one more; // store buffer). Since the benefit is more blurred we leave such a pair; // out until we get testcase to prove it is a win.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.h:231,test,testcase,231,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.h,1,['test'],['testcase']
Testability,"// If the primary 'and' result isn't used, don't bother using X86ISD::AND,; // because a TEST instruction will be better.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:89,TEST,TEST,89,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['TEST'],['TEST']
Testability,"// If the primary 'and' result isn't used, don't bother using; // M68kISD::AND, because a TEST instruction will be better.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/M68kISelLowering.cpp:90,TEST,TEST,90,interpreter/llvm-project/llvm/lib/Target/M68k/M68kISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/M68kISelLowering.cpp,1,['TEST'],['TEST']
Testability,"// If the resulting expr has constant-addend, this constant-addend is; // desirable to reside at the top of the resulting expression tree. Placing; // constant close to super-expr(s) will potentially reveal some; // optimization opportunities in super-expr(s). Here we do not implement; // this logic intentionally and rely on SimplifyAssociativeOrCommutative; // call later.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAddSub.cpp:295,log,logic,295,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAddSub.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAddSub.cpp,1,['log'],['logic']
Testability,"// If the root node defines glue, we need to update it to the glue result.; // TODO: This never happens in our tests and I think it can be removed /; // replaced with an assert, but if we do it this the way the change is; // NFC.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:111,test,tests,111,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,2,"['assert', 'test']","['assert', 'tests']"
Testability,"// If the select constants differ by exactly one bit and that's the same; // bit that is masked and checked by the select condition, the select can; // be replaced by bitwise logic to set/clear one bit of the constant result.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp:175,log,logic,175,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp,1,['log'],['logic']
Testability,// If the select is a logical-and/logical-or then it is better treated as a; // and/or by the backend.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfoImpl.h:22,log,logical-and,22,interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfoImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfoImpl.h,2,['log'],"['logical-and', 'logical-or']"
Testability,"// If the selection option is test specific, we use a test-specific; // consumer.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-refactor/ClangRefactor.cpp:30,test,test,30,interpreter/llvm-project/clang/tools/clang-refactor/ClangRefactor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-refactor/ClangRefactor.cpp,2,['test'],"['test', 'test-specific']"
Testability,"// If the shift amount is guaranteed to be in-range we can replace it with a; // generic shift. If its guaranteed to be out of range, logical shifts combine; // to zero and arithmetic shifts are clamped to (BitWidth - 1).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstCombineIntrinsic.cpp:134,log,logical,134,interpreter/llvm-project/llvm/lib/Target/X86/X86InstCombineIntrinsic.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstCombineIntrinsic.cpp,1,['log'],['logical']
Testability,// If the shift amount is larger or equal than the width of a part we don't; // use the result from the FSHL/FSHR. Insert a test and select the appropriate; // values for large shift amounts.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:124,test,test,124,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,1,['test'],['test']
Testability,"// If the shift op is SHL, the logic op must be AND, otherwise the result; // will be wrong.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:31,log,logic,31,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['log'],['logic']
Testability,"// If the shifted constant is a power-of-2, test the shift amount directly:; // (ShiftValC >> Y) >u C --> X <u (LZ(C) - LZ(ShiftValC)); // (ShiftValC >> Y) <u C --> X >=u (LZ(C-1) - LZ(ShiftValC))",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp:44,test,test,44,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,1,['test'],['test']
Testability,"// If the shifted value is not negative, this is a logical shift right.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SCCPSolver.cpp:51,log,logical,51,interpreter/llvm-project/llvm/lib/Transforms/Utils/SCCPSolver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SCCPSolver.cpp,1,['log'],['logical']
Testability,"// If the snippet setup is not complete, we disable liveliness tracking. This; // means that we won't know what values are in the registers.; // FIXME: this should probably be an assertion.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Assembler.cpp:179,assert,assertion,179,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Assembler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Assembler.cpp,1,['assert'],['assertion']
Testability,"// If the source register was virtual and if we know something about it,; // add an assert node.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:84,assert,assert,84,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,1,['assert'],['assert']
Testability,"// If the source type is smaller than the destination type of the; // coerce-to logic, copy the source value into a temp alloca the size; // of the destination type to allow loading all of it. The bits past; // the source value are left undef.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:80,log,logic,80,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,1,['log'],['logic']
Testability,"// If the source types do not match, but the casts are matching extends, we; // can still narrow the logic op.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp:101,log,logic,101,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,1,['log'],['logic']
Testability,"// If the stack is not accessible by other threads, the ""must-free"" logic; // doesn't apply as the pointer could be shared and needs to be places in; // ""shareable"" memory.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp:68,log,logic,68,interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,1,['log'],['logic']
Testability,"// If the stack pointer moves and we don't have a base pointer, the; // estimate logic doesn't work. The actual offsets might be larger when; // we're constructing a call frame, or we might need to use negative; // offsets from fp.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMFrameLowering.cpp:81,log,logic,81,interpreter/llvm-project/llvm/lib/Target/ARM/ARMFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMFrameLowering.cpp,1,['log'],['logic']
Testability,"// If the subrange is empty at this point, the MIR is invalid. Do not assert; // and let the verifier catch this case.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveInterval.cpp:70,assert,assert,70,interpreter/llvm-project/llvm/lib/CodeGen/LiveInterval.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveInterval.cpp,1,['assert'],['assert']
Testability,"// If the target supports an 'and-not' or 'and-complement' logic operation,; // try to use that to make a comparison operation more efficient.; // But don't do this transform if the mask is a single bit because there are; // more efficient ways to deal with that case (for example, 'bt' on x86 or; // 'rlwinm' on PPC).; // Bail out if the compare operand that we want to turn into a zero is; // already a zero (otherwise, infinite loop).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:59,log,logic,59,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,1,['log'],['logic']
Testability,"// If the target supports the cmpb instruction, do the idiom recognition here.; // We don't do this as a DAG combine because we don't want to do it as nodes; // are being combined (because we might miss part of the eventual idiom). We; // don't want to do it during instruction selection because we want to reuse; // the logic for lowering the masking operations already part of the; // instruction selector.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp:321,log,logic,321,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,1,['log'],['logic']
Testability,"// If the test passes on this subset alone, recurse.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DeltaAlgorithm.cpp:10,test,test,10,interpreter/llvm-project/llvm/lib/Support/DeltaAlgorithm.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DeltaAlgorithm.cpp,1,['test'],['test']
Testability,"// If the top of the logical operator nest, reset the MCDC temp to 0.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:21,log,logical,21,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,5,['log'],['logical']
Testability,"// If the top of the logical operator nest, update the MCDC bitmap for the; // ConditionalOperator prior to visiting its LHS and RHS blocks, since they; // may also contain a boolean expression.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:21,log,logical,21,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,2,['log'],['logical']
Testability,"// If the top of the logical operator nest, update the MCDC bitmap.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:21,log,logical,21,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,4,['log'],['logical']
Testability,"// If the truncate's operand is BUILD_VECTOR with DUP, do not combine the op; // with uzp1.; // You can see the regressions on test/CodeGen/AArch64/aarch64-smull.ll",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:127,test,test,127,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,2,['test'],['test']
Testability,"// If the type bound has qualifiers other than CVR, we need to strip; // them or we'll probably assert later when trying to apply new; // qualifiers.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclObjC.cpp:96,assert,assert,96,interpreter/llvm-project/clang/lib/Sema/SemaDeclObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclObjC.cpp,1,['assert'],['assert']
Testability,"// If the type does not have a capability, see if the components of the; // expression have capabilities. This allows for writing C code where the; // capability may be on the type, and the expression is a capability; // boolean logic expression. Eg) requires_capability(A || B && !C)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp:229,log,logic,229,interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp,1,['log'],['logic']
Testability,"// If the type is > 64 bits, it can't be a constant int, so we bail; // early because SignExtend64 will assert otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutorImpl.h:104,assert,assert,104,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutorImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutorImpl.h,1,['assert'],['assert']
Testability,"// If the types are still not compatible, we need to test whether the; // promoted type and the underlying type are the same except for; // signedness. Ask the AST for the correctly corresponding type and see; // if that's compatible.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:53,test,test,53,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['test'],['test']
Testability,"// If the user has provided a max angle, test if the calculated; // angle is less then the max angle.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:41,test,test,41,hist/hist/src/TMultiDimFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx,1,['test'],['test']
Testability,"// If the user hasn't supplied a max angle do the test as,",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:50,test,test,50,hist/hist/src/TMultiDimFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx,1,['test'],['test']
Testability,"// If the value is dependent, we can not test anything.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaStmtAttr.cpp:41,test,test,41,interpreter/llvm-project/clang/lib/Sema/SemaStmtAttr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaStmtAttr.cpp,1,['test'],['test']
Testability,"// If the value is unavailable in one of predecessors, we will end up; // inserting a new instruction into them. It is only valid if all the; // instructions before LoadI are guaranteed to pass execution to its; // successor, or if LoadI is safe to speculate.; // TODO: If this logic becomes more complex, and we will perform PRE insertion; // farther than to a predecessor, we need to reuse the code from GVN's PRE.; // It requires domination tree analysis, so for this simple case it is an; // overkill.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/JumpThreading.cpp:278,log,logic,278,interpreter/llvm-project/llvm/lib/Transforms/Scalar/JumpThreading.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/JumpThreading.cpp,1,['log'],['logic']
Testability,"// If the variable is clearly identified as non-odr-used and the full; // expression is not instantiation dependent, only then do we not; // need to check enclosing lambda's for speculative captures.; // For e.g.:; // Even though 'x' is not odr-used, it should be captured.; // int test() {; // const int x = 10;; // auto L = [=](auto a) {; // (void) +x + a;; // };; // }",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp:282,test,test,282,interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp,1,['test'],['test']
Testability,"// If the vector element width is a whole number of bytes, test if its legal; // to BSWAP shuffle the bytes and then perform the BITREVERSE on the byte; // vector. This greatly reduces the number of bit shifts necessary.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp:59,test,test,59,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp,1,['test'],['test']
Testability,// If there are any stubs then the section alignment needs to be at least as; // high as stub alignment or padding calculations may by incorrect when the; // section is remapped.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyld.cpp:20,stub,stubs,20,interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyld.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyld.cpp,2,['stub'],"['stub', 'stubs']"
Testability,// If there aren't enough stubs available then allocate some more.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/EPCIndirectionUtils.cpp:26,stub,stubs,26,interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/EPCIndirectionUtils.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/EPCIndirectionUtils.cpp,1,['stub'],['stubs']
Testability,"// If there is a NotifyStubEmitted callback set, call it to register any; // stubs created for this section.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyld.cpp:77,stub,stubs,77,interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyld.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyld.cpp,1,['stub'],['stubs']
Testability,"// If there is a condition mismatch with any of the other conditions,; // there is no match for the test vectors.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp:100,test,test,100,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,1,['test'],['test']
Testability,"// If there is a declaration in the module, then we had an extern followed; // by the ifunc, as in:; // extern int test();; // ...; // int test() __attribute__((ifunc(""resolver"")));; //; // Remove it and replace uses of it with the ifunc.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:115,test,test,115,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,2,['test'],['test']
Testability,"// If there is no space, an error message is shown:; // Error in <TString::AssertElement>: out of bounds: i = -1, Length = 0; // If there is no function selected, then put nothing.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/fitpanel/src/TFitEditor.cxx:75,Assert,AssertElement,75,gui/fitpanel/src/TFitEditor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/fitpanel/src/TFitEditor.cxx,1,['Assert'],['AssertElement']
Testability,"// If there is only one call of the function, and it has internal linkage,; // the cost of inlining it drops dramatically. It may seem odd to update; // Cost in updateThreshold, but the bonus depends on the logic in this method.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InlineCost.cpp:207,log,logic,207,interpreter/llvm-project/llvm/lib/Analysis/InlineCost.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InlineCost.cpp,1,['log'],['logic']
Testability,"// If there is overflow, the result must be true or false.; // TODO: Can we assert there is no overflow because InstSimplify always; // handles those cases?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp:76,assert,assert,76,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,1,['assert'],['assert']
Testability,// If there was an error that came from the verifier we must return 1 as; // an exit code for the process. This will make the test fail as expected.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-repl/ClangRepl.cpp:126,test,test,126,interpreter/llvm-project/clang/tools/clang-repl/ClangRepl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-repl/ClangRepl.cpp,1,['test'],['test']
Testability,"// If there was an error that came from the verifier we must return 1 as; // an exit code for the process. This will make the test fail as expected.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/driver/cling.cpp:126,test,test,126,interpreter/cling/tools/driver/cling.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/driver/cling.cpp,1,['test'],['test']
Testability,"// If this basic block is ONLY a compare and a branch, and if a predecessor; // branches to us and one of our successors, fold the comparison into the; // predecessor and use logical operations to pick the right destination.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp:175,log,logical,175,interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp,1,['log'],['logical']
Testability,"// If this basic block is ONLY a compare and a branch, and if a predecessor; // branches to us and our successor, fold the comparison into the; // predecessor and use logical operations to update the incoming value; // for PHI nodes in common successor.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp:167,log,logical,167,interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp,1,['log'],['logical']
Testability,"// If this block has no successors (e.g. it is a return block or ends with; // a call to a no-return function like abort or __cxa_throw) and if the pred; // falls through into this block, and if it would otherwise fall through; // into the block after this, move this block to the end of the function.; //; // We consider it more likely that execution will stay in the function (e.g.; // due to loops) than it is to exit it. This asserts in loops etc, moving; // the assert condition out of the loop body.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/BranchFolding.cpp:430,assert,asserts,430,interpreter/llvm-project/llvm/lib/CodeGen/BranchFolding.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/BranchFolding.cpp,2,['assert'],"['assert', 'asserts']"
Testability,"// If this function doesn't belong to one of our modules, we're done.; // FIXME: Asking for the pointer to a function that hasn't been registered,; // and isn't a declaration (which is handled above) should probably; // be an assertion.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/MCJIT/MCJIT.cpp:226,assert,assertion,226,interpreter/llvm-project/llvm/lib/ExecutionEngine/MCJIT/MCJIT.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/MCJIT/MCJIT.cpp,1,['assert'],['assertion']
Testability,// If this graph is part of the test harness there's nothing to do.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp:32,test,test,32,interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp,1,['test'],['test']
Testability,"// If this graph is part of the test then promote any symbols referenced by; // the harness to default scope, remove all symbols that clash with harness; // definitions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp:32,test,test,32,interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp,1,['test'],['test']
Testability,"// If this has a literal constant source that is the same as the; // reversed bits of an inline immediate, replace with a bitreverse of; // that constant. This saves 4 bytes in the common case of materializing; // sign bits.; // Test if we are after regalloc. We only want to do this after any; // optimizations happen because this will confuse them.; // XXX - not exactly a check for post-regalloc run.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIShrinkInstructions.cpp:229,Test,Test,229,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIShrinkInstructions.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIShrinkInstructions.cpp,1,['Test'],['Test']
Testability,// If this is a TRUNC followed by a ZEXT then we are dealing with integral; // types and if the sizes are just right we can convert this into a logical; // 'and' which will be much cheaper than the pair of casts.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp:144,log,logical,144,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp,1,['log'],['logical']
Testability,// If this is a branch from a thumb function (BR22) then make sure we mark; // the value as being a thumb stub: we don't want to mix it up with an ARM; // stub targeting the same function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/Targets/RuntimeDyldMachOARM.h:106,stub,stub,106,interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/Targets/RuntimeDyldMachOARM.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/Targets/RuntimeDyldMachOARM.h,2,['stub'],['stub']
Testability,"// If this is a catch-all, we don't need to test anything.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:44,test,test,44,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,1,['test'],['test']
Testability,"// If this is a comparison that tests the signbit (X < 0) or (x > -1),; // fold the xor.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp:32,test,tests,32,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,1,['test'],['tests']
Testability,"// If this is a conditional branch in an empty block, and if any; // predecessors are a conditional branch to one of our destinations,; // fold the conditions into logical ops and one cond br.; // Ignore dbg intrinsics.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp:164,log,logical,164,interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp,1,['log'],['logical']
Testability,"// If this is a load followed by a store to the same location, then the store; // is dead/noop. Peek through any truncates if canCombineTruncStore failed.; // TODO: Add big-endian truncate support with test coverage.; // TODO: Can relax for unordered atomics (see D66309)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:202,test,test,202,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['test'],['test']
Testability,"// If this is a logical 'and' with a mask that clears bits, recurse then; // unset the appropriate bits.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/Local.cpp:16,log,logical,16,interpreter/llvm-project/llvm/lib/Transforms/Utils/Local.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/Local.cpp,1,['log'],['logical']
Testability,"// If this is a logical and/or, then we must prevent propagation of a; // poison value from the RHS by inserting freeze.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp:16,log,logical,16,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,1,['log'],['logical']
Testability,"// If this is a logical shift by a constant, recurse then shift the result.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/Local.cpp:16,log,logical,16,interpreter/llvm-project/llvm/lib/Transforms/Utils/Local.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/Local.cpp,1,['log'],['logical']
Testability,"// If this is a mask reg operation, it only cares about VLMAX.; // TODO: Possible extensions to this logic; // * Probably ok if available VLMax is larger than demanded; // * The policy bits can probably be ignored..",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVInsertVSETVLI.cpp:101,log,logic,101,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVInsertVSETVLI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVInsertVSETVLI.cpp,1,['log'],['logic']
Testability,"// If this is a named stub, just call NotifyStubEmitted.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyld.cpp:22,stub,stub,22,interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyld.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyld.cpp,1,['stub'],['stub']
Testability,"// If this is a scalar return, insert a readfirstlane just in case the value; // ends up in a VGPR.; // FIXME: Assert this is a shader return.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUCallLowering.cpp:111,Assert,Assert,111,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUCallLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUCallLowering.cpp,1,['Assert'],['Assert']
Testability,"// If this is a series of conditions that are or'd or and'd together, emit; // this as a sequence of branches instead of setcc's with and/or operations.; // As long as jumps are not expensive (exceptions for multi-use logic ops,; // unpredictable branches, and vector extracts because those jumps are likely; // expensive for any target), this should improve performance.; // For example, instead of something like:; // cmp A, B; // C = seteq; // cmp D, E; // F = setle; // or C, F; // jnz foo; // Emit:; // cmp A, B; // je foo; // cmp D, E; // jle foo",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/IRTranslator.cpp:218,log,logic,218,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/IRTranslator.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/IRTranslator.cpp,2,['log'],['logic']
Testability,"// If this is a sign-bit test of a bitcast of a casted FP value, eliminate; // the FP extend/truncate because that cast does not change the sign-bit.; // This is true for all standard IEEE-754 types and the X86 80-bit type.; // The sign-bit is always the most significant bit in those types.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp:25,test,test,25,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,1,['test'],['test']
Testability,"// If this is a single bit test that can't be handled by ANDI, shift the; // bit to be tested to the MSB and perform a signed compare with 0.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:27,test,test,27,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,2,['test'],"['test', 'tested']"
Testability,"// If this is a srem by a powers-of-two (including INT_MIN), avoid the fold; // since it can be best implemented as a bit test.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:122,test,test,122,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,1,['test'],['test']
Testability,"// If this is a target specific AND node with no flag usages, turn it back; // into ISD::AND to enable test instruction matching.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp:103,test,test,103,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,1,['test'],['test']
Testability,"// If this is a test of the sign bit and the multiply is sign-preserving with; // a constant operand, use the multiply LHS operand instead:; // (X * +MulC) < 0 --> X < 0; // (X * -MulC) < 0 --> X > 0",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp:16,test,test,16,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,1,['test'],['test']
Testability,"// If this is a truncate of a logical shr, we can truncate it to a smaller; // lshr iff we know that the bits we would otherwise be shifting in are; // already zeros.; // TODO: It is enough to check that the bits we would be shifting in are; // zero - use AmtKnownBits.getMaxValue().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp:30,log,logical,30,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp,1,['log'],['logical']
Testability,"// If this is a urem by a powers-of-two, avoid the fold since it can be; // best implemented as a bit test.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:102,test,test,102,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,1,['test'],['test']
Testability,"// If this is a vector register, we'll need somewhat custom logic to handle; // hardening it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86SpeculativeLoadHardening.cpp:60,log,logic,60,interpreter/llvm-project/llvm/lib/Target/X86/X86SpeculativeLoadHardening.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86SpeculativeLoadHardening.cpp,1,['log'],['logic']
Testability,"// If this is an 8 or 16-bit value, it is really passed promoted to 32; // bits. Insert an assert[sz]ext to capture this, then truncate to the; // right size.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/M68kISelLowering.cpp:91,assert,assert,91,interpreter/llvm-project/llvm/lib/Target/M68k/M68kISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/M68kISelLowering.cpp,2,['assert'],['assert']
Testability,"// If this is an 8 or 16-bit value, it is really passed promoted; // to 32 bits. Insert an assert[sz]ext to capture this, then; // truncate to the right size.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp:91,assert,assert,91,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp,2,['assert'],['assert']
Testability,"// If this is an 8, 16 or 32-bit value, it is really passed promoted; // to 64 bits. Insert an assert[sz]ext to capture this, then; // truncate to the right size.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:95,assert,assert,95,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['assert'],['assert']
Testability,"// If this is an 8-bit value, it is really passed promoted to 16; // bits. Insert an assert[sz]ext to capture this, then truncate to the; // right size.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/MSP430/MSP430ISelLowering.cpp:85,assert,assert,85,interpreter/llvm-project/llvm/lib/Target/MSP430/MSP430ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/MSP430/MSP430ISelLowering.cpp,1,['assert'],['assert']
Testability,"// If this is an 8/16-bit value, it is really passed promoted to 32; // bits. Insert an assert[sz]ext to capture this, then truncate to the; // right size.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Lanai/LanaiISelLowering.cpp:88,assert,assert,88,interpreter/llvm-project/llvm/lib/Target/Lanai/LanaiISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Lanai/LanaiISelLowering.cpp,1,['assert'],['assert']
Testability,"// If this is an ARC __strong block-pointer variable, don't do a; // block copy.; //; // TODO: this can be generalized into the normal initialization logic:; // we should never need to do a block-copy when initializing a local; // variable, because the local variable's lifetime should be strictly; // contained within the stack block's.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:150,log,logic,150,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,1,['log'],['logic']
Testability,"// If this is an arithmetic shift right and only the low-bit is set, we can; // always convert this into a logical shr, even if the shift amount is; // variable. The low bit of the shift cannot be an input sign bit unless; // the shift amount is >= the size of the datatype, which is undefined.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:107,log,logical,107,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,2,['log'],['logical']
Testability,"// If this is an value smaller than the argument slot size (32-bit for O32,; // 64-bit for N32/N64), it has been promoted in some way to the argument slot; // size. Extract the value and insert any appropriate assertions regarding; // sign/zero extension.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsISelLowering.cpp:210,assert,assertions,210,interpreter/llvm-project/llvm/lib/Target/Mips/MipsISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsISelLowering.cpp,1,['assert'],['assertions']
Testability,"// If this is an value that has been promoted to wider types, insert an; // assert[sz]ext to capture this, then truncate to the right size.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/BPF/BPFISelLowering.cpp:76,assert,assert,76,interpreter/llvm-project/llvm/lib/Target/BPF/BPFISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/BPF/BPFISelLowering.cpp,1,['assert'],['assert']
Testability,"// If this is checking if all elements of a vector compare are set or not,; // invert the casted vector equality compare and test if all compare; // elements are clear or not. Compare against zero is generally easier for; // analysis and codegen.; // icmp eq/ne (bitcast (not X) to iN), -1 --> icmp eq/ne (bitcast X to iN), 0; // Example: are all elements equal? --> are zero elements not equal?; // TODO: Try harder to reduce compare of 2 freely invertible operands?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp:125,test,test,125,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,1,['test'],['test']
Testability,"// If this is not a bitcast to an FP type or if the target doesn't have; // IEEE754-compliant FP logic, we're done.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:97,log,logic,97,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['log'],['logic']
Testability,"// If this is not a function type, warning will be asserted by subject; // check.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp:51,assert,asserted,51,interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,1,['assert'],['asserted']
Testability,"// If this is not an XORI, it is a reg-reg logical op and we can convert; // it to record-form.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp:43,log,logical,43,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,1,['log'],['logical']
Testability,"// If this is the C++11 variety, also add in the LangOpts test.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp:58,test,test,58,interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp,1,['test'],['test']
Testability,"// If this is the root being simplified, allow it to have multiple uses,; // just set the DemandedMask to all bits so that we can try to simplify the; // operands. This allows visitTruncInst (for example) to simplify the; // operand of a trunc without duplicating all the logic below.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp:272,log,logic,272,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp,1,['log'],['logic']
Testability,"// If this isn't sizeof(vla), the result must be constant; use the constant; // folding logic so we don't have to duplicate it here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:88,log,logic,88,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,1,['log'],['logic']
Testability,"// If this logic op has not been simplified yet, just bail out and let that; // happen first. Otherwise, the code below may wrongly invert.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp:11,log,logic,11,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,1,['log'],['logic']
Testability,"// If this loop must exit based on this condition (or execute undefined; // behaviour), and we can prove the test sequence produced must repeat; // the same values on self-wrap of the IV, then we can infer that IV; // doesn't self wrap because if it did, we'd have an infinite (undefined); // loop.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp:109,test,test,109,interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,1,['test'],['test']
Testability,// If this method has been called it means someone has set up an external; // diagnostic handler. Assert on that.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/LTO/LTOCodeGenerator.cpp:98,Assert,Assert,98,interpreter/llvm-project/llvm/lib/LTO/LTOCodeGenerator.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/LTO/LTOCodeGenerator.cpp,1,['Assert'],['Assert']
Testability,"// If this method overrides a previous @synthesize declaration,; // register it with the property. Linear search through all; // properties here, because the autosynthesized stub hasn't been; // made visible yet, so it can be overridden by a later; // user-specified implementation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclObjC.cpp:174,stub,stub,174,interpreter/llvm-project/clang/lib/Sema/SemaDeclObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclObjC.cpp,1,['stub'],['stub']
Testability,"// If this protocol is marked 'objc_protocol_requires_explicit_implementation'; // then we should check if any class in the super class hierarchy also; // conforms to this protocol, either directly or via protocol inheritance.; // If so, we can skip checking this protocol completely because we; // know that a parent class already satisfies this protocol.; //; // Note: we could generalize this logic for all protocols, and merely; // add the limit on looking at the super class chain for just; // specially marked protocols. This may be a good optimization. This; // change is restricted to 'objc_protocol_requires_explicit_implementation'; // protocols for now for controlled evaluation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclObjC.cpp:396,log,logic,396,interpreter/llvm-project/clang/lib/Sema/SemaDeclObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclObjC.cpp,1,['log'],['logic']
Testability,"// If this proxy or the loop info is going to be invalidated, we also need; // to clear all the keys coming from that analysis. We also completely blow; // away the loop analyses if any of the standard analyses provided by the; // loop pass manager go away so that loop analyses can freely use these; // without worrying about declaring dependencies on them etc.; // FIXME: It isn't clear if this is the right tradeoff. We could instead make; // loop analyses declare any dependencies on these and use the more general; // invalidation logic below to act on that.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAnalysisManager.cpp:536,log,logic,536,interpreter/llvm-project/llvm/lib/Analysis/LoopAnalysisManager.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAnalysisManager.cpp,1,['log'],['logic']
Testability,"// If this select has a condition (setcc) with narrower operands than the; // select, try to widen the compare to match the select width.; // TODO: This should be extended to handle any constant.; // TODO: This could be extended to handle non-loading patterns, but that; // requires thorough testing to avoid regressions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:292,test,testing,292,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['test'],['testing']
Testability,// If this target takes alignments in bytes (not log) validate and convert.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:49,log,log,49,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,2,['log'],['log']
Testability,"// If this tests statistic is not a ""Slave"" in the RooAbsOptTestStatistic; // framework, it doesn't do any actual computation and no initialization is; // needed. It would not even work, because _funcObsSet would be a nullptr.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooXYChi2Var.cxx:11,test,tests,11,roofit/roofitcore/src/RooXYChi2Var.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooXYChi2Var.cxx,1,['test'],['tests']
Testability,"// If this type test is only used by llvm.assume instructions, it; // was used for whole program devirtualization, and is being kept; // for use by other optimization passes. We do not need or want to; // lower it here. We also don't want to rewrite any associated globals; // unnecessarily. These will be removed by a subsequent LTT invocation; // with the DropTypeTests flag set.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp:16,test,test,16,interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp,1,['test'],['test']
Testability,// If unswitching turned the terminator into an unconditional branch then; // we can continue. The unswitching logic specifically works to fold any; // cases it can into an unconditional branch to make it easier to; // recognize here.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp:111,log,logic,111,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp,1,['log'],['logic']
Testability,"// If we already know about CFError, test it directly.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp:37,test,test,37,interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,1,['test'],['test']
Testability,"// If we already know that the call has hidden LTO visibility, emit; // @llvm.type.test(). Otherwise emit @llvm.public.type.test(), which WPD; // will convert to @llvm.type.test() if we assert at link time that we have; // whole program visibility.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp:83,test,test,83,interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp,4,"['assert', 'test']","['assert', 'test']"
Testability,// If we annotated then the current token should not still be ::; // FIXME we may want to also check for tok::annot_typename but; // currently don't have a test case.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseTentative.cpp:156,test,test,156,interpreter/llvm-project/clang/lib/Parse/ParseTentative.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseTentative.cpp,1,['test'],['test']
Testability,"// If we are comparing (and (shr X, C, Mask) with 0, emit a BEXTR followed; // by a test instruction. The test should be removed later by; // analyzeCompare if we are using only the zero flag.; // TODO: Should we check the users and use the BEXTR flags directly?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp:84,test,test,84,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,2,['test'],['test']
Testability,"// If we are composing subreg, bail out.; // Same remark as getNextSourceFromRegSequence.; // I.e., this may be turned into an assert.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp:127,assert,assert,127,interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp,1,['assert'],['assert']
Testability,"// If we are composing subregs, bail out.; // The case we are checking is Def.<subreg> = REG_SEQUENCE.; // This should almost never happen as the SSA property is tracked at; // the register level (as opposed to the subreg level).; // I.e.,; // Def.sub0 =; // Def.sub1 =; // is a valid SSA representation for Def.sub0 and Def.sub1, but not for; // Def. Thus, it must not be generated.; // However, some code could theoretically generates a single; // Def.sub0 (i.e, not defining the other subregs) and we would; // have this case.; // If we can ascertain (or force) that this never happens, we could; // turn that into an assertion.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp:621,assert,assertion,621,interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp,1,['assert'],['assertion']
Testability,"// If we are doing an AND and testing against zero, then the CMP; // will not be generated. The AND (or BIT) will generate the condition codes,; // but they are different from CMP.; // FIXME: since we're doing a post-processing, use a pseudoinstr here, so; // lowering & isel wouldn't diverge.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/MSP430/MSP430ISelLowering.cpp:30,test,testing,30,interpreter/llvm-project/llvm/lib/Target/MSP430/MSP430ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/MSP430/MSP430ISelLowering.cpp,1,['test'],['testing']
Testability,"// If we are replacing shifted-in high zero bits with sign bits, convert; // the logic shift to arithmetic shift and eliminate the cast to; // intermediate type:; // sext (trunc (lshr Y, C)) --> sext/trunc (ashr Y, C)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp:81,log,logic,81,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp,1,['log'],['logic']
Testability,"// If we are returning a field of the allocated struct or an array element,; // the callee could still free the memory.; // TODO: This logic should be a part of generic symbol escape callback.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/MallocChecker.cpp:135,log,logic,135,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/MallocChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/MallocChecker.cpp,1,['log'],['logic']
Testability,// If we are running with -verify a reported has to be returned as unsuccess.; // This is relevant especially for the test suite.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-repl/ClangRepl.cpp:118,test,test,118,interpreter/llvm-project/clang/tools/clang-repl/ClangRepl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-repl/ClangRepl.cpp,1,['test'],['test']
Testability,"// If we are running with -verify a reported has to be returned as unsuccess.; // This is relevant especially for the test suite.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/driver/cling.cpp:118,test,test,118,interpreter/cling/tools/driver/cling.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/driver/cling.cpp,1,['test'],['test']
Testability,"// If we are stress testing VPlan builds, do not attempt to generate vector; // code. Masked vector code generation support will follow soon.; // Also, do not attempt to vectorize if no vector code will be produced.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:20,test,testing,20,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,1,['test'],['testing']
Testability,"// If we are supporting bundling/unbundling and the current action is an; // input action of non-source file, we replace the host action by the; // unbundling action. The bundler tool has the logic to detect if an input; // is a bundle or not and if the input is not a bundle it assumes it is a; // host file. Therefore it is safe to create an unbundling action even if; // the input is not a bundle.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:192,log,logic,192,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp,1,['log'],['logic']
Testability,"// If we are testing for all-bits-clear, we might be able to do that with; // less shifting since bit-order does not matter.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:13,test,testing,13,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,1,['test'],['testing']
Testability,"// If we are testing the intersection of 2 select-of-nonzero-constants with no; // common bits set, it's the same as checking if exactly one select condition; // is set:; // ((A ? TC : FC) & (B ? TC : FC)) == 0 --> xor A, B; // ((A ? TC : FC) & (B ? TC : FC)) != 0 --> not(xor A, B); // TODO: Generalize for non-constant values.; // TODO: Handle signed/unsigned predicates.; // TODO: Handle other bitwise logic connectors.; // TODO: Extend to handle a non-zero compare constant.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp:13,test,testing,13,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,2,"['log', 'test']","['logic', 'testing']"
Testability,"// If we are zero-extending the result of a logical operation on i1; // values, we can keep the values in GPRs.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp:44,log,logical,44,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,1,['log'],['logical']
Testability,"// If we aren't ignoring missing entries, assert that something happened.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/ValueMapper.cpp:42,assert,assert,42,interpreter/llvm-project/llvm/lib/Transforms/Utils/ValueMapper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/ValueMapper.cpp,2,['assert'],['assert']
Testability,"// If we can already prove the asserted alignment in the context of the; // caller, then don't bother inserting the assumption.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/InlineFunction.cpp:31,assert,asserted,31,interpreter/llvm-project/llvm/lib/Transforms/Utils/InlineFunction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/InlineFunction.cpp,1,['assert'],['asserted']
Testability,"// If we can not materialize in immediate field for fmov, check if the; // value can be encoded as the immediate operand of a logical instruction.; // The immediate value will be created with either MOVZ, MOVN, or ORR.; // TODO: fmov h0, w0 is also legal, however we don't have an isel pattern to; // generate that fmov.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:126,log,logical,126,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['log'],['logical']
Testability,"// If we can prove that; // (**) |Dist| > BackedgeTakenCount * Step; // where Step is the absolute stride of the memory accesses in bytes,; // then there is no dependence.; //; // Rationale:; // We basically want to check if the absolute distance (|Dist/Step|); // is >= the loop iteration count (or > BackedgeTakenCount).; // This is equivalent to the Strong SIV Test (Practical Dependence Testing,; // Section 4.2.1); Note, that for vectorization it is sufficient to prove; // that the dependence distance is >= VF; This is checked elsewhere.; // But in some cases we can prune dependence distances early, and; // even before selecting the VF, and without a runtime test, by comparing; // the distance against the loop iteration count. Since the vectorized code; // will be executed only if LoopCount >= VF, proving distance >= LoopCount; // also guarantees that distance >= VF.; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp:364,Test,Test,364,interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,3,"['Test', 'test']","['Test', 'Testing', 'test']"
Testability,"// If we can still promote the PHI nodes after this gauntlet of tests,; // do all of the PHI's now.; // Move all 'aggressive' instructions, which are defined in the; // conditional parts of the if's up to the dominating block.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp:64,test,tests,64,interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp,1,['test'],['tests']
Testability,"// If we come up with an answer which seems sane, use it; otherwise,; // just point at the __asm keyword.; // FIXME: Assert the answer is sane once we handle .macro correctly.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseStmtAsm.cpp:117,Assert,Assert,117,interpreter/llvm-project/clang/lib/Parse/ParseStmtAsm.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseStmtAsm.cpp,1,['Assert'],['Assert']
Testability,"// If we didn't reflow into the next line, the only space to consider is; // the next logical line. Reset our state to match the start of the next; // line.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/ContinuationIndenter.cpp:86,log,logical,86,interpreter/llvm-project/clang/lib/Format/ContinuationIndenter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/ContinuationIndenter.cpp,1,['log'],['logical']
Testability,"// If we discovered any decl or stmt attributes to test for, generate the; // predicates for them now.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp:51,test,test,51,interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp,1,['test'],['test']
Testability,"// If we do not need the low bit, try to convert bool math to logic:; // add iN (zext i1 X), (sext i1 Y) --> sext (~X & Y) to iN",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp:62,log,logic,62,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp,1,['log'],['logic']
Testability,"// If we don't already have an exit stub for this non-extracted; // destination, create one now!",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/CodeExtractor.cpp:36,stub,stub,36,interpreter/llvm-project/llvm/lib/Transforms/Utils/CodeExtractor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/CodeExtractor.cpp,1,['stub'],['stub']
Testability,"// If we don't know which one comes first, we can't perform this test.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CStringChecker.cpp:65,test,test,65,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CStringChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CStringChecker.cpp,1,['test'],['test']
Testability,"// If we don't manage to finish parsing, create CompilerInstance components; // anyway so that the test will see an empty AST instead of crashing.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Testing/TestAST.cpp:99,test,test,99,interpreter/llvm-project/clang/lib/Testing/TestAST.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Testing/TestAST.cpp,1,['test'],['test']
Testability,"// If we during isel used a load-and-test as a compare with 0, the; // def operand is dead.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZElimCompare.cpp:37,test,test,37,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZElimCompare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZElimCompare.cpp,1,['test'],['test']
Testability,"// If we ever directly evaluate global DeclStmts, this assertion will be; // invalid, but this still seems preferable to silently accepting an; // initialization that may be for a path-sensitive variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporterVisitors.cpp:55,assert,assertion,55,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporterVisitors.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporterVisitors.cpp,1,['assert'],['assertion']
Testability,"// If we found a constructor that chains to a constructor for a virtual; // base, we should directly call that virtual base constructor instead.; // FIXME: This logic belongs in Sema.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:161,log,logic,161,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,1,['log'],['logic']
Testability,"// If we found a reflow split and have added a new break before the next; // line, we are going to remove the line break at the start of the next; // logical line. For example, here we'll add a new line break after; // 'text', and subsequently delete the line break between 'that' and; // 'reflows'.; // // some text that; // // reflows; // ->; // // some text; // // that reflows; // When adding the line break, we also added the penalty for it, so we; // need to subtract that penalty again when we remove the line break due; // to reflowing.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/ContinuationIndenter.cpp:150,log,logical,150,interpreter/llvm-project/clang/lib/Format/ContinuationIndenter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/ContinuationIndenter.cpp,1,['log'],['logical']
Testability,"// If we found out that we need to emit more decls, do that recursively.; // This has the advantage that the decls are emitted in a DFS and related; // ones are close together, which is convenient for testing.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:201,test,testing,201,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,1,['test'],['testing']
Testability,"// If we get a class name containing lambda, we cannot parse it and we; // can exit early.; // FIXME: This works around a bug when we are instantiating a template; // make_unique and the substitution fails. Seen in most of the dataframe; // tests.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TCling.cxx:241,test,tests,241,core/metacling/src/TCling.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TCling.cxx,1,['test'],['tests']
Testability,"// If we have (AssertZext (truncate (AssertSext X, iX)), iY) and Y is smaller; // than X. Just move the AssertZext in front of the truncate and drop the; // AssertSExt.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:15,Assert,AssertZext,15,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,4,['Assert'],"['AssertSExt', 'AssertSext', 'AssertZext']"
Testability,"// If we have AVX, create 1 blendv instead of 3 logic instructions.; // Blendv was introduced with SSE 4.1, but the 2 register form implicitly; // uses XMM0 as the selection register. That may need just as many; // instructions as the AND/ANDN/OR sequence due to register moves, so; // don't bother.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FastISel.cpp:48,log,logic,48,interpreter/llvm-project/llvm/lib/Target/X86/X86FastISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FastISel.cpp,1,['log'],['logic']
Testability,"// If we have AVX, we can use a variable vector select (VBLENDV) instead; // of 3 logic instructions for size savings and potentially speed.; // Unfortunately, there is no scalar form of VBLENDV.; // If either operand is a +0.0 constant, don't try this. We can expect to; // optimize away at least one of the logic instructions later in that; // case, so that sequence would be faster than a variable blend.; // BLENDV was introduced with SSE 4.1, but the 2 register form implicitly; // uses XMM0 as the selection register. That may need just as many; // instructions as the AND/ANDN/OR sequence due to register moves, so; // don't bother.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:82,log,logic,82,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,2,['log'],['logic']
Testability,// If we have a DominatorTree then do a precise test.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp:48,test,test,48,interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,1,['test'],['test']
Testability,// If we have a branch that is not an external relocation entry then; // return 0 so the code in tryAddingSymbolicOperand() can use the; // SymbolLookUp call back with the branch target address to look up the; // symbol and possibility add an annotation for a symbol stub.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp:267,stub,stub,267,interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp,1,['stub'],['stub']
Testability,// If we have a constant logical shift that's only used in a comparison; // against zero turn it into an equivalent AND. This allows turning it into; // a TEST instruction later.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/M68kISelLowering.cpp:25,log,logical,25,interpreter/llvm-project/llvm/lib/Target/M68k/M68kISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/M68kISelLowering.cpp,4,"['TEST', 'log']","['TEST', 'logical']"
Testability,"// If we have a possible prototype for the function which is a user-; // visible declaration, we already tested that it has no prototype.; // This will change behavior in C23. This gets a warning rather than a; // note because it's the same behavior-changing problem as with the; // definition.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:105,test,tested,105,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['test'],['tested']
Testability,"// If we have a stub size spec, we must have a sectiontype of S_SYMBOL_STUBS.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCSectionMachO.cpp:16,stub,stub,16,interpreter/llvm-project/llvm/lib/MC/MCSectionMachO.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCSectionMachO.cpp,1,['stub'],['stub']
Testability,"// If we have a valid (non-zero) ID, see if the logical is already cached.; // If it is not, try to create a direct renderer object.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScenePad.cxx:48,log,logical,48,graf3d/gl/src/TGLScenePad.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScenePad.cxx,1,['log'],['logical']
Testability,"// If we have a xor as the branch input to this block, and we know that the; // LHS or RHS of the xor in any predecessor is true/false, then we can clone; // the condition into the predecessor and fix that value to true, saving some; // logical ops on that path and encouraging other paths to simplify.; //; // This copies something like this:; //; // BB:; // %X = phi i1 [1], [%X']; // %Y = icmp eq i32 %A, %B; // %Z = xor i1 %X, %Y; // br i1 %Z, ...; //; // Into:; // BB':; // %Y = icmp ne i32 %A, %B; // br i1 %Y, ...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/JumpThreading.cpp:237,log,logical,237,interpreter/llvm-project/llvm/lib/Transforms/Scalar/JumpThreading.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/JumpThreading.cpp,1,['log'],['logical']
Testability,"// If we have an integer constant expression, we need to *evaluate* it and; // test for the value 0.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Expr.cpp:79,test,test,79,interpreter/llvm-project/clang/lib/AST/Expr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Expr.cpp,1,['test'],['test']
Testability,"// If we have an opposite shift by the same amount, we may be able to; // reorder binops and shifts to eliminate math/logic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineShifts.cpp:118,log,logic,118,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineShifts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineShifts.cpp,1,['log'],['logic']
Testability,"// If we have physical we should have logical cached, too.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScenePad.cxx:38,log,logical,38,graf3d/gl/src/TGLScenePad.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScenePad.cxx,1,['log'],['logical']
Testability,"// If we keep it in the safe module, then delete it in the test module",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/ExtractFunction.cpp:59,test,test,59,interpreter/llvm-project/llvm/tools/bugpoint/ExtractFunction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/ExtractFunction.cpp,1,['test'],['test']
Testability,"// If we merge into a sub-register of a larger class (test above),; // update SubReg.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp:54,test,test,54,interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp,1,['test'],['test']
Testability,"// If we only have implicit uses, we won't be able to fold that.; // Moreover, TargetInstrInfo::foldMemoryOperand will assert if we try!",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/InlineSpiller.cpp:119,assert,assert,119,interpreter/llvm-project/llvm/lib/CodeGen/InlineSpiller.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/InlineSpiller.cpp,1,['assert'],['assert']
Testability,"// If we optimize for code size, try to move the call to free before the null; // test so that simplify cfg can remove the empty block and dead code; // elimination the branch. I.e., helps to turn something like:; // if (foo) free(foo);; // into; // free(foo);; //; // Note that we can only do this for 'free' and not for any flavor of; // 'operator delete'; there is no 'operator delete' symbol for which we are; // permitted to invent a call, even if we're passing in a null pointer.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp:82,test,test,82,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp,1,['test'],['test']
Testability,"// If we pass all the checks, it's safe to remove the PTEST and use the flags; // as they are prior to PTEST. Sometimes this requires the tested PTEST; // operand to be replaced with an equivalent instruction that also sets the; // flags.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp:138,test,tested,138,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,1,['test'],['tested']
Testability,"// If we print assembly, we can't separate .file entries according to; // compile units. Thus all files will belong to the default compile unit.; // FIXME: add a better feature test than hasRawTextSupport. Even better,; // extend .file to support this.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfCompileUnit.cpp:177,test,test,177,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfCompileUnit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfCompileUnit.cpp,1,['test'],['test']
Testability,"// If we reached here with a non-empty index file name, then the index; // file was empty and we are not performing ThinLTO backend compilation; // (used in testing in a distributed build environment).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp:157,test,testing,157,interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp,1,['test'],['testing']
Testability,"// If we reached the end of the loop without connecting to a valid endpoint,; // dump the last error that was logged in socket() or connect().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp:110,log,logged,110,interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp,1,['log'],['logged']
Testability,// If we reduced the testcase replace it,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.cpp:21,test,testcase,21,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.cpp,1,['test'],['testcase']
Testability,"// If we run into an instruction we can't fold across, discard; // the load candidates. Note: We might be able to fold *into* this; // instruction, so this needs to be after the folding logic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp:186,log,logic,186,interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp,1,['log'],['logic']
Testability,"// If we subtract two pointers with different pointer bases, bail.; // Eventually, we're going to add an assertion to getMulExpr that we; // can't multiply by a pointer.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp:105,assert,assertion,105,interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,1,['assert'],['assertion']
Testability,"// If we were able to compute an unfolded reg class, any failure here; // is just a programming error so just assert.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86SpeculativeLoadHardening.cpp:110,assert,assert,110,interpreter/llvm-project/llvm/lib/Target/X86/X86SpeculativeLoadHardening.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86SpeculativeLoadHardening.cpp,1,['assert'],['assert']
Testability,"// If we were able to eliminate all unsafe uses for a type checked load,; // eliminate the associated type tests by replacing them with true.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/WholeProgramDevirt.cpp:107,test,tests,107,interpreter/llvm-project/llvm/lib/Transforms/IPO/WholeProgramDevirt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/WholeProgramDevirt.cpp,1,['test'],['tests']
Testability,"// If we were started by init (process 1) from the /etc/inittab file; // there's no need to detach.; // This test is unreliable due to an unavoidable ambiguity; // if the process is started by some other process and orphaned; // (i.e. if the parent process terminates before we are started).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/daemon.cxx:109,test,test,109,net/rpdutils/src/daemon.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/daemon.cxx,1,['test'],['test']
Testability,"// If we'll need a fixup FMOV, don't bother. Testing has shown that this; // happens infrequently and when it does it has at least a 50% chance of; // slowing code down instead of speeding it up.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp:45,Test,Testing,45,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp,1,['Test'],['Testing']
Testability,"// If we're asserting, then fire off an assertion.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/BasicBlock.cpp:12,assert,asserting,12,interpreter/llvm-project/llvm/lib/IR/BasicBlock.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/BasicBlock.cpp,2,['assert'],"['asserting', 'assertion']"
Testability,"// If we're extracting from a avx512 bool vector and comparing against zero,; // then try to just bitcast the vector to an integer to use TEST/BT directly.; // (and (extract_elt (kshiftr vXi1, C), 0), 1) -> (and (bc vXi1), 1<<C)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:138,TEST,TEST,138,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['TEST'],['TEST']
Testability,"// If we're here post-legalization or the logic op type is not i1, the logic; // op type must match a setcc result type. Also, all folds require new; // operations on the left and right operands, so those types must match.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:42,log,logic,42,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,2,['log'],['logic']
Testability,"// If we're in MS compatibility mode and the macro being defined is the; // assert macro, implicitly add a macro definition for static_assert to work; // around their broken assert.h header file in C. Only do so if there isn't; // already a static_assert macro defined.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/PPDirectives.cpp:76,assert,assert,76,interpreter/llvm-project/clang/lib/Lex/PPDirectives.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/PPDirectives.cpp,2,['assert'],['assert']
Testability,"// If we're in the right place, emit the bit test header right now.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/IRTranslator.cpp:45,test,test,45,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/IRTranslator.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/IRTranslator.cpp,2,['test'],['test']
Testability,"// If we're loading/storing from an alloca, align it if possible.; //; // FIXME: We eagerly upgrade the alignment, regardless of whether TTI; // tells us this is beneficial. This feels a bit odd, but it matches; // existing tests. This isn't *so* bad, because at most we align to 4; // bytes (current value of StackAdjustedAlignment).; //; // FIXME: We will upgrade the alignment of the alloca even if it turns out; // we can't vectorize for some other reason.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoadStoreVectorizer.cpp:224,test,tests,224,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoadStoreVectorizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoadStoreVectorizer.cpp,1,['test'],['tests']
Testability,"// If we're narrowing a shift, the shift amount must be safe (less than the; // width) in the narrower type. If the shift amount is greater, instsimplify; // usually handles that case, but we can't guarantee/assert it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp:208,assert,assert,208,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,1,['assert'],['assert']
Testability,"// If we're testing X < 0, then this compare isn't needed - just use X!; // FIXME: We're limiting to integer types here, but this should also work; // if we don't care about FP signed-zero. The use of SETLT with FP means; // that we don't care about NaNs.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:12,test,testing,12,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,2,['test'],['testing']
Testability,"// If we're testing a constant value against the result of a three way; // comparison, the result can be expressed directly in terms of the; // original values being compared. Note: We could possibly be more; // aggressive here and remove the hasOneUse test. The original select is; // really likely to simplify or sink when we remove a test of the result.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp:12,test,testing,12,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,3,['test'],"['test', 'testing']"
Testability,"// If we're trying to use the 'test and set' form of the intrinsic, we need; // to replace a conditional branch that is controlling entry to the loop. It; // is likely (guaranteed?) that the preheader has an unconditional branch to; // the loop header, so also check if it has a single predecessor.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/HardwareLoops.cpp:31,test,test,31,interpreter/llvm-project/llvm/lib/CodeGen/HardwareLoops.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/HardwareLoops.cpp,1,['test'],['test']
Testability,"// If we've inlined the constructor, then DstEvaluated would be empty.; // In this case we still want a sink, which could be implemented; // in processCallExit. But we don't have that implemented at the moment,; // so if you hit this assertion, see if you can avoid inlining; // the respective constructor when analyzer-config cfg-temporary-dtors; // is set to false.; // Otherwise there's nothing wrong with inlining such constructor.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngineCXX.cpp:234,assert,assertion,234,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngineCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngineCXX.cpp,1,['assert'],['assertion']
Testability,"// If we've split on a CR logical that is fed by a CR logical,; // recompute the source CR logical as it may be usable for splitting.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCReduceCRLogicals.cpp:26,log,logical,26,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCReduceCRLogicals.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCReduceCRLogicals.cpp,3,['log'],['logical']
Testability,"// If yes, list node eligible for caching, if not test nodes one level down",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:50,test,test,50,roofit/roofitcore/src/RooAbsArg.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx,1,['test'],['test']
Testability,"// If you hit this assertion, please remove it and adjust; // `getOutliningTypeImpl` for your target appropriately if necessary.; // Adding the assertion back to other supported architectures; // would be nice too :)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TargetInstrInfo.cpp:19,assert,assertion,19,interpreter/llvm-project/llvm/lib/CodeGen/TargetInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TargetInstrInfo.cpp,2,['assert'],['assertion']
Testability,// Ignore a comparison with zero because that gets special treatment in; // EmitTest(). But make an exception for the special case of a pair of; // logically-combined vector-sized operands compared to zero. This pattern may; // be generated by the memcmp expansion pass with oversized integer compares; // (see PR33325).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:148,log,logically-combined,148,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['log'],['logically-combined']
Testability,"// Ignore cases in which the currently-examined value could come from; // a basic block terminated with an EHPad. This checks all incoming; // blocks of the phi node since it is possible that the same incoming; // value comes from multiple basic blocks, only some of which may end; // in an EHPad. If any of them do, a subsequent rewrite attempt by this; // pass would try to insert instructions into an EHPad, hitting an; // assertion.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp:426,assert,assertion,426,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,1,['assert'],['assertion']
Testability,// Ignore checking string literals that are in logical and operators.; // This is a common pattern for asserts.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp:47,log,logical,47,interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,2,"['assert', 'log']","['asserts', 'logical']"
Testability,"// Ignore legacy tests if legacy backend is not available",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/VectorisedPDFTests.h:17,test,tests,17,roofit/roofit/test/vectorisedPDFs/VectorisedPDFTests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/VectorisedPDFTests.h,1,['test'],['tests']
Testability,"// Ignore scan requests that start before the instance start.; // This assumes that scans never span that boundary. The boundary; // isn't the true start of the ivars, because in the fragile-ARC case; // it's rounded up to word alignment, but the test above should leave; // us ignoring that possibility.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:247,test,test,247,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,1,['test'],['test']
Testability,"// Implement a polynomial. Value ranges are chosen to keep it positive.; // Note that even though the parameters are constant for the fit, they are still; // varied within their ranges when testing the function at random parameter points.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/testNestedPDFs.cxx:190,test,testing,190,roofit/roofit/test/vectorisedPDFs/testNestedPDFs.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/testNestedPDFs.cxx,1,['test'],['testing']
Testability,"// Implementation note: We don't bake a simple std::pair<> here as it requires; // significantly more effort to parse. A simple test with a large array of; // struct-pairs (N=100000) took clang-10 6s to parse. The same array of; // std::pair<uint64_t, uint64_t> took 242s. Instead we allow the user to; // define the pair type.; //; // FIXME: It may make sense to emit these as ULEB sequences instead of; // pairs of uint64_t.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DFAEmitter.cpp:128,test,test,128,interpreter/llvm-project/llvm/utils/TableGen/DFAEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DFAEmitter.cpp,1,['test'],['test']
Testability,"// Implementation notes:; // 1) LOCK prefix creates a full read/write reordering barrier for memory; // operations issued by the current processor. As such, the location; // referenced is not relevant for the ordering properties of the instruction.; // See: Intel® 64 and IA-32 ArchitecturesSoftware Developer’s Manual,; // 8.2.3.9 Loads and Stores Are Not Reordered with Locked Instructions; // 2) Using an immediate operand appears to be the best encoding choice; // here since it doesn't require an extra register.; // 3) OR appears to be very slightly faster than ADD. (Though, the difference; // is small enough it might just be measurement noise.); // 4) When choosing offsets, there are several contributing factors:; // a) If there's no redzone, we default to TOS. (We could allocate a cache; // line aligned stack object to improve this case.); // b) To minimize our chances of introducing a false dependence, we prefer; // to offset the stack usage from TOS slightly.; // c) To minimize concerns about cross thread stack usage - in particular,; // the idiomatic MyThreadPool.run([&StackVars]() {...}) pattern which; // captures state in the TOS frame and accesses it from many threads -; // we want to use an offset such that the offset is in a distinct cache; // line from the TOS frame.; //; // For a general discussion of the tradeoffs and benchmark results, see:; // https://shipilev.net/blog/2014/on-the-fence-with-dependencies/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:1353,benchmark,benchmark,1353,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['benchmark'],['benchmark']
Testability,"// Implementation of Fourier–Motzkin elimination, with some tricks from the; // paper Pugh, William. ""The Omega test: a fast and practical integer; // programming algorithm for dependence; // analysis.""; // Supercomputing'91: Proceedings of the 1991 ACM/; // IEEE conference on Supercomputing. IEEE, 1991.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ConstraintSystem.cpp:112,test,test,112,interpreter/llvm-project/llvm/lib/Analysis/ConstraintSystem.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ConstraintSystem.cpp,1,['test'],['test']
Testability,// Implementation restriction for faulting_op insertion; // TODO: This could be relaxed if we find a test case which warrants it.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ImplicitNullChecks.cpp:101,test,test,101,interpreter/llvm-project/llvm/lib/CodeGen/ImplicitNullChecks.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ImplicitNullChecks.cpp,1,['test'],['test']
Testability,// Implemented to verify test case assertions in; // tests/codegen/msp430/shift-amount-threshold-b.ll,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/MSP430/MSP430ISelLowering.cpp:25,test,test,25,interpreter/llvm-project/llvm/lib/Target/MSP430/MSP430ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/MSP430/MSP430ISelLowering.cpp,3,"['assert', 'test']","['assertions', 'test', 'tests']"
Testability,"// Implements the hardware dispatch logic.; //; // This class is responsible for the dispatch stage, in which instructions are; // dispatched in groups to the Scheduler. An instruction can be dispatched if; // the following conditions are met:; // 1) There are enough entries in the reorder buffer (see class; // RetireControlUnit) to write the opcodes associated with the instruction.; // 2) There are enough physical registers to rename output register operands.; // 3) There are enough entries available in the used buffered resource(s).; //; // The number of micro opcodes that can be dispatched in one cycle is limited by; // the value of field 'DispatchWidth'. A ""dynamic dispatch stall"" occurs when; // processor resources are not available. Dispatch stall events are counted; // during the entire execution of the code, and displayed by the performance; // report when flag '-dispatch-stats' is specified.; //; // If the number of micro opcodes exceedes DispatchWidth, then the instruction; // is dispatched in multiple cycles.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/DispatchStage.h:36,log,logic,36,interpreter/llvm-project/llvm/include/llvm/MCA/Stages/DispatchStage.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/DispatchStage.h,1,['log'],['logic']
Testability,"// Implicitly tests ROOT-8485.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/add.cxx:14,test,tests,14,hist/histv7/test/add.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/add.cxx,1,['test'],['tests']
Testability,"// Important - defines name of openui5 widget; // ""localapp"" prefix will be point on current directory, where script executed; // ""localapp.view.TestPanel"" means file ./view/TestPanel.view.xml will be loaded",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/webgui/panel/webpanel.cxx:145,Test,TestPanel,145,tutorials/webgui/panel/webpanel.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/webgui/panel/webpanel.cxx,2,['Test'],['TestPanel']
Testability,"// In C mode, allow folding as an extension for better compatibility with; // C++ in terms of expressions like static_assert(""test"") or; // static_assert(nullptr).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp:126,test,test,126,interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,1,['test'],['test']
Testability,"// In CL mode, don't error on apparently non-existent linker inputs, because; // they can be influenced by linker flags the clang driver might not; // understand.; // Examples:; // - `clang-cl main.cc ole32.lib` in a non-MSVC shell will make the driver; // module look for an MSVC installation in the registry. (We could ask; // the MSVCToolChain object if it can find `ole32.lib`, but the logic to; // look in the registry might move into lld-link in the future so that; // lld-link invocations in non-MSVC shells just work too.); // - `clang-cl ... /link ...` can pass arbitrary flags to the linker,; // including /libpath:, which is used to find .lib and .obj files.; // So do not diagnose this on the driver level. Rely on the linker diagnosing; // it. (If we don't end up invoking the linker, this means we'll emit a; // ""'linker' input unused [-Wunused-command-line-argument]"" warning instead; // of an error.); //; // Only do this skip after the typo correction step above. `/Brepo` is treated; // as TY_Object, but it's clearly a typo for `/Brepro`. It seems fine to emit; // an error if we have a flag that's within an edit distance of 1 from a; // flag. (Users can use `-Wl,` or `/linker` to launder the flag past the; // driver in the unlikely case they run into this.); //; // Don't do this for inputs that start with a '/', else we'd pass options; // like /libpath: through to the linker silently.; //; // Emitting an error for linker inputs can also cause incorrect diagnostics; // with the gcc driver. The command; // clang -fuse-ld=lld -Wl,--chroot,some/dir /file.o; // will make lld look for some/dir/file.o, while we will diagnose here that; // `/file.o` does not exist. However, configure scripts check if; // `clang /GR-` compiles without error to see if the compiler is cl.exe,; // so we can't downgrade diagnostics for `/GR-` from an error to a warning; // in cc mode. (We can in cl mode because cl.exe itself only warns on; // unknown flags.)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:390,log,logic,390,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp,1,['log'],['logic']
Testability,"// In COFF, most of the defined symbols don't contain the size information.; // Hence, we calculate the ""implicit"" size of symbol by taking the delta of; // offsets of consecutive symbols within a block. We maintain a balanced tree; // set of symbols sorted by offset per each block in order to achieve; // logarithmic time complexity of sorted symbol insertion. Symbol is inserted to; // the set once it's processed in graphifySymbols. In this function, we iterate; // each collected symbol in sorted order and calculate the implicit size.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/JITLink/COFFLinkGraphBuilder.cpp:307,log,logarithmic,307,interpreter/llvm-project/llvm/lib/ExecutionEngine/JITLink/COFFLinkGraphBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/JITLink/COFFLinkGraphBuilder.cpp,1,['log'],['logarithmic']
Testability,"// In ILP32 (x32) mode, pointers are 32 bits and need to be zero-extended to; // 64 bits. Instructions with 32-bit register addresses perform this zero; // extension for us and we can safely ignore the high bits of Offset.; // Instructions with only a 32-bit immediate address do not, though: they; // sign extend instead. This means only address the low 2GB of address space; // is directly addressable, we need indirect addressing for the high 2GB of; // address space.; // TODO: Some of the earlier checks may be relaxed for ILP32 mode as the; // implicit zero extension of instructions would cover up any problem.; // However, we have asserts elsewhere that get triggered if we do, so keep; // the checks for now.; // TODO: We would actually be able to accept these, as well as the same; // addresses in LP64 mode, by adding the EIZ pseudo-register as an operand; // to get an address size override to be emitted. However, this; // pseudo-register is not part of any register class and therefore causes; // MIR verification to fail.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp:639,assert,asserts,639,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,1,['assert'],['asserts']
Testability,"// In LoopDeletion pass Loop can be deleted when ExitingBlocks.size() > 1.; // We obviate multiple ExitingBlocks case for simplicity.; // TODO: If we see testcase with multiple ExitingBlocks can be deleted; // after exit value rewriting, we can enhance the logic here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopUtils.cpp:154,test,testcase,154,interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopUtils.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopUtils.cpp,2,"['log', 'test']","['logic', 'testcase']"
Testability,"// In Microsoft-compatibility mode, single commas from nested macro; // expansions should not be considered as argument separators. We test; // for this with the IgnoredComma token flag.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/PPMacroExpansion.cpp:135,test,test,135,interpreter/llvm-project/clang/lib/Lex/PPMacroExpansion.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/PPMacroExpansion.cpp,1,['test'],['test']
Testability,"// In Microsoft-compatibility mode, we follow MSVC's preprocessing; // behavior by not considering single commas from nested macro; // expansions as argument separators. Set a flag on the token so we can; // test for this later when the macro expansion is processed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/TokenLexer.cpp:208,test,test,208,interpreter/llvm-project/clang/lib/Lex/TokenLexer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/TokenLexer.cpp,1,['test'],['test']
Testability,"// In OpenACC mode, contains a user provided override for the _OPENACC macro.; // This exists so that we can override the macro value and test our incomplete; // implementation on real-world examples.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h:138,test,test,138,interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,1,['test'],['test']
Testability,"// In Verilog the quote is not a character literal.; //; // Make the backtick and double backtick identifiers to match against them; // more easily.; //; // In Verilog an escaped identifier starts with backslash and ends with; // whitespace. Unless that whitespace is an escaped newline. A backslash can; // also begin an escaped newline outside of an escaped identifier. We check; // for that outside of the Regex since we can't use negative lookhead; // assertions. Simply changing the '*' to '+' breaks stuff as the escaped; // identifier may have a length of 0 according to Section A.9.3.; // FIXME: If there is an escaped newline in the middle of an escaped; // identifier, allow for pasting the two lines together, But escaped; // identifiers usually occur only in generated code anyway.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/FormatTokenLexer.cpp:456,assert,assertions,456,interpreter/llvm-project/clang/lib/Format/FormatTokenLexer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/FormatTokenLexer.cpp,1,['assert'],['assertions']
Testability,"// In a PDB, a type index may refer to a type (TPI) or an item ID (IPI).; // In a COFF or PDB (/Z7), the type index always refer to a type (TPI).; // When creating logical elements, we must access the correct element; // table, while searching for a type index.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.h:164,log,logical,164,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.h,1,['log'],['logical']
Testability,"// In addition to the following cases, we can also run into this; // when a macro call had more arguments than expected; in that case,; // the comma and the remaining tokens in the macro call will; // potentially end up in the line when we finish the expansion.; // FIXME: Add the information which arguments are unused, and assert; // one of the cases below plus reconstructed macro argument tokens.; // assert(ClosingParen || TrailingComment || PreviousLevel);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/MacroCallReconstructor.cpp:325,assert,assert,325,interpreter/llvm-project/clang/lib/Format/MacroCallReconstructor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/MacroCallReconstructor.cpp,2,['assert'],['assert']
Testability,"// In assert-less builds, avoid crashing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h:6,assert,assert-less,6,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h,1,['assert'],['assert-less']
Testability,"// In asserts mode, check that the users length matches the data they; // wrote.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h:6,assert,asserts,6,interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h,1,['assert'],['asserts']
Testability,"// In batch mode don't show splash screen, idem for no logo mode,; // in about mode show always splash screen",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootx.cxx:55,log,logo,55,rootx/src/rootx.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootx.cxx,1,['log'],['logo']
Testability,"// In builds with assertions, make sure that we captured everything we; // captured before.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h:18,assert,assertions,18,interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,1,['assert'],['assertions']
Testability,"// In case F is for example ""operator|"" the getName() method below would; // assert.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/WebKit/ASTUtils.h:77,assert,assert,77,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/WebKit/ASTUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/WebKit/ASTUtils.h,1,['assert'],['assert']
Testability,"// In case of deviation, the profiles' content will not work anymore; // try only for testing the statistics",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:86,test,testing,86,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['test'],['testing']
Testability,"// In case of named arguments, the RooFormula will replace the argument names; // with x[0] to x[n]. There are two things that can go wrong if RooFormula is; // not implemented right. First, if there is a variable named ""x"" it should; // only be substituted if the matching substring is not followed by ""["", to not; // replace existing x[i]. Second, variables with integer names like ""0"" should; // only be substituted if the match is not followed by a ""]"", again to avoid; // replacing x[i]. This test checks that these cases are handled correctly.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooFormula.cxx:498,test,test,498,roofit/roofitcore/test/testRooFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooFormula.cxx,1,['test'],['test']
Testability,"// In case of user defined contours and Pad in log scale along Z,; // fContour.fArray doesn't contain the log of the contour whereas it does; // in case of equidistant contours.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:47,log,log,47,hist/hist/src/TH1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx,2,['log'],['log']
Testability,"// In case the new lower limits of h2 axis are 0, it is better to set them to the minimum of; // the data set (which should be >0) to avoid data cut when plotting in log scale.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TSelectorDraw.cxx:166,log,log,166,tree/treeplayer/src/TSelectorDraw.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TSelectorDraw.cxx,2,['log'],['log']
Testability,"// In case there is no available scratch register, we can still read; // from RSP to assert that RSP points to a valid page. The write to RSP; // is also helpful because it verifies that the stack's write; // permissions are intact.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86LoadValueInjectionRetHardening.cpp:85,assert,assert,85,interpreter/llvm-project/llvm/lib/Target/X86/X86LoadValueInjectionRetHardening.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86LoadValueInjectionRetHardening.cpp,1,['assert'],['assert']
Testability,"// In cases of multiple users it seems better to keep the simple; // instruction as they are one cycle faster, and it also helps in cases; // where both inputs share a common node.; // The widening or narrowing is expected to be free. Counting widening; // or narrowing as a saved operation will result in preferring an R*SBG; // over a simple shift/logical instruction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelDAGToDAG.cpp:350,log,logical,350,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelDAGToDAG.cpp,1,['log'],['logical']
Testability,"// In comments below, we write => for implication.; // Calculates the logical AND implication operator.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafetyLogical.cpp:70,log,logical,70,interpreter/llvm-project/clang/lib/Analysis/ThreadSafetyLogical.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafetyLogical.cpp,1,['log'],['logical']
Testability,// In debug builds we also track the parent loop to implement asserts even in; // the face of loop deletion.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h:62,assert,asserts,62,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h,1,['assert'],['asserts']
Testability,"// In debug mode, assert that we've found exactly one gadget.; // This helps us avoid conflicts in .bind() tags.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp:18,assert,assert,18,interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,1,['assert'],['assert']
Testability,// In essence this assert states: the only way two values; // incoming from the same basic block may be different is by; // being different bitcasts of the same value. A cleanup; // that remains TODO is changing findBaseOrBDV to return an; // llvm::Value of the correct type (and still remain pure).; // This will remove the need to add bitcasts.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp:19,assert,assert,19,interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp,1,['assert'],['assert']
Testability,"// In host compilation the kernel is emitted as a stub function, which is; // a helper function for launching the kernel. The instructions in the helper; // function has nothing to do with the source code of the kernel. Do not emit; // debug info for the stub function to avoid confusing the debugger.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp:50,stub,stub,50,interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp,2,['stub'],['stub']
Testability,"// In implementations which use a barrier to achieve release semantics, we can; // delay emitting this barrier until we know a store is actually going to be; // attempted. The cost of this delay is that we need 2 copies of the block; // emitting the load-linked, affecting code size.; //; // Ideally, this logic would be unconditional except for the minsize check; // since in other cases the extra blocks naturally collapse down to the; // minimal loop. Unfortunately, this puts too much stress on later; // optimisations so we avoid emitting the extra logic in those cases too.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AtomicExpandPass.cpp:306,log,logic,306,interpreter/llvm-project/llvm/lib/CodeGen/AtomicExpandPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AtomicExpandPass.cpp,2,['log'],['logic']
Testability,"// In most cases, we don't want to warn if the expression is written in a; // macro body, or if the macro comes from a system header. If the offending; // expression is a call to a function with the warn_unused_result attribute,; // we warn no matter the location. Because of the order in which the various; // checks need to happen, we factor out the macro-related test here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp:366,test,test,366,interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp,1,['test'],['test']
Testability,"// In normal use, ASTUnit's diagnostics should not change unless we reparse.; // Currently they can only change by using the internal testing flag; // '-error-on-deserialized-decl' which will error during deserialization of; // a declaration. What will happen is:; //; // -c-index-test gets a CXTranslationUnit; // -checks the diagnostics, the diagnostics set is lazily created,; // no errors are reported; // -later does an operation, like annotation of tokens, that triggers; // -error-on-deserialized-decl, that will emit a diagnostic error,; // that ASTUnit will catch and add to its stored diagnostics vector.; // -c-index-test wants to check whether an error occurred after performing; // the operation but can only query the lazily created set.; //; // We check here if a new diagnostic was appended since the last time the; // diagnostic set was created, in which case we reset it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexDiagnostic.cpp:134,test,testing,134,interpreter/llvm-project/clang/tools/libclang/CIndexDiagnostic.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexDiagnostic.cpp,3,['test'],"['test', 'testing']"
Testability,// In order for standard assert() macro on linux to work we need to; // provide device-side __assert_fail(),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/__clang_cuda_runtime_wrapper.h:25,assert,assert,25,interpreter/llvm-project/clang/lib/Headers/__clang_cuda_runtime_wrapper.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/__clang_cuda_runtime_wrapper.h,1,['assert'],['assert']
Testability,"// In order not to crash when calling getAnalysis during testing with -run-pass; // we use the default opt level here instead of None, so that the addRequired(); // calls are made in getAnalysisUsage().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/InstructionSelect.cpp:57,test,testing,57,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/InstructionSelect.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/InstructionSelect.cpp,1,['test'],['testing']
Testability,"// In order to create the scopes, the CodeView Reader will:; // = Traverse the TPI/IPI stream (Type visitor):; // Collect forward references, scoped names, type indexes that will represent; // a logical element, strings, line records, linkage names.; // = Traverse the symbols section (Symbol visitor):; // Create the scopes tree and creates the required logical elements, by; // using the collected indexes from the type visitor.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVCodeViewReader.cpp:195,log,logical,195,interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVCodeViewReader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVCodeViewReader.cpp,2,['log'],['logical']
Testability,// In order to easily check the conflicts we need to match each component of; // the expression under test with the components of the expressions that are; // already in the stack.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:102,test,test,102,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['test'],['test']
Testability,"// In order to generate a full logical view, we have to traverse both; // streams TPI and IPI if they are present. The following table gives; // the stream where a specified type is located. If the IPI stream is; // not present, all the types are located in the TPI stream.; //; // TPI Stream:; // LF_POINTER LF_MODIFIER LF_PROCEDURE LF_MFUNCTION; // LF_LABEL LF_ARGLIST LF_FIELDLIST LF_ARRAY; // LF_CLASS LF_STRUCTURE LF_INTERFACE LF_UNION; // LF_ENUM LF_TYPESERVER2 LF_VFTABLE LF_VTSHAPE; // LF_BITFIELD LF_METHODLIST LF_PRECOMP LF_ENDPRECOMP; //; // IPI stream:; // LF_FUNC_ID LF_MFUNC_ID LF_BUILDINFO; // LF_SUBSTR_LIST LF_STRING_ID LF_UDT_SRC_LINE; // LF_UDT_MOD_SRC_LINE",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVCodeViewReader.cpp:31,log,logical,31,interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVCodeViewReader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVCodeViewReader.cpp,1,['log'],['logical']
Testability,// In order to identify the right initializer we need to match the; // declaration used by the mapping logic. In some cases we may get; // OMPCapturedExprDecl that refers to the original declaration.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:103,log,logic,103,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,2,['log'],['logic']
Testability,"// In order to use this index for testing, specifically import testing, we; // need to update any indirect call edges created from SamplePGO, so that they; // point to the correct GUIDs.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp:34,test,testing,34,interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp,2,['test'],['testing']
Testability,"// In principle we don't need dirty flag propagation because the driver; // takes care of deciding which node needs to be re-evaluated. However,; // disabling it also for scalar mode results in very long fitting times; // for specific models (test 14 in stressRooFit), which still needs to be; // understood. TODO.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFit/Evaluator.cxx:243,test,test,243,roofit/roofitcore/src/RooFit/Evaluator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFit/Evaluator.cxx,1,['test'],['test']
Testability,"// In rare cases, there are trivial arithmetic ops in source operands. Sink; // this assert down to source operands so that those arithmetic ops could be; // exposed to the DAG combining.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:85,assert,assert,85,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['assert'],['assert']
Testability,"// In release builds, assume that if there are no direct calls to the new; // function, then there is a ref edge. In debug builds, keep track of; // references to assert that there is actually a ref edge if there is no call; // edge.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LazyCallGraph.cpp:163,assert,assert,163,interpreter/llvm-project/llvm/lib/Analysis/LazyCallGraph.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LazyCallGraph.cpp,1,['assert'],['assert']
Testability,"// In simple words, if an instruction is not in the assumed to _not_; // cause UB, then it is assumed UB (that includes those; // in the KnownUBInsts set). The rest is boilerplate; // is to ensure that it is one of the instructions we test; // for UB.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp:235,test,test,235,interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,1,['test'],['test']
Testability,"// In some frameworks like CMS combine, all constraints are contained in a; // single RooProdPdf, even if the constrained parameters are not used in this; // pdf. The RooFit logic to figure out constrained parameters should however; // now be confused by this, and not strip away these parameters from the list; // of constrained parameters.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx:174,log,logic,174,roofit/roofitcore/test/testTestStatistics.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx,1,['log'],['logic']
Testability,"// In synchronous mode TProof::Collect is terminated by the reception of the; // log file and subsequent submissions are controlled by TProof::IsIdle(), so; // this must be last one to be sent",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServ.cxx:81,log,log,81,proof/proof/src/TProofServ.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServ.cxx,1,['log'],['log']
Testability,"// In the (few) cases where an expression is intentionally; // ""uninterpreted"", `InitExpr` is not associated with a value. There are; // two ways to handle this situation: propagate the status, so that; // uninterpreted initializers result in uninterpreted variables, or; // provide a default value. We choose the latter so that later refinements; // of the variable can be used for reasoning about the surrounding code.; // For this reason, we let this case be handled by the `createValue()`; // call below.; //; // FIXME. If and when we interpret all language cases, change this to; // assert that `InitExpr` is interpreted, rather than supplying a; // default value (assuming we don't update the environment API to return; // references).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/DataflowEnvironment.cpp:588,assert,assert,588,interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/DataflowEnvironment.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/DataflowEnvironment.cpp,1,['assert'],['assert']
Testability,"// In the KnownBits exhaustive tests, we have poison inputs for exact values; // a LOT. If we have a conflict, just return all zeros.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/KnownBits.cpp:31,test,tests,31,interpreter/llvm-project/llvm/lib/Support/KnownBits.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/KnownBits.cpp,1,['test'],['tests']
Testability,"// In the case of CodeView, the MSVC toolset generates a series of typedefs; // that refer to internal runtime structures, that we do not process. Those; // typedefs are marked as 'system'. They have an associated logical type,; // but the underlying type always is null.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Core/LVType.cpp:214,log,logical,214,interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Core/LVType.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Core/LVType.cpp,1,['log'],['logical']
Testability,"// In the case of ObjCForCollectionStmt, it appears twice in a CFG:; //; // (1) inside a basic block, which represents the binding of the; // 'element' variable to a value.; // (2) in a terminator, which represents the branch.; //; // For (1), ExprEngine will bind a value (i.e., 0 or 1) indicating; // whether or not collection contains any more elements. We cannot; // just test to see if the element is nil because a container can; // contain nil elements.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/CoreEngine.cpp:376,test,test,376,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/CoreEngine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/CoreEngine.cpp,1,['test'],['test']
Testability,"// In the case of an if statement, we try to hoist an invoke.; // FIXME: Can we define a safety predicate for CallBr?; // FIXME: Test case llvm/test/Transforms/SimplifyCFG/2009-06-15-InvokeCrash.ll; // removed in 4c923b3b3fd0ac1edebf0603265ca3ba51724937 commit?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp:129,Test,Test,129,interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp,2,"['Test', 'test']","['Test', 'test']"
Testability,"// In the case where the read-in TStreamerInfo does not; // match in the 'current' in memory TStreamerInfo for; // a non foreign class (we can not get here if this is; // a foreign class so we do not need to test it),; // we need to add this one more test since the CINT behaviour; // with enums changed over time, so verify the checksum ignoring; // members of type enum. We also used to not count the //[xyz] comment; // in the checksum, so test for that too.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TStreamerInfo.cxx:208,test,test,208,io/io/src/TStreamerInfo.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TStreamerInfo.cxx,6,['test'],['test']
Testability,"// In the conditional case, things become more complicated. The original; // getValV() method is covering this case with very complicated logic,; // caching multiple new RooFit objects to scale the individual coefficients; // of the RooAddPdf.; //; // However, it's not complicated what we need to do mathematically:; //; // Since:; // 1. p(x, y) = p(x | y) * p(y); // 2. p(y) = Integral of p(x, y) over x; //; // We conclude:; // p(x, y); // p(x | y) = --------------------------; // Integral of p(x, y) over x; //; // What follows is the implementation of this formula in RooFit. By doing; // this here in compileForNormSet(), we don't invoke the old RooAddPdf; // projection caches (note that no conditional pdfs are on the right hand; // side of the equation).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:138,log,logic,138,roofit/roofitcore/src/RooAddPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx,1,['log'],['logic']
Testability,"// In the module inliner, a priority-based worklist is used for calls across; // the entire Module. With this module inliner, the inline order is not; // limited to bottom-up order. More globally scope inline order is enabled.; // Also, the inline deferral logic become unnecessary in this module inliner.; // It is possible to use other priority heuristics, e.g. profile-based; // heuristic.; //; // TODO: Here is a huge amount duplicate code between the module inliner and; // the SCC inliner, which need some refactoring.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/ModuleInliner.cpp:257,log,logic,257,interpreter/llvm-project/llvm/lib/Transforms/IPO/ModuleInliner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/ModuleInliner.cpp,1,['log'],['logic']
Testability,"// In the two cases not handled by SSE compare predicates (SETUEQ/SETONE),; // emit two comparisons and a logic op to tie them together.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:106,log,logic,106,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['log'],['logic']
Testability,"// In theory newer PDBs always have an ID stream, but by saying that we're; // only going to *really* have an ID stream if there is at least one ID; // record, we leave open the opportunity to test older PDBs such as those; // that don't have an ID stream.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/PDB/Native/PDBFileBuilder.cpp:193,test,test,193,interpreter/llvm-project/llvm/lib/DebugInfo/PDB/Native/PDBFileBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/PDB/Native/PDBFileBuilder.cpp,1,['test'],['test']
Testability,"// In theory, there could be other uses of the addend copy before this; // fma. We could deal with this, but that would require additional; // logic below and I suspect it will not occur in any relevant; // situations. Additionally, check whether the copy source is killed; // prior to the fma. In order to replace the addend here with the; // source of the copy, it must still be live here. We can't use; // interval testing for a physical register, so as long as we're; // walking the MIs we may as well test liveness here.; //; // FIXME: There is a case that occurs in practice, like this:; // %9 = COPY %f1; VSSRC:%9; // ...; // %6 = COPY %9; VSSRC:%6,%9; // %7 = COPY %9; VSSRC:%7,%9; // %9<def,tied1> = XSMADDASP %9<tied0>, %1, %4; VSSRC:; // %6<def,tied1> = XSMADDASP %6<tied0>, %1, %2; VSSRC:; // %7<def,tied1> = XSMADDASP %7<tied0>, %1, %3; VSSRC:; // which prevents an otherwise-profitable transformation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCVSXFMAMutate.cpp:143,log,logic,143,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCVSXFMAMutate.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCVSXFMAMutate.cpp,3,"['log', 'test']","['logic', 'test', 'testing']"
Testability,"// In theory, this is combinatorial. In practice, it needs to be bounded; // by a small number of sets for regpressure to be efficient.; // If the assert is hit, we need to implement pruning.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp:147,assert,assert,147,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp,1,['assert'],['assert']
Testability,"// In this test, all friend trees are in the same TChain",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/test/friendinfo.cxx:11,test,test,11,tree/tree/test/friendinfo.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/test/friendinfo.cxx,1,['test'],['test']
Testability,"// In this test, each friend tree is held in a separate `std::unique_ptr<TChain>`",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/test/friendinfo.cxx:11,test,test,11,tree/tree/test/friendinfo.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/test/friendinfo.cxx,1,['test'],['test']
Testability,"// In this test, we only support field hierarchies up to 2 levels",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/ntuple_descriptor.cxx:11,test,test,11,tree/ntuple/v7/test/ntuple_descriptor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/ntuple_descriptor.cxx,1,['test'],['test']
Testability,"// In this test, we setup a model that we know will give evaluation errors, because Minuit will try parameters; // outside of the physical range during line search. Using the error handling mechanism in RooMinimizerFcn and; // MinuitFcnGrad, Minuit should get sent out of this area again.; // Specifically, this test triggers the classic error handling mechanism (logEvalError).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx:11,test,test,11,roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx,3,"['log', 'test']","['logEvalError', 'test']"
Testability,"// In transferCFGBlock(), we ensure that we always have a `Value` for the; // terminator condition, so assert this.; // We consciously assert ourselves instead of asserting via `cast()` so; // that we get a more meaningful line number if the assertion fails.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/TypeErasedDataflowAnalysis.cpp:103,assert,assert,103,interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/TypeErasedDataflowAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/TypeErasedDataflowAnalysis.cpp,4,['assert'],"['assert', 'asserting', 'assertion']"
Testability,// Include DirectX stub instruction info,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/DirectX/MCTargetDesc/DirectXMCTargetDesc.h:19,stub,stub,19,interpreter/llvm-project/llvm/lib/Target/DirectX/MCTargetDesc/DirectXMCTargetDesc.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/DirectX/MCTargetDesc/DirectXMCTargetDesc.h,1,['stub'],['stub']
Testability,// Include DirectX stub register info,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/DirectX/MCTargetDesc/DirectXMCTargetDesc.h:19,stub,stub,19,interpreter/llvm-project/llvm/lib/Target/DirectX/MCTargetDesc/DirectXMCTargetDesc.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/DirectX/MCTargetDesc/DirectXMCTargetDesc.h,1,['stub'],['stub']
Testability,// Include code completion token into the range of the scope otherwise; // when we try to annotate the scope tokens the dangling code completion; // token will cause assertion in; // Preprocessor::AnnotatePreviousCachedTokens.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseExprCXX.cpp:166,assert,assertion,166,interpreter/llvm-project/clang/lib/Parse/ParseExprCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseExprCXX.cpp,1,['assert'],['assertion']
Testability,"// Include files; /** @class HelperOps HelperOps.h Math/HelperOps.h; *; *; * @author Juan PALACIOS; * @date 2006-01-11; *; * Specialised helper classes for binary operators =, +=, -=; * between SMatrices and Expressions with arbitrary representations.; * Specialisations at the moment only for Symmetric LHS and Generic RHS; * and used to throw static assert.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/inc/Math/HelperOps.h:352,assert,assert,352,math/smatrix/inc/Math/HelperOps.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/inc/Math/HelperOps.h,1,['assert'],['assert']
Testability,"// Include visibility from the template parameters and arguments; // only if this is not an explicit instantiation or specialization; // with direct explicit visibility (and note that implicit; // instantiations won't have a direct attribute).; //; // Furthermore, we want to ignore template parameters and arguments; // for an explicit specialization when computing the visibility of a; // member thereof with explicit visibility.; //; // This is a bit complex; let's unpack it.; //; // An explicit class specialization is an independent, top-level; // declaration. As such, if it or any of its members has an; // explicit visibility attribute, that must directly express the; // user's intent, and we should honor it. The same logic applies to; // an explicit instantiation of a member of such a thing.; // Fast path: if this is not an explicit instantiation or; // specialization, we always want to consider template-related; // visibility restrictions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Decl.cpp:729,log,logic,729,interpreter/llvm-project/clang/lib/AST/Decl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Decl.cpp,1,['log'],['logic']
Testability,"// Including a non-transient member in `target` should issue a warning and ignore the rule; thus, `a` remains unchanged; // in the test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/CustomStructLinkDef.h:131,test,test,131,tree/ntuple/v7/test/CustomStructLinkDef.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/CustomStructLinkDef.h,1,['test'],['test']
Testability,"// Incremental test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testTStatistic.cxx:15,test,test,15,math/mathcore/test/testTStatistic.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testTStatistic.cxx,1,['test'],['test']
Testability,// Indices of benchmarks within the cluster.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.h:14,benchmark,benchmarks,14,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.h,1,['benchmark'],['benchmarks']
Testability,"// Inequality test.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/textinput/src/textinput/Color.h:14,test,test,14,core/textinput/src/textinput/Color.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/textinput/src/textinput/Color.h,1,['test'],['test']
Testability,"// Init benchmarking",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TApplicationServer.cxx:8,benchmark,benchmarking,8,net/net/src/TApplicationServer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TApplicationServer.cxx,1,['benchmark'],['benchmarking']
Testability,"// Init should be null. If it were non-null, then the logic above would; // either be defining the function to be an alias or declaring the; // function with the expectation that the definition of the variable; // is elsewhere.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:54,log,logic,54,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,1,['log'],['logic']
Testability,// Initial state of the frame pointer is SP+StackGrowth.; // TODO: Add tests for `cfi_*` directives,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/MCTargetDesc/M68kMCTargetDesc.cpp:71,test,tests,71,interpreter/llvm-project/llvm/lib/Target/M68k/MCTargetDesc/M68kMCTargetDesc.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/MCTargetDesc/M68kMCTargetDesc.cpp,1,['test'],['tests']
Testability,// Initialize a base test vector as 'DontCare'.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp:21,test,test,21,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,1,['test'],['test']
Testability,// Initialize insertion-point logic; we will be restoring in reverse; // order of spill.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCFrameLowering.cpp:30,log,logic,30,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCFrameLowering.cpp,1,['log'],['logic']
Testability,"// Initialize some variables used in the parsing. The using logic is at the; // end.; // For backward compatibility:; // The default value of ConstructorInitializerAllOnOneLineOrOnePerLine was; // false unless BasedOnStyle was Google or Chromium whereas that of; // AllowAllConstructorInitializersOnNextLine was always true, so the; // equivalent default value of PackConstructorInitializers is PCIS_NextLine; // for Google/Chromium or PCIS_BinPack otherwise. If the deprecated options; // had a non-default value while PackConstructorInitializers has a default; // value, set the latter to an equivalent non-default value if needed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/Format.cpp:60,log,logic,60,interpreter/llvm-project/clang/lib/Format/Format.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/Format.cpp,1,['log'],['logic']
Testability,// Initialize test environment,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/llvm-reduce.cpp:14,test,test,14,interpreter/llvm-project/llvm/tools/llvm-reduce/llvm-reduce.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/llvm-reduce.cpp,1,['test'],['test']
Testability,"// Initialize train and test input",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestMinimization.h:24,test,test,24,tmva/tmva/test/DNN/CNN/TestMinimization.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestMinimization.h,1,['test'],['test']
Testability,"// Initialize train and test input; // XTrain = (1 x nSamples x nFeatures); // XTest = (1 x nSamples x nFeatures)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimization.h:24,test,test,24,tmva/tmva/test/DNN/TestOptimization.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimization.h,1,['test'],['test']
Testability,"// Initialize train and test output",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestMinimization.h:24,test,test,24,tmva/tmva/test/DNN/CNN/TestMinimization.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestMinimization.h,1,['test'],['test']
Testability,"// Initialize train and test output; // YTrain = (nSamples x nOutput); // YTest = (nSamples x nOutput)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimization.h:24,test,test,24,tmva/tmva/test/DNN/TestOptimization.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimization.h,1,['test'],['test']
Testability,"// Initialize train and test weights",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestMinimization.h:24,test,test,24,tmva/tmva/test/DNN/CNN/TestMinimization.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestMinimization.h,1,['test'],['test']
Testability,"// Initialize train and test weights; // WTrain = (nSamples x 1); // WTest = (nSamples x 1)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimization.h:24,test,test,24,tmva/tmva/test/DNN/TestOptimization.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimization.h,1,['test'],['test']
Testability,"// Initialized at the start of each test to expect diagnostic messages from TestSupport",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/ntuple_storage_daos.cxx:36,test,test,36,tree/ntuple/v7/test/ntuple_storage_daos.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/ntuple_storage_daos.cxx,2,"['Test', 'test']","['TestSupport', 'test']"
Testability,// InlineSavingsMultiplier overrides per TTI multipliers iff it is; // specified explicitly in command line options. This option is exposed; // for tuning and testing.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InlineCost.cpp:159,test,testing,159,interpreter/llvm-project/llvm/lib/Analysis/InlineCost.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InlineCost.cpp,1,['test'],['testing']
Testability,// InlineSavingsProfitableMultiplier overrides per TTI multipliers iff it is; // specified explicitly in command line options. This option is exposed; // for tuning and testing.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InlineCost.cpp:169,test,testing,169,interpreter/llvm-project/llvm/lib/Analysis/InlineCost.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InlineCost.cpp,1,['test'],['testing']
Testability,"// Input for the ROOT_10615 test. Since the input in not that large, it is hardcoded in the source.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/stabilityTests.cxx:28,test,test,28,roofit/roofit/test/stabilityTests.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/stabilityTests.cxx,1,['test'],['test']
Testability,"// Insert Point; // Copy the 32-bit DSCRValue integer into the GPR InDSCR using LIS and; // ORI, then move to DSCR. If the requested DSCR value is contained; // in a 16-bit signed number, we can emit a single `LI`, but the; // impact of saving one instruction in one function does not warrant; // any additional complexity in the logic here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCPreEmitPeephole.cpp:330,log,logic,330,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCPreEmitPeephole.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCPreEmitPeephole.cpp,1,['log'],['logic']
Testability,// Insert `assertalign` node if there's an alignment.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:11,assert,assertalign,11,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,1,['assert'],['assertalign']
Testability,// Insert a direct test of the saved register.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FlagsCopyLowering.cpp:19,test,test,19,interpreter/llvm-project/llvm/lib/Target/X86/X86FlagsCopyLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FlagsCopyLowering.cpp,3,['test'],['test']
Testability,// Insert a negate op.; // TODO: This isn't guaranteed to replace the sub if there is a logic cone; // that uses it that's not a shift.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp:88,log,logic,88,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,1,['log'],['logic']
Testability,"// Insert calls into the summary index so that the devirtualized targets; // are eligible for import.; // FIXME: Annotate type tests with hotness. For now, mark these as hot; // to better ensure we have the opportunity to inline them.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/WholeProgramDevirt.cpp:127,test,tests,127,interpreter/llvm-project/llvm/lib/Transforms/IPO/WholeProgramDevirt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/WholeProgramDevirt.cpp,1,['test'],['tests']
Testability,"// Insert data into test set",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CvSplit.cxx:20,test,test,20,tmva/tmva/src/CvSplit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CvSplit.cxx,1,['test'],['test']
Testability,"// Insert node ""GP copy globalreg"" before call to function.; //; // R_MIPS_CALL* operators (emitted when non-internal functions are called; // in PIC mode) allow symbols to be resolved via lazy binding.; // The lazy binding stub requires GP to point to the GOT.; // Note that we don't need GP to point to the GOT for indirect calls; // (when R_MIPS_CALL* is not used for the call) because Mips linker generates; // lazy binding stub for a function only when R_MIPS_CALL* are the only relocs; // used for the function (that is, Mips linker doesn't generate lazy binding; // stub for a function whose address is taken in the program).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsISelLowering.cpp:224,stub,stub,224,interpreter/llvm-project/llvm/lib/Target/Mips/MipsISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsISelLowering.cpp,3,['stub'],['stub']
Testability,"// Inserts the specified store SI with the given index Idx to the set of the; // stores. If the store with the same distance is found already - stop; // insertion, try to vectorize already found stores. If some stores from this; // sequence were not vectorized - try to vectorize them with the new store; // later. But this logic is applied only to the stores, that come before the; // previous store with the same distance.; // Example:; // 1. store x, %p; // 2. store y, %p+1; // 3. store z, %p+2; // 4. store a, %p; // 5. store b, %p+3; // - Scan this from the last to first store. The very first bunch of stores is; // {5, {{4, -3}, {2, -2}, {3, -1}, {5, 0}}} (the element in SortedStores; // vector).; // - The next store in the list - #1 - has the same distance from store #5 as; // the store #4.; // - Try to vectorize sequence of stores 4,2,3,5.; // - If all these stores are vectorized - just drop them.; // - If some of them are not vectorized (say, #3 and #5), do extra analysis.; // - Start new stores sequence.; // The new bunch of stores is {1, {1, 0}}.; // - Add the stores from previous sequence, that were not vectorized.; // Here we consider the stores in the reversed order, rather they are used in; // the IR (Stores are reversed already, see vectorizeStoreChains() function).; // Store #3 can be added -> comes after store #4 with the same distance as; // store #1.; // Store #5 cannot be added - comes before store #4.; // This logic allows to improve the compile time, we assume that the stores; // after previous store with the same distance most likely have memory; // dependencies and no need to waste compile time to try to vectorize them.; // - Try to vectorize the sequence {1, {1, 0}, {3, 2}}.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:324,log,logic,324,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,2,['log'],['logic']
Testability,// Install the logical handler.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/AnalysisBasedWarnings.cpp:15,log,logical,15,interpreter/llvm-project/clang/lib/Sema/AnalysisBasedWarnings.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/AnalysisBasedWarnings.cpp,1,['log'],['logical']
Testability,"// Instead of printing each bit value individually, try to group them; // into logical segments, such as sequences of 0 or 1 bits or references; // to consecutive bits (e.g. ""bits 3-5 are same as bits 7-9 of reg xyz"").; // ""Start"" will be the index of the beginning of the most recent segment.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/BitTracker.cpp:79,log,logical,79,interpreter/llvm-project/llvm/lib/Target/Hexagon/BitTracker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/BitTracker.cpp,1,['log'],['logical']
Testability,"// Instead of trying to imitate the folds for and/or, decompose this 'xor'; // into those logic ops. That is, try to turn this into an and-of-icmps; // because we have many folds for that pattern.; //; // This is based on a truth table definition of xor:; // X ^ Y --> (X | Y) & !(X & Y)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp:90,log,logic,90,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,1,['log'],['logic']
Testability,// Instruction lines for a logical scope. These instructions are fetched; // during its merge with the debug lines.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVBinaryReader.h:27,log,logical,27,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVBinaryReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVBinaryReader.h,1,['log'],['logical']
Testability,// Instructions which we do not test since they are; // not TRUE instructions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp:32,test,test,32,interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp,1,['test'],['test']
Testability,"// Instrument pclmul intrinsics.; // These intrinsics operate either on odd or on even elements of the input; // vectors, depending on the constant in the 3rd argument, ignoring the rest.; // Replace the unused elements with copies of the used ones, ex:; // (0, 1, 2, 3) -> (0, 0, 2, 2) (even case); // or; // (0, 1, 2, 3) -> (1, 1, 3, 3) (odd case); // and then apply the usual shadow combining logic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp:396,log,logic,396,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp,1,['log'],['logic']
Testability,"// Int_t jDivi; // TEST",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/foam/src/TFoam.cxx:19,TEST,TEST,19,math/foam/src/TFoam.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/foam/src/TFoam.cxx,1,['TEST'],['TEST']
Testability,"// Int_t nbPnts = nlat*nlong+nup+ndown+ncenter;; // if (TestShapeBit(kGeoRSeg)) nbPnts *= 2;; // Int_t nbSegs = nlat*fNseg + (nlat-1+nup+ndown)*nlong; // outer sphere; // if (TestShapeBit(kGeoRSeg)) nbSegs *= 2; // inner sphere; // if (TestShapeBit(kGeoPhiSeg)) nbSegs += 2*nlat+nup+ndown; // 2 phi planes; // nbSegs += nlong * (2-nup - ndown); // connecting cones; // Int_t nbPols = fNz*fNseg; // outer; // if (TestShapeBit(kGeoRSeg)) nbPols *=2; // inner; // if (TestShapeBit(kGeoPhiSeg)) nbPols += 2*fNz; // 2 phi planes; // nbPols += (2-nup-ndown)*fNseg; // connecting",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoSphere.cxx:56,Test,TestShapeBit,56,geom/geom/src/TGeoSphere.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoSphere.cxx,5,['Test'],['TestShapeBit']
Testability,"// Integer binary math/logic instructions have a third source operand:; // the EFLAGS register. That operand must be both defined here and never; // used; ie, it must be dead. If the EFLAGS operand is live, then we can; // not change anything because rearranging the operands could affect other; // instructions that depend on the exact status flags (zero, sign, etc.); // that are set by using these particular operands with this operation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp:23,log,logic,23,interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp,1,['log'],['logic']
Testability,"// Integral constructor, asserts if Value cannot be represented as intmax_t.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Sequence.h:25,assert,asserts,25,interpreter/llvm-project/llvm/include/llvm/ADT/Sequence.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Sequence.h,1,['assert'],['asserts']
Testability,"// Intentionally ignore the Fatal error due to the shread thread-local storage.; // In this test we need to be 'careful' to not use all those mutex at the same time.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/thread/test/testRWLock.cxx:92,test,test,92,core/thread/test/testRWLock.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/thread/test/testRWLock.cxx,1,['test'],['test']
Testability,"// Interface for a TestStatistic",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/TestStatistic.h:19,Test,TestStatistic,19,roofit/roostats/inc/RooStats/TestStatistic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/TestStatistic.h,1,['Test'],['TestStatistic']
Testability,"// Interface for tools doing hypothesis tests",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestCalculator.h:40,test,tests,40,roofit/roostats/inc/RooStats/HypoTestCalculator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestCalculator.h,1,['test'],['tests']
Testability,// Internal interface for testing purpose only.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfWriter.h:26,test,testing,26,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfWriter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfWriter.h,2,['test'],['testing']
Testability,// Intersect the fast math flags.; // TODO: We can union the fast math flags unless this is a logical select.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp:94,log,logical,94,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,1,['log'],['logical']
Testability,"// Introspect the RHS. If it is a nested logical operation, we recursively; // build the CFG using this function. Otherwise, resort to default; // CFG construction behavior.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp:41,log,logical,41,interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,1,['log'],['logical']
Testability,"// Inversely, if we have a signed greater-than-or-equal comparison to zero,; // we can test if the msb is zero.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp:87,test,test,87,interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp,1,['test'],['test']
Testability,// Is it a vector logical left shift?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:18,log,logical,18,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['log'],['logical']
Testability,// Is it possible to fail two reallocs WITHOUT testing in between?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/MallocChecker.cpp:47,test,testing,47,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/MallocChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/MallocChecker.cpp,1,['test'],['testing']
Testability,"// Is log step enabled?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/inc/TGNumberEntry.h:6,log,log,6,gui/gui/inc/TGNumberEntry.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/inc/TGNumberEntry.h,1,['log'],['log']
Testability,// Is this a logical not? (!x is represented as x == 0.),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/SimpleSValBuilder.cpp:13,log,logical,13,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/SimpleSValBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/SimpleSValBuilder.cpp,1,['log'],['logical']
Testability,"// Is this the first addition of a branch (and we are learning and we are in; // the expected TTree), then prefill the cache. (We expect that in future; // release the Prefill-ing will be the default so we test for that inside the; // LearnPrefill call).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTreeCache.cxx:206,test,test,206,tree/tree/src/TTreeCache.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTreeCache.cxx,1,['test'],['test']
Testability,// Is x[offset2] already not a legal addressing mode? If so then; // reassociating the constants breaks nothing (we test offset2 because; // that's the one we hope to fold into the load or store).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp:116,test,test,116,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,2,['test'],['test']
Testability,"// Issue #12334; // branchobject.root created as; //; // ~~~ {.cpp}; // f = new TFile(""branchobject.root"", ""RECREATE"");; // TTree *t = new TTree(""branchobject"", ""test tree for branchobject.cxx"");; // ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<Double32_t>> lv(1., 2., 3., 4.);; // t->Branch(""lv32"", &lv);; // t->Fill();; // t->Write();; // ~~~",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/test/branchobject.cxx:162,test,test,162,tree/treeplayer/test/branchobject.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/test/branchobject.cxx,1,['test'],['test']
Testability,// Issue load from stub.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FastISel.cpp:19,stub,stub,19,interpreter/llvm-project/llvm/lib/Target/X86/X86FastISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FastISel.cpp,1,['stub'],['stub']
Testability,"// It contains the LVLineDebug elements representing the inlined logical; // lines for the current compile unit, created by parsing the CodeView; // S_INLINESITE symbol annotation data.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVBinaryReader.h:65,log,logical,65,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVBinaryReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVBinaryReader.h,1,['log'],['logical']
Testability,"// It contains the LVLineDebug elements representing the logical lines for; // the current compile unit, created by parsing the debug line section.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVBinaryReader.h:57,log,logical,57,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVBinaryReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVBinaryReader.h,1,['log'],['logical']
Testability,"// It does not work properly! Look, the bins with the same labels; // are different ones and still the tests passes! This is not; // consistent with TH1::Merge()",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:103,test,tests,103,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,6,['test'],['tests']
Testability,"// It is an error to provide a -o option if we are making multiple output; // files. There are exceptions:; //; // IfsMergeJob: when generating interface stubs enabled we want to be able to; // generate the stub file at the same time that we generate the real; // library/a.out. So when a .o, .so, etc are the output, with clang interface; // stubs there will also be a .ifs and .ifso at the same location.; //; // CompileJob of type TY_IFS_CPP: when generating interface stubs is enabled; // and -c is passed, we still want to be able to generate a .ifs file while; // we are also generating .o files. So we allow more than one output file in; // this case as well.; //; // OffloadClass of type TY_Nothing: device-only output will place many outputs; // into a single offloading action. We should count all inputs to the action; // as outputs. Also ignore device-only outputs if we're compiling with; // -fsyntax-only.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:154,stub,stubs,154,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp,4,['stub'],"['stub', 'stubs']"
Testability,"// It is vey likely to have a numerical issue and the point should; // be logically outside one of the shapes",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoBoolNode.cxx:74,log,logically,74,geom/geom/src/TGeoBoolNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoBoolNode.cxx,1,['log'],['logically']
Testability,// It is worth folding logical shift of up to three places.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp:23,log,logical,23,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp,1,['log'],['logical']
Testability,"// It may be useful to separate this logic (of handling operand; // bundles) out to a separate ""policy"" component if this gets crowded.; // Prepend the parent's deoptimization continuation to the newly; // inlined call's deoptimization continuation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/InlineFunction.cpp:37,log,logic,37,interpreter/llvm-project/llvm/lib/Transforms/Utils/InlineFunction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/InlineFunction.cpp,1,['log'],['logic']
Testability,"// It may look like we need key on the whole (L, ExitIfTrue,; // ControlsOnlyExit, AllowPredicates) tuple, but recursive calls to; // computeExitLimitFromCondCached from computeExitLimitFromCondImpl only; // vary the in \c ExitCond and \c ControlsOnlyExit parameters. We remember; // the initial values of the other values to assert our assumption.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h:326,assert,assert,326,interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,1,['assert'],['assert']
Testability,"// It might be that all we need for big-endian support here is to get the loads; // and stores right, but step zero would be finding a way to test it in CI.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3_neon.c:142,test,test,142,interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3_neon.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3_neon.c,1,['test'],['test']
Testability,"// It records the mapping between logical lines representing a debug line; // entry and its address in the text section. It is used to find a line; // giving its exact or closest address. To support comdat functions, all; // addresses for the same section are recorded in the same map.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h:34,log,logical,34,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h,1,['log'],['logical']
Testability,"// It seems SSAA of 2 is still beneficial on retina.; // if (this.canvas.pixelRatio > 1 && this.RQ_SSAA > 1) {; // console.log(""Correcting RQ_SSAA for pixelRatio"", this.canvas.pixelRatio,; // ""from"", this.RQ_SSAA, ""to"", this.RQ_SSAA / this.canvas.pixelRatio);; // this.RQ_SSAA /= this.canvas.pixelRatio;; // }",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/GlViewerRCore.js:123,log,log,123,ui5/eve7/lib/GlViewerRCore.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/GlViewerRCore.js,1,['log'],['log']
Testability,"// It should just have run successfully at this point, no specific results to check.; // This test exists because an empty task_priority_ for a job would cause a segfault; // if we didn't handle it (as we didn't in some previous version).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/test/test_Queue.cxx:94,test,test,94,roofit/multiprocess/test/test_Queue.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/test/test_Queue.cxx,1,['test'],['test']
Testability,"// It should still be possible to run the inliner as a stand-alone SCC pass,; // for test scenarios. In that case, we default to the; // DefaultInlineAdvisor, which doesn't need to keep state between SCC pass; // runs. It also uses just the default InlineParams.; // In this case, we need to use the provided FAM, which is valid for the; // duration of the inliner pass, and thus the lifetime of the owned advisor.; // The one we would get from the MAM can be invalidated as a result of the; // inliner's activity.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/Inliner.cpp:85,test,test,85,interpreter/llvm-project/llvm/lib/Transforms/IPO/Inliner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/Inliner.cpp,1,['test'],['test']
Testability,"// It should still be possible to run the inliner as a stand-alone module; // pass, for test scenarios. In that case, we default to the; // DefaultInlineAdvisor, which doesn't need to keep state between module; // pass runs. It also uses just the default InlineParams. In this case, we; // need to use the provided FAM, which is valid for the duration of the; // inliner pass, and thus the lifetime of the owned advisor. The one we; // would get from the MAM can be invalidated as a result of the inliner's; // activity.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/ModuleInliner.cpp:88,test,test,88,interpreter/llvm-project/llvm/lib/Transforms/IPO/ModuleInliner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/ModuleInliner.cpp,1,['test'],['test']
Testability,"// It used to be possible to just assert L->isLoopSimplifyForm(), however; // with the introduction of indirectbr, there are now cases where it's; // not possible to transform a loop as necessary. We can at least check; // that there is an indirectbr near any time there's trouble.; // Indirectbr can interfere with preheader and unique backedge insertion.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopSimplify.cpp:34,assert,assert,34,interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopSimplify.cpp,1,['assert'],['assert']
Testability,"// It would be incorrect to import an appending linkage variable,; // since it would cause global constructors/destructors to be; // executed multiple times. This should have already been handled; // by linkIfNeeded, and we will assert in shouldLinkFromSource; // if we try to import, so we simply return AppendingLinkage.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/FunctionImportUtils.cpp:229,assert,assert,229,interpreter/llvm-project/llvm/lib/Transforms/Utils/FunctionImportUtils.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/FunctionImportUtils.cpp,1,['assert'],['assert']
Testability,"// It's an error to translate this:; //; // %reg1025 = <sext> %reg1024; // ...; // %reg1026 = SUBREG_TO_REG 0, %reg1024, 4; //; // into this:; //; // %reg1025 = <sext> %reg1024; // ...; // %reg1027 = COPY %reg1025:4; // %reg1026 = SUBREG_TO_REG 0, %reg1027, 4; //; // The problem here is that SUBREG_TO_REG is there to assert that an; // implicit zext occurs. It doesn't insert a zext instruction. If we allow; // the COPY here, it will give us the value after the <sext>, not the; // original value of %reg1024 before <sext>.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp:319,assert,assert,319,interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp,1,['assert'],['assert']
Testability,"// It's important that there are different values for the first (inner); // category such that we can test that the different values are correctly; // picked up from the proto dataset.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooSimultaneous.cxx:102,test,test,102,roofit/roofitcore/test/testRooSimultaneous.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooSimultaneous.cxx,1,['test'],['test']
Testability,"// It's possible that we find a copy from a non-volatile register to the param; // register, which is clobbered in the meantime. Test for clobbered reg unit; // overlaps before completing.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.cpp:129,Test,Test,129,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.cpp,1,['Test'],['Test']
Testability,"// Itanium mangling ABI 5.1.8. Compression:; // Logically, the substitutable components of a mangled name are considered; // left-to-right, components before the composite structure of which they; // are a part. If a component has been encountered before, it is substituted; // as described below. This decision is independent of whether its components; // have been substituted, so an implementation may optimize by considering; // large structures for substitution before their components. If a component; // has not been encountered before, its mangling is identified, and it is; // added to a dictionary of substitution candidates. No entity is added to; // the dictionary twice.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULibFunc.cpp:48,Log,Logically,48,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULibFunc.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULibFunc.cpp,1,['Log'],['Logically']
Testability,"// Iterate over the partitions, replacing with bit-test clusters in-place.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SwitchLoweringUtils.cpp:51,test,test,51,interpreter/llvm-project/llvm/lib/CodeGen/SwitchLoweringUtils.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SwitchLoweringUtils.cpp,1,['test'],['test']
Testability,"// Iterate over the uses of the initial value. If the initial value is used; // in a compare, then we assume this is a range check that ensures the loop; // doesn't underflow. This is not an exact test and should be improved.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonHardwareLoops.cpp:197,test,test,197,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonHardwareLoops.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonHardwareLoops.cpp,1,['test'],['test']
Testability,"// Iterate through the fields setting bitFieldInfo and the Fields array. Also; // locate the ""most appropriate"" storage type. The heuristic for finding the; // storage type isn't necessary, the first (non-0-length-bitfield) field's; // type would work fine and be simpler but would be different than what we've; // been doing and cause lit tests to change.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp:340,test,tests,340,interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp,1,['test'],['tests']
Testability,"// Ivar's can only appear in interfaces, implementations (via synthesized; // properties), and class extensions (via direct declaration, or synthesized; // properties).; //; // FIXME: This should really be asserting this:; // (isa<ObjCCategoryDecl>(DC) &&; // cast<ObjCCategoryDecl>(DC)->IsClassExtension())); // but unfortunately we sometimes place ivars into non-class extension; // categories on error. This breaks an AST invariant, and should not be; // fixed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/DeclObjC.cpp:206,assert,asserting,206,interpreter/llvm-project/clang/lib/AST/DeclObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/DeclObjC.cpp,1,['assert'],['asserting']
Testability,"// JetProjected has 3 or 4 points. 0-th is apex, others are rim.; // Fourth point is only present in RhoZ when jet hits barrel/endcap transition.; // console.log(""makeJetProjected "", jet);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/EveElements.js:158,log,log,158,ui5/eve7/lib/EveElements.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/EveElements.js,2,['log'],['log']
Testability,"// Jitted; // If some other test case called EnableThreadSafety, the error printed here is of the form; // ""SysError in <TFile::TFile>: file /definitely/not/a/valid/path/f.root can not be opened No such file or; // directory\nError in <TReentrantRWLock::WriteUnLock>: Write lock already released for 0x55f179989378\n"" but the; // address printed changes every time",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_snapshot.cxx:28,test,test,28,tree/dataframe/test/dataframe_snapshot.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_snapshot.cxx,1,['test'],['test']
Testability,// Join all intervals sharing one color into a single LiveIntervalUnion to; // speedup range overlap test.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/StackSlotColoring.cpp:101,test,test,101,interpreter/llvm-project/llvm/lib/CodeGen/StackSlotColoring.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/StackSlotColoring.cpp,1,['test'],['test']
Testability,"// Just defer to our logical at present",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLPhysicalShape.cxx:21,log,logical,21,graf3d/gl/src/TGLPhysicalShape.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLPhysicalShape.cxx,1,['log'],['logical']
Testability,// Just for maintain the old order for quick test.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Support/RISCVVIntrinsicUtils.h:45,test,test,45,interpreter/llvm-project/clang/include/clang/Support/RISCVVIntrinsicUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Support/RISCVVIntrinsicUtils.h,1,['test'],['test']
Testability,"// Just test the syntax of the selection file",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:8,test,test,8,core/dictgen/src/rootcling_impl.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx,1,['test'],['test']
Testability,// Keep the 'bit test' pattern.; // Will it be '1 << Y' after the transform ?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:17,test,test,17,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,1,['test'],['test']
Testability,// Keep track of where we are in the token:; // Where we are in the content of the current logical line.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/ContinuationIndenter.cpp:91,log,logical,91,interpreter/llvm-project/clang/lib/Format/ContinuationIndenter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/ContinuationIndenter.cpp,1,['log'],['logical']
Testability,"// Keep track of whether this is a c.andi. If we can't use c.andi, the; // shift pair might offer more compression opportunities.; // TODO: We could check for C extension here, but we don't have many lit; // tests with the C extension enabled so not checking gets better; // coverage.; // TODO: What if ANDI faster than shift?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelDAGToDAG.cpp:208,test,tests,208,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelDAGToDAG.cpp,1,['test'],['tests']
Testability,// Know that blob data is consumed for assertion below.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Bitstream/BitstreamWriter.h:39,assert,assertion,39,interpreter/llvm-project/llvm/include/llvm/Bitstream/BitstreamWriter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Bitstream/BitstreamWriter.h,1,['assert'],['assertion']
Testability,"// L O O P A L O N G G R I D; // This logic works for both (parallel & central) projections.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/TPainter3dAlgorithms.cxx:38,log,logic,38,hist/histpainter/src/TPainter3dAlgorithms.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/TPainter3dAlgorithms.cxx,1,['log'],['logic']
Testability,"// LBR is the only feature we conditionally support now.; // So if LBR is not requested, then we should be able to run the benchmarks.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp:123,benchmark,benchmarks,123,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp,1,['benchmark'],['benchmarks']
Testability,"// LLVM's definition of dominance allows instructions that are cyclic; // in unreachable blocks, e.g.:; // %pat = select i1 %condition, @global, i16* %pat; // because any instruction dominates an instruction in a block that's; // not reachable from entry.; // So, remove unreachable blocks from the function, because a) there's; // no point in analyzing them and b) GlobalOpt should otherwise grow; // some more complicated logic to break these cycles.; // Notify the analysis manager that we've modified the function's CFG.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/GlobalOpt.cpp:424,log,logic,424,interpreter/llvm-project/llvm/lib/Transforms/IPO/GlobalOpt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/GlobalOpt.cpp,1,['log'],['logic']
Testability,// LOGICAL AND,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/Lexer.cpp:3,LOG,LOGICAL,3,interpreter/llvm-project/clang/lib/Lex/Lexer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/Lexer.cpp,1,['LOG'],['LOGICAL']
Testability,"// LOGICAL AND",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/postscript/src/TSVG.cxx:3,LOG,LOGICAL,3,graf2d/postscript/src/TSVG.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/postscript/src/TSVG.cxx,1,['LOG'],['LOGICAL']
Testability,// LSI Logic 16-bit DSP Processor,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/ELF.h:7,Log,Logic,7,interpreter/llvm-project/llvm/include/llvm/BinaryFormat/ELF.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/ELF.h,1,['Log'],['Logic']
Testability,// L_foo$stub:,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMAsmPrinter.cpp:9,stub,stub,9,interpreter/llvm-project/llvm/lib/Target/ARM/ARMAsmPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMAsmPrinter.cpp,2,['stub'],['stub']
Testability,"// Language Environment DLL logic requires function descriptors, for; // imported functions, that are placed in the ADA to be 8 byte aligned.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZAsmPrinter.cpp:28,log,logic,28,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZAsmPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZAsmPrinter.cpp,1,['log'],['logic']
Testability,"// Layout (logical):; // 0, 1, 2; // 3, 4, 5",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/rtensor.cxx:11,log,logical,11,tmva/tmva/test/rtensor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/rtensor.cxx,5,['log'],['logical']
Testability,"// Layout (logical):; // 0, 3; // 1, 4; // 2, 5",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/rtensor.cxx:11,log,logical,11,tmva/tmva/test/rtensor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/rtensor.cxx,1,['log'],['logical']
Testability,// Leaks should not be reported if they are post-dominated by a sink:; // (1) Sinks are higher importance bugs.; // (2) NoReturnFunctionChecker uses sink nodes to represent paths ending; // with __noreturn functions such as assert() or exit(). We choose not; // to report leaks on such paths.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/MallocChecker.cpp:224,assert,assert,224,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/MallocChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/MallocChecker.cpp,1,['assert'],['assert']
Testability,// Leave all division operations as they are. This supersedes ExpandDiv64InIR; // and is used for testing the legalizer.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUCodeGenPrepare.cpp:98,test,testing,98,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUCodeGenPrepare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUCodeGenPrepare.cpp,1,['test'],['testing']
Testability,"// Left logo layout",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/GTitleFrame.h:8,log,logo,8,test/RootShower/GTitleFrame.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/GTitleFrame.h,1,['log'],['logo']
Testability,// Let bindings are not applied to assertions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:35,assert,assertions,35,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,1,['assert'],['assertions']
Testability,// Let the target-independent logic figure it out.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp:30,log,logic,30,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,1,['log'],['logic']
Testability,// Let's initialize this structure to test whether; // some further statement is a part of this return.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CalledOnceCheck.cpp:38,test,test,38,interpreter/llvm-project/clang/lib/Analysis/CalledOnceCheck.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CalledOnceCheck.cpp,1,['test'],['test']
Testability,// Let's keep stubs ordered by ascending address.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp:14,stub,stubs,14,interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp,1,['stub'],['stubs']
Testability,"// Let's make sure that we can prove that we do not self-wrap during; // MaxBECount iterations. We need this because MaxBECount is a maximum; // iteration count estimate, and we might infer nw from some exit for which we; // do not know max exit count (or any other side reasoning).; // TODO: Turn into assert at some point.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp:303,assert,assert,303,interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,1,['assert'],['assert']
Testability,// LexStart should point at first character of logical line.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/Lexer.cpp:47,log,logical,47,interpreter/llvm-project/clang/lib/Lex/Lexer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/Lexer.cpp,1,['log'],['logical']
Testability,"// Lift this: one may had an empty attribute value; // if (attr_value.length() == 0) { // checks if the attribute value is empty; // ROOT::TMetaUtils::Error(0,""Attribute - missing attibute value!\n"");; // return false;; // }; // creates new Attributes object and pushes it back in the vector; // then Sets the variables in the initial state - if there are other attributes to be read; // For the moment the proto pattern is not implemented. The current ROOT6 architecture; // relies on ABI compatibility for calling functions, no stub functions are present.; // The concept of selecting/excluding functions is not defined.; // if (attr_name == ""proto_pattern"") {; // printf(""XMLReader::GetAttributes(): proto_pattern selection not implemented yet!\n"");; // }",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx:530,stub,stub,530,core/dictgen/src/XMLReader.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx,1,['stub'],['stub']
Testability,// Likewise for the type test.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/WholeProgramDevirt.cpp:25,test,test,25,interpreter/llvm-project/llvm/lib/Transforms/IPO/WholeProgramDevirt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/WholeProgramDevirt.cpp,1,['test'],['test']
Testability,// Limit fast-isel to the targets that are or have been tested.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMSubtarget.cpp:56,test,tested,56,interpreter/llvm-project/llvm/lib/Target/ARM/ARMSubtarget.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMSubtarget.cpp,1,['test'],['tested']
Testability,// Limit the amount of scanning we do so we don't end up with quadratic; // running time on extreme testcases.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MemoryDependenceAnalysis.cpp:100,test,testcases,100,interpreter/llvm-project/llvm/lib/Analysis/MemoryDependenceAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MemoryDependenceAnalysis.cpp,2,['test'],['testcases']
Testability,// Limit the number of alias checks. The limit is chosen so that; // it has no negative effect on the llvm benchmarks.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:107,benchmark,benchmarks,107,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,1,['benchmark'],['benchmarks']
Testability,"// LimitFloatPrecision <= 18; // For floating-point precision of 18:; //; // LogOfMantissa =; // -2.1072184f +; // (4.2372794f +; // (-3.7029485f +; // (2.2781945f +; // (-0.87823314f +; // (0.19073739f - 0.17809712e-1f * x) * x) * x) * x) * x)*x;; //; // error 0.0000023660568, which is better than 18 bits",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:77,Log,LogOfMantissa,77,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,1,['Log'],['LogOfMantissa']
Testability,// Lines are used as a one-based index into a zero-based array. This assert; // checks for possible buffer underruns.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp:69,assert,assert,69,interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,1,['assert'],['assert']
Testability,"// Link the session tag to the log file",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServLite.cxx:31,log,log,31,proof/proof/src/TProofServLite.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServLite.cxx,1,['log'],['log']
Testability,"// List of functions that will be used in the test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:46,test,test,46,test/stressHistoFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx,1,['test'],['test']
Testability,// List of functions which are statically linked on Android and can be generated; // by LLVM. This is done as a nested macro which is used once to declare the; // imported functions with ARM_MATH_DECL and once to compare them to the; // user-requested symbol in getSymbolAddress with ARM_MATH_CHECK. The test; // assumes that all functions start with __aeabi_ and getSymbolAddress must be; // modified if that changes.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RTDyldMemoryManager.cpp:304,test,test,304,interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RTDyldMemoryManager.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RTDyldMemoryManager.cpp,1,['test'],['test']
Testability,"// List of par files to be loaded for CPU benchmarks",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/inc/TProofBench.h:42,benchmark,benchmarks,42,proof/proofbench/inc/TProofBench.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/inc/TProofBench.h,1,['benchmark'],['benchmarks']
Testability,"// List of par files to be loaded for data benchmarks",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/inc/TProofBench.h:43,benchmark,benchmarks,43,proof/proofbench/inc/TProofBench.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/inc/TProofBench.h,1,['benchmark'],['benchmarks']
Testability,"// List of par files to be loaded to generate data for benchmarks",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/inc/TProofBench.h:55,benchmark,benchmarks,55,proof/proofbench/inc/TProofBench.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/inc/TProofBench.h,1,['benchmark'],['benchmarks']
Testability,"// List of stubbed PHI instructions, for values and basic blocks to be filled; // in once all MachineBasicBlocks have been created.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h:11,stub,stubbed,11,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h,1,['stub'],['stubbed']
Testability,// LiveIntervalUnion to perform overlap test.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/StackSlotColoring.cpp:40,test,test,40,interpreter/llvm-project/llvm/lib/CodeGen/StackSlotColoring.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/StackSlotColoring.cpp,1,['test'],['test']
Testability,// Load BaseHotThreshold and TestHotThreshold as 99-percentile threshold in; // profile summary.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp:29,Test,TestHotThreshold,29,interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,1,['Test'],['TestHotThreshold']
Testability,"// Loading/storing mask pairs requires two kmov operations. The second one of; // these needs a 2 byte displacement relative to the specified address (with; // 32 bit spill size). The pairs of 1bit masks up to 16 bit masks all use the; // same spill size, they all are stored using MASKPAIR16STORE, loaded using; // MASKPAIR16LOAD.; //; // The displacement value might wrap around in theory, thus the asserts in; // both cases.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ExpandPseudo.cpp:401,assert,asserts,401,interpreter/llvm-project/llvm/lib/Target/X86/X86ExpandPseudo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ExpandPseudo.cpp,1,['assert'],['asserts']
Testability,"// Loads and stores with implicit EEW do not demand SEW or LMUL directly.; // They instead demand the ratio of the two which is used in computing; // EMUL, but which allows us the flexibility to change SEW and LMUL; // provided we don't change the ratio.; // Note: We assume that the instructions initial SEW is the EEW encoded; // in the opcode. This is asserted when constructing the VSETVLIInfo.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVInsertVSETVLI.cpp:355,assert,asserted,355,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVInsertVSETVLI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVInsertVSETVLI.cpp,1,['assert'],['asserted']
Testability,// Locate __sanitizer_cov* function addresses inside the stubs table on MachO.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/sancov/sancov.cpp:57,stub,stubs,57,interpreter/llvm-project/llvm/tools/sancov/sancov.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/sancov/sancov.cpp,1,['stub'],['stubs']
Testability,"// Log / Debug level",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofLite.cxx:3,Log,Log,3,proof/proof/src/TProofLite.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofLite.cxx,1,['Log'],['Log']
Testability,// Log and multiply in f32 is good enough for f16.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUISelLowering.cpp:3,Log,Log,3,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUISelLowering.cpp,1,['Log'],['Log']
Testability,"// Log axis",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/graf/src/TGaxis.cxx:3,Log,Log,3,graf2d/graf/src/TGaxis.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/graf/src/TGaxis.cxx,1,['Log'],['Log']
Testability,"// Log control flags",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServ.cxx:3,Log,Log,3,proof/proof/src/TProofServ.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServ.cxx,1,['Log'],['Log']
Testability,"// Log dialog box plugin",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/inc/TProof.h:3,Log,Log,3,proof/proof/inc/TProof.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/inc/TProof.h,1,['Log'],['Log']
Testability,"// Log file",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofLite.cxx:3,Log,Log,3,proof/proof/src/TProofLite.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofLite.cxx,2,['Log'],['Log']
Testability,"// Log file in the log dir",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofLite.cxx:3,Log,Log,3,proof/proof/src/TProofLite.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofLite.cxx,2,"['Log', 'log']","['Log', 'log']"
Testability,"// Log file path",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Log,Log,3,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['Log'],['Log']
Testability,"// Log file under $TEMP",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/main/src/roots.cxx:3,Log,Log,3,main/src/roots.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/main/src/roots.cxx,1,['Log'],['Log']
Testability,"// Log likelihood function with Gaussian approximation",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LDA.h:3,Log,Log,3,tmva/tmva/inc/TMVA/LDA.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LDA.h,1,['Log'],['Log']
Testability,"// Log locally",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TVirtualPacketizer.cxx:3,Log,Log,3,proof/proof/src/TVirtualPacketizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TVirtualPacketizer.cxx,1,['Log'],['Log']
Testability,"// Log messages to syslog i.o. stderr; //; // type of service",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/res/rpddefs.h:3,Log,Log,3,net/rpdutils/res/rpddefs.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/res/rpddefs.h,1,['Log'],['Log']
Testability,"// Log normal distribution",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLRndmEngines.cxx:3,Log,Log,3,math/mathmore/src/GSLRndmEngines.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLRndmEngines.cxx,1,['Log'],['Log']
Testability,"// Log notification also in the instance",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TQueryResult.cxx:3,Log,Log,3,tree/tree/src/TQueryResult.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TQueryResult.cxx,1,['Log'],['Log']
Testability,"// Log the beginning of this session",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServ.cxx:3,Log,Log,3,proof/proof/src/TProofServ.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServ.cxx,1,['Log'],['Log']
Testability,"// Log to window",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:3,Log,Log,3,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,1,['Log'],['Log']
Testability,"// Log viewer handler",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:3,Log,Log,3,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,1,['Log'],['Log']
Testability,"// Log x first",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:3,Log,Log,3,test/stressGraphics.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx,1,['Log'],['Log']
Testability,"// Log y first",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx:3,Log,Log,3,test/stressGraphics.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGraphics.cxx,1,['Log'],['Log']
Testability,"// Log() << kDEBUG << ""BDT AdaBoos wrong/all: "" << sumGlobalCost << ""/"" << sumGlobalWeights << Endl;; // Log() << kWARNING << ""BDT AdaBoos wrong/all: "" << sumGlobalCost << ""/"" << sumGlobalWeights << Endl;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:3,Log,Log,3,tmva/tmva/src/MethodBDT.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx,2,['Log'],['Log']
Testability,"// Log() << kDEBUG << ""DataSet MVA Signal efficiency at bkg eff.(error):; // | Sepa- Signifi- "" << Endl; Log() << kDEBUG << ""Name: Method: @B=0.01; // @B=0.10 @B=0.30 ROC-integ ROCCurve| ration: cance: "" << Endl;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:3,Log,Log,3,tmva/tmva/src/Factory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx,2,['Log'],['Log']
Testability,"// Log() << kDEBUG << ""Optimal prune strength (alpha): "" << pruneStrength; // << "" has quality index "" << info->QualityIndex << Endl;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:3,Log,Log,3,tmva/tmva/src/DecisionTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx,1,['Log'],['Log']
Testability,"// Log() << kDEBUG << ""alpha["" << k << ""]: "" << alpha << Endl;; // Log() << kDEBUG << ""==========================="" << Endl; // << ""Pruning branch listed below the node"" << Endl;; // t->Print( Log() );; // Log() << kDEBUG << ""==========================="" << Endl;; // t->PrintRecPrune( Log() );",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CostComplexityPruneTool.cxx:3,Log,Log,3,tmva/tmva/src/CostComplexityPruneTool.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CostComplexityPruneTool.cxx,5,['Log'],['Log']
Testability,"// Log() << kDEBUG << Form(""%-20s %-15s: %#1.3f(%02i) %#1.3f(%02i) %#1.3f(%02i); // %#1.3f %#1.3f | %#1.3f %#1.3f"",; // datasetName.Data(),; // methodName.Data(),; // eff01[k][i], Int_t(1000*eff01err[k][i]),; // eff10[k][i], Int_t(1000*eff10err[k][i]),; // eff30[k][i], Int_t(1000*eff30err[k][i]),; // effArea[k][i],rocIntegral,; // sep[k][i], sig[k][i]) << Endl;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:3,Log,Log,3,tmva/tmva/src/Factory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx,1,['Log'],['Log']
Testability,"// Log() << kDEBUG << Form(""%-20s %-15s: %#1.3f(%02i) %#1.3f(%02i) %#1.3f(%02i); // %#1.3f %#1.3f | -- --"",; // datasetName.Data(),; // methodName.Data(),; // eff01[k][i], Int_t(1000*eff01err[k][i]),; // eff10[k][i], Int_t(1000*eff10err[k][i]),; // eff30[k][i], Int_t(1000*eff30err[k][i]),; // effArea[k][i],rocIntegral) << Endl;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:3,Log,Log,3,tmva/tmva/src/Factory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx,1,['Log'],['Log']
Testability,"// Log() << kINFO << ""DataSet Name: MVA Method: <Bias> <Bias_T> RMS RMS_T | MutInf; // MutInf_T"" << Endl;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:3,Log,Log,3,tmva/tmva/src/Factory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx,1,['Log'],['Log']
Testability,"// Log() << kINFO << Endl;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Envelope.cxx:3,Log,Log,3,tmva/tmva/src/Envelope.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Envelope.cxx,3,['Log'],['Log']
Testability,"// Log() << kINFO << Form(""Dataset[%s] : "",dsi.GetName()) << ""Create internal testing tree"" << Endl;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:3,Log,Log,3,tmva/tmva/src/DataSetFactory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx,2,"['Log', 'test']","['Log', 'testing']"
Testability,"// Log() << kINFO << Form(""Dataset[%s] : "",dsi.GetName()) << ""Create internal training tree"" << Endl;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:3,Log,Log,3,tmva/tmva/src/DataSetFactory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx,1,['Log'],['Log']
Testability,"// Log() << kWARNING << ""BDT AdaBoos wrong/all: "" << sumGlobalCost << ""/"" << sumGlobalWeights << Endl;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:3,Log,Log,3,tmva/tmva/src/MethodBDT.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx,1,['Log'],['Log']
Testability,"// LogNormal",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/Measurement.cxx:3,Log,LogNormal,3,roofit/histfactory/src/Measurement.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/Measurement.cxx,1,['Log'],['LogNormal']
Testability,// Logarithmic-time heap bubble-up.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PriorityQueue.h:3,Log,Logarithmic-time,3,interpreter/llvm-project/llvm/include/llvm/ADT/PriorityQueue.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PriorityQueue.h,1,['Log'],['Logarithmic-time']
Testability,"// Logger",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/inc/TPackMgr.h:3,Log,Logger,3,proof/proof/inc/TPackMgr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/inc/TPackMgr.h,1,['Log'],['Logger']
Testability,// Logic,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64MacroFusion.cpp:3,Log,Logic,3,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64MacroFusion.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64MacroFusion.cpp,1,['Log'],['Logic']
Testability,"// Logic for the subdir/obj names: try first to see if the dataset name contains; // some info; if not check the settings in the TDSet object itself; if still empty; // check the default tree name / path in the TFileCollection object; if still empty; // use the default as the flow will determine",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:3,Log,Logic,3,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,1,['Log'],['Logic']
Testability,"// Logic ops and Add are commutative, so check each operand for a match. Sub; // is not so we cannot reoder if we match operand(1) and need to keep the; // operands in their original positions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineShifts.cpp:3,Log,Logic,3,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineShifts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineShifts.cpp,1,['Log'],['Logic']
Testability,"// Logic ops are commutative, so check each operand for a match.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp:3,Log,Logic,3,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,2,['Log'],['Logic']
Testability,"// LogicOpc (sext X), C --> sext (LogicOpc X, C)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp:3,Log,LogicOpc,3,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,2,['Log'],['LogicOpc']
Testability,"// LogicOpc (zext X), C --> zext (LogicOpc X, C)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp:3,Log,LogicOpc,3,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,2,['Log'],['LogicOpc']
Testability,// LogicOps are special in that we canonicalize them at the cost of an; // instruction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp:3,Log,LogicOps,3,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp,1,['Log'],['LogicOps']
Testability,// Logical && does not do UACs.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/PPExpressions.cpp:3,Log,Logical,3,interpreter/llvm-project/clang/lib/Lex/PPExpressions.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/PPExpressions.cpp,1,['Log'],['Logical']
Testability,// Logical AND.; // Visit LHS. Only visit RHS if LHS was TRUE.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp:3,Log,Logical,3,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp,1,['Log'],['Logical']
Testability,// Logical OR operator.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Expr.cpp:3,Log,Logical,3,interpreter/llvm-project/clang/lib/AST/Expr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Expr.cpp,1,['Log'],['Logical']
Testability,// Logical OR. Visit LHS and only evaluate RHS if LHS was FALSE.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp:3,Log,Logical,3,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp,1,['Log'],['Logical']
Testability,"// Logical column number: column zero is the first column we print in, each; // logical column is 2 physical columns wide.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.cpp:3,Log,Logical,3,interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.cpp,2,"['Log', 'log']","['Logical', 'logical']"
Testability,// Logical elements associated to their CodeView Type Index.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.cpp:3,Log,Logical,3,interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.cpp,1,['Log'],['Logical']
Testability,// Logical instructions which are op instructions; // but we need to not emit any suffix for in our; // tests.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp:3,Log,Logical,3,interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp,2,"['Log', 'test']","['Logical', 'tests']"
Testability,// Logical operations.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonConstPropagation.cpp:3,Log,Logical,3,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonConstPropagation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonConstPropagation.cpp,1,['Log'],['Logical']
Testability,// Logical operators,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h:3,Log,Logical,3,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h,2,['Log'],['Logical']
Testability,"// Logical operators, assume we want bool.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp:3,Log,Logical,3,interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp,1,['Log'],['Logical']
Testability,// Logical operators...,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Instruction.cpp:3,Log,Logical,3,interpreter/llvm-project/llvm/lib/IR/Instruction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Instruction.cpp,1,['Log'],['Logical']
Testability,// Logical or/and.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:3,Log,Logical,3,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,1,['Log'],['Logical']
Testability,// Logical overlay number.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/RawTypes.h:3,Log,Logical,3,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/RawTypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/RawTypes.h,1,['Log'],['Logical']
Testability,"// Logical right-shift means that we start extraction later,; // but stop it at the same position we did previously.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:3,Log,Logical,3,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['Log'],['Logical']
Testability,"// Logical scope, Section address, Section index, IsComdat.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVBinaryReader.h:3,Log,Logical,3,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVBinaryReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVBinaryReader.h,1,['Log'],['Logical']
Testability,"// Logical shapes",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/inc/TGLScene.h:3,Log,Logical,3,graf3d/gl/inc/TGLScene.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/inc/TGLScene.h,1,['Log'],['Logical']
Testability,"// Logical shift the result back to the lower byte, leaving a zero upper; // byte meaning that we can safely pack with PACKUSWB.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:3,Log,Logical,3,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['Log'],['Logical']
Testability,// Logical subtracts never set CC=0.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZElimCompare.cpp:3,Log,Logical,3,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZElimCompare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZElimCompare.cpp,1,['Log'],['Logical']
Testability,// Logical || does not do UACs.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/PPExpressions.cpp:3,Log,Logical,3,interpreter/llvm-project/clang/lib/Lex/PPExpressions.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/PPExpressions.cpp,1,['Log'],['Logical']
Testability,// Logical.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/BitTracker.h:3,Log,Logical,3,interpreter/llvm-project/llvm/lib/Target/Hexagon/BitTracker.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/BitTracker.h,1,['Log'],['Logical']
Testability,// Logical/bit:,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelLowering.cpp:3,Log,Logical,3,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelLowering.cpp,1,['Log'],['Logical']
Testability,"// LogicalShape, if applicable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/inc/TGLSelectRecord.h:3,Log,LogicalShape,3,graf3d/gl/inc/TGLSelectRecord.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/inc/TGLSelectRecord.h,1,['Log'],['LogicalShape']
Testability,"// Logically a <4 x i32> is a valid subvector of <n x 4 x i32>; // but until there are obvious use-cases for this, keep the; // types separate.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp:3,Log,Logically,3,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp,1,['Log'],['Logically']
Testability,// Logically starts equal to 1.0,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:3,Log,Logically,3,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,1,['Log'],['Logically']
Testability,"// Logically, an optional<T> object is composed of two values - a `has_value`; // bit and a value of type T. Equality of optional objects compares both; // values. Therefore, merely comparing the `has_value` bits isn't sufficient:; // when two optional objects are engaged, the equality of their respective; // values of type T matters. Since we only track the `has_value` bits, we; // can't make any conclusions about equality when we know that two optional; // objects are engaged.; //; // We express this as two facts about the equality:; // a) EqVal => (LHS & RHS) v (!RHS & !LHS); // If they are equal, then either both are set or both are unset.; // b) (!LHS & !RHS) => EqVal; // If neither is set, then they are equal.; // We rewrite b) as !EqVal => (LHS v RHS), for a more compact formula.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/Models/UncheckedOptionalAccessModel.cpp:3,Log,Logically,3,interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/Models/UncheckedOptionalAccessModel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/Models/UncheckedOptionalAccessModel.cpp,1,['Log'],['Logically']
Testability,"// Logically, we can think of the feature set given to the evaluator as a 2D; // matrix. The rows are the features (see next). The columns correspond to the; // interferences. We treat the candidate virt reg as an 'interference', too, as; // its feature set is the same as that of the interferring ranges. So we'll have; // MaxInterferences + 1 columns and by convention, we will use the last column; // for the virt reg seeking allocation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MLRegAllocEvictAdvisor.h:3,Log,Logically,3,interpreter/llvm-project/llvm/lib/CodeGen/MLRegAllocEvictAdvisor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MLRegAllocEvictAdvisor.h,1,['Log'],['Logically']
Testability,"// Login only if requested",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx:3,Log,Login,3,net/rpdutils/src/rpdutils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx,1,['Log'],['Login']
Testability,"// Login the user (if in rootd/proofd environment)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx:3,Log,Login,3,net/rpdutils/src/rpdutils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx,1,['Log'],['Login']
Testability,"// Logistic distribution",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLRndmEngines.cxx:3,Log,Logistic,3,math/mathmore/src/GSLRndmEngines.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLRndmEngines.cxx,1,['Log'],['Logistic']
Testability,// Look for a TESTrr+ANDrr pattern where both operands of the test are; // the same. Rewrite to remove the AND.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp:14,TEST,TESTrr,14,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,2,"['TEST', 'test']","['TESTrr', 'test']"
Testability,"// Look for a math+logic pattern that corresponds to sext-in-register of a; // value with cleared high bits. Convert that into a pair of shifts:; // add (xor X, 0x80), 0xF..F80 --> (X << ShAmtC) >>s ShAmtC; // add (xor X, 0xF..F80), 0x80 --> (X << ShAmtC) >>s ShAmtC",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAddSub.cpp:19,log,logic,19,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAddSub.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAddSub.cpp,1,['log'],['logic']
Testability,"// Look for an 'and' of two logical shifts, one of which may be truncated.; // We use m_TruncOrSelf() on the RHS to correctly handle commutative case.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp:28,log,logical,28,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,1,['log'],['logical']
Testability,// Look for an existing stub.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp:24,stub,stub,24,interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp,3,['stub'],['stub']
Testability,// Look for any clobbers performed by a register mask. Only test locations; // that are actually being tracked.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:60,test,test,60,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,1,['test'],['test']
Testability,"// Look for cases where the source of a simple store or the destination; // of a simple load is being spilled. Try to use MVC instead.; //; // Although MVC is in practice a fast choice in these cases, it is still; // logically a bytewise copy. This means that we cannot use it if the; // load or store is volatile. We also wouldn't be able to use MVC if; // the two memories partially overlap, but that case cannot occur here,; // because we know that one of the memories is a full frame index.; //; // For performance reasons, we also want to avoid using MVC if the addresses; // might be equal. We don't worry about that case here, because spill slot; // coloring happens later, and because we have special code to remove; // MVCs that turn out to be redundant.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZInstrInfo.cpp:217,log,logically,217,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZInstrInfo.cpp,1,['log'],['logically']
Testability,// Look for logic ops.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:12,log,logic,12,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['log'],['logic']
Testability,"// Look for situation like this:; // %reg101 = MOV %reg100; // %reg102 = ...; // %reg103 = ADD %reg102, %reg101; // ... = %reg103 ...; // %reg100 = MOV %reg103; // If there is a reversed copy chain from reg101 to reg103, commute the ADD; // to eliminate an otherwise unavoidable copy.; // FIXME:; // We can extend the logic further: If an pair of operands in an insn has; // been merged, the insn could be regarded as a virtual copy, and the virtual; // copy could also be used to construct a copy chain.; // To more generally minimize register copies, ideally the logic of two addr; // instruction pass should be integrated with register allocation pass where; // interference graph is available.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TwoAddressInstructionPass.cpp:318,log,logic,318,interpreter/llvm-project/llvm/lib/CodeGen/TwoAddressInstructionPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TwoAddressInstructionPass.cpp,2,['log'],['logic']
Testability,// Look up for existing stub.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp:24,stub,stub,24,interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp,2,['stub'],['stub']
Testability,"// LoongArch specific constraints in GCC: config/loongarch/constraints.md; //; // 'f': A floating-point register (if available).; // 'k': A memory operand whose address is formed by a base register and; // (optionally scaled) index register.; // 'l': A signed 16-bit constant.; // 'm': A memory operand whose address is formed by a base register and; // offset that is suitable for use in instructions with the same; // addressing mode as st.w and ld.w.; // 'I': A signed 12-bit constant (for arithmetic instructions).; // 'J': Integer zero.; // 'K': An unsigned 12-bit constant (for logic instructions).; // ""ZB"": An address that is held in a general-purpose register. The offset is; // zero.; // ""ZC"": A memory operand whose address is formed by a base register and; // offset that is suitable for use in instructions with the same; // addressing mode as ll.w and sc.w.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/LoongArch/LoongArchISelLowering.cpp:584,log,logic,584,interpreter/llvm-project/llvm/lib/Target/LoongArch/LoongArchISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/LoongArch/LoongArchISelLowering.cpp,1,['log'],['logic']
Testability,"// Loop back through the sequence and validate elements we might have skipped; // while waiting for a valid step. While doing this, log any sequence addend.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:132,log,log,132,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,1,['log'],['log']
Testability,"// Loop on the events in the test sample",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mlp/src/TMLPAnalyzer.cxx:29,test,test,29,math/mlp/src/TMLPAnalyzer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mlp/src/TMLPAnalyzer.cxx,1,['test'],['test']
Testability,"// Loop over logicals -- it is much more efficient that way.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScene.cxx:13,log,logicals,13,graf3d/gl/src/TGLScene.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScene.cxx,1,['log'],['logicals']
Testability,"// Lower a logical operation on i1 values into a GPR sequence if possible.; // The result can be kept in a GPR if requested.; // Three types of inputs can be handled:; // - SETCC; // - TRUNCATE; // - Logical operation (AND/OR/XOR); // There is also a special case that is handled (namely a complement operation; // achieved with xor %a, -1).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp:11,log,logical,11,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,2,"['Log', 'log']","['Logical', 'logical']"
Testability,"// Lower an SME LDR/STR ZA intrinsic; // Case 1: If the vector number (vecnum) is an immediate in range, it gets; // folded into the instruction; // ldr(%tileslice, %ptr, 11) -> ldr [%tileslice, 11], [%ptr, 11]; // Case 2: If the vecnum is not an immediate, then it is used to modify the base; // and tile slice registers; // ldr(%tileslice, %ptr, %vecnum); // ->; // %svl = rdsvl; // %ptr2 = %ptr + %svl * %vecnum; // %tileslice2 = %tileslice + %vecnum; // ldr [%tileslice2, 0], [%ptr2, 0]; // Case 3: If the vecnum is an immediate out of range, then the same is done as; // case 2, but the base and slice registers are modified by the greatest; // multiple of 15 lower than the vecnum and the remainder is folded into the; // instruction. This means that successive loads and stores that are offset from; // each other can share the same base and slice register updates.; // ldr(%tileslice, %ptr, 22); // ldr(%tileslice, %ptr, 23); // ->; // %svl = rdsvl; // %ptr2 = %ptr + %svl * 15; // %tileslice2 = %tileslice + 15; // ldr [%tileslice2, 7], [%ptr2, 7]; // ldr [%tileslice2, 8], [%ptr2, 8]; // Case 4: If the vecnum is an add of an immediate, then the non-immediate; // operand and the immediate can be folded into the instruction, like case 2.; // ldr(%tileslice, %ptr, %vecnum + 7); // ldr(%tileslice, %ptr, %vecnum + 8); // ->; // %svl = rdsvl; // %ptr2 = %ptr + %svl * %vecnum; // %tileslice2 = %tileslice + %vecnum; // ldr [%tileslice2, 7], [%ptr2, 7]; // ldr [%tileslice2, 8], [%ptr2, 8]; // Case 5: The vecnum being an add of an immediate out of range is also handled,; // in which case the same remainder logic as case 3 is used.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:1617,log,logic,1617,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['log'],['logic']
Testability,// Lower each call to llvm.type.test for this type identifier.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp:32,test,test,32,interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp,1,['test'],['test']
Testability,"// Lower i1 argument as i8, and insert AssertZExt + Trunc later.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64CallLowering.cpp:39,Assert,AssertZExt,39,interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64CallLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64CallLowering.cpp,1,['Assert'],['AssertZExt']
Testability,// Lower range metadata from 0 to N to assert zext to an integer of nearest; // floor power of two.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h:39,assert,assert,39,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h,1,['assert'],['assert']
Testability,// Lower the module using the action and summary passed as command line; // arguments. For testing purposes only.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp:91,test,testing,91,interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp,2,['test'],['testing']
Testability,// Lower type metadata and the type.test intrinsic in the ThinLTO; // post link pipeline after ICP. This is to enable usage of the type; // tests in ICP sequences.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:36,test,test,36,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,2,['test'],"['test', 'tests']"
Testability,// Lower type metadata and the type.test intrinsic. This pass supports; // clang's control flow integrity mechanisms (-fsanitize=cfi*) and needs; // to be run at link time if CFI is enabled. This pass does nothing if; // CFI is disabled.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:36,test,test,36,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,1,['test'],['test']
Testability,"// Lower v16i8/v32i8 as extension to v8i16/v16i16 vector pairs, multiply,; // logical shift down the upper half and pack back to i8.; // With SSE41 we can use sign/zero extend, but for pre-SSE41 we unpack; // and then ashr/lshr the upper bits down to the lower bits before multiply.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:78,log,logical,78,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['log'],['logical']
Testability,"// MB : HACK no option to have both non-hist variations and hist variations ?; // get histogram; // GHL: Okay, this is going to be non-trivial.; // We will loop over histosys's, which contain both; // the low hist and the high hist together.; // Logic:; // - If we have no HistoSys's, do part A; // - else, if the histo syst's don't match, return (we ignore this case); // - finally, we take the syst's and apply the linear interpolation w/ constraint",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx:246,Log,Logic,246,roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx,1,['Log'],['Logic']
Testability,// MCJIT doesn't support logical dylibs.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/MCJIT/MCJIT.h:25,log,logical,25,interpreter/llvm-project/llvm/lib/ExecutionEngine/MCJIT/MCJIT.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/MCJIT/MCJIT.h,1,['log'],['logical']
Testability,"// MCStudy module to calculate Delta(-logL) significance w.r.t given null hypothesis",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooDLLSignificanceMCSModule.h:38,log,logL,38,roofit/roofitcore/inc/RooDLLSignificanceMCSModule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooDLLSignificanceMCSModule.h,1,['log'],['logL']
Testability,// MIPS-I has not been tested.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsSubtarget.cpp:23,test,tested,23,interpreter/llvm-project/llvm/lib/Target/Mips/MipsSubtarget.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsSubtarget.cpp,1,['test'],['tested']
Testability,"// MOVMSKPS(V) !=/== 0 -> TESTPS(V,V); // MOVMSKPD(V) !=/== 0 -> TESTPD(V,V); // MOVMSKPS(V) !=/== -1 -> TESTPS(V,V); // MOVMSKPD(V) !=/== -1 -> TESTPD(V,V); // iff every element is referenced.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:26,TEST,TESTPS,26,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,4,['TEST'],"['TESTPD', 'TESTPS']"
Testability,"// MO_TAGGED on the page indicates a tagged address. Set the tag now.; // We do so by creating a MOVK that sets bits 48-63 of the register to; // (global address + 0x100000000 - PC) >> 48. This assumes that we're in; // the small code model so we can assume a binary size of <= 4GB, which; // makes the untagged PC relative offset positive. The binary must also be; // loaded into address range [0, 2^48). Both of these properties need to; // be ensured at runtime when using tagged addresses.; //; // TODO: There is duplicate logic in AArch64ExpandPseudoInsts.cpp that; // also uses BuildMI for making an ADRP (+ MOVK) + ADD, but the operands; // are not exactly 1:1 with FastISel so we cannot easily abstract this; // out. At some point, it would be nice to find a way to not have this; // duplciate code.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:527,log,logic,527,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,1,['log'],['logic']
Testability,"// MVA output from each classifier over the testing hist",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBoost.h:44,test,testing,44,tmva/tmva/inc/TMVA/MethodBoost.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBoost.h,1,['test'],['testing']
Testability,"// MVE extend costs, taken from codegen tests. i8->i16 or i16->i32 is one; // instruction, i8->i32 is two. i64 zexts are an VAND with a constant, sext; // are linearised so take more.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMTargetTransformInfo.cpp:40,test,tests,40,interpreter/llvm-project/llvm/lib/Target/ARM/ARMTargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMTargetTransformInfo.cpp,1,['test'],['tests']
Testability,// Mach-O uses non-lazy symbol stubs to encode per-TU information into; // global table for symbol lookup.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86AsmPrinter.cpp:31,stub,stubs,31,interpreter/llvm-project/llvm/lib/Target/X86/X86AsmPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86AsmPrinter.cpp,1,['stub'],['stubs']
Testability,"// Macro with the saved (last) log",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/inc/TProof.h:31,log,log,31,proof/proof/inc/TProof.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/inc/TProof.h,1,['log'],['log']
Testability,"// Macros to set, clear or test bits of the ""flags"" field.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/inc/TGHtml.h:27,test,test,27,gui/guihtml/inc/TGHtml.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/inc/TGHtml.h,1,['test'],['test']
Testability,"// Main interface to evaluate the test statistic on a dataset",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MinNLLTestStat.h:34,test,test,34,roofit/roostats/inc/RooStats/MinNLLTestStat.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MinNLLTestStat.h,2,['test'],['test']
Testability,"// Major concern about the following 6 cases is NaN result. The comparison; // result consists of 4 bits, indicating lt, eq, gt and un (unordered),; // only one of which will be set. The result is generated by fcmpu; // instruction. However, bc instruction only inspects one of the first 3; // bits, so when un is set, bc instruction may jump to an undesired; // place.; //; // More specifically, if we expect an unordered comparison and un is set, we; // expect to always go to true branch; in such case UEQ, UGT and ULT still; // give false, which are undesired; but UNE, UGE, ULE happen to give true,; // since they are tested by inspecting !eq, !lt, !gt, respectively.; //; // Similarly, for ordered comparison, when un is set, we always expect the; // result to be false. In such case OGT, OLT and OEQ is good, since they are; // actually testing GT, LT, and EQ respectively, which are false. OGE, OLE; // and ONE are tested through !lt, !gt and !eq, and these are true.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCFastISel.cpp:623,test,tested,623,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCFastISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCFastISel.cpp,3,['test'],"['tested', 'testing']"
Testability,"// Make a stream refernce that will become a /dev/null log stream if; // Quiet is true, or normal output if Quiet is false. This can stop the; // errors and warnings from being displayed and producing too much output; // when they aren't desired.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-gsymutil/llvm-gsymutil.cpp:55,log,log,55,interpreter/llvm-project/llvm/tools/llvm-gsymutil/llvm-gsymutil.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-gsymutil/llvm-gsymutil.cpp,1,['log'],['log']
Testability,"// Make addrspace 8 pointers loads into 4xs32 loads here, so the rest of the; // logic doesn't have to handle that case.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp:81,log,logic,81,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp,1,['log'],['logic']
Testability,"// Make clone and test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_tf1.cxx:18,test,test,18,hist/hist/test/test_tf1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_tf1.cxx,1,['test'],['test']
Testability,"// Make copy and test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_tf1.cxx:17,test,test,17,hist/hist/test/test_tf1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_tf1.cxx,1,['test'],['test']
Testability,// Make new SETCCs and logical nodes.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:23,log,logical,23,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,1,['log'],['logical']
Testability,"// Make sure PHINode references to the block we are merging into are; // updated to be incoming blocks from the predecessor to the current block.; // NOTE: If this is updated such that the outlined block can have more than; // one incoming block to a PHINode, this logic will have to updated; // to handle multiple precessors instead.; // We only need to update this if the outlined section contains a PHINode, if; // it does not, then the incoming block was never changed in the first place.; // On the other hand, if PrevBB has no predecessors, it means that all; // incoming blocks to the first block are contained in the region, and there; // will be nothing to update.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/IROutliner.cpp:265,log,logic,265,interpreter/llvm-project/llvm/lib/Transforms/IPO/IROutliner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/IROutliner.cpp,1,['log'],['logic']
Testability,"// Make sure none of the operands of this instruction do anything that; // might break if they're moved outside their current function.; // This includes MachineBasicBlock references, BlockAddressses,; // Constant pool indices and jump table indices.; //; // A quick note on MO_TargetIndex:; // This doesn't seem to be used in any of the architectures that the; // MachineOutliner supports, but it was still filtered out in all of them.; // There was one exception (RISC-V), but MO_TargetIndex also isn't used there.; // As such, this check is removed both here and in the target-specific; // implementations. Instead, we assert to make sure this doesn't; // catch anyone off-guard somewhere down the line.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TargetInstrInfo.cpp:622,assert,assert,622,interpreter/llvm-project/llvm/lib/CodeGen/TargetInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TargetInstrInfo.cpp,1,['assert'],['assert']
Testability,"// Make sure that all coro.save, coro.suspend and the fallthrough coro.end; // intrinsics are in their own blocks to simplify the logic of building up; // SuspendCrossing data.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Coroutines/CoroFrame.cpp:130,log,logic,130,interpreter/llvm-project/llvm/lib/Transforms/Coroutines/CoroFrame.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Coroutines/CoroFrame.cpp,1,['log'],['logic']
Testability,"// Make sure that each function is defined, does not access memory, takes at; // least one argument, does not use its first argument (which we assume is; // 'this'), and has the same return type.; //; // Note that we test whether this copy of the function is readnone, rather; // than testing function attributes, which must hold for any copy of the; // function, even a less optimized version substituted at link time. This is; // sound because the virtual constant propagation optimizations effectively; // inline all implementations of the virtual function into each call site,; // rather than using function attributes to perform local optimization.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/WholeProgramDevirt.cpp:217,test,test,217,interpreter/llvm-project/llvm/lib/Transforms/IPO/WholeProgramDevirt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/WholeProgramDevirt.cpp,2,['test'],"['test', 'testing']"
Testability,"// Make sure that no Phi input comes from an unreachable block. Otherwise,; // even the values that are not available in these blocks may come from them,; // and this leads to false-positive recurrence test.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp:202,test,test,202,interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,1,['test'],['test']
Testability,"// Make sure that the offset is correctly hidden for the likelihoods, even if; // we evaluated the same likelihood without hiding before. This is tested; // because it was fragile before: a change in offset hiding was not considered; // in the dirty state propagation in the new CPU backend.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx:146,test,tested,146,roofit/roofitcore/test/testTestStatistics.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx,1,['test'],['tested']
Testability,// Make sure that we know we already need a stub for this function.; // Having called needsFPHelperFromSig,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/Mips16HardFloat.cpp:44,stub,stub,44,interpreter/llvm-project/llvm/lib/Target/Mips/Mips16HardFloat.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/Mips16HardFloat.cpp,1,['stub'],['stub']
Testability,"// Make sure that we won't clobber any live ins to the sibling block by; // hoisting Dependency. For instance, we can't hoist INST to before the; // null check (even if it safe, and does not violate any dependencies in; // the non_null_block) if %rdx is live in to _null_block.; //; // test %rcx, %rcx; // je _null_block; // _non_null_block:; // %rdx = INST; // ...; //; // This restriction does not apply to the faulting load inst because in; // case the pointer loaded from is in the null page, the load will not; // semantically execute, and affect machine state. That is, if the load; // was loading into %rax and it faults, the value of %rax should stay the; // same as it would have been had the load not have executed and we'd have; // branched to NullSucc directly.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ImplicitNullChecks.cpp:286,test,test,286,interpreter/llvm-project/llvm/lib/CodeGen/ImplicitNullChecks.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ImplicitNullChecks.cpp,1,['test'],['test']
Testability,// Make sure that whatever symbol the demangler is operating on is; // present in the module (the signature is not important). This is; // because `tryDemangleForVFABI` fails if the function is not; // present. We need to make sure we can even invoke; // `getOrInsertFunction` because such method asserts on strings with; // zeroes.; // TODO: What is this actually testing? That we don't crash?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/vfabi-demangle-fuzzer/vfabi-demangler-fuzzer.cpp:297,assert,asserts,297,interpreter/llvm-project/llvm/tools/vfabi-demangle-fuzzer/vfabi-demangler-fuzzer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/vfabi-demangle-fuzzer/vfabi-demangler-fuzzer.cpp,2,"['assert', 'test']","['asserts', 'testing']"
Testability,// Make sure the current buffer is free of content (we can't flush here; the; // child buffer management logic will be in write_impl).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/raw_ostream.cpp:105,log,logic,105,interpreter/llvm-project/llvm/lib/Support/raw_ostream.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/raw_ostream.cpp,1,['log'],['logic']
