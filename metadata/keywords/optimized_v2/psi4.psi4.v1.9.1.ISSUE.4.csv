quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,wiki,url,total_similar,target_keywords,target_matched_words
Performance,"st recent call last):; File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 76, in <module>; File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/lib//python3.7/site-packages/psi4/driver/driver.py"", line 577, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/lib//python3.7/site-packages/psi4/driver/procrouting/sapt/sapt_proc.py"", line 255, in run_sapt_dft; sapt_dft(dimer_wfn, wfn_A, wfn_B, sapt_jk=sapt_jk, data=data, print_header=False); File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/lib//python3.7/site-packages/psi4/driver/procrouting/sapt/sapt_proc.py"", line 421, in sapt_dft; fdds_disp = sapt_mp2_terms.df_fdds_dispersion(primary_basis, aux_basis, cache, is_hybrid, x_alpha); File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/lib//python3.7/site-packages/psi4/driver/procrouting/sapt/sapt_mp2_terms.py"", line 146, in df_fdds_dispersion; Rtinv_A = np.linalg.pinv(R_A, rcond=1.e-13).transpose(); File ""<__array_function__ internals>"", line 6, in pinv; File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/lib/python3.7/site-packages/numpy/linalg/linalg.py"", line 2003, in pinv; u, s, vt = svd(a, full_matrices=False, hermitian=hermitian); File ""<__array_function__ internals>"", line 6, in svd; File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placeh",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2178:3121,cache,cache,3121,https://psicode.org,https://github.com/psi4/psi4/issues/2178,1,['cache'],['cache']
Performance,"stdlib, third_party, and first_party blocks and then alphabetizes the imports within. It also effectively tests the fragility of the import structure by jumbling them all into alphabetical order. Attempts in past years to run isort led to circular imports and a retreat. This time I was able to fix the single one that came about. Third pass is that I ran `autoflake` on the driver to remove unused stdlib imports. It also removed some `pass` on empty fns that weren't needed because the docstring suffices for the syntax. ## User notes; - [x] the import structure has changed. you might need to add standard library imports to your input files if you use them (e.g., `import math` before `math.pi`) that previously were preloaded by psi4. ## Dev notes & details; - [x] switched import style to relative imports, ran isort, ran autoflake; - [x] actual material changes:; * stop importing `molutil` into `sapt_proc`. this is the main one that allows killing off the embarrassing `temp_circular_import_blocker` fn. https://github.com/psi4/psi4/compare/master...loriab:psi4:import_slayer?expand=1#diff-f3e93ffa6125dd1f79abad7630bbf259bb1daeee89e983d2889b68af6038875aL35; * delay loading fisapt_proc until runtime in sapt_util. this releases the main circular import in procrouting. https://github.com/psi4/psi4/compare/master...loriab:psi4:import_slayer?expand=1#diff-b3bc4df41c2c04c815d7a8a9b374c88759487db4a68e9dc962785dae8cb4b73cR268; * delay loading driver_findif in empirical_dispersion. https://github.com/psi4/psi4/compare/master...loriab:psi4:import_slayer?expand=1#diff-6c949ad06bfcc0f8d646a54c79a427c47e008cbdae82ca148b0f0af1e1319a63R379; * kill off circular_import blocker from python_helpers and molutil https://github.com/psi4/psi4/compare/master...loriab:psi4:import_slayer?expand=1#diff-f1bd68ebb5a84a2a1bfea1cce073adda3b39a3146012026cb7841280ef8ca25dL658. ## Checklist; - ~tests added for any new features~; - [x] full tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3033:1970,load,loading,1970,https://psicode.org,https://github.com/psi4/psi4/pull/3033,2,['load'],['loading']
Performance,still merge queue config,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2923:12,queue,queue,12,https://psicode.org,https://github.com/psi4/psi4/pull/2923,1,['queue'],['queue']
Performance,"symmetry, switch symmetry off and check if I'm still at a stable solution. However, I find I'm unable to change my molecule for symmetry constraints (or charge/multiplicity for that matter). The following input; ```; molecule sym {; 0 1; H 0.459619 0.000000 0.000000; H 0.000000 0.459619 0.000000; }. set basis STO-3G; energy('scf'). molecule nosym {; 0 1; H 0.459619 0.000000 0.000000; H 0.000000 0.459619 0.000000; }. set scf guess read; energy('scf'); ```; runs the first SCF, but crashes on the second with; ```; RuntimeError: ; Fatal Error: SCF guess was set to SAD, but sad_basissets_ was empty!. Error occurred in file: /home/work/psi4/psi4/psi4/src/psi4/libscf_solver/sad.cc on line: 659; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::scf::HF::compute_SAD_guess(); psi::scf::HF::guess(); psi::scf::HF::initialize(); psi::scf::HF::compute_energy(); ```; Oddly, it appear that while in the second run; ```; ==> Algorithm <==. SCF Algorithm Type is DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is READ.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 0.00e+00; ```; the initialization uses; ```; ==> Integral Setup <==. ==> DFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; OpenMP threads: 1; Integrals threads: 1; Memory (MB): 375; Algorithm: Core; Integral Cache: NONE; Schwarz Cutoff: 1E-12; Fitting Condition: 1E-12. => Auxiliary Basis Set <=. Basis Set: file /home/work/psi4/install/share/psi4/basis/def2-svp-jkfit.gbs; Number of shells: 12; Number of basis function: 36; Number of Cartesian functions: 40; Spherical Harmonics?: true; Max angular momentum: 2. Minimum eigenvalue in the overlap matrix is 2.8114045453E-01.; Using Symmetric Orthogonalization. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF.; ```; followed by the crash.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/586:1683,Cache,Cache,1683,https://psicode.org,https://github.com/psi4/psi4/issues/586,1,['Cache'],['Cache']
Performance,"t can intelligently make a variety of choices depending on local conditions (#1135).; - TDDFT for HF, LDA, and GGA SCF wave functions (#1349). . # Obtaining; - Binary installers: ; - Python Anaconda: `conda install psi4 -c psi4`. ##. # New Methods; - Improved support for the [MolSSI](molssi.org) QC Schema [interface](http://molssi-qc-schema.readthedocs.io/en/latest/index.html#) v1; - VV10 dispersion is now available for UKS references.; - Cubeprop can now compute the `FRONTIER_ORBITALS` and `DUAL_DESCRIPTOR` quantities.; - nZaPa-NR basis sets have been added.; - The recursive driver can now compute N-body gradients and Hessians. # New External Libraries; - [QCElemental](https://github.com/MolSSI/QCElemental) - A library for CODATA, molecule manipulation routines, and periodic table information.; - [HelPME](https://github.com/andysim/helpme) - A particle-mesh Ewald library for long-range electrostatics.; - [pyoptking](https://github.com/psi-rking/optking) - A python-based implementation of the OptKing geometry optimization and IRC program. # First Time Contributors; - @raimis - #1399, #1185, #1183, +70 more!; - @obrien951 #1359, #1222, #1130, #1140, #1100, #1097; - @zachglick #1453, #1304, #1291; - @tovrstra #1510, #1506, #1500; - @timostrunk #1133, #1128, #1127; - @mdav2 #1374, #1142; - @chapincavender #1364; - @janisozaur #1321; - @rainli323 #1131; - @yxie326 #1083. # Additional Non-Core Contributors to v1.3. - @JonathonMisiewicz #1517, #1487, #1379, #1424, #1435, #1378, #1352, #1337, #1336, #1289, #1310, #1299, #1214, #1150, #1024, #1139, #1108; - @susilehtola #1475, #1493, #1481, #1479, #1472, #1458, #1460, #1468, #1456, #1452, #1451, #1260; - @PeterKraus #1470, #1350, #1405, #1235, #1303, #1262, #1232, #1138, #1123, #1119, #1109; - @hokru #1320, #1377, #1346, #1300, #1244, #1241; - @alenaizan #1365, #1042, #1294; - @tyzhang1993 #1437; - @tomspur #1257. # Performance Optimizations; - NYI. # Psi Developer Upgrade Guide; - Psi4 now requires C++14 (up from C++11); -",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1406:1859,optimiz,optimization,1859,https://psicode.org,https://github.com/psi4/psi4/issues/1406,1,['optimiz'],['optimization']
Performance,"t file:. ```; molecule mol_12_butadiene {; 0 1; C -1.743900000 -0.363600000 -0.000000000; C -0.552300000 0.557000000 -0.000100000; C 0.691500000 0.173100000 -0.000000000; C 1.934600000 -0.213400000 -0.000000000; H 2.475000000 -0.380600000 0.924600000; H 2.475400000 -0.380100000 -0.924300000; H -0.756100000 1.624500000 0.000500000; H -2.368000000 -0.187400000 0.878900000; H -1.437400000 -1.407900000 -0.000100000; H -2.368300000 -0.187200000 -0.878700000. units angstrom; no_reorient; }. set globals {; basis aug-cc-pVTZ; dft_spherical_points 434; dft_radial_points 85; }. set_memory(24000000000); try:; optimize('pwpb95-d3bj'); except SCFConvergenceError as e:; unconverged_scf_wfn = e.wfn; unconverged_scf_wfn.to_file(unconverged_scf_wfn.get_scratch_filename(180)); set guess read; optimize('pwpb95-d3bj'); E, wfn = frequency('pwpb95-d3bj', return_wfn=True); print(wfn.frequencies().get(0, 0)); ```. The program starts the optimization and produces an error:. ```; Performing finite difference calculations; 49 displacements needed ... 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49; forrtl: error (76): Abort trap signal; Image PC Routine Line Source ; libgdma.so 00007FB2D549510F for__signal_handl Unknown Unknown; libpthread-2.27.s 00007FB2DA9F68A0 Unknown Unknown Unknown; libc-2.27.so 00007FB2DA631F47 gsignal Unknown Unknown; libc-2.27.so 00007FB2DA6338B1 abort Unknown Unknown; core.cpython-37m- 00007FB2D7A0D3D7 Unknown Unknown Unknown; core.cpython-37m- 00007FB2D6563E2D Unknown Unknown Unknown; core.cpython-37m- 00007FB2D657D2C1 Unknown Unknown Unknown; core.cpython-37m- 00007FB2D6040FF6 Unknown Unknown Unknown; python3.7 000055D7E213E914 _PyMethodDef_RawF Unknown Unknown; python3.7 000055D7E213EA31 _PyCFunction_Fast Unknown Unknown; python3.7 000055D7E21AAEBD _PyEval_EvalFrame Unknown Unknown; python3.7 000055D7E20ED829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055D7E213E107 _PyFu",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2020:1078,Perform,Performing,1078,https://psicode.org,https://github.com/psi4/psi4/issues/2020,1,['Perform'],['Performing']
Performance,"t(); compare_values(nre_opt, mol.nuclear_repulsion_energy(), 3, 'opt nre'); compare_values(e_opt, get_variable('CURRENT ENERGY'), 5, 'opt ene'); compare_matrices(zerograd, g, 3, 'opt ZERO grad'). def test_odd_start(mol):; g0 = gradient('mp2', molecule=mol); compare_values(odd_nre_start, mol.nuclear_repulsion_energy(), 1, 'start nre'); compare_values(odd_e_start, get_variable('CURRENT ENERGY'), 3, 'start ene'); compare_values(odd_rmsg_start, g0.rms(), 4, 'start rms grad'); compare_matrices(odd_g_start, g0, 3, 'start grad'). def test_badodd_grad(mol):; e, wfn = optimize('mp2', return_wfn=True, molecule=mol); g = wfn.gradient(); g.print_out(); compare_values(odd_nre_opt, mol.nuclear_repulsion_energy(), 2, 'opt nre nogood'); compare_values(odd_e_opt, get_variable('CURRENT ENERGY'), 5, 'opt ene nogood'); compare_values(odd_rmsg_opt, g.rms(), 4, 'opt grad nogood'). test_norm_start(normz); test_zero_grad(normz). # And behold, the initial gradient matches Q-Chem, the optimization; # progresses nicely, the RMS Force column goes to zero, and the gradient; # at the end is zero. # start nre.........................................................PASSED; # start ene.........................................................PASSED; # start rms grad....................................................PASSED; # start grad........................................................PASSED; #Optimizer: Optimization complete!; # opt nre...........................................................PASSED; # opt ene...........................................................PASSED; # opt ZERO grad.....................................................PASSED. # --------------------------------------------------------------------------------------------------------------- ~; # Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; # --------------------------------------------------------------------------------------------------------------- ~; # 1 -139.530718293045 -139.530718293045 0.0569",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310:3361,optimiz,optimization,3361,https://psicode.org,https://github.com/psi4/psi4/issues/310,1,['optimiz'],['optimization']
Performance,"t>, kwnames=0x7faa873651d8, ; kwargs=0x7faa874b9f18, kwcount=<optimized out>, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name='gradient', qualname='gradient'); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #35 0x00007faabd653e23 in _PyFunction_Vectorcall (func=<optimized out>, stack=0x7faa874b9f10, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:435; #36 0x00007faabd65ca90 in PyVectorcall_Call (callable=<function at remote 0x7faa87366e50>, tuple=<optimized out>, kwargs=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:199; #37 0x00007faabd6481e9 in do_call_core (kwdict={'return_wfn': True, 'molecule': <psi4.core.Molecule at remote 0x7faa8737c400>, 'opt_iter': 1}, callargs=('hf',), ; func=<function at remote 0x7faa87366e50>, tstate=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:5010; #38 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3559; #39 0x00007faabd644d54 in PyEval_EvalFrameEx (throwflag=0, ; f=Frame 0x5589d8cda850, for file /home/work/psi4/install.susi/lib/psi4/driver/driver.py, line 1824, in optimize (name='hf', kwargs={'opt_iter': 1}, engine='optking', lowername='hf', custom_gradient=False, return_wfn=False, return_history=False, full_hess_every=-1, steps_since_last_hessian=0, hessian_with_method='hf', optstash=<OptionsState(data={('INTRAFRAG_STEP_LIMIT', 'OPTKING'): <OptionState(option='INTRAFRAG_STEP_LIMIT', module='OPTKING', value_global=<float at remote 0x7faa8746f6d0>, haschanged_global=False, value_local=<float at remote 0x7faa8746fe10>, haschanged_local=False, value_used=<float at remote 0x7faa8746fad0>, haschanged_used=False) at remote 0x7faaaffd1cd0>, ('HESSIAN_WRITE', 'FINDIF'): <OptionState(option='HESSIAN_WRITE', module='FINDIF', value_global=0, haschanged_global=False, value_local=0, haschanged_local=Fals",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:11705,optimiz,optimized,11705,https://psicode.org,https://github.com/psi4/psi4/issues/2010,2,['optimiz'],['optimized']
Performance,"tack=<synthetic pointer>, tstate=0x5589d803e680) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4963; #44 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3500; #45 0x00007faabd644d54 in PyEval_EvalFrameEx (throwflag=0, f=Frame 0x5589d8ccbe90, for file <string>, line 295, in <module> ()); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #46 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x0, kwargs=0x0, ; kwcount=<optimized out>, kwstep=2, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name=0x0, qualname=0x0) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #47 0x00007faabd6bfe79 in PyEval_EvalCodeEx (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kws=<optimized out>, ; kwcount=0, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4327; #48 0x00007faabd6bfe3b in PyEval_EvalCode (co=<optimized out>, globals=<optimized out>, locals=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:718; #49 0x00007faabd6e1068 in run_eval_code_obj (co=0x7faa87377d40, ; globals={'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <SourceFileLoader(name='__main__', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab03387f0>, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7faab0360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'ar",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:14775,optimiz,optimized,14775,https://psicode.org,https://github.com/psi4/psi4/issues/2010,6,['optimiz'],['optimized']
Performance,"tes for the molecule at each step of the optimization. Hooked up to MDT.; - ~adds normalmode displacement export to the api and optional saving of normal modes to the wavefunction.~; - Adds handling of several one-electron properties to the API and saves them to the wavefunction.; - `qcdb.Molecule`; - Fix some bugs, including C3/D3 symmetry detection w/o verbose and printing for Q-Chem when dummy (or ghost?, don't remember which) present; - Simplify rotational_constants, add rotational_symmetry_number, add axis_representation (probably should double-check this with a spectroscopy book); - Optimize instantiation (really, update_geometry) of large systems by a couple orders of magnitude (now ~1 min for 6000 atoms, w/symmetry); - Hook up Trent Parker's linear-scaling BFS algorithm to qcdb.Molecule or through just np arrays. Has ""seed"" argument so you can forcibly split intramolecularly or close-bound intermol.; - Selected steps (for performance) are now in numpy, as a result, `geometry(np_out=True)` and `xyz(np_out=True)` are avail to skip the cast-back-to-list step. Also, `to_arrays` returns geom, mass, elez, etc. as numpy arrays, rather than needing to iterate over natom.; - `psi4.core.Molecule`; - add rotational_symmetry_number; - export rotor_type; - faster BFS algorithm hooked up to psi4.Mol, too. Depending on Mol type, returns numpy split arrays, single large Mol with atoms rearranged and fragmentation embedded, and/or list of indiv Mols, one for each fragment. Radically pare down auto_fragments/old BFS code.; - `units` no longer exported as a property. has getter/setter, and the getter returns strings, not `Molecule::GeometryUnits` objects.; - _Both_ psi4.core.Molecule && qcdb.Molecule; - Enhanced `add_atom` to take label (in add'n to symbol) and mass number, so is a full fledged CoordEntry entry point; - Add `mass_number` storage and accessor. In Psi, this is just a pass-through – nothing done with it. Stores isotope mass number if mass corresponds to valid nuc",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/834:2287,perform,performance,2287,https://psicode.org,https://github.com/psi4/psi4/pull/834,1,['perform'],['performance']
Performance,"there is no dummy atom in the z-matrix.; However, when I added a dummy atom in the z-matrix, the geometries are updated correctly. ; I have attached the input and output files with a dummy atom. . Thank you. Yiling . Input ; ```; # water and na, R is the distance variable for Rvals; memory 1000 mb. molecule dimer {; 0 1; O1 4.70071 0.00000 0.00000; H1 4.11483 0.00000 0.75695; H2 4.11483 0.00000 -0.75695; --; 1 1; X O1 R H1 125.25 H2 180.0; NA X 0.1 O1 180.0 H2 180.0; }. # set the scan variable of R above, ex: distance, manually/automatically assign; # ----------------------------------------------------------------; def frange(start, stop, step): ## do not change the section of def frange; 	i = start; 	while i < stop:; 		yield i; 		i += step; # ----------------------------------------------------------------; # Rvals=[2.5, 3.0, 4.0] ## manually assign the variable, ex: distance at 2.5, 3.0 and 4.0 anstrom; Rvals=[]; for j in frange(1.4, 1.9, 0.1): ## automatically assign the variable; the endpoint will not be performed; 	Rvals.append(round(j,2)) ## decimal is 2. ; # basis set; # ----------------------------------------------------------------; ##set basis <basisset>; set basis 6-31G(d). set guess sad; set scf_type df; set freeze_core false ## false for ions; ####cp(""df-mp2"") ## moved to below. # get the energy at each variable; # ----------------------------------------------------------------------------; # Initialize a blank dictionary of counterpoise corrected energies; # (Need this for the syntax below to work). ecp = {}; for R in Rvals:; dimer.R = R; ecp[R] = energy(""mp2"", bsse_type = ""cp"") ## for new version; #ecp[R] = cp(""df-mp2"") ## for beta version; e= ecp[R] * psi_hartree2kcalmol; psi4.print_out(""R, E_int [kcal/mol]: %3.1f %10.6f\n"" % (R, e)). # print out all the energies; # ----------------------------------------------------------------------------; psi4.print_out(""\n""); psi4.print_out(""CP-corrected interaction energies\n\n""); psi4.print_out("" R [Ang] E_i",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2880:1112,perform,performed,1112,https://psicode.org,https://github.com/psi4/psi4/issues/2880,1,['perform'],['performed']
Performance,"this PR is ready to go; - fix uninitialized variables in dfocc affecting UHF calcs. @bozkaya should review; - fix bug where default `cepa(0)` was routing to qcisd instead of cepa; - fix bug where dfocc `cepa(0)` with `DF` was getting orbital-optimized; - added test case that compares mp2 calcs btwn occ/fnocc/detci/dfmp2. rohf conv still broken btwn detci and occ, but not addressed here",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/270:242,optimiz,optimized,242,https://psicode.org,https://github.com/psi4/psi4/pull/270,1,['optimiz'],['optimized']
Performance,"this error message:; ```; 			-----------------------------------------; 			 OPTKING 2.0: for geometry optimizations ; 			 - R.A. King, Bethel University ; 			-----------------------------------------. 	Internal coordinates to be generated automatically.; 	Detected frag 1 with atoms: 1 2 3 4 5 6; 	---Fragment 1 Bond Connectivity---; 	 1 : 2 3 4 5 6; 	 2 : 1; 	 3 : 1; 	 4 : 1; 	 5 : 1; 	 6 : 1. 	---Fragment 1 Geometry and Gradient---; 	 P -0.0023608120 0.0035185828 -0.0004777490; 	 CL -0.0327154829 4.0184477322 -0.0498581826; 	 CL -0.0112576427 -4.0192302534 0.0560609672; 	 CL 1.8729977331 -0.0589160789 -3.3343855050; 	 CL -3.8346895047 -0.0142013792 0.0750942888; 	 CL 2.0077559933 0.0707833845 3.2535115991; 	 0.0005829612 0.0007979689 -0.0000766467; 	 -0.0000438567 -0.0088149216 0.0011960655; 	 -0.0004768815 0.0083220457 -0.0009627395; 	 -0.0039049377 -0.0010136595 0.0075335979; 	 0.0080187099 -0.0002965760 -0.0001586710; 	 -0.0042975334 0.0010502310 -0.0074582594. 	Previous optimization step data not found. Starting new optimization. 	---Fragment 1 Intrafragment Coordinates---; 	 - Coordinate - - BOHR/RAD - - ANG/DEG -; 	 R(1,2) = 4.015348	 2.124830; 	 R(1,3) = 4.023156	 2.128962; 	 R(1,4) = 3.825678	 2.024461; 	 R(1,5) = 3.833115	 2.028397; 	 R(1,6) = 3.825381	 2.024305; 	 L(2,1,3) = 3.131665	 179.431194; 	 l(2,1,3) = 3.141593	 180.000000; 	 B(2,1,4) = 1.580103	 90.533252; 	 B(2,1,5) = 1.568103	 89.845687; 	 B(2,1,6) = 1.567648	 89.819597; 	 B(3,1,4) = 1.567809	 89.828837; 	 B(3,1,5) = 1.563686	 89.592600; 	 B(3,1,6) = 1.577586	 90.389033; 	 B(4,1,5) = 2.102739	 120.478052; 	 B(4,1,6) = 2.076003	 118.946205; 	 B(5,1,6) = 2.104437	 120.575361. 	Current energy : -2642.5785393886. 	Generating empirical Hessian (Schlegel '84) for each fragment.; 	Taking RFO optimization step.; 	Going to follow RFO solution 1.; 	Using RFO vector 1.; 	Norm of target step-size 0.09446; 	Projected energy change by RFO approximation: -0.0037947424. 	Back-transformation to cartesian coordina",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1265:1470,optimiz,optimization,1470,https://psicode.org,https://github.com/psi4/psi4/issues/1265,1,['optimiz'],['optimization']
Performance,this example with Bismuth. ```; molecule mol {; 0 1; O 2.92770 0.06060 -0.10810; Bi 2.42590 -1.82250 0.36000; O 1.18530 -0.57340 0.62950; C 0.28120 0.33690 0.82590; C 0.90790 1.68810 0.95220; O -0.93190 0.11800 0.90030; H 1.58840 1.65300 1.79070; H 0.16190 2.44800 1.16540; H 1.41360 1.98520 0.04650; }. set reference rks; set scf_type df; set basis def2-SV(P); E = optimize('pbe'). ```; fails to add ECP gradient terms. from log output:; ```; ==> Adding ECP gradient terms (computed numerically) <==; Failed to converge:; Failed to converge:; Failed to converge:; Failed to converge:; Failed to converge:; Failed to converge:; Failed to converge:; Failed to converge:; Failed to converge:; Failed to converge:; Failed to converge:; Failed to converge:; Failed to converge:; Failed to converge:; Failed to converge:; Failed to converge:; Failed to converge:; ```. Which I guess is leading to the failure of the optimization in the end.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1704:366,optimiz,optimize,366,https://psicode.org,https://github.com/psi4/psi4/issues/1704,2,['optimiz'],"['optimization', 'optimize']"
Performance,"tility by Mike Deible and Vladimir Konjkov, which can convert files written in the quasi-standard MOLDEN format into casino’s gwfn.data format.; But in the case of a multideterminant wave function additional data described in [CASINO documentation](https://casinoqmc.net/casino_manual_dir/casino_manual.pdf) **7.4.5 Excitations and multideterminant-expansion coefficients** are required.; The data has the following form and is written to a file **correlation.data**. ```; START MDET; Title; multideterminant WFN generated from Psi4 output data. ! some title; ! empty string or ignored; MD; 3 ! Number of dets; 0.972011 1 0 ! c_1 ; group label for simultaneous optimization ; opt-flag (0 - False; 1 - True); -0.166123 2 1 ! c_2 ; group label for simultaneous optimization ; opt-flag; -0.166123 2 1 ! c_3 ; group label for simultaneous optimization ; opt-flag; DET 2 1 PR 2 1 4 1 ! 2-nd det, up-electron ; PRomote electron from 2-nd orb to 4-th; DET 2 2 PR 2 1 4 1 ! 2-nd det, down-electron ; PRomote electron from 2-nd orb to 4-th; DET 3 1 PR 2 1 5 1 ! 3-nd det, up-electron ; PRomote electron from 2-nd orb to 5-th; DET 3 2 PR 2 1 5 1 ! 3-nd det, down-electron ; PRomote electron from 2-nd orb to 5-th; END MDET. ```; 1. comments behind ! are ignored; 2. Not required c_1<sup>2</sup> + c_2<sup>2</sup> + c_3<sup>2</sup> to be equal to one, only relative weights.; 3. This file defines the following wave function if orbital order in MOLDEN file is: ψ1, ψ2, ψ3 (ROHF case) and r<sub>1</sub>-r<sub>3</sub> for up-electrons, r<sub>4</sub>, r<sub>5</sub> for down-electrons in boron atom:. 0.972011 * |ψ1(r<sub>1</sub>), ψ2(r<sub>2</sub>), ψ3(r<sub>3</sub>)| * |ψ1(r<sub>4</sub>), ψ2(r<sub>5</sub>)|; -0.166123 * |ψ1(r<sub>1</sub>), ψ4(r<sub>2</sub>), ψ3(r<sub>3</sub>)| * |ψ4(r<sub>4</sub>), ψ2(r<sub>5</sub>)|; -0.166123 * |ψ1(r<sub>1</sub>), ψ5(r<sub>2</sub>), ψ3(r<sub>3</sub>)| * |ψ5(r<sub>4</sub>), ψ2(r<sub>5</sub>)|; ; PRomotion replace the specified orbital at its original position with the re",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3235:1202,optimiz,optimization,1202,https://psicode.org,https://github.com/psi4/psi4/issues/3235,1,['optimiz'],['optimization']
Performance,"timized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x0, kwargs=0x5589d8ccc008, ; kwcount=<optimized out>, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name='optimize', qualname='optimize') at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #41 0x00007faabd653e23 in _PyFunction_Vectorcall (func=<optimized out>, stack=0x5589d8ccc000, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:435; #42 0x00007faabd64624d in _PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x5589d8ccc000, callable=<function at remote 0x7faa87367040>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Include/cpython/abstract.h:127; #43 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, tstate=0x5589d803e680) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4963; #44 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3500; #45 0x00007faabd644d54 in PyEval_EvalFrameEx (throwflag=0, f=Frame 0x5589d8ccbe90, for file <string>, line 295, in <module> ()); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #46 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x0, kwargs=0x0, ; kwcount=<optimized out>, kwstep=2, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name=0x0, qualname=0x0) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #47 0x00007faabd6bfe79 in PyEval_EvalCodeEx (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kws=<optimized out>, ; kwcount=0, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:14006,optimiz,optimized,14006,https://psicode.org,https://github.com/psi4/psi4/issues/2010,2,['optimiz'],['optimized']
Performance,"ting tripped up because in the past I was able to install rdkit into a env with psi4 but not now apparently. from `mamba install psi4 psi4-rt python=3.6 -c psi4'; `. __ __ __ __; / \ / \ / \ / \; / \/ \/ \/ \; ███████████████/ /██/ /██/ /██/ /████████████████████████; / / \ / \ / \ / \ \____; / / \_/ \_/ \_/ \ o \__,; / _/ \_____/ `; |/; ███╗ ███╗ █████╗ ███╗ ███╗██████╗ █████╗; ████╗ ████║██╔══██╗████╗ ████║██╔══██╗██╔══██╗; ██╔████╔██║███████║██╔████╔██║██████╔╝███████║; ██║╚██╔╝██║██╔══██║██║╚██╔╝██║██╔══██╗██╔══██║; ██║ ╚═╝ ██║██║ ██║██║ ╚═╝ ██║██████╔╝██║ ██║; ╚═╝ ╚═╝╚═╝ ╚═╝╚═╝ ╚═╝╚═════╝ ╚═╝ ╚═╝. mamba (1.4.1) supported by @QuantStack. GitHub: https://github.com/mamba-org/mamba; Twitter: https://twitter.com/QuantStack. █████████████████████████████████████████████████████████████. Looking for: ['psi4', 'psi4-rt', 'python=3.6']. pkgs/main/linux-64 Using cache; pkgs/main/noarch Using cache; pkgs/r/linux-64 Using cache; pkgs/r/noarch Using cache; psi4/linux-64 No change; psi4/noarch No change; Could not solve for environment specs; The following packages are incompatible; ├─ psi4 is installable with the potential options; │ ├─ psi4 [1.0.0|1.0.24|...|1.0rc216] would require; │ │ └─ pychemps2 >=1.7.1 with the potential options; │ │ ├─ pychemps2 [1.8.10|1.8.11|1.8.9] would require; │ │ │ └─ chemps2 [1.8.10 hbe8a562_0|1.8.11 hbe8a562_0|1.8.9 h8c3debe_0], which requires; │ │ │ └─ blas 1.0 mkl, which can be installed;; │ │ ├─ pychemps2 1.7.1 would require; │ │ │ └─ chemps2 1.7.1 , which requires; │ │ │ └─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ │ └─ pychemps2 1.8.3 would require; │ │ └─ chemps2 1.8.3 , which requires; │ │ └─ hdf5 1.8.17 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [0.0.10|0.1.100|...|0.5.0] would require; │ │ └─ python 2.7* , which can be installed;; │ ├─ psi4 1.1+add49b9 would require; │ │ └─ gcc-5-mp , which requires; │ │ └─ mpc 1.0.1 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [1.2+9d4a6",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2912:1187,cache,cache,1187,https://psicode.org,https://github.com/psi4/psi4/issues/2912,4,['cache'],['cache']
Performance,"tion='D_CONVERGENCE', module='SCF', value_global=<float at remote 0x7faa8746f8d0>, haschanged_global=False, value_local=<float at remote 0x7faa8746f530>, haschanged_local=False, value_used=<float at remote 0x7faa8746f8b0>, haschanged_used=False) at remote 0x7faa8737d460>, ('E_CONVERGENCE',): <OptionState(option='E_CONVERGENCE', module=None, value_global=<float at remote 0x7faa8746f990>, haschanged_global=False, value_local=None, haschanged_local=N...(truncated)) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #34 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x7faa873651d8, ; kwargs=0x7faa874b9f18, kwcount=<optimized out>, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name='gradient', qualname='gradient'); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #35 0x00007faabd653e23 in _PyFunction_Vectorcall (func=<optimized out>, stack=0x7faa874b9f10, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:435; #36 0x00007faabd65ca90 in PyVectorcall_Call (callable=<function at remote 0x7faa87366e50>, tuple=<optimized out>, kwargs=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:199; #37 0x00007faabd6481e9 in do_call_core (kwdict={'return_wfn': True, 'molecule': <psi4.core.Molecule at remote 0x7faa8737c400>, 'opt_iter': 1}, callargs=('hf',), ; func=<function at remote 0x7faa87366e50>, tstate=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:5010; #38 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3559; #39 0x00007faabd644d54 in PyEval_EvalFrameEx (throwflag=0, ; f=Frame 0x5589d8cda850, for file /home/work/psi4/install.susi/lib/psi4/driver/driver.py, line 1824, in optimize (name='hf', kwargs={'opt_iter': 1}, engine='optking', l",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:11017,optimiz,optimized,11017,https://psicode.org,https://github.com/psi4/psi4/issues/2010,3,['optimiz'],['optimized']
Performance,"top of output file for psi4 version (I'm using psi4 in WSL, reinstalled today by running the commands on http://www.psicode.org/downloads.html):; ```; Psi4 1.3.2 release. Git: Rev {HEAD} ecbda83 ; ```. towards the end of the output:; ```; ==> Convergence Check <==. Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; ---------------------------------------------------------------------------------------------; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ; ---------------------------------------------------------------------------------------------; Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o; ---------------------------------------------------------------------------------------------; 2 -232.08477729 -4.57e-04 2.31e-04 * 9.07e-05 o 6.20e-04 * 2.31e-04 o ~; ---------------------------------------------------------------------------------------------. **** Optimization is complete! (in 2 steps) ****. ==> Optimization Summary <==. Measures of convergence in internal coordinates in au.; --------------------------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------------------------- ~; 1 -232.084319861329 -232.084319861329 0.00763634 0.00254450 0.02132377 0.00710535 ~; 2 -232.084777290884 -0.000457429555 0.00023074 0.00009069 0.00061967 0.00023101 ~; --------------------------------------------------------------------------------------------------------------- ~; ```. If change the convergence criteria by adding to my input file; ```; set {; max_energy_g_convergence 1e-6; }; ```. or ; ```; set {; g_convergence MOLPRO; }; ```. the optimization goes for three steps before converging properly:; ```; ==> Convergence Check <==. Measures of convergence in internal coordin",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1947:1635,Optimiz,Optimization,1635,https://psicode.org,https://github.com/psi4/psi4/issues/1947,1,['Optimiz'],['Optimization']
Performance,"tp://psicode.org/psi4manual/1.1/conda.html?highlight=conda) with `conda create -n p4env python=3.6 psi4 psi4-rt -c psi4/label/dev -c psi4`. I can `import psi4` correctly using the python interactive shell. ```bash; $ source activate p4env; $ python; ```; ```python; Python 3.6.3 | packaged by conda-forge | (default, Nov 4 2017, 10:10:56) ; [GCC 4.8.2 20140120 (Red Hat 4.8.2-15)] on linux; Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.; >>> import sys; >>> sys.executable; '/home/xxx/data/applications/anaconda3/envs/p4env/bin/python'; >>> sys.path; ['', '/home/xxx/data/applications/anaconda3/envs/p4env/lib/python36.zip', '/home/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6', '/home/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6/lib-dynload', '/home/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6/site-packages']; >>> import psi4; /home/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; ```. If I run inside a notebook, `sys.path` and `sys.executable` are the same, but when I `import psi4`, I get a message ""The kernel appears to have died. It will restart automatically."" In the terminal, I see: ; ```; [I 17:41:23.834 NotebookApp] Adapting to protocol v5.1 for kernel 56076279-b2b7-4f6a-8fb0-83b5b1f774c4; [IPKernelApp] ERROR | No such comm target registered: jupyter.widget.version; [IPKernelApp] ERROR | No such comm target registered: jupyter.widget.version; terminate called after throwing an instance of 'std::bad_cast'; what(): std::bad_cast; [I 17:41:41.146 NotebookApp] KernelRestarter: restarting kernel (1/5); ```. I think the first three lines are unrelated. The kernel never recovers and I can't import the module. Should I expect that Psi4 will work inside a `jupyter notebook` and if so, is there any way to get more information about what's going wrong?. **Edit:** I should add that to get `jupyter notebook` to see the `p4env` conda environment, I executed `con",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/862:1297,load,loaded,1297,https://psicode.org,https://github.com/psi4/psi4/issues/862,1,['load'],['loaded']
Performance,"trons = 10; Nalpha = 5; Nbeta = 5. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is CORE.; Energy threshold = 1.00e-08; Density threshold = 1.00e-08; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: AUG-CC-PVTZ; Number of shells: 14; Number of basis function: 46; Number of Cartesian functions: 55; Spherical Harmonics?: true; Max angular momentum: 3. ==> Pre-Iterations <==. ---. ```; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; ```. ---. ```; Ag 11 11 0 0 0 0; B1g 3 3 0 0 0 0; B2g 3 3 0 0 0 0; B3g 3 3 0 0 0 0; Au 2 2 0 0 0 0; B1u 8 8 0 0 0 0; B2u 8 8 0 0 0 0; B3u 8 8 0 0 0 0; ```. ---. ```; Total 46 46 5 5 5 0; ```. ---. Starting with a DF guess... OEINTS: Overlap, kinetic, potential, dipole, and quadrupole integrals; stored in file 35. ==> Integral Setup <==. ==> DFJK: Density-Fitted J/K Matrices <==. ```; J tasked: Yes; K tasked: Yes; wK tasked: No; OpenMP threads: 12; Integrals threads: 12; Memory (MB): 34332; Algorithm: Core; Integral Cache: NONE; Schwarz Cutoff: 1E-12; Fitting Condition: 1E-12; ```. => Auxiliary Basis Set <=. Basis Set:; Number of shells: 30; Number of basis function: 104; Number of Cartesian functions: 131; Spherical Harmonics?: true; Max angular momentum: 4. Minimum eigenvalue in the overlap matrix is 2.8456599490E-02.; Using Symmetric Orthogonalization.; SCF Guess: Core (One-Electron) Hamiltonian. ==> Iterations <==. ```; Total Energy Delta E RMS |[F,P]|; ```. @DF-RHF iter 1: -84.75156121243363 -8.47516e+01 4.62678e-01; @DF-RHF iter 2: -84.57553975935072 1.76021e-01 1.57599e-01 DIIS; @DF-RHF iter 3: -95.37276589956019 -1.07972e+01 2.29222e-01 DIIS; @DF-RHF iter 4: -98.17150610513394 -2.79874e+00 1.13514e-01 DIIS; @DF-RHF iter 5: -99.36228201796470 -1.19078e+00 2.49350e-02 DIIS; @DF-RHF iter 6: -99.44980963420196 -8.75276e-02 2.84013e-03 DIIS; @DF-RHF iter 7: -99.45076800401445 -9.58370e-04 5.43402e-04 DIIS; @DF-RHF iter 8: -99.45080520800713 -3.72040e-05 3.28",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/204:4655,Cache,Cache,4655,https://psicode.org,https://github.com/psi4/psi4/issues/204,1,['Cache'],['Cache']
Performance,ts Fortran 90; -- Checking whether /usr/local/bin/gfortran supports Fortran 90 -- yes; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/36:2188,Perform,Performing,2188,https://psicode.org,https://github.com/psi4/psi4/issues/36,1,['Perform'],['Performing']
Performance,"ts/runtest.py"" ""/Users/bsenjean/Documents/Git_repositories/psi4/tests/nbody-convergence/input.dat"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/testresults.log"" ""false"" ""/Users/bsenjean/Documents/Git_repositories/psi4"" ""false"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/tests/nbody-convergence/output.dat"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/bin/psi4"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/share/psi4"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/""; Directory: /Users/bsenjean/Documents/Git_repositories/psi4/objdir/tests/nbody-convergence; ""nbody-convergence"" start time: Apr 16 15:44 CEST; Output:. Traceback (most recent call last):; File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/__init__.py"", line 55, in <module>; from . import core; ImportError: dlopen(/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so, 2): Library not loaded: @rpath/libiomp5.dylib; Referenced from: /Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so; Reason: image not found. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/bin/psi4"", line 184, in <module>; import psi4; File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/__init__.py"", line 60, in <module>; raise ImportError(""{0}"".format(err)); ImportError: dlopen(/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so, 2): Library not loaded: @rpath/libiomp5.dylib; Referenced from: /Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so; Reason: image not found; Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); <end of output>; Test time = 0.40 sec. Test Failed.; ""nbody-convergence"" end t",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1870:1908,load,loaded,1908,https://psicode.org,https://github.com/psi4/psi4/issues/1870,1,['load'],['loaded']
Performance,"ues of ; `E_CONVERGENCE`,`MAX_MOGRAD_CONVERGENCE`, `RMS_MOGRAD_CONVERGENCE` does not produce the expected behavior. . Rather than requiring `RMS_MOGRAD <= RMS_MOGRAD_CONVERGENCE`, `MAX_MOGRAD <= MAX_MOGRAD_CONVERGENCE`, `DE <= E_CONVERGENCE` to ALL evaluate to `True`, convergence is declared if EITHER `DE <= E_CONVERGENCE` or the MOGRAD convergence is met. . This leads to situations where tightening `MAX_MOGRAD_CONVERGENCE` has no effect on the result of the calculation, and convergence is declared when `MAX_MOGRAD` is higher than the convergence criterion. As far as I can tell, the offending lines of code are in occ_iterations.cc L279:282:; ```; if (wfn_type_ != ""DF-OLCCD"") {; if (rms_wog < tol_grad && biggest_mograd < mograd_max) break;; if (std::fabs(DE) <= tol_Eod) break;; }; ```. Removing these lines fixes my issue, but as I am unclear about the purpose of this code block perhaps that is not the best fix. With original code:; ```; ==============================================================================; ================ Performing DF-OMP2 iterations... ============================; ==============================================================================; Minimizing DF-MP2-L Functional; ------------------------------; Iter E_total DE RMS MO Grad MAX MO Grad RMS T2; ---- --------------- ---------- ----------- ----------- ----------; 1 -76.2055179040 -1.60e-03 3.84e-04 1.53e-03 5.38e-05; 2 -76.2055243130 -6.41e-06 3.88e-05 2.04e-04 5.14e-06. ==============================================================================; ======================== DF-OMP2 ITERATIONS ARE CONVERGED ====================; ==============================================================================; ```. With lines removed/commented (EXECUTING LOOP print statements added by me during debugging, ignore them):; ```; ==============================================================================; ================ Performing DF-OMP2 iterations... ============================; ===",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1143:1086,Perform,Performing,1086,https://psicode.org,https://github.com/psi4/psi4/issues/1143,1,['Perform'],['Performing']
Performance,"unction_call (func=0x7fffef2128c0, arg=0x7ffff7eace10, kw=0x7fffef1a75f0) at Objects/funcobject.c:633; #25 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x7fffef2128c0, arg=arg@entry=0x7ffff7eace10, kw=kw@entry=0x7fffef1a75f0) at Objects/abstract.c:2084; #26 0x00007ffff5148044 in ext_do_call (nk=<optimized out>, na=<optimized out>, flags=<optimized out>, pp_stack=0x7fffffffdf48, func=0x7fffef2128c0); at Python/ceval.c:4378; #27 PyEval_EvalFrameEx (f=f@entry=0x2982860, throwflag=throwflag@entry=0) at Python/ceval.c:2720; #28 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7fffefef5e40, globals=<optimized out>, locals=locals@entry=0x0, args=<optimized out>, ; argcount=argcount@entry=1, kws=0x28d54e8, kwcount=0, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0) at Python/ceval.c:3433; #29 0x00007ffff514b004 in fast_function (nk=<optimized out>, na=1, n=<optimized out>, pp_stack=0x7fffffffe160, func=<optimized out>) at Python/ceval.c:4161; #30 call_function (oparg=<optimized out>, pp_stack=0x7fffffffe160) at Python/ceval.c:4084; #31 PyEval_EvalFrameEx (f=f@entry=0x28d5360, throwflag=throwflag@entry=0) at Python/ceval.c:2679; #32 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0, ; args=args@entry=0x0, argcount=argcount@entry=0, kws=kws@entry=0x0, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, ; kwdefs=kwdefs@entry=0x0, closure=closure@entry=0x0) at Python/ceval.c:3433; #33 0x00007ffff514d33b in PyEval_EvalCode (co=co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0); at Python/ceval.c:771; #34 0x00007ffff51669e4 in run_mod (mod=<optimized out>, filename=filename@entry=0x7ffff51bde72 ""<string>"", globals=globals@entry=0x7ffff7ed07a0, ; locals=locals@entry=0x7ffff7ed07a0, flags=flags@entry=0x0, arena=arena@entry=0x28ca640) at Python/pythonrun.c:1981; #35 0x00007ffff5168335 in PyRun_StringFlags (str",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12:5795,optimiz,optimized,5795,https://psicode.org,https://github.com/psi4/psi4/issues/12,1,['optimiz'],['optimized']
Performance,"unctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; __________________________________________________________________ test_psi4_cc __________________________________________________________________. def test_psi4_cc():; """"""cc1""""""; #! RHF-CCSD 6-31G** all-electron optimization of the H2O molecule; ; h2o = psi4.geometry(""""""; O; H 1 0.97; H 1 0.97 2 103.0; """"""); ; psi4.set_options({""basis"": '6-31G**'}); ; > psi4.optimize('ccsd'). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py:63: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:1050: in optimize; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:697: in gradient; E, wfn = energy(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:752: in select_ccsd; return func(name, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:2953: in run_detci; ref_wfn = scf_helper(name, **kwargs) # C1 certified; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1251: in scf_helper; scf_wfn = scf_wavefunction_factory(core.get_option('SCF', 'REFERENCE'), base_wfn); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . reference",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:28752,optimiz,optimize,28752,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['optimiz'],['optimize']
Performance,"unsigned long, psi::psio_address, psi::psio_address*); psi::PSIO::write_entry(unsigned long, char const*, char*, unsigned long); psi::psio_write_entry(unsigned long, char const*, char*, unsigned long); ```; This then results in a second PSIO error upon each subsequent optimization iteration, when attempting to read the binary optimization data from file:; ```; Fatal Error: PSIO Error; Error occurred in file: /theoryfs2/ds/sirianni/Gits/psi4/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::psio_error(unsigned long, unsigned long); psi::PSIO::open(unsigned long, int); psi::psio_open(unsigned long, int); opt::opt_io_is_present(); ```; This finally results in the optimizer spinning its wheels for the remainder of the allotted iterations. The usual PSIO error-culprit, an un-touchable filesystem, was ruled out for both machines on which this behavior was observed. Input:; ```; # index A24-7-dimer label Dimer from ammmonia_methane_C3v. memory 14000 mb. molecule mol {; units Angstrom; no_com; no_reorient; 0 1; N 0.001106462041 -0.000130846927 1.849133409958; H 0.938627974105 -0.000139345380 2.221618285244; H -0.467316580071 -0.811849948182 2.222477040520; H -0.467307391010 0.811579719379 2.222474714333; H -0.000457075852 -0.000011938197 -0.942103507206; C -0.001019750816 0.000109523659 -2.027776337389; H 0.509840850903 0.885353515687 -2.394362733084; H 0.509834400679 -0.885039296153 -2.394623104348; H -1.023308879978 0.000128616114 -2.393761958029. }. set e_convergence 11; set basis cc-pvtz; set scf guess sad; set scf dft_radial_points 150; set scf scf_type df; set scf dft_spherical_points 434; set scf maxiter 100; set guess_persist true; set geom_maxiter 300. set optking {; dynamic_level=1; full_hess_every 0; max_energy_g_convergence 1e-6; max_force_g_convergence 1.5e-5; rms_force_g_convergence 1e-5; max_disp_g_convergence 6e-4; rms_disp_g_convergence 4e-4; }. optimize('m05-2x'); ``` . Thanks in advance for any assistance, everyone!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/789:2491,optimiz,optimize,2491,https://psicode.org,https://github.com/psi4/psi4/issues/789,1,['optimiz'],['optimize']
Performance,"up-multiarch-c12/share/psi4/basis/def2-svp.gbs; atoms 7, 9, 11, 19, 21, 23 entry O line 130 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs; atoms 8, 10, 12, 20, 22, 24 entry H line 15 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs. Psi4 stopped on: Tuesday, 18 September 2018 03:03PM; Psi4 wall time for execution: 1 day, 4:22:27.10. *** Psi4 exiting successfully. Buy a developer a beer!; --------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / aug-cc-pvqz -1007.18544968 xtpl_highest_1; corl mp2 / aug-cc-pv[tq]z -3.93422466 corl_xtpl_helgaker_2; delta fno-ccsd(t) - mp2 / aug-cc-pvdz -4.79308051 xtpl_highest_1; total CBS -1015.91275485; ---------------------------------------------------------------------------------------------------------; => Loading Basis Set <=. Name: DEF2-SVP; Role: ORBITAL; Keyword: BASIS; atoms 1, 3, 5, 13, 15, 17 entry N line 110 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs; atoms 2, 4, 6, 14, 16, 18 entry C line 90 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs; atoms 7, 9, 11, 19, 21, 23 entry O line 130 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs; atoms 8, 10, 12, 20, 22, 24 entry H line 15 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs. Psi4 stopped on: Tuesday, 18 September 2018 01:43PM; Psi4 wall time for execution: 1 day, 3:02:31.40. *** Psi4 exiting successfully. Buy a developer a beer!; ```. Note that the latter output, which is wrong, supposedly finished before the former. I have seen this behavior when running 6-core jobs in various different ma",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1279:2481,Load,Loading,2481,https://psicode.org,https://github.com/psi4/psi4/issues/1279,1,['Load'],['Loading']
Performance,"ut>, kwnames=0x7faa87365d18, ; kwargs=0x7faa8746fd98, kwcount=<optimized out>, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name='run_scf_gradient', qualname='run_scf_gradient'); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #29 0x00007faabd653e23 in _PyFunction_Vectorcall (func=<optimized out>, stack=0x7faa8746fd90, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:435; #30 0x00007faabd65ca90 in PyVectorcall_Call (callable=<function at remote 0x7faa8748c1f0>, tuple=<optimized out>, kwargs=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:199; #31 0x00007faabd6481e9 in do_call_core (kwdict={'molecule': <psi4.core.Molecule at remote 0x7faa8737c400>, 'opt_iter': True}, callargs=('hf',), func=<function at remote 0x7faa8748c1f0>, ; tstate=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:5010; #32 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3559; #33 0x00007faabd6453f4 in PyEval_EvalFrameEx (throwflag=0, ; f=Frame 0x5589d8c47070, for file /home/work/psi4/install.susi/lib/psi4/driver/driver.py, line 973, in gradient (name='hf', kwargs={'opt_iter': True}, gradient_type='conventional', dertype=1, optstash=<OptionsState(data={('E_CONVERGENCE', 'SCF'): <OptionState(option='E_CONVERGENCE', module='SCF', value_global=<float at remote 0x7faa8746f890>, haschanged_global=False, value_local=<float at remote 0x7faa8746f830>, haschanged_local=False, value_used=<float at remote 0x7faa8746f870>, haschanged_used=False) at remote 0x7faa8737d490>, ('D_CONVERGENCE', 'SCF'): <OptionState(option='D_CONVERGENCE', module='SCF', value_global=<float at remote 0x7faa8746f8d0>, haschanged_global=False, value_local=<float at remote 0x7faa8746f530>, haschanged_local=False, value_used=<float at remote 0x7faa8746f8b0>, haschanged_used=False) at remote 0x7faa8737d46",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:9297,optimiz,optimized,9297,https://psicode.org,https://github.com/psi4/psi4/issues/2010,2,['optimiz'],['optimized']
Performance,"ved on Python 2 when using; Python 3. Returns; -------; array : ndarray; The array from the data on disk. Raises; ------; ValueError; If the data is invalid, or allow_pickle=False and the file contains; an object array. """"""; version = read_magic(fp); _check_version(version); shape, fortran_order, dtype = _read_array_header(fp, version); if len(shape) == 0:; count = 1; else:; count = numpy.multiply.reduce(shape, dtype=numpy.int64). # Now read the actual data.; if dtype.hasobject:; # The array contained Python objects. We need to unpickle the data.; if not allow_pickle:; > raise ValueError(""Object arrays cannot be loaded when ""; ""allow_pickle=False""); E ValueError: Object arrays cannot be loaded when allow_pickle=False. miniconda3/envs/psi/lib/python3.6/site-packages/numpy/lib/format.py:692: ValueError; _____________________________________________________ test_psi4_cc _____________________________________________________. @pytest.mark.smoke; def test_psi4_cc():; """"""cc1""""""; #! RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. psi4.core.clean(); h2o = psi4.geometry(""""""; O; H 1 0.97; H 1 0.97 2 103.0; """"""). psi4.set_options({""basis"": '6-31G**'}). > psi4.optimize('ccsd'). miniconda3/envs/psi/lib/python3.6/site-packages/psi4/tests/test_psi4.py:39:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; miniconda3/envs/psi/lib/python3.6/site-packages/psi4/driver/driver.py:1052: in optimize; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); miniconda3/envs/psi/lib/python3.6/site-packages/psi4/driver/driver.py:691: in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); miniconda3/envs/psi/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:784: in select_ccsd_gradient; return func(name, **kwargs); miniconda3/envs/psi/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:2314: in run_ccenergy_gradient; ccwfn = run_c",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1611:3554,optimiz,optimization,3554,https://psicode.org,https://github.com/psi4/psi4/issues/1611,1,['optimiz'],['optimization']
Performance,"wfn': True, 'molecule': <psi4.core.Molecule at remote 0x7faa8737c400>, 'opt_iter': 1}, callargs=('hf',), ; func=<function at remote 0x7faa87366e50>, tstate=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:5010; #38 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3559; #39 0x00007faabd644d54 in PyEval_EvalFrameEx (throwflag=0, ; f=Frame 0x5589d8cda850, for file /home/work/psi4/install.susi/lib/psi4/driver/driver.py, line 1824, in optimize (name='hf', kwargs={'opt_iter': 1}, engine='optking', lowername='hf', custom_gradient=False, return_wfn=False, return_history=False, full_hess_every=-1, steps_since_last_hessian=0, hessian_with_method='hf', optstash=<OptionsState(data={('INTRAFRAG_STEP_LIMIT', 'OPTKING'): <OptionState(option='INTRAFRAG_STEP_LIMIT', module='OPTKING', value_global=<float at remote 0x7faa8746f6d0>, haschanged_global=False, value_local=<float at remote 0x7faa8746fe10>, haschanged_local=False, value_used=<float at remote 0x7faa8746fad0>, haschanged_used=False) at remote 0x7faaaffd1cd0>, ('HESSIAN_WRITE', 'FINDIF'): <OptionState(option='HESSIAN_WRITE', module='FINDIF', value_global=0, haschanged_global=False, value_local=0, haschanged_local=False, value_used=0, haschanged_used=False) at remote 0x7faaaffd1d60>, ('CART_HESS_READ', 'OPTKING'): <OptionState(option='CART_HESS_READ', module='OPTKING', value_global=0, haschanged_g...(truncated)) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #40 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x0, kwargs=0x5589d8ccc008, ; kwcount=<optimized out>, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name='optimize', qualname='optimize') at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #41 0x00007faabd653e23 in _PyFunction_Vectorcall (func=<optimized out>, sta",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:11979,optimiz,optimize,11979,https://psicode.org,https://github.com/psi4/psi4/issues/2010,1,['optimiz'],['optimize']
Performance,"x-gnu.so] Error 1; make[4]: *** [CMakeFiles/Makefile2:1259: src/CMakeFiles/core.dir/all] Error 2; make[3]: *** [Makefile:149: all] Error 2; make[2]: *** [CMakeFiles/psi4-core.dir/build.make:137: psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; make[1]: *** [CMakeFiles/Makefile2:11978: CMakeFiles/psi4-core.dir/all] Error 2; make: *** [Makefile:160: all] Error 2```; Steps to reproduce:; - clone the current repository to a new directory; - configure with cmake (i tried both cmake 3.19.4 and 3.23.1). I used `cmake -S. -Bobjdir -DCMAKE_INSTALL_PREFIX=~/prog/psi4/master -DPython_EXECUTABLE=/usr/bin/python3.9 -DBLAS_TYPE=OPENBLAS -DPython_LIBRARY=/usr/lib/python3.9 -DPython_INCLUDE_DIR=/usr/include/python3.9`; - change to objdir, run `make` and grab a coffee; - I tried it both with gcc 10.3.0 and gcc 11.2.1, the result is identical. The issue sees to be related to libint2. The strange thing i that at the beginning of the compilation step of libint, there is a warning; ```; ...; CMake Warning:; Manually-specified variables were not used by the project:. BUILD_FPIC; ENABLE_XHOST. -- Build files have been written to: /scr/behnle/psi4_clean_cmake_3.19/psi4/objdir/external/upstream/libint2/libint2_external-prefix/src/libint2_external-build; [ 82%] Performing build step for 'libint2_external'; Scanning dependencies of target int-obj; [ 0%] Building CXX object CMakeFiles/int-obj.dir/Unity/unity_2001_cxx.cxx.o; ...; ```. Full outputs of cmake and make are attached. There is furthermore an issue with the adcc plugin. This plugin cannot be built anymore with -DENABLE_adcc=ON as on one hand, PSI4 requires a C++-17 compiler (and this standard seems to be enforced), on the other hand, there is code in the adcc plugin which violates the C++-17 standard (some `throw()` with variable error message) which leads to compilation errors. Best; Stefan. [make.log](https://github.com/psi4/psi4/files/8651531/make.log); [cmake.log](https://github.com/psi4/psi4/files/8651538/cmake.log)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2572:2175,Perform,Performing,2175,https://psicode.org,https://github.com/psi4/psi4/issues/2572,1,['Perform'],['Performing']
Safety,"	 Coordinate Previous Force Change New ; 	 ---------- -------- ------ ------ ------; 	 1 R(1,2) = 2.124830 0.072797 0.020582 2.145412; 	 2 R(1,3) = 2.128962 0.068599 0.020146 2.149109; 	 3 R(1,4) = 2.024461 0.069553 17.524433 19.548895; 	 4 R(1,5) = 2.028397 0.066233 17.556204 19.584601; 	 5 R(1,6) = 2.024305 0.070720 17.517231 19.541535; 	 6 L(2,1,3) = 179.431194 0.000053 -1.744105 177.687089; 	 7 l(2,1,3) = 180.000000 -0.000770 0.000000 180.000000; 	 8 B(2,1,4) = 90.533252 -0.000595 -1.113535 89.419717; 	 9 B(2,1,5) = 89.845687 -0.000107 -1.005547 88.840140; 	 10 B(2,1,6) = 89.819597 0.000658 1.944389 91.763985; 	 11 B(3,1,4) = 89.828837 -0.000257 2.088415 91.917251; 	 12 B(3,1,5) = 89.592600 -0.000007 -0.737452 88.855147; 	 13 B(3,1,6) = 90.389033 0.000309 -1.148076 89.240958; 	 14 B(4,1,5) = 120.478052 -0.000026 0.003564 120.481615; 	 15 B(4,1,6) = 118.946205 0.000056 0.000429 118.946634; 	 16 B(5,1,6) = 120.575361 -0.000030 -0.003611 120.571750; forrtl: error (76): Abort trap signal; Image PC Routine Line Source ; libgdma.so 00007F4BEF0B510F for__signal_handl Unknown Unknown; libpthread-2.27.s 00007F4C029A7FB0 Unknown Unknown Unknown; libc-2.27.so 00007F4C0260DEAB gsignal Unknown Unknown; libc-2.27.so 00007F4C025F85B9 abort Unknown Unknown; core.cpython-36m- 00007F4BF2B2E25A Unknown Unknown Unknown; core.cpython-36m- 00007F4BF15542FD Unknown Unknown Unknown; core.cpython-36m- 00007F4BF1570541 Unknown Unknown Unknown; core.cpython-36m- 00007F4BF0FFE806 Unknown Unknown Unknown; python3.6 0000556FBA8799E4 _PyCFunction_Fast Unknown Unknown; python3.6 0000556FBA906DFC Unknown Unknown Unknown; python3.6 0000556FBA92B94A _PyEval_EvalFrame Unknown Unknown; python3.6 0000556FBA900206 Unknown Unknown Unknown; python3.6 0000556FBA9011CF Unknown Unknown Unknown; python3.6 0000556FBA906ED5 Unknown Unknown Unknown; python3.6 0000556FBA92B94A _PyEval_EvalFrame Unknown Unknown; python3.6 0000556FBA901CB9 PyEval_EvalCodeEx Unknown Unknown; python3.6 0000556FBA902A4C PyEval_Eval",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1265:3689,Abort,Abort,3689,https://psicode.org,https://github.com/psi4/psi4/issues/1265,1,['Abort'],['Abort']
Safety, -- This disables math detection and builtin math libraries; -- Setting -DHAVE_MKL_BLAS and -DHAVE_MKL_LAPACK; -- System : Linux; -- Processor type : x86_64; -- C++ compiler flags : -DRESTRICT=**restrict** -Xlinker -export-dynamic -fPIC -std=gnu++98 -mkl=parallel -openmp -O3 -no-prec-div -DNDEBUG -xHost; -- C compiler flags : -restrict -DRESTRICT=**restrict** -std=c99 -fPIC -mkl=parallel -openmp -O3 -ip -DNDEBUG -xHost; -- Fortran compiler flags: -w -fpp -assume byterecl -DVAR_IFORT -fPIC -nosave -mkl=parallel -openmp -O3 -ip -xHost; -- Libraries : -mkl=parallel; -- Definitions : USE_FCMANGLE_H;SYS_LINUX;HAVE_MKL_BLAS;HAVE_MKL_LAPACK;HAVE_MPI;HAVE_DKH; -- The CXX compiler identification is Intel 13.1.0.20130121; -- The C compiler identification is Intel 13.1.0.20130121; -- Check for working CXX compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpicxx; -- Check for working CXX compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpicxx -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working C compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpicc; -- Check for working C compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpicc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- The Fortran compiler identification is Intel 13.1.0.20130121; -- Check for working Fortran compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpif77; -- Check for working Fortran compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpif77 -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /opt/intel/impi/5.0.1.035/intel64/bin/mpif77 supports Fortran 90; -- Checking whether /opt/intel/impi/5.0.1.035/intel64/bin/mpif77 supports Fortran 90 -- yes; -- Fortran ENABLED; -- Buggy compiler support for C++11. Using older standard.; -- Checking for restrict keyword; -- keyword found : **restrict**; -- Performing Test has_xHost; -- Performing Test has_xHost - Success; -- ,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/201:5419,Detect,Detecting,5419,https://psicode.org,https://github.com/psi4/psi4/issues/201,2,['Detect'],['Detecting']
Safety," = 2.028397 0.066233 17.556204 19.584601; 	 5 R(1,6) = 2.024305 0.070720 17.517231 19.541535; 	 6 L(2,1,3) = 179.431194 0.000053 -1.744105 177.687089; 	 7 l(2,1,3) = 180.000000 -0.000770 0.000000 180.000000; 	 8 B(2,1,4) = 90.533252 -0.000595 -1.113535 89.419717; 	 9 B(2,1,5) = 89.845687 -0.000107 -1.005547 88.840140; 	 10 B(2,1,6) = 89.819597 0.000658 1.944389 91.763985; 	 11 B(3,1,4) = 89.828837 -0.000257 2.088415 91.917251; 	 12 B(3,1,5) = 89.592600 -0.000007 -0.737452 88.855147; 	 13 B(3,1,6) = 90.389033 0.000309 -1.148076 89.240958; 	 14 B(4,1,5) = 120.478052 -0.000026 0.003564 120.481615; 	 15 B(4,1,6) = 118.946205 0.000056 0.000429 118.946634; 	 16 B(5,1,6) = 120.575361 -0.000030 -0.003611 120.571750; forrtl: error (76): Abort trap signal; Image PC Routine Line Source ; libgdma.so 00007F4BEF0B510F for__signal_handl Unknown Unknown; libpthread-2.27.s 00007F4C029A7FB0 Unknown Unknown Unknown; libc-2.27.so 00007F4C0260DEAB gsignal Unknown Unknown; libc-2.27.so 00007F4C025F85B9 abort Unknown Unknown; core.cpython-36m- 00007F4BF2B2E25A Unknown Unknown Unknown; core.cpython-36m- 00007F4BF15542FD Unknown Unknown Unknown; core.cpython-36m- 00007F4BF1570541 Unknown Unknown Unknown; core.cpython-36m- 00007F4BF0FFE806 Unknown Unknown Unknown; python3.6 0000556FBA8799E4 _PyCFunction_Fast Unknown Unknown; python3.6 0000556FBA906DFC Unknown Unknown Unknown; python3.6 0000556FBA92B94A _PyEval_EvalFrame Unknown Unknown; python3.6 0000556FBA900206 Unknown Unknown Unknown; python3.6 0000556FBA9011CF Unknown Unknown Unknown; python3.6 0000556FBA906ED5 Unknown Unknown Unknown; python3.6 0000556FBA92B94A _PyEval_EvalFrame Unknown Unknown; python3.6 0000556FBA901CB9 PyEval_EvalCodeEx Unknown Unknown; python3.6 0000556FBA902A4C PyEval_EvalCode Unknown Unknown; python3.6 0000556FBA97EC44 Unknown Unknown Unknown; python3.6 0000556FBA97ECDD PyRun_StringFlags Unknown Unknown; python3.6 0000556FBA929312 Unknown Unknown Unknown; python3.6 0000556FBA879921 _PyCFunction_Fast Unknown Unknow",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1265:3947,abort,abort,3947,https://psicode.org,https://github.com/psi4/psi4/issues/1265,1,['abort'],['abort']
Safety," and LAPACK. Somewhat related to the previous point, Psi4 proper needs to know the mangling for LAPACK and BLAS. All distributions of BLAS have a header `cblas.h` (or `mkl-cblas.h` if you are using MKL), which does this for you. Similarly, all versions of LAPACK provide `lapacke.h` (again MKL makes things difficult and calls the header `mkl-lapacke.h`). Hence we really should be using these headers and not the stuff in `libqt` (or we should rewrite `libqt` in terms of those header files). One of the other gotchas of BLAS/LAPACK is detecting the actual libraries. The names are non-standardized and the CMake find_package for them is archaic. For the moment I am using the scripts the old build used to find BLAS/LAPACK. They are somewhat touchy, and overly verbose for my liking, but better than me having to write my own. ~~To my knowledge they don't worry about the Mac Accelerate framework so this is again an issue.~~ @jturney and @dgasmith have both independently confirmed that enabling accelerate is not necessary, because the BLAS and LAPACK the math detection finds on Mac are actually (static links to?) the libraries behind the accelerate framework.; ## Minor Points Not Worth a Paragraph; - exception.h has been moved into libpsi4util to be with its source file; - process.h has been moved into libparallel to be with its source file; - `src/bin/psi4` is now `src/bin/psi4_main` to avoid name conflicts; - `src/bin/efp` is now `src/bin/efp_interface` to avoid name conflicts; - Most ConfigX files are gone. From what I can tell, these files are what should be in the CMakeLists.txt wrapping project X. That's where they now reside. ; - Some options are now gone; - ENABLE_MPI Psi4 proper contains no MPI now, if external projects want to include it that's fine; - ENABLE_OMP I never understood this one, just make it not required; - ~~ENABLE_ACCELERATE FindLAPACK knows about accelerate, if you want to use it ensure it is in your `CMAKE_PREFIX_PATH` variable~~; - Accomplishes #355",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442:10927,detect,detection,10927,https://psicode.org,https://github.com/psi4/psi4/pull/442,3,"['avoid', 'detect']","['avoid', 'detection']"
Safety," cmake -H. -Bobjdir … -Dlibint_DIR=/path/to/libint/share/cmake/libint -Dlibefp_DIR=/path/to/libefp/share/cmake/libefp; ```. Then cmake will detect the previously installed libint/libefp and skip their building. . However, this does not completely work. The initial cmake will indicate `found libint`, then when you go to the build directory and run `make` the `libint_DIR `and `libefp_DIR` argurments are not passed on to cmake for psi4_core and the build errors out with the following message:. ```shell; Performing configure step for 'psi4_core'; loading initial cache file /home/amjames2/newriver/psi4-builds/new-debug/psi4_core-prefix/tmp/psi4_core-cache.cmake; -- The C compiler identification is GNU 5.2.0; -- The CXX compiler identification is GNU 5.2.0; -- Check for working C compiler: /home/amjames2/.conda/envs/py3/bin/gcc; -- Check for working C compiler: /home/amjames2/.conda/envs/py3/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Found PythonInterp: /home/amjames2/.conda/envs/py3/bin/python (found version ""3.5.2"") ; -- Found PythonLibs: /home/amjames2/.conda/envs/py3/lib/libpython3.so; -- Looking for include file pthread.h; -- Looking for include file pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE ; -- Found libdl: /usr/lib64/libdl.so ; CMake Error at CMakeLists.txt:35 (find_package):; Could not find a package configuration file provided by ""libefp"" with any; of the following names:. libefpConfig.cmake; li",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/516:1447,Detect,Detecting,1447,https://psicode.org,https://github.com/psi4/psi4/issues/516,4,['Detect'],['Detecting']
Safety," provides a more useful error message when the issue described in https://github.com/psi4/psi4/issues/2890 is encountered. In short, the COSX K build method breaks with certain grid configurations - specifically, grid configurations which result in negative grid weights. How to best handle that issue - removing such grid configurations from Psi4 entirely, handling negative grid weights differently within COSX itself - is still under discussion, and this PR is _not_ meant to be a final fix to the aforementioned issue. Rather, this PR is meant to provide a more informative error message in the case that an end user _does_ encounter this error. Currently, when this error is encountered, it shows up as either a DGESV error (if the initial COSX grid has negative weights) or an ADIIS minimization error (if the final COSX grid has negative weights). These error outputs don't help the end user figure out what is wrong at all. So, what this PR does, is add sanity checks to ensure that the COSX grids don't have negative weights, and throw an exception if they do. The sanity check exceptions explain to the user what the error is and how they can fix it (i.e., changing the grid pruning scheme and/or number of spherical points). Again, I want to emphasize that this is _not_ intended to be a full fix to https://github.com/psi4/psi4/issues/2890. Rather, it is an intermediate step that is designed to better help end users avoid the problem if they run into it themselves. ## User API & Changelog headlines; N/A. ## Dev notes & details; - [X] Add sanity checks to COSX to ensure that neither of the COSX grids have negative grid weights. An exception is thrown if either of the grids do. ## Questions; - [x] Probably better discussed on https://github.com/psi4/psi4/issues/2890, but how do we want to officially solve this problem? There has been some discussion on simply removing grid configurations which lead to negative weights, as well as discussions on reformulating the X matrix (the m",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2906:985,sanity check,sanity checks,985,https://psicode.org,https://github.com/psi4/psi4/pull/2906,1,['sanity check'],['sanity checks']
Safety," psi4-0.5 with g++ and chemps2. ```; seba@seb-desktop:~/software/psi4-0.5/objects$ CXX=g++ CC=gcc cmake .. -DENABLE_PLUGINS=ON -DENABLE_CHEMPS2=ON; -- The CXX compiler identification is GNU 5.2.1; -- The C compiler identification is GNU 5.2.1; -- Check for working CXX compiler: /usr/bin/g++; -- Check for working CXX compiler: /usr/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Check for working C compiler: /usr/bin/gcc; -- Check for working C compiler: /usr/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -fopenmp ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- BLAS will be searched for based on MKLROOT=/opt/intel/compilers_and_libraries_2016.0.109/linux/mkl; -- Found BLAS: MKL (-Wl,--start-group;/opt/intel/compilers_and_libraries_2016.0.109/linux/mkl/lib/intel64/libmkl_gf_lp64.so;/opt/intel/compilers_and_libraries_2016.0.109/linux/mkl/lib/intel64/libmkl_gnu_thread.so;/opt/intel/",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/264:413,Detect,Detecting,413,https://psicode.org,https://github.com/psi4/psi4/issues/264,8,['Detect'],['Detecting']
Safety," that compiled all Fortran libraries. Consequentially this does _NOT_ necessarily provide you with the correct mangling for externally compiled Fortran libraries. For Fortran libraries that we may are building, like ERD, DKH, etc. the name mangling should go through the CMake mangling detection mechanisms and the resulting header file included with the library. This allows other projects to link to these libraries without having to know the mangling scheme.; ## BLAS and LAPACK. Somewhat related to the previous point, Psi4 proper needs to know the mangling for LAPACK and BLAS. All distributions of BLAS have a header `cblas.h` (or `mkl-cblas.h` if you are using MKL), which does this for you. Similarly, all versions of LAPACK provide `lapacke.h` (again MKL makes things difficult and calls the header `mkl-lapacke.h`). Hence we really should be using these headers and not the stuff in `libqt` (or we should rewrite `libqt` in terms of those header files). One of the other gotchas of BLAS/LAPACK is detecting the actual libraries. The names are non-standardized and the CMake find_package for them is archaic. For the moment I am using the scripts the old build used to find BLAS/LAPACK. They are somewhat touchy, and overly verbose for my liking, but better than me having to write my own. ~~To my knowledge they don't worry about the Mac Accelerate framework so this is again an issue.~~ @jturney and @dgasmith have both independently confirmed that enabling accelerate is not necessary, because the BLAS and LAPACK the math detection finds on Mac are actually (static links to?) the libraries behind the accelerate framework.; ## Minor Points Not Worth a Paragraph; - exception.h has been moved into libpsi4util to be with its source file; - process.h has been moved into libparallel to be with its source file; - `src/bin/psi4` is now `src/bin/psi4_main` to avoid name conflicts; - `src/bin/efp` is now `src/bin/efp_interface` to avoid name conflicts; - Most ConfigX files are gone. From w",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442:10399,detect,detecting,10399,https://psicode.org,https://github.com/psi4/psi4/pull/442,1,['detect'],['detecting']
Safety,"# PsiPEP2: Rationalize Variable Access. Pursuant to #883, common driver migration, the War Against Globals, and [QCSchema](https://github.com/molssi/qcschema), we want clear programmatic access to QC quantities, and we want them on the Wfn/JSONrec, not off `Process.environment.globals`. First step toward this is duplication of `P::e.globals` onto `Wfn`. Unfortunately, the syntax and methods don't align (see table below). Also unfortunately, we have many redundant `get_`s. This PsiPEP proposes the following syntax changes and additions. ### Final Proposal (dynamic). * **W-C** means C-side access to `psi4.core.Wavefunction`; * **W-Py** means Py-side access to `psi4.core.Wavefunction`; * **G-Py** means Py-side access to `psi4.core` globals. | Now `Wavefunction` | Now `psi4.core` | Proposed Both | W-C | W-Py | G-Py | doc |; |-----|----|----|---|---|---|---|; | | has_variable | has_scalar_variable |y|y|y| is float var set ? |; | get_variable | get_variable | scalar_variable |y|y|y| return float var value |; | set_variable | set_variable | set_scalar_variable |y|y|y | set float var value |; | | | del_scalar_variable |y|y|y | unset float var |; | variables | get_variables | scalar_variables |y|y|y| return dict of all float vars |; | |; | | | has_array_variable |y|y|y| is array var set ? |; | get_array | get_array_variable | array_variable |y|y|y| return array var value |; | set_array | set_array_variable | set_array_variable |y|y|y| set array var value |; | | | del_array_variable |y|y|y| unset array var |; | arrays | get_array_variables | array_variables |y|y|y| return dict of all array vars |; | |; | | | has_variable |–|y|y| is any float or array var set ?|; | | | variable |–|y|y| return float or array var value |; | | | set_variable |–|y|y| set float/Matrix/ndarray var value |; | | | del_variable |–|y|y| unset float or array var |; | | | variables |–|y|y| return dict of all float or array vars |; | | clean_variables | clean_variables |–|–|y| unset all float or array vars ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1375:458,redund,redundant,458,https://psicode.org,https://github.com/psi4/psi4/issues/1375,1,['redund'],['redundant']
Safety,"## Description. A series of updates to the Psi4 driver. Very large PR's is not my favorite thing to do on git, but unfortunately driver changes are complex and strongly tied together. Putting this up now as a way to help track everything this fixes.; ## Todos; - [x] General cleanup and reorganization of the driver.; - [x] Reorganized procedures into a single folder.; - [x] Reworking CBS and N-Body wrappers for easier use.; - [x] Above changes broke some of pywrap, need to get these fixed.; - [x] More canonical python raise error printing.; - [x] Reorganizes OEProp to use `D_subset_helper` instead of `Da_subset` to avoid pulling density matrices from multiple sources. Closes #193; - [x] Reworks how OEProp is called for SCF, DFT, DF-MP2, CI, and MCSCF. The full OEProp suite works for these now through the properties driver.; - [x] New test case for the above OEProp (scf_properties, mp2_properties, ci_properties), closes #356.; - [x] Freeze COM/ORIENT for FREEZE COORDINATE option and closes #179 ; ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/365:622,avoid,avoid,622,https://psicode.org,https://github.com/psi4/psi4/pull/365,1,['avoid'],['avoid']
Safety,"## Description. Accumulated fixes from Mac binary build round; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] fix some ambit import and temporarily reroute source location until @jturney around to process cmake changes; - [x] in an effort to standardize internal builds as using static libraries and detected builds as using shared, **boost detection now looks for shared**; - [x] install `psi4.so` to site-packages rather than bin; - [x] fix mollerplesset plugin; - [x] misc. cleanup; - [x] switched Intel to `-qopenmp`; - [x] added a couple include paths so plugin includes so that plugins can be compiled against installed instead of source psi4; - [x] fix imports and iwl checks in plugin templates; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/413:342,detect,detected,342,https://psicode.org,https://github.com/psi4/psi4/pull/413,2,['detect'],"['detected', 'detection']"
Safety,## Description. Allows BCCD with ROHF starting orbitals.; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] Added BCCD and BCCD_T to the list of ROHF semicanonicalize cases in `src/bin/cc*`.; - [x] Added a BCCD ROHF test case; - [x] Added a BCCD_MAXITER keyword instead of using an arbitrary value; - [x] Removed redundant `proc.py:run_bccdt`; ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/295:352,redund,redundant,352,https://psicode.org,https://github.com/psi4/psi4/pull/295,1,['redund'],['redundant']
Safety,"## Description. Fixed incorrect B matrix for 'interfragment coordinates'. These coordinates are not used by default, but the user can specify them to create very specific coordinates. They may be useful, e.g., in combination with 'freeze_intrafrag' for fixed-body optimizations. When symmetry is turned on, there is a difficulty with the symmetry detection in combination with the way in which the displacements are carried out for these coordinates. A loosening of the symmetry tolerance when computing the symmetrized geometry usually works and has been implemented. In the future, it may be best to carry out the displacements in these coordinates iteratively and numerically as they are for redundant intrafrag coordinates. However, this approach would be more hazardous with no upside in C1, and I don't have time to implement it right now anyway.; - [ ] Feature1; Reference atoms can now be specified by the user with a standard multi-dimensional python list. The test cases illustrate this. Probably, this utility will stimulate more use cases for further development of the code.; ## Questions; - [ ] Question1; ## Status; - [X] Ready to go; All tests, including the 3 new ones pass for me.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/432:347,detect,detection,347,https://psicode.org,https://github.com/psi4/psi4/pull/432,3,"['detect', 'hazard', 'redund']","['detection', 'hazardous', 'redundant']"
Safety,"## Description. SCF Gradients are now symmetrized by swiping some code from Andy's Deriv module and placing it in `scfgrad`. Generally we wouldn't want to duplicate code, but there isn't a great way to avoid this at the moment. Discussion in issue #298 for reasoning behind this simple solution.; ## Todos; - [x] SCF Gradient is now symmetrized.; - [x] Fixed the `opt7` convergence tolerance issue the failing cases now does an additional 6 iterations.; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/301:202,avoid,avoid,202,https://psicode.org,https://github.com/psi4/psi4/pull/301,1,['avoid'],['avoid']
Safety,"## Description. The main motivation for these changes is to make the pending #1061 available satisfying the constraints and comments offered by @dgasmith and @amjames.; This mainly amounts to localizing state to a suitable CC wavefunction object and we tried doing that within the scope of #1061, but quickly recognized that some form of rewrite of the CC infrastructure would be more helpful in general. See also #1247 . This PR makes the first step of moving the various `cc*` folders inside a top-level `cc` folder which contains the `ccwave.h` and top-level implementation files. This is thus mostly aesthetics, but avoids drowning the (hopefully!) good stuff to come in a large diff. ~Hold off merging until #1203, #1206, #1251, and #1252 are in. I'll keep rebasing this one accordingly.~. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Moved `cc{energy,hbar,lambda,density,eom,response}` under `cc` folder.; - [x] Moved `ccwave.h` header file to top-level `cc` folder. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1253:620,avoid,avoids,620,https://psicode.org,https://github.com/psi4/psi4/pull/1253,1,['avoid'],['avoids']
Safety,"## Description. The main motivation for these changes is to make the pending #1061 available satisfying the constraints and comments offered by @dgasmith and @amjames.; This mainly amounts to localizing state to a suitable CC wavefunction object and we tried doing that within the scope of #1061, but quickly recognized that some form of rewrite of the CC infrastructure would be more helpful in general. We are preparing a more thoroughly motivated outline of the changes we propose, which will be posted as an issue. In the meantime, this PR makes the first step of moving the various `cc*` folders inside a top-level `cc` folder which contains the `ccwave.h` and top-level implementation files. This is thus mostly aesthetics, but avoids drowning the (hopefully!) good stuff to come in a large diff. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Moved `cc{energy,hbar,lambda,density,eom,response}` under `cc` folder.; - [x] Moved `ccwave.h` header file to top-level `cc` folder.; - [x] Cherry-picked some of the changes by @tomspur; * Changes suggested by valgrind and cppcheck; * Matrix CTOR from `dpdbuf4` @amjames could you check that setting `symmetry_` is done correctly?. Aesthetics; - [x] Run `clang-format` on `ccenergy`. Supersedes #1203, see #1144 ; - [x] Run `clang-format` on `ccdensity`. Supersedes #1202, see #1144 ; - [x] Run `clang-format` on `cclambda`. Supersedes #1206, see #1144 ; - [x] Run `clang-format` on `cctriples`. Supersedes #1209, see #1144 ; - [x] Remove `void` from function argument lists in the `cc*` folders. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1243:734,avoid,avoids,734,https://psicode.org,https://github.com/psi4/psi4/pull/1243,1,['avoid'],['avoids']
Safety,"## Description. There was a race condition in the parallel calculation of ESP over grid in memory. This was fixed in PR #1900.; This made the computation of ESP serial and quite slow (as mentioned in #1614 for example).; This PR brings back the OpenMP parallelization, the race condition is avoided by allowing each thread to hold its own copy of the `ElectrostaticInt` object. Thanks to @JonathonMisiewicz for the initial hint. ## User API & Changelog headlines; - [x] Significant acceleration of the calculation of ESP over grid in memory. ## Dev notes & details; - [x] Created a vector of thread-specific `<ElectrostaticInt>` and `<Matrix>` objects for computing the ESP at a given grid point; - [x] Added `#pragma omp parallel for schedule(dynamic)` to parallelize the outer loop over grid points. ## Questions; - [ ] While working on this part of the code I noticed that `cubeprop` uses a scheme different from the one used by `oeprop` to compute ESP on a grid. I am not sure this is documented. Should it be?; - [ ] Initially my goal was to parallelize the computation of `compute_esp_over_grid` function which reads the grid from `grid.dat` file. The way it is designed now, the grid is read iteratively, so one grid point read->one ESP point computed->one ESP point written to the output `grid_esp.dat` file. This is not parallelizible. However, if one would read grid points in batches - this can be parallelized. What do you think? . ## Checklist; - [x] Tests added for any new features => [mints14](https://github.com/psi4/psi4/tree/master/tests/python/mints14) test already in place; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2891:291,avoid,avoided,291,https://psicode.org,https://github.com/psi4/psi4/pull/2891,1,['avoid'],['avoided']
Safety,"## Description. This PR is a reboot of https://github.com/psi4/psi4/pull/2695. That PR hasn't been kept up-to-date with the many changes to JK since, so I decided to reimplement it from scratch. The motivation and ideas are the same, however, so I will copy-paste the description here:. This PR is the second in a series of planned PRs designed to remove density screening from the TwoBodyAOInt object and into the JK object, with PR https://github.com/psi4/psi4/pull/2547 being the first such PR. Having density screening available in TwoBodyAOInt runs the risk of applying density screening to algorithms where density screening doesn't make sense. Thus, it would be a good idea to move the logic of density screening to where it is more correctly applied, i.e., the JK object. The primary purposes of this PR are twofold:. First, this PR introduce the shell_significant() framework to the JK class. The shell_significant() framework starts with a shell_significant() virtual function that exists in the base JK class. The shell_significant() function can then be redefined specifically for different JK derived classes as needed. The existence of shell_significant() provides a unified framework for performing screening for any JK method, and it also provides the method by which density screening can be added directly to the relevant JK classes.; Second, this PR uses the shell_significant() framework to reimplement screening for certain JK methods. Most significantly, as implied in the first point, the biggest change in this regard was the removal of shell_significant_density() from TwoBodyAOInt into the domain and its reimplementation into the JK shell_significant() definitions. With this change, density screening is now the domain of individual JK classes rather than the TwoBodyAOInt class, which was one of the primary goals of this overall refactor PR set in the first place. Additionally, another method that was subject to slight changes from the shell_significant() framework was",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3098:558,risk,risk,558,https://psicode.org,https://github.com/psi4/psi4/pull/3098,1,['risk'],['risk']
Safety,"## Description. docs and licenses and castup, oh my; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] few tweaks to the energy/grad docstring tables, #249 ; - [x] improve molecule and fn return docs, #351 & #352 ; - [x] update licenses in plugin template dir, since those are mixed py/c++ and awkward to do by script; - [x] hesitant replacement of cast-up with pyconstruct basis machinery. no differences detected in relevant output files (castup1/2/3, sapt2/4/5, pywrap-all), #285 ; - [x] do `[s]` on seconds in sapt; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/364:445,detect,detected,445,https://psicode.org,https://github.com/psi4/psi4/pull/364,1,['detect'],['detected']
Safety,"## Description; #1532 identified problem with memory leaks. Using cppcheck, I've found a number of possible candidates. My idea is to slowly work through all of them and replace all alloc/dealloc pairs with an RAII solution. Feel free to chime in if you disagree with the and design decisions. I'll do one object at a time so allow easy reverting, so this will eventually need to be squashed. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Fix leaks identified in #1532 by avoiding explicit allocation and deallocation. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1534:524,avoid,avoiding,524,https://psicode.org,https://github.com/psi4/psi4/pull/1534,1,['avoid'],['avoiding']
Safety,"## Description; #2476 and #2594 indicate a major problem in Psi's SCF code: the simplistic formula `nalphapi = doccpi + soccpi` and `nbetapi = doccpi` is incapable of describing references where there are more beta than alpha orbitals of a given irrep. This occurs in MOM (where we instead use ugly hacks) and in UHF (where we crash). Furthermore, storing all of these irrep quantities is redundant. This PR remedies the situation by only storing `nalphapi` and `nbetapi`. `doccpi` and `soccpi` can be computed from these when needed. The Py-side API is unchanged `doccpi(), soccpi()`, while the C-side API changes from `doccpi_, soccpi_` to `doccpi(), soccpi()`. While we are doing some extra work to compute docc and socc every time they're needed, the computational cost is negligible in comparison to Fock diagonalizations, integral transforms, and tensor contractions. . To prevent scope creep, this PR aims solely to change the wavefunction. **This is a major undertaking and should not be done lightly.** A subsequent PR will fix the linked issues (if not fixed by this PR) and add them as test cases once the fix is confirmed. Obligatory @susilehtola ping. ## Todos; - [x] DOCC and SOCC are now computed rather than stored; - [x] MOM simplified; - [x] Lots of docc/socc replaced with alphapi/betapi where more appropriate; - [x] More auto; - [x] More dimension, fewer raw arrays . ## Checklist; - [x] Passes ctest and pytest (all, except addons). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2619:389,redund,redundant,389,https://psicode.org,https://github.com/psi4/psi4/pull/2619,1,['redund'],['redundant']
Safety,## Description; - Update to adcc 0.15.0 and adapt interface (plural forms of keys have been deprecated).; - Add PE-ADC test as adcc now automatically detects PE ground states and includes appropriate corrections. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1914:150,detect,detects,150,https://psicode.org,https://github.com/psi4/psi4/pull/1914,1,['detect'],['detects']
Safety,"## Description; <!-- Provide a brief description of the PR's purpose here. --> This switches from detecting the config.cmake file from a cppe library to detecting the python module. It's more realistic about what psi4 actually needs. By chance, this detection worked ok with internal builds or with c-f cppe or with psi4 cppe+pycppe. . `adcc-formaldehyde-pe-adc2` still failing with `catching classes that do not inherit from BaseException is not allowed` on `InvalidReference`. ## Checklist; - [ ] ~Tests added for any new features~; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2391:98,detect,detecting,98,https://psicode.org,https://github.com/psi4/psi4/pull/2391,3,['detect'],"['detecting', 'detection']"
Safety,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; - [x] Something about how CMake detects NumPy during FindPython is different between NumPy 1.22 and 1.23; only on Windows. No apparent changes in CMake FindPython. No apparent changes in conda NumPy recipe. All header files in the same places in a Windows c-f 1.22 and 1.23 NumPy distribution. Linux builds fine with a c-f NumPy 1.23. I don't know what's the real change, so we'll tell CMake where to look in the Azure recipe and pass the hint on to psi4/CM for the second `find_package(Python ...)`.; - [x] My other theory for solving the Azure problem was that my patched `anaconda-client` was behind the times. That wasn't the problem, but it's updated to v1.10.0 anyways.; - [x] Pinned qcelemental and qcengine in Windows recipe; * There's upcoming changes to those packages such that all of psi4 should be pinned and then advanced with the changes. This does that for the Windows recipe.; * fixes #2614 where Windows conda package had _no_ qcel pinning, so depending on channel order, sometimes took a really old qcel and pydantic. after this, channel order shouldn't matter. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2624:122,detect,detects,122,https://psicode.org,https://github.com/psi4/psi4/pull/2624,1,['detect'],['detects']
Safety,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## User API & Changelog headlines. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] It turns out one can build a psi4 with Fortran extensions (detected, not compiled) w/o a Fortran compiler by letting the CXX compiler handle the linking. This is very useful on Windows where we want a `clang-cl` C/CXX compiler, but the only cohesive Fortran-including stack is the ming (gcc/g++/gfortran) one. So this adds an option `psi4_SKIP_ENABLE_Fortran` to _not_ enable Fortran when the code otherwise would. It doesn't check that the circumstances are suitable (that is, all detected, none to-be-compiled). Works great on Windows (that's how the conda pkg has dkh); haven't tried it on Linux.; - [x] Increasingly, where the <project>Config.cmake files get installed to is configurable, esp. as there's no one place cmake looks for linux/mac/win. So adding that option `psi4_INSTALL_CMAKEDIR`. You won't see a change unless you were customizing `CMAKE_INSTALL_DATADIR`.; - [x] also fix a couple install locations that were obvious for windows install.; - [x] stop testing the extra cli qcf tests for qcf master since those are run on mac, and it hangs. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2946:414,detect,detected,414,https://psicode.org,https://github.com/psi4/psi4/pull/2946,2,['detect'],['detected']
Safety,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## User API & Changelog headlines; - [x] Upstream maintained and developed software for Grimme empirical dispersion corrections is now interfaced. The longstanding slight forks maintained by Psi4 folks still work and will be maintained until there's a reason not to. All are still run through QCEngine. Psi4 chooses automatically based on what's detected, so no change to input files needed. Package names and locations are a little different -- see table below. package | provides | pre-PR | post-PR; ---- | ---- | ---- | ----; D3; `psi4::dftd3` | `bin/dftd3` | preferred | works; `conda-forge::dftd3-python` | `import dftd3` | nyi | preferred; (dep) `conda-forge::simple-dftd3` | `bin/simple-dftd3` |; D4; `psi4::dftd4` | `bin/dftd4`, `import dftd4` | preferred | works; `conda-forge::dftd4-python` | `import dftd4` | nyi | preferred; (dep) `conda-forge::dftd4` | `bin/dftd4` | ; GCP; `psi4::gcp` | `bin/gcp` | preferred | works; `conda-forge::gcp-correction` | `bin/mctc-gcp` | nyi | preferred. - [x] Capabilities changed slightly between `dftd3` and `s-dftd3`. In particular, the former can also do -D2 and the latter can do 3-body -D3 in the same call as 2-body -D3. All Psi4 calls will continue to do only 2-body -D3 as default (regardless of `dftd3` or `s-dftd3` engine). That is, `-d3` is still an alias to `-d3zero` which is now an alias to a new extension `-d3zero2b`, which can now be given explicitly disallow 3-body as a tweakable parameter (internally, `s9:=0.0`). When `s-dftd3` is the engine, another set of new extensions, e.g., `-d3atm` alias of `-d3zeroatm` turns on 3-body (`s9=1.0`) and allows user tweaks. This latter is the same behavior as -D4, which turns on 3-body by default. If this seems confusing, state what calc you want — e.g., `energy(""b3lyp-d3atm"")` — and Psi4 will figure out if you have the right engine to do the job.; - [x] Previous to QCEngine v0.26.0 (required by this Psi4 PR), t",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2791:426,detect,detected,426,https://psicode.org,https://github.com/psi4/psi4/pull/2791,1,['detect'],['detected']
Safety,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] fix bug where final findif and nbody quantities are computed and probe-able but not printed or logged.; - [x] update CI for c-f based; - [x] add docs warnings about out-of-dateness for build; - [x] work around windows console not liking strikethrough; - [x] psi4.addons() isn't the definitive word on ecosys availability -- testing.using is -- but it's simpler. This updates the Grimme addons to detect the favored distributions. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2959:883,detect,detect,883,https://psicode.org,https://github.com/psi4/psi4/pull/2959,1,['detect'],['detect']
Safety,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] I think CI is hitting a brownout to deprecate the non-redundant mambaforge, so completing the switch. I've done it at other repos; - [x] windows nightly builds are in great demand, I don't have much more to delete to create space for them, and I'm tired of build always looking like it's failing at master. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3233:307,redund,redundant,307,https://psicode.org,https://github.com/psi4/psi4/pull/3233,1,['redund'],['redundant']
Safety,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. Collect SAPT changes in the progress of SAPT consolidation. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] avoid stumbling into memdf with disk algorithem. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3131:313,avoid,avoid,313,https://psicode.org,https://github.com/psi4/psi4/pull/3131,1,['avoid'],['avoid']
Safety,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. `Molecule::atom_at_position` is supposed to return the index of the atom found in a specified radius of a specified point in 3D space, or -1 if no atom is found in the radius. The current implementation assumes there is never more than one atom within the given radius, and returns the index of the first atom found to be within the tolerance.; This can hypothetically happen in two ways: the atoms are either extremely close, or the tolerance is set to a large value. The new implementation behaves more like one would expect it to behave: under the aforementioned extreme circumstances it throws an exception and informs the user with an error message. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Detect corner case and throw error if encountered; - [x] Update docstrings to better describe implementation. ## Questions; - [x] Apparently, `qcdb.Molecule` has its own independent Python implementation of `atom_at_position`. As is, this PR means that calling `qcdb.Molecule.atom_at_position` and `psi4.core.Molecule.atom_at_position` from a Python program may return different results for the same geometry, if the aforementioned corner case happens.; Not sure what to do about this, at first glance it would be neater if both `qcdb.Molecule.atom_at_position` and `psi4.core.Molecule.atom_at_position` ended up calling the same C++ implementation, but I am not sure how feasible that would be.; Thoughts?. ## Checklist; - [x] No new features; - [x] `ctest -j24` and `make pytest` both passed locally. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2465:842,Detect,Detect,842,https://psicode.org,https://github.com/psi4/psi4/pull/2465,1,['Detect'],['Detect']
Safety,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Detci still has a few places where error termination is effected through printf+abort(). This PR replaces the calls to abort() in with `throw PSIEXCEPTION(msg)`. The rest of the codebase has more of this pattern, those are subject to future PRs to keep this one small. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] A few error terminations in the detci module now print a more detailed error information to the console, instead of just the error message in the output file. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Calls to `abort()` in detci are replaced with `throw PSIEXCEPTION(msg)`, where `msg` is the relevant error message taken from the context of the `abort()`. ## Checklist; - [x] No new features; - [x] Tests run by the CI are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3168:160,abort,abort,160,https://psicode.org,https://github.com/psi4/psi4/pull/3168,4,['abort'],['abort']
Safety,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Improvements discussed in a comment to #3043. The 64-character limit may not be valid on all architectures; this PR should avoid having to revisit the patch. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3044:203,avoid,avoid,203,https://psicode.org,https://github.com/psi4/psi4/pull/3044,1,['avoid'],['avoid']
Safety,## Description; <!-- Provide a brief description of the PR's purpose here. -->; Minor cleanups to `find_occupation` as well as the introduction of sanity checks for #2476 to prevent sudden changes of the spin state during the calculation. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2488:147,sanity check,sanity checks,147,https://psicode.org,https://github.com/psi4/psi4/pull/2488,1,['sanity check'],['sanity checks']
Safety,## Description; <!-- Provide a brief description of the PR's purpose here. -->; Psi4 isn't checking that basis sets are given in a sensible format at the moment. This pull fixes the issue somewhat. Closes #2253 . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Corrupt basis sets are detected instead of used. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2254:343,detect,detected,343,https://psicode.org,https://github.com/psi4/psi4/pull/2254,1,['detect'],['detected']
Safety,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Running ip_tunning clogs stdout by emitting non-silenced printouts, and red-herring warnings.; `ip_tune` does set charge/multiplicity via `set_molecular_charge` and `set_multiplicity`:; * https://github.com/psi4/psi4/blob/master/psi4/driver/frac.py#L609; * https://github.com/psi4/psi4/blob/master/psi4/driver/frac.py#L610C5-L610C37. so it should be safe to keep them out. An example:; ```log; ...; c: [1.0, 0]; fc: [0.0]; m: [2]; fm: [3]; Following warning is harmless if you've altered chgmult through `set_molecular_change` or `set_multiplicity`. Such alterations are an expert feature. Specifying in the original molecule string is preferred. Nonphysical masses may also trigger the warning. c: [1.0, 0]; fc: [0.0]; m: [2]; fm: [3]; Following warning is harmless if you've altered chgmult through `set_molecular_change` or `set_multiplicity`. Such alterations are an expert feature. Specifying in the original molecule string is preferred. Nonphysical masses may also trigger the warning. c: [1.0, 0]; fc: [0.0]; m: [2]; fm: [3]; Following warning is harmless if you've altered chgmult through `set_molecular_change` or `set_multiplicity`. Such alterations are an expert feature. Specifying in the original molecule string is preferred. Nonphysical masses may also trigger the warning. c: [1.0, 0]; fc: [0.0]; m: [2]; fm: [3]; Following warning is harmless if you've altered chgmult through `set_molecular_change` or `set_multiplicity`. Such alterations are an expert feature. Specifying in the original molecule string is preferred. Nonphysical masses may also trigger the warning.; ...; ```. ```; c: [1.0, 0]; fc: [0.0]; m: [2]; fm: [3]; ```; steems from https://github.com/psi4/psi4/blob/master/psi4/driver/qcdb/molecule.py#L1646. and can be silenced by setting `verbose=-1`,; the other is 4 lines below:. https://github.com/psi4/psi4/blob/master/psi4/driver/qcdb/molecule.py#L1650. This PR, adds `quiet` param to ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3229:430,safe,safe,430,https://psicode.org,https://github.com/psi4/psi4/pull/3229,1,['safe'],['safe']
Safety,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; These functions are relics from Psi3 (or before?) and they have many issues, unfortunately one of them is their function signature. Stemming from the awful interface, users of `rsp(...)` and `sq_rsp(...)` never check if the diagonalization failed, because they _cannot_. To keep the promise of not randomly breaking API without fair warning, this PR deprecates said functions but keeps them usable. After #2776, `rsp(...)` has no internal callers left. As for `sq_rsp(...)`:. - many former callers of `sq_rsp(...)` have turned out to be unused functions and have been removed; - If #2686 is merged the vast majority of remaining callers are migrated to a new wrapper around DSYEV; - The remaining call sites of `sq_rsp(...)` will all be in `dfocc`, which is not touched for the time being to avoid causing merge conflicts for the many pending PRs for that module. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] `PSI_API` function `void rsp(int nm, int n, int nv, double *array, double *evals, int matz, double **evecs, double toler)` is deprecated and 1.7 will be the last release with it present.; - [x] `PSI_API` function `void sq_rsp(int nm, int n, double **array, double *evals, int matz, double **evecs, double toler)` is deprecated and 1.7 will be the last release with it present. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Added deprecation notices to `rsp(...)` and `sq_rsp(...)`. ## Checklist; - [x] No new features; - [x] Tests pass as per Lori. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2798:872,avoid,avoid,872,https://psicode.org,https://github.com/psi4/psi4/pull/2798,1,['avoid'],['avoid']
Safety,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This PR reworks and simplifies `libqt/probabil.cc`. Excessive conditionals are removed, sanity checks now throw instead of returning zero, and the `double` kludge is supplanted by `uint64_t`. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] `factorial` and `combinations` now return `uint64_t` instead of `double`, and take `const uint64_t` instead of `int`; - [x] `factorial` now throws if the result would overflow; - [x] `combinations` now throws if computing n-choose-k is impossible. ## Checklist; - [x] No new features; - [x] CI tests are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2907:168,sanity check,sanity checks,168,https://psicode.org,https://github.com/psi4/psi4/pull/2907,1,['sanity check'],['sanity checks']
Safety,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This corresponds to L2 at https://github.com/evaleev/libint/pull/233 . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] switches psi4 to use a Libint2 forked from upstream in 2022, not in 2019; - [x] changes a couple cmake knobs and changes the required components to EFV's preferred syntax (`g5` -> `eri_c4_d1_l5`); - [x] avoided grid points discrepancies that I had hit by implementing Holger's suggestion.; - [x] I and others have reported needing `pybind11::headers` in extra places, so adding those; - [x] The defines `INT_NCART` and `INT_CARTINDEX` in psi https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/integral.h#L46-L64 are also in L2. They used to be `#define` in the current/2019 fork of L2, but now in L2 master, it’s an inline function. To avoid errors like the below, they're namespaced and inlined here now, too. ```; < namespace libint2 {; < inline int INT_NCART(int am) { return ((am + 2) * (am + 1)) >> 1; }; < }; < LIBINT_DEPRECATED(""please use libint2::INT_NCART instead""); < inline int INT_NCART(int am) { return libint2::INT_NCART(am); }; ---; > #define INT_NCART(am) ((((am)+2)*((am)+1))>>1); ```; With that situation (define in psi and inlined in L2), I get lots of; ```; In file included from /psi/gits/hrw-pybind/psi4/src/psi4/libmints/integral.cc:28:; /psi/gits/libint2-efv/install-p01/include/libint2/cgshell_ordering.h:104:12: error: expected unqualified-id before 'int'; 104 | inline int INT_CARTINDEX(unsigned int am, int i, int j) {; | ^~~~~~~~~~~~~; ```; I can fix the problem by renaming in psi to `INT_NCART_PSI` and `INT_CARTINDEX_PSI`. What's a cleaner solution than renaming? Should we inline? Or add to the `psi {}` namespace?. ## Checklist; - [ ] ~Tests added for any new features~; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-sub",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2413:461,avoid,avoided,461,https://psicode.org,https://github.com/psi4/psi4/pull/2413,2,['avoid'],"['avoid', 'avoided']"
Safety,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This is an implementation of the fitted version of the SAP guess, described in [J. Chem. Phys. 152, 144105 (2020)](https://doi.org/10.1063/5.0004046). The repulsive potential on every atom is fit in terms of error function potentials, which means that the guess can be evaluated with few two-electron integrals; namely. $$ {\bf F}^\text{SAP} = {\bf H} + {\bf V}^\text{SAP} $$. $$ V_{\mu \nu}^\text{SAP} = \sum_{A} (A|\mu \nu) $$. where $A$ is a fully contracted $1s$ function on each atom. The implementation is not optimal, since I use `ao_eri` to compute the integrals. An optimal implementation would accumulate the auxiliary functions' integrals on-the-fly; however, optimization can be safely left to a later stage... Closes #2054 . ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Implement scheme and get something that matches ERKALE. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3039:771,safe,safely,771,https://psicode.org,https://github.com/psi4/psi4/pull/3039,1,['safe'],['safely']
Safety,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This is for after #2861. ## User API & Changelog headlines. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Add option `psi4_SHGAUSS_ORDERING` to use `sss` (all CCA standard orderings internally). expert only! all tests will pass (this pulls over Andy Simmonett's fchk fix from #2537) except mints3, and this adds alternate refs for that, too. This by no means means that all exported formats are safe -- only the ones we test :-) ; - [x] Uses a new commit for dkh that has some build updates. also passes it blas that it uses and I apparently missed before. closes #2537. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) These changes fixed all test on a different branch. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2949:669,safe,safe,669,https://psicode.org,https://github.com/psi4/psi4/pull/2949,1,['safe'],['safe']
Safety,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; `DPD::buf4_sort(...)` has some problems, the main scope of the function is quite ~~polluted~~ cluttered and it is a behemoth of a function.; This PR attempts to improve that by moving the incore/out-of-core decision logic into a separate function and file. `DPD::buf4_sort_axpy(...)` had the same code duplicated. The new function uses `const` wherever possible, its integers are now `int64_t` (with the exception of irrep numbers - having >2 billion irreps seems unlikely) and the `incore` variable is now a `bool`. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] `DPD::buf4_sort(...)` and `DPD::buf4_sort_axpy(...)` are slightly easier to read and debug; - [x] Code duplication between `DPD::buf4_sort(...)` and `DPD::buf4_sort_axpy(...)` is reduced; - [x] Possible reduction in `int` overflow risk via `int64_t`. ## Checklist; - [x] CI tests are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2717:935,risk,risk,935,https://psicode.org,https://github.com/psi4/psi4/pull/2717,1,['risk'],['risk']
Safety,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; ~for now must enable with `-D ENABLE_IntegratorXX=ON`. recc installing catch2 first to avoid downloading each time.~. ~CI will fail because I added a integratorxx header to a file for trial, but haven't enabled the addon in the buildsys everywhere.~. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] optionally build integratorXX with `-D ENABLE_IntegratorXX=ON`. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3041:167,avoid,avoid,167,https://psicode.org,https://github.com/psi4/psi4/pull/3041,1,['avoid'],['avoid']
Safety,"## Description; @bennybp pointed out [here](https://github.com/psi4/erd/pull/5) that we need to be paying attention to thread safety in called libraries, even if they don't have OpenMP, because Psi4 does. This is trying to follow the guidance in [the venerable document (search `ifcoremt`)](https://software.intel.com/en-us/articles/threading-fortran-applications-for-parallel-performance-on-multi-core-systems). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Adds rtl_init and rtl_finalize calls. According to the sample code below, also supposed to set reentrancy, but I don't know what to do about that.; - [x] Drops clang-3.9 travis test that's a little slow. I'm told that clang 3.9 is the same as Mac/Distelli is running anyways.; * **User-Facing for Release Notes**. ## Questions; - [x] I don't know much about this, but it appears harmless, at least for Intel compilers. Going to let Travis test other build systems. Any thoughts?. ## Status; - [x] Ready to go. ```; /*; * Multithreaded C-Fortran mixed language test program; */. #include <stdio.h>; #include <stdlib.h>; #include <unistd.h>; #include <pthread.h>; #include <errno.h>; #include ""threadpool.h"". #include ""forreent.h"". #define NUM_THREADS 12; #define NUM_JOBS 10. /* definitions for Fortran Runtime library init/finalize */; extern void for_rtl_init_ (int *, char **);; extern int for_rtl_finish_ ( );; extern int for_set_reentrancy (int *);. /* declare the external Fortran function 'fpa' */; extern void fpa(int io, char *filename); . void job_thread(void *arg1, void *arg2);. int main(int argc, char **argv); {; threadpool tp;; int i;; int *reent ;; int fstat;. char filenames[NUM_JOBS][100];; int io[NUM_JOBS];. int io_status;; /* Call the Fortran Runtime library for initialization */; for_rtl_init_ (&argc, argv);; *reent = FOR_K_REENTRANCY_THREADED;; fstat = for_set_reentrancy( reent );; printf (""fstat %i \n"", fstat);. /* Create a thread pool of 12 thre",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/604:126,safe,safety,126,https://psicode.org,https://github.com/psi4/psi4/pull/604,1,['safe'],['safety']
Safety,"## Description; According to [clang source](http://llvm.org/svn/llvm-project/cfe/trunk/lib/Frontend/InitPreprocessor.cpp) (about half way down the page), clang always reports version 4.2.1 when using ```__GNUC__```, ```__GNUC_MINOR__```, ```__GNUC_PATCHLEVEL__```. This PR updates the version tester to use ```__clang_major__```, ```__clang_minor__```, ```__clang_patchlevel__``` when clang is detected. This issue appeared when using Intel compilers on a Mac. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/579:394,detect,detected,394,https://psicode.org,https://github.com/psi4/psi4/pull/579,1,['detect'],['detected']
Safety,"## Description; Add HF- and PBEh-3c capabilities, now that the former have been verified from Orca and the latter through S. Grimme private communications. ## Todos; * **Developer Interest**; - [x] gcp smoke tests going to pytest PR; - [x] write a bit of docs; - [x] So this is where my compare_values improvements ran off to. Now have a toggle to fail or not and can check mismatch by val, not just by order of magnitude value.; - [x] Add `gcp` interface, but not as advanced as `dftd3` b/c not writing to a file, just takes one of the pre-def values. ; * **User-Facing for Release Notes**; - [x] Semi-semiempirical methods HF-3c and PBEh-3c of Grimme can now be accessed (with `dftd3` and `gcp` executables detectable in PATH). Access through `energy('hf3c')` and `energy('pbeh3c')`. Can run with or without preferred basis set specified (minix and def2-msvp, respectively). ## Questions; * @dgasmith, this'll need a little adaption for 1.2. ## Status; - [x] Ready to go. Not averse to a squash.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/630:709,detect,detectable,709,https://psicode.org,https://github.com/psi4/psi4/pull/630,1,['detect'],['detectable']
Safety,## Description; Adds reference files for the FCHK pytest.; Changing geometry of test molecules to avoid degenerate orbitals. ## Checklist; - [x] fchk pytest works on a different machine. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2047:98,avoid,avoid,98,https://psicode.org,https://github.com/psi4/psi4/pull/2047,1,['avoid'],['avoid']
Safety,"## Description; Adds the DLPNO-MP2 method to Psi4. Callable as `energy('dlpno-mp2')`. DLPNO-MP2 (or domain-based local pair natural orbital MP2) is the method described in the following paper:. [Pinski, Peter, et al. ""Sparse maps—A systematic infrastructure for reduced-scaling electronic structure methods. I. An efficient and simple linear scaling local MP2 method that uses an intermediate basis of pair natural orbitals."" The Journal of chemical physics 143.3 (2015): 034108](https://doi.org/10.1063/1.4926879); ; DLPNO-MP2 recovers about 99.9% of the DF-MP2 correlation energy, and scales much better in both time and memory. The following graph compares this implementation with Psi4's DF-MP2 code on linear alkanes (18 core i9-10980XE, 200 GB, cc-pVTZ basis):. ![alkanes](https://user-images.githubusercontent.com/16376046/105784584-b38e7180-5f3e-11eb-97ce-9e5d05896d82.png). ## Todos; - [x] Implement DLPNO-MP2; - [x] Add tests; - [x] Add docs. ## Questions; - [x] Are there any other ways that this calculation should be routed? In particular, should `DLPNO` be an option for the `MP2_TYPE` keyword? Should DLPNO be an option for `QC_MODULE`?; - [x] Related to the previous question, suppose a user wants to run a SCS DLPNO-MP2 calculation. How should that be parsed? Not a big deal if that isn't supported.; - [x] How best to handle DLPNO options? There are many thresholds associated with this method, but the error and cost of the method are primarily controlled by just two of them: `T_CUT_DO` and `T_CUT_PNO`. Should the other options be user-facing at all? For now, I've marked them expert. Opinions from anyone with experience running local correlation methods are welcome here. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2093:528,recover,recovers,528,https://psicode.org,https://github.com/psi4/psi4/pull/2093,1,['recover'],['recovers']
Safety,"## Description; Adds the nZaPa basis sets that converge faster for SCF and correlation energies than many others. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] nZaPa-NR basis sets for n=2,3,4,5,6,7; - [x] RI and JKFIT definitions for nZaPa and cc-pVnZ-F12; - [x] `[23]ZaPa-NR` bracket detection for CBS. ## Checklist; - [x] Tests added for any new features; - [x] relevant fraction of full tests run. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1346:337,detect,detection,337,https://psicode.org,https://github.com/psi4/psi4/pull/1346,1,['detect'],['detection']
Safety,## Description; Adds timers for SAPT(DFT) procedure to track bottle-necks for improving performance. Information printed into `timer.dat`. A few other minor modifications are also done (see below). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Added step-wise timers for SAPT(DFT).; - [x] Appended missing dimer SCF step for FISAPT timer.; - [x] Exported timer functions to python-side.; - [x] Fixed a few typos in SAPT(DFT) procedure `sapt_proc.py`.; - [x] Expanded output width for `timer.dat` to avoid overflowing. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge. ## Attachment; [timer_dat.txt](https://github.com/psi4/psi4/files/2203735/timer_dat.txt); Seems that github doesn't like .dat files so I renamed it.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1083:568,avoid,avoid,568,https://psicode.org,https://github.com/psi4/psi4/pull/1083,1,['avoid'],['avoid']
Safety,"## Description; All the basis set stuff that simply had to be done for 1.1 to be at least as capable as 1.0. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fixes psi4/psi4#617; - From psi4/psi4#43, fixes; - [x] 1. `decontract` now py-side and signaled by `-decon`. This was done some time ago.; - [x] 2. `basis_rel` also now `basis_relativistic`, etc. Also some time ago; - [x] 3. user-def basis sets have names/handles and are recallable as shown in mints9 and python/mints9. docs corrected and elaborated on this point; - [x] 7. got taken out last fall, and its replacement has not been added.; - [x] 12. fixed up the basisset.rst docs; - [x] 14. covered by comments at 6; - [x] fixed mints9 and enabled symmetry detection to show through to C-side mol; - [x] assigned a rough zeta to most built-in basis sets. * **User-Facing for Release Notes**; - [x] Extends `basis <opt_name> {...}` blocks to PsiAPI via `psi4.basis_helper(name='mybas', key='DF_BASIS_JKFIT', block=""""""; assign ...; """""")`; - From psi4/psi4#43, fixes; - [x] 4. didn't try it on a `db()`, but basis blocks aren't anonymous and can be reused at will. Even `basis mybas {....}; energy('hf/mybas')`; - [x] 6. vastly improved basis printing by always printing file and line origin on each basis set load (called in the driver so no longer mass rebuilding of basissets). separated name into a name field that is the handle by which it can be recalled (that is, the BASIS* keyword value) and a composition that'll look like `aug-cc-pvdz + cc-pvdz + 6-31g`; - [x] 8. fixed. now if first-preference fitting basis not avail and orbitals basis is _known_ to be >quad-zeta, _won't_ default to def2-qz* fitting sets. ## Questions; - [ ] @WDerricotte, there was that decon example in the manual that we agreed was wrong. Can you fix that?; - [ ] PsiAPI folks: getting a lot of these ""helper"" functionals for processing input blocks: pcm_helper, basis_helper. Shall we settle o",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/649:783,detect,detection,783,https://psicode.org,https://github.com/psi4/psi4/pull/649,1,['detect'],['detection']
Safety,"## Description; At the risk of gaining a reputation for single-character PR's, I think I have a fix for #1596. The extra character in the error message looked suspicious, so I nuked it and the `adc` tests still pass. I'll show the output of the OP's calculation below. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix a probable typo in ADC, which introduced a bug. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1599:23,risk,risk,23,https://psicode.org,https://github.com/psi4/psi4/pull/1599,1,['risk'],['risk']
Safety,"## Description; Changes a setting in the COSX JK algorithm to a more conservative default. Previously, the incremental fock option (`cosx_incfock`) was enabled by default. This gave a minor speedup, but it came at the risk of possible SCF convergence issues when using diffuse basis sets. This PR disables this option, so the COSX algorithm will be slightly slower, but more robust by default. ## Todos; - [x] Changed `cosx_incfock` default. ## Checklist; - [x] COSX tests still pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2689:218,risk,risk,218,https://psicode.org,https://github.com/psi4/psi4/pull/2689,1,['risk'],['risk']
Safety,"## Description; Cleans up CMake so that external dependencies can be linked to libraries in `psi4/src/psi4` and then inherited by `core` without invoking `target_link_libraries`/`target_include_directories` again. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Bump CMake minimum requirement to 3.8; - [x] Rewrote `psi4_add_module` CMake macro. Now it takes `bin` or `lib` argument, name of module, and list of sources. Note that the macro:; - Now defines **two** global lists of libraries `core` will link to, one for `bin`s and one for `lib`s. This is needed because `lib`s need to appear last in the link line to avoid missing symbols.; - Sets source file properties to generate position-independent code with symbols hidden by default.; - [x] Rewrote downstream `CMakeLists.txt` so that: ; - Sources are in a list, with one source file per line, for easier diff inspection.; - External dependencies are linked where they are used first.; - [x] Reordered `include`s in _some_ files according to the hierarchy: ; - For class implementation sources: header corresponding to current source file first (_.i.e._ `#include ""myself.h""` in `myself.cc`); - C++ standard headers, including `<omp.h>`; - Psi4 higher-level headers, _i.e._ `psi4/psifiles.h` &co.; - Psi4 headers in subdirectories _i.e._ `psi4/libmints/matrix.h` &co.; - Headers in current directory _without full path_.; - [x] `psi4/src/psi4/liboptions/liboptions_python.h` moved to `psi4/src/python_data_type.h` and ; `psi4/src/psi4/liboptions/python.cc` moved to `psi4/src/python_data_type.cc`. These are now compiled and linked as part of `core`, rather than `liboptions`. ## Questions; I note that `mrcc.cc` and `civect.h` include `pybind11.h`. It might be a good idea to move those bindings one level up, directly into `core` without spreading the dependency too deep in the code. Opinions?. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full te",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1358:667,avoid,avoid,667,https://psicode.org,https://github.com/psi4/psi4/pull/1358,1,['avoid'],['avoid']
Safety,"## Description; Cleanup EOM CC3 code a bit. ## Todos; - [x] Catchup the code with psifiles, etc., so that EOM_DEBUG toggle can be used; - [x] Change restart behavior in EOM CC3 computations to avoid odd bug. ## Checklist; - [x] No additional tests should be needed.; - [x] Tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2085:193,avoid,avoid,193,https://psicode.org,https://github.com/psi4/psi4/pull/2085,1,['avoid'],['avoid']
Safety,## Description; Closes issue #2559 . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Removed redundant work in parallel TwoBodyAOInt construction. ## Questions. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2581:152,redund,redundant,152,https://psicode.org,https://github.com/psi4/psi4/pull/2581,1,['redund'],['redundant']
Safety,"## Description; Continues from psi4/psi4#850 in getting sns-mp2 integrated into psi as an endorsed plugin. Also various infrastructure additions to accommodate downstream and python projects. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] First downstream project buildable during superbuild; - [x] First pure python project buildable during superbuild. That is, `setup.py`, not `addonConfig.cmake`, so opt-in/detect-from machinery a lot shakier. Have to use FindPythonModule adapted from internet, rather than sturdy `find_package()`. For where-module?, relying totally on :envvar:PYTHONPATH. Seems to be behaving sensibly, but report oddities.; - [x] Add some dev docs for how to do workflows with addons; - [x] Adapt some snsmp2 test to work with psi ctest and pytest; - [x] Fix up tests/pytest/test_numpy_views so that it runs with pytest and doesn't interfere when `memory_profiler` not installed; - [x] ~Until https://github.com/DEShawResearch/sns-mp2/pull/2 goes in, pulling from my fork~; - [x] Adds some (mildly tested) versioning capabilities to FindPythonModule; * **User-Facing for Release Notes**; - [x] Enable [sns-mp2](https://github.com/DEShawResearch/sns-mp2) to be built at build-time via `cmake -DENABLE_snsmp2=ON`. Can also detect it if you put an external snsmp2 in PYTHONPATH (but as it's an optional runtime dependency, latter's only really useful for testing); - [x] Fix nasty bug that made the number of points computed for cube file dependent on rounding error. Could show up as differences in cube files btwn compilers. Tightened down cubefile checking. ## Questions; - [x] @rmcgibbo, I'd still like to know about getting the version from the imported plugin. Also, it'd be nice to get pytest in the sns-mp2 repo working in its own right.; - [x] @shannonhouck, there'll probably be a few more docs to add, if you don't mind. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/865:478,detect,detect-from,478,https://psicode.org,https://github.com/psi4/psi4/pull/865,2,['detect'],"['detect', 'detect-from']"
Safety,"## Description; Docs still failed even after the last PR. My current suspicion is that the problem is [this line](https://github.com/psi4/psi4/runs/5253940040?check_suite_focus=true#step:9:248), which results when [an over-active Perl scraper thinks ""LEFT-RIGHT"" is a psivar](https://github.com/psi4/psi4/blob/master/doc/sphinxman/document_psivariables.pl#L213-L224). I don't particularly feel like learning enough Perl to implement the regex properly, so we're just going to avoid it. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2448:476,avoid,avoid,476,https://psicode.org,https://github.com/psi4/psi4/pull/2448,1,['avoid'],['avoid']
Safety,"## Description; During the L2 upgrade, I missed the function that handles diffuse external multipoles. In constructing a test case to avoid a repeat, I found some normalization problems (and a lack of gradients) which will be addressed in a followup PR. H/T to @g-andres and his group for pointing the problem out. ## Todos; - [ ] Fixes energies with external diffuse potentials. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2068:134,avoid,avoid,134,https://psicode.org,https://github.com/psi4/psi4/pull/2068,1,['avoid'],['avoid']
Safety,"## Description; Extracts some miscellaneous, uncontroversial and minor, changes from #1443 . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Use `pybind11_add_module` to declare the Python module at the CMake level. This follows suggestions from the pybind11 project. Note that I had to deactivate the link-time optimization (the `NO_EXTRAS` flag). I'd get `Aborted (core dumped)` otherwise with GCC (tested with versions 5, 6, and 7); - [x] More `auto`-izing and switch to the free functions in the `linalg` namespace. . ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1595:408,Abort,Aborted,408,https://psicode.org,https://github.com/psi4/psi4/pull/1595,1,['Abort'],['Aborted']
Safety,"## Description; Fix the mismatch issue on Github (#2258) and on the forum [http://forum.psicode.org/t/slight-mismatching-of-casscf-between-total-mcscf-energy-and-mcscf-root-0-energy/1693/4](http://forum.psicode.org/t/slight-mismatching-of-casscf-between-total-mcscf-energy-and-mcscf-root-0-energy/1693/4).; A more efficient way to obtain the CI coefficients after a redundant orbital rotation would be a direct transformation without solving the CI again, see [https://doi.org/10.1063/1.479573](https://doi.org/10.1063/1.479573). There might be two related issue:; - `H0block_` in DETCI keeps filling up during the MCSCF macro iteration. This will lead to repeated entries during the MCSCF iterations and sometimes lead to uncertain numerical behavior.; - The `""DFILE""` CI guess for the CI after orbital canonicalization is directly related to this issue. Using this guess leads to very slow convergence for the CI. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2259:366,redund,redundant,366,https://psicode.org,https://github.com/psi4/psi4/pull/2259,1,['redund'],['redundant']
Safety,"## Description; Fixes #1288. The trouble was that Bozkaya's code used libtrans to transform integrals, and those were written to disk in their antisymmetrized, redundancy-free form, as libtrans does. The DCT code gets different integrals from libtrans but then sorts those to get the same blocks as Bozkaya wrote earlier in the redundant form. Because the DCT-sorted integral block had antisymmetry redundancies, it was larger than the libtrans block that did not have those redundancies. Fixed by changing the code to use a block without those redundancies. I imagine this is of interest to @amjames and @ssh2. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fixes 1288. ## Checklist; - [x] DCFT tests run. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1336:160,redund,redundancy-free,160,https://psicode.org,https://github.com/psi4/psi4/pull/1336,5,['redund'],"['redundancies', 'redundancy-free', 'redundant']"
Safety,## Description; Fixes #655 and some other possibly nasty issues that come from; - Psithon->Python replacements being executed on literal strings; - Truncation of lines with literal python strings that contain a hash character (`#`). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Improved handling of literal strings inside `inputparser.py` to avoid regex replacements being attempted inside Python literals.; * **User-Facing for Release Notes**; - None. ## Status; - [ ] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/658:412,avoid,avoid,412,https://psicode.org,https://github.com/psi4/psi4/pull/658,1,['avoid'],['avoid']
Safety,"## Description; Fixes a segfault discovered by @mfherbst while developing #2767.; It was caused by adding `#include ""psi4/libmints/potentialint.h""` in `mintshelper.cc`, because `potentialint.h` included L2's `engine.h`. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Fix ""future"" segfault by reorganizing PCM functors (moved to `.cc` files to avoid L2 `engine.h` include). See discussion in #2767 . ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2770:536,avoid,avoid,536,https://psicode.org,https://github.com/psi4/psi4/pull/2770,1,['avoid'],['avoid']
Safety,"## Description; Fixes many compiler warnings by no longer passing redundant arguments to Matrix constructors. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Fixes 83 compiler warnings, 81 of which were coming from `dct`. ## Checklist; - [x] quick tests and dct tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3175:66,redund,redundant,66,https://psicode.org,https://github.com/psi4/psi4/pull/3175,1,['redund'],['redundant']
Safety,"## Description; Fixes up the OpenMP problems. This still needs some tidying, but you can start to take a look. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Mostly this polishes the new OpenMP/Math interface/detection by expanding it to C/CXX/Fortran (thanks, v2rdm, for playing your persistent role of complicating things) and making sure vars are propagated among the externalprojects. Key cmake option is `OpenMP_LIBRARY_DIRS` which is a `;`-sep PATH-like var to search for omp libs if not naturally found. closes #1041 ; - [x] fix a few DISK_DF in driver and add some long-awaited (really, look at the milestone history for that ticket) freq docs in #350 ; - [x] fatal_error's ERD; - [x] bump various upstream/downstream; - [x] get ambit back (can't readily test it except by building plugin). ## Questions; - [x] Roberto and Radovan should look over the CMake. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1053:277,detect,detection,277,https://psicode.org,https://github.com/psi4/psi4/pull/1053,1,['detect'],['detection']
Safety,"## Description; Furthers the generality of integral transformations and enables a special workflow, `DIRECT_iaQ`, to alleviate disk IO when transforming to `pqQ` forms. Timings comparing the `DIRECT_iaQ` and `DIRECT` methods are inbound. Edit: Here are some tests that (almost comically) display the efficacy of `DIRECT_iaQ` over `DIRECT` + `pqQ`. 1. Test1: ; [input.txt](https://github.com/psi4/psi4/files/1740970/input.txt); [timer.txt](https://github.com/psi4/psi4/files/1740977/timer.txt). 2. Test2: ; [input.txt](https://github.com/psi4/psi4/files/1740966/input.txt); [timer.txt](https://github.com/psi4/psi4/files/1740974/timer.txt). Notice the difference between the `DFH: MO to disk` timers. . Edit2: I added a reduction on `max_val` in `prepare_sparsity` to ensure thread safety. This was incorrect before. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - DF_Helper now has three methods for integral transformations:; `STORE`: Contracts metric with AO integrals, stores, then transforms.; `DIRECT`: Transforms integrals, contracts with metric.; `DIRECT_iaQ`: Optimized `DIRECT` workflow when using `pqQ` transformed integrals. - DF_Helper outputs any transformed integral form you want: `Qpq`, `pQq`, or `pqQ`. The following can be used for each of the respective methods listed above:; `STORE`: `Qpq`, `pQq`, or (ill-advised) `pqQ`; `DIRECT`: `Qpq`, `pQq`, or (ill-advised) `pqQ`; `DIRECT_iaQ`: `pqQ`. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/913:781,safe,safety,781,https://psicode.org,https://github.com/psi4/psi4/pull/913,1,['safe'],['safety']
Safety,"## Description; Get Ambit back. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] This includes some changes I salvaged from the old clean-python branch.; - [x] Ambit builds with `ENABLE_ambit` as directed from the `external/upstream/ambit/CM`.; - [x] Ambit _does not_ link into Psi4, as Psi4 doesn't use it. So it's more like Psi4's build system carries it along.; - [x] The ambit plugin template _is_ in working build order (if you check out the plugin manually; the skeleton plugins are _not_ in working order). It detects the ambit package and links it in. It _doesn't_ however run. See error below that I bet @jturney can patch up in no time.; - [x] This is associated with branch `cmakelab2` in the main Jet ambit repo. If you haven't already hunted it down, below is the way to work on psi4 repo and ambit repo locally simultaneously. ```; #GIT_REPOSITORY https://github.com/jturney/ambit; #GIT_TAG cmakelab2; DOWNLOAD_COMMAND """"; SOURCE_DIR ""/path/to/ambit-directclone""; ```. * **User-Facing for Release Notes**. ## Questions; - [x] This is not ambit in full working order. This is ambit reintegrated to the point that ambit people can patch it up a bit and return it to full working order. ; - [x] @jturney, I didn't renovate the ambit CMake like on some other external projects. If you've a mind to do so, CheMPS2 is quite similar to Ambit in build artifacts and [my CheMPS2 branch config6](https://github.com/loriab/CheMPS2/tree/config6) is current state of the art. ```; Attention! This SCF may be density-fitted.; Traceback (most recent call last):; File ""/theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/objdir27py35/stage/theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/install-psi4/bin/psi4"", line 223, in <module>; exec(content); File ""<string>"", line 76, in <module>; File ""/theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/objdir27py35/stage/theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/install-psi4/lib//psi4/driver/driver.py"", li",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/593:583,detect,detects,583,https://psicode.org,https://github.com/psi4/psi4/pull/593,1,['detect'],['detects']
Safety,"## Description; Honestly, this started as just updating pybind11 to detect via config. It got out of hand, but to good results. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `exception.message` --> `str(exception)` since former sometimes raises an error in the course of handling another.; - [x] fix python/json testing when PYMOD_INSTALL_LIBDIR is non-default.; - [x] export psi4::core target. use it in plugin. much simplify the psi4Config. tidy up the share installs.; - [x] flatten install dir structure. no more `external/`; - [x] shift importing of official plugins. rename psi4 --plugin* options. add cmake -C line. update CM templates.; - [x] switch over Py detection to PythonLibsNew. Beautify components printing. ; - [x] Move threads detection to target.; - [x] start testing the plugin templates again; - [x] standardize `Psi4Macros` --> `psi4OptionsTools`.; - [x] Correct CXX comp names in autocmake_static_lib (@robertodr, I copied this from you, so you may have it wrong, too). Check enabled langs properly rather than compilers defined so OptionsTools usable to other projects with diff enabled langs.; - [x] switch pybind11 to upstream source. better handle c++ std wrt pybind. `PSI4_CXX_STANDARD` --> `psi4_CXX_STANDARD`.; - [x] compile test of gcc version able to account for -gcc-name/-gxx-name (@bennybp, here's the code for what we talked about once in `custom_cxxstandard.cmake`); - [x] convert restrict test to write its own file.; - [x] kill off LAB and @jturney config files. replace with `cmake -C psi4PluginCache.cmake` suited config file.; - [x] `psi4pasture` --> `pasture`.; - [x] always whole-archive dpd and qt; - [x] `external` --> `external/upstream`, `internals` --> ``external/downstream`; - [x] remove old Find*cmake files. * **User-Facing for Release Notes**; - [x] We changed our python detection module to the one used by NumPy. Also changed so that not actually using libpython anywhere.; - ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/554:68,detect,detect,68,https://psicode.org,https://github.com/psi4/psi4/pull/554,3,['detect'],"['detect', 'detection']"
Safety,"## Description; I hit a system that was raising [putenv and setenv not avail](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libpsi4util/process.cc#L136). Rather than solve it, decided (with support) to clean environment variables out of `P::e`. Only active uses were PSI_SCRATCH and PSIDATADIR. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Replaced all the PSI_SCRATCH with calls directly to psio.get_default_path(). Also cleared that fn out so it truly defaults to `/tmp/`, not TMP, TEMP, TMPDIR, then /tmp/.; - [x] Once all the parsing's py-side might be able to drop PSIDATADIR entirely. But for now, moved it to its own slot as `P::e.[gs]et_datadir()`; - [x] Can't tell if you're dealing with Clang or AppleClang by `#defines`, so lowered cxxstandard cutoff to permit Intel + !AppleClang to pass.; - [x] `FindOpenMP.cmake` attaches a lib to try_run that isn't needed just to extract versions. Shift OMP detection so cxxstandard doesn't complain about unfindable lib; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/826:986,detect,detection,986,https://psicode.org,https://github.com/psi4/psi4/pull/826,1,['detect'],['detection']
Safety,"## Description; I tracked down a seg fault during a largish cc2 calculation to an integer overflow in the value of `size` in DPD::buf4_scmcopy(). I think it was triggered because I allocated a large amount of RAM so a huge chunk of data was to be copied in one go rather than in bits. In my case,; `size = rowtot*coltot = 47252*47252 = -2062215792`; Funnily enough, memcpy wasn't very happy being called with a negative size to copy!. It's a simple case of `int*int` being larger than an int!. Changing `size` to a `long int` and adding some casts matches other sections of the file (although perhaps replacing them all with `size_t` might be better?). ## Questions; This fix got my calculation past the point where it caused the seg fault (although it's still running: it might take a few days!). This bug probably only got triggered by large jobs with a lot of RAM so the in-core copy was performed: there could be similar overflows to track down (similar to that [recently found in the SAPT code](http://forum.psicode.org/t/sapt2-calculation-segmentation-fault-during-exch12-computation/415/6)). I guess a safer option would be test the values for overflow (I've not thought how it behaves 32 vs 64 bit!). ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/685:1109,safe,safer,1109,https://psicode.org,https://github.com/psi4/psi4/pull/685,1,['safe'],['safer']
Safety,"## Description; Implemented a pair of functions,; - `void start_skip_timers()`; - `void stop_skip_timers()`; to skip all nested `timer_on` and `timer_off` calls and avoid complicated timing output. ## Todos; - [x] Implement two functions. ## Status; - [x] Ready to go. ## Example; By the following modification to `/psi4/psi4/src/psi4/libscf_solver/sad.cc`:; ```; void SADGuess::compute_guess(); {. timer_on(""SAD Guess"");; start_skip_timers(); // Added new line.; form_D();; form_C();; stop_skip_timers(); // Added new line.; timer_off(""SAD Guess"");; }; ```; the output `timer.dat` shows:; ```; HF: Form H : 0.000u 0.017s 0.019w 2 calls; HF: Form S/X : 0.000u 0.000s 0.000w 2 calls; HF: Guess : 0.400u 0.000s 0.247w 2 calls; | SAD Guess : 0.400u 0.000s 0.238w 2 calls; HF: Form G : 2.267u 0.000s 1.363w 31 calls; | JK: D : 0.000u 0.000s 0.000w 31 calls; | JK: USO2AO : 0.000u 0.000s 0.000w 31 calls; | JK: JK : 2.267u 0.000s 1.361w 31 calls; | JK: AO2USO : 0.000u 0.000s 0.000w 31 calls; HF: Form F : 0.000u 0.000s 0.000w 31 calls; HF: DIIS : 0.000u 0.000s 0.019w 31 calls; | DIISManager::add_entry : 0.000u 0.000s 0.011w 29 calls; | DIISManager::extrapolate : 0.000u 0.000s 0.006w 27 calls; | | DIISManager::extrapolate: bMatrix setup: 0.000u 0.000s 0.002w 27 calls; | | DIISManager::extrapolate: bMatrix pseudoinverse: 0.000u 0.000s 0.001w 27 calls; | | DIISManager::extrapolate: form new data: 0.000u 0.000s 0.002w 27 calls; HF: Form C : 0.000u 0.000s 0.004w 31 calls; HF: Form D : 0.000u 0.000s 0.000w 31 calls; ```; which is much more concise than originally:; ```; HF: Form H : 0.000u 0.033s 0.019w 2 calls; HF: Form S/X : 0.000u 0.000s 0.000w 2 calls; HF: Guess : 0.417u 0.000s 0.251w 2 calls; | SAD Guess : 0.383u 0.000s 0.242w 2 calls; | | JK: (A|mn) : 0.033u 0.000s 0.007w 4 calls; | | JK: (A|Q)^-1/2 : 0.100u 0.000s 0.072w 4 calls; | | JK: (Q|mn) : 0.000u 0.000s 0.000w 4 calls; | | JK: D : 0.000u 0.000s 0.000w 18 calls; | | JK: USO2AO : 0.000u 0.000s 0.000w 18 calls; | | JK: JK : 0.000u ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/762:165,avoid,avoid,165,https://psicode.org,https://github.com/psi4/psi4/pull/762,1,['avoid'],['avoid']
Safety,"## Description; Implements a basic . ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ *] Adds a smart solver class that can easily share data with a wfn object during SCF iterations. ; - [ *] Provides a platform for quickly adding new smart solving capabilities.; - [ *] With a metric for detecting oscillation, a dynamic damping function can be turned on to limit changes in Drms to a target value. * **User-Facing for Release Notes**; - [ *] With SMART_SCF set to `true`, SOSCF is automatically turned on when trailing convergence is detected, the initial oscillations in SAD, GWH, and CORE guess are damped at 70%. ## Questions; - [ *] What can be changed about the structure of the smart_solver class for ease of readability and use?; - [ *] This code leaves out 'macroiterations', i.e. restarting the SCF upon failure with updated initial conditions and options. Do we want this functionality in this PR, or another?; ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ *] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1134:353,detect,detecting,353,https://psicode.org,https://github.com/psi4/psi4/pull/1134,2,['detect'],"['detected', 'detecting']"
Safety,"## Description; Implements density screening into the direct SCF Algorithm, no incremental Fock build currently, but incremental Fock build will be a future addition. Reference paper: https://onlinelibrary.wiley.com/doi/abs/10.1002/jcc.540100111. ## Notable Features; - [x] Improve the efficiency (less time) of the direct SCF Algorithm without compromising accuracy. ## Checklist; - [x] Passes Sanity Check for Water Molecule, will include a Google Sheets link as I include more tests; - [x] Passes Tests Using The Benzene, Naphthalene, etc... series; - [x] Code works with multithreading; - [x] Code works with reaction energies, interaction energies, conformation energies; - [x] Code works on open-shelled systems; - [x] Code tested on a diverse set of molecules. ## Status; - [x] Rough Draft Phase; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2062:395,Sanity Check,Sanity Check,395,https://psicode.org,https://github.com/psi4/psi4/pull/2062,1,['Sanity Check'],['Sanity Check']
Safety,"## Description; Improvements to basis set handling, including; - elimination of duplicate code and introducing array size checks via use of std::string in gshell; - sanity checks for angular momentum parsing, eliminating segfaults; - support for explicit definition of angular momentum in the basis set input (fixes #628). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Eliminated duplicate code and introduced array size checks via std::string in gshell.; - [x] Introduced angular momentum checks in the basis set parser.; - [x] Added support for L=n format into the basis set parser. ## Questions; - [x] The basis set parser is doing regexp validation for the shell entry. Thanks to @PhillCli for supplying a working regexp. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1994:165,sanity check,sanity checks,165,https://psicode.org,https://github.com/psi4/psi4/pull/1994,1,['sanity check'],['sanity checks']
Safety,"## Description; Kudos to @andysim for pointing out in January the exact 13 lines of code to change for the vast preponderance of the gaussian to standard ordering switch. As far as timeline, there's no particular reason this needs to be in for v1.6. But if we _could_ avoid hosting forever one fewer set of L2 packages for a single release, that'd be kind of nice. But fixing the output formats (i.e., fchk, qcsk, molden, fcidump) is likely to take some careful work. If anyone would like to tackle a part of this, go for it. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] current test status (pretty impressive, imo); - after g2g commit; - ctest: `99% tests passed, 3 tests failed out of 487`; - pytest: `12 failed, 2971 passed, 270 skipped, 269 xfailed`; - after first solidharmonics.cc commit; - ctest: ~`90% tests passed, 50 tests failed out of 487`~; - pytest: ~`43 failed, 2911 passed, 208 skipped, 269 xfailed`~; - [ ] only Linux in CI b/c only it has an appropriate L2 conda package built. - categories to examine; - [x] tdscf; - [x] cubeprop; - [ ] fchk; - [ ] qcsk atomicresult.wavefunction; - [x] mbis; - [ ] molden; - [ ] fcidump; - [ ] nbo. - fails pytest; - [x] tdscf; - [x] dft_block_schemes; - [ ] mcmurchie_davidson_consistency_angmom (fails because ref data are deposited in Gaussian ordering); - [ ] test_rhf_fchk[df-rhf-dft)]; - [ ] test_rhf_fchk[conv-rhf-dct]; - [ ] test_rhf_fchk[df-rhf-omp2]; - [ ] test_uhf_fchk[df-uhf-mp2]; - [ ] test_rhf_fchk[conv-rhf-ccsd] ; - [ ] test_uhf_fchk[df-uhf-dft]; - [ ] test_uhf_fchk[conv-uhf-ccsd]; - [ ] test_rhf_fchk[df-rhf-mp2]; - [ ] test_uhf_fchk[df-uhf]; - [ ] test_rhf_fchk[df-rhf)]; - [ ] test_rhf_fchk[conv-rhf-cc2]. - fails ctest; - [x]	103 - cubeprop (Failed); - [x]	104 - cubeprop-frontier (Failed); - [x]	123 - density-screen-2 (Timeout); - [x]	161 - dft-grad-lr1 (Failed); - [x]	162 - dft-grad-lr2 (Failed); - [x]	163 - dft-grad-lr3 (Failed); - [x]	168 - dft-b2plyp (Fail",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2537:268,avoid,avoid,268,https://psicode.org,https://github.com/psi4/psi4/pull/2537,1,['avoid'],['avoid']
Safety,"## Description; Longawaited maintenance on physconst and duplicate naming. ## Todos; * **Developer Interest**; - [x] There was dir driver/procedures and dict procedures['energy']... Renamed the former to procrouting to avoid future trouble. Note that all plugins will need [this line](https://github.com/edeprince3/v2rdm_casscf/blob/master/pymodule.py#L28) fixed by `procedures` --> `procrouting`.; - [x] Move i/fsapt test cases higher in list, so they can backfill.; * **User-Facing for Release Notes**; - [x] Physical constants in PsiAPI are now `psi4.constants.amu2kg` instead of `psi4.p4const.psi_amu2kg`. In Psithon, still `psi_amu2kg`. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/632:219,avoid,avoid,219,https://psicode.org,https://github.com/psi4/psi4/pull/632,1,['avoid'],['avoid']
Safety,"## Description; Lots o' stuff. **I recommend reviewing commit-by-commit.**. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fix ""write() argument must be str, not bytes"" error that occurs in new NumPy; - [x] QCDB: migrate Hungarian alg from hungarian module to hacked scipy. now ""align"" tests should pass w/o incident or add'l software; - [x] Mol: migrate Molecule.to_string() back from QCDB. not used, but may as well be handy.; - [x] QCDB: squash some printing. migrate some changes back from QCDB.; - [x] AddOns: Don't let scipy missing (for snsmp2) pass silently.; - Discovered faulty logic where snsmp2 will rebuild more than necessary b/c detection involves ""import psi4"" which probably doesn't exist at the start of a psi4 build. not fixed.; - [x] AddOns: Bump pybind11 to 2.2.3; - [x] AddOns: renegotiate the psi vs. libefp options compromise. We generally try to follow addon's naming conventions unless they directly contradict our own. For SAPT we do have our own, but when libefp was implemented, we used our sapt for two (elst & exch) and let libefp win on (pol). I've since put a translation of input and printing system into pylibefp. that isn't active here, but thought may as well change keywords now.; ```; 'psi': {; 'elec': 'elst',; 'pol': 'ind',; 'xr': 'exch',; 'elec_damp': 'elst_damping',; 'pol_damp': 'ind_damping',; 'disp_damp': 'disp_damping',; 'pol_driver': 'ind_driver',; 'ai_elec': 'ai_elst',; 'ai_pol': 'ai_ind',; 'ai_xr': 'ai_exch',; ```; - [x] Add warnings accumulated so far -- ECP, DFT-SAPT, DFT; - [x] set up plugins via native conda gxx; - [x] AddOns: bump libefp to 1.5.0, chemps2 to 1.8.7; - [x] returns align tests to quicktest; - [x] adds `psi4 --test` to travis to test psiapi and addons coverage; - [x] switches MINIX to spherical as advocated [here](https://github.com/psi4/psi4/pull/961#issuecomment-385644036). ## Questions; - [ ] I took the warn DFT functionals from tests and notes, not o",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/993:712,detect,detection,712,https://psicode.org,https://github.com/psi4/psi4/pull/993,1,['detect'],['detection']
Safety,"## Description; Make `core.Matrix.np_write(filename=None)` safer. The method returns a `dict` whose values are `np.ndarray`s. Currently, those arrays are views of memory owned by the `core.Matrix`, which means code like this is actually broken:. ```; def function():; matrix = function_that_returns_a_core_Matrix(); return matrix.np_write(filename=None); ```. This PR changes `np_write` to return copies of the data when `filename=None`, so it's less of a footgun. Eventually the need for this might go away, once the numpy->core.Matrix reference counting integration is accomplished, but that's much tricker. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/750:59,safe,safer,59,https://psicode.org,https://github.com/psi4/psi4/pull/750,1,['safe'],['safer']
Safety,"## Description; Make `psi4.test()` safe to run. And beer safe to grep. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] The psi4 vs numpy threading test is more likely to work if run first, so moved it there. But since that's still no guarantee, made it an expected failure, so it doesn't count against pytest either way.; - [x] with `ENABLE_GENERIC`, blas/lapack detection looks for dynamic libm.; * **User-Facing for Release Notes**; - [x] Geometry optimizations that exceed maxiter no longer just print a warning and exit successfully (beer). Now they exit unsuccesfully (coffee) and raise a `psi4.ConvergenceError`. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/638:35,safe,safe,35,https://psicode.org,https://github.com/psi4/psi4/pull/638,3,"['detect', 'safe']","['detection', 'safe']"
Safety,"## Description; Make psi safe for py38. The basic conda pkg does build, but I haven't done full stack yet. For practical reasons, no use turning on a CI lane for 38 until conda pkg available. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] req'd mods for python 3.8; - [x] avoid ""DeprecationWarning: In future, it will be an error for 'np.bool_' scalars to be interpreted as an index"" in `Molecule.from_dict`; - [x] more killing off travis. ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1776:25,safe,safe,25,https://psicode.org,https://github.com/psi4/psi4/pull/1776,2,"['avoid', 'safe']","['avoid', 'safe']"
Safety,"## Description; Make tests run reliably and a bit cleaner. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] @JonathonMisiewicz, @amjames so the continuation of the `cc3` saga is that it continued flaky, usually running clean but sometimes throwing PSIO errors at first findif freq, sometimes throwing PSIO errors at second findif freq. Finally figured out that the G0 calc was leaving scratch files before findif launched and findif was only cleaning _after_ each displacement. Previously this was nearly always safe b/c G0 had full symmetry and first findif displacement was totally symmetric (bet we were never testing partial freq on a susceptible mol). But now findif displacements appear in random order, and if the first one up has a lower irrep, it doesn't like those totally symmetric leftovers, so PSIO error. There's any number of places one could put the `clean` -- I chose least obtrusive.; - [x] `gcp` calcs weren't deleting their directories in scratch, so made them. ## Checklist; - [ ] ~Tests added for any new features~; - [x] full tests less bench run. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1326:561,safe,safe,561,https://psicode.org,https://github.com/psi4/psi4/pull/1326,1,['safe'],['safe']
Safety,"## Description; Misc. ## Todos; * **Developer Interest**; - [x] CI: Removes align tests that require hungarian package from quicktests; - [x] Allow basis set blocks to be names ""custom"", ""special"", ""general"" w/o spewing a page of errors at you.; - [x] CMake: upgrade versioner to avoid hard-coded project version. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/974:280,avoid,avoid,280,https://psicode.org,https://github.com/psi4/psi4/pull/974,1,['avoid'],['avoid']
Safety,"## Description; Misc. cleanup related to SCF densities. Marking function returns const, removing redundant class members, and condensing variable declarations and variable definitions. ## Checklist; - [x] Quicktests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2425:97,redund,redundant,97,https://psicode.org,https://github.com/psi4/psi4/pull/2425,1,['redund'],['redundant']
Safety,"## Description; More build changes. ## Todos; Notable points that this PR has either accomplished or will accomplish.; - [x] enable py3 testing; - [x] fix versioning at releases, allow conda build to get version before build; - [x] fix case where Fortran compilers required, but not detectable, have to be passed in; - [x] dashboard back. ## Questions; - [x] After these two PRs, just waiting on plugins from @jturney . ## Status; - [x] Ready to go **after oct_cmake**",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/488:283,detect,detectable,283,https://psicode.org,https://github.com/psi4/psi4/pull/488,1,['detect'],['detectable']
Safety,"## Description; Mostly, get psi4 up-to-date with pybind again, remove extraneous python linking, and sanitize chemps2 & pcmsolver test case names and ctest labels. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] add message-coloring module, useable by all, and used to warn about <4.9 GCC and highlight addon detection; - [x] make autodocing tools aware of the detci properties psivars that are now set py-side; - [x] re-work some list casting that (with pybind11 Nov 16 updates) broke our array options; - [x] dropped the versioned code object library in psi4/src/CM; - [x] documented python/pybind linking a bit; - [x] ctest `shorttests` gone and `minitests` in; * **User-Facing for Release Notes**; - [x] `dmrg` tests and label now accessed through `chemps2`; - [x] `pcmsolver` tests dropped ""pcm"" prefix; - [x] tests involving external code now accessible with label `addon` rather than `ext-exe-dep`; - [x] no longer linking to libpython. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/524:376,detect,detection,376,https://psicode.org,https://github.com/psi4/psi4/pull/524,1,['detect'],['detection']
Safety,"## Description; My debugging efforts indicate the problem with #1325 is that when attempting to clone a molecule with an atom with ZMAT and Cartesian coordinates, when that ZMatrixEntry atom is cloned, its `rto_`, `ato_`, `dto_` CoordEntries are Cartesian. This somehow leads to the parent ZMatrixEntry having `computed_` true, but not for `rto_` and friends. So, we somehow have a bug in molecule creation. To avoid creating new bugs, I want to understand exactly what is going on before trying to implement a fix. Unfortunately, this part of the code is not in great shape. I'll hopefully include a fix for the bug in here, but in the meantime, I'm submitting the code cleanup I'm doing as I try to follow this part of the code. We do not want `libmints` changes to escape a thorough vetting process. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Cleanup `CoordValue` and `CoordEntry`; - [x] Document `add_atom` and `add_unsettled_atom`; - [x] Actually fix #1325 . ## Checklist; - [ ] Is it worth adding a test for this bugfix? This should be a quick one to test, but it looks like we're seeing timeouts due to test overload again.; - [x] Tested this fixes #1325 ; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) obsessively - everything in ctest except the dft benchmarks and python-vibanalysis. ## Status; - [x] Ready for review; - [ ] Ready for merge. (After the question of whether to add a test.)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1379:411,avoid,avoid,411,https://psicode.org,https://github.com/psi4/psi4/pull/1379,2,"['avoid', 'timeout']","['avoid', 'timeouts']"
Safety,"## Description; New PR for [PR#990](https://github.com/psi4/psi4/pull/990) to avoid a mess of merge conflicts. Thanks to @robertodr for the help. Provides a remedy for [#909](https://github.com/psi4/psi4/issues/909). `Molecule::mass` and `Molecule::Z` show inconsistent behavior for ghosts. This PR requires a new argument `bool zero_ghost` on the C++ side and optionally in the Python layer which gives a choice for behavior. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Required C++ argument `bool zero_ghost` for `Molecule::mass`; - [x] Optional python argument `bool zero_ghost` for `Molecule::mass` (default false); - [x] Required argument `bool zero_ghost` for `Molecule::Z`; - [x] Optional python argument `bool zero_ghost` for `Molecule::Z` (default true); - [x] Optional C++/python argument `bool zero_ghost` for `Molecule::center_of_mass`; - [x] Optional C++/python argument `bool zero_ghost` for `Molecule::inertia_tensor`; - [x] Check all C++ calls for ""intended behavior""; * **User-Facing for Release Notes**; - [x] New optional python arguments for `Molecule.mass()`, `Molecule.Z()`, `Molecule.center_of_mass`, and `Molecule.inertia_tensor`. ## Questions; - For clarity: ""previous behavior"" is that `mass` returns non-zero for ghost atoms (equivalent to `zero_ghost = false`), and `Z` returns zero for ghost atoms (`zero_ghost = true`).; - `Molecule::mass` and `Molecule::Z` on the C++ side now need to be passed either `True` or `False`, for whether or not to return zero for ghost atoms. I'm defaulting to previous behavior in most cases, though there are some (such as `optrot.cc`) that likely need to be changed. See the discussion in [#909](https://github.com/psi4/psi4/issues/909).; - May also need a logic pass of `center_of_mass` and `inertia_tensor` in a separate PR?; - Suggestions for changes C++ side or py-side are greatly encouraged. ; - This is a good chance to consider changing some `Z` calls to `tru",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1355:78,avoid,avoid,78,https://psicode.org,https://github.com/psi4/psi4/pull/1355,1,['avoid'],['avoid']
Safety,"## Description; OpenMP detection is very finely balanced to compensate for LAPACK demands, `libgomp` self aggrandizement, and psi4's need to sanely and transparently impose the psi4-compile-omp status on any derived plugins. Unfortunately, #1348 disturbed some of that for the particular case of plugins with fewer active languages than their parent psi4. A plugin (dfmp2) wasn't inheriting openmp from psi4 and thus was giving unknown openmp pragma warnings upon compile. This wasn't getting caught on linux because I was only checking that iomp5/gomp/omp weren't mixing, not that at least one was present. By happenstance, this did trigger an error on Mac in the course of building `psi4-dev`. This seems to patch things up on Linux. Will use this branch to try out Mac again. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1520:23,detect,detection,23,https://psicode.org,https://github.com/psi4/psi4/pull/1520,1,['detect'],['detection']
Safety,"## Description; Optimizes the integral transformation step of SAPT(DFT), in which the transformed MO needs to be written to the disk. The `STORE` scheme in `src/psi4/lib3index/dfhelper.cc` has problem in writing blocks of integrals efficiently, and this PR changes it to `direct_iaQ` to optimize the writing process. Also fixed a few memory related bugs and modified a few timer tags.; The deafult scaling scheme of SAPT(DFT) exchange-dispersion energy is now changed from `DISP` to `FIXED`. It scales the uncoupled Exch-Disp2 by 0.769848. Deeper details are discussed in the paper [Y. Xie, D. G. A. Smith, and C. D. Sherrill, J. Chem. Phys. **157**, 024801 (2022)].; The SAPT(DFT) procedure is also optimized for the case that `SAPT_DFT_FUNCTIONAL = HF`, i.e. running SAPT0 with the SAPT(DFT) driver, to avoid redundant SCF calculations. ## Todos. - [ ] Optimization of disk I/O in SAPT(DFT) integral transformation; - [ ] Fixed minor memory related bugs and modified timer tags; - [ ] Switched default exch-disp scaling scheme to FIXED (default factor 0.769848); - [ ] Optimization of SAPT(HF) procedure. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481:805,avoid,avoid,805,https://psicode.org,https://github.com/psi4/psi4/pull/2481,2,"['avoid', 'redund']","['avoid', 'redundant']"
Safety,"## Description; Part of #1144. DFOCC was already formatted in #797, so there's very few changes. DMRG we want to avoid formatting so can easily diff with the plugin in the CheMPS2 repo. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1392:113,avoid,avoid,113,https://psicode.org,https://github.com/psi4/psi4/pull/1392,1,['avoid'],['avoid']
Safety,"## Description; Part of #1144. Way too long to scroll through. No PRs open on occ, so safe to format. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1391:86,safe,safe,86,https://psicode.org,https://github.com/psi4/psi4/pull/1391,1,['safe'],['safe']
Safety,"## Description; Provide a brief description of the PR's purpose here. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Bump CheMPS2 to v1.8.4; - [x] Bump Libint to Ninja-able version, v1.2.1+2; - [x] Bump Pybind11 to v2.2.2. Note that this invokes symbol hiding, so ...; - [x] Include Jet's `PSI_API` macro to re-expose classes for plugins.; * **User-Facing for Release Notes**; - [x] Note that anyone wanting to re-use an `objdir` will need to **thoroughly** remove the old pybind11 v2.0.0 from detectability. This means:; - `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/includes/pybind11`; - `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/share/cmake/pybind11`; - `<objdir> rm -rf external/upstream/pybind11`. ## Status; - [x] Ready for review; - [x] Ready for merge. @psi4/editors, these should be quick and uncontroversial. Getting this in would help the PR assembly line.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/950:562,detect,detectability,562,https://psicode.org,https://github.com/psi4/psi4/pull/950,1,['detect'],['detectability']
Safety,"## Description; Provide a brief description of the PR's purpose here. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Makes `psiapi.ipynb` build friendlier by not executing notebook (safe on Mac, highly uncertain on Linux) and by bypassing the nbsphinx altogether if not installed. Pre-executed notebook.; - [x] Starts a `conda/` dir and tidies the conda versioning file into it.; - [x] Suppress output from `_psi4_which` upon loading external exe, hopefully fixing psi4/psi4#656 ; * **User-Facing for Release Notes**; - [x] Set up Linux plugins through conda by preempting PluginCache. Plus docs.; - [x] skipping extern1/2 for py3.6 since fail. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/659:250,safe,safe,250,https://psicode.org,https://github.com/psi4/psi4/pull/659,1,['safe'],['safe']
Safety,## Description; Put helPME into build and testing. I know OpenMP detection isn't there and prob have to pass `FFTW_ROOT`. ## Todos. ## Questions. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1357:65,detect,detection,65,https://psicode.org,https://github.com/psi4/psi4/pull/1357,1,['detect'],['detection']
Safety,## Description; Remove some unused files. Bump qcel -- the 0.19 isn't strictly needed but it'll avert some bad qcel+pydantic combinations in the wild. Bump v2rdm -- @hokru noticed an incompatibility after #2100 . . ## Questions; - [ ] May as well wait on this PR until determine if safe to update reference of fchk+dct test. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2128:282,safe,safe,282,https://psicode.org,https://github.com/psi4/psi4/pull/2128,1,['safe'],['safe']
Safety,"## Description; Repercussions from trying to fix #1986 . I think this fixes #1939, fixes #1978, fixes #2011. ## Todos; - [x] standardize pytests on `@using(""<addon>"")` rather than `@using_<addon>`. addon detection is more runtime than compiletime; - [x] start a smoke tests suite of running through `psi4 --qcschema` to live alongside psithon and psiapi; - [x] finally fix the need for pe/pcm to manually set fix_com/fix_reorient. I have a strategy locally.; - [ ] expand `Mol._initial_cartesian` to other ways to construct a Mol; - [x] snsmp2 1.0.4; - [x] pybind11 2.6.1; - [x] pcmsolver ~1.3.?~ 1.3 having some numerical issues with psi, so going back to a patched v1.2.1. ## Questions; - [ ] Opening the discussion to how to deal with methods that needs no_com/no_reorient/symmetry c1 _from_the_beginning_. Many of our present symmetry tolerant methods just need their parts consistent (e.g., dimer, monoA, monoB); whereas, cppe needs the exact input Cart to match the potfile. (Fun fact: a Mol can go from fix_com T -> F but not the reverse.) The sol'n in this PR is to carry the input Cartesians along as `Mol._initial_cartesians` (so long as not a variable or zmat Mol), which can then be used to reset through `set_geometry()` if the method demands it. This member is akin to the `Mol.EFP` object that gets carried along. Presently this is implemented for just the molecule constructors that psithon/psiapi `psi4.geometry()` and qcsk `Mol.from_schema()` use, but should probably be expanded if adopted. Thoughts on whether this is the best way to solve the problem?; - [ ] @robertodr PCMSolver: I'm only imposing c1, not fix_com/orient based on your slack reply. ok? I've removed all those lines from your ctest and pytest examples (except for alpha that needed it for matching). There's a new pcm mode test in test_addons_qcschema.py. It's writing the input file for pcm input, which is a little questionable in the schema-running world, but it's working for now. Any concerns?; - [ ] @maxsche",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2037:204,detect,detection,204,https://psicode.org,https://github.com/psi4/psi4/pull/2037,1,['detect'],['detection']
Safety,"## Description; Requiring libefp was rather a holdover from the early days of code-in-repo add-ons. This PR makes it slightly easier on packagers and enables us to have only three required compile-in dependencies in the figure in the paper (libint, blas/lapack, pybind11). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `#ifdef`-ing the EFP code probably could have been done to varying degrees of thoroughness. But since EFP is tied into `P::e` _and_ Molecule _and_ it's own interface, none of which I wanted to rexamine, this is the one that requires a minimum of recompilation if you change `ENABLE_libefp` ON/OFF. When OFF, the EFP object still exists, but only the constructor, destructor, and nfragments method (that returns 0 fragments). This way the driver needs no mods (which is a good thing, since we can't `#ifdef` python).; - If you build w/o libefp and try an efp-containing molecule, throws a runtime error with text `EFP fragments detected but are not available`.; - [x] slight fix of passing `pybind11_DIR` to plugin cache. helps with mixed install/staged psi4/pybind11. we'll see how this goes, as I'm not sure it's the best fix.; - [x] more thoroughly test cmake variable for PCMSolver path (`if ""@ENABLE_PCMSolver@"".upper() in [""1"", ""ON"", ""YES"", ""TRUE"", ""Y""]`); - Hope this helps a bit on packaging, @susilehtola ; * **User-Facing for Release Notes**; - [x] Psi4 can be build without libefp add-on. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/623:1015,detect,detected,1015,https://psicode.org,https://github.com/psi4/psi4/pull/623,1,['detect'],['detected']
Safety,"## Description; Rewrite of CCHBAR's Wabei algorithm for UHF reference. The old algorithm did quite a bit of unnecessary I/O. The replacement has been designed to compute as many sub-intermedates in the target order to avoid storage of additional intermediate terms, and to avoid expensive sorting of ov^3 buffers. . ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] TDC has requested I take any integral sorts that were required within the Wabei_XXXX functions and move them to some setup function so that they are all preformed before any of the functions run. ; - [x] I also need to remove the first commit that I added from #513 that let me build + run on our cluster. ; * **User-Facing for Release Notes**; This change results in a performance boost, but no end-user changes should be noticed. . ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/540:218,avoid,avoid,218,https://psicode.org,https://github.com/psi4/psi4/pull/540,2,['avoid'],['avoid']
Safety,"## Description; Several general fixes, esp. for PsiAPI mode. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Turning off gnu C++ extensions. This means that `-std=gnu++11` will never get passed, even if CMake can detect that your compiler supports it. Instead will get a `-std=c++11` from pybind11 and possibly another `-std=c++11` if cmake detects that your compiler supports.; - [x] Put docs in order wrt threading; - [x] Make `psi4/__init__.py` pay attention to `PSI_SCRATCH`. Otherwise scratch is non-adjustible in PsiAPI mode.; - [x] Default to serial execution in `psi4/__init__.py`. Can be overruled in Psithon mode through `-nN` or `set_num_threads(N)`. Can be overruled in PsiAPI mode through `set_num_threads(N)`.; - [x] Fix `atexit` deregistering in Py3; - [x] Removed get_/set_num_threads driver wrappers. Still looks the same to users. Prints ""Threads set to %d by Python driver"" in output file so there's a record of the change.; - [x] `psi4.compare_values()` and friends adapted to work with pytest upon success. Recommended pattern: `ans = psi4.compare_values(normal test args here); assert ans`.; - [x] Set up pytest so can test installed psi4 free of cmake/ctest. For the moment, you need to be in `${top-level-psi4-dir}/tests/pytest`, have pytest installed (`conda install pytest`), have psi4 importable (`psi4 --psiapi-path`), and run `python -m pytest` or for more info, `python -m pytest -vs`.; - [x] Revive a ccsd(t) sp and an mp2 opt in the cfour interface. Add a pysmoke test.; - [x] Vital tweaks so that psiapi can handle more than vanilla calcs. Includes initializing efp in psi4.geometry, moving pcmsolver path detect to __init__, and the options clearing mentioned above.; - [x] Fix TargetHDF5 detection for detect pre-built case (i.e., conda case). * **User-Facing for Release Notes**; - [x] CMake 3.3 now required; - [x] Using `OMP_NUM_THREADS` and/or `MKL_NUM_THREADS` to guide parallelism in Psi4 is _",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/627:280,detect,detect,280,https://psicode.org,https://github.com/psi4/psi4/pull/627,2,['detect'],"['detect', 'detects']"
Safety,"## Description; So in the course of working on DDD/pydantic, a fix I needed triggered the dreaded ""circular import"" error, which anyone who's tried to alter the driver's fragile import structure has probably seen, too. Being sick of this, I located https://medium.com/brexeng/avoiding-circular-imports-in-python-7c35ec8145ed with advice to do `from .driver import energy`, not `from psi4.driver.driver import energy`. So that's the first pass on the driver imports. This fixes my circular import problem and makes it easier to find others. Since all the imports are churned anyways, I set up `isort` (that is, you can run isort on the repo, not that it's enforced on the repo). This is a utility (https://pycqa.github.io/isort/index.html) that sorts all the imports at the top of the file into stdlib, third_party, and first_party blocks and then alphabetizes the imports within. It also effectively tests the fragility of the import structure by jumbling them all into alphabetical order. Attempts in past years to run isort led to circular imports and a retreat. This time I was able to fix the single one that came about. Third pass is that I ran `autoflake` on the driver to remove unused stdlib imports. It also removed some `pass` on empty fns that weren't needed because the docstring suffices for the syntax. ## User notes; - [x] the import structure has changed. you might need to add standard library imports to your input files if you use them (e.g., `import math` before `math.pi`) that previously were preloaded by psi4. ## Dev notes & details; - [x] switched import style to relative imports, ran isort, ran autoflake; - [x] actual material changes:; * stop importing `molutil` into `sapt_proc`. this is the main one that allows killing off the embarrassing `temp_circular_import_blocker` fn. https://github.com/psi4/psi4/compare/master...loriab:psi4:import_slayer?expand=1#diff-f3e93ffa6125dd1f79abad7630bbf259bb1daeee89e983d2889b68af6038875aL35; * delay loading fisapt_proc until runti",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3033:276,avoid,avoiding-circular-imports-in-python-,276,https://psicode.org,https://github.com/psi4/psi4/pull/3033,1,['avoid'],['avoiding-circular-imports-in-python-']
Safety,"## Description; Some Psi4-side fixes to getting @bennybp's simint AddOn added. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Includes all commits of #533 ; - [x] Temporarily based off private repo https://github.com/loriab/simint branch config6 until the integration settles down, and we can return to tarballs. Note that if you want to test this branch, you may need to supply your GH credentials during the build to clone simint.; - [x] Adds all the pre-built detection, target referencing, docs, standardized variable names, tests that we expect from an addon to simint; - [x] Continued general documentation on addons.; - [x] Modestly tested- static and dynamic on Linux, dynamic on Mac; * **User-Facing for Release Notes**; - [x] New integral library available with `-DENABLE_simint`. ## Questions for @bennybp ; - [ ] There's some questions in external/upstream/simint/CMakeLists.txt; - [ ] I've made the simint on my acct private and just added you and some core developers who may want to test it. If you don't mind it being public, as a temp repo, that'd be a little easier.; - [ ] There are spots where I supply at most separate home, docs, and source links for addons. I've got your website, http://www.bennyp.org/research/simint/, for all three at the moment, so let me know if there are more specifics.; - [ ] I filled in the installing and configuring sections of simint.rst according to the template. Other addons (http://psicode.org/psi4manual/master/interfacing.html) often have middle sections about interacting with the code. Fill in anything you like.; - [ ] Got the following unexpected failing test cases on Linux and partially confirmed on Mac, all segfaulted. Could you take a look? None are in quicktests.; ```; The following tests FAILED:; 	 16 - cbs-xtpl-wrapper (Failed); 	144 - dft-b2plyp (Failed); 	269 - pywrap-checkrun-rhf (Failed); 	270 - pywrap-checkrun-rohf (Failed); 	271 - pywrap-checkrun-uhf (F",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/625:531,detect,detection,531,https://psicode.org,https://github.com/psi4/psi4/pull/625,1,['detect'],['detection']
Safety,"## Description; The Hessian code can be cleaned up by using the SCF class's hessian-vector products. To avoid the need to cast pointers inside the orbital response code, this PR specializes the response class for each reference type, and removes some junk symmetry code. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Specialize response code by reference; - [x] Simplify dipole derivative handling; - [x] Remove symmetry code from response; - [x] Use the `Hx` functions from the SCF class to solve CPHF. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1550:104,avoid,avoid,104,https://psicode.org,https://github.com/psi4/psi4/pull/1550,1,['avoid'],['avoid']
Safety,## Description; The IWL integrals are calculated but apparently not needed for DF-DCFT. Added IF/ELSE clause to avoid this. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/912:112,avoid,avoid,112,https://psicode.org,https://github.com/psi4/psi4/pull/912,1,['avoid'],['avoid']
Safety,"## Description; The PCMsolver interface takes as input nuclear charges (`mol.Z(i)`) to identify the elements, but did not account for ghost atoms.; Change asks now for the atomic number and thus also avoids`mol.fZ(i)=0`. **This forms the cavity also around the ghost atoms**, which I think is the expected behaviour. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] fixes #1656 . ## Checklist; - [x ] `ctest -R pcm` passes; - [x] The `charges` array no longer contains zeros for ghost atoms (manual inspection). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1977:200,avoid,avoids,200,https://psicode.org,https://github.com/psi4/psi4/pull/1977,1,['avoid'],['avoids']
Safety,"## Description; The `JK_deriv2` function exists to compute the overlap-derivative-times-TEI part of the right side of the CPHF equation. It's a J-term and a K-like term. with overlap derivative integrals instead of a density.[1] The previous algorithm to do this first computed the alpha spin part in one function call, and then the beta spin part in another function call. This approach was redundant. The first function call had all the intermediates _necessary_ to compute the beta part, but didn't use them. As a result, the function re-computed JK. This PR refactors `JK_deriv2` so it computes both spin cases in a single function call. [1] = There's also a Vx term, but its implementation was both unused and buggy. Now it's just unused. Trying to use it in the _old_ way would be even more redundant. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] The UHF hessian algorithm has been slightly adjusted, which should lead to slightly faster computations. Please report any errors. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Refactored `JK_deriv2` to compute both spin cases in a single function call.; - [x] Makes UKS LDA hessians much less ugly.; - [x] Makes `JK_deriv2` comply with `compute_Vx`'s expected function signature . ## Checklist; - [x] `ctest -R scf-hess` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2994:392,redund,redundant,392,https://psicode.org,https://github.com/psi4/psi4/pull/2994,2,['redund'],['redundant']
Safety,"## Description; The final step of the CompositeJK saga. The previous PR in this chain, https://github.com/psi4/psi4/pull/2833, introduced the CompositeJK framework to Psi4, a class by which to enable arbitrary mixing and matching of different algorithms for constructing the J and K matrices separately, with front-end changes to match. The big issue with the current formulation of CompositeJK, is that every single separate J or K build algorithm in Psi4 (currently DF-DirJ, LinK, and COSX) is contained within CompositeJK itself. This runs a high risk of CompositeJK becoming monolithic, especially as more separate J/K build methods are added (e.g., CFMM). This PR is meant to be the solution to that issue. Rather than storing every separate J or K build algorithm in CompositeJK itself, they are now implemented as derived classes of a new base class, SplitJK. SplitJK features the `build_G_component` member function, which derived classes of SplitJK then implement to execute their own algorithm for building one of J or K. CompositeJK is reworked to match, featuring a pair of shared_ptrs to SplitJK classes, one representing the J algorithm, and one representing the K algorithm. Actual machinery for computing J or K, as well as other functionalities such as header printing, is then done through calling corresponding functions from the SplitJK pointers. My thought is for this PR to be added in v1.9. ## User API & Changelog headlines; N/A. ## Dev notes & details; - [x] Implements the SplitJK class for representing algorithms that build one of J or K.; - [x] Refactors DF-DirJ, LinK, and COSX as derived classes of SplitJK.; - [x] Reworks the CompositeJK class to execute in terms of SplitJK derived classes. ## Questions; - [ ] Is passing the eri_computers variable to COSX::build_G_component() as an argument acceptable, even though it is unused in that function? My logic, for now, is that the SplitJK implementation allows for a universal interface for calling different SplitJK der",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2955:550,risk,risk,550,https://psicode.org,https://github.com/psi4/psi4/pull/2955,1,['risk'],['risk']
Safety,"## Description; The main things to get over our docs troubles happened elsewhere:; * hosting the built `html/` through GH pages avoids the `/` anchors that netlify was dropping into our href links that were in turn confusing the psicode.org redirects (https://github.com/psi4/psicode-hugo-website/blob/master/netlify.toml#L14) and making links seem broken for psicode.org/psi4manual .; * the combination of progressing Sphinx development and stagnant cloud theme development (from which the sphinx_psi_theme is derived) eventually robbed us of the ""search"" bar and the homing logo. That got minimally revived through https://github.com/psi4/sphinx-psi-theme/commit/feda2119994519c6dc1eb0979686c9cdbf916acc , so use the v1.1 now. But there's a few modest improvements here, especially to allow anyone so inspired to switch the docs theme and figure out new customizations. Apart from a certain fondness for the colors and an insistence that tables like https://psicode.org/psi4manual/master/introduction.html#id59 not be mangled, I'd be pleased if anyone wanted to overhaul the docs theme. Some things to know:; * psi4 colors and specializations are https://github.com/psi4/sphinx-psi-theme/blob/master/sphinx_psi_theme/themes/sphinx_psi_theme/theme.conf#L37; * to use a different theme, pass `-DSPHINX_THEME=another_theme` to cmake (or edit it in the cache); * build with `cmake --build . --target sphinxman`; * built docs will be in `<objdir>/doc/sphinxman/html/`. that html dir can be tarred and sent anywhere to load in a browser. ## Dev notes & details; - [x] the two sphinx extensions that were in the sphinx_psi_theme are now stored here in the repo. this lets them be used by any theme, which is important for the QCVariables one that otherwise emits thousands of warnings.; - [x] more logic around `@SPHINX_THEME@` in the controlling docs/sphinxman/source/conf.py.in so that one can use options and configuration particular to different themes. feel free to add more. tried themes are psi, clo",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3053:128,avoid,avoids,128,https://psicode.org,https://github.com/psi4/psi4/pull/3053,1,['avoid'],['avoids']
Safety,"## Description; The resurrection of #2543. This PR refactors my LinK code (#2359) and Zach's semi-numerical K (#2567) code into the CompositeJK framework (to allow mixing and matching of J and K types). The DirectDFJ implementation here is derived from Zach's semi-numerical K PR. This framework is robust and allows for the rapid development of new J/K methods and combinations in the future, and avoids code duplication. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Creates composite JK framework to allow for mixing and matching of different J/K types; - [x] Makes LinK usable with the DirectDFJ algorithm. ## Questions; - [x] To call my LinK code, `SCF_TYPE` is set to `LINK`, should it be `DFJ_LINK` instead?. ## Checklist; - [x] Tests added for any new features; - [x] Passing pytests for COSK (from Zach) and LinK; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2588:398,avoid,avoids,398,https://psicode.org,https://github.com/psi4/psi4/pull/2588,1,['avoid'],['avoids']
Safety,"## Description; The support for matrices with `symmetry() != 0` is flawed in several places in the matrix class. While *some* operations are only valid if the matrix is totally symmetric, most do not have this requirement. . These issues have long gone unnoticed because the majority of places where the object is used the quantity will be totally symmetric. I started noticing these flaws while working on TDDFT which will require most of the changes made here in order to work properly. ## FYI; - Comments/error messages/variables names have been updated to make meaning more precise.; - In general the non-zero block of the matrix found at `matrix_[h]` has shape `{rowspi_[h], colspi_[h^symmetry_]}` **not** `{rowspi_[h], colspi_[h]}`. The two are coincidentally the same when `symmetry_ == 0` (This was the cause of many segfaults/incorrectly raised errors).; - I have aggressively applied DRY to avoid issues. Example (`add`, `subtract`, and `axpy`) all lead to different calls to `C_DAXPY`, however `axpy` computed the size incorrectly and led to a segfault. ; - I have added unit tests for the matrix class to avoid reintroducing any of the bugs I root out. ## Todos; - [x] python bindings for non-totally symmetric constructor; - [x] consolidate `axpy` type operations, fix size issue; - [x] consolidate `gemm` type operations, fix A/B/C block logic. ## Questions; - [ ] If anyone has noticed problems, missing/bugged functionality that I have missed now is a good time to point them out. . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1383:901,avoid,avoid,901,https://psicode.org,https://github.com/psi4/psi4/pull/1383,2,['avoid'],['avoid']
Safety,"## Description; The user-supplied occupation arrays weren't sanity checked, which caused segfaults. This PR makes psi4 give an error message instead. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/602:60,sanity check,sanity checked,60,https://psicode.org,https://github.com/psi4/psi4/pull/602,1,['sanity check'],['sanity checked']
Safety,"## Description; This PR aims to implement computation of multipole potential integrals up to a desired; order. Such integrals are used for EFP and PE (#1401), where for EFP, the integrals; are already implemented, but are always computed through third order (octupoles). For PE, often parameters are only available up to quadrupoles, so I'd like to avoid computation; of higher order integrals all the time. ~~The code is copied from `efpmultipolepotential`, so probably one should decide on whether; to keep `efpmultipolepotential` or to use the new code to avoid code duplication.~~. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] enable octupole moments as well; - [x] change ordering of cartesian components to Cartesian; - [x] use `multipolepotential` for EFP (`ao_efp_multipole_potential` calls `ao_multipole_potential` and does the remapping of components in `mintshelper.cc`); - [x] remove `efpmultipolepotential.{hh,cc}`; - [x] tests of the actual integrals using finite differences. ## Questions; - [x] ~~Switch to `multipolepotentials` for EFP in another PR?~~. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1657:349,avoid,avoid,349,https://psicode.org,https://github.com/psi4/psi4/pull/1657,2,['avoid'],['avoid']
Safety,"## Description; This PR changes the code to fix the majority of combinations of `SCF_TYPE`/`SCF_SUBTYPE`/`SCREENING` keywords which were previously broken. It was discovered that there were a lot of combinations of `SCF_TYPE`, `SCF_SUBTYPE`, and `SCREENING` keywords (e.g., `SCF_TYPE = {CompositeJK}` with `SCREENING = NONE`) that would break upon use, either with an exception or with a hard error such as a segfault. PR https://github.com/psi4/psi4/pull/2978 added testing to detect these broken combinations. This PR actually fixes the broken combinations detected through the added test. The most notable change as a result of fixing these issues is the handling of how certain variables within the `TwoBodyAOInt` class are initialized. To enable universal support of JK builds with `SCREENING = NONE`, an option has been added to manually call the `TwoBodyAOInt::create_sieve_pair_info()` function via the new wrapper function `TwoBodyAOInt::initialize_sieve()`. Multiple JK builds rely on values of variables initialized via `create_sieve_pair_info()` , and `initialize_sieve()` is now used to initialize the required variables if `SCREENING = NONE` is set. In this way, `SCREENING = NONE` can exist with the benefits it provides, while still working with all JK builds. Also, changes are made to ensure that no screening actually occurs in JK builds when `SCREENING` is set to `NONE`. In line with the above, some tests have been expanded. `test_comprehensive_jk_screening.py` has been changed to account for the `SCF_TYPE`/`SCF_SUBTYPE`/`SCREENING` combinations that were fixed. `test_erisieve.py` has been updated to more thoroughly test `SCREENING=NONE`. It is worth noting that, unfortunately, `TwoBodyAOInt::initialize_sieve()` must be defined per integral engine, and so the fixes of this PR only work with Libint2. The issues this PR tries to fix, still persist if Simint is used instead. ## User API & Changelog headlines; - [X] N/A. ## Dev notes & details; - [X] Adds a new function to",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3060:478,detect,detect,478,https://psicode.org,https://github.com/psi4/psi4/pull/3060,2,['detect'],"['detect', 'detected']"
Safety,"## Description; This PR contains a refactored version of the Dimension class in which data is no longer stored in a `int*` array but on `std::vector<int>`. This eliminates a potential bug of the old code (memory was potentially freed even for a zero-length vector). After working on this PR I realized that the dependency on `int*` runs pretty deep in Psi4. It affects major libraries (dpd, libtrans, libfock,...). So I still had to leave a way to get a `int*` to the data stored in the class member `std::vector<int>` object. Things are slightly complicated also by the fact that Wavefunction exposes Dimension objects via functions that return constant references. Some work was done to reduce the number of Dimension->int* casts. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [X] Modernize the Dimension class.; - [X] Fixes a potential problem with memory.; - [X] Adds exceptions to operations that could potentially involve Dimension objects of different dimensions.; - [X] Avoids exposing non-const Dimension objects.; - [X] Refactors MatrixFactory to use Dimension objects. ## Status; - [X] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/571:1043,Avoid,Avoids,1043,https://psicode.org,https://github.com/psi4/psi4/pull/571,1,['Avoid'],['Avoids']
Safety,"## Description; This PR enables CCSD calculations with the PCM in the [PTED (Perturbation-To-Energy-and-Density) approximation](http://dx.doi.org/10.1063/1.3245400). The PCM potential is calculated from the CCSD _density_. Thus macroiterations are introduced to solve the CCSD amplitude **and** multiplier equations, obtain the CCSD density and update the PCM potential. @jH0ward the macroiterations are handled in the Python layer. . ~There are two test cases, both currently failing, and the code is quite ugly.~. ## Todos; * **User-Facing for Release Notes**; - [x] For SCF, the PCM potential is now added on top of the Fock matrix in `form_F()`. I added a `std::vector<SharedMatrix> external_potentials_` to the HF base class. External potentials are stored there and then added on top `Fa_` and `Fb_` in the implementation of `form_F()` for the RHF, UHF and ROHF subtypes. This was necessary to get ROHF to work with PCM.; - [x] `compute_E()` for the RHF, UHF, ROHF and CUHF subtypes of the abstract HF type now use the one- and two-electron matrices to compute the energy, instead of `Fa_` and `Fb_`. This avoids ambiguities when external potentials, such as PCM, have been/will have to be added to the Fock matrix. ; - [x] CCSD with the PCM in the PTED approximation.; - [x] Final report of energy clearly reports polarization and correlation components for the PTE and PTED schemes.; - [x] Added tests for RHF and UHF references.; - [x] Updated version of PCMSolver. ## Known problems; - The HeH+ test case (`pcmsolver-ccsd-pted-heh+`) doesn't work when setting a ROHF reference. I suspect the problem is in the [`update_Fock_matrix_rhf` function in `ccdensity/ccdensity.cc`](https://github.com/psi4/psi4/pull/810/files#diff-ed90974ac2a85f17445ff27956c7d6dfR791). ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/810:1112,avoid,avoids,1112,https://psicode.org,https://github.com/psi4/psi4/pull/810,1,['avoid'],['avoids']
Safety,"## Description; This PR entirely removes the Obara-Saika code for one-electron integrals. Note that, as explained in #2473, the *unique* `PseudoSpectralInt` functionality (erf integrals) is not used anywhere in Psi right now, so it can be safely removed. Once the problems with L2 (which currently put #2473 on hold) are sorted out, this functionality will become available. **Merge button click** reserved for @andysim. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Remove `osrecur.{cc,h}`; - [x] Remove `PseudoSpectralInt` (will be reconciled in #2473). ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2517:239,safe,safely,239,https://psicode.org,https://github.com/psi4/psi4/pull/2517,1,['safe'],['safely']
Safety,"## Description; This PR exposes the two functions `compute_orbitals` and `compute_density` from `CubeProperties` to the Python layer. This allows for more flexible dumping of cube files. Example Code:; ```Python; import psi4; import numpy as np. def test_cube_files(expected, computed):; expected = np.genfromtxt(expected, skip_header=9, skip_footer=1); computed = np.genfromtxt(computed, skip_header=9, skip_footer=1); np.testing.assert_allclose(expected, computed, atol=1e-14). mol = psi4.geometry(""""""; O 0 0 0; H 0 0 1.795239827225189; H 1.693194615993441 0 -0.599043184453037; symmetry c1; units au; """"""). psi4.core.be_quiet(); psi4.set_options({'basis': ""sto-3g"",; 'scf_type': 'pk',; 'cubeprop_tasks': ['density', 'orbitals']}); scf_e, wfn = psi4.energy('SCF', return_wfn=True); psi4.cubeprop(wfn). cubegen = psi4.core.CubeProperties(wfn). dt = wfn.Da(); dt.add(wfn.Db()); cubegen.compute_density(dt, ""hf_density""). # obtain alpha coefficients; orbs = wfn.Ca_subset(""AO"", ""OCC"").np; # select the two highest occupied orbitals; occs = orbs[:, -2:]; occs_pm = psi4.core.Matrix.from_array(occs); cubegen.compute_orbitals(occs_pm, [0, 1], [""homo-1"", ""homo""], ""orbital""). test_cube_files(""Dt.cube"", ""hf_density.cube""); test_cube_files(""Psi_a_5_5-A.cube"", ""orbital_2_homo.cube""); test_cube_files(""Psi_a_4_4-A.cube"", ""orbital_1_homo-1.cube""); ```. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] export functions . ## Questions; - [x] ~~Should some tests be added for this? Like in the example code above to be 100% safe?~~ I added a simple test like in the example script to be safe. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1917:1564,safe,safe,1564,https://psicode.org,https://github.com/psi4/psi4/pull/1917,2,['safe'],['safe']
Safety,"## Description; This PR fixes a bug in the UHF gradients for systems with no beta electrons (1-electron systems).; On line 463 of `psi4/src/psi4/scfgrad/jk_grad.cc` I couldn't avoid skipping this operation because this buffer is read somewhere else (and it practically does not matter for 1-electron systems).; ```C++; // > Stripe < //; psio_->write(unit_b_, ""(A|ij)"", (char*)Aijp[0], sizeof(double) * np * nb * nb, next_Aijb, &next_Aijb);; ```; ## Todos; - [x] Fixes logic in `scf_grad` code. ## Checklist; - [x] Added a test of the UHF gradient for H2+.; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2344:176,avoid,avoid,176,https://psicode.org,https://github.com/psi4/psi4/pull/2344,1,['avoid'],['avoid']
Safety,"## Description; This PR follows the change of PR #2064. To avoid compilation errors for any downstream packages, `Lagrangian()` and `X()` in the `Wavefunction` class have been marked deprecated instead of removing them. Future code should use lowercase `lagrangian()` and `set_lagrangian()` to obtain and set the orbital Lagrangian matrix (both C++ and Python), respectively. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2066:59,avoid,avoid,59,https://psicode.org,https://github.com/psi4/psi4/pull/2066,1,['avoid'],['avoid']
Safety,"## Description; This PR implements the partial Cholesky orthogonalization procedure I've recently described in https://arxiv.org/abs/1911.10372, which can be used to avoid pathological linear dependencies in the basis set. This is the simple version of the algorithm which just hides the pathological functions; the more sophisticated one is already available in ERKALE but it is limited to fixed geometries. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Partial Cholesky decomposition implemented; - [x] Calculation of basis function extents via `r^2` value implemented; - [x] Basis functions sorted so that steep ones get treated first by the decomposition. ## Questions; - [x] How to handle the sorting of basis functions in the presence of symmetry? AFAIK each SO basis functions is a superposition of identical functions on different atoms; this means that the corresponding symmetry-blocked `r^2` values could just be one of these.; - [x] Although matrix.cc already implements pivoted Cholesky, it's also available in LAPACK as `dpstrf()`. Maybe the implementation should be replaced with a call to LAPACK?; - [ ] Would it be possible to make Psi4 drop the irrelevant shells altogether from the basis set to make calculations more efficient? This would need to be done at every geometry... ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1760:166,avoid,avoid,166,https://psicode.org,https://github.com/psi4/psi4/pull/1760,1,['avoid'],['avoid']
Safety,"## Description; This PR is an effort to move towards canonical C++11 usage: ; 1. it removes use of `new` when creating `std::shared_ptr`s in favor of `std::make_shared`.; 2. it uses `auto` on the left-hand side of the `std::shared_ptr` declarations.; 3. it replaces occurrences of `NULL`, signalling the null pointer, with `nullptr`.; These are changes suggested by the modern C++ best-practices and are explained in detail in Scott Meyers' [Effective Modern C++]. . ## Why?; #### Prefer `std::make_shared` to direct use of `new`; Using `std::make_shared`:; 1. Reduces code verbosity, especially when coupled with `auto`:; ```; std::shared_ptr<Matrix> F = std::shared_ptr<Matrix>(new Matrix(""Fock matrix"", nso, nso)); // Type information written down 3 TIMES!!!; std::shared_ptr<Matrix> F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // So much typing...; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // Much better!!!!; ```; 2. Ensures exception safety and prevents resource leaks.; 3. Improves efficiency:; ```; // Performs TWO allocations; std::shared_ptr<Matrix> F = std::shared_ptr<Matrix>(new Matrix(""Fock matrix"", nso, nso)); ; // Performs ONE allocation; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); ; ```. _Reference_: Item 21 in [Effective Modern C++].; #### Prefer `auto` to explicit type declarations; Using `auto` reduces and/or avoids:; 1. Verbosity in variable declarations:; ```; std::shared_ptr<Matrix> F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // So much typing...; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // Much better!; ```; 2. Problems with uninitialized variables. `auto` works like template type deduction, hence the right-hand side of the declaration **needs to have** an initializer:; ```; int x1; // fine, but initialized :(; auto x2; // WON'T COMPILE!!!; auto x3 = 1; // fine and initialized; ```; 3. Problems with unintended type casts and type mismatches that are hard to impossible to catch:; ```; s",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/836:970,safe,safety,970,https://psicode.org,https://github.com/psi4/psi4/pull/836,1,['safe'],['safety']
Safety,"## Description; This PR is something of an independent project, although it is also a precursor of the continuation of https://github.com/psi4/psi4/pull/2695, as agreed upon by discussion there. This PR completely eliminates the `ERISieve` class, and replaces all of its old functionalities with that of `TwoBodyAOInt`. `ERISieve` is a class in libmints that does many of the same things as `TwoBodyAOInt`. The amount of features that `ERISieve` has, that `TwoBodyAOInt` doesn't, is minimal. It's really just absolute redundancy. Currently, `ERISieve` _only_ finds use within the PKJK class and its subalgorithms. As mentioned, this PR eliminates `ERISieve` and replaces it with `TwoBodyAOInt` in all of the former's previous use cases. Any previously-utilized functionality that was present in `ERISieve` and not in `TwoBodyAOInt` (a couple functions determining basis function significance) were added to `TwoBodyAOInt`. Furthermore, any adjustments needed to support `TwoBodyAOInt` within the PKJK code were made. With all of this, `ERISieve` was also ripped out of the code entirely. Maybe it could go into the attic. ## User API & Changelog headlines; - [X] The core.ERISieve class has been removed, along with its associated functions core.ERISieve.build and core.ERISieve.shell_significant. The removed functionalities, specifically shell_significant, can be accessed via the construction of a TwoBodyAOInt object. ## Dev notes & details; - [X] The `ERISieve` class in libmints has been removed from Psi4 and replaced with `TwoBodyAOInt`.; - [X] Functionalities in `ERISieve` that were not in `TwoBodyAOInt` and were required in the code, were added to `TwoBodyAOInt`.; - [X] The PKJK files have been adjusted as necessary to support the use of `TwoBodyAOInt`. ## TODO; - [ ] Remove ERISieve from all other external plugins (currently focusing on v2rdm_casscf). ## Questions; - [ ] I guess `ERISieve` can go into the attic now?. ## Checklist; - [X] Tests added for any new features; - [X] [All ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2933:518,redund,redundancy,518,https://psicode.org,https://github.com/psi4/psi4/pull/2933,1,['redund'],['redundancy']
Safety,"## Description; This PR is the first in a series of planned PRs designed to remove density screening from the TwoBodyAOInt object and into the JK object. Having density screening available in TwoBodyAOInt runs the risk of applying density screening to algorithms where density screening doesn't make sense. Thus, it would be a good idea to move the logic of density screening to where it is more correctly applied, i.e., the JK object. This PR solves two issues simultaneously:. 1. The primary purpose of this PR is to change the test_erisieve.py tests to work with the planned future density screening refactor. One issue that moving density screening from TwoBodyAOInt to JK currently brings up, is that it causes the tests on density screening within the pytest test_erisieve.py to fail. These failures occur because test_erisieve.py performs its screening tests directly using an ERI object generated by IntegralFactory. With density screening being removed from the TwoBodyAOInt object, this method of density screening testing can no longer be done. The current PR is designed to address this issue for when the density screening refactor happens. The aforementioned issue is addressed by implementing a new variable to the HF wavefunction, computed_shells_per_iter_, which keeps track of the number of shell quartets computed per SCF iteration. The computed_shells_per_iter_ variable is accessible to the user via Python, and thus can be used to conduct screening tests. In this way, density screening tests can be performed without the need for an ERI object. 2. As a bonus from the changes introduced by this PR, the DirectJK algorithm no longer has a need to print computed shell quartet counts to bench.dat. Bench.dat is used exclusively by the DirectJK object to dump the number of shell quartets computed per SCF iteration somewhere. That data is now accessible to the user in a cleaner fashion - it can be accessed through Python, in a manipulatable format. ## Notes; 1. Note that the ch",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2547:214,risk,risk,214,https://psicode.org,https://github.com/psi4/psi4/pull/2547,1,['risk'],['risk']
Safety,"## Description; This PR is the second in a series of planned PRs designed to remove density screening from the TwoBodyAOInt object and into the JK object, with PR #2547 being the first such PR. Having density screening available in TwoBodyAOInt runs the risk of applying density screening to algorithms where density screening doesn't make sense. Thus, it would be a good idea to move the logic of density screening to where it is more correctly applied, i.e., the JK object. The primary purposes of this PR are twofold:; 1. First, this PR introduce the shell_significant() framework to the JK class. The shell_significant() framework starts with a shell_significant() virtual function that exists in the base JK class. The shell_significant() function can then be redefined specifically for different JK derived classes as needed. The existence of shell_significant() provides a unified framework for performing screening for any JK method, and it also provides the method by which density screening can be added directly to the relevant JK classes.; 2. Second, this PR uses the shell_significant() framework to reimplement screening for certain JK methods. Most significantly, as implied in the first point, the biggest change in this regard was the removal of shell_significant_density() from TwoBodyAOInt into the domain and its reimplementation into the DirectJK shell_significant() definition. With this change, density screening is now the domain of individual JK classes rather than the TwoBodyAOInt class, which was one of the primary goals of this overall refactor PR set in the first place. Additionally, another method that was subject to slight changes from the shell_significant() framework was the Yoshimine PKJK algorithm, in which its test for shell significance was implemented using the shell_significant() framework. ## Notes; I wanted to outline what the next steps were for this chain of PRs, since this one accomplishes one of the main goals of the refactor in the first place:;",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2695:254,risk,risk,254,https://psicode.org,https://github.com/psi4/psi4/pull/2695,1,['risk'],['risk']
Safety,"## Description; This PR moves the Polarizable Embedding (PE) tests using CPPE py-side in `test_cppe.py`.; The tests can now be run independently of the configure step (`ENABLE_cppe`) due to runtime detection of CPPE.; As such, the CI pipeline will run the PE tests from now on 😄 . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Move tests; - [x] Nuke old (cmake) tests. ## Questions; - [x] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2140:198,detect,detection,198,https://psicode.org,https://github.com/psi4/psi4/pull/2140,1,['detect'],['detection']
Safety,"## Description; This PR removes some convergence checks in the `dct` module that are redundant (when formulated correctly) and currently not implemented correctly. In the current `dct` code, my threaded computations with near linear dependencies were taking a variable number of iterations to converge, due to the condition `update_scf_density_RHF() < orbitals_threshold_` being false. That check is _intended_ to enforce convergence of the orbitals, which change iteration-to-iteration. `update_SCF_density_RHF` returns a measure of how much the reference density changed but does not treat it with an orthogonalizer, so in the near linearly-dependent case, numerical noise leads to the computation proceeding even after all other convergence metrics are flat. Given the choice between fixing the check or removing it, this PR removes it.; * In the case where orbitals are optimized to _satisfy a commutator equation_, all of our orbital convergence metrics are motivated by SCF. We already have the SCF check for small orbital residual elsewhere in the code. We don't check that the absolute change in the density is small in the SCF case, so we shouldn't check it here, either.; * In the case where orbitals are optimized to _minimize the energy_, there is no theoretical justification for this check. We have existing checks that the residual of the orbital gradient is small. ## Todos; - [x] Removes an unnecessary, buggy `dct` convergence metric. ## Checklist; - [x] `dct` tests still pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2381:85,redund,redundant,85,https://psicode.org,https://github.com/psi4/psi4/pull/2381,1,['redund'],['redundant']
Safety,"## Description; This PR updates options for CPPE (new release is out, including linear-scaling FMM); and adds PE(ECP) repulsive potentials to avoid electron spill-out (https://doi.org/10.1021/acs.jctc.9b01162). ~**Still work in progress....**~. Thanks @loriab for helping with the basis set customization!. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] options for FMM; - [x] bump CPPE version; - [x] option to enable PE(ECP); - [x] add basis set file for ECPs; - [x] add tests for PE(ECP). ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2025:142,avoid,avoid,142,https://psicode.org,https://github.com/psi4/psi4/pull/2025,1,['avoid'],['avoid']
Safety,"## Description; This adds new DF basis files for dzvp. dgauss-dzvp-autoaux was generated using the autoaux program (courtesy Susi Lehtola). This is a short-term solution for the current problem that there is no working DF basis for dzvp, as it is an all-electron basis for elements going beyond Kr. dgauss-dzvp-mix contains a mixture of the previous default, def2-qzvpp-jkfit for H-Br, and dgauss-dzvp-autoaux for heavier elements. The purpose of this DF basis is to avoid the performance decrease (without affecting accuracy) that comes with using dgauss-dzvp-autoaux for all elements. `basislistother.py` has also been updated to use dgauss-dzvp-mix for jkfit and dgauss-dzvp-autoaux for rifit. ## Status; - [x] Ready for review; - [x] Ready for merge. ## Benchmark of basis sets and DF basis sets for conformational energies; [combined-results.pdf](https://github.com/psi4/psi4/files/6167929/combined-results.pdf)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2134:467,avoid,avoid,467,https://psicode.org,https://github.com/psi4/psi4/pull/2134,1,['avoid'],['avoid']
Safety,## Description; This factors the code in the `CMakeLists.txt` of the various plugin templates into one function to avoid; copy/paste. Within this function it then ensures that `CMAKE_PREFIX_PATH` is properly passed to each build in turn allowing the user to build plugins and use externally built Psi4 dependencies. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Adding additional plugin templates to the build system is dramatically simplified; * **User-Facing for Release Notes**; - [x] You can now use external versions of libraries that Psi4 normally compiles with plugins. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/582:115,avoid,avoid,115,https://psicode.org,https://github.com/psi4/psi4/pull/582,1,['avoid'],['avoid']
Safety,"## Description; This is a part of *Psi4* porting to Windows (#933). The last element of `array` is `array[n-1]`, so the access of `array[n]` is not correct:; https://github.com/psi4/psi4/blob/62bb956ccfb38cad1bef7e6227aac70ddb1172f7/psi4/src/psi4/libmoinfo/moinfo_base.cc#L281-L285; It is better to use pointer arithmetics: `array + n`. This is not a bug, just it gives a false positive in memory error detection. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix memory error in `MOInfoBase::convert_int_array_to_vector`. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1480:403,detect,detection,403,https://psicode.org,https://github.com/psi4/psi4/pull/1480,1,['detect'],['detection']
Safety,"## Description; This is a stab at fixing #537. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Kills off `BLAS_LIBRARIES`, `LAPACK_LIBRARIES`, `LAPACKBLAS_LIBRARIES` in favor of finding math libs, making a target for them and installing it into the stage tree. By using a target instead of a var:; * Any linker `-Wl,` directives (start/end-group, as-needed) should be invulnerable to CMake link line optimization that rearranges them beyond usefulness.; * targets can be passed into externals so that psi4 and externals use exactly same math libs.; - [x] Same thing with HDF5. Both now in `external/common`; - [x] Added `-liomp5` into MKL detection.; - [ ] Haven't dealt with GCC+MKL OMP; - [ ] Haven't looked at how this may change exporting Psi4 as target; * **User-Facing for Release Notes**; - [x] OpenBLAS now found by the math detection system thanks to a patch from a friendly sysadmin; - [x] Unless `ENABLE_GENERIC` is on, math detection for MKL searches for `mkl_rt.so` before any layered multi-lib scheme. Adapted from @ryanmrichard PRs. Also tacks on `-ldl` to the end of BLAS patterns, since the link-line advisor says so. ## Questions; - @robertodr, @bast, anyone who knows CMake, comments welcome. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/591:706,detect,detection,706,https://psicode.org,https://github.com/psi4/psi4/pull/591,3,['detect'],['detection']
Safety,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Reduce the number of tests on Appveyor to reduce timeouts. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1249:213,timeout,timeouts,213,https://psicode.org,https://github.com/psi4/psi4/pull/1249,1,['timeout'],['timeouts']
Safety,"## Description; This is part of *Psi4* porting to Windows (#933). Appveyor is falling, because the new version (2019.0) of MKL is not detected. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Lock MKL version. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1240:134,detect,detected,134,https://psicode.org,https://github.com/psi4/psi4/pull/1240,1,['detect'],['detected']
Safety,## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Replace `bzero` with `memset`; - [x] Match function signatures; - [x] Move a function to avoid a forward-declaration; - [x] Fix PSI_API usage; - [x] Add missing header; - [x] `and` --> `&&`; - [x] Disable system/user timer; - [x] Move `<sys/timers.h>` porting to a separate header (after #1078 merged); ; ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1077:268,avoid,avoid,268,https://psicode.org,https://github.com/psi4/psi4/pull/1077,1,['avoid'],['avoid']
Safety,"## Description; This is part of an ongoing PR series to centralize the code for density-fitted correlated gradients into `libmints`, just like the code for correlated gradients with conventional integrals. This is a subproject of #1736. This PR eliminates the file `ref_grad.cc` from `dfocc`. It was introduced [when `dfocc` was first created](https://github.com/psi4/psi4archive/commit/79e61e76d60b2ef5e1d7b4574788c61e24d02c25#diff-ea59ef1daf3141c3d76dee8823286b82) and is dead code. It looks like it was created for DF-SCF gradients. That is the task of [scfgrad](https://github.com/psi4/psi4/tree/master/psi4/src/psi4/scfgrad), so is not needed. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Eliminates an entire file of dead code. ## Questions; - [x] @bozkaya, can you confirm `ref_grad.cc` is safe to delete?. ## Checklist; - [x] `ctest -L df` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1915:850,safe,safe,850,https://psicode.org,https://github.com/psi4/psi4/pull/1915,1,['safe'],['safe']
Safety,"## Description; This pull request fixes #1899 . Multithreaded computation of the ESP potential was invalid, because a buffer_ object was not thread-safe. This pull request disables multithreaded calculation of the ESP on grid for the moment and also adds a unit test to check.; ## Todos; No Todos, this is really just a trivial disable. ## Questions; No question. ## Checklist; - [X] Tests added for any new features. ; - [X] I ran the libmints tests (http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [X] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1900:148,safe,safe,148,https://psicode.org,https://github.com/psi4/psi4/pull/1900,1,['safe'],['safe']
Safety,"## Description; This simplifies some CAS machinery and fixes UKS GGA XC derivatives. ## Todos; * **Developer Interest**; - [x] UKS XC derivates are now (likely) correct through GGA's.; - [x] Fixes silly bug where SCF-level linear response would fail if no OEProp quantities were specified. @ashutoshvt brought this issue up.; - [x] Freezes molecular geometry when setting a variable for cartesian coordinates. @loriab please check this out. Closes #759 and closes #59. If we like this we need fix the odd zmat/cart combined cases.; - [x] Adds SAPT midbond functions for @konpat @loriab ; - [x] Fixes HF3C gradients.; - [x] Makes building molecules slightly safer, closes #765. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/760:657,safe,safer,657,https://psicode.org,https://github.com/psi4/psi4/pull/760,1,['safe'],['safer']
Safety,"## Description; Try to get PCMSolver reintegrated. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; <!--; - [x] This is atop lapack and PR, so you'll want to look only at later commits; - [x] Switched to PCMSolverConfig imported target.; - [x] Based on https://github.com/loriab/pcmsolver.git branch config6; - [x] target `PCMSolver::PCMSolver` -> `PCMSolver::pcm`; - [x] no longer using pcm_placeholder, instead add to path in run_psi4.py; - [x] I'd rather have pcmsolver as a proper module containing __init__, pcmsolver, getkw, etc., but that would mess with other codes use of pcmsolver, I suspect; - [x] This runs with py27 and all tests pass; - [x] this PR is continues from #594 ; - [x] still need to resolve Fortran/-recursive/libifcoremt/OpenMP issue; -->; - [x] Fix some HDF5 detection problems; - [x] Adds some colored ""MKL"" and ""AM"" to CMake output for lapack and libint, respectively, for ready diagnosis.; - [x] Fixes rpath on Mac by setting it to `@loader_path/${_rel}""`; - [x] Some host_writer changes to modernize PCMSolver; * **User-Facing for Release Notes**; - [x] Re-enables PCMSolver via `-DENABLE_PCMSolver`. No longer hint with `PCMSOLVER_ROOT` but with `PCMSolver_DIR`. Pins to `v1.1.9`.; - [x] Bumps CMake requirement to 3.2; - [x] upstream PCMSolver needs py3 compatibility, PCMSolver/pcmsolver#39; - [x] anyone building with Intel and native gcc < 4.9 needs to have the gcc-name and gxx-name in `CMAKE_Fortran_FLAGS`, too, just like `CMAKE_CXX_FLAGS`. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/599:846,detect,detection,846,https://psicode.org,https://github.com/psi4/psi4/pull/599,1,['detect'],['detection']
Safety,"## Description; Updates Libint 1.2.0 @ evaleev/libint <-- libint 1.1.6 @ psi4/libint, evaleev/libint#77. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] All your Psi4 build will start building Libint again b/c wrong version detected until your pre-compiled libints get updated.; * **User-Facing for Release Notes**; - [x] Now using github.com/evaleev/libint (branch v1) rather than our own github.com/psi4/libint after pushing some CMake build details upstream. The evaleev repo didn't have CMake before v1.2.0, so that version is now required. Also, the project name changed from `libint` to `Libint` and CMake cares about this, so Psi4 repo and libint repo will have to be carefully matched for a bit. ## Status; - [x] Ready to go – Go ahead and review, but I want to look at travis/distelli before quite ready to go.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/695:291,detect,detected,291,https://psicode.org,https://github.com/psi4/psi4/pull/695,1,['detect'],['detected']
Safety,"## Description; Uses `clang-tidy` to find and fix uses of redundant `void` argument in functions. Fixes applied with:; ```; cd <build-dir>/psi4-core-prefix/src/psi4-core-build; run-clang-tidy.py -header-filter='.*' -checks='-*,modernize-redundant-void-arg' -fix; ```; Based on #1312 . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] `clang-tidy` find and fix with `modernize-redundant-void-arg`. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1317:58,redund,redundant,58,https://psicode.org,https://github.com/psi4/psi4/pull/1317,3,['redund'],"['redundant', 'redundant-void-arg']"
Safety,"## Description; With #591, math detection on Mac became vulnerable to picking up `mkl_rt.so` from a conda env in preference to native Accelerate libs. That builds, but gives _very_ bad results at runtime. So this PR treats Accelerate as the default on Mac. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; * **User-Facing for Release Notes**; - [x] On Mac, selects Accelerate BLAS/LAPACK libs in preference to any other detected. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/611:32,detect,detection,32,https://psicode.org,https://github.com/psi4/psi4/pull/611,2,['detect'],"['detected', 'detection']"
Safety,"## Description; With Intel compiler, current master throws:. ```; /psi/gits/hrw-pybind/psi4/src/psi4/libfock/DirectJK.cc(1015): internal error: null pointer; }; ^. compilation aborted for /psi/gits/hrw-pybind/psi4/src/psi4/libfock/DirectJK.cc (code 4); ```. ~The `size_t` is in the header, so I don't know why it should need it again, but it seems to want it. All the below fail, too. I'm glad to try any more rational variations.~; ```; # out-of-date # all throw with above; # out-of-date num_computed_shells_ = 0L;; # out-of-date num_computed_shells_ = 0;; # out-of-date num_computed_shells_ = std::size_t{ 0 };; ```. FYI @andyj10224 who has also hit this and @davpoolechem since it came about in #2547. ~EDIT: nevermind, this only lets it build but kills off the threading and doesn't count ints. Ignore PR for now.~. EDIT: ok, this works, though I don't see why Intel should have complained about the original. Throw seen on 2021.4 and 2021.6, btw. ## Checklist; - Tests added for any new features; - [x] ~ran smoke~ ran full tests. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2625:176,abort,aborted,176,https://psicode.org,https://github.com/psi4/psi4/pull/2625,1,['abort'],['aborted']
Safety,"## Description; `sq_rsp(...)` is an ancient diagonalizer function from Psi3 with many issues. While its innards could be improved, the function signature is horrid. It should be deprecated and replaced with something better.; Stemming from the awful interface, users of `sq_rsp(...)` never check if the diagonalization failed, because they _cannot_. This is now rectified by adding failure checks wherever the new DSYEV wrappers are called.; Checks against non-square matrices are also added where there is both a row and column count at the call site. Some of the call sites would be dfocc territory, this PR does not include them to avoid conflicts with the dfocc overhaul.; This is another shard of the https://github.com/psi4/psi4/pull/2642 mega-PR that can be merged after PR #2678 and #2738 are in. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Implement two new wrapper functions around DSYEV to replace `sq_rsp(...)` with. The new wrappers have a much cleaner interface, and no longer require the allocation of an eigenvector array if the caller only needs eigenvalues. They also no longer swallow the return value of DSYEV, in fact their return value is marked as `[[nodiscard]]`. In short, checking for diagonalization failure went from impossible to mandatory.; Please note that unlike `sq_rsp(...)`, the new functions do not take a ""tolarence"" value, but this is actually a null change as that parameter has been set-but-unused in `sq_rsp(...)` since ~forever ago when `sq_rsp(...)` switched to calling DSYEV internally.; - [x] Replace `sq_rsp(...)` calls in `mcscf` (`mcscf::SCF::energy` and `mcscf::MatrixBase::diagonalize`) with new wrapper. Add checks for diagonalization failure and guard against non-square matrices.; - [x] Replace `sq_rsp(...)` calls in `detci` (`detci/h0block.cc`, `detci/sem.cc` and `detci/sem_test.cc`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in `li",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2686:635,avoid,avoid,635,https://psicode.org,https://github.com/psi4/psi4/pull/2686,1,['avoid'],['avoid']
Safety,"## Description; address build issues for FreeBSD packaging @yurivict . ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Killed off the Apple `environ` setting that wasn't being used anymore; * **User-Facing for Release Notes**; - [x] AddOns now have a `CMAKE_INSIST_FIND_PACKAGE_${AddON}` variable whereby you can fail configuration when the right package not detected. That is, no falling back to internal build. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/856:426,detect,detected,426,https://psicode.org,https://github.com/psi4/psi4/pull/856,1,['detect'],['detected']
Safety,"## Description; avoid Win/Linux filesystem conventions by moving selected operations to python. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Moves fisapt driver py-side; - [x] Moves writing arrays and filesystem parts of fisapt py-side; - [x] There were some options with names `sSAPT`. There's machinery that thinks all option names are all-caps, so that wasn't good.; - [x] Moves filesys in libcubeprop/cubeprop.cc py-side; - [x] ~Currently can't run cmake multiple times w/o hitting `fsapt/` dir exists~ Now just overwrites existing dirs; - [x] Adds Molecule docstrings and fixes spelling mistakes. ## Questions; - [x] @jturney what’s this supposed to do when directory already exists? https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfilesystem/path.cc#L53 According to `mkdir` docs, it should throw `EEXIST` error? that’s the behavior i’ve imitated in python. but if that’s the case, how has ctest be working on re-run all this time.; - [ ] Rob was exporting `FISAPT.scalars()` as direct map. I changed to map& to match FISAPTSCF. Rob was never using this in code, but since it was exported to python, possibly scirpts are affected?. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1098:16,avoid,avoid,16,https://psicode.org,https://github.com/psi4/psi4/pull/1098,1,['avoid'],['avoid']
Safety,## Description; gau2grid now provides spherical basis sets in `gaussian` _or_ `cca` ordering. let's make sure we get the right one!. ~**This won't work until a PR comes into g2g and versions/git tags get bumped here.**~. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] detect/build the gaussian g2g; - [x] bump min g2g version so the components are there. ## Checklist; - [x] ran quicktests against g2g dgasmith/gau2grid#11; - [x] full tests pass locally. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1035:336,detect,detect,336,https://psicode.org,https://github.com/psi4/psi4/pull/1035,1,['detect'],['detect']
Safety,"## Description; misc. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] MKL _can_ link with libgomp on Linux+Gnu, but it can link with libiomp5 everywhere, incl. Mac (icpc, g++, clang++) and Linux (icpc, g++). Moreover in practice, Mac+Gnu+MKL+gomp leads to n-thread-dependent energies (note that none of our testing can catch this). So switching clang and gnu to intel interface and thread libraries when built with MKL. Note that the `-fno-openmp` is b/c gnu takes that slight provocation as signal to link in libgomp, and then you get _two_ threading libraries!; * **User-Facing for Release Notes**. ## Questions; - [x] Notice to @robertodr that math detection getting shaken up again. ## Status; - [x] Ready to go --- Nope, I just want to see what CI thinks of this",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/767:719,detect,detection,719,https://psicode.org,https://github.com/psi4/psi4/pull/767,1,['detect'],['detection']
Safety,"## Description; more misc. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] CMake: patches OMP detection for conda GCC, coderefinery/autocmake#247; - [x] Adds a script to probe threading; - [x] Mol: output ghosts from E(Gh) --> Gh(E) closes #1016 ; - [x] Fix up some license headers; - [x] repoints GH:loriab/libxc --> GH:psi4/libxc. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1017:161,detect,detection,161,https://psicode.org,https://github.com/psi4/psi4/pull/1017,1,['detect'],['detection']
Safety,## Description; move dft-bench and vibanalysis tests to pytest. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] move the 4 dft-bench tests to pytest with parameterization; - [x] move the vibanalysis test to pytest; - [x] add IR intensity benchmarks from Cfour so #1382 has something to test against; - [x] delete the ctest versions; - [x] add in `pytest.mark.long` to avoid running some bench routinely. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1414:418,avoid,avoid,418,https://psicode.org,https://github.com/psi4/psi4/pull/1414,1,['avoid'],['avoid']
Safety,"## Description; part III of let there be conda after the recent merge flurry. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] As it is, downstream plugins won't find Python.h . This passes the right include dir so they can and prompts updating cmake so new detection can be used. naturally, v2rdm showed this up.; - [x] bump minimum gcc to 6. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2096:316,detect,detection,316,https://psicode.org,https://github.com/psi4/psi4/pull/2096,1,['detect'],['detection']
Safety,"## Description; technical improvements to docs, part 2. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] **bug fix and energy change** these changes to RI basis for sto-3g, sto-6g, 3-21g https://github.com/psi4/psi4/pull/2146/files#diff-343949bff4fe0802df72641969d7aceb07a122625e5b70d95c6e2757e4ee3c92R435 now refer to a real basis set, so in practice, calcs will use the svp now rather than the qzvpp. tests sapt-ecp and nbody-levels have been tweaked to pass. this will lead to real numbers changes in psi4 runs, though hopefully they'll be a little quicker, too. apparently hunting docs ref errors can fix real bugs; - [x] docs now pass `sphinx-build -b linkcheck`, meaning that all the external hyperlinks in the docs are ok or redirect, none broken (except for a few that are excused in conf.py.in). 300 -> 0 broken links!; - [x] started on the `sphinx-build -b html -n` nitpicky mode. 1300 -> 1000; - [x] fixed all the `docstring of psi4.core.PyCapsule.dfh:: WARNING: py:class reference target not found: psi::DFHelper`; - these happen when exports use or return a class that hasn't yet been pb11 exported, https://pybind11.readthedocs.io/en/stable/advanced/misc.html?highlight=docstring#avoiding-c-types-in-docstrings; - `OneBodySOInt` and `psio_entry` added; - a couple docstrings edited to figure out how parser wants str enums in docstring; - all other export_ and core.cc changes are rearrangements only. ## Checklist; - [ ] ~Tests added for any new features~; - [x] full tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge **SQUASH**",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2146:1252,avoid,avoiding-c-types-in-docstrings,1252,https://psicode.org,https://github.com/psi4/psi4/pull/2146,1,['avoid'],['avoiding-c-types-in-docstrings']
Safety,"## Description; very much misc. ## Todos; - [x] update CheMPS2 target to v1.8.9. update min to 1.8.7. I've no evidence that the old min doesn't work, but there have been some build commits since then.; - [x] fill in missing tests comment lines; - [x] since the same feature has broken v2rdm _twice_ in the past month, let's back up the target commit and avoid it.; - [x] update some plugin template syntax, add missing v2rdm7 syntax. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1515:354,avoid,avoid,354,https://psicode.org,https://github.com/psi4/psi4/pull/1515,1,['avoid'],['avoid']
Safety,"## Todos; * **Developer Interest**; - [x] fixed `CMAKE_DISABLE_FIND_PACKAGE_Addon` so that proj builds internally and only that build used; - [x] by analogy to psi4/meta, splitting up `LICENSE` and `CITATION` should allow GH to detect us and put a license box on page; - [x] pybind11 bumped; - [x] `qc_module` as local option is ineffective, so forced `cisd-h2o-clpse` to test detci, not fnocc.; - [x] py3-ed the share/scripts; * **User-Facing for Release Notes**; - [x] tag CheMPS2 at `1.8.3`. ## Questions; - [x] @amjames, look over the ""CC ROOT"" commit, please. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/519:228,detect,detect,228,https://psicode.org,https://github.com/psi4/psi4/pull/519,1,['detect'],['detect']
Safety,"## Todos; - [x] This prevents partial frequencies from hanging (causing ctest timeout) when analytic freq are available and user hasn't specified a findif.; - [x] Clarifies extrapolations syntax with e.g., aug-cc-pv(d+d)z basis sets used; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/451:78,timeout,timeout,78,https://psicode.org,https://github.com/psi4/psi4/pull/451,1,['timeout'],['timeout']
Safety,"#include mkl.h` (that defines `__INTEL_MKL__`) and the [very important `mkl_set_num_threads()`](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libparallel/process.cc#L91-L93) were guarded by `HAVE_MKL` ifdefs. Then, on the fateful 23 Jun 2016 (https://github.com/psi4/psi4/commit/e07d645ea7acc85ae90d8c60a30f3426c977fc26) in the course of CMR, ConfigMath was blown away and all the `HAVE_MKL`s were replaced by `__INTEL_MKL__`. But that's circular because the mkl.h inclusions, which define `__INTEL_MKL__` were guarded by `__INTEL_MKL__` ifdefs. So Psi4 hasn't been threading MKL (though OMP threading has still been present). Story continues in bullet below. Identification and debugging of this issue by @dgasmith and Matt Schieber. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] ~~This PR identifies which of MKL, OPENBLAS, etc. has been detected by ConfigMath.~~ Identify MKL-or-not by searching for ""mkl"" in the full lapack library list, whether detected math or passed-in math. Colors ""MKL LAPACK"" to screen if ""on"". If MKL, attaches the `USING_LAPACK_MKL` compiler definition to the `tgt::lapack` target that every module of Psi4 is linked with. Thus we're getting MKL threading again.; - [x] Adds min version tags for dkh, gdma, erd; - [x] Adjusts where the required check comes in for hdf5 so we don't get an warning; - [x] Add docs with examples of math detection; - [x] Remove unused routes in math detection: explicit, external, mkl_flag; - [x] ConfigMath now FATAL_ERRORs if math libs _not_ found; - [x] Newly pays attention to headers for math. Only required for MKL.; - [x] Add a threading testing script for general maintenance, see comment below. In general tests where MKL found. Has compare_values, but really better suited for running by hand and judging results, as `-jN` defeats the purpose.; - [x] Added some CCSD(T) table docs requested by @CDSherrill ; * **User-Facing for Release Notes**; - [x] Cha",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/615:1284,detect,detected,1284,https://psicode.org,https://github.com/psi4/psi4/pull/615,1,['detect'],['detected']
Safety,"**TL;DR** If conda psi4 is acting up, update libint, too: `conda update libint -c psi4/label/dev`. If locally compiled psi4 is acting up, trigger a partial recompile: `cd objdir && rm -rf external/upstream/libint/ && make`. We've been planning for a while to distribute conda psi4 with libint compiled at `MAX_AM_ERI` 8, not 6. I have rebuilt the `libint` package and now the `v1.3rc1` will be the first `psi4` package with extended AM. Unfortunately, both **libint of different AM are not hot-swappable** and **AM not detectable at runtime**. That is, a built psi4 is perfectly happy to link (in the `ldd` sense) to a `libint.so` that is inconsistent with fixed data dimensions in psi4 _libmints_, and libmints can't even throw an error for enlightenment. . I could throw additional constraints on the psi4 pkg to make sure it picked the right libint build, but that would be misusing the tools a bit, would constrain things in future, and would only solve a third of the problem. I believe you can handle this transition manually with a couple commands. ### which `libint`s are out there?; `conda list`; ```; # v notice 5 vs 4 here; # v; libint: 1.2.1-hb4a4fd4_5 # AM ** 8 **, compatible with conda psi4 >= 1.3rc1, new!; libint: 1.2.1-h87b9b30_4 # AM ** 6 **, compatible with conda psi4 < 1.3rc1, 8 mo old; libint: 1.2.1-am8_1 # AM ** 8 **, compatible with compile-yourself psi4 only, deprecated, 19 mo old; ```. ### what can go wrong with conda psi4?. * Both latest psi4 and latest libint conda packages are compatible, so a fresh install `conda update psi4 libint -c psi4/label/dev` will be fine.; * However, if you have a conda environment and you update psi4 but not libint, then you'll have a >=1.3rc1 psi4 and the `_4` (see above) AM6 libint, which is trouble. Easy to solve by updating libint: `conda update libint -c psi4/label/dev`. After that, your `conda list` should say `_5`.; * If you have a conda env and you update libint but not psi4 (uncommon), that's also a problem. Update psi4. ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1533:519,detect,detectable,519,https://psicode.org,https://github.com/psi4/psi4/issues/1533,1,['detect'],['detectable']
Safety,"**psi4** uses the LAPACK routine `dtzrqf`. However, at least in the current LAPACK 3.8.0, the routine `dtzrqf` is marked as deprecated, the [suggested alternative](http://www.netlib.org/lapack/explore-html/da/dba/group__double_o_t_h_e_rcomputational_ga2d309addf953bcdd497d58608a7f7935.html) being `dtzrzf`. As a result, the default build of LAPACK 3.8.0 (<del>as well as of OpenBLAS 0.3.3</del> EDITED) does not contain `dtzrqf`anymore and fails to provide the necessary dependency. Perhaps **psi4** could use the alternative routine to avoid this problem?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1290:537,avoid,avoid,537,https://psicode.org,https://github.com/psi4/psi4/issues/1290,1,['avoid'],['avoid']
Safety,", as these are filtered out.; - [x] Added a `psi4.clean_options()` fn (alongside `psi4.clean()` and `psi4.clean_variables()`) to reset the `P::e.options` object to its initial state. This is necessary for independent tests in pytest and will probably be useful for psiapi sessions.; - [x] Add pytest smoke tests for psi4 itself and psi4+addons (addon tests skip if addon not enabled or detectable). From source, `cd tests/pytest && python -m pytest [-v -s]`. From staged or installed, `python -c ""import psi4; psi4.test()""` or `psi4 --test`. From objdir, `make pytest`. ## Questions; - [ ] I can work around the 3.3 cmake. It'll just be less tidy and won't ward off the HDF5 version detection issue. Speak up if there are objections.; - [ ] Everyone should make sure you're ok with the table below. No envvar control over parallelism anymore.; - [ ] Everyone read 12cd carefully, as I'm a bit nervous about this. Searched the code and Options object is cleared _nowhere_ except for a commented out in read_options. So I think it's safe to commandeer this function. And it works to completely reset options.; - [ ] The threading test is now in test_psi4_profiling.py. It works fine as the only pytest, but it's threading is still messed up when in the whole pytest suite. Anyone have a guess why? I haven't read anything about pytest controlling threads. ## Status; - [x] Ready to go. `OMP_NUM_THREADS` | `MKL_NUM_THREADS` | `-nN` | `psi4.set_num_threads()` | PsiAPI | Psithon; --- | --- | --- | --- | --- | ---; _ | _ | _ | _ | _111 | 1111; 1 | _ | _ | _ | _111 | 1111; 3 | _ | _ | _ | _111 | 1111; _ | 1 | _ | _ | _111 | 1111; _ | 3 | _ | _ | _111 | 1111; _ | _ | 1 | _ | N/A | 1111; _ | _ | 3 | _ | N/A | 3333; _ | _ | _ | 1 | _111 | 1111; _ | _ | _ | 3 | _333 | 1333; _ | _ | 4 | 2 | _222 | 4222. Where the four numbers are extracted from the output file: threads in psi4 header, threads in MintsHelper, threads in SCF header, threads used by JK. The first of these in inapplicable in PsiAPI mode.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/627:3389,safe,safe,3389,https://psicode.org,https://github.com/psi4/psi4/pull/627,1,['safe'],['safe']
Safety,"- Configuring done; -- Generating done; -- Build files have been written to: /home/seba/software/psi4-0.5/objects; ```. Point where it fails:. ```; [ 45%] Building CXX object src/lib/libmints/CMakeFiles/mints.dir/basisset.cc.o; In file included from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive_static.hpp(30),; from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive.hpp(18),; from /home/seba/software/psi4-0.5/src/lib/libmints/basisset.cc(29):; /usr/include/c++/5/bits/stl_iterator_base_types.h(154): error: name followed by ""::"" must be a class or namespace name; typedef typename _Iterator::iterator_category iterator_category;; ^; In file included from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive_static.hpp(30),; from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive.hpp(18),; from /home/seba/software/psi4-0.5/src/lib/libmints/basisset.cc(29):; detected during:; In file included from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive_static.hpp(30),; from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive.hpp(18),; from /home/seba/software/psi4-0.5/src/lib/libmints/basisset.cc(29):; instantiation of class ""std::__iterator_traits<_Iterator, void> [with _Iterator=int]"" at line 163; In file included from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive_static.hpp(30),; from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive.hpp(18),; from /home/seba/software/psi4-0.5/src/lib/libmints/basisset.cc(29):; instantiation of class ""std::iterator_traits<_Iterator> [with _Iterator=int]"" at line 98 of ""/home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/regex_token_iterator.hpp""; In file included from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive_static.hpp(30),; from /home/seba/software/psi4-0.5/objects/boost/include",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/262:6621,detect,detected,6621,https://psicode.org,https://github.com/psi4/psi4/issues/262,1,['detect'],['detected']
Safety,"- [ ] Examine the autofunction signatures in energy, opt, freq, prop.rst in doc/sphinxman/source. These have arguments in the correct order. Rearrange the argument order in the docstrings of the respective functions in share/python/driver.py; - [ ] modify section ""PSI variables & return values"" in doc/sphinxman/source/psithoninput.rst; - separate out the last paragraph into a new section ""return values""; - include in it the gist of the signatures description at http://forum.psicode.org/t/detecting-optimization-failure/203/4?u=loriab .; - also mention getting G & H back as return values or extracting them from Wavefunction and a couple things you can do with them like print_out(), rms(), convert to np.array",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/352:493,detect,detecting-optimization-failure,493,https://psicode.org,https://github.com/psi4/psi4/issues/352,1,['detect'],['detecting-optimization-failure']
Safety,"- [x] bump cmake to 3.15 from 3.8 (to get decent FindPython with NumPy); - [x] switch out Python detection to fix #2060. note that all the CM vars now start `Python_`, not `PYTHON_`; - [x] use prebuilt g2g for Windows Azure; - [x] bump g2g to 2.0.7; - [ ] ~added some fn redefs for Windows in psi4-dec.h . right place?~; - [x] get windows conda package building through azure. Ok, Windows conda package was the original aim of this PR, but that's also in the Libxc5 PR that uses prebuilt g2g & libxc & libint2. This PR switched to using the new Python detection advocated by pb11: https://pybind11.readthedocs.io/en/stable/compiling.html#findpython-mode . This means we're not using the FindPythonLibsNew that psi4 has a copy of from pb11 and which in turn we install for the benefit of plugins. Of course that means we need to use cmake 3.15+ (released July 2019). That's quite a leap from the 3.8+ we had before, and lgtm doesn't have it, hence that failure. We can drop a lot of explicit properties on `core` since pb11 is providing them (see https://github.com/pybind/pybind11/blob/master/tools/pybind11NewTools.cmake and https://github.com/pybind/pybind11/blob/master/tools/pybind11Common.cmake), but I'm not sure if this is the right time to make the leap. I'm also a bit surprised that `add_library(... MODULE)` seems to be working with the plugin tests where before we used `SHARED` to appear like a linux lib. Glad of opinions here.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2048:97,detect,detection,97,https://psicode.org,https://github.com/psi4/psi4/pull/2048,2,['detect'],['detection']
Safety,". As it so happens, I was running `mrccsdt` not too long ago on the CCQC cluster. What I see looks like ; ```; Generating fort.55 integral file...done.; Generating fort.56 input file...done. *** tstop() called on n081 at Sun Mar 8 14:10:25 2020; Module time: ; user time = 1.90 seconds = 0.03 minutes; system time = 0.87 seconds = 0.01 minutes; total time = 2 seconds = 0.03 minutes; Total time: ; user time = 164.68 seconds = 2.74 minutes; system time = 15.26 seconds = 0.25 minutes; total time = 2719 seconds = 45.32 minutes. ===== Begin fort.56 input for MRCC ======; 3 1 0 0 1 0 0 1 0 1 1 1 0 0 0 6 0 0 0.00 0 60000 ; ex.lev,nsing,ntrip, rest,CC/CI, dens,conver, symm, diag, CS,spatial, HF,ndoub, nacto, nactv, tol,maxex, sacc, freq,dboc, mem; 2 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 2 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ; ===== End fort.56 input for MRCC ======; **********************************************************************; MRCC program system; **********************************************************************; ; Written by; Mihaly Kallay, Zoltan Rolik, Jozsef Csontos, Istvan Ladjanszki,; Lorant Szegedy, Bence Ladoczki, Gyula Samu, Klara Petrov,; Mate Farkas, Peter Nagy, David Mester, and Bence Hegely; ; Department of Physical Chemistry and Materials Science; Budapest University of Technology and Economics; Budapest P.O.Box 91, H-1521 Hungary; ; www.mrcc.hu. ************************ 2020-03-08 14:10:25 *************************; Executing goldstone...; ```. The calculation goes on, but the important point is that MRCC is supposed to execute `goldstone` immediately and not even try to read input from the MINP file. My interpretation of the situation is that something in the new MRCC has broken Psi's direct interface, which avoided MINP input entirely. I'm not planning to get further involved in this issue, but I'm fairly sure we mentioned the MRCC interface in the paper, so this is bad. Curse you, upstream!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1866:3892,avoid,avoided,3892,https://psicode.org,https://github.com/psi4/psi4/issues/1866,1,['avoid'],['avoided']
Safety,".3rc1 psi4 and the `_4` (see above) AM6 libint, which is trouble. Easy to solve by updating libint: `conda update libint -c psi4/label/dev`. After that, your `conda list` should say `_5`.; * If you have a conda env and you update libint but not psi4 (uncommon), that's also a problem. Update psi4. If what you really want is for the psi4 to work and the libint upgrade was a mistake, downgrade the libint: `conda install libint=1.2.1=h87b9b30_4 -c psi4`. ### what can go wrong with locally-built psi4?. * A major use of the `libint` conda package is to be a detectable pre-built dependency for a from-source psi4 compilation. If the `$CONDA_PREFIX/lib/libint.so` to which a psi4 `core.so` is linked suddenly changes identity, psi4 will be deranged.; * To fix this, `cmake` needs to detect the new libint headers and a half-dozen psi4 files need to rebuild.; ```; > cd <objdir>; > rm -rf external/upstream/libint/; > make; # cmake says: -- Found Libint 8: /home/psilocaluser/toolchainconda/envs/p4dev37/lib/libint.so (found version 1.2.1); ```; * If you need to avoid recompiling and instead revert your environment back to the AM6 libint, use the command in the last bullet of the previous section. ### Notes; * Only Linux affected. It took a week to build AM6 on the mac mini, so AM8 is not within reach. Thus, it's possible for the same job to run fine on linux binary but throw an angular momentum error on mac binary.; * `simint` max is AM7 both past and near future. Only `libint` is changing.; * Between higher AM and optimizing for multiple architectures, the new libint pkg is _heavy_, >120mb zipped. For psi4 CI, I'm planning to pull the old AM6 to lessen the strain on Travis. This won't help downstream projects that summon a built psi4 to test their addon.; * I haven't posted the AM8 package yet, as I want the stack to finish building, and I wanted to give you all a heads-up. I'll post to this issue when the package goes up. Will only be in `-c psi4/label/dev` for now, not `-c psi4`.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1533:2764,avoid,avoid,2764,https://psicode.org,https://github.com/psi4/psi4/issues/1533,1,['avoid'],['avoid']
Safety,".o): In function `boost::mpi::communicator::as_intercommunicator() const':; communicator.cpp:(.text+0xdc2): undefined reference to `MPI_Comm_test_inter'; /blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-6.1.0/boost-1.61.0-deyw7xs6bmycmara46vfwnd3xnpbivxe/lib/libboost_mpi-mt.a(communicator.o): In function `boost::mpi::communicator::as_graph_communicator() const':; communicator.cpp:(.text+0xef4): undefined reference to `MPI_Topo_test'; communicator.cpp:(.text+0xf40): undefined reference to `MPI_Topo_test'; /blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-6.1.0/boost-1.61.0-deyw7xs6bmycmara46vfwnd3xnpbivxe/lib/libboost_mpi-mt.a(communicator.o): In function `boost::mpi::communicator::has_cartesian_topology() const':; communicator.cpp:(.text+0x1195): undefined reference to `MPI_Topo_test'; /blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-6.1.0/boost-1.61.0-deyw7xs6bmycmara46vfwnd3xnpbivxe/lib/libboost_mpi-mt.a(communicator.o): In function `boost::mpi::communicator::abort(int) const':; communicator.cpp:(.text+0x1200): undefined reference to `MPI_Abort'; /blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-6.1.0/boost-1.61.0-deyw7xs6bmycmara46vfwnd3xnpbivxe/lib/libboost_mpi-mt.a(communicator.o): In function `void boost::mpi::communicator::send<boost::mpi::content>(int, int, boost::mpi::content const&) const':; communicator.cpp:(.text+0x1272): undefined reference to `MPI_Send'; /blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-6.1.0/boost-1.61.0-deyw7xs6bmycmara46vfwnd3xnpbivxe/lib/libboost_mpi-mt.a(communicator.o): In function `boost::mpi::status boost::mpi::communicator::recv<boost::mpi::content const>(int, int, boost::mpi::content const&) const':; communicator.cpp:(.text+0x12f1): undefined reference to `MPI_Recv'; /blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-6.1.0/boost-1.61.0-deyw7xs6bmycmara46vfwnd3xnpbivxe/lib/libboost_mpi-mt.a(communicator.o): In function `boost::mpi::request boost::mpi::communicator::isend<b",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/411:15099,abort,abort,15099,https://psicode.org,https://github.com/psi4/psi4/issues/411,1,['abort'],['abort']
Safety,"/4.1.0, impi/4.1.0-ofa, impi/5.0.1, impi/5.0.1-ofa. openmpi/1.5.5-gcc, openmpi/1.5.5-icc, openmpi/1.8.4-gcc, openmpi/1.8.4-icc, openmpi/1.6.5-gcc, openmpi/1.6.5-icc. I choosed impi/5.0.1 and mkl/11.2.0.; I have tried to use both intel compiler versions to compile ""master"" and ""0.3 release from 5 Aug 2015"" versions. All times I have failed. With the intel/15.0.090 compilers it even fails on the ./setup script as follows:. CMake Error: Unable to find the executable at any of:; /mnt/data/users/dm4/vol12/medvedevmg_1708/bin/tmp/psi4public-0.3/objdir/check_cxx11/cxx11 _regex/CMakeFiles/CMakeTmp/cmTC_e39a7; /mnt/data/users/dm4/vol12/medvedevmg_1708/bin/tmp/psi4public-0.3/objdir/check_cxx11/cxx11 _regex/CMakeFiles/CMakeTmp/Debug/cmTC_e39a7; /mnt/data/users/dm4/vol12/medvedevmg_1708/bin/tmp/psi4public-0.3/objdir/check_cxx11/cxx11 _regex/CMakeFiles/CMakeTmp/Development/cmTC_e39a7. And with the intel/13.1.0 compilers ./setup runs successfully. To avoid crushes I have changed -std=g++98 to -std=c++11 in the CMAKE_CXX_FLAGS:STRING in the CMakeCache.txt and followed the post http://forum.psicode.org/t/undefined-git-version/61/3 in case of ""0.3 release"". Thus in case of both versions of psi4 using the intel/13.1.0 compilers I have ended with:. ..........; [ 99%] Building CXX object src/bin/psi4/CMakeFiles/psi4.dir/export_efp.cc.o; [ 99%] Building CXX object src/bin/psi4/CMakeFiles/psi4.dir/export_cubeprop.cc.o; [100%] Building CXX object src/bin/psi4/CMakeFiles/psi4.dir/clean.cc.o; [100%] Building CXX object src/bin/psi4/CMakeFiles/psi4.dir/create_new_plugin.cc.o; [100%] Building CXX object src/bin/psi4/CMakeFiles/psi4.dir/script.cc.o; [100%] Building CXX object src/bin/psi4/CMakeFiles/psi4.dir/set_memory.cc.o; [100%] Building CXX object src/bin/psi4/CMakeFiles/psi4.dir/read_options.cc.o; [100%] Building CXX object src/bin/psi4/CMakeFiles/psi4.dir/export_libparallel.cc.o; [100%] Linking CXX executable ../../../bin/psi4; ld: cannot find -lboost_mpi-1_57; [100%] Built target psi4. ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/201:1224,avoid,avoid,1224,https://psicode.org,https://github.com/psi4/psi4/issues/201,1,['avoid'],['avoid']
Safety,"/master/api/psi4.core.SADGuess.html?highlight=print#psi4.core.SADGuess . but I can't seem to run the function `compute_guess()` - it causes my kernel/terminal to crash. . here's a code snippet:; ```python; import psi4; from psi4.core import SADGuess. psi4_geo = psi4.geometry(; """"""; N 4.772900 -0.101700 0.597500; C 3.609000 0.210800 -0.023400; N 2.441000 -0.094000 0.403800; C 1.450300 0.286400 -0.465100; C 0.060400 0.012200 -0.121600; C -0.194400 -0.845100 0.972200; C -1.466300 -1.163000 1.375400; C -2.519900 -0.599700 0.659100; N -3.868100 -0.691400 0.784500; N -4.506700 0.042900 -0.138700; C -3.594600 0.620800 -0.875800; C -2.289700 0.266400 -0.439100; C -0.987700 0.572700 -0.830400; C 1.902300 0.904400 -1.593400; S 3.625400 1.027300 -1.594500; H 4.694900 -0.362900 1.566900; H 5.594000 0.417600 0.335500; H 0.659700 -1.250100 1.491400; H -1.645700 -1.820500 2.212500; H -4.398300 -1.217800 1.458900; H -3.875900 1.263700 -1.685800; H -0.814500 1.239900 -1.659800; H 1.351700 1.280600 -2.430000; symmetry C1; """"""; ); psi4.set_options({""scf__reference"": ""rhf""}). basis = psi4.core.BasisSet.build(psi4_geo, key=""BASIS"", target='def2-svp', return_atomlist=False); basis_atoms = psi4.core.BasisSet.build(psi4_geo, key=""BASIS"", target='def2-svp', return_atomlist=True). mol_sadguess = SADGuess.build_SAD(basis, basis_atoms); SADGuess.set_print(mol_sadguess, 2); # kernel/terminal crashes here!!! :(; SADGuess.compute_guess(mol_sadguess); ```. the other alternative is to run a ""dummy"" SCF calculation, but set `maxiter = 0` and `fail_on_maxiter = False`. but i don't know if this will give me the actual initial guess or it would have undergone some further transformations. and it is also not as fast as i'd like, it takes 7 secs on 8 threads for the above mol with 23 atoms. i'd suspect doing the full SCF calculation has a lot of overhead in setting up different parts of the SCF procedure, which I'd like to avoid. (i have millions of molecules I need to get the `SADGuess` for). thank you!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2897:2102,avoid,avoid,2102,https://psicode.org,https://github.com/psi4/psi4/issues/2897,1,['avoid'],['avoid']
Safety,0; -- Check for working C compiler: /usr/bin/clang; -- Check for working C compiler: /usr/bin/clang -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Check for working CXX compiler: /usr/bin/clang++; -- Check for working CXX compiler: /usr/bin/clang++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- The Fortran compiler identification is GNU; -- Check for working Fortran compiler: /usr/local/bin/gfortran; -- Check for working Fortran compiler: /usr/local/bin/gfortran -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /usr/local/bin/gfortran supports Fortran 90; -- Checking whether /usr/local/bin/gfortran supports Fortran 90 -- yes; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenM,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/36:606,Detect,Detecting,606,https://psicode.org,https://github.com/psi4/psi4/issues/36,6,['Detect'],['Detecting']
Safety,11;HAS_CXX11_FUNC;HAS_CXX11_AUTO;HAS_CXX11_AUTO_RET_TYPE;HAS_CXX11_CONSTEXPR;HAS_CXX11_CSTDINT_H;HAS_CXX11_DECLTYPE;HAS_CXX11_INITIALIZER_LIST;HAS_CXX11_LAMBDA;HAS_CXX11_LONG_LONG;HAS_CXX11_NULLPTR;HAS_CXX11_RVALUE_REFERENCES;HAS_CXX11_SIZEOF_MEMBER;HAS_CXX11_STATIC_ASSERT;HAS_CXX11_VARIADIC_TEMPLATES;ENABLE_CHEMPS2=1;HAVE_MM_MALLOC_H;HAVE_DKH;HAVE_GDMA;HAVE_PCMSOLVER=1; -- The CXX compiler identification is GNU 4.8.2; -- The C compiler identification is GNU 4.8.2; -- Check for working CXX compiler: /cluster/apps/gcc/4.8.2/bin/g++; -- Check for working CXX compiler: /cluster/apps/gcc/4.8.2/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Check for working C compiler: /cluster/apps/gcc/4.8.2/bin/gcc; -- Check for working C compiler: /cluster/apps/gcc/4.8.2/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- The Fortran compiler identification is GNU 4.8.2; -- Check for working Fortran compiler: /cluster/apps/gcc/4.8.2/bin/gfortran; -- Check for working Fortran compiler: /cluster/apps/gcc/4.8.2/bin/gfortran -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90 -- yes; -- Fortran ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- l,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/581:9753,Detect,Detecting,9753,https://psicode.org,https://github.com/psi4/psi4/issues/581,4,['Detect'],['Detecting']
Safety,"3.6 -DPYTHON_INCLUDE_DIR=/usr/local/include/python3.6m -DPYTHON_LIBRARY=/usr/local/lib/libpython3.6m.so -DPSI4_ROOT=/usr/ports/science/psi4/work/psi4-1.3-60-ga5d3586e9 -DENABLE_ambit=OFF -DENABLE_CheMPS2=OFF -DENABLE_dkh=OFF -DENABLE_libefp=OFF -DENABLE_erd=OFF -DENABLE_simint=OFF -DENABLE_gdma=OFF -DENABLE_PCMSolver=OFF -DENABLE_OPENMP=ON -DTargetLAPACK_DIR=/usr/ports/science/psi4/work/.build/stage/share/cmake/TargetLAPACK -DTargetHDF5_DIR= -Dambit_DIR= -DCheMPS2_DIR= -Ddkh_DIR= -Dlibefp_DIR= -Derd_DIR= -Dgau2grid_DIR=/usr/local/share/cmake/gau2grid -Dgdma_DIR= -DLibint_DIR= -DPCMSolver_DIR= -Dpybind11_DIR=/usr/local/share/cmake/pybind11 -Dpylibefp_DIR= -Dsimint_DIR= -DLibxc_DIR= -DFortran_ENABLED= -DLIBC_INTERJECT= -DRESTRICT_KEYWORD= -DFC_SYMBOL=2 -DOpenMP_LIBRARY_DIRS= -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -C/usr/ports/science/psi4/work/.build/psi4-core-prefix/tmp/psi4-core-cache-Release.cmake ""-GUnix Makefiles"" /usr/ports/science/psi4/work/psi4-1.3-60-ga5d3586e9/psi4; loading initial cache file /usr/ports/science/psi4/work/.build/psi4-core-prefix/tmp/psi4-core-cache-Release.cmake; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL=, LANG=CXX, C/CXX/Fortran=Clang/Clang/; -- Found OpenMP_CXX: -fopenmp=libomp ; -- Found OpenMP: TRUE found components: CXX ; -- Using LAPACK: /usr/local/lib/libopenblas.so;...; -- Disabled HDF5; -- Using pybind11: /usr/local/include (version 2.2.4 for Py3.6.8 and -std=c++14); -- Using Python 3.6: /usr/local/bin/python3.6; -- Disabled ambit; -- Disabled CheMPS2; -- Disabled dkh; -- Disabled libefp; -- Disabled erd; -- Using gau2grid: /usr/local/lib/libgg.so.1 (version 1.3.1); -- Disabled gdma; CMake Error at CMakeLists.txt:132 (find_package):; Could not find a package configuration file provided by ""Libint"" (requested; version 1.2.0) with any of the following names:. LibintConfig.cmake; libint-config.cmake; ```. I have both ```libint-1.2.1_1``` and ```libint2-2.5.0.b.2.20_3``` installed, but neither of them provide cmake files. OS: FreeBSD 11.2.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1588:2097,Detect,Detecting,2097,https://psicode.org,https://github.com/psi4/psi4/issues/1588,1,['Detect'],['Detecting']
Safety,30 -0.003611 120.571750; forrtl: error (76): Abort trap signal; Image PC Routine Line Source ; libgdma.so 00007F4BEF0B510F for__signal_handl Unknown Unknown; libpthread-2.27.s 00007F4C029A7FB0 Unknown Unknown Unknown; libc-2.27.so 00007F4C0260DEAB gsignal Unknown Unknown; libc-2.27.so 00007F4C025F85B9 abort Unknown Unknown; core.cpython-36m- 00007F4BF2B2E25A Unknown Unknown Unknown; core.cpython-36m- 00007F4BF15542FD Unknown Unknown Unknown; core.cpython-36m- 00007F4BF1570541 Unknown Unknown Unknown; core.cpython-36m- 00007F4BF0FFE806 Unknown Unknown Unknown; python3.6 0000556FBA8799E4 _PyCFunction_Fast Unknown Unknown; python3.6 0000556FBA906DFC Unknown Unknown Unknown; python3.6 0000556FBA92B94A _PyEval_EvalFrame Unknown Unknown; python3.6 0000556FBA900206 Unknown Unknown Unknown; python3.6 0000556FBA9011CF Unknown Unknown Unknown; python3.6 0000556FBA906ED5 Unknown Unknown Unknown; python3.6 0000556FBA92B94A _PyEval_EvalFrame Unknown Unknown; python3.6 0000556FBA901CB9 PyEval_EvalCodeEx Unknown Unknown; python3.6 0000556FBA902A4C PyEval_EvalCode Unknown Unknown; python3.6 0000556FBA97EC44 Unknown Unknown Unknown; python3.6 0000556FBA97ECDD PyRun_StringFlags Unknown Unknown; python3.6 0000556FBA929312 Unknown Unknown Unknown; python3.6 0000556FBA879921 _PyCFunction_Fast Unknown Unknown; python3.6 0000556FBA906DFC Unknown Unknown Unknown; python3.6 0000556FBA92B94A _PyEval_EvalFrame Unknown Unknown; python3.6 0000556FBA901CB9 PyEval_EvalCodeEx Unknown Unknown; python3.6 0000556FBA902A4C PyEval_EvalCode Unknown Unknown; python3.6 0000556FBA97EC44 Unknown Unknown Unknown; python3.6 0000556FBA97F041 PyRun_FileExFlags Unknown Unknown; python3.6 0000556FBA97F244 PyRun_SimpleFileE Unknown Unknown; python3.6 0000556FBA982D24 Py_Main Unknown Unknown; python3.6 0000556FBA84A75E main Unknown Unknown; libc-2.27.so 00007F4C025FA11B __libc_start_main Unknown Unknown; python3.6 0000556FBA93247B Unknown Unknown Unknown; ^C; [1]+ Aborted (imagem do núcleo gravada)psi4 PCl5.in; ```,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1265:5593,Abort,Aborted,5593,https://psicode.org,https://github.com/psi4/psi4/issues/1265,1,['Abort'],['Aborted']
Safety,"4-0.5/objects/boost/include/boost/xpressive/xpressive_static.hpp(30),; from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive.hpp(18),; from /home/seba/software/psi4-0.5/src/lib/libmints/basisset.cc(29):. In file included from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive_static.hpp(30),; from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive.hpp(18),; from /home/seba/software/psi4-0.5/src/lib/libmints/basisset.cc(29):; /usr/include/c++/5/bits/stl_iterator_base_types.h(156): error: name followed by ""::"" must be a class or namespace name; typedef typename _Iterator::difference_type difference_type;; ^; In file included from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive_static.hpp(30),; from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive.hpp(18),; from /home/seba/software/psi4-0.5/src/lib/libmints/basisset.cc(29):; detected during:; In file included from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive_static.hpp(30),; from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive.hpp(18),; from /home/seba/software/psi4-0.5/src/lib/libmints/basisset.cc(29):; instantiation of class ""std::__iterator_traits<_Iterator, void> [with _Iterator=int]"" at line 163; In file included from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive_static.hpp(30),; from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive.hpp(18),; from /home/seba/software/psi4-0.5/src/lib/libmints/basisset.cc(29):; instantiation of class ""std::iterator_traits<_Iterator> [with _Iterator=int]"" at line 98 of ""/home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/regex_token_iterator.hpp""; In file included from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive_static.hpp(30),; from /home/seba/software/psi4-0.5/objects/boost/include",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/262:10359,detect,detected,10359,https://psicode.org,https://github.com/psi4/psi4/issues/262,1,['detect'],['detected']
Safety,"49, #937, #922, #904; - Holger Kruse (@hokru) - #877, #912, #914 ; - Shannon Houk(@shannonhouck) - #850, #876 ; - Johnathan Waldrop (@jwaldrop107) - #921; - Marvin Lechner (@mhlechner) - #698; - Jonathon Misiewicz (@JonathonMisiewicz) - #895, #882, #873, #849, #825 ; - Adam Abbott (@adabbott) - #761; - Thomas Sexton (@tsexton) - #780 ; - Tianyuan Zhang (@tyzhang1993) - #743 ; - Dom Sirianni (@dsirianni) - #776, #952; - Asim Alenaizan (@alenaizan) - #956 . # Performance Optimizations; - Density Fitted 3-index AO->MO transformation significantly improved.; - MemDFJK module up to 2x as fast as original DFJK for in-core operations.; - DFT XC kenels threaded with a more efficient vectorization.; - DFT collocation matrix generation vectorized and exploits cache-level localization.; - All matrix and vector operations threaded for MIC and large Xeon/EPYC nodes to avoid bottlenecks. # Psi Developer Upgrade Guide; * The driver method `property(...)` has moved to`properties(...)` to avoid python namespace conflicts.; * If you have a (non-py-only) plugin, ; * Add `PSI_API` to your plugin code in [this pattern](https://github.com/edeprince3/v2rdm_casscf/commit/7d4507d8979b61b3333fc6ceab450a61392836ff); * If, upon rebuilding against psi4, you get symbol not found errors, run `c++filt` on the mangled symbol name, then add `PSI_API` to the psi4 repo to make sure the `core.so` you're linking against is exporting the symbol you need. See example [here](https://github.com/psi4/psi4/pull/955). Or just file an issue with your lost symbol.; * Note that anyone wanting to re-use an objdir will need to **thoroughly** remove the old pybind11 v2.0.0 from detectability. This means:; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/includes/pybind11`; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/share/cmake/pybind11`; * `<objdir> rm -rf external/upstream/pybind11`; * Intel 2016 is no longer a valid compiler (doesn't work with py11 >=2.2.1). # Developer Interests; - Now uses LibXC for DFT XC kernels (#69",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/959:3099,avoid,avoid,3099,https://psicode.org,https://github.com/psi4/psi4/issues/959,1,['avoid'],['avoid']
Safety,60721; -- The C compiler identification is Intel 17.0.0.20160721; -- Check for working CXX compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/icpc; -- Check for working CXX compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/icpc -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working C compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/icc; -- Check for working C compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/icc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- The Fortran compiler identification is Intel 17.0.0.20160721; -- Check for working Fortran compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort; -- Check for working Fortran compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort supports Fortran 90; -- Checking whether /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort supports Fortran 90 -- yes; -- Fortran ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Performing Test has_xHost; -- Performing Test has_xHost - Success; -- Try OpenMP C,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/629:6207,Detect,Detecting,6207,https://psicode.org,https://github.com/psi4/psi4/issues/629,2,['Detect'],['Detecting']
Safety,"73100000 -0.000000000; C 1.934600000 -0.213400000 -0.000000000; H 2.475000000 -0.380600000 0.924600000; H 2.475400000 -0.380100000 -0.924300000; H -0.756100000 1.624500000 0.000500000; H -2.368000000 -0.187400000 0.878900000; H -1.437400000 -1.407900000 -0.000100000; H -2.368300000 -0.187200000 -0.878700000. units angstrom; no_reorient; }. set globals {; basis aug-cc-pVTZ; dft_spherical_points 434; dft_radial_points 85; }. set_memory(24000000000); try:; optimize('pwpb95-d3bj'); except SCFConvergenceError as e:; unconverged_scf_wfn = e.wfn; unconverged_scf_wfn.to_file(unconverged_scf_wfn.get_scratch_filename(180)); set guess read; optimize('pwpb95-d3bj'); E, wfn = frequency('pwpb95-d3bj', return_wfn=True); print(wfn.frequencies().get(0, 0)); ```. The program starts the optimization and produces an error:. ```; Performing finite difference calculations; 49 displacements needed ... 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49; forrtl: error (76): Abort trap signal; Image PC Routine Line Source ; libgdma.so 00007FB2D549510F for__signal_handl Unknown Unknown; libpthread-2.27.s 00007FB2DA9F68A0 Unknown Unknown Unknown; libc-2.27.so 00007FB2DA631F47 gsignal Unknown Unknown; libc-2.27.so 00007FB2DA6338B1 abort Unknown Unknown; core.cpython-37m- 00007FB2D7A0D3D7 Unknown Unknown Unknown; core.cpython-37m- 00007FB2D6563E2D Unknown Unknown Unknown; core.cpython-37m- 00007FB2D657D2C1 Unknown Unknown Unknown; core.cpython-37m- 00007FB2D6040FF6 Unknown Unknown Unknown; python3.7 000055D7E213E914 _PyMethodDef_RawF Unknown Unknown; python3.7 000055D7E213EA31 _PyCFunction_Fast Unknown Unknown; python3.7 000055D7E21AAEBD _PyEval_EvalFrame Unknown Unknown; python3.7 000055D7E20ED829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055D7E213E107 _PyFunction_FastC Unknown Unknown; python3.7 000055D7E21A64B6 _PyEval_EvalFrame Unknown Unknown; python3.7 000055D7E20ED829 _PyEval_EvalCodeW Unknown Unk",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2020:1308,Abort,Abort,1308,https://psicode.org,https://github.com/psi4/psi4/issues/2020,1,['Abort'],['Abort']
Safety,"7380 3.2257308775 -1.1130222609; H	2.8687615759 1.6638420009 -0.1549213082; H	0.2506882454 -2.1490136705 1.2871205466; H	-1.1675172916 2.5561147866 -1.3473002913; H	-2.9594867982 0.9074639926 -1.0076319073; H	-2.1654431803 -2.7365522813 1.1434359441; H	-3.7445689295 -1.2520671337 -0.0481282482; }; mol.update_geometry(); mol.symmetrize(0.001). set reference rks; set scf_type df; set basis def2-SV(P); set DYNAMIC_LEVEL 1. E = optimize('pbe'). ```. final output:; ```; 			-----------------------------------------; 			 OPTKING 2.0: for geometry optimizations ; 			 - R.A. King, Bethel University ; 			-----------------------------------------; At level 1: Red. Int., RFO, no backsteps, dynamic trust; 	At level 1: Red. Int., RFO, no backsteps, dynamic trust. 	Internal coordinates to be generated automatically.; 	Detected frag 1 with atoms: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20; 	---Fragment 1 Bond Connectivity---; 	 1 : 2 3; 	 2 : 1 3 5; 	 3 : 1 2; 	 4 : 5 6 9; 	 5 : 2 4 8; 	 6 : 4 10 11; 	 7 : 8 10 14; 	 8 : 5 7 15; 	 9 : 4 12 16; 	 10 : 6 7 17; 	 11 : 6 13 18; 	 12 : 9 13 19; 	 13 : 11 12 20; 	 14 : 7; 	 15 : 8; 	 16 : 9; 	 17 : 10; 	 18 : 11; 	 19 : 12; 	 20 : 13. BEND::BEND() Atoms defining bend are not unique.; forrtl: severe (174): SIGSEGV, segmentation fault occurred; Image PC Routine Line Source ; libgdma.so 00007F7B32CCF0DC for__signal_handl Unknown Unknown; libpthread-2.27.s 00007F7B36A4A890 Unknown Unknown Unknown; core.cpython-37m- 00007F7B34813B00 Unknown Unknown Unknown; core.cpython-37m- 00007F7B34811B65 Unknown Unknown Unknown; core.cpython-37m- 00007F7B33D0BACD Unknown Unknown Unknown; core.cpython-37m- 00007F7B33D2109A Unknown Unknown Unknown; core.cpython-37m- 00007F7B3383BB3F Unknown Unknown Unknown; python3.7 000055AADA9716E4 _PyMethodDef_RawF Unknown Unknown; python3.7 000055AADA971801 _PyCFunction_Fast Unknown Unknown; python3.7 000055AADA9CD2BC _PyEval_EvalFrame Unknown Unknown; python3.7 000055AADA90E4F9 _PyEval_EvalCodeW Unknown Unknown;",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1703:1609,Detect,Detected,1609,https://psicode.org,https://github.com/psi4/psi4/issues/1703,1,['Detect'],['Detected']
Safety,"9261be8f in pybind11::cpp_function::dispatcher(_object*, _object*, _object*) /home/raimis/opt/conda/envs/psi4/include/python3.6m/pybind11/pybind11.h:627; #16 0x7fa9b5205cbc in _PyCFunction_FastCallDict Objects/methodobject.c:231. SUMMARY: AddressSanitizer: heap-buffer-overflow /home/raimis/prj/psi4.git/psi4/src/psi4/cc/cctriples/EaT_RHF.cc:206 in psi::cctriples::EaT_RHF(); Shadow bytes around the buggy address:; 0x0c1080007420: fa fa fa fa 00 00 00 00 00 00 00 00 00 00 00 00; 0x0c1080007430: fa fa fa fa 00 00 00 00 00 00 00 00 00 00 00 fa; 0x0c1080007440: fa fa fa fa 00 00 00 00 00 00 00 00 00 00 00 fa; 0x0c1080007450: fa fa fa fa 00 00 00 00 00 00 00 00 00 00 00 00; 0x0c1080007460: fa fa fa fa 00 00 00 00 00 00 00 00 00 00 00 00; =>0x0c1080007470:[fa]fa fa fa 00 00 00 00 00 00 00 00 00 00 00 fa; 0x0c1080007480: fa fa fa fa 00 00 00 00 00 00 00 00 00 00 00 fa; 0x0c1080007490: fa fa fa fa 00 00 00 00 00 00 00 00 00 00 00 fa; 0x0c10800074a0: fa fa fa fa 00 00 00 00 00 00 00 00 00 00 00 fa; 0x0c10800074b0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; 0x0c10800074c0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; Shadow byte legend (one shadow byte represents 8 application bytes):; Addressable: 00; Partially addressable: 01 02 03 04 05 06 07 ; Heap left redzone: fa; Freed heap region: fd; Stack left redzone: f1; Stack mid redzone: f2; Stack right redzone: f3; Stack after return: f5; Stack use after scope: f8; Global redzone: f9; Global init order: f6; Poisoned by user: f7; Container overflow: fc; Array cookie: ac; Intra object redzone: bb; ASan internal: fe; Left alloca redzone: ca; Right alloca redzone: cb; ==29447==ABORTING; ```. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Rename `psi::cctriples::thread_data` (in `EaT_RHF.cc`) to `psi::cctriples::EaT_RHF_thread_data`; - [x] Rename `psi::cctriples::thread_data` (in `ET_RHF.cc`) to `psi::cctriples::ET_RHF_thread_data`. ## Checklist; - [x] ~~Tests added for any ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1438:12379,ABORT,ABORTING,12379,https://psicode.org,https://github.com/psi4/psi4/pull/1438,1,['ABORT'],['ABORTING']
Safety,"9923 136.786876 142.021408; 	 462 R(3,10) = 4.421241 -0.017502 87.218679 91.639920; 	 463 R(3,59) = 3.917839 0.129694 117.366756 121.284594; 	 464 R(26,42) = 5.126758 -0.254383 106.705426 111.832184; 	 465 R(27,42) = 5.013692 -0.066414 135.796477 140.810169; 	 466 R(27,43) = 3.922541 0.040579 56.026763 59.949304; 	 467 R(31,42) = 4.773179 -0.049073 86.931871 91.705050; 	 468 R(36,42) = 5.289417 -0.215249 119.067163 124.356580; 	 469 R(38,42) = 4.228544 -0.108830 108.926322 113.154866; 	 470 R(38,48) = 3.625076 0.487672 45.283805 48.908881; 	 471 R(40,42) = 3.912528 0.142787 93.032857 96.945385; 	 472 R(40,43) = 3.961431 -0.231133 75.232676 79.194108; 	 473 R(43,51) = 4.402298 -0.008954 137.557753 141.960051; forrtl: error (76): Abort trap signal; Image PC Routine Line Source ; libgdma.so 00007FB33148410F for__signal_handl Unknown Unknown; libpthread-2.31.s 00007FB3362A83C0 Unknown Unknown Unknown; libc-2.31.so 00007FB3360E718B gsignal Unknown Unknown; libc-2.31.so 00007FB3360C6859 abort Unknown Unknown; core.cpython-37m- 00007FB3339FF4C7 Unknown Unknown Unknown; core.cpython-37m- 00007FB332555F1D Unknown Unknown Unknown; core.cpython-37m- 00007FB33256F3B1 Unknown Unknown Unknown; core.cpython-37m- 00007FB3320330E6 Unknown Unknown Unknown; python3.7 000055D780EDE114 _PyMethodDef_RawF Unknown Unknown; python3.7 000055D780EDE231 _PyCFunction_Fast Unknown Unknown; python3.7 000055D780F42A5D _PyEval_EvalFrame Unknown Unknown; python3.7 000055D780E976F9 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055D780EDD917 _PyFunction_FastC Unknown Unknown; python3.7 000055D780F3F0A6 _PyEval_EvalFrame Unknown Unknown; python3.7 000055D780E976F9 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055D780E985F4 PyEval_EvalCodeEx Unknown Unknown; python3.7 000055D780E9861C PyEval_EvalCode Unknown Unknown; python3.7 000055D780F99974 Unknown Unknown Unknown; python3.7 000055D780FA4BDD PyRun_StringFlags Unknown Unknown; python3.7 000055D780F4D854 Unknown Unknown Unknown; python3.7 000055D78",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1921:48357,abort,abort,48357,https://psicode.org,https://github.com/psi4/psi4/issues/1921,1,['abort'],['abort']
Safety,": Target ""psi4so"" has EXCLUDE_FROM_ALL set and will not be built by default but an install rule has been provided for it. CMake does not define behavior for this case.; -- The CXX compiler identification is GNU 5.2.0; -- The C compiler identification is GNU 5.2.0; -- Check for working CXX compiler: /usr/bin/g++; -- Check for working CXX compiler: /usr/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Check for working C compiler: /usr/bin/gcc; -- Check for working C compiler: /usr/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : **restrict**; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -fopenmp ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- Found BLAS: SYSTEM_NATIVE (/lib64/libblas.so); -- Found LAPACK: SYSTEM_NATIVE (/lib64/liblapack.so); -- No Sphinx, no docs. Pre-built documentation at http://sirius.chem.vt.edu/psi4manual/latest/index.html; -- Found libutil: /usr/lib64/libutil.so ; -- Found libm: /usr/lib64/libm.so ; -- Found librt: /us",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/312:2876,Detect,Detecting,2876,https://psicode.org,https://github.com/psi4/psi4/issues/312,8,['Detect'],['Detecting']
Safety,"://cmake.org/cmake/help/v3.0/prop_tgt/LINK_INTERFACE_MULTIPLICITY.html . Problem with the start/end-group is that cmake will optimize them out of position if more than one set are included in a link line formed from cmake vars. We patched this in Psi4 by [combining blas and lapack targets](https://github.com/psi4/psi4/blob/master/cmake/math/ConfigMath.cmake#L111) so that one set can sandwich both. Supposedly if these come into the link line through a target rather than a cmake var, then cmake won't mess with them.; * Even though psi4 builds and links fine, we're having to advise more and more people to LD_PRELOAD various mkl libraries or mkl_rt.so. part of the complication could be conda pkgs (even numpy) that are already in env and complicating the link loader's tasks. But we really shouldn't be telling ppl about preloading, which is bad practice for non-dire situations. @ryanmrichard [put in something](https://github.com/psi4/psi4/pull/513/files#diff-bb0d8c2ec987bfc58b4a943e453ea132L147) to preferentially detect the runtime lib as a bandaid to this.; * People for whom Bast math detection works fine but cmake FindLapack doesn't (namely, @psi-rking and [this fellow](http://forum.psicode.org/t/problem-with-building-from-source-according-to-cmakelists-txt/352/10) are having problems with libefp and CheMPS2 because different (or no) math libs are being inserted from those dependencies. I can forward the Bast libs to those external projects, but that'll cause some complications with the exported targets. I can fix that, but I fear that cmake will optimize away my start/end-groups again if they appear more than once. I am _not_ working on this right now, but I will have to, at a minimum, apply more bandaids soon, so I wanted to know from @robertodr and @bast if they're any solutions from the past two years. At a maximum, I'm tempted to default to `mkl_rt`, have ConfigMath export a target, and train libefp and CheMPS2 to detect it in preference to FindLapck. This is the s",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/537:2339,detect,detect,2339,https://psicode.org,https://github.com/psi4/psi4/issues/537,1,['detect'],['detect']
Safety,":1001 ] Searching for CHRONO_LIBRARY_RELEASE: boost_chrono-mt-1_59;boost_chrono-mt;boost_chrono-mt-1_59;boost_chrono-mt;boost_chrono; -- [ /usr/local/Cellar/cmake/3.2.2/share/cmake/Modules/FindBoost.cmake:1037 ] Searching for CHRONO_LIBRARY_DEBUG: boost_chrono-mt-d-1_59;boost_chrono-mt-d;boost_chrono-mt-d-1_59;boost_chrono-mt-d;boost_chrono-mt;boost_chrono; -- [ /usr/local/Cellar/cmake/3.2.2/share/cmake/Modules/FindBoost.cmake:1001 ] Searching for THREAD_LIBRARY_RELEASE: boost_thread-mt-1_59;boost_thread-mt;boost_thread-mt-1_59;boost_thread-mt;boost_thread; -- [ /usr/local/Cellar/cmake/3.2.2/share/cmake/Modules/FindBoost.cmake:1037 ] Searching for THREAD_LIBRARY_DEBUG: boost_thread-mt-d-1_59;boost_thread-mt-d;boost_thread-mt-d-1_59;boost_thread-mt-d;boost_thread-mt;boost_thread; -- [ /usr/local/Cellar/cmake/3.2.2/share/cmake/Modules/FindBoost.cmake:1088 ] Boost_FOUND = 1; ```. ... after this point if hombrew boost _is unlinked_:. ```; -- Could NOT find Boost ; Could not find the following static Boost libraries:; boost_filesystem; boost_regex; boost_serialization; boost_system; boost_timer; boost_chrono; boost_thread; ```. ... and if hombrew boost _is linked_: . ```; Boost version: 1.59.0 ; Boost include path: /Users/admin/anaconda/envs/psi4-py2.7/include; -- Boost version: 1.59.0; -- Found the following Boost libraries:; -- filesystem; -- python; -- regex; -- serialization; -- system; -- timer; -- chrono; -- thread; ```. My main concern is CMake reporting Boost version 1.59.0, but then using library paths that point to a different version. I don't know if I would have been able to figure out what was going on if I didn't recognize the linker errors as the boost 1.60.0 incompatibility issue. ; (Good thing I have been reading the issues I guess! :tongue: ). But since `Boost_FOUND = 1` is set in both cases, why is the prepackaged boost being built? ; ### Temporary workaround. Using `-DBUILD_CUSTOM_BOOST=ON` will avoid the issue completely and still build successfully.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/313:11066,avoid,avoid,11066,https://psicode.org,https://github.com/psi4/psi4/issues/313,1,['avoid'],['avoid']
Safety,":56); ==98805== by 0x29697716: test (plugin.cc:134); ==98805== by 0x5FDD804: ??? (in /home/user/psi4/lib/psi4/core.cpython-310-x86_64-linux-gnu.so); ==98805== by 0x5FE0666: ??? (in /home/user/psi4/lib/psi4/core.cpython-310-x86_64-linux-gnu.so); ==98805== by 0x5F6A896: ??? (in /home/user/psi4/lib/psi4/core.cpython-310-x86_64-linux-gnu.so); ==98805== by 0x4FDC86: cfunction_call (methodobject.c:543); ==98805== by 0x4F741A: _PyObject_MakeTpCall (call.c:215); ==98805== by 0x4F34C5: UnknownInlinedFun (abstract.h:112); ==98805== by 0x4F34C5: UnknownInlinedFun (abstract.h:99); ==98805== by 0x4F34C5: UnknownInlinedFun (abstract.h:123); ==98805== by 0x4F34C5: UnknownInlinedFun (ceval.c:5893); ==98805== by 0x4F34C5: _PyEval_EvalFrameDefault (ceval.c:4181); ==98805== by 0x4FE0CE: UnknownInlinedFun (pycore_ceval.h:46); ==98805== by 0x4FE0CE: UnknownInlinedFun (ceval.c:5067); ==98805== by 0x4FE0CE: _PyFunction_Vectorcall (call.c:342); ==98805== If you believe this happened as a result of a stack; ==98805== overflow in your program's main thread (unlikely but; ==98805== possible), you can try to increase the size of the; ==98805== main thread stack using the --main-stacksize= flag.; ==98805== The main thread stack size used in this run was 8388608.; ==98805== ; ==98805== HEAP SUMMARY:; ==98805== in use at exit: 20,461,418 bytes in 40,150 blocks; ==98805== total heap usage: 393,696 allocs, 353,546 frees, 108,089,532 bytes allocated; ==98805== ; ==98805== LEAK SUMMARY:; ==98805== definitely lost: 0 bytes in 0 blocks; ==98805== indirectly lost: 0 bytes in 0 blocks; ==98805== possibly lost: 480,565 bytes in 454 blocks; ==98805== still reachable: 19,980,817 bytes in 39,694 blocks; ==98805== suppressed: 36 bytes in 2 blocks; ==98805== Rerun with --leak-check=full to see details of leaked memory; ==98805== ; ==98805== For lists of detected and suppressed errors, rerun with: -s; ==98805== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0); Segmentation fault (core dumped); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3200:4486,detect,detected,4486,https://psicode.org,https://github.com/psi4/psi4/issues/3200,1,['detect'],['detected']
Safety,":recursive62; - #2552 ; - #2557; - [ ] #2516. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Create compute classes for nbody, CBS and findif; - [ ] Integrate QCArchive. ## Release Notes; - `msgpack-python` added as req'd dependency. this keeps numpy arrays serialized when communicating in schema; - python 3.8 requires pint 0.10; - add a logging file, presently `file.log` that currently is continuously appended; - any fns mirroring `sherrill_gold_standard` or `allen_focal_point` need to be reformatted and registered with `register_composite_function`; - extrapolation functions for composite need to be registered with `register_xtpl_function`; - CBS and xtpl functions need to be called as strings, not objects. So `energy('cbs', scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme='scf_xtpl_helgaker_3')` not `energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3)`.; - no longer always evaluating gradient before Hessian to test safety of projecting rotations. Instead assuming unsafe. Can pass `ref_gradient` array to test on or `set findif fd_project T/F` explcitly to control.; - `psi4.QMMM()` object replaced by `embedding_charges` kwarg in Bohr. See extern examples for details.; - `json_ret = psi4.schema_wrapper.run_qcschema(json_input)` not `json_ret = psi4.json_wrapper.run_json(json_input)`. `json_ret` is now an object, so `.` access, not dictionary.; - CBS wrapper issues a `clean()` btwn calcs. Plain string modelchem calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. This is no longer happening, so for occasional string modelchem calcs, you may need to add a clean in the input.; - extern object units are bohr, not whatever the Molecule was.; - `psi4 --module` returns the path for loading via `import psi4`. opposite of `psi4.executable`; - `psi4.set_output_file` now wraps `psi4.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351:1546,safe,safety,1546,https://psicode.org,https://github.com/psi4/psi4/pull/1351,1,['safe'],['safety']
Safety,"= 179.050978 0.000006 0.918241 179.969219; 	 458 D(80,79,81,82) = -0.723483 -0.000001 0.699743 -0.023740; 	 459 R(1,57) = 4.556972 0.028391 82.812579 87.369551; 	 460 R(1,59) = 4.234547 -0.016108 88.866233 93.100780; 	 461 R(1,61) = 5.234532 -0.079923 136.786876 142.021408; 	 462 R(3,10) = 4.421241 -0.017502 87.218679 91.639920; 	 463 R(3,59) = 3.917839 0.129694 117.366756 121.284594; 	 464 R(26,42) = 5.126758 -0.254383 106.705426 111.832184; 	 465 R(27,42) = 5.013692 -0.066414 135.796477 140.810169; 	 466 R(27,43) = 3.922541 0.040579 56.026763 59.949304; 	 467 R(31,42) = 4.773179 -0.049073 86.931871 91.705050; 	 468 R(36,42) = 5.289417 -0.215249 119.067163 124.356580; 	 469 R(38,42) = 4.228544 -0.108830 108.926322 113.154866; 	 470 R(38,48) = 3.625076 0.487672 45.283805 48.908881; 	 471 R(40,42) = 3.912528 0.142787 93.032857 96.945385; 	 472 R(40,43) = 3.961431 -0.231133 75.232676 79.194108; 	 473 R(43,51) = 4.402298 -0.008954 137.557753 141.960051; forrtl: error (76): Abort trap signal; Image PC Routine Line Source ; libgdma.so 00007FB33148410F for__signal_handl Unknown Unknown; libpthread-2.31.s 00007FB3362A83C0 Unknown Unknown Unknown; libc-2.31.so 00007FB3360E718B gsignal Unknown Unknown; libc-2.31.so 00007FB3360C6859 abort Unknown Unknown; core.cpython-37m- 00007FB3339FF4C7 Unknown Unknown Unknown; core.cpython-37m- 00007FB332555F1D Unknown Unknown Unknown; core.cpython-37m- 00007FB33256F3B1 Unknown Unknown Unknown; core.cpython-37m- 00007FB3320330E6 Unknown Unknown Unknown; python3.7 000055D780EDE114 _PyMethodDef_RawF Unknown Unknown; python3.7 000055D780EDE231 _PyCFunction_Fast Unknown Unknown; python3.7 000055D780F42A5D _PyEval_EvalFrame Unknown Unknown; python3.7 000055D780E976F9 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055D780EDD917 _PyFunction_FastC Unknown Unknown; python3.7 000055D780F3F0A6 _PyEval_EvalFrame Unknown Unknown; python3.7 000055D780E976F9 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055D780E985F4 PyEval_EvalCodeEx Unknown Unknown",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1921:48099,Abort,Abort,48099,https://psicode.org,https://github.com/psi4/psi4/issues/1921,1,['Abort'],['Abort']
Safety,"A [recent PR](https://github.com/psi4/psi4/pull/2780#event-7959038316) changed `detci` so that it crashes when the user specified more roots than the basis set allows. @susilehtola proposed that instead, `detci` take as many roots as possible. What do we want to do?. I'll quote Lori's analysis of our options. > 1. Focus on segfault -> error msg first, as Jonathon has done and as eomcc should do. no contracts violated. compute time wasted.; > ; > 2. Reset nroots as needed. Change read_options descriptions to ""max roots sought; may be adjusted downwards for small basis sets"". nroots contract violated. could be troublesome for machine returned results since roots array length != nroots requested. good for throughput calcs & no compute time wasted. (resetting nroots may not be so easy if arrays are allocated based on option.); > ; > 3. Same as (2) but py-side it detects nroots change and throws a specialized error (like we do for convergence) with full output and completed wfn attached, so no compute or results lost. no contracts violated. automated runs can recover.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2825:871,detect,detects,871,https://psicode.org,https://github.com/psi4/psi4/issues/2825,2,"['detect', 'recover']","['detects', 'recover']"
Safety,"A number of issues have come up and been bandaid-ed over regarding detecting math libs, propagating math libs, preloading math libs, statically linking math libs, etc. This issue is mainly an FYI to all and a query to @robertodr and @bast to make sure we're not trying to solve things that they've already done. #### Current State; * psi4 uses Radovan Bast's detection scheme circa 2014 or so; * said scheme finds MKL just fine- usually the shared lib versions and always the layered scheme (https://software.intel.com/en-us/node/528508) rather than `libmkl_rt.so`; * said scheme just uses Accelerate libs for Mac, again just fine; * said scheme can find ACML after heavy hinting; * there is a FindLapack CMake module, but either we haven't tried hard enough or it can't find ACML. It also will only find shared MKL libs. #### Complications and Bandaids; * conda pkg building needs _static_ mkl libs back from math detection (except for a couple). We've [patched this within the Bast math detection](https://github.com/psi4/psi4/blob/master/cmake/math/MathLibsFunctions.cmake#L59-L73) if triggered by a cmake var.; * MKL in general needs `-Wl,--start-group` and `-Wl,--end-group` passed to the linker around the math libs to resolve circular dependencies. Supposedly this can be conveyed to cmake directly with https://cmake.org/cmake/help/v3.0/prop_tgt/LINK_INTERFACE_MULTIPLICITY.html . Problem with the start/end-group is that cmake will optimize them out of position if more than one set are included in a link line formed from cmake vars. We patched this in Psi4 by [combining blas and lapack targets](https://github.com/psi4/psi4/blob/master/cmake/math/ConfigMath.cmake#L111) so that one set can sandwich both. Supposedly if these come into the link line through a target rather than a cmake var, then cmake won't mess with them.; * Even though psi4 builds and links fine, we're having to advise more and more people to LD_PRELOAD various mkl libraries or mkl_rt.so. part of the complication cou",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/537:67,detect,detecting,67,https://psicode.org,https://github.com/psi4/psi4/issues/537,4,['detect'],"['detecting', 'detection']"
Safety,Add missing sanity check.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1982:12,sanity check,sanity check,12,https://psicode.org,https://github.com/psi4/psi4/pull/1982,1,['sanity check'],['sanity check']
Safety,"Adds the ability to compile and link [Ambit](https://github.com/jturney/ambit) v0.1-alpha into Psi4. The interface is disabled by default but can be enabled with either `setup --ambit=on` or `cmake -DENABLE_AMBIT=ON`. Even though the interface is disabled by default both states have been tested in Travis: [disabled](https://travis-ci.org/jturney/psi4/builds/109861480) and [enabled](https://travis-ci.org/jturney/psi4/builds/109700703). A new plugin template has also been added, `psi4 --new-plugin mycode +ambit`, which shows how to use Ambit with added Psi4 functionality. This PR also includes fixing a typo in Wavefunction and renaming the macro NotImplementedException to NOT_IMPLEMENTED_EXCEPTION to avoid conflicts with Ambit. This PR is ready to go.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/265:708,avoid,avoid,708,https://psicode.org,https://github.com/psi4/psi4/pull/265,1,['avoid'],['avoid']
Safety,"All the symmetry detection in the Molecule class is through `tol` arguments for individual methods. For the Molecule as a whole, this is controlled by `DEFAULT_SYM_TOL`, which is compiled in. This means one can't just dial down the symmetry tolerance for an entire optimization. For this ticket, make the `tol` parameter not a preprocessor option but a bit of member data. Make a set function for this. Export it to python.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/232:17,detect,detection,17,https://psicode.org,https://github.com/psi4/psi4/issues/232,1,['detect'],['detection']
Safety,"Assume I have the electron density represented as the expansion coefficients under an DF auxiliary basis (which come from machine learning prediction). Although the kinetic energy cannot be evaluated without an AO basis, theoretically the Kohn-Sham effective potential has no kinetic term and should be able to be constructed from DF density (assume we are using PBE). Then we might restart the DFT from this effective potential. Is this possible for psi4? And if so, may I have some hints on how to do this?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3070:139,predict,prediction,139,https://psicode.org,https://github.com/psi4/psi4/issues/3070,1,['predict'],['prediction']
Safety,Avoid Disk algorithm of MemDF,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3131:0,Avoid,Avoid,0,https://psicode.org,https://github.com/psi4/psi4/pull/3131,1,['Avoid'],['Avoid']
Safety,Avoid Psithon processing of literal expressions and comments. Fixes #655,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/658:0,Avoid,Avoid,0,https://psicode.org,https://github.com/psi4/psi4/pull/658,1,['Avoid'],['Avoid']
Safety,Avoid hungarian,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/974:0,Avoid,Avoid,0,https://psicode.org,https://github.com/psi4/psi4/pull/974,1,['Avoid'],['Avoid']
Safety,Basis set input is not sanity checked,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2253:23,sanity check,sanity checked,23,https://psicode.org,https://github.com/psi4/psi4/issues/2253,1,['sanity check'],['sanity checked']
Safety,"Build the shared library with `make psi4so`, and it builds just fine but then segfaults when you try to set options. @bennybp, Boost/fpic notwithstanding, I know you've got a shared library of psi4 in working order. Could you send me or post the `src/bin/psi4/CMakeLists.txt` and any changes to the `MAKE_PYTHON_MODULE` sections? I didn't see that you had a fork of psi4 with changes. ``` python; Python 2.7.10 |Anaconda 2.1.0 (x86_64)| (default, May 28 2015, 17:04:42) ; [GCC 4.2.1 (Apple Inc. build 5577)] on darwin; Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.; Anaconda is brought to you by Continuum Analytics.; Please check out: http://continuum.io/thanks and https://binstar.org; >>> import sys; >>> sys.path.insert(1, '/Users/loriab/linux/psihub/publicface/psi4/objdir/bin'); >>> import psi4; >>> psi4.set_global_option('BASIS', 'CC_PVDZ'). Error: option BASIS is not contained in the list of available options.; Assertion failed: (px != 0), function operator->, file /Users/loriab/linux/psihub/publicface/psi4/objdir/boost/include/boost/smart_ptr/shared_ptr.hpp, line 648.; Abort trap: 6; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/251:1109,Abort,Abort,1109,https://psicode.org,https://github.com/psi4/psi4/issues/251,1,['Abort'],['Abort']
Safety,CFOUR Driver with Displacements Fails Sanity Check,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1784:38,Sanity Check,Sanity Check,38,https://psicode.org,https://github.com/psi4/psi4/issues/1784,1,['Sanity Check'],['Sanity Check']
Safety,CMake could probably auto-detect libiomp5 using LD_LIBRARY_PATH,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2806:26,detect,detect,26,https://psicode.org,https://github.com/psi4/psi4/issues/2806,1,['detect'],['detect']
Safety,"Carried forward from [forums](http://forum.psicode.org/t/cfour-outfile-inconsistent-with-cfour-grd/1642). I haven't run this myself, but the output file the reporter gave is from 1.3.2 release, and I don't think the CFOUR driver has been touched since then. @loriab, correct me if I'm wrong. See the following input file:; ```; memory 2 gb. molecule co2 {; C; O 1 1.163; O 1 1.163 2 180; }. set basis aug-cc-pvdz; set CFOUR_ABCDTYPE AOBASIS; set CFOUR_CC_PROGRAM ecc; set cfour_anharmonic VIBROT; set cfour_vibration findif. optimize('c4-ccsd(t)'); ```. Psi will do a sanity check at the end of the computation, that the nuclear repulsion energy harvested from CFOUR output agrees with the same as computed from CFOUR's GRD file. In this case, they disagree. The output harvested quantity is the _undisplaced geometry_, where the GRD harvest is the last displacement to run, which is a _displaced geometry_. Unsurprisingly, the nuclear repulsion energies disagree between the two, and Psi reports a [validation error](https://github.com/psi4/psi4/blob/master/psi4/driver/qcdb/cfour.py#L597).",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1784:568,sanity check,sanity check,568,https://psicode.org,https://github.com/psi4/psi4/issues/1784,1,['sanity check'],['sanity check']
Safety,"Carried forward from [forums](http://forum.psicode.org/t/psi4-crashes-abort-trap-signal-with-no-information/1806/5). The following input file; ```; molecule { ; -1 1; N 1.105000 0.080000 -0.002000; O 0.484000 -0.993000 -0.081000; O 0.484000 1.153000 0.078000; O 2.347000 0.080000 -0.002000; }; set {; g_convergence GAU_LOOSE; geom_maxiter 3; }; memory 700MB; optimize('wb97x/6-31G*'); ```; leads optking to abort the computation on [this line](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/optking/optking.cc#L578). It looks like an error was raised somewhere else, but there's no indication of where.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1924:70,abort,abort-trap-signal-with-no-information,70,https://psicode.org,https://github.com/psi4/psi4/issues/1924,2,['abort'],"['abort', 'abort-trap-signal-with-no-information']"
Safety,Check for working Fortran compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort supports Fortran 90; -- Checking whether /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort supports Fortran 90 -- yes; -- Fortran ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Performing Test has_xHost; -- Performing Test has_xHost - Success; -- Try OpenMP C flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP Fortran flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -qopenmp; -- Found libutil: /usr/lib/x86_64-linux-gnu/libutil.so; -- Found libm: /usr/lib/x86_64-linux-gnu/libm.so; -- Found librt: /usr/lib/x86_64-linux-gnu/librt.so; -- Found libdl: /usr/lib/x86_64-linux-gnu/libdl.so; -- Looking for pthread.h; -- Looking for pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE; -- Found PythonInterp: /home/vayu/anaconda3/bin/python (found ve,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/629:6543,Detect,Detecting,6543,https://psicode.org,https://github.com/psi4/psi4/issues/629,2,['Detect'],['Detecting']
Safety,Cleanup to find_occupation and more sanity checks,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2488:36,sanity check,sanity checks,36,https://psicode.org,https://github.com/psi4/psi4/pull/2488,1,['sanity check'],['sanity checks']
Safety,"Closes #2735 . Previously, `initialize_lebedev` was never called, and in fact was getting optimized out of the module completely upon compilation. When `lebedev_mappping_[]` is then accessed across multiple OpenMP threads, the std::map is empty, and a deadlock can happen where two threads try to access-write (since [key] fills if key is not found), and the slightly slower thread ends up in a Bad State where it thinks there is a value but ends up infinitely looping on the lookup (the program will hang on `[]`). This only happens once every several thousand runs, and only when running with a high degree of parallelism in a system with many atoms. I cannot induce it in captivity, but I have observed it in the wild. Anyway, `[]` accesses on std::map aren't thread-safe if you aren't super-duper sure the map is fully filled for all keys you'd ever look up, which *should* be the case if `initialize_lebedev` was ever called anywhere. But it wasn't, and that was Bad. Now it's called exactly once (thanks, c++11's `call_once`! I do see that this isn't used anywhere else in the code, but I do see mutex is imported in several files, so I don't think I'm adding any new deps here). The hangs should be gone, though I'll have to churn through another several thousand runs to likely be sure (as, again, it is a very rare kind of hang). This will take me a few days to confirm, but given all debugging efforts point to this being the problem, I'm like 99% confident this will do the trick. That said, as far as I can tell, besides one print function the resulting order_ that's assigned to is never *used*. Maybe a candidate to be axed in the future?. ## Description; Actually invokes initialize_lebedev before accessing lebedev_mapping_ to ensure the mapping has values, and prevents a deadlock when running in parallel. ## User API & Changelog headlines; Prevents a nasty, rare hang. ## Dev notes & details; See the main PR body. ## Questions; - [x] What does `order_` actually do in SphericalGrid",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2736:770,safe,safe,770,https://psicode.org,https://github.com/psi4/psi4/pull/2736,1,['safe'],['safe']
Safety,"Compiling psi4 on -O3 with icc 18.0.1 seems to trigger a crash in the compiler. The crash is not observed with the icc 17.0.2 with -O3, nor is it observed with icc 18.0.1 if I turn the optimization flag down to -O1. ```; /u/nyc/mcgibbon/gerrit/psi4-gerrit/psi4/src/psi4/dcft/dcft_gradient_UHF.cc(3903) (col. 72): internal error: 20000_6805. [ 85%] Building CXX object src/psi4/optking/CMakeFiles/optking.dir/opt_data_io.cc.o; compilation aborted for <prefix>/psi4/src/psi4/dcft/dcft_gradient_UHF.cc (code 4); make[5]: *** [src/psi4/dcft/CMakeFiles/dcft.dir/dcft_gradient_UHF.cc.o] Error 4; make[4]: *** [src/psi4/dcft/CMakeFiles/dcft.dir/all] Error 2; make[4]: *** Waiting for unfinished jobs....; ```. With 18.0.1, I can fix the error by turning down the optimization flag for that file in particular by adding the following snippet to psi4/src/psi4/dcft/CMakeLists.txt:; ```; if (CMAKE_CXX_COMPILER_ID STREQUAL ""Intel"" AND; CMAKE_CXX_COMPILER_VERSION VERSION_LESS 18.1 AND; CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 18.0). message(WARNING ""Intel C++ (ICC) 18.0 fails to compile dcft_gradient_UHF.cc with aggressive optimization flags""); set_source_files_properties(dcft_gradient_UHF.cc PROPERTIES; COMPILE_FLAGS -O1); endif (); ```. Has anyone else tried using icc 18.0.1? Is there precedent for adding compiler- and file-specific flags in the CMakeLists? I'm not sure if this is suitable as a PR.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/923:438,abort,aborted,438,https://psicode.org,https://github.com/psi4/psi4/issues/923,1,['abort'],['aborted']
Safety,Cs symmetry is not detected,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2463:19,detect,detected,19,https://psicode.org,https://github.com/psi4/psi4/issues/2463,1,['detect'],['detected']
Safety,"Dear Pis4 developers. I've got in issue when link psi4 binary:. ```; /usr/local/lib/libpython2.7.a(posixmodule.o): In function `posix_tmpnam':; /home/kbob/bin/Python-2.7.5/./Modules/posixmodule.c:7515: warning: the use of `tmpnam_r' is dangerous, better use `mkstemp'; /usr/local/lib/libpython2.7.a(posixmodule.o): In function `posix_tempnam':; /home/kbob/bin/Python-2.7.5/./Modules/posixmodule.c:7462: warning: the use of `tempnam' is dangerous, better use `mkstemp'; /home/kbob/git/psi4release/build/boost/lib/libboost_python-1_57.a(builtin_converters.o): In function `boost::python::converter::(anonymous namespace)::slot_rvalue_from_python<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >, boost::python::; builtin_converters.cpp:(.text+0x1286): undefined reference to `PyUnicodeUCS4_AsWideChar'; /home/kbob/git/psi4release/build/boost/lib/libboost_python-1_57.a(builtin_converters.o): In function `encode_string_unaryfunc':; builtin_converters.cpp:(.text+0x455): undefined reference to `PyUnicodeUCS4_FromEncodedObject'; collect2: error: ld returned 1 exit status; make[2]: *** [bin/psi4] Ошибка 1; make[1]: *** [src/bin/psi4/CMakeFiles/psi4.dir/all] Ошибка 2; make: *** [all] Ошибка 2; ```. I'm running on Ubuntu 14.04 with cmake installed from ppa:george-edison55/cmake-3.x. Since the default version available in 14.04 is boost-1.54, used to compile boost_1_57_0.tar.bz2 that included in distro.; http://packages.ubuntu.com/trusty/libboost-all-dev. My python interpreter support UCS-4. python -c ""import sys; print(sys.maxunicode)""; returns 1114111. python3 -c ""import sys; print(sys.maxunicode)""; returns 1114111. Could you clarify my issue or can I compile Psi4 without puthon support to avoid this issue?; in particular, I only need to generate MOLDEN file from SCF calculations. With respect, Vladimir.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/94:1729,avoid,avoid,1729,https://psicode.org,https://github.com/psi4/psi4/issues/94,1,['avoid'],['avoid']
Safety,"Dear all, . I am trying to compile the latest version of the PSI4 package on a cluster with OpenSuse; however I end up with the following linking error : . Linking CXX shared library core.so; /usr/bin/ld: BFD (GNU Binutils; openSUSE 12.3) 2.23.1 internal error, aborting at ../../bfd/reloc.c line 444 in bfd_get_reloc_size. /usr/bin/ld: Please report this bug. collect2: error: ld returned 1 exit status; make[5]: *** [src/core.so] Error 1; make[5]: *** Deleting file `src/core.so' ; make[4]: *** [src/CMakeFiles/core.dir/all] Error 2; make[3]: *** [all] Error 2; make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; make[1]: *** [CMakeFiles/psi4-core.dir/all] Error 2; make: *** [all] Error 2; ; -----------------------------------------------------------------------------------------------------------------------------------------; Any idea how to get rid of it?. Best,; LUCA",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/785:262,abort,aborting,262,https://psicode.org,https://github.com/psi4/psi4/issues/785,1,['abort'],['aborting']
Safety,Definitions : USE_FCMANGLE_H;SYS_LINUX;HAS_CXX11;HAS_CXX11_FUNC;HAS_CXX11_AUTO;HAS_CXX11_AUTO_RET_TYPE;HAS_CXX11_CONSTEXPR;HAS_CXX11_CSTDINT_H;HAS_CXX11_DECLTYPE;HAS_CXX11_INITIALIZER_LIST;HAS_CXX11_LAMBDA;HAS_CXX11_LONG_LONG;HAS_CXX11_NULLPTR;HAS_CXX11_LIB_REGEX;HAS_CXX11_RVALUE_REFERENCES;HAS_CXX11_SIZEOF_MEMBER;HAS_CXX11_STATIC_ASSERT;HAS_CXX11_VARIADIC_TEMPLATES;HAVE_MKL_BLAS;HAVE_MKL_LAPACK;HAVE_MPI;HAVE_DKH; -- The CXX compiler identification is Intel 15.0.0.20140723; -- The C compiler identification is Intel 15.0.0.20140723; -- Check for working CXX compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpicxx; -- Check for working CXX compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpicxx -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working C compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpicc; -- Check for working C compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpicc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- The Fortran compiler identification is Intel 15.0.0.20140723; -- Check for working Fortran compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpif77; -- Check for working Fortran compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpif77 -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /opt/intel/impi/5.0.1.035/intel64/bin/mpif77 supports Fortran 90; -- Checking whether /opt/intel/impi/5.0.1.035/intel64/bin/mpif77 supports Fortran 90 -- yes; -- Fortran ENABLED; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : **restrict**; -- Performing Test ,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/201:12543,Detect,Detecting,12543,https://psicode.org,https://github.com/psi4/psi4/issues/201,2,['Detect'],['Detecting']
Safety,"F -DENABLE_SCALASCA=OFF -DENABLE_UNIT_TESTS=OFF -DENABLE_STATIC_LINKING=OFF -DENABLE_PLUGINS=OFF -DENABLE_LIBERD=OFF -DENABLE_JKFACTORY=OFF -DENABLE_GPU_DFCC=OFF -DENABLE_DUMMY_PLUGIN=OFF -DENABLE_PCMSOLVER=OFF -DENABLE_CHEMPS2=OFF -DENABLE_CXX11_SUPPORT=ON -DLIBINT_OPT_AM=5 -DEXECUTABLE_SUFFIX= -DENABLE_AUTO_BLAS=ON -DENABLE_AUTO_LAPACK=ON -DMKL_FLAG=""-mkl=parallel"" -DMKL_FLAG_SET=ON -DENABLE_AUTO_BLAS=OFF -DENABLE_AUTO_LAPACK=OFF -DCMAKE_INSTALL_PREFIX=/mnt/data/users/dm4/vol12/medvedevmg_1708/bin/psi4 -DCMAKE_BUILD_TYPE=release /mnt/data/users/dm4/vol12/medvedevmg_1708/bin/tmp/psi4public-0.3. -- User set explicit MKL flag which is passed to the compiler and linker: -mkl=parallel; -- This disables math detection and builtin math libraries; -- Setting -DHAVE_MKL_BLAS and -DHAVE_MKL_LAPACK; -- System : Linux; -- Processor type : x86_64; -- C++ compiler flags : -DRESTRICT=**restrict** -Xlinker -export-dynamic -fPIC -std=gnu++98 -mkl=parallel -openmp -O3 -no-prec-div -DNDEBUG -xHost; -- C compiler flags : -restrict -DRESTRICT=**restrict** -std=c99 -fPIC -mkl=parallel -openmp -O3 -ip -DNDEBUG -xHost; -- Fortran compiler flags: -w -fpp -assume byterecl -DVAR_IFORT -fPIC -nosave -mkl=parallel -openmp -O3 -ip -xHost; -- Libraries : -mkl=parallel; -- Definitions : USE_FCMANGLE_H;SYS_LINUX;HAVE_MKL_BLAS;HAVE_MKL_LAPACK;HAVE_MPI;HAVE_DKH; -- The CXX compiler identification is Intel 13.1.0.20130121; -- The C compiler identification is Intel 13.1.0.20130121; -- Check for working CXX compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpicxx; -- Check for working CXX compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpicxx -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working C compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpicc; -- Check for working C compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpicc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- The Fortran compiler identification ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/201:4487,detect,detection,4487,https://psicode.org,https://github.com/psi4/psi4/issues/201,1,['detect'],['detection']
Safety,Fix Numpy Python detection in Windows for new NumPy,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2624:17,detect,detection,17,https://psicode.org,https://github.com/psi4/psi4/pull/2624,1,['detect'],['detection']
Safety,"Fix `atexit` deregistering in Py3; - [x] Removed get_/set_num_threads driver wrappers. Still looks the same to users. Prints ""Threads set to %d by Python driver"" in output file so there's a record of the change.; - [x] `psi4.compare_values()` and friends adapted to work with pytest upon success. Recommended pattern: `ans = psi4.compare_values(normal test args here); assert ans`.; - [x] Set up pytest so can test installed psi4 free of cmake/ctest. For the moment, you need to be in `${top-level-psi4-dir}/tests/pytest`, have pytest installed (`conda install pytest`), have psi4 importable (`psi4 --psiapi-path`), and run `python -m pytest` or for more info, `python -m pytest -vs`.; - [x] Revive a ccsd(t) sp and an mp2 opt in the cfour interface. Add a pysmoke test.; - [x] Vital tweaks so that psiapi can handle more than vanilla calcs. Includes initializing efp in psi4.geometry, moving pcmsolver path detect to __init__, and the options clearing mentioned above.; - [x] Fix TargetHDF5 detection for detect pre-built case (i.e., conda case). * **User-Facing for Release Notes**; - [x] CMake 3.3 now required; - [x] Using `OMP_NUM_THREADS` and/or `MKL_NUM_THREADS` to guide parallelism in Psi4 is _now deprecated_. Psi4 won't pay the least attention to these variables.; - [x] Added `psi4 --psiapi-path` command-line argument. This prints the bash commands you need to execute to set up python interp and pythonpath in your shell to `python -c ""import psi4""`; - [x] Psi4 molecule strings passed to `psi4.geometry()` no longer balk at python-style comments, as these are filtered out.; - [x] Added a `psi4.clean_options()` fn (alongside `psi4.clean()` and `psi4.clean_variables()`) to reset the `P::e.options` object to its initial state. This is necessary for independent tests in pytest and will probably be useful for psiapi sessions.; - [x] Add pytest smoke tests for psi4 itself and psi4+addons (addon tests skip if addon not enabled or detectable). From source, `cd tests/pytest && python -",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/627:1790,detect,detection,1790,https://psicode.org,https://github.com/psi4/psi4/pull/627,2,['detect'],"['detect', 'detection']"
Safety,"Fixes #2493 . ## Description; <!-- Provide a brief description of the PR's purpose here. -->. For memory safety, the integrals in libmints should be returned as unique_ptrs rather than raw pointers. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] All integrals in libmints now return a unique_ptr rather than a raw pointer; - [x] Call sites refactored to match; ## Questions; - [x] Are my refactors to the call sites correct? Many are just an immediate release of the unique_pointer, with the assumption that the memory management / pointer deletion occurs elsewhere; - [x] Should iterators eg `CartesianIter` also return unique_ptrs?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2775:105,safe,safety,105,https://psicode.org,https://github.com/psi4/psi4/pull/2775,1,['safe'],['safety']
Safety,"For a simple S2 molecule I get a failure to converge (in the default 100 iterations at least) when using XC functionals (tested with PBE and BP86), but not with hybrid (tested with PBE0). [S2_PBE.log](https://github.com/psi4/psi4/files/2131171/S2_PBE.log). sample input file:; ```; molecule mol {; 0 1; S 0.0000000000 0.0000000000 -0.9555689065; S 0.0000000000 0.0000000000 0.9555689065; }. mol.update_geometry(); mol.symmetrize(0.01). set scf_type df; set basis pcsseg-1. set DYNAMIC_LEVEL 1; #E, wfn = optimize('PBE0',return_wfn=True) # works; E, wfn = optimize('PBE',return_wfn=True) # fails; ```; Any ideas to why this happens, and what I can do to help avoid this problem?. (also tested on v1.2-rc3, same issue)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1054:658,avoid,avoid,658,https://psicode.org,https://github.com/psi4/psi4/issues/1054,1,['avoid'],['avoid']
Safety,"Hello!. I'm trying to compile Psi4 on my laptop and I have a problem. As described here [https://github.com/psi4/psi4/wiki/3_Building#builddetailed], I've run setup script, then I've entered $top/objdir and typed 'make -j8'. Compilation was successful, but I've got a linking error. Operating system is ArchLinux 4.2.5. I have Python2.7 and Python3.5 both installed on my computer, LAPACK, BLAS, boost, perl are also installed. It seems like ld cannot link psi4 with boost::regex. When I didn't specified usage of Python2 in the setup script command line, there were linking errors due to different versions of python in Psi (python3) and python in boost (python2). Without specifying '--chemps2 off' the compilation also fails to start. To help setup script in detecting boost libraries on my computer, I've tried to run setup with '--boost-incdir=/usr/include --boost-libdir=/usr/lib' options. I've also tried to find in automatically generated makefiles the invocation of ld (I wanted to add option '-lboost_regex' to linker), but I have not found.; Could you tell me, please, what is wrong? How can I fix this problem?. Thank you very much!; Alexander. Output of the 'setup' script:; [piton@avo psi4]$ ./setup --chemps2 off --python=/usr/bin/python2; cmake -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++ -DENABLE_MPI=OFF -DENABLE_SGI_MPT=OFF -DENABLE_OMP=ON -DENABLE_VECTORIZATION=OFF -DENABLE_CSR=OFF -DENABLE_SCALAPACK=OFF -DENABLE_SCALASCA=OFF -DENABLE_UNIT_TESTS=OFF -DENABLE_STATIC_LINKING=OFF -DENABLE_PLUGINS=OFF -DENABLE_CHEMPS2=OFF -DENABLE_CXX11_SUPPORT=ON -DLIBINT_OPT_AM=5 -DEXECUTABLE_SUFFIX= -DPYTHON_INTERPRETER=/usr/bin/python2 -DCMAKE_INSTALL_PREFIX=/usr/local/psi4 -DCMAKE_BUILD_TYPE=release /home/piton/gitdir/psi4. -- System : Linux; -- Processor type : x86_64; -- C++ compiler flags : -DRESTRICT=**restrict** -Xlinker -export-dynamic -fPIC -std=c++11 -fopenmp -O3 -DNDEBUG -Wno-unused; -- C compiler flags : -std=c99 -DRESTRICT=**restrict** -DFUNDERSCORE=1 -fPIC -fopenmp -O3",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/312:762,detect,detecting,762,https://psicode.org,https://github.com/psi4/psi4/issues/312,1,['detect'],['detecting']
Safety,"Hello, . When building psi4 from source and python development packages are not installed compilation fails (Linux Fedora). Once I installed python-dev all complete successfully.; The complaint from source files was along the lines. #include<Pyhon.h> not found and then aborts during compilation,. Ideally (IMO) cmake should check during the configuration phase if all relevant and required package are installed and abort if not. Perhaps there are more dependencies, but I may already have had them already installed. . I no longer have the build machine to replicate all the steps, but I suspect amending the root cmake adding find_package with python-dev as REQUIRED (or perhaps via pkg_config) ; and abort immediately during the cmake configuration phase if not found, not halfway through the compilation when running make. Perhaps this will also help. https://cmake.org/cmake/help/latest/module/FindPython.html. Cheers.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2060:270,abort,aborts,270,https://psicode.org,https://github.com/psi4/psi4/issues/2060,3,['abort'],"['abort', 'aborts']"
Safety,"Hello,. We have developed software around psi4 to perform potential energy scans. We submit psi4 jobs to our cluster. Our cluster architecture is allocated where each node has 64 cores with each core having 1 thread enabled. My psi4 is installed pythonically. . When I submit jobs I request how many predicted cores I need:. ```bash; -pe smp 64; ```. Initially, when I submitted the jobs, I would pass this flag into `psi4.set_num_threads` but since each core has 1 thread it only used 1 the whole scan. Which would not work for our purpose, it's too slow. . When reading the documentation I can set the OMP and MKL flags prior to running the script. ```bash; export MKL_NUM_THREADS=48; export OMP_NUM_THREADS=48; ```. I saw that psi4 started spreading the loads across the cores but it looks like there are spikes where it clocks over the 48 requested cores that I thought is what tell psi4 what is available to it. . We record our results on ganglia on the performance and here are the screenshots down below:. ![n131](https://user-images.githubusercontent.com/11812946/195706024-72bf740f-be03-4348-8a08-8f7e5d90178c.png). So my question is how do I control pythonically psi4, it's allocation to cores, and set the limit where it doesn't spike a node. If that makes sense?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2747:300,predict,predicted,300,https://psicode.org,https://github.com/psi4/psi4/issues/2747,1,['predict'],['predicted']
Safety,"Hello. I was trying to build Psi4 onto a cluster and I encountered this error:. ```; $psisource/src/lib/libmints/oeprop.h(116): error: data member initializer is not allowed; int max_noon_ = 3;. compilation aborted for /work/kimt33/sources/psi4/src/lib/libmints/local.cc (code 2); make[2]: *** [src/lib/libmints/CMakeFiles/mints.dir/local.cc.o] Error 2; make[1]: *** [src/lib/libmints/CMakeFiles/mints.dir/all] Error 2; make: *** [all] Error 2; ```. I was told by my Linux guru to try different compilers and libraries in case that the code is incompatible with my system. I was building using Intel compilers 12.1.3, mkl 10.3.9, openmpi 1.6.2, cmake 3.3.2, python 2.7.8, and boost 1.57.0. I'm not too sure what the error means, but maybe this is a bug. Let me know if you'd like more information. Thanks,; David",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/188:207,abort,aborted,207,https://psicode.org,https://github.com/psi4/psi4/issues/188,1,['abort'],['aborted']
Safety,"Hi all,. I am trying Psi4 4.0.0-beta4 today, but encountered a problem when parsing input and fetching corresponding basis set info. Here is a sample input file,; # =======================; # ! sample input. memory 500 mb. molecule test {; Li 0.000 0.000 0.000; }. set reference uhf; set globals = {; scf_type direct; basis 6-31G; e_convergence 10; }. this_energy = energy('scf'); # =======================. running with Psi 4.0.0-beta4 on Linux, compiled with intel composer xe 2013 (x86-64). The error message is: ; # =======================. Traceback (most recent call last):; File ""<string>"", line 36, in <module>; File ""/home/ren/soft/Psi4/share/psi/python/driver.py"", line 526, in energy; procedures['energy'][lowername](lowername, **kwargs); File ""/home/ren/soft/Psi4/share/psi/python/proc.py"", line 489, in run_scf; scf_helper(name, **kwargs); File ""/home/ren/soft/Psi4/share/psi/python/proc.py"", line 707, in scf_helper; e_scf = PsiMod.scf(precallback, postcallback); RuntimeError: sanity check failed! Gaussian94BasisSetParser::parser: Unable to find the basis set for LI; file: /home/ren/soft/psi4.0b4/src/lib/libmints/basisset_parser.cc; line: 339; # =======================. Is it a but or am I wrong anywhere?; I appreciate any help and suggestions,; Hao",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/7:992,sanity check,sanity check,992,https://psicode.org,https://github.com/psi4/psi4/issues/7,1,['sanity check'],['sanity check']
Safety,"Hi all,. I've tried to build psi4-0.5 with the intel compiler but it fails. Config:. ```; CXX=icpc CC=icc cmake .. -DENABLE_PLUGINS=ON -DENABLE_CHEMPS2=ON; -- The CXX compiler identification is Intel 16.0.0.20150815; -- The C compiler identification is Intel 16.0.0.20150815; -- Check for working CXX compiler: /opt/intel/compilers_and_libraries_2016.0.109/linux/bin/intel64/icpc; -- Check for working CXX compiler: /opt/intel/compilers_and_libraries_2016.0.109/linux/bin/intel64/icpc -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working C compiler: /opt/intel/compilers_and_libraries_2016.0.109/linux/bin/intel64/icc; -- Check for working C compiler: /opt/intel/compilers_and_libraries_2016.0.109/linux/bin/intel64/icc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Performing Test has_xHost; -- Performing Test has_xHost - Success; -- Try OpenMP C flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -qopenmp ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- BLAS will be searched for based on MKLROOT=/opt/intel/compilers_and_libraries_2016.0.109/linux/mkl; -- Found BLAS: MKL (-Wl,--start-group;/opt/intel/compilers_an",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/262:498,Detect,Detecting,498,https://psicode.org,https://github.com/psi4/psi4/issues/262,2,['Detect'],['Detecting']
Safety,"Hi all,. Running the following per the docs works as expected:; ```; >>> conda create -n p4env psi4 -c psi4; >>> conda activate p4env; >>> psi4 --version; 1.6.1; ```. And I'm able to use psi4 in PsiAPI mode as expected (can run the h2o geometry opt and freq calcs) after entering a python shell. However, when I try to use Psi4 in Psithon mode like so, I obtain an error:. ```; >>> psi4 -i input.dat -o output.dat; A NumPy version >=1.16.5 and <1.23.0 is required for this version of SciPy (detected version 1.23.1; ```. Is this a compile issue in the Psi4 executable on conda?. In case it's helpful, I'm using a Mac (v.11.3.1) and running conda (4.12.0) with python 3.9.13. The input file I was trying to use contains:. ```; memory 600 mb. molecule h2o {; O; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; energy('scf'); ```. The tests module ran 92 / 4121 tests, and two failed (test_gdma and test_psi4_cc), but these seem unrelated to the current issue.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2661:491,detect,detected,491,https://psicode.org,https://github.com/psi4/psi4/issues/2661,1,['detect'],['detected']
Safety,"Hi,. I'm using DiskJK in a plugin: https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrgci.cc#L292 . Does it reuse the existing disk AO integrals or does it recompute them? In case of the latter: How do I avoid this? Is there a way to fetch the JK from the wavefunction object or the environment?. Thank you for your time and answer!; Best,; Sebastian",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/65:228,avoid,avoid,228,https://psicode.org,https://github.com/psi4/psi4/issues/65,1,['avoid'],['avoid']
Safety,"Hi,. we were recently reviving a PSI4 plugin that was used with an older version of PSI4. Now, we wanted to adapt it to the current development version and realized that the AOIntegralsIterator is hidden (?) in the library. Our fix was to add PSI_API to the class definition in `src/psi4/libmints/integral.h` . . However, for us, it would be easier if it would be accessible by default (mainly to use the conda install and avoid compilation every time). Is there a specific reason, why that class is excluded or hidden in the library? If no, we would be very grateful, if a developer would add it to the header file. . Thank you!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2239:423,avoid,avoid,423,https://psicode.org,https://github.com/psi4/psi4/issues/2239,1,['avoid'],['avoid']
Safety,"Hi,; could you take a look at the attached runs. The tar.gz file includes three geometry optmmization jobs of the same molecule from three different starting conformations. They all fail on our cluster due to memory issues. The cluster is using cgroups. I am asking slurm for 10gb and specifying ```memory 8.0 Gb```. Two of the jobs are have the following error message (rec19_4405620.log, rec284_4405895.log):; ```slurmstepd: error: Detected 1 oom-kill event(s) in step 4405620.batch cgroup. Some of your processes may have been killed by the cgroup out-of-memory handler. ```. while the third has this error (rec24_4405625.log):; ```Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1550197239473/work/psi4/src/psi4/libpsio/toclen.cc on line: 113; The most recent 5 function calls were:. psi::PSIO::wt_toclen(unsigned long, unsigned long); psi::PSIO::tocwrite(unsigned long); ```. - One job (rec284_pid139597.out) was killed before the first scf even started.; - the other two were killed during the first gradient evaluation (rec19_pid139597.out, rec24_pid139597.out) . These are just three jobs out of 500 similar ones that failed. I picked them to show a couple of divers failures. The input files are included as well (*.dat).; I tried the same thing with B3LYP and it worked.; Psi4 used: ```Psi4 1.3rc2```. Any ideas?; Thanks,; Alberto; [psi4.wb97.tar.gz](https://github.com/psi4/psi4/files/3040711/psi4.wb97.tar.gz)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1590:434,Detect,Detected,434,https://psicode.org,https://github.com/psi4/psi4/issues/1590,1,['Detect'],['Detected']
Safety,"I am running the following input on Ubuntu : ; ---------------; memory 12 Gb. molecule ab { ; 0 1; Cu 0.00000 0.00000 0.00000; Cu 2.35000 0.00000 0.00000; units ang; }. set basis aug-cc-pvtz ; set scf_type df; set reference rhf; set e_convergence 1e-06; set d_convergence 1e-06; set ints_tolerance 1e-08. set frozen_uocc [5,5,5,5,5,5,5,5]; set freeze_core true; set roots_per_irrep [2,2,2,2,2,2,2,2]; set maxiter 100000; ccsd_energy, wfn = properties('eom-ccsd', properties=['oscillator_strength'],return_wfn=True). ------------------------. and I get the following error : . 	Projections for excited state, irrep Ag, root 1:; 	<0|Le^(-T)|0><0|Re^T|0> = 0.0000000000; 	<0|Le^(-T)|S><S|Re^T|0> = 0.9021404202; 	<0|Le^(-T)|D><D|Re^T|0> = 0.0978595968; 	Sum of above = 1.0000000170; 	Approx. excitation level = 1.0978596138; PSIO_ERROR: Attempt to write into next entry: 121, LIJAB; PSIO_ERROR: unit = 121, errval = 18; PSIO_ERROR: 18 (Incorrect block end address); terminate called after throwing an instance of 'psi::PsiException'; what(): ; Fatal Error: PSIO Error; Error occurred in file: /home/luca/Desktop/psi4_max/psi4-master/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::string, char const*, int); psi::psio_error(unsigned long, unsigned long); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::psio_write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::DPD::file4_mat_irrep_wrt(psi::dpdfile4*, int). ./bash.sh: line 7: 10101 Aborted (core dumped) /home/luca/Desktop/psi4_max/psi4-master/bi/stage/usr/local/psi4/bin/psi4 cu2.dat cu2.out; ------------------------------------------------------------------------------------------------------------------. I have no idea what's going wrong. LUCA",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/786:1616,Abort,Aborted,1616,https://psicode.org,https://github.com/psi4/psi4/issues/786,1,['Abort'],['Aborted']
Safety,"I am trying to build a psi4 plugin but I am getting pybind11 related error in cmake.; using`psi4 --plugin-name myplugin --plugin-template aointegrals`, followed by `cmake .`, I get the following error:; ```; -- The CXX compiler identification is GNU 5.2.0; -- Check for working CXX compiler: /opt/apps/gcc/5.2.0/bin/g++; -- Check for working CXX compiler: /opt/apps/gcc/5.2.0/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Psi4 script: /home/akumar1/newriver/installed/psi4/latest_psi4/bin/psi4; -- Psi4 headers: /home/akumar1/newriver/installed/psi4/latest_psi4/include; -- Psi4 library: /home/akumar1/newriver/installed/psi4/latest_psi4/lib//psi4/core.so; -- Psi4 components: ; -- Python executable: /home/akumar1/newriver/installed/python/bin/python3. CMake Error at ; /home/akumar1/newriver/installed/psi4/latest_psi4/share/cmake/psi4/psi4Config.cmake:142 ; (find_package):; Could not find a package configuration file provided by ""pybind11"" with any; of the following names:. pybind11Config.cmake; pybind11-config.cmake; ; Add the installation prefix of ""pybind11"" to CMAKE_PREFIX_PATH or set; ""pybind11_DIR"" to a directory containing one of the above files. If; ""pybind11"" provides a separate development package or SDK, be sure it has; been installed.; Call Stack (most recent call first):; CMakeLists.txt:35 (find_package); ```; I am up to date with the psi4's source code. Do I need to set a `CMAKE_PREFIX_PATH` specfically for locating pybind11 ? Please let me know if you need any more information.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/775:397,Detect,Detecting,397,https://psicode.org,https://github.com/psi4/psi4/issues/775,4,['Detect'],['Detecting']
Safety,"I am trying to install Psi4 with Conda on a Linux machine with Python 3.11. However, it does not seem like Python 3.11 is supported at this time despite the README badge showing 3.11. Are there plans to add a Python 3.11 Conda build in the near future?; ; ```; conda create --name psi4 python=3.11; conda activate psi4; conda install psi4 -c psi4; ```. ```; Collecting package metadata (current_repodata.json): done; Solving environment: failed with initial frozen solve. Retrying with flexible solve.; Solving environment: failed with repodata from current_repodata.json, will retry with next repodata source.; Collecting package metadata (repodata.json): done; Solving environment: failed with initial frozen solve. Retrying with flexible solve.; Solving environment: -; Found conflicts! Looking for incompatible packages.; This can take several minutes. Press CTRL-C to abort.; failed. UnsatisfiableError: The following specifications were found; to be incompatible with the existing python installation in your environment:. Specifications:. - psi4 -> python[version='2.7.*|3.5.*|3.6.*|>=2.7,<2.8.0a0|>=3.10,<3.11.0a0|>=3.8,<3.9.0a0|>=3.9,<3.10.0a0|>=3.7,<3.8.0a0|>=3.6,<3.7.0a0|>=3.5,<3.6.0a0']. Your python: python=3.11. If python is on the left-most side of the chain, that's the version you've asked for.; When python appears to the right, that indicates that the thing on the left is somehow; not available for the python version you are constrained to. Note that conda will not; change your python version to a different minor version unless you explicitly specify; that. The following specifications were found to be incompatible with your system:. - feature:/linux-64::__glibc==2.35=0; - psi4 -> libgcc-ng[version='>=7.5.0'] -> __glibc[version='>=2.17']; - python=3.11 -> libgcc-ng[version='>=11.2.0'] -> __glibc[version='>=2.17']. Your installed version is: 2.35; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3031:873,abort,abort,873,https://psicode.org,https://github.com/psi4/psi4/issues/3031,1,['abort'],['abort']
Safety,"I believe we have had this problem in the past. Take a symmetric molecule who's optimal wavefunction should contain less symmetry:. ```python; import numpy as np. mol = psi4.geometry(""""""; 0 1; C 0.0 0.0 0.673055; C 0.0 0.0 -0.673055; H 0.0 0.934981 1.246807; H 0.0 -0.934981 1.246807; H 0.934981 0.0 -1.246807; H -0.934981 0.0 -1.246807; symmetry c1; """"""). # Set reference and guess.; psi4.set_options({; ""reference"": ""rhf"",; ""guess"": ""sad"",; ""basis"": ""DZP"",; ""soscf"": ""true"",; # ""sad_frac_occ"": ""true""; }). e_scf = energy('scf'); if np.allclose(e_scf, -77.87781349420317):; print(""Found non-symmetric minima! Success!""); elif np.allclose(e_scf, -77.84789770426966):; print(""Found symmetric minima... failure.""); else:; print(""You found something... wrong.""); ```. The `-77.847` result should be found when the molecule is constrained to symmetry. However, without that constraint there is a lower SCF result to be found. The kicker is even without the symmetry restraint (computation in `c1`) we fairly consistently end up with a symmetric wavefunction. Any ideas on how to avoid this?. Note 1: The stability analysis is showing that it is indeed finding the wrong answer and there are negative eigenvalues present. We should be able to follow these once the py-scf iterations are finished. Note 2: This is not deterministic for which result we land in (whoo!). Note 3: Moving an atom out of place by 1e-14 or so seems to ensure we find the correct energy. Really any noise lets the diagonalizer break out of its self-imposed symmetry constraints.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/875:1075,avoid,avoid,1075,https://psicode.org,https://github.com/psi4/psi4/issues/875,1,['avoid'],['avoid']
Safety,"I had a crash for a geometry optimization, this is the stack track:. Reading symbols from /app/miniconda/bin/psi4...(no debugging symbols found)...done.; [New LWP 7474]; [Thread debugging using libthread_db enabled]; Using host libthread_db library ""/lib64/libthread_db.so.1"".; Core was generated by `psi4'.; Program terminated with signal SIGABRT, Aborted.; #0 0x00006a91c31f18d7 in __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:55. 55 return INLINE_SYSCALL (tgkill, 3, pid, selftid, sig);; (gdb) where; #0 0x00006a91c31f18d7 in __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:55; #1 0x00006a91c31f353a in __GI_abort () at abort.c:89; #2 0x00000000014c2e4f in opt::optking(psi::Options&) (); #3 0x0000000000a4c2fc in py_psi_optking() (); #4 0x0000000000a8993e in boost::python::objects::caller_py_function_impl<boost::python::detail::caller<int (*)(), boost::python::default_call_policies, boost::mpl::vector1<int> > >::operator()(_object_, _object_) (); #5 0x000000000554b96e in boost::python::objects::function::call(_object_, _object_) const (); #6 0x000000000554b6a5 in boost::detail::function::void_function_ref_invoker0<boost::python::objects::(anonymous namespace)::bind_return, void>::invoke(boost::detail::function::function_buffer&) (); #7 0x000000000555699d in boost::python::detail::exception_handler::operator()(boost::function0<void> const&) const (); #8 0x0000000000a6d6f5 in boost::detail::function::function_obj_invoker2<boost::_bi::bind_t<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(psi::PsiException const&)>, boost::_bi::list3boost::arg<1, boost::arg<2>, boost::_bi::value<void (*)(psi::PsiException const&)> > >, bool, boost::python::detail::exception_handler const&, boost::function0<void> const&>::invoke(boost::detail::function::function_buffer&, boost::python::detail::exception_handler const&, boost::function0<void> const&) (); #9 0x0000000005556d54 in boost::python::handle_exception_impl(boost::fun",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/153:349,Abort,Aborted,349,https://psicode.org,https://github.com/psi4/psi4/issues/153,2,"['Abort', 'abort']","['Aborted', 'abort']"
Safety,"I have installed the latest Psi4 using anaconda:; `conda create -n p4env psi4 python=3.6 -c psi4/label/dev -c psi4`; Then; `source activate p4env`; But even a simple calculation like this one:; ```; molecule PCl5 {; 0 1; P -0.001250 0.001863 -0.000253; Cl -0.017313 2.126472 -0.026384; Cl -0.005958 -2.126884 0.029666; Cl 0.991147 -0.031176 -1.764481; Cl -2.029231 -0.007514 0.039738; Cl 1.062458 0.037458 1.721684; }; set basis def2-tzvp. optimize(""b3lyp""); ```; Is crashing with this error message:; ```; 			-----------------------------------------; 			 OPTKING 2.0: for geometry optimizations ; 			 - R.A. King, Bethel University ; 			-----------------------------------------. 	Internal coordinates to be generated automatically.; 	Detected frag 1 with atoms: 1 2 3 4 5 6; 	---Fragment 1 Bond Connectivity---; 	 1 : 2 3 4 5 6; 	 2 : 1; 	 3 : 1; 	 4 : 1; 	 5 : 1; 	 6 : 1. 	---Fragment 1 Geometry and Gradient---; 	 P -0.0023608120 0.0035185828 -0.0004777490; 	 CL -0.0327154829 4.0184477322 -0.0498581826; 	 CL -0.0112576427 -4.0192302534 0.0560609672; 	 CL 1.8729977331 -0.0589160789 -3.3343855050; 	 CL -3.8346895047 -0.0142013792 0.0750942888; 	 CL 2.0077559933 0.0707833845 3.2535115991; 	 0.0005829612 0.0007979689 -0.0000766467; 	 -0.0000438567 -0.0088149216 0.0011960655; 	 -0.0004768815 0.0083220457 -0.0009627395; 	 -0.0039049377 -0.0010136595 0.0075335979; 	 0.0080187099 -0.0002965760 -0.0001586710; 	 -0.0042975334 0.0010502310 -0.0074582594. 	Previous optimization step data not found. Starting new optimization. 	---Fragment 1 Intrafragment Coordinates---; 	 - Coordinate - - BOHR/RAD - - ANG/DEG -; 	 R(1,2) = 4.015348	 2.124830; 	 R(1,3) = 4.023156	 2.128962; 	 R(1,4) = 3.825678	 2.024461; 	 R(1,5) = 3.833115	 2.028397; 	 R(1,6) = 3.825381	 2.024305; 	 L(2,1,3) = 3.131665	 179.431194; 	 l(2,1,3) = 3.141593	 180.000000; 	 B(2,1,4) = 1.580103	 90.533252; 	 B(2,1,5) = 1.568103	 89.845687; 	 B(2,1,6) = 1.567648	 89.819597; 	 B(3,1,4) = 1.567809	 89.828837; 	 B(3,1,5) = 1.563686",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1265:737,Detect,Detected,737,https://psicode.org,https://github.com/psi4/psi4/issues/1265,1,['Detect'],['Detected']
Safety,I installed Psi4 1.4a2.dev78 on Ubuntu-20.04.1 using conda installer but it crashes when I use it with [poltype](https://pren.github.io/poltype/README_INSTALL.html) tool. Do you know how I can fix the below error?; **Error:**; ```; forrtl: error (76): Abort trap signal; Image PC Routine Line Source ; libgdma.so 00007F14B1B2C10F for__signal_handl Unknown Unknown; libpthread-2.27.s 00007F14B7334980 Unknown Unknown Unknown; libc-2.27.so 00007F14B6F6FFB7 gsignal Unknown Unknown; libc-2.27.so 00007F14B6F71921 abort Unknown Unknown; core.cpython-37m- 00007F14B40E13D7 Unknown Unknown Unknown; core.cpython-37m- 00007F14B26DC86D Unknown Unknown Unknown; core.cpython-37m- 00007F14B26F56B1 Unknown Unknown Unknown; core.cpython-37m- 00007F14B271593A Unknown Unknown Unknown; python3.7 000055CE517D7914 _PyMethodDef_RawF Unknown Unknown; python3.7 000055CE517D7A31 _PyCFunction_Fast Unknown Unknown; python3.7 000055CE51843EBD _PyEval_EvalFrame Unknown Unknown; python3.7 000055CE51786829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055CE517D7107 _PyFunction_FastC Unknown Unknown; python3.7 000055CE5183F4B6 _PyEval_EvalFrame Unknown Unknown; python3.7 000055CE51786829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055CE51787714 PyEval_EvalCodeEx Unknown Unknown; python3.7 000055CE5178773C PyEval_EvalCode Unknown Unknown; python3.7 000055CE5189EF14 Unknown Unknown Unknown; python3.7 000055CE518AA29D PyRun_StringFlags Unknown Unknown; python3.7 000055CE5184EEB4 Unknown Unknown Unknown; python3.7 000055CE517D7789 _PyMethodDef_RawF Unknown Unknown; python3.7 000055CE517D7A31 _PyCFunction_Fast Unknown Unknown; python3.7 000055CE51843795 _PyEval_EvalFrame Unknown Unknown; python3.7 000055CE51786829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055CE51787714 PyEval_EvalCodeEx Unknown Unknown; python3.7 000055CE5178773C PyEval_EvalCode Unknown Unknown; python3.7 000055CE5189EF14 Unknown Unknown Unknown; python3.7 000055CE518A9331 PyRun_FileExFlags Unknown Unknown; python3.7 000055CE518A,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2084:252,Abort,Abort,252,https://psicode.org,https://github.com/psi4/psi4/issues/2084,2,"['Abort', 'abort']","['Abort', 'abort']"
Safety,"I know how to fix this myself, but let's pretend I'm a stupid Mac user that has Xcode and, by the grace of god, managed to install gfortran without losing a limb. Don't I deserve for CMake to throw me a bone and auto-detect the fast system BLAS/LAPACK?. I am surprised that CMake doesn't do this already btw. Seems dirt-simple for them. Cheers,. Jeff. Jeffs-MacBook-Pro:build jhammond$ cmake ..; -- The C compiler identification is Clang 4.2.0; -- The CXX compiler identification is Clang 4.2.0; -- Check for working C compiler: /usr/bin/clang; -- Check for working C compiler: /usr/bin/clang -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Check for working CXX compiler: /usr/bin/clang++; -- Check for working CXX compiler: /usr/bin/clang++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- The Fortran compiler identification is GNU; -- Check for working Fortran compiler: /usr/local/bin/gfortran; -- Check for working Fortran compiler: /usr/local/bin/gfortran -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /usr/local/bin/gfortran supports Fortran 90; -- Checking whether /usr/local/bin/gfortran supports Fortran 90 -- yes; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenM",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/36:217,detect,detect,217,https://psicode.org,https://github.com/psi4/psi4/issues/36,1,['detect'],['detect']
Safety,"I recently found an issue when using DETCI to compute roots of LiCN with CIS/6-31G*, which may have uncovered some deeper problems. the main issue: the lowest-energy solution as predicted by GAMESS (and my own code, which diagonalizes the Hamiltonian by simply calling `np.linalg.eigh`) is completely skipped by Psi4, despite the following roots being the same. GAMESS predicts the following first six excited state energies (the RHF energy matching to 6 decimals):; ```; GAMESS LiCN/6-31G*; CONVERGED STATE 1 ENERGY= -99.5348374214; CONVERGED STATE 2 ENERGY= -99.5315000308; CONVERGED STATE 3 ENERGY= -99.5315000308; CONVERGED STATE 4 ENERGY= -99.5258078193; CONVERGED STATE 5 ENERGY= -99.5258078193; CONVERGED STATE 6 ENERGY= -99.5095744807; ```; while Psi4 predicts:; ```; Psi4 LiCN/6-31G* (symmetry c1, default [Davidson] solver); CI ROOT 1 TOTAL ENERGY:-99.5315015582624; CI ROOT 2 TOTAL ENERGY:-99.53150155297872; CI ROOT 3 TOTAL ENERGY:-99.52581092386518; CI ROOT 4 TOTAL ENERGY:-99.52581092379563; CI ROOT 5 TOTAL ENERGY:-99.5096013650753; CI ROOT 6 TOTAL ENERGY:-99.48378441050741; ````; this result doesn't change with or without frozen core, but the results are fine with STO-3G, as well as water with 6-31G*. the results also match GAMESS if I perturb the linear geometry of LiCN, as suggested by @psi-rking , which suggests maybe an issue with finding roots of whatever symmetry the first excited state is; however, adding more roots (or running with/without symmetry) doesn't resolve the issue. in fact, running in `c2v` produces different energies, but they don't match GAMESS or the `symmetry c1` case:; ```; Psi4 LiCN/6-31G* (symmetry c2v, default [Davidson] solver); CI ROOT 1 TOTAL ENERGY:-99.52581092382692; CI ROOT 2 TOTAL ENERGY:-99.50960136455492; CI ROOT 3 TOTAL ENERGY:-99.47046293582866; CI ROOT 4 TOTAL ENERGY:-99.43820506440449; CI ROOT 5 TOTAL ENERGY:-99.39012366739456; CI ROOT 6 TOTAL ENERGY:-99.37979350854745; ```; maybe it's a preconditioner issue? the Davidson seems",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3083:178,predict,predicted,178,https://psicode.org,https://github.com/psi4/psi4/issues/3083,3,['predict'],"['predicted', 'predicts']"
Safety,"I recently updated my copy of psi4, and I'm now having plugin issues. I added ""PSI_API"" where appropriate, and my plugins compile, but I get missing symbol errors for the JK object constructor:. Attention! This SCF may be density-fitted.; dyld: lazy symbol binding failed: Symbol not found: __ZN3psi4PKJKC1ENSt3__110shared_ptrINS_8BasisSetEEERNS_7OptionsE; Referenced from: /Users/deprince/edeprince3/deprince-group/plugins/does_jk_work/does_jk_work.so; Expected in: flat namespace. dyld: Symbol not found: __ZN3psi4PKJKC1ENSt3__110shared_ptrINS_8BasisSetEEERNS_7OptionsE; Referenced from: /Users/deprince/edeprince3/deprince-group/plugins/does_jk_work/does_jk_work.so; Expected in: flat namespace. Abort trap: 6. This error is for a clean plugin that only calls the constructor for PKJK:. extern ""C"" PSI_API; SharedWavefunction does_jk_work(SharedWavefunction ref_wfn, Options& options); {; int print = options.get_int(""PRINT"");. /* Your code goes here */. std::shared_ptr<PKJK> jk (new PKJK(ref_wfn->basisset(),options));. // Typically you would build a new wavefunction and populate it with data; return ref_wfn;; }",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/971:699,Abort,Abort,699,https://psicode.org,https://github.com/psi4/psi4/issues/971,1,['Abort'],['Abort']
Safety,"I see a lot of changes have been happening recently with the OpenMP detection (#1031) but it's currently broken for me. For the combination of gcc 7.3.0, cmake 3.11.2, and MKL 2018.3.222 (and also with a 2017 version of MKL), I get the following output from cmake:. ```; -- Found TargetOpenMP: Found TargetOpenMP: /usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so;/usr/lib/x86_64-linux-gnu/libpthread.so ; -- Could NOT find MathOpenMP (missing: MathOpenMP_MESSAGE) ; -- ; Properties for TARGET OpenMP::OpenMP_CXX:; OpenMP::OpenMP_CXX.INTERFACE_COMPILE_DEFINITIONS = <NOTFOUND>; OpenMP::OpenMP_CXX.INTERFACE_COMPILE_OPTIONS = ""$<$<COMPILE_LANGUAGE:CXX>:-fopenmp>""; OpenMP::OpenMP_CXX.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; OpenMP::OpenMP_CXX.INTERFACE_LINK_LIBRARIES = ""/usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so;/usr/lib/x86_64-linux-gnu/libpthread.so""; Properties for TARGET tgt::MathOpenMP:; tgt::MathOpenMP.INTERFACE_COMPILE_DEFINITIONS = <NOTFOUND>; tgt::MathOpenMP.INTERFACE_COMPILE_OPTIONS = <NOTFOUND>; tgt::MathOpenMP.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; tgt::MathOpenMP.INTERFACE_LINK_LIBRARIES = ""MathOpenMP_LIBRARIES-NOTFOUND;OpenMP::OpenMP_CXX""; Properties for TARGET blas:; blas.INTERFACE_COMPILE_DEFINITIONS = <NOTFOUND>; blas.INTERFACE_COMPILE_OPTIONS = <NOTFOUND>; blas.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; blas.INTERFACE_LINK_LIBRARIES = ""/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so""; Properties for TARGET lapk:; lapk.INTERFACE_COMPILE_DEFINITIONS = <NOTFOUND>; lapk.INTERFACE_COMPILE_OPTIONS = <NOTFOUND>; lapk.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; lapk.INTERFACE_LINK_LIBRARIES = ""/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so""; Properties for TARGET lapack:; lapack.INTERFACE_COMPILE_DEFINITIONS = ""USING_LAPACK_MKL""; lapack.INTERFACE_COMPILE_OPTIONS = <NOTFOUND>; lapack.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; lapack.INTERFACE_LINK_LIBRARIES = ""lapk;blas;tgt::MathOpenMP"". -- Found LAPACK MKL: /opt/intel/compilers_and_",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041:68,detect,detection,68,https://psicode.org,https://github.com/psi4/psi4/issues/1041,1,['detect'],['detection']
Safety,"I see memory usage significantly above `psi4.set_memory()` limit. I do see the note in the documentation that memory usage might be _slightly_ higher, but if I even request within 20% of a node's total memory (requesting 300 out of ~376 GB), I risk crashing the entire node. Even now, running with `psi4.set_memory(""200 GB"")`, I see persistent VIRT usage of 259 GB and RES 256 GB. I know that determining the _actual_ amount of [memory consumed by a process is tricky](https://stackoverflow.com/questions/131303/how-to-measure-actual-memory-usage-of-an-application-or-process), but this is important to me to prevent the scheduler from killing my jobs. After some troubleshooting, I am requesting 300 GB from the scheduler, but 200 GB from psi4, and end up with ~260 GB used. Is this expected? . Relatedly, but separate, is there a way to estimate what the scratch file size may be? I was planning to use node-local storage until I found out my scratch files are 1.5+ TB. Any rule of thumb way of estimating this ahead of time (number of atoms × level of theory × some magic thing?)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1985:244,risk,risk,244,https://psicode.org,https://github.com/psi4/psi4/issues/1985,1,['risk'],['risk']
Safety,"I thought it might be useful to share the failed tests of psi4 (using commit e4070d0024742579a445) on our systems. We have 4 failed tests:. ```; The following tests FAILED:; 223 - opt10 (Timeout); 240 - pubchem1 (Failed); 241 - pubchem2 (Failed); 255 - pywrap-opt-sowreap (Failed); 264 - sapt4 (Failed); ```. The `pubchem` is probably just the firewall blocking stuff. Several times I've seen things like:. ```; 253: Unable to read the PSI4 Python folder - check the PSIDATADIR environmental variable; 253: Current value of PSIDATADIR is /user/scratch/gent/vsc403/vsc40307/EB/swalot/software/PSI/4.0b6-20160201-intel-2016a-mt-Python-2.7.11/share/psi4; ```. Where the value of `PSIDATADIR` is the install path instead of the build path. I think `pywrap-opt-sowreap` fails because of this. For the `sapt4` test:. ```; 264/305 Testing: sapt4; 264/305 Test: sapt4; Command: ""/apps/gent/CO7/haswell-ib/software/Python/2.7.11-intel-2016a/bin/python"" ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/psi4public-e4070d0024742579a445e084da9dde078310094d/tests/runtest.py"" ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/psi4public-e4070d0024742579a445e084da9dde078310094d/tests/sapt4/input.dat"" ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/obj/testresults.log"" ""false"" ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/psi4public-e4070d0024742579a445e084da9dde078310094d"" ""false"" ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/obj/tests/sapt4/output.dat"" ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/obj/bin/psi4""; Directory: /dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/obj/tests/sapt4; ""sapt4"" start time: Feb 15 13:13 CET; Output:; ----------------------------------------------------------; Traceback (most recent call last):; File ""<string>"", line 65, in <module>; File ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/psi4public-e4070d0024742579a445e084da9dde078310094d/lib/pytho",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/253:187,Timeout,Timeout,187,https://psicode.org,https://github.com/psi4/psi4/issues/253,1,['Timeout'],['Timeout']
Safety,"I use psi4 v1.7 to perform gradient calculations under the WB97M-D3BJ/DEF2-TZVPPD level. Most structures work fine, but I get the following error in some structures without a clear error message. ```; ==> Integral Setup <==. PSIO_ERROR: unit = 97, errval = 12; forrtl: error (76): Abort trap signal; Image PC Routine Line Source; libgdma.so 00007F6F7C68B10F for__signal_handl Unknown Unknown; libpthread-2.28.s 00007F6F9C906B20 Unknown Unknown Unknown; libc-2.28.so 00007F6F9BDDC37F gsignal Unknown Unknown; libc-2.28.so 00007F6F9BDC6DB5 abort Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6B535A Unknown Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6B53C5 Unknown Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6B5658 Unknown Unknown Unknown; core.cpython-310- 00007F6F88B5A129 Unknown Unknown Unknown; core.cpython-310- 00007F6F88B69438 _ZN3psi4PSIO2rwEm Unknown Unknown; core.cpython-310- 00007F6F88B6B963 _ZN3psi4PSIO5writ Unknown Unknown; core.cpython-310- 00007F6F88B566E9 Unknown Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6DFBF4 Unknown Unknown Unknown; libpthread-2.28.s 00007F6F9C8FC14A Unknown Unknown Unknown; libc-2.28.so 00007F6F9BEA1DC3 clone Unknown Unknown; /var/spool/slurm/slurmd/job83930/slurm_script: line 27: 2245656 Aborted (core dumped); ```. I used conda to install psi4 in a new environment.; ```; psi4 1.7+6ce35a5 py310h769327c_1 psi4; ```. Below is the full log, which includes the geometry:. <details>. ```. Memory set to 7.451 GiB by Python driver.; Threads set to 4 by Python driver. Scratch directory: /scratch/njzjz/83930/; gradient() will perform analytic gradient computation. *** tstart() called on aerosol-020; *** at Fri May 26 20:10:38 2023. => Loading Basis Set <=. Name: DEF2-TZVPPD; Role: ORBITAL; Keyword: BASIS; atoms 1-33 entry C line 144 file /aerosol/users/njzjz/anaconda3/envs/p4env/share/psi4/basis/def2-tzvppd.gbs ; atoms 34-89 entry H line 14 file /aerosol/users/njzjz/anaconda3/envs/p4env/share/psi4/basis/def2-tzvppd.gbs ; atoms 90-101 entry N line ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2970:281,Abort,Abort,281,https://psicode.org,https://github.com/psi4/psi4/issues/2970,2,"['Abort', 'abort']","['Abort', 'abort']"
Safety,"I was trying to run a Gaussian-2 energy calculation for hydrogen disulfide, which appears in the original G2 test set: http://scitation.aip.org/content/aip/journal/jcp/94/11/10.1063/1.460205. The job terminated after calculating the MP4(SDTQ) total energy, with message:. RuntimeError: sanity check failed! Gaussian94BasisSetParser::parser: Unable to find the basis set for S in /opt/science/psi/psi4/share/psi/basis/6-311g_2df_p_.gbs. When I examine the 6-311g_2df_p_.gbs file, I see that it only has entries for H, He, Li, Be, B, C, N, O, F, Ne, K, Ca. According to the comment at the top of the file it's supposed to have been merged from 6-311G*\* and 6-311G on the EMSL Basis Set Exchange. I double checked on the BSE and these basis sets also have entries for Na, Mg, Al, Si, P, S, Cl, Ar, Ga, Ge, As, Se, Br, Kr, I, as expected.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/58:286,sanity check,sanity check,286,https://psicode.org,https://github.com/psi4/psi4/issues/58,1,['sanity check'],['sanity check']
Safety,"I wondered how the pre-#1289 driver handled core cleaning when `optimize` called for a `hessian`. I discovered the handling was bugged. The following input file crashes when I try to run it on my control version of Psi, 287272b. The initial Hessian is fine because `GUESS` hasn't yet been set to `READ`. (I assume that happens somewhere in OPTKING.) After the first step, `GUESS` is set to read, causing the seventh displacement for the hessian to crash with `ValidationError: Cannot compute projection of different symmetries.` I had been under the impression that https://github.com/psi4/psi4/blob/master/psi4/driver/driver.py#L1454-L1455 existed precisely to avoid such things, so maybe those lines do something else?. ```; molecule h2o { ; O ; H 1 1.0 ; H 1 1.0 2 104.5 ; }. set {; basis sto-3g; e_convergence 10; d_convergence 10; points 3; geom_maxiter 7; full_hess_every 1 ; }. optimize('scf', dertype = 0); ```. EDIT: The conditions are more general than originally reported. Any findif hessian with `GUESS` set to `READ` will trigger the bug. The hessians computed by `full_hess_every` are just one particular instance.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1296:662,avoid,avoid,662,https://psicode.org,https://github.com/psi4/psi4/issues/1296,1,['avoid'],['avoid']
Safety,"I'd like to run some calculations with modified nuclear attraction potentials that are expressible as user-defined ECPs, but I don't want the potential to replace any core electrons. I ran a test calculation for an argon atom using the aug-cc-pVDZ basis set and a custom ECP defined in a .gbs file as follows,. ```; AR 0 ; AR-ECP 0 0 ; spherical potential ; 1 ; 1 3.0 18.0 ; ```. Then I print out the ECP integrals produced by `mints.ao_ecp()` and I get a matrix with only zeros. However, when I change the ECP specification to replace 2 core electrons,. ```; AR 0 ; AR-ECP 0 2 ; spherical potential; 1; 1 3.0 18.0; ```. I now get (presumably) the actual ECP integrals, not a zero matrix. Interestingly, these ECP integrals are exactly the same for [He] core (2 electrons) and [Ne] core (10 electrons), but they are zeroed out for no core. Is there an unnecessary sanity check somewhere that zeroes out ECP integrals (or skips their calculation) if the number of electrons replaced by ECP is zero? If so, may I request dropping this check? The capability to compute zero-electron ECPs might be useful for dispersion-corrected atom-centered potentials (DCACPs) of Roethlisberger, DiLabio, ... and for computing nuclear integrals with a regularized Coulomb potential. P.S. I have never tested this thing prior to the move to LibECPInt.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2651:864,sanity check,sanity check,864,https://psicode.org,https://github.com/psi4/psi4/issues/2651,1,['sanity check'],['sanity check']
Safety,"I'm posting this for discussion before I start coding anything. I was hoping to have some more details on prefactors, but I've both fallen ill and been given a shift in priorities, so I'm posting what I have in the interests of not wasting more time. I'm hoping to have more to say on the prefactor problem when I've recovered. @kcpearce's plans for MP2 hessians are related, but not the part of the project that I'll be focusing on. ## Motivation; Several different groups of Psi developers are dissatisfied with Psi's current technology for correlated derivatives.; * At Emory, @fevangelista has recently implemented gradients for DSRG-PT2 via a standalone code interfaced to Psi. Getting those working required consulting three(!) other experienced Psi developers and borrowing code from a fourth because the assumptions of the `libmints/libtrans` machinery are undocumented and confusing.; * At University of Georgia, the DCT code currently has to go through several contortions to be compatible with the gradient code. It has to [rewrite part of libtrans for RHF gradients](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dct/dct_sort_mo_tpdm.cc) because the developer could not figure out what to send libtrans otherwise. It has to [convert LibDPD buffers into LibIWL](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dct/dct_gradient_UHF.cc#L4815) buffers so `libtrans` can [convert those back to LibDPD buffers](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libtrans/integraltransform_sort_mo_tpdm.cc), but sorted differently. It also has to [re-index](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dct/dct_gradient_UHF.cc#L3839) its own 1PDM and energy-weighted density matrix, and merge [density matrix blocks into a single density matrix](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dct/dct_gradient_UHF.cc#L3789). These tasks shouldn't be necessary.; * @edeprince3 has also [rewritten parts of libtrans](https://github.com/edeprince3/v2rdm_casscf/",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1736:317,recover,recovered,317,https://psicode.org,https://github.com/psi4/psi4/issues/1736,1,['recover'],['recovered']
Safety,I'm trying 1.0rc on a system with 128 GB of RAM. I've put `memory 90 gb` in the input file (meaning 70% of the memory) and started a calculation. What I see is that the memory usage indeed doesn't go above 70% but lots of swap is being used. This is not what I want: how do I avoid PSI of using more memory and starting swapping?,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/424:276,avoid,avoid,276,https://psicode.org,https://github.com/psi4/psi4/issues/424,1,['avoid'],['avoid']
Safety,"If I build psi4 and then run make distclean, I do not get the initial tarball content again, as the script doc/sphinxman/document_tests.pl overwrites samples/SUMMARY and some samples with new content. This makes Debian source package building fail after a build:. dpkg-source: info: local changes detected, the modified files are:; psi4.0b5/samples/SUMMARY; psi4.0b5/samples/dcft1/input.dat; psi4.0b5/samples/dcft4/input.dat; psi4.0b5/samples/dcft5/input.dat; psi4.0b5/samples/dcft6/input.dat; psi4.0b5/samples/pywrap-alias/input.dat. I think it would be best if (i) the samples are written to the builddir, or (ii) the samples are not shipped in the tarball in the first place, assuming all of samples/ is being autogenerated during doc-creation/installation anyway.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/14:297,detect,detected,297,https://psicode.org,https://github.com/psi4/psi4/issues/14,1,['detect'],['detected']
Safety,"If a user sets the symmetry explicitly and then attempts to perform a finite difference calculation, Psi raises `Fatal Error: User specified point group is not a subgroup of the highest detected point group.` This problem does not occur if the user does not explicitly provide the symmetry. The problem also occurs if `reset_point_group` is used. Example input below. I don't know enough about Psi's symmetry and molecule tech to tell if this is a problem that needs to be fixed findif side or molecule side. If this needs to be fixed findif side, I'll take it for obvious reasons. If not, then if this isn't fixed by the time findif is done, I'll take this anyways. I've had a vendetta against this bug since November. ```; molecule h2o {; symmetry c2v; O; H 1 0.9894093; H 1 0.9894093 2 100.02688; }. set {; basis sto-3g; d_convergence 11; scf_type pk; }. frequencies('scf', dertype=1, return_wfn=True); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1052:186,detect,detected,186,https://psicode.org,https://github.com/psi4/psi4/issues/1052,1,['detect'],['detected']
Safety,"If a user wants to make a potential energy curve or surface, it is very easy to generate nonsense when using cartesian coordinates. Using nocom and no_reorient fixes this, so maybe the driver should be setting these options if it detects such a case. ``` python; molecule beh2 {; Be 0.0 0.0 z; H 0.0 1.0 0.0; H 0.0 -1.0 0.0; }; molecule beh2_nocom {; Be 0.0 0.0 z; H 0.0 1.0 0.0; H 0.0 -1.0 0.0; nocom; no_reorient; }; activate(beh2); set basis sto-3g; set guess sad; for i in range (1,41):; z = i*0.1; beh2.z = z; e = energy('scf'); print z,e; set guess read; print ''. activate(beh2_nocom); set basis sto-3g; set guess sad; for i in range (1,41):; z = i*0.1; beh2_nocom.z = z; e = energy('scf'); print z,e; set guess read; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/59:230,detect,detects,230,https://psicode.org,https://github.com/psi4/psi4/issues/59,1,['detect'],['detects']
Safety,Implemented skip_timer functions to help avoid timer clutter.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/762:41,avoid,avoid,41,https://psicode.org,https://github.com/psi4/psi4/pull/762,1,['avoid'],['avoid']
Safety,"In general the Psi4 SCF solver is rather straightforward by just running through DIIS iterations until convergence is reached. Fortunately the `SCF` iterations have been moving Python side and doing a smart SCF solver should be much easier. A list of possible tricks:; - Automatic root following: If the energy has converged, but the Fock gradient remains large it would be good to detect this and take a Davidson step to get out of an odd minima.; - Automatic SOSCF detection: If very tight convergences are required (1e-10 or less) SOSCF steps after (1.e-5 density/energy) would be preferred.; - Pure first order stepping: In the case of guess`read` the density is diagonalized leading to steps that could take the result away from the minima. A better approach would be to take first order steps (MO Fock matrix over the energy denominators) so that radical changes in the density do not occur.; - Damp post-guess fluctuations: often after a SAD or GWH guess the energy and density will jump considerably before coming back to something near the initial guess. It could be good to take combinations of the next iteration and guess density to prevent such jumps. In the case of SAD this will mean more computations will be non-variational, but the tradeoff could be worth it.; - SCF shake: As discussed in #875 a small amount of noise added to the orbitals/density at the start of a SCF computation could be useful in finding different minima.; - Damping of wild oscillations: If large oscillations occur in the density this could be detected and damping could be turned on for a short time.; - Many more ideas are possible and a discussion of these could be very useful. Please note that not all tricks need to be implemented at once. I would very much encourage small steps at a time.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/888:382,detect,detect,382,https://psicode.org,https://github.com/psi4/psi4/issues/888,3,['detect'],"['detect', 'detected', 'detection']"
Safety,Initialize lebedev_mapping_ and make use thread-safe -- and do ONLY THAT,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2743:48,safe,safe,48,https://psicode.org,https://github.com/psi4/psi4/pull/2743,1,['safe'],['safe']
Safety,"It would be valuable to developers, nightly builds, and CI testing if libint could be compiled once, then linked in as needed, like we can do for Boost. Much developer anger when CMake spontaneously decides the integrals need recompiling could be soothed! We could test molecules larger than He with density-fitted quad-zeta! The next NSF green initiative could applaud our energy savings!. Who dares to decouple libint from our build system such that it could become a detectable `ExternalProject_Add` CMake module? I think we need to be able to pass in MAX_AM, and it would be nice to have it build both static and shared libraries.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/355:470,detect,detectable,470,https://psicode.org,https://github.com/psi4/psi4/issues/355,1,['detect'],['detectable']
Safety,"KE_BUILD_TYPE=Release -DOpenMP_LIBRARY_DIRS=/opt/intel/lib/intel64_lin/``. Everything built (once the SNS-MP2 tag was corrected) except for v2rdm_casscf which complains about something I don't quite understand:; ```; [ 92%] Performing configure step for 'v2rdm_casscf_external'; loading initial cache file /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/external/downstream/v2rdm_casscf/v2rdm_casscf_external-prefix/tmp/v2rdm_casscf_external-cache-Release.cmake; -- Setting option ENABLE_OPENMP: ON; -- Psi4 script: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/bin/psi4; -- Psi4 headers: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/include; -- Psi4 library: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/lib//psi4/core.cpython-36m-x86_64-linux-gnu.so; -- Psi4 sys.path: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/lib/; -- Psi4 components: ambit;chemps2;dkh;gdma;pcmsolver;simint; -- Python executable: /usr/bin/python3; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, LANG=CXX;Fortran, C/CXX/Fortran=/GNU/GNU; CMake Error at /usr/share/cmake-3.10/Modules/FindPackageHandleStandardArgs.cmake:211 (message):; No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(); Call Stack (most recent call first):; /usr/share/cmake-3.10/Modules/FindOpenMP.cmake:487 (find_package_handle_standard_args); /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/share/cmake/TargetLAPACK/FindTargetOpenMP.cmake:64 (find_package); /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/share/cmake/TargetLAPACK/FindMathOpenMP.cmake:104 (find_package); /usr/share/cmake-3.10/Modules/CMakeFindDependencyMacro.cmake:48 (find_package); /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/share/cmake/TargetLAPACK/TargetLAPACKConfig.cmake:44 (find_dependency); /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/share/cmake/psi4/psi4Config.cmake",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1426:1329,Detect,Detecting,1329,https://psicode.org,https://github.com/psi4/psi4/issues/1426,1,['Detect'],['Detecting']
Safety,"Lingering issues for finalizing CheMPS2:; - [ ] Make sure can detect Debian installation of CheMPS2 in ""list of files"" https://packages.debian.org/sid/libchemps2-dev ; - [ ] make up new conda package; - [ ] add conda package to metapackage; - [ ] add chemps2.rst to interfaces in docs; - [ ] add chemps2 to binary; - [ ] review keywords; - [ ] add acceptance for Intel redistributable for `chemps2.so`",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/150:62,detect,detect,62,https://psicode.org,https://github.com/psi4/psi4/issues/150,1,['detect'],['detect']
Safety,MathOpenMP detection,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1118:11,detect,detection,11,https://psicode.org,https://github.com/psi4/psi4/issues/1118,1,['detect'],['detection']
Safety,"Most of the developers have Travis turned on in our psi4 forks (esp. as we each hosted _the_ Psi4 for a different phase over the summer). So every time we push a branch and make a PR back to psi4/psi4, Travis is running twice. According to [this](https://docs.travis-ci.com/user/customizing-the-build#Safelisting-or-blocklisting-branches), we can turn on/off travis for certain branches. So this PR hopefully keeps Travis running on all the psi4/psi4 PRs and any long-term non-PR branches you add, while turning it off for the branches that are covered under psi4/psi4 master testing. At least I think that's how this works.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/595:301,Safe,Safelisting-or-blocklisting-branches,301,https://psicode.org,https://github.com/psi4/psi4/pull/595,1,['Safe'],['Safelisting-or-blocklisting-branches']
Safety,OPTKING Aborts,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1924:8,Abort,Aborts,8,https://psicode.org,https://github.com/psi4/psi4/issues/1924,1,['Abort'],['Aborts']
Safety,"On some systems, the default temp location should not be `/tmp`; but it is set by either `$TMPDIR`, `$TEMP` or `$TMP` (commenly done on HPC; systems, where the temp location may be somthing special, a ssd for example).; This patch first checks those 3 environment variables; and uses its value when set. It falls back to `/tmp` when; nothing is set. `std::getenv` needs C++11 to be thread safe.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/97:389,safe,safe,389,https://psicode.org,https://github.com/psi4/psi4/pull/97,1,['safe'],['safe']
Safety,Problem with new BLAS / OpenMP detection,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041:31,detect,detection,31,https://psicode.org,https://github.com/psi4/psi4/issues/1041,1,['detect'],['detection']
Safety,"Psi4 doesn't seem to be initializing global variables in a way that can be accessed by plugins. One example is `psi::outfile`. Steps to recreate:; - Create a new plugin. Tested on the scf template.; - Configure with `psi4 --plugin-compile`; - Adding the `-DCMAKE_BUILD_TYPE=Debug` also causes this.; - Build with `cmake --build (directory)`; - Running gives a segmentation fault. Output from valgrind with the debug build type gives the following.; ```; ==98805== Memcheck, a memory error detector; ==98805== Copyright (C) 2002-2024, and GNU GPL'd, by Julian Seward et al.; ==98805== Using Valgrind-3.23.0 and LibVEX; rerun with -h for copyright info; ==98805== Command: /home/user/psi4/bin/psi4 input.dat; ==98805== ; ==98805== Invalid read of size 8; ==98805== at 0x29BC741C: std::vector<char, std::allocator<char> >::size() const (stl_vector.h:988); ==98805== by 0x2B5A1476: psi::PsiOutStream::Printf(char const*, ...) (PsiOutStream.cc:70); ==98805== by 0x296A3066: psi::test::SCF::init_integrals() (scf.cc:79); ==98805== by 0x296A2C04: psi::test::SCF::SCF(std::shared_ptr<psi::Wavefunction>, psi::Options&) (scf.cc:56); ==98805== by 0x29697716: test (plugin.cc:134); ==98805== by 0x5FDD804: ??? (in /home/user/psi4/lib/psi4/core.cpython-310-x86_64-linux-gnu.so); ==98805== by 0x5FE0666: ??? (in /home/user/psi4/lib/psi4/core.cpython-310-x86_64-linux-gnu.so); ==98805== by 0x5F6A896: ??? (in /home/user/psi4/lib/psi4/core.cpython-310-x86_64-linux-gnu.so); ==98805== by 0x4FDC86: cfunction_call (methodobject.c:543); ==98805== by 0x4F741A: _PyObject_MakeTpCall (call.c:215); ==98805== by 0x4F34C5: UnknownInlinedFun (abstract.h:112); ==98805== by 0x4F34C5: UnknownInlinedFun (abstract.h:99); ==98805== by 0x4F34C5: UnknownInlinedFun (abstract.h:123); ==98805== by 0x4F34C5: UnknownInlinedFun (ceval.c:5893); ==98805== by 0x4F34C5: _PyEval_EvalFrameDefault (ceval.c:4181); ==98805== by 0x4FE0CE: UnknownInlinedFun (pycore_ceval.h:46); ==98805== by 0x4FE0CE: UnknownInlinedFun (ceval.c:5067); ==98805=",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3200:489,detect,detector,489,https://psicode.org,https://github.com/psi4/psi4/issues/3200,1,['detect'],['detector']
Safety,"Psi4 seems to be unable to recognize the symmetry of molecules that should be Cs.; Minimal input:; ```; molecule {; pubchem:fluoroethane ; }; set basis cc-pVDZ; energy('scf'); ```; Output is attached. [Cs_test.log](https://github.com/psi4/psi4/files/8209874/Cs_test.log); I have tried overriding this by manually specifying a Cs symmetry, but that results in an error:; ```; !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: User specified point group (Cs(X)) is not a subgroup of the highest !; ! detected point group (C1). If this is because the symmetry increased, try to !; ! start the calculation again from the last geometry, after checking any !; ! symmetry-dependent input, such as DOCC. !; ! Error occurred in file: /scratch/psilocaluser/conda- !; ! builds/psi4-multiout_1645476997931/work/psi4/src/psi4/libmints/molecule.cc !; ! on line: 2011 !; ! The most recent 5 function calls were: !; ! psi::Molecule::find_point_group(double) const !; ! psi::Molecule::update_geometry() !; ! from_dict(pybind11::dict) !; ! !; !----------------------------------------------------------------------------------!; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2463:554,detect,detected,554,https://psicode.org,https://github.com/psi4/psi4/issues/2463,1,['detect'],['detected']
Safety,"Psi4 won't pay the least attention to these variables.; - [x] Added `psi4 --psiapi-path` command-line argument. This prints the bash commands you need to execute to set up python interp and pythonpath in your shell to `python -c ""import psi4""`; - [x] Psi4 molecule strings passed to `psi4.geometry()` no longer balk at python-style comments, as these are filtered out.; - [x] Added a `psi4.clean_options()` fn (alongside `psi4.clean()` and `psi4.clean_variables()`) to reset the `P::e.options` object to its initial state. This is necessary for independent tests in pytest and will probably be useful for psiapi sessions.; - [x] Add pytest smoke tests for psi4 itself and psi4+addons (addon tests skip if addon not enabled or detectable). From source, `cd tests/pytest && python -m pytest [-v -s]`. From staged or installed, `python -c ""import psi4; psi4.test()""` or `psi4 --test`. From objdir, `make pytest`. ## Questions; - [ ] I can work around the 3.3 cmake. It'll just be less tidy and won't ward off the HDF5 version detection issue. Speak up if there are objections.; - [ ] Everyone should make sure you're ok with the table below. No envvar control over parallelism anymore.; - [ ] Everyone read 12cd carefully, as I'm a bit nervous about this. Searched the code and Options object is cleared _nowhere_ except for a commented out in read_options. So I think it's safe to commandeer this function. And it works to completely reset options.; - [ ] The threading test is now in test_psi4_profiling.py. It works fine as the only pytest, but it's threading is still messed up when in the whole pytest suite. Anyone have a guess why? I haven't read anything about pytest controlling threads. ## Status; - [x] Ready to go. `OMP_NUM_THREADS` | `MKL_NUM_THREADS` | `-nN` | `psi4.set_num_threads()` | PsiAPI | Psithon; --- | --- | --- | --- | --- | ---; _ | _ | _ | _ | _111 | 1111; 1 | _ | _ | _ | _111 | 1111; 3 | _ | _ | _ | _111 | 1111; _ | 1 | _ | _ | _111 | 1111; _ | 3 | _ | _ | _111 | 1111; _ | ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/627:3041,detect,detection,3041,https://psicode.org,https://github.com/psi4/psi4/pull/627,1,['detect'],['detection']
Safety,Python 3 library not detected correctly by cmake,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/163:21,detect,detected,21,https://psicode.org,https://github.com/psi4/psi4/issues/163,1,['detect'],['detected']
Safety,Remove Redundant Dipole/Quadrupole Code,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2485:7,Redund,Redundant,7,https://psicode.org,https://github.com/psi4/psi4/pull/2485,1,['Redund'],['Redundant']
Safety,Removed redundancies in OCC manual entries,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/147:8,redund,redundancies,8,https://psicode.org,https://github.com/psi4/psi4/pull/147,1,['redund'],['redundancies']
Safety,Removed the VERSION file to avoid confusion. Resolves #271.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/272:28,avoid,avoid,28,https://psicode.org,https://github.com/psi4/psi4/pull/272,1,['avoid'],['avoid']
Safety,Replace 'get_array' with 'variable' to avoid deprecation warning. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1549:39,avoid,avoid,39,https://psicode.org,https://github.com/psi4/psi4/pull/1549,1,['avoid'],['avoid']
Safety,"Right now, our SCF instability following algorithm is the following, very dumb one:; * Perform SCF; * Check instability; * If unstable, rotate in the direction of the unstable vector, according to some user-specified magnitude, then repeat; * If unstable _with a new eigenvalue_, increment the magnitude. It must have been bad. We can guess more intelligently. A _smarter_ algorithm would look like:; * Perform SCF; * Check instability; * If unstable, rotate in the direction of the unstable vector, according to some user-specified magnitude, then...; * Do a line fit of the SCF energy in the direction of the unstable vector. The instability analysis gave us the first two terms of the Taylor expansion, analytically. Given that, we can then use the SCF energy at the rotated build to fit the _third_ derivative. It may also be possible to project the SCF gradient into the unstable direction. We can then use both pieces of information to fit the third and fourth derivative. (Some numerical tests will be necessary to determine whether the fourth dimensional fit is worthwhile, and good rotation magnitudes.); * We then find the zeroes of f'(x)/x. This is a quadratic, and we can solve the roots analytically. If both are real, evaluate f at both zeroes to find a guess for the true minimum, and continue SCF at the guess rotation. If both are imaginary, a degree four polynomial fit predicts that f(x) has no zeroes, and our fit is unreliable. Print a warning and the current orbitals.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3045:1388,predict,predicts,1388,https://psicode.org,https://github.com/psi4/psi4/issues/3045,1,['predict'],['predicts']
Safety,"Running the following input; ```; molecule {; symmetry c2v; 0 1; N; N 1 1.50; }. set basis cc-pCVDZ; set reference rohf. set restricted_docc [2, 0, 0, 0]; set ras1 [0, 0, 0, 0]; set ras2 [4, 0, 2, 2]; set ras3 [0, 0, 0, 0]; E, cas_wfn = energy('rasscf', return_wfn = True). set restricted_docc [0, 0, 0, 0]; set ras1 [2, 0, 0, 0]; set ras2 [4, 0, 2, 2]; set ras3 [4, 0, 2, 2]; E, ras_wfn = energy('detci', ref_wfn = cas_wfn, return_wfn = True); ```; results in a successful run but; ```; $ psi4 NN_1.50.in ; free(): invalid size; Aborted (core dumped); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2309:530,Abort,Aborted,530,https://psicode.org,https://github.com/psi4/psi4/issues/2309,1,['Abort'],['Aborted']
Safety,S_CXX11_STATIC_ASSERT;HAS_CXX11_VARIADIC_TEMPLATES;HAVE_MKL_BLAS;HAVE_MKL_LAPACK;HAVE_MPI;HAVE_DKH; -- The CXX compiler identification is Intel 15.0.0.20140723; -- The C compiler identification is Intel 15.0.0.20140723; -- Check for working CXX compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpicxx; -- Check for working CXX compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpicxx -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working C compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpicc; -- Check for working C compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpicc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- The Fortran compiler identification is Intel 15.0.0.20140723; -- Check for working Fortran compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpif77; -- Check for working Fortran compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpif77 -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /opt/intel/impi/5.0.1.035/intel64/bin/mpif77 supports Fortran 90; -- Checking whether /opt/intel/impi/5.0.1.035/intel64/bin/mpif77 supports Fortran 90 -- yes; -- Fortran ENABLED; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : **restrict**; -- Performing Test has_xHost; -- Performing Test has_xHost - Success; -- Try OpenMP C flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try Open,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/201:12862,Detect,Detecting,12862,https://psicode.org,https://github.com/psi4/psi4/issues/201,2,['Detect'],['Detecting']
Safety,Safer memory operations,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/607:0,Safe,Safer,0,https://psicode.org,https://github.com/psi4/psi4/pull/607,1,['Safe'],['Safer']
Safety,Sanity check socc and docc arrays to avoid segfaults.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/602:0,Sanity check,Sanity check,0,https://psicode.org,https://github.com/psi4/psi4/pull/602,2,"['Sanity check', 'avoid']","['Sanity check', 'avoid']"
Safety,"Some bugs fixed -- I can only hope more than were added. Docstrings and code outline should be current. I didn't rework multilevel (separate file) except to make gradient run and allow different order of keys in user `levels` kwarg. I wouldn't bother with the diff. . ## Todos. - [x] `msgpack-python` added as req'd dependency. this keeps numpy arrays serialized when communicating in schema; - [x] any fns mirroring `sherrill_gold_standard` or `allen_focal_point` need to be reformatted and registered with `register_composite_function`; - [x] extrapolation functions for composite need to be registered with register_xtpl_function; - [x] CBS and xtpl functions need to be called as strings, not objects. So `energy('cbs', scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme='scf_xtpl_helgaker_3')` not `energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3)`.; - [x] no longer always evaluating gradient before Hessian to test safety of projecting rotations. Instead assuming unsafe. Can pass ref_gradient array to test on or `set findif fd_project` T/F explicitly to control.; - [x] `json_ret = psi4.schema_wrapper.run_qcschema(json_input)` not `json_ret = psi4.json_wrapper.run_json(json_input)`. json_ret is now an object, so `.` access, not dictionary. The old schema runner uses a schema circa pre-2018 and we've warned it's deprecated for about a year, so I went ahead and updated all the tests to the new/current run_qcschema.; - [x] Pre-ddd, CBS wrapper issues a `clean()` btwn calcs. Plain string modelchem calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. With ddd, this is no longer happening, so for occasional string modelchem calcs (that is, `energy|gradient|hessian(""mtd/bas"")` only), you may need to add a clean in the input. A few test cases now sport extra cleans. Signatures of this problem are PSIO errors and, in an obscure case, CC a",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2575:3561,unsafe,unsafe,3561,https://psicode.org,https://github.com/psi4/psi4/pull/2575,1,['unsafe'],['unsafe']
Safety,Source ; libgdma.so 00007F14B1B2C10F for__signal_handl Unknown Unknown; libpthread-2.27.s 00007F14B7334980 Unknown Unknown Unknown; libc-2.27.so 00007F14B6F6FFB7 gsignal Unknown Unknown; libc-2.27.so 00007F14B6F71921 abort Unknown Unknown; core.cpython-37m- 00007F14B40E13D7 Unknown Unknown Unknown; core.cpython-37m- 00007F14B26DC86D Unknown Unknown Unknown; core.cpython-37m- 00007F14B26F56B1 Unknown Unknown Unknown; core.cpython-37m- 00007F14B271593A Unknown Unknown Unknown; python3.7 000055CE517D7914 _PyMethodDef_RawF Unknown Unknown; python3.7 000055CE517D7A31 _PyCFunction_Fast Unknown Unknown; python3.7 000055CE51843EBD _PyEval_EvalFrame Unknown Unknown; python3.7 000055CE51786829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055CE517D7107 _PyFunction_FastC Unknown Unknown; python3.7 000055CE5183F4B6 _PyEval_EvalFrame Unknown Unknown; python3.7 000055CE51786829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055CE51787714 PyEval_EvalCodeEx Unknown Unknown; python3.7 000055CE5178773C PyEval_EvalCode Unknown Unknown; python3.7 000055CE5189EF14 Unknown Unknown Unknown; python3.7 000055CE518AA29D PyRun_StringFlags Unknown Unknown; python3.7 000055CE5184EEB4 Unknown Unknown Unknown; python3.7 000055CE517D7789 _PyMethodDef_RawF Unknown Unknown; python3.7 000055CE517D7A31 _PyCFunction_Fast Unknown Unknown; python3.7 000055CE51843795 _PyEval_EvalFrame Unknown Unknown; python3.7 000055CE51786829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055CE51787714 PyEval_EvalCodeEx Unknown Unknown; python3.7 000055CE5178773C PyEval_EvalCode Unknown Unknown; python3.7 000055CE5189EF14 Unknown Unknown Unknown; python3.7 000055CE518A9331 PyRun_FileExFlags Unknown Unknown; python3.7 000055CE518A9523 PyRun_SimpleFileE Unknown Unknown; python3.7 000055CE518AA655 Unknown Unknown Unknown; python3.7 000055CE518AA77C _Py_UnixMain Unknown Unknown; libc-2.27.so 00007F14B6F52BF7 __libc_start_main Unknown Unknown; python3.7 000055CE5184EFF0 Unknown Unknown Unknown; Aborted (core dumped); ```,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2084:2267,Abort,Aborted,2267,https://psicode.org,https://github.com/psi4/psi4/issues/2084,1,['Abort'],['Aborted']
Safety,"Test case 32 from the FH51 subset of [GMTKN55](http://www.thch.uni-bonn.de/tc.old/downloads/GMTKN/GMTKN55/FH51ref.html) computes the isomerization energy between H2C-C5-CH2 and heptatriyne. So as to not to bury the lede: very strange energies result when running H2C-C5-CH2 with wB97X-3c, which I suspect are tied to this message:. ```; !!! WARNING: ECP capability is in beta. Please check occupations closely. !!!; ``` . The energy of H2C-C5-CH2 is computed to be -43.4074821405164926 Eh, and the energy of heptatriyne is computed to be -42.0459519798808898, leading to a predicted ∆E of -854 kcal/mol. The ""correct"" high-level value is -14.30 kcal/mol, and the authors of the wB97X-3c paper report an energy of -13.17 kcal/mol for this system. Similar results are seen when using B3LYP-D4/vDZP or r2SCAN-D4/vDZP, suggesting that vDZP is the common factor here. The orbital occupancies for H2C-C5-CH2 do seem a bit odd to me? I'm not used to seeing such low-energy virtual orbitals... ```; Orbital Energies [Eh]; ---------------------. Doubly Occupied: . 1A -1.094498 2A -1.062498 3A -1.041834 ; 4A -1.016695 5A -0.963137 6A -0.898331 ; 7A -0.834072 8A -0.703197 9A -0.700832 ; 10A -0.661618 11A -0.660116 12A -0.605235 ; 13A -0.596357 14A -0.526703 15A -0.507419 ; 16A -0.419207 . Virtual: . 17A -0.218606 18A -0.112811 19A -0.091525 ; 20A 0.037195 21A 0.048637 22A 0.051338 ; 23A 0.054059 24A 0.105612 25A 0.106004 ; 26A 0.174431 27A 0.193680 28A 0.196900 ; ```. Not sure what ECP factors could be driving these issues, or how to fix this, but thought I should raise an issue. Here's all the input and output files:. Input file for H2C-C5-CH2:; ```; molecule {; C -2.556271805455 -0.181690364655 -0.026620796492 ; C -1.282011805455 -0.085620364655 -0.016410796492 ; C -0.000441805455 0.006819635345 -0.003870796492 ; C 1.281348194545 0.095909635345 0.010599203508 ; C 2.556298194545 0.180969635345 0.026599203508 ; C 3.872538194545 0.268679635345 0.044049203508 ; H 4.487898194545 -0.251640364655 -",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3221:573,predict,predicted,573,https://psicode.org,https://github.com/psi4/psi4/issues/3221,1,['predict'],['predicted']
Safety,"The `cc` module [has](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/ccenergy/diis.cc) [a](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/ccenergy/diis_RHF.cc) [habit](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/ccenergy/diis_ROHF.cc) [of](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/ccenergy/diis_UHF.cc) [rewriting](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/cclambda/diis.cc) [DIIS](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/ccresponse/diis.cc) when they really should [just use `libdiis`.](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libdiis/diismanager.h). In addition to code cleanup, I predict an important practical benefit. The central code uses Rob Parrish tricks to treat linearly dependent matrices. In my experience during the DIIS refactor, these often arise close to convergence. So by refactoring this, we can allow for effective DIIS even for tight convergence of the `cc` equations. I have [reason to believe](https://github.com/psi4/psi4archive/commit/2b2eb6c5a710dde180b1ef7a050012069afeae8d) this has a great to deal to do with anomalies in `cc55`. Don't even think about taking this until after #943 is closed.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2519:685,predict,predict,685,https://psicode.org,https://github.com/psi4/psi4/issues/2519,1,['predict'],['predict']
Safety,"The correct detection of the D2h subgroup seems to depend on the orientation. In the attached input; are two different geometries at two different orienations, but both Oh symmetry. case 1 was symmetrized using the SYVA code after C1 optimization with DFT (https://www.sciencedirect.com/science/article/pii/S0010465517300310); case 2 was downloaded from a website about symmetry. (see input). input:; [oh.txt](https://github.com/psi4/psi4/files/2320825/oh.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1177:12,detect,detection,12,https://psicode.org,https://github.com/psi4/psi4/issues/1177,1,['detect'],['detection']
Safety,"The laboratory server cannot be connected to the network, so I downloaded Psi4conda-1.3.2-py36-Linux-x86_64.sh from the pis4 official website to install it:; ```; [chenh@Pauling programs]$ ./Psi4conda-1.3.2-py36-Linux-x86_64.sh . Welcome to Psi4conda 1.3.2. Psi4conda will now be installed into this location:; /home/chenh/psi4conda. - Press ENTER to confirm the location; - Press CTRL-C to abort the installation; - Or specify a different location below. [/home/chenh/psi4conda] >>> /home/chenh/ly/sourcefolders/psi4conda; PREFIX=/home/chenh/ly/sourcefolders/psi4conda; installing: python-3.6.8-h0371630_0 ...; Python 3.6.8 :: Anaconda, Inc.; installing: blas-1.0-mkl ...; installing: ca-certificates-2019.1.23-0 ...; installing: dftd3-3.2.1-h84218bc_2 ...; installing: dkh-1.2-h173d85e_2 ...; installing: gcp-2.0.2-h84218bc_1 ...; installing: gdma-2.2.6-h0e1e685_6 ...; installing: intel-openmp-2019.3-199 ...; installing: libgcc-ng-8.2.0-hdf63c60_1 ...; installing: libgfortran-ng-7.3.0-hdf63c60_0 ...; installing: libint-1.2.1-hb4a4fd4_6 ...; installing: libstdcxx-ng-8.2.0-hdf63c60_1 ...; installing: simint-0.7-h642920c_1 ...; installing: gau2grid-1.3.1-h035aef0_0 ...; installing: gmp-6.1.2-h6c8ec71_1 ...; installing: gsl-2.4-h14c3975_4 ...; installing: libffi-3.2.1-hd88cf55_4 ...; installing: libxc-4.3.4-h7b6447c_0 ...; installing: metis-5.1.0-hf484d3e_4 ...; installing: mkl-2019.3-199 ...; installing: ncurses-6.1-he6710b0_1 ...; installing: openssl-1.1.1b-h7b6447c_1 ...; installing: tbb-2019.4-hfd86e86_0 ...; installing: xz-5.2.4-h14c3975_4 ...; installing: yaml-0.1.7-had09818_2 ...; installing: zlib-1.2.11-h7b6447c_3 ...; installing: glpk-4.65-h3ceedfd_2 ...; installing: hdf5-1.10.2-hba1933b_1 ...; installing: libedit-3.1.20181209-hc058e9b_0 ...; installing: libefp-1.5.0-h84097be_1 ...; installing: readline-7.0-h7b6447c_5 ...; installing: suitesparse-5.2.0-h9e4a6bb_0 ...; installing: tk-8.6.8-hbc83047_0 ...; installing: ambit-0.3-h137fa24_1 ...; installing: chemps2-1.8.9-h8c3",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1788:391,abort,abort,391,https://psicode.org,https://github.com/psi4/psi4/issues/1788,1,['abort'],['abort']
Safety,"The new CMake system documentation is primarily in the comments within the top level CMakeLists.txt. I have noticed an inconsistency that should either be fixed in the build system or removed from the documentation. . The comment section [here](https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L47) seems to imply that you can download libefp/libint, build them, and then provide the directory containing the appropriate directory containing libintConfig.cmake/libefpConfig.cmake to CMake in the following way. ```shell; cmake -H. -Bobjdir … -Dlibint_DIR=/path/to/libint/share/cmake/libint -Dlibefp_DIR=/path/to/libefp/share/cmake/libefp; ```. Then cmake will detect the previously installed libint/libefp and skip their building. . However, this does not completely work. The initial cmake will indicate `found libint`, then when you go to the build directory and run `make` the `libint_DIR `and `libefp_DIR` argurments are not passed on to cmake for psi4_core and the build errors out with the following message:. ```shell; Performing configure step for 'psi4_core'; loading initial cache file /home/amjames2/newriver/psi4-builds/new-debug/psi4_core-prefix/tmp/psi4_core-cache.cmake; -- The C compiler identification is GNU 5.2.0; -- The CXX compiler identification is GNU 5.2.0; -- Check for working C compiler: /home/amjames2/.conda/envs/py3/bin/gcc; -- Check for working C compiler: /home/amjames2/.conda/envs/py3/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Found PythonInterp: /hom",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/516:667,detect,detect,667,https://psicode.org,https://github.com/psi4/psi4/issues/516,1,['detect'],['detect']
Safety,"The third Travis test is timing out too much. This can be traced to the painfully slow download time for the GCC compiler. We have plans to replace this test with some plugin validation, using native GCC compilers to avoid the timeouts. For now, we'll just nuke it to allow the backlog of PRs through. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1552:217,avoid,avoid,217,https://psicode.org,https://github.com/psi4/psi4/pull/1552,2,"['avoid', 'timeout']","['avoid', 'timeouts']"
Safety,There seems to be a regression in Boost 1.60 that causes problems with Psi4 (and other projects).; It has been created as an issue in the boost python repo: https://github.com/boostorg/python/issues/56. Maybe the version could be checked in the CMake configure step. It can then either abort (if the user was trying to force the use of system boost) or use the boost distributed with Psi4. Adding this since #230 was closed (and it was unrelated anyway),MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/243:286,abort,abort,286,https://psicode.org,https://github.com/psi4/psi4/issues/243,1,['abort'],['abort']
Safety,"There's going to be planning on this this week, so this is the opportunity for others (particularly @dsirianni and @alenaizan) to chime in with requirements and wishes. consider this issue a scratchpad. ### haphazard notes; * overlap or replacement of the `QMMM` class; * serialization so can be called from json; * but we'd like to be able to specify polarizabilities at given sites, and have the SCF solver use those to figure out the magnitude of induced dipoles at the MM sites; * needs a subdict of points with (up to) anisotropic polarizability, subdict of point charges, subdict of diffuse points; * extensibility is important also - may need more info, such as damping factors to avoid singularities",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1541:688,avoid,avoid,688,https://psicode.org,https://github.com/psi4/psi4/issues/1541,1,['avoid'],['avoid']
Safety,"This command fails:; ```; $ cd samples/cc24 && psi4 test.in ; Traceback (most recent call last):; File ""/usr/local/bin/psi4"", line 338, in <module>; exec(content); File ""<string>"", line 31, in <module>; File ""/usr/local/lib/psi4/driver/driver.py"", line 613, in gradient; plan.compute(); File ""/usr/local/lib/psi4/driver/driver_findif.py"", line 1306, in compute; t.compute(client=client); File ""/usr/local/lib/psi4/driver/task_base.py"", line 166, in compute; self.result = qcng.compute(; File ""/usr/local/lib/python3.9/site-packages/qcengine/compute.py"", line 105, in compute; output_data = executor.compute(input_data, config); File ""/usr/local/lib/python3.9/site-packages/qcengine/programs/psi4.py"", line 121, in compute; pversion = parse_version(self.get_version()); File ""/usr/local/lib/python3.9/site-packages/qcengine/programs/psi4.py"", line 90, in get_version; exc[""proc""].wait(timeout=30); File ""/usr/local/lib/python3.9/subprocess.py"", line 1189, in wait; return self._wait(timeout=timeout); File ""/usr/local/lib/python3.9/subprocess.py"", line 1909, in _wait; raise TimeoutExpired(self.args, timeout). subprocess.TimeoutExpired: Command '['/usr/local/bin/psi4', '--version']' timed out after 30 seconds. Printing out the relevant lines from the Psithon --> Python processed input file:; core.IO.set_default_namespace(""h2o""); core.set_global_option(""REFERENCE"", ""uhf""); core.set_global_option(""BASIS"", ""DZ""); core.set_global_option(""ROOTS_PER_IRREP"", [0, 0, 1, 0]); analytic_grad = gradient('eom-ccsd'); --> findif_grad = gradient('eom-ccsd', dertype=0); compare_matrices(analytic_grad, findif_grad, 5, ""UHF-EOM-CCSD finite-diff. (3-pt.) vs. analytic gradient to 10^-5""); core.set_local_option(""FINDIF"", ""POINTS"", 5); findif_grad = gradient('eom-ccsd', dertype=0); compare_matrices(analytic_grad, findif_grad, 6, ""UHF-EOM-CCSD finite-diff. (5-pt.) vs. analytic gradient to 10^-7""). !----------------------------------------------------------------------------!; ! !; ! Command '['/usr/local/bin",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2803:884,timeout,timeout,884,https://psicode.org,https://github.com/psi4/psi4/issues/2803,1,['timeout'],['timeout']
Safety,"This grew a bit to encompass a few more issues, its still a general bug fix patch. ## Description; Fixes and adds test for two issues that were identified:; - Fixes #586 where the SAD basis was not being set when READ failed.; - Fixes #556 as the NO option was not tracked to the new MCSCF driver.; - CI OPDM/TPDM now correctly closes files when complete.; - MCSCF Rotate matrices are now built continuously to avoid difficult cases to exponentiate.; - Patched up Dvec reading between successive CI calls (especially for MCSCF).; - PK Non-symmetric density matrices should now always be detected correction.; - Makes CI printing to be more canonical.; - Prints occupation number for CI, fixes #590. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/588:411,avoid,avoid,411,https://psicode.org,https://github.com/psi4/psi4/pull/588,2,"['avoid', 'detect']","['avoid', 'detected']"
Safety,"This has been broken for years. Test if it's still just the two points in the long array of things checked. If it's still that, perhaps consult @robparrish whether safer to drop the appearance of the frac code being present or just comment out the broken numbers.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/129:164,safe,safer,164,https://psicode.org,https://github.com/psi4/psi4/issues/129,1,['safe'],['safer']
Safety,"This is a short summary on how to get started with PSI4 and Apple Silicon; ---. Overview:. - Python/Package management options:; - osx-arm64 conda-forge environment: https://github.com/conda-forge/miniforge (untested, limited packages); - homebrew . - BLAS/LAPACK options: ; - Apple's Accelerate: very fast, no inherent threading. But thread-safe.; - OpenBLAS: available on conda-forge and homebrew. _No optimized kernels for M1_. Much slower than Accelerate Framework. (see https://github.com/xianyi/OpenBLAS/issues/2814); - ???; ---. ## homebrew:; requirred brew packages: `cmake eigen numpy`; for OpenMP: `libomp`; optional: `doxygen jupyterlab pytest gcc` (gcc to get a Fortran compiler); Note: numpy will come with a non-threading OpenBLAS library. ### psi4 python packages:; - `pip3 install pydantic pint py-cpuinfo psutil`. ### docs:; - pip3 install Sphinx nbsphinx python-graphviz sphinx-autodoc-typehints sphinx-automodapi ; - custom theme from `git clone https://github.com/psi4/sphinx-psi-theme.git` (`pip3 install .`); - dont get `sphinx-doc` from brew, it has python3.10 dependency. ### basic build with Accelerate Framework and homebrew python:; - `cmake -H. -Bobjdir -DPython_EXECUTABLE=/opt/homebrew/bin/python3 -DCMAKE_INSTALL_PREFIX=<custom>`; - `export CPLUS_INCLUDE_PATH=/opt/homebrew/include` (for libint2 to find a header); - If `libomp` is found correctly, OpenMP is enabled but only explicit C-side openmp sections are threaded AFAIK, not blas.; - builds everything from scratch and _wow it's fast!_. ### caveats; - Mismatch between numpy(=openblas) and psi4(=Accelerate) libraries.; ---; I may have missed a detail.. These notes will be updated over time.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2333:342,safe,safe,342,https://psicode.org,https://github.com/psi4/psi4/issues/2333,1,['safe'],['safe']
Safety,"This is an issue I came across when needing to calculate the molecular weight of a molecule (which I was surprised is not already part of the Molecule class). . Currently, ghost atoms still return a mass when calling `mol.mass(i)`. The best way I have found to avoid this on the Python side is to check the Z value `if mol.Z():` because ghost atoms (correctly) return false here. `optrot.cc` does not do this correctly and so uses an incorrect molecular weight for molecules with ghost atoms, and there may be more codes that have this issue. I thought it may be better to fix `mass()` rather than try to find every single code which calculates a molecular weight and add in the Z value check. I feel ghost atoms should not have any mass in the first place, as they are usually just coordinates on which to place basis functions corresponding to the atom. I can't think of any places where you would want the mass of a ghosted atom, so please correct me if I'm mistaken. . Within `masses.h`, a note is found:; ```; ** 10/08/99 EFV - Changed an2masses[0] to 0.0000; ** (ghost atom's weight should be 0); ```; But in `molecule.cc` the an2masses list is only used if `atoms_[atom]->mass() != 0` returns false, which will not happen for ghost atoms as they are currently done. Instead, it should probably be checked first `if atoms_[atom]->Z() == 0` and return a zero mass. (I thought this was better than pushing the Z == 0 case into the else statement, because doing that throws a _lot_ of warnings at the user). This is an easy fix, but as this effects the molecule class I wanted to check some other opinions before opening my PR. There also may be a more fundamental place to fix this problem, such as when the `atoms_` list is generated, but I wasn't sure.; @amjames",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/909:261,avoid,avoid,261,https://psicode.org,https://github.com/psi4/psi4/issues/909,1,['avoid'],['avoid']
Safety,"This issue is a code cleanup wishlist. Please place a code cleanup issue here if you see it in a PR, but fixing it would be outside the scope of the PR. - [x] Remove `new` from `lib3index/fittingmetric.cc`. In some cases, `new` is used to initialize... a raw pointer that points to `std::shared_ptr<OneBodyAOInt>`. In 2022, this should be a `std::vector`.; - [ ] `onebody.h` and its derived classes have many member variables that are `double*`. Let's change to `std::vector<double>` if we can, to avoid having to worry about new/delete.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2412:498,avoid,avoid,498,https://psicode.org,https://github.com/psi4/psi4/issues/2412,1,['avoid'],['avoid']
Safety,Throw PSIEXCEPTION instead of calling abort() in detci,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3168:38,abort,abort,38,https://psicode.org,https://github.com/psi4/psi4/pull/3168,1,['abort'],['abort']
Safety,"Time to start the release notes once more. As always please note that these start off as incomplete and gradually fill in over time as they are quite lengthy. If I missed anything or an item is incorrect please comment below. Certainly some items need to be highlighted more and categorical division can be improved. Note: Psi4 1.3 starts around PR #1065. TODO: Document #1393, . ##. # Major Points of Interest. - Added native Windows compatibility without the WSL requirement.; - DFT collocation grids can now be cache in-memory to avoid extra computation and lowering the total cost of DFT by up to a factor of two (#1233).; - Wavefunctions can now be serialized to disk and back using `Wavefunction.to_file/from_file` (#1304).; - Psi4 is now Python 3.5+ only, Psi4 1.4 will be Python 3.6+ only. Potential:; - A smart SCF solver that can intelligently make a variety of choices depending on local conditions (#1135).; - TDDFT for HF, LDA, and GGA SCF wave functions (#1349). . # Obtaining; - Binary installers: ; - Python Anaconda: `conda install psi4 -c psi4`. ##. # New Methods; - Improved support for the [MolSSI](molssi.org) QC Schema [interface](http://molssi-qc-schema.readthedocs.io/en/latest/index.html#) v1; - VV10 dispersion is now available for UKS references.; - Cubeprop can now compute the `FRONTIER_ORBITALS` and `DUAL_DESCRIPTOR` quantities.; - nZaPa-NR basis sets have been added.; - The recursive driver can now compute N-body gradients and Hessians. # New External Libraries; - [QCElemental](https://github.com/MolSSI/QCElemental) - A library for CODATA, molecule manipulation routines, and periodic table information.; - [HelPME](https://github.com/andysim/helpme) - A particle-mesh Ewald library for long-range electrostatics.; - [pyoptking](https://github.com/psi-rking/optking) - A python-based implementation of the OptKing geometry optimization and IRC program. # First Time Contributors; - @raimis - #1399, #1185, #1183, +70 more!; - @obrien951 #1359, #1222, #1130, #1140, ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1406:533,avoid,avoid,533,https://psicode.org,https://github.com/psi4/psi4/issues/1406,1,['avoid'],['avoid']
Safety,"Title is kept general, but this is especially relevant for the newer DSD double hybrids. Issue made from short discussion in slacks. For example: http://onlinelibrary.wiley.com/doi/10.1002/jcc.23391/full ; Different functional compositions for the exchange, correlation, mp2 parts for (among others) -D2 and -D3BJ. The dashparam.py functionality cannot handle these multiple versions, but; `energy('dsd-pbepbe')`, `energy('dsd-pbepbe-d2') `or `energy('dsd-pbepbe-d3bj')` should provide the proposed parameters automatically. . A possible workaround is to define everything, including the e.g. the -D parameters, in the superfunctional object and either avoid the ""dash"" in the method name or avoid invoking the dashparam functionality for specific names.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/920:653,avoid,avoid,653,https://psicode.org,https://github.com/psi4/psi4/issues/920,2,['avoid'],['avoid']
Safety,"Unknown Unknown; python3.7 000056310E0CB107 _PyFunction_FastC Unknown Unknown; python3.7 000056310E1334B6 _PyEval_EvalFrame Unknown Unknown; python3.7 000056310E07A829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000056310E07B714 PyEval_EvalCodeEx Unknown Unknown; python3.7 000056310E07B73C PyEval_EvalCode Unknown Unknown; python3.7 000056310E192F14 Unknown Unknown Unknown; python3.7 000056310E19E29D PyRun_StringFlags Unknown Unknown; python3.7 000056310E142EB4 Unknown Unknown Unknown; python3.7 000056310E0CB789 _PyMethodDef_RawF Unknown Unknown; python3.7 000056310E0CBA31 _PyCFunction_Fast Unknown Unknown; python3.7 000056310E137795 _PyEval_EvalFrame Unknown Unknown; python3.7 000056310E07A829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000056310E07B714 PyEval_EvalCodeEx Unknown Unknown; python3.7 000056310E07B73C PyEval_EvalCode Unknown Unknown; python3.7 000056310E192F14 Unknown Unknown Unknown; python3.7 000056310E19D331 PyRun_FileExFlags Unknown Unknown; python3.7 000056310E19D523 PyRun_SimpleFileE Unknown Unknown; python3.7 000056310E19E655 Unknown Unknown Unknown; python3.7 000056310E19E77C _Py_UnixMain Unknown Unknown; libc-2.26.so 00007F895E88906A __libc_start_main Unknown Unknown; python3.7 000056310E142FF0 Unknown Unknown Unknown; Aborted; ```; ; </details>. I first actually tried to reproduce this using the very convenient MyBinder link on the front page in python, rather than with a psithon input file, but unfortunately because it's an uncaught C++ exception that doesn't actually get translated into a python exception, it just kills the jupyter kernel and no error message is reported to the jupyter client running in the browser. Appologies in advance if this is a duplicate bug report. The fact that the grid is missing is okay; that's #827 IIUC. But if possible, -- especially for usage of the Python interface rather than the command line program -- it would might be better if these exceptions were translated into python rather than such violent crashes.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2080:4701,Abort,Aborted,4701,https://psicode.org,https://github.com/psi4/psi4/issues/2080,1,['Abort'],['Aborted']
Safety,Update base compiler version detection with Intel compiler and clang.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/579:29,detect,detection,29,https://psicode.org,https://github.com/psi4/psi4/pull/579,1,['detect'],['detection']
Safety,"When running a `cp()` calculation, file 97 is left behind. It needs to be preserved at some points in the calc to avoid recomputation, but it shouldn't persist beyond the run.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/113:114,avoid,avoid,114,https://psicode.org,https://github.com/psi4/psi4/issues/113,1,['avoid'],['avoid']
Safety,"When using angstrom units, when parsing the molecule and including an external_potential, the geometry of the molecule gets scaled twice leading to incorrect energies. This only happens, when using python and not psithon.; This can easily be seen when adding a 0 charge far away of the molecule to the simulation, which changes energies significantly. I already prepared a PR to fix this, this is just for reference. To reproduce the problem, use the following:; ```; #! Python equivalent of extern5 test:; #! External potential sanity check with 0 charge far away; #! Checks if all units behave the same and energy is same as no; #! potential; import numpy as np; import psi4.core; import psi4. b2a=0.529177249; # Coordinates added in angstrom; coords = np.array([[ -0.778803000000 , 0.000000000000, 1.132683000000],; [ -0.666682000000, 0.764099000000, 1.706291000000],; [ -0.666682000000, -0.764099000000 , 1.706290000000]]); elements = [""O"",""H"",""H""]; molecule_ang = psi4.core.Molecule.from_arrays(geom=coords, elem=elements, fix_symmetry=""c1"", fix_com=True, fix_orientation=True); molecule_bohr = psi4.core.Molecule.from_arrays(geom=coords/b2a, elem=elements, fix_symmetry=""c1"", fix_com=True, fix_orientation=True, units=""Bohr""). external_potentials = [[0.00, np.array([10.0,10.0,10.0]) / b2a]]. psi4.set_options( {; ""scf_type"": ""df"",; ""d_convergence"": 12,; ""basis"": ""STO-3G"",; ""print"": 0,; ""debug"": 0,; }). ene_bohr_charges = psi4.energy('scf', molecule=molecule_bohr, external_potentials=external_potentials); ene_bohr_pure = psi4.energy('scf', molecule=molecule_bohr); psi4.compare_values(ene_bohr_charges, ene_bohr_pure, 6, ""Bohr geometry, charges vs no charges energy equality""). ene_ang_pure = psi4.energy('scf', molecule=molecule_ang); psi4.compare_values(ene_ang_pure, ene_bohr_pure, 6, ""No charges, Bohr vs Angstrom geometry energy equality""). ene_ang_charges = psi4.energy('scf', molecule=molecule_ang, external_potentials=external_potentials); psi4.compare_values(ene_ang_charges, ene_an",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3147:529,sanity check,sanity check,529,https://psicode.org,https://github.com/psi4/psi4/issues/3147,1,['sanity check'],['sanity check']
Safety,"While attempting to run an ODC-12 computation, the correlation correction to the 1RDM (tau) didn't converge. I can't quite tell what ODC-12 did in response to this, but the effect was to zero the orbital gradient and make the energy negative NaN. The code should either recover gracefully if possible or, if not possible, quit ASAP. For the benefit of @mdav2 and @mlestep there's a side problem with the SCF converging to the wrong state. I'll add this as a post to the SCF topic when I've investigated further. I can tell you now that the ""true"" ground state seems to break CFOUR. [odc12_nan.txt](https://github.com/psi4/psi4/files/2254898/odc12_nan.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1117:270,recover,recover,270,https://psicode.org,https://github.com/psi4/psi4/issues/1117,1,['recover'],['recover']
Safety,"With `ENABLE_bse`, BSE tries to install in the wrong place; ```; [ 11%] Installing Psi4-detected BLAS/LAPACK; [ 11%] Performing build step for 'bse_external'; -- Install configuration: ""Release""; [ 11%] Built target lapack_external; /usr/lib/python3.11/site-packages/setuptools/dist.py:530: UserWarning: Normalizing 'v1.8+60.gdf9a0dd5b' to '1.8+60.gdf9a0dd5b'; warnings.warn(tmpl.format(**locals())); running build; running build_py; UPDATING build/lib/basis_set_exchange/_version.py; set build/lib/basis_set_exchange/_version.py to 'v1.8+60.gdf9a0dd5b'; [ 17%] Performing install step for 'bse_external'; /usr/lib/python3.11/site-packages/setuptools/dist.py:530: UserWarning: Normalizing 'v1.8+60.gdf9a0dd5b' to '1.8+60.gdf9a0dd5b'; warnings.warn(tmpl.format(**locals())); running install; /usr/lib/python3.11/site-packages/setuptools/command/install.py:34: SetuptoolsDeprecationWarning: setup.py install is deprecated. Use build and pip and other standards-based tools.; warnings.warn(; running build; running build_py; UPDATING build/lib/basis_set_exchange/_version.py; set build/lib/basis_set_exchange/_version.py to 'v1.8+60.gdf9a0dd5b'; running install_lib; copying build/lib/basis_set_exchange/_version.py -> /home/work/psi4/objdir/stage/lib/basis_set_exchange; byte-compiling /home/work/psi4/objdir/stage/lib/basis_set_exchange/_version.py to _version.cpython-311.pyc; running install_data; copying LICENSE -> /usr/local/; error: could not create '/usr/local/LICENSE': Permission denied; make[2]: *** [external/upstream/bse/CMakeFiles/bse_external.dir/build.make:105: external/upstream/bse/bse_external-prefix/src/bse_external-stamp/bse_external-install] Error 1; make[1]: *** [CMakeFiles/Makefile2:11190: external/upstream/bse/CMakeFiles/bse_external.dir/all] Error 2; make: *** [Makefile:146: all] Error 2; (p4env) [susi@lenovo objdir]$ ccmake . ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3067:88,detect,detected,88,https://psicode.org,https://github.com/psi4/psi4/issues/3067,1,['detect'],['detected']
Safety,"With the following input file, I noticed that there's an uncaught C++ exception that crashes the program hard; ```; $ cat input.dat ; memory 8640 Mb; molecule dimer {; 1 1; K -4.067042 -1.894214 0.002270; }; set dft_grid_name SG1; set dft_vv10_radial_points 50; set dft_vv10_spherical_points 194; set dft_nuclear_scheme treutler; set dft_radial_scheme EM; set basis def2-TZVPPD; ene = energy(""wB97M-V""); ```. Here's the error:. <details>; <summary> Expand </summary>. ```; $ psi4 input.dat ; terminate called after throwing an instance of 'psi::PsiException'; what(): ; Fatal Error: There is no SG-1 grid defined for the requested atomic number!; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1557940846948/work/psi4/src/psi4/libfock/cubature.cc on line: 2451; The most recent 5 function calls were:; forrtl: error (76): Abort trap signal; Image PC Routine Line Source ; libgdma.so 00007F895301610F for__signal_handl Unknown Unknown; libpthread-2.26.s 00007F895EC247E0 Unknown Unknown Unknown; libc-2.26.so 00007F895E89BB20 gsignal Unknown Unknown; libc-2.26.so 00007F895E89CFC8 abort Unknown Unknown; libint.so 00007F8933297319 _ZN9__gnu_cxx27__ Unknown Unknown; libint.so 00007F8933296839 _ZN10__cxxabiv111 Unknown Unknown; libint.so 00007F89332968D1 __cxa_call_termin Unknown Unknown; libint.so 00007F8933296600 __gxx_personality Unknown Unknown; libgcc_s.so.1 00007F895EEB9AAB Unknown Unknown Unknown; libgcc_s.so.1 00007F895EEB9F49 _Unwind_Resume Unknown Unknown; core.cpython-37m- 00007F8955C9BDC5 Unknown Unknown Unknown; core.cpython-37m- 00007F8955C94F6C Unknown Unknown Unknown; libiomp5.so 00007F8913F603F3 __kmp_invoke_micr Unknown Unknown; libiomp5.so 00007F8913EE4937 __kmp_fork_call Unknown Unknown; libiomp5.so 00007F8913EA8533 __kmpc_fork_call Unknown Unknown; core.cpython-37m- 00007F8955C947E1 Unknown Unknown Unknown; core.cpython-37m- 00007F8955CA73C0 Unknown Unknown Unknown; core.cpython-37m- 00007F8955CA62DC Unknown Unknown Unknown; core.cpython-37m",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2080:848,Abort,Abort,848,https://psicode.org,https://github.com/psi4/psi4/issues/2080,1,['Abort'],['Abort']
Safety,"Wraps new lapack function tests in a Fortran_ENABLED block; and resolves OpenMP linking issues. Ultimately, we'd want to change the detection from a Fortran function to a C function. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1342:132,detect,detection,132,https://psicode.org,https://github.com/psi4/psi4/pull/1342,1,['detect'],['detection']
Safety,"XC_WB97M_V: 1.00E-13 . => Molecular Quadrature <=. Radial Scheme = TREUTLER; Pruning Scheme = NONE; Nuclear Scheme = TREUTLER. Blocking Scheme = OCTREE; BS radius alpha = 1; Pruning alpha = 1; Radial Points = 75; Spherical Points = 302; Total Points = 2115829; Total Blocks = 14225; Max Points = 256; Max Functions = 1539; Weights Tolerance = 1.00E-15. => Loading Basis Set <=. Name: (DEF2-TZVPPD AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1-33 entry C line 198 file /aerosol/users/njzjz/anaconda3/envs/p4env/share/psi4/basis/def2-universal-jkfit.gbs ; atoms 34-89 entry H line 18 file /aerosol/users/njzjz/anaconda3/envs/p4env/share/psi4/basis/def2-universal-jkfit.gbs ; atoms 90-101 entry N line 258 file /aerosol/users/njzjz/anaconda3/envs/p4env/share/psi4/basis/def2-universal-jkfit.gbs ; atoms 102-106 entry O line 318 file /aerosol/users/njzjz/anaconda3/envs/p4env/share/psi4/basis/def2-universal-jkfit.gbs . ==> Integral Setup <==. PSIO_ERROR: unit = 97, errval = 12; forrtl: error (76): Abort trap signal; Image PC Routine Line Source ; libgdma.so 00007F6F7C68B10F for__signal_handl Unknown Unknown; libpthread-2.28.s 00007F6F9C906B20 Unknown Unknown Unknown; libc-2.28.so 00007F6F9BDDC37F gsignal Unknown Unknown; libc-2.28.so 00007F6F9BDC6DB5 abort Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6B535A Unknown Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6B53C5 Unknown Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6B5658 Unknown Unknown Unknown; core.cpython-310- 00007F6F88B5A129 Unknown Unknown Unknown; core.cpython-310- 00007F6F88B69438 _ZN3psi4PSIO2rwEm Unknown Unknown; core.cpython-310- 00007F6F88B6B963 _ZN3psi4PSIO5writ Unknown Unknown; core.cpython-310- 00007F6F88B566E9 Unknown Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6DFBF4 Unknown Unknown Unknown; libpthread-2.28.s 00007F6F9C8FC14A Unknown Unknown Unknown; libc-2.28.so 00007F6F9BEA1DC3 clone Unknown Unknown; /var/spool/slurm/slurmd/job83930/slurm_script: line 27: 2245656 Aborted (core dumped). ```. </details>. CPU",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2970:12217,Abort,Abort,12217,https://psicode.org,https://github.com/psi4/psi4/issues/2970,1,['Abort'],['Abort']
Safety,XHOST detection fails,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2023:6,detect,detection,6,https://psicode.org,https://github.com/psi4/psi4/issues/2023,1,['detect'],['detection']
Safety,"[GeomeTRIC](https://github.com/leeping/geomeTRIC) - Geometry optimizations in the TRIC coordinate system. # First Time Contributors; - Peter Kraus (@PeterKraus) - #949, #937, #922, #904; - Holger Kruse (@hokru) - #877, #912, #914 ; - Shannon Houk(@shannonhouck) - #850, #876 ; - Johnathan Waldrop (@jwaldrop107) - #921; - Marvin Lechner (@mhlechner) - #698; - Jonathon Misiewicz (@JonathonMisiewicz) - #895, #882, #873, #849, #825 ; - Adam Abbott (@adabbott) - #761; - Thomas Sexton (@tsexton) - #780 ; - Tianyuan Zhang (@tyzhang1993) - #743 ; - Dom Sirianni (@dsirianni) - #776, #952; - Asim Alenaizan (@alenaizan) - #956 . # Performance Optimizations; - Density Fitted 3-index AO->MO transformation significantly improved.; - MemDFJK module up to 2x as fast as original DFJK for in-core operations.; - DFT XC kenels threaded with a more efficient vectorization.; - DFT collocation matrix generation vectorized and exploits cache-level localization.; - All matrix and vector operations threaded for MIC and large Xeon/EPYC nodes to avoid bottlenecks. # Psi Developer Upgrade Guide; * The driver method `property(...)` has moved to`properties(...)` to avoid python namespace conflicts.; * If you have a (non-py-only) plugin, ; * Add `PSI_API` to your plugin code in [this pattern](https://github.com/edeprince3/v2rdm_casscf/commit/7d4507d8979b61b3333fc6ceab450a61392836ff); * If, upon rebuilding against psi4, you get symbol not found errors, run `c++filt` on the mangled symbol name, then add `PSI_API` to the psi4 repo to make sure the `core.so` you're linking against is exporting the symbol you need. See example [here](https://github.com/psi4/psi4/pull/955). Or just file an issue with your lost symbol.; * Note that anyone wanting to re-use an objdir will need to **thoroughly** remove the old pybind11 v2.0.0 from detectability. This means:; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/includes/pybind11`; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/share/cmake/pybind11`; * `<objdir> rm -rf exte",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/959:2980,avoid,avoid,2980,https://psicode.org,https://github.com/psi4/psi4/issues/959,1,['avoid'],['avoid']
Safety,"[Recovered from the forums.](http://forum.psicode.org/t/segfault-projecting-wfn-onto-new-basis/945). User attempted a manual basis guess, with the following input file.; ```; molecule {; 0 5; FE 0.000000000000 0.000000000000 0.123274779640; F 1.565379000000 0.000000000000 -0.647320000000; F -0.000000000000 -1.700830000000 0.639825000000; F 0.000000000000 1.700830000000 0.639825000000; F -1.565379000000 -0.000000000000 -0.647320000000; }. set {; basis sto-3g; guess sad; scf_type direct; reference uhf; }. energy('hf'). basis {; assign 6-31++G**; assign Fe 6-31G**; }. set guess read; optimize('hf'); ```. The PSIO error that results is difficult to interpret. Can we catch the case of switching basis sets without cleaning and tell the user to either clean explicitly or use the `basis_guess` option, depending on what they're trying to do?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1329:1,Recover,Recovered,1,https://psicode.org,https://github.com/psi4/psi4/issues/1329,1,['Recover'],['Recovered']
Safety,"[Recovered from the forums.](http://forum.psicode.org/t/thermodynamic-analysis/1014/2). The post-frequency vibrational information is difficult to get at in-file with a Psithon (not PsiAPI). See the original topic for a listing of the difficulties. User reports that `thermo` did not return a dict, but `git blame` says the return value of `thermo` has been a dict for quite some time. In the end, Lori recommended not getting the information through thermo in the first place, but loading the vibrational record.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1331:1,Recover,Recovered,1,https://psicode.org,https://github.com/psi4/psi4/issues/1331,1,['Recover'],['Recovered']
Safety,"[Recovered from the forums](http://forum.psicode.org/t/sapt0-job-fail-i-am-a-beginner/1034). As the forum mangles input file syntax, be wary that there may be an error or two hiding here. User reported the following input. ; ```; memory 5000 Mb; molecule dimer {; 1 1; C 4.19994 3.08488 -1.76044; C 5.06954 2.46285 -0.64984; C 4.64327 1.0663 -0.28153; O 4.85673 0.07495 -0.94802; O 3.96234 1.04199 0.88706; H 4.61569 4.07213 -1.97225; H 4.3027 2.5025 -2.67989; H 6.10053 2.39646 -1.00395; C 3.46892 -0.23561 1.35315; H 5.0473 3.09629 0.23787; C 1.89576 1.98716 -1.88508; C 2.70489 3.20283 -1.38087; C 2.1115 4.4631 -2.00089; O 2.22564 4.69469 -3.21122; N 1.45755 5.29818 -1.17121; H 1.82029 2.0666 -2.97331; H 2.43364 1.05863 -1.68462; H 2.61952 3.26827 -0.29319; H 0.99607 6.1109 -1.5546; H 1.29463 5.07123 -0.20248; C 0.54897 1.25688 0.14654; C 0.49167 1.90422 -1.2458; C -0.42151 1.12609 -2.17481; O -0.30845 -0.10438 -2.3373; N -1.33375 1.83551 -2.84989; H 1.41314 1.64705 0.68692; H 0.72592 0.18975 0.02069; H 0.09209 2.91772 -1.16504; H -1.48178 2.81502 -2.66023; H -1.96292 1.36772 -3.48833; C -0.75822 2.9873 1.46817; C -0.71562 1.51535 0.97554; C -0.84126 0.54385 2.14223; O 0.07905 -0.22265 2.47636; N -2.01096 0.56868 2.81099; H -0.38444 3.03627 2.49566; H -0.05905 3.57117 0.86785; H -1.58667 1.32703 0.34288; H -2.1767 -0.18204 3.47055; H -2.8428 0.94125 2.3602; H -1.95043 4.30157 -0.69534; C -2.6631 3.78375 -0.0493; C -2.12926 3.68676 1.38656; C -1.95827 5.09276 1.94691; O -1.18692 5.90686 1.41866; N -2.67996 5.39713 3.0393; H -3.6084 4.33293 -0.07465; H -2.84925 2.79578 -0.47069; H -2.85563 3.14558 1.99767; H -3.31103 4.73323 3.45906; H -2.59711 6.3152 3.45181; C 4.60787 -0.8758 2.13999; H 3.13705 -0.83567 0.50868; H 2.61634 0.00579 1.97897; H 4.90463 -0.2111 2.95001; N 4.27305 -2.20998 2.77179; H 5.46495 -1.04265 1.48973; C 3.078 -2.08869 3.6774; C 4.01212 -3.24631 1.71507; C 5.4587 -2.64236 3.59063; H 2.19356 -1.85215 3.09367; H 3.27107 -1.30183 4.40339; H 2.93642 -3.0407",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1328:1,Recover,Recovered,1,https://psicode.org,https://github.com/psi4/psi4/issues/1328,1,['Recover'],['Recovered']
Safety,"[This block of code](https://github.com/psi4/psi4/blob/master/psi4/driver/qcdb/libmintsgshell.py#L222-L228) in libmintsgshell.py throws a UnboundLocalError when trying to recover from the ZeroDivisionError. ```; try:; norm = math.sqrt(1.0 / (tmp * e_sum)); except ZeroDivisionError:; self.PYcoef[i] = [1.0 for i in range(self.nprimitive())]; # Set the normalization; for i in range(self.nprimitive()):; self.PYcoef[i] *= norm; ```. Traceback; ```; Traceback (most recent call last):; File ""/prefix/bin/psi4"", line 260, in <module>; exec(content); File ""<string>"", line 27, in <module>; File ""/prefix/lib//psi4/driver/driver.py"", line 460, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/prefix/lib//psi4/driver/procrouting/proc.py"", line 1990, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/prefix/lib//psi4/driver/procrouting/proc.py"", line 1279, in scf_helper; base_wfn = core.Wavefunction.build(scf_molecule, core.get_global_option('BASIS')); File ""/prefix/lib//psi4/driver/p4util/python_helpers.py"", line 101, in pybuild_wavefunction; basis = core.BasisSet.build(mol, ""ORBITAL"", basis); File ""/prefix/lib//psi4/driver/p4util/python_helpers.py"", line 68, in pybuild_basis; key, resolved_target, fitrole, other, return_atomlist=return_atomlist); File ""/prefix/lib//psi4/driver/qcdb/libmintsbasisset.py"", line 661, in pyconstruct; return_atomlist=return_atomlist); File ""/prefix/lib//psi4/driver/qcdb/libmintsbasisset.py"", line 876, in construct; ecpbasisset = BasisSet(key, mol, ecp_atom_basis_shell); File ""/prefix/lib//psi4/driver/qcdb/libmintsbasisset.py"", line 148, in __init__; self.constructor_role_mol_shellmap(*args); File ""/prefix/lib//psi4/driver/qcdb/libmintsbasisset.py"", line 349, in constructor_role_mol_shellmap; n, xyz_ptr, bf_count, pt='Unnormalized', rpowers=rpowers[tst:tsp]); File ""/prefix/lib//psi4/driver/qcdb/libmintsgshell.py"", line 193, in __init__; self.normalize_shell(); File ""/prefix/lib//psi4/d",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/846:171,recover,recover,171,https://psicode.org,https://github.com/psi4/psi4/issues/846,1,['recover'],['recover']
Safety,_CXX11_DECLTYPE;HAS_CXX11_INITIALIZER_LIST;HAS_CXX11_LAMBDA;HAS_CXX11_LONG_LONG;HAS_CXX11_NULLPTR;HAS_CXX11_LIB_REGEX;HAS_CXX11_RVALUE_REFERENCES;HAS_CXX11_SIZEOF_MEMBER;HAS_CXX11_STATIC_ASSERT;HAS_CXX11_VARIADIC_TEMPLATES;HAVE_MKL_BLAS;HAVE_MKL_LAPACK;ENABLE_CHEMPS2=1;HAVE_MM_MALLOC_H;HAVE_DKH;HAVE_GDMA;HAVE_PCMSOLVER=1; -- The CXX compiler identification is Intel 17.0.0.20160721; -- The C compiler identification is Intel 17.0.0.20160721; -- Check for working CXX compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/icpc; -- Check for working CXX compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/icpc -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working C compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/icc; -- Check for working C compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/icc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- The Fortran compiler identification is Intel 17.0.0.20160721; -- Check for working Fortran compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort; -- Check for working Fortran compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort supports Fortran 90; -- Checking whether /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort supports Fortran 90 -- yes; -- Fortran ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/629:5838,Detect,Detecting,5838,https://psicode.org,https://github.com/psi4/psi4/issues/629,2,['Detect'],['Detecting']
Safety,_MALLOC_H;HAVE_DKH;HAVE_GDMA;HAVE_PCMSOLVER=1; -- The CXX compiler identification is GNU 4.8.2; -- The C compiler identification is GNU 4.8.2; -- Check for working CXX compiler: /cluster/apps/gcc/4.8.2/bin/g++; -- Check for working CXX compiler: /cluster/apps/gcc/4.8.2/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Check for working C compiler: /cluster/apps/gcc/4.8.2/bin/gcc; -- Check for working C compiler: /cluster/apps/gcc/4.8.2/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- The Fortran compiler identification is GNU 4.8.2; -- Check for working Fortran compiler: /cluster/apps/gcc/4.8.2/bin/gfortran; -- Check for working Fortran compiler: /cluster/apps/gcc/4.8.2/bin/gfortran -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90 -- yes; -- Fortran ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Performing Test has_check_all; -- Performing Test has_check_all - Success; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- ,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/581:10117,Detect,Detecting,10117,https://psicode.org,https://github.com/psi4/psi4/issues/581,2,['Detect'],['Detecting']
Safety,"`; ==> Integral Setup <==. PSIO_ERROR: unit = 97, errval = 12; forrtl: error (76): Abort trap signal; Image PC Routine Line Source; libgdma.so 00007F6F7C68B10F for__signal_handl Unknown Unknown; libpthread-2.28.s 00007F6F9C906B20 Unknown Unknown Unknown; libc-2.28.so 00007F6F9BDDC37F gsignal Unknown Unknown; libc-2.28.so 00007F6F9BDC6DB5 abort Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6B535A Unknown Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6B53C5 Unknown Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6B5658 Unknown Unknown Unknown; core.cpython-310- 00007F6F88B5A129 Unknown Unknown Unknown; core.cpython-310- 00007F6F88B69438 _ZN3psi4PSIO2rwEm Unknown Unknown; core.cpython-310- 00007F6F88B6B963 _ZN3psi4PSIO5writ Unknown Unknown; core.cpython-310- 00007F6F88B566E9 Unknown Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6DFBF4 Unknown Unknown Unknown; libpthread-2.28.s 00007F6F9C8FC14A Unknown Unknown Unknown; libc-2.28.so 00007F6F9BEA1DC3 clone Unknown Unknown; /var/spool/slurm/slurmd/job83930/slurm_script: line 27: 2245656 Aborted (core dumped); ```. I used conda to install psi4 in a new environment.; ```; psi4 1.7+6ce35a5 py310h769327c_1 psi4; ```. Below is the full log, which includes the geometry:. <details>. ```. Memory set to 7.451 GiB by Python driver.; Threads set to 4 by Python driver. Scratch directory: /scratch/njzjz/83930/; gradient() will perform analytic gradient computation. *** tstart() called on aerosol-020; *** at Fri May 26 20:10:38 2023. => Loading Basis Set <=. Name: DEF2-TZVPPD; Role: ORBITAL; Keyword: BASIS; atoms 1-33 entry C line 144 file /aerosol/users/njzjz/anaconda3/envs/p4env/share/psi4/basis/def2-tzvppd.gbs ; atoms 34-89 entry H line 14 file /aerosol/users/njzjz/anaconda3/envs/p4env/share/psi4/basis/def2-tzvppd.gbs ; atoms 90-101 entry N line 181 file /aerosol/users/njzjz/anaconda3/envs/p4env/share/psi4/basis/def2-tzvppd.gbs ; atoms 102-106 entry O line 218 file /aerosol/users/njzjz/anaconda3/envs/p4env/share/psi4/basis/def2-tzvppd.gbs ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2970:1238,Abort,Aborted,1238,https://psicode.org,https://github.com/psi4/psi4/issues/2970,1,['Abort'],['Aborted']
Safety,"```; $ cat input.dat ; memory 8640 Mb; molecule dimer {; 1 1; K -4.067042 -1.894214 0.002270; }; set dft_grid_name SG1; set dft_vv10_radial_points 50; set dft_vv10_spherical_points 194; set dft_nuclear_scheme treutler; set dft_radial_scheme EM; set basis def2-TZVPPD; ene = energy(""wB97M-V""); ```. Here's the error:. <details>; <summary> Expand </summary>. ```; $ psi4 input.dat ; terminate called after throwing an instance of 'psi::PsiException'; what(): ; Fatal Error: There is no SG-1 grid defined for the requested atomic number!; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1557940846948/work/psi4/src/psi4/libfock/cubature.cc on line: 2451; The most recent 5 function calls were:; forrtl: error (76): Abort trap signal; Image PC Routine Line Source ; libgdma.so 00007F895301610F for__signal_handl Unknown Unknown; libpthread-2.26.s 00007F895EC247E0 Unknown Unknown Unknown; libc-2.26.so 00007F895E89BB20 gsignal Unknown Unknown; libc-2.26.so 00007F895E89CFC8 abort Unknown Unknown; libint.so 00007F8933297319 _ZN9__gnu_cxx27__ Unknown Unknown; libint.so 00007F8933296839 _ZN10__cxxabiv111 Unknown Unknown; libint.so 00007F89332968D1 __cxa_call_termin Unknown Unknown; libint.so 00007F8933296600 __gxx_personality Unknown Unknown; libgcc_s.so.1 00007F895EEB9AAB Unknown Unknown Unknown; libgcc_s.so.1 00007F895EEB9F49 _Unwind_Resume Unknown Unknown; core.cpython-37m- 00007F8955C9BDC5 Unknown Unknown Unknown; core.cpython-37m- 00007F8955C94F6C Unknown Unknown Unknown; libiomp5.so 00007F8913F603F3 __kmp_invoke_micr Unknown Unknown; libiomp5.so 00007F8913EE4937 __kmp_fork_call Unknown Unknown; libiomp5.so 00007F8913EA8533 __kmpc_fork_call Unknown Unknown; core.cpython-37m- 00007F8955C947E1 Unknown Unknown Unknown; core.cpython-37m- 00007F8955CA73C0 Unknown Unknown Unknown; core.cpython-37m- 00007F8955CA62DC Unknown Unknown Unknown; core.cpython-37m- 00007F8955E6A8F0 _ZN3psi5VBase10in Unknown Unknown; core.cpython-37m- 00007F8955E6A209 Unknown Unknown Unkno",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2080:1106,abort,abort,1106,https://psicode.org,https://github.com/psi4/psi4/issues/2080,1,['abort'],['abort']
Safety,"`initialize_lebedev` wasn't ever actually called. Since we're using c++11 elsewhere, we can just use an initializer_list to build `lebedev_mapping_` and skip all this `initialize_lebedev` nonsense. Also changes the technically-thread-unsafe `[]` to a `.at()` so this can't be re-broken later. Now, it turns out that there's a lot more ado about `SpherialGrid` and `RadialGrid` and cubature.cc in general, but, we're discussing that over in #2736 . This PR's purpose is JUST to fix the nasty bug that could cause parallel code to hang (if multiple threads tried to touch `lebedev_mapping_` at once, and write a value because `[]` access fills-when-missing, one or more thread could get stuck forever in a tree-that-has-become-a-loop). See #2736 for more details on who/what/where/when/why.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2743:234,unsafe,unsafe,234,https://psicode.org,https://github.com/psi4/psi4/pull/2743,1,['unsafe'],['unsafe']
Safety,"`libsapt_solver` has many manual BLAS calls that could be written in a way that is both more transparent and more memory-safe by using the machinery of `libmints`. For example, [this fragment](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libsapt_solver/sapt.cc#L223-L230) of code is just a verbose way to do `linalg::triplet`. This is just one of _many_ examples throughout the module, and I recommend that our two SAPT-based groups invest the time to clean this module up.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2337:121,safe,safe,121,https://psicode.org,https://github.com/psi4/psi4/issues/2337,1,['safe'],['safe']
Safety,"a psi4 build.). Which is where my runs always hang (on the [] access, specifically) when they do. If I pop open gdb, attach, and check what lebedev_mapping_ looks like, I see something somewhat disturbing:. ```; #4 psi::SphericalGrid::build (scheme="""", npoints=1852534357, points=0x1b2) at /tmp/garden-install.1c2be761ae20/psi4-1.6.1-desres02-c7/psi4/src/psi4/libfock/cubature.cc:5142; 5142 /tmp/garden-install.1c2be761ae20/psi4-1.6.1-desres02-c7/psi4/src/psi4/libfock/cubature.cc: No such file or directory.; (gdb) print lebedev_mapping_; $5 = std::map with 6 elements = {; [26] = 0,; [26] = 0,; [26] = 0,; [26] = 0,; [26] = 0,; [26] = 0; }; ```. Which is obviously not correct in two ways:; 1. There shouldn't be multiple entries for 26; 2. The entry for 26 should be 3. The threads are all deadlocking on the `[]` access, probably because multiple threads all tried to access an _unset_ entry of 26, wrote 0 to it in the process, and ran into each other. From what I can find `[]` isn't thread-safe (because of situations like this), and `.at()` should be used instead. Since `lebedev_mapping_` is a static member of `SphericalGrid`, all threads within their nice shiny `new SphericalGrid()`s inside `SphericalGrid::build` are still accessing the same global map, and mayhem is happening in the process. ...but the more disturbing problem, IMO, is that `lebedev_mapping_` appears uninitialized up until this point. I suspect in an ideal codebase all entries in `lebedev_mapping_` that would ever be accessed would already exist, so the difference between `[]` and `.at()` is just the slight performance hit in the latter of checking that the entry exists. There _is_ a function that's supposed to take care of this... https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/cubature.cc#L5125. But from what I can tell, it never gets called. In the attached minimal example I set a breakpoint at `void SphericalGrid::initialize_lebedev()` and it's _never hit_. I also set a breakpoint at `s-",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2735:1672,safe,safe,1672,https://psicode.org,https://github.com/psi4/psi4/issues/2735,1,['safe'],['safe']
Safety,"accessible. Presently useful for (1) people and (2) the in-repo psi4-path-advisor.py script, but more uses can follow.; - [x] add in-repo `conda/psi4-path-advisor.py` script to serve as build helper. this is the main point of the PR. will elaborate more in future.; - [x] there's a tidy new way of defining flags that are essential for the compiler _with_ the compiler in `CMAKE_<LANG>_COMPILER` instead of cluttering up the user choice var `CMAKE_<LANG>_FLAGS`. This is especially relevant for intel compilers that need gcc passed. There's something that's not set up right yet for Intel Clang. Thus, we need to pass `CMAKE_<LANG>_COMPILER_ARG1` through to psi4 subproject and all other externals.; - [x] let ctest tests run whether old or new d3 and gcp implementations present.; - [x] don't expect a pylibefpConfig.cmake for libefp detection. this is the case with the c-f package -- I'll probably put it back later when libefp/pylibefp repos combine.; - [x] I was using inconsistent naming for basis_set_exchange detection/import, so fix that.; - [x] adapt docs build so that it can use Ninja (or presumably any non-Makefiles) generator. The special thing about Makefiles is that it works as expected for glob depends. So we can tell the basis table to regenerate if any of the gbs files change. Other generators won't understand this. But most docs builds are one-off, not continuous development anyways, so it's worth no globs and yes flexibility. ADDED: switched to ninja for docs and docs-pr (ok memory-wise at max parallelism b/c debug build). ADDED 12 Nov; - [x] update ecosystem and docs GHA and linux azure to use the path-advisor env/cache procedure. this helps keep the path-advisore procedure tested and keeps testing envs up-to-date. alternate testing can still be imposed by `sed`ing the envs.; - [x] in azure linux, use the three testing lanes to go beyond quicktests. apart from some longer tests, we're now hitting all but stdsuite non-quick. ; - [x] fixed the windows nightly buil",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3021:3165,detect,detection,3165,https://psicode.org,https://github.com/psi4/psi4/pull/3021,1,['detect'],['detection']
Safety,"ack (most recent call last):; File ""/usr/local/bin/psi4"", line 338, in <module>; exec(content); File ""<string>"", line 31, in <module>; File ""/usr/local/lib/psi4/driver/driver.py"", line 613, in gradient; plan.compute(); File ""/usr/local/lib/psi4/driver/driver_findif.py"", line 1306, in compute; t.compute(client=client); File ""/usr/local/lib/psi4/driver/task_base.py"", line 166, in compute; self.result = qcng.compute(; File ""/usr/local/lib/python3.9/site-packages/qcengine/compute.py"", line 105, in compute; output_data = executor.compute(input_data, config); File ""/usr/local/lib/python3.9/site-packages/qcengine/programs/psi4.py"", line 121, in compute; pversion = parse_version(self.get_version()); File ""/usr/local/lib/python3.9/site-packages/qcengine/programs/psi4.py"", line 90, in get_version; exc[""proc""].wait(timeout=30); File ""/usr/local/lib/python3.9/subprocess.py"", line 1189, in wait; return self._wait(timeout=timeout); File ""/usr/local/lib/python3.9/subprocess.py"", line 1909, in _wait; raise TimeoutExpired(self.args, timeout). subprocess.TimeoutExpired: Command '['/usr/local/bin/psi4', '--version']' timed out after 30 seconds. Printing out the relevant lines from the Psithon --> Python processed input file:; core.IO.set_default_namespace(""h2o""); core.set_global_option(""REFERENCE"", ""uhf""); core.set_global_option(""BASIS"", ""DZ""); core.set_global_option(""ROOTS_PER_IRREP"", [0, 0, 1, 0]); analytic_grad = gradient('eom-ccsd'); --> findif_grad = gradient('eom-ccsd', dertype=0); compare_matrices(analytic_grad, findif_grad, 5, ""UHF-EOM-CCSD finite-diff. (3-pt.) vs. analytic gradient to 10^-5""); core.set_local_option(""FINDIF"", ""POINTS"", 5); findif_grad = gradient('eom-ccsd', dertype=0); compare_matrices(analytic_grad, findif_grad, 6, ""UHF-EOM-CCSD finite-diff. (5-pt.) vs. analytic gradient to 10^-7""). !----------------------------------------------------------------------------!; ! !; ! Command '['/usr/local/bin/psi4', '--version']' timed out after 30 seconds !; ! !; !---------",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2803:1074,Timeout,TimeoutExpired,1074,https://psicode.org,https://github.com/psi4/psi4/issues/2803,1,['Timeout'],['TimeoutExpired']
Safety,"ads(N)`. Can be overruled in PsiAPI mode through `set_num_threads(N)`.; - [x] Fix `atexit` deregistering in Py3; - [x] Removed get_/set_num_threads driver wrappers. Still looks the same to users. Prints ""Threads set to %d by Python driver"" in output file so there's a record of the change.; - [x] `psi4.compare_values()` and friends adapted to work with pytest upon success. Recommended pattern: `ans = psi4.compare_values(normal test args here); assert ans`.; - [x] Set up pytest so can test installed psi4 free of cmake/ctest. For the moment, you need to be in `${top-level-psi4-dir}/tests/pytest`, have pytest installed (`conda install pytest`), have psi4 importable (`psi4 --psiapi-path`), and run `python -m pytest` or for more info, `python -m pytest -vs`.; - [x] Revive a ccsd(t) sp and an mp2 opt in the cfour interface. Add a pysmoke test.; - [x] Vital tweaks so that psiapi can handle more than vanilla calcs. Includes initializing efp in psi4.geometry, moving pcmsolver path detect to __init__, and the options clearing mentioned above.; - [x] Fix TargetHDF5 detection for detect pre-built case (i.e., conda case). * **User-Facing for Release Notes**; - [x] CMake 3.3 now required; - [x] Using `OMP_NUM_THREADS` and/or `MKL_NUM_THREADS` to guide parallelism in Psi4 is _now deprecated_. Psi4 won't pay the least attention to these variables.; - [x] Added `psi4 --psiapi-path` command-line argument. This prints the bash commands you need to execute to set up python interp and pythonpath in your shell to `python -c ""import psi4""`; - [x] Psi4 molecule strings passed to `psi4.geometry()` no longer balk at python-style comments, as these are filtered out.; - [x] Added a `psi4.clean_options()` fn (alongside `psi4.clean()` and `psi4.clean_variables()`) to reset the `P::e.options` object to its initial state. This is necessary for independent tests in pytest and will probably be useful for psiapi sessions.; - [x] Add pytest smoke tests for psi4 itself and psi4+addons (addon tests skip i",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/627:1706,detect,detect,1706,https://psicode.org,https://github.com/psi4/psi4/pull/627,1,['detect'],['detect']
Safety,"al Blocks = 14225; Max Points = 256; Max Functions = 1539; Weights Tolerance = 1.00E-15. => Loading Basis Set <=. Name: (DEF2-TZVPPD AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1-33 entry C line 198 file /aerosol/users/njzjz/anaconda3/envs/p4env/share/psi4/basis/def2-universal-jkfit.gbs ; atoms 34-89 entry H line 18 file /aerosol/users/njzjz/anaconda3/envs/p4env/share/psi4/basis/def2-universal-jkfit.gbs ; atoms 90-101 entry N line 258 file /aerosol/users/njzjz/anaconda3/envs/p4env/share/psi4/basis/def2-universal-jkfit.gbs ; atoms 102-106 entry O line 318 file /aerosol/users/njzjz/anaconda3/envs/p4env/share/psi4/basis/def2-universal-jkfit.gbs . ==> Integral Setup <==. PSIO_ERROR: unit = 97, errval = 12; forrtl: error (76): Abort trap signal; Image PC Routine Line Source ; libgdma.so 00007F6F7C68B10F for__signal_handl Unknown Unknown; libpthread-2.28.s 00007F6F9C906B20 Unknown Unknown Unknown; libc-2.28.so 00007F6F9BDDC37F gsignal Unknown Unknown; libc-2.28.so 00007F6F9BDC6DB5 abort Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6B535A Unknown Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6B53C5 Unknown Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6B5658 Unknown Unknown Unknown; core.cpython-310- 00007F6F88B5A129 Unknown Unknown Unknown; core.cpython-310- 00007F6F88B69438 _ZN3psi4PSIO2rwEm Unknown Unknown; core.cpython-310- 00007F6F88B6B963 _ZN3psi4PSIO5writ Unknown Unknown; core.cpython-310- 00007F6F88B566E9 Unknown Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6DFBF4 Unknown Unknown Unknown; libpthread-2.28.s 00007F6F9C8FC14A Unknown Unknown Unknown; libc-2.28.so 00007F6F9BEA1DC3 clone Unknown Unknown; /var/spool/slurm/slurmd/job83930/slurm_script: line 27: 2245656 Aborted (core dumped). ```. </details>. CPU information:. <details>. ```; processor : 15; vendor_id : GenuineIntel; cpu family : 6; model : 45; model name : Intel(R) Xeon(R) CPU E5-2670 0 @ 2.60GHz; stepping : 6; microcode : 0x621; cpu MHz : 1832.125; cache size : 20480 KB; physical id : 1; siblings : 8; c",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2970:12475,abort,abort,12475,https://psicode.org,https://github.com/psi4/psi4/issues/2970,1,['abort'],['abort']
Safety,"ammatically available now through codedeps.yaml. ## Dev notes & details; - [x] add `codedeps.yaml` file that makes dependency and ecosystem information programmatically accessible. Presently useful for (1) people and (2) the in-repo psi4-path-advisor.py script, but more uses can follow.; - [x] add in-repo `conda/psi4-path-advisor.py` script to serve as build helper. this is the main point of the PR. will elaborate more in future.; - [x] there's a tidy new way of defining flags that are essential for the compiler _with_ the compiler in `CMAKE_<LANG>_COMPILER` instead of cluttering up the user choice var `CMAKE_<LANG>_FLAGS`. This is especially relevant for intel compilers that need gcc passed. There's something that's not set up right yet for Intel Clang. Thus, we need to pass `CMAKE_<LANG>_COMPILER_ARG1` through to psi4 subproject and all other externals.; - [x] let ctest tests run whether old or new d3 and gcp implementations present.; - [x] don't expect a pylibefpConfig.cmake for libefp detection. this is the case with the c-f package -- I'll probably put it back later when libefp/pylibefp repos combine.; - [x] I was using inconsistent naming for basis_set_exchange detection/import, so fix that.; - [x] adapt docs build so that it can use Ninja (or presumably any non-Makefiles) generator. The special thing about Makefiles is that it works as expected for glob depends. So we can tell the basis table to regenerate if any of the gbs files change. Other generators won't understand this. But most docs builds are one-off, not continuous development anyways, so it's worth no globs and yes flexibility. ADDED: switched to ninja for docs and docs-pr (ok memory-wise at max parallelism b/c debug build). ADDED 12 Nov; - [x] update ecosystem and docs GHA and linux azure to use the path-advisor env/cache procedure. this helps keep the path-advisore procedure tested and keeps testing envs up-to-date. alternate testing can still be imposed by `sed`ing the envs.; - [x] in azure linux",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3021:2983,detect,detection,2983,https://psicode.org,https://github.com/psi4/psi4/pull/3021,1,['detect'],['detection']
Safety,"ance for all the compare_* fns and added to docs.; - [x] light updating of user testing docs in build_planning.rst. - Misc.; - [x] improved `psi4.extras()` printing so you know what you're missing: `['adcc', 'ambit', 'c̶c̶t̶3̶', ...`; - [x] fixed some FutureWarnings like replacing `set_module_options`; - [x] added ""maxeco"" conda env files to devtools/ for each platform for developers/users who prefer those to psi4-dev conda package. they were generated from the ecosystem GHA but not autoupdated -- that may happen in a future GHA from master; - [x] added passing `CMAKE_OSX_DEPLOYMENT_TARGET` and `CMAKE_OSX_SYSROOT` cmakevars to internal builds. this is how the macOS SDK gets passed through, apparently, for C/C++. it happens through `CMAKE_Fortran_FLAGS` for Fortran. proven necessary for v2rdm_casscf, so I rolled it out to all the compiled externals.; - [x] for ambit, added Python and pb11 cmakevars that are proper for the new de-boosted and new-python-searched version. left old (capital PYTHON) for now. ## Questions; - [ ] PR is mostly CI, so non-user-facing, and testing supplements, so non-user-changing. But it requires cutting-edge pytest 7 (released Dec 2021) available from conda c-f and pypi, not from conda defaults yet. ok to demand of users? most aren't running pytests I would guess.; - [ ] In documenting psi4 compare functions, have to autodoc qcel compare fn, and that shows up a circular import in forward declaration of types (bet you didn't think that would be a sentence applied to Python 5 years ago) that produces a Sphinx warning. I've figured out how to edit qcel to avoid this, but until that makes its way into a release, we may have to turn off warnings-as-errors in psi4 docs build. ok?. close #1708. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge !SQUASH!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2454:6573,avoid,avoid,6573,https://psicode.org,https://github.com/psi4/psi4/pull/2454,1,['avoid'],['avoid']
Safety,"approaching the surface of an aromatic ring. There are 3 in the structure. I want to perform UV excitation on them to get an initial wavelength but running into problems. Is my error so far. My code looks something like this:. ```python. psi4.set_options({; 'scf_type': 'df',; 'g_convergence': 'gau',; 'freeze_core': 'true',; 'reference': 'uhf',; 'save_jk': True,; 'fail_on_maxiter': 'false'; }). molecule = 'X'. energy, wave_function = psi4.energy(; 'hf/6-311g',; return_wfn=True,; molecule=self.molecule; ). rpa = tdscf_excitations(wave_function, states=[10]); poles = [r[""EXCITATION ENERGY""] for r in rpa]; opa_residues = [np.linalg.norm(r[""ELECTRIC DIPOLE TRANSITION MOMENT (LEN)""])**2 for r in rpa]; ecd_residues = [r[""ROTATORY STRENGTH (LEN)""] for r in rpa]; opa_spectrum = spectrum(poles=poles, residues=opa_residues, gamma=0.01, out_units=""nm""); ```. Stacktrace Error:. ```python; File ""/home/sulstice/software/miniconda2/envs/qmpython3/lib/python3.9/site-packages/psi4/driver/procrouting/response/scf_response.py"", line 720, in tdscf_excitations; res_1 = _solve_loop(wfn, ptype, solve_function, singlets_per_irrep, maxiter, restricted, ""singlet""); File ""/home/sulstice/software/miniconda2/envs/qmpython3/lib/python3.9/site-packages/psi4/driver/procrouting/response/scf_response.py"", line 326, in _solve_loop; ret = solve_function(engine, nstates, guess_, maxiter); File ""/home/sulstice/software/miniconda2/envs/qmpython3/lib/python3.9/site-packages/psi4/driver/procrouting/response/scf_response.py"", line 690, in rpa_solver; return solvers.hamiltonian_solver(engine=e,; File ""/home/sulstice/software/miniconda2/envs/qmpython3/lib/python3.9/site-packages/psi4/driver/p4util/solvers.py"", line 989, in hamiltonian_solver; raise RuntimeError(msg); RuntimeError: The H2 matrix is not Positive Definite. This means the reference state is not stable.; ```. Running things I would maybe predict at UHF is not right and I don't think this is a coordinate optimization problem. Or what do y'all think?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3134:1932,predict,predict,1932,https://psicode.org,https://github.com/psi4/psi4/issues/3134,1,['predict'],['predict']
Safety,arallel; -- Definitions : USE_FCMANGLE_H;SYS_LINUX;HAVE_MKL_BLAS;HAVE_MKL_LAPACK;HAVE_MPI;HAVE_DKH; -- The CXX compiler identification is Intel 13.1.0.20130121; -- The C compiler identification is Intel 13.1.0.20130121; -- Check for working CXX compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpicxx; -- Check for working CXX compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpicxx -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working C compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpicc; -- Check for working C compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpicc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- The Fortran compiler identification is Intel 13.1.0.20130121; -- Check for working Fortran compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpif77; -- Check for working Fortran compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpif77 -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /opt/intel/impi/5.0.1.035/intel64/bin/mpif77 supports Fortran 90; -- Checking whether /opt/intel/impi/5.0.1.035/intel64/bin/mpif77 supports Fortran 90 -- yes; -- Fortran ENABLED; -- Buggy compiler support for C++11. Using older standard.; -- Checking for restrict keyword; -- keyword found : **restrict**; -- Performing Test has_xHost; -- Performing Test has_xHost - Success; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP Fortran flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -openmp; -- Found MPI_C: /opt/intel/impi/5.0.1.035/intel64/lib/libmpifort.so;/opt/intel/impi/5.0.1.035/intel64/lib/release/libmpi.so;/opt/intel/impi/5.0.1.035/i,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/201:5982,Detect,Detecting,5982,https://psicode.org,https://github.com/psi4/psi4/issues/201,2,['Detect'],['Detecting']
Safety,"atible with conda psi4 < 1.3rc1, 8 mo old; libint: 1.2.1-am8_1 # AM ** 8 **, compatible with compile-yourself psi4 only, deprecated, 19 mo old; ```. ### what can go wrong with conda psi4?. * Both latest psi4 and latest libint conda packages are compatible, so a fresh install `conda update psi4 libint -c psi4/label/dev` will be fine.; * However, if you have a conda environment and you update psi4 but not libint, then you'll have a >=1.3rc1 psi4 and the `_4` (see above) AM6 libint, which is trouble. Easy to solve by updating libint: `conda update libint -c psi4/label/dev`. After that, your `conda list` should say `_5`.; * If you have a conda env and you update libint but not psi4 (uncommon), that's also a problem. Update psi4. If what you really want is for the psi4 to work and the libint upgrade was a mistake, downgrade the libint: `conda install libint=1.2.1=h87b9b30_4 -c psi4`. ### what can go wrong with locally-built psi4?. * A major use of the `libint` conda package is to be a detectable pre-built dependency for a from-source psi4 compilation. If the `$CONDA_PREFIX/lib/libint.so` to which a psi4 `core.so` is linked suddenly changes identity, psi4 will be deranged.; * To fix this, `cmake` needs to detect the new libint headers and a half-dozen psi4 files need to rebuild.; ```; > cd <objdir>; > rm -rf external/upstream/libint/; > make; # cmake says: -- Found Libint 8: /home/psilocaluser/toolchainconda/envs/p4dev37/lib/libint.so (found version 1.2.1); ```; * If you need to avoid recompiling and instead revert your environment back to the AM6 libint, use the command in the last bullet of the previous section. ### Notes; * Only Linux affected. It took a week to build AM6 on the mac mini, so AM8 is not within reach. Thus, it's possible for the same job to run fine on linux binary but throw an angular momentum error on mac binary.; * `simint` max is AM7 both past and near future. Only `libint` is changing.; * Between higher AM and optimizing for multiple architectures, t",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1533:2261,detect,detectable,2261,https://psicode.org,https://github.com/psi4/psi4/issues/1533,1,['detect'],['detectable']
Safety,avoid macro rename vs l2 in integral.h,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2429:0,avoid,avoid,0,https://psicode.org,https://github.com/psi4/psi4/pull/2429,1,['avoid'],['avoid']
Safety,avoid overload_cast,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1454:0,avoid,avoid,0,https://psicode.org,https://github.com/psi4/psi4/pull/1454,1,['avoid'],['avoid']
Safety,"be net deletion of code lines. Lots of renaming of variables. Some bugs fixed -- I can only hope more than were added. Docstrings and code outline should be current. I didn't rework multilevel (separate file) except to make gradient run and allow different order of keys in user `levels` kwarg. I wouldn't bother with the diff. . ## Todos. - [x] `msgpack-python` added as req'd dependency. this keeps numpy arrays serialized when communicating in schema; - [x] any fns mirroring `sherrill_gold_standard` or `allen_focal_point` need to be reformatted and registered with `register_composite_function`; - [x] extrapolation functions for composite need to be registered with register_xtpl_function; - [x] CBS and xtpl functions need to be called as strings, not objects. So `energy('cbs', scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme='scf_xtpl_helgaker_3')` not `energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3)`.; - [x] no longer always evaluating gradient before Hessian to test safety of projecting rotations. Instead assuming unsafe. Can pass ref_gradient array to test on or `set findif fd_project` T/F explicitly to control.; - [x] `json_ret = psi4.schema_wrapper.run_qcschema(json_input)` not `json_ret = psi4.json_wrapper.run_json(json_input)`. json_ret is now an object, so `.` access, not dictionary. The old schema runner uses a schema circa pre-2018 and we've warned it's deprecated for about a year, so I went ahead and updated all the tests to the new/current run_qcschema.; - [x] Pre-ddd, CBS wrapper issues a `clean()` btwn calcs. Plain string modelchem calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. With ddd, this is no longer happening, so for occasional string modelchem calcs (that is, `energy|gradient|hessian(""mtd/bas"")` only), you may need to add a clean in the input. A few test cases now sport extra cleans. Signatures",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2575:3512,safe,safety,3512,https://psicode.org,https://github.com/psi4/psi4/pull/2575,1,['safe'],['safety']
Safety,"ble points (developer or user-interest) that this PR has or will accomplish.; - [ ] Create compute classes for nbody, CBS and findif; - [ ] Integrate QCArchive. ## Release Notes; - `msgpack-python` added as req'd dependency. this keeps numpy arrays serialized when communicating in schema; - python 3.8 requires pint 0.10; - add a logging file, presently `file.log` that currently is continuously appended; - any fns mirroring `sherrill_gold_standard` or `allen_focal_point` need to be reformatted and registered with `register_composite_function`; - extrapolation functions for composite need to be registered with `register_xtpl_function`; - CBS and xtpl functions need to be called as strings, not objects. So `energy('cbs', scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme='scf_xtpl_helgaker_3')` not `energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3)`.; - no longer always evaluating gradient before Hessian to test safety of projecting rotations. Instead assuming unsafe. Can pass `ref_gradient` array to test on or `set findif fd_project T/F` explcitly to control.; - `psi4.QMMM()` object replaced by `embedding_charges` kwarg in Bohr. See extern examples for details.; - `json_ret = psi4.schema_wrapper.run_qcschema(json_input)` not `json_ret = psi4.json_wrapper.run_json(json_input)`. `json_ret` is now an object, so `.` access, not dictionary.; - CBS wrapper issues a `clean()` btwn calcs. Plain string modelchem calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. This is no longer happening, so for occasional string modelchem calcs, you may need to add a clean in the input.; - extern object units are bohr, not whatever the Molecule was.; - `psi4 --module` returns the path for loading via `import psi4`. opposite of `psi4.executable`; - `psi4.set_output_file` now wraps `psi4.core.set_output_file` and additionally sets up a truncating ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351:1595,unsafe,unsafe,1595,https://psicode.org,https://github.com/psi4/psi4/pull/1351,1,['unsafe'],['unsafe']
Safety,"bs . ==> Integral Setup <==. PSIO_ERROR: unit = 97, errval = 12; forrtl: error (76): Abort trap signal; Image PC Routine Line Source ; libgdma.so 00007F6F7C68B10F for__signal_handl Unknown Unknown; libpthread-2.28.s 00007F6F9C906B20 Unknown Unknown Unknown; libc-2.28.so 00007F6F9BDDC37F gsignal Unknown Unknown; libc-2.28.so 00007F6F9BDC6DB5 abort Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6B535A Unknown Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6B53C5 Unknown Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6B5658 Unknown Unknown Unknown; core.cpython-310- 00007F6F88B5A129 Unknown Unknown Unknown; core.cpython-310- 00007F6F88B69438 _ZN3psi4PSIO2rwEm Unknown Unknown; core.cpython-310- 00007F6F88B6B963 _ZN3psi4PSIO5writ Unknown Unknown; core.cpython-310- 00007F6F88B566E9 Unknown Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6DFBF4 Unknown Unknown Unknown; libpthread-2.28.s 00007F6F9C8FC14A Unknown Unknown Unknown; libc-2.28.so 00007F6F9BEA1DC3 clone Unknown Unknown; /var/spool/slurm/slurmd/job83930/slurm_script: line 27: 2245656 Aborted (core dumped). ```. </details>. CPU information:. <details>. ```; processor : 15; vendor_id : GenuineIntel; cpu family : 6; model : 45; model name : Intel(R) Xeon(R) CPU E5-2670 0 @ 2.60GHz; stepping : 6; microcode : 0x621; cpu MHz : 1832.125; cache size : 20480 KB; physical id : 1; siblings : 8; core id : 7; cpu cores : 8; apicid : 46; initial apicid : 46; fpu : yes; fpu_exception : yes; cpuid level : 13; wp : yes; flags : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc cpuid aperfmperf pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm pti ssbd ibrs ibpb stibp tpr_shadow vnmi flexpriority ept vpid xsaveopt dtherm arat pln pts md_clear flush_l1d; bugs : cpu_meltdown sp",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2970:13175,Abort,Aborted,13175,https://psicode.org,https://github.com/psi4/psi4/issues/2970,1,['Abort'],['Aborted']
Safety,"c381/CMakeLists.txt#L173-L174) to set `HAVE_MKL`. Then in the code proper, `#include mkl.h` (that defines `__INTEL_MKL__`) and the [very important `mkl_set_num_threads()`](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libparallel/process.cc#L91-L93) were guarded by `HAVE_MKL` ifdefs. Then, on the fateful 23 Jun 2016 (https://github.com/psi4/psi4/commit/e07d645ea7acc85ae90d8c60a30f3426c977fc26) in the course of CMR, ConfigMath was blown away and all the `HAVE_MKL`s were replaced by `__INTEL_MKL__`. But that's circular because the mkl.h inclusions, which define `__INTEL_MKL__` were guarded by `__INTEL_MKL__` ifdefs. So Psi4 hasn't been threading MKL (though OMP threading has still been present). Story continues in bullet below. Identification and debugging of this issue by @dgasmith and Matt Schieber. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] ~~This PR identifies which of MKL, OPENBLAS, etc. has been detected by ConfigMath.~~ Identify MKL-or-not by searching for ""mkl"" in the full lapack library list, whether detected math or passed-in math. Colors ""MKL LAPACK"" to screen if ""on"". If MKL, attaches the `USING_LAPACK_MKL` compiler definition to the `tgt::lapack` target that every module of Psi4 is linked with. Thus we're getting MKL threading again.; - [x] Adds min version tags for dkh, gdma, erd; - [x] Adjusts where the required check comes in for hdf5 so we don't get an warning; - [x] Add docs with examples of math detection; - [x] Remove unused routes in math detection: explicit, external, mkl_flag; - [x] ConfigMath now FATAL_ERRORs if math libs _not_ found; - [x] Newly pays attention to headers for math. Only required for MKL.; - [x] Add a threading testing script for general maintenance, see comment below. In general tests where MKL found. Has compare_values, but really better suited for running by hand and judging results, as `-jN` defeats the purpose.; - [x] Added some CCSD(T) table do",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/615:1174,detect,detected,1174,https://psicode.org,https://github.com/psi4/psi4/pull/615,1,['detect'],['detected']
Safety,"cfg file anyways. all labels (things you can `pytest -m quick` akin to `ctest -L quick`) are stored here instead of duplicated btwn setup.cfg and conftest.py. The GHA will complain if you hit unregistered label.; - [x] changed the pytest import_mode from default to ""importlib"". this means (1) we don't need to have empty `__init__.py` in all 500 ctest directories and (2) avoid name conflicts when collecting ctests. Result is that tests/pytests is no longer a module, so a lot of the `from .utils import ...` become `from utils import ...` etc. Those names are looking generic, so may need to rename in future. - Testing Details; - [x] in tests, rewrote `using(package)` function whose role is to detect whether package present and skip test otherwise. now the fn additionally adds ""addon"" label and the name of the package label, so one can run `pytest -m dftd3`. to do this, had to separate into two fns: `uusing` for nested decorator marks and `using` for list marks.; - [x] to avoid FutureWarning, changed three `distutils.dir_util.copy_tree` into `shutil.copytree`. this is a py38 language feature, the first actual breaking of py37+ compatibility.; - [x] added the openfermion demo as test; - [x] apparently 3body in dftd3 fails on Mac. near-term goal is replacing, so skip for now; - [x] newly install pytest.ini and install any test_input.py, input.dat, and input.py from tests/ . sensibly, input.dat/py would only get installed if test_input.py present, but I can't teach cmake that logic, so it's either this or have to register each pytest-prepared psithon test. aux files from tests/ are also installed but these have to be registered with cmake.; - [x] moved `compare_moldenfiles()` from testing code to driver alongside `compare_fchkfiles()` so that it can be documented.; - [x] ""psi"" and ""api"" marks added to all tests/pytests/ files for reasons explained in docs. - Docs; - [x] Updated the add_tests documentation, esp. wrt pytest; - [x] Might have done enough of the outline to clos",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2454:3901,avoid,avoid,3901,https://psicode.org,https://github.com/psi4/psi4/pull/2454,1,['avoid'],['avoid']
Safety,"changes suggested by the modern C++ best-practices and are explained in detail in Scott Meyers' [Effective Modern C++]. . ## Why?; #### Prefer `std::make_shared` to direct use of `new`; Using `std::make_shared`:; 1. Reduces code verbosity, especially when coupled with `auto`:; ```; std::shared_ptr<Matrix> F = std::shared_ptr<Matrix>(new Matrix(""Fock matrix"", nso, nso)); // Type information written down 3 TIMES!!!; std::shared_ptr<Matrix> F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // So much typing...; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // Much better!!!!; ```; 2. Ensures exception safety and prevents resource leaks.; 3. Improves efficiency:; ```; // Performs TWO allocations; std::shared_ptr<Matrix> F = std::shared_ptr<Matrix>(new Matrix(""Fock matrix"", nso, nso)); ; // Performs ONE allocation; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); ; ```. _Reference_: Item 21 in [Effective Modern C++].; #### Prefer `auto` to explicit type declarations; Using `auto` reduces and/or avoids:; 1. Verbosity in variable declarations:; ```; std::shared_ptr<Matrix> F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // So much typing...; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // Much better!; ```; 2. Problems with uninitialized variables. `auto` works like template type deduction, hence the right-hand side of the declaration **needs to have** an initializer:; ```; int x1; // fine, but initialized :(; auto x2; // WON'T COMPILE!!!; auto x3 = 1; // fine and initialized; ```; 3. Problems with unintended type casts and type mismatches that are hard to impossible to catch:; ```; std::vector<int> v;; // !!! The size of a vector is of type std::vector<int>::size_type and is compiler- AND architecture-DEPENDENT; unsigned sz = v.size(); // might not be correct on some compiler/machines; auto size = v.size(); // size is ALWAYS of the correct type; ```; _Reference_: Items 2 and 5 in [Effective Modern C++].; #### Prefer `null",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/836:1380,avoid,avoids,1380,https://psicode.org,https://github.com/psi4/psi4/pull/836,1,['avoid'],['avoids']
Safety,clang-tidy apply modernize-redundant-void-arg fixes,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1317:27,redund,redundant-void-arg,27,https://psicode.org,https://github.com/psi4/psi4/pull/1317,1,['redund'],['redundant-void-arg']
Safety,"class calculates Mulliken / Loewdin charges and Bond Orders in commit: a6caee7 https://github.com/psi4/psi4/commit/a6caee7091afc6b0e8071ef0d077f93fcb6c9370; - - ESPPropCalc: This class allows calculation of fields on Grids in commit: ; 325149b https://github.com/psi4/psi4/commit/325149b31751b629486f0478cc5cfe1ee1ec9fb1. The rest of the commits are mostly fixups and linking up the three new classes to the old completely unchanged OEProp class, which now does not calculation itself. Also I implemented an in-memory routine calculating grid properties based on a grid, which was passed on.; The three new classes do not touch any global and no environment. They mostly exist without data storage for the grids, all functions have explicit (and mostly shared pointer return values).; Their complete setup is explicit. All environment variables are only set by OEProp. The reason is again: This allows to the new helpers to be used directly without any interference from Python and C++. The reason they were split this way: ESPPropCalc and PopulationAnalysisCalc and MultipolePropCalc do not share any members or variables. Example: only MPC requires an explicit origin to be set. ## Questions; - [x] I changed a return type to const & to avoid a large copy: https://github.com/psi4/psi4/commit/325149b31751b629486f0478cc5cfe1ee1ec9fb1#r30055651; - [x] The return type in compute_mo_extents is an actual vector instead of a Shared pointer. It contains maximum three elements, so I left it at that: https://github.com/psi4/psi4/commit/59005eed1c0bc8b893927284c31386eb4b715f1e#r30055734; - [x] I could remove the Prop baseclass completely from OEProp in the future. Only one function uses something from this. ## Checklist; - [x] Tests added for any new features; The tests are all still called from OEProp. The only new thing is the in-memory grid routine.; - [x] [All or relevant fraction of full tests run]; ctest -L quick was run. No errors. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1133:2301,avoid,avoid,2301,https://psicode.org,https://github.com/psi4/psi4/pull/1133,1,['avoid'],['avoid']
Safety,"clude/boost/mpi/collectives/broadcast.hpp:96: undefined reference to `MPI_Bcast'; ../../../lib/libpsio.a(rw.cc.o): In function `void boost::mpi::detail::broadcast_impl<unsigned long>(boost::mpi::communicator const&, unsigned long*, int, int, mpl_::bool_<true>)':; /blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-6.1.0/boost-1.61.0-deyw7xs6bmycmara46vfwnd3xnpbivxe/include/boost/mpi/collectives/broadcast.hpp:96: undefined reference to `MPI_Bcast'; ../../../lib/libpsio.a(volseek.cc.o): In function `void boost::mpi::detail::broadcast_impl<int>(boost::mpi::communicator const&, int*, int, int, mpl_::bool_<true>)':; /blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-6.1.0/boost-1.61.0-deyw7xs6bmycmara46vfwnd3xnpbivxe/include/boost/mpi/collectives/broadcast.hpp:96: undefined reference to `MPI_Bcast'; /blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-6.1.0/boost-1.61.0-deyw7xs6bmycmara46vfwnd3xnpbivxe/lib/libboost_mpi-mt.a(environment.o): In function `boost::mpi::environment::abort(int)':; environment.cpp:(.text+0x21d): undefined reference to `MPI_Abort'; /blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-6.1.0/boost-1.61.0-deyw7xs6bmycmara46vfwnd3xnpbivxe/lib/libboost_mpi-mt.a(environment.o): In function `boost::mpi::environment::initialized()':; environment.cpp:(.text+0x26b): undefined reference to `MPI_Initialized'; /blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-6.1.0/boost-1.61.0-deyw7xs6bmycmara46vfwnd3xnpbivxe/lib/libboost_mpi-mt.a(environment.o): In function `boost::mpi::environment::finalized()':; environment.cpp:(.text+0x2cb): undefined reference to `MPI_Finalized'; /blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-6.1.0/boost-1.61.0-deyw7xs6bmycmara46vfwnd3xnpbivxe/lib/libboost_mpi-mt.a(environment.o): In function `boost::mpi::environment::max_tag()':; environment.cpp:(.text+0x342): undefined reference to `MPI_Attr_get'; /blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-6.1.0/boost-1.61.0-deyw7xs6bmycm",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/411:27799,abort,abort,27799,https://psicode.org,https://github.com/psi4/psi4/issues/411,1,['abort'],['abort']
Safety,"corrupted header of a `timer.dat` file, represented w/ a latin-1 encoding (since it can't be read w/ the standard utf-8 encoding):; ```; Host: ip-172-31-XX-XXX.us-east-2.compute.interá^X. Timers On : Sat Sep 2 14:14:18 2023; Timers Off: Sat Sep 2 14:14:18 2023. Wall Time: 0.52 seconds. Time (seconds); Module User System Wall Calls. --------------------------------------------------------------------------------------; ```; In all of these problematic timer.dat files, the host name is truncated and ends with a random assortment of bytes. In the above example, the full host name should be `ip-172-31-XX-XXX.us-east-2.compute.internal`. We then examined how psi4 determines and processes the host name. It turns out, psi4 uses the `gethostname` function from the C API to get up to the first 40 bytes of the host name, and then it writes those bytes to `timer.dat`. The host name of this particular compute cluster is over 40 chars/bytes. This is unsafe because if a host name has more than 40 characters, the null byte (`\0`) won't be written to `timer.dat` to signify the end of the string, and psi4 will continue to write whatever is in memory past the 40 chars/bytes until it hits a null byte. This also explains the original error, b/c writing random bytes to a file can lead to non-utf-8-compliant files. It turns out that [linux defines a maximum host name length of 64](https://man7.org/linux/man-pages/man2/gethostname.2.html), so the easy fix here is to just increase the size of the host name buffer from 40 to 65 (== 64 + 1 for the null byte at the end). I have no idea why this length was previously limited to 40. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Fix bug resulting in `UnicodeDecodeError` and corrupted `timer.dat` files. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is c",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3043:2453,unsafe,unsafe,2453,https://psicode.org,https://github.com/psi4/psi4/pull/3043,1,['unsafe'],['unsafe']
Safety,"cting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Found PythonInterp: /home/amjames2/.conda/envs/py3/bin/python (found version ""3.5.2"") ; -- Found PythonLibs: /home/amjames2/.conda/envs/py3/lib/libpython3.so; -- Looking for include file pthread.h; -- Looking for include file pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE ; -- Found libdl: /usr/lib64/libdl.so ; CMake Error at CMakeLists.txt:35 (find_package):; Could not find a package configuration file provided by ""libefp"" with any; of the following names:. libefpConfig.cmake; libefp-config.cmake. Add the installation prefix of ""libefp"" to CMAKE_PREFIX_PATH or set; ""libefp_DIR"" to a directory containing one of the above files. If ""libefp""; provides a separate development package or SDK, be sure it has been; installed. -- Configuring incomplete, errors occurred!; ```. It seems that if I add two lines to the `CMAKE_ARGS` section of `ExternalProject_Add(psi4_core…` . ```; -Dlibint_DIR=${libint_DIR}; -Dlibefp_DIR=${libefp_DIR}; ```. Then the arguments that I pass on the command line are correctly fed into the psi4_core build. Currently they are not passed in but the step that would download/build them was skipped since they were detected in the initial CMake pass. The `CMAKE_PREFIX_PATH` option for detecting them works since that argument is currently passed through. The documentation should be edited to remove the suggestion that `-Dlibint_DIR` type options be used, or the source should be edited so that those arguments are passed through to the psi4_core build.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/516:3186,detect,detected,3186,https://psicode.org,https://github.com/psi4/psi4/issues/516,2,['detect'],"['detected', 'detecting']"
Safety,"d amplitudes to python](https://github.com/psi4/psi4/pull/1061) available satisfying the constraints and comments offered by @dgasmith and @amjames.; Exposing the T and Lambda amplitudes to the Python layer will have a series of beneficial consequences:; - It will be possible to experiment with these quantities easily.; - Writing and reading amplitudes to file ([HDF5](https://portal.hdfgroup.org/display/support), [Zarr](https://zarr.readthedocs.io/en/stable/), or any other format) is more easily managed from Python, especially if we need to preserve compatibility with Windows.; - Restart capabilities.; ## Summary of proposed changes (incomplete); ### cc* modules; - Create a single `cc` folder where all the other `cc*` folders will live as subfolders.; - Provide a top-level `CCWavefunction` class, partly modeled on the existing `CIWavefunction` class to overtake the whole implementation of the CC functionality.; - The class will manage `MOInfo`,` Params`, `DPD` as local data members. This will ensure that the lifetime of these objects is tied to a particular instance of a CC calculation.; - The class will contain the various steps in a CC calculation as methods. ; - Move from tstart-tstop to the new timers timer_on-timer_off; ### DPD Library ; - Remove use of static global machinery from DPD member functions. ; - Implement proper copy/move assign/construct for the DPD object. ; - Implement internal structs with proper constructors as needed.; - Replace c-style arrays/raw pointers with appropriate smart pointer/containers ; - Refactor shared state (shared by multiple DPD instances, currently dpd_gbl struct) into singleton(s). ; - **Note**: Memory tracking in its current form is not thread safe and relies on the client code properly locking calls to function that need to perform allocations with a mutex.; - DPD will handle opening/closing of psio files instead of requiring the user to do so. For visibility: @lothian @CDSherrill @andysim @jturney @fevangelista @dgasmith",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1247:1904,safe,safe,1904,https://psicode.org,https://github.com/psi4/psi4/issues/1247,1,['safe'],['safe']
Safety,"dec can't decode bytes in position 2-3: !; ! truncated \UXXXXXXXX escape !; ! !; !----------------------------------------------------------------------------------!; ```; I could track down the error to be raised from here:; https://github.com/psi4/psi4/blob/56738543906df86f94f2ee69b518d699b4a1ecd9/psi4/run_psi4.py#L333; when trying to execute 'content'.; The 'content' variable contains single backslashes in the windows path string (e.g. `'C:\Users'` instead of the correct `r'C:\Users'` or 'C:\\Users'`) which is responsible for the error.; I was able to fix the error via inserting; ```python; import platform; if platform.system() == ""Windows"":; content = content.replace(""'C:"", ""r'C:"").replace('""C:', 'r""C:'); ```; directly before aforementioned exec command.; That's quite a quick-and-dirty fix and I think it should be solved somewhere in the method called in; https://github.com/psi4/psi4/blob/56738543906df86f94f2ee69b518d699b4a1ecd9/psi4/run_psi4.py#L315; though I don't know how/where exactly to avoid unwanted side effects. Here's the whole traceback:; ```; ---------------------------------------------------------------------------; QiskitNatureError Traceback (most recent call last); <ipython-input-8-4cd496b3ad7e> in <module>; ----> 1 res = ucc_gsc.solve(es_problem); 2 ; 3 print(res). ~\Anaconda3\envs\qiskit-0-27-psi4-jupyter\lib\site-packages\qiskit_nature\algorithms\ground_state_solvers\ground_state_eigensolver.py in solve(self, problem, aux_operators); 80 # note that ``aux_ops`` contains not only the transformed ``aux_operators`` passed by the; 81 # user but also additional ones from the transformation; ---> 82 second_q_ops = problem.second_q_ops(); 83 ; 84 main_operator = self._qubit_converter.convert(. ~\Anaconda3\envs\qiskit-0-27-psi4-jupyter\lib\site-packages\qiskit_nature\problems\second_quantization\electronic\electronic_structure_problem.py in second_q_ops(self); 62 operator, and (if available) x, y, z dipole operators.; 63 """"""; ---> 64 self._molecule_dat",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2228:1615,avoid,avoid,1615,https://psicode.org,https://github.com/psi4/psi4/issues/2228,1,['avoid'],['avoid']
Safety,detect cppe module not lib,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2391:0,detect,detect,0,https://psicode.org,https://github.com/psi4/psi4/pull/2391,1,['detect'],['detect']
Safety,"e ""/usr/local/bin/psi4"", line 338, in <module>; exec(content); File ""<string>"", line 31, in <module>; File ""/usr/local/lib/psi4/driver/driver.py"", line 613, in gradient; plan.compute(); File ""/usr/local/lib/psi4/driver/driver_findif.py"", line 1306, in compute; t.compute(client=client); File ""/usr/local/lib/psi4/driver/task_base.py"", line 166, in compute; self.result = qcng.compute(; File ""/usr/local/lib/python3.9/site-packages/qcengine/compute.py"", line 105, in compute; output_data = executor.compute(input_data, config); File ""/usr/local/lib/python3.9/site-packages/qcengine/programs/psi4.py"", line 121, in compute; pversion = parse_version(self.get_version()); File ""/usr/local/lib/python3.9/site-packages/qcengine/programs/psi4.py"", line 90, in get_version; exc[""proc""].wait(timeout=30); File ""/usr/local/lib/python3.9/subprocess.py"", line 1189, in wait; return self._wait(timeout=timeout); File ""/usr/local/lib/python3.9/subprocess.py"", line 1909, in _wait; raise TimeoutExpired(self.args, timeout). subprocess.TimeoutExpired: Command '['/usr/local/bin/psi4', '--version']' timed out after 30 seconds. Printing out the relevant lines from the Psithon --> Python processed input file:; core.IO.set_default_namespace(""h2o""); core.set_global_option(""REFERENCE"", ""uhf""); core.set_global_option(""BASIS"", ""DZ""); core.set_global_option(""ROOTS_PER_IRREP"", [0, 0, 1, 0]); analytic_grad = gradient('eom-ccsd'); --> findif_grad = gradient('eom-ccsd', dertype=0); compare_matrices(analytic_grad, findif_grad, 5, ""UHF-EOM-CCSD finite-diff. (3-pt.) vs. analytic gradient to 10^-5""); core.set_local_option(""FINDIF"", ""POINTS"", 5); findif_grad = gradient('eom-ccsd', dertype=0); compare_matrices(analytic_grad, findif_grad, 6, ""UHF-EOM-CCSD finite-diff. (5-pt.) vs. analytic gradient to 10^-7""). !----------------------------------------------------------------------------!; ! !; ! Command '['/usr/local/bin/psi4', '--version']' timed out after 30 seconds !; ! !; !-------------------------------------------",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2803:1100,timeout,timeout,1100,https://psicode.org,https://github.com/psi4/psi4/issues/2803,1,['timeout'],['timeout']
Safety,"e CMake call and rewriting it is an exercise in code duplication. My understanding is the point of this file was meant to ease the transition to CMake from GNU Make. Well, I think it's safe to say we've transitioned.; ## Angle Brackets for Includes Clean Up. The vast majority of includes that incorrectly used angled-brackets have been changed to quotes. Although not exactly correct, for all intents and purposes, use quotes to indicate that a header file is part of the current project and angled-brackets indicate it is an external dependency. This is not just semantics, it changes how the compiler behaves. It also can lead to subtle hard to find bugs when you have very commonly named header files and you use directives like `using namespace std` all over the place.; ## Accessing Python Bindings. It used to be there were three ways to compile Psi4: for the conda binary, for an executable, and as a shared library that can be imported from Python. There was a ton of redundancy between the latter two and I consolidated them into one. Now all builds that are not making the conda binary, also produce callable Python bindings and an executable. This is simply done by packaging Psi4 up into a giant .so that we then link psi4.cc against. Because I am liable to forget here is an example of using Psi4 from python now, assuming `${CMAKE_INSTALL_PREFIX}/psi4/lib/psi4.so` is in your `PYTHONPATH`:. ``` .py; from psi4 import *; initialize(); #This has to come after initialize or else the global variables aren't right; import driver; set_global_option('BASIS', 'CC-PVDZ'); xyzstring = """"""; units angstrom; O 0.0000000000 0.0000000000 -0.0711762954; H 0.0000000000 -0.8916195680 0.5648097613; H 0.0000000000 0.8916195680 0.5648097613; """"""; efp_init(); my_mol = Molecule.create_molecule_from_string(xyzstring); my_mol.update_geometry(); driver.energy('scf',molecule=my_mol); ```. It would be nice to consolidate this somewhat, but I'll leave that for later. The segfault discussed on the forums ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442:8059,redund,redundancy,8059,https://psicode.org,https://github.com/psi4/psi4/pull/442,1,['redund'],['redundancy']
Safety,"eba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive_static.hpp(30),; from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive.hpp(18),; from /home/seba/software/psi4-0.5/src/lib/libmints/basisset.cc(29):. In file included from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive_static.hpp(30),; from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive.hpp(18),; from /home/seba/software/psi4-0.5/src/lib/libmints/basisset.cc(29):; /usr/include/c++/5/bits/stl_iterator_base_types.h(157): error: name followed by ""::"" must be a class or namespace name; typedef typename _Iterator::pointer pointer;; ^; In file included from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive_static.hpp(30),; from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive.hpp(18),; from /home/seba/software/psi4-0.5/src/lib/libmints/basisset.cc(29):; detected during:; In file included from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive_static.hpp(30),; from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive.hpp(18),; from /home/seba/software/psi4-0.5/src/lib/libmints/basisset.cc(29):; instantiation of class ""std::__iterator_traits<_Iterator, void> [with _Iterator=int]"" at line 163; In file included from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive_static.hpp(30),; from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive.hpp(18),; from /home/seba/software/psi4-0.5/src/lib/libmints/basisset.cc(29):; instantiation of class ""std::iterator_traits<_Iterator> [with _Iterator=int]"" at line 98 of ""/home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/regex_token_iterator.hpp""; In file included from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive_static.hpp(30),; from /home/seba/software/psi4-0.5/objects/boost/include",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/262:12217,detect,detected,12217,https://psicode.org,https://github.com/psi4/psi4/issues/262,1,['detect'],['detected']
Safety,ectorize -march=corei7-avx -mavx -fopenmp -O3 -funroll-all-loops -w -ftree-vectorize; -- Libraries : /cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so;/cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so; -- Definitions : USE_FCMANGLE_H;SYS_LINUX;HAS_CXX11;HAS_CXX11_FUNC;HAS_CXX11_AUTO;HAS_CXX11_AUTO_RET_TYPE;HAS_CXX11_CONSTEXPR;HAS_CXX11_CSTDINT_H;HAS_CXX11_DECLTYPE;HAS_CXX11_INITIALIZER_LIST;HAS_CXX11_LAMBDA;HAS_CXX11_LONG_LONG;HAS_CXX11_NULLPTR;HAS_CXX11_RVALUE_REFERENCES;HAS_CXX11_SIZEOF_MEMBER;HAS_CXX11_STATIC_ASSERT;HAS_CXX11_VARIADIC_TEMPLATES;ENABLE_CHEMPS2=1;HAVE_MM_MALLOC_H;HAVE_DKH;HAVE_GDMA;HAVE_PCMSOLVER=1; -- The CXX compiler identification is GNU 4.8.2; -- The C compiler identification is GNU 4.8.2; -- Check for working CXX compiler: /cluster/apps/gcc/4.8.2/bin/g++; -- Check for working CXX compiler: /cluster/apps/gcc/4.8.2/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Check for working C compiler: /cluster/apps/gcc/4.8.2/bin/gcc; -- Check for working C compiler: /cluster/apps/gcc/4.8.2/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- The Fortran compiler identification is GNU 4.8.2; -- Check for working Fortran compiler: /cluster/apps/gcc/4.8.2/bin/gfortran; -- Check for working Fortran compiler: /cluster/apps/gcc/4.8.2/bin/gfortran -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90 -- yes; -- Fortran ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/581:9456,Detect,Detecting,9456,https://psicode.org,https://github.com/psi4/psi4/issues/581,4,['Detect'],['Detecting']
Safety,"ed with a more efficient vectorization.; - DFT collocation matrix generation vectorized and exploits cache-level localization.; - All matrix and vector operations threaded for MIC and large Xeon/EPYC nodes to avoid bottlenecks. # Psi Developer Upgrade Guide; * The driver method `property(...)` has moved to`properties(...)` to avoid python namespace conflicts.; * If you have a (non-py-only) plugin, ; * Add `PSI_API` to your plugin code in [this pattern](https://github.com/edeprince3/v2rdm_casscf/commit/7d4507d8979b61b3333fc6ceab450a61392836ff); * If, upon rebuilding against psi4, you get symbol not found errors, run `c++filt` on the mangled symbol name, then add `PSI_API` to the psi4 repo to make sure the `core.so` you're linking against is exporting the symbol you need. See example [here](https://github.com/psi4/psi4/pull/955). Or just file an issue with your lost symbol.; * Note that anyone wanting to re-use an objdir will need to **thoroughly** remove the old pybind11 v2.0.0 from detectability. This means:; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/includes/pybind11`; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/share/cmake/pybind11`; * `<objdir> rm -rf external/upstream/pybind11`; * Intel 2016 is no longer a valid compiler (doesn't work with py11 >=2.2.1). # Developer Interests; - Now uses LibXC for DFT XC kernels (#698); - Reworked the building of superfunctionals to use dictionaries (#922); - SCF Wavefunctions can now do Hessian-Vector builds see `RHF.Hx` and `RHF.solve` for examples. (#760); - The DFT V Potential object now has Hessian-Vector functionality. (#698); - DFT Functionals now takes advantage of polarized vs unpolarized DFT kernels.; - Added generalized solvers in p4util/solvers.py. These include DIIS and conjugate gradient; - New density-fitted AO->MO transform object. More efficient than previous objects and has multiple modes depending on the type of computation (direct or AO storage).; - ECP SCF energies.; - ECP gradients by finite differences in P",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/959:3768,detect,detectability,3768,https://psicode.org,https://github.com/psi4/psi4/issues/959,1,['detect'],['detectability']
Safety,"ers for math. Only required for MKL.; - [x] Add a threading testing script for general maintenance, see comment below. In general tests where MKL found. Has compare_values, but really better suited for running by hand and judging results, as `-jN` defeats the purpose.; - [x] Added some CCSD(T) table docs requested by @CDSherrill ; * **User-Facing for Release Notes**; - [x] Change Mac math precedence to `MKL SYSTEM_NATIVE OPENBLAS ESSL ATLAS ACML` so native accelerate only behind MKL; - [x] New mechanism to pass in math libs explicitly through `LAPACK_LIBRARIES` and `LAPACK_INCLUDE_DIRS`; - [x] Collects all the addon libraries into a list, then forms RPATH of internal (relative to ORIGIN), then all non-static, non `/usr/` paths. Redundancy removed and math libs paths _always_ first. This takes over from `INSTALL_RPATH_USE_LINK_PATH`.; - [x] Bumped CMake minimum version to 3.2; - [x] Added some extra badges to README. ## Questions; - [x] I had already implemented the isMKL? detection in ConfigMath before I looked back and found [mkl testing] (https://github.com/psi4/psi4private/blob/71ea2ea8ee142ee42541c589c42977fff2d3c381/CMakeLists.txt#L173-L174). Do we want to do that way instead? Who added the ""NEEDS"" there? _From discussion below, No, bad idea._; - [x] @robertodr and/or @bast, I've commented out all the EXPLICIT_LIB and EXTERNAL_LIB stuff from ConfigMath because the new CMake scheme isn't doing anything with those libs, and the TargetLAPACK uses only `BLAS/LAPACK_LIBRARIES`. But we do need a way to take in a raw library string. By inclination, I would just have that if user specifies `BLAS/LAPACK_LIBRARIES`, then those get processed immediately into the TargetLAPACK. But I thought I'd see if you had other/opposing opinions. _From discussion below, they approve._; - [x] Currently require CMake 3.1. Can we require 3.2 (for `continue()`) or 3.3 (for HDF5 versioning)? 3.3 and 3.6 available on conda.; - [x] RPATH work focused on Linux. Mac I don't think is a problem, p",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/615:2865,detect,detection,2865,https://psicode.org,https://github.com/psi4/psi4/pull/615,1,['detect'],['detection']
Safety,"esolve the issue. in fact, running in `c2v` produces different energies, but they don't match GAMESS or the `symmetry c1` case:; ```; Psi4 LiCN/6-31G* (symmetry c2v, default [Davidson] solver); CI ROOT 1 TOTAL ENERGY:-99.52581092382692; CI ROOT 2 TOTAL ENERGY:-99.50960136455492; CI ROOT 3 TOTAL ENERGY:-99.47046293582866; CI ROOT 4 TOTAL ENERGY:-99.43820506440449; CI ROOT 5 TOTAL ENERGY:-99.39012366739456; CI ROOT 6 TOTAL ENERGY:-99.37979350854745; ```; maybe it's a preconditioner issue? the Davidson seems to converge in just one step for c1 and c2v. I suppose it's possible the guess space just isn't grabbing roots for all symmetries, but increasing the number of roots to 30 doesn't change the results. perhaps more disturbing, though, is that the in-core diagonization routine `RSP` gives yet another set of results:; ```; Psi4 LiCN/6-31G* (symmetry c1, RSP solver); CI ROOT 1 TOTAL ENERGY:-99.58887523722994; CI ROOT 2 TOTAL ENERGY:-99.56069933848028; CI ROOT 3 TOTAL ENERGY:-99.56069933848008; CI ROOT 4 TOTAL ENERGY:-99.53483755106353; CI ROOT 5 TOTAL ENERGY:-99.53483755106343; CI ROOT 6 TOTAL ENERGY:-99.53418772103414; ```; here, we find 3 roots lower in energy than either GAMESS or the default Psi4 routines, and we also recover the -99.534837 E_h root, but this time as a doubly-degenerate state. the other routines mentioned in [the manual; ](https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html#term-DIAG_METHOD-DETCI) are deprecated kwargs (see also: #2640 ), so I can't test them. . given [`np.linalg.eigh`](https://numpy.org/doc/stable/reference/generated/numpy.linalg.eigh.html) just uses LAPACK's syevd/heevd, and `RSP` is just supposed to be LAPACK's dsyev, this result is very perturbing. . I've attached output files for the [Davidson](https://github.com/psi4/psi4/files/13431543/output_dav.txt) and [RSP](https://github.com/psi4/psi4/files/13431545/output_rsp.txt) schemes, as well as [GAMESS](https://github.com/psi4/psi4/files/13431555/output_gms.txt).",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3083:2729,recover,recover,2729,https://psicode.org,https://github.com/psi4/psi4/issues/3083,1,['recover'],['recover']
Safety,"fit.gbs ); for((ib=0;ib<${#b[@]};ib++)); do for((jb=0;jb<ib;jb++)); do echo -n ""${b[ib]} vs ${b[jb]}: ""; diff ${b[ib]} ${b[jb]}| wc -l;done;done; def2-qzvpp-jkfit.gbs vs def2-qzvp-jkfit.gbs: 4; def2-sv_p_-jkfit.gbs vs def2-qzvp-jkfit.gbs: 1727; def2-sv_p_-jkfit.gbs vs def2-qzvpp-jkfit.gbs: 1727; def2-svp-jkfit.gbs vs def2-qzvp-jkfit.gbs: 1723; def2-svp-jkfit.gbs vs def2-qzvpp-jkfit.gbs: 1727; def2-svp-jkfit.gbs vs def2-sv_p_-jkfit.gbs: 4; def2-tzvp-jkfit.gbs vs def2-qzvp-jkfit.gbs: 0; def2-tzvp-jkfit.gbs vs def2-qzvpp-jkfit.gbs: 4; def2-tzvp-jkfit.gbs vs def2-sv_p_-jkfit.gbs: 1727; def2-tzvp-jkfit.gbs vs def2-svp-jkfit.gbs: 1723; def2-tzvpp-jkfit.gbs vs def2-qzvp-jkfit.gbs: 0; def2-tzvpp-jkfit.gbs vs def2-qzvpp-jkfit.gbs: 4; def2-tzvpp-jkfit.gbs vs def2-sv_p_-jkfit.gbs: 1727; def2-tzvpp-jkfit.gbs vs def2-svp-jkfit.gbs: 1723; def2-tzvpp-jkfit.gbs vs def2-tzvp-jkfit.gbs: 0; ```. According to @bennybp the sets should be all the same, see https://github.com/MolSSI-BSE/basis_set_exchange/issues/103. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] remove redundant def2-*-[jk|j]fit basis sets. Presuming Susi accepts my PR, this one will additionally accomplish; - [x] fixes #1798 At least make all the def2 orbital and rifit basis sets parseable. These have been read through diff_gbs.py so I know all the elements parse now. Variety of errors found.; - [x] helps #1804 by redirecting def2-*-jkfit specifications toward the universal files. only took about four files to find a satisfactory and minimally disruptive place for a simple map-and-warn :-(; - [x] helps plugins like v2rdm_casscf that are adding internal pb11 by attaching the found Python headers location to the plugin target. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1804:2245,redund,redundant,2245,https://psicode.org,https://github.com/psi4/psi4/pull/1804,1,['redund'],['redundant']
Safety,forrtl: error (76): Abort trap signal,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2084:20,Abort,Abort,20,https://psicode.org,https://github.com/psi4/psi4/issues/2084,1,['Abort'],['Abort']
Safety,"ftware/psi4-0.5/objects/boost/include/boost/xpressive/xpressive_static.hpp(30),; from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive.hpp(18),; from /home/seba/software/psi4-0.5/src/lib/libmints/basisset.cc(29):. In file included from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive_static.hpp(30),; from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive.hpp(18),; from /home/seba/software/psi4-0.5/src/lib/libmints/basisset.cc(29):; /usr/include/c++/5/bits/stl_iterator_base_types.h(155): error: name followed by ""::"" must be a class or namespace name; typedef typename _Iterator::value_type value_type;; ^; In file included from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive_static.hpp(30),; from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive.hpp(18),; from /home/seba/software/psi4-0.5/src/lib/libmints/basisset.cc(29):; detected during:; In file included from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive_static.hpp(30),; from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive.hpp(18),; from /home/seba/software/psi4-0.5/src/lib/libmints/basisset.cc(29):; instantiation of class ""std::__iterator_traits<_Iterator, void> [with _Iterator=int]"" at line 163; In file included from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive_static.hpp(30),; from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive.hpp(18),; from /home/seba/software/psi4-0.5/src/lib/libmints/basisset.cc(29):; instantiation of class ""std::iterator_traits<_Iterator> [with _Iterator=int]"" at line 98 of ""/home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/regex_token_iterator.hpp""; In file included from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive_static.hpp(30),; from /home/seba/software/psi4-0.5/objects/boost/include",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/262:8485,detect,detected,8485,https://psicode.org,https://github.com/psi4/psi4/issues/262,1,['detect'],['detected']
Safety,"g/; - [x] Rename some DFHelper timers for the sake of alignment in timer.dat; - [x] More work on test_threading python script that will check the mkl/omp linking of psi4.so and the dfmp2 plugin template (or any other .so). Also will run psithon and psiapi tests on psi4 and dfmp2 plugin to make sure multithreads at least 1.3x speedup over single-thread; - [x] Update docs on BLAS recommendations, conda compilers. cautions on OpenBLAS sufficient to close psi4/psi4#1009; * Real part; - BLAS/LAPACK, compiler, and OpenMP are handled independently but are actually intertwined. Greatest complication comes about psi compiled by Intel with MKL (req. iomp5), then plugin built off that psi by GCC with OpenMP=ON and end up with both gomp and iomp5 linked, which is a subtle disaster.; - What we have been doing: cmake/math finds mkl_rt and outright adds iomp5, pthreads, etc. external/common/lapack packages those all into a target to pass along to blas-using dependencies. Meanwhile cmake/autocmake_omp detects just OpenMP flags (e.g., `-fopenmp` and `-qopenmp`) for the various compilers add adds them directly to `CMAKE_CXX_FLAGS` (for propagation to to psi4 (and consequently plugins) but **not** to deps (which might have OpenMP=OFF)). Actual OpenMP _libraries_ are not handled (except the aforementioned iomp5 hard-code) so (1) gomp can intrude with GCC and (2) the nice `-fopenmp=iomp5` capabilities of Clang aren't used.; - Trouble with sending me on long car trips (i.e., LSU) is that I begin plotting how things _should_ be. This PR is my take on answering this. It's insane to spring it at this point in the release cycle, but the first time after Setca that I tried building an OpenMP plugin, it was mixing omp libs in a sad manner, so _some_ fix is needed, maybe less drastic than this.; - New cmake (>=3.10, I think) makes nice targets for OpenMP that are per-lang (Psi only cares about CXX) and include both flags and libraries. So in this PR, BLAS is handled as before, except it stops a",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1031:1315,detect,detects,1315,https://psicode.org,https://github.com/psi4/psi4/pull/1031,1,['detect'],['detects']
Safety,"gstrom; O 0.0000000000 0.0000000000 -0.0711762954; H 0.0000000000 -0.8916195680 0.5648097613; H 0.0000000000 0.8916195680 0.5648097613; """"""; efp_init(); my_mol = Molecule.create_molecule_from_string(xyzstring); my_mol.update_geometry(); driver.energy('scf',molecule=my_mol); ```. It would be nice to consolidate this somewhat, but I'll leave that for later. The segfault discussed on the forums is still present with this.; ## Fortran Name Mangling. This is a perpetual problem. The previous CMake build relied on the Fortran/C interface capabilities of CMake to generate a header. This seemed to work well, but as I understand it, it assumes that the Fortran compiler CMake is currently using is the one that compiled all Fortran libraries. Consequentially this does _NOT_ necessarily provide you with the correct mangling for externally compiled Fortran libraries. For Fortran libraries that we may are building, like ERD, DKH, etc. the name mangling should go through the CMake mangling detection mechanisms and the resulting header file included with the library. This allows other projects to link to these libraries without having to know the mangling scheme.; ## BLAS and LAPACK. Somewhat related to the previous point, Psi4 proper needs to know the mangling for LAPACK and BLAS. All distributions of BLAS have a header `cblas.h` (or `mkl-cblas.h` if you are using MKL), which does this for you. Similarly, all versions of LAPACK provide `lapacke.h` (again MKL makes things difficult and calls the header `mkl-lapacke.h`). Hence we really should be using these headers and not the stuff in `libqt` (or we should rewrite `libqt` in terms of those header files). One of the other gotchas of BLAS/LAPACK is detecting the actual libraries. The names are non-standardized and the CMake find_package for them is archaic. For the moment I am using the scripts the old build used to find BLAS/LAPACK. They are somewhat touchy, and overly verbose for my liking, but better than me having to write my own",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442:9678,detect,detection,9678,https://psicode.org,https://github.com/psi4/psi4/pull/442,1,['detect'],['detection']
Safety,"gytibor/.conda/envs/psi4gcc/include; echo $CFLAGS_USED; -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $CXXFLAGS; -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $CXXFLAGS_USED; -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $CPPFLAGS; -DNDEBUG -D_FORTIFY_SOURCE=2 -O2 -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $CPPFLAGS_USED; -DNDEBUG -D_FORTIFY_SOURCE=2 -O2 -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $FFLAGS; -fopenmp -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $FFLAGS_USED; -fopenmp -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $FORTRANFLAGS; -fopenmp -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; ```; Of particular concern, are the `-fstack-protector-strong` and `-D_FORTIFY_SOURCE=2` flags. Do release builds need runtime buffer/stack overflow checks?. I think most of the other flags are also somewhat redundant, I have done a build with `CXXFLAGS=""-fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=native -O3 -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include""` and all the other envvars also set similarly, and the build appears to be OK, no ctests or pytests failed.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2416:2084,redund,redundant,2084,https://psicode.org,https://github.com/psi4/psi4/issues/2416,1,['redund'],['redundant']
Safety,"h of these external projects simply worries about their dependencies and their building process. Finally, because each external project is a good CMake project it makes a `XXXConf.cmake` file or a `FindXXX.cmake` file is included in `psi4/cmake`, which set `XXX_LIBRARIES` and `XXX_INCLUDE_DIRS` appropriately. Hence all other external projects simply need to keep appending dependencies and everyone gets to play nicely together.; # Detailed Change Log; ## Build scripts. I metaphorically ripped all the old build scripts out and started fresh. In my opinion the scripts are far easier to read. It also means I may have not added some functionality back. In particular there were many complicated scripts for setting compile flags. At least on my box these scripts did not find all the optimizations to begin with (didn't turn on many of the Intel optimizations). They also didn't respect some of the CMake variables. The scripts themselves are designed to be quite terse by factoring out redundant code, although admittedly the `ExternalProject_Add` commands are still repetitive. Also note I heavily use empty targets and variables to avoid lots of if/else statements.; ## Added an External Folder. The top-level Psi4 directory is primarily split into a directory, `psi4`, where the source for the core of Psi4 lives and a folder `external` where optional modules and dependencies live. The general strategy for determining where something goes is if you personally didn't write the code, or it is intended to be used with many other packages, it probably falls under the category of going in the external folder. Each package in `external` should be designed in such a manner so that it doesn't leak dependencies into the core. For example if the package returns its results in a class `MyGreatMatrix` the wrapper code that copies it to a Psi4 `Matrix` should live in external. This prevents Psi4 proper from having to know about `MyGreatMatrix`. ; ## Libraries that are not part of Psi4 core are",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442:3086,redund,redundant,3086,https://psicode.org,https://github.com/psi4/psi4/pull/442,1,['redund'],['redundant']
Safety,"hOpenMP"". -- Found LAPACK MKL: /opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so;...; ```. If I try to build, it eventually bails out with:; ```; Scanning dependencies of target psi4-core; [ 78%] Creating directories for 'psi4-core'; [ 81%] No download step for 'psi4-core'; [ 84%] No update step for 'psi4-core'; [ 87%] No patch step for 'psi4-core'; [ 90%] Performing configure step for 'psi4-core'; loading initial cache file /home/laz/build/psi4/psi4/objdir/psi4-core-prefix/tmp/psi4-core-cache-Release.cmake; -- The C compiler identification is GNU 7.3.0; -- The CXX compiler identification is GNU 7.3.0; -- Check for working C compiler: /usr/bin/cc; -- Check for working C compiler: /usr/bin/cc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/bin/c++; -- Check for working CXX compiler: /usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; -- Found TargetOpenMP: Found TargetOpenMP: /usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so;/usr/lib/x86_64-linux-gnu/libpthread.so ; CMake Error at /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:137 (message):; Could NOT find MathOpenMP (missing: MathOpenMP_MESSAGE); Call Stack (most recent call first):; /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:378 (_FPHSA_FAILURE_MESSAGE); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/FindMathOpenMP.cmake:97 (find_package_handle_standard_args); /usr/share/cmake-3.11/Modules/CMakeFindDependencyMacro.cmake:48 (find_package); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/Target",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041:2690,Detect,Detecting,2690,https://psicode.org,https://github.com/psi4/psi4/issues/1041,9,['Detect'],['Detecting']
Safety,"h` all over the place). ; - Can destroy distinction between interface/implementation classes if done incorrectly; - Splitting the header is a nightmare (as I can attest to) and is required if code gets factored, which really should happen to mints.; ## Removed psiconfig.h. The macros in it are easily replace by CMake's `add_definitions` function and doing so clears up the macro namespace considerably. Furthermore a lot of those macros weren't even being used.; ## Static vs. Shared Psi4 Core libraries. CMake provides the variable `BUILD_SHARED_LIBS` to toggle this. We weren't respecting this and have been forcing static builds. Again moving to modules is facilitated by shared libraries. I will note that apparently libiwl can't be compiled dynamically. ; ## No More setup.py. `setup.py` just wrapped the CMake call and rewriting it is an exercise in code duplication. My understanding is the point of this file was meant to ease the transition to CMake from GNU Make. Well, I think it's safe to say we've transitioned.; ## Angle Brackets for Includes Clean Up. The vast majority of includes that incorrectly used angled-brackets have been changed to quotes. Although not exactly correct, for all intents and purposes, use quotes to indicate that a header file is part of the current project and angled-brackets indicate it is an external dependency. This is not just semantics, it changes how the compiler behaves. It also can lead to subtle hard to find bugs when you have very commonly named header files and you use directives like `using namespace std` all over the place.; ## Accessing Python Bindings. It used to be there were three ways to compile Psi4: for the conda binary, for an executable, and as a shared library that can be imported from Python. There was a ton of redundancy between the latter two and I consolidated them into one. Now all builds that are not making the conda binary, also produce callable Python bindings and an executable. This is simply done by packaging Psi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442:7267,safe,safe,7267,https://psicode.org,https://github.com/psi4/psi4/pull/442,1,['safe'],['safe']
Safety,"he compilation flag list when enabled. The `-pedantic-errors` flag has the compilation fail any time the code does not strictly follow the C++ language standard, i.e., whenever a compiler-specific language extension is used. `FORCE_PEDANTIC` is currently set to be enabled by default. ; 2. Fixes any instances of the code where the above option/flag would cause a compilation failure. This only requires two changes currently - removing extra semicolons in `libdiis/diismanager.h`, and replacing use of variable-length C-style arrays in `libmints/extern.cc`. The goal of these changes is to improve code portability across different compilers. By effectively disabling compiler-specific language extensions, the code no longer relies on specific compiler functionalities to work, and therefore should be compatible with a larger range of compilers across a wider variety of systems. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [X] N/A. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [X] Adds a new compile-time setting, `FORCE_PEDANTIC`, that causes compilation to fail whenever use of a compiler-specific extension is detected.; - [X] Removes extraneous semicolons in `libddis/diismanager.h` that led to compiler error with the `FORCE_PEDANTIC` option enabled.; - [X] Replaces the use of variable-length C-style arrays in `libmints/extern.cc` with `std::vector` constructs. ## Questions; - [X] Should this new option be on by default?. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3145:1570,detect,detected,1570,https://psicode.org,https://github.com/psi4/psi4/pull/3145,1,['detect'],['detected']
Safety,"hen PYMOD_INSTALL_LIBDIR is non-default.; - [x] export psi4::core target. use it in plugin. much simplify the psi4Config. tidy up the share installs.; - [x] flatten install dir structure. no more `external/`; - [x] shift importing of official plugins. rename psi4 --plugin* options. add cmake -C line. update CM templates.; - [x] switch over Py detection to PythonLibsNew. Beautify components printing. ; - [x] Move threads detection to target.; - [x] start testing the plugin templates again; - [x] standardize `Psi4Macros` --> `psi4OptionsTools`.; - [x] Correct CXX comp names in autocmake_static_lib (@robertodr, I copied this from you, so you may have it wrong, too). Check enabled langs properly rather than compilers defined so OptionsTools usable to other projects with diff enabled langs.; - [x] switch pybind11 to upstream source. better handle c++ std wrt pybind. `PSI4_CXX_STANDARD` --> `psi4_CXX_STANDARD`.; - [x] compile test of gcc version able to account for -gcc-name/-gxx-name (@bennybp, here's the code for what we talked about once in `custom_cxxstandard.cmake`); - [x] convert restrict test to write its own file.; - [x] kill off LAB and @jturney config files. replace with `cmake -C psi4PluginCache.cmake` suited config file.; - [x] `psi4pasture` --> `pasture`.; - [x] always whole-archive dpd and qt; - [x] `external` --> `external/upstream`, `internals` --> ``external/downstream`; - [x] remove old Find*cmake files. * **User-Facing for Release Notes**; - [x] We changed our python detection module to the one used by NumPy. Also changed so that not actually using libpython anywhere.; - [x] Used to do `psi4 --new-plugin-makefile` to generate `Makefile`. Now do `psi4 --plugin-compile` to get a cmake command to generate a `Makefile` against that psi4.; - [x] `--new-plugin` --> `--plugin-name`.; - [x] `ctest -L mini` --> `ctest -L smoke`; ; - [x] @amjames, the pasture is going to need a slight update to mesh with the new plugin infrastructure. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/554:1895,detect,detection,1895,https://psicode.org,https://github.com/psi4/psi4/pull/554,1,['detect'],['detection']
Safety,"ibraries_2016.0.109/linux/bin/intel64/icpc; -- Check for working CXX compiler: /opt/intel/compilers_and_libraries_2016.0.109/linux/bin/intel64/icpc -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working C compiler: /opt/intel/compilers_and_libraries_2016.0.109/linux/bin/intel64/icc; -- Check for working C compiler: /opt/intel/compilers_and_libraries_2016.0.109/linux/bin/intel64/icc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Performing Test has_xHost; -- Performing Test has_xHost - Success; -- Try OpenMP C flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -qopenmp ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- BLAS will be searched for based on MKLROOT=/opt/intel/compilers_and_libraries_2016.0.109/linux/mkl; -- Found BLAS: MKL (-Wl,--start-group;/opt/intel/compilers_and_libraries_2016.0.109/linux/mkl/lib/intel64/libmkl_intel_lp64.so;/opt/intel/compilers_and_libraries_2016.0.109/linux/mkl/lib/intel64/libmkl_intel_thread.so;/opt/intel/compilers_and_libraries_2016.0.109/linux/mkl/lib/intel64/libmkl_core.so;/usr/lib/x86_64-linux-gnu/libpthread.so;/usr/lib/x86_64-linux-gnu/libm.so;-openmp;-Wl,--end-grou",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/262:790,Detect,Detecting,790,https://psicode.org,https://github.com/psi4/psi4/issues/262,2,['Detect'],['Detecting']
Safety,"ils; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Unused function `MOInfoBase::correlate` is removed; - [x] The only thing the `MOInfoBase` dtor does is call `MOInfoBase::cleanup()`, an empty function. Removed both.; - [x] Moved the contents of `MOInfo::free_memory()` into its only caller, the `MOInfo` dtor; - [x] Added a lot of new machine-readable docstrings, moved some existing ones; - [x] Some ""obsolete code"", commented out a long time ago is deleted from `moinfo_mappings.cc`; - [x] Moved the `double** scf` MO array and the `get_scf_mos()` getter from `MOInfoBase` to `MOInfo` and made the array private; - [x] Moved the contents of `MOInfoBase::startup()` into its only caller, the `MOInfoBase` ctor; - [x] Moved `MOInfoBase::nmo` to `MOInfo` and made it private; - [x] Made the molecular charge `const` and private in `MOInfoBase`; - [x] Made `MOInfoBase::sopi` private, added a protected getter fn to give access in derived classes; - [x] Made `MOInfoBase::nso`, `MOInfoBase::nuclear_energy` and `MOInfoBase::irr_labs` private; - [x] All functions in `MOInfoBase` that have previously returned copies of `std::vector` members now return `const&` to the vector in the object, avoiding a potential copy.; - [x] Since `MOInfoBase::silent` is only used in the ctor of `MOInfo,`, I removed it from `MOInfoBase` and `MOInfoSCF`; - [x] Inlined `MOInfo::get_actv(size_t i)` and `MOInfo::get_docc(size_t i)` as both were only called once. Since these overloads are now gone from `MOInfo`, it can now just use `get_docc()` and `get_actv()` from `MOInfoBase` instead of having to reimplement or explicitly inherit them. ## Checklist; - [x] No new features; - [x] Tests run by the CI are passing; - [x] Errors in the full test suite appear to be unrelated to `libmoinfo`. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3155:2780,avoid,avoiding,2780,https://psicode.org,https://github.com/psi4/psi4/pull/3155,1,['avoid'],['avoiding']
Safety,incorrect symmetry detection for cubane (Oh),MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1177:19,detect,detection,19,https://psicode.org,https://github.com/psi4/psi4/issues/1177,1,['detect'],['detection']
Safety,"is command fails:; ```; $ cd samples/cc24 && psi4 test.in ; Traceback (most recent call last):; File ""/usr/local/bin/psi4"", line 338, in <module>; exec(content); File ""<string>"", line 31, in <module>; File ""/usr/local/lib/psi4/driver/driver.py"", line 613, in gradient; plan.compute(); File ""/usr/local/lib/psi4/driver/driver_findif.py"", line 1306, in compute; t.compute(client=client); File ""/usr/local/lib/psi4/driver/task_base.py"", line 166, in compute; self.result = qcng.compute(; File ""/usr/local/lib/python3.9/site-packages/qcengine/compute.py"", line 105, in compute; output_data = executor.compute(input_data, config); File ""/usr/local/lib/python3.9/site-packages/qcengine/programs/psi4.py"", line 121, in compute; pversion = parse_version(self.get_version()); File ""/usr/local/lib/python3.9/site-packages/qcengine/programs/psi4.py"", line 90, in get_version; exc[""proc""].wait(timeout=30); File ""/usr/local/lib/python3.9/subprocess.py"", line 1189, in wait; return self._wait(timeout=timeout); File ""/usr/local/lib/python3.9/subprocess.py"", line 1909, in _wait; raise TimeoutExpired(self.args, timeout). subprocess.TimeoutExpired: Command '['/usr/local/bin/psi4', '--version']' timed out after 30 seconds. Printing out the relevant lines from the Psithon --> Python processed input file:; core.IO.set_default_namespace(""h2o""); core.set_global_option(""REFERENCE"", ""uhf""); core.set_global_option(""BASIS"", ""DZ""); core.set_global_option(""ROOTS_PER_IRREP"", [0, 0, 1, 0]); analytic_grad = gradient('eom-ccsd'); --> findif_grad = gradient('eom-ccsd', dertype=0); compare_matrices(analytic_grad, findif_grad, 5, ""UHF-EOM-CCSD finite-diff. (3-pt.) vs. analytic gradient to 10^-5""); core.set_local_option(""FINDIF"", ""POINTS"", 5); findif_grad = gradient('eom-ccsd', dertype=0); compare_matrices(analytic_grad, findif_grad, 6, ""UHF-EOM-CCSD finite-diff. (5-pt.) vs. analytic gradient to 10^-7""). !----------------------------------------------------------------------------!; ! !; ! Command '['/usr/local/bin/p",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2803:982,timeout,timeout,982,https://psicode.org,https://github.com/psi4/psi4/issues/2803,2,['timeout'],['timeout']
Safety,"is is a draft of the DLPNO-CCSD PR that will be coming in the next few months. The purpose of this is for the developers and research groups to be able to run and test DLPNO-CCSD before it is officially part of the code. . Credit to @JoseMadriaga for the derivations ; [LocalCCSD1to10.pdf](https://github.com/psi4/psi4/files/11114337/LocalCCSD1to10.pdf). Useful References:; [Original DLPNO-CCSD Paper](https://aip.scitation.org/doi/full/10.1063/1.47735); [Sparse Maps II Paper](https://aip.scitation.org/doi/10.1063/1.4939030). Example Input File; ```; memory 20 GB. molecule mol {; 0 1; O 0.705 0.744 0.16; H -0.071 0.264 0.45; H 1.356 0.064 -0.014; symmetry c1; }. set {; basis cc-pVDZ; scf_type df; freeze_core true; pno_convergence normal; }; energy('dlpno-ccsd'); ```. ### Results (Waterclusters in TZ); [Speedups, relative to DF-CCSD]; ![wc_tz_speedups](https://user-images.githubusercontent.com/60559795/228892229-c3269bf9-3386-4861-8660-92a6dcc3685e.jpeg). [Percent Correlation Energy Recovered, relative to DF-CCSD, all >= 99.9%]; ![wc_tz_percent_corr_recovered](https://user-images.githubusercontent.com/60559795/228892322-7c968c62-f874-496c-84e3-06b65c84803d.jpeg). ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Implement the DLPNO-CCSD algorithm. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feel free to use this code, it is not fully tested yet, but preliminary tests show encouraging results, and is MUCH faster than conventional CCSD; - [ ] If you benchmark my code, please post results in the thread. ## Questions; - [ ] Question1. ## Checklist; - [ ] Add documentation; - [ ] Add references to terms and equations; - [ ] Tests added for any new features; - [ ]",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2915:1026,Recover,Recovered,1026,https://psicode.org,https://github.com/psi4/psi4/pull/2915,1,['Recover'],['Recovered']
Safety,"itals guess (#1672); - Analytic Hessians for LSDA functionals (#1664); - Add qc2p basis set from CFOUR (#1718); - Update to g2g v2 API (#1718); - Density cumulant functional theory (DCFT) thoroughly rebranded to density cumulant theory (DCT). Adjust your calls and keywords accordingly or psi will reproach you (#1719).; - Drop Travis-CI (thank you for years of compiling) and consolidate on Azure for Linux and Windows builds so we can host more complex pipelines (#1752).; - Update orthogonalization routines and consolidate them back to libmints instead of SCF (#1759); - Let the `Deriv` class be instructable in the flavor it computes, rather than trying to devine SCF vs correlated (#1756); - Remove obsolete functions in Wavefunction (#1766) ; - Psi is safe for Python 38 (#1776) ; - Extensive improvements to OCC (#1783,#1785,#1789, #1809, #1829, #1846) ; - Keep one-electron integrals in core (#1770) ; - Use def2 basis sets from BSE (#1804) ; - Improve memory estimates in fdisp (#1810) ; - Improve basis set choice in basis guess (#1484) ; - Print initial orbital occupations (#1713) ; - Improve handling/units of dipole and quadrupole arrays (#1800) ; - Electric dipole derivatives available py-side (#1799) ; - Add ST0-6G to list of basis sets (#1853) ; - PSIMRCC callable from comput_energy (#1854) ; - Improved general error reporting (#1862,#1868) ; - Removes CEPA0 from DCT module (#1873) ; - Remove debugging and timing code from psimrcc (#1879, #1901) ; - Add cython (#1889) ; - Update tolerances for mkl 2020.1 (#1896) ; - LGTM (#1905, #2038) ; - MP2/MP3 test suite (#1850, #1971) ; - Standardize CEPA and LCCD (#1909) ; - LCCD test suite (#1913, #1937) ; - Extensive improvements to DFGrad (#1915, #1923, #1953, #1974, #2049, #2079) ; - Expose cube-generating functions to python (#1917) ; - Fix cppe interface (#1922) ; - Move import of qcelemental (#1925) ; - Int to list for array variables (#1927) ; - Add module provenance to Wavefunction (#1935) ; - Add wfn to PSIMRCC (#1949",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562:7202,safe,safe,7202,https://psicode.org,https://github.com/psi4/psi4/issues/1562,1,['safe'],['safe']
Safety,"ization seen in https://github.com/psi4/psi4/pull/2682. To describe the problem, as of now, different integral-direct JK algorithms use different implementations of the incremental Fock build formalism. DirectJK and DFJLinK use the same incremental Fock build formalism, while DFJCOSK uses its own methodology. This introduces two problems:. 1. The next step of CompositeJK development is to combine DFJLinK and DFJCOSK into the pilot CompositeJK subclass. To ease this process, DFJLinK and DFJCOSK need to use the same incremental Fock process.; 2. The incremental Fock formalism currently used by DirectJK and DFJLinK has a couple of extra bells and whistles that DFJCOSK does not have - mainly, the ability to recompute the full Fock matrix every couple of iterations and the ability to disable incremental Fock construction entirely past a specific convergence threshold. These bells and whistles can greatly improve the convergence capabilities of the calculation, while ""normal"" IncFock implementations without these bells and whistles run the risk of greatly increasing the number of SCF iterations needed to converge. This issue is meant to be addressed with https://github.com/psi4/psi4/pull/2682; however, the introduction of DFJLinK to the JK hierarchy has potentially changed how that PR should be handled. This PR addresses both of the above issues by changing DFJLinK to use the same incremental Fock formalism as DFJCOSK. Using the DFJCOSK incremental Fock formalism is preferred because DFJCOSK stores fewer matrices in the DFJCOSK class for incremental Fock usage, reducing memory requirements from a practical perspective, and lowering the amount of state contained in DFJLinK from a code design perspective. In standardizing the DFJLinK and DFJCOSK incremental Fock processes, the next CompositeJK PR will be smoother, and CompositeJK development can continue parallel to the developments discussed in https://github.com/psi4/psi4/pull/2682. Additionally, this PR serves as a first",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2792:1305,risk,risk,1305,https://psicode.org,https://github.com/psi4/psi4/pull/2792,1,['risk'],['risk']
Safety,"ke/help/v3.0/prop_tgt/LINK_INTERFACE_MULTIPLICITY.html . Problem with the start/end-group is that cmake will optimize them out of position if more than one set are included in a link line formed from cmake vars. We patched this in Psi4 by [combining blas and lapack targets](https://github.com/psi4/psi4/blob/master/cmake/math/ConfigMath.cmake#L111) so that one set can sandwich both. Supposedly if these come into the link line through a target rather than a cmake var, then cmake won't mess with them.; * Even though psi4 builds and links fine, we're having to advise more and more people to LD_PRELOAD various mkl libraries or mkl_rt.so. part of the complication could be conda pkgs (even numpy) that are already in env and complicating the link loader's tasks. But we really shouldn't be telling ppl about preloading, which is bad practice for non-dire situations. @ryanmrichard [put in something](https://github.com/psi4/psi4/pull/513/files#diff-bb0d8c2ec987bfc58b4a943e453ea132L147) to preferentially detect the runtime lib as a bandaid to this.; * People for whom Bast math detection works fine but cmake FindLapack doesn't (namely, @psi-rking and [this fellow](http://forum.psicode.org/t/problem-with-building-from-source-according-to-cmakelists-txt/352/10) are having problems with libefp and CheMPS2 because different (or no) math libs are being inserted from those dependencies. I can forward the Bast libs to those external projects, but that'll cause some complications with the exported targets. I can fix that, but I fear that cmake will optimize away my start/end-groups again if they appear more than once. I am _not_ working on this right now, but I will have to, at a minimum, apply more bandaids soon, so I wanted to know from @robertodr and @bast if they're any solutions from the past two years. At a maximum, I'm tempted to default to `mkl_rt`, have ConfigMath export a target, and train libefp and CheMPS2 to detect it in preference to FindLapck. This is the state of affairs.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/537:2413,detect,detection,2413,https://psicode.org,https://github.com/psi4/psi4/issues/537,2,['detect'],"['detect', 'detection']"
Safety,"l Fock process across the current integral-direct JK algorithms present in Psi4. However, this PR stands somewhat in contrast to https://github.com/psi4/psi4/pull/2682 and https://github.com/psi4/psi4/pull/2792. In those PRs, their IncFock schemes were adapted to use that of DFJCOSK, without removing the bells and whistles of their IncFock implementations (e.g., recomputing the full Fock matrix every so often, disabling IncFock after a given convergence threshold). In contrast, DFJCOSK is the template IncFock upon which the two previous PRs were based; however, DFJCOSK does not have the IncFock bells and whistles that DirectJK and DFJLinK had. Unmitigated, the incremental Fock procedure can actually significantly increase the number of SCF iterations needed to converged; and the IncFock bells and whistles in DirectJK and DFJLinK notably mitigate the effect of IncFock on SCF convergence counts. Without these bells and whistles, DFJCOSK runs the significant risk of excessive SCF iterations needed to converge when IncFock is enabled, an issue I have run into in my own calculations. This PR seeks to rectify the aforementioned issue by implementing the IncFock bells and whistles of DirectJK and DFJLinK into DFJCOSK. With these extra features, DFJCOSK can now recompute the full Fock matrix every n iterations, or disable IncFock past a given convergence threshold, at the will of the end user. These features can notably reduce the amount of SCF iterations needed to converge. This PR is also the continued effort to standardize IncFock among all integral-direct SCF algorithms in Psi4. With this PR, DirectJK, DFJLinK, and DFJCOSK will have effectively the exact same incremental Fock schemes, each featuring the lower memory usage of DFJCOSK's former IncFock scheme, and the bells and whistles of DirectJK and DFJLinK's former IncFock schemes. The final step to the IncFock standardization process, then, is the movement of the IncFock scheme of these algorithms into the base JK clas",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2816:1280,risk,risk,1280,https://psicode.org,https://github.com/psi4/psi4/pull/2816,1,['risk'],['risk']
Safety,"l project is a good CMake project it makes a `XXXConf.cmake` file or a `FindXXX.cmake` file is included in `psi4/cmake`, which set `XXX_LIBRARIES` and `XXX_INCLUDE_DIRS` appropriately. Hence all other external projects simply need to keep appending dependencies and everyone gets to play nicely together.; # Detailed Change Log; ## Build scripts. I metaphorically ripped all the old build scripts out and started fresh. In my opinion the scripts are far easier to read. It also means I may have not added some functionality back. In particular there were many complicated scripts for setting compile flags. At least on my box these scripts did not find all the optimizations to begin with (didn't turn on many of the Intel optimizations). They also didn't respect some of the CMake variables. The scripts themselves are designed to be quite terse by factoring out redundant code, although admittedly the `ExternalProject_Add` commands are still repetitive. Also note I heavily use empty targets and variables to avoid lots of if/else statements.; ## Added an External Folder. The top-level Psi4 directory is primarily split into a directory, `psi4`, where the source for the core of Psi4 lives and a folder `external` where optional modules and dependencies live. The general strategy for determining where something goes is if you personally didn't write the code, or it is intended to be used with many other packages, it probably falls under the category of going in the external folder. Each package in `external` should be designed in such a manner so that it doesn't leak dependencies into the core. For example if the package returns its results in a class `MyGreatMatrix` the wrapper code that copies it to a Psi4 `Matrix` should live in external. This prevents Psi4 proper from having to know about `MyGreatMatrix`. ; ## Libraries that are not part of Psi4 core are now in external. Although allowed by the more permissive licenses, it is somewhat dubious to mix external libraries in with on",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442:3234,avoid,avoid,3234,https://psicode.org,https://github.com/psi4/psi4/pull/442,1,['avoid'],['avoid']
Safety,"lar because the mkl.h inclusions, which define `__INTEL_MKL__` were guarded by `__INTEL_MKL__` ifdefs. So Psi4 hasn't been threading MKL (though OMP threading has still been present). Story continues in bullet below. Identification and debugging of this issue by @dgasmith and Matt Schieber. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] ~~This PR identifies which of MKL, OPENBLAS, etc. has been detected by ConfigMath.~~ Identify MKL-or-not by searching for ""mkl"" in the full lapack library list, whether detected math or passed-in math. Colors ""MKL LAPACK"" to screen if ""on"". If MKL, attaches the `USING_LAPACK_MKL` compiler definition to the `tgt::lapack` target that every module of Psi4 is linked with. Thus we're getting MKL threading again.; - [x] Adds min version tags for dkh, gdma, erd; - [x] Adjusts where the required check comes in for hdf5 so we don't get an warning; - [x] Add docs with examples of math detection; - [x] Remove unused routes in math detection: explicit, external, mkl_flag; - [x] ConfigMath now FATAL_ERRORs if math libs _not_ found; - [x] Newly pays attention to headers for math. Only required for MKL.; - [x] Add a threading testing script for general maintenance, see comment below. In general tests where MKL found. Has compare_values, but really better suited for running by hand and judging results, as `-jN` defeats the purpose.; - [x] Added some CCSD(T) table docs requested by @CDSherrill ; * **User-Facing for Release Notes**; - [x] Change Mac math precedence to `MKL SYSTEM_NATIVE OPENBLAS ESSL ATLAS ACML` so native accelerate only behind MKL; - [x] New mechanism to pass in math libs explicitly through `LAPACK_LIBRARIES` and `LAPACK_INCLUDE_DIRS`; - [x] Collects all the addon libraries into a list, then forms RPATH of internal (relative to ORIGIN), then all non-static, non `/usr/` paths. Redundancy removed and math libs paths _always_ first. This takes over from `INSTALL_RPATH_U",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/615:1697,detect,detection,1697,https://psicode.org,https://github.com/psi4/psi4/pull/615,2,['detect'],['detection']
Safety,"le ""<string>"", line 31, in <module>; File ""/usr/local/lib/psi4/driver/driver.py"", line 613, in gradient; plan.compute(); File ""/usr/local/lib/psi4/driver/driver_findif.py"", line 1306, in compute; t.compute(client=client); File ""/usr/local/lib/psi4/driver/task_base.py"", line 166, in compute; self.result = qcng.compute(; File ""/usr/local/lib/python3.9/site-packages/qcengine/compute.py"", line 105, in compute; output_data = executor.compute(input_data, config); File ""/usr/local/lib/python3.9/site-packages/qcengine/programs/psi4.py"", line 121, in compute; pversion = parse_version(self.get_version()); File ""/usr/local/lib/python3.9/site-packages/qcengine/programs/psi4.py"", line 90, in get_version; exc[""proc""].wait(timeout=30); File ""/usr/local/lib/python3.9/subprocess.py"", line 1189, in wait; return self._wait(timeout=timeout); File ""/usr/local/lib/python3.9/subprocess.py"", line 1909, in _wait; raise TimeoutExpired(self.args, timeout). subprocess.TimeoutExpired: Command '['/usr/local/bin/psi4', '--version']' timed out after 30 seconds. Printing out the relevant lines from the Psithon --> Python processed input file:; core.IO.set_default_namespace(""h2o""); core.set_global_option(""REFERENCE"", ""uhf""); core.set_global_option(""BASIS"", ""DZ""); core.set_global_option(""ROOTS_PER_IRREP"", [0, 0, 1, 0]); analytic_grad = gradient('eom-ccsd'); --> findif_grad = gradient('eom-ccsd', dertype=0); compare_matrices(analytic_grad, findif_grad, 5, ""UHF-EOM-CCSD finite-diff. (3-pt.) vs. analytic gradient to 10^-5""); core.set_local_option(""FINDIF"", ""POINTS"", 5); findif_grad = gradient('eom-ccsd', dertype=0); compare_matrices(analytic_grad, findif_grad, 6, ""UHF-EOM-CCSD finite-diff. (5-pt.) vs. analytic gradient to 10^-7""). !----------------------------------------------------------------------------!; ! !; ! Command '['/usr/local/bin/psi4', '--version']' timed out after 30 seconds !; ! !; !----------------------------------------------------------------------------!; ```. However, this command r",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2803:1121,Timeout,TimeoutExpired,1121,https://psicode.org,https://github.com/psi4/psi4/issues/2803,1,['Timeout'],['TimeoutExpired']
Safety,lebedev_mapping_ access is thread-unsafe (and also never initialized?),MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2735:34,unsafe,unsafe,34,https://psicode.org,https://github.com/psi4/psi4/issues/2735,1,['unsafe'],['unsafe']
Safety,"length in Eh. Options added to properties(‘ccsd’, properties=[‘polarizability’, ‘rotation’]): ; - local_method: `PNO`, `PNO++` and `CPNO++`; - local_pert: `DIPOLE`; - unpert_cutoff: double between 0 and 1. Pytest added to check the functionality at:; - Tcut=0 against the conventional CC code; - Tcut=1e-5 against hardcoded values. Some additional tweaks to existing code that were needed for me to run the simulation code:. - Under cclambda/ , L1_build and dijabL2 functions were outside of the CCLambdaWavefunction class, while L2 build functions were not. So I moved `L1_build`, `cc2_L1_build` and `dijabL2` into the class to make it more consistent and also to help run the simulation code. - cctransort/local.cc has an extra function to localize the occupied orbitals before the transformation of the one- and two-electron integrals. - Overloaded the schmidt_add_row function in libmints/matrix.cc in order to specify the cutoff value for vector norms to be discarded. - The ccenergy function that is called when Psi4 fails attempts to switch off the ‘ccenergy’ timer twice. The error was mentioned in issue #1864. And I see a new pull request that removes the line (#2150). I just commented out the line that was redundantly switching off the timer and that causes Psi4 to exit correctly when iterations fail to converge. - The psio_tocprint function under libpsio/psio.h didn’t match its definition in libpsio/tocprint.cc so I commented out the extra argument. ## Todos; - [x] Add simulation code to CCLR; - [x] Add tests; - [x] Remove the `WERNER` option completely, since it’s not implemented. ## Questions; - [ ] Old (non-working) code in ccenergy/ has been shifted to local_old.cc and Local_old.h, is it okay if I get rid of this code? There are also identical local.cc files under cclambda/ and ccresponse/ that are not needed. ## Checklist; - [x] Tests added for any new features; - [x] All or relevant fraction of full tests run. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2151:1824,redund,redundantly,1824,https://psicode.org,https://github.com/psi4/psi4/pull/2151,1,['redund'],['redundantly']
Safety,ler flags: -w -fpp -assume byterecl -DVAR_IFORT -fPIC -nosave -mkl=parallel -qopenmp -O3 -ip -xHost; -- Libraries : -mkl=parallel; -- Definitions : USE_FCMANGLE_H;SYS_LINUX;HAS_CXX11;HAS_CXX11_FUNC;HAS_CXX11_AUTO;HAS_CXX11_AUTO_RET_TYPE;HAS_CXX11_CONSTEXPR;HAS_CXX11_CSTDINT_H;HAS_CXX11_DECLTYPE;HAS_CXX11_INITIALIZER_LIST;HAS_CXX11_LAMBDA;HAS_CXX11_LONG_LONG;HAS_CXX11_NULLPTR;HAS_CXX11_LIB_REGEX;HAS_CXX11_RVALUE_REFERENCES;HAS_CXX11_SIZEOF_MEMBER;HAS_CXX11_STATIC_ASSERT;HAS_CXX11_VARIADIC_TEMPLATES;HAVE_MKL_BLAS;HAVE_MKL_LAPACK;ENABLE_CHEMPS2=1;HAVE_MM_MALLOC_H;HAVE_DKH;HAVE_GDMA;HAVE_PCMSOLVER=1; -- The CXX compiler identification is Intel 17.0.0.20160721; -- The C compiler identification is Intel 17.0.0.20160721; -- Check for working CXX compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/icpc; -- Check for working CXX compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/icpc -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working C compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/icc; -- Check for working C compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/icc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- The Fortran compiler identification is Intel 17.0.0.20160721; -- Check for working Fortran compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort; -- Check for working Fortran compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort supports Fortran 90; -- Checking whether /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort supports Fortran 90 -- yes; -- Fortran ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Inte,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/629:5546,Detect,Detecting,5546,https://psicode.org,https://github.com/psi4/psi4/issues/629,2,['Detect'],['Detecting']
Safety,"me/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6/lib-dynload', '/home/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6/site-packages']; >>> import psi4; /home/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; ```. If I run inside a notebook, `sys.path` and `sys.executable` are the same, but when I `import psi4`, I get a message ""The kernel appears to have died. It will restart automatically."" In the terminal, I see: ; ```; [I 17:41:23.834 NotebookApp] Adapting to protocol v5.1 for kernel 56076279-b2b7-4f6a-8fb0-83b5b1f774c4; [IPKernelApp] ERROR | No such comm target registered: jupyter.widget.version; [IPKernelApp] ERROR | No such comm target registered: jupyter.widget.version; terminate called after throwing an instance of 'std::bad_cast'; what(): std::bad_cast; [I 17:41:41.146 NotebookApp] KernelRestarter: restarting kernel (1/5); ```. I think the first three lines are unrelated. The kernel never recovers and I can't import the module. Should I expect that Psi4 will work inside a `jupyter notebook` and if so, is there any way to get more information about what's going wrong?. **Edit:** I should add that to get `jupyter notebook` to see the `p4env` conda environment, I executed `conda install ipykernel --name p4env` and then `~/data/applications/psi4conda/envs/p4env/bin/python -m ipykernel install --user` (according to [these](https://github.com/jupyter/notebook/issues/1524) instructions). - CentOS Linux release 7.4.1708 (Core) ; - 3.10.0-693.5.2.el7.x86_64; - Python 3.6.3; - Jupyter 4.4.0; - Psi4 1.2a1.dev611+8fe3513; <details><summary>Output of `conda list`</summary><p>. ```; ca-certificates 2017.7.27.1 0 conda-forge; certifi 2017.7.27.1 py36_0 conda-forge; chemps2 1.8.4 0 psi4/label/dev; cloog 0.18.0 0 ; decorator 4.1.2 py36_0 conda-forge; dftd3 3.2.0 7 psi4; dkh 1.2 1 psi4/label/dev; erd 3.0.6 1 psi4/label/dev; gcc-5 5.2.0 1 psi4; gcc-5-mp 5.2.0 0 psi4; gcp 2.0.1 0 psi4; gdma 2.2.6 3 p",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/862:2009,recover,recovers,2009,https://psicode.org,https://github.com/psi4/psi4/issues/862,1,['recover'],['recovers']
Safety,"n Unknown; python3.7 000055D7E20EE73C PyEval_EvalCode Unknown Unknown; python3.7 000055D7E2205F14 Unknown Unknown Unknown; python3.7 000055D7E221129D PyRun_StringFlags Unknown Unknown; python3.7 000055D7E21B5EB4 Unknown Unknown Unknown; python3.7 000055D7E213E789 _PyMethodDef_RawF Unknown Unknown; python3.7 000055D7E213EA31 _PyCFunction_Fast Unknown Unknown; python3.7 000055D7E21AA795 _PyEval_EvalFrame Unknown Unknown; python3.7 000055D7E20ED829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055D7E20EE714 PyEval_EvalCodeEx Unknown Unknown; python3.7 000055D7E20EE73C PyEval_EvalCode Unknown Unknown; python3.7 000055D7E2205F14 Unknown Unknown Unknown; python3.7 000055D7E2210331 PyRun_FileExFlags Unknown Unknown; python3.7 000055D7E2210523 PyRun_SimpleFileE Unknown Unknown; python3.7 000055D7E2211655 Unknown Unknown Unknown; python3.7 000055D7E221177C _Py_UnixMain Unknown Unknown; libc-2.27.so 00007FB2DA614B97 __libc_start_main Unknown Unknown; python3.7 000055D7E21B5FF0 Unknown Unknown Unknown; Aborted (core dumped); ```. The last lines in the generated outfile:. ```; 	Previous optimization step data not found. Starting new optimization. 	---Fragment 1 Intrafragment Coordinates---; 	 - Coordinate - - BOHR/RAD - - ANG/DEG -; 	 R(1,2) = 2.845538	 1.505794; 	 R(1,8) = 2.064055	 1.092251; 	 R(1,9) = 2.056683	 1.088350; 	 R(1,10) = 2.064136	 1.092294; 	 R(2,3) = 2.459853	 1.301698; 	 R(2,7) = 2.053717	 1.086780; 	 R(3,4) = 2.460043	 1.301799; 	 R(4,5) = 2.048304	 1.083916; 	 R(4,6) = 2.048052	 1.083782; 	 B(1,2,3) = 2.184425	 125.158344; 	 B(1,2,7) = 2.039946	 116.880293; 	 B(2,1,8) = 1.932206	 110.707222; 	 B(2,1,9) = 1.943108	 111.331905; 	 B(2,1,10) = 1.932189	 110.706283; 	 L(2,3,4) = 3.139524	 179.881489; 	 l(2,3,4) = 3.141593	 180.000000; 	 B(3,2,7) = 2.058814	 117.961348; 	 B(3,4,5) = 2.119850	 121.458466; 	 B(3,4,6) = 2.120178	 121.477254; 	 B(5,4,6) = 2.043155	 117.064152; 	 B(8,1,9) = 1.892072	 108.407726; 	 B(8,1,10) = 1.869872	 107.135787; 	 B(9,1,10) = 1.89217",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2020:3323,Abort,Aborted,3323,https://psicode.org,https://github.com/psi4/psi4/issues/2020,1,['Abort'],['Aborted']
Safety,"n core code doesn't add contributions from ECP bearing atoms.; - [x] Add / document more basis sets, and add ECP info to existing Def2 series (w/help from @loriab). * **User-Facing for Release Notes**; - [x] Psi4's DFT now uses LibXC, several hundred new functionals are available.; - [x] DFT potential and gradient builds are now parallelized and vectorized, up to 30x faster on six cores.; - [x] Adds a new vectorized DF-JK builder, up to 4x as fast as previous version.; - [x] Adds culoumb-attenuated (CAM) functionals.; - [x] Adds the VV10 non-local correlation kernel.; - [x] Adds DSD functionals.; - [x] Extended second-order SCF convergence to DFT Wavefunctions.; - [x] Adds the gradient regularized asymptotic correction (GRAC) to DFT through the option `DFT_GRAC_SHIFT`.; - [x] Adds a density-fitted second-order Electron Propagator code. ; - [x] Adds the density-fitted SAPT(DFT) code.; - [x] Adds linear response DFT.; - [ ] Adds TDDFT methodologies.; - [x] To avoid conflict the function `property` was renamed to `properties`.; - [x] More involved JSON input/output interface.; - [x] Effective Core Potentials available for SCF energies and gradients, as well as post-SCF energies.; - [x] Def2 family of basis sets available for all atoms supported by those basis sets. * **Bug Fixes**; - [x] wB97X had an incorrect range-seperation parameter. This is now fixed. Note that this did *not* effect wB97X-D.; - [x] Memory limitations are better adhered to for very large MCSCF computations. * **TODO**; - [ ] Run `sed` commands from https://github.com/psi4/psi4/pull/690; - [x] Pull in ECPs #681 ; - [ ] Rebase in current master to resolve conflicts; - [x] Closes #39 ; - [x] Closes #40 ; - [ ] New Hessian/Frequency analysis code.; - [ ] Fill out remaining DFT documentations; - [ ] Polish new DF JK/Transformer technology; - [ ] Triple check UKS GGA Hessian-vector code; - [ ] Finished DFT Hessian functionality (skeleton terms); - [ ] Rebase in License/1.1 changes; - [ ] Rebase in ECP ch",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/698:2342,avoid,avoid,2342,https://psicode.org,https://github.com/psi4/psi4/pull/698,1,['avoid'],['avoid']
Safety,"ne-off, not continuous development anyways, so it's worth no globs and yes flexibility. ADDED: switched to ninja for docs and docs-pr (ok memory-wise at max parallelism b/c debug build). ADDED 12 Nov; - [x] update ecosystem and docs GHA and linux azure to use the path-advisor env/cache procedure. this helps keep the path-advisore procedure tested and keeps testing envs up-to-date. alternate testing can still be imposed by `sed`ing the envs.; - [x] in azure linux, use the three testing lanes to go beyond quicktests. apart from some longer tests, we're now hitting all but stdsuite non-quick. ; - [x] fixed the windows nightly build through azure, which was many layers of bugs. the improved path handling in psi4 & psi4/__init__.py from May technically didn't play nicely with the build-and-copy-into-place of the azure file cmake_install_*-paths-wise, and the recent (Oct) trick to get a fast `psi4 --version` tripped the problem, hence the `sed`.; - [x] Strengthened the default to Release so that it works for windows, too. Ninja was setting Debug as-was.; - [x] Updated the buildrun.yaml files from path-advisor; - [x] Update the docs build for py312 by fixing the non-raw strings having backspace chars.; - [x] removed the pb11=2.10 pin for docs build by adding to nitpick list; - [x] Avoid all the warnings about INSIST_FIND_PACKAGE_<pkg> and <pkg>_DIR unused user-spec variable warnings that could be unnerving.; - [x] Use a different way of detecting libdl for plugins that doesn't throw cmake warnings. lmk if there's any problems.; - [x] Patch over a sapt+windows+ecp bug described at #3072 so can test complete ecosystem; - [x] Add a plain `psi4 --psiapi` variation on `psi4 --psiapi-path` that can be used in `eval $(psi4 --psiapi)`. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3021:4809,Avoid,Avoid,4809,https://psicode.org,https://github.com/psi4/psi4/pull/3021,2,"['Avoid', 'detect']","['Avoid', 'detecting']"
Safety,new python detection downstream,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2096:11,detect,detection,11,https://psicode.org,https://github.com/psi4/psi4/pull/2096,1,['detect'],['detection']
Safety,"nt atoms. Really good for perfect matches, fine but untuned for imperfect matches. Also provides functions that use that return set to properly manipulate list, vec, mol, grad, hess (hess untested). Upon request, also tests mirror-image alignment.; - Remove everything beyond constructing the Cartesian Hessian from findif, including VIBRATION class; - Remove the c-side thermo module ; - Adds extensive vib test on HOOH-TS, CO2, ethene, H2CO, methane that checks freqs _and_ normco of each mol vs. Cfour output for following conditions; - Cfour Hessian (tests harmonic analysis machinery); - Psi freq by grad; - Psi freq by energy; - Psi freq by analytic ~(only methane and ammonia pass)~ All pass now, thanks to @andysim ; - [x] fix the embarrassing bug (I'll do you a coding favor if you spot it, but I'm not admitting it otherwise); - [x] better handle non-stationary. probably need an option to force-rot-space-inclusion but by default, `frequency()` does a gradient to determine if rotational projection is safe, then another flag to query external field and company to see if even translational projection is appropriate. ; - [x] more testing of isotopic, partial, non-stationary, etc., particularly wrt normco not just freq; - Add `compare_dicts` and `compare_molrecs` comparison functions. Former uses `deepdiff` module and does recursive comparison (sensitive to types). Can exempt fields with `forgive` arg. Latter makes use of former and also allows geoms to change if warranted by fix_com/orientation (checks via aligner).; - convert qcdb test suite from GnuMake (yes, that old) to pytest. switch compare_* fns to raise `TestComparisonError`, not `sys.exit(1)`.; - have to temporarily set `0 2` in some test cases, b/c the reconciler wants physically reasonable values, but the input molecule isn't currently passing through the code that would set those defaults.; - updated v2rdm_casscf pinning to one Eugene already fixed up to work w/psi; * **User-Facing for Release Notes**. ## Ques",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/834:11711,safe,safe,11711,https://psicode.org,https://github.com/psi4/psi4/pull/834,1,['safe'],['safe']
Safety,"ntified two Hessian bugs, upgraded the two Molecule classes, added Molecule serialization everywhere except initial string input parsing, added alignment and BFS tools, and lots more – see below. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - This PR includes Joe's psi4/psi4#772; - adds an optional history object to the optimize output. This object contains energies, gradients, and coordinates for the molecule at each step of the optimization. Hooked up to MDT.; - ~adds normalmode displacement export to the api and optional saving of normal modes to the wavefunction.~; - Adds handling of several one-electron properties to the API and saves them to the wavefunction.; - `qcdb.Molecule`; - Fix some bugs, including C3/D3 symmetry detection w/o verbose and printing for Q-Chem when dummy (or ghost?, don't remember which) present; - Simplify rotational_constants, add rotational_symmetry_number, add axis_representation (probably should double-check this with a spectroscopy book); - Optimize instantiation (really, update_geometry) of large systems by a couple orders of magnitude (now ~1 min for 6000 atoms, w/symmetry); - Hook up Trent Parker's linear-scaling BFS algorithm to qcdb.Molecule or through just np arrays. Has ""seed"" argument so you can forcibly split intramolecularly or close-bound intermol.; - Selected steps (for performance) are now in numpy, as a result, `geometry(np_out=True)` and `xyz(np_out=True)` are avail to skip the cast-back-to-list step. Also, `to_arrays` returns geom, mass, elez, etc. as numpy arrays, rather than needing to iterate over natom.; - `psi4.core.Molecule`; - add rotational_symmetry_number; - export rotor_type; - faster BFS algorithm hooked up to psi4.Mol, too. Depending on Mol type, returns numpy split arrays, single large Mol with atoms rearranged and fragmentation embedded, and/or list of indiv Mols, one for each fragment. Radically pare down auto_fragments/old BFS code.; - `un",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/834:1686,detect,detection,1686,https://psicode.org,https://github.com/psi4/psi4/pull/834,1,['detect'],['detection']
Safety,nu++98 -mkl=parallel -openmp -O3 -no-prec-div -DNDEBUG -xHost; -- C compiler flags : -restrict -DRESTRICT=**restrict** -std=c99 -fPIC -mkl=parallel -openmp -O3 -ip -DNDEBUG -xHost; -- Fortran compiler flags: -w -fpp -assume byterecl -DVAR_IFORT -fPIC -nosave -mkl=parallel -openmp -O3 -ip -xHost; -- Libraries : -mkl=parallel; -- Definitions : USE_FCMANGLE_H;SYS_LINUX;HAVE_MKL_BLAS;HAVE_MKL_LAPACK;HAVE_MPI;HAVE_DKH; -- The CXX compiler identification is Intel 13.1.0.20130121; -- The C compiler identification is Intel 13.1.0.20130121; -- Check for working CXX compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpicxx; -- Check for working CXX compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpicxx -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working C compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpicc; -- Check for working C compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpicc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- The Fortran compiler identification is Intel 13.1.0.20130121; -- Check for working Fortran compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpif77; -- Check for working Fortran compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpif77 -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /opt/intel/impi/5.0.1.035/intel64/bin/mpif77 supports Fortran 90; -- Checking whether /opt/intel/impi/5.0.1.035/intel64/bin/mpif77 supports Fortran 90 -- yes; -- Fortran ENABLED; -- Buggy compiler support for C++11. Using older standard.; -- Checking for restrict keyword; -- keyword found : **restrict**; -- Performing Test has_xHost; -- Performing Test has_xHost - Success; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - ,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/201:5663,Detect,Detecting,5663,https://psicode.org,https://github.com/psi4/psi4/issues/201,2,['Detect'],['Detecting']
Safety,"nutes on a 20-core machine with no individual test over 4m. That's not reasonable for a laptop. Blame the slow-to-converge oo methods, and it's going to get worse with occd and friends.; - [ ] TODO https://github.com/MolSSI/QCEngine/pull/376 and a new version of QCEngine are a prereq.; - [x] https://github.com/qcdb/qcdb/pull/57 is associated QCDB PR (psi4 PR is a prereq to it); - [ ] TODO full stdsuite in the presence of MRCC will have a couple faults of the ""not NYI"" variety after the MRCC defaulting logic switch from Q. I haven't decided how to remedy this, but it's unlikely to be hit, so I'll defer. ## Questions; - [ ] My version of Psi4+MRCC doesn't run CC2. Anyone else see this? (Just curious, not really needed for PR.); - [ ] I don't think the original module authors will find issues, but if you want to look over pertinent docs and capabilities tables, please do so.; - [x] [ADDED from #2737 For methods (or methods in certain circumstances, say reference or conv/df) only available through an external add-on, do we want those opt-in? That is, certainly the external must be (1) installed and detectable. But do we also want to (2) require the user to set qc_module=mrcc|adcc|chemps2 ? CheMPS2 has a long history of not requiring (2). ADCC has a shorter history of being the preferred backend and automatic choice, if present. @maxscheurer prefers not requiring (2). In this PR, I just switched MRCC syntax to yes require (2). That was in keeping with the user opt-ing in via energy(""mrccsd""). I can go either way, and I guess I'm now leaning toward not requiring (2) and adjusting MRCC accordingly. But it seems like something to discuss and settle on a consistent treatment. EDIT: ok, MRCC can be a default. above section edited. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2731:13820,detect,detectable,13820,https://psicode.org,https://github.com/psi4/psi4/pull/2731,1,['detect'],['detectable']
Safety,"o untangle this, I started from master, cherry-picked the dfocc2 commits, cherry-picked the #2354 commits, modernized the DIIS calls, then added the neglected stdsuite testing and attendant qcvar fixups for existing occ/dfocc methods and new methods remp2 and categories (1) and (2) from dfocc2 branch. That mega-changeset lives at #2633 for now. This PR breaks off the `occ` portion for review. ## Todos; - [x] @behnle added REMP2 and OREMP2 hybrid perturbation theories (https://doi.org/10.1063/1.5086168) with conventional integrals added to `occ` module, as originally proposed in #2354; - [ ] note that this uses a specialty QCEngine for reference values. https://github.com/MolSSI/QCEngine/pull/375 It'll build by itself. I'll need to mint a QCEngine patch release before building conda packages with this PR in master.; - [x] docs-wise, I picked off a bit and included it in this PR. on the whole, let's defer docs edits until the dfocc PR; - [x] reworked the run_occ* driver functions a bit so that method defs are localized and there's less risk of missing an internal setting when adding new methods.; - [x] added stdsuite testing for new methods remp2 energy and oremp2 energy and gradient. added stdsuite testing for existing E & G for omp2, omp2.5, omp3, oremp2, olccd and filled in some gaps for ccsd, ccsd(t), a-ccsd(t). all conventional ints. fixed up some mis-set byproducts uncovered by stdsuite testing: OO ROHF was printing and setting wrong plain MP2 energies, OMP3 & OMP2.5 wasn't setting right `Wfn.energy_`, stop setting ROHF MP3 and MP2.5 out of caution.; - [x] tightened the min rms_mograd_convergence from 6.0 to 6.5 so that stdsuite (3 mol/basis sets) could reliably compute energies, gradients, and findif gradients to 1e-6. ## Questions; - [x] sometimes the non-OO value (e.g., MP2, LCCD) is available as an early byproduct of the OO calc (e.g., OMP2, OLCCD). this wasn't the case with REMP, and some QCVariables that stored a purported non-OO REMP had to be removed. @b",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2653:1629,risk,risk,1629,https://psicode.org,https://github.com/psi4/psi4/pull/2653,1,['risk'],['risk']
Safety,"oost/include/boost/xpressive/xpressive.hpp(18),; from /home/seba/software/psi4-0.5/src/lib/libmints/basisset.cc(29):; detected during:; In file included from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive_static.hpp(30),; from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive.hpp(18),; from /home/seba/software/psi4-0.5/src/lib/libmints/basisset.cc(29):; instantiation of class ""std::__iterator_traits<_Iterator, void> [with _Iterator=int]"" at line 163; In file included from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive_static.hpp(30),; from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive.hpp(18),; from /home/seba/software/psi4-0.5/src/lib/libmints/basisset.cc(29):; instantiation of class ""std::iterator_traits<_Iterator> [with _Iterator=int]"" at line 98 of ""/home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/regex_token_iterator.hpp""; In file included from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive_static.hpp(30),; from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive.hpp(18),; from /home/seba/software/psi4-0.5/src/lib/libmints/basisset.cc(29):. compilation aborted for /home/seba/software/psi4-0.5/src/lib/libmints/basisset.cc (code 2); src/lib/libmints/CMakeFiles/mints.dir/build.make:583: recipe for target 'src/lib/libmints/CMakeFiles/mints.dir/basisset.cc.o' failed; make[2]: *** [src/lib/libmints/CMakeFiles/mints.dir/basisset.cc.o] Error 2; CMakeFiles/Makefile2:1861: recipe for target 'src/lib/libmints/CMakeFiles/mints.dir/all' failed; make[1]: *** [src/lib/libmints/CMakeFiles/mints.dir/all] Error 2; Makefile:126: recipe for target 'all' failed; make: *** [all] Error 2; ```. With the GNU compiler (g++ (Ubuntu 5.2.1-22ubuntu2) 5.2.1 20151010) it works fine. I'm just warning because many HPCs prefer the intel compiler and you might want to provide support. Best wishes,; Sebastian",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/262:15226,abort,aborted,15226,https://psicode.org,https://github.com/psi4/psi4/issues/262,1,['abort'],['aborted']
Safety,"ortran: /opt/intel/impi/5.0.1.035/intel64/lib/libmpifort.so;/opt/intel/impi/5.0.1.035/intel64/lib/release/libmpi.so;/opt/intel/impi/5.0.1.035/intel64/lib/libmpigi.a;/usr/lib64/libdl.so;/usr/lib64/librt.so;/usr/lib64/libpthread.so; -- No Sphinx, no docs. Pre-built documentation at http://sirius.chem.vt.edu/psi4manual/latest/index.html; -- Found libutil: /usr/lib64/libutil.so; -- Found libm: /usr/lib64/libm.so; -- Found librt: /usr/lib64/librt.so; -- Found libdl: /usr/lib64/libdl.so; -- Looking for pthread.h; -- Looking for pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE; -- Found PythonInterp: /usr/bin/python2.6 (found version ""2.6.6""); -- Found PythonLibs: /usr/lib64/libpython2.6.so (found suitable exact version ""2.6.6""); -- Could NOT find Boost; -- Boost 1.55.0 not found. The pre-packaged version will be built.; -- Libraries to be built: filesystem, python, regex, serialization, system, timer, chrono, thread, mpi; -- Toolset to be used: intel-linux; -- Looking for MKL_Free_Buffers; -- Looking for MKL_Free_Buffers - found; -- Looking for __builtin_expect; -- Looking for __builtin_expect - found; -- Looking for __builtin_prefetch; -- Looking for __builtin_prefetch - found; -- Looking for __builtin_constant_p; -- Looking for __builtin_constant_p - found; -- Looking for erf; -- Looking for erf - found; -- DKH in LibMints ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Use the commands in setup_command to reproduce this build; -- Configuring incomplete, errors occurred!; See also ""/mnt/data/users/dm4/vol12/medvedevmg_1708/bin/tmp/psi4public-0.3/objdir/CMakeFiles/CMakeOutput.log"". Howevewer, there is no file /mnt/data/users/dm4/vol12/medvedevmg_1708/bin/tmp/psi4public-0.3/objdir/CMakeFiles/CMakeOutput.log and no directory objdir at all.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/201:16015,Detect,Detecting,16015,https://psicode.org,https://github.com/psi4/psi4/issues/201,2,['Detect'],['Detecting']
Safety,"ove import of qcelemental (#1925) ; - Int to list for array variables (#1927) ; - Add module provenance to Wavefunction (#1935) ; - Add wfn to PSIMRCC (#1949, #1956) ; - Print CCSD pair energies (#1950) ; - Test label for c1-incompatible tests (#1958) ; - DCT and DFOCC densities to Wavefunction (#1963, #1964) ; - basis_sets handled by wavefunction.minsthelper (#1970) ; - Remove unused libtrans code (#1976) ; - Cleanup code for basis set handling (#1994) ; - MP 2.5/3.5 default to DF (#1980) ; - Print and save electron count from grid (#2001) ; - Clean libtrans (#1991) ; - Fix to high ang. mom. basis set (#2003) ; - Programmer docs (#2015) ; - Save cc response variables to wavefunction (#2022) ; - Compute electric field (#2032) ; - Better PSIO error reporting (#2030) ; - FCHK writer/testing improvement (#1884, #2047, #2058, #2063, #2091) ; - Set Lagrangian in Wavefunction (#2064, #2066, #2070) ; - Linux Azure fix (#2074) ; - Remove code in DF-DCT and DFOCC (#2067, #2078) ; - Python functions for DF derivative integrals (#2088) ; - Windows conda package (#2048) ; - Remove some tests for multithreading (#2094) ; - Update Numpy interface docs (#2089) ; - Python detection downstream (#2096) ; - Save OCC densities to Wavefunction (#2072) ; - Make library SHARED and Py linking MODULE in pybind11 (2104) ; - Remove some OCC code (#2107) ; - Refactor EFP routines (#2111) ; - Pybind11 to v2.6.2 (#2118) ; - Windows package to anaconda.org (#2123) ; - Update v2rdm, qcelemental to 0.19 (#2128) ; - Address linker warning for OSX (#2129) ; - Add DF bases for szvp (#2134) ; - Disable Libint2 screening (#2139) ; - CPPE tests to pytest (#2140) ; - GHA-related fixes (#2144, #2158, #2146, #2167, #2172, #2179) ; - Restore debug symbols (#2159) ; - DCT Cleanup (#2152, #2168, #2171, #2182, #2185) ; - Cleanup of some optking functions (#2170) ; - Improve QCEngine interface for empirical dispersion (#2180) ; - Remove CHKPT (#2186) ; - X2C gradient warning (#2200) ; - Update cmake files to enab",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562:9462,detect,detection,9462,https://psicode.org,https://github.com/psi4/psi4/issues/1562,1,['detect'],['detection']
Safety,"parameterizations, and by passing through TestingMacros and runtest.py, you can't always pass environment info into it. Don't worry, it's staying exactly as it is. I've added a single short file to several ctest directories ...; - [x] moved `setup.cfg` to `pytest.ini` and install it. only pytest was using the setup.cfg file anyways. all labels (things you can `pytest -m quick` akin to `ctest -L quick`) are stored here instead of duplicated btwn setup.cfg and conftest.py. The GHA will complain if you hit unregistered label.; - [x] changed the pytest import_mode from default to ""importlib"". this means (1) we don't need to have empty `__init__.py` in all 500 ctest directories and (2) avoid name conflicts when collecting ctests. Result is that tests/pytests is no longer a module, so a lot of the `from .utils import ...` become `from utils import ...` etc. Those names are looking generic, so may need to rename in future. - Testing Details; - [x] in tests, rewrote `using(package)` function whose role is to detect whether package present and skip test otherwise. now the fn additionally adds ""addon"" label and the name of the package label, so one can run `pytest -m dftd3`. to do this, had to separate into two fns: `uusing` for nested decorator marks and `using` for list marks.; - [x] to avoid FutureWarning, changed three `distutils.dir_util.copy_tree` into `shutil.copytree`. this is a py38 language feature, the first actual breaking of py37+ compatibility.; - [x] added the openfermion demo as test; - [x] apparently 3body in dftd3 fails on Mac. near-term goal is replacing, so skip for now; - [x] newly install pytest.ini and install any test_input.py, input.dat, and input.py from tests/ . sensibly, input.dat/py would only get installed if test_input.py present, but I can't teach cmake that logic, so it's either this or have to register each pytest-prepared psithon test. aux files from tests/ are also installed but these have to be registered with cmake.; - [x] moved `compare_",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2454:3617,detect,detect,3617,https://psicode.org,https://github.com/psi4/psi4/pull/2454,1,['detect'],['detect']
Safety,"per. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` calls in `libsapt_solver/sapt2.cc` with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in `psi4/src/psi4/adc/diagonalize.cc` with new wrapper. Add check for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in `dfoccwave::Tensor2d::diagonalize` with new wrapper. Add check for diagonalization failure.; - [x] Remove vestiges of the diagonalization cutoff from `dfocc`. `dfoccwave::Tensor2d::diagonalize` used to take a ""diagonalization cutoff"" argument, which was passed down to `sq_rsp(...)`. This used to be hardcoded to 1E-10, but went completely defunct when `sq_rsp(...)` started using DSYEV internally (~forever ago), as LAPACK offers no such parameter to adjust and always diagonalizes down to ~machine precision. ### New sanity checks; - [x] Add a sanity check for non-square matrices in `mcscf::MatrixBase::diagonalize`; - [x] Add a sanity check for non-square matrices in `dfoccwave::Tensor2d::diagonalize`; - [x] Add a sanity checks for non-square matrices and illegal values of ""diagonalization order"" in `libmints/matrix.cc` (`Matrix::diagonalize`); - [x] Check that all requested roots converge in the `libqt` Davidson solver used by `adc/prepare_tensors.cc`; - [x] Mark the return value of the `libqt` Davidson solver as `[[nodiscard]]` to force callers to check how many of the requested roots actually converged. ### Unrelated fixes; - [x] Fix a memory leak in the ROHF stability check. **(merged: #2671)**. ### Changes to comments, formatting, etc.; - [x] Fix typos in comments in `adc/diagonalize.cc` and `occ/dpd.h`; - [x] clang-format some files; - [x] Delete some empty lines between doc-comment-blocks and the function definitions so that VSCode can parse the docstrings automatically. (eg. d8cd1b9fee1422ebd10173010e4aa0b7a046335d ); - [x] Use the more generic ""LAPACK"" as a term, instead of MKL/ACML/etc. when referring to the linear algebra library in",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2642:3701,sanity check,sanity checks,3701,https://psicode.org,https://github.com/psi4/psi4/pull/2642,4,['sanity check'],"['sanity check', 'sanity checks']"
Safety,"per](https://onlinelibrary.wiley.com/doi/full/10.1002/jcc.20604) behind Rob's implementation. All three codes will get the same relaxed PDMs and solve orbital response terms by conjugate gradients, but they do not agree on which terms should be called orbital response or the exact form of the conjugate gradient equation to be solved. The caller code should be able to compute the PDMs however they want, with just a link to the relevant paper in the comments. ## Open Questions; * @dgasmith, what do you need to get MP2 RDM information passed to double hybrid functionals (#1333)?; * Crawford group in general, how willing are you to adapt the CC gradients to the new style of gradients?; * What is the fate of CI gradients? These were operational in Psi3 but were not hooked back up to Psi4. This means that at present, Psi can't even do CASSCF gradients. I believe this is enough of an issue for @fevangelista that he was playing with getting these hooked back in.; * Do we want to allow blocks to only include the correlation density but not the reference density? This is simple enough for a Hartree-Fock reference but does introduce ambiguity for other references, e.g., if MR-DSRG wants the gradient code to add a CAS reference to its correlation density.; * Is there some inherent problem with Psi's 3-index tensor technology that would have forced Ugur to use his own tensor classes? I'm not familiar with 3-index manipulations.; * One of the other major problems with the current approach to gradients is prefactors. When writing different blocks of the gradient code to `libiwl`, there's a prefactor you need for different blocks. At present, the needed prefactor seems completely random. I'd _like_ to figure out the origin of these prefactors and determine if there's a way to make them saner, or at least documented. I'll get to this when I've recovered, but if anybody has any knowledge about this, let us know! This issue will be especially important for _spin-restricted_ gradients.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1736:8475,recover,recovered,8475,https://psicode.org,https://github.com/psi4/psi4/issues/1736,1,['recover'],['recovered']
Safety,perhaps wise to make a test that loops through all names in dashparam to see; if psi4 knows the functional name. Especially the exotic ones that are not regularly used.; Is there a smart way to avoid a calculation? . Just now found these:. - mpwp91 -> mpwpw; - mpw1pw91 -> mpw1pw,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/996:194,avoid,avoid,194,https://psicode.org,https://github.com/psi4/psi4/issues/996,1,['avoid'],['avoid']
Safety,"r: /cluster/apps/gcc/4.8.2/bin/gfortran -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90 -- yes; -- Fortran ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Performing Test has_check_all; -- Performing Test has_check_all - Success; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP Fortran flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -fopenmp ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- No BLAS/LAPACK implementation found, but explicit libraries specified; -- No Sphinx, no docs. Pre-built documentation at http://sirius.chem.vt.edu/psi4manual/latest/index.html; -- Found libutil: /usr/lib64/libutil.so ; -- Found libm: /usr/lib64/libm.so ; -- Found librt: /usr/lib64/librt.so ; -- Found libdl: /usr/lib64/libdl.so ; -- Looking for incl",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/581:10387,Detect,Detecting,10387,https://psicode.org,https://github.com/psi4/psi4/issues/581,2,['Detect'],['Detecting']
Safety,"recipies repo ( before the boost recipe was upgraded to 1.60.0). Installed in `$HOME/anaconda/envs/psi4-py2.7` ; - Hombrew boost 1.60.0 installed in `/usr/local/Cellar` and linked by hombrew to `/usr/local`; - I am using CMake 3.2.2; ## Problem:; 1. If I pass the setup args `--boost-libdir/incdir` or the CMake flags `DBOOST_INCLUDEDIR/LIBRARYDIR` ; CMake will report boost version 1.59.0, but actually only set the `INCLUDE` paths correctly, and the `LIBRARY` paths all point to the binaries for 1.60.0 leading to errors in the linking step. ; 2. If I `brew unlink boost` then FindBoost.cmake seems to find boost 1.59.0 as I intended, but then the `Boost_FOUND` variable is ignored and the pre-packaged boost 1.55 is configured to build anyway. ; ## Details/Examples. If I run this setup command:. ```; ./setup --prefix=$HOME/psi4-install \; -DBOOST_INCLUDEDIR=$HOME/anaconda/envs/psi4-py2.7/include \ ; -DBOOST_LIBRARYDIR=$HOME/anaconda/envs/psi4-py2.7/lib \; objdir; ```. I see boost 1.59.0 is detected. ```; -- Boost version: 1.59.0; -- Found the following Boost libraries:; -- filesystem; -- python; -- regex; -- serialization; -- system; -- timer; -- chrono; -- thread; -- Looking for MKL_Free_Buffers; ```. However the build will fail in the linking step with the same `undefined reference` errors as others have seen when trying to link against boost 1.60.0 #243 , #312 . Looking in `CMakeCache.txt` I see that the `Boost_INCLUDE_DIR` has been set correctly but the `Boost_LIBRARY_DIR` and all `Boost_XX_LIBRARY_...` paths have been set to the global boost install in `/usr/local` . ```; //Path to a file.; Boost_INCLUDE_DIR:PATH=/Users/admin/anaconda/envs/psi4-py2.7/include. //Boost library directory; Boost_LIBRARY_DIR:PATH=/usr/local/lib. //Boost python library (debug); Boost_PYTHON_LIBRARY_DEBUG:FILEPATH=/usr/local/lib/libboost_python-mt.a; ```. If I unlink the home-brew boost in `/usr/local` and run the same setup the custom boost is configured to build. . adding the flags `-DBoos",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/313:1244,detect,detected,1244,https://psicode.org,https://github.com/psi4/psi4/issues/313,1,['detect'],['detected']
Safety,removed redundant code in rhf hessian test file,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/894:8,redund,redundant,8,https://psicode.org,https://github.com/psi4/psi4/pull/894,1,['redund'],['redundant']
Safety,"rger segmented version of the pc-n basis sets, optimized for NMR shielding calculations. [10]. I have not been able to find any literature on preferred auxiliary basis sets for use with these, so appropriately sized def2 basis sets should be sufficient. I have been experimenting with these with rather good success. I can also confirm that these basis sets do not require ECPs. Perhaps on the list of wants would be to modify the CBS python wrapper to allow for extrapolation with these basis sets. I may take a stab at this if I can find time in the next little while. [1] Frank Jensen, Polarization consistent basis sets: Principles, J. Chem. Phys. 115, 9113 (2001).; [2] Frank Jensen, Polarization consistent basis sets. II. Estimating the Kohn-Sham basis set limit, J. Chem. Phys. 116, 7372 (2002).; [3] Frank Jensen, Polarization consistent basis sets. III. The importance of diffuse functions, J. Chem. Phys. 117, 9234 (2002).; [4] Frank Jensen, Trygve Helgaker, Polarization consistent basis sets. V. The elements Si-Cl, J. Chem. Phys. 121, 3463 (2004).; [5] Frank Jensen, Polarization consistent basis sets. VI. The elements He, Li, Be, B, Ne, Na, Mg, Al, Ar, J. Phys. Chem. A 111, 11198 (2007).; [6] Frank Jensen, Polarization Consistent Basis Sets. VII. The Elements K, Ca, Ga, Ge, As, Se, B; r and Kr, J. Chem. Phys. 136, 094110 (2012).; [7] Frank Jensen, Polarization Consistent Basis Sets. VIII. The Transition Metals Sc-Zn, J. Chem. Phys. 138, 014107 (2013).; [8] Teobald Kupka, Carmay Lim, Polarization-Consistent versus Correlation-Consistent Basis Sets in Predicting Molecular and Spectroscopic Properties, J. Phys. Chem. A. 111m 1927 (2007).; [9] Frank Jensen, Unifying General and Segmented Contracted Basis Sets. Segmented Polarization Consistent Basis Sets., Journal of Chemical Theory and Computation 10, 1074-1085 (2014) DOI: 10.1021/ct401026a.; [10] Frank Jensen, Segmented Contracted Basis Sets Optimized for Nuclear Magnetic Shielding, J. Chem. Theory Comp. 11, 132 (2015).",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/475:2693,Predict,Predicting,2693,https://psicode.org,https://github.com/psi4/psi4/pull/475,1,['Predict'],['Predicting']
Safety,"ring the HF energy of the first Brueckner iteration as `SCF TOTAL ENERGY` and the quantities from the final B iteration as `CCSD TOTAL ENERGY`, `CCSD(T) TOTAL ENERGY`, and `(T) CORRECTION ENERGY`. In the below, I've reworked it so:; * final B energies get their own qcvars `(BCCD|BCCD(T)) (TOTAL|CORRELATION) ENERGY` in accordance with the principle that `energy(mtd)` should set `mtd TOTAL ENERGY`; * MP2 and CCSD qcvars are now collected from the first B iteration, not the last, so they have canonical values. `SCF TOTAL ENERGY` still from first B iteration.; * `(BCCD|BCCD(T)) CORRELATION ENERGY` now defined as total E of last B iteration minus HF of first B iteration. This is in accordance with the pattern that `mtd CORRELATION ENERGY` = `mtd TOTAL ENERGY` - `SCF TOTAL ENERGY`, but it is admittedly wacky when applied to Brueckner. It is, however, the same way the orbital-optimized methods of occ/dfocc have been handled. The OO methods additionally set a `mtd REFERENCE CORRECTION ENERGY` so that one can recover the ref/corl split of the final OO iteration. That could be added to the BCCD methods. Does the above sound ok, or does it need further reworking? I also tightened up the B r_conv formula a bit because the standard tests (not shown in PR) weren't matching (to 1.e-6) the highly converged values under default conditions (e_conv = 6 --> brueckner_r_conv =4). I've also been on a rampage of late to better (and automatically) document what methods are available under what detailed conditions (e.g., dertype, reference, conv/df/cd type, all-electron/frozen-core). I'd like to add the table snapshotted below to the main [CC docs page](https://psicode.org/psi4manual/master/cc.html). Unfortunately, it doesn't cover excited states or properties, so it can't replace the existing summary table, but it does provide more detail. Does it look ok, and are there any cc* capabilities in the ground-state realm that I've missed?. **Note:** No worries if the CI on this fails. I've copi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2708:1135,recover,recover,1135,https://psicode.org,https://github.com/psi4/psi4/pull/2708,1,['recover'],['recover']
Safety,"rmation of that final target, it first calls FindMathOpenMP that depending on compiler & isMKL=T/F & ENABLE_OPENMP=T/F, sets some stuff to guide FindTargetOpenMP. FindTargetOpenMP calls ordinary FindOpenMP provided by cmake which will return a flag-and-libs containing target from modern cmake or this is constructed in-file as compensation for old cmake. That target (which might or might not be present depending on if OpenMP is enabled or found for compiler) is passed back to FindMathOpenMP which links to it if present but _always_ returns a `tgt::MathOpenMP`. This target may be dummy if there's no OpenMP enabled and the BLAS & Compiler need no mods. Or it may contain modifying flags and libs demanded by BLAS, plus the cmake-like `OpenMP::OpenMP_CXX`. In any case, `tgt::MathOpenMP` is suitable for the OpenMP part of `tgt::lapack`.; - As far as exported targets, still just the BLAS is exported. OpenMP is re-detected at `find_package(TargetLAPACK)`-time, since what it acts upon (isMKL (from target), CMAKE_CXX_COMPILER_ID, and ENABLE_OPENMP) are fundamentally variable in calling pkg.; - Consequence is that psi4/src/core.cc and plugins which have been getting their openmp flag from CMAKE_CXX_FLAGS, now have to be linked to `tgt::lapack` (former) and have ENABLE_OPENMP passed & linked to `tgt::MathOpenMP` (latter).; - Works on Linux GCC & ICPC and cmake 3.3 & 3.11. ## Questions; - [x] @robertodr and @bast, I'd really appreciate your impressions as to whether this is a good way forward. For reference, here are some target printouts. Intel + MKL + cmake 3.3. ```; Properties for TARGET OpenMP::OpenMP_CXX:; OpenMP::OpenMP_CXX.INTERFACE_COMPILE_DEFINITIONS = <NOTFOUND>; OpenMP::OpenMP_CXX.INTERFACE_COMPILE_OPTIONS = ""$<$<COMPILE_LANGUAGE:CXX>:-qopenmp>""; OpenMP::OpenMP_CXX.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; OpenMP::OpenMP_CXX.INTERFACE_LINK_LIBRARIES = ""/home/psilocaluser/toolchainconda/envs/p4dev36/lib/libiomp5.so;/usr/lib64/libpthread.so""; Properties for TARGET tgt::MathOpe",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1031:3363,detect,detected,3363,https://psicode.org,https://github.com/psi4/psi4/pull/1031,1,['detect'],['detected']
Safety,rollback detect dynamic Boost,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/425:9,detect,detect,9,https://psicode.org,https://github.com/psi4/psi4/pull/425,1,['detect'],['detect']
Safety,"ror logs and output are attached (check bottom of the post). Any suggestions ? . ```; ./setup --prefix=""/home/vayu/ChemPackage/psi4/opt_ins"" --cc=icc --cxx=icpc --fc=ifort --mkl=parallel build; Configuring system: Ubuntu; cmake -DCMAKE_Fortran_COMPILER=ifort -DCMAKE_C_COMPILER=icc -DCMAKE_CXX_COMPILER=icpc -DENABLE_MPI=OFF -DENABLE_SGI_MPT=OFF -DENABLE_OMP=ON -DENABLE_VECTORIZATION=OFF -DENABLE_CSR=OFF -DENABLE_SCALAPACK=OFF -DENABLE_SCALASCA=OFF -DENABLE_UNIT_TESTS=OFF -DENABLE_STATIC_LINKING=OFF -DENABLE_PLUGINS=OFF -DENABLE_CXX11_SUPPORT=ON -DLIBINT_OPT_AM=5 -DEXECUTABLE_SUFFIX= -DENABLE_AUTO_BLAS=ON -DENABLE_AUTO_LAPACK=ON -DMKL_FLAG=""-mkl=parallel"" -DMKL_FLAG_SET=ON -DENABLE_AUTO_BLAS=OFF -DENABLE_AUTO_LAPACK=OFF -DCMAKE_INSTALL_PREFIX=/home/vayu/ChemPackage/psi4/opt_ins -DCMAKE_BUILD_TYPE=release /home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0. -- User set explicit MKL flag which is passed to the compiler and linker: -mkl=parallel; -- This disables math detection and builtin math libraries; -- Setting -DHAVE_MKL_BLAS and -DHAVE_MKL_LAPACK; CMake Error: File /home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/scf.rst does not exist.; CMake Error at doc/sphinxman/CMakeLists.txt:22 (configure_file):; configure_file Problem configuring file. CMake Error: File /home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/cfour.rst does not exist.; CMake Error at doc/sphinxman/CMakeLists.txt:22 (configure_file):; configure_file Problem configuring file. Error copying file (if different) from ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/psi4banner.png"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; Error copying file (if different) from ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/AlphaMOs.png"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; Error copying file (if different) from ""/home/vayu/ChemPac",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/629:1485,detect,detection,1485,https://psicode.org,https://github.com/psi4/psi4/issues/629,1,['detect'],['detection']
Safety,"rray_to_vector(int n, const int* array)` to initialize some of its `std::vector<int>` members by copying the innards of `Dimension` objects. Unfortunately this is happening through the rather inelegant mechanism of implicitly calling `Dimension::operator const int*() const`, which is set to be removed eventually. This PR replaces all calls of `convert_int_array_to_vector` in `libmoinfo` with simple assignment-initialization. Now, this could in theory lead to a change in behavior, as the former only copies the first `n` elements of the array inside the Dimension object instead of the entire thing, but in practice that does not seem to be happening. As far as I can tell, for trouble to happen it would require an internally inconsistent `Wavefunction` object or `libmoinfo` trying to use only a subset of the irreps. Nevertheless, I have added checks to ensure that any condition that would lead to an unpredictable change in behavior after this PR, results in a crash instead. I don't think it should ever happen, but internal consistency checks are probably not a bad idea anyways. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] None. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Replace all calls of `convert_int_array_to_vector` in `libmoinfo` with simple assignment-initialization; - [x] Add internal consistency checks to guard against possible hazards; - [x] Remove now-unused function `MOInfoBase::convert_int_array_to_vector`. ## Questions; - If everyone else is confident that the checks are redundant I _could_ remove them. ## Checklist; - [x] No new features; - [x] No new errors in the full test suite. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3177:1894,hazard,hazards,1894,https://psicode.org,https://github.com/psi4/psi4/pull/3177,2,"['hazard', 'redund']","['hazards', 'redundant']"
Safety,"rtantly are only including what you need. The reason the build is so much faster is that I have trimmed many of the unneeded includes.; ### Unified Header Inclusions. All include files are (or should be) relative to root (In practice I missed some, but they are in the same directory as the file they are included in and are fine for now). The reason for this is we want to transition to a modular nature and it is easiest for the users of these modules if they only have to specify the Psi4 include directory as an include and not each subdirectory of it. Note that this is how nearly every professional C++ library I am aware of does this (Boost, Eigen, TBB, ...). The second (and arguably better reason) is doing it any other way makes the superbuild a lot harder when something is staged.; ## No More Convenience Headers. Convenience headers, like `mints.h` are evil. If they exist (like in many professional libraries) they are to be used by your users only. The primary reason for avoiding them is that they increase compile times. This is one of the primary reasons you had to recompile half of Psi4 when changing most files. Lesser reasons:; - Harder to know exactly what you brought in (people duplicated the contents of `mints.h` all over the place). ; - Can destroy distinction between interface/implementation classes if done incorrectly; - Splitting the header is a nightmare (as I can attest to) and is required if code gets factored, which really should happen to mints.; ## Removed psiconfig.h. The macros in it are easily replace by CMake's `add_definitions` function and doing so clears up the macro namespace considerably. Furthermore a lot of those macros weren't even being used.; ## Static vs. Shared Psi4 Core libraries. CMake provides the variable `BUILD_SHARED_LIBS` to toggle this. We weren't respecting this and have been forcing static builds. Again moving to modules is facilitated by shared libraries. I will note that apparently libiwl can't be compiled dynamically. ; ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442:6022,avoid,avoiding,6022,https://psicode.org,https://github.com/psi4/psi4/pull/442,1,['avoid'],['avoiding']
Safety,"ry and run `make` the `libint_DIR `and `libefp_DIR` argurments are not passed on to cmake for psi4_core and the build errors out with the following message:. ```shell; Performing configure step for 'psi4_core'; loading initial cache file /home/amjames2/newriver/psi4-builds/new-debug/psi4_core-prefix/tmp/psi4_core-cache.cmake; -- The C compiler identification is GNU 5.2.0; -- The CXX compiler identification is GNU 5.2.0; -- Check for working C compiler: /home/amjames2/.conda/envs/py3/bin/gcc; -- Check for working C compiler: /home/amjames2/.conda/envs/py3/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Found PythonInterp: /home/amjames2/.conda/envs/py3/bin/python (found version ""3.5.2"") ; -- Found PythonLibs: /home/amjames2/.conda/envs/py3/lib/libpython3.so; -- Looking for include file pthread.h; -- Looking for include file pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE ; -- Found libdl: /usr/lib64/libdl.so ; CMake Error at CMakeLists.txt:35 (find_package):; Could not find a package configuration file provided by ""libefp"" with any; of the following names:. libefpConfig.cmake; libefp-config.cmake. Add the installation prefix of ""libefp"" to CMAKE_PREFIX_PATH or set; ""libefp_DIR"" to a directory containing one of the above files. If ""libefp""; provides a separate development package or SDK, be sure it has been; installed. -- Configuring incomplete, errors occurred!; ```. It seems that if I add two lines to the `CMAK",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/516:1754,Detect,Detecting,1754,https://psicode.org,https://github.com/psi4/psi4/issues/516,4,['Detect'],['Detecting']
Safety,"s are compatible, so a fresh install `conda update psi4 libint -c psi4/label/dev` will be fine.; * However, if you have a conda environment and you update psi4 but not libint, then you'll have a >=1.3rc1 psi4 and the `_4` (see above) AM6 libint, which is trouble. Easy to solve by updating libint: `conda update libint -c psi4/label/dev`. After that, your `conda list` should say `_5`.; * If you have a conda env and you update libint but not psi4 (uncommon), that's also a problem. Update psi4. If what you really want is for the psi4 to work and the libint upgrade was a mistake, downgrade the libint: `conda install libint=1.2.1=h87b9b30_4 -c psi4`. ### what can go wrong with locally-built psi4?. * A major use of the `libint` conda package is to be a detectable pre-built dependency for a from-source psi4 compilation. If the `$CONDA_PREFIX/lib/libint.so` to which a psi4 `core.so` is linked suddenly changes identity, psi4 will be deranged.; * To fix this, `cmake` needs to detect the new libint headers and a half-dozen psi4 files need to rebuild.; ```; > cd <objdir>; > rm -rf external/upstream/libint/; > make; # cmake says: -- Found Libint 8: /home/psilocaluser/toolchainconda/envs/p4dev37/lib/libint.so (found version 1.2.1); ```; * If you need to avoid recompiling and instead revert your environment back to the AM6 libint, use the command in the last bullet of the previous section. ### Notes; * Only Linux affected. It took a week to build AM6 on the mac mini, so AM8 is not within reach. Thus, it's possible for the same job to run fine on linux binary but throw an angular momentum error on mac binary.; * `simint` max is AM7 both past and near future. Only `libint` is changing.; * Between higher AM and optimizing for multiple architectures, the new libint pkg is _heavy_, >120mb zipped. For psi4 CI, I'm planning to pull the old AM6 to lessen the strain on Travis. This won't help downstream projects that summon a built psi4 to test their addon.; * I haven't posted the AM8 packa",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1533:2485,detect,detect,2485,https://psicode.org,https://github.com/psi4/psi4/issues/1533,1,['detect'],['detect']
Safety,"s, and one ecosystem file~; - [x] removed all the `LGTM_SRC` stuff since it's defunct and all the ""CHOOSE"" stuff, since a master L2 won't work anymore b/c need the shg order switching.; - [x] finishes the job of fully C++17 from #2392 . Newest Intel compilers from 2023.0 oneapi (versions icpc 2021.8 and icpx 2023.0) are ok with Libint2 and C++17. For older Intel, there's a keyword `psi4_CXX_STANDARD_Libint2` that can be reset to 14.; - [ ] pull together accumulated xhost changes (hiccup here is that `icpx` can take `-xHost` but `icx` can't, and our `option_with_flags` routine tries both so it throws an unnecessary warning. not a must for this PR).; - [x] the linux L2 is my local c-b, but mac and windows are from c-f staged-recipes. apparently any Hessian ERIs cause the Windows build to hang longer than the 6h Azure allows, so the W package is hessin-ints-less for TEI (I kept the onebody 2der). This isn't too debilitating since only HF and SVWN have analytic hessians anyways, so when an incapable L2 is detected (imagine that -- we can ask L2 what it can do!), it falls back to FD. That would be easy enough except the tests check too tightly for 3-pt FD to match analytical refs. So I've added a `d2ints` label to ctest and pytest to allow not running. This should probably convert to a skipif someday. Most of the tests I've checked individually and they would pass if findif points=5.; - [x] You notice a ""new"" boost-cpp dependency. Compiling against the header-only L2 C++11 interface (as psi4 does) requires a select few boost headers. In building the L2 package, one can either ask L2 to copy those few files in to `include/libint2/boost/` (that is, vendor boost) or not, effectively passing the problem along to the consumer (psi). In my own conda packages for L2, I did the former, so psi didn't need any boost. For the c-f L2 packages, I figured it was better practice to not vendor, hence the ""new"" dep. It's header-only, not boost::python or any of the boost compiled libs, so",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2861:2325,detect,detected,2325,https://psicode.org,https://github.com/psi4/psi4/pull/2861,1,['detect'],['detected']
Safety,"software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive_static.hpp(30),; from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive.hpp(18),; from /home/seba/software/psi4-0.5/src/lib/libmints/basisset.cc(29):. In file included from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive_static.hpp(30),; from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive.hpp(18),; from /home/seba/software/psi4-0.5/src/lib/libmints/basisset.cc(29):; /usr/include/c++/5/bits/stl_iterator_base_types.h(158): error: name followed by ""::"" must be a class or namespace name; typedef typename _Iterator::reference reference;; ^; In file included from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive_static.hpp(30),; from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive.hpp(18),; from /home/seba/software/psi4-0.5/src/lib/libmints/basisset.cc(29):; detected during:; In file included from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive_static.hpp(30),; from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive.hpp(18),; from /home/seba/software/psi4-0.5/src/lib/libmints/basisset.cc(29):; instantiation of class ""std::__iterator_traits<_Iterator, void> [with _Iterator=int]"" at line 163; In file included from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive_static.hpp(30),; from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive.hpp(18),; from /home/seba/software/psi4-0.5/src/lib/libmints/basisset.cc(29):; instantiation of class ""std::iterator_traits<_Iterator> [with _Iterator=int]"" at line 98 of ""/home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/regex_token_iterator.hpp""; In file included from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive_static.hpp(30),; from /home/seba/software/psi4-0.5/objects/boost/include",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/262:14079,detect,detected,14079,https://psicode.org,https://github.com/psi4/psi4/issues/262,1,['detect'],['detected']
Safety,"sr/lib64/libutil.so; -- Found libm: /usr/lib64/libm.so; -- Found librt: /usr/lib64/librt.so; -- Found libdl: /usr/lib64/libdl.so; -- Looking for pthread.h; -- Looking for pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE; -- Found PythonInterp: /usr/bin/python2.6 (found version ""2.6.6""); -- Found PythonLibs: /usr/lib64/libpython2.6.so (found suitable exact version ""2.6.6""); -- Could NOT find Boost; -- Boost 1.55.0 not found. The pre-packaged version will be built.; -- Libraries to be built: filesystem, python, regex, serialization, system, timer, chrono, thread, mpi; -- Toolset to be used: intel-linux; -- Looking for MKL_Free_Buffers; -- Looking for MKL_Free_Buffers - found; -- Looking for __builtin_expect; -- Looking for __builtin_expect - found; -- Looking for __builtin_prefetch; -- Looking for __builtin_prefetch - found; -- Looking for __builtin_constant_p; -- Looking for __builtin_constant_p - found; -- Looking for erf; -- Looking for erf - found; -- DKH in LibMints ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Use the commands in setup_command to reproduce this build; -- Configuring done; -- Generating done; -- Build files have been written to: /mnt/data/users/dm4/vol12/medvedevmg_1708/bin/tmp/psi4public-0.3/objdir. configure step is done; now you need to compile the sources:. > > > cd objdir; > > > make. ---. The full out from the ./setup for the 0.3 release with the intel/13.1.0 compiler is:. ./setup --cc mpicc --cxx mpicxx --fc mpif77 --prefix /mnt/data/users/dm4/vol12/medvedevmg_1708/bin/psi4 --omp --mpi --mkl parallel --cmake ~/bin/cmake/bin/cmake; /mnt/data/users/dm4/vol12/medvedevmg_1708/bin/cmake/bin/cmake -DCMAKE_Fortran_COMPILER=mpif77 -DCMAKE_C_COMPILER=mpicc -DCMAKE_CXX_COMPILER=mpicxx -DENABLE_MPI=ON -DENABLE_SGI_",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/201:8835,Detect,Detecting,8835,https://psicode.org,https://github.com/psi4/psi4/issues/201,2,['Detect'],['Detecting']
Safety,"t get an warning; - [x] Add docs with examples of math detection; - [x] Remove unused routes in math detection: explicit, external, mkl_flag; - [x] ConfigMath now FATAL_ERRORs if math libs _not_ found; - [x] Newly pays attention to headers for math. Only required for MKL.; - [x] Add a threading testing script for general maintenance, see comment below. In general tests where MKL found. Has compare_values, but really better suited for running by hand and judging results, as `-jN` defeats the purpose.; - [x] Added some CCSD(T) table docs requested by @CDSherrill ; * **User-Facing for Release Notes**; - [x] Change Mac math precedence to `MKL SYSTEM_NATIVE OPENBLAS ESSL ATLAS ACML` so native accelerate only behind MKL; - [x] New mechanism to pass in math libs explicitly through `LAPACK_LIBRARIES` and `LAPACK_INCLUDE_DIRS`; - [x] Collects all the addon libraries into a list, then forms RPATH of internal (relative to ORIGIN), then all non-static, non `/usr/` paths. Redundancy removed and math libs paths _always_ first. This takes over from `INSTALL_RPATH_USE_LINK_PATH`.; - [x] Bumped CMake minimum version to 3.2; - [x] Added some extra badges to README. ## Questions; - [x] I had already implemented the isMKL? detection in ConfigMath before I looked back and found [mkl testing] (https://github.com/psi4/psi4private/blob/71ea2ea8ee142ee42541c589c42977fff2d3c381/CMakeLists.txt#L173-L174). Do we want to do that way instead? Who added the ""NEEDS"" there? _From discussion below, No, bad idea._; - [x] @robertodr and/or @bast, I've commented out all the EXPLICIT_LIB and EXTERNAL_LIB stuff from ConfigMath because the new CMake scheme isn't doing anything with those libs, and the TargetLAPACK uses only `BLAS/LAPACK_LIBRARIES`. But we do need a way to take in a raw library string. By inclination, I would just have that if user specifies `BLAS/LAPACK_LIBRARIES`, then those get processed immediately into the TargetLAPACK. But I thought I'd see if you had other/opposing opinions. _From di",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/615:2616,Redund,Redundancy,2616,https://psicode.org,https://github.com/psi4/psi4/pull/615,1,['Redund'],['Redundancy']
Safety,"t has already been patched into c-f builds as of v1.8.2 `_1`. ## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] test py312 where possible (mac py312 works, but to keep testing legacy qcfractal (until psi4 v1.9), need to stick with py39); - [x] switch azure windows to miniforge, so it doesn't spend 18m switching default channels and doing the solve to get mamba. (note that this isn't a weakness of miniconda (which has packaged conda and mamba since this summer) but of the age of the miniconda on chocolatey vs the age of the miniforge.; - [x] tested the new qcfractal 0.51 and found that (1) there's a snowflake threading bug that Ben has since fixed (unreleased) and (2) there's a new space-saving step on qcfractal, so psi4 driver needs to regenerate qcvars info for distributed driver thru qcf runs (fixed here).; - [x] on py312 on windows, there's a change in `shutil.which` that affects us through qcel. currently patched, but awaiting a new release there.; - [x] py312 starts visible SyntaxWarning about non-escaped special characters (like '\n' newline or '\b' bell) and unfortunately, they abound in Windows paths. Further unfortunately, the error detection in the new version parsing for psi4 in qcengine (implemented to avoid those ""[-1] index is not accessible"" means ""pull psi4 tags or otherwise fix version"" errors) springs into defense and thinks a clean psi4 isn't present. So, let's convert possible filepaths to raw strings so no confusion with special chars. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3049:1490,detect,detection,1490,https://psicode.org,https://github.com/psi4/psi4/pull/3049,2,"['avoid', 'detect']","['avoid', 'detection']"
Safety,t_rhf_fchk[df-rhf-mp2]; - [ ] test_uhf_fchk[df-uhf]; - [ ] test_rhf_fchk[df-rhf)]; - [ ] test_rhf_fchk[conv-rhf-cc2]. - fails ctest; - [x]	103 - cubeprop (Failed); - [x]	104 - cubeprop-frontier (Failed); - [x]	123 - density-screen-2 (Timeout); - [x]	161 - dft-grad-lr1 (Failed); - [x]	162 - dft-grad-lr2 (Failed); - [x]	163 - dft-grad-lr3 (Failed); - [x]	168 - dft-b2plyp (Failed); - [x]	170 - dft-ghost (Failed); - [x]	171 - dft-grad-meta (Failed); - [x]	173 - dft-freq-analytic (Failed); - [x]	174 - dft-grad1 (Failed); - [x]	175 - dft-grad2 (Failed); - [x]	177 - dft-b3lyp (Failed); - [x]	178 - dft1 (Failed); - [x]	179 - dft-vv10 (Failed); - [x]	180 - dft1-alt (Failed); - [x]	181 - dft2 (Failed); - [x]	182 - dft3 (Failed); - [x]	183 - dft-omega (Failed); - [x]	226 - frac-ip-fitting (Failed); - [x]	228 - frac-traverse (Failed); - [x]	234 - mbis-1 (Failed); - [x]	235 - mbis-2 (Failed); - [x]	236 - mbis-3 (Failed); - [x]	237 - mbis-4 (Failed); - [x]	238 - mbis-5 (Failed); - [x]	239 - mbis-6 (Failed); - [ ]	245 - mints3 (Failed) (fails because ref data are deposited in Gaussian ordering); - [x]	287 - olccd2 (Failed); - [x]	302 - omp3-3 (Failed); - [x]	307 - opt-lindep-change (Failed); - [x]	321 - opt13 (Failed); - [x]	348 - pywrap-checkrun-rhf (Failed); - [x]	350 - pywrap-checkrun-uhf (Failed); - [x]	366 - sapt-dft-api (Failed); - [x]	367 - sapt-dft-lrc (Failed); - [x]	390 - scf-level-shift-rks (Failed); - [x]	397 - soscf-dft (Failed); - [x]	401 - sapt-dft1 (Failed); - [x]	402 - sapt-dft2 (Failed); - [x]	405 - dft-custom (Failed); - [x]	425 - cubeprop-esp (Failed); - [ ]	434 - scf-coverage (Failed); - [x]	435 - dft-custom-dhdf (Failed); - [x]	437 - dft-custom-mgga (Failed); - [x]	438 - dft-custom-gga (Failed); - [x]	446 - tdscf-3 (Failed); - [x]	447 - tdscf-4 (Failed); - [x]	449 - tdscf-6 (Failed); - [x] 459 - linK-2 (Timeout); - [ ] 324 - opt-irc-2 (Failed). ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psic,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2537:1858,Timeout,Timeout,1858,https://psicode.org,https://github.com/psi4/psi4/pull/2537,2,['Timeout'],['Timeout']
Safety,"tered. In short, the COSX K build method breaks with certain grid configurations - specifically, grid configurations which result in negative grid weights. How to best handle that issue - removing such grid configurations from Psi4 entirely, handling negative grid weights differently within COSX itself - is still under discussion, and this PR is _not_ meant to be a final fix to the aforementioned issue. Rather, this PR is meant to provide a more informative error message in the case that an end user _does_ encounter this error. Currently, when this error is encountered, it shows up as either a DGESV error (if the initial COSX grid has negative weights) or an ADIIS minimization error (if the final COSX grid has negative weights). These error outputs don't help the end user figure out what is wrong at all. So, what this PR does, is add sanity checks to ensure that the COSX grids don't have negative weights, and throw an exception if they do. The sanity check exceptions explain to the user what the error is and how they can fix it (i.e., changing the grid pruning scheme and/or number of spherical points). Again, I want to emphasize that this is _not_ intended to be a full fix to https://github.com/psi4/psi4/issues/2890. Rather, it is an intermediate step that is designed to better help end users avoid the problem if they run into it themselves. ## User API & Changelog headlines; N/A. ## Dev notes & details; - [X] Add sanity checks to COSX to ensure that neither of the COSX grids have negative grid weights. An exception is thrown if either of the grids do. ## Questions; - [x] Probably better discussed on https://github.com/psi4/psi4/issues/2890, but how do we want to officially solve this problem? There has been some discussion on simply removing grid configurations which lead to negative weights, as well as discussions on reformulating the X matrix (the matrix central to the observed error) to be able to handle positive grid weights. . ## Checklist; - [X] Tests added f",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2906:1097,sanity check,sanity check,1097,https://psicode.org,https://github.com/psi4/psi4/pull/2906,1,['sanity check'],['sanity check']
Safety,"testing. leaving at Py39 for now, but mysterious; - [ ] I haven't removed all the addons from the Azure pipelines yet but I can if everyone comfortable. - Testing Strategy; - [x] `ctest` is familiar, easy to read, and doesn't require configuration. on the other hand, it can't test installations, it can't do parameterizations, and by passing through TestingMacros and runtest.py, you can't always pass environment info into it. Don't worry, it's staying exactly as it is. I've added a single short file to several ctest directories ...; - [x] moved `setup.cfg` to `pytest.ini` and install it. only pytest was using the setup.cfg file anyways. all labels (things you can `pytest -m quick` akin to `ctest -L quick`) are stored here instead of duplicated btwn setup.cfg and conftest.py. The GHA will complain if you hit unregistered label.; - [x] changed the pytest import_mode from default to ""importlib"". this means (1) we don't need to have empty `__init__.py` in all 500 ctest directories and (2) avoid name conflicts when collecting ctests. Result is that tests/pytests is no longer a module, so a lot of the `from .utils import ...` become `from utils import ...` etc. Those names are looking generic, so may need to rename in future. - Testing Details; - [x] in tests, rewrote `using(package)` function whose role is to detect whether package present and skip test otherwise. now the fn additionally adds ""addon"" label and the name of the package label, so one can run `pytest -m dftd3`. to do this, had to separate into two fns: `uusing` for nested decorator marks and `using` for list marks.; - [x] to avoid FutureWarning, changed three `distutils.dir_util.copy_tree` into `shutil.copytree`. this is a py38 language feature, the first actual breaking of py37+ compatibility.; - [x] added the openfermion demo as test; - [x] apparently 3body in dftd3 fails on Mac. near-term goal is replacing, so skip for now; - [x] newly install pytest.ini and install any test_input.py, input.dat, and input.p",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2454:3291,avoid,avoid,3291,https://psicode.org,https://github.com/psi4/psi4/pull/2454,1,['avoid'],['avoid']
Safety,thread pool: fix unsafe variable change,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/20:17,unsafe,unsafe,17,https://psicode.org,https://github.com/psi4/psi4/pull/20,1,['unsafe'],['unsafe']
Safety,"tions from Psi4 entirely, handling negative grid weights differently within COSX itself - is still under discussion, and this PR is _not_ meant to be a final fix to the aforementioned issue. Rather, this PR is meant to provide a more informative error message in the case that an end user _does_ encounter this error. Currently, when this error is encountered, it shows up as either a DGESV error (if the initial COSX grid has negative weights) or an ADIIS minimization error (if the final COSX grid has negative weights). These error outputs don't help the end user figure out what is wrong at all. So, what this PR does, is add sanity checks to ensure that the COSX grids don't have negative weights, and throw an exception if they do. The sanity check exceptions explain to the user what the error is and how they can fix it (i.e., changing the grid pruning scheme and/or number of spherical points). Again, I want to emphasize that this is _not_ intended to be a full fix to https://github.com/psi4/psi4/issues/2890. Rather, it is an intermediate step that is designed to better help end users avoid the problem if they run into it themselves. ## User API & Changelog headlines; N/A. ## Dev notes & details; - [X] Add sanity checks to COSX to ensure that neither of the COSX grids have negative grid weights. An exception is thrown if either of the grids do. ## Questions; - [x] Probably better discussed on https://github.com/psi4/psi4/issues/2890, but how do we want to officially solve this problem? There has been some discussion on simply removing grid configurations which lead to negative weights, as well as discussions on reformulating the X matrix (the matrix central to the observed error) to be able to handle positive grid weights. . ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2906:1453,avoid,avoid,1453,https://psicode.org,https://github.com/psi4/psi4/pull/2906,2,"['avoid', 'sanity check']","['avoid', 'sanity checks']"
Safety,"tives (e.g., pk+df) that had gotten lost. See #245 for much discussion. tl;dr we have none, so let's not continue to let psi proceed with calculations that give beer + wrong answers; - [x] CISD is a poor way to calculate MP2, and it's not like we don't have other modules for RHF & ROHF besides DETCI. And @CDSherrill has allowed that we're unlikely to get to the bottom of it, so closes #311 . And the mp2 detci code is unsteady for multiple-detci-single-psi4 calcs, so it's not smooth to test.; - [x] qcvars; - [x] Newly sets `<mtd> TOTAL GRADIENT` from findif in driver on wfn and P::e; - [x] Newly sets `MP2 SINGLES ENERGY` and `MP2 DOUBLES ENERGY` in C++ where available.; - [x] Fixes up the conventional CCSD qcvars in ccenergy, including closes #1702 ; - [x] Fixes up CD/DF-CCSD qcvars in fnocc, dfocc; - [x] Moves qcvars in fnocc from P::e.globals to wfn; - [x] Adds fc/ae aspects to managed method for gradient mp2. Old behavior for fc conv mp2 grad was to stop with an informative message. New behavior is to hop into finite difference. Users who definitely want to avoid finite difference for compute time or accuracy should run `gradient(..., dertype=1)` to get psi to stop instead. ## Questions; - [ ] ~Organization of tests is not finalized. qcng does 6 tests per method (r/u/ro x ae/fc) (https://github.com/MolSSI/QCEngine/blob/master/qcengine/programs/tests/test_standard_suite_ccsd.py), which is nice, but in psi, it's nice to keep all the modules together. I'm undecided.~; - [ ] @JonathonMisiewicz, did you ever get the impression that `pcg_convergence` should be tighter in dfocc? Present setting 1.e-6 doesn't converge gradients to 6 digits. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review - most of the new tests are skipped pending https://github.com/MolSSI/QCEngine/pull/238; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1850:2512,avoid,avoid,2512,https://psicode.org,https://github.com/psi4/psi4/pull/1850,1,['avoid'],['avoid']
Safety,"tl;dr Psi4 itself needs no changes for numpy v2, but its runtime major version does need to match the compile-time major version. Current conda-package v1.9.1 with _1 needs to be used in a np v1 env. I'll rebuild a _2 soon that can be used with np v2. longer:; Numpy v2 is up on conda-forge and so may show up in an environment near you. The situation wrt psi4 is that it needs either v1 or v2 depending on what it was compiled against. So:. * the conda package -- AVOIDABLE PROBLEM, this is compiled against numpy v1, so constrain your env. I'll do a new build against v2 after qcel is ready.; * an old objdir compiled against a v1 numpy -- no problem, just don't let any new conda commands update the env to v2 numpy. use `numpy=1* -c conda-forge` in any `conda update` or `conda install` commands.; * a fresh objdir where the numpy is v2 -- no problem, psi4 compiles just fine. Might need https://github.com/MolSSI/QCElemental/pull/338; * an old objdir compiled against a v1 numpy that now sees a v2 numpy at runtime -- PROBLEM, see signature below. downgrade the numpy with `conda install numpy=1 -c conda-forge`. The symptom of an incompatible psi4+numpy is the following. ```; !----------------------------------------------------------------------------------!; ! !; ! Following atoms are too close: [(0, np.int64(1), np.float64(0.0)), (0, !; ! np.int64(2), np.float64(0.0)), (1, np.int64(2), np.float64(0.0))] !; ! !; !----------------------------------------------------------------------------------!; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3184:465,AVOID,AVOIDABLE,465,https://psicode.org,https://github.com/psi4/psi4/issues/3184,1,['AVOID'],['AVOIDABLE']
Safety,to find the executable at any of:; /mnt/data/users/dm4/vol12/medvedevmg_1708/bin/tmp/psi4public-0.3/objdir/check_cxx11/cxx11_regex/CMakeFiles/CMakeTmp/cmTC_a8cfe; /mnt/data/users/dm4/vol12/medvedevmg_1708/bin/tmp/psi4public-0.3/objdir/check_cxx11/cxx11_regex/CMakeFiles/CMakeTmp/Debug/cmTC_a8cfe; /mnt/data/users/dm4/vol12/medvedevmg_1708/bin/tmp/psi4public-0.3/objdir/check_cxx11/cxx11_regex/CMakeFiles/CMakeTmp/Development/cmTC_a8cfe. -- User set explicit MKL flag which is passed to the compiler and linker: -mkl=parallel; -- This disables math detection and builtin math libraries; -- Setting -DHAVE_MKL_BLAS and -DHAVE_MKL_LAPACK; -- System : Linux; -- Processor type : x86_64; -- C++ compiler flags : -DRESTRICT=**restrict** -Xlinker -export-dynamic -fPIC -std=c++11 -mkl=parallel -qopenmp -O3 -no-prec-div -DNDEBUG -xHost; -- C compiler flags : -restrict -DRESTRICT=**restrict** -std=c99 -fPIC -mkl=parallel -qopenmp -O3 -ip -DNDEBUG -xHost; -- Fortran compiler flags: -w -fpp -assume byterecl -DVAR_IFORT -fPIC -nosave -mkl=parallel -qopenmp -O3 -ip -xHost; -- Libraries : -mkl=parallel; -- Definitions : USE_FCMANGLE_H;SYS_LINUX;HAS_CXX11;HAS_CXX11_FUNC;HAS_CXX11_AUTO;HAS_CXX11_AUTO_RET_TYPE;HAS_CXX11_CONSTEXPR;HAS_CXX11_CSTDINT_H;HAS_CXX11_DECLTYPE;HAS_CXX11_INITIALIZER_LIST;HAS_CXX11_LAMBDA;HAS_CXX11_LONG_LONG;HAS_CXX11_NULLPTR;HAS_CXX11_LIB_REGEX;HAS_CXX11_RVALUE_REFERENCES;HAS_CXX11_SIZEOF_MEMBER;HAS_CXX11_STATIC_ASSERT;HAS_CXX11_VARIADIC_TEMPLATES;HAVE_MKL_BLAS;HAVE_MKL_LAPACK;HAVE_MPI;HAVE_DKH; -- The CXX compiler identification is Intel 15.0.0.20140723; -- The C compiler identification is Intel 15.0.0.20140723; -- Check for working CXX compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpicxx; -- Check for working CXX compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpicxx -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working C compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpicc; -- Check for working C compiler: /o,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/201:11036,detect,detection,11036,https://psicode.org,https://github.com/psi4/psi4/issues/201,1,['detect'],['detection']
Safety,trict -DRESTRICT=**restrict** -std=c99 -fPIC -mkl=parallel -qopenmp -O3 -ip -DNDEBUG -xHost; -- Fortran compiler flags: -w -fpp -assume byterecl -DVAR_IFORT -fPIC -nosave -mkl=parallel -qopenmp -O3 -ip -xHost; -- Libraries : -mkl=parallel; -- Definitions : USE_FCMANGLE_H;SYS_LINUX;HAS_CXX11;HAS_CXX11_FUNC;HAS_CXX11_AUTO;HAS_CXX11_AUTO_RET_TYPE;HAS_CXX11_CONSTEXPR;HAS_CXX11_CSTDINT_H;HAS_CXX11_DECLTYPE;HAS_CXX11_INITIALIZER_LIST;HAS_CXX11_LAMBDA;HAS_CXX11_LONG_LONG;HAS_CXX11_NULLPTR;HAS_CXX11_LIB_REGEX;HAS_CXX11_RVALUE_REFERENCES;HAS_CXX11_SIZEOF_MEMBER;HAS_CXX11_STATIC_ASSERT;HAS_CXX11_VARIADIC_TEMPLATES;HAVE_MKL_BLAS;HAVE_MKL_LAPACK;HAVE_MPI;HAVE_DKH; -- The CXX compiler identification is Intel 15.0.0.20140723; -- The C compiler identification is Intel 15.0.0.20140723; -- Check for working CXX compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpicxx; -- Check for working CXX compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpicxx -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working C compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpicc; -- Check for working C compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpicc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- The Fortran compiler identification is Intel 15.0.0.20140723; -- Check for working Fortran compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpif77; -- Check for working Fortran compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpif77 -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /opt/intel/impi/5.0.1.035/intel64/bin/mpif77 supports Fortran 90; -- Checking whether /opt/intel/impi/5.0.1.035/intel64/bin/mpif77 supports Fortran 90 -- yes; -- Fortran ENABLED; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- dec,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/201:12299,Detect,Detecting,12299,https://psicode.org,https://github.com/psi4/psi4/issues/201,2,['Detect'],['Detecting']
Safety,"tropy agrees completely; - NWChem 6.6; - For default isotope H2O, we agree completely; - For _any_ non-default isotope D2O, HDO, DTO; - trans entropy disagrees since the total molecular mass is not recomputed.; - rot entropy disagrees since the symmetry number is not updated. And it disagrees with Q-Chem and Molpro (which also don't update the symmetry number) presumably because by not updating the molecular mass they also don't update the MOI.; - For all isotopologs, vib entropy agrees completely. So, @psi-rking, @jturney, and any others with thermo experience, is psi4 indeed right on this issue? Conditions, key results, and input files below. . Conditions. ```; HF/sto-3g. O -0.0000000000 0.0000000000 0.0711556763; H -0.0000000000 0.7580818420 -0.5646461096; H 0.0000000000 -0.7580818420 -0.5646461096. all STP. H2O: default masses; D2O: w/2.014101779; HDO: w/2.014101779; DTO: w/2.014101779, 3.01604927; ```. Psi4 (with new printing) (and fixing the molecule parser that wasn't playing nicely with the basis set detector so that isotopologs weren't even isoenergetic). ```; Electronic S 0.000 [cal/(mol K)] 0.000 [J/(mol K)] 0.00000000 [mEh/K] (multiplicity = 1); Translational S 34.608 [cal/(mol K)] 144.801 [J/(mol K)] 0.05515186 [mEh/K] (mol. weight = 18.0106, P = 101325.00 [Pa]); Rotational S 10.673 [cal/(mol K)] 44.654 [J/(mol K)] 0.01700786 [mEh/K] (symmetry no. = 2); Vibrational S 0.001 [cal/(mol K)] 0.003 [J/(mol K)] 0.00000103 [mEh/K]; Total S 45.282 [cal/(mol K)] 189.458 [J/(mol K)] 0.07216074 [mEh/K]. Electronic S 0.000 [cal/(mol K)] 0.000 [J/(mol K)] 0.00000000 [mEh/K] (multiplicity = 1); Translational S 34.924 [cal/(mol K)] 146.122 [J/(mol K)] 0.05565504 [mEh/K] (mol. weight = 20.0231, P = 101325.00 [Pa]); Rotational S 12.592 [cal/(mol K)] 52.685 [J/(mol K)] 0.02006667 [mEh/K] (symmetry no. = 2); Vibrational S 0.008 [cal/(mol K)] 0.034 [J/(mol K)] 0.00001311 [mEh/K]; Total S 47.524 [cal/(mol K)] 198.842 [J/(mol K)] 0.07573483 [mEh/K]. Electronic S 0.000 [cal/(m",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/345:2328,detect,detector,2328,https://psicode.org,https://github.com/psi4/psi4/issues/345,1,['detect'],['detector']
Safety,"ts angstrom; no_reorient; }. set globals {; basis aug-cc-pVTZ; dft_spherical_points 434; dft_radial_points 85; }. set_memory(24000000000); try:; optimize('pwpb95-d3bj'); except SCFConvergenceError as e:; unconverged_scf_wfn = e.wfn; unconverged_scf_wfn.to_file(unconverged_scf_wfn.get_scratch_filename(180)); set guess read; optimize('pwpb95-d3bj'); E, wfn = frequency('pwpb95-d3bj', return_wfn=True); print(wfn.frequencies().get(0, 0)); ```. The program starts the optimization and produces an error:. ```; Performing finite difference calculations; 49 displacements needed ... 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49; forrtl: error (76): Abort trap signal; Image PC Routine Line Source ; libgdma.so 00007FB2D549510F for__signal_handl Unknown Unknown; libpthread-2.27.s 00007FB2DA9F68A0 Unknown Unknown Unknown; libc-2.27.so 00007FB2DA631F47 gsignal Unknown Unknown; libc-2.27.so 00007FB2DA6338B1 abort Unknown Unknown; core.cpython-37m- 00007FB2D7A0D3D7 Unknown Unknown Unknown; core.cpython-37m- 00007FB2D6563E2D Unknown Unknown Unknown; core.cpython-37m- 00007FB2D657D2C1 Unknown Unknown Unknown; core.cpython-37m- 00007FB2D6040FF6 Unknown Unknown Unknown; python3.7 000055D7E213E914 _PyMethodDef_RawF Unknown Unknown; python3.7 000055D7E213EA31 _PyCFunction_Fast Unknown Unknown; python3.7 000055D7E21AAEBD _PyEval_EvalFrame Unknown Unknown; python3.7 000055D7E20ED829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055D7E213E107 _PyFunction_FastC Unknown Unknown; python3.7 000055D7E21A64B6 _PyEval_EvalFrame Unknown Unknown; python3.7 000055D7E20ED829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055D7E20EE714 PyEval_EvalCodeEx Unknown Unknown; python3.7 000055D7E20EE73C PyEval_EvalCode Unknown Unknown; python3.7 000055D7E2205F14 Unknown Unknown Unknown; python3.7 000055D7E221129D PyRun_StringFlags Unknown Unknown; python3.7 000055D7E21B5EB4 Unknown Unknown Unknown; python3.7 000055D7E",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2020:1566,abort,abort,1566,https://psicode.org,https://github.com/psi4/psi4/issues/2020,1,['abort'],['abort']
Safety,"values. They also no longer swallow the return value of DSYEV, in fact their return value is marked as `[[nodiscard]]`. In short, checking for diagonalization failure went from impossible to mandatory.; Please note that unlike `sq_rsp(...)`, the new functions do not take a ""tolarence"" value, but this is actually a null change as that parameter has been set-but-unused in `sq_rsp(...)` since ~forever ago when `sq_rsp(...)` switched to calling DSYEV internally.; - [x] Replace `sq_rsp(...)` calls in `mcscf` (`mcscf::SCF::energy` and `mcscf::MatrixBase::diagonalize`) with new wrapper. Add checks for diagonalization failure and guard against non-square matrices.; - [x] Replace `sq_rsp(...)` calls in `detci` (`detci/h0block.cc`, `detci/sem.cc` and `detci/sem_test.cc`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in `libmints/matrix.cc` (`Matrix::diagonalize`) with new wrapper. Add checks for diagonalization failure. Add a sanity checks for non-square matrices and illegal values of ""diagonalization order"".; - [x] Replace `sq_rsp(...)` calls in `ccenergy` (`ccenergy/d1diag.cc`, `ccenergy/d2diag.cc` and `ccenergy/new_d1diag.cc`) with new wrapper. Add checks for diagonalization failure. This allows the removal of the eigenvector array, and the code that allocates/deallocates it.; - [x] Replace `sq_rsp(...)` calls in the `libqt` Davidson solver with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in the RHF and ROHF stability checks with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` calls in `libsapt_solver/sapt2.cc` with new wrapper. Add checks for diagonalization failure. ## Questions; - [x] Is `libciomr` a good place for the new wrappers to live in? The one they are replacing is there, so it seemed like as good of a place as any. ## Checklist; - [x] No new features; - [x] 503/503 ctests are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2686:2107,sanity check,sanity checks,2107,https://psicode.org,https://github.com/psi4/psi4/pull/2686,1,['sanity check'],['sanity checks']
Safety,"ver path detect to __init__, and the options clearing mentioned above.; - [x] Fix TargetHDF5 detection for detect pre-built case (i.e., conda case). * **User-Facing for Release Notes**; - [x] CMake 3.3 now required; - [x] Using `OMP_NUM_THREADS` and/or `MKL_NUM_THREADS` to guide parallelism in Psi4 is _now deprecated_. Psi4 won't pay the least attention to these variables.; - [x] Added `psi4 --psiapi-path` command-line argument. This prints the bash commands you need to execute to set up python interp and pythonpath in your shell to `python -c ""import psi4""`; - [x] Psi4 molecule strings passed to `psi4.geometry()` no longer balk at python-style comments, as these are filtered out.; - [x] Added a `psi4.clean_options()` fn (alongside `psi4.clean()` and `psi4.clean_variables()`) to reset the `P::e.options` object to its initial state. This is necessary for independent tests in pytest and will probably be useful for psiapi sessions.; - [x] Add pytest smoke tests for psi4 itself and psi4+addons (addon tests skip if addon not enabled or detectable). From source, `cd tests/pytest && python -m pytest [-v -s]`. From staged or installed, `python -c ""import psi4; psi4.test()""` or `psi4 --test`. From objdir, `make pytest`. ## Questions; - [ ] I can work around the 3.3 cmake. It'll just be less tidy and won't ward off the HDF5 version detection issue. Speak up if there are objections.; - [ ] Everyone should make sure you're ok with the table below. No envvar control over parallelism anymore.; - [ ] Everyone read 12cd carefully, as I'm a bit nervous about this. Searched the code and Options object is cleared _nowhere_ except for a commented out in read_options. So I think it's safe to commandeer this function. And it works to completely reset options.; - [ ] The threading test is now in test_psi4_profiling.py. It works fine as the only pytest, but it's threading is still messed up when in the whole pytest suite. Anyone have a guess why? I haven't read anything about pytest control",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/627:2744,detect,detectable,2744,https://psicode.org,https://github.com/psi4/psi4/pull/627,1,['detect'],['detectable']
Security," [ 13%] Built target 3index; Consolidate compiler generated dependencies of target ciomr; [ 15%] Built target ciomr; Consolidate compiler generated dependencies of target cubeprop; [ 16%] Built target cubeprop; Consolidate compiler generated dependencies of target disp; [ 16%] Built target disp; Consolidate compiler generated dependencies of target dpd; [ 25%] Built target dpd; Consolidate compiler generated dependencies of target filesystem; [ 25%] Built target filesystem; Consolidate compiler generated dependencies of target fock; [ 25%] Building CXX object src/psi4/libfock/CMakeFiles/fock.dir/DiskDFJK.cc.o; /Users/gwood/work/scripts/psi4_source/src/psi4/src/psi4/libfock/DiskDFJK.cc:68:17: error: no viable overloaded operator[] for type 'psi::Options'; if (options_[""SCF_SUBTYPE""].has_changed()) set_subalgo(options_.get_str(""SCF_SUBTYPE""));; ~~~~~~~~^~~~~~~~~~~~~~; /Users/gwood/work/scripts/psi4_source/src/psi4/src/psi4/libfock/DiskDFJK.cc:68:68: error: member access into incomplete type 'psi::Options'; if (options_[""SCF_SUBTYPE""].has_changed()) set_subalgo(options_.get_str(""SCF_SUBTYPE""));; ^; /Users/gwood/work/scripts/psi4_source/src/psi4/src/psi4/libqt/qt.h:47:7: note: forward declaration of 'psi::Options'; class Options;; ^; 2 errors generated. ```. I'm doing this on my intel mac: `2.6 GHz 6-Core Intel Core i7`; using clang++ ; ```; (base) gwood@EXS-001355 build % /usr/local/opt/llvm/bin/clang++ -v; Homebrew clang version 15.0.7; Target: x86_64-apple-darwin22.4.0; Thread model: posix; InstalledDir: /usr/local/opt/llvm/bin`; ```. The only issue prior to this was to install libxc and point to it, which i did with 6.2.2; I downloaded the source from git and am using master:. ```; git clone git@github.com:psi4/psi4.git; (base) gwood@EXS-001355 src % git branch; * master; ```; my cmake version is:. ```; (base) gwood@EXS-001355 src % cmake --version; cmake version 3.23.3. CMake suite maintained and supported by Kitware (kitware.com/cmake).; ```; blas and lapack is pi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3006:1964,access,access,1964,https://psicode.org,https://github.com/psi4/psi4/issues/3006,1,['access'],['access']
Security," are now unified, so we don't need to edit all three generators when one is bugged.; - [x] Various PyBinding has been done. Among other things, the new Py-side compute_atom_map function from pyvib2 now works with psi4 molecules.; - [x] Fixes a bug in the `CharacterTable` copy constructor member initialization list, which used to require a string to be an integer.; - [x] Fixes a bug in vibrational analysis where the zero K enthalpy variable was misspelled.; - [x] Getting geometries for finite difference calculations is now Py-side.; - [x] Computing gradients from energies is now Py-side.; - [x] Computing hessians from gradients is now Py-side.; - [x] Computing hessians from energies is now Py-side.; - [x] Finish renaming the finite difference functions.; - [x] Overly picky changes for consistent style and commenting.; - [x] Review the findif test suite and add any tests as needed.; - [x] Add the banner.; - [x] Remove old FINDIF code (after migrating to attic).; - [x] Removed the C-side gradient writer.; - [x] Added several new gradient writing formats.; * **User-Facing for Release Notes**; - [x] A warning now displays if you attempt to access-by-index or iterate over an irreped object, instead of using a NumPy accessor.; - [x] Gradients can now be written, even for analytic hessians.; - [x] The .grad file will now only write the latest hessian. ## Questions; - [x] I had to change the internals of SymmetryOperation to make PyBind happy. I trust there are no objections?; - [x] Since pyvib2 made hessian writing no longer FINDIF's responsibility, shall I make gradient writing no longer FINDIF's responsibility as well? Then `comp_grad_from_hess` could return a Numpy array, like the `comp_hess_from_X` functions. ## Checklist; - [x] Tests added for any new features (or rather, edited in); - [x] [Relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1024:1404,access,access-by-index,1404,https://psicode.org,https://github.com/psi4/psi4/pull/1024,2,['access'],"['access-by-index', 'accessor']"
Security," i.e., the JK object. This PR solves two issues simultaneously:. 1. The primary purpose of this PR is to change the test_erisieve.py tests to work with the planned future density screening refactor. One issue that moving density screening from TwoBodyAOInt to JK currently brings up, is that it causes the tests on density screening within the pytest test_erisieve.py to fail. These failures occur because test_erisieve.py performs its screening tests directly using an ERI object generated by IntegralFactory. With density screening being removed from the TwoBodyAOInt object, this method of density screening testing can no longer be done. The current PR is designed to address this issue for when the density screening refactor happens. The aforementioned issue is addressed by implementing a new variable to the HF wavefunction, computed_shells_per_iter_, which keeps track of the number of shell quartets computed per SCF iteration. The computed_shells_per_iter_ variable is accessible to the user via Python, and thus can be used to conduct screening tests. In this way, density screening tests can be performed without the need for an ERI object. 2. As a bonus from the changes introduced by this PR, the DirectJK algorithm no longer has a need to print computed shell quartet counts to bench.dat. Bench.dat is used exclusively by the DirectJK object to dump the number of shell quartets computed per SCF iteration somewhere. That data is now accessible to the user in a cleaner fashion - it can be accessed through Python, in a manipulatable format. ## Notes; 1. Note that the changes in this PR have not been applied to the LinK portion of the DirectJK code. This is intentional, as Andy is planning on moving LinK out of DirectJK entirely, and editing the LinK code within DirectJK would interfere with that. Thus, the changes in this branch will be applied to LinK in a later update.; ; ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; -",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2547:1394,access,accessible,1394,https://psicode.org,https://github.com/psi4/psi4/pull/2547,1,['access'],['accessible']
Security," isotopic, partial, non-stationary, etc., particularly wrt normco not just freq; - Add `compare_dicts` and `compare_molrecs` comparison functions. Former uses `deepdiff` module and does recursive comparison (sensitive to types). Can exempt fields with `forgive` arg. Latter makes use of former and also allows geoms to change if warranted by fix_com/orientation (checks via aligner).; - convert qcdb test suite from GnuMake (yes, that old) to pytest. switch compare_* fns to raise `TestComparisonError`, not `sys.exit(1)`.; - have to temporarily set `0 2` in some test cases, b/c the reconciler wants physically reasonable values, but the input molecule isn't currently passing through the code that would set those defaults.; - updated v2rdm_casscf pinning to one Eugene already fixed up to work w/psi; * **User-Facing for Release Notes**. ## Questions; - [ ] Right now, results of harmonic analysis is a dict of namedtuples with numpy arrays (contents and interface below). This is pretty convenient to access and work with. But it is numpy arrays attached to Wfn and thus mixing array classes on Wfn and unable to access c-side. Is this ok? Better ideas?; ```; Returns; -------; dict, text; Returns dictionary of VibrationAspect objects (fields: lbl unit data comment); Also returns text suitable for printing; ; +---------------+--------------------------------------------+-----------+------------------------------------------------------+; | key | description (lbl & comment) | units | data (real/imaginary modes) |; +===============+============================================+===========+======================================================+; | omega | frequency | cm^-1 | np.array(ndof) complex (real/imag) |; | q | normal mode, normalized mass-weighted | a0 u^1/2 | np.array(ndof, ndof) float |; | w | normal mode, un-mass-weighted | a0 | np.array(ndof, ndof) float |; | x | normal mode, normalized un-mass-weighted | a0 | np.array(ndof, ndof) float |; | degeneracy | degree of degenerac",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/834:12855,access,access,12855,https://psicode.org,https://github.com/psi4/psi4/pull/834,1,['access'],['access']
Security," the cast-back-to-list step. Also, `to_arrays` returns geom, mass, elez, etc. as numpy arrays, rather than needing to iterate over natom.; - `psi4.core.Molecule`; - add rotational_symmetry_number; - export rotor_type; - faster BFS algorithm hooked up to psi4.Mol, too. Depending on Mol type, returns numpy split arrays, single large Mol with atoms rearranged and fragmentation embedded, and/or list of indiv Mols, one for each fragment. Radically pare down auto_fragments/old BFS code.; - `units` no longer exported as a property. has getter/setter, and the getter returns strings, not `Molecule::GeometryUnits` objects.; - _Both_ psi4.core.Molecule && qcdb.Molecule; - Enhanced `add_atom` to take label (in add'n to symbol) and mass number, so is a full fledged CoordEntry entry point; - Add `mass_number` storage and accessor. In Psi, this is just a pass-through – nothing done with it. Stores isotope mass number if mass corresponds to valid nuclide, -1 otherwise or unknown.; - Fragmentation member data public access. Rename fragments --> get_fragments; similar for fragment_types, fragment_charges, fragment_multiplicities. Only fisapt code was using this. For setters, added `set_fragmentation_pattern` that sets them all at once.; - Added `input_units_to_au` getter/setter; checks physical reasonableness.; - Sets input_units_to_au whenever set_units called, rather than as extra step.; - Finally add a `com_fixed` fn to mirror `orientation_fixed`. In qcdb.Mol, also a `fix_com`.; - `create_molecule_from_string` was doing all kinds of contortions with fr_types and efp_chg/mult to the extend that fragment* arrays were not the same length. Function to be retired shortly, so papered over.; - Psi has long had the problem that set_multiplicity/set_molecular_charge values might not stick upon reinterpret_coordentries b/c recomputed from fragments (which the user can't change) and by high-spin-sum. Adds logic to retain set_mult value if all fragments real (still no guarantee of physical re",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/834:3410,access,access,3410,https://psicode.org,https://github.com/psi4/psi4/pull/834,1,['access'],['access']
Security,"# PsiPEP2: Rationalize Variable Access. Pursuant to #883, common driver migration, the War Against Globals, and [QCSchema](https://github.com/molssi/qcschema), we want clear programmatic access to QC quantities, and we want them on the Wfn/JSONrec, not off `Process.environment.globals`. First step toward this is duplication of `P::e.globals` onto `Wfn`. Unfortunately, the syntax and methods don't align (see table below). Also unfortunately, we have many redundant `get_`s. This PsiPEP proposes the following syntax changes and additions. ### Final Proposal (dynamic). * **W-C** means C-side access to `psi4.core.Wavefunction`; * **W-Py** means Py-side access to `psi4.core.Wavefunction`; * **G-Py** means Py-side access to `psi4.core` globals. | Now `Wavefunction` | Now `psi4.core` | Proposed Both | W-C | W-Py | G-Py | doc |; |-----|----|----|---|---|---|---|; | | has_variable | has_scalar_variable |y|y|y| is float var set ? |; | get_variable | get_variable | scalar_variable |y|y|y| return float var value |; | set_variable | set_variable | set_scalar_variable |y|y|y | set float var value |; | | | del_scalar_variable |y|y|y | unset float var |; | variables | get_variables | scalar_variables |y|y|y| return dict of all float vars |; | |; | | | has_array_variable |y|y|y| is array var set ? |; | get_array | get_array_variable | array_variable |y|y|y| return array var value |; | set_array | set_array_variable | set_array_variable |y|y|y| set array var value |; | | | del_array_variable |y|y|y| unset array var |; | arrays | get_array_variables | array_variables |y|y|y| return dict of all array vars |; | |; | | | has_variable |–|y|y| is any float or array var set ?|; | | | variable |–|y|y| return float or array var value |; | | | set_variable |–|y|y| set float/Matrix/ndarray var value |; | | | del_variable |–|y|y| unset float or array var |; | | | variables |–|y|y| return dict of all float or array vars |; | | clean_variables | clean_variables |–|–|y| unset all float or array vars ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1375:32,Access,Access,32,https://psicode.org,https://github.com/psi4/psi4/issues/1375,5,"['Access', 'access']","['Access', 'access']"
Security,"## DESCRIPTION; Using `DF_Helper`'s density fitting technology, both integral and exchange matrix computations can be sped up for in-core investigations. I have created a `JK` derived class, `symm_JK`, which wraps the technology of `DF_Helper` and enables its use for J/K building in Psi4. ## RESULTS; Here are some timing results for entire SCF procedures across various systems, using two different architectures. Notice that relative speedup between `symm_JK` and `DFJK` improves for non-uniform memory access (NUMA) architectures. ![april research update](https://user-images.githubusercontent.com/19575820/38739410-de32a49c-3f02-11e8-9512-c4edc165f259.png). ![april research update-1](https://user-images.githubusercontent.com/19575820/38739454-f5f0a6e2-3f02-11e8-9196-cdcd97cdcd34.png). ## TODO; The new JK building object, `symm_JK`, will be faster than DFJK for in-core implementations. However, it will be slower for disk-based implementations. ; - [x] Add check to figure out which object to use for J/K building. (in-core vs disk)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/961:506,access,access,506,https://psicode.org,https://github.com/psi4/psi4/pull/961,1,['access'],['access']
Security,"## Description. Converts Psi4 from a binary that calls Python to a Python module that calls a shared object as discussed in #468. ; ## Features; - ""psi4"" is now a python module, the entire driver and suite of C++ functions is now behind this interface.; - The ""bin/psi4"" binary is now a python script that parses Psithon input to support the current Psi4 interface.; - For any conventional python script the following now works: `import psi4`.; - C++ no longer calls python, all python objects must be passed in from the driver.; - BasisSet objects are the primary objects effected here. The Wavefunction now stores BasisSets constructed by python and can be accessed by `wfn->get_basis(*basis*)`.; - The C++ side of psi4 is now compiled to the a shared library with python access named ""core.so"".; ## Remaining issues; - There are several outstanding issues, a list of which can be found [here](https://github.com/dgasmith/psi4/projects/1). All issues may not be cleaned up by the time this PR goes through, current full suite coverage of 99%.; - HF: Broken Symmetry guess is currently broken, apparently no test case for this.; - BasisSet is not final with regard to construct_combined and handling of user defined basis sets.; - SAD does not work due to basis set creation.; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/481:659,access,accessed,659,https://psicode.org,https://github.com/psi4/psi4/pull/481,2,['access'],"['access', 'accessed']"
Security,"## Description. The DOI Foundation [started recommending a new resolver](https://www.doi.org/doi_handbook/3_Resolution.html#3.8). While their URL change may be a bit ironic, it's now [encrypted](https://www.ssllabs.com/ssltest/analyze.html?d=doi.org) and the old `dx` subdomain is being redirected. So, there is no urgency here. However, for consistency, this PRs suggests to update all static DOI links accordingly, plus the code that generates new DOI links. ## Checklist; - [-] Tests added for any new features; - [-] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1761:184,encrypt,encrypted,184,https://psicode.org,https://github.com/psi4/psi4/pull/1761,1,['encrypt'],['encrypted']
Security,"## Description. This is No. 7 of the DDD series, #1351. ## Todos; - [x] test both old `run_json` and new `run_qcschema` modes and access patterns in the basic addons testing.; - [x] I don't remember in what order it came about, but `driver_util.py` had a function `negotiate_derivative_type` that was a simpler version (returned `analytic` and `1_0` for analytic and findif gradient, respectively) of the trio of functions in ddd (returns `(1, 1)` and `(1, 0)` for analytic and findif gradient, respectively) and was tested in `test_dertype.py` and was never run. This unused fn and its testing was removed and replaced by the ddd version.; - [x] the new `negotiate_derivative_type` function probes managed methods earlier than before, so it happens that the exact error names (not the text) expected by stdsuite change.; - [x] the new `negotiate_derivative_type` function is called early, so it now handles the methodname typo helper (""Did you mean?"") that FAE added. The independent `_method_exists()` fn removed.; - [x] the former function `_set_convergence_criterion` where you passed in 5 integers for the different E/D_CONVERGENCE values has been rewritten as `negotiate_convergence_criterion` where you pass in a tuple of the case (e.g., `(2, 1)` is Hessian by findif of gradients). In actual `driver.py`, the function calls have been switched out. The values set are the same, but the arguments like `(1, 0)` aren't necessarily appropriate in this non-ddd driver code routing.; - [x] the former function `_find_derivative_type` has been replaced by three functions headed up by `negotiate_derivative_type`. For both, the goal is to take a method name, the target derivative, and any user modifications and return the appropriate analytic or findif strategy or produce a helpful error. sounds simple, but managed methods and cbs specs complicate things. In ddd, this function is called early, not piecemeal throughout the driver, so more probing has been consolidated into the new function. In ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2536:130,access,access,130,https://psicode.org,https://github.com/psi4/psi4/pull/2536,1,['access'],['access']
Security,"## Description. housekeeping; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] enables plugins to access wfn python only (w/o `psi4.wavefunction()`), if they're not needing it c-side; - [x] removes pyparsing.py that was pcmsolver legacy and cleans up a few wrappers refs; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/377:138,access,access,138,https://psicode.org,https://github.com/psi4/psi4/pull/377,1,['access'],['access']
Security,"## Description. smooth user interactions with mp2 & cepa so that minimal inputs have a chance of working (esp. w/grad) and the same call to different modules returns the same answer.; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] `cepa(0)`/`ocepa(0)` in occ/dfocc called more specifically as `lccd`/`olccd`. psivars adjusted accordingly.; - [x] meanwhile, `cepa(0)` in fnocc called more specifically as `lccsd` (alias `cepa(0)`) or w/o singles as `lccd`. psivars and managed methods adjusted accordingly.; - [x] fixed defaulting of grad to findif of energies for managed methods. it had broken b/c just tested availability of analytic grad on `procedures['gradient']` and for managed methods that doesn't tell the full story. now probe the managed method in proc.py to see if gradient available.; - [x] alter default algorithms for scf for fnocc and dfocc. we've always said that the scf default for df post-HF methods was df, but only actually did algorithm switching for dfmp2 and sapt. now we really do it. in particular, so long as you don't set scf_type to the contrary, this will make a conv mp2 gradient run conv+conv and a df mp2 gradient run df+df.; ## Minor Todos; - [x] test cases build and run all the plugin templates; - [x] let ppl know how to access rohf mp3 & mp4 for toy problems; ## Questions; - [x] @edeprince3 should look over my changes to fnocc procedures in proc.py to make sure the scf algorithm flipping is sensible.; - [x] ditto, @bozkaya for occ/dfocc; ## Status; - [x] Ready to go, after @edeprince3 and @bozkaya sign off on it.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/306:1301,access,access,1301,https://psicode.org,https://github.com/psi4/psi4/pull/306,1,['access'],['access']
Security,"## Description; <!-- Provide a brief description of the PR's purpose here. --> ; Fixes a couple of minor issues for a research project of mine. See todos. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Within the OCC module, updating the opdm to the wavefunction; - [x] Exposed a function to update the num_frozen_uocc global. ## Checklist. - [x] quick tests, occ module tests, standard suite tests. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2072:330,Expose,Exposed,330,https://psicode.org,https://github.com/psi4/psi4/pull/2072,1,['Expose'],['Exposed']
Security,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] `basis_relativistic <name> {...}` now works; - [x] Python 3.11 basically tested. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Windows CI allowed to access new qcel bump 0.25.1 that has broader pint compatibility; - [x] closes #2754 and fixes dft-pruning test. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2764:596,access,access,596,https://psicode.org,https://github.com/psi4/psi4/pull/2764,1,['access'],['access']
Security,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. @lothian, the primary files to look at are procedures/proc.py, cc.rst, preview_capabilities_ccenergy.rst, and (for example) cc13b/input.dat. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Conventional ccsd(t) gradients will now proceed as finite-difference calculations, which are much more memory efficient. If you still want to access the analytic gradients, add `set qc_module ccenergy`. ## Dev notes & details; - [x] the main change is disabling default conv rhf/uhf ccsd(t) analytic gradients through ccenergy in proc.py . they're still accessible by setting `qc_module=ccenergy` explicitly; - [x] changes to tests so that we're still testing the gradients; - [x] changes to the capabilities auto-documentation that starts with stdsuite, gets stored in samples/stdsuite_psi4.txt, and gets processed into docs tables, a viz preview of which are stored in sphinxman/source/.; - [x] simpler docs-building environment!. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). closes #2913 . ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2943:536,access,access,536,https://psicode.org,https://github.com/psi4/psi4/pull/2943,2,['access'],"['access', 'accessible']"
Security,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Adds SAPT0-D and FISAPT-D routines, continuation of #1786. This code only works with the latest QCEngine commit, so it will fail the tests until the next QCEngine release. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [X] Add SAPT0-D and FISAPT0-D, for any -D variant available to HF; - [X] Enable access to pairwise dispersion decomposition from dftd3; - [x] Adapt fsapt.py analysis to use -D dispersion info. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - [x] Test fsaptdiff.py. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2081:435,access,access,435,https://psicode.org,https://github.com/psi4/psi4/pull/2081,1,['access'],['access']
Security,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Fixes a bug encountered when running optimizations in BAKERJCC96. All calculations in a finite difference; calculation were writing orbitals to disk and overwriting the old orbitals. Only reference calculation should; be saved. In cases were the symmetry was lowered in one of the last displacements, subsequent gradient calculations; were failing to read orbitals. ``` ; File ""/home/zander/github/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 1761, in scf_helper; raise ValidationError(""Cannot compute projection of different symmetries.""); ```. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] scf_helper assumes orbitals should always be written. Passes `write_orbitals` = `false` through kwargs for displacements. ## Questions; - [ ] The new test is an optimization, would a test in ddd-function-kwargs or similar be preferred?. ## Checklist; - [x] Tests added for any new features; - [x] full ctest (Psi4, Psi4 + [CheMPS2, DFTD3, dkh, gCP, gdma, simint, ecpint]). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2827:566,Validat,ValidationError,566,https://psicode.org,https://github.com/psi4/psi4/pull/2827,1,['Validat'],['ValidationError']
Security,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; In, SAPT(DFT), I removed setting ""DF_INTS_IO"" to ""SAVE"" because it blocked scf_type==""DF"" from accessing MemDF on its own. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3173:175,access,accessing,175,https://psicode.org,https://github.com/psi4/psi4/pull/3173,1,['access'],['accessing']
Security,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; The common thread of this PR is be more explicit in what calculations Psi4 can do and conveying that to the user at runtime and through the docs. In practice, this involves expanding the coverage of stdsuite, using those results to autogenerate docs tables, reconciling hand-generated docs tables, referring to all in runtime errors, and cleaning stuff up along the way. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] MRCC now called with `set qc_module mrcc` rather than ""mr"" prefix onto method; - [x] Many NYI messages, whether from ManagedMethodError, MissingMethodError, or plain ValidationError from run_* fns have changed their wording and added content. On the whole, this should be helpful, but if you're searching for particular phrasing, you'll likely need to adjust regexes.; - [x] New tables in the docs with details on accessible methods.; - [x] Arbitrary-order MPn no longer runable with ROHF. Arbitrary-order ZAPTn no longer runable with RHF.; - [x] Running DF through CCENERGY (experimental, expert only) may now require `set qc_module ccenergy`. ## Dev notes & details; - [x] running stdsuite writes a storage file, and a new document_capabilities script turns the storage file into various tables that newly (1) include all-electron/frozen-core info (notated ""aefc"" in places), (2) show default modules and default e.g., mp2_type, (3) cover most single-ref ground-state total-energy methods, (4) are proven to honor return val and qcvar contracts. details of how and why this works are at [psi4/share/psi4/scripts/merge_stdsuite.py](https://github.com/psi4/psi4/pull/2731/files#diff-4a81ee0fb4705fe6acd6ac7f6417f5a899437a93780329a5f647a94eea425c24R8) . If you want to suggest changes to notation, keep in mind that main-body cell contents must be expressible in a single unicod",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2731:790,Validat,ValidationError,790,https://psicode.org,https://github.com/psi4/psi4/pull/2731,1,['Validat'],['ValidationError']
Security,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This PR allows for using basis sets from the Basis Set Exchange library (https://github.com/MolSSI-BSE/basis_set_exchange) directly in psi4. To use a basis set from the BSE, you prefix the name of the basis set with `bse:`. Optionally, you can specify the version with a suffix (like `:1`). ```; # use most recent def2-tzvp version; set basis bse:def2-tzvp. # specifically use version 0 of sto-3g; set basis bse:sto-3g:0; ```. Also can be used with `assign`. ```; basis {; assign DZ; assign C bse:sto-3g:0; }; ```. Using these of course requires that the BSE be installed. This should be accessible from both schema/json and psithon. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] Add capability to use basis sets from the Basis Set Exchange. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Adds optional dependency to basis_set_exchange; - [x] Adds handling for basis sets that start with `bse:`; - [ ] Modifies some regexes to allow for colons in basis set names. ## Questions; None. ## Checklist; - [x] Optional dependency added to build chain; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2905:668,access,accessible,668,https://psicode.org,https://github.com/psi4/psi4/pull/2905,1,['access'],['accessible']
Security,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This is the continuation of my previous MOInfo PR #3112, with the following general themes:. - Adding new docstrings and making existing ones machine readable for VS Code (and probably also Doxygen); - Rebalancing the class hierarchy by sinking things that get reused to the base class, and hoisting things up in the inheritance chain that only get used in one derived class; - Reducing visible and mutable state, as well as the contact surface of the classes. This is achieved by making data and functions as private as possible, providing access to data through getters returning `const&` when necessary, and making a few data members `const`. Having `const` members in classes is sometimes considered to be bad form, but AFAIK all of the downsides are already incurred on account of `MOInfoBase` having reference members. The git history on this branch is admittedly a bit messy, I changed my mind about a couple of things. LMK if that is a problem.; The next PR in this series will get to what I originally wanted to achieve and remove uses of the ugly ""cast Dimension object to pointer"" operators (see #2953) from `libmoinfo.`. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] No API changes. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Unused function `MOInfoBase::correlate` is removed; - [x] The only thing the `MOInfoBase` dtor does is call `MOInfoBase::cleanup()`, an empty function. Removed both.; - [x] Moved the contents of `MOInfo::free_memory()` into its only caller, the `MOInfo` dtor; - [x] Added a lot of new machine-readable docstrings, moved some existing ones; - [x] Some ""obsolet",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3155:621,access,access,621,https://psicode.org,https://github.com/psi4/psi4/pull/3155,1,['access'],['access']
Security,"## Description; @hokru recently reported that when he attempted to use `dfomp2` through `dfocc` to compute dipoles, he was not able to reproduce ORCA's RI-OMP2 to within even 0.01 a.u. I determined by comparison to my own Psi4Numpy implementation of DF-OMP2 that this was an error in the `dfocc` module and eventually tracked it down to `dfocc` sending the wrong orbitals to `OEProp`. The primary purpose of this PR was to fix that and get density-fitted orbital optimized properties hooked up to the driver. ...Unfortunately, adding a test that the remaining dipoles are correct required me to fix some other standing `dfocc` issues that prevent users from setting tight convergence (#1143). That in turn required quite a few test changes. While working through that, I also solved #1509. The 0.7 mHartree difference I was seeing was due to another bug in `dfocc`. It computed the MP2.5/MP3 energy by adding to the _SCF reference_ and not the current determinant. Those are different things in orbital-optimized methods. When you add in the correct reference energy, the disagreement reported in #1509 goes away. In brief, this PR fixes #1143 and fixed #1509. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix a bug where `dfocc` properties were incorrect; - [x] Add a test that the `dfocc` properties are now correct; - [x] Hook up `dfocc` properties to the driver; - [x] Fix a bug where DFOMP2.5/DFOMP3 energies could be incorrect depending on convergence settings; - [x] Simplified/Sanitized handling of convergence criteria in `dfocc`; - [x] Modified `dfocc` tests due to above. ## Checklist; - [x] `ctest -L dfo` and `ctest -L cdo` pass; - [x] `test_dipole.py` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1772:1538,Sanitiz,Sanitized,1538,https://psicode.org,https://github.com/psi4/psi4/pull/1772,1,['Sanitiz'],['Sanitized']
Security,"## Description; A few testing bugs and completing the pytest access route. Nothing controversial. Most of this PR is autogenerated. Due diligence on review can be achieved by examining:; * `empirical_dispersion.py`; * `addons.py`; * `extern1/input.dat`; * `tester.py`; * `test_addons.py`. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] fixed bug that wouldn't allow plain pytest of installed `psi4/` b/c would bring in incorrectly configured qcdb tests. workaround was to pytest `psi4/tests/`; - [x] add a couple corrections I had promised to #2536 but had forgotten to push; - [x] fixes #2548 by passing psi4's `-n` to qcng for dftd3/gcp/mp2d; - [x] corrects `dfmp2-freq2` ctest was registered as `dfmp2-freq1`; - [x] I realized externalpotentials weren't getting unset after a energy/grad/etc. command. This is probably a new bug after #2515 but didn't confirm. It's healed in DDD, but the solution didn't port, so I added the test and temporary workaround to extern1; - [x] Added feature to ctest_runner to allow directory structure to be copied into test scratch for psithon2. This is proven to work but needs a couple lines added to qcengine, so hidden for now.; - [x] Fixed resp addon tests that always failed in parallel. these write to fixed-name files that aren't configurable, so they need to be chdir'd, if not run serially.; - [x] Added a script tester.py that checks some config stuff and writes out missing `test_input.py`. See the goals there for details. Running it produces a list of flaws like the below. I'll post this to an issue for later attention. Someday this can be hooked up to GHA and replace the perl script.; ```; Complaints; ----------; - [ ] 1. cc5: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 2. cookbook/manual-sow-reap: missing cmake directory registration. `vi cookbook/CMakeLists.txt`; - [ ] 3. cookbook/manual-sow-reap: missing CMakeLists. `vi cookbook/manual-sow-reap/CMakeLists.txt",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2549:61,access,access,61,https://psicode.org,https://github.com/psi4/psi4/pull/2549,1,['access'],['access']
Security,"## Description; A step toward #883 by improving qcvar capabilities on Wfn and localizing some modules. ## Todos; - [x] removes or py3-izes scripts; - [x] addresses the floats part of #1375 by; - expanding the variable operations on `Wavefunction`; - making their storage always uppercase and their access case-insensitive; - dev alert: any code that wrote to wfn array directly in non-UC (e.g., `wfn.variables_[""lower or mixed-case var""] = val`) needed to be changed to `wfn.set_variable`; - [x] adds runtime FutureWarning to renamed fns: `psi4.core.get_variable`, psi4.core.get_variables`, `Wavefunction.get_variable`; - [x] improves the wfn localization of qcvars for DFT, scf_helper, DFMP2, OEPROP. trying to set on `wfn` c-side, then just copy into `P::e.globals` in proc.py.; - [x] moves DETCI, DFMP2 entirely to qcvar passing on Wfn. OCC, DFOCC, FNOCC do so for mp2-like only.; - [x] adds some functional-including qcvars for DFT; - [x] BREAKS8; - remove `SCS-MP2 OPPOSITE-SPIN CORRELATION ENERGY` and `SCS-MP2 SAME-SPIN CORRELATION ENERGY` from dfmp2 `Wavefunction.variables_`; - remove MP2 psivars from double-hybrid DFT final return; - `SCS-MP2 * ENERGY` now are defined (6/5, 1/3) quantities. For the user-influenceable vars, it's `CUSTOM SCS-MP2 * ENERGY`; - `core.variable` now throws when you access a key not set. This is what `Wavefunction.variable` did before, but `core.variable` used to just create the key and set to 0. ## Questions; - [ ] FutureWarning provides the offending line. However, this is complicated by our promoting the get_variable namespace and the PsiAPI and Psithon calling routes. It's going to be hard to get this offending line printing universally right. It's hit and miss now. ## Checklist; - [x] full tests. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1381:298,access,access,298,https://psicode.org,https://github.com/psi4/psi4/pull/1381,2,['access'],['access']
Security,"## Description; Add HF- and PBEh-3c capabilities, now that the former have been verified from Orca and the latter through S. Grimme private communications. ## Todos; * **Developer Interest**; - [x] gcp smoke tests going to pytest PR; - [x] write a bit of docs; - [x] So this is where my compare_values improvements ran off to. Now have a toggle to fail or not and can check mismatch by val, not just by order of magnitude value.; - [x] Add `gcp` interface, but not as advanced as `dftd3` b/c not writing to a file, just takes one of the pre-def values. ; * **User-Facing for Release Notes**; - [x] Semi-semiempirical methods HF-3c and PBEh-3c of Grimme can now be accessed (with `dftd3` and `gcp` executables detectable in PATH). Access through `energy('hf3c')` and `energy('pbeh3c')`. Can run with or without preferred basis set specified (minix and def2-msvp, respectively). ## Questions; * @dgasmith, this'll need a little adaption for 1.2. ## Status; - [x] Ready to go. Not averse to a squash.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/630:664,access,accessed,664,https://psicode.org,https://github.com/psi4/psi4/pull/630,2,"['Access', 'access']","['Access', 'accessed']"
Security,"## Description; Add PSI_API to all functions called by Forte (also see #955, there might be some duplication to address). ## Todos; This PR exposes C++ functions/classes that are required by Forte. . ## Checklist; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/958:140,expose,exposes,140,https://psicode.org,https://github.com/psi4/psi4/pull/958,1,['expose'],['exposes']
Security,"## Description; Add cct3 plugin. Patch liboptions. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] add build connection, proc.py connection, and token smoke test; - [x] fix embarrassing bug where enum-like string options weren't validating when set in local scope. that is, `set guess nonsense` would protest, but `set scf guess nonsense` would pass. this isn't perfect as validation occurs against a union of allowed values among different local scopes, but it's an improving patch.; - [x] @edeustua is going to rename the repo to plain `cct3`, so this'll need a name adjustment pass.; - this is connected with https://github.com/piecuch-group/psi4_cct3/pull/2; - note that cct3 builds slowly as it has some hefty fortran files. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1934:279,validat,validating,279,https://psicode.org,https://github.com/psi4/psi4/pull/1934,2,['validat'],"['validating', 'validation']"
Security,"## Description; Add rotational strength as new property, which has become available in adcc 0.14.3. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [X] Rotational strength for all ADC methods from adcc; - [x] Velocity gauge for oscillator strength. ## Questions; - [x] Adcc now allows oscillator strengths to be computed in both velocity and length gauge. What is the canonical way to expose this in Psi4?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1892:431,expose,expose,431,https://psicode.org,https://github.com/psi4/psi4/pull/1892,1,['expose'],['expose']
Security,## Description; Add set_Lagrangian in Wavefunction. Also expose `C_DGEQP3` function. . ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) `ctest -L quick` all passed. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2064:57,expose,expose,57,https://psicode.org,https://github.com/psi4/psi4/pull/2064,1,['expose'],['expose']
Security,"## Description; Added PSI_API macro to libqt/reorder_qt.cc functions and corresponding libqt/qt.h. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - Exposes libqt/reorder_qt() and libqt/reorder_qt_uhf() to plugins. ## Checklist; - [X] All or relevant fraction of full tests run. ## Status; - [X] Ready for review; - [X] Ready for merge. ## Comment; This seems pretty trivial, but I haven't made a PR in a long, long time...",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1212:193,Expose,Exposes,193,https://psicode.org,https://github.com/psi4/psi4/pull/1212,1,['Expose'],['Exposes']
Security,"## Description; Added a dictionary-based method for implementing density functionals. All non-dispersion versions of original functionals are working with some exceptions, the new definition of functionals has ""TEST-"" prefix for now. Not working functionals are: HF+D and HJS-B88 which do not run, HF3C for unknown reason, B97-D which should be -D2 not -D3 corrected in master. Some dispersion corrected methods already implemented - all BLYP functionals, for example. Script used for testing attached:; [test.dat.txt](https://github.com/psi4/psi4/files/1735039/test.dat.txt). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fix for Issue #920 ; - [x] Easy implementation of new functionals; - [x] LibXC parameters (ALPHA, BETA, OMEGA) now exposed to python; - [x] Check functionals against Q-Chem; - [ ] oPBE-D, oTPSS-D, oPWLYP-D ,oBLYP-D, TPSSh-D3BJ - not included in PR #880 ; - [x] B97-D; - [x] wB97X-D3 - needs tweaks - was disabled.; - [x] DSD-***; - [x] [PBE]HF3C; * **User-Facing for Release Notes**; - [ ] Eventually: let user pass a dict to psi4 with custom functionals? . ## Questions; - [ ] What do you think about the current interface?. ## Status; - [x] Dashparams for functionals need to be migrated too.; - [x] Ready to go - from my PoV at least.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/922:807,expose,exposed,807,https://psicode.org,https://github.com/psi4/psi4/pull/922,1,['expose'],['exposed']
Security,"## Description; Added the one line `ao_multipole_potential` function to `export_mints.cc`. This allows the user to access one-center integrals from the python interface. The most common use case for this is to calculate electrostatic potential and field from an auxiliary basis set expansion of the electron density. ## User API & Changelog headlines; - added `ao_multipole_potential` to `export_mints.cc`. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - Makes no changes to existing `export_mints.cc`; - Adds a function to grab One Body Integrals for a given basis set. ## Checklist; - [x] [All or relevant fraction of full tests run]. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2744:115,access,access,115,https://psicode.org,https://github.com/psi4/psi4/pull/2744,1,['access'],['access']
Security,## Description; Addresses a linker warning when building on OSX.; Original change in 703c8a07b238249134424fd938374eae01d8c5af.; related: https://stackoverflow.com/questions/9894961/strange-warnings-from-the-linker-ld. example of the warning:; ```; ld: warning: direct access in function '__GLOBAL__sub_I_blas_diis.cc' from file 'psi4/psimrcc/libpsimrcc.a(blas_diis.cc.o)' to global weak symbol '__ZNSt6vectorISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ESaIS7_EED1Ev' from file 'CMakeFiles/core.dir/create_new_plugin.cc.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.; ```. ## Checklist; - [x] quick tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2129:268,access,access,268,https://psicode.org,https://github.com/psi4/psi4/pull/2129,1,['access'],['access']
Security,"## Description; Adds a few classes to the PSI_API list so one of my plugins will run. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] plugins can access DFJK, PKJK, VBase, and BasisFunctions classes. ## Checklist; - [x] passes smoke, quicktests subsets of tests. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/981:213,access,access,213,https://psicode.org,https://github.com/psi4/psi4/pull/981,1,['access'],['access']
Security,"## Description; Adds a few functionals (SCAN0, revSCAN0, SCAN, revSCAN, BMK, revM06-L).; ~Enables `dft_bench_i*` tests for SCAN, SCAN0, revPBE, SOGGA, SOGGA11, MN12-SX, MGGA_MS2h, MN12-L, BMK, N12, MGGA_MVS, PKZB, MN15-L, PBE50, MGGA_MVSh, SOGGA11-X, M06-L, N12-SX, PBEOP, MPW1LYP and GAM.~; Enables all reference values in `dft_bench_i*` tests, now sorted alphabetically. Functionals not present in Psi4 are automatically ~marked with `xfail`~ skipped - this currently includes B3TLAP, BP86VWN, LRC-BOP, PBEsol, t-HCTH, t-HCTHh, wM05-D and wM06-D3, in addition to wB97X-D3 which was already marked `xfail`. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] adds SCAN and SCAN0; - [ ] tests for revSCAN, revSCAN0, revM06-L are missing - if anyone has access to these in other codes, I'd appreciate reference values!. ## Checklist; - [x] Tests added for functionals, where available; - [x] `dft_bench_interaction` and `dft_bench_ionization` pass. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1597:799,access,access,799,https://psicode.org,https://github.com/psi4/psi4/pull/1597,1,['access'],['access']
Security,## Description; Adds the ability to consume and produce MolSSI QC JSON Schema. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] A prototype MolSSI QC Schema has been implemented (http://molssi-qc-schema.readthedocs.io/en/latest/index.html). ## Questions; - [x] How much validation do we want?; - [x] A full test suite should like come from the schema itself?; - [x] How we will we handle extra psi vars? Is the current setup sufficient. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/979:336,validat,validation,336,https://psicode.org,https://github.com/psi4/psi4/pull/979,1,['validat'],['validation']
Security,"## Description; Allow access to wfn (incl. geom) after optking errors. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; * **User-Facing for Release Notes**; - [x] If optking fails internally or through exceeding max cycles and throws a `ConvergenceError`, you can now catch it with:. ```; try:; optimize('hf'); except psi4.ConvergenceError as err:; gotcha = err.wfn; print(gotcha.molecule().nuclear_repulsion_energy()); ```. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/881:22,access,access,22,https://psicode.org,https://github.com/psi4/psi4/pull/881,1,['access'],['access']
Security,"## Description; At long, long, long last fixes #1777 and fixes #1793. We now DIIS on the combined vector of orbital rotation amplitudes and T2 amplitudes. This is the approach taken by the orbital-optimized DCT code, which has not had nearly the problems that the `occ` module has had with orbital convergence. `occ` should now have much more robust convergence and _not_ be one of the banes of the test suite. In addition, full tests now pass, minus things involving conda dependencies. `v2rdm_casscf` was (unsurprisingly) segfaulting, and I was getting an error with `mp2d` that seems to trace back to me having an outdated version of QCEngine. I had to make some changes to `opt-irc-2` to get the test suite working. See #1793 for my diagnosis of the problem. In brief, the IRC in Psi can overshoot the endpoint, causing some numerical instability in the steps post-overshoot. This is a problem to fix in PyOptking, so I just changed the test value. This concludes the OCC's Open-Heart Surgery series. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Coupled orbital and amplitude DIIS for improved convergence in `occ`; - [x] Validated every `occ` test with OMP2, OMP3, OMP2.5, OCEPA that uses no spin-scaling against Psi4Numpy implementations converged with obsessive tightness. ## Checklist; - [x] Full tests pass, except for conda dependencies. That means `ctest` and `pytest`. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1846:1179,Validat,Validated,1179,https://psicode.org,https://github.com/psi4/psi4/pull/1846,1,['Validat'],['Validated']
Security,## Description; Because @huangm29 needs the SVD function plugin-exposed for Forte purposes. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2585:64,expose,exposed,64,https://psicode.org,https://github.com/psi4/psi4/pull/2585,1,['expose'],['exposed']
Security,"## Description; Cleanup `ccenergy/rotate.cc`. There's more cleanup to do, but this is a sufficiently large algorithm change that I'm breaking up the PR here. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] `ccenergy/rotate` return type changed to `bool`; - [x] Orbital rotation uses newer `libmints` tech for greatly reduced LoC; - [x] Gets rid of the last bit of code in `ccenergy` that needs to map between QT and Pitzer ordering. I'll leave it to a future PR to eject that from `ccenergy` permanently; - [x] Replaces yet more `MOInfo` variable access with wavefunction variable access. ## Checklist; - [x] `cc15` and `cc16` pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2719:606,access,access,606,https://psicode.org,https://github.com/psi4/psi4/pull/2719,2,['access'],['access']
Security,## Description; Closes #2031 . ## Todos; - [X] Add `compute_field_over_grid_in_memory` to `oeprop.cc` and `oeprop.h`; - [X] Expose `compute_field_over_grid_in_memory` in `export_oeprop.cc`.; - [X] Update `mints14` test. ## Questions; - N / A. ## Checklist; - [X] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2032:124,Expose,Expose,124,https://psicode.org,https://github.com/psi4/psi4/pull/2032,1,['Expose'],['Expose']
Security,"## Description; Coupled Cluster methods in general do not compute the OPDM unless necessary, however when they do need to compute the OPDM they do not communicate that back to the wfn object. This has led to some confusion on the part of users trying to access CC density matrices. (see #504 ). . ~~The ccdensity module will now set `ref_wfn.arrays[""CC_OPDM_A""/""CC_OPDM_B""] ` with the ground state opdm.~~. CCdensity does the MO/AO transformation and sets the ref_wfn Da/Db members internally, no python, and no longer using the `arrays` map. ; ## Features; - CC OPDM can be accessed via wfn object returned from a property calculation that constructs it.; - eom root psivars for dipole/quadrupole components are now properly assigned.; ## Todos; - [x] ~~Python-side code to convert arrays[""CC_OPDM_A/B""] to ref_wfn.Da()/Db()~~; - [x] fix assignment of root psivars for cc routines ; - [x] add tests to check OPDM assignment in wfn through OEProps; ## Questions; - [x] @dgasmith re the suggestion you made in #504 : would that not give us a ref_wfn with two copies of the same data? One held in `ref_wfn.arrays[""CC_OPDM_A""]` and the second in `ref_wfn.Da` ? I think we would want the entry in the arrays table to be freed? . ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/506:254,access,access,254,https://psicode.org,https://github.com/psi4/psi4/pull/506,2,['access'],"['access', 'accessed']"
Security,"## Description; DFT-NL (=non-local) adds the VV10 correlation energy to arbitrary DFT functionals using functional specific vv10_b parameter. Conceptually similar to DFT-D. DOI: 10.1021/ct200644w. Fixes https://github.com/psi4/psi4/issues/870. * **User-Facing for Release Notes**; - [x] SCF option `DFT_VV10_B` enables and adds VV10 correlation according to DFT-NL scheme (fixed `vv10_c`, user-supplied `vv10_b`). ; - [x] `DFT_VV10_C` also gives access to the C parameter.; - [x] `NL_DISPERSION_PARAMETERS` similar to `DFT_DISPERSION_PARAMETERS`; - [x] `energy('functional-nl')` sets pre-defined vv10_b parameters for over 15 functionals. Recommended usage for most users.; - [X] `DFT_VV10_POSTSCF` enables a post-scf VV10 calculation. Large gain in speed with minimal loss of VV10 correlation energy.; - [x] added documentation. . * **Developer notes**; - [x] rebase+adjustment to PR https://github.com/psi4/psi4/pull/922; - [x] figure out DSD variant and param citations; - [x] re-integrate tests. * ** Notes**; * forcing pure HF with VV10 will seg. fault. (no integration grid). Only `energy('hf')` with `set DFT_VV10_B` is caught, not `energy('scf')` to allow custom access to the scf.; * NL parameters were entered manually, someone please check over them for strange values or typos; * tests are kept short, but we also don't test every dispersion dash parameter out there.; * for double-hybrids with multiple versions, the frozen core and/or D3BJ parent variant was chosen for a sensible consistency. . ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/914:446,access,access,446,https://psicode.org,https://github.com/psi4/psi4/pull/914,2,['access'],['access']
Security,"## Description; During the switch over to the super build the `ENABLE_{ASAN,TSAN,UBSAN}` flags stopped working. This PR fixes them. To use these sanitizers you must compile a copy of Python with the corresponding flags added. If you do not then you'll receive runtime errors. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/845:145,sanitiz,sanitizers,145,https://psicode.org,https://github.com/psi4/psi4/pull/845,1,['sanitiz'],['sanitizers']
Security,## Description; Expose P::e.options in Python and enable pure pybind11 plugins. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/720:16,Expose,Expose,16,https://psicode.org,https://github.com/psi4/psi4/pull/720,1,['Expose'],['Expose']
Security,## Description; Expose the function C_DGELS (found in `qt.h`). ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2356:16,Expose,Expose,16,https://psicode.org,https://github.com/psi4/psi4/pull/2356,1,['Expose'],['Expose']
Security,## Description; Exposes `FittingMetric` to plugins for one of @fevangelista's students. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2420:16,Expose,Exposes,16,https://psicode.org,https://github.com/psi4/psi4/pull/2420,1,['Expose'],['Exposes']
Security,## Description; Exposes options class functions necessary for pybind11 plugins. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/725:16,Expose,Exposes,16,https://psicode.org,https://github.com/psi4/psi4/pull/725,1,['Expose'],['Exposes']
Security,"## Description; FINDIF's geometry generator is brought Py-Side, per [#884](https://github.com/psi4/psi4/issues/884). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Geometry generators are now unified, so we don't need to edit all three generators when one is bugged.; - [x] Various PyBinding has been done. Among other things, the new Py-side compute_atom_map function from pyvib2 now works with psi4 molecules.; - [x] Fixes a bug in the `CharacterTable` copy constructor member initialization list, which used to require a string to be an integer.; - [x] Getting geometries for finite difference calculations is now Py-side.; - [x] Computing gradients from energies is now Py-side.; - [x] Computing hessians from gradients is now Py-side.; - [ ] Computing hessians from energies _will be_ Py-side.; - [ ] Add the banner.; - [ ] Finish renaming the finite difference functions.; - [ ] Review the findif test suite and add any tests as needed. In particular, make sure the functions are agnostic as to psi4 vs. qcdb molecules.; - [ ] Run the entire test suite, to make sure my PyBind'ing hasn't caused any deep problems.; * **User-Facing for Release Notes**; - [x] A warning now displays if you attempt to access-by-index or iterate over an irreped object, instead of using a NumPy accessor. ## Questions; - [ ] I had to change the internals of SymmetryOperation to make PyBind happy. I trust there are no objections?. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1010:1273,access,access-by-index,1273,https://psicode.org,https://github.com/psi4/psi4/pull/1010,2,['access'],"['access-by-index', 'accessor']"
Security,"## Description; Fixes #1052 at long, long last: when the user explicitly declares a symmetry, findif is now smart enough to put displacements in the proper subgroup. As part of the fix, control over molecule cloning for finite difference has passed to `_process_displacement`. It seemed easier (and more appropriate) than adding code to make a new clone in each for loop. The clone would be necessary so that each displacement can have its own symmetry. Since I was touching that part of the code anyways, I have reorganized so that the reference is guaranteed to be the first displacement. This has the advantage that if orbital reading is enabled, the following displacements will be able to read from the reference, as intended. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fixes #1052; - [x] Exposes more C functions to Python; - [x] Move the reference geometry first for ease of orbital reads. ## Checklist; - [x] Tests modified to account for bug fix; - [x] All findif tests passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1424:849,Expose,Exposes,849,https://psicode.org,https://github.com/psi4/psi4/pull/1424,1,['Expose'],['Exposes']
Security,## Description; Fixes #655 and some other possibly nasty issues that come from; - Psithon->Python replacements being executed on literal strings; - Truncation of lines with literal python strings that contain a hash character (`#`). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Improved handling of literal strings inside `inputparser.py` to avoid regex replacements being attempted inside Python literals.; * **User-Facing for Release Notes**; - None. ## Status; - [ ] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/658:211,hash,hash,211,https://psicode.org,https://github.com/psi4/psi4/pull/658,1,['hash'],['hash']
Security,"## Description; Fixes a bug in the semicanonicalization procedure cause by an uninitialized matrix. This also exposes a `set_Lagrangian` in the `Wavefunction` class, which is needed to make gradients work for plugins not based on `Wavefunction`. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1847:110,expose,exposes,110,https://psicode.org,https://github.com/psi4/psi4/pull/1847,1,['expose'],['exposes']
Security,"## Description; For now, a shot in the dark to fix the psicode docs and the nightly windows package. As far as I can tell, there's nothing wrong with the master docs build -- https://psi4manual.netlify.app/ has all its links working just fine. But there's something a little different about how the internal links are expressed, and that makes the redirects misfire when accessed from psicode.org https://github.com/psi4/psicode-hugo-website/blob/master/netlify.toml#L12 . ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3023:371,access,accessed,371,https://psicode.org,https://github.com/psi4/psi4/pull/3023,1,['access'],['accessed']
Security,"## Description; I have added a Python function `fcidump` that lets the user save the one- and two-electron integrals to a plain-text file in [FCIDUMP format](http://www.sciencedirect.com/science/article/pii/0010465589900337); This is largely modeled on the [fcidump plugin](https://github.com/hande-qmc/fcidump) by @jsspencer It lets the user decide whether to save additional, non-standard information to the file like orbital energies ~and other one-electron integrals: dipole, quadrupole, etc. (not yet implemented!)~; **I'll implement printing out of the property integrals in a follow-up PR**. ### Some details; The integral transformation is done C-side. Once the OEI and TEI have been transformed, the print to file is done part C-side (TEIs) and part Py-side (OEIs). Not really elegant, I think, but gets the job done. @ashutoshvt might be interesting to get the T-amplitudes in the CC codes printed to file. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Exposed Python bindings for `MOSpace` and `IntegralTransform` classes in `export_trans.cc`; - [x] Exposed Python bindings for `Slice` class in `export_mints.cc`; - [x] Exposed Python bindings for some additional member functions in the `Matrix` class; * **User-Facing for Release Notes**; - [x] Added a `fcidump` Python function.; ~- [ ] Make it possible to print property integrals to file.~. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/872:1032,Expose,Exposed,1032,https://psicode.org,https://github.com/psi4/psi4/pull/872,3,['Expose'],['Exposed']
Security,"## Description; I would like access to the CCSD pair energies from the FNOCC code in Psi4. I made a small modification to the FNOCC code so the pair energies are calculated (using an existing for loop) and I've added the new variable ""CCSD PAIR ENERGIES"" to store the quantity. . This is my first PR with Psi4 so I apologize in advance if I've missed any coding guidelines. . ## Questions; - [ ] Should I add a test for this new variable?. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1950:29,access,access,29,https://psicode.org,https://github.com/psi4/psi4/pull/1950,1,['access'],['access']
Security,"## Description; Improvements to basis set handling, including; - elimination of duplicate code and introducing array size checks via use of std::string in gshell; - sanity checks for angular momentum parsing, eliminating segfaults; - support for explicit definition of angular momentum in the basis set input (fixes #628). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Eliminated duplicate code and introduced array size checks via std::string in gshell.; - [x] Introduced angular momentum checks in the basis set parser.; - [x] Added support for L=n format into the basis set parser. ## Questions; - [x] The basis set parser is doing regexp validation for the shell entry. Thanks to @PhillCli for supplying a working regexp. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1994:694,validat,validation,694,https://psicode.org,https://github.com/psi4/psi4/pull/1994,1,['validat'],['validation']
Security,"## Description; Include external potentials in the FISAPT module. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Add interaction of external potential with nuclei to nuclear repulsion; - [x] Add interaction of external potential with basis functions to one-electron Hamiltonian for SCF calculations and calculation of HF interaction energy; - [x] Fixed minor typo in proc_util.py. ## Questions; - [ ] I added a method to the Wavefunction class to access the protected external_pot_ object. Was there some other way I could have accessed this object?; - [ ] Adding the external potential directly to the one-electron potential matrices for each fragment leads to this potential being double-counted in some terms used to calculate the HF interaction energy. So I stored the external potential as an additional matrix, matrices_[""VE""], that is then added to the one-electron potential for the monomer SCF calculations and the HF term. Is there a better way to handle this problem that doesn't require storing an additional matrix?; - [ ] I compared total SAPT0 energy for a 2-fragment F-SAPT calculation to the SAPT module. Is there a good way to check a 3-fragment I-SAPT energy with the SAPT module?. ## Checklist; - [x] For a 2-fragment system, total SAPT0 energies with and without an external potential in FISAPT module agree with SAPT module; - [x] For a 3-fragment system, total SAPT0 energies with and without an external potential give reasonable energies; - [x] Passed included smoke and sapt tests. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1608:498,access,access,498,https://psicode.org,https://github.com/psi4/psi4/pull/1608,2,['access'],"['access', 'accessed']"
Security,"## Description; It was agreed at PsiCon that the `Matrix` and `Vector` class be rewritten to use xtensor as storage backend. This is my work on this so far. It is not complete - indeed `Matrix` and `Vector` are still used everywhere - but I think it's better to put this up early because it will take time to transition to the new classes. **Easter update**. The Python bindings for the `Tensor` class mostly come for free through `xtensor-python`. They allow to:; * Access blocks _via_ the subscript operator.; * Assign a NumPy array to a block.; * Get a block and update it in NumPy.; ```; import numpy as np. from psi4.core import Dimension, Matrix_D. dim_row = Dimension([3, 2, 1, 4]); dim_col = Dimension([4, 2, 0, 2]); m3 = Matrix_D('m3', dim_row, dim_col); m3[0] = np.random.rand(*m3[3].shape); block = m3[3]; block[:] = np.arange(m3[3].size, dtype=float).reshape(*m3[3].shape); ```. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Use `_a` literal in pybind11 export sources rather that `py::arg` --> Split and merged with #1448 ; - [x] Basic templated `Tensor` class with Python bindings.; - [x] `doublet` for `Tensor<double, 2>` aka a `Matrix` of `double`-s working. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1443:467,Access,Access,467,https://psicode.org,https://github.com/psi4/psi4/pull/1443,1,['Access'],['Access']
Security,"## Description; Legacy modules that were default in the past, but have been replaced will move to the [psi4pasture](http://github.com/psi4/psi4pasture) repo. The ccsort/transqt2 modules now live there. This PR introduces some machinery for installing them from psi4's build, and allowing them to be used in the driver at run-time if they are installed. ## Todo; - [x] cleanup history; - [x] find specific libs that have missing symbols + add `${PRE/POST_LIBRARY_OPTIONS}` to each not all.; - [x] Docs: Finalize build instructions for `PastureRequiredError`; - [x] Docs: Add transqt2/ccsort note to read_options.cc; - [x] Tests: add tests as lori mentioned . * **Developer Interest**; - I would say this functionality is experimental since pasture does not have any travis checks.; - I am not completely confident in the way I have ""injected"" pasture.addins.ccsort_transqt2 into proc.py, but it seems to work okay. See the code comments; - Does the pasture module even need to be installed w/in lib/psi4/driver?. * **User-Facing for Release Notes**; - ccsort/transqt2 are no longer part of psi4_core; - adds ENABLE_ccsort and ENABLE_transqt2 flags to optionally build/install them from pasture. * **Self imposed CI checks**; - [x] MacOS/clang/python2 build + use pasture ok; - [x] MacOS/clang/python3 build + use pasture ok; - [x] Linux/gcc/python2 build + use pasture ok; - [x] Linux/gcc/python3 build + use pasture ok. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/534:832,inject,injected,832,https://psicode.org,https://github.com/psi4/psi4/pull/534,1,['inject'],['injected']
Security,"## Description; Makes restarting an SCF and saving orbitals more accessible and updates documentation. Saving MOs for every SCF step to `my_mos.npy` and keeping it after psi4 finishes:; ```; energy('hf/minix',write_orbitals='my_mos'); # or; set orbitals_write my_mos; energy('hf/minix'); ```. Reading `my_mos.npy`:; ```; set guess read; energy('hf/minix',restart_file='my_mos'); ```. Using a serialized `wfn` works as well (`my_mos.npy` is just that); ```; e, scf_wfn = psi4.energy('scf', return_wfn=True); scf_wfn.to_file('saved_wfn'); set guess read; energy('scf', restart_file='saved_wfn'); ```. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] `write_orbitals' extended to also take a string to save user-named `180.npy` file; - [x] fixed and updated `restart_file` for `npy` files; - [x] added `ORBITALS_WRITE` option; - [x] if `write_orbitals=file` then MOs will be saved every iteration.; - [x] doc re-work (minimal entry on serializing a wfn and simplifying `restart_file`); - [x] adds `sphinx-autodoc-typehints` module to sphinx build hinting in cmake ; - [x] `serial-wfn` ctest to new pytest about restarts. ## Remarks; - `write_orbitals=boolean` is not documented but still an internal functionality. ; - `restart_file` doc is ambiguous on purpose. No idea which modules support restarting. If this is something a user; should be able to do, the respective module needs to add a documentation. ## Checklist; - [x] Tests; - [x] Docs; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2190:65,access,accessible,65,https://psicode.org,https://github.com/psi4/psi4/pull/2190,1,['access'],['accessible']
Security,"## Description; Modifies how one electron properties are computed to allow the `properties` kwarg to behave consistently with other modules. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] CCDENSITY no longer calls into OEPROPs this is now done in the python layer. ; - [x] After calling CCDENSITY the `wfn.arrays['CC ROOT {n} D{a|b}']` can be used to access the OPDM for excited states in the SO basis as in the convention for matrix quantities set on the wfn. ; * **User-Facing for Release Notes**; - [x] Excited state OPDMs are now set in the wfn.arrays, so that they can be used to compute 1e properties for all roots requested in EOM-CC* calls.; - [x] Now additional valid one electron properties can be passed as part of the `properties=[]` list. These would previously cause a validation error. Valid one electron properties are now:; - dipole *; - quadrupole *; - mulliken_charges **; - lowdin_charges; - mayer_indices; - wiberg_lowdin_indices; - no_occupations **; - [x] The previous behavior was such that requesting the properties marked with * above would lead to all * -ed properties and additional (**) properties being computed automatically. The new logic implemented in the driver still has this behavior so existing workflows do no need to change, at least for now. . ## Questions; - [x] @loriab The block of code that I removed from CCDENSITY had comments that were used to trigger documentation of some psivars. Where should these go now? . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - I ran all of the CC tests and there were no errors. The new logic changes where in the output file the 1 electron properties appear, but the perl script still finds them since they are labeled/formatted the same way. . ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/995:419,access,access,419,https://psicode.org,https://github.com/psi4/psi4/pull/995,2,"['access', 'validat']","['access', 'validation']"
Security,"## Description; Mostly, get psi4 up-to-date with pybind again, remove extraneous python linking, and sanitize chemps2 & pcmsolver test case names and ctest labels. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] add message-coloring module, useable by all, and used to warn about <4.9 GCC and highlight addon detection; - [x] make autodocing tools aware of the detci properties psivars that are now set py-side; - [x] re-work some list casting that (with pybind11 Nov 16 updates) broke our array options; - [x] dropped the versioned code object library in psi4/src/CM; - [x] documented python/pybind linking a bit; - [x] ctest `shorttests` gone and `minitests` in; * **User-Facing for Release Notes**; - [x] `dmrg` tests and label now accessed through `chemps2`; - [x] `pcmsolver` tests dropped ""pcm"" prefix; - [x] tests involving external code now accessible with label `addon` rather than `ext-exe-dep`; - [x] no longer linking to libpython. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/524:101,sanitiz,sanitize,101,https://psicode.org,https://github.com/psi4/psi4/pull/524,3,"['access', 'sanitiz']","['accessed', 'accessible', 'sanitize']"
Security,## Description; Move components of the mp2 energy into the `variables_` map so that they're accessible from Python (cc #642). ## Questions; Are the any backwards compatibility or other reasons to leave the `energies_` member variable around?. ## Status; - [ ] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/643:92,access,accessible,92,https://psicode.org,https://github.com/psi4/psi4/pull/643,1,['access'],['accessible']
Security,"## Description; Occasionally we had issues cropping up where users were assigning views that were not tied to the Matrix object. Consider the following:. ```; mat = Matrix(5, 5); view = mat.np; del mat; ```. Previously, `mat` and `view` lifetimes were not tied together. The NumPy array would point to deleted memory in the above example. With this PR, the object lifetime are tied together and `mat` is not actually deleted in this example (just a handle to it) so that the `view` remains valid. This also allows operations like `view = Matrix(5, 5).np` and `Cocc = wfn.Ca_subset(""AO"", ""OCC"").np` to work without issue. A small downside is that the views cannot be cached as this would lead to circular nurse/patient relationships and prevent the objects from ever being garbage collected. This makes the `.np` accessors take slightly more time (~2-5us depending on number of irreps vs 0.5us). However, unless you are looping over individual indices and setting values this really shouldn't matter and the `mat.get/mat.set` functionality can be used for this with the ~0.4us latency. There is a chance this is fixable and we can revisit if it comes an issue. I also was able to delete a great deal of rather hideous code which makes me quite happy. Special thanks to @rmcgibbo for poking me about this and helping with idea and also to the PyBind11 team for ""fixing"" this a few months ago (doh!). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Can now obtain stand-alone views with correct reference counting (`view = Matrix(5, 5).np`).; - [x] Dimension objects can now be built python-side from list `Dimension([5, 5, 5])`.; * **User-Facing for Release Notes**; - [x] The NumPy interface is now more robust. . ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/751:812,access,accessors,812,https://psicode.org,https://github.com/psi4/psi4/pull/751,1,['access'],['accessors']
Security,"## Description; Originally, only the last rotation or polarizability values computed were actually dumped to the dictionary accessed by `core.get_variables`. This fix pushes each one into the dictionary with its corresponding wavelength (in NM). I've added a few lines to `tests/cc39/input.dat` and `tests/cc29/input.dat` to test the polarization and rotation variables, respectively. I've run the tests separately since the quick tests on Travis may not cover them, the results can be found [here](https://gist.github.com/bgpeyton/6a7842adb77a03a10bf696c8364a9c54) and [here](https://gist.github.com/bgpeyton/a6654acd0f7fcaa89b5023bebd40b025). . ## Todos; - [x] Make polarizabilities push each calculated value to the dictionary just like I did with rotation; - [x] Add to polarizability / rotation test cases to ensure new variables don't get overwritten by ""accident"". ## Questions; None. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/857:124,access,accessed,124,https://psicode.org,https://github.com/psi4/psi4/pull/857,1,['access'],['accessed']
Security,"## Description; Per @fevangelista request, this PR allows Forte to compile with master Psi, almost. That also requires a Forte PR. ## Todos; - [x] Exposes `reset_subspace` to C++. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2437:147,Expose,Exposes,147,https://psicode.org,https://github.com/psi4/psi4/pull/2437,1,['Expose'],['Exposes']
Security,"## Description; Prints out the MBIS valence charges. These were already being computed, just not exposed to the user. Tests were added for the new output, and all tests pass. There is no impact on runtime because it is just exposing values already being computed. Addresses https://github.com/psi4/psi4/issues/3140. ## User API & Changelog headlines; - [x] MBIS valence charges are now exposed and printed in MBIS output; - [x] The wfn array_variable `MBIS VALENCE CHARGES` is now available to be retrieved. ## Dev notes & details; - [x] Saves the MBIS valence charges to it's own little matrix; - [x] And exposes those charges on the python side as the wfn variable `MBIS VALENCE CHARGES`; - [x] Updates the relevant tests. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3226:97,expose,exposed,97,https://psicode.org,https://github.com/psi4/psi4/pull/3226,3,['expose'],"['exposed', 'exposes']"
Security,"## Description; Provide a brief description of the PR's purpose here. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] switch to qcel for covalent radii. require v0.1.2; - [x] to try out covalent radii, add a test for translating to MOL format. add to psi4.core.Mol.; - [x] fix the compare_vals in threading_test; - [x] clean up all but json_out files from ctest run; - [x] add levels to pytest. while `psi4 --test` still does smoke only, other access modes have smoke/quick/default/long and we can start expanding the pytest suite. ## Checklist; - [x] added MOL writer test; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1330:494,access,access,494,https://psicode.org,https://github.com/psi4/psi4/pull/1330,1,['access'],['access']
Security,"## Description; Provide a brief description of the PR's purpose here. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Bump CheMPS2 to v1.8.4; - [x] Bump Libint to Ninja-able version, v1.2.1+2; - [x] Bump Pybind11 to v2.2.2. Note that this invokes symbol hiding, so ...; - [x] Include Jet's `PSI_API` macro to re-expose classes for plugins.; * **User-Facing for Release Notes**; - [x] Note that anyone wanting to re-use an `objdir` will need to **thoroughly** remove the old pybind11 v2.0.0 from detectability. This means:; - `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/includes/pybind11`; - `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/share/cmake/pybind11`; - `<objdir> rm -rf external/upstream/pybind11`. ## Status; - [x] Ready for review; - [x] Ready for merge. @psi4/editors, these should be quick and uncontroversial. Getting this in would help the PR assembly line.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/950:379,expose,expose,379,https://psicode.org,https://github.com/psi4/psi4/pull/950,1,['expose'],['expose']
Security,"## Description; Provides and exposes a `matrix` method to check if two matrices are the same, within a given tolerance. This may allow for some simplifying of the test infrastructure, but I don't know the test infrastructure nearly well enough to say. ## Checklist; - [x] `test_matrix.py` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2395:29,expose,exposes,29,https://psicode.org,https://github.com/psi4/psi4/pull/2395,1,['expose'],['exposes']
Security,"## Description; Provides users the ability to form a basisset composed of two combined basissets, the two can be combined simply or through use of the complementary auxiliary basis set (CABS) approach of Valeev et al. ## Dev notes & details; - [X ] Uncomments `pyconstruct_combined` in qcdb with minor changes to fit updated python; - [X ] Changes input to `build_ri_space` in OrbitalSpace to require a prebuilt combined `BasisSet` object; - [X ] Changes `build_cabs_space` in OrbitalSpace to use a full SVD; - [X ] Adds pytest `test_orbitalspace.py` to check orthonormality between orbital basis set and CABS; - [X ] Adds updated F12 basissets from the Basis Set Exchange; - [X ] Use of the CABS created works with my F12 plugin giving correct energies. ## Questions; - [ ] Shoud I generalize `_pybuild_basis` aka `BasisSet.build` to work with a list of keys, targets, roles, and other? Or create a new function to more easily access the building of a combined basisset?. ## Checklist; - [X ] `test_orbitalspace.py`; - [X ] Passes quick tests [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2982:928,access,access,928,https://psicode.org,https://github.com/psi4/psi4/pull/2982,1,['access'],['access']
Security,## Description; Remove a now-meaningless validation step in `detci`. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2666:41,validat,validation,41,https://psicode.org,https://github.com/psi4/psi4/pull/2666,1,['validat'],['validation']
Security,"## Description; TDSCF/ADC and EOM can't agree on how to name variables for excitation energies. Per discussion between Lori and I, this moves the TDSCF variable names to the new standard, as I see it. This PR is not complete and is submitted for feedback from the excited-state gurus, who are likely to have strong opinions: @loriab @robertodr @lothian @maxscheurer . To demonstrate the changes, consider the example file I added. Old code would write the second transition as ""TD-HF ROOT 0 -> ROOT 2 EXCITATION ENERGY - B2 SYMMETRY"". The new code replaces that with three new psivars:. - TD-HF ROOT 0 (B1) -> ROOT 0 (B2) EXCITATION ENERGY; - TD-HF ROOT 0 -> ROOT 2 EXCITATION ENERGY; - TD-HF ROOT 0 -> ROOT 2 EXCITATION ENERGY - A2 SYMMETRY. We have one access call that requires the symmetries of initial and target states and the indices of both _within their irreps_. We have one access call that requires no symmetry information and just requires the index of the states _among all irreps_. The last access call is like the second, but adds on the symmetry of the _transition_. **This is a breaking change** because old code instead used the symmetry of the final state. After coding this all up, I'm inclined to remove the last access call. The original reason for keeping it up was consistency with the current way TDSCF operates, but it's still inconsistent, per the last paragraph. I'll add docs once we're settled about the new naming conventions. Once this PR is in, the other modules will need to update to the new style. ## Questions; - [x] Opinions on the new variable names?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2462:755,access,access,755,https://psicode.org,https://github.com/psi4/psi4/pull/2462,4,['access'],['access']
Security,"## Description; The CC2/CCSD static polarizability values i.e when omega = 0 ev or Inf nm can be properly accessed now. Ex for CC2: ``psi4.get_variable(""CC2 DIPOLE POLARIZABILITY @ INF NM"")``. Right now, the tag is erroneously set to ``""...POLARIZABILITY @ 0NM""`` for such cases. So, this is a very minor bug.; ## Status; - [X] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/902:106,access,accessed,106,https://psicode.org,https://github.com/psi4/psi4/pull/902,1,['access'],['accessed']
Security,"## Description; The CdSalcList code is made fully accessible to the Python layer, per #884. This code does that and makes a few other changes to clean up code I found while trying to write the documentation for Pybind. Pinging @loriab and @dgasmith by request. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Moves the factory argument from the CdSalcList constructor to an argument of the method that uses it, getting rid of several null pointers and also meaning that a list of displacements no longer needs to care about orbital irreps.; - [x] Adds missing `const` declarations; - [x] The documentation no longer tells developers to use the non-existent SimpleMatrix class; - [x] Other misc. cleanup, from removing an overloaded term to simplification; * **User-Facing for Release Notes**; - [x] Exposed `CdSalcList` to Python; - [x] Made the needed irreps for Cartesian displacements more readable. ## Questions; - [x] ~~I am playing with reworking the print function. needed_irreps displays as an integer, so that part of the output is unintelligible to people who do not know that it is internally a bitstring. Would this be worth changing?~~ Changed!. ## Status; - [x] Ready to go!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/895:50,access,accessible,50,https://psicode.org,https://github.com/psi4/psi4/pull/895,2,"['Expose', 'access']","['Exposed', 'accessible']"
Security,"## Description; The UHF version of #2171. The open-shell DCT code now adds two terms before contracting them against the two-electron integrals, rather than after. Unfortunately, this change was tightly coupled to surrounding code, making it unnecessarily complicated. This PR also removes that complexity. Again, I'd expect this code to be faster due to reduced random access in `process_so_integrals`, but I haven't run timings. ## Todos; - [x] More transparent code; - [x] 100 less lines code; - [x] Four fewer global variables . ## Checklist; - [x] DCT tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2185:370,access,access,370,https://psicode.org,https://github.com/psi4/psi4/pull/2185,1,['access'],['access']
Security,"## Description; The `large-atoms` test was previously sitting around unused, waiting for improved ECPs (see discussion in #2234). This PR renovates that test, checking SCF and DF-MP2 energies and gradients on period 5/6 atoms. . ~~TODO (future PR): after MP2 ECP gradients are validated+enabled, should be added to this test~~ 01/25 update: DF-MP2 gradients now enabled and tested. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Add `test_large_atoms` pytest; - [x] Enable DF-MP2 gradients . ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2836:277,validat,validated,277,https://psicode.org,https://github.com/psi4/psi4/pull/2836,1,['validat'],['validated']
Security,"## Description; The `potential_` of SCF subclasses has been moved. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] The HF base class has been weakened from having a `std::shared_ptr<VBase> potential_` to having a method `get_potential()` that returns a `std::shared_ptr<VBase>`. After #2885, the subclasses may need to access subclass-specific methods. ## Checklist; - [x] Quicktests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2889:511,access,access,511,https://psicode.org,https://github.com/psi4/psi4/pull/2889,1,['access'],['access']
Security,"## Description; The idea here was suggested by @CDSherrill, and implemented in this PR. What is this ""idea""? Currently, CompositeJK methods are accessed through `SCF_TYPE` options of the form `J_algo+K_algo`, with `J_algo` and `K_algo` being the respective composite J and K build algorithms to be used for the calculation. Meanwhile, one notable benefit of the CompositeJK class is that, for DFT calculations that use non-hybrid functionals, composite methods can be used to specify an algorithm specifically optimized for J matrix construction, in contrast to general algorithms which need to also account for the K matrix. Since non-hybrid DFT calculations only require the J matrix, CompositeJK can lead to speedups in such cases. But in those cases where only the J algorithm is needed, the current `SCF_TYPE` specification for CompositeJK has a problem - the composite K algorithm that must be specified, is unnecessary and unused. . This PR allows for the specification of CompositeJK algorithms via _only_ the J algorithm for cases such as non-hybrid DFT, where only the J matrix is needed. If CompositeJK is called without a K algorithm in cases where a K algorithm is needed, such as HF or hybrid DFT, an exception is thrown. Additionally, if the `J_algo+K_algo` `SCF_TYPE` specification for CompositeJK is used in conjunction with a non-hybrid functional, a note is given to the user, letting them know that the K algorithm won't be used. ## User API & Changelog headlines; - [X] Adds a new `SCF_TYPE` option, `DFDIRJ`, for usage in non-hybrid DFT calculations. ## Dev notes & details; - [X] Adjusts the CompositeJK class so that it can be called and used with _only_ the J algorithm as the `SCF_TYPE` keyword. This can be useful in non-hybrid DFT calculations, where the K matrix is unnecessary.; - [X] If only a J algorithm is specified in cases where a K matrix is required, the code throws an exception.; - [x] If the old CompositeJK `SCF_TYPE` notation is used when the K matrix is not",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3001:144,access,accessed,144,https://psicode.org,https://github.com/psi4/psi4/pull/3001,1,['access'],['accessed']
Security,"## Description; The next bite-sized DCT cleanup PR. To construct an intermediate `Fa_` and `Fb_`, previously, we'd divide the term in three parts, compute the three contributions separately, and then add them together. Making things more complicated, we add the pieces in different functions. In the RHF case, this PR combines two of those terms from the outset, so there are only two contributions to add. As a result, we now construct fewer `double*`, use fewer class variables, and have less cause to worry about whether the intermediates `Fa_` and `Fb_` are completely or incompletely constructed. While I haven't run timings, this code should also be faster due to reduced random-access of arrays. The UHF code is more complicated, so that's best saved for another PR. At that point, I hope to eliminate a few more class variables. ## Todos; - [x] More code cleanup. ## Checklist; - [x] DCT tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2171:685,access,access,685,https://psicode.org,https://github.com/psi4/psi4/pull/2171,1,['access'],['access']
Security,"## Description; The purpose of this PR is to expose the wavefunction as well as access to all amplitudes from CC to the python side. This has the advantage to sort out the relationship of Wavefunction, CCEnergyWavefunction and CCLambdaWavefunction in a more natural C++ way through inheritance. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] CCLambdaWavefunction inherits from CCEnergyWavefunction to facilitate better runtime access from the python side.; - [x] Setter and getter for all T & L amplitudes are included in the python interface to enable more sophisticated methods in the future, e.g. in the broker from #1057.; * **User-Facing for Release Notes**; - [x] Setter and getter for all T & L amplitudes are included in the python interface to enable more sophisticated methods in the future, e.g. in the broker from #1057. ## Questions; - [ ] Does the more technical details from above (inheritance change and exposing of the amplitudes to python) require more text for the release notes?; - [ ] The python documentation should be automatically built, is there more documentation for this part required?. ## Checklist; - [x] Tests added for any new features (not required as no new functionality added); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1061:45,expose,expose,45,https://psicode.org,https://github.com/psi4/psi4/pull/1061,3,"['access', 'expose']","['access', 'expose']"
Security,## Description; This PR adds code to the findif codes that allows to save the current geometry and normal modes to a Molden file. Normal mode info is only written if explicitly requested by the user (via the boolean keyword NORMAL_MODES_WRITE). The normal modes are saved in [Molden format](http://www.cmbi.ru.nl/molden/molden_format.html). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Exposes (read only-mode) some variables in the VIBRATIONS class.; - [x] Adds a function to save normal modes info in Molden format.; - [x] Adds an option to write normal modes (false by default).; * **User-Facing for Release Notes**; - [x] Documentation. ## Questions; - [x] Where should the documentation go?; - [x] Suggestions to improve output format?. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/644:456,Expose,Exposes,456,https://psicode.org,https://github.com/psi4/psi4/pull/644,1,['Expose'],['Exposes']
Security,"## Description; This PR adds implementation of `force_soccpi` and `force_doccpi`, allowing the user to change the singly and doubly occupied orbitals per irrep in the Wavefunction object. The alpha and beta electron counts are also updated accordingly. This functionality should only be used by expert users in special circumstances, since it causes inconsistency in the Wavefunction object for SCF purposes. (Let me know if I should add some sort of ""expert"" flag in the documentation to reflect this, or if I need to add any other documentation besides what I've put in already!). ## Todos; - [x] Add implementation of `force_soccpi` and `force_doccpi` C++-side; - [x] Add Python-side accessibility to `force_soccpi` and `force_doccpi`. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/876:687,access,accessibility,687,https://psicode.org,https://github.com/psi4/psi4/pull/876,1,['access'],['accessibility']
Security,"## Description; This PR adds support for the remaining access patterns for EOM oscillator strengths and einstein coefficients. The pieces are now in place to adapt densities and multipoles as well. I'm hopeful that will be the next PR, which should be enough to get 3 of the 4 remaining cc tests ported over. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Infrastructure Change: `ccdensity` and `cceom` now require an incoming `CCEnergyWavefunction`; - [x] Infrastructure Change: `CCEnergyWavefunction` now has a field to store excited state symmetry labels; - [x] Infrastructure Change: Some SharedWavefunction arguments became refernces to CCEnergyWavefunction; - [x] Fully moved `cceom` internal vars to new standard. ## Checklist; - [x] `eom` ctests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2538:55,access,access,55,https://psicode.org,https://github.com/psi4/psi4/pull/2538,1,['access'],['access']
Security,"## Description; This PR aims to expose useful functions from _detci_ and _libpsio_ to the python side:; - libpsio needs **read()**, **write()**, **read_entry()**, and **write_entry()** functions available in python to be actually useful to the user who intends to use Psi4 intermediate files, containers and buffers.; - There are publicly accessible _get_opdm()_ and _get_tpdm()_ functions in _detci_ but for the active-space only. This PR tries to bring the **opdm_add_inactive()** function to the public scope as well and expose it to the python side.; - Members of the **psio_address** structure are also exposed that can be adopted as arguments in _libsio_'s _read()/write()_ function calls. ## Todos. * Having a spatial symmetry-imposed bock-structured sparse TPDM as a result of get_tpdm() instead of the dense format only is desirable.; * Adding _opdm_add_inactive()_'s counterpart in order to complete the full structure of TPDM [such as **tpdm_add_inactive()**] will be extremely useful. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1821:32,expose,expose,32,https://psicode.org,https://github.com/psi4/psi4/pull/1821,4,"['access', 'expose']","['accessible', 'expose', 'exposed']"
Security,"## Description; This PR changes how `OEProp` saves variables and fixes a bug where ""CC ROOT 0"" variables were not being set. Previously, OEProp overloaded `title_` to refer to both the name used for the density matrix (for print purposes) and for the name used for properties (as a prefix for variable saving purposes). Only one such name can be used.; Now, OEProp uses the density matrix's name as the density matrix's name (for print purposes) and for the names used for properties (for variable saving purposes, and with the generality of format strings). Multiples names can be used. With this, I can now save the CC dipoles as both ""CC DIPOLE"" and ""CC2 DIPOLE"", so ""CC DIPOLE"" can be found. The Psi code that tried to access this was never entered previously because it checked for a 'dipole' variable rather than a 'DIPOLE' variable. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] More flexibility in OEProp names; - [x] Previously missing CC property variables are set. ## Checklist; - [x] Properties tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2534:723,access,access,723,https://psicode.org,https://github.com/psi4/psi4/pull/2534,1,['access'],['access']
Security,"## Description; This PR contains a refactored version of the Dimension class in which data is no longer stored in a `int*` array but on `std::vector<int>`. This eliminates a potential bug of the old code (memory was potentially freed even for a zero-length vector). After working on this PR I realized that the dependency on `int*` runs pretty deep in Psi4. It affects major libraries (dpd, libtrans, libfock,...). So I still had to leave a way to get a `int*` to the data stored in the class member `std::vector<int>` object. Things are slightly complicated also by the fact that Wavefunction exposes Dimension objects via functions that return constant references. Some work was done to reduce the number of Dimension->int* casts. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [X] Modernize the Dimension class.; - [X] Fixes a potential problem with memory.; - [X] Adds exceptions to operations that could potentially involve Dimension objects of different dimensions.; - [X] Avoids exposing non-const Dimension objects.; - [X] Refactors MatrixFactory to use Dimension objects. ## Status; - [X] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/571:594,expose,exposes,594,https://psicode.org,https://github.com/psi4/psi4/pull/571,1,['expose'],['exposes']
Security,"## Description; This PR enables CCSD calculations with the PCM in the [PTE (Perturbation-To-Energy) approximation](http://dx.doi.org/10.1063/1.3245400). The CCSD amplitude equations are solved using the solvated Fock matrix and MOs, _i.e._ running SCF with PCM and then using the solvated SCF determinant as the reference.; It boils down to adding the PCM polarization energy in the reference energy used in the CC modules. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] CCSD with the PCM in the PTE approximation. ## Questions; - [x] Accessing the PCM polarization energy of the reference with `Process::environment.globals[""PCM POLARIZATION ENERGY""]` is probably not the cleanest solution. Are there alternatives?; - [x] This PR lacks documentation. Where should I add some notes about this?. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/683:614,Access,Accessing,614,https://psicode.org,https://github.com/psi4/psi4/pull/683,1,['Access'],['Accessing']
Security,"## Description; This PR exposes Einstein Coefficients and Rotary Strengths to `psivar`. As of this PR, cc tests 1-33, 35-45, 47, 49-53, 55-56 are ported. Four tests to go. I'm not ultimately happy with these tests (see the six issues I filed this evening), but it's as good as we have right now. ## Questions; - [x] **Please confirm the descriptions and units of the glossary additions.**. ## Checklist; - [x] Newly added tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2525:24,expose,exposes,24,https://psicode.org,https://github.com/psi4/psi4/pull/2525,1,['expose'],['exposes']
Security,"## Description; This PR exposes `Vector.clone()` to the Python layer, a generally useful function and one I specifically need for PyDIIS. Sadly, positive LoC this time. The cast to `shared_ptr` is necessary for the clone to be available Py-side because when we pybound `Vector`, we specified `std::shared_ptr<Vector>` as its holder type. I imagine this is an example of ""[holder types must be applied consistently](https://pybind11.readthedocs.io/en/stable/advanced/smart_ptrs.html#std-shared-ptr.)."" Let's not talk about how long it took for me to implicate holder types in my test originally failing. ## Todos; - [x] `Vector.clone` available on the Python layer. ## Checklist; - [x] Tests added for any new features. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2375:24,expose,exposes,24,https://psicode.org,https://github.com/psi4/psi4/pull/2375,1,['expose'],['exposes']
Security,## Description; This PR exposes all of libmints and libciomr to plugins via the PSI_API macro. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Expose libmints; - [x] Expose libciomr; - [x] Expose JK and Denominator classes; - [x] Expose Options print functions. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1400:24,expose,exposes,24,https://psicode.org,https://github.com/psi4/psi4/pull/1400,5,"['Expose', 'expose']","['Expose', 'exposes']"
Security,"## Description; This PR exposes the two functions `compute_orbitals` and `compute_density` from `CubeProperties` to the Python layer. This allows for more flexible dumping of cube files. Example Code:; ```Python; import psi4; import numpy as np. def test_cube_files(expected, computed):; expected = np.genfromtxt(expected, skip_header=9, skip_footer=1); computed = np.genfromtxt(computed, skip_header=9, skip_footer=1); np.testing.assert_allclose(expected, computed, atol=1e-14). mol = psi4.geometry(""""""; O 0 0 0; H 0 0 1.795239827225189; H 1.693194615993441 0 -0.599043184453037; symmetry c1; units au; """"""). psi4.core.be_quiet(); psi4.set_options({'basis': ""sto-3g"",; 'scf_type': 'pk',; 'cubeprop_tasks': ['density', 'orbitals']}); scf_e, wfn = psi4.energy('SCF', return_wfn=True); psi4.cubeprop(wfn). cubegen = psi4.core.CubeProperties(wfn). dt = wfn.Da(); dt.add(wfn.Db()); cubegen.compute_density(dt, ""hf_density""). # obtain alpha coefficients; orbs = wfn.Ca_subset(""AO"", ""OCC"").np; # select the two highest occupied orbitals; occs = orbs[:, -2:]; occs_pm = psi4.core.Matrix.from_array(occs); cubegen.compute_orbitals(occs_pm, [0, 1], [""homo-1"", ""homo""], ""orbital""). test_cube_files(""Dt.cube"", ""hf_density.cube""); test_cube_files(""Psi_a_5_5-A.cube"", ""orbital_2_homo.cube""); test_cube_files(""Psi_a_4_4-A.cube"", ""orbital_1_homo-1.cube""); ```. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] export functions . ## Questions; - [x] ~~Should some tests be added for this? Like in the example code above to be 100% safe?~~ I added a simple test like in the example script to be safe. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1917:24,expose,exposes,24,https://psicode.org,https://github.com/psi4/psi4/pull/1917,1,['expose'],['exposes']
Security,"## Description; This PR introduces a new `DFTensor` class to DCT. This is a lightweight wrapper over Matrix which I use to get some extra dimension information, as well as to store the DF contraction functions which were previously cluttering DCT's wavefunction object. Accordingly, many objects which were previously a `Matrix` have been specialized to a `DFTensor`. This also allows more careful input validation for the functions of `DFTensor`, but my primary motivation is for **code organization for the sake of a future PR**. Although there's a large LoC change, most of this is just moving code around and the bare minimum changes needed to make the code compile. **Reviewers, the thing to look at is the header files.**. Also of note: `Matrix bQpqA_mo_;` was never actually used and is thus removed. That should be decent memory savings. Do **not** merge until 1.5. It is far too late in the game for PRs of this scope. ## Checklist; - [x] DCT test passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2250:404,validat,validation,404,https://psicode.org,https://github.com/psi4/psi4/pull/2250,1,['validat'],['validation']
Security,## Description; This PR introduces an atomic blocking scheme for quadrature grid points. All grid points in a `BlockOPoints` object belong to a singular parent atom.; Part 1 contains just the basic feature to get it our for people depending on it. Optimization for speed is yet to come. ### New options:; - `DFT_BLOCK_SCHEME = ATOMIC` (unique blocks of grid points for each atom); - `DFT_REMOVE_DISTANT_POINTS` (new flag for existing functionality). ### primary C++ feature:; - `grid->atomic_blocks()[N_ATOM][N_BLOCKS]` additionally to `grid->blocks()[N_BLOCKS]` # provides all grid points for an atom; - `block->parent_atom()` # atom the current block belongs to. ### fixes; - collocation size estimate in naive gridblocker was wrong.; - removes unused `index` vector. #### note; - Automated formatting of the files with `clang-format` made unrelated changes. ## Questions; - [ ] The ugly code [here](https://github.com/hokru/psi4/blob/atomic_grid1/psi4/src/psi4/libfock/cubature.cc#L4630-L4641) is because of an issue with the `BlockOPoints` [object](https://github.com/hokru/psi4/blob/atomic_grid1/psi4/src/psi4/libfock/cubature.h#L179). I'd like advice how to handle this better. ## Checklist; - [x] Tests added for any new features. ## Status; - [x] Ready for review; - [x] Ready for merge. ---. ## Usage. Normal loop structure; ```; for (size_t Q = 0; Q < grid_->blocks().size(); Q++) {; size_t parent_atom_ = grid_->blocks()[Q]->parent_atom();; .; .; .; }; ```. Looping over atoms and their blocks. ; ```; # openmp note: for best performance the atom and block loop could possibly; # be collapsed into a singular loop using `collapse(2)`; for (size_t i = 0; i < grids_.size(); i++) { # here size = number of atoms; for (size_t Q = 0; Q < grid_->atomic_blocks()[A].size(); Q++) {. // access a block; std::shared_ptr<BlockOPoints> block = grid_->atomic_blocks()[A][Q];; .; .; .; }; ```,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2336:1790,access,access,1790,https://psicode.org,https://github.com/psi4/psi4/pull/2336,1,['access'],['access']
Security,"## Description; This PR is a reimplementation of https://github.com/psi4/psi4/pull/2933; but instead of entirely deleting the `ERISieve` class, it makes `ERISieve` inaccessible for use through the following:. - Using `core.ERISieve.build` now throws an `UpgradeHelper` exception when called, as compared to the previous behavior of giving a warning.; - Calling the `ERISieve` constructor C++-side now throws an exception, with the same message as the UpgradeHelper would give. Aside from that, this PR does the same things as https://github.com/psi4/psi4/pull/2933. `ERISieve` is replaced with `TwoBodyAOInt` in all use cases, with adjustments as necessary. Additionally, the new version of v2rdm_casscf is used, which also uses `TwoBodyAOInt` instead of `ERISieve`. ## User API & Changelog headlines; - [X] Calling `core.ERISieve.build` Py-side, or constructing an `ERISieve` object C++-side, now throws an exception. The removed functionalities, specifically `shell_significant`, can be accessed via the construction of a TwoBodyAOInt object. ## Dev notes & details; - [X] The `ERISieve` class in libmints has been made inaccessible, now throwing exceptions when constructed (with an UpgradeHelper Py-side, and a PSIEXCEPTION C++-side).; - [X] Functionalities in `ERISieve` that were not in `TwoBodyAOInt` and were required in the code, were added to `TwoBodyAOInt`.; - [X] The PKJK files have been adjusted as necessary to support the use of `TwoBodyAOInt`. ## TODO; - [X] Remove ERISieve from all other external plugins (currently focusing on v2rdm_casscf). ## Questions; - N/A. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2974:989,access,accessed,989,https://psicode.org,https://github.com/psi4/psi4/pull/2974,1,['access'],['accessed']
Security,"## Description; This PR provides access to T1/T2 python side for other packages using psi4 as a library. Amplitudes will be available for symmetry C1 calculations only as the numpy shape on the T2 matrices can't be set correctly (This is similar to how mintshelper does not provide bindings for SO basis ERIs). All spin combinations of T1/T2 wil be loaded into memory, so you do not want to use this method when there is not enough memory to hold these quantities in core. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] UHF ; - [x] RHF; - [x] ROHF; - [x] Check that nirrep > 1 will raise meaningful errors. ## Checklist; - [x] UHF Test; - [x] RHF Test; - [x] ROHF Test. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1344:33,access,access,33,https://psicode.org,https://github.com/psi4/psi4/pull/1344,1,['access'],['access']
Security,"## Description; This PR replaces several `int *` types in `ccdensity` with `Dimension` or `std::vector<int>` objects as appropriate. In addition to eliminating manual memory management and making the code more readable, easy access to `Dimension` objects will allow for a subsequent PR to construct `Matrix` objects directly, replacing the current `block_matrix` representation of objects. This is PR 2 in an ongoing series to make `ccdensity` compatible with the standard `Matrix` and `Wavefunction` machinery used elsewhere in Psi. Obligatory @lothian notification. ## Checklist; - [x] `cc` tests still pass. ## Status; - [x] Ready for review; - [ ] Ready for merge - to be explicit, Lori advised me **not** to merge until I had manually checked the `cc` tests, since those tests run by perl script",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2438:225,access,access,225,https://psicode.org,https://github.com/psi4/psi4/pull/2438,1,['access'],['access']
Security,"## Description; This PR will expose the `PCM` object in Psi4 out to Python, similarly to #861, but will bring it to fruition within the Python-side SCF iteration scheme. The `PCM` object wraps the PCMSolver library and offers one method: `compute_PCM_terms` to calculate the polarization energy **and** the Fock matrix contributions due to the continuum. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Clean-up the `PCM` object and corresponding sources:; * Forward-declare as much stuff as possible instaed on `include`-ing; * Remove raw pointers in favor of `std::vector`, `Vector` or `std::shared_ptr`; * Use a [scoped `enum`](http://en.cppreference.com/w/cpp/language/enum) instead of an [unscoped `enum`](http://en.cppreference.com/w/cpp/language/enum); - [x] Moved `HF::print_energies()` Py-side; - [x] Mirror changes introduced in #896 ; - [x] Add tests for density-fitted SCFs (thanks @CDSherrill for pointing this out); * **User-Facing for Release Notes**; - [x] Exposing the `PCM` object to Python.; - [x] Restoring PCM functionality with Py-side iterations.; - [ ] Document behavior for gradients (see question). ## Questions; - @andysim and/or @lothian, the file [psi4/libmints/integral.h](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/integral.h#L487) has a comment `/// Want to change the name of this after the PCM dust settles`. Do you remember what was the intention there?; - The electrostatic potential and apparent surface charge vectors are now dimensioned using a `Dimension` object that keeps track of how many cavity points per irrep there are. This is one step to get PCM fully functional with point group symmetry. It seems to me the integrals are always calculated using C1. How can I get them to be calculated with symmetry?; - As (probably not very clearly) noted in the manual, **analytical gradients including PCM are NOT available**. Should there be a stop in the code when such a re",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/878:29,expose,expose,29,https://psicode.org,https://github.com/psi4/psi4/pull/878,1,['expose'],['expose']
Security,"## Description; This PR will expose the `PCM` object in Psi4 out to Python. The `PCM` object wraps the PCMSolver library and offers three methods:; 1. `compute_E` to calculate the polarization energy due to the continuum;; 2. `compute_E_electronic` to calculate the polarization energy due to the continuum, but only using the electron density;; 3. `compute_V` to calculate the PCM potential, which is added on top of the Fock matrix. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Clean-up the `PCM` object and corresponding sources:; * Forward-declare as much stuff as possible instaed on `include`-ing; * Remove raw pointers in favor of `std::vector`, `Vector` or `std::shared_ptr`; * Use a [scoped `enum`](http://en.cppreference.com/w/cpp/language/enum) instead of an [unscoped `enum`](http://en.cppreference.com/w/cpp/language/enum); * **User-Facing for Release Notes**; - [ ] Exposing the `PCM` object to Python. ## Questions; - The initialization of the `PCM` object requires a `BasisSet`. I am unsure what is the best way to grab that Python-side.; - Still regarding initialization, I think it can be done better. Meaning that after reading the user input, the `PCM` object can be initialized by passing the printlevel and the `BasisSet` _under the hood_. @loriab @dgasmith can you point me to existing examples in the codebase? I've looked around in `core.cc` but it's a bit daunting.; - I think this will be useful for the ongoing work on #847 ; - @andysim and/or @lothian, the file [psi4/libmints/integral.h](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/integral.h#L487) has a comment `/// Want to change the name of this after the PCM dust settles`. Do you remember what was the intention there?. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/861:29,expose,expose,29,https://psicode.org,https://github.com/psi4/psi4/pull/861,1,['expose'],['expose']
Security,"## Description; This gets the scfitertopy (scf iterations py-side, pb221, pcm py-side) fully operational again with efp py-side. Also extends pyvib2's Molecule dict (often labeled ""molrec"") init and validation to input parsing. This requires two extensions to molrec – one for efp and one for zmat/variables in geometry. Replaces all the c-side constructors (i.e., create_molecule_from_string, init_with_xyz), replacing them with a unified dict, str, arrays constructor. This branch is presently master (reviewed) + pyvib2 (unreviewed) + scfitertopy (semi-reviewed) + newstuff, all rebased so it doesn't align with anything. After pyvib2 makes it into master, I'll rebase and separate into scfitertopy and newstuff, so it can be readily reviewed. This is just getting the commits posted so I can break psi locally yet again. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Feature1; * **User-Facing for Release Notes**; - [ ] Feature2. ## Questions; - [ ] Question1. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/919:199,validat,validation,199,https://psicode.org,https://github.com/psi4/psi4/pull/919,1,['validat'],['validation']
Security,"## Description; This is a part of *Psi4* porting to Windows (#933). The last element of `array` is `array[n-1]`, so the access of `array[n]` is not correct:; https://github.com/psi4/psi4/blob/62bb956ccfb38cad1bef7e6227aac70ddb1172f7/psi4/src/psi4/libmoinfo/moinfo_base.cc#L281-L285; It is better to use pointer arithmetics: `array + n`. This is not a bug, just it gives a false positive in memory error detection. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix memory error in `MOInfoBase::convert_int_array_to_vector`. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1480:120,access,access,120,https://psicode.org,https://github.com/psi4/psi4/pull/1480,1,['access'],['access']
Security,"## Description; This is a part of *Psi4* porting to Windows (#933). The size `ref_wfn.frzcpi()` is not `nirreps_ref` in `psimrcc-fd-freq2` test:; https://github.com/psi4/psi4/blob/5c0e495bdd3042795d8e39fe250ec153c4d236e9/psi4/src/psi4/libmoinfo/moinfo.cc#L257; It makes `convert_int_array_to_vector` to access invalid memory. In the past, I replaced `nirreps` with `nirreps_ref` to solve another problem #1427 and this one became visible after fixing #1480. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Demonstrate a memory error in `psi::MOInfo::read_mo_spaces`; - [x] Fix the memory error in `psi::MOInfo::read_mo_spaces`. ## Questions; - [x] I'm lacking enough understanding of the code to fix, so just highlighting the problem. Who could help?. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1521:303,access,access,303,https://psicode.org,https://github.com/psi4/psi4/pull/1521,1,['access'],['access']
Security,"## Description; This is a part of *Psi4* porting to Windows (#933). The size of `leftp` is smaller than `doccpi_[h]` in `soscf-ref` tests:; https://github.com/psi4/psi4/blob/be5824d8926dd3e2c12a56944ceec50d1935ca83/psi4/src/psi4/libscf_solver/rohf.cc#L589-L591. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Demonstrate invalid memory access in psi::ROHF::Hx; - [x] Fix invalid memory access in psi::ROHF::Hx. ## Questions; - [x] I don't know how to fix this, just highlighting the problem. Who could help?. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1489:387,access,access,387,https://psicode.org,https://github.com/psi4/psi4/pull/1489,2,['access'],['access']
Security,"## Description; This is my attempt to resolve #1271 . I would like to use this PR to hash out the FC functionality more thoroughly. The questions I have are:. - what is the ideal expected behaviour of `freeze_core True`; - do we want to implement ""previous shells"" freezing, using eg. `freeze_core {1,2,...}`; - how about ""ridiculous"" cases such as Li2+ or F2-, how much hand-holding do we want the code to do and at which point we give up?. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [X] Resolves #1271; - [ ] Clarify . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1350:85,hash,hash,85,https://psicode.org,https://github.com/psi4/psi4/pull/1350,1,['hash'],['hash']
Security,"## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix a filesystem error in `psi.driver.cbs`. Windows does not support `*` in filenames.; - [x] Fix `cbs-parser` test on Windows. ## Questions; - [x] How *Psi4* is suppose to sanitize filenames? Have I missed some function? --> That suppose to be removed in 1.4, so just a quick fix for now. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1442:337,sanitiz,sanitize,337,https://psicode.org,https://github.com/psi4/psi4/pull/1442,1,['sanitiz'],['sanitize']
Security,"## Description; This is part of *Psi4* porting to Windows (#933). The problem was reported in #1255. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix an invalid memory access in `psi::CIWavefunction::sem_iter`; - [x] Fix `fci-tdm` test on Winodows; - [x] Fix `fci-tdm-2` test on Winodows. ## Questions; - [x] This needs an actual fix, but I'm not enough familiar with the method. Who knows how to fix? --> Fixed. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1441:221,access,access,221,https://psicode.org,https://github.com/psi4/psi4/pull/1441,1,['access'],['access']
Security,## Description; This is part of *Psi4* porting to Windows (#933). The problem was reported in #1255. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix invalid memory access in `psi::cceom::get_moinfo`; - [x] Fix `cc46` and `cc47` tests on Windows. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1422:218,access,access,218,https://psicode.org,https://github.com/psi4/psi4/pull/1422,1,['access'],['access']
Security,"## Description; This is part of *Psi4* porting to Windows (#933). There is an invalid memory access at line 209, because `Ca_->colspi()[h]` is smaller than `nalphapi_[h]`:; https://github.com/psi4/psi4/blob/ba98fb72ab73350a613ae96b56d1d4c6074c2ae9/psi4/src/psi4/libtrans/integraltransform_sort_so_tei.cc#L201-L217. I have added an asset to prove that. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Prove a bug in `psi::IntegralTransform::presort_so_tei`; - [x] Fix the bug in `psi::IntegralTransform::presort_so_tei`. ## Questions; - [x] Who knows how to fix this? -- https://github.com/raimis/psi4/pull/4. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1469:93,access,access,93,https://psicode.org,https://github.com/psi4/psi4/pull/1469,1,['access'],['access']
Security,"## Description; This is part of *Psi4* porting to Windows (#933). `EaT_RHF.cc` and `ET_RHF.cc` contain incompatible declarations of `psi::cctriples::thread_data`. During compilation, templates (i.e. `std::vector<psi::cctriples::thread_data>`) are generated once and reused, while memory access instructions to `psi::cctriples::thread_data` are generate at each translation unit. That results into an overflow:; ```; ==29447==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x60800007a380 at pc 0x7fa994502627 bp 0x7fffc3cb6560 sp 0x7fffc3cb6558; WRITE of size 4 at 0x60800007a380 thread T0; #0 0x7fa994502626 in psi::cctriples::EaT_RHF() /home/raimis/prj/psi4.git/psi4/src/psi4/cc/cctriples/EaT_RHF.cc:206; #1 0x7fa993ee2cec in psi::cctriples::cctriples(std::shared_ptr<psi::Wavefunction>, psi::Options&) /home/raimis/prj/psi4.git/psi4/src/psi4/cc/cctriples/triples.cc:154; #2 0x7fa993dfd890 in psi::cclambda::CCLambdaWavefunction::compute_energy() /home/raimis/prj/psi4.git/psi4/src/psi4/cc/cclambda/cclambda.cc:324; #3 0x7fa9937cfa84 in py_psi_cclambda(std::shared_ptr<psi::Wavefunction>) /home/raimis/prj/psi4.git/psi4/src/core.cc:382; #4 0x7fa9938b8a3c in std::shared_ptr<psi::Wavefunction> pybind11::detail::argument_loader<std::shared_ptr<psi::Wavefunction> >::call_impl<std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::Wavefunction> (*&)(std::shared_ptr<psi::Wavefunction>), 0ul, pybind11::detail::void_type>(std::shared_ptr<psi::Wavefunction> (*&)(std::shared_ptr<psi::Wavefunction>), std::integer_sequence<unsigned long, 0ul>, pybind11::detail::void_type&&) /home/raimis/opt/conda/envs/psi4/include/python3.6m/pybind11/cast.h:1874; #5 0x7fa9938a441c in std::enable_if<!std::is_void<std::shared_ptr<psi::Wavefunction> >::value, std::shared_ptr<psi::Wavefunction> >::type pybind11::detail::argument_loader<std::shared_ptr<psi::Wavefunction> >::call<std::shared_ptr<psi::Wavefunction>, pybind11::detail::void_type, std::shared_ptr<psi::Wavefunction> (*&)(std::shared_ptr<psi::Wa",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1438:287,access,access,287,https://psicode.org,https://github.com/psi4/psi4/pull/1438,1,['access'],['access']
Security,"## Description; This is part of my summer work that I'm submitting as a PR now. These changes unify exchange and correlation functionals into a single list of functionals, which improves code readability and removes the XC functional special case (see below). ## User API & Changelog headlines; - [ ] Changes the Python API surface for the Superfunctional class: A complete list of functionals in a superfunctional can be accessed with `functionals()`. `add_x_functional(fnctl)` and `add_c_functional(fnctl)` were removed in favor of `add_functional(fnctl)`. Also removes `is_libxc_func()` since there is now no distinction. ## Dev notes & details; - [ ] The base `Functional` class now has a `kind()` field. When implemented in the `LibXCFunctional`, this allows one to get the kind of functional from LibXC -- Now, LibXC is treated as the single source of truth for the kind of functional. Accordingly, constants are [imported from LibXC to define these types.](https://github.com/psi4/psi4/blob/b40aa4fdce0996db38bdeafa454af8fb1cef136d/psi4/src/psi4/libfunctional/functional.h#L40-L43) A field is added for ""kinetic"" functionals for future-proofing, but error(s) will be encountered trying to use them.; - [ ] The inheritance structure of the `Functional` class was improved by moving LibXC specific code into the LibXCFunctional class; - [ ] The `Superfunctional` class was modified to have only a single list of functionals, as opposed to a separate list of X and C functionals. This removed the need for special-case behavior for XC functionals -- See [here](https://github.com/psi4/psi4/blob/1813c0c31e3049511f558a78db15bb2290257650/psi4/src/psi4/libfunctional/superfunctional.cc#L223) and [here](https://github.com/psi4/psi4/blob/1813c0c31e3049511f558a78db15bb2290257650/psi4/driver/procrouting/dft/superfunctionals.py#L90-L92); - [ ] Unused variables and definitions were cleaned up. ## Questions; - [ ] I have all but removed `libxc_xc_func_`... Is there any use for this that I can't think ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3203:422,access,accessed,422,https://psicode.org,https://github.com/psi4/psi4/pull/3203,1,['access'],['accessed']
Security,"## Description; This produces a docs build with no warnings or errors, either overt (`make html -W`), external links (`make linkcheck`), or internal links (`make html -n`). requires a qcel docs update. hopefully this will provide a clean docs base moving forward. This PR is the controversial part of the docs technical refresh. I think there was some technical debt left over from the 2016 inversion in the module structure of the driver. What I think was happening was that the `psi4/driver/driver.py` was the nexus, and any wrappers or utilites that it happened to import became the API. The folder psi4/driver didn't really function as a module, and any `psi4.driver` was referring to driver.py, not psi4/driver/. Then for psithon, a few extras like frac got added in in the import preamble. Only problem with the structure (besides ppl who know python finding it irregular) is that it made some functions in the driver impossible to access (i.e., run `help()` on) and link to in the docs. https://towardsdatascience.com/whats-init-for-me-d70a312da583 outlines a few strategies for structuring python packages. There's the mostly-toplevel strategy of numpy (https://github.com/numpy/numpy/blob/main/numpy/__init__.py#L150-L156 and https://github.com/numpy/numpy/blob/main/numpy/core/__init__.py#L72-L90) and the subpackage strategy of scipy (https://github.com/scipy/scipy/blob/master/scipy/__init__.py and https://github.com/scipy/scipy/blob/master/scipy/optimize/__init__.py#L400-L423). I don't have a clear vision on how to do the driver right for psi4, but i've followed the numpy approach of both building up the top-level deliberately with `__all__` and building out the namespaced structure (`from . import x`), and it's doing what the docs linking needs, and I think it's more rational and provides much better coverage for the API docs. Also allows the only difference btwn psithon and psiapi to be whether `core.*` are at top-level. The only tests that have needed change are ""cookbook"" ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2166:938,access,access,938,https://psicode.org,https://github.com/psi4/psi4/pull/2166,1,['access'],['access']
Security,"## Description; This pull request adresses https://github.com/psi4/psi4/issues/1116 :. 1.) Split Prop into ; - - Prop: All One Electron convenience accessors and setters and getters, but no access to globals at all. Prop is now only a convenience class, which sets up a few nice accessors.; - - TaskListComputer: This class handles all the compute baseclass elements of Prop, adding, removing tasks from a task queue and computing them. It's very low complexity.; This was done to allow Prop to be easily inheritable without having to implement all the Taskqueue things, which honestly did not have a lot do with Prop itself. This commit makes using Prop inside the code a ton easier.; This was done in commit ; 528c0d7 : https://github.com/psi4/psi4/commit/528c0d719e8bb49b12652417b00db506241a4bee. 2.) Split OEProp in three distinct classes:; - - MultipolePropCalc: This class calculates all multipole properties and mo extents in commit: ; 59005ee https://github.com/psi4/psi4/commit/59005eed1c0bc8b893927284c31386eb4b715f1e; - - PopulationAnalysisCalc: This class calculates Mulliken / Loewdin charges and Bond Orders in commit: a6caee7 https://github.com/psi4/psi4/commit/a6caee7091afc6b0e8071ef0d077f93fcb6c9370; - - ESPPropCalc: This class allows calculation of fields on Grids in commit: ; 325149b https://github.com/psi4/psi4/commit/325149b31751b629486f0478cc5cfe1ee1ec9fb1. The rest of the commits are mostly fixups and linking up the three new classes to the old completely unchanged OEProp class, which now does not calculation itself. Also I implemented an in-memory routine calculating grid properties based on a grid, which was passed on.; The three new classes do not touch any global and no environment. They mostly exist without data storage for the grids, all functions have explicit (and mostly shared pointer return values).; Their complete setup is explicit. All environment variables are only set by OEProp. The reason is again: This allows to the new helpers to be used directl",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1133:148,access,accessors,148,https://psicode.org,https://github.com/psi4/psi4/pull/1133,3,['access'],"['access', 'accessors']"
Security,"## Description; This separates all the additional Molecule work, including py-side parsing, out from the py-side SCF/PCM/EFP PR. I recommend this go into 1.2 so that 1.2 Mol isn't half-baked. This **does not switch Mol parsing py-side**. I can, but that's an extra step to pull out of py-side SCF/PCM/EFP and a more drastic change to Psi. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `qcdb.Molecule` constructor learned to take, str (psi4, xyz, xyz+, psi4+), dict, or arrays and pass things on to `from_string`, `from_dict`, or `from_arrays` accordingly. In fact, these fns are simply different entry points. `from_arrays` validates arguments then calls `from_dict`. `from_string` parses into arrays then calls `from_arrays`. The three `from_*` methods are also available for `psi4.core.Molecule` (completely bypassing `create_molecule_from_string`), but the primary c-side Mol constructor in molutil.py is still using `c_m_f_s`.; - [x] py-side & c-side Molecule & CoordEntry classes learned `A` or `mass_number`. Pretty much this is a pass-through/holder slot for info populated in PQ Mol JSON. `set_mass` voids `A`.; - [x] `*.Molecule` learned `add_unsettled_atom` for adding `ZMatrixEntry`s analogous to `add_atom` `CartesianEntry`s for the zmat extension.; - [x] `qcdb.BasisSet.pyconstruct` learned to act on anything it can make a `qcdb.Molecule` of: Mol, str, or dict. It also learned to return BasisSet object or dict based on `return_dict` value, not on type of molecule-ish entity passed in.; - [x] changed some output unit labels to be more specific or use known abbr; - [x] In keywords (`read_options`), remove global `UNITS` since unused and covered by Mol parser; - [x] Write `.hess`, `.normal_modes_molden`, and a proto-JSON for vib/thermo analysis py-side. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.ht",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/965:693,validat,validates,693,https://psicode.org,https://github.com/psi4/psi4/pull/965,1,['validat'],['validates']
Security,"## Description; Ticks off an item on #2486 and #2477 by allowing ""TD-DFT"" to be a way to access TD-DFT psivars. As far as I'm aware, TD-DFT psivars are now as we want them. ## Checklist; - [x] `tdscf` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2506:89,access,access,89,https://psicode.org,https://github.com/psi4/psi4/pull/2506,1,['access'],['access']
Security,"## Description; Tries to set the correct density label and solves some bugs with writing the incorrect densities. Relates issue: #1272 . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] deducts density label (`|SCF|MP2|CC|CI|DCT`) for the FCHK file from the method.; - [x] allows PSI4 method names as density label with option `strict_label=False`; - [x] related issue [1886](https://github.com/psi4/psi4/issues/1886) is handled within the FCHK driver.; - [x] new pytests for FCHK files that check if the correct SCF density and SCF orbital coefficients is set.; - [x] No densities available from `occ` gradients. FCHK driver exists with a warning.; - [x] DCT, DFOCC densities available; - [x] exposes `Vector.copy()` to python; - [x] better ECP support. Fixes #2021.; - [x] adds a 'compare_fchkfiles` function. ## Checklist; - [x] docs changed to reflect that the high-level `fchk()` should be called (instead of `FCHKWriter()` directly); - [x] new test passes; - [x] manual inspect of various fchk files using this (ugly) script: https://gist.github.com/hokru/f1b00a87665ac345415b4ad3e0006f1d. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1884:743,expose,exposes,743,https://psicode.org,https://github.com/psi4/psi4/pull/1884,1,['expose'],['exposes']
Security,"## Description; Update cc-pVXZ (D through 5) for Li, Be, Na, and Mg, and add cc-pwCVXZ (D through 5) for Li, Be, Na and Mg with values from Prascher, D.E. Woon, K.A. Peterson, T.H. Dunning, Jr., A.K. Wilson, Theor. Chem. Acc. 128, 69 (2011), accessed from http://tyr0.chem.wsu.edu/~kipeters/basissets/alkal-nr.html. Closes gh-727. Add cc-pwCVXZ-RI (D through 5) for Li, Be, Na and Mg with values from J. G. Hill and K. A Peterson, ""Correlation consistent basis sets for explicitly correlated wavefunctions: Valence and core-valence basis sets for Li, Be, Na, and Mg"" Phys. Chem. Chem. Phys. (2010). The values were accessed from http://www.rsc.org/suppdata/cp/c0/c0cp00020e/c0cp00020e.pdf. Update cc-pV5Z-RI for Na from Hill and Peterson (2010). ## Todos. - [x] Add RI; - [x] Check locally against molpro.; - [x] Fix cc-pwCV5Z for Na and Mg. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/728:242,access,accessed,242,https://psicode.org,https://github.com/psi4/psi4/pull/728,2,['access'],['accessed']
Security,## Description; Updates the Psi4 interface to the MolSSI QCSchema using canonical QCElemental objects. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Begins deprecation of the old JSON command line.; - [x] Validates and runs Psi4 via QCSchema conventions and objects.; - [x] Allows both JSON and Msgpack CLI execution. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1723:257,Validat,Validates,257,https://psicode.org,https://github.com/psi4/psi4/pull/1723,1,['Validat'],['Validates']
Security,"## Description; While working on some more DF technology, I discovered a bug when trying to load using `Matrix::SaveType::Full`. The code assumed the matrix was square. One of the things this PR does is have the code work when that assumption fails. But the bigger problem is that `Matrix::SaveType::Full` is Psi3 era tech that shouldn't exist anymore. That SaveType reads/writes a matrix _where all elements of the wrong symmetry are replaced with zeros_. The better solution is to use `Matrix::SaveType::SubBlocks`, where those zero's are neither written nor read. Accordingly, I'm deprecating the Full save in favor of SubBlocks save. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] `Matrix::SaveType::Full` is deprecated; - [x] Fixed a correctness bug with loading from `Matrix::SaveType::Full`. ## Checklist; - [x] quicktests, standard stuite, and dfmp2 all pass; - [ ] I didn't bother adding a new test that I actually fixed the bug, since I accessed the buggy code through a method that's going to be deprecated anyways. Any objections?. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2092:1007,access,accessed,1007,https://psicode.org,https://github.com/psi4/psi4/pull/2092,1,['access'],['accessed']
Security,"## Description; Yet another PR to get densities properly accessible on the wavefunction. This one sets the alpha and beta densities for the DF and CD methods in `dfocc` that support gradients - we should be able to close #1952. Because this is `dfocc`, I also got in some code cleanup as well. Some of the CD methods claim to have working one-electron properties, but not gradients, but there's no elaboration. To be cautious, I haven't set densities for those methods. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Exposes `dfocc` densities for methods with gradients. ## Checklist; - [x] `ctest -L ^dfo -j4`, `ctest -L ^dfm -j4`, and `ctest -L ^dfc -j4` all pass. I'm using that as a proxy for running all dfocc tests. Sadly, those aren't known. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1964:57,access,accessible,57,https://psicode.org,https://github.com/psi4/psi4/pull/1964,2,"['Expose', 'access']","['Exposes', 'accessible']"
Security,"## Description; `RelPotentialInt` and associated integral classes now expose all four W integral types instead of just the W0 integrals. This PR seems way too easy. @brianz98, please let me know if there are issues. Obligatory @fevangelista and @dnascimento13 pings. ## User API & Changelog headlines. - [x] `RelPotentialInt` and associated integral classes now expose all four W integral types instead of just the W0 integrals. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Changes `RelPotentialInt` to expose W0, Wx, Wy, and Wz integrals. ## Questions; - [x] Any objections to changing an existing integral type rather than creating a new one?; - [x] Any documentation edits needed?; - [x] Do any of the users need the derivative integrals?. ## Checklist; - [ ] Are any tests necessary?; - [x] `ctest -L x2c` passes, in addition to standard tests. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3174:70,expose,expose,70,https://psicode.org,https://github.com/psi4/psi4/pull/3174,3,['expose'],['expose']
Security,"## Description; `Slice` class is used in Forte. However, recent modifications blinds `Slice` from plugins.; This PR expose `Slice` class as `PSI_API` to be called in plugins. ## Modification; - [x] Added `PSI_API` flag for class `Slice`. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1028:116,expose,expose,116,https://psicode.org,https://github.com/psi4/psi4/pull/1028,1,['expose'],['expose']
Security,"## Description; `adcc` version of #2462, according to standard #2486. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Consolidate excitation energy/property variable names; - [x] Update tests:; - [x] port to pytest; - [x] test all access patterns; - [x] port PE-ADC tests; - [x] Update docs. ## Questions; - [x] Do I need to add the same kind of ""commented out"" lines as in #2462, @JonathonMisiewicz?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2513:290,access,access,290,https://psicode.org,https://github.com/psi4/psi4/pull/2513,1,['access'],['access']
Security,"## Description; `c1_deep_copy` sent `nsopi_` to `Wavefunction::epsilon_subset_helper` in place of the number of occupied orbitals. When `nsopi_[h] > nmopi_[h]` for some `h`, this led to accessing out-of-bounds memory. No more. ## Checklist; - [x] `fnocc7` (which alerted us to this issue) passes again. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2692:186,access,accessing,186,https://psicode.org,https://github.com/psi4/psi4/pull/2692,1,['access'],['accessing']
Security,"## Description; closes #973 . ## Todos; * **User-Facing for Release Notes**; - [x] setting `stability_analysis = ""FOLLOW""` will cause a `ValidationError` when used with `REFERENCE` that is not `UHF`; - [x] SCF docs have been updated to include a note that follow is only implemented for UHF, and the stability analysis methods table has been expanded to include a column showing valid `STABILITY_ANALYSIS` values for each reference. #973 Contained the report that RHF stability analysis = follow would silently check for instabilities and then continue on doing nothing about them, and a request to implement FOLLOW for RHF/ROHF. This PR fixes the first part, The feature request has been added under a separate issue (#1005). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1006:137,Validat,ValidationError,137,https://psicode.org,https://github.com/psi4/psi4/pull/1006,1,['Validat'],['ValidationError']
Security,"## Description; non-final PR while we work out merge order. this is a docs build with no warnings or errors, either overt (`make html -W`), external links (`make linkcheck`), or internal links (`make html -n`). requires a qcel docs update. hopefully this will provide a clean docs base moving forward. this would be non-controversial except that I think there was some technical debt left over from the 2016 inversion in the module structure of the driver. What I think was happening was that the `psi4/driver/driver.py` was the nexus, and any wrappers or utilites that it happened to import became the API. The folder psi4/driver didn't really function as a module. Then for psithon, a few extras like frac got added in in the import preamble. Only problem with the structure (besides ppl who know python thinking it a little irregular) is that it made some functions in the driver impossible to access (i.e., run `help()` on) and link to in the docs. https://towardsdatascience.com/whats-init-for-me-d70a312da583 outlines a few strategies for structuring python packages. There's the mostly-toplevel strategy of numpy (https://github.com/numpy/numpy/blob/main/numpy/__init__.py#L150-L156 and https://github.com/numpy/numpy/blob/main/numpy/core/__init__.py#L72-L90) and the subpackage strategy of scipy (https://github.com/scipy/scipy/blob/master/scipy/__init__.py and https://github.com/scipy/scipy/blob/master/scipy/optimize/__init__.py#L400-L423). I don't have a clear vision on how to do the driver right for psi4, but i've followed the numpy approach of both building up the top-level deliberately with `__all__` and building out the namespaced structure (`from . import x`), and it's doing what the docs linking needs, and I think it's more rational and provides much better coverage for the API docs. Also allows the only difference btwn psithon and psiapi to be whether `core.*` are at top-level. The only tests that have needed change are ""cookbook"" types that were outlining driver code in ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2162:897,access,access,897,https://psicode.org,https://github.com/psi4/psi4/pull/2162,1,['access'],['access']
Security,"## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Fixes a crash when attempting DFMP2 on systems with too few electrons to support MP2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Massively simplified the DFMP2 validation logic. ## Checklist; - [x] dfmp2 tests pass; - [x] Turned the bug report into a new test case. (Thanks for a clean one, Susi.). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2977:530,validat,validation,530,https://psicode.org,https://github.com/psi4/psi4/pull/2977,1,['validat'],['validation']
Security,"(#836); - One-electron integrals from LibMints now properly apply external potentials so that external potentials are now applied evenly throughout the code base (#844).; - Psi4 is now buildable with Ninja (#794); - Begins to deprecate `char *` from Psi4 (#780); - Pragma header for diagnostics and API's (#774); - Improved C++/Python binding docstrings (#761); - Clang and YAPF configuration files (#753); - Improved parallel and routine timing information in Psi4 (#743); - SCF can now be run in symmetry for post-SCF modules that do not use symmetry (#737); - Psi4 now compiles much faster (~3 minutes with LLVM on 4 cores) (#736); - NumPy views of Psi4 objects are now correctly reference tracked in cases where C++ returns a new matrix. `arr = wfn.Ca_subset(""AO"", ""OCC"").nph` now no longer give noise. (#736); - Basis PyParsing is now simpler and code duplication has been removed (#734 ); - Update cc-pVXZ and add cc-pwCVXZ for Li, Be, Na, Mg (#728); - MCSCF orbital semicanonicalization (#722); - C++ Options are now exposed to Python (#720); - Intermediate sub-system and partial-basis energies from `nbody` wrapped exported as psivars (#952); - Better start/stop/elapsed time printing. # Documentation; - Additional Documentation Information (#787). # Miscelaneous; - Added N to ANO0 basis set (#825). # Bug Fixes; - Accidental signed integer overflow when using extremely low memory in DFJK; - wB97X had an incorrect range-seperation parameter. This is now fixed. Note that this did not effect wB97X-D.; - Restricted-irrep finite-difference Hessians were only returning the totally symmetric portion of the Hessian ([in #834](https://github.com/psi4/psi4/pull/834/commits/67f536c720abf31040eaa933a12e26c207100b69)); - Analytic HF Hessians were wrong under particular circumstances (#903); - A bug causing IRCs to converge to the initial transition state was fixed (#882). # Conda changes since v1.1; - MKL linked dynamically through free Anaconda-provided `mkl_rt.so` rather than statically",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/959:5943,expose,exposed,5943,https://psicode.org,https://github.com/psi4/psi4/issues/959,1,['expose'],['exposed']
Security,"(and hence all globals access) resists giving the same key to a scalar and an array variable. This check is not in place for C-side Wfn, but shouldn't be a problem given our habit of labeling with E/G/H, etc.; - **ALERT** this generates oodles of `FutureWarning`s b/c to keep this PR focussed on the substantive changes, I haven't updated the fn names w/i the codebase. That will be a separate PR hard after this gains approval, and should probably be merged in sequence, lest users go batty. I've worked on other topics beyond this one, and I'm confident the deprecation warnings are allowing the unhindered use of old syntax.; - [x] Deprecation Warnings look like the below in PsiAPI and PSIthon modes, respectively. For the latter, I had to suppress printing of offending line b/c it was very wrong (usually part of the LGPL license).; ```; psiapi.py:8: FutureWarning: Using `psi4.core.get_variable` instead of `psi4.core.variable` (or ; `psi4.core.scalar_variable` for scalar variables only) is deprecated, and in 1.4 it will stop working. print(psi4.get_variable('current energy')); ```; ```; Using `psi4.core.get_variable` instead of `psi4.core.variable` (or `psi4.core.scalar_variable` for scalar variables only) is deprecated, and in 1.4 it will stop working. ```. ## Breaking Changes; - Not many, as there's heavy use of deprecation; - Any access that expected `Wfn.variables` to return only scalars will now be surprised to get all types. Easy to replace with `Wfn.get_scalar_variables`.; - Any code that wrote to Wfn array directly in non-UC (e.g., `wfn.variables_[""lower or mixed-case var""] = val`) needs to be changed to `""UPPER-CASE VAR""` or to `wfn.set_scalar_variables`; - Any code that tries to access a non-existent global will now throw, hence the fixes to the driver and test cases you see here. ## Checklist; - [x] Tests added for any new features; - [x] quick tests pass and I've run a full tests with this+other commits. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1393:2124,access,access,2124,https://psicode.org,https://github.com/psi4/psi4/pull/1393,2,['access'],['access']
Security,", 'REFERENCE'), base_wfn); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . reference = 'RHF', ref_wfn = <psi4.core.Wavefunction object at 0x7f6fc473c360>, functional = None. def scf_wavefunction_factory(reference, ref_wfn, functional=None):; """"""Builds the correct wavefunction from the provided information; """"""; ; if core.has_option_changed(""SCF"", ""DFT_DISPERSION_PARAMETERS""):; modified_disp_params = core.get_option(""SCF"", ""DFT_DISPERSION_PARAMETERS""); else:; modified_disp_params = None; ; # Figure out functional; if functional is None:; superfunc, disp_type = dft_functional.build_superfunctional(core.get_option(""SCF"", ""DFT_FUNCTIONAL"")); elif isinstance(functional, core.SuperFunctional):; superfunc = functional; disp_type = False; elif isinstance(functional, (str, unicode)):; superfunc, disp_type = dft_functional.build_superfunctional(functional); else:; raise ValidationError(""Functional %s is not understood"" % str(functional)); ; # Build the wavefunction; core.prepare_options_for_module(""SCF""); if reference in [""RHF"", ""RKS""]:; > wfn = core.RHF(ref_wfn, superfunc); E RuntimeError: ; E Fatal Error: You must add; E ; E 	symmetry c1; E ; E to the molecule{} block to run the PCM code.; E Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsipcm/psipcm.cc on line: 104; E The most recent 5 function calls were:; E ; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/li",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:42070,Validat,ValidationError,42070,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['Validat'],['ValidationError']
Security,", 'REFERENCE'), base_wfn); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . reference = 'RHF', ref_wfn = <psi4.core.Wavefunction object at 0x7f6fc4a59eb8>, functional = None. def scf_wavefunction_factory(reference, ref_wfn, functional=None):; """"""Builds the correct wavefunction from the provided information; """"""; ; if core.has_option_changed(""SCF"", ""DFT_DISPERSION_PARAMETERS""):; modified_disp_params = core.get_option(""SCF"", ""DFT_DISPERSION_PARAMETERS""); else:; modified_disp_params = None; ; # Figure out functional; if functional is None:; superfunc, disp_type = dft_functional.build_superfunctional(core.get_option(""SCF"", ""DFT_FUNCTIONAL"")); elif isinstance(functional, core.SuperFunctional):; superfunc = functional; disp_type = False; elif isinstance(functional, (str, unicode)):; superfunc, disp_type = dft_functional.build_superfunctional(functional); else:; raise ValidationError(""Functional %s is not understood"" % str(functional)); ; # Build the wavefunction; core.prepare_options_for_module(""SCF""); if reference in [""RHF"", ""RKS""]:; > wfn = core.RHF(ref_wfn, superfunc); E RuntimeError: ; E Fatal Error: You must add; E ; E 	symmetry c1; E ; E to the molecule{} block to run the PCM code.; E Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsipcm/psipcm.cc on line: 104; E The most recent 5 function calls were:; E ; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/li",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:30598,Validat,ValidationError,30598,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['Validat'],['ValidationError']
Security,", 'REFERENCE'), base_wfn); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . reference = 'RHF', ref_wfn = <psi4.core.Wavefunction object at 0x7f6fc4a5c830>, functional = None. def scf_wavefunction_factory(reference, ref_wfn, functional=None):; """"""Builds the correct wavefunction from the provided information; """"""; ; if core.has_option_changed(""SCF"", ""DFT_DISPERSION_PARAMETERS""):; modified_disp_params = core.get_option(""SCF"", ""DFT_DISPERSION_PARAMETERS""); else:; modified_disp_params = None; ; # Figure out functional; if functional is None:; superfunc, disp_type = dft_functional.build_superfunctional(core.get_option(""SCF"", ""DFT_FUNCTIONAL"")); elif isinstance(functional, core.SuperFunctional):; superfunc = functional; disp_type = False; elif isinstance(functional, (str, unicode)):; superfunc, disp_type = dft_functional.build_superfunctional(functional); else:; raise ValidationError(""Functional %s is not understood"" % str(functional)); ; # Build the wavefunction; core.prepare_options_for_module(""SCF""); if reference in [""RHF"", ""RKS""]:; > wfn = core.RHF(ref_wfn, superfunc); E MemoryError: std::bad_alloc. /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: MemoryError; _____________________________________________________________ test_psi4_scfproperty ______________________________________________________________. def test_psi4_scfproperty():; """"""scf-property""""""; #! UFH and B3LYP cc-pVQZ properties for the CH2 molecule.; ; with open('grid.dat', 'w') as handle:; handle.write(""""""\; 0.0 0.0 0.0; 1.1 1.3 1.4; """"""); ; ch2 = psi4.geometry(""""""; 0 3; c; h 1 b1; h 1 b1 2 a1; ; b1 = 1.0; a1 = 125.0; """"""); ; # Get a reasonable guess, to save some iterations; psi4.set_options({; ""scf_type"": ""pk"",; ""basis"": ""6-31G**"",; ""e_convergence"": 8,; ""docc"": [2, 0, 0, 1],; ""socc"": [1, 0, 1, 0],; ""reference"": ""uhf""}); ; ch2.update_geometry(); assert psi4.compare_value",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:38854,Validat,ValidationError,38854,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['Validat'],['ValidationError']
Security,", 'REFERENCE'), base_wfn); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . reference = 'RHF', ref_wfn = <psi4.core.Wavefunction object at 0x7f6fc4b93fc0>, functional = None. def scf_wavefunction_factory(reference, ref_wfn, functional=None):; """"""Builds the correct wavefunction from the provided information; """"""; ; if core.has_option_changed(""SCF"", ""DFT_DISPERSION_PARAMETERS""):; modified_disp_params = core.get_option(""SCF"", ""DFT_DISPERSION_PARAMETERS""); else:; modified_disp_params = None; ; # Figure out functional; if functional is None:; superfunc, disp_type = dft_functional.build_superfunctional(core.get_option(""SCF"", ""DFT_FUNCTIONAL"")); elif isinstance(functional, core.SuperFunctional):; superfunc = functional; disp_type = False; elif isinstance(functional, (str, unicode)):; superfunc, disp_type = dft_functional.build_superfunctional(functional); else:; raise ValidationError(""Functional %s is not understood"" % str(functional)); ; # Build the wavefunction; core.prepare_options_for_module(""SCF""); if reference in [""RHF"", ""RKS""]:; > wfn = core.RHF(ref_wfn, superfunc); E RuntimeError: ; E Fatal Error: You must add; E ; E 	symmetry c1; E ; E to the molecule{} block to run the PCM code.; E Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsipcm/psipcm.cc on line: 104; E The most recent 5 function calls were:; E ; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/li",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:13097,Validat,ValidationError,13097,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['Validat'],['ValidationError']
Security,", 'REFERENCE'), base_wfn); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . reference = 'RHF', ref_wfn = <psi4.core.Wavefunction object at 0x7f6fc4be7678>, functional = None. def scf_wavefunction_factory(reference, ref_wfn, functional=None):; """"""Builds the correct wavefunction from the provided information; """"""; ; if core.has_option_changed(""SCF"", ""DFT_DISPERSION_PARAMETERS""):; modified_disp_params = core.get_option(""SCF"", ""DFT_DISPERSION_PARAMETERS""); else:; modified_disp_params = None; ; # Figure out functional; if functional is None:; superfunc, disp_type = dft_functional.build_superfunctional(core.get_option(""SCF"", ""DFT_FUNCTIONAL"")); elif isinstance(functional, core.SuperFunctional):; superfunc = functional; disp_type = False; elif isinstance(functional, (str, unicode)):; superfunc, disp_type = dft_functional.build_superfunctional(functional); else:; raise ValidationError(""Functional %s is not understood"" % str(functional)); ; # Build the wavefunction; core.prepare_options_for_module(""SCF""); if reference in [""RHF"", ""RKS""]:; > wfn = core.RHF(ref_wfn, superfunc); E RuntimeError: ; E Fatal Error: You must add; E ; E 	symmetry c1; E ; E to the molecule{} block to run the PCM code.; E Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsipcm/psipcm.cc on line: 104; E The most recent 5 function calls were:; E ; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/li",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:20398,Validat,ValidationError,20398,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['Validat'],['ValidationError']
Security,", 'REFERENCE'), base_wfn); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . reference = 'RHF', ref_wfn = <psi4.core.Wavefunction object at 0x7f6fc4ccd780>, functional = None. def scf_wavefunction_factory(reference, ref_wfn, functional=None):; """"""Builds the correct wavefunction from the provided information; """"""; ; if core.has_option_changed(""SCF"", ""DFT_DISPERSION_PARAMETERS""):; modified_disp_params = core.get_option(""SCF"", ""DFT_DISPERSION_PARAMETERS""); else:; modified_disp_params = None; ; # Figure out functional; if functional is None:; superfunc, disp_type = dft_functional.build_superfunctional(core.get_option(""SCF"", ""DFT_FUNCTIONAL"")); elif isinstance(functional, core.SuperFunctional):; superfunc = functional; disp_type = False; elif isinstance(functional, (str, unicode)):; superfunc, disp_type = dft_functional.build_superfunctional(functional); else:; raise ValidationError(""Functional %s is not understood"" % str(functional)); ; # Build the wavefunction; core.prepare_options_for_module(""SCF""); if reference in [""RHF"", ""RKS""]:; > wfn = core.RHF(ref_wfn, superfunc); E RuntimeError: ; E Fatal Error: You must add; E ; E 	symmetry c1; E ; E to the molecule{} block to run the PCM code.; E Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsipcm/psipcm.cc on line: 104; E The most recent 5 function calls were:; E ; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/li",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:23529,Validat,ValidationError,23529,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['Validat'],['ValidationError']
Security,", 'REFERENCE'), base_wfn); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . reference = 'RHF', ref_wfn = <psi4.core.Wavefunction object at 0x7f6fc4cd6b48>, functional = None. def scf_wavefunction_factory(reference, ref_wfn, functional=None):; """"""Builds the correct wavefunction from the provided information; """"""; ; if core.has_option_changed(""SCF"", ""DFT_DISPERSION_PARAMETERS""):; modified_disp_params = core.get_option(""SCF"", ""DFT_DISPERSION_PARAMETERS""); else:; modified_disp_params = None; ; # Figure out functional; if functional is None:; superfunc, disp_type = dft_functional.build_superfunctional(core.get_option(""SCF"", ""DFT_FUNCTIONAL"")); elif isinstance(functional, core.SuperFunctional):; superfunc = functional; disp_type = False; elif isinstance(functional, (str, unicode)):; superfunc, disp_type = dft_functional.build_superfunctional(functional); else:; raise ValidationError(""Functional %s is not understood"" % str(functional)); ; # Build the wavefunction; core.prepare_options_for_module(""SCF""); if reference in [""RHF"", ""RKS""]:; > wfn = core.RHF(ref_wfn, superfunc); E RuntimeError: ; E Fatal Error: You must add; E ; E 	symmetry c1; E ; E to the molecule{} block to run the PCM code.; E Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsipcm/psipcm.cc on line: 104; E The most recent 5 function calls were:; E ; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/li",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:7588,Validat,ValidationError,7588,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['Validat'],['ValidationError']
Security,", 'REFERENCE'), base_wfn); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . reference = 'RHF', ref_wfn = <psi4.core.Wavefunction object at 0x7f6fef0343b8>, functional = None. def scf_wavefunction_factory(reference, ref_wfn, functional=None):; """"""Builds the correct wavefunction from the provided information; """"""; ; if core.has_option_changed(""SCF"", ""DFT_DISPERSION_PARAMETERS""):; modified_disp_params = core.get_option(""SCF"", ""DFT_DISPERSION_PARAMETERS""); else:; modified_disp_params = None; ; # Figure out functional; if functional is None:; superfunc, disp_type = dft_functional.build_superfunctional(core.get_option(""SCF"", ""DFT_FUNCTIONAL"")); elif isinstance(functional, core.SuperFunctional):; superfunc = functional; disp_type = False; elif isinstance(functional, (str, unicode)):; superfunc, disp_type = dft_functional.build_superfunctional(functional); else:; raise ValidationError(""Functional %s is not understood"" % str(functional)); ; # Build the wavefunction; core.prepare_options_for_module(""SCF""); if reference in [""RHF"", ""RKS""]:; > wfn = core.RHF(ref_wfn, superfunc); E RuntimeError: ; E Fatal Error: You must add; E ; E 	symmetry c1; E ; E to the molecule{} block to run the PCM code.; E Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsipcm/psipcm.cc on line: 104; E The most recent 5 function calls were:; E ; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/li",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:26957,Validat,ValidationError,26957,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['Validat'],['ValidationError']
Security,"/"", return_wfn=True); print(""converting energy ...""); kcal_energy = energy * psi4.constants.hartree2kcalmol; print(""energy {:.2f} kcal/mol"".format(kcal_energy)); ```; Specifically the output I get is ; ```; set output file path; create molecule...; calculate energy...; Segmentation fault: 11; ```; I tried to attach the .dat file, but github wouldn't let me, but this is end of it:; ```; ==> Algorithm <==. SCF Algorithm Type is DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 1.00e-12. ==> Primary Basis <==. Basis Set: MINIX; Blend: MINIX; Number of shells: 42; Number of basis functions: 64; Number of Cartesian functions: 64; Spherical Harmonics?: true; Max angular momentum: 1. => Loading Basis Set <=. Name: (MINIX AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1, 8 entry O line 318 file /Users/cbannan/miniconda3/envs/baby_env/share/psi4/basis/def2-universal-jkfit.gbs; atoms 2-5, 7, 9, 14-15 entry C line 198 file /Users/cbannan/miniconda3/envs/baby_env/share/psi4/basis/def2-universal-jkfit.gbs; atoms 6 entry N line 258 file /Users/cbannan/miniconda3/envs/baby_env/share/psi4/basis/def2-universal-jkfit.gbs; atoms 10-13, 16-20 entry H line 18 file /Users/cbannan/miniconda3/envs/baby_env/share/psi4/basis/def2-universal-jkfit.gbs; ```. If I use a conda environment I built a few weeks ago the script runs fine. This is the same as we are seeing on our cloud platform on AWS. Docker images built 2 weeks ago (on May 23) are running fine. But the ones we make this week (on May 31) are failing with seg faults. . Now, I realize you all have moved on to 1.6, but we are too late in our development cycle to upgrade a dependency and our last package was built around psi4 1.3 so that is the only other version we've validated. So unfortunately if I can't track this down ASAP we will have to downgrade (even though we've seen performance improvement with the new version)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2593:4388,validat,validated,4388,https://psicode.org,https://github.com/psi4/psi4/issues/2593,1,['validat'],['validated']
Security,"/user/psi4/lib/psi4/core.cpython-310-x86_64-linux-gnu.so); ==98805== by 0x5FE0666: ??? (in /home/user/psi4/lib/psi4/core.cpython-310-x86_64-linux-gnu.so); ==98805== by 0x5F6A896: ??? (in /home/user/psi4/lib/psi4/core.cpython-310-x86_64-linux-gnu.so); ==98805== by 0x4FDC86: cfunction_call (methodobject.c:543); ==98805== by 0x4F741A: _PyObject_MakeTpCall (call.c:215); ==98805== by 0x4F34C5: UnknownInlinedFun (abstract.h:112); ==98805== by 0x4F34C5: UnknownInlinedFun (abstract.h:99); ==98805== by 0x4F34C5: UnknownInlinedFun (abstract.h:123); ==98805== by 0x4F34C5: UnknownInlinedFun (ceval.c:5893); ==98805== by 0x4F34C5: _PyEval_EvalFrameDefault (ceval.c:4181); ==98805== by 0x4FE0CE: UnknownInlinedFun (pycore_ceval.h:46); ==98805== by 0x4FE0CE: UnknownInlinedFun (ceval.c:5067); ==98805== by 0x4FE0CE: _PyFunction_Vectorcall (call.c:342); ==98805== Address 0x18 is not stack'd, malloc'd or (recently) free'd; ==98805== ; ==98805== ; ==98805== Process terminating with default action of signal 11 (SIGSEGV); ==98805== Access not within mapped region at address 0x18; ==98805== at 0x29BC741C: std::vector<char, std::allocator<char> >::size() const (stl_vector.h:988); ==98805== by 0x2B5A1476: psi::PsiOutStream::Printf(char const*, ...) (PsiOutStream.cc:70); ==98805== by 0x296A3066: psi::test::SCF::init_integrals() (scf.cc:79); ==98805== by 0x296A2C04: psi::test::SCF::SCF(std::shared_ptr<psi::Wavefunction>, psi::Options&) (scf.cc:56); ==98805== by 0x29697716: test (plugin.cc:134); ==98805== by 0x5FDD804: ??? (in /home/user/psi4/lib/psi4/core.cpython-310-x86_64-linux-gnu.so); ==98805== by 0x5FE0666: ??? (in /home/user/psi4/lib/psi4/core.cpython-310-x86_64-linux-gnu.so); ==98805== by 0x5F6A896: ??? (in /home/user/psi4/lib/psi4/core.cpython-310-x86_64-linux-gnu.so); ==98805== by 0x4FDC86: cfunction_call (methodobject.c:543); ==98805== by 0x4F741A: _PyObject_MakeTpCall (call.c:215); ==98805== by 0x4F34C5: UnknownInlinedFun (abstract.h:112); ==98805== by 0x4F34C5: UnknownInlinedFun (abst",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3200:2231,Access,Access,2231,https://psicode.org,https://github.com/psi4/psi4/issues/3200,1,['Access'],['Access']
Security,"0. I call this a good start. ### Step Two: Conventional TPDM Tech; I don't see a way around still using `dpdbuf4` for this, even though this isn't the most plugin-friendly. The main simplification here will be eliminating the need to dump to `libiwl`. ## Questions; - [ ] There is a goof in `libtrans`: There is a [pre-defined frozen core space `O`](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libtrans/mospace.h#L51-L57), and also a [pre-defined occupied space `o`](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libtrans/mospace.h#L58-L68), and likewise for virtual orbitals. These spaces have conflicting labels. ; [Uppercase letters mean the alpha orbitals](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libtrans/integraltransform_moinfo.cc#L306) and [lower case letters mean the beta orbitals](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libtrans/integraltransform_moinfo.cc#L505). We need to change the labels of the frozen core and frozen virtual spaces to break the conflict. We currently have five votes (Lori, Andy, Susi, Jet, and I) for `C` for frozen core and `W` for frozen virtual. Anybody opposed? Also, how on earth do I deprecate _this_? I need this for some frozen core gradient plans, so I would appreciate being able to change this sooner rather than later. Thankfully, neither space seems to be used anywhere in Psi.; - [ ] I made some internal changes to `libtrans`. There is now a case sensitive `MOCoefficients_` map, and there are case-insensitive `aMOCoefficients` and `bMOCoefficients` functions. I'd like to remove the old `aMOCoefficients_` and `bMOCoefficients_` maps, now that we have these new functions. Do I need to formally deprecate them? These were never exposed via PyBind. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1745:4412,expose,exposed,4412,https://psicode.org,https://github.com/psi4/psi4/pull/1745,1,['expose'],['exposed']
Security,"24, @psi-rking, @SimonBoothroyd, @yxie326, @VHchavez, @nlk36701, @edeustua, @leeping, @mquevill, @lazaroid, @sgoodlett. ## Performance Optimizations; - omega exchange can now be computed with `MemJK` algorithm. By not having to shunt range-separated functionals to `DiskJK` even when they'd fit in memory, 30-40% performance improvements seen (#1749); - Big performance improvement to DF SCF Hessian (#1805) ; - Omega combine algorithm for computing exchange terms (#1911) ; - Optimize linalg::triplet (#2053) ; - Thread external charge potential (#1946) . ## Developer Interests; - Improves [QCSchema](https://github.com/MolSSI/QCSchema); - Handle module-level options: `scf__reference` equivalent to `set scf reference` (#1578); - `psi4 --qcschema` instead of `psi4 --json` (#1723); - arrays losslessly transmitted in binary if `msgpack` installed (#1723); - new CC properties collected (#1723), dipole returned in au (#1728) ; - basisset and wavefunction schema returned (#1728); - New DFT grid pruning schemes, Treutler and robust accessed through `set dft_pruning_scheme` (not yet engaged by default) (grid points reduced by 30–45%) (#1591); - `SCS-MP2 OPPOSITE-SPIN CORRELATION ENERGY` and `SCS-MP2 SAME-SPIN CORRELATION ENERGY` have been removed, as have ""MP2"" variables from double-hybrid DFT final return (#1445); - `SCS-MP2 * ENERGY` now are defined (6/5, 1/3) quantities. For the user-influenceable vars, it's `CUSTOM SCS-MP2 * ENERGY` (#1445); - Dunning basis updates for Li, Be, Na, Mg (#1559); - S^Inf 2nd-order Dispersion and Exchange-Dispersion for SAPT (#1490); - Enable LGTM static analysis; - Add qcvars to wavefunction (not just globals) for CI, CheMPS2, PsiMRCC, DFT, scf_helper, DFMP2, OEPROP, DETCI. Add functional-including qcvars for DFT (#1570, #1445); - Add option `PARENT_SYMMETRY` to replace a global. Don't use it directly (#1575); - Driver sow/reap for optimize, database which never worked for py3 removed (#1583); - Add 6-311G(2df, <any>) for 2nd row atoms (#1531); -",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562:3945,access,accessed,3945,https://psicode.org,https://github.com/psi4/psi4/issues/1562,1,['access'],['accessed']
Security,"680a01383982fd/psi4/src -isystem /usr/include/python3.6m -O2 -g -pipe -Wall -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 -m64 -mtune=generic -fopenmp -DUSING_CheMPS2 -O2 -DNDEBUG -fPIC -std=c++11 -std=gnu++11 -o CMakeFiles/psio.dir/aio_handler.cc.o -c /builddir/build/BUILD/psi4-926879e243ce44dcc0ecfe7cda680a01383982fd/psi4/src/psi4/libpsio/aio_handler.cc; /builddir/build/BUILD/psi4-926879e243ce44dcc0ecfe7cda680a01383982fd/psi4/src/psi4/libpsio/aio_handler.cc: In member function 'long unsigned int psi::AIOHandler::read(unsigned int, const char*, char*, psi::ULI, psi::psio_address, psi::psio_address*)':; /builddir/build/BUILD/psi4-926879e243ce44dcc0ecfe7cda680a01383982fd/psi4/src/psi4/libpsio/aio_handler.cc:91:48: error: 'bind' is not a member of 'std'; thread_ = std::make_shared<std::thread>(std::bind(&AIOHandler::call_aio,this));; ^~~~; /builddir/build/BUILD/psi4-926879e243ce44dcc0ecfe7cda680a01383982fd/psi4/src/psi4/libpsio/aio_handler.cc:91:48: note: suggested alternative: 'find'; thread_ = std::make_shared<std::thread>(std::bind(&AIOHandler::call_aio,this));; ^~~~; find; ```. Note that I've defined; ```; -DCUSTOM_C_FLAGS=-O2 -g -pipe -Wall -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 -m64 -mtune=generic -std=c11 -DNDEBUG' '-DCUSTOM_CXX_FLAGS=-O2 -g -pipe -Wall -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 -m64 -mtune=generic -std=c++11 -DNDEBUG'; ```; which already includes the C++11 standard, but the build system seems to append this with -std=gnu++11 which is probably the reason why the build is broken. It's funny though, that the same flags work in earlier gcc!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/631:1857,secur,security,1857,https://psicode.org,https://github.com/psi4/psi4/issues/631,2,['secur'],['security']
Security,"; - Keep one-electron integrals in core (#1770) ; - Use def2 basis sets from BSE (#1804) ; - Improve memory estimates in fdisp (#1810) ; - Improve basis set choice in basis guess (#1484) ; - Print initial orbital occupations (#1713) ; - Improve handling/units of dipole and quadrupole arrays (#1800) ; - Electric dipole derivatives available py-side (#1799) ; - Add ST0-6G to list of basis sets (#1853) ; - PSIMRCC callable from comput_energy (#1854) ; - Improved general error reporting (#1862,#1868) ; - Removes CEPA0 from DCT module (#1873) ; - Remove debugging and timing code from psimrcc (#1879, #1901) ; - Add cython (#1889) ; - Update tolerances for mkl 2020.1 (#1896) ; - LGTM (#1905, #2038) ; - MP2/MP3 test suite (#1850, #1971) ; - Standardize CEPA and LCCD (#1909) ; - LCCD test suite (#1913, #1937) ; - Extensive improvements to DFGrad (#1915, #1923, #1953, #1974, #2049, #2079) ; - Expose cube-generating functions to python (#1917) ; - Fix cppe interface (#1922) ; - Move import of qcelemental (#1925) ; - Int to list for array variables (#1927) ; - Add module provenance to Wavefunction (#1935) ; - Add wfn to PSIMRCC (#1949, #1956) ; - Print CCSD pair energies (#1950) ; - Test label for c1-incompatible tests (#1958) ; - DCT and DFOCC densities to Wavefunction (#1963, #1964) ; - basis_sets handled by wavefunction.minsthelper (#1970) ; - Remove unused libtrans code (#1976) ; - Cleanup code for basis set handling (#1994) ; - MP 2.5/3.5 default to DF (#1980) ; - Print and save electron count from grid (#2001) ; - Clean libtrans (#1991) ; - Fix to high ang. mom. basis set (#2003) ; - Programmer docs (#2015) ; - Save cc response variables to wavefunction (#2022) ; - Compute electric field (#2032) ; - Better PSIO error reporting (#2030) ; - FCHK writer/testing improvement (#1884, #2047, #2058, #2063, #2091) ; - Set Lagrangian in Wavefunction (#2064, #2066, #2070) ; - Linux Azure fix (#2074) ; - Remove code in DF-DCT and DFOCC (#2067, #2078) ; - Python functions for DF deriv",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562:8200,Expose,Expose,8200,https://psicode.org,https://github.com/psi4/psi4/issues/1562,1,['Expose'],['Expose']
Security,"@hokru, @jturney, @AlexHeide, @susilehtola, @bennybp, and anyone else interested/knowledgeable about containers:. I've got a proof-of-principle building in GHA at https://github.com/psi4/docker-expt . It seems to be successful at building a linux docker container from a conda environment.yaml, uploading it to dockerhub (https://hub.docker.com/repository/docker/psi4/clockbox/general), running smoke tests on the image, building an apptainer from the docker, and doing nothing with the sif file. This is all based on a tutorial https://docs.docker.com/build/ci/github-actions/ (hence the `clockbox`es) and modeled on some files that Ben is using (operational docker file is the `Dockerfile-BPP` one). So far it's gone remarkably smoothly for me not knowing what I'm doing. At this point, other than cleaning up names, what else shall I do to improve it? If anyone wants edit access to the repo to fix it up, just let me know. A few points:; * I think we can stick with just Linux for the v1.8; * Where should the apptainer image be sent?; * Should there be a container for each py version or do ppl not care since layers are independent?. Thanks for any guidance and edits.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2951:876,access,access,876,https://psicode.org,https://github.com/psi4/psi4/issues/2951,1,['access'],['access']
Security,"A fresh compile of psi4 1.9.1 on Fedora (yay, finally updating from 1.3.2!) fails to run; all the tests fail with the error; ```; /usr/include/c++/14/bits/stl_vector.h:1130: std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::operator[](size_type) [with _Tp = double; _Alloc = std::allocator<double>; reference = double&; size_type = long unsigned int]: Assertion '__n < this->size()' failed.; Exit Status: overall (1); ```; which suggests that there is critical path code that is accessing a `std::vector` out-of-bounds. All Fedora packages are compiled with the following default optimization flags; ```; -O2 -flto=auto -ffat-lto-objects -fexceptions -g -grecord-gcc-switches -pipe -Wall -Wno-complain-wrong-lang -Werror=format-security -Wp,-U_FORTIFY_SOURCE,-D_FORTIFY_SOURCE=3 -Wp,-D_GLIBCXX_ASSERTIONS -specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 -fstack-protector-strong -specs=/usr/lib/rpm/redhat/redhat-annobin-cc1 -m64 -march=x86-64 -mtune=generic -fasynchronous-unwind-tables -fstack-clash-protection -fcf-protection -fno-omit-frame-pointer -mno-omit-leaf-frame-pointer; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214:491,access,accessing,491,https://psicode.org,https://github.com/psi4/psi4/issues/3214,2,"['access', 'secur']","['accessing', 'security']"
Security,Access to terms in the MP2 energy from Python,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/642:0,Access,Access,0,https://psicode.org,https://github.com/psi4/psi4/issues/642,1,['Access'],['Access']
Security,Add TD-DFT psivar access pattern,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2506:18,access,access,18,https://psicode.org,https://github.com/psi4/psi4/pull/2506,1,['access'],['access']
Security,Add one body integral access,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2744:22,access,access,22,https://psicode.org,https://github.com/psi4/psi4/pull/2744,1,['access'],['access']
Security,"An implementation for #1375 PsiPEP 002. ## Todos; - [x] Standardizes function names surrounding scalar and array variables in globals & Wfn. Fills in missing methods.; - [x] C-side deprecates old names for Wfn variable access (compile-time for C-API downstream); - [x] Py-side deprecates old names for global and Wfn variable access (run-time for Py-API downstream, incl. Psithon inputs); - [x] New set of functions (reuse of many of the old fn names) for uniform access; - [x] Wfn variable access now case insensitive and storage always uppercase (as globals always has); - [x] array variable getters/setters now return _copies_ of the arrays; - [x] globals now throws instead of autovivifying to 0 when getter called for non-existant key (as Wfn always has); - [x] Py-side (and hence all globals access) resists giving the same key to a scalar and an array variable. This check is not in place for C-side Wfn, but shouldn't be a problem given our habit of labeling with E/G/H, etc.; - **ALERT** this generates oodles of `FutureWarning`s b/c to keep this PR focussed on the substantive changes, I haven't updated the fn names w/i the codebase. That will be a separate PR hard after this gains approval, and should probably be merged in sequence, lest users go batty. I've worked on other topics beyond this one, and I'm confident the deprecation warnings are allowing the unhindered use of old syntax.; - [x] Deprecation Warnings look like the below in PsiAPI and PSIthon modes, respectively. For the latter, I had to suppress printing of offending line b/c it was very wrong (usually part of the LGPL license).; ```; psiapi.py:8: FutureWarning: Using `psi4.core.get_variable` instead of `psi4.core.variable` (or ; `psi4.core.scalar_variable` for scalar variables only) is deprecated, and in 1.4 it will stop working. print(psi4.get_variable('current energy')); ```; ```; Using `psi4.core.get_variable` instead of `psi4.core.variable` (or `psi4.core.scalar_variable` for scalar variables only) is dep",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1393:219,access,access,219,https://psicode.org,https://github.com/psi4/psi4/pull/1393,5,['access'],['access']
Security,Analytic Hessian Memory Validation,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2297:24,Validat,Validation,24,https://psicode.org,https://github.com/psi4/psi4/issues/2297,1,['Validat'],['Validation']
Security,"Apologies if this is off the development timeline or out of left field. The psi4 plugin system is excellent, and it's one of the really cool unique features of the package. One way to make it even better would be if it didn't require having access to the source to compile a plugin. Currently, all the static archives stay inside the object directory and are not installed to `prefix`, which means that when the plugins need to link against psi4, they link against the archives in the object directory, and the psi4 binary embeds the location of the source and build directory to use when generating an example plugin makefile. It would be nice to copy the archives to `$PREFIX/lib` instead.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/162:241,access,access,241,https://psicode.org,https://github.com/psi4/psi4/issues/162,1,['access'],['access']
Security,"Carried forward from [forums](http://forum.psicode.org/t/cfour-outfile-inconsistent-with-cfour-grd/1642). I haven't run this myself, but the output file the reporter gave is from 1.3.2 release, and I don't think the CFOUR driver has been touched since then. @loriab, correct me if I'm wrong. See the following input file:; ```; memory 2 gb. molecule co2 {; C; O 1 1.163; O 1 1.163 2 180; }. set basis aug-cc-pvdz; set CFOUR_ABCDTYPE AOBASIS; set CFOUR_CC_PROGRAM ecc; set cfour_anharmonic VIBROT; set cfour_vibration findif. optimize('c4-ccsd(t)'); ```. Psi will do a sanity check at the end of the computation, that the nuclear repulsion energy harvested from CFOUR output agrees with the same as computed from CFOUR's GRD file. In this case, they disagree. The output harvested quantity is the _undisplaced geometry_, where the GRD harvest is the last displacement to run, which is a _displaced geometry_. Unsurprisingly, the nuclear repulsion energies disagree between the two, and Psi reports a [validation error](https://github.com/psi4/psi4/blob/master/psi4/driver/qcdb/cfour.py#L597).",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1784:1000,validat,validation,1000,https://psicode.org,https://github.com/psi4/psi4/issues/1784,1,['validat'],['validation']
Security,"Closes #2735 . Previously, `initialize_lebedev` was never called, and in fact was getting optimized out of the module completely upon compilation. When `lebedev_mappping_[]` is then accessed across multiple OpenMP threads, the std::map is empty, and a deadlock can happen where two threads try to access-write (since [key] fills if key is not found), and the slightly slower thread ends up in a Bad State where it thinks there is a value but ends up infinitely looping on the lookup (the program will hang on `[]`). This only happens once every several thousand runs, and only when running with a high degree of parallelism in a system with many atoms. I cannot induce it in captivity, but I have observed it in the wild. Anyway, `[]` accesses on std::map aren't thread-safe if you aren't super-duper sure the map is fully filled for all keys you'd ever look up, which *should* be the case if `initialize_lebedev` was ever called anywhere. But it wasn't, and that was Bad. Now it's called exactly once (thanks, c++11's `call_once`! I do see that this isn't used anywhere else in the code, but I do see mutex is imported in several files, so I don't think I'm adding any new deps here). The hangs should be gone, though I'll have to churn through another several thousand runs to likely be sure (as, again, it is a very rare kind of hang). This will take me a few days to confirm, but given all debugging efforts point to this being the problem, I'm like 99% confident this will do the trick. That said, as far as I can tell, besides one print function the resulting order_ that's assigned to is never *used*. Maybe a candidate to be axed in the future?. ## Description; Actually invokes initialize_lebedev before accessing lebedev_mapping_ to ensure the mapping has values, and prevents a deadlock when running in parallel. ## User API & Changelog headlines; Prevents a nasty, rare hang. ## Dev notes & details; See the main PR body. ## Questions; - [x] What does `order_` actually do in SphericalGrid",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2736:182,access,accessed,182,https://psicode.org,https://github.com/psi4/psi4/pull/2736,3,['access'],"['access-write', 'accessed', 'accesses']"
Security,Compile plugins without access to source directory,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/174:24,access,access,24,https://psicode.org,https://github.com/psi4/psi4/pull/174,1,['access'],['access']
Security,"Compute numerical and analytical gradients with **wB97X** functional:; ```python; import psi4. print(psi4.__version__). psi4.geometry('H -.5 0 0\nH .5 0 0'); psi4.gradient('wb97x/3-21g', dertype=0); psi4.gradient('wb97x/3-21g', dertype=1); ```. The numerical gradient works, but analytical one crashes:; ```; 1.2a1.dev681; gradient() will perform gradient computation by finite difference of analytic energies. ... skipped ... ## F-D gradient (Symmetry 0) ##; Irrep: 1 Size: 2 x 3. 1 2 3. 1 -0.08957282148820 0.00000000000000 0.00000000000000; 2 0.08957282148820 0.00000000000000 0.00000000000000. Traceback (most recent call last):; File ""test.py"", line 7, in <module>; psi4.gradient('wb97x/3-21g', dertype=1); File ""/home/raimis/opt/miniconda3/envs/ani_test/lib/python3.6/site-packages/psi4/driver/driver.py"", line 549, in gradient; dertype = min([_find_derivative_type('gradient', method, user_dertype) for method in cbs_methods]); File ""/home/raimis/opt/miniconda3/envs/ani_test/lib/python3.6/site-packages/psi4/driver/driver.py"", line 549, in <listcomp>; dertype = min([_find_derivative_type('gradient', method, user_dertype) for method in cbs_methods]); File ""/home/raimis/opt/miniconda3/envs/ani_test/lib/python3.6/site-packages/psi4/driver/driver.py"", line 103, in _find_derivative_type; % (method_name, str(dertype), alternatives)); psi4.driver.p4util.exceptions.ValidationError: Derivative method 'name' wb97x and derivative level 'dertype' 1 are not available. Did you mean? b97 wb97 wb97x wb97x-v wb97x-d; ```. Also, the error message is self-contradicting:; ```; psi4.driver.p4util.exceptions.ValidationError: Derivative method 'name' wb97x and derivative level 'dertype' 1 are not available. Did you mean? b97 wb97 wb97x wb97x-v wb97x-d; ```. According to https://gitlab.com/libxc/libxc/wikis/Functionals-list-3.0.0, **libXC** supports **wB97X** and I don't see any notes that the analytical gradient is not implemented. So I guess, the problem is somewhere in **Psi4**.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/867:1372,Validat,ValidationError,1372,https://psicode.org,https://github.com/psi4/psi4/issues/867,2,['Validat'],['ValidationError']
Security,"Condense MP2, Sanitize Spin Scaling: OCC's Open-Heart Surgery III",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1789:14,Sanitiz,Sanitize,14,https://psicode.org,https://github.com/psi4/psi4/pull/1789,1,['Sanitiz'],['Sanitize']
Security,Consolidate https://github.com/psi4/psi4/blob/master/psi4/src/psi4/fisapt/local2.cc into https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/local.cc. The goal is to get straightforward access to the IBO localizer without the need to go into the fsapt name space.; A new subclass would need to be created for IBO. Tentatively labeled as _new_dev_ but not very familiar with the code base.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2379:198,access,access,198,https://psicode.org,https://github.com/psi4/psi4/issues/2379,1,['access'],['access']
Security,"Could you implement a specific SCFConvergenceErrors similar to OptimizationConvergenceError such that the exception provides access to the wfn or the geometry of the input?. This would allow users to catch the exception and retry the SCF with different options.; Something like this:; try:; optE, optWfn = optimize(optMethod, return_wfn=True); except SCFConvergenceError as e:; optWfn = e.wfn; # let try again:; optE, optWfn = optimize(optMethod, return_wfn=True); print(""SCF did not converge"")",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1062:125,access,access,125,https://psicode.org,https://github.com/psi4/psi4/issues/1062,1,['access'],['access']
Security,Create and Python-expose functions for the DF deriv integrals,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2088:18,expose,expose,18,https://psicode.org,https://github.com/psi4/psi4/pull/2088,1,['expose'],['expose']
Security,"Currently, PCM settings can not be set via QCEngine using the schema interface, passing a task like this from QCEngine results in an error ; ```python; {'schema_name': 'qcschema_input',; 'schema_version': 1,; 'molecule': Molecule(name='H2O', formula='H2O', hash='941bd29'),; 'driver': 'energy',; 'model': {'method': 'SCF', 'basis': 'sto-3g'},; 'protocols': {'wavefunction': 'orbitals_and_eigenvalues'},; 'keywords': {'scf_type': 'df',; 'pcm_scf_type': 'total',; 'pcm': {'Units': 'Angstrom',; 'Medium': {'SolverType': 'IEFPCM', 'Solvent': 'Water'},; 'Cavity': {'RadiiSet': 'UFF',; 'Type': 'GePol',; 'Scaling': False,; 'Area': 0.3,; 'Mode': 'Implicit'}}}}; ```; as it tries to pass the dictionary of settings to the `core.set_global` function. . Extending the `set_options` function [here](https://github.com/psi4/psi4/blob/5de566ed7d4bf51816c673c4ea1def449e4e8618/psi4/driver/p4util/python_helpers.py#L423) to handle the `pcm` keyword should fix this issue. tagging @loriab following the slack discussion.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1986:257,hash,hash,257,https://psicode.org,https://github.com/psi4/psi4/issues/1986,1,['hash'],['hash']
Security,"Dear all,. I am new at psi4, and I want to run sapt using the mid-bonds. I pick up the sapt3 example to test it, but I got the following error . Memory set to 953.674 MiB by Python driver.; SAPT does not make use of molecular symmetry, further calculations in C1 point group. Traceback (most recent call last):; File ""/opt/psi4/bin/psi4"", line 248, in <module>; exec(content); File ""<string>"", line 43, in <module>; File ""/opt/psi4/lib//python3.6/site-packages/psi4/driver/driver.py"", line 460, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/opt/psi4/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 3151, in run_sapt; raise ValidationError('SAPT requires active molecule to have 2 fragments, not %s.' % (nfrag)). ValidationError: SAPT requires active molecule to have 2 fragments, not 3. Can somebody tell me what I am doing wrong?. Thanks",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/936:694,Validat,ValidationError,694,https://psicode.org,https://github.com/psi4/psi4/issues/936,2,['Validat'],['ValidationError']
Security,"Dear all,. I am trying to compile psi4 on a supercomputer, which i don't have a root access to. It is based on Xeons and has the following software avaliable: . gcc/5.2.0, pgi/12.9. intel/13.1.0, intel/15.0.090. mkl/4.0.2.146, mkl/11.2.0. impi/4.0.3, impi/4.1.0-32bit, impi/4.1.0, impi/4.1.0-ofa, impi/5.0.1, impi/5.0.1-ofa. openmpi/1.5.5-gcc, openmpi/1.5.5-icc, openmpi/1.8.4-gcc, openmpi/1.8.4-icc, openmpi/1.6.5-gcc, openmpi/1.6.5-icc. I choosed impi/5.0.1 and mkl/11.2.0.; I have tried to use both intel compiler versions to compile ""master"" and ""0.3 release from 5 Aug 2015"" versions. All times I have failed. With the intel/15.0.090 compilers it even fails on the ./setup script as follows:. CMake Error: Unable to find the executable at any of:; /mnt/data/users/dm4/vol12/medvedevmg_1708/bin/tmp/psi4public-0.3/objdir/check_cxx11/cxx11 _regex/CMakeFiles/CMakeTmp/cmTC_e39a7; /mnt/data/users/dm4/vol12/medvedevmg_1708/bin/tmp/psi4public-0.3/objdir/check_cxx11/cxx11 _regex/CMakeFiles/CMakeTmp/Debug/cmTC_e39a7; /mnt/data/users/dm4/vol12/medvedevmg_1708/bin/tmp/psi4public-0.3/objdir/check_cxx11/cxx11 _regex/CMakeFiles/CMakeTmp/Development/cmTC_e39a7. And with the intel/13.1.0 compilers ./setup runs successfully. To avoid crushes I have changed -std=g++98 to -std=c++11 in the CMAKE_CXX_FLAGS:STRING in the CMakeCache.txt and followed the post http://forum.psicode.org/t/undefined-git-version/61/3 in case of ""0.3 release"". Thus in case of both versions of psi4 using the intel/13.1.0 compilers I have ended with:. ..........; [ 99%] Building CXX object src/bin/psi4/CMakeFiles/psi4.dir/export_efp.cc.o; [ 99%] Building CXX object src/bin/psi4/CMakeFiles/psi4.dir/export_cubeprop.cc.o; [100%] Building CXX object src/bin/psi4/CMakeFiles/psi4.dir/clean.cc.o; [100%] Building CXX object src/bin/psi4/CMakeFiles/psi4.dir/create_new_plugin.cc.o; [100%] Building CXX object src/bin/psi4/CMakeFiles/psi4.dir/script.cc.o; [100%] Building CXX object src/bin/psi4/CMakeFiles/psi4.dir/set_memory.cc.o; [",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/201:85,access,access,85,https://psicode.org,https://github.com/psi4/psi4/issues/201,1,['access'],['access']
Security,Documentation fails to build with perl 5.22 and reports the following error:. Can't use 'defined(%hash)' (Maybe you should just omit the defined()?); at /build/psi4-0.3/doc/sphinxman/document_options_c.pl line 150.; doc/sphinxman/CMakeFiles/sphinxman.dir/build.make:106: recipe for; target 'doc/sphinxman/source/autodoc_abbr_options_c.rst' failed,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/200:98,hash,hash,98,https://psicode.org,https://github.com/psi4/psi4/pull/200,1,['hash'],['hash']
Security,Expose C_DGELS via PSI_API,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2356:0,Expose,Expose,0,https://psicode.org,https://github.com/psi4/psi4/pull/2356,1,['Expose'],['Expose']
Security,Expose P::e.options in Python.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/720:0,Expose,Expose,0,https://psicode.org,https://github.com/psi4/psi4/pull/720,1,['Expose'],['Expose']
Security,Expose class Slice as PSI_API.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1028:0,Expose,Expose,0,https://psicode.org,https://github.com/psi4/psi4/pull/1028,1,['Expose'],['Expose']
Security,Expose flexible cube generation to Python,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1917:0,Expose,Expose,0,https://psicode.org,https://github.com/psi4/psi4/pull/1917,1,['Expose'],['Expose']
Security,Expose good chunks of libmints and libciomr to plugins,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1400:0,Expose,Expose,0,https://psicode.org,https://github.com/psi4/psi4/pull/1400,1,['Expose'],['Expose']
Security,Expose reset_subspace to C++ for plugins,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2437:0,Expose,Expose,0,https://psicode.org,https://github.com/psi4/psi4/pull/2437,1,['Expose'],['Expose']
Security,Expose wavefunction and amplitudes to python,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1061:0,Expose,Expose,0,https://psicode.org,https://github.com/psi4/psi4/pull/1061,1,['Expose'],['Expose']
Security,Fix an invalid memory access in psi::CIWavefunction::sem_iter,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1441:22,access,access,22,https://psicode.org,https://github.com/psi4/psi4/pull/1441,1,['access'],['access']
Security,Fix invalid memory access in psi::IntegralTransform::presort_so_tei,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1469:19,access,access,19,https://psicode.org,https://github.com/psi4/psi4/pull/1469,1,['access'],['access']
Security,Fix invalid memory access in psi::ROHF::Hx,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1489:19,access,access,19,https://psicode.org,https://github.com/psi4/psi4/pull/1489,1,['access'],['access']
Security,Fix invalid memory access in psi::cceom::get_moinfo,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1422:19,access,access,19,https://psicode.org,https://github.com/psi4/psi4/pull/1422,1,['access'],['access']
Security,Fix invalid memory access in psi::sapt::SAPTDFInts and psi::sapt::Iterator,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1238:19,access,access,19,https://psicode.org,https://github.com/psi4/psi4/pull/1238,1,['access'],['access']
Security,GitHub Workflows security hardening,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2723:17,secur,security,17,https://psicode.org,https://github.com/psi4/psi4/pull/2723,2,['secur'],['security']
Security,"Hello all; I've tried to load molecular geometry from XYZ-file. 3; 0 2; C 0.000000000000 0.000000000000 0.000000000000; C 0.000000000000 0.000000000000 1.211315440000; H 0.000000000000 0.000000000000 2.275843410000. charge = 0 multiplicity = 2. my input. memory 2 Gb; qmol = qcdb.Molecule.init_with_xyz('mol.xyz'); lmol = geometry(qmol.create_psi4_string_from_molecule()); set basis cc-pVQZ; set reference uhf; hf_e, hf_wfn = energy('scf', return_wfn=True); molden(hf_wfn, 'molden.dat'). I've got the following issue:. ```; Traceback (most recent call last):; File ""/home/vladimir/psi4conda/bin/psi4"", line 248, in <module>; exec(content); File ""<string>"", line 21, in <module>; File ""/home/vladimir/psi4conda/lib//python3.5/site-packages/psi4/driver/qcdb/molecule.py"", line 147, in init_with_xyz; instance.add_atom(el2z[fileAtom], fileX, fileY, fileZ, fileAtom, el2mass[fileAtom], el2z[fileAtom]); File ""/home/vladimir/psi4conda/lib//python3.5/site-packages/psi4/driver/qcdb/libmintsmolecule.py"", line 1173, in add_atom; raise ValidationError(""Molecule::add_atom: Adding atom on top of an existing atom.""); ```; this exception raises after H atom insertions.; my version Git: Rev {HEAD} add49b9. when I rearranged my XYZ-file to the following. 3; 0 2; H 0.000000000000 0.000000000000 2.275843410000; C 0.000000000000 0.000000000000 0.000000000000; C 0.000000000000 0.000000000000 1.211315440000. all works fine. Best wishes, Vladimir.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/804:1028,Validat,ValidationError,1028,https://psicode.org,https://github.com/psi4/psi4/issues/804,1,['Validat'],['ValidationError']
Security,"Hi Daniel, ; It would be a good idea to allow SAPT(DFT) calculations without the AC, but this does not seem to be a possibility at the moment as the GRAC shifts are needed and they need to be non-zero. . GRAC should be an optional part of the SAPT(DFT) calculation. And all parameters in GRAC should be user accessible (this is normally the case in other codes) so the way the splicing is done can be altered if needed. At present only the shifts are user-defined. This would allow range-separated functionals to be used in SAPT(DFT). Right now it does not seem like they can. ; Thanks!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/939:308,access,accessible,308,https://psicode.org,https://github.com/psi4/psi4/issues/939,1,['access'],['accessible']
Security,"Hi, I was wondering if anyone is facing any problems accessing ps4 forum webpage. Anytime I try to open any link on psi4 forum it shows me this error. I have used multiple devices and internet connections to access this.; <img width=""1646"" alt=""Screen Shot 2023-01-31 at 12 27 09 PM"" src=""https://user-images.githubusercontent.com/96807514/215875127-ef6dcd14-6e27-480f-a31e-860c85ac0bce.png"">",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2868:53,access,accessing,53,https://psicode.org,https://github.com/psi4/psi4/issues/2868,2,['access'],"['access', 'accessing']"
Security,"Hi,. @raimis and I are working with a development version of psi4. I installed a fresh conda directory (python 3.6) where I ran `conda install psi4=1.2a1.dev611 -c psi4/label/dev -c psi4`. Here's what's installed:. ```; -bash-4.2$ conda list; # packages in environment at /home/damasj02/software/psi4dev:; #; # Name Version Build Channel; asn1crypto 0.24.0 py36_0; attrs 17.4.0 py36_0; ca-certificates 2018.03.07 0; certifi 2018.1.18 py36_0; cffi 1.11.4 py36h9745a5d_0; chardet 3.0.4 py36h0f667ec_1; chemps2 1.8.4 0 psi4/label/dev; cloog 0.18.0 0; conda 4.4.10 py36_0; conda-env 2.6.0 h36134e3_1; cryptography 2.1.4 py36hd09be54_0; dkh 1.2 1 psi4/label/dev; erd 3.0.6 1 psi4/label/dev; gcc-5 5.2.0 1 psi4; gcc-5-mp 5.2.0 0 psi4; gdma 2.2.6 3 psi4/label/dev; gmp 6.1.2 h6c8ec71_1; hdf5 1.8.17 2; idna 2.6 py36h82fb2a8_1; intel-openmp 2018.0.0 8; isl 0.12.2 0; libedit 3.1 heed3624_0; libefp 1.5b1 0 psi4/label/dev; libffi 3.2.1 hd88cf55_4; libgcc-ng 7.2.0 h7cc24e2_2; libgfortran-ng 7.2.0 hdf63c60_3; libint 1.2.1 1 psi4/label/dev; libstdcxx-ng 7.2.0 h7a57d05_2; libxc 3.0.0 6 psi4/label/dev; mkl 2018.0.2 1; mkl_fft 1.0.1 py36h3010b51_0; mkl_random 1.0.1 py36h629b387_0; more-itertools 4.1.0 py36_0; mpc 1.0.1 0; mpfr 3.1.2 0; ncurses 6.0 h9df7e31_2; numpy 1.14.2 py36hdbf6ddf_1; openssl 1.0.2o h20670df_0; pcmsolver 1.1.10 py36_1 psi4/label/dev; pip 9.0.1 py36h6c6f9ce_4; pluggy 0.6.0 py36hb689045_0; psi4 1.2a1.dev611+8fe3513 py36_0 psi4/label/dev; psi4-lt-mp 1.2a1.dev3 py36_0 psi4/label/dev; py 1.5.3 py36_0; pycosat 0.6.3 py36h0a5515d_0; pycparser 2.18 py36hf9f622e_1; pyopenssl 17.5.0 py36h20ba746_0; pysocks 1.6.7 py36hd97a5b1_1; pytest 3.5.0 py36_0; python 3.6.4 hc3d631a_1; readline 7.0 ha6073c6_4; requests 2.18.4 py36he2e5f8d_1; ruamel_yaml 0.15.35 py36h14c3975_1; setuptools 38.4.0 py36_0; simint 0.7 0 psi4; six 1.11.0 py36h372c433_1; sqlite 3.22.0 h1bed415_0; tk 8.6.7 hc745277_3; urllib3 1.22 py36hbe7ace6_0; wheel 0.30.0 py36hfd4bba0_1; xz 5.2.3 h55aa19d_2; yaml 0.1.7 had09818_2; zlib",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/948:389,certificate,certificates,389,https://psicode.org,https://github.com/psi4/psi4/issues/948,1,['certificate'],['certificates']
Security,"Hi,. we were recently reviving a PSI4 plugin that was used with an older version of PSI4. Now, we wanted to adapt it to the current development version and realized that the AOIntegralsIterator is hidden (?) in the library. Our fix was to add PSI_API to the class definition in `src/psi4/libmints/integral.h` . . However, for us, it would be easier if it would be accessible by default (mainly to use the conda install and avoid compilation every time). Is there a specific reason, why that class is excluded or hidden in the library? If no, we would be very grateful, if a developer would add it to the header file. . Thank you!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2239:364,access,accessible,364,https://psicode.org,https://github.com/psi4/psi4/issues/2239,1,['access'],['accessible']
Security,How to access density matrix history in SCF iterations,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3065:7,access,access,7,https://psicode.org,https://github.com/psi4/psi4/issues/3065,1,['access'],['access']
Security,"I am currently testing out the ddx solvent model implementation (https://psicode.org/psi4manual/master/ddx.html) in my high throughput script. However, currently the DDX_SOLVENT_EPSILON option being ignored in favor of DDX_SOLVENT. . According to the manual, DDX_SOLVENT is ignored if DDX_SOLVENT_EPSILON is supplied. Initially I took this as meaning one could *just* supply the DDX_SOLVENT_EPSILON value directly. However, without supplying the DDX_SOLVENT field too, the calculation fails with `psi4.driver.p4util.exceptions.ValidationError: Required option 'DDX_SOLVENT' is missing.`. Hence, in my high throughput script I provided a placeholder in this field if the DDX_SOLVENT_EPSILON option is selected:. ```; #check if dialetric constant is specified or not; if settings.ddx_settings.epsilon is not None:; print('ddx numeric option'); psi4.set_options({""ddx"": ""true"", #supply a solvent here to see if epsilon then gets picked up; ""DDX_SOLVENT_EPSILON"": settings.ddx_settings.epsilon,; ""DDX_RADII_SET"": settings.ddx_settings.radii_set,; ""DDX_MODEL"": settings.ddx_settings.ddx_model,; ""DDX_SOLVENT"":""water""}) #without this calculation fails with psi4.driver.p4util.exceptions.ValidationError: Required option 'DDX_SOLVENT' is missing.; else:; print('ddx solvent option'); psi4.set_options({""ddx"": ""true"",; ""DDX_SOLVENT"": settings.ddx_settings.solvent,; ""DDX_RADII_SET"": settings.ddx_settings.radii_set,; ""DDX_MODEL"": settings.ddx_settings.ddx_model}); ```; However, when I run a testcase when inspecting the output file, the solvent_epsilon is printed out as 78.3553 not the test value 4 which I used in my test run. . It appears the issue lies in the if else statement in psi4/driver/procrouting/solvent/ddx.py, where the if statement core.has_option_changed(""DDX"", ""DDX_SOLVENT_EPSILON"") is not assigned as true (I added print statements to validate this):; ```; solvent = core.get_option(""DDX"", ""DDX_SOLVENT"").lower(); print(f'solvent option chosen is {solvent}') ; if core.has_option_changed(",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3119:527,Validat,ValidationError,527,https://psicode.org,https://github.com/psi4/psi4/issues/3119,1,['Validat'],['ValidationError']
Security,"I am getting an error in Psi4 1.5 that I believe is a bug. Here is a minimal script to reproduce it. ```python; import psi4; psi4.set_options({'reference': 'uhf', 'stability_analysis': 'follow'}); mol = psi4.geometry(""""""; 0 1; O; """""");; psi4.energy('wB97M-D3BJ/def2-TZVPPD', molecule=mol); ```. It throws the exception. ```; psi4.driver.p4util.exceptions.ValidationError: Stability analysis root following is only available for UHF; ```. Since the script does use UHF, the error doesn't make sense.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2577:355,Validat,ValidationError,355,https://psicode.org,https://github.com/psi4/psi4/issues/2577,1,['Validat'],['ValidationError']
Security,"I am just wondering whether this composite ab initio method is available in PSI4?. If I give energy('ccCA-PS3') for a molecule then; from the output error message I recognize that this keyword is not available. . psi4.driver.p4util.exceptions.ValidationError: Energy method ""ccca-ps3"" is not available. Either I maybe making some mistakes or if you could share some sample input file related; to this composite method then it would be helpful.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2157:243,Validat,ValidationError,243,https://psicode.org,https://github.com/psi4/psi4/issues/2157,1,['Validat'],['ValidationError']
Security,"I am working with David Williams-Young to extend the features of his IntegratorXX and GauXC projects, which will enable access to modern quadrature grids in various programs. While going through the code in IntegratorXX, we noticed in https://github.com/wavefunction91/IntegratorXX/pull/27 that there is a potential discrepancy in the Chebychev roots in Psi4; ```; void RadialGridMgr::getChebychevRoots(int n, double r[], double w[]) {; double piOverNPlusOne = M_PI / (n + 1);; for (int i = 1; i <= n; i++) {; double x = cos(i * piOverNPlusOne);; r[i - 1] = x;; w[i - 1] =; piOverNPlusOne * sqrt(1.0 - x * x); // sqrt(1.0 - x*x) could've been replaced with sin(i*piOverNPlusOne).; }; }; ```. This should be compared to the Gauss-Chebychev rules on [Wikipedia](https://en.wikipedia.org/wiki/Chebyshev%E2%80%93Gauss_quadrature). The nodes clearly correspond to Chebychev quadrature of the second kind, but ; 1. the weights are from Gauss-Chebychev quadrature of the first kind and; 2. the factor to transform to unit weight is missing.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3004:120,access,access,120,https://psicode.org,https://github.com/psi4/psi4/issues/3004,1,['access'],['access']
Security,I have download the Psi4conda-1.3.2-py37-Linux-x86_64.sh and install it on a scientific Linux 6 computer with ldd (GNU libc) 2.12.; The installation finish without any error and I got a `Segmentation fault` when running `psi4 --test`. `conda list` gives. ```; # packages in environment at /users/grte2001/psi4conda:; #; # Name Version Build Channel; ambit 0.3 h137fa24_1 psi4; asn1crypto 0.24.0 py37_0 ; atomicwrites 1.3.0 py37_1 ; attrs 19.1.0 py37_1 ; blas 1.0 mkl ; ca-certificates 2019.1.23 0 ; certifi 2019.3.9 py37_0 ; cffi 1.12.3 py37h2e261b9_0 ; chardet 3.0.4 py37_1 ; chemps2 1.8.9 h8c3debe_0 psi4; conda 4.6.14 py37_0 ; cryptography 2.6.1 py37h1ba5d50_0 ; cvxopt 1.2.0 py37hfa32c7d_0 ; decorator 4.4.0 py37_1 ; deepdiff 3.3.0 py37_1 psi4; dftd3 3.2.1 h84218bc_2 psi4; dkh 1.2 h173d85e_2 psi4; future 0.17.1 py37_0 ; gau2grid 1.3.1 h035aef0_0 psi4; gcp 2.0.2 h84218bc_1 psi4; gdma 2.2.6 h0e1e685_6 psi4; glpk 4.65 h3ceedfd_2 ; gmp 6.1.2 h6c8ec71_1 ; gsl 2.4 h14c3975_4 ; h5py 2.8.0 py37h989c5e5_3 ; hdf5 1.10.2 hba1933b_1 ; idna 2.8 py37_0 ; intel-openmp 2019.3 199 ; jsonpickle 0.9.6 py37_0 psi4; libedit 3.1.20181209 hc058e9b_0 ; libefp 1.5.0 h84097be_1 psi4; libffi 3.2.1 hd88cf55_4 ; libgcc-ng 8.2.0 hdf63c60_1 ; libgfortran-ng 7.3.0 hdf63c60_0 ; libint 1.2.1 hb4a4fd4_6 psi4; libstdcxx-ng 8.2.0 hdf63c60_1 ; libxc 4.3.4 h7b6447c_0 psi4; metis 5.1.0 hf484d3e_4 ; mkl 2019.3 199 ; mkl_fft 1.0.12 py37ha843d7b_0 ; mkl_random 1.0.2 py37hd81dba3_0 ; more-itertools 7.0.0 py37_0 ; ncurses 6.1 he6710b0_1 ; networkx 2.3 pypi_0 pypi; numpy 1.16.3 py37h7e9f1db_0 ; numpy-base 1.16.3 py37hde5b4d6_0 ; openfermion 0.9 py37hd763080_1 psi4; openfermionpsi4 0.4 py37h934b37d_0 psi4; openssl 1.1.1b h7b6447c_1 ; pcmsolver 1.2.1 py37h142c950_0 psi4; pint 0.9 py37_2 psi4; pip 19.1.1 py37_0 ; pluggy 0.11.0 pypi_0 pypi; psi4 1.3.2+ecbda83 py37h31b3128_0 psi4; psi4-rt 1.3.2 py37ha6b60c8_0 psi4; py 1.8.0 py37_0 ; pycosat 0.6.3 py37h14c3975_0 ; pycparser 2.19 py37_0 ; pydantic 0.23 py37_0 psi4; pylibefp ,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1792:472,certificate,certificates,472,https://psicode.org,https://github.com/psi4/psi4/issues/1792,1,['certificate'],['certificates']
Security,"I have tried to run the following input:. molecule no3 {; 0 2; N -0.000000289178 0.000000000000 -0.107371527464; O 0.000000787144 0.000000000000 1.265621161075; O 1.089067344013 0.000000000000 -0.585809671624; O -1.089067877991 0.000000000000 -0.585810897335; symmetry c1; }. set globals {; basis cc-pvtz; #df_basis_scf cc-pvtz-jkfit; #df_basis_cc cc-pvtz-ri; reference uhf; scf_type df; guess gwh; e_convergence 8; d_convergence 6; mo_maxiter 400; cepa_type df; qc_module occ; }; energy('cepa(0)'). Then, I get the following error:. PsiException: Error: cepa(0) requires ""reference rhf"". An error has occurred Py-side; Traceback:; <class 'p4xcpt.ValidationError'>: Error: cepa(0) requires ""reference rhf"".: File ""<string>"", line 37, in <module>. File ""/usr/local/programs/psi4intel/share/psi/python/driver.py"", line 629, in energy; procedures['energy'][lowername](lowername, **kwargs). File ""/usr/local/programs/psi4intel/share/psi/python/proc.py"", line 3783, in run_cepa; raise ValidationError(""Error: %s requires \""reference rhf\""."" % lowername). Something should be wrong in proc.py or I missed something. @loriab",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/273:647,Validat,ValidationError,647,https://psicode.org,https://github.com/psi4/psi4/issues/273,2,['Validat'],['ValidationError']
Security,"I run psi4 by specifying the scratch drive (psi4 -s /scratch). But pcmsolver seems to use /tmp. Security-wise it's nice for me to be able to limit drive access to only one directory. Is there a way to propagate the -s switch from psi4 to pcmsolver, so that it uses the same scratch directory as psi4 instead of /tmp?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3054:96,Secur,Security-wise,96,https://psicode.org,https://github.com/psi4/psi4/issues/3054,2,"['Secur', 'access']","['Security-wise', 'access']"
Security,"I thought it might be useful to share the failed tests of psi4 (using commit e4070d0024742579a445) on our systems. We have 4 failed tests:. ```; The following tests FAILED:; 223 - opt10 (Timeout); 240 - pubchem1 (Failed); 241 - pubchem2 (Failed); 255 - pywrap-opt-sowreap (Failed); 264 - sapt4 (Failed); ```. The `pubchem` is probably just the firewall blocking stuff. Several times I've seen things like:. ```; 253: Unable to read the PSI4 Python folder - check the PSIDATADIR environmental variable; 253: Current value of PSIDATADIR is /user/scratch/gent/vsc403/vsc40307/EB/swalot/software/PSI/4.0b6-20160201-intel-2016a-mt-Python-2.7.11/share/psi4; ```. Where the value of `PSIDATADIR` is the install path instead of the build path. I think `pywrap-opt-sowreap` fails because of this. For the `sapt4` test:. ```; 264/305 Testing: sapt4; 264/305 Test: sapt4; Command: ""/apps/gent/CO7/haswell-ib/software/Python/2.7.11-intel-2016a/bin/python"" ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/psi4public-e4070d0024742579a445e084da9dde078310094d/tests/runtest.py"" ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/psi4public-e4070d0024742579a445e084da9dde078310094d/tests/sapt4/input.dat"" ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/obj/testresults.log"" ""false"" ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/psi4public-e4070d0024742579a445e084da9dde078310094d"" ""false"" ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/obj/tests/sapt4/output.dat"" ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/obj/bin/psi4""; Directory: /dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/obj/tests/sapt4; ""sapt4"" start time: Feb 15 13:13 CET; Output:; ----------------------------------------------------------; Traceback (most recent call last):; File ""<string>"", line 65, in <module>; File ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/psi4public-e4070d0024742579a445e084da9dde078310094d/lib/pytho",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/253:344,firewall,firewall,344,https://psicode.org,https://github.com/psi4/psi4/issues/253,1,['firewall'],['firewall']
Security,"I wondered how the pre-#1289 driver handled core cleaning when `optimize` called for a `hessian`. I discovered the handling was bugged. The following input file crashes when I try to run it on my control version of Psi, 287272b. The initial Hessian is fine because `GUESS` hasn't yet been set to `READ`. (I assume that happens somewhere in OPTKING.) After the first step, `GUESS` is set to read, causing the seventh displacement for the hessian to crash with `ValidationError: Cannot compute projection of different symmetries.` I had been under the impression that https://github.com/psi4/psi4/blob/master/psi4/driver/driver.py#L1454-L1455 existed precisely to avoid such things, so maybe those lines do something else?. ```; molecule h2o { ; O ; H 1 1.0 ; H 1 1.0 2 104.5 ; }. set {; basis sto-3g; e_convergence 10; d_convergence 10; points 3; geom_maxiter 7; full_hess_every 1 ; }. optimize('scf', dertype = 0); ```. EDIT: The conditions are more general than originally reported. Any findif hessian with `GUESS` set to `READ` will trigger the bug. The hessians computed by `full_hess_every` are just one particular instance.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1296:460,Validat,ValidationError,460,https://psicode.org,https://github.com/psi4/psi4/issues/1296,1,['Validat'],['ValidationError']
Security,"I would like to implement a faster way to do ESP fits than what is found here:; https://github.com/psi4/psi4numpy/tree/master/One-Electron-Property/Restrained-Electrostatic-Potential. The solution above is writing multiple grids on disk, yet the strength of the python and C++ APIs of Psi4 should be to have these in memory and allow for fast multithreaded evaluations. My development proposal would be a little more involved, but also give the Psi4 API a lot more power. I would split the whole OEProp class into:. OEPropCalc; This class will get all currently existing logic to calculate the requested properties. Most properties are already calculated as SharedMatrix. This class will not be allowed to have any kind of output, unless a bulk property is requested (such as a grid).; OEProp; This class gets all output handling, it will only call the respective OEPropCalc functions and then use the existing code for output. Data will be passed between OEPropCalc and OEProp as SharedPointer and therefore not cost overhead. Exception to this rule would be the functions writing grids, which will get an in-memory and a direct write solution.; Reason:; Currently OEProp sometimes exposes data in memory (such as Mulliken charges using wfn.set_array) and sometimes not (such as Multipoles only via stdout or outfile). The approach above would allow internal code use of SharedMatrices directly (OEPropCalc would get a public python API) and keep existing functionality untouched. Once the split is done, I would also split the GridEvaluation routines to either write a grid-XXX.dat (the existing functionality) or to keep the grids in memory (new functionality) and generate them with a grid taken from memory using the existing GridIterator interface. Are there any objections or is somebody else currently working on this?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1116:1183,expose,exposes,1183,https://psicode.org,https://github.com/psi4/psi4/issues/1116,1,['expose'],['exposes']
Security,"I've been battling intermittent (read: ~1/1000 runs) hangs of DFT runs that I think I've traced back to some rather mystifying bits of code in cubature.cc... (h/t for @rmcgibbo for lots of help here). The problems begin here:; https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/cubature.cc#L5106. (Don't mind the mismatch between line numbers I quote and line numbers in my gdb outputs -- there's some edits in a local version of psi4 we're using but I pinkie-promise they're not at all related to the code in-question! ...but to be very sure, I'll check that the same things happen with a truly vanilla build when I get home and have access to my ""normal""/vanilla psi4 build.). Which is where my runs always hang (on the [] access, specifically) when they do. If I pop open gdb, attach, and check what lebedev_mapping_ looks like, I see something somewhat disturbing:. ```; #4 psi::SphericalGrid::build (scheme="""", npoints=1852534357, points=0x1b2) at /tmp/garden-install.1c2be761ae20/psi4-1.6.1-desres02-c7/psi4/src/psi4/libfock/cubature.cc:5142; 5142 /tmp/garden-install.1c2be761ae20/psi4-1.6.1-desres02-c7/psi4/src/psi4/libfock/cubature.cc: No such file or directory.; (gdb) print lebedev_mapping_; $5 = std::map with 6 elements = {; [26] = 0,; [26] = 0,; [26] = 0,; [26] = 0,; [26] = 0,; [26] = 0; }; ```. Which is obviously not correct in two ways:; 1. There shouldn't be multiple entries for 26; 2. The entry for 26 should be 3. The threads are all deadlocking on the `[]` access, probably because multiple threads all tried to access an _unset_ entry of 26, wrote 0 to it in the process, and ran into each other. From what I can find `[]` isn't thread-safe (because of situations like this), and `.at()` should be used instead. Since `lebedev_mapping_` is a static member of `SphericalGrid`, all threads within their nice shiny `new SphericalGrid()`s inside `SphericalGrid::build` are still accessing the same global map, and mayhem is happening in the process. ...but the more dis",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2735:647,access,access,647,https://psicode.org,https://github.com/psi4/psi4/issues/2735,2,['access'],['access']
Security,Improve Vibrational Information Access,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1331:32,Access,Access,32,https://psicode.org,https://github.com/psi4/psi4/issues/1331,1,['Access'],['Access']
Security,"IntegralFactory. With density screening being removed from the TwoBodyAOInt object, this method of density screening testing can no longer be done. The current PR is designed to address this issue for when the density screening refactor happens. The aforementioned issue is addressed by implementing a new variable to the HF wavefunction, computed_shells_per_iter_, which keeps track of the number of shell quartets computed per SCF iteration. The computed_shells_per_iter_ variable is accessible to the user via Python, and thus can be used to conduct screening tests. In this way, density screening tests can be performed without the need for an ERI object. 2. As a bonus from the changes introduced by this PR, the DirectJK algorithm no longer has a need to print computed shell quartet counts to bench.dat. Bench.dat is used exclusively by the DirectJK object to dump the number of shell quartets computed per SCF iteration somewhere. That data is now accessible to the user in a cleaner fashion - it can be accessed through Python, in a manipulatable format. ## Notes; 1. Note that the changes in this PR have not been applied to the LinK portion of the DirectJK code. This is intentional, as Andy is planning on moving LinK out of DirectJK entirely, and editing the LinK code within DirectJK would interfere with that. Thus, the changes in this branch will be applied to LinK in a later update.; ; ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ X ] Addition of computed_shells_ member to JK object, which keeps track of number of shells computed during the JK build process.; - [ X ] Addition of computed_shells_per_iter_ member to HF wavefunction objects, which keep track of number of shells computed during each SCF iteration. This information can be accessed by the user via Python.; - [ X ] Modification of density screening tests in test_erisieve.py using the above class changes to allow the tests to run without construction of a",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2547:1864,access,accessible,1864,https://psicode.org,https://github.com/psi4/psi4/pull/2547,2,['access'],"['accessed', 'accessible']"
Security,"It's not much advertised, but the cc* modules can do some density fitting. In particular, it's found that:; * df-cc2 rhf gradients run and equal findif gradients. #2137; * df-ccsd rhf gradients run and differ from conventional by <1.e-6 . Jonathon finds that not all terms make use of DF and not hooked up to DF gradient tech.; * df-ccsd rhf energies run and differ from fnocc by 2e-7 for correlation energy (inconsistent ref energy so printing and qcvars differ more); * df-ccsd uhf energies print NYI msg; * df-ccsd rohf energies run and are plausible compared to conventional. But plumbing-wise, these aren't ready to activate:; * ccenergy vs. (fnocc, dfocc) choose a different reference. ccenergy uses CONV as the ints are needed anyways. others choose DF since that's the SCF_TYPE setting; * is DF used thoroughly enough to match DF-only implementations? if not, is it used in the expensive places so that it's worth calling instead of the reliable CONV?; * does df-rohf need validation and if so, from where?. Current state of accessibility for DF CCENERGY is that CCSD has been barred by it being a managed method, while CC2 could be accessed by turning on `cc_type=df`. Probably any DF in CCENERGY is accessible through `energy(""ccenergy"")` with a lot of manual option setting. When I converted CC2 to a managed method (locally), that broke the DF-CC2 gradient test https://github.com/psi4/psi4/blob/master/tests/pytests/test_gradients.py#L41 and reminded me that DF in CCENERGY was semi-active. For now, I plan to add an escape clause to the CC2 managed gradient so that the test can run but otherwise leave DF CCENERGY inaccessible and out of stdsuite and capabilities tables.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2710:981,validat,validation,981,https://psicode.org,https://github.com/psi4/psi4/issues/2710,4,"['access', 'validat']","['accessed', 'accessibility', 'accessible', 'validation']"
Security,"My pybind11 package was accepted in Fedora, so I started updating the psi4 package (which was at rc1!). It built fine on the released versions, but failed in the development version that has the newest GCC. The error(s) I get is. ```; cd /builddir/build/BUILD/psi4-926879e243ce44dcc0ecfe7cda680a01383982fd/objdir-x86_64-redhat-linux-gnu/psi4-core-prefix/src/psi4-core-build/src/psi4/libpsio && /usr/bin/g++ -I/builddir/build/BUILD/psi4-926879e243ce44dcc0ecfe7cda680a01383982fd/psi4/include -I/builddir/build/BUILD/psi4-926879e243ce44dcc0ecfe7cda680a01383982fd/psi4/src -isystem /usr/include/python3.6m -O2 -g -pipe -Wall -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 -m64 -mtune=generic -fopenmp -DUSING_CheMPS2 -O2 -DNDEBUG -fPIC -std=c++11 -std=gnu++11 -o CMakeFiles/psio.dir/aio_handler.cc.o -c /builddir/build/BUILD/psi4-926879e243ce44dcc0ecfe7cda680a01383982fd/psi4/src/psi4/libpsio/aio_handler.cc; /builddir/build/BUILD/psi4-926879e243ce44dcc0ecfe7cda680a01383982fd/psi4/src/psi4/libpsio/aio_handler.cc: In member function 'long unsigned int psi::AIOHandler::read(unsigned int, const char*, char*, psi::ULI, psi::psio_address, psi::psio_address*)':; /builddir/build/BUILD/psi4-926879e243ce44dcc0ecfe7cda680a01383982fd/psi4/src/psi4/libpsio/aio_handler.cc:91:48: error: 'bind' is not a member of 'std'; thread_ = std::make_shared<std::thread>(std::bind(&AIOHandler::call_aio,this));; ^~~~; /builddir/build/BUILD/psi4-926879e243ce44dcc0ecfe7cda680a01383982fd/psi4/src/psi4/libpsio/aio_handler.cc:91:48: note: suggested alternative: 'find'; thread_ = std::make_shared<std::thread>(std::bind(&AIOHandler::call_aio,this));; ^~~~; find; ```. Note that I've defined; ```; -DCUSTOM_C_FLAGS=-O2 -g -pipe -Wall -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -specs=/usr/lib/rpm/redha",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/631:636,secur,security,636,https://psicode.org,https://github.com/psi4/psi4/issues/631,1,['secur'],['security']
Security,Normal mode vectors are not accessible via Python API,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/940:28,access,accessible,28,https://psicode.org,https://github.com/psi4/psi4/issues/940,1,['access'],['accessible']
Security,"On my HPC cluster compute nodes do not have access to a user's home directory. This makes dftd3 crash with the following error:. RuntimeError: [Errno 13] Permission denied: '/home/s/spoel/dftd3_d6f02c65'. I checked the source code dftd3.f and found; ```; call get_environment_variable(""HOME"", homedir); write (*,*) trim(homedir); write(dtmp,'(a,''/.dftd3par.'',a)')trim(homedir),trim(ftmp) ; inquire(file=dtmp,exist=ex); ```. Do I need to hack the fortran to make this run? I realize this is not strictly a Psi4 problem...",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1960:44,access,access,44,https://psicode.org,https://github.com/psi4/psi4/issues/1960,1,['access'],['access']
Security,"PY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Dt.cube.ref"".; ```; The files that CMake tries to copy are not located in psi4-1.0/tests/cubeprop/. ```; [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/tests/cubeprop/; CMakeLists.txt input.dat Psi_a_3_1-B2.cube.ref.REMOVED.git-id; Da.cube.ref.REMOVED.git-id output.dat.ref Psi_a_4_3-A1.cube.ref.REMOVED.git-id; Db.cube.ref.REMOVED.git-id output.ref Psi_a_5_1-B1.cube.ref.REMOVED.git-id; Ds.cube.ref.REMOVED.git-id Psi_a_1_1-A1.cube.ref.REMOVED.git-id; Dt.cube.ref.REMOVED.git-id Psi_a_2_2-A1.cube.ref.REMOVED.git-id; [sfux@develop01 psi4-1.0]$; ```; At the end of the output of the setup script, the user is pointed to CMake log files:. ```; See also ""/scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeOutput.log"".; See also ""/scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeError.log"".; ```; These log files do not exist:; ```. [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeOutput.log; ls: cannot access /scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeOutput.log: No such file or directory; [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeError.log; ls: cannot access /scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeError.log: No such file or directory; ```. Complete log of the setup script:. ```. [sfux@develop01 psi4-1.0]$ ./setup --cc gcc --cxx g++ --fc gfortran --type release --prefix /cluster/apps/psi4/1.0/x86_64 --max-am-eri 7 --boost-incdir /cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/include --boost-libdir /cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64 --omp --blas /cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so --lapack /cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so --cxx11 --zlib-dir /usr --gsl-dir /cluster/apps/gsl/1.16/x86_64/gcc_4.8.2 --hdf5-dir /cluster/apps/hdf5/1.8.12/x86_64/gcc_4.8.2/serial --extra-cc-flags '-ftree-vectorize -march=corei7-avx -mavx' --extra-cxx-flags '-ftree-vectorize",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/581:2392,access,access,2392,https://psicode.org,https://github.com/psi4/psi4/issues/581,1,['access'],['access']
Security,"Poking around the PSIO machinery, it seems to me that it is meant to be capable of doing a sort of ""userland RAID0"", where IO is striped over multiple scratch directories. But as far as I can tell, this is not (in any shape or form) accessible to users, so the number of volumes is always 1. While this is a somewhat interesting feature, and I can imagine that there are circumstances where it would be useful, it comes at the cost of increasing code complexity in PSIO. Right now, it is the worst of both worlds: noone can benefit from the feature, and PSIO code is more complicated. So IMO, this feature should be either rehabilitated and documented, or stripped out. I am not volunteering for either, so this may very well be one of those ""for the sake of posterity"" issues.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2725:233,access,accessible,233,https://psicode.org,https://github.com/psi4/psi4/issues/2725,1,['access'],['accessible']
Security,Provide Read-only access to T1/T2 python side,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1344:18,access,access,18,https://psicode.org,https://github.com/psi4/psi4/pull/1344,1,['access'],['access']
Security,Psi4 Accessing More Cores Than Requested on our Cluster,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2747:5,Access,Accessing,5,https://psicode.org,https://github.com/psi4/psi4/issues/2747,1,['Access'],['Accessing']
Security,"Psi4 doesn't seem to be initializing global variables in a way that can be accessed by plugins. One example is `psi::outfile`. Steps to recreate:; - Create a new plugin. Tested on the scf template.; - Configure with `psi4 --plugin-compile`; - Adding the `-DCMAKE_BUILD_TYPE=Debug` also causes this.; - Build with `cmake --build (directory)`; - Running gives a segmentation fault. Output from valgrind with the debug build type gives the following.; ```; ==98805== Memcheck, a memory error detector; ==98805== Copyright (C) 2002-2024, and GNU GPL'd, by Julian Seward et al.; ==98805== Using Valgrind-3.23.0 and LibVEX; rerun with -h for copyright info; ==98805== Command: /home/user/psi4/bin/psi4 input.dat; ==98805== ; ==98805== Invalid read of size 8; ==98805== at 0x29BC741C: std::vector<char, std::allocator<char> >::size() const (stl_vector.h:988); ==98805== by 0x2B5A1476: psi::PsiOutStream::Printf(char const*, ...) (PsiOutStream.cc:70); ==98805== by 0x296A3066: psi::test::SCF::init_integrals() (scf.cc:79); ==98805== by 0x296A2C04: psi::test::SCF::SCF(std::shared_ptr<psi::Wavefunction>, psi::Options&) (scf.cc:56); ==98805== by 0x29697716: test (plugin.cc:134); ==98805== by 0x5FDD804: ??? (in /home/user/psi4/lib/psi4/core.cpython-310-x86_64-linux-gnu.so); ==98805== by 0x5FE0666: ??? (in /home/user/psi4/lib/psi4/core.cpython-310-x86_64-linux-gnu.so); ==98805== by 0x5F6A896: ??? (in /home/user/psi4/lib/psi4/core.cpython-310-x86_64-linux-gnu.so); ==98805== by 0x4FDC86: cfunction_call (methodobject.c:543); ==98805== by 0x4F741A: _PyObject_MakeTpCall (call.c:215); ==98805== by 0x4F34C5: UnknownInlinedFun (abstract.h:112); ==98805== by 0x4F34C5: UnknownInlinedFun (abstract.h:99); ==98805== by 0x4F34C5: UnknownInlinedFun (abstract.h:123); ==98805== by 0x4F34C5: UnknownInlinedFun (ceval.c:5893); ==98805== by 0x4F34C5: _PyEval_EvalFrameDefault (ceval.c:4181); ==98805== by 0x4FE0CE: UnknownInlinedFun (pycore_ceval.h:46); ==98805== by 0x4FE0CE: UnknownInlinedFun (ceval.c:5067); ==98805=",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3200:75,access,accessed,75,https://psicode.org,https://github.com/psi4/psi4/issues/3200,1,['access'],['accessed']
Security,Re-enables sanitizer flags with the CMake superbuild,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/845:11,sanitiz,sanitizer,11,https://psicode.org,https://github.com/psi4/psi4/pull/845,1,['sanitiz'],['sanitizer']
Security,"Recent forum interactions have exposed that even if the wavefunction class were documented, there's no page that tells users ""to find quantities, look on the wavefunction."" The importance of the wavefunction doesn't seem documented anywhere. This should be added to the Psi4 tutorial section, possibly as a new page on how to find quantities in Psi4.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2339:31,expose,exposed,31,https://psicode.org,https://github.com/psi4/psi4/issues/2339,1,['expose'],['exposed']
Security,Regularize Wfn and P::e psivar access for scalars and arrays,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1393:31,access,access,31,https://psicode.org,https://github.com/psi4/psi4/pull/1393,1,['access'],['access']
Security,"Related issue: [2577](https://github.com/psi4/psi4/issues/2577). Using a similar script as the previous reporter (using Psi4 1.9.1 and this build; `conda install -n $VENV_PSI4 psi4 numpy scipy dftd3-python dftd4-python gcp-correction python=$PYTHON_VERSION -c conda-forge`); ```; import psi4; psi4.set_options({'reference': 'uhf', 'stability_analysis': 'check'}); mol = psi4.geometry(""""""; 0 1; O; """""");; psi4.energy('wB97X-D3BJ/def2-TZVPD', molecule=mol); ```. I get the NYI message:; `psi4.driver.p4util.exceptions.ValidationError: Stability analysis not yet supported for XC functionals.`. Is the implementation of stability check for DFT on the roadmap for the near future? This would be very helpful especially when running UKS as we have observed that open shell systems often have instabilities in the SCF. . I also tried with `PBE/6-31G` and still get this exception. However, this [merged PR](https://github.com/psi4/psi4/pull/2849) implemented stability check for GGA functionals - is this a bug? The NYI message looks like it's triggered for every DFT functional ([see this line](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/scf_proc/scf_iterator.py#L578)), whereas [here](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/scf_proc/subclass_methods.py#L129) the program only raises the error if the functional is meta or needs vv10.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3236:516,Validat,ValidationError,516,https://psicode.org,https://github.com/psi4/psi4/issues/3236,1,['Validat'],['ValidationError']
Security,Replace deprecated defined(%hash) with exists(),MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/200:28,hash,hash,28,https://psicode.org,https://github.com/psi4/psi4/pull/200,1,['hash'],['hash']
Security,Sanitize CC Excited State Symmetry Labels,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2524:0,Sanitiz,Sanitize,0,https://psicode.org,https://github.com/psi4/psi4/issues/2524,1,['Sanitiz'],['Sanitize']
Security,"Since moving to LibInt2, the functions that access one-electron integrals, such as `ao_overlap()`, `ao_kinetic()`, ... behave differently when given no parameters (so the integrals are computed within the orbital basis set) and when given two basis set parameters (which is e.g. needed to access integrals in an auxiliary basis). The former gives an appropriate symmetric matrix with all integrals filled in. The latter produces a matrix with only the lower triangle filled with integrals and the upper triangle containing zeros. I think it would be better if the integral functions always filled in the other triangle (by symmetry) and returned a symmetric matrix. Here's the Python code that demonstrates the issue in case of the AO overlap integrals:; ```; import sys; import numpy as np; import psi4. psi4.set_memory('16 GB'); np.set_printoptions(threshold=sys.maxsize). mol = psi4.geometry(""""""; 0 1; O -0.0669991400 0.0000000000 1.4943547400; H 0.8157342700 0.0000000000 1.8658663900; H 0.0688551000 0.0000000000 0.5391427700. units angstrom; symmetry c1; """"""). psi4.set_options({'basis': 'aug-cc-pvdz',; 'df_basis_mp2':'aug-cc-pvdz-ri',; }). conv = psi4.core.BasisSet.build(mol,'BASIS', psi4.core.get_global_option('BASIS')); aux = psi4.core.BasisSet.build(mol,'DF_BASIS_MP2',"""", ""RIFIT"", psi4.core.get_global_option('DF_BASIS_MP2')). wfn = psi4.core.Wavefunction.build(mol, psi4.core.get_global_option('BASIS')); mints = psi4.core.MintsHelper(wfn.basisset()). Soo = np.asarray(mints.ao_overlap()); Sxx = np.asarray(mints.ao_overlap(aux,aux)). print(""Orbital overlap matrix""); print(Soo); print(""Auxiliary overlap matrix""); print(Sxx); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2985:44,access,access,44,https://psicode.org,https://github.com/psi4/psi4/issues/2985,2,['access'],['access']
Security,"Taken from the forum: http://forum.psicode.org/t/mbis-radial-moments/1990. ""Would it be possible to also compute/output the third radial moment of the atomic electron density, ie eq 24 from this paper?: https://pubs.acs.org/doi/10.1021/acs.jctc.6b00456. This would be really valuable for dispersion C6 coefficients, and should be readily accessible from the MBIS partitioned AIM densities."". @andyj10224 @zachglick thoughts?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2041:338,access,accessible,338,https://psicode.org,https://github.com/psi4/psi4/issues/2041,1,['access'],['accessible']
Security,"The code samples on the [Interface to NumPy page of the documentation](https://psicode.org/psi4manual/master/numpy.html) do not currently run. A forum report says that at the least, `psi4.Matrix` needs to be replaced with `psi4.core.Matrix`. Somebody should check that all the code on that page actually runs, and that it's accessible to non-experts. I've had to link a couple forum users to that page lately. This is a great project for a new developer who wants to learn the fundamentals of the manual.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2087:324,access,accessible,324,https://psicode.org,https://github.com/psi4/psi4/issues/2087,1,['access'],['accessible']
Security,"The following input file segfaults:; ```; molecule {; symmetry c1; H; H 1 1.0 ; }. set basis cc-pvdz; e, wfn = energy('fci', return_wfn=True); wfn.form_tpdm(); ```. The issue is that the driver [cleans up DETCI after every energy call](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc.py#L3579). That cleanup [frees the decode matrix](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/detci/ciwave.cc#L458). But `form_tpdm` works by [creating a new CI vector](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/detci/tpdm.cc#L56), which is [set with the decode matrix](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/detci/civect.cc#L115), which the driver freed, giving rise to a bad access exception. So which code is supposed to be responsible for DETCI cleanup? If that's the responsibility of `procrouting`, then `form_tpdm` is always going to segfault, so `form_tpdm` shouldn't be exposed to Python at all, and the user should have the TPDM be formed and kept via `set tpdm true`. If cleanup is not the responsibility of `procrouting`, then which code is supposed to be responsible for it? Leave it to the destructor?. DETCI design decisions are above my pay grade, so I'm leaving this to DGAS and CDS. The 1.4 paper is of course higher priority, but I need this feature working very badly, so I will start pinging on Tuesday.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1812:722,access,access,722,https://psicode.org,https://github.com/psi4/psi4/issues/1812,2,"['access', 'expose']","['access', 'exposed']"
Security,"The following input file; ```; molecule {; O; H 1 1.0 ; H 1 1.0 2 104.5; }. set solver_precondition subspace; set solver_n_guess 3. gradient('mp2/cc-pvdz'); ```; segfaults due to a bad access exception. While the segfault occurred on [this line](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/solver.cc#L290), the real problem is earlier. The loop structure [assumes](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/solver.cc#L280-L285) that `x_` and `b_` have the same number of elements. But the last method we ran [was `setup`](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/solver.cc#L163-L164), which [clears `x_`](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/solver.cc#L276). Even then, `setup` appears to have its own, unrelated problem. The preconditioner submatrix `A_` is [populated using the results of a `products_x()` call](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/solver.cc#L259-L272). But `x_` [consists of zero vectors](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/solver.cc#L251), so the submatrix guess procedure is just an overcomplicated way to write zero at present. That is probably very bad for the algorithm. Making matters even worse, I have not been able to find a standard conjugate gradients preconditioner with a name similar to ""SUBSPACE,"" so I cannot figure out how this algorithm was supposed to work. In short, this code is broken, and I would say beyond repair. Can I eliminate all the code for the ""SUBSPACE"" preconditioner from the `CGRSolver`? We'd just fall back to the ""JACOBI"" preconditioner, which is the default anyways.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1918:185,access,access,185,https://psicode.org,https://github.com/psi4/psi4/issues/1918,1,['access'],['access']
Security,"The following input:. ```; import psi4. mol = psi4.geometry(""""""; He 0 0 0; """"""). wfn = psi4.properties('scf/sto-3g'); ```. fails with the following exception:; ```; Traceback (most recent call last):; File ""/Users/daniel/Gits/psi4/psi4/run_psi4.py"", line 259, in <module>; exec(content); File ""<string>"", line 23, in <module>; File ""/Users/daniel/Gits/psi4/psi4/driver/driver.py"", line 826, in properties; optstash = driver_util._set_convergence_criterion('properties', lowername, 6, 10, 6, 10, 8); File ""/Users/daniel/Gits/psi4/psi4/driver/driver_util.py"", line 78, in _set_convergence_criterion; _method_exists(ptype, method_name); File ""/Users/daniel/Gits/psi4/psi4/driver/driver_util.py"", line 50, in _method_exists; raise ValidationError('%s method ""%s"" is not available.%s' % (Cptype, method_name, alternatives)). ValidationError: Properties method ""scf/sto-3g"" is not available.; ```. How `frequency` uses the code [here](https://github.com/psi4/psi4/blob/master/psi4/driver/driver.py#L1674) to overcome the issue. The `properties` call in Psi4 is located [here](https://github.com/psi4/psi4/blob/master/psi4/driver/driver.py#L754) and could use a similar fix (or a nice little function to prevent duplication with `frequency`).",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/934:727,Validat,ValidationError,727,https://psicode.org,https://github.com/psi4/psi4/issues/934,2,['Validat'],['ValidationError']
Security,"The laboratory server cannot be connected to the network, so I downloaded Psi4conda-1.3.2-py36-Linux-x86_64.sh from the pis4 official website to install it:; ```; [chenh@Pauling programs]$ ./Psi4conda-1.3.2-py36-Linux-x86_64.sh . Welcome to Psi4conda 1.3.2. Psi4conda will now be installed into this location:; /home/chenh/psi4conda. - Press ENTER to confirm the location; - Press CTRL-C to abort the installation; - Or specify a different location below. [/home/chenh/psi4conda] >>> /home/chenh/ly/sourcefolders/psi4conda; PREFIX=/home/chenh/ly/sourcefolders/psi4conda; installing: python-3.6.8-h0371630_0 ...; Python 3.6.8 :: Anaconda, Inc.; installing: blas-1.0-mkl ...; installing: ca-certificates-2019.1.23-0 ...; installing: dftd3-3.2.1-h84218bc_2 ...; installing: dkh-1.2-h173d85e_2 ...; installing: gcp-2.0.2-h84218bc_1 ...; installing: gdma-2.2.6-h0e1e685_6 ...; installing: intel-openmp-2019.3-199 ...; installing: libgcc-ng-8.2.0-hdf63c60_1 ...; installing: libgfortran-ng-7.3.0-hdf63c60_0 ...; installing: libint-1.2.1-hb4a4fd4_6 ...; installing: libstdcxx-ng-8.2.0-hdf63c60_1 ...; installing: simint-0.7-h642920c_1 ...; installing: gau2grid-1.3.1-h035aef0_0 ...; installing: gmp-6.1.2-h6c8ec71_1 ...; installing: gsl-2.4-h14c3975_4 ...; installing: libffi-3.2.1-hd88cf55_4 ...; installing: libxc-4.3.4-h7b6447c_0 ...; installing: metis-5.1.0-hf484d3e_4 ...; installing: mkl-2019.3-199 ...; installing: ncurses-6.1-he6710b0_1 ...; installing: openssl-1.1.1b-h7b6447c_1 ...; installing: tbb-2019.4-hfd86e86_0 ...; installing: xz-5.2.4-h14c3975_4 ...; installing: yaml-0.1.7-had09818_2 ...; installing: zlib-1.2.11-h7b6447c_3 ...; installing: glpk-4.65-h3ceedfd_2 ...; installing: hdf5-1.10.2-hba1933b_1 ...; installing: libedit-3.1.20181209-hc058e9b_0 ...; installing: libefp-1.5.0-h84097be_1 ...; installing: readline-7.0-h7b6447c_5 ...; installing: suitesparse-5.2.0-h9e4a6bb_0 ...; installing: tk-8.6.8-hbc83047_0 ...; installing: ambit-0.3-h137fa24_1 ...; installing: chemps2-1.8.9-h8c3",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1788:689,certificate,certificates-,689,https://psicode.org,https://github.com/psi4/psi4/issues/1788,1,['certificate'],['certificates-']
Security,"The third Travis test is timing out too much. This can be traced to the painfully slow download time for the GCC compiler. We have plans to replace this test with some plugin validation, using native GCC compilers to avoid the timeouts. For now, we'll just nuke it to allow the backlog of PRs through. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1552:175,validat,validation,175,https://psicode.org,https://github.com/psi4/psi4/pull/1552,1,['validat'],['validation']
Security,This PR adds explicit [permissions section](https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#permissions) to workflows. This is a security best practice because by default workflows run with [extended set of permissions](https://docs.github.com/en/actions/security-guides/automatic-token-authentication#permissions-for-the-github_token) (except from `on: pull_request` [from external forks](https://securitylab.github.com/research/github-actions-preventing-pwn-requests/)). By specifying any permission explicitly all others are set to none. By using the principle of least privilege the damage a compromised workflow can do (because of an [injection](https://securitylab.github.com/research/github-actions-untrusted-input/) or compromised third party tool or action) is restricted.; It is recommended to have [most strict permissions on the top level](https://github.com/ossf/scorecard/blob/main/docs/checks.md#token-permissions) and grant write permissions on [job level](https://docs.github.com/en/actions/using-jobs/assigning-permissions-to-jobs) case by case.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2723:167,secur,security,167,https://psicode.org,https://github.com/psi4/psi4/pull/2723,12,"['authenticat', 'inject', 'secur']","['authentication', 'injection', 'security', 'security-guides', 'securitylab']"
Security,"This PR exposes EOMCC oscillator strengths to psivars and makes other miscellaneous changes:. - Adds a comment to the TD-DFT code to disambiguate between eigenvectors of two different matrices.; - Renames a variable created earlier in the `cc` cleanup series.; - Makes the `oscillator_strength.cc` and `ex_oscillator_strength.cc` files more similar; - Begins changing `cc47` to newstyle.; - Adds refactor TODOs. **That said**, the EOMCC code currently only supports irrep-separated indexing. The irrep-combined indexing isn't easily obtainable due to the awkward way `cceom` passes information to `ccdensity`. While I could fix this, I'll save that until after `ccdensity` has a wavefunction, so the task becomes easier. I'm happy to make an issue so we don't forget. ## Checklist; - [x] Modified `cc47` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2514:8,expose,exposes,8,https://psicode.org,https://github.com/psi4/psi4/pull/2514,1,['expose'],['exposes']
Security,"This is the continuation of a discussion that started in another issue (#504). Formatted checkpoint files or Molden files are not great as a container format. It makes sense to have them as an output format (because some other programs can already read them.) However, they are not suitable as an extensible container format:. 1) They lack an open way of extending/improving the format in future.; 2) They are just defined ad hoc as the file format that is being produced by some code.; 3) There is no unambiguous document specifying these formats. A format based on HDF5 would make more sense. It has its deficiencies too unfortunately: the format specification is very complex, with only one (open source) library implementing it. Something simpler would be nice, e.g. a ZIP file containing the following would make a lot of sense:. - An index file (XML?) with metadata for all the data in the archive.; - One file per (big) array: binary data with some header to specify byte order, data type, ... e.g. the npy format. (See https://docs.scipy.org/doc/numpy-dev/neps/npy-format.html); - Other text or log files. This similar to the opendocument specification, where it seems to survive for many years now. The main disadvantage of such a zip file, compared to HDF5, is that you cannot easily access a part of an array without unzipping the entire array. You can however access one entire array without unzipping the other ones.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/562:1294,access,access,1294,https://psicode.org,https://github.com/psi4/psi4/issues/562,2,['access'],['access']
Security,"This is the mega-issue for the cleanup of excited-state variables. I come to this as a spinoff of the cc modernization mega-issue, which is a spin-off of the density sanitizing mega-issue. The goal of this mega-issue is to synchronize variable names across TDDFT, EOM, and ADC, per the standard introduced in #2462 and amended slightly in #2475. ### The Standard; We support the following access patterns:; ```; f""{method} ROOT 0 ({initial_state}) -> ROOT {irrep_idx} ({target_state}) EXCITATION ENERGY""; f""{method} TD-HF ROOT 0 -> ROOT {global_idx} EXCITATION ENERGY; f""{method} ROOT 0 -> ROOT {global_idx} EXCITATION ENERGY - {transition} TRANSITION; ```. - `{method}` should include both the _family_ of the method and the _specific method_ used. For example, both `CC` and `CC3`.; - `{global_idx}` is the index of the root, ordered by energy, in the space of all roots.; - `{irrep_idx}`is the index of the root, ordered by energy, in the space of roots of that irrep. This should **never** be larger than `global_idx` and is identical `global_idx` for molecules without symmetry.; - `{initial_state} ^ {target_state} = {transition}`. ### The Status. - [x] DFT; - [x] #2462 - initial cleanup; - [x] (part of) #2477 - set TD-DFT variables with names starting TD-SCF or TD-DFT (maybr both?) in addition to TD-fctl; - [ ] EOM; - [x] #2475 - variables set directly in `cceom`; - [x] Variables set directly in `ccdensity`; - [x] #2514 - Oscillator strengths; - [x] #2525 - Einstein coefficients, rotation strengths; - [x] #2538 - All access patterns ; - [ ] Variables set indirectly, via oeprop; - [X] #2479 - remove mutlipole component variables from being set in oeprop; - [x] #2485 - condense multipole setting functions into one; - [ ] #2541 Rename multipole variables from `oeprop` according to the standard; - [x] ADCC; - [x] #2513 ; - [ ] Final cleanup pass",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2486:166,sanitiz,sanitizing,166,https://psicode.org,https://github.com/psi4/psi4/issues/2486,3,"['access', 'sanitiz']","['access', 'sanitizing']"
Security,"Using 080dba6, this input, which doesn't produce any wavefunction data,; ```python; import json. import numpy as np. import psi4; import qcelemental as qcel. bohr2ang = qcel.constants.bohr2angstroms. geometry = (; np.asarray(; [; 0.0,; 0.0,; -0.1294769411935893,; 0.0,; -1.494187339479985,; 1.0274465079245698,; 0.0,; 1.494187339479985,; 1.0274465079245698,; ]; ); / bohr2ang; ). json_input = {; ""schema_name"": ""qc_schema_input"",; ""schema_version"": 1,; ""molecule"": {; ""geometry"": geometry.tolist(),; ""symbols"": [""O"", ""H"", ""H""],; },; ""driver"": ""gradient"",; ""model"": {""method"": ""ccsd"", ""basis"": ""def2-tzvp""},; ""keywords"": {""scf_type"": ""direct"", ""df_scf_guess"": ""false""},; }. ret = psi4.schema_wrapper.run_qcschema(json_input). stub = ""water_ccsd_gradient_psi4""; with open(f""{stub}.qcschema.out"", ""w"") as handle:; handle.write(ret.json()); ```; validated with `qcschema.validate` produces; ```; Traceback (most recent call last):; File ""./qcschema_validate.py"", line 17, in <module>; qcschema.validate(data=json.loads(p.read_text()), schema_type=args.schema_type); File ""/home/eric/development/json/MolSSI_QC_JSON_Schema/qcschema/validate.py"", line 16, in validate; jsonschema.validate(data, schema); File ""/home/eric/.pyenv/versions/miniconda3-4.7.12/envs/cclib_berquist_37/lib/python3.7/site-packages/jsonschema/validators.py"", line 934, in validate; raise error; jsonschema.exceptions.ValidationError: None is not of type 'object'. Failed validating 'type' in schema['properties']['wavefunction']:; ...; On instance['wavefunction']:; None; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2242:842,validat,validated,842,https://psicode.org,https://github.com/psi4/psi4/issues/2242,10,"['Validat', 'validat']","['ValidationError', 'validate', 'validated', 'validating', 'validators']"
Security,Validate DOCC/SOCC; Cleanup Occupation Code in HF,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1637:0,Validat,Validate,0,https://psicode.org,https://github.com/psi4/psi4/pull/1637,1,['Validat'],['Validate']
Security,ValidationError: Unrecognized point group bits: 96,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/948:0,Validat,ValidationError,0,https://psicode.org,https://github.com/psi4/psi4/issues/948,1,['Validat'],['ValidationError']
Security,"We (@amjames and @robertodr) propose a partial rewrite of the coupled cluster and DPD functionalities in Psi4.; The main motivation is to make the pending [PR #1061, Expose wavefunction and amplitudes to python](https://github.com/psi4/psi4/pull/1061) available satisfying the constraints and comments offered by @dgasmith and @amjames.; Exposing the T and Lambda amplitudes to the Python layer will have a series of beneficial consequences:; - It will be possible to experiment with these quantities easily.; - Writing and reading amplitudes to file ([HDF5](https://portal.hdfgroup.org/display/support), [Zarr](https://zarr.readthedocs.io/en/stable/), or any other format) is more easily managed from Python, especially if we need to preserve compatibility with Windows.; - Restart capabilities.; ## Summary of proposed changes (incomplete); ### cc* modules; - Create a single `cc` folder where all the other `cc*` folders will live as subfolders.; - Provide a top-level `CCWavefunction` class, partly modeled on the existing `CIWavefunction` class to overtake the whole implementation of the CC functionality.; - The class will manage `MOInfo`,` Params`, `DPD` as local data members. This will ensure that the lifetime of these objects is tied to a particular instance of a CC calculation.; - The class will contain the various steps in a CC calculation as methods. ; - Move from tstart-tstop to the new timers timer_on-timer_off; ### DPD Library ; - Remove use of static global machinery from DPD member functions. ; - Implement proper copy/move assign/construct for the DPD object. ; - Implement internal structs with proper constructors as needed.; - Replace c-style arrays/raw pointers with appropriate smart pointer/containers ; - Refactor shared state (shared by multiple DPD instances, currently dpd_gbl struct) into singleton(s). ; - **Note**: Memory tracking in its current form is not thread safe and relies on the client code properly locking calls to function that need to perform alloca",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1247:166,Expose,Expose,166,https://psicode.org,https://github.com/psi4/psi4/issues/1247,1,['Expose'],['Expose']
Security,"When a symmetric molecule is run explicitly in `C1` symmetry the `fnocc` DF-CCSD(T) calculations seems to initialise [Mintshelper](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/mintshelper.cc#L168) when accessing the 1e-integrals given the output below (molecule+detailed basis set info are printed). CONV-CCSD(T) does not print this, but its 1e-ints come from IWL files I think.; For DF-CC they are requested here:; https://github.com/psi4/psi4/blob/master/psi4/src/psi4/fnocc/df_ccsd.cc#L727. Maybe a problem with missing cached integrals and the re-computation triggers the Mintshelper init?. DF-CCSD(T) output example:; ```; ...; ==> Input parameters <==. Freeze core orbitals? no; Use frozen natural orbitals? yes; r_convergence: 1.000e-07; e_convergence: 1.000e-06; Number of DIIS vectors: 8; Number of frozen core orbitals: 0; Number of active occupied orbitals: 5; Number of active virtual orbitals: 8; Number of frozen virtual orbitals: 0. Molecular point group: c1; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.079135765818 15.994914619570; H 0.000000000000 -0.707106781187 0.627971015369 1.007825032230; H 0.000000000000 0.707106781187 0.627971015369 1.007825032230. -AO BASIS SET INFORMATION:; Name = 3-21G; Blend = 3-21G; Total number of shells = 9; Number of primitives = 15; ...; ```. example input:; ```; molecule mol {; symmetry c1; O; H 1 R; H 1 R 2 A; }; mol.R = 1.0; mol.A = 90.0. set cc_type df; energy('fno-ccsd(t)/3-21g'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1957:221,access,accessing,221,https://psicode.org,https://github.com/psi4/psi4/issues/1957,1,['access'],['accessing']
Security,"When requesting the wavefunction as part of the result via the protocol in QCEngine only the `orbitals_and_eigenvalues` option works successfully. I think this is due to an error in the returned dictionary here https://github.com/psi4/psi4/blob/5de566ed7d4bf51816c673c4ea1def449e4e8618/psi4/driver/schema_wrapper.py#L324.I think this line should say `""density_a"": ""scf_density_a"",`. QCEngine error:; ```; QCEngine Unknown Error: Traceback (most recent call last):; File ""/Users/joshuahorton/miniconda3/envs/qcfractal/lib//python3.7/site-packages/psi4/driver/schema_wrapper.py"", line 400, in run_qcschema; ret = qcel.models.Result(**ret_data, stdout=_read_output(outfile)); File ""/Users/joshuahorton/miniconda3/envs/qcfractal/lib/python3.7/site-packages/qcelemental/models/results.py"", line 520, in __init__; super().__init__(*args, **kwargs); File ""pydantic/main.py"", line 344, in pydantic.main.BaseModel.__init__; File ""pydantic/main.py"", line 900, in pydantic.main.validate_model; File ""pydantic/fields.py"", line 556, in pydantic.fields.ModelField.validate; File ""pydantic/fields.py"", line 732, in pydantic.fields.ModelField._apply_validators; File ""pydantic/class_validators.py"", line 280, in pydantic.class_validators._generic_validator_cls.lambda4; File ""/Users/joshuahorton/miniconda3/envs/qcfractal/lib/python3.7/site-packages/qcelemental/models/results.py"", line 463, in _wavefunction_protocol; ret_wfn[key] = wfn[key]; KeyError: 'scf_density_ba'; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1987:1050,validat,validate,1050,https://psicode.org,https://github.com/psi4/psi4/issues/1987,1,['validat'],['validate']
Security,"With the df-mp2 wavefunction object in Python, is there any way to get access to the content of the `energies_` map other than through the global process state (`core.get_variable()`)?. https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfmp2/mp2.cc#L792-L800",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/642:71,access,access,71,https://psicode.org,https://github.com/psi4/psi4/issues/642,1,['access'],['access']
Security,"``` bash; $ time psi4 --help. real 0m5.980s; user 0m1.279s; sys 0m4.693s; ```. This is done with b8a2f55b719d3. Why is psi4 so extremely slow to start? I have it both with g++/4.9.2 and icpc/2015.0.090 on multiple computers. As it is the sys time that is very high, I've used strace which tells me:. ```; % time seconds usecs/call calls errors syscall; ------ ----------- ----------- --------- --------- ----------------; 99.99 3.413450 1 5057853 times; 0.01 0.000177 4 43 mmap; 0.00 0.000082 2 37 brk; 0.00 0.000079 79 1 execve; 0.00 0.000071 4 16 close; 0.00 0.000032 2 18 fstat; 0.00 0.000018 1 30 mprotect; 0.00 0.000016 1 15 open; 0.00 0.000015 15 1 1 access; 0.00 0.000000 0 14 read; 0.00 0.000000 0 1 munmap; 0.00 0.000000 0 2 rt_sigaction; 0.00 0.000000 0 1 rt_sigprocmask; 0.00 0.000000 0 2 getdents; 0.00 0.000000 0 1 getrlimit; 0.00 0.000000 0 1 arch_prctl; 0.00 0.000000 0 2 futex; 0.00 0.000000 0 1 sched_getaffinity; 0.00 0.000000 0 1 set_tid_address; 0.00 0.000000 0 1 openat; 0.00 0.000000 0 1 set_robust_list; ------ ----------- ----------- --------- --------- ----------------; 100.00 3.413940 5058042 1 total; ```. Too much time sampling?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/89:657,access,access,657,https://psicode.org,https://github.com/psi4/psi4/issues/89,1,['access'],['access']
Security,"`initialize_lebedev` wasn't ever actually called. Since we're using c++11 elsewhere, we can just use an initializer_list to build `lebedev_mapping_` and skip all this `initialize_lebedev` nonsense. Also changes the technically-thread-unsafe `[]` to a `.at()` so this can't be re-broken later. Now, it turns out that there's a lot more ado about `SpherialGrid` and `RadialGrid` and cubature.cc in general, but, we're discussing that over in #2736 . This PR's purpose is JUST to fix the nasty bug that could cause parallel code to hang (if multiple threads tried to touch `lebedev_mapping_` at once, and write a value because `[]` access fills-when-missing, one or more thread could get stuck forever in a tree-that-has-become-a-loop). See #2736 for more details on who/what/where/when/why.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2743:629,access,access,629,https://psicode.org,https://github.com/psi4/psi4/pull/2743,1,['access'],['access']
Security,"advisor.py cmake); shows up in p4dev; =========================================; (B) flexible usage; =========================================; # (1) get code from GitHub; git clone https://github.com/psi4/psi4.git && cd psi4; # (2.0) consider dependency options; conda/psi4-path-advisor.py env -h; # (2.1) generate env spec file from codedeps.yaml.; conda/psi4-path-advisor.py env -n p4dev310 --python 3.10 --disable addons --lapack openblas; #> conda env create -n p4dev310 -f /home/psi4/env_p4dev310.yaml && conda activate p4dev310; # (2.2) edit env_p4dev310.yaml to customize software packages.; # (2.3) issue suggested or customized command to create and activate conda env.; conda env create -n p4dev310 -f /home/psi4/env_p4dev310.yaml && conda activate p4dev310; ```; - [x] For packagers or other high-level what-does-it-need folks, dependency info is programmatically available now through codedeps.yaml. ## Dev notes & details; - [x] add `codedeps.yaml` file that makes dependency and ecosystem information programmatically accessible. Presently useful for (1) people and (2) the in-repo psi4-path-advisor.py script, but more uses can follow.; - [x] add in-repo `conda/psi4-path-advisor.py` script to serve as build helper. this is the main point of the PR. will elaborate more in future.; - [x] there's a tidy new way of defining flags that are essential for the compiler _with_ the compiler in `CMAKE_<LANG>_COMPILER` instead of cluttering up the user choice var `CMAKE_<LANG>_FLAGS`. This is especially relevant for intel compilers that need gcc passed. There's something that's not set up right yet for Intel Clang. Thus, we need to pass `CMAKE_<LANG>_COMPILER_ARG1` through to psi4 subproject and all other externals.; - [x] let ctest tests run whether old or new d3 and gcp implementations present.; - [x] don't expect a pylibefpConfig.cmake for libefp detection. this is the case with the c-f package -- I'll probably put it back later when libefp/pylibefp repos combine.; - [x] I was ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3021:2148,access,accessible,2148,https://psicode.org,https://github.com/psi4/psi4/pull/3021,1,['access'],['accessible']
Security,"all this at every reinterpret_coordentry, but that's not feasible for psi4 Mol. A good newdev starter project would be (for impossible reconciliations) to keep track of the least offending combo, and print out a summary of what rules it's violating.; - Function `reconcile_nucleus` addresses problems (1) can't specify atoms by atomic number, (2) can't specify masses by mass number, (3) faced with A, Z, E, real/ghost, and label `@C_special@12.1`, all as inputs, need to make sure (a) extracting as much user info as possible, (b) not allowing contradictory info, and (c) filling in everything else from periodictable. Like chgmult, fn handles this by defining rules and candidate values, and letting itertools do the rest. Expand atom label spec so can specify isotope and atomic number e.g., `Gh(27@58.933)` or `2H_deut`.; - Validates atoms-too-close all at once, rather than per-atom, which can run into units, coordsys, and? old CoordEntry trouble.; - New `from_dict` fn takes a fully validated and defaulted molrec dict and constructs a Mol. psi4 fn is in export_mints.cc, and qcdb fn is in molecule.py.; - New `to_dict` fn serializes Mol into molrec dict. This fn in molecule.py is shared by psi4 & qcdb Mol classes. For the moment (not mandatory), this dict passes again through `from_arrays` and output is compared to make sure (1) resulting dict is pure and (2) Mol hasn't been tampered with in an unphysical way.; - `from_arrays` used internally to qcdb.Molecule for decomposing and reconstituting Mol into np arrays for fragmentation and alignment (potentially reordering); - BasisSet molecule handover (happens a lot to construct py basis for c++ mol and hand it back; also happens once per atom for SAD) that used to use create_psi4_string_from_molecule & create_molecule_from_string now uses to_dict & from_dict. So even though all this serialization tech isn't hooked up to `molecule {...}`, it's still getting exercised a lot.; - ISAPT calcs may well need to use `from_arrays` rather",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/834:7022,validat,validated,7022,https://psicode.org,https://github.com/psi4/psi4/pull/834,1,['validat'],['validated']
Security,"any float or array var set ?|; | | | variable |–|y|y| return float or array var value |; | | | set_variable |–|y|y| set float/Matrix/ndarray var value |; | | | del_variable |–|y|y| unset float or array var |; | | | variables |–|y|y| return dict of all float or array vars |; | | clean_variables | clean_variables |–|–|y| unset all float or array vars |. ### Original Proposal (static). | Now `Wavefunction` | Now `psi4.core` | Proposed Both | doc |; |-----|----|----|---|; | | has_variable | has_variable | is float var set ? |; | get_variable | get_variable | variable | return float var value |; | set_variable | set_variable | set_variable | set float var value |; | | | del_variable | unset float var |; | |; | variables | get_variables | variables | return dict of float vars |; | | clean_variables | clean_variables | unset all float vars |; | |; | | | has_array_variable | is array var set ? |; | get_array | get_array_variable | array_variable | return array var value |; | set_array | set_array_variable | set_array_variable | set array var value |; | | | del_array_variable | unset array var |; | |; | arrays | get_array_variables | array_variables | return dict of array vars |; | | | clean_array_variables | unset all array vars |. ### Questions. - [x] No, nothing will break immediately. Use of old syntax will yield runtime `FutureWarning`s if called from Python or compile-time `PSI_DEPRECATED` warnings if called from C++. Old syntax will stop working in Psi4 v1.4. - [x] Note that QCDB (common driver) and QCSchema (I think) merge float vars and array vars into single ~dict. Do we want to consider single access / multi storage in the C++ classes so number of accessors is halved? **EDIT** Answer: yes (see table above), going with multi storage C-side, multi access C-side, unified access Py-side. - Any other changes to suggested syntax. - Whole point of posting this as a PEP instead of leaving it on core-dev is so users/downstream/interested parties can weigh in. Please do so.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1375:3273,access,access,3273,https://psicode.org,https://github.com/psi4/psi4/issues/1375,4,['access'],"['access', 'accessors']"
Security,"b.Molecule or through just np arrays. Has ""seed"" argument so you can forcibly split intramolecularly or close-bound intermol.; - Selected steps (for performance) are now in numpy, as a result, `geometry(np_out=True)` and `xyz(np_out=True)` are avail to skip the cast-back-to-list step. Also, `to_arrays` returns geom, mass, elez, etc. as numpy arrays, rather than needing to iterate over natom.; - `psi4.core.Molecule`; - add rotational_symmetry_number; - export rotor_type; - faster BFS algorithm hooked up to psi4.Mol, too. Depending on Mol type, returns numpy split arrays, single large Mol with atoms rearranged and fragmentation embedded, and/or list of indiv Mols, one for each fragment. Radically pare down auto_fragments/old BFS code.; - `units` no longer exported as a property. has getter/setter, and the getter returns strings, not `Molecule::GeometryUnits` objects.; - _Both_ psi4.core.Molecule && qcdb.Molecule; - Enhanced `add_atom` to take label (in add'n to symbol) and mass number, so is a full fledged CoordEntry entry point; - Add `mass_number` storage and accessor. In Psi, this is just a pass-through – nothing done with it. Stores isotope mass number if mass corresponds to valid nuclide, -1 otherwise or unknown.; - Fragmentation member data public access. Rename fragments --> get_fragments; similar for fragment_types, fragment_charges, fragment_multiplicities. Only fisapt code was using this. For setters, added `set_fragmentation_pattern` that sets them all at once.; - Added `input_units_to_au` getter/setter; checks physical reasonableness.; - Sets input_units_to_au whenever set_units called, rather than as extra step.; - Finally add a `com_fixed` fn to mirror `orientation_fixed`. In qcdb.Mol, also a `fix_com`.; - `create_molecule_from_string` was doing all kinds of contortions with fr_types and efp_chg/mult to the extend that fragment* arrays were not the same length. Function to be retired shortly, so papered over.; - Psi has long had the problem that set_mult",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/834:3214,access,accessor,3214,https://psicode.org,https://github.com/psi4/psi4/pull/834,1,['access'],['accessor']
Security,"b1cef136d/psi4/src/psi4/libfunctional/functional.h#L40-L43) A field is added for ""kinetic"" functionals for future-proofing, but error(s) will be encountered trying to use them.; - [ ] The inheritance structure of the `Functional` class was improved by moving LibXC specific code into the LibXCFunctional class; - [ ] The `Superfunctional` class was modified to have only a single list of functionals, as opposed to a separate list of X and C functionals. This removed the need for special-case behavior for XC functionals -- See [here](https://github.com/psi4/psi4/blob/1813c0c31e3049511f558a78db15bb2290257650/psi4/src/psi4/libfunctional/superfunctional.cc#L223) and [here](https://github.com/psi4/psi4/blob/1813c0c31e3049511f558a78db15bb2290257650/psi4/driver/procrouting/dft/superfunctionals.py#L90-L92); - [ ] Unused variables and definitions were cleaned up. ## Questions; - [ ] I have all but removed `libxc_xc_func_`... Is there any use for this that I can't think of?; - [ ] Currently, X and C functionals can be accessed with `x_functionals()` and `c_functionals()`. Neither of these return XC functionals as these were previously included in C functionals. These simply create a new filtered vector, which isn't efficient or clean. Perhaps these should be removed in favor of filtering from the Python side?; - [ ] GRAC functionals are still split into X and C functionals. The effect of my changes on this needs to be tested, and perhaps the GRAC functionals should be unified. ## Checklist; - [ ] Remove all `TODO`s corresponding to the above questions; - [ ] Double check that I haven't used `x_functionals()` anywhere that I might want XC functionals -- See question 2; - [ ] Double check that I haven't broken GRAC; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - I have run all DFT tests on my system, but perhaps you would want to confirm?; - [ ] Edit",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3203:2050,access,accessed,2050,https://psicode.org,https://github.com/psi4/psi4/pull/3203,1,['access'],['accessed']
Security,"ber, mass, ghosting, extra-label in mol spec.; * **Developer Interest**; - [x] `*.Molecule` forgot `charge_specified` and `multiplicity_specified` attributes. They were only used once in deciding mult defaulting in the SCF and that logic is now handled at mol parsing time.; - [x] `*.Molecule` forgot `create_molecule_from_string()` and good riddance. Also `*.Molecule` `init_with_xyz` (all the format variations can be handled by plain `from_string`. There's an optional `dtype` if you want to be specific.; - [x] Remove singlet/doublet defaulting logic in `Wavefunction::common_init()`, as this is taken care of by mol init; - [x] In keywords (`read_options`), `EFP_POL`, `QMEFP_POL`, `EFP_POL_DAMPING`, all `POL` --> `IND`.; - [x] Main `molutil.set_geometry()` that all psithon and psiapi calls use to process user molecule switch from c-side parsing to `qcdb.molparse.from_string()` parsing. This fn handles QM mol, EFP frag, and PubChem contents.; - [x] `libefp` accessed through `PylibEFP` and `-DENABLE_libefp=ON` activates both; - [x] `psi4.core.Molecule.molecule_from_string(string)` constructor calls py-side parsing. Can override string contents with `fix_com`, `fix_orientation`, `fix_symmetry` args. `string` can have QM mol, EFP frag, and pubchem contents. ## Questions; - [ ] @robertodr, feel free to elaborate PCMSolver changes; - [x] ~**Everyone** the previous PR #965 gets both Mol classes to a point where they _can_ be instantiated by py-side parsing (or arrays, or dict). Do we want the second set of changes above where inputparser is calling py-side parsing into 1.2? It will require PylibEFP. SCF/EFP will remain c-side.~; - [x] @robertodr https://github.com/psi4/psi4/pull/953#discussion_r203921398 full test suite (incl. pcm) passes with form_F commented out. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - [ ] symmetrize pubc",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/953:3371,access,accessed,3371,https://psicode.org,https://github.com/psi4/psi4/pull/953,1,['access'],['accessed']
Security,"bject. 2. As a bonus from the changes introduced by this PR, the DirectJK algorithm no longer has a need to print computed shell quartet counts to bench.dat. Bench.dat is used exclusively by the DirectJK object to dump the number of shell quartets computed per SCF iteration somewhere. That data is now accessible to the user in a cleaner fashion - it can be accessed through Python, in a manipulatable format. ## Notes; 1. Note that the changes in this PR have not been applied to the LinK portion of the DirectJK code. This is intentional, as Andy is planning on moving LinK out of DirectJK entirely, and editing the LinK code within DirectJK would interfere with that. Thus, the changes in this branch will be applied to LinK in a later update.; ; ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ X ] Addition of computed_shells_ member to JK object, which keeps track of number of shells computed during the JK build process.; - [ X ] Addition of computed_shells_per_iter_ member to HF wavefunction objects, which keep track of number of shells computed during each SCF iteration. This information can be accessed by the user via Python.; - [ X ] Modification of density screening tests in test_erisieve.py using the above class changes to allow the tests to run without construction of an ERI object. ## Questions; - [ ] Currently, only the density screening tests in test_erisieve.py use the new computed_shells_per_iter_ framework to test screening. Other tests in test_erisieve.py perform their tests using a generated ERI object. Should use of computed_shells_per_iter_ comparisons be applied to other tests in test_erisieve.py, as well?. ## Checklist; - [ X ] Tests added for any new features; - [ X ] Docs added for any new features; - [ X ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ X ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2547:2726,access,accessed,2726,https://psicode.org,https://github.com/psi4/psi4/pull/2547,1,['access'],['accessed']
Security,"cratch/appssf/psi4-1.0/tests/cubeprop/; CMakeLists.txt input.dat Psi_a_3_1-B2.cube.ref.REMOVED.git-id; Da.cube.ref.REMOVED.git-id output.dat.ref Psi_a_4_3-A1.cube.ref.REMOVED.git-id; Db.cube.ref.REMOVED.git-id output.ref Psi_a_5_1-B1.cube.ref.REMOVED.git-id; Ds.cube.ref.REMOVED.git-id Psi_a_1_1-A1.cube.ref.REMOVED.git-id; Dt.cube.ref.REMOVED.git-id Psi_a_2_2-A1.cube.ref.REMOVED.git-id; [sfux@develop01 psi4-1.0]$; ```; At the end of the output of the setup script, the user is pointed to CMake log files:. ```; See also ""/scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeOutput.log"".; See also ""/scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeError.log"".; ```; These log files do not exist:; ```. [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeOutput.log; ls: cannot access /scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeOutput.log: No such file or directory; [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeError.log; ls: cannot access /scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeError.log: No such file or directory; ```. Complete log of the setup script:. ```. [sfux@develop01 psi4-1.0]$ ./setup --cc gcc --cxx g++ --fc gfortran --type release --prefix /cluster/apps/psi4/1.0/x86_64 --max-am-eri 7 --boost-incdir /cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/include --boost-libdir /cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64 --omp --blas /cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so --lapack /cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so --cxx11 --zlib-dir /usr --gsl-dir /cluster/apps/gsl/1.16/x86_64/gcc_4.8.2 --hdf5-dir /cluster/apps/hdf5/1.8.12/x86_64/gcc_4.8.2/serial --extra-cc-flags '-ftree-vectorize -march=corei7-avx -mavx' --extra-cxx-flags '-ftree-vectorize -march=corei7-avx -mavx' --extra-fc-flags '-ftree-vectorize -march=corei7-avx -mavx' -D CMAKE_VERBOSE_MAKEFILE=ON -D HDF5_sz_LIBRARY_RELEASE=/cluster/apps/szip/2.1/x86_64/gcc_4.8.2/lib/libsz.so",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/581:2586,access,access,2586,https://psicode.org,https://github.com/psi4/psi4/issues/581,1,['access'],['access']
Security,dftd3 crash trying to access home directory,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1960:22,access,access,22,https://psicode.org,https://github.com/psi4/psi4/issues/1960,1,['access'],['access']
Security,"dos. - [x] `msgpack-python` added as req'd dependency. this keeps numpy arrays serialized when communicating in schema; - [x] any fns mirroring `sherrill_gold_standard` or `allen_focal_point` need to be reformatted and registered with `register_composite_function`; - [x] extrapolation functions for composite need to be registered with register_xtpl_function; - [x] CBS and xtpl functions need to be called as strings, not objects. So `energy('cbs', scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme='scf_xtpl_helgaker_3')` not `energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3)`.; - [x] no longer always evaluating gradient before Hessian to test safety of projecting rotations. Instead assuming unsafe. Can pass ref_gradient array to test on or `set findif fd_project` T/F explicitly to control.; - [x] `json_ret = psi4.schema_wrapper.run_qcschema(json_input)` not `json_ret = psi4.json_wrapper.run_json(json_input)`. json_ret is now an object, so `.` access, not dictionary. The old schema runner uses a schema circa pre-2018 and we've warned it's deprecated for about a year, so I went ahead and updated all the tests to the new/current run_qcschema.; - [x] Pre-ddd, CBS wrapper issues a `clean()` btwn calcs. Plain string modelchem calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. With ddd, this is no longer happening, so for occasional string modelchem calcs (that is, `energy|gradient|hessian(""mtd/bas"")` only), you may need to add a clean in the input. A few test cases now sport extra cleans. Signatures of this problem are PSIO errors and, in an obscure case, CC amplitudes being all zeros when called as mtd/bas. An example is shown below, collected by modifying steps 6 & 7 of `cbs-xtpl-energy-conv` test:. | | master (pre-v1.6) | ddd (v1.6) |; |-------------------------------------|---------------------------------------------|-----",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2575:3818,access,access,3818,https://psicode.org,https://github.com/psi4/psi4/pull/2575,1,['access'],['access']
Security,"e or directory.; (gdb) print lebedev_mapping_; $5 = std::map with 6 elements = {; [26] = 0,; [26] = 0,; [26] = 0,; [26] = 0,; [26] = 0,; [26] = 0; }; ```. Which is obviously not correct in two ways:; 1. There shouldn't be multiple entries for 26; 2. The entry for 26 should be 3. The threads are all deadlocking on the `[]` access, probably because multiple threads all tried to access an _unset_ entry of 26, wrote 0 to it in the process, and ran into each other. From what I can find `[]` isn't thread-safe (because of situations like this), and `.at()` should be used instead. Since `lebedev_mapping_` is a static member of `SphericalGrid`, all threads within their nice shiny `new SphericalGrid()`s inside `SphericalGrid::build` are still accessing the same global map, and mayhem is happening in the process. ...but the more disturbing problem, IMO, is that `lebedev_mapping_` appears uninitialized up until this point. I suspect in an ideal codebase all entries in `lebedev_mapping_` that would ever be accessed would already exist, so the difference between `[]` and `.at()` is just the slight performance hit in the latter of checking that the entry exists. There _is_ a function that's supposed to take care of this... https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/cubature.cc#L5125. But from what I can tell, it never gets called. In the attached minimal example I set a breakpoint at `void SphericalGrid::initialize_lebedev()` and it's _never hit_. I also set a breakpoint at `s->order_ = lebedev_mapping_[npoints];` (the line where things hang on an Unlucky Run), and that line is definitely hit (so my breakpoints are firing correctly). I'm not sure what the consequences of this all are, as I seem to be getting sensible energies (though I suppose I haven't compared to a known good literature benchmark calculated without psi4). I don't think I'm the first person to run into concerns in this part of the code, though, given this comment:; https://github.com/psi4/psi4",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2735:2177,access,accessed,2177,https://psicode.org,https://github.com/psi4/psi4/issues/2735,1,['access'],['accessed']
Security,"elf.set_point_group(self.find_point_group()); File ""/home/damasj02/software/psi4dev/lib//python3.6/site-packages/psi4/driver/qcdb/libmintsmolecule.py"", line 2432, in find_point_group; pg = self.find_highest_point_group(tol) # D2h subgroup; File ""/home/damasj02/software/psi4dev/lib//python3.6/site-packages/psi4/driver/qcdb/libmintsmolecule.py"", line 2532, in find_highest_point_group; return PointGroup(pg_bits); File ""/home/damasj02/software/psi4dev/lib//python3.6/site-packages/psi4/driver/qcdb/libmintspointgrp.py"", line 1533, in __init__; self.constructor_bits(*args); File ""/home/damasj02/software/psi4dev/lib//python3.6/site-packages/psi4/driver/qcdb/libmintspointgrp.py"", line 1576, in constructor_bits; self.symb = self.bits_to_basic_name(self.PYbits); File ""/home/damasj02/software/psi4dev/lib//python3.6/site-packages/psi4/driver/qcdb/libmintspointgrp.py"", line 1754, in bits_to_basic_name; raise ValidationError('Unrecognized point group bits: %d\n' % (bits)). ValidationError: Unrecognized point group bits: 96; ```. If I switch to B3LYP functional, there's no problem. And we're also able to run it on another site (different resources). Maybe we're missing some installation or the local machine libraries are not the right versions? I also paste here an `ldd` of the `core.so`. ```; linux-vdso.so.1 => (0x00007ffddc916000); libpthread.so.0 => /lib64/libpthread.so.0 (0x00002ac921db4000); libc.so.6 => /lib64/libc.so.6 (0x00002ac921fd0000); libpcm.so.1 => /home/damasj02/software/psi4dev/lib/python3.6/site-packages/psi4/../../../libpcm.so.1 (0x00002ac922391000); libxc.so => /home/damasj02/software/psi4dev/lib/python3.6/site-packages/psi4/../../../libxc.so (0x00002ac928dfa000); libdl.so.2 => /lib64/libdl.so.2 (0x00002ac92920a000); libgdma.so => /home/damasj02/software/psi4dev/lib/python3.6/site-packages/psi4/../../../libgdma.so (0x00002ac92940e000); libderiv.so => /home/damasj02/software/psi4dev/lib/python3.6/site-packages/psi4/../../../libderiv.so (0x00002ac92987b000); libint.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/948:6560,Validat,ValidationError,6560,https://psicode.org,https://github.com/psi4/psi4/issues/948,1,['Validat'],['ValidationError']
Security,"ere two threads try to access-write (since [key] fills if key is not found), and the slightly slower thread ends up in a Bad State where it thinks there is a value but ends up infinitely looping on the lookup (the program will hang on `[]`). This only happens once every several thousand runs, and only when running with a high degree of parallelism in a system with many atoms. I cannot induce it in captivity, but I have observed it in the wild. Anyway, `[]` accesses on std::map aren't thread-safe if you aren't super-duper sure the map is fully filled for all keys you'd ever look up, which *should* be the case if `initialize_lebedev` was ever called anywhere. But it wasn't, and that was Bad. Now it's called exactly once (thanks, c++11's `call_once`! I do see that this isn't used anywhere else in the code, but I do see mutex is imported in several files, so I don't think I'm adding any new deps here). The hangs should be gone, though I'll have to churn through another several thousand runs to likely be sure (as, again, it is a very rare kind of hang). This will take me a few days to confirm, but given all debugging efforts point to this being the problem, I'm like 99% confident this will do the trick. That said, as far as I can tell, besides one print function the resulting order_ that's assigned to is never *used*. Maybe a candidate to be axed in the future?. ## Description; Actually invokes initialize_lebedev before accessing lebedev_mapping_ to ensure the mapping has values, and prevents a deadlock when running in parallel. ## User API & Changelog headlines; Prevents a nasty, rare hang. ## Dev notes & details; See the main PR body. ## Questions; - [x] What does `order_` actually do in SphericalGrid? It never appears to be used anywhere except one print function that also appears unused. ## Checklist; - [x] No tests needed -- no observable changes and it's hard to write a test for a very rare race condition :). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2736:1713,access,accessing,1713,https://psicode.org,https://github.com/psi4/psi4/pull/2736,1,['access'],['accessing']
Security,"ernelApp] ERROR | No such comm target registered: jupyter.widget.version; terminate called after throwing an instance of 'std::bad_cast'; what(): std::bad_cast; [I 17:41:41.146 NotebookApp] KernelRestarter: restarting kernel (1/5); ```. I think the first three lines are unrelated. The kernel never recovers and I can't import the module. Should I expect that Psi4 will work inside a `jupyter notebook` and if so, is there any way to get more information about what's going wrong?. **Edit:** I should add that to get `jupyter notebook` to see the `p4env` conda environment, I executed `conda install ipykernel --name p4env` and then `~/data/applications/psi4conda/envs/p4env/bin/python -m ipykernel install --user` (according to [these](https://github.com/jupyter/notebook/issues/1524) instructions). - CentOS Linux release 7.4.1708 (Core) ; - 3.10.0-693.5.2.el7.x86_64; - Python 3.6.3; - Jupyter 4.4.0; - Psi4 1.2a1.dev611+8fe3513; <details><summary>Output of `conda list`</summary><p>. ```; ca-certificates 2017.7.27.1 0 conda-forge; certifi 2017.7.27.1 py36_0 conda-forge; chemps2 1.8.4 0 psi4/label/dev; cloog 0.18.0 0 ; decorator 4.1.2 py36_0 conda-forge; dftd3 3.2.0 7 psi4; dkh 1.2 1 psi4/label/dev; erd 3.0.6 1 psi4/label/dev; gcc-5 5.2.0 1 psi4; gcc-5-mp 5.2.0 0 psi4; gcp 2.0.1 0 psi4; gdma 2.2.6 3 psi4/label/dev; gmp 6.1.2 0 conda-forge; hdf5 1.8.17 11 conda-forge; intel-openmp 2018.0.0 h15fc484_7 ; ipykernel 4.6.1 py36_0 conda-forge; ipython 6.2.1 py36_0 conda-forge; ipython_genutils 0.2.0 py36_0 conda-forge; isl 0.12.2 0 ; jedi 0.10.2 py36_0 conda-forge; jupyter_client 5.1.0 py36_0 conda-forge; jupyter_core 4.4.0 py_0 conda-forge; libefp 1.5b1 0 psi4/label/dev; libgfortran 3.0.0 1 ; libint 1.2.1 1 psi4/label/dev; libsodium 1.0.10 0 conda-forge; libxc 3.0.0 6 psi4/label/dev; mkl 2018.0.0 hb491cac_4 ; mpc 1.0.1 0 ; mpfr 3.1.2 0 ; ncurses 5.9 10 conda-forge; numpy 1.13.3 py36ha12f23b_0 ; openssl 1.0.2l 0 conda-forge; pcmsolver 1.1.10 py36_1 psi4/label/dev; pexpect 4.2.1 py36_0 ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/862:2706,certificate,certificates,2706,https://psicode.org,https://github.com/psi4/psi4/issues/862,1,['certificate'],['certificates']
Security,"ew matrix. `arr = wfn.Ca_subset(""AO"", ""OCC"").nph` now no longer give noise. (#736); - Basis PyParsing is now simpler and code duplication has been removed (#734 ); - Update cc-pVXZ and add cc-pwCVXZ for Li, Be, Na, Mg (#728); - MCSCF orbital semicanonicalization (#722); - C++ Options are now exposed to Python (#720); - Intermediate sub-system and partial-basis energies from `nbody` wrapped exported as psivars (#952); - Better start/stop/elapsed time printing. # Documentation; - Additional Documentation Information (#787). # Miscelaneous; - Added N to ANO0 basis set (#825). # Bug Fixes; - Accidental signed integer overflow when using extremely low memory in DFJK; - wB97X had an incorrect range-seperation parameter. This is now fixed. Note that this did not effect wB97X-D.; - Restricted-irrep finite-difference Hessians were only returning the totally symmetric portion of the Hessian ([in #834](https://github.com/psi4/psi4/pull/834/commits/67f536c720abf31040eaa933a12e26c207100b69)); - Analytic HF Hessians were wrong under particular circumstances (#903); - A bug causing IRCs to converge to the initial transition state was fixed (#882). # Conda changes since v1.1; - MKL linked dynamically through free Anaconda-provided `mkl_rt.so` rather than statically linked. This saves size (since NumPy also uses `mkl_rt`) and eliminates incorrect results and threading damping associated with multiple programs accessing BLAS/LAPACK from multiple sources (#748, #755).; - Psi4 no longer installs a non-standard gcc5.2 alongside Psi4 on Linux (or gcc feature on Mac). This was necessary when conda's default 4.8.5 was too low for Psi4's c++11 requirements, but since conda's default has leaped to 7.2.0, we use default again. Note that only libraries (e.g., `libstdc++`) are installed alongside Psi4 now, not compilers (e.g., `g++`).; - (generic, not psi4, conda) `conda activate env` works multishell, not just on `bash`. Since conda 4.4 c. Dec 2017. # Known Bugs; - PCM-ROHF is broken. See #999",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/959:7066,access,accessing,7066,https://psicode.org,https://github.com/psi4/psi4/issues/959,1,['access'],['accessing']
Security,exposes useful functions from detci and libpsio classes to python,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1821:0,expose,exposes,0,https://psicode.org,https://github.com/psi4/psi4/pull/1821,1,['expose'],['exposes']
Security,"f what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->. - [x] fix Eco (W) GHA by recognizing that updating the setup-miniconda version changed the environment path, so the find-the-iomp5-lib cmake cmd needed to change, too, for sapt.cc to compile.; - [x] wow, fixing Eco (M) GHA was not what I expected. To recap, without psi4 code changing or the binaries of any of our QC dependencies changing, Mac builds (Intel or Silicon) started issuing ""Illegal Instruction"" on Hartree--Fock water. :-( This affected any fresh conda env; for instance updating a ""working"" python 3.12.3 env to 3.12.4 was accompanied by many other package updates and led to a ""illegal instruction"" env upon recompiling psi. I know c-f has been updating how they handle the c stdlib (https://github.com/conda-forge/conda-forge.github.io/issues/2102). New environments apparently hit the new fundamental libraries, and those insert a breakpoint if you try to access out of bounds. So fixed the bounds error. :-). ```; (lldb) settings set -- target.run-args ""stage/bin/psi4"" ""../tests/tu1-h2o-energy/input.dat""; (lldb) run; Process 22217 launched: '/Users/loriab/linux/miniconda-silicon/envs/p4dev312cf_clone/bin/python' (arm64); Process 22217 stopped; * thread #1, queue = 'com.apple.main-thread', stop reason = EXC_BREAKPOINT (code=1, subcode=0x11819b7e4); frame #0: 0x000000011819b7e4 core.cpython-312-darwin.so`std::__1::vector<double, std::__1::allocator<double> >::operator[][abi:fe180100](this=0x00000001013e5378 size=27, __n=27) at vector:1393:3; 1390	template <class _Tp, class _Allocator>; 1391	_LIBCPP_CONSTEXPR_SINCE_CXX20 inline _LIBCPP_HIDE_FROM_ABI typename vector<_Tp, _Allocator>::reference; 1392	vector<_Tp, _Allocator>::operator[](size_type __n) _NOEXCEPT {; -> 1393	 _LIBCPP_ASSERT_VALID_ELEMENT_ACCESS(__n < size(), ""vector[] index out of bounds"");; 1394	 return this->__begin_[__n];; 1395	}; 139",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3194:1188,access,access,1188,https://psicode.org,https://github.com/psi4/psi4/pull/3194,1,['access'],['access']
Security,"favor of DDX_SOLVENT. . According to the manual, DDX_SOLVENT is ignored if DDX_SOLVENT_EPSILON is supplied. Initially I took this as meaning one could *just* supply the DDX_SOLVENT_EPSILON value directly. However, without supplying the DDX_SOLVENT field too, the calculation fails with `psi4.driver.p4util.exceptions.ValidationError: Required option 'DDX_SOLVENT' is missing.`. Hence, in my high throughput script I provided a placeholder in this field if the DDX_SOLVENT_EPSILON option is selected:. ```; #check if dialetric constant is specified or not; if settings.ddx_settings.epsilon is not None:; print('ddx numeric option'); psi4.set_options({""ddx"": ""true"", #supply a solvent here to see if epsilon then gets picked up; ""DDX_SOLVENT_EPSILON"": settings.ddx_settings.epsilon,; ""DDX_RADII_SET"": settings.ddx_settings.radii_set,; ""DDX_MODEL"": settings.ddx_settings.ddx_model,; ""DDX_SOLVENT"":""water""}) #without this calculation fails with psi4.driver.p4util.exceptions.ValidationError: Required option 'DDX_SOLVENT' is missing.; else:; print('ddx solvent option'); psi4.set_options({""ddx"": ""true"",; ""DDX_SOLVENT"": settings.ddx_settings.solvent,; ""DDX_RADII_SET"": settings.ddx_settings.radii_set,; ""DDX_MODEL"": settings.ddx_settings.ddx_model}); ```; However, when I run a testcase when inspecting the output file, the solvent_epsilon is printed out as 78.3553 not the test value 4 which I used in my test run. . It appears the issue lies in the if else statement in psi4/driver/procrouting/solvent/ddx.py, where the if statement core.has_option_changed(""DDX"", ""DDX_SOLVENT_EPSILON"") is not assigned as true (I added print statements to validate this):; ```; solvent = core.get_option(""DDX"", ""DDX_SOLVENT"").lower(); print(f'solvent option chosen is {solvent}') ; if core.has_option_changed(""DDX"", ""DDX_SOLVENT_EPSILON""): #this given as false; solvent_epsilon = core.get_option(""DDX"", ""DDX_SOLVENT_EPSILON""); print(f'epsilon option {solvent_epsilon}'); elif solvent == """":; raise ValidationError(""Req",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3119:1181,Validat,ValidationError,1181,https://psicode.org,https://github.com/psi4/psi4/issues/3119,1,['Validat'],['ValidationError']
Security,"hi, can `psi4` accept density matrix (`Da` / `Db`) instead of orbital coefficients (`Ca` / `Cb`) as initial guess? ; (this is for `RHF` so `Da` == `Db` and same for `C`). I only have some guessed density matrix from an external source, and I want to feed it into `psi4` to check if the SCF calculation still works. I've seen https://forum.psicode.org/t/custom-guess-for-hartree-fock/2026 but my main concern is i'm not sure if this will also work for assigning `Da` rather than `Ca`. I don't have access to a guessed `Ca` matrix, only `Da`. Thanks!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2896:497,access,access,497,https://psicode.org,https://github.com/psi4/psi4/issues/2896,1,['access'],['access']
Security,"ich @fevangelista brought up at the conference call yesterday. The SCF code as currently structured does not allow for custom SCF subclasses. The first problem is that the acceptable SCF solutions are hardcoded [here](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc.py#L1183-L1194). This is easily surmountable:. ```; diff --git a/psi4/driver/procrouting/proc.py b/psi4/driver/procrouting/proc.py; index d03fd6d54..f895a1a92 100644; --- a/psi4/driver/procrouting/proc.py; +++ b/psi4/driver/procrouting/proc.py; @@ -1182,16 +1182,15 @@ def scf_wavefunction_factory(name, ref_wfn, reference, **kwargs):; ; # Build the wavefunction; core.prepare_options_for_module(""SCF""); - if reference in [""RHF"", ""RKS""]:; - wfn = core.RHF(ref_wfn, superfunc); - elif reference == ""ROHF"":; - wfn = core.ROHF(ref_wfn, superfunc); - elif reference in [""UHF"", ""UKS""]:; - wfn = core.UHF(ref_wfn, superfunc); - elif reference == ""CUHF"":; - wfn = core.CUHF(ref_wfn, superfunc); - else:; +; + # By setting core.name_of_SCF_method, a plugin dev can register an SCF subclass.; + wfn_aliases = {""RKS"": ""RHF"", ""UKS"": ""UHF""}; + constructor_name = wfn_aliases.get(reference, reference); + try:; + wfn_constructor = getattr(core, constructor_name); + except AttributeError:; raise ValidationError(""SCF: Unknown reference (%s) when building the Wavefunction."" % reference); + wfn = wfn_constructor(ref_wfn, superfunc); ; if _disp_functor and _disp_functor.engine != 'nl':; wfn._disp_functor = _disp_functor; ```. However, the acceptable references are also hardcoded [here](https://github.com/psi4/psi4/blob/master/psi4/src/read_options.cc#L1293). I'm not sure how to remedy this one. I would like to see how the code worked pre-inversion, to know why this wasn't a problem then. This will probably require a lot of digging in Forte's historical source. From my brief looking at it, at least some of the code that did the hookup is now missing. I can't delve into this further until I clear some other projects.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2267:1282,Validat,ValidationError,1282,https://psicode.org,https://github.com/psi4/psi4/issues/2267,1,['Validat'],['ValidationError']
Security,"ils; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Unused function `MOInfoBase::correlate` is removed; - [x] The only thing the `MOInfoBase` dtor does is call `MOInfoBase::cleanup()`, an empty function. Removed both.; - [x] Moved the contents of `MOInfo::free_memory()` into its only caller, the `MOInfo` dtor; - [x] Added a lot of new machine-readable docstrings, moved some existing ones; - [x] Some ""obsolete code"", commented out a long time ago is deleted from `moinfo_mappings.cc`; - [x] Moved the `double** scf` MO array and the `get_scf_mos()` getter from `MOInfoBase` to `MOInfo` and made the array private; - [x] Moved the contents of `MOInfoBase::startup()` into its only caller, the `MOInfoBase` ctor; - [x] Moved `MOInfoBase::nmo` to `MOInfo` and made it private; - [x] Made the molecular charge `const` and private in `MOInfoBase`; - [x] Made `MOInfoBase::sopi` private, added a protected getter fn to give access in derived classes; - [x] Made `MOInfoBase::nso`, `MOInfoBase::nuclear_energy` and `MOInfoBase::irr_labs` private; - [x] All functions in `MOInfoBase` that have previously returned copies of `std::vector` members now return `const&` to the vector in the object, avoiding a potential copy.; - [x] Since `MOInfoBase::silent` is only used in the ctor of `MOInfo,`, I removed it from `MOInfoBase` and `MOInfoSCF`; - [x] Inlined `MOInfo::get_actv(size_t i)` and `MOInfo::get_docc(size_t i)` as both were only called once. Since these overloads are now gone from `MOInfo`, it can now just use `get_docc()` and `get_actv()` from `MOInfoBase` instead of having to reimplement or explicitly inherit them. ## Checklist; - [x] No new features; - [x] Tests run by the CI are passing; - [x] Errors in the full test suite appear to be unrelated to `libmoinfo`. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3155:2511,access,access,2511,https://psicode.org,https://github.com/psi4/psi4/pull/3155,1,['access'],['access']
Security,"int('ddx numeric option'); psi4.set_options({""ddx"": ""true"", #supply a solvent here to see if epsilon then gets picked up; ""DDX_SOLVENT_EPSILON"": settings.ddx_settings.epsilon,; ""DDX_RADII_SET"": settings.ddx_settings.radii_set,; ""DDX_MODEL"": settings.ddx_settings.ddx_model,; ""DDX_SOLVENT"":""water""}) #without this calculation fails with psi4.driver.p4util.exceptions.ValidationError: Required option 'DDX_SOLVENT' is missing.; else:; print('ddx solvent option'); psi4.set_options({""ddx"": ""true"",; ""DDX_SOLVENT"": settings.ddx_settings.solvent,; ""DDX_RADII_SET"": settings.ddx_settings.radii_set,; ""DDX_MODEL"": settings.ddx_settings.ddx_model}); ```; However, when I run a testcase when inspecting the output file, the solvent_epsilon is printed out as 78.3553 not the test value 4 which I used in my test run. . It appears the issue lies in the if else statement in psi4/driver/procrouting/solvent/ddx.py, where the if statement core.has_option_changed(""DDX"", ""DDX_SOLVENT_EPSILON"") is not assigned as true (I added print statements to validate this):; ```; solvent = core.get_option(""DDX"", ""DDX_SOLVENT"").lower(); print(f'solvent option chosen is {solvent}') ; if core.has_option_changed(""DDX"", ""DDX_SOLVENT_EPSILON""): #this given as false; solvent_epsilon = core.get_option(""DDX"", ""DDX_SOLVENT_EPSILON""); print(f'epsilon option {solvent_epsilon}'); elif solvent == """":; raise ValidationError(""Required option 'DDX_SOLVENT' is missing.""); elif solvent not in pyddx.data.solvent_epsilon:; raise ValidationError(""Unknown solvent {solvent}.""); else:; solvent_epsilon = pyddx.data.solvent_epsilon[solvent]; ```; I have built a minimal worked example of the problem below where the issue is again replicated where the solvent_epsilon is set to that of water, and the DDX_SOLVENT_EPSILON option is ignored: ; ```; import psi4. h2o = psi4.geometry(""""""; O; H 1 0.96; H 1 0.96 2 104.5; """"""). psi4.set_options({""ddx"": ""true"", #supply a solvent here to see if epsilon then gets picked up; ""DDX_SOLVENT_EPSILON"":'5'",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3119:1848,validat,validate,1848,https://psicode.org,https://github.com/psi4/psi4/issues/3119,1,['validat'],['validate']
Security,"le = 'DETCI'; func = None. def select_mp2(name, **kwargs):; """"""Function selecting the algorithm for a MP2 energy call; and directing to specified or best-performance default modules.; ; """"""; reference = core.get_option('SCF', 'REFERENCE'); mtd_type = core.get_global_option('MP2_TYPE'); module = core.get_global_option('QC_MODULE'); # Considering only [df]occ/dfmp2/detci/fnocc; ; # MP2_TYPE exists largely for py-side reasoning, so must manage it; # here rather than passing to c-side unprepared for validation; ; func = None; if reference == 'RHF':; if mtd_type == 'CONV':; if module == 'DETCI':; func = run_detci; elif module == 'FNOCC':; func = run_fnocc; elif module in ['', 'OCC']:; func = run_occ; elif mtd_type == 'DF':; if module == 'OCC':; func = run_dfocc; elif module in ['', 'DFMP2']:; func = run_dfmp2; elif mtd_type == 'CD':; if module in ['', 'OCC']:; func = run_dfocc; elif reference == 'UHF':; if mtd_type == 'CONV':; if module in ['', 'OCC']:; func = run_occ; elif mtd_type == 'DF':; if module == 'OCC':; func = run_dfocc; elif module in ['', 'DFMP2']:; func = run_dfmp2; elif mtd_type == 'CD':; if module in ['', 'OCC']:; func = run_dfocc; elif reference == 'ROHF':; if mtd_type == 'CONV':; if module == 'DETCI':; func = run_detci; elif module in ['', 'OCC']:; func = run_occ; elif mtd_type == 'DF':; if module == 'OCC':; func = run_dfocc; elif module in ['', 'DFMP2']:; func = run_dfmp2; elif mtd_type == 'CD':; if module in ['', 'OCC']:; func = run_dfocc; elif reference in ['RKS', 'UKS']:; if mtd_type == 'DF':; if module in ['', 'DFMP2']:; func = run_dfmp2; ; if func is None:; > raise ManagedMethodError(['select_mp2', name, 'MP2_TYPE', mtd_type, reference, module]); E psi4.driver.p4util.exceptions.ManagedMethodError: select_mp2: Method 'mp2' with MP2_TYPE 'DF' and REFERENCE 'RHF' not directable to QC_MODULE 'DETCI'. /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:121: ManagedMethodError; ________________________________________________",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:34521,validat,validation,34521,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['validat'],['validation']
Security,lebedev_mapping_ access is thread-unsafe (and also never initialized?),MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2735:17,access,access,17,https://psicode.org,https://github.com/psi4/psi4/issues/2735,1,['access'],['access']
Security,"nd have been forcing static builds. Again moving to modules is facilitated by shared libraries. I will note that apparently libiwl can't be compiled dynamically. ; ## No More setup.py. `setup.py` just wrapped the CMake call and rewriting it is an exercise in code duplication. My understanding is the point of this file was meant to ease the transition to CMake from GNU Make. Well, I think it's safe to say we've transitioned.; ## Angle Brackets for Includes Clean Up. The vast majority of includes that incorrectly used angled-brackets have been changed to quotes. Although not exactly correct, for all intents and purposes, use quotes to indicate that a header file is part of the current project and angled-brackets indicate it is an external dependency. This is not just semantics, it changes how the compiler behaves. It also can lead to subtle hard to find bugs when you have very commonly named header files and you use directives like `using namespace std` all over the place.; ## Accessing Python Bindings. It used to be there were three ways to compile Psi4: for the conda binary, for an executable, and as a shared library that can be imported from Python. There was a ton of redundancy between the latter two and I consolidated them into one. Now all builds that are not making the conda binary, also produce callable Python bindings and an executable. This is simply done by packaging Psi4 up into a giant .so that we then link psi4.cc against. Because I am liable to forget here is an example of using Psi4 from python now, assuming `${CMAKE_INSTALL_PREFIX}/psi4/lib/psi4.so` is in your `PYTHONPATH`:. ``` .py; from psi4 import *; initialize(); #This has to come after initialize or else the global variables aren't right; import driver; set_global_option('BASIS', 'CC-PVDZ'); xyzstring = """"""; units angstrom; O 0.0000000000 0.0000000000 -0.0711762954; H 0.0000000000 -0.8916195680 0.5648097613; H 0.0000000000 0.8916195680 0.5648097613; """"""; efp_init(); my_mol = Molecule.create_molecu",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442:7861,Access,Accessing,7861,https://psicode.org,https://github.com/psi4/psi4/pull/442,1,['Access'],['Accessing']
Security,"ntly is continuously appended; - any fns mirroring `sherrill_gold_standard` or `allen_focal_point` need to be reformatted and registered with `register_composite_function`; - extrapolation functions for composite need to be registered with `register_xtpl_function`; - CBS and xtpl functions need to be called as strings, not objects. So `energy('cbs', scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme='scf_xtpl_helgaker_3')` not `energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3)`.; - no longer always evaluating gradient before Hessian to test safety of projecting rotations. Instead assuming unsafe. Can pass `ref_gradient` array to test on or `set findif fd_project T/F` explcitly to control.; - `psi4.QMMM()` object replaced by `embedding_charges` kwarg in Bohr. See extern examples for details.; - `json_ret = psi4.schema_wrapper.run_qcschema(json_input)` not `json_ret = psi4.json_wrapper.run_json(json_input)`. `json_ret` is now an object, so `.` access, not dictionary.; - CBS wrapper issues a `clean()` btwn calcs. Plain string modelchem calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. This is no longer happening, so for occasional string modelchem calcs, you may need to add a clean in the input.; - extern object units are bohr, not whatever the Molecule was.; - `psi4 --module` returns the path for loading via `import psi4`. opposite of `psi4.executable`; - `psi4.set_output_file` now wraps `psi4.core.set_output_file` and additionally sets up a truncating python logging file with `.log` extension at the same time as the `.out` file.; - Besides the input.dat/output.dat exception, default output naming simplified to always `.out` of input file name. If input has out or log extension (weird), extra extension added.; - Output file in continuous mode now looks much as it normally does in the master branch, except there's a few mo",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351:1955,access,access,1955,https://psicode.org,https://github.com/psi4/psi4/pull/1351,1,['access'],['access']
Security,"o the superior [standalone library](https://github.com/robashaw/libecpint), also written by Rob Shaw. That library also provides gradient and Hessian terms, which will greatly improve performance. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Hook up external build; - [x] Get energies working; - [x] Get gradients working; - [x] Get Hessians working; - [x] Remove old native implementation; - [x] Make all tests / references to ECPs conditional depending on libECP activation. LAB: conditional build marked by `USING_ecpint` compile definition. This turned out uglier than should strictly be needed because as soon as you ifdef the ao_ecp declarations in integrals.cc, all calcs, w/ or w/o ecp segfault. Possibly I'm missing something, but present ifdef pattern is working stably.; - [x] Linux and Mac conda packages are available off psi4/label/dev. Windows untested. These packages have stylistic problems, but they'll do for now. There are also Linux and Mac conda packages off conda-forge. At least the Linux works fine. Installation is mildly involved with the mixed base channels, so the psi4 packages exist for simplicity of availability.; - [x] NYI message on stability code added to close #2577 ; - [ ] build docs will be in a separate PR. ## Questions; - Can anyone think of how one might access code with ecp ifdefs _without_ building a psi4 BasisSet (besides zerobasis)? Particularly though some non-driver mintshelper API call? This is important because the nearly sole whoa-your-mol+basis-needs-ecp-but-libecpint-not-built warning happens at the BasisSet build in export_mints. If users get around that, they'll be surprised by missing electrons b/c ecp code is deactivated. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2135:1442,access,access,1442,https://psicode.org,https://github.com/psi4/psi4/pull/2135,1,['access'],['access']
Security,"on there. This PR completely eliminates the `ERISieve` class, and replaces all of its old functionalities with that of `TwoBodyAOInt`. `ERISieve` is a class in libmints that does many of the same things as `TwoBodyAOInt`. The amount of features that `ERISieve` has, that `TwoBodyAOInt` doesn't, is minimal. It's really just absolute redundancy. Currently, `ERISieve` _only_ finds use within the PKJK class and its subalgorithms. As mentioned, this PR eliminates `ERISieve` and replaces it with `TwoBodyAOInt` in all of the former's previous use cases. Any previously-utilized functionality that was present in `ERISieve` and not in `TwoBodyAOInt` (a couple functions determining basis function significance) were added to `TwoBodyAOInt`. Furthermore, any adjustments needed to support `TwoBodyAOInt` within the PKJK code were made. With all of this, `ERISieve` was also ripped out of the code entirely. Maybe it could go into the attic. ## User API & Changelog headlines; - [X] The core.ERISieve class has been removed, along with its associated functions core.ERISieve.build and core.ERISieve.shell_significant. The removed functionalities, specifically shell_significant, can be accessed via the construction of a TwoBodyAOInt object. ## Dev notes & details; - [X] The `ERISieve` class in libmints has been removed from Psi4 and replaced with `TwoBodyAOInt`.; - [X] Functionalities in `ERISieve` that were not in `TwoBodyAOInt` and were required in the code, were added to `TwoBodyAOInt`.; - [X] The PKJK files have been adjusted as necessary to support the use of `TwoBodyAOInt`. ## TODO; - [ ] Remove ERISieve from all other external plugins (currently focusing on v2rdm_casscf). ## Questions; - [ ] I guess `ERISieve` can go into the attic now?. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2933:1366,access,accessed,1366,https://psicode.org,https://github.com/psi4/psi4/pull/2933,1,['access'],['accessed']
Security,"ptional addons) or micro (no build tools, just L2, g2g, libxc, qcng, scipy, pytest) or several of those choices Docker images? (I have one vote for minimal.); 3. Docker images are hefty (~600MB for the built psi4). Can I just push them to a `latest` tag and overwrite old ones, or does there need to be a history?; 4. For Docker of psi4 itself, I'm only doing linux-64 (https://hub.docker.com/r/psi4/psi4/tags). Since docker is usually run VM-like, is that all developers want, or should I be building containers for other arch? Certainly I have the other-arch conda pkgs available -- it's just a matter of figuring out docker from them.; 5. I can build singularity/apptainer images from the Docker images, but I haven't figured out how to upload them yet. _For devs_, are apptainers wanted, or will docker alone do?; 6. I'll probably revive the `psi4-dev` pkg, just because it is simple and durable. (And it's the easiest way to convey the Intel-atop-GNU flags.) It'll be a `conda install psi4/label/dev::psi4-dev -c conda-forge` access. Thoughts on improving it?; 7. Those `devtools/*/*buildrun*yaml` env specs are semi-auto-generated from the ecosystem GHA. Are they handy enough to maintain and promote, even though they don't come with `cmake` lines?; 8. Any other build tools to support other workflows wanted? It's easier to set them up all at once. ### Psi4 Conda Packages at Present with Channels. Built psi4 packages are slightly off-topic, but I thought this could be a handy reference for the more exotic ones. Note that these don't have as many addons as previous `-c psi4` packages did. See https://github.com/orgs/psi4/projects/2 for the conda-forge progress tracker. * `linux-64`; * `conda install psi4 -c conda-forge/label/libint_dev -c conda-forge` (GNU compilers, AM5 L2, MKL, all pythons); * `conda install psi4/label/dev::psi4 -c psi4/label/testing -c conda-forge` (Intel compilers, AM7 L2, MKL, even pythons); * `conda install psi4/label/testing::psi4=1.8a2=py310hfdeccc3_2 libb",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2965:4679,access,access,4679,https://psicode.org,https://github.com/psi4/psi4/issues/2965,1,['access'],['access']
Security,"q; - Add `compare_dicts` and `compare_molrecs` comparison functions. Former uses `deepdiff` module and does recursive comparison (sensitive to types). Can exempt fields with `forgive` arg. Latter makes use of former and also allows geoms to change if warranted by fix_com/orientation (checks via aligner).; - convert qcdb test suite from GnuMake (yes, that old) to pytest. switch compare_* fns to raise `TestComparisonError`, not `sys.exit(1)`.; - have to temporarily set `0 2` in some test cases, b/c the reconciler wants physically reasonable values, but the input molecule isn't currently passing through the code that would set those defaults.; - updated v2rdm_casscf pinning to one Eugene already fixed up to work w/psi; * **User-Facing for Release Notes**. ## Questions; - [ ] Right now, results of harmonic analysis is a dict of namedtuples with numpy arrays (contents and interface below). This is pretty convenient to access and work with. But it is numpy arrays attached to Wfn and thus mixing array classes on Wfn and unable to access c-side. Is this ok? Better ideas?; ```; Returns; -------; dict, text; Returns dictionary of VibrationAspect objects (fields: lbl unit data comment); Also returns text suitable for printing; ; +---------------+--------------------------------------------+-----------+------------------------------------------------------+; | key | description (lbl & comment) | units | data (real/imaginary modes) |; +===============+============================================+===========+======================================================+; | omega | frequency | cm^-1 | np.array(ndof) complex (real/imag) |; | q | normal mode, normalized mass-weighted | a0 u^1/2 | np.array(ndof, ndof) float |; | w | normal mode, un-mass-weighted | a0 | np.array(ndof, ndof) float |; | x | normal mode, normalized un-mass-weighted | a0 | np.array(ndof, ndof) float |; | degeneracy | degree of degeneracy | | np.array(ndof) int |; | TRV | translation/rotation/vibration | | np.arra",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/834:12967,access,access,12967,https://psicode.org,https://github.com/psi4/psi4/pull/834,1,['access'],['access']
Security,"s doing all kinds of contortions with fr_types and efp_chg/mult to the extend that fragment* arrays were not the same length. Function to be retired shortly, so papered over.; - Psi has long had the problem that set_multiplicity/set_molecular_charge values might not stick upon reinterpret_coordentries b/c recomputed from fragments (which the user can't change) and by high-spin-sum. Adds logic to retain set_mult value if all fragments real (still no guarantee of physical reasonableness wrt frags) b/c otherwise I couldn't do isapt. See `validate_and_fill_chgmult` for general solution at the boundaries of Mol class, but no good internally to psi4.Mol b/c in python.; - `to_arrays`, `to_dict`, `BFS`, `B787`, `scramble` fns shared btwn psi4 & qcdb Mol classes. When drop py27, can attach qcdb fns directly to psi4 and drop the @static raw_ intermed fns.; - Molecule serialization; - New `from_arrays` constructor that takes minimal (geom & Z) to full geom spec as arrays (homogeneous natom-length, not heterogeneous per-atom) and thoroughly validates them and fills in defaults, emitting a standardized (to become MolSSI JSON) molrec dict. Plain fn produces dict. `psi4.core.Molecule.from_arrays` and `qcdb.Molecule.from_arrays` go a step further and return a Mol.; - Function `validate_and_fill_chgmult` addresses current problems (1) create_mol_from_string's problem of not allowing overall chgmult to be set, defaulting all frag to `0 1`, and defaulting overall to fragA, (2) physical reasonableness (chg/mult/#elec compatible) not being tested for fragments at all and for overall not until the SCF code, (3) problems like psi4/psi4#114, and (4) overall and frag chgmult getting out of whack upon set_chg/mult, extract_subsets, not having frag chgmult editable, scf singlet/doublet defaulting. Taking given tot/frag chg/mult info and reasoning out the missing info would have been massive logic for chg/mult/#elec simultaneously, so this just codes up the rules and the defaults and throw `it",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/834:4963,validat,validates,4963,https://psicode.org,https://github.com/psi4/psi4/pull/834,1,['validat'],['validates']
Security,sanitize molecule names for dfhelper,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2984:0,sanitiz,sanitize,0,https://psicode.org,https://github.com/psi4/psi4/pull/2984,1,['sanitiz'],['sanitize']
Security,"t be empty"" when calling fchk() after the method and basis are defined in the energy() function call.; This problem is found in the latest development version 1.4rc2.dev97.; v1.3.x did not have this problem. ```; molecule {; 0 1; O 3.031916 1.669683 2.276015; H 2.818359 1.127467 3.035217; H 2.894980 2.585172 2.519181; }; E, wfn = energy('mp2/6-311G**',properties=['dipole'],return_wfn=True); fchk(wfn, ""test4-dma.fchk""); clean(); ```. ```; Traceback (most recent call last):; File ""/home/zj2244/Public/Software/anaconda3/envs/p4dev1/bin/psi4"", line 332, in <module>; exec(content); File ""<string>"", line 69, in <module>; File ""/home/zj2244/Public/Software/anaconda3/envs/p4dev1/lib//python3.6/site-packages/psi4/driver/driver.py"", line 1993, in fchk; wfn_ = core.Wavefunction.build(wfn.molecule(), core.get_global_option('BASIS')); File ""/home/zj2244/Public/Software/anaconda3/envs/p4dev1/lib//python3.6/site-packages/psi4/driver/p4util/python_helpers.py"", line 125, in _core_wavefunction_build; basis = core.BasisSet.build(mol, ""ORBITAL"", basis); File ""/home/zj2244/Public/Software/anaconda3/envs/p4dev1/lib//python3.6/site-packages/psi4/driver/p4util/python_helpers.py"", line 90, in _pybuild_basis; return_atomlist=return_atomlist); File ""/home/zj2244/Public/Software/anaconda3/envs/p4dev1/lib//python3.6/site-packages/psi4/driver/qcdb/libmintsbasisset.py"", line 646, in pyconstruct; raise ValidationError(""""""Orbital basis argument must not be empty.""""""). psi4.driver.qcdb.exceptions.ValidationError: Orbital basis argument must not be empty. Printing out the relevant lines from the Psithon --> Python processed input file:; H 2.818359 1.127467 3.035217; H 2.894980 2.585172 2.519181; """"""); core.IO.set_default_namespace(""""); E, wfn = energy('mp2/6-311G**',properties=['dipole'],return_wfn=True); --> fchk(wfn, ""test4-dma.fchk""); clean(). !--------------------------------------------!; ! !; ! Orbital basis argument must not be empty. !; ! !; !--------------------------------------------!. ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2177:1444,Validat,ValidationError,1444,https://psicode.org,https://github.com/psi4/psi4/issues/2177,2,['Validat'],['ValidationError']
Security,"t has already been patched into c-f builds as of v1.8.2 `_1`. ## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] test py312 where possible (mac py312 works, but to keep testing legacy qcfractal (until psi4 v1.9), need to stick with py39); - [x] switch azure windows to miniforge, so it doesn't spend 18m switching default channels and doing the solve to get mamba. (note that this isn't a weakness of miniconda (which has packaged conda and mamba since this summer) but of the age of the miniconda on chocolatey vs the age of the miniforge.; - [x] tested the new qcfractal 0.51 and found that (1) there's a snowflake threading bug that Ben has since fixed (unreleased) and (2) there's a new space-saving step on qcfractal, so psi4 driver needs to regenerate qcvars info for distributed driver thru qcf runs (fixed here).; - [x] on py312 on windows, there's a change in `shutil.which` that affects us through qcel. currently patched, but awaiting a new release there.; - [x] py312 starts visible SyntaxWarning about non-escaped special characters (like '\n' newline or '\b' bell) and unfortunately, they abound in Windows paths. Further unfortunately, the error detection in the new version parsing for psi4 in qcengine (implemented to avoid those ""[-1] index is not accessible"" means ""pull psi4 tags or otherwise fix version"" errors) springs into defense and thinks a clean psi4 isn't present. So, let's convert possible filepaths to raw strings so no confusion with special chars. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3049:1595,access,accessible,1595,https://psicode.org,https://github.com/psi4/psi4/pull/3049,1,['access'],['accessible']
Security,"te-packages/psi4/driver/qcdb/libmintsmolecule.py"", line 1604, in update_geometry; self.set_point_group(self.find_point_group()); File ""/home/damasj02/software/psi4dev/lib//python3.6/site-packages/psi4/driver/qcdb/libmintsmolecule.py"", line 2432, in find_point_group; pg = self.find_highest_point_group(tol) # D2h subgroup; File ""/home/damasj02/software/psi4dev/lib//python3.6/site-packages/psi4/driver/qcdb/libmintsmolecule.py"", line 2532, in find_highest_point_group; return PointGroup(pg_bits); File ""/home/damasj02/software/psi4dev/lib//python3.6/site-packages/psi4/driver/qcdb/libmintspointgrp.py"", line 1533, in __init__; self.constructor_bits(*args); File ""/home/damasj02/software/psi4dev/lib//python3.6/site-packages/psi4/driver/qcdb/libmintspointgrp.py"", line 1576, in constructor_bits; self.symb = self.bits_to_basic_name(self.PYbits); File ""/home/damasj02/software/psi4dev/lib//python3.6/site-packages/psi4/driver/qcdb/libmintspointgrp.py"", line 1754, in bits_to_basic_name; raise ValidationError('Unrecognized point group bits: %d\n' % (bits)). ValidationError: Unrecognized point group bits: 96; ```. If I switch to B3LYP functional, there's no problem. And we're also able to run it on another site (different resources). Maybe we're missing some installation or the local machine libraries are not the right versions? I also paste here an `ldd` of the `core.so`. ```; linux-vdso.so.1 => (0x00007ffddc916000); libpthread.so.0 => /lib64/libpthread.so.0 (0x00002ac921db4000); libc.so.6 => /lib64/libc.so.6 (0x00002ac921fd0000); libpcm.so.1 => /home/damasj02/software/psi4dev/lib/python3.6/site-packages/psi4/../../../libpcm.so.1 (0x00002ac922391000); libxc.so => /home/damasj02/software/psi4dev/lib/python3.6/site-packages/psi4/../../../libxc.so (0x00002ac928dfa000); libdl.so.2 => /lib64/libdl.so.2 (0x00002ac92920a000); libgdma.so => /home/damasj02/software/psi4dev/lib/python3.6/site-packages/psi4/../../../libgdma.so (0x00002ac92940e000); libderiv.so => /home/damasj02/software/psi4dev/",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/948:6495,Validat,ValidationError,6495,https://psicode.org,https://github.com/psi4/psi4/issues/948,1,['Validat'],['ValidationError']
Security,"to be very sure, I'll check that the same things happen with a truly vanilla build when I get home and have access to my ""normal""/vanilla psi4 build.). Which is where my runs always hang (on the [] access, specifically) when they do. If I pop open gdb, attach, and check what lebedev_mapping_ looks like, I see something somewhat disturbing:. ```; #4 psi::SphericalGrid::build (scheme="""", npoints=1852534357, points=0x1b2) at /tmp/garden-install.1c2be761ae20/psi4-1.6.1-desres02-c7/psi4/src/psi4/libfock/cubature.cc:5142; 5142 /tmp/garden-install.1c2be761ae20/psi4-1.6.1-desres02-c7/psi4/src/psi4/libfock/cubature.cc: No such file or directory.; (gdb) print lebedev_mapping_; $5 = std::map with 6 elements = {; [26] = 0,; [26] = 0,; [26] = 0,; [26] = 0,; [26] = 0,; [26] = 0; }; ```. Which is obviously not correct in two ways:; 1. There shouldn't be multiple entries for 26; 2. The entry for 26 should be 3. The threads are all deadlocking on the `[]` access, probably because multiple threads all tried to access an _unset_ entry of 26, wrote 0 to it in the process, and ran into each other. From what I can find `[]` isn't thread-safe (because of situations like this), and `.at()` should be used instead. Since `lebedev_mapping_` is a static member of `SphericalGrid`, all threads within their nice shiny `new SphericalGrid()`s inside `SphericalGrid::build` are still accessing the same global map, and mayhem is happening in the process. ...but the more disturbing problem, IMO, is that `lebedev_mapping_` appears uninitialized up until this point. I suspect in an ideal codebase all entries in `lebedev_mapping_` that would ever be accessed would already exist, so the difference between `[]` and `.at()` is just the slight performance hit in the latter of checking that the entry exists. There _is_ a function that's supposed to take care of this... https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/cubature.cc#L5125. But from what I can tell, it never gets called. In the attache",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2735:1492,access,access,1492,https://psicode.org,https://github.com/psi4/psi4/issues/2735,2,['access'],['access']
Security,"tools.product` at it. Slows down a bit by 10 frag, but there's room for performance optimization. Ideally we'd call this at every reinterpret_coordentry, but that's not feasible for psi4 Mol. A good newdev starter project would be (for impossible reconciliations) to keep track of the least offending combo, and print out a summary of what rules it's violating.; - Function `reconcile_nucleus` addresses problems (1) can't specify atoms by atomic number, (2) can't specify masses by mass number, (3) faced with A, Z, E, real/ghost, and label `@C_special@12.1`, all as inputs, need to make sure (a) extracting as much user info as possible, (b) not allowing contradictory info, and (c) filling in everything else from periodictable. Like chgmult, fn handles this by defining rules and candidate values, and letting itertools do the rest. Expand atom label spec so can specify isotope and atomic number e.g., `Gh(27@58.933)` or `2H_deut`.; - Validates atoms-too-close all at once, rather than per-atom, which can run into units, coordsys, and? old CoordEntry trouble.; - New `from_dict` fn takes a fully validated and defaulted molrec dict and constructs a Mol. psi4 fn is in export_mints.cc, and qcdb fn is in molecule.py.; - New `to_dict` fn serializes Mol into molrec dict. This fn in molecule.py is shared by psi4 & qcdb Mol classes. For the moment (not mandatory), this dict passes again through `from_arrays` and output is compared to make sure (1) resulting dict is pure and (2) Mol hasn't been tampered with in an unphysical way.; - `from_arrays` used internally to qcdb.Molecule for decomposing and reconstituting Mol into np arrays for fragmentation and alignment (potentially reordering); - BasisSet molecule handover (happens a lot to construct py basis for c++ mol and hand it back; also happens once per atom for SAD) that used to use create_psi4_string_from_molecule & create_molecule_from_string now uses to_dict & from_dict. So even though all this serialization tech isn't hooked up to",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/834:6860,Validat,Validates,6860,https://psicode.org,https://github.com/psi4/psi4/pull/834,1,['Validat'],['Validates']
Security,"ttings.ddx_model,; ""DDX_SOLVENT"":""water""}) #without this calculation fails with psi4.driver.p4util.exceptions.ValidationError: Required option 'DDX_SOLVENT' is missing.; else:; print('ddx solvent option'); psi4.set_options({""ddx"": ""true"",; ""DDX_SOLVENT"": settings.ddx_settings.solvent,; ""DDX_RADII_SET"": settings.ddx_settings.radii_set,; ""DDX_MODEL"": settings.ddx_settings.ddx_model}); ```; However, when I run a testcase when inspecting the output file, the solvent_epsilon is printed out as 78.3553 not the test value 4 which I used in my test run. . It appears the issue lies in the if else statement in psi4/driver/procrouting/solvent/ddx.py, where the if statement core.has_option_changed(""DDX"", ""DDX_SOLVENT_EPSILON"") is not assigned as true (I added print statements to validate this):; ```; solvent = core.get_option(""DDX"", ""DDX_SOLVENT"").lower(); print(f'solvent option chosen is {solvent}') ; if core.has_option_changed(""DDX"", ""DDX_SOLVENT_EPSILON""): #this given as false; solvent_epsilon = core.get_option(""DDX"", ""DDX_SOLVENT_EPSILON""); print(f'epsilon option {solvent_epsilon}'); elif solvent == """":; raise ValidationError(""Required option 'DDX_SOLVENT' is missing.""); elif solvent not in pyddx.data.solvent_epsilon:; raise ValidationError(""Unknown solvent {solvent}.""); else:; solvent_epsilon = pyddx.data.solvent_epsilon[solvent]; ```; I have built a minimal worked example of the problem below where the issue is again replicated where the solvent_epsilon is set to that of water, and the DDX_SOLVENT_EPSILON option is ignored: ; ```; import psi4. h2o = psi4.geometry(""""""; O; H 1 0.96; H 1 0.96 2 104.5; """"""). psi4.set_options({""ddx"": ""true"", #supply a solvent here to see if epsilon then gets picked up; ""DDX_SOLVENT_EPSILON"":'5',; ""DDX_RADII_SET"": 'uff',; ""DDX_MODEL"": 'PCM',; ""DDX_SOLVENT"":""water""}) #without this calculation fails with psi4.driver.p4util.exceptions.ValidationError: Required option 'DDX_SOLVENT' is missing. psi4.set_memory('500mb'). psi4.energy('scf/sto-3g'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3119:2190,Validat,ValidationError,2190,https://psicode.org,https://github.com/psi4/psi4/issues/3119,3,['Validat'],['ValidationError']
Security,"vide a brief description of the PR's purpose here. -->; The common thread of this PR is be more explicit in what calculations Psi4 can do and conveying that to the user at runtime and through the docs. In practice, this involves expanding the coverage of stdsuite, using those results to autogenerate docs tables, reconciling hand-generated docs tables, referring to all in runtime errors, and cleaning stuff up along the way. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] MRCC now called with `set qc_module mrcc` rather than ""mr"" prefix onto method; - [x] Many NYI messages, whether from ManagedMethodError, MissingMethodError, or plain ValidationError from run_* fns have changed their wording and added content. On the whole, this should be helpful, but if you're searching for particular phrasing, you'll likely need to adjust regexes.; - [x] New tables in the docs with details on accessible methods.; - [x] Arbitrary-order MPn no longer runable with ROHF. Arbitrary-order ZAPTn no longer runable with RHF.; - [x] Running DF through CCENERGY (experimental, expert only) may now require `set qc_module ccenergy`. ## Dev notes & details; - [x] running stdsuite writes a storage file, and a new document_capabilities script turns the storage file into various tables that newly (1) include all-electron/frozen-core info (notated ""aefc"" in places), (2) show default modules and default e.g., mp2_type, (3) cover most single-ref ground-state total-energy methods, (4) are proven to honor return val and qcvar contracts. details of how and why this works are at [psi4/share/psi4/scripts/merge_stdsuite.py](https://github.com/psi4/psi4/pull/2731/files#diff-4a81ee0fb4705fe6acd6ac7f6417f5a899437a93780329a5f647a94eea425c24R8) . If you want to suggest changes to notation, keep in mind that main-body cell contents must be expressible in a single unicode character width, othe",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2731:1038,access,accessible,1038,https://psicode.org,https://github.com/psi4/psi4/pull/2731,1,['access'],['accessible']
Security,"vs/dev/lib/python3.12/site-packages/psi4/driver/qcdb/libmintsmolecule.py"", line 1570, in update_geometry; self.set_point_group(self.find_point_group()); ^^^^^^^^^^^^^^^^^^^^^^^; File ""/home/jevandezande/rowansci/peregrine/.pixi/envs/dev/lib/python3.12/site-packages/psi4/driver/qcdb/libmintsmolecule.py"", line 2423, in find_point_group; pg = self.find_highest_point_group(tol) # D2h subgroup; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; File ""/home/jevandezande/rowansci/peregrine/.pixi/envs/dev/lib/python3.12/site-packages/psi4/driver/qcdb/libmintsmolecule.py"", line 2523, in find_highest_point_group; return PointGroup(pg_bits); ^^^^^^^^^^^^^^^^^^^; File ""/home/jevandezande/rowansci/peregrine/.pixi/envs/dev/lib/python3.12/site-packages/psi4/driver/qcdb/libmintspointgrp.py"", line 1530, in __init__; self.constructor_bits(*args); File ""/home/jevandezande/rowansci/peregrine/.pixi/envs/dev/lib/python3.12/site-packages/psi4/driver/qcdb/libmintspointgrp.py"", line 1573, in constructor_bits; self.symb = self.bits_to_basic_name(self.PYbits); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; File ""/home/jevandezande/rowansci/peregrine/.pixi/envs/dev/lib/python3.12/site-packages/psi4/driver/qcdb/libmintspointgrp.py"", line 1755, in bits_to_basic_name; raise ValidationError('Unrecognized point group bits: %d\n' % (bits)). psi4.driver.qcdb.exceptions.ValidationError: Unrecognized point group bits: 80. Printing out the relevant lines from the Psithon --> Python processed input file:; H -0.3913180530 -0.8282585144 -0.5761431456; H 0.0839750469 -0.2910425067 1.0389058590; H 0.9764814973 0.2730248868 -0.3781855106; """"""); core.IO.set_default_namespace(""""); --> energy(""BP86/sto-3g""). !------------------------------------!; ! !; ! Unrecognized point group bits: 80 !; ! !; !------------------------------------!. Psi4 stopped on: Friday, 30 August 2024 04:55PM; Psi4 wall time for execution: 0:00:00.03. *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4.; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3213:4766,Validat,ValidationError,4766,https://psicode.org,https://github.com/psi4/psi4/issues/3213,2,['Validat'],['ValidationError']
Security,wb97X-V with density threshold of 1e-10 stops before printing the first SCF/SAD energy in the SCF iteration output. I dont have access to gcc5 and I cannot reproduce the error otherwise for now. e.g.:; https://dev.azure.com/psi4/psi4/_build/results?buildId=2170&view=logs&j=96451287-da82-57a8-2c11-8da7db9ab71a&t=895e49e6-cad9-5b25-6d66-c0b61859d928&l=801,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1943:128,access,access,128,https://psicode.org,https://github.com/psi4/psi4/issues/1943,1,['access'],['access']
Security,"what disturbing:. ```; #4 psi::SphericalGrid::build (scheme="""", npoints=1852534357, points=0x1b2) at /tmp/garden-install.1c2be761ae20/psi4-1.6.1-desres02-c7/psi4/src/psi4/libfock/cubature.cc:5142; 5142 /tmp/garden-install.1c2be761ae20/psi4-1.6.1-desres02-c7/psi4/src/psi4/libfock/cubature.cc: No such file or directory.; (gdb) print lebedev_mapping_; $5 = std::map with 6 elements = {; [26] = 0,; [26] = 0,; [26] = 0,; [26] = 0,; [26] = 0,; [26] = 0; }; ```. Which is obviously not correct in two ways:; 1. There shouldn't be multiple entries for 26; 2. The entry for 26 should be 3. The threads are all deadlocking on the `[]` access, probably because multiple threads all tried to access an _unset_ entry of 26, wrote 0 to it in the process, and ran into each other. From what I can find `[]` isn't thread-safe (because of situations like this), and `.at()` should be used instead. Since `lebedev_mapping_` is a static member of `SphericalGrid`, all threads within their nice shiny `new SphericalGrid()`s inside `SphericalGrid::build` are still accessing the same global map, and mayhem is happening in the process. ...but the more disturbing problem, IMO, is that `lebedev_mapping_` appears uninitialized up until this point. I suspect in an ideal codebase all entries in `lebedev_mapping_` that would ever be accessed would already exist, so the difference between `[]` and `.at()` is just the slight performance hit in the latter of checking that the entry exists. There _is_ a function that's supposed to take care of this... https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/cubature.cc#L5125. But from what I can tell, it never gets called. In the attached minimal example I set a breakpoint at `void SphericalGrid::initialize_lebedev()` and it's _never hit_. I also set a breakpoint at `s->order_ = lebedev_mapping_[npoints];` (the line where things hang on an Unlucky Run), and that line is definitely hit (so my breakpoints are firing correctly). I'm not sure what the consequ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2735:1911,access,accessing,1911,https://psicode.org,https://github.com/psi4/psi4/issues/2735,1,['access'],['accessing']
Security,"you end up with [(α|α) - (α|β) - (β|α) + (β|β)]. Upon exploiting spin-restriction, this reduces to [(α|α) - (α|β)]. For J, the second term is equal to the first, so the two cancel. For K, the second term is zero, so you have the first integral. For V, the two terms are neither equal nor zero. The V term cannot be neglected, even though it's normally added to the J term, which here is zero. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] V is still bundled with J, but the RSCF products now mark that they may need to get a J-like term. This is no longer equivalent to being singlet or not.; - [x] Several methods have been modified to have a singlet flag, necessary to pass to compure_Vx whether to compute the singlet or triplet term.; - [x] HF classes no longer have a `potential_` attribute. Individual classes may need to access signatures of the specific subclass they have. Instead, subclasses now have a specific subclass for their `potential_` attribute if applicable. An abstract method has been added to the HF base class to get the potential when the subclass doesn't change the method signature.; - [x] RV::compute_Vx_full now exists alongside RV::compute_Vx. The former needs to exist so we can have a flag to control the spin-integration. The latter needs to exist to not break polymorphism when we don't need that flag.; - [x] A new function has been created to make a UKS version of an RKS functional.; - [x] If a triplet is requested, `compute_functional` will build a UKS functional, compute for that, and cannibalize the pieces to get the properly triplet spin-integrated quantity.; - [x] Ability to do `DAXPBY` added.; - [x] Updated a bad test value. ## Checklist; - [x] `test_tdscf_excitations.py` passes. All 70 of the tests. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2885:3288,access,access,3288,https://psicode.org,https://github.com/psi4/psi4/pull/2885,1,['access'],['access']
Security,"…on the external point charges of the ExternalPotential. ## Description; Provides a way to get the gradient of the potential between a Wavefunction object and an ExternalPotential object on the external point charges. These gradients are collected and stored in a protected SharedMatrix object of the ExternalPotnetial during the ExternalPotential.computePotentialGradients() routine, and they are accessible through a ExternalPotential.gradient() method which is bound to a corresponding method in the Python API. ## User API & Changelog headlines; - [ ] Given a Wavefunction object with an ExternalPotential for which a gradient call has been made, the corresponding gradient on the embedded point charges represented by the ExternalPotential can be retrieved by calling gradient() on the ExternalField. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3087:398,access,accessible,398,https://psicode.org,https://github.com/psi4/psi4/pull/3087,1,['access'],['accessible']
Testability," ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/testresults.log"" ""false"" ""/Users/bsenjean/Documents/Git_repositories/psi4"" ""false"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/tests/nbody-convergence/output.dat"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/bin/psi4"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/share/psi4"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/""; Directory: /Users/bsenjean/Documents/Git_repositories/psi4/objdir/tests/nbody-convergence; ""nbody-convergence"" start time: Apr 16 15:44 CEST; Output:. Traceback (most recent call last):; File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/__init__.py"", line 55, in <module>; from . import core; ImportError: dlopen(/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so, 2): Library not loaded: @rpath/libiomp5.dylib; Referenced from: /Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so; Reason: image not found. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/bin/psi4"", line 184, in <module>; import psi4; File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/__init__.py"", line 60, in <module>; raise ImportError(""{0}"".format(err)); ImportError: dlopen(/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so, 2): Library not loaded: @rpath/libiomp5.dylib; Referenced from: /Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so; Reason: image not found; Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); <end of output>; Test time = 0.40 sec. Test Failed.; ""nbody-convergence"" end time: Apr 16 15:44 CEST; ""nbody-convergence"" time elapsed: 00:00:00; ```. Thank you for your help !",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1870:2849,Test,Test,2849,https://psicode.org,https://github.com/psi4/psi4/issues/1870,2,['Test'],['Test']
Testability," 'Eexch' : 0.018239207303845935, #TEST; 'Eind' : -0.007969545823122322, #TEST; 'Edisp' : -0.002794948165605119, #TEST; 'Etot' : -0.04171566532235386, #TEST; }. Epsi = { #TEST; 'Enuc' : mol.nuclear_repulsion_energy(), #TEST; 'Eelst' : variable(""SAPT ELST ENERGY""), #TEST; 'Eexch' : variable(""SAPT EXCH ENERGY""), #TEST; 'Eind' : variable(""SAPT IND ENERGY""), #TEST; 'Edisp' : variable(""SAPT DISP ENERGY""), #TEST; 'Etot' : variable(""SAPT0 TOTAL ENERGY""), #TEST; } #TEST. for key in keys: #TEST; compare_values(Eref[key], Epsi[key], 6, key) #TEST. import os; import sys; import subprocess. os.chdir('fsapt'); with open('fA.dat', 'w') as fA: fA.write(""w1 1 2 3""); with open('fB.dat', 'w') as fB: fB.write(""w3 4 5 6""); subprocess.run([sys.executable, os.path.join('..', 'fsapt.py')], check=True). fEnergies = {}; fkeys = ['fEelst', 'fEexch', 'fEindAB', 'fEindBA', 'fEdisp', 'fEedisp', 'fEtot'] #TEST. with open('fsapt.dat', 'r') as fsapt: #TEST; Energies = [float(x) for x in fsapt.readlines()[-2].split()[2:]] #TEST. for pair in zip(fkeys,Energies): #TEST; fEnergies[pair[0]] = pair[1] #TEST. fEref = { #TEST; 'fEelst' : -30.867, #TEST; 'fEexch' : 11.445, #TEST; 'fEindAB': -3.138, #TEST; 'fEindBA': -1.863, #TEST; 'fEdisp' : -1.754, #TEST; 'fEedisp': 0.000, #TEST; 'fEtot' : -26.177} #TEST. for key in fkeys: #TEST; compare_values(fEref[key], fEnergies[key], 2, key) #TEST; ```. ```; (py39b) psilocaluser@bash:psinet:/psi/gits/hrw-l2/objdir39b: (sept21qcdb_rb1) stage/bin/psi4 ../tests/fsapt-ext-abc-au/input.dat ; Enuc..................................................................................PASSED; Eelst.................................................................................PASSED; Eexch.................................................................................PASSED; Eind..................................................................................PASSED; Edisp.................................................................................PASSED; Etot.................",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2330:5242,TEST,TEST,5242,https://psicode.org,https://github.com/psi4/psi4/issues/2330,1,['TEST'],['TEST']
Testability," 'findif_step_size': 0.0035493397840830904} kw={'ref_gradient': array([[0., 0., 0.],; [0., 0., 0.]])}; INFO psi4.driver.driver_findif:driver_findif.py:1184 hessian() using ref_gradient to assess stationary point.; INFO psi4.driver.driver_findif:driver_findif.py:263 ; ----------------------------------------------------------; FINDIF; R. A. King and Jonathon Misiewicz; ----------------------------------------------------------. INFO psi4.driver.driver_findif:driver_findif.py:272 Using finite-differences of gradients to determine vibrational frequencies and ; normal modes. Resulting frequencies are only valid at stationary points.; Generating geometries for use with 5-point formula.; Displacement size will be 3.55e-03. INFO psi4.driver.driver_findif:driver_findif.py:291 Number of atoms is 2.; Number of irreps is 8.; Number of SALCs is 1.; Translations projected? 1. Rotations projected? 1. INFO psi4.driver.driver_findif:driver_findif.py:342 Index of SALCs per irrep:; 1 : 0 ; 2 : ; 3 : ; 4 : ; 5 : ; 6 : ; 7 : ; 8 : ; Number of SALCs per irrep:; Irrep 1: 1; Irrep 2: 0; Irrep 3: 0; Irrep 4: 0; Irrep 5: 0; Irrep 6: 0; Irrep 7: 0; Irrep 8: 0. INFO psi4.driver.driver_findif:driver_findif.py:367 Number of geometries (including reference) is 5.; Number of displacements per irrep:; Irrep 1: 4; Irrep 2: 0; Irrep 3: 0; Irrep 4: 0; Irrep 5: 0; Irrep 6: 0; Irrep 7: 0; Irrep 8: 0; =================================================================================== short test summary info ===================================================================================; FAILED test_task_planner.py::test_findif_2_0[kw1-9] - assert 1.0000000000000001e-11 == 1e-11; FAILED test_task_planner.py::test_findif_2_0[kw0-5] - assert 1.0000000000000001e-11 == 1e-11; ===================================================== 2 failed, 5798 passed, 1200 skipped, 51 xfailed, 4 xpassed in 41333.75s (11:28:53) ======================================================. ```. clang-15; Python-3.9; FreeBSD 13.2",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3014:7407,test,test,7407,https://psicode.org,https://github.com/psi4/psi4/issues/3014,3,"['assert', 'test']","['assert', 'test']"
Testability," -0.007969545823122322, #TEST; 'Edisp' : -0.002794948165605119, #TEST; 'Etot' : -0.04171566532235386, #TEST; }. Epsi = { #TEST; 'Enuc' : mol.nuclear_repulsion_energy(), #TEST; 'Eelst' : variable(""SAPT ELST ENERGY""), #TEST; 'Eexch' : variable(""SAPT EXCH ENERGY""), #TEST; 'Eind' : variable(""SAPT IND ENERGY""), #TEST; 'Edisp' : variable(""SAPT DISP ENERGY""), #TEST; 'Etot' : variable(""SAPT0 TOTAL ENERGY""), #TEST; } #TEST. for key in keys: #TEST; compare_values(Eref[key], Epsi[key], 6, key) #TEST. import os; import sys; import subprocess. os.chdir('fsapt'); with open('fA.dat', 'w') as fA: fA.write(""w1 1 2 3""); with open('fB.dat', 'w') as fB: fB.write(""w3 4 5 6""); subprocess.run([sys.executable, os.path.join('..', 'fsapt.py')], check=True). fEnergies = {}; fkeys = ['fEelst', 'fEexch', 'fEindAB', 'fEindBA', 'fEdisp', 'fEedisp', 'fEtot'] #TEST. with open('fsapt.dat', 'r') as fsapt: #TEST; Energies = [float(x) for x in fsapt.readlines()[-2].split()[2:]] #TEST. for pair in zip(fkeys,Energies): #TEST; fEnergies[pair[0]] = pair[1] #TEST. fEref = { #TEST; 'fEelst' : -30.867, #TEST; 'fEexch' : 11.445, #TEST; 'fEindAB': -3.138, #TEST; 'fEindBA': -1.863, #TEST; 'fEdisp' : -1.754, #TEST; 'fEedisp': 0.000, #TEST; 'fEtot' : -26.177} #TEST. for key in fkeys: #TEST; compare_values(fEref[key], fEnergies[key], 2, key) #TEST; ```. ```; (py39b) psilocaluser@bash:psinet:/psi/gits/hrw-l2/objdir39b: (sept21qcdb_rb1) stage/bin/psi4 ../tests/fsapt-ext-abc-au/input.dat ; Enuc..................................................................................PASSED; Eelst.................................................................................PASSED; Eexch.................................................................................PASSED; Eind..................................................................................PASSED; Edisp.................................................................................PASSED; Etot................................................................",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2330:5282,TEST,TEST,5282,https://psicode.org,https://github.com/psi4/psi4/issues/2330,2,['TEST'],['TEST']
Testability," -v -k 'not test_gdma' /home/joao/current/lib/python3.6/site-packages/psi4/tests/*.py`, where `/home/joao/current` is a symlink to `miniconda3`, gives me:. ```; ============================================================== test session starts ===============================================================; platform linux -- Python 3.6.1, pytest-3.1.2, py-1.4.34, pluggy-0.4.0 -- /home/joao/miniconda3/bin/python; cachedir: ../../../../../../.cache; rootdir: /home/joao, inifile:; collected 20 items . ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_aaa_profiling.py::test_threaded_blas <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_aaa_profiling.py XPASS; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_mrcc <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_chemps2 <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dftd3 <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_libefp <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_pcmsolver <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_erd <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_simint <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_json <- miniconda3/lib/python3.6/site-pa",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:2635,test,tests,2635,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['test'],['tests']
Testability," ...; installing: wheel-0.33.4-py36_0 ...; installing: pip-19.1.1-py36_0 ...; installing: pyopenssl-19.0.0-py36_0 ...; installing: urllib3-1.24.2-py36_0 ...; installing: requests-2.21.0-py36_0 ...; installing: conda-4.6.14-py36_0 ...; installing: h5py-2.8.0-py36h989c5e5_3 ...; installing: mkl_fft-1.0.12-py36ha843d7b_0 ...; installing: numpy-1.16.3-py36h7e9f1db_0 ...; installing: qcelemental-0.4.0-py_0 ...; installing: resp-0.7-py36ha93d1a2_0 ...; installing: scipy-1.2.1-py36h7c811a0_0 ...; installing: openfermion-0.9-py36hd763080_1 ...; installing: psi4-1.3.2+ecbda83-py36h189457c_0 ... Thank you for installing Psi4.; Website: psicode.org; Forum: forum.psicode.org; Manual: psicode.org/psi4manual/master/index.html; GitHub: github.com/psi4/psi4; Binary: anaconda.org/psi4/psi4; Inputs: /home/chenh/ly/sourcefolders/psi4conda/share/psi4/samples; Test (after first activating conda installation or environment):; psi4 /home/chenh/ly/sourcefolders/psi4conda/share/psi4/samples/sapt1/test.in; psi4 --test. For csh/tcsh command-line use, add to shell or ~/.tcshrc file:; source /home/chenh/ly/sourcefolders/psi4conda/etc/profile.d/conda.csh; conda activate; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/disk/for/scratch/files. For sh/bash command-line use, add to shell or ~/.bashrc file:; source /home/chenh/ly/sourcefolders/psi4conda/etc/profile.d/conda.sh; conda activate; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/disk/for/scratch/files. installing: snsmp2-1.0.3-py36he403277_2 ...; installing: openfermionpsi4-0.4-py36h934b37d_0 ...; installing: psi4-rt-1.3.2-py36ha6b60c8_0 ...; if: Expression Syntax.; ERROR: executing post_install.sh failed; [chenh@Pauling programs]$ psi4 -V; Segmentation fault (core dumped); ```; This problem is not a special case, and I have also found that someone has the same problem in other forums. My system is 2.6.32-431.el6.x86_64 #1 SMP Sun 2013 x86_64 x86_64 x86_64 GNU/Linux.; If you have any questions, please don't ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1788:4418,test,test,4418,https://psicode.org,https://github.com/psi4/psi4/issues/1788,1,['test'],['test']
Testability," ../../../../../../.cache; rootdir: /home/joao, inifile:; collected 20 items . ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_aaa_profiling.py::test_threaded_blas <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_aaa_profiling.py XPASS; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_mrcc <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_chemps2 <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dftd3 <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_libefp <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_pcmsolver <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_erd <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_simint <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_json <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_cfour <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:3060,test,tests,3060,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['test'],['tests']
Testability," 0.75906199, 0.52195302]),; 'mass': array([15.99491462, 1.00782503, 1.00782503]),; 'molecular_charge': 0.0,; 'molecular_multiplicity': 1,; 'name': 'h2o',; 'provenance': {'creator': 'QCElemental', 'routine': 'qcelemental.molparse.from_string', 'version': 'v0.24.0'},; 'real': array([ True, True, True]),; 'units': 'Angstrom'}; 2022-03-28:21:06:47,79 INFO [psi4.driver.driver:606] Return energy(): -76.0266327350908; 2022-03-28:21:06:47,83 INFO [psi4.driver.driver:748] Compute gradient(): method=scf, basis=cc-pvdz, molecule=h2o, nre=9.168193296424349; 2022-03-28:21:06:47,86 DEBUG [psi4.driver.driver:749] {'elbl': array(['', '', ''], dtype='<U1'),; 'elea': array([16, 1, 1]),; 'elem': array(['O', 'H', 'H'], dtype='<U1'),; 'elez': array([8, 1, 1]),; 'fix_com': False,; 'fix_orientation': False,; 'fragment_charges': [0.0],; 'fragment_multiplicities': [1],; 'fragment_separators': [],; 'geom': array([ 0. , 0. , -0.06577557, 0. , -0.75906199,; 0.52195302, 0. , 0.75906199, 0.52195302]),; 'mass': array([15.99491462, 1.00782503, 1.00782503]),; 'molecular_charge': 0.0,; 'molecular_multiplicity': 1,; 'name': 'h2o',; 'provenance': {'creator': 'QCElemental', 'routine': 'qcelemental.molparse.from_string', 'version': 'v0.24.0'},; 'real': array([ True, True, True]),; 'units': 'Angstrom'}; 2022-03-28:21:06:47,455 INFO [psi4.driver.driver:751] Return gradient(): -76.02663273512434; 2022-03-28:21:06:47,455 INFO [psi4.driver.driver:752] [[-0. 0. -0.01764163]; [ 0. -0.01243841 0.00882081]; [-0. 0.01243841 0.00882081]]; ```. ## Questions; - [x] What should default loglevel be? Py default is WARN=30. That presently will produce an empty log file since psi4 starts with INFO=20. Present setup is 20 for psithon and 30 for psiapi. ANSWER: going with 20. ## Checklist; - [x] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2512:3092,log,loglevel,3092,https://psicode.org,https://github.com/psi4/psi4/pull/2512,5,"['Test', 'log', 'test']","['Tests', 'log', 'loglevel', 'tests']"
Testability," 223 - opt10 (Timeout); 240 - pubchem1 (Failed); 241 - pubchem2 (Failed); 255 - pywrap-opt-sowreap (Failed); 264 - sapt4 (Failed); ```. The `pubchem` is probably just the firewall blocking stuff. Several times I've seen things like:. ```; 253: Unable to read the PSI4 Python folder - check the PSIDATADIR environmental variable; 253: Current value of PSIDATADIR is /user/scratch/gent/vsc403/vsc40307/EB/swalot/software/PSI/4.0b6-20160201-intel-2016a-mt-Python-2.7.11/share/psi4; ```. Where the value of `PSIDATADIR` is the install path instead of the build path. I think `pywrap-opt-sowreap` fails because of this. For the `sapt4` test:. ```; 264/305 Testing: sapt4; 264/305 Test: sapt4; Command: ""/apps/gent/CO7/haswell-ib/software/Python/2.7.11-intel-2016a/bin/python"" ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/psi4public-e4070d0024742579a445e084da9dde078310094d/tests/runtest.py"" ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/psi4public-e4070d0024742579a445e084da9dde078310094d/tests/sapt4/input.dat"" ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/obj/testresults.log"" ""false"" ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/psi4public-e4070d0024742579a445e084da9dde078310094d"" ""false"" ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/obj/tests/sapt4/output.dat"" ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/obj/bin/psi4""; Directory: /dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/obj/tests/sapt4; ""sapt4"" start time: Feb 15 13:13 CET; Output:; ----------------------------------------------------------; Traceback (most recent call last):; File ""<string>"", line 65, in <module>; File ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/psi4public-e4070d0024742579a445e084da9dde078310094d/lib/python/p4util/util.py"", line 98, in compare_values; raise TestComparisonError(message); p4xcpt.TestComparisonError: SAPT Elst: computed value (-0.0407606) does not match (-0.0407",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/253:1192,test,tests,1192,https://psicode.org,https://github.com/psi4/psi4/issues/253,1,['test'],['tests']
Testability," @psi-rking, I don't remember seeing any projection of rot/trans out of Hessian. Is this just because by using SALCs you're assured of only displacements in vib-active directions? Assuming we someday get an analytic Hessian mtd, projection would be needed, right? I'm inclined to group projection with the vib analysis for comparison of proj and unproj freqs, so psi4.fd module needn't be involved.; - [ ] signature `SharedMatrix fd_freq_1(boost::shared_ptr<Molecule> mol, Options &options, const boost::python::list& grad_list, int freq_irrep_only)` (just like at present); - [ ] remove communication with globals (`Process`); - [ ] return nmw H (just like at present). vibrational analysis; - should move to python; - possibly already drafted/ready by Addison/Brandon; - [ ] tentative signature `normalmode(molecule, hessian, gradient=None, **kwargs)` where the arrays are `psi4.Matrix` or numpy arrays, gradient defaults to None (just there to project out of Hessian), and I don't care about the function name; - [ ] mass-weights by masses in molecule; - [ ] does H = 1 – R – T projection; - should dress up printing w/reduced masses IR intensities (if get dipder) someday but that's beyond the scope of this issue; - [ ] returns freq & normco arrays (or OrderedDict w/symm, force constant, etc. info). thermo analysis; - should move to python; - already ready by Addison/Brandon; - [ ] needs printing and Cp additions backported from forthcoming C++ version; - [ ] tentative signature `thermo(molecule, frequencies, E0=None, **kwargs); - [ ] stash all those energy pieces in a dict or psivars; - should review anharm analysis so harm readily subcases it; - [ ] tentatively returns Total Gibbs Energy in E_h. application; - [ ] take freq-isotope test case (not checked in yet) and rewrite it (and the `driver.frequency()` fn) so that wfn (containing mol & H) from first H2O 2nd deriv calc can be passed into vib and thermo analyses w/o ever recomputing H. All the compare_values should still pass.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/347:3695,test,test,3695,https://psicode.org,https://github.com/psi4/psi4/issues/347,1,['test'],['test']
Testability," DETCI. Add functional-including qcvars for DFT (#1570, #1445); - Add option `PARENT_SYMMETRY` to replace a global. Don't use it directly (#1575); - Driver sow/reap for optimize, database which never worked for py3 removed (#1583); - Add 6-311G(2df, <any>) for 2nd row atoms (#1531); - Improve printing and guess for r_e for the `diatomic` procedure (#1601); - Response code cleaned to use Hessian-vector products (#1550); - Enable running pytest in parallel via `psi4 --test -n<N>` if package `pytest-xdist` installed (#1612); - Considerable code-cleanup at LGTM's prompting (#1618, #1633, #1631, #1616, #1617, #1624, #1620, #1622, #1627, #1639, #1630, #1629, #1636, #1632, #1626, #1619, #1625, #1623, #1634, #1650, #1651, #1621, #1655); - Considerable memory-leak cleanup at CPPCHECK's prompting (#1534) and a bit more at valgrind's prompting (#1755); - moved code to QCA; - molecule alignment code (#1644); - `QCAspect` refined into `qcel.Datum` (#1654); - use code from QCA; - testing functions dropped in favor of wrapping qcelemental testing functions. also, can choose between conventional Psi4 testing API and QCA API (#1644); - Windows testing and build (#1648); - Add CSAM screening to ERISieve as alternative to Schwarz. Turn on with `set screening csam` (#1499); - New Bragg-Slater (BS) radii change DFT total energies slightly (#1591); - Extend `SAD_SCF_TYPE` to all usual `SCF_TYPE` types by using exact or DF integrals under the hood (#1477).; - Implement quadrature weights cutoff at 1.e-15, which together with pruning makes DFT on C_60 40% faster (#1581); - Compute multipole potential integrals to arbitrary order, replacing code for EFP that was fixed at octupole (#1657); - Allow external potentials in FISAPT (#1608); - Speed up electric field integrals (25x) (#1671); - Implement SAD natural orbitals guess (#1672); - Analytic Hessians for LSDA functionals (#1664); - Add qc2p basis set from CFOUR (#1718); - Update to g2g v2 API (#1718); - Density cumulant functional theory (",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562:5606,test,testing,5606,https://psicode.org,https://github.com/psi4/psi4/issues/1562,2,['test'],['testing']
Testability," Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; -- Found TargetOpenMP: Found TargetOpenMP: /usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so;/usr/lib/x86_64-linux-gnu/libpthread.so ; CMake Error at /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:137 (message):; Could NOT find MathOpenMP (missing: MathOpenMP_MESSAGE); Call Stack (most recent call first):; /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:378 (_FPHSA_FAILURE_MESSAGE); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/FindMathOpenMP.cmake:97 (find_package_handle_standard_args); /usr/share/cmake-3.11/Modules/CMakeFindDependencyMacro.cmake:48 (find_package); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/TargetLAPACKConfig.cmake:45 (find_dependency); CMakeLists.txt:25 (find_package). -- Configuring incomplete, errors occurred!; See also ""/home/laz/build/psi4/psi4/objdir/psi4-core-prefix/src/psi4-core-build/CMakeFiles/CMakeOutput.log"".; CMakeFiles/psi4-core.dir/build.make:108: recipe for target 'psi4-core-prefix/src/psi4-core-stamp/psi4-core-configure' failed; make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-configure] Error 1; CMakeFiles/Makefile2:646: recipe for target 'CMakeFiles/psi4-core.dir/all' failed; make[1]: *** [CMakeFiles/psi4-core.dir/all] Error 2; Makefile:140: recipe for target 'all' failed; make: *** [all] Error 2; ```. I also had a different combination (compiling with clang?) that built fully but then gave a run-time error about attempting to load both libomp5.so and libiomp5.so. I'm happy to poke things at this end to test but cmake is not my forte and it looks a bit of a nightmare here to take in all possible combinations!. This is with a clean tree checked out from git straight before building.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041:4168,log,log,4168,https://psicode.org,https://github.com/psi4/psi4/issues/1041,2,"['log', 'test']","['log', 'test']"
Testability," FORCE_MEM=FORCE_INCORE forces the DF algorithm to run its in-core sub-algorithm, and causes the calculation to throw an exception if not enough memory is given to Psi4 to utilize the in-core sub-algorithm. So why, exactly, do we want this? In truth, this is mostly a debug and expert option. The entire reason I started this PR project is actually because the lack of control over in-core vs. out-of-core DF algorithms was a bit of a thorn in my side in my JK benchmarks. That said, it still works well as a debug option, wherein you can enforce looking at either the in-core or out-of-core algorithm for either MemDFJK or DiskDFJK. Also, FORCE_MEM=FORCE_INCORE has a neat practical application in that you can lock the calculation out of doing on-disk calculations, if one desires to not do so for time's sake. This first PR implements the FORCE_MEM keyword and applies it to the MemDFJK algorithm. The second half of this PR project will apply the FORCE_MEM keyword to DIskDFJK. ## User API & Changelog headlines; - [X] The ""FORCE_MEM"" expert option has been added to Psi4, enabling more fine-grained control over the behavior of the SCF_TYPE=""DF"" algorithms. ## Dev notes & details; - [X] Adds a new keyword ""FORCE_MEM"" to Psi4. The FORCE_MEM keyword allows the user to specify, for MemDFJK (in this PR) and DiskDFJK (the next PR), whether the algorithm uses its in-core (FORCE_MEM=FORCE_INCORE) or out-of-core (FORCE_MEM=NO_INCORE) sub-algorithm, or whether the sub-algorithm is selected automatically based on allocated memory (FORCE_MEM=AUTO, the default).; - [X] Implements functionality of the FORCE_MEM keyword to the MemDFJK class (i.e., the MEM_DF SCF_TYPE). ## Questions; - [x] Would ""FORCE_DF_MEM"" be a better name for the new keyword?. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2848:3363,Test,Tests,3363,https://psicode.org,https://github.com/psi4/psi4/pull/2848,3,"['Test', 'test']","['Tests', 'tests']"
Testability," Model; from qcelemental.models import AtomicInput, Molecule; import qcengine; import numpy. qc_mol = Molecule.from_data(; """"""; 0 1; C -2.770566610000 0.138041700000 0.070178320000; C -1.574766790000 -2.182402580000 0.041630990000; C 1.033304570000 -2.323434390000 -0.024422900000; C 2.435037490000 -0.121299970000 -0.061679550000; C 1.259017560000 2.209348470000 -0.033641890000; C -1.350150920000 2.328080550000 0.032456990000; I 6.389923580000 -0.318582790000 -0.161855610000; H -4.794725900000 0.238941070000 0.121450260000; H -2.664958600000 -3.891956620000 0.070604800000; H 1.951364020000 -4.127647160000 -0.046322210000; H 2.351710440000 3.913369620000 -0.062674850000; H -2.265188840000 4.137542080000 0.054275640000; units bohr; no_com; no_reorient; """"""; ); # create the psi4 job; spec = Model(method=""PBE0"", basis=""def2-TZVPPD""); task = AtomicInput(; molecule=qc_mol,; driver=""properties"",; keywords={; ""function_kwargs"": {; ""properties"": [; # ""dipole_polarizabilities"",; ""mbis_charges"",; ""quadrupole"",; ""mulliken_charges"",; ""dipole"",; ""lowdin_charges"",; ""wiberg_lowdin_indices"",; ""mayer_indices"",; ]; },; ""ddx"": True,; ""ddx_model"": ""pcm"",; ""ddx_solvent_epsilon"": 4.0,; ""ddx_solvent"": ""water"",; },; model=spec,; ); result = qcengine.compute(; input_data=task, raise_error=True, task_config={""ncores"": 4}, program=""psi4""; ); print(result.extras[""qcvars""][""MBIS CHARGES""]); ```; `def2-TZVPPD`; > [[ 2.5896714 ]; [ 0.9083468 ]; [ 0.96984483]; [ 1.82049044]; [ 1.84275851]; [ 1.27477756]; [-0.33630084]; [ 0.9999906 ]; [-0.6920741 ]; [-7.79483929]; [-2.0360328 ]; [ 0.45360942]]. `def2-TZVP`; >[[-0.14122935]; [-0.13601096]; [-0.12667168]; [-0.07069663]; [-0.12664356]; [-0.13593726]; [-0.05171043]; [ 0.15172393]; [ 0.15317262]; [ 0.16536587]; [ 0.16536188]; [ 0.15326172]]. ## conda output; ```; # packages in environment at /Users/joshua/mambaforge/envs/qcsubmit-test-psi4:; #; # Name Version Build Channel; psi4 1.9 py311h5db8dd7_1 conda-forge; pyddx 0.6.0 py311h6a48a4f_1 conda-forge; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3135:2153,test,test-,2153,https://psicode.org,https://github.com/psi4/psi4/issues/3135,1,['test'],['test-']
Testability, PASSED [ 73%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-RPA-cc-pvdz] xfail [ 76%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-TDA-cc-pvdz] xfail [ 80%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-RPA-cc-pvdz] xfail [ 83%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-TDA-cc-pvdz] xfail [ 86%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-wB97X-RPA-cc-pvdz] PASSED [ 90%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-wB97X-TDA-cc-pvdz] PASSED [ 93%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-RPA-cc-pvdz] xfail [ 96%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-TDA-cc-pvdz] xfail [100%]; =========================================================================== short test summary info ============================================================================; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-RPA-cc-pvdz]; reason: RKS Vx kern,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1349:5898,test,tests,5898,https://psicode.org,https://github.com/psi4/psi4/pull/1349,1,['test'],['tests']
Testability," PR https://github.com/psi4/psi4/pull/2978 added testing to detect these broken combinations. This PR actually fixes the broken combinations detected through the added test. The most notable change as a result of fixing these issues is the handling of how certain variables within the `TwoBodyAOInt` class are initialized. To enable universal support of JK builds with `SCREENING = NONE`, an option has been added to manually call the `TwoBodyAOInt::create_sieve_pair_info()` function via the new wrapper function `TwoBodyAOInt::initialize_sieve()`. Multiple JK builds rely on values of variables initialized via `create_sieve_pair_info()` , and `initialize_sieve()` is now used to initialize the required variables if `SCREENING = NONE` is set. In this way, `SCREENING = NONE` can exist with the benefits it provides, while still working with all JK builds. Also, changes are made to ensure that no screening actually occurs in JK builds when `SCREENING` is set to `NONE`. In line with the above, some tests have been expanded. `test_comprehensive_jk_screening.py` has been changed to account for the `SCF_TYPE`/`SCF_SUBTYPE`/`SCREENING` combinations that were fixed. `test_erisieve.py` has been updated to more thoroughly test `SCREENING=NONE`. It is worth noting that, unfortunately, `TwoBodyAOInt::initialize_sieve()` must be defined per integral engine, and so the fixes of this PR only work with Libint2. The issues this PR tries to fix, still persist if Simint is used instead. ## User API & Changelog headlines; - [X] N/A. ## Dev notes & details; - [X] Adds a new function to `TwoBodyAOInt`, `initialize_sieve`, which allows for manual initialization of screening variables via `create_sieve_pair_info()` needed for JK builds.; - [X] Uses the above function to fix combinations of `SCF_TYPE`, `SCF_SUBTYPE`, and `SCREENING` which were broken.; - [X] Updates the `test_comprehensive_jk_screening.py` and `test_erisieve.py` test to account for the previously-described fixes. ## Questions; -[] S",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3060:1421,test,tests,1421,https://psicode.org,https://github.com/psi4/psi4/pull/3060,1,['test'],['tests']
Testability," Psi, both the `Wavefunction` class and the `MintsHelper` class have their own copy of `basissets_`, a map from basis name to the actual `BasisSet`. There are `get_basisset`, `set_basisset`, and `basisset_exists` methods to manipulate `basissets_`, which are identical between the two classes. So `basissets_` and associated methods are functionally identical on the two classes. The problem is that every `Wavefunction` object is already guaranteed to have a `MintsHelper` object, there is no reason for the `Wavefunction` object to ever have a different `basissets_` from its `MintsHelper` (because `Wavefunction`’s only use for `basissets_` is aforementioned methods), but there is no mechanism to synchronize the `basissets_` variables of a `Wavefunction` and its `MintsHelper`. So we can have two sources disagreeing about the same information. This PR solves the problem by moving the responsibility for managing `basissets_` onto `MintsHelper`. The `Wavefunction` methods now just call the relevant `MintsHelper` methods. ~~I’m in favor of deprecating the offending `Wavefunction` methods, but I’ll open this to core developer discussion before adding that to the PR because I expect changing `Wavefunction` API will be controversial.~~. I’ve also marked some functions as override to silence annoying compiler warnings. Obligatory Pings: @jturney for `libmints` changes, @loriab for API changes. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Silences compiler warnings; - [x] Eliminates `wavefunction.basissets_` so that `wavefunction.mintshelper().basissets_` is the source of truth. ## Questions; ~~Do we want to deprecate `wavefunction.basissets()`, `wavefunction.get_basisset()`, `wavefunction.set_basisset()`, and `wavefunction.basisset_exists()` in favor of `wavefunction.mintshelper().method_name_here()`?~~. ## Checklist; - [x] Quick tests, dkh tests, and x2c tests all pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1970:1927,test,tests,1927,https://psicode.org,https://github.com/psi4/psi4/pull/1970,3,['test'],['tests']
Testability," Python script, the numpy SVD functions breaks (and becomes nondeterministic). This can be salvaged, strangely, by `import`ing `numpy` before importing `psi4`. I see this issue on an OS X 10.12.3 laptop, with Python 3.5 (installed through conda), with psi4 installed via `conda install psi4 psi4-rt -c psi4/label/dev -c psi4`. Numpy was also installed through conda (default channel). It's at version 1.11.3. I _do not_ see this issue on the other platform I've tested so far (Python 2.7, CentOS 7, psi4 installed from source). The specific version of psi4, according to `conda list`, is ; ```; psi4 1.2a1.dev249+623ad64 py35_0 psi4/label/dev; ```. Here's the script to reproduce:; ```; import psi4 # flipping the order of these two imports ""fixes"" the problem; import numpy as np. def main():; 	random = np.random.RandomState(0); 	N = 50; 	A = random.randn(N, N). 	U, s, VT = np.linalg.svd(A, full_matrices=True); 	A_reconstructed = U.dot(np.diag(s)).dot(VT); 	if not np.allclose(A, A_reconstructed):; 		raise ValueError(""SVD reconstruction failed. difference: %.3f"" % np.linalg.norm(A - A_reconstructed)). if __name__ == '__main__':; 	main(); ```. Example output:; ```; $ python simple-test.py; /Users/mcgibbon/miniconda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; Traceback (most recent call last):; File ""simple-test.py"", line 16, in <module>; main(); File ""simple-test.py"", line 13, in main; raise ValueError(""SVD reconstruction failed. difference: %.3f"" % np.linalg.norm(A - A_reconstructed)); ValueError: SVD reconstruction failed. difference: 51031.324. $ python simple-test.py; /Users/mcgibbon/miniconda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; Traceback (most recent call last):; File ""simple-test.py"", line 16, in <module>; main(); File ""simple-test.py"", line 13, in main; raise ValueError(""SVD reconstruction failed. difference: %.3f"" % np.linalg.norm(A - A_reconstructed)); ValueError: SVD reconstruction failed. difference: 266529.466; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/748:1280,test,test,1280,https://psicode.org,https://github.com/psi4/psi4/issues/748,6,['test'],['test']
Testability, Starting second half-transformation.; Two-electron integral transformation complete.; Frozen core energy = 0.00000000000000. Size of irrep 0 of <ab|cd> integrals: 0.017 (MW) / 0.135 (MB); Size of irrep 1 of <ab|cd> integrals: 0.005 (MW) / 0.041 (MB); Size of irrep 2 of <ab|cd> integrals: 0.006 (MW) / 0.049 (MB); Size of irrep 3 of <ab|cd> integrals: 0.014 (MW) / 0.115 (MB); Total: 0.043 (MW) / 0.341 (MB). Size of irrep 0 of <ia|bc> integrals: 0.005 (MW) / 0.037 (MB); Size of irrep 1 of <ia|bc> integrals: 0.001 (MW) / 0.009 (MB); Size of irrep 2 of <ia|bc> integrals: 0.002 (MW) / 0.012 (MB); Size of irrep 3 of <ia|bc> integrals: 0.003 (MW) / 0.028 (MB); Total: 0.011 (MW) / 0.086 (MB). Size of irrep 0 of tijab amplitudes: 0.001 (MW) / 0.011 (MB); Size of irrep 1 of tijab amplitudes: 0.000 (MW) / 0.001 (MB); Size of irrep 2 of tijab amplitudes: 0.000 (MW) / 0.004 (MB); Size of irrep 3 of tijab amplitudes: 0.001 (MW) / 0.006 (MB); Total: 0.003 (MW) / 0.022 (MB); ```. Output from running coupled cluster tests:. ```; Start 9: cc1; 1/79 Test #9: cc1 ..............................***Failed 1.95 sec; Start 10: cc10; 2/79 Test #10: cc10 .............................***Failed 1.59 sec; Start 11: cc11; 3/79 Test #11: cc11 .............................***Failed 1.82 sec; Start 12: cc12; 4/79 Test #12: cc12 .............................***Failed 1.56 sec; Start 13: cc13; 5/79 Test #13: cc13 .............................***Failed 1.64 sec; Start 14: cc13a; 6/79 Test #14: cc13a ............................***Failed 1.65 sec; Start 15: cc14; 7/79 Test #15: cc14 .............................***Failed 1.58 sec; Start 16: cc15; 8/79 Test #16: cc15 .............................***Failed 1.53 sec; Start 17: cc16; 9/79 Test #17: cc16 .............................***Failed 1.65 sec; Start 18: cc17; 10/79 Test #18: cc17 .............................***Failed 1.65 sec; ```. Other tests are passing:. ```; Start 1: adc1; 1/294 Test #1: adc1 ............................. Passed 18.67 sec; Star,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/230:3064,test,tests,3064,https://psicode.org,https://github.com/psi4/psi4/issues/230,1,['test'],['tests']
Testability," The final CompositeJK PR will be the refactoring of the CompositeJK backend to truly support arbitrary mixing and matching of J/K build algorithms. ## User API & Changelog headlines; - [x] The DO_LINK option has been removed.; - [x] The SCF_TYPE option ""LINK"" has been added, enabling use of the integral-direct density-fitted J + Linear Exchange K algorithm combination for JK computations. ## Dev notes & details; - [x] The new JK subclass ""DFJLinK"" has been added to Psi4. DFJLinK combines the integral-direct density fitted formation of J with the linear-scaling formation of the exact K through the LinK algorithm. DFJLinK supports both density screening and incremental Fock construction, using machinery similar to the DirectJK class to do so.; - [x] The computation of LinK, and all references thereof, have been removed from DirectJK. This includes, e.g., removal of the build_linK() function from DirectJK entirely.; - [x] All relevant tests, samples, and documentation (particularly those pertaining to LinK) have been updated to reflect the two previous changes. ## Questions; - [ ] How do we feel about having the integral-direct DF-J implementation in two separate JK subclasses? The plan is to remove this in the second CompositeJK PR, when DFJLinK and DFJCOSK are combined, but is the dual implementation of DF-J something people would take issue with?; - [ ] Do we want to the update the definition of num_computed_shells() for DFJLinK? For now, I have this set to the default JK definition for DFJLinK, and the issue is that, since there are shell triplet counts from DFJ and shell quartet counts from LinK, there would have to be a slightly more expansive change to how num_computed_shells() works in the JK class hierarchy to support DFJLinK. I'm thinking updating this will be a problem for the second CompositeJK PR, but I'm curious to see what others have to say. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://p",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2762:4530,test,tests,4530,https://psicode.org,https://github.com/psi4/psi4/pull/2762,1,['test'],['tests']
Testability," ValidationError(""Functional %s is not understood"" % str(functional)); ; # Build the wavefunction; core.prepare_options_for_module(""SCF""); if reference in [""RHF"", ""RKS""]:; > wfn = core.RHF(ref_wfn, superfunc); E MemoryError: std::bad_alloc. /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: MemoryError; _____________________________________________________________ test_psi4_scfproperty ______________________________________________________________. def test_psi4_scfproperty():; """"""scf-property""""""; #! UFH and B3LYP cc-pVQZ properties for the CH2 molecule.; ; with open('grid.dat', 'w') as handle:; handle.write(""""""\; 0.0 0.0 0.0; 1.1 1.3 1.4; """"""); ; ch2 = psi4.geometry(""""""; 0 3; c; h 1 b1; h 1 b1 2 a1; ; b1 = 1.0; a1 = 125.0; """"""); ; # Get a reasonable guess, to save some iterations; psi4.set_options({; ""scf_type"": ""pk"",; ""basis"": ""6-31G**"",; ""e_convergence"": 8,; ""docc"": [2, 0, 0, 1],; ""socc"": [1, 0, 1, 0],; ""reference"": ""uhf""}); ; ch2.update_geometry(); assert psi4.compare_values(6.648418918908746, ch2.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy""); ; props = ['DIPOLE', 'QUADRUPOLE', 'MULLIKEN_CHARGES', 'LOWDIN_CHARGES',; 'WIBERG_LOWDIN_INDICES', 'MAYER_INDICES', 'MAYER_INDICES',; 'MO_EXTENTS', 'GRID_FIELD', 'GRID_ESP', 'ESP_AT_NUCLEI',; 'MULTIPOLE(5)', 'NO_OCCUPATIONS']; ; > psi4.property('scf', properties=props). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py:211: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:823: in property; wfn = procedures['property'][lowername](lowername, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:2370: in run_scf_property; scf_wfn = run_scf(name, scf_do_dipole=False, do_timer=False, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:39857,assert,assert,39857,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['assert'],['assert']
Testability," [ # have to swap x & y, and -x; [ -0.09718540, 0.00309814, 0.00309734, 0.00009178, 0.09089814],; [ -0.06704124, 0.03019136, 0.05220334, -0.00529778, -0.01005568],; [ -0.11760428, 0.07849561, 0.06595344, -0.00926729, -0.01757747]]; odd_g_start.set(zip(*contents)); odd_rmsg_start = 0.058156. # optimized reference should be same as norm, but in practice is this. odd_nre_opt = 33.838291620; odd_e_opt = -139.301327453; odd_rmsg_opt = 0.0422103431176. # should be able to pass starting gradient at new geometry, then zero grad final structure. test_odd_start(oddz) # works; #test_zero_grad(oddz) # should work; test_badodd_grad(oddz) # works b/c I'm testing against the bad results. # qu-est-ce que c-est? By RMS Force the optimization looks to proceed ; # nicely. But look at that final gradient with unmoveable large gradient; # components. It's not orientation, as input is zmat and it's the same with cartesian ; # coordinates in a couple orientations. It's not corruption associated; # with wavefunction pass, as I've tested an older version. It's not a local ; # minimum as the total gradient wouldn't be so large. It's not too distorted a ; # starting structure, as q-chem and molpro converge to the real minimum promptly. It's not; # symmetry constrained, as it's c1. I'm at a loss. # for oddz; # start; # 25.7790013416; # -139.174980786; # 0.0581560524872; # Optimizer: Optimization complete!; # opt; # 33.8382916197; # -139.301327453; # 0.0422103431176; #gradient = [; # [ -0.01135649578523, -0.02871892445843, -0.05475995417434],; # [ 0.00216387360216, 0.04113784938512, 0.07821983299617],; # [ 0.00215642675781, 0.04114952366672, 0.07824201651882],; # [ 0.00563414370780, -0.03413386327141, -0.06481576207381],; # [ 0.00140205171291, -0.01943458532669, -0.03688613326736]]. # --------------------------------------------------------------------------------------------------------------- ~; # Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; # ----------------------------",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310:6947,test,tested,6947,https://psicode.org,https://github.com/psi4/psi4/issues/310,1,['test'],['tested']
Testability," [0.0]; m: [2]; fm: [3]; Following warning is harmless if you've altered chgmult through `set_molecular_change` or `set_multiplicity`. Such alterations are an expert feature. Specifying in the original molecule string is preferred. Nonphysical masses may also trigger the warning. c: [1.0, 0]; fc: [0.0]; m: [2]; fm: [3]; Following warning is harmless if you've altered chgmult through `set_molecular_change` or `set_multiplicity`. Such alterations are an expert feature. Specifying in the original molecule string is preferred. Nonphysical masses may also trigger the warning.; ...; ```. ```; c: [1.0, 0]; fc: [0.0]; m: [2]; fm: [3]; ```; steems from https://github.com/psi4/psi4/blob/master/psi4/driver/qcdb/molecule.py#L1646. and can be silenced by setting `verbose=-1`,; the other is 4 lines below:. https://github.com/psi4/psi4/blob/master/psi4/driver/qcdb/molecule.py#L1650. This PR, adds `quiet` param to `to_dict` in Molecule and `energy` in Driver, and uses that in `ip_fitting` not to post both of them out. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] removed noise from stdout while running `ip_tunning`. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] silences plain `print` from `Molecule.to_dict()` - `qcel.molparse.from_arrays` and warning around setting charge/multiplicity when running `ip_fitting`. This shouldn't change other code paths. ## Questions; - [ ] Do psi have any tests that test stdout with pytest?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3229:2803,test,tests,2803,https://psicode.org,https://github.com/psi4/psi4/pull/3229,5,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability," _check_version(version); shape, fortran_order, dtype = _read_array_header(fp, version); if len(shape) == 0:; count = 1; else:; count = numpy.multiply.reduce(shape, dtype=numpy.int64). # Now read the actual data.; if dtype.hasobject:; # The array contained Python objects. We need to unpickle the data.; if not allow_pickle:; > raise ValueError(""Object arrays cannot be loaded when ""; ""allow_pickle=False""); E ValueError: Object arrays cannot be loaded when allow_pickle=False. miniconda3/envs/psi/lib/python3.6/site-packages/numpy/lib/format.py:692: ValueError; _____________________________________________________ test_psi4_cc _____________________________________________________. @pytest.mark.smoke; def test_psi4_cc():; """"""cc1""""""; #! RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. psi4.core.clean(); h2o = psi4.geometry(""""""; O; H 1 0.97; H 1 0.97 2 103.0; """"""). psi4.set_options({""basis"": '6-31G**'}). > psi4.optimize('ccsd'). miniconda3/envs/psi/lib/python3.6/site-packages/psi4/tests/test_psi4.py:39:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; miniconda3/envs/psi/lib/python3.6/site-packages/psi4/driver/driver.py:1052: in optimize; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); miniconda3/envs/psi/lib/python3.6/site-packages/psi4/driver/driver.py:691: in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); miniconda3/envs/psi/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:784: in select_ccsd_gradient; return func(name, **kwargs); miniconda3/envs/psi/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:2314: in run_ccenergy_gradient; ccwfn = run_ccenergy(name, **kwargs); miniconda3/envs/psi/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:2262: in run_ccenergy; ref_wfn = scf_helper(name, **kwargs) # C1 certified; miniconda3/envs/psi/lib/python3.6/site-packages/psi4/driver/procrouti",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1611:3787,test,tests,3787,https://psicode.org,https://github.com/psi4/psi4/issues/1611,1,['test'],['tests']
Testability," ``XC GRID SPHERICAL POINTS``, ``XC GRID RADIAL POINTS``; - [x] `print > 2` adds (existing but unused) debug grid print out; - [x] tight DFT tests are updated with new values due to the new Bragg-Slater radii used; - [x] testing and error overview; - [x] option to properly disable all pruning (currently only indirect way); - [x] tests below indicate a reduction of the grid size by 30 and 45% using `ROBUST` and `TREUTLER` pruning, respectively. This leads to a 15-20% speed up for small molecules.; - [x] the following tests have been updated because of the new BS radii: `dft-b3lyp`; `dft-custom-mgga`, `dft-grad-lr1`, `dft-grad-lr3`, `dft-grad-meta`, `dft-grad1`, `dft-grad2`, `dft-omega`, `dft-psivar`, `dft-vv10`, `dft1`, `dftd3-grad`, `dftd3-version`, `frac-traverse`, `opt13`, `pcmsolver-dft`, `pcmsolver-dipole`; - [x] new test: `dft-pruning`. ## Questions; - Pruning enabled by default? -> not this PR, but after further testing yes. ## Checklist; - [x] Documentation; - [x] Pruning Tests added; - [x] All relevant `ctests` pass; (http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge. ----; Tests. ![grid_osc](https://user-images.githubusercontent.com/1648640/55870801-a6499c80-5b89-11e9-957d-68a08aa8ca41.png); ----; **pytest DFT benchmarks:**. _Interaction energies:_; With the introduced `ROBUST` pruning scheme (less aggressive variant of `TREUTLER`) all `dft_benchmark_interaction` tests pass. With `TREUTLER` 21 of 92 fail. For comparison, the `FUNCTION` schemes are all very aggressive, failure rate(!): ; - `P_SLATER=39/92`; - `D_SLATER=89/92`; - `LOG_SLATER=61/92`; - `P_GAUSSIAN=92/92` (yes, all fail);; - `D_GAUSSIAN=92/92`; - `LOG_GAUSSIAN=78/92`. _ionization energies:_; - `TREUTLER` 15/92 fail.; - `ROBUST` all pass. The `FUNCTION` schemes seem still very experimental and are not generally recommendable. ----; **errors in absolute and relative energies**; Based on S22 benchmark set",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1591:2293,Test,Tests,2293,https://psicode.org,https://github.com/psi4/psi4/pull/1591,1,['Test'],['Tests']
Testability," addons from the Azure pipelines yet but I can if everyone comfortable. - Testing Strategy; - [x] `ctest` is familiar, easy to read, and doesn't require configuration. on the other hand, it can't test installations, it can't do parameterizations, and by passing through TestingMacros and runtest.py, you can't always pass environment info into it. Don't worry, it's staying exactly as it is. I've added a single short file to several ctest directories ...; - [x] moved `setup.cfg` to `pytest.ini` and install it. only pytest was using the setup.cfg file anyways. all labels (things you can `pytest -m quick` akin to `ctest -L quick`) are stored here instead of duplicated btwn setup.cfg and conftest.py. The GHA will complain if you hit unregistered label.; - [x] changed the pytest import_mode from default to ""importlib"". this means (1) we don't need to have empty `__init__.py` in all 500 ctest directories and (2) avoid name conflicts when collecting ctests. Result is that tests/pytests is no longer a module, so a lot of the `from .utils import ...` become `from utils import ...` etc. Those names are looking generic, so may need to rename in future. - Testing Details; - [x] in tests, rewrote `using(package)` function whose role is to detect whether package present and skip test otherwise. now the fn additionally adds ""addon"" label and the name of the package label, so one can run `pytest -m dftd3`. to do this, had to separate into two fns: `uusing` for nested decorator marks and `using` for list marks.; - [x] to avoid FutureWarning, changed three `distutils.dir_util.copy_tree` into `shutil.copytree`. this is a py38 language feature, the first actual breaking of py37+ compatibility.; - [x] added the openfermion demo as test; - [x] apparently 3body in dftd3 fails on Mac. near-term goal is replacing, so skip for now; - [x] newly install pytest.ini and install any test_input.py, input.dat, and input.py from tests/ . sensibly, input.dat/py would only get installed if test_input.py",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2454:3351,test,tests,3351,https://psicode.org,https://github.com/psi4/psi4/pull/2454,1,['test'],['tests']
Testability," allows for easy extension of the COSX code to support more grids in the future, if desired; and allows for smoother implementation of other features in this PR. 2. Control over the active COSX grid now relies on the `current_grid_` string variable instead of the boolean `early_screening_` variable. This fits better with the `unordered_map` arrangement this code proposes, and is not limited to a two-grid scheme. 3. Upon user request (i.e., setting `DEBUG` != 0), information about each grid is printed out. Information printed out includes: total number of grid points, total number of grid blocks, average grid points per block, and average grid points per atom. 4. The timer.dat file presents the amount of time spent in COSX per grid, as well as the total COSX time. ## User API & Changelog headlines; - [X] Setting `DEBUG` to != 0 now prints out specific information on each grid used during a COSX calculation. ## Dev notes & details; - [X] COSX grids, and related variables, are now grouped together in `unordered_map` objects, and the code is adjusted to match.; - [X] Control over active grids is now controlled by `gridopt_` instead of `early_screening_`.; - [X] For COSX calculations, timer.dat now generates COSX timings per-grid, as well as the overall COSX time.; - [X] Informational printout of COSX grids has been added. ## Questions; - [ ] What do we want to do with `early_screening_`? In this PR, it basically has no use, since its functionality has been replaced by that of `gridopt_`. Early screening as a tactic (i.e., using looser ERI screening thresholds for early SCF iterations) _is_ a thing that could be added in the future for which `early_screening_` could be applicable, but that is not yet in Psi4 as far as I know. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3032:2153,Test,Tests,2153,https://psicode.org,https://github.com/psi4/psi4/pull/3032,3,"['Test', 'test']","['Tests', 'tests']"
Testability," and to collect different perturbative triples for qcisd.; - [x] collected qcvars correctly in DFOCC for CCD and QCHF. (It was harvesting the CCD method that tipped me into the rabbit-hole that became this PR.). - [x] TODO `pytest -m quick` is still friendly to run (CI finished in reasonable time), but the additions to stdsuite have make ordinary full pytests expensive. I need to manipulate default marks so folks don't inadvertently start hours of tests. `pytest -v ../tests/pytests/test_standard_suite.py -m ""not noci"" -n auto --durations 100 --durations-min 60.0` runs in 25 minutes on a 20-core machine with no individual test over 4m. That's not reasonable for a laptop. Blame the slow-to-converge oo methods, and it's going to get worse with occd and friends.; - [ ] TODO https://github.com/MolSSI/QCEngine/pull/376 and a new version of QCEngine are a prereq.; - [x] https://github.com/qcdb/qcdb/pull/57 is associated QCDB PR (psi4 PR is a prereq to it); - [ ] TODO full stdsuite in the presence of MRCC will have a couple faults of the ""not NYI"" variety after the MRCC defaulting logic switch from Q. I haven't decided how to remedy this, but it's unlikely to be hit, so I'll defer. ## Questions; - [ ] My version of Psi4+MRCC doesn't run CC2. Anyone else see this? (Just curious, not really needed for PR.); - [ ] I don't think the original module authors will find issues, but if you want to look over pertinent docs and capabilities tables, please do so.; - [x] [ADDED from #2737 For methods (or methods in certain circumstances, say reference or conv/df) only available through an external add-on, do we want those opt-in? That is, certainly the external must be (1) installed and detectable. But do we also want to (2) require the user to set qc_module=mrcc|adcc|chemps2 ? CheMPS2 has a long history of not requiring (2). ADCC has a shorter history of being the preferred backend and automatic choice, if present. @maxscheurer prefers not requiring (2). In this PR, I just switched MRCC",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2731:13215,log,logic,13215,https://psicode.org,https://github.com/psi4/psi4/pull/2731,1,['log'],['logic']
Testability," are now unified, so we don't need to edit all three generators when one is bugged.; - [x] Various PyBinding has been done. Among other things, the new Py-side compute_atom_map function from pyvib2 now works with psi4 molecules.; - [x] Fixes a bug in the `CharacterTable` copy constructor member initialization list, which used to require a string to be an integer.; - [x] Fixes a bug in vibrational analysis where the zero K enthalpy variable was misspelled.; - [x] Getting geometries for finite difference calculations is now Py-side.; - [x] Computing gradients from energies is now Py-side.; - [x] Computing hessians from gradients is now Py-side.; - [x] Computing hessians from energies is now Py-side.; - [x] Finish renaming the finite difference functions.; - [x] Overly picky changes for consistent style and commenting.; - [x] Review the findif test suite and add any tests as needed.; - [x] Add the banner.; - [x] Remove old FINDIF code (after migrating to attic).; - [x] Removed the C-side gradient writer.; - [x] Added several new gradient writing formats.; * **User-Facing for Release Notes**; - [x] A warning now displays if you attempt to access-by-index or iterate over an irreped object, instead of using a NumPy accessor.; - [x] Gradients can now be written, even for analytic hessians.; - [x] The .grad file will now only write the latest hessian. ## Questions; - [x] I had to change the internals of SymmetryOperation to make PyBind happy. I trust there are no objections?; - [x] Since pyvib2 made hessian writing no longer FINDIF's responsibility, shall I make gradient writing no longer FINDIF's responsibility as well? Then `comp_grad_from_hess` could return a Numpy array, like the `comp_hess_from_X` functions. ## Checklist; - [x] Tests added for any new features (or rather, edited in); - [x] [Relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1024:2006,Test,Tests,2006,https://psicode.org,https://github.com/psi4/psi4/pull/1024,3,"['Test', 'test']","['Tests', 'tests']"
Testability," changes, the PK option produces the same answer as the DIRECT algorithm for the system in question (the H atom):. ```; (p4dev) dpoole34@ds6:~$ cat minimal_example.py ; import psi4; import argparse. parser = argparse.ArgumentParser(); parser.add_argument('--num_threads', type=int, default=1); parser.add_argument('--scf_type', type=str, default='DF'); parser.add_argument('--element', type=int, default=1); parser.add_argument('--multiplicity', type=int, default=2); args = parser.parse_args(). psi4.core.be_quiet() # Silence output for clarity.; psi4.set_num_threads(args.num_threads, quiet=True); psi4.set_options({; 'REFERENCE': 'UHF',; 'SCF_TYPE': args.scf_type,; }). for i in range(10):; energy = psi4.energy(; 'pbe0/sto-3g',; molecule=psi4.core.Molecule.from_arrays(; geom=[0, 0, 0],; elez=[args.element],; molecular_charge=0,; molecular_multiplicity=args.multiplicity)); print(energy); (p4dev) dpoole34@ds6:~$ python3 minimal_example.py --num_threads 6 --scf_type PK --element 1 --multiplicity 2; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; (p4dev) dpoole34@ds6:~$ python3 minimal_example.py --num_threads 6 --scf_type DIRECT --element 1 --multiplicity 2; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; ```; ## User API & Changelog headlines. ## Dev notes & details; - [x] Fix bug present within PK calculations executed on small systems with small basis sets, wherein random energies would result from the calculation. ## Questions. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2763:2968,Test,Tests,2968,https://psicode.org,https://github.com/psi4/psi4/pull/2763,3,"['Test', 'test']","['Tests', 'tests']"
Testability," constructor that takes minimal (geom & Z) to full geom spec as arrays (homogeneous natom-length, not heterogeneous per-atom) and thoroughly validates them and fills in defaults, emitting a standardized (to become MolSSI JSON) molrec dict. Plain fn produces dict. `psi4.core.Molecule.from_arrays` and `qcdb.Molecule.from_arrays` go a step further and return a Mol.; - Function `validate_and_fill_chgmult` addresses current problems (1) create_mol_from_string's problem of not allowing overall chgmult to be set, defaulting all frag to `0 1`, and defaulting overall to fragA, (2) physical reasonableness (chg/mult/#elec compatible) not being tested for fragments at all and for overall not until the SCF code, (3) problems like psi4/psi4#114, and (4) overall and frag chgmult getting out of whack upon set_chg/mult, extract_subsets, not having frag chgmult editable, scf singlet/doublet defaulting. Taking given tot/frag chg/mult info and reasoning out the missing info would have been massive logic for chg/mult/#elec simultaneously, so this just codes up the rules and the defaults and throw `itertools.product` at it. Slows down a bit by 10 frag, but there's room for performance optimization. Ideally we'd call this at every reinterpret_coordentry, but that's not feasible for psi4 Mol. A good newdev starter project would be (for impossible reconciliations) to keep track of the least offending combo, and print out a summary of what rules it's violating.; - Function `reconcile_nucleus` addresses problems (1) can't specify atoms by atomic number, (2) can't specify masses by mass number, (3) faced with A, Z, E, real/ghost, and label `@C_special@12.1`, all as inputs, need to make sure (a) extracting as much user info as possible, (b) not allowing contradictory info, and (c) filling in everything else from periodictable. Like chgmult, fn handles this by defining rules and candidate values, and letting itertools do the rest. Expand atom label spec so can specify isotope and atomic number e.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/834:5815,log,logic,5815,https://psicode.org,https://github.com/psi4/psi4/pull/834,1,['log'],['logic']
Testability," control.; - [x] `json_ret = psi4.schema_wrapper.run_qcschema(json_input)` not `json_ret = psi4.json_wrapper.run_json(json_input)`. json_ret is now an object, so `.` access, not dictionary. The old schema runner uses a schema circa pre-2018 and we've warned it's deprecated for about a year, so I went ahead and updated all the tests to the new/current run_qcschema.; - [x] Pre-ddd, CBS wrapper issues a `clean()` btwn calcs. Plain string modelchem calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. With ddd, this is no longer happening, so for occasional string modelchem calcs (that is, `energy|gradient|hessian(""mtd/bas"")` only), you may need to add a clean in the input. A few test cases now sport extra cleans. Signatures of this problem are PSIO errors and, in an obscure case, CC amplitudes being all zeros when called as mtd/bas. An example is shown below, collected by modifying steps 6 & 7 of `cbs-xtpl-energy-conv` test:. | | master (pre-v1.6) | ddd (v1.6) |; |-------------------------------------|---------------------------------------------|---------------------------------------------|; | set basis bas; energy(mtd); clean() | ok | ok |; | set basis bas; energy(mtd) | `PSIO_ERROR: (Incorrect block end address)` | `PSIO_ERROR: (Incorrect block end address)` |; | energy(mtd/bas); clean() | ok | ok |; | energy(mtd/bas) | ok | `PSIO_ERROR: (Incorrect block end address)` |. - [x] Output file in continuous mode now looks much as it normally does in the master branch, except there's a few more headers printed and the individual cbs/findif/nbody `AtomicResult` outputs aren't added in real time. Running through QCFractal, the output file is expected to break down, but this hasn't been tried.; - [x] A Logging file has been introduced. All its contents should be considered experimental and subject to change.; - [x] Dipole derivatives through finite difference of di",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2575:4694,test,test,4694,https://psicode.org,https://github.com/psi4/psi4/pull/2575,1,['test'],['test']
Testability," decimal places.; SAPT Elst: computed value (-0.0407606) does not match (-0.0407577) to 6 decimal places.; Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); <end of output>; Test time = 132.94 sec; ----------------------------------------------------------; Test Failed.; ""sapt4"" end time: Feb 15 13:15 CET; ""sapt4"" time elapsed: 00:02:12; ----------------------------------------------------------. ```. For `pywrap-opt-sowreap`:. ```; 255/305 Testing: pywrap-opt-sowreap; 255/305 Test: pywrap-opt-sowreap; Command: ""/apps/gent/CO7/haswell-ib/software/Python/2.7.11-intel-2016a/bin/python"" ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/psi4public-e4070d0024742579a445e084da9dde078310094d/tests/runtest.py"" ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/psi4public-e4070d0024742579a445e084da9dde078310094d/tests/pywrap-opt-sowreap/input.dat"" ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/obj/testresults.log"" ""false"" ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/psi4public-e4070d0024742579a445e084da9dde078310094d"" ""true"" ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/obj/tests/pywrap-opt-sowreap/output.dat"" ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/obj/bin/psi4""; Directory: /dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/obj/tests/pywrap-opt-sowreap; ""pywrap-opt-sowreap"" start time: Feb 15 13:13 CET; Output:; ----------------------------------------------------------; /dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/obj/tests/pywrap-opt-sowreap/output.dat; Traceback (most recent call last):; File ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/psi4public-e4070d0024742579a445e084da9dde078310094d/tests/reap.py"", line 127, in <module>; main(*sys.argv[1:]); File ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/psi4public-e4070d0024742579a445e084da9dde078310094d/tests/reap.py"", line 106, in main; fi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/253:3166,log,log,3166,https://psicode.org,https://github.com/psi4/psi4/issues/253,1,['log'],['log']
Testability," did the trick. Moreover, at long last the `intel-openmp` package provides the libiomp5md.lib (import library) and libiomp5md.dll (runtime library) _pair_ needed at buildtime rather than just the latter. So we no longer need to link against the random lib stashed on GH, and the build can be far more self-contained. hooray!; - [x] linux azure (two bottom lanes with new enough py for np v2): np v2 needs qcel v0.28 _and_ it needs pb11 >=2.12 to compile against or you'll get ""atoms too close"". pb11 had been constrained to <2.12 (see below), so that was lifted. bumped qcng to 0.30 for internal builds, too.; - [x] docs: a PR snuck adding a citation to the bibliography w/o citing it, so the strict check failed. commented out for now; - [x] docs: once pb11 no longer restrained to <2.12 (see above), the ""FixedSize"" issue appears (see nitpick-exceptions), and the exceptions formerly emitted as `List` needed `list` counterparts added.; - [x] win azure: headers in np v2 are at `numpy/_core/include` not `numpy/core/include`. We were setting the latter explicitly for this lane, so removed that. Also added `${Python_NumPy_VERSION}` printing for feedback.; - [x] linux eco: dftd4-python now available for py312 (except on windows), so added that back to the package testing.; - [x] cmake: squashed a few warnings by setting policies. it looks like find_package(Boost) for L2 is still needing FindBoost rather than BoostConfig, so that one needs to be OLD for now.; - [x] conda: threading tests weren't running at the conda recipe b/c the trial job hit the block we put in on MemDF in Disk mode. Increased the memory in test_threading so it could run.; - [x] gha: bumped all the actions to the latest version to get rid of node deprecation warnings. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3186:3033,test,testing,3033,https://psicode.org,https://github.com/psi4/psi4/pull/3186,5,"['Test', 'test']","['Tests', 'testing', 'tests']"
Testability," different) from ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/AlphaMOs.png"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; Error copying file (if different) from ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/gdma-2.2.06.pdf"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; -- Documentation targets available: sphinxman (html), sphinxmini (quick html), sphinxpdf (LaTeX --> PDF); CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/D",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/629:3245,test,tests,3245,https://psicode.org,https://github.com/psi4/psi4/issues/629,1,['test'],['tests']
Testability," first look at `_engine_can_do` and observe that compared to good ol' dftd3, s-dftd3 (aka simple-dftd3) _can't_ do d2 and by default does d3 variants with ATM dispersion built in (s9=1.0); - [x] in contrast, mctc-gcp is a drop-in replacement for good ol' gcp (probably b/c I stuck with cmdline and didn't write an elaborate interface on top of it :-); - [x] this goes with https://github.com/MolSSI/QCEngine/pull/385; - [x] I didn't think we could just drop the most popular psi4 addon and demand replacement, so all of dftd3/s-dftd3/gcp/mctc-gcp work with psi4. s-dftd3 and mctc-gcp are preferred if present; - [x] need docs; - [x] status (special qcng = v0.26.0 unreleased at time of writing); - [x] PR psi4 with special qcng and dftd3 and gcp and psi4-channel dftd4 all work; - [x] PR psi4 with special qcng and s-dftd3 and mctc-gcp and c-f-channel dftd4 all work ~except for test_dftd3_mp2d~; - [x] old psi4 with special qcng ~doesn't work at all -- WIP~ now works; - old psi4 running fisapt-d then fsapt.py with special qcng gives wrong answer for emp disp; - run_dftd3 is used a lot in the tests as a qcengine wrapper around psi4 molecules. because dftd3 and s-dftd3 handle defaulting so differently, I can't easily make the fn call either/or. I'm tempted to (a) drop the capability or (b) have a run_sdftd3 that is a thin wrapper like run_dftd4 but won't be a drop-in replacement or (c) deprecate run_dftd3/run_dftd4/run_gcp in favor of a run_dispersion that hooks up to the psi EmpiricalDispersion class and _can_ provide a uniform interface (same logic for disp level hints, tweaked parameters, etc. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). For development, I've had two objdirs with two conda envs, one with psi4 disp packages and one with c-f disp packages, and run tests on each. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2791:4327,test,tests,4327,https://psicode.org,https://github.com/psi4/psi4/pull/2791,6,"['Test', 'log', 'test']","['Tests', 'logic', 'tests']"
Testability," here. -->; For some poorly understood confluence of reasons, for some users error messages can _sometimes_ get completely lost when Psi4 exits with a `PSIEXCEPTION`, especially when a PSIO error happens.; This can be observed in recent bug reports, see:. - https://github.com/psi4/psi4/issues/2970; - https://forum.psicode.org/t/sapt0-calculation-crashes-pointer-error/2839. In both of these cases the users were only seeing the error message that has been written to `cerr`, but not the string that `PSIEXCEPTION` should have printed. IIRC when I tried to research this quite a while ago, I have found this may be a bug in some versions of libstdc++. This PR adds a simple workaround: the exception message is also printed to `cerr` in `psio_error`. The only side effect, is that some users, who are currently not affected by the lost message problem, may start getting the same error message twice when a PSIO error happens. Spammy error exits are not great, but PSIO errors are not supposed to happen too often, and when they do loosing the error message is more annoying than having it be duplicated. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] PSIO error messages are now also printed to `cerr`, fixing an issue where (under some circumstances) large parts of the error message would never reach the user, . ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] The same error message that gets passed to `PSIEXCEPTION` is now printed to `cerr` before throwing in `psio_error`. ## Checklist; - [x] There is no easy way to add tests for ""are error messages getting delivered or not?""; - [x] Tests run by the CI are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2997:1915,test,tests,1915,https://psicode.org,https://github.com/psi4/psi4/pull/2997,2,"['Test', 'test']","['Tests', 'tests']"
Testability," i.e., the JK object. This PR solves two issues simultaneously:. 1. The primary purpose of this PR is to change the test_erisieve.py tests to work with the planned future density screening refactor. One issue that moving density screening from TwoBodyAOInt to JK currently brings up, is that it causes the tests on density screening within the pytest test_erisieve.py to fail. These failures occur because test_erisieve.py performs its screening tests directly using an ERI object generated by IntegralFactory. With density screening being removed from the TwoBodyAOInt object, this method of density screening testing can no longer be done. The current PR is designed to address this issue for when the density screening refactor happens. The aforementioned issue is addressed by implementing a new variable to the HF wavefunction, computed_shells_per_iter_, which keeps track of the number of shell quartets computed per SCF iteration. The computed_shells_per_iter_ variable is accessible to the user via Python, and thus can be used to conduct screening tests. In this way, density screening tests can be performed without the need for an ERI object. 2. As a bonus from the changes introduced by this PR, the DirectJK algorithm no longer has a need to print computed shell quartet counts to bench.dat. Bench.dat is used exclusively by the DirectJK object to dump the number of shell quartets computed per SCF iteration somewhere. That data is now accessible to the user in a cleaner fashion - it can be accessed through Python, in a manipulatable format. ## Notes; 1. Note that the changes in this PR have not been applied to the LinK portion of the DirectJK code. This is intentional, as Andy is planning on moving LinK out of DirectJK entirely, and editing the LinK code within DirectJK would interfere with that. Thus, the changes in this branch will be applied to LinK in a later update.; ; ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; -",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2547:1471,test,tests,1471,https://psicode.org,https://github.com/psi4/psi4/pull/2547,1,['test'],['tests']
Testability," in my high throughput script I provided a placeholder in this field if the DDX_SOLVENT_EPSILON option is selected:. ```; #check if dialetric constant is specified or not; if settings.ddx_settings.epsilon is not None:; print('ddx numeric option'); psi4.set_options({""ddx"": ""true"", #supply a solvent here to see if epsilon then gets picked up; ""DDX_SOLVENT_EPSILON"": settings.ddx_settings.epsilon,; ""DDX_RADII_SET"": settings.ddx_settings.radii_set,; ""DDX_MODEL"": settings.ddx_settings.ddx_model,; ""DDX_SOLVENT"":""water""}) #without this calculation fails with psi4.driver.p4util.exceptions.ValidationError: Required option 'DDX_SOLVENT' is missing.; else:; print('ddx solvent option'); psi4.set_options({""ddx"": ""true"",; ""DDX_SOLVENT"": settings.ddx_settings.solvent,; ""DDX_RADII_SET"": settings.ddx_settings.radii_set,; ""DDX_MODEL"": settings.ddx_settings.ddx_model}); ```; However, when I run a testcase when inspecting the output file, the solvent_epsilon is printed out as 78.3553 not the test value 4 which I used in my test run. . It appears the issue lies in the if else statement in psi4/driver/procrouting/solvent/ddx.py, where the if statement core.has_option_changed(""DDX"", ""DDX_SOLVENT_EPSILON"") is not assigned as true (I added print statements to validate this):; ```; solvent = core.get_option(""DDX"", ""DDX_SOLVENT"").lower(); print(f'solvent option chosen is {solvent}') ; if core.has_option_changed(""DDX"", ""DDX_SOLVENT_EPSILON""): #this given as false; solvent_epsilon = core.get_option(""DDX"", ""DDX_SOLVENT_EPSILON""); print(f'epsilon option {solvent_epsilon}'); elif solvent == """":; raise ValidationError(""Required option 'DDX_SOLVENT' is missing.""); elif solvent not in pyddx.data.solvent_epsilon:; raise ValidationError(""Unknown solvent {solvent}.""); else:; solvent_epsilon = pyddx.data.solvent_epsilon[solvent]; ```; I have built a minimal worked example of the problem below where the issue is again replicated where the solvent_epsilon is set to that of water, and the DDX_SOLVENT_EPSILON",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3119:1580,test,test,1580,https://psicode.org,https://github.com/psi4/psi4/issues/3119,2,['test'],['test']
Testability," justification? This PR keeps default B3LYP at `VWN3RPA_C` and [switches](https://github.com/psi4/psi4/pull/339/commits/cfcbf085305c8033186fb3c68c1b96f19688a939#diff-9e8e3243e87430585c59e5a407f6bf69R1314) B3LYP5 to `VWN5_C` and re-enables it. So the input file below works, yet that redefinition is disturbing.; - [x] minor ?: why is `wB88_X` being redefined [here](https://github.com/psi4/psi4/pull/339/commits/cfcbf085305c8033186fb3c68c1b96f19688a939#diff-9e8e3243e87430585c59e5a407f6bf69R654) when it was just defined up above [here](https://github.com/psi4/psi4/pull/339/commits/cfcbf085305c8033186fb3c68c1b96f19688a939#diff-9e8e3243e87430585c59e5a407f6bf69R603). Ok to delete 2nd definition as done in this PR?; - [x] minor ?: why is `bp86d1` building upon b3lyp as [here](https://github.com/psi4/psi4/pull/339/commits/cfcbf085305c8033186fb3c68c1b96f19688a939#diff-9e8e3243e87430585c59e5a407f6bf69R2114)? Ok to make it build upon bp86 as done in this PR?; ## Status; - [x] Ready to go. B3LYP3/5 test input. You'll need [this](https://raw.githubusercontent.com/drhaney/psi4/master/share/basis/6-31g_2df_p_.gbs) basis set. ```; # all non-psi4 references from http://forum.psicode.org/t/b3lyp-defect-compatibility-with-gamess-and-gaussian/193. # @jamont conditions. molecule {; 0 1; O; H 1 rOH; H 1 rOH 2 aHOH. rOH = 0.9622; aHOH = 103.84; }. set basis 6-311g(d); set scf_type pk; set e_convergence 9. e = energy('b3lyp'); compare_values(-76.4338100903, e, 7, 'b3lyp3 vs Gaussian'); compare_values(-76.4338100577, e, 7, 'b3lyp3 vs Gamess'). clean(). # @drhaney conditions. set basis 6-31G(2df,p); #set dft_spherical_points 590; #set dft_radial_points 99. e = energy('b3lyp'); compare_values(-76.4293315991, e, 5, 'b3lyp3 vs Gamess'); # GAMESS-VWNrpa_1 -76.4293 3159 91; # Psi4-VWNrpa_3 -76.4293 5426 98; # Gaussian-09 -76.4256 2566 74; # LAB psi4 -76.4293 4111 93 # large grid VWN3RPA_C VWN5RPA_C. e = energy('b3lyp5'); compare_values(-76.39221287, e, 5, 'b3lyp5 vs NWChem'); # GAMESS-VWN_5 -76.3922",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/339:1700,test,test,1700,https://psicode.org,https://github.com/psi4/psi4/pull/339,1,['test'],['test']
Testability," know programmatically what controls what method -- it's all hard-coded, sometimes in more than one place, in proc.py . Now there's a method:type association dict in procrouting/proc_data.py . There's also a little function there serving up the info, so you can get out the keyword and current value with `method_algorithm_type(mtd).keyword` and `method_algorithm_type(mtd).now`, respectively. This helps clean up proc.py and allows the controlling keyword to be linked for each method in the generated tables.; - [x] in proc.py, ; - [x] select_* functions have been made more boilerplate and elsewhere-mentioned DETCI and MRCC changes integrated in.; - [x] CCD is given select_ccd* functions to raise a sensible error message since the default (cc_type=CONV) isn't implemented. ; - [x] CC2 and CC3 are given select_* functions since now CCENERGY and MRCC cover them. This led to controversy (unresolved) over whether DF-CC2 is RTG, see #2710. A result is that you need to `set qc_module ccenergy` explicitly to use DF for CC2 -- a test case edit was needed.; - [x] `run_dfocc`, `run_dfocc_gradient` fns were simplified by using the `method_algorithm_type` fn; - [x] `run_fnodfcc`, `run_fnocc`, `run_cepa` were simplified by using the `method_algorithm_type` fn and the ""director"" dictionary syntax; - [x] some impossibilities fended off rather than being silently ignored: non-df-mp2 in dhdft, non-conv detci; - [x] The involved which-do-I-run--energy-gradient-or-hessian logic in `negotiate_derivative_type` and friends in driver_util.py does a great job at its task, but its error messages have been wanting, being hampered by being generated by exceptions. In particular, they give no clue how close you are to a working method -- do you need to tweak aefc or uhf/rohf or is this method nowhere in psi or have you misspelled it? Now, the ManagedMethodsError exception has been reworked to return current conditions data (to be caught and reformatted) and the error message itself (usually not seen",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2731:8480,test,test,8480,https://psicode.org,https://github.com/psi4/psi4/pull/2731,1,['test'],['test']
Testability," libpthread-2.28.s 00007F6F9C906B20 Unknown Unknown Unknown; libc-2.28.so 00007F6F9BDDC37F gsignal Unknown Unknown; libc-2.28.so 00007F6F9BDC6DB5 abort Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6B535A Unknown Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6B53C5 Unknown Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6B5658 Unknown Unknown Unknown; core.cpython-310- 00007F6F88B5A129 Unknown Unknown Unknown; core.cpython-310- 00007F6F88B69438 _ZN3psi4PSIO2rwEm Unknown Unknown; core.cpython-310- 00007F6F88B6B963 _ZN3psi4PSIO5writ Unknown Unknown; core.cpython-310- 00007F6F88B566E9 Unknown Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6DFBF4 Unknown Unknown Unknown; libpthread-2.28.s 00007F6F9C8FC14A Unknown Unknown Unknown; libc-2.28.so 00007F6F9BEA1DC3 clone Unknown Unknown; /var/spool/slurm/slurmd/job83930/slurm_script: line 27: 2245656 Aborted (core dumped); ```. I used conda to install psi4 in a new environment.; ```; psi4 1.7+6ce35a5 py310h769327c_1 psi4; ```. Below is the full log, which includes the geometry:. <details>. ```. Memory set to 7.451 GiB by Python driver.; Threads set to 4 by Python driver. Scratch directory: /scratch/njzjz/83930/; gradient() will perform analytic gradient computation. *** tstart() called on aerosol-020; *** at Fri May 26 20:10:38 2023. => Loading Basis Set <=. Name: DEF2-TZVPPD; Role: ORBITAL; Keyword: BASIS; atoms 1-33 entry C line 144 file /aerosol/users/njzjz/anaconda3/envs/p4env/share/psi4/basis/def2-tzvppd.gbs ; atoms 34-89 entry H line 14 file /aerosol/users/njzjz/anaconda3/envs/p4env/share/psi4/basis/def2-tzvppd.gbs ; atoms 90-101 entry N line 181 file /aerosol/users/njzjz/anaconda3/envs/p4env/share/psi4/basis/def2-tzvppd.gbs ; atoms 102-106 entry O line 218 file /aerosol/users/njzjz/anaconda3/envs/p4env/share/psi4/basis/def2-tzvppd.gbs . => WB97M-D3BJ: Empirical Dispersion <=. Grimme's -D3 (BJ-damping) Dispersion Correction; Grimme S.; Ehrlich S.; Goerigk L. (2011), J. Comput. Chem., 32: 1456; Parametrisation from: A. Najib, L.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2970:1385,log,log,1385,https://psicode.org,https://github.com/psi4/psi4/issues/2970,1,['log'],['log']
Testability," method, and it also provides the method by which density screening can be added directly to the relevant JK classes.; Second, this PR uses the shell_significant() framework to reimplement screening for certain JK methods. Most significantly, as implied in the first point, the biggest change in this regard was the removal of shell_significant_density() from TwoBodyAOInt into the domain and its reimplementation into the JK shell_significant() definitions. With this change, density screening is now the domain of individual JK classes rather than the TwoBodyAOInt class, which was one of the primary goals of this overall refactor PR set in the first place. Additionally, another method that was subject to slight changes from the shell_significant() framework was the Yoshimine PKJK algorithm, in which its test for shell significance was implemented using the shell_significant() framework. Composite JK algorithms commonly implemented a density-based screening within them, as part of their formulation, but a shell_significant() formalism has been added to SplitJK. This framework isn't unified the same way it is for the base JK class, because the needs for testing shell significance for different composite subalgorithms varies from method to method. . ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3098:2400,test,testing,2400,https://psicode.org,https://github.com/psi4/psi4/pull/3098,4,"['Test', 'test']","['Tests', 'testing', 'tests']"
Testability," mol.nuclear_repulsion_energy(), #TEST; 'Eelst' : variable(""SAPT ELST ENERGY""), #TEST; 'Eexch' : variable(""SAPT EXCH ENERGY""), #TEST; 'Eind' : variable(""SAPT IND ENERGY""), #TEST; 'Edisp' : variable(""SAPT DISP ENERGY""), #TEST; 'Etot' : variable(""SAPT0 TOTAL ENERGY""), #TEST; } #TEST. for key in keys: #TEST; compare_values(Eref[key], Epsi[key], 6, key) #TEST. import os; import sys; import subprocess. os.chdir('fsapt'); with open('fA.dat', 'w') as fA: fA.write(""w1 1 2 3""); with open('fB.dat', 'w') as fB: fB.write(""w3 4 5 6""); subprocess.run([sys.executable, os.path.join('..', 'fsapt.py')], check=True). fEnergies = {}; fkeys = ['fEelst', 'fEexch', 'fEindAB', 'fEindBA', 'fEdisp', 'fEedisp', 'fEtot'] #TEST. with open('fsapt.dat', 'r') as fsapt: #TEST; Energies = [float(x) for x in fsapt.readlines()[-2].split()[2:]] #TEST. for pair in zip(fkeys,Energies): #TEST; fEnergies[pair[0]] = pair[1] #TEST. fEref = { #TEST; 'fEelst' : -30.867, #TEST; 'fEexch' : 11.445, #TEST; 'fEindAB': -3.138, #TEST; 'fEindBA': -1.863, #TEST; 'fEdisp' : -1.754, #TEST; 'fEedisp': 0.000, #TEST; 'fEtot' : -26.177} #TEST. for key in fkeys: #TEST; compare_values(fEref[key], fEnergies[key], 2, key) #TEST; ```. ```; (py39b) psilocaluser@bash:psinet:/psi/gits/hrw-l2/objdir39b: (sept21qcdb_rb1) stage/bin/psi4 ../tests/fsapt-ext-abc-au/input.dat ; Enuc..................................................................................PASSED; Eelst.................................................................................PASSED; Eexch.................................................................................PASSED; Eind..................................................................................PASSED; Edisp.................................................................................PASSED; Etot..................................................................................PASSED; fEelst................................................................................FAILED; Traceback (most ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2330:5414,TEST,TEST,5414,https://psicode.org,https://github.com/psi4/psi4/issues/2330,1,['TEST'],['TEST']
Testability," no longer be 100% stable for anything beyond ""core"" Psi4 as defined by quicktests. . If you have changes to the Psi4 source code you will either need to rebase the CMake/build system change (hint: this is _not_ the occasion to learn to rebase) or rewrite these files by looking at a diff between the new version and your current version. A rebase of this patch is a considerable time investment with many small technical details, please contact us to help you if you decide to go this route. We will be contacting the authors of all current PR’s to help them with the transition. The inversion and history rewrite will take place on October 17th. Again, all forks and clones will need to be removed at this point as they will no longer be valid. Let us know if you need additional time to rebase in a change.; ## Summary. Changes for developers:; - **WARNING!** All clones and forks will need to be removed when the history rewrite occurs on October 17th. This means any current work on Psi4 will no longer be able to be merged. If you need additional time let us know ASAP!; - The build system has not been extensively tested, please try it out and report bugs.; - There is a completely new directory structure.; - No more Boost in core Psi4.; - Some external libraries may not work at current.; - Plugin structure is still fluid.; - GCC 4.9 is required due to C++11 regex. Keep in mind that ICC requires GCC. Changes for users:; - If you use any of the pre-compiled options nothing will likely change in your everyday workflow.; - If you compile Psi4 yourself, these changes will require a completely fresh compile. The build script has moved away from setup.py to a pure CMake input.; - After the inversion you will still have the option to use standard ""Psithon"" inputs or to import psi4 as a Python module.; ## Progress (master branch); - [x] CMake Rewrite; - [x] Kill the boost; - [x] Inversion; - [x] History rewrite; - [x] Official 1.1 release; ## . Sincerely,; - Lori, Jet, Andy, and Daniel",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468:4290,test,tested,4290,https://psicode.org,https://github.com/psi4/psi4/issues/468,1,['test'],['tested']
Testability," of py37+ compatibility.; - [x] added the openfermion demo as test; - [x] apparently 3body in dftd3 fails on Mac. near-term goal is replacing, so skip for now; - [x] newly install pytest.ini and install any test_input.py, input.dat, and input.py from tests/ . sensibly, input.dat/py would only get installed if test_input.py present, but I can't teach cmake that logic, so it's either this or have to register each pytest-prepared psithon test. aux files from tests/ are also installed but these have to be registered with cmake.; - [x] moved `compare_moldenfiles()` from testing code to driver alongside `compare_fchkfiles()` so that it can be documented.; - [x] ""psi"" and ""api"" marks added to all tests/pytests/ files for reasons explained in docs. - Docs; - [x] Updated the add_tests documentation, esp. wrt pytest; - [x] Might have done enough of the outline to close #2396 ; - [x] Straightened out docstring inheritance for all the compare_* fns and added to docs.; - [x] light updating of user testing docs in build_planning.rst. - Misc.; - [x] improved `psi4.extras()` printing so you know what you're missing: `['adcc', 'ambit', 'c̶c̶t̶3̶', ...`; - [x] fixed some FutureWarnings like replacing `set_module_options`; - [x] added ""maxeco"" conda env files to devtools/ for each platform for developers/users who prefer those to psi4-dev conda package. they were generated from the ecosystem GHA but not autoupdated -- that may happen in a future GHA from master; - [x] added passing `CMAKE_OSX_DEPLOYMENT_TARGET` and `CMAKE_OSX_SYSROOT` cmakevars to internal builds. this is how the macOS SDK gets passed through, apparently, for C/C++. it happens through `CMAKE_Fortran_FLAGS` for Fortran. proven necessary for v2rdm_casscf, so I rolled it out to all the compiled externals.; - [x] for ambit, added Python and pb11 cmakevars that are proper for the new de-boosted and new-python-searched version. left old (capital PYTHON) for now. ## Questions; - [ ] PR is mostly CI, so non-user-facing, and t",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2454:5049,test,testing,5049,https://psicode.org,https://github.com/psi4/psi4/pull/2454,1,['test'],['testing']
Testability," officially part of the code. . Credit to @JoseMadriaga for the derivations ; [LocalCCSD1to10.pdf](https://github.com/psi4/psi4/files/11114337/LocalCCSD1to10.pdf). Useful References:; [Original DLPNO-CCSD Paper](https://aip.scitation.org/doi/full/10.1063/1.47735); [Sparse Maps II Paper](https://aip.scitation.org/doi/10.1063/1.4939030). Example Input File; ```; memory 20 GB. molecule mol {; 0 1; O 0.705 0.744 0.16; H -0.071 0.264 0.45; H 1.356 0.064 -0.014; symmetry c1; }. set {; basis cc-pVDZ; scf_type df; freeze_core true; pno_convergence normal; }; energy('dlpno-ccsd'); ```. ### Results (Waterclusters in TZ); [Speedups, relative to DF-CCSD]; ![wc_tz_speedups](https://user-images.githubusercontent.com/60559795/228892229-c3269bf9-3386-4861-8660-92a6dcc3685e.jpeg). [Percent Correlation Energy Recovered, relative to DF-CCSD, all >= 99.9%]; ![wc_tz_percent_corr_recovered](https://user-images.githubusercontent.com/60559795/228892322-7c968c62-f874-496c-84e3-06b65c84803d.jpeg). ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Implement the DLPNO-CCSD algorithm. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feel free to use this code, it is not fully tested yet, but preliminary tests show encouraging results, and is MUCH faster than conventional CCSD; - [ ] If you benchmark my code, please post results in the thread. ## Questions; - [ ] Question1. ## Checklist; - [ ] Add documentation; - [ ] Add references to terms and equations; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2915:1703,test,tested,1703,https://psicode.org,https://github.com/psi4/psi4/pull/2915,6,"['Test', 'benchmark', 'test']","['Tests', 'benchmark', 'tested', 'tests']"
Testability," only pops up for cbs/findif/nbody jobs, which can be confusing. This PR promotes to tag complaint to upon `import psi4` for uniformity.; - [x] ""OliP"" [reported a bug at the forum](http://forum.psicode.org/t/problems-with-cbs-and-version-1-6/2494) where an input like the below returned `‘<’ not supported between instances of ‘dict’ and ‘dict’ `. This came about because I was comparing well-behaved dertype per method tuples like; ```; ['hf', 'mp2', 'ccsd(t)', 'ccsd(t)']; [(2, {}), (1, {}), (1, {}), (1, {})]; ```. rather than the real-life cases one gets with ROHF. Sorting on only the dertype fixes the bug.; ```; ['hf', 'mp2', 'ccsd(t)', 'ccsd(t)']; [(2, {}), (0, {1: ""\nPsiException: select_mp2_gradient: Method 'mp2' with MP2_TYPE 'DF', FREEZE_CORE 'True', and REFERENCE 'ROHF' not available\n\n""}), (0, {1: ""\nPsiException: select_ccsd_t__gradient: Method 'ccsd(t)' with CC_TYPE 'CONV' and REFERENCE 'ROHF' not available\n\n""}), (0, {1: ""\nPsiException: select_ccsd_t__gradient: Method 'ccsd(t)' with CC_TYPE 'CONV' and REFERENCE 'ROHF' not available\n\n""})]; ```. ```; molecule N {; 0 4; N 0.00 0.00 0.00; }. set {; scf_type direct; reference rohf; r_convergence 6; d_convergence 7; e_convergence 8; freeze_core true; }. e_cbs = energy(‘cbs’,; scf_basis=‘aug-cc-pV[TQ5]Z’,; corl_wfn=‘mp2’,; corl_basis=‘aug-cc-pV[TQ]Z’,; delta_wfn=‘ccsd(t)’,; delta_basis=‘aug-cc-pV[DT]Z’); ```. - [x] @hokru reported that `energy('SCF/def2-SVP',bsse_type=['cp','nocp'],dft_functional=my_functional)` got broken with the distributed driver. That's patched up for string `dft_functional` at least.; - [x] I noticed that a change I made to `_qcvars_transitions` to help version reported would make `variables(include_deprecated_keys=True)` fail. that's fixed. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2590:2122,Test,Tests,2122,https://psicode.org,https://github.com/psi4/psi4/pull/2590,3,"['Test', 'test']","['Tests', 'tests']"
Testability," optking. Add new python optking driver. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is detined for the release notes. May be empty. -->; - [x] RN 1 The fixed_* optimization keywords have been changed to ranged_* options; - [x] RN 2 output will be changed. Check output.dat for simple convergence / step info. output.log for detailed info; - [x] RN 3 IRC convergence behavior different for minima and substep. ; - [x] Downstream plugin users who were still getting wfn from globals will find it has now departed. Please follow the advice it's been issuing for years to do wfn passing. [LAB added]. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] New optimizer. Most of driver is very similar; - [x] Hessian Updating and optimization logic is in optking as much as possible; - [x] Restarting optimizations now supported. Optking can write entire state to disc (json); - [x] Driver attempts to symmetrize geometries; - [x] New keywords added. Some removed / updated. ; - [x] old optking removed from CMakeLists.txt from `/psi4/src/psi4`; - [x] optking py_funcs removed from core.cc; - [x] All tests have been verified for equal or better convergence. (except opt-irc-2); - [x] globals legacy gradient, wfn, and molecule removed [LAB added]. ## Questions; - [ ] A document describing differences between the optimzers may be necessary; - [ ] Unclear if I have fully removed old optking and building with new optking is fully working. ## Checklist; - [x] test15 tests restart; - [x] Can remove old deprecated set_gradient; - [x] ctest -L opt run. ## Status; - [x] Ready for review; - [ ] Ready for merge. For documentation on the new optimizer please see https://optking.readthedocs.io/en/latest/; The lines changed is almost entirely due to ne",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2727:1084,log,logic,1084,https://psicode.org,https://github.com/psi4/psi4/pull/2727,1,['log'],['logic']
Testability," out from the py-side SCF/PCM/EFP PR. I recommend this go into 1.2 so that 1.2 Mol isn't half-baked. This **does not switch Mol parsing py-side**. I can, but that's an extra step to pull out of py-side SCF/PCM/EFP and a more drastic change to Psi. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `qcdb.Molecule` constructor learned to take, str (psi4, xyz, xyz+, psi4+), dict, or arrays and pass things on to `from_string`, `from_dict`, or `from_arrays` accordingly. In fact, these fns are simply different entry points. `from_arrays` validates arguments then calls `from_dict`. `from_string` parses into arrays then calls `from_arrays`. The three `from_*` methods are also available for `psi4.core.Molecule` (completely bypassing `create_molecule_from_string`), but the primary c-side Mol constructor in molutil.py is still using `c_m_f_s`.; - [x] py-side & c-side Molecule & CoordEntry classes learned `A` or `mass_number`. Pretty much this is a pass-through/holder slot for info populated in PQ Mol JSON. `set_mass` voids `A`.; - [x] `*.Molecule` learned `add_unsettled_atom` for adding `ZMatrixEntry`s analogous to `add_atom` `CartesianEntry`s for the zmat extension.; - [x] `qcdb.BasisSet.pyconstruct` learned to act on anything it can make a `qcdb.Molecule` of: Mol, str, or dict. It also learned to return BasisSet object or dict based on `return_dict` value, not on type of molecule-ish entity passed in.; - [x] changed some output unit labels to be more specific or use known abbr; - [x] In keywords (`read_options`), remove global `UNITS` since unused and covered by Mol parser; - [x] Write `.hess`, `.normal_modes_molden`, and a proto-JSON for vib/thermo analysis py-side. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/965:1862,Test,Tests,1862,https://psicode.org,https://github.com/psi4/psi4/pull/965,3,"['Test', 'test']","['Tests', 'tests']"
Testability," parser.add_argument('--element', type=int, default=1); parser.add_argument('--multiplicity', type=int, default=2); args = parser.parse_args(). psi4.core.be_quiet() # Silence output for clarity.; psi4.set_num_threads(args.num_threads, quiet=True); psi4.set_options({; 'REFERENCE': 'UHF',; 'SCF_TYPE': args.scf_type,; }). for i in range(10):; energy = psi4.energy(; 'pbe0/sto-3g',; molecule=psi4.core.Molecule.from_arrays(; geom=[0, 0, 0],; elez=[args.element],; molecular_charge=0,; molecular_multiplicity=args.multiplicity)); print(energy); ```. To reproduce the behaviour, run; `python minimal_example.py --num_threads 6 --scf_type PK --element 1 --multiplicity 2`. For me, the output of this is (the exact numbers change on re-runs):; > -0.41204465858903644; -0.18510932345625386; 0.18101301722463536; -0.17603191005094254; -0.1034126028084521; -0.04894812237658419; -0.2577286306987443; -0.3757350049677912; -0.26680604410405556; -0.26680604410405556. Interestingly, the issue is not present when using PK and a single thread,; `python test.py --num_threads 1 --scf_type PK --element 1 --multiplicity 2`. nor when using multiple threads, but DIRECT instead of PK; `python test.py --num_threads 6 --scf_type DIRECT --element 1 --multiplicity 2`. In both of these cases, I always get the same output:; > -0.46650913902090424; -0.46650913902090424; -0.46650913902090424; -0.46650913902090424; -0.46650913902090424; -0.46650913902090424; -0.46650913902090424; -0.46650913902090424; -0.46650913902090424; -0.46650913902090424. Also, the issue is not present when using PK in multi-threaded environments, but using a different input, e.g.; `python test.py --num_threads 6 --scf_type PK --element 6 --multiplicity 3`; >-37.303469175322675; -37.303469175322675; -37.303469175322675; -37.303469175322675; -37.303469175322675; -37.303469175322675; -37.303469175322675; -37.303469175322675; -37.303469175322675; -37.303469175322675. After digging a bit deeper, it seems like the difference between results s",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2760:1518,test,test,1518,https://psicode.org,https://github.com/psi4/psi4/issues/2760,1,['test'],['test']
Testability," pruning, respectively. This leads to a 15-20% speed up for small molecules.; - [x] the following tests have been updated because of the new BS radii: `dft-b3lyp`; `dft-custom-mgga`, `dft-grad-lr1`, `dft-grad-lr3`, `dft-grad-meta`, `dft-grad1`, `dft-grad2`, `dft-omega`, `dft-psivar`, `dft-vv10`, `dft1`, `dftd3-grad`, `dftd3-version`, `frac-traverse`, `opt13`, `pcmsolver-dft`, `pcmsolver-dipole`; - [x] new test: `dft-pruning`. ## Questions; - Pruning enabled by default? -> not this PR, but after further testing yes. ## Checklist; - [x] Documentation; - [x] Pruning Tests added; - [x] All relevant `ctests` pass; (http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge. ----; Tests. ![grid_osc](https://user-images.githubusercontent.com/1648640/55870801-a6499c80-5b89-11e9-957d-68a08aa8ca41.png); ----; **pytest DFT benchmarks:**. _Interaction energies:_; With the introduced `ROBUST` pruning scheme (less aggressive variant of `TREUTLER`) all `dft_benchmark_interaction` tests pass. With `TREUTLER` 21 of 92 fail. For comparison, the `FUNCTION` schemes are all very aggressive, failure rate(!): ; - `P_SLATER=39/92`; - `D_SLATER=89/92`; - `LOG_SLATER=61/92`; - `P_GAUSSIAN=92/92` (yes, all fail);; - `D_GAUSSIAN=92/92`; - `LOG_GAUSSIAN=78/92`. _ionization energies:_; - `TREUTLER` 15/92 fail.; - `ROBUST` all pass. The `FUNCTION` schemes seem still very experimental and are not generally recommendable. ----; **errors in absolute and relative energies**; Based on S22 benchmark set. no CP correction. Absolute energies for dimers only.; level of theory: PBE/aug-cc-pVTZ with grid (434,75); _grid point reduction_; * ``ROBUST = 30.3 %``; * ``TREUTLER = 45.5 %``. _interaction energies_; * MAD old BS to new BS: 0.002 kcal/mol; * MAD old BS to newBS + ``ROBUST``: 0.002 kcal/mol (yay!); * MAD old BS to newBS + ``TREUTLER``: 0.021 kcal/mol. _absolute energies_; * MAD old BS to new BS: 2.9E-06 au; * MAD old",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1591:2789,test,tests,2789,https://psicode.org,https://github.com/psi4/psi4/pull/1591,1,['test'],['tests']
Testability," psi4-0.5 with g++ and chemps2. ```; seba@seb-desktop:~/software/psi4-0.5/objects$ CXX=g++ CC=gcc cmake .. -DENABLE_PLUGINS=ON -DENABLE_CHEMPS2=ON; -- The CXX compiler identification is GNU 5.2.1; -- The C compiler identification is GNU 5.2.1; -- Check for working CXX compiler: /usr/bin/g++; -- Check for working CXX compiler: /usr/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Check for working C compiler: /usr/bin/gcc; -- Check for working C compiler: /usr/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -fopenmp ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- BLAS will be searched for based on MKLROOT=/opt/intel/compilers_and_libraries_2016.0.109/linux/mkl; -- Found BLAS: MKL (-Wl,--start-group;/opt/intel/compilers_and_libraries_2016.0.109/linux/mkl/lib/intel64/libmkl_gf_lp64.so;/opt/intel/compilers_and_libraries_2016.0.109/linux/mkl/lib/intel64/libmkl_gnu_thread.so;/opt/intel/",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/264:831,Test,Test,831,https://psicode.org,https://github.com/psi4/psi4/issues/264,6,['Test'],['Test']
Testability," ratio differs by 0.00000009: 2.541746451895026 (this) vs 2.54174623 (psi); Physical Constant dipmom_au2si ratio differs by 0.00000009: 8.478353552e-30 (this) vs 8.47835281e-30 (psi); Physical Constant h ratio differs by 0.00000016: 6.62607004e-34 (this) vs 6.62606896e-34 (psi); Physical Constant hartree2J ratio differs by 0.00000015: 4.35974465e-18 (this) vs 4.359744e-18 (psi); Physical Constant hartree2MHz ratio differs by 0.00000001: 6579683920.711 (this) vs 6579684000.0 (psi); Physical Constant hartree2aJ ratio differs by 0.00000015: 4.35974465 (this) vs 4.359744 (psi); Physical Constant hartree2ev ratio differs by 0.00000022: 27.21138602 (this) vs 27.21138 (psi); Physical Constant hartree2kJmol ratio differs by 0.00000014: 2625.4996382852164 (this) vs 2625.5 (psi); Physical Constant hartree2kcalmol ratio differs by 0.00000004: 627.5094737775374 (this) vs 627.5095 (psi); Physical Constant hartree2wavenumbers ratio differs by 0.00000014: 219474.6313702 (this) vs 219474.6 (psi); Physical Constant kb ratio differs by 0.00000136: 1.38064852e-23 (this) vs 1.3806504e-23 (psi); Physical Constant kcalmol2wavenumbers ratio differs by 0.00000003: 349.7550882318032 (this) vs 349.7551 (psi); Physical Constant me ratio differs by 0.00000015: 9.10938356e-31 (this) vs 9.10938215e-31 (psi); Physical Constant na ratio differs by 0.00000015: 6.022140857e+23 (this) vs 6.02214179e+23 (psi); ```. ## Questions; - [x] mints3 uses external ref files. I wanted to make sure this wasn't something that was supposed to be indifferent to physconst changes. @jturney ; - [x] psithon1 is the diatomic test. There's a lot of digits in the ref values, so I wanted to check before changing them. @andysim ; - [x] dft-bench-ionization may be going crazy. ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1213:21792,test,test,21792,https://psicode.org,https://github.com/psi4/psi4/pull/1213,4,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability," reconstruction every iteration. The VV10 gradient is on hold until I build a new Grid that uses only atom-centered blocks rather than blocks that possibly contain functions from multiple centers. This is due to the fact that the VV10 nuclear gradient has a component which requires a gradient with respect to centers and not just with respect to the density as there are explicit `1/r` dependance in the VV10 energy. ## Todos; - [x] Cache collocation matrices to remove DFT bottleneck for small molecules.; - [x] Figure out how many blocks to store based on available memory.; - [ ] Implement VV10 gradients; - [x] Orbital VV10 gradient piece implemented; - [ ] Nuclear VV10 gradient piece implemented; - [ ] A DFT Grid that uses only Atom centered blocks. ## Questions; - [ ] Anyone have thoughts on how to figure out how much memory JK and grid caching should receive?. Timing for a small molecule without a cache using TPSS (a MGGA):; ```; | UV: Form V : 22.583u 1.117s 13.702w 15 calls; | | Properties : 12.333u 0.883s 7.756w 10530 calls; | | Functional : 5.617u 0.033s 3.217w 10530 calls; | | V_xc : 4.400u 0.117s 2.567w 10530 calls; ```. With a cache:; ```; | UV: Form V : 13.750u 0.967s 8.316w 15 calls; | | Properties : 4.083u 0.783s 2.422w 10530 calls; | | Functional : 4.950u 0.000s 3.186w 10530 calls; | | V_xc : 4.383u 0.100s 2.564w 10530 calls; ```. Note DFT V matrix takes a good portion of JK time up to ~2k basis functions with our DF code, though this depends on the density of the grid. Cache sizes:. Grid (99, 302); ```; LDA - 6MB/atom; GGA - 24MB/atom; MGGA - 60MB/atom; ```. Grid (120, 590); ```; LDA - 16MB/atom; GGA - 48MB/atom; MGGA - 160MB/atom; ```. A cache of every block point seems to make the computation 40-80% faster. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1233:1876,Test,Tests,1876,https://psicode.org,https://github.com/psi4/psi4/pull/1233,3,"['Test', 'test']","['Tests', 'tests']"
Testability," reported error with setting basis sets. As this seems a rather sane assumption to me, it is Now enforced. This uncovered a second error when ZMAT coordinates were used: energies at displacements would be off by ~4 hartrees. When the molecule is cloned in the process of getting a c1 wavefunction, I found that the coordinates of the cloned molecules differed from those of the original molecule, right before the basis sets were set. Telling the basis sets that the atoms are not what they actually are seems like the kind of thing that would lead to garbage energies, though I didn't get a detailed mechanism for this. To get the geometries consistent, I had to change the atom cloning procedure. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Molecule clone now guarantees that each elements of the atom_ list is identical to some element of the full_atom_ list.; - [x] Atom clone now guarantees that ZMATs with computed coordinates carry the computed coordinates over to the clone.; * **User-Facing for Release Notes**; - [x] Fixed a bug where using density fitting for a frequency computation would cause an error unless the symmetry was explicitly set to c1. ## Questions; - [x] Symmetry is used for the purposes of generating displacements, but not for labeling normal modes. Even if we can't take advantage of symmetry for the energetics, we should be able to use symmetry for displacements and normal modes. My hunch is that this is a problem with changing the symmetry of the molecule between the two findif calls, but I'd like Py-side findif to be accepted before looking into this, just in case. Sound good?. ## Checklist; - [x] Tests added for any newly functional features; - [x] [All of full tests run, modulo DFT benchmarks and plugins](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge (as soon as the last review is in)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1108:2254,Test,Tests,2254,https://psicode.org,https://github.com/psi4/psi4/pull/1108,4,"['Test', 'benchmark', 'test']","['Tests', 'benchmarks', 'tests']"
Testability," show up in the energy table, https://psicode.org/psi4manual/master/energy.html; - [x] fixed `energy(""psimrcc_scf"")` to use regular SCF as ref for PSIMRCC and added a test; - [x] rehabilitated `energy(""qchf"")` (which never had its initialism expanded in the whole of the codebase, btw) so it runs. added a test. it probably ought to be better integrated with regular SCF module. Regular SCF has a qchf option that is unused.; - [x] adjusted some qcvars in FNOCC to collect more components from cepa-like methods and to collect different perturbative triples for qcisd.; - [x] collected qcvars correctly in DFOCC for CCD and QCHF. (It was harvesting the CCD method that tipped me into the rabbit-hole that became this PR.). - [x] TODO `pytest -m quick` is still friendly to run (CI finished in reasonable time), but the additions to stdsuite have make ordinary full pytests expensive. I need to manipulate default marks so folks don't inadvertently start hours of tests. `pytest -v ../tests/pytests/test_standard_suite.py -m ""not noci"" -n auto --durations 100 --durations-min 60.0` runs in 25 minutes on a 20-core machine with no individual test over 4m. That's not reasonable for a laptop. Blame the slow-to-converge oo methods, and it's going to get worse with occd and friends.; - [ ] TODO https://github.com/MolSSI/QCEngine/pull/376 and a new version of QCEngine are a prereq.; - [x] https://github.com/qcdb/qcdb/pull/57 is associated QCDB PR (psi4 PR is a prereq to it); - [ ] TODO full stdsuite in the presence of MRCC will have a couple faults of the ""not NYI"" variety after the MRCC defaulting logic switch from Q. I haven't decided how to remedy this, but it's unlikely to be hit, so I'll defer. ## Questions; - [ ] My version of Psi4+MRCC doesn't run CC2. Anyone else see this? (Just curious, not really needed for PR.); - [ ] I don't think the original module authors will find issues, but if you want to look over pertinent docs and capabilities tables, please do so.; - [x] [ADDED from #27",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2731:12598,test,tests,12598,https://psicode.org,https://github.com/psi4/psi4/pull/2731,1,['test'],['tests']
Testability," test_psi4.py::test_psi4_sapt PASSED; test_psi4.py::test_psi4_scfproperty PASSED. =============================================== 15 passed, 4 skipped, 1 xpassed in 124.33 seconds ================================================; ```. Running `pytest -v -k 'not test_gdma' /home/joao/current/lib/python3.6/site-packages/psi4/tests/*.py`, where `/home/joao/current` is a symlink to `miniconda3`, gives me:. ```; ============================================================== test session starts ===============================================================; platform linux -- Python 3.6.1, pytest-3.1.2, py-1.4.34, pluggy-0.4.0 -- /home/joao/miniconda3/bin/python; cachedir: ../../../../../../.cache; rootdir: /home/joao, inifile:; collected 20 items . ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_aaa_profiling.py::test_threaded_blas <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_aaa_profiling.py XPASS; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_mrcc <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_chemps2 <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dftd3 <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_libefp <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_pcmsolver <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_erd <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:2385,test,tests,2385,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['test'],['tests']
Testability," testing in conjunction with different JK builds (the only tests that don't use the Python interface of `TwoBodyAOInt` directly, use `SCF_TYPE=DIRECT` or `DF` as the JK method for screening comparisons). This leaves a lot of untested JK build+screening combos, which may be potentially broken and uncaught by the CI as a result. As a matter of fact, such cases actually do exist in the code currently (e.g., CompositeJK methods + no screening). This PR adds a new pytest module, `test_comprehensive_jk_screening.py`. It is effectively an expanded version of the scf5 test module, testing one of the scf5 systems (singlet oxygen) with the same basis set, but also including different screening methods and algorithmic subtypes available in Psi4. Screening is assumed to have an insignificant impact on energy within the tolerance used, so all screening types for a given method use the same reference energy. Some combinations of method and screening type throw an exception by design; this is accounted for in the test by testing that such combinations do indeed throw an exception as expected. Other combinations of method and algorithm are broken at the moment and error out; these are simply skipped for now. They are all logged in the same spot, and can and will be addressed in future PRs. ## User API & Changelog headlines; - [X] N/A. ## Dev notes & details; - [X] Adds a new pytest module to Psi4, `test_comprehensive_jk_screening.py` , to test different combinations of JK build algorithms and ERI screening methods. ## Questions; - [x] Would the test in `test_comprehensive_jk_screening.py` be better placed in `test_erisieve.py`? I placed the test in the former because I considered it large enough to warrant not having the quick pytest mark, but I'm ambivalent about where the test goes between those two test modules. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-r",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2978:1509,test,test,1509,https://psicode.org,https://github.com/psi4/psi4/pull/2978,2,['test'],"['test', 'testing']"
Testability," to form the Coulomb matrix, LinK performs much better. Some benchmarks comparing the Direct DF-J + LinK algorithm combination to other JK options in Psi4, for water clusters of varying sizes at the cc-pVDZ basis set, are attached:. ![Timing Plots of Water Clusters at cc-pVDZ](https://user-images.githubusercontent.com/26306559/198107808-42f3b855-13f0-4e14-8a50-c0402c16b94f.png). Small, non-diffuse basis sets are the specialty of Direct DF-J + LinK, and it reflects here, with DFJLinK outperforming the other integral-direct JK options for most of the water clusters, and being the fastest JK option tested overall for large water clusters. For specific comparisons to Direct DF-J + COSX, the closest current analogue in Psi4, DFJCOSK performs better for larger basis sets or more complex systems, while DFJLinK performs better for smaller basis sets and less complex systems from my testing. It may be worth noting that the DFJLinK in the listed benchmarks used a different implementation of Direct DF-J compared to the one in this PR, but I don't expect the results would change much because of that. The full of CompositeJK is planned to be done in 3 PRs. This PR is the first one. The second PR in the CompositeJK process is the combining of the DFJLinK and DFJCOSK subclasses into the initial ""CompositeJK"" subclass and the implementation of the planned CompositeJK User API/user-facing end. The final CompositeJK PR will be the refactoring of the CompositeJK backend to truly support arbitrary mixing and matching of J/K build algorithms. ## User API & Changelog headlines; - [x] The DO_LINK option has been removed.; - [x] The SCF_TYPE option ""LINK"" has been added, enabling use of the integral-direct density-fitted J + Linear Exchange K algorithm combination for JK computations. ## Dev notes & details; - [x] The new JK subclass ""DFJLinK"" has been added to Psi4. DFJLinK combines the integral-direct density fitted formation of J with the linear-scaling formation of the exact K through ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2762:3134,benchmark,benchmarks,3134,https://psicode.org,https://github.com/psi4/psi4/pull/2762,1,['benchmark'],['benchmarks']
Testability," up update_mo!. ## Capability Loss/Gain; As a result of this switch, we lose the ability to ""level shift"" in OCC. ""Level shift"" is a misnomer and actually refers to scaling the diagonal elements of the DIIS B-matrix. When I'm done, the orbital convergence will be so much better that we won't notice it's gone. In the short term, this does cause more test failures. ## Questions; * Because we're losing ""level shifting"", we're losing some keywords. I don't know how to deprecate these. If they're provided as module-level keywords, then I don't know the technical details of how you would raise a warning message. The bigger problem is when they're global keywords. DFOCC still uses ""level shifting"", so I can only raise a warning when I know what module the user is in. Thoughts on how to handle this?; * Should we be losing ""level shifting""? We can add _damping_ to `libdiis` if there's demand for it. I think there are better things to do with my time. ## Quick Test Status; * Switching out the DIIS version caused the `omp2p5-2` test's OMP2.5 energy to fall outside convergence criteria, again emphasizing how unstable orbital convergence in OCC is. We'll find out what the actual value is by the time I'm done.; * Losing ""level shifting"" was enough to break the `ocepa-grad2` test. This test asks for a higher-than-normal convergence from OCC, so that's no surprise. (I imagine Psi ups the energy convergence default when the user requests a gradient.) As a temp fix, I lowered the demanded energy convergence from 8 to 7. Even after that, we're outside the test tolerance, so I changed the value to boot. If anybody is dying to know the correct answer, I can run it on my Python code.; * `omp2-2` encountered oscillatory convergence, and I responded by lowering the convergence we seek. Again, coupling amplitude and orbital DIIS will break the oscillations and render this test hack unnecessary.; * We may have lost other full tests, but we'll get them back at the end. ## So Lori Knows What t",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1783:3059,Test,Test,3059,https://psicode.org,https://github.com/psi4/psi4/pull/1783,2,"['Test', 'test']","['Test', 'test']"
Testability," use in JK construction. Such a class will provide a home for any new separate J and K algorithm that gets added to Psi4 in the future (such as the in-progress CFMM). Additionally, the CompositeJK class will be designed in such as a way to enable arbitrary combinations of any available separate J and K build algorithm through a single JK subclass. This arbitrary mixing and matching is planned to be accesible in a user-friendly way. DFJLinK is the first step to this process. DFJLinK, itself, is a new JK subclass that combines the integral-direct density fitted J build algorithm from DFJCOSK with the LinK algorithm previously available in DirectJK. LinK was previously available for use in Psi4 via DirectJK, but was always disrecommended due to its combination with a normal DirectJK implementation for J construction. In conjunction with Direct DF-J to form the Coulomb matrix, LinK performs much better. Some benchmarks comparing the Direct DF-J + LinK algorithm combination to other JK options in Psi4, for water clusters of varying sizes at the cc-pVDZ basis set, are attached:. ![Timing Plots of Water Clusters at cc-pVDZ](https://user-images.githubusercontent.com/26306559/198107808-42f3b855-13f0-4e14-8a50-c0402c16b94f.png). Small, non-diffuse basis sets are the specialty of Direct DF-J + LinK, and it reflects here, with DFJLinK outperforming the other integral-direct JK options for most of the water clusters, and being the fastest JK option tested overall for large water clusters. For specific comparisons to Direct DF-J + COSX, the closest current analogue in Psi4, DFJCOSK performs better for larger basis sets or more complex systems, while DFJLinK performs better for smaller basis sets and less complex systems from my testing. It may be worth noting that the DFJLinK in the listed benchmarks used a different implementation of Direct DF-J compared to the one in this PR, but I don't expect the results would change much because of that. The full of CompositeJK is planned to ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2762:2245,benchmark,benchmarks,2245,https://psicode.org,https://github.com/psi4/psi4/pull/2762,1,['benchmark'],['benchmarks']
Testability," vec, mol, grad, hess (hess untested). Upon request, also tests mirror-image alignment.; - Remove everything beyond constructing the Cartesian Hessian from findif, including VIBRATION class; - Remove the c-side thermo module ; - Adds extensive vib test on HOOH-TS, CO2, ethene, H2CO, methane that checks freqs _and_ normco of each mol vs. Cfour output for following conditions; - Cfour Hessian (tests harmonic analysis machinery); - Psi freq by grad; - Psi freq by energy; - Psi freq by analytic ~(only methane and ammonia pass)~ All pass now, thanks to @andysim ; - [x] fix the embarrassing bug (I'll do you a coding favor if you spot it, but I'm not admitting it otherwise); - [x] better handle non-stationary. probably need an option to force-rot-space-inclusion but by default, `frequency()` does a gradient to determine if rotational projection is safe, then another flag to query external field and company to see if even translational projection is appropriate. ; - [x] more testing of isotopic, partial, non-stationary, etc., particularly wrt normco not just freq; - Add `compare_dicts` and `compare_molrecs` comparison functions. Former uses `deepdiff` module and does recursive comparison (sensitive to types). Can exempt fields with `forgive` arg. Latter makes use of former and also allows geoms to change if warranted by fix_com/orientation (checks via aligner).; - convert qcdb test suite from GnuMake (yes, that old) to pytest. switch compare_* fns to raise `TestComparisonError`, not `sys.exit(1)`.; - have to temporarily set `0 2` in some test cases, b/c the reconciler wants physically reasonable values, but the input molecule isn't currently passing through the code that would set those defaults.; - updated v2rdm_casscf pinning to one Eugene already fixed up to work w/psi; * **User-Facing for Release Notes**. ## Questions; - [ ] Right now, results of harmonic analysis is a dict of namedtuples with numpy arrays (contents and interface below). This is pretty convenient to acc",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/834:11840,test,testing,11840,https://psicode.org,https://github.com/psi4/psi4/pull/834,1,['test'],['testing']
Testability," was at http://www.psicode.org/psi4manual/master/basissets.html#sec-basisuserdefined. Step 2 is where things fall over. First of all, the correct syntax seems to be ; assign df_basis_scf/mp2 <aux basis>; There seems to be an error on the wiki page shown above. . This syntax works as it allows me to define a specific auxiliary basis for *all* atoms. If I wish to define a specific aux basis for a particular atom (as needs to be done when using mid-bonds) then the command should be; assign Rn df_basis_scf mb-set-ri; This fails in inputparser.py with the following error:. Traceback (most recent call last):; File ""/home/alston/Psi4/psi4conda/share/psi4/python/inputparser.py"", line 734, in process_input; temp = re.sub(basis_block, process_basis_block, temp); File ""/home/alston/Psi4/psi4conda/lib/python2.7/re.py"", line 155, in sub; return _compile(pattern, flags).sub(repl, string, count); File ""/home/alston/Psi4/psi4conda/share/psi4/python/inputparser.py"", line 357, in process_basis_block; raise TestComparisonError(message); p4util.exceptions.TestComparisonError: Conflicting basis set specification: assign lines present but shells have no [basname] label. It seems like the line ""assign Rn df_basis_scf mb-set-ri"" cannot be correctly parsed by inputparser.py. It seems to think this line is part of the basis set specification. . The complete Psi4 command file for this calculation is:; [Ar2_input.txt](https://github.com/psi4/psi4/files/787318/Ar2_input.txt). And the two basis set files are here:; [mb-set.txt](https://github.com/psi4/psi4/files/787319/mb-set.txt); [mb-set-ri.txt](https://github.com/psi4/psi4/files/787320/mb-set-ri.txt). I can get this to work by including the aux basis for ""Rn"" in one of the fitting basis files that Psi4 would normally read. But this is not ideal and it would be great to be able to specify the fitting basis in the input file using the ''assign'' command. How can this be fixed?. Additionally, the information on the wiki dealing with user-defined",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/626:1914,Test,TestComparisonError,1914,https://psicode.org,https://github.com/psi4/psi4/issues/626,1,['Test'],['TestComparisonError']
Testability," with a random assortment of bytes. In the above example, the full host name should be `ip-172-31-XX-XXX.us-east-2.compute.internal`. We then examined how psi4 determines and processes the host name. It turns out, psi4 uses the `gethostname` function from the C API to get up to the first 40 bytes of the host name, and then it writes those bytes to `timer.dat`. The host name of this particular compute cluster is over 40 chars/bytes. This is unsafe because if a host name has more than 40 characters, the null byte (`\0`) won't be written to `timer.dat` to signify the end of the string, and psi4 will continue to write whatever is in memory past the 40 chars/bytes until it hits a null byte. This also explains the original error, b/c writing random bytes to a file can lead to non-utf-8-compliant files. It turns out that [linux defines a maximum host name length of 64](https://man7.org/linux/man-pages/man2/gethostname.2.html), so the easy fix here is to just increase the size of the host name buffer from 40 to 65 (== 64 + 1 for the null byte at the end). I have no idea why this length was previously limited to 40. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Fix bug resulting in `UnicodeDecodeError` and corrupted `timer.dat` files. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] increase the buffer size used to retrieve the host name and enforce that the host name ends in a null byte before writing to `timer.dat`. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3043:3780,Test,Tests,3780,https://psicode.org,https://github.com/psi4/psi4/pull/3043,3,"['Test', 'test']","['Tests', 'tests']"
Testability," would love to get `conda` support working on our end.; - [x] Tests and examples; - [x] Test install process; - [x] Documentation. ## Questions; - [x] How to best branch between the builtin module and adcc? The two implementations share some features, but use different approaches to solve ADC, which can in some cases lead to differing results (related to #1033 ); - [x] How to best direct options and configurables from Psi4 and adcc? The current solution I see is to add basically everything to the big `read_options.cc`, which is pretty inflexible and could lead to a lot of duplicated information being necessary. Is there some better way to do this?; - [x] What to do with the calculation results? Right now only the MP2 ground state energy is returned to the python world in ADC calculations of Ps4 if I understand this right. Our [ExcitedStates](https://adc-connect.org/reference.html#adcc.ExcitedStates) object, however, is capable of returning more results, most importantly oscillators strengths, or the complete excitation vector. I tried to understand what was done in the eom-cc case and as far as I can judge, the `CCEnergyWavefunction` seems at least related. In principle it should be possible to do something similar for ADC inside the Psi4 code base. Another option is also to just blindly reduce the object we produce in `adcc`, which of course could be considered leaking out interface details from adcc into Psi4.; - Are the tests copied to samples automatically?. ## Checklist; - [x] Tests added for any new features; - [x] ADC(1); - [x] ADC(2); - [x] ADC(2)-x; - [x] ADC(3); - [x] CVS-ADC(1); - [x] CVS-ADC(2); - [x] CVS-ADC(2)-x; - [x] CVS-ADC(3); - [x] Frozen core variant; - [x] Frozen virtual variant; - [x] singlet and triplet states; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge. Thanks in advance for your help :smile:",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744:2770,test,tests,2770,https://psicode.org,https://github.com/psi4/psi4/pull/1744,4,"['Test', 'test']","['Tests', 'tests']"
Testability," wouldn't allow plain pytest of installed `psi4/` b/c would bring in incorrectly configured qcdb tests. workaround was to pytest `psi4/tests/`; - [x] add a couple corrections I had promised to #2536 but had forgotten to push; - [x] fixes #2548 by passing psi4's `-n` to qcng for dftd3/gcp/mp2d; - [x] corrects `dfmp2-freq2` ctest was registered as `dfmp2-freq1`; - [x] I realized externalpotentials weren't getting unset after a energy/grad/etc. command. This is probably a new bug after #2515 but didn't confirm. It's healed in DDD, but the solution didn't port, so I added the test and temporary workaround to extern1; - [x] Added feature to ctest_runner to allow directory structure to be copied into test scratch for psithon2. This is proven to work but needs a couple lines added to qcengine, so hidden for now.; - [x] Fixed resp addon tests that always failed in parallel. these write to fixed-name files that aren't configurable, so they need to be chdir'd, if not run serially.; - [x] Added a script tester.py that checks some config stuff and writes out missing `test_input.py`. See the goals there for details. Running it produces a list of flaws like the below. I'll post this to an issue for later attention. Someday this can be hooked up to GHA and replace the perl script.; ```; Complaints; ----------; - [ ] 1. cc5: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 2. cookbook/manual-sow-reap: missing cmake directory registration. `vi cookbook/CMakeLists.txt`; - [ ] 3. cookbook/manual-sow-reap: missing CMakeLists. `vi cookbook/manual-sow-reap/CMakeLists.txt`; - [ ] 4. dfmp2-freq1: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 5. dfmp2-freq2: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 6. dfomp2p5-1: missing ctest registration. `vi dfomp2p5-1/CMakeLists.txt` ...; - [ ] 73. v2rdm_casscf/v2rdm7: mismatched marks ctest (opt;v2rdm) and pytest (opt). `vi v2rdm_casscf/v2rdm7/CMakeLists.txt v2rdm_casscf/v2rdm7/test_input.py`; ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2549:1418,test,tester,1418,https://psicode.org,https://github.com/psi4/psi4/pull/2549,1,['test'],['tester']
Testability," | Program | Monomer A (H) | Monomer B (H) | Dimer AB (H)| $E_{int}$ (kcal/mol)| ; |---------|-------------|-------------|-----------|-----------|; | Psi4 | -453.84229689692728 | -453.84229689783353 | -907.68447385499462 | 0.075263339533 |; |Orca | -453.842841688023 | -453.842841698644 | -907.685688152560 | -0.002990642998 |. | Program | $E_{int}$ (kJ/mol)| Notes|; |---------|-------------| ----|; | Psi4 | 0.31490181 | |; |Orca | -0.01251285 | |; | Benchmark | -0.00315431 | Focal Point CCSD(T)/CBS with Psi4 |. I have noticed this warning in all of my Psi4 hexamine/PBEh-3c files:; `Warning: Molecule has a spherically-symmetric moment of charge but lacks icosahedral, octahedral, and tetrahedral symmetry.` . CDS figures this has something to do with the grid placement. Any ideas of how to alleviate this warning while keeping the same geometries and/or what the energy difference could be attributed to? I've tried different basis sets, different number of grid points, `symmetry c1`, `molecule.symmetrize(1e-3)`, no pruning scheme (rather than `robust`). The only time I have been able to get the warning to go away is when I use `bsse_type='cp'`, but I really shouldn't be running the calculation with cp correction because that is already included in the PBEh-3c calculation. Output files for the above example are attached, as well as a graph of Psi4 and Orca interaction energies for all dimers tested. . [Psi4-214-int.txt](https://github.com/psi4/psi4/files/9200713/Psi4-214-int.txt); [Orca-214-monA.txt](https://github.com/psi4/psi4/files/9200765/Orca-214-monA.txt); [Orca-214-monB.txt](https://github.com/psi4/psi4/files/9200766/Orca-214-monB.txt); [Orca-214-dimerAB.txt](https://github.com/psi4/psi4/files/9200767/Orca-214-dimerAB.txt). [hexamine-compare.pdf](https://github.com/psi4/psi4/files/9200777/hexamine-compare.pdf); Image of hexamine: ; ![hexamine](https://user-images.githubusercontent.com/87093097/181296669-eceb1742-e404-4c29-ada4-c090b1d63875.png). Thank you!; Caroline",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2647:1902,test,tested,1902,https://psicode.org,https://github.com/psi4/psi4/issues/2647,1,['test'],['tested']
Testability,"""H\nH 1 2.0\nunits au""); psi4.set_options({""scf__E_CONVERGENCE"": 6}); plan = task_planner(; ""hessian"",; ""MP2/cc-pVDZ"",; mol,; **kw,; dertype=0,; findif_stencil_size=5,; findif_step_size=0.005 / math.sqrt(2 / 1.00782503223),; ); ; displacements = {; ""0: -2"": np.array([[0.0, 0.0, -1.0050], [0.0, 0.0, 1.0050]]),; ""0: 2"": np.array([[0.0, 0.0, -0.9950], [0.0, 0.0, 0.9950]]),; ""0: -1"": np.array([[0.0, 0.0, -1.0025], [0.0, 0.0, 1.0025]]),; ""0: 1"": np.array([[0.0, 0.0, -0.9975], [0.0, 0.0, 0.9975]]),; ""reference"": np.array([[0.0, 0.0, -1.0], [0.0, 0.0, 1.0]]),; # below here for r_proj False; ""1: -1"": np.array([[-0.0025, 0.0, -1.0], [0.0025, 0.0, 1.0]]),; ""1: -2"": np.array([[-0.005, 0.0, -1.0], [0.005, 0.0, 1.0]]),; ""2: -1"": np.array([[0.0, -0.0025, -1.0], [0.0, 0.0025, 1.0]]),; ""2: -2"": np.array([[0.0, -0.005, -1.0], [0.0, 0.005, 1.0]]),; }; ; assert isinstance(plan, FiniteDifferenceComputer); assert len(plan.task_list) == pts; ; for k2, plan2 in plan.task_list.items():; assert isinstance(plan2, AtomicComputer); assert plan2.basis == ""cc-pvdz""; assert plan2.method == ""mp2""; assert plan2.driver == ""energy""; assert np.allclose(plan2.molecule.geometry().np, displacements[k2]); assert plan2.keywords[""SCF__E_CONVERGENCE""] == 1.0e-6; > assert plan2.keywords[""SCF__D_CONVERGENCE""] == 1.0e-11; E assert 1.0000000000000001e-11 == 1e-11. /usr/ports/science/psi4/work/psi4-1.8.1/tests/pytests/test_task_planner.py:479: AssertionError; -------------------------------------------------------------------------------------- Captured log call --------------------------------------------------------------------------------------; INFO psi4.driver.task_planner:task_planner.py:287 PLANNING FD: dermode=(2, 0) keywords={'SCF__E_CONVERGENCE': 1e-06, 'function_kwargs': {}, 'SCF__D_CONVERGENCE': 1.0000000000000001e-11, 'E_CONVERGENCE': 1e-10} findif_kw={'findif_stencil_size': 5, 'findif_step_size': 0.0035493397840830904} kw={'ref_gradient': array([[0., 0., 0.],; [0., 0., 0.]])}; INFO psi4.driver.driver",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3014:5033,assert,assert,5033,https://psicode.org,https://github.com/psi4/psi4/issues/3014,2,['assert'],['assert']
Testability,"""H\nH 1 2.0\nunits au""); psi4.set_options({""scf__E_CONVERGENCE"": 6}); plan = task_planner(; ""hessian"",; ""MP2/cc-pVDZ"",; mol,; **kw,; dertype=0,; findif_stencil_size=5,; findif_step_size=0.005 / math.sqrt(2 / 1.00782503223),; ); ; displacements = {; ""0: -2"": np.array([[0.0, 0.0, -1.0050], [0.0, 0.0, 1.0050]]),; ""0: 2"": np.array([[0.0, 0.0, -0.9950], [0.0, 0.0, 0.9950]]),; ""0: -1"": np.array([[0.0, 0.0, -1.0025], [0.0, 0.0, 1.0025]]),; ""0: 1"": np.array([[0.0, 0.0, -0.9975], [0.0, 0.0, 0.9975]]),; ""reference"": np.array([[0.0, 0.0, -1.0], [0.0, 0.0, 1.0]]),; # below here for r_proj False; ""1: -1"": np.array([[-0.0025, 0.0, -1.0], [0.0025, 0.0, 1.0]]),; ""1: -2"": np.array([[-0.005, 0.0, -1.0], [0.005, 0.0, 1.0]]),; ""2: -1"": np.array([[0.0, -0.0025, -1.0], [0.0, 0.0025, 1.0]]),; ""2: -2"": np.array([[0.0, -0.005, -1.0], [0.0, 0.005, 1.0]]),; }; ; assert isinstance(plan, FiniteDifferenceComputer); assert len(plan.task_list) == pts; ; for k2, plan2 in plan.task_list.items():; assert isinstance(plan2, AtomicComputer); assert plan2.basis == ""cc-pvdz""; assert plan2.method == ""mp2""; assert plan2.driver == ""energy""; assert np.allclose(plan2.molecule.geometry().np, displacements[k2]); assert plan2.keywords[""SCF__E_CONVERGENCE""] == 1.0e-6; > assert plan2.keywords[""SCF__D_CONVERGENCE""] == 1.0e-11; E assert 1.0000000000000001e-11 == 1e-11. /usr/ports/science/psi4/work/psi4-1.8.1/tests/pytests/test_task_planner.py:479: AssertionError; -------------------------------------------------------------------------------------- Captured log call --------------------------------------------------------------------------------------; INFO psi4.driver.task_planner:task_planner.py:287 PLANNING FD: dermode=(2, 0) keywords={'SCF__E_CONVERGENCE': 1e-06, 'function_kwargs': {}, 'SCF__D_CONVERGENCE': 1.0000000000000001e-11, 'E_CONVERGENCE': 1e-10} findif_kw={'findif_stencil_size': 5, 'findif_step_size': 0.0035493397840830904} kw={}; INFO psi4.driver.driver_findif:driver_findif.py:263 ; ---------------------",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3014:1527,assert,assert,1527,https://psicode.org,https://github.com/psi4/psi4/issues/3014,2,['assert'],['assert']
Testability,# Description; Fixes warning message described on slack by iwatobipen:; ```; /home/user/anaconda3/envs/chemo37/lib/python3.7/site-packages/psi4/driver/qcdb/libmintsbasisset.py:854: ResourceWarning: unclosed file <_io.TextIOWrapper name='/home/user/anaconda3/envs/chemo37/share/psi4/basis/aug-cc-pvdz.gbs' mode='r' encoding='UTF-8'>; names[index] = parser.load_file(fullfilename); ```; as suggested by @loriab . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1687:586,Test,Tests,586,https://psicode.org,https://github.com/psi4/psi4/pull/1687,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"# Overview. This is version 2.0.0 of the Psi4 build system. It is designed to speed-up build times as well as aid in transitioning to a more modular model driven by QCDB or incorporated into the Pulsar framework.; ## Disclaimer. This is _NOT_ quite ready to merge yet, but represents a substantial change that I wanted developers to start looking at and provide feedback on. In particular:; - [x] Get remote builds via Travis-CI working; - [x] @lothian 's coupled cluster code tests are failing (really could use help there); - [x] Fix sow/reap tests (not using installed data dir?); - [x] Failing test cases:; - [x] cbs-xtpl-freq; - [x] fnocc2; - [x] tu4-h2o-freq ; - [x] Hook back-up: ; - [x] chemps2; - [x] erd; - [x] dkh; - [x] gdma; - [x] ambit; - [x] pcmsolver; - [ ] Get binary working (need help from @loriab); - [x] Test (and then most likely fix) plugin system; - [x] Move GTFock to external; - [x] Libint is now external, closes #355 ; ## Speed. By means of comparison, on my box the old build system took 34 minutes and this build took 14 minutes. Both build times are for a debug build, ignore the time to build Boost, use the default angular momentum, and are run on 6 cores. Furthermore, this new build does a dramatically better job of tracking dependencies among files. For example libint/libderiv should only build once and editing a single file in mints no longer triggers a full recompilation (of course touching a file like Molecule.h basically will). This means subsequent builds should be dramatically faster, in my experience so far typically only the file that was changed needs recompiled.; ## Modularity. Under the old build the entire Psi4 build project had to track dependencies for all plugins and external interfaces. This was quickly becoming a nightmare as evidenced by the 3,000,000 emails we have been getting about chemps2 breaking. I have transitioned us to what is known in CMake land as a superbuild. In such a build all pieces of a package, including the depend",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442:477,test,tests,477,https://psicode.org,https://github.com/psi4/psi4/pull/442,4,"['Test', 'test']","['Test', 'test', 'tests']"
Testability,"## Authors; Andy Jiang, Zachary L. Glick (Sherrill Group, Georgia Institute of Technology). ## Description; Adds the MBIS Charge Partitioning Feature to Psi4, from the associated paper by Toon Verstraelen et al. (2016); (https://pubs.acs.org/doi/10.1021/acs.jctc.6b00456). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Calculation of MBIS Atomic Charges; - [x] Calculation of MBIS Atomic Multipoles. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1961:472,Test,Tests,472,https://psicode.org,https://github.com/psi4/psi4/pull/1961,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Big Picture of the Project; For those who haven't been following the saga, orbital convergence in occ has been unreliable for quite some time. In #1772, I changed the defaults for orbital convergence to be the same as for dfocc. Tests started failing because the orbitals couldn't be converged. My investigation has indicated the problem relates back to the details of the DIIS implementation: the orbital DIIS needs to be coupled to the DIIS for T2 amplitudes. My own Psi4Numpy implementations of orbital-optimized methods show no convergence problems when I do this, but show quite poor convergence when I uncouple them. ...Unfortunately, getting the DIIS coupled together requires open-heart surgery on OCC due to a number of long-standing issues with the module, which I would have needed to fix anyways for a current research project. Per Lori's request, I'm breaking up what would be a monolithic PR into several. ## Description of the PR; The objective of the current PR is to switch orbital convergence from using a custom DIIS implementation of Bozkaya's to using Andy's libdiis. Andy's is general enough to accomodate combined DIIS on a dpdbuf4 and Vector/Matrix quantities. Bozkaya's is not. ## Infrastructure Changes; * Less code duplication!; * I'm introducing a strategy to eliminate the custom tensor classes in OCC over time. When a function uses a custom tensor class, use a constructor to convert it to a libmints standard class. If necessary, write it back at the end of the function call. This allows us to take the task of rewriting all of OCC (and its coupled variables) into going function-by-function. When we can, we'll then just change the variable in the header and eliminate the relevant converters.; * To eliminate code duplication, I added some new objects to the wavefunction that ""contain"" alpha/beta specific quantities. So instead of needing to write the orbital rotation code once for closed-shell, once for open-shell alpha, and once for open-shell beta, you onl",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1783:232,Test,Tests,232,https://psicode.org,https://github.com/psi4/psi4/pull/1783,1,['Test'],['Tests']
Testability,"## Big Picture of the Project; See #1783. tl;dr: The goal is to improve orbital convergence in `occ`, but I need the module cleaned up to make it easier to think about the code I'm needing to mess with. I'm breaking a monolith PR into several. ## Description of the PR; The current PR has two objectives. First, condense the MP2 amplitude functions, MP2 energy functions, and MP2 1RDM functions into one function each. Although several methods needed these functions with minimal changes, there were two or three functions created for each of those three. Dealing with how he handled spin-scaling forced me to take a second objective: to clean OCC's handling of spin-scaling variables. OCC previously allowed the user to overwrite the definitions of opposite-spin scaling and spin-component-scaling schemes and used far too many variables. The current scheme still allows users to make their own definitions, but those are now sent to custom variables. In addition, many keywords have been eliminated. OCC's handling of spin-scaling now differs from DFOCC's, but I am not fool enough to take on that module. Obligatory ping of @susilehtola and @hokru, who expressed opinions about this on Slack, and @loriab, who expressed many opinions about this on Slack. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] We have shed another 800+ lines of code.; - [x] Major refactor of spin-scaling in OCC. All keywords for manual handling of spin scaling in OCC are removed. Please use `os_scale` and `ss_scale` for custom scaling. Select the spin scaling method that goes to the current energy by the method string you pass to the energy call.; ~~- [ ] Update documentation accordingly.~~ Deferred to Lori PR. ## Checklist; - [x] Quick tests, occ related tests, manual diff checks, and `test_mp2.py` all pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1789:1774,test,tests,1774,https://psicode.org,https://github.com/psi4/psi4/pull/1789,2,['test'],['tests']
Testability,"## Big Picture of the Project; See #1783. tl;dr: The goal is to improve orbital convergence in `occ`, but I need the module cleaned up to make it easier to think about the code I'm needing to mess with. I'm breaking a monolith PR into several. ## Description of the PR; The objective of the current PR is to clean up `occ/manager.cc`. All duplicated printing and variable setting code is now located in `postprocessing.cc`. ## Infrastructure Changes; * Less code duplication and less code!; * The important `occ` variables are now set in `variables_` C-side so they can be set Py-side.; * A new file has been created, `postprocessing.cc`, for all `occ`'s repetitive printng and Psi variable-setting needs. ## Questions; * @loriab, please check that there's nothing obvious missing. In particular, there is no `test_omp.py`, so I just made a .txt file for you. ## Checklist; - [x] [Quick tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1785:887,test,tests,887,https://psicode.org,https://github.com/psi4/psi4/pull/1785,2,['test'],['tests']
Testability,## Description / Todos. Miscellanea I found during an independent PR. - [x] Added `fsapt` tag to tests; - [x] Cleanup in `fsapt` - more use of auto and specialized`libmints` functions. ## Checklist; - [x] `fsapt` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2332:97,test,tests,97,https://psicode.org,https://github.com/psi4/psi4/pull/2332,2,['test'],['tests']
Testability,## Description. ## Dev notes & details; - [x] https://github.com/MolSSI/QCEngine/pull/424 takes over the refs removed from here. (it might be easier to look at the final file https://github.com/loriab/psi4/blob/svwn_refs/tests/pytests/standard_suite_ref_local.py that only has a few FCI/CISD values left; the blocks have been rearranged to a conventional order.); - [x] bump to qcengine v0.28. ## Checklist; - ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3022:221,test,tests,221,https://psicode.org,https://github.com/psi4/psi4/pull/3022,4,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description. ## Todos; - [x] few more copyrights.; - [x] remove unused testing scripts. ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1537:74,test,testing,74,https://psicode.org,https://github.com/psi4/psi4/pull/1537,1,['test'],['testing']
Testability,"## Description. ## Todos; - [x] standard suite testing for HF E & G, MP2.5 E & G, MP3 E & G, LCCD G; - [x] adjustments to fnocc, dfocc, occ as needed. (AED has signed off on the fnocc printing changes -- printing has been wrong.); - [x] detci_opdm test is temporarily excused until qcel 0.16 comes out that can forgive phase changes. want to get this PR in for conda builds. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1971:47,test,testing,47,https://psicode.org,https://github.com/psi4/psi4/pull/1971,5,"['Test', 'test']","['Tests', 'test', 'testing', 'tests']"
Testability,## Description. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] `set_tweak(vec)` killed off (deprecated since v1.5); - [x] allows LibXC v5 or v6; - [x] fixes one test for python 3.11 and requires a new pb11 for it. ## Checklist; - [ ] ~Tests added for any new features~; - [x] full tests run with libxc6 and python 3.11. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2817:287,test,test,287,https://psicode.org,https://github.com/psi4/psi4/pull/2817,3,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,## Description. <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] adds `CCSD(AT)` to cbs driver; - [x] progress counter for `(AT)`part.; - [x] fix for #1957 ; - [x] fix for printing wrong variable in `dfocc`. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2013:276,Test,Tests,276,https://psicode.org,https://github.com/psi4/psi4/pull/2013,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description. A series of updates to the Psi4 driver. Very large PR's is not my favorite thing to do on git, but unfortunately driver changes are complex and strongly tied together. Putting this up now as a way to help track everything this fixes.; ## Todos; - [x] General cleanup and reorganization of the driver.; - [x] Reorganized procedures into a single folder.; - [x] Reworking CBS and N-Body wrappers for easier use.; - [x] Above changes broke some of pywrap, need to get these fixed.; - [x] More canonical python raise error printing.; - [x] Reorganizes OEProp to use `D_subset_helper` instead of `Da_subset` to avoid pulling density matrices from multiple sources. Closes #193; - [x] Reworks how OEProp is called for SCF, DFT, DF-MP2, CI, and MCSCF. The full OEProp suite works for these now through the properties driver.; - [x] New test case for the above OEProp (scf_properties, mp2_properties, ci_properties), closes #356.; - [x] Freeze COM/ORIENT for FREEZE COORDINATE option and closes #179 ; ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/365:845,test,test,845,https://psicode.org,https://github.com/psi4/psi4/pull/365,1,['test'],['test']
Testability,"## Description. Adds analytic RHF Hessians. Still much cleanup/fixing to be done, but I thought I'd open a PR to allow others to chime in.; ## Todos; - [x] Add tests.; - [x] Hook into driver (with help from @loriab).; - [x] Add batching to allow fock derivatives to be computed without using too much memory.; - [x] Fix bug in spherical harmonic second derivative integrals.; ## Questions; - [x] Should we just merge this in when UHF is working, or should we also push to get the XC Hessian terms, @dgasmith / @robparrish ? I don't know how involved the XC terms will be, but I'm happy to help get them cranked out.; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/437:160,test,tests,160,https://psicode.org,https://github.com/psi4/psi4/pull/437,1,['test'],['tests']
Testability,"## Description. Adds flag to tell deriv() that I've already backtranformed the opdm/tpdm. Also, I can't figure out how to keep deriv() from trying to evaluate reference contributions to the gradient, even though I have none, so I added additional logic to check if the pointers to the reference containers are null. ; ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/386:247,log,logic,247,https://psicode.org,https://github.com/psi4/psi4/pull/386,1,['log'],['logic']
Testability,"## Description. Adds flag to tell deriv() that I've already backtranformed the opdm/tpdm. Also, I can't figure out how to keep deriv() from trying to evaluate reference contributions to the gradient, even though I have none, so I added additional logic to check if the pointers to the reference containers are null.; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/406:247,log,logic,247,https://psicode.org,https://github.com/psi4/psi4/pull/406,1,['log'],['logic']
Testability,"## Description. After rebasing, hopefully this pull request is cleaner. Interfragment coordinates fixed with 3 new test cases.; ## Todos; - [x] Feature1; ## Questions; - [x] Question1; ## Status; - [X] Ready to go; All opt tests pass for me.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/441:115,test,test,115,https://psicode.org,https://github.com/psi4/psi4/pull/441,2,['test'],"['test', 'tests']"
Testability,"## Description. All manner of sowreap cleanup and upgrade; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] make Hessian by both E & G return same non-mass-weighted matrix, relabel output, fixing #225 ; - [x] preserve `.1` files for optimization for cbs calcs, so no more multiple first cycles, fixing #303 ; - [x] sowreap testing machinery fixed up: catches more errors, works for optimizations, pep8-ified. @amjames, you may want to take a look at 31162be; - [x] new capability to do frequencies in sow/reap by finite difference of gradients, fixing psi4/psi4private#80; - [x] in order to do previous, needed format_molecule to preserve orientation, which zmat doesn't do naturally, so added `forcexyz=True` kwarg to optionally write in Carts (including no_com/no_reorient). conveniently, this fixes http://forum.psicode.org/t/embarrassingly-parallel-frequency-calculation-misbehaving/111 also.; - [x] general cleanup of db, opt, freq by E sow/reap procedures after wavefunction_pass, especially return statements and forcing return_wfn True, fixing #291 ; ## Questions; - [x] @psi-rking should probably take a look at 380a93c; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/318:363,test,testing,363,https://psicode.org,https://github.com/psi4/psi4/pull/318,1,['test'],['testing']
Testability,## Description. Allows BCCD with ROHF starting orbitals.; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] Added BCCD and BCCD_T to the list of ROHF semicanonicalize cases in `src/bin/cc*`.; - [x] Added a BCCD ROHF test case; - [x] Added a BCCD_MAXITER keyword instead of using an arbitrary value; - [x] Removed redundant `proc.py:run_bccdt`; ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/295:255,test,test,255,https://psicode.org,https://github.com/psi4/psi4/pull/295,1,['test'],['test']
Testability,"## Description. Bumped Clang Travis test to clang-3.8 from clang-3.7; - [x] Makes me hum ""New Slang"" by The Shins.; - [x] Makes Travis use the latest Clang (3.8) instead of 3.7 for the release build.; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/439:36,test,test,36,https://psicode.org,https://github.com/psi4/psi4/pull/439,1,['test'],['test']
Testability,"## Description. Converts Psi4 from a binary that calls Python to a Python module that calls a shared object as discussed in #468. ; ## Features; - ""psi4"" is now a python module, the entire driver and suite of C++ functions is now behind this interface.; - The ""bin/psi4"" binary is now a python script that parses Psithon input to support the current Psi4 interface.; - For any conventional python script the following now works: `import psi4`.; - C++ no longer calls python, all python objects must be passed in from the driver.; - BasisSet objects are the primary objects effected here. The Wavefunction now stores BasisSets constructed by python and can be accessed by `wfn->get_basis(*basis*)`.; - The C++ side of psi4 is now compiled to the a shared library with python access named ""core.so"".; ## Remaining issues; - There are several outstanding issues, a list of which can be found [here](https://github.com/dgasmith/psi4/projects/1). All issues may not be cleaned up by the time this PR goes through, current full suite coverage of 99%.; - HF: Broken Symmetry guess is currently broken, apparently no test case for this.; - BasisSet is not final with regard to construct_combined and handling of user defined basis sets.; - SAD does not work due to basis set creation.; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/481:1109,test,test,1109,https://psicode.org,https://github.com/psi4/psi4/pull/481,1,['test'],['test']
Testability,## Description. Distilli should provide PR testing on mac for all future updates. This is a test PR for this functionality.; ## Status; - [ ] Do NOT merge me.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/445:43,test,testing,43,https://psicode.org,https://github.com/psi4/psi4/pull/445,2,['test'],"['test', 'testing']"
Testability,"## Description. Distribute test cases and misc.; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] For each test case in `samples`, add a `test.in` (intact w/ `#TEST` lines) alongside the plain `input.dat` (w/o`#TEST` lines). This way one can test (by hand) from an installed copy (e.g., conda pkg).; - [x] In `setup`, be more explicit about how to handle argument values that argparse might want to interpret as arguments themselves. Response to http://forum.psicode.org/t/odd-behavior-of-setup/233; - [x] Fix bug that kept undefined literal `${MCONDA}` in `psi4-config` for conda packages. This bug made it useless for querying `psi4-config --includes` for plugin configuration.; ## Status; - [x] Ready to go. Nothing controversial here.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/401:27,test,test,27,https://psicode.org,https://github.com/psi4/psi4/pull/401,6,"['TEST', 'test']","['TEST', 'test']"
Testability,"## Description. Documents F/I-SAPT capabilities, adds F/I-SAPT test cases and samples, and makes F/I-SAPT postprocessing scripts available in install/share. ; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [ ] Enables the average citizen to quickly begin using F/I-SAPT.; ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/467:63,test,test,63,https://psicode.org,https://github.com/psi4/psi4/pull/467,1,['test'],['test']
Testability,"## Description. Documents F/I-SAPT capabilities, adds F/I-SAPT test cases and samples, and makes F/I-SAPT postprocessing scripts available in install/share.; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] Enables the average citizen to quickly begin using F/I-SAPT.; ## Status; - [x] Ready to go. Looks ready to me, though there may well be further reST changes after viewing the docs build. @robparrish may want to look it over. We'll close the other PR.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/470:63,test,test,63,https://psicode.org,https://github.com/psi4/psi4/pull/470,1,['test'],['test']
Testability,"## Description. Earlier SAPT output passes got the output file printing looking nice and involving flexible alpha, but the generic total psivars weren't reconciled between c-side and py-side computation and there was duplicated code. This fixes it up.; ## Todos; - [x] c-side was setting e.g., `SAPT SAPT2+ ENERGY` always with alpha=0, while py-side was setting `SAPT2+ TOTAL ENERGY` always with alpha=1, in both cases regardless of what the user requested alpha. Now the variable takes the name of the latter, uses the requested alpha, and is always computed py-side.; - [x] `Disp20(SS)` (exch-disp20, too) becomes `SAME-SPIN Disp20`. OS dropped since equiv to total less SS.; - [x] c-side wasn't considering dMP2 in total printed for `Induction` section, so total wasn't equaling El + Ex + I + D. Add dMP2(2) and dMP2(3) into that term. Also, dMP2 wasn't being considered in the `SAPT TOTAL ENERGY` computing, so that was one more reason to consolidate it py-side.; - [x] modify sapt6 test case to test _everything_: alpha = 0 & 1, all sapt methods, all free sapt methods, and generic sapt psivars and current energy; - [x] reenable `energy('ssapt0')` just so one can get back the ssapt0 variant (which _isn't_ controlled by exch_scale_alpha keyword); - [x] make py-side sapt defs more flexible to accomodate non-1.0 alphas; ## Questions; - [ ] Possibly @jgonthier and @CDSherrill want to look over this. I've no specific questions, just FYI, stuff's changing.; - [ ] @bwb314 , you traced a sapt inconsistency in the webmo output, but I can't find your post now. Do you want to check that it's reconciled sometime? ; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/433:987,test,test,987,https://psicode.org,https://github.com/psi4/psi4/pull/433,2,['test'],['test']
Testability,## Description. Extends DDX interface to support SCF response and TDSCF. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [X] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2967:93,Test,Tests,93,https://psicode.org,https://github.com/psi4/psi4/pull/2967,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description. Fix for ROHF stability analysis.; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] Fixes the old ROHF stability analysis code, to account for the updated ROHF ordering used in libtrans.; - [x] Provides a test (taken from Psi3) to verify the correctness of the ROHF stability code.; ## Notes. This code will surely be replaced by a Davidson-like solver sometime soon, but it may be useful for debugging such an implementation.; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/280:260,test,test,260,https://psicode.org,https://github.com/psi4/psi4/pull/280,1,['test'],['test']
Testability,"## Description. Fixed dftd3 calls when `LD_LIBRARY_PATH` empty. Activate new -d3 damping.; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] The env passed into subprocess must be strictly a dict of strings. This was violated when PATH or LD_LIBRARY_PATH was empty, yielding a `TypeError: execve() arg 3 contains a non-string value` error. Fixed this.; - [x] Re-enable the `d3m` and `d3mbj` extensions. Adjust test case (unrelated DFT error still failing on psinet) and docs to match. Filled in `[Smith:2016:2197]` reference.; ## Questions; - [x] Do we want conda dftd3 automatically installed alongside binary? On one hand then ensures ppl can use dftd3. On the other, ppl may be surprised if their hand-cmopiled version of dftd3 isn't the one used anymore. **Ans** sounds like installation alongside is ok, so long as hand-compiled still preferentially chooseable; - [x] If adding dftd3 to the install list, want to add the one built purely from Grimme's code or the one with the `-d3m` and `-d3m(bj)` capabilities, as applied through a patch? **Ans** distribute `dftd3m`; ## Status; - [x] Ready to go.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/383:449,test,test,449,https://psicode.org,https://github.com/psi4/psi4/pull/383,1,['test'],['test']
Testability,"## Description. Fixed incorrect B matrix for 'interfragment coordinates'. These coordinates are not used by default, but the user can specify them to create very specific coordinates. They may be useful, e.g., in combination with 'freeze_intrafrag' for fixed-body optimizations. When symmetry is turned on, there is a difficulty with the symmetry detection in combination with the way in which the displacements are carried out for these coordinates. A loosening of the symmetry tolerance when computing the symmetrized geometry usually works and has been implemented. In the future, it may be best to carry out the displacements in these coordinates iteratively and numerically as they are for redundant intrafrag coordinates. However, this approach would be more hazardous with no upside in C1, and I don't have time to implement it right now anyway.; - [ ] Feature1; Reference atoms can now be specified by the user with a standard multi-dimensional python list. The test cases illustrate this. Probably, this utility will stimulate more use cases for further development of the code.; ## Questions; - [ ] Question1; ## Status; - [X] Ready to go; All tests, including the 3 new ones pass for me.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/432:970,test,test,970,https://psicode.org,https://github.com/psi4/psi4/pull/432,2,['test'],"['test', 'tests']"
Testability,## Description. Fixing issue #310 CH3F was not fully optimizing due to missing internal coordinates. This issue led to the discovery that the code joining separated fragments had significant problems (basically atom reindexing/ordering).; ## Todos; ## Questions. None; ## Status. Ready to go. All optimization tests passed.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/314:310,test,tests,310,https://psicode.org,https://github.com/psi4/psi4/pull/314,1,['test'],['tests']
Testability,"## Description. General wavefunction cleanup, should fix #259. The other TODO's in that issue have been moved to separate issues or were already flagged elsewhere.; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] Fixed py-side Molden writer; - [x] Added a py-side Molden test; - [x] Moved `return_wfn` warnings into the `energy` class. As these can only be called from here I think thats fine for now. Needs to find a better home in the future.; - [x] Modernized a few plugins; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/304:312,test,test,312,https://psicode.org,https://github.com/psi4/psi4/pull/304,1,['test'],['test']
Testability,"## Description. Improved fixed-coordinate optimizations. Test opt7 still works, as does a full dihedral scan of HOOH in C2 symmetry. Resolves issue #10 (there are no longer any nonsymmetric displacements). A new keyword `FIXED_COORD_FORCE_CONSTANT` allows tweaking for softer or firmer constraints, if necessary. The code does interpret fixed dihedrals <-180 or >180. However, the code does NOT currently deduce the most direct way through the dihedral discontinuity at 180. So it's a bad idea to give an input geometry with a dihedral of, say 178, and assign a target value of -178. Also, I've turned off dynamic trust radius sizing for optimizations with fixed coordinate targets by default.; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/328:57,Test,Test,57,https://psicode.org,https://github.com/psi4/psi4/pull/328,1,['Test'],['Test']
Testability,"## Description. Increases compatibility with external analysis tools, by providing Gaussian formatted checkpoint file (FCHK) output. Also adds built-in distributed multipole analysis via Stone's GDMA package.; ## Todos; - [x] Add FCHK writer to libmints.; - [x] Incorporate GDMA 2, for distributed multipole analysis.; - [x] Add GDMA options, to prevent user from having to provide a separate input file.; - [x] Put GDMA results in the variables map.; - [x] Add GDMA test case.; - [x] Document FCHK writer and GDMA.; ## Questions; - [x] Although GDMA is released under GPL2, I want to try to contact Anthony Stone to get explicit permission to release his code as a subdirectory of Psi4. I don't think there are any legal problems with including an FCHK writer; I simply followed the [format description](http://www.gaussian.com/g_tech/g_ur/f_formchk.htm) and checked it against some of the GDMA examples. Anybody disagree?; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/323:467,test,test,467,https://psicode.org,https://github.com/psi4/psi4/pull/323,1,['test'],['test']
Testability,"## Description. Modified linear bend algorithm in optking to bend, when possible, along cartesian axes. Added SF4 (opt14) test case for which this change was made.; ## Todos; - [x] Optimizer now works for odd cases where linear bend is in a symmetry plane but is not constrained to be linear by the molecular point group. Fixed problem discovered by WebMO use for SF4.; - [x] Added opt14 test case for SF4.; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/300:122,test,test,122,https://psicode.org,https://github.com/psi4/psi4/pull/300,2,['test'],['test']
Testability,"## Description. Refreshed all output.ref's in the tests folder. An interesting discovery is that some DFT methods (wB97X, and wB97) inhibit the Psi4 output printing. We need to fix this before this PR goes through, but I wanted to start in on checking some of the changes.; ## Todos; - [x] Several DFT functionals no longer print their output correctly. While the program still runs the input script (can be verified with python print), Psi4 printing has stopped. This needs to be fixed. ; - [x] Update dft1, dft1-alt, and dft2 test case output.ref's after the above change.; ## Spot check outputs. I don't think its possible to compare every single output, but I would like to borrow the following people to spot check a few outputs. We run quite a few tests, but they certainly are not comprehensive. This could potentially show holes in our testing strategy (like the above issue). . Probably the easiest way to do this is go to the ""Files changed"" tab at the top and use a browser search to find a file your interested in. This does require you to know the name of the file in question. Alternatively, you can download my branch and run a `git diff -w -b HEAD~4 filename`. The `-b -w` options are to help cleanup the diff a bit.; - [x] CC @lothian ; - [x] OCC/DFOCC @bozkaya ; - [x] Psithon/DFTD3/PyWrap/etc @loriab ; - [x] FNO-CC @edeprince3 ; - [x] Opt @psi-rking ; - [x] CI (myself); - [x] SCF/DFT @jturney @robparrish ; - [x] DCFT @andysim ; ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/315:50,test,tests,50,https://psicode.org,https://github.com/psi4/psi4/pull/315,4,['test'],"['test', 'testing', 'tests']"
Testability,## Description. Running `vmd_cube.py` would produce an error due to the use of deprecated `.iteritems` instead of `.items`. ## User API & Changelog headlines; - [x] Fix Python3 compatibility in vmd_cube.py. ## Dev notes & details; - Replace `iteritems` with `items`. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3097:287,Test,Tests,287,https://psicode.org,https://github.com/psi4/psi4/pull/3097,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description. So `name_`, `description_`, and `citation_` for functionals and superfunctionals default to empty std::string s, `""""`. Something about the mpi printing changeover did not like empty strings one bit, so the printing gave up whenever description & citation weren't set in functional.py . This occurs for the functionals B97-D (Grimme's) and HTCH and DLDF superfunctional. But that printing only gets called when print level >=2 (which it is for the dft1, dft1-alt, and dft2 test cases). Thus certain dft jobs have been giving not much output for a year and a half. A string with standard indentation fixes the problem. Kudos to @dgasmith for actually looking at a test case output and noticing.; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/319:488,test,test,488,https://psicode.org,https://github.com/psi4/psi4/pull/319,2,['test'],['test']
Testability,"## Description. The DOI Foundation [started recommending a new resolver](https://www.doi.org/doi_handbook/3_Resolution.html#3.8). While their URL change may be a bit ironic, it's now [encrypted](https://www.ssllabs.com/ssltest/analyze.html?d=doi.org) and the old `dx` subdomain is being redirected. So, there is no urgency here. However, for consistency, this PRs suggests to update all static DOI links accordingly, plus the code that generates new DOI links. ## Checklist; - [-] Tests added for any new features; - [-] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1761:481,Test,Tests,481,https://psicode.org,https://github.com/psi4/psi4/pull/1761,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description. The `GIT_TAG` argument to `ExternalProject_Add` was changed to `v1.1.4` to reflect a version bump in [PCMSolver](https://github.com/PCMSolver/pcmsolver/releases/tag/v1.1.4); I had introduced a bug with v1.1.3 The polarization charges were computed with a degraded accuracy. This was caught neither by the library own unit tests nor by Psi4 tests, as it becomes apparent only when trying to calculate higher-order response properties (available in DALTON, but I failed to run the PCM tests there...); I apologize for any inconvenience!; ## Todos; - [x] Update the version of PCMSolver shipped with Psi4.; ## Questions; - [x] @loriab should re-build the conda package; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/440:338,test,tests,338,https://psicode.org,https://github.com/psi4/psi4/pull/440,3,['test'],['tests']
Testability,"## Description. The main motivation for these changes is to make the pending #1061 available satisfying the constraints and comments offered by @dgasmith and @amjames.; This mainly amounts to localizing state to a suitable CC wavefunction object and we tried doing that within the scope of #1061, but quickly recognized that some form of rewrite of the CC infrastructure would be more helpful in general. See also #1247 . This PR makes the first step of moving the various `cc*` folders inside a top-level `cc` folder which contains the `ccwave.h` and top-level implementation files. This is thus mostly aesthetics, but avoids drowning the (hopefully!) good stuff to come in a large diff. ~Hold off merging until #1203, #1206, #1251, and #1252 are in. I'll keep rebasing this one accordingly.~. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Moved `cc{energy,hbar,lambda,density,eom,response}` under `cc` folder.; - [x] Moved `ccwave.h` header file to top-level `cc` folder. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1253:1046,Test,Tests,1046,https://psicode.org,https://github.com/psi4/psi4/pull/1253,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description. The main motivation for these changes is to make the pending #1061 available satisfying the constraints and comments offered by @dgasmith and @amjames.; This mainly amounts to localizing state to a suitable CC wavefunction object and we tried doing that within the scope of #1061, but quickly recognized that some form of rewrite of the CC infrastructure would be more helpful in general. We are preparing a more thoroughly motivated outline of the changes we propose, which will be posted as an issue. In the meantime, this PR makes the first step of moving the various `cc*` folders inside a top-level `cc` folder which contains the `ccwave.h` and top-level implementation files. This is thus mostly aesthetics, but avoids drowning the (hopefully!) good stuff to come in a large diff. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Moved `cc{energy,hbar,lambda,density,eom,response}` under `cc` folder.; - [x] Moved `ccwave.h` header file to top-level `cc` folder.; - [x] Cherry-picked some of the changes by @tomspur; * Changes suggested by valgrind and cppcheck; * Matrix CTOR from `dpdbuf4` @amjames could you check that setting `symmetry_` is done correctly?. Aesthetics; - [x] Run `clang-format` on `ccenergy`. Supersedes #1203, see #1144 ; - [x] Run `clang-format` on `ccdensity`. Supersedes #1202, see #1144 ; - [x] Run `clang-format` on `cclambda`. Supersedes #1206, see #1144 ; - [x] Run `clang-format` on `cctriples`. Supersedes #1209, see #1144 ; - [x] Remove `void` from function argument lists in the `cc*` folders. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1243:1618,Test,Tests,1618,https://psicode.org,https://github.com/psi4/psi4/pull/1243,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description. The overall goal was to revamp the SCF guess inside Psi to give a bit better convergence and reduce the number of times a user needs to intervene in guess selection. To this end we have improved the speed of SAD, and tweaked default guesses away from CORE. The other half of improving SCF convergence is improving the solver which is delegated to a later date.; ## Todos; - [x] Changed SAD to use DF (default) or a Direct JK object. Reduced computational time of SAD by 50-2000x (yes, really).; - [x] SAD guess is now default for RHF, all RHF test cases pass.; - [x] GWH is now the default for ROHF/UHF, cc11 fails and was switched back to CORE.; - [x] Added fractional occupations via electron smearing across a given row. Preliminary tests show that for something like the HF molecule this works really well, but less so for Benzene. However, for UHF test cases this seems to help things dramatically. Turned off by default.; - [x] Closes #156. Now takes ~3 seconds instead of several hours.; - [x] Add Weigend J fit as a fail over fitting basis sets. While this is only J fit, this appears sufficient for SAD and contains auxiliary basis for atoms through Xenon.; - [x] Add secondary failover to Direct if DF is too angular momentum heavy for compiled `libint`.; ## Questions; - [x] We are not sold on GWH as the default for ROHF and UHF, the general consensus is that it works better than CORE on the average. Feedback is most welcome.; - [x] There may have been stability issues with SAD in the past. Can anyone recall what these were and provide an example?; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/400:559,test,test,559,https://psicode.org,https://github.com/psi4/psi4/pull/400,3,['test'],"['test', 'tests']"
Testability,"## Description. The semilocal PW86 exchange functional (PRB 33:8800(R), 1986) is implemented. The dft1 test case includes four test cases for this functional on a water molecule. The energies are compared against the nwchem reference implementation. The PW86PBE exchange-correlation functional (keyword: pw86pbe), built as the combination of PW86 exchange and PBE correlation, is also made available.; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/453:103,test,test,103,https://psicode.org,https://github.com/psi4/psi4/pull/453,4,['test'],['test']
Testability,"## Description. There was a race condition in the parallel calculation of ESP over grid in memory. This was fixed in PR #1900.; This made the computation of ESP serial and quite slow (as mentioned in #1614 for example).; This PR brings back the OpenMP parallelization, the race condition is avoided by allowing each thread to hold its own copy of the `ElectrostaticInt` object. Thanks to @JonathonMisiewicz for the initial hint. ## User API & Changelog headlines; - [x] Significant acceleration of the calculation of ESP over grid in memory. ## Dev notes & details; - [x] Created a vector of thread-specific `<ElectrostaticInt>` and `<Matrix>` objects for computing the ESP at a given grid point; - [x] Added `#pragma omp parallel for schedule(dynamic)` to parallelize the outer loop over grid points. ## Questions; - [ ] While working on this part of the code I noticed that `cubeprop` uses a scheme different from the one used by `oeprop` to compute ESP on a grid. I am not sure this is documented. Should it be?; - [ ] Initially my goal was to parallelize the computation of `compute_esp_over_grid` function which reads the grid from `grid.dat` file. The way it is designed now, the grid is read iteratively, so one grid point read->one ESP point computed->one ESP point written to the output `grid_esp.dat` file. This is not parallelizible. However, if one would read grid points in batches - this can be parallelized. What do you think? . ## Checklist; - [x] Tests added for any new features => [mints14](https://github.com/psi4/psi4/tree/master/tests/python/mints14) test already in place; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2891:1464,Test,Tests,1464,https://psicode.org,https://github.com/psi4/psi4/pull/2891,5,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description. Thermo and isotope improvements; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] fixed bug whereby mass specification in `molecule {...}` through `C@14.0` led to no basis fns being placed on those atoms; - [x] updated thermo printing to include kJ, Cp, and hopefully be easier to orient oneself in; - [x] compared our thermo output for isotopes to other programs' in new test case freq-isotope; ## Questions; - [x] Would be good to get #345 resolved; - [x] @psi-rking may want to look over new thermo printing (example [here](https://github.com/loriab/psi4/blob/b3lyp35/tests/freq-isotope/output.ref)); ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/348:428,test,test,428,https://psicode.org,https://github.com/psi4/psi4/pull/348,2,['test'],"['test', 'tests']"
Testability,"## Description. This PR fixes thread synchronization in AIOHandler after KTB. The std::thread in C++11 must not be joinable when it is destroyed, or it calls terminate(). Before destroying every thread created in AIOHandler, it is thus joined. In addition, a thread must not be joined twice, thus the synchronization step now checks whether the thread is joinable before joining. Fixes #596 and should definitely fix errors in tests cubeprop, sapt2, sapt3 and sapt6 that appeared in KTB and for which @loriab had a workaround. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fixed thread management in AIOHandler. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/609:427,test,tests,427,https://psicode.org,https://github.com/psi4/psi4/pull/609,1,['test'],['tests']
Testability,"## Description. This PR is a reboot of https://github.com/psi4/psi4/pull/2695. That PR hasn't been kept up-to-date with the many changes to JK since, so I decided to reimplement it from scratch. The motivation and ideas are the same, however, so I will copy-paste the description here:. This PR is the second in a series of planned PRs designed to remove density screening from the TwoBodyAOInt object and into the JK object, with PR https://github.com/psi4/psi4/pull/2547 being the first such PR. Having density screening available in TwoBodyAOInt runs the risk of applying density screening to algorithms where density screening doesn't make sense. Thus, it would be a good idea to move the logic of density screening to where it is more correctly applied, i.e., the JK object. The primary purposes of this PR are twofold:. First, this PR introduce the shell_significant() framework to the JK class. The shell_significant() framework starts with a shell_significant() virtual function that exists in the base JK class. The shell_significant() function can then be redefined specifically for different JK derived classes as needed. The existence of shell_significant() provides a unified framework for performing screening for any JK method, and it also provides the method by which density screening can be added directly to the relevant JK classes.; Second, this PR uses the shell_significant() framework to reimplement screening for certain JK methods. Most significantly, as implied in the first point, the biggest change in this regard was the removal of shell_significant_density() from TwoBodyAOInt into the domain and its reimplementation into the JK shell_significant() definitions. With this change, density screening is now the domain of individual JK classes rather than the TwoBodyAOInt class, which was one of the primary goals of this overall refactor PR set in the first place. Additionally, another method that was subject to slight changes from the shell_significant() framework was",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3098:693,log,logic,693,https://psicode.org,https://github.com/psi4/psi4/pull/3098,1,['log'],['logic']
Testability,"## Description. This PR is part two of a mini-project regarding the two DFJK algorithms present in Psi4. The first PR (https://github.com/psi4/psi4/pull/2848) applied to MemDFJK, and the second PR (this one) applies to DiskDFJK. The goal of this PR project is to add an expert keyword to allow user control over which subalgorithm is used by either MemDFJK or DiskDFJK. See, MemDFJK and DiskDFJK, despite their name, each have separate ""subalgorithms"" optimized to be run either in-core or out-of-core. While MemDFJK and DiskDFJK can be independently selected with `SCF_TYPE`, their subalgorithms cannot be; subalgorithm selection was previously controlled exclusively through memory allocated to Psi4. The mini-project this PR is part of, is meant to rectify that issue. In the previous PR of this project, the `SCF_SUBTYPE` keyword was introduced, an expert option allowing for forced execution of a given subalgorithm. The default option, `AUTO`, has the code select the subalgorithm automatically, as before. `INCORE` forces MemDFJK to use the in-core subalgorithm, and throws an exception if not enough memory is allocated to Psi4 to do so. `OUT_OF_CORE` forces MemDFJK to use the out-of-core subalgorithm, even if enough memory is allocated to Psi4 to use the in-core subalgorithm. This current PR takes the `SCF_SUBTYPE` keyword, previously applied to MemDFJK, and applies it to the DiskDFJK algorithm, with the same effects. ## User API & Changelog headlines; - N/A. ## Dev notes & details; - [X] Implements functionality of the SCF_SUBTYPE keyword to the DiskDFJK class (i.e., the DISK_DF SCF_TYPE). ## Questions; - N/A. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2924:1650,Test,Tests,1650,https://psicode.org,https://github.com/psi4/psi4/pull/2924,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description. This is No. 7 of the DDD series, #1351. ## Todos; - [x] test both old `run_json` and new `run_qcschema` modes and access patterns in the basic addons testing.; - [x] I don't remember in what order it came about, but `driver_util.py` had a function `negotiate_derivative_type` that was a simpler version (returned `analytic` and `1_0` for analytic and findif gradient, respectively) of the trio of functions in ddd (returns `(1, 1)` and `(1, 0)` for analytic and findif gradient, respectively) and was tested in `test_dertype.py` and was never run. This unused fn and its testing was removed and replaced by the ddd version.; - [x] the new `negotiate_derivative_type` function probes managed methods earlier than before, so it happens that the exact error names (not the text) expected by stdsuite change.; - [x] the new `negotiate_derivative_type` function is called early, so it now handles the methodname typo helper (""Did you mean?"") that FAE added. The independent `_method_exists()` fn removed.; - [x] the former function `_set_convergence_criterion` where you passed in 5 integers for the different E/D_CONVERGENCE values has been rewritten as `negotiate_convergence_criterion` where you pass in a tuple of the case (e.g., `(2, 1)` is Hessian by findif of gradients). In actual `driver.py`, the function calls have been switched out. The values set are the same, but the arguments like `(1, 0)` aren't necessarily appropriate in this non-ddd driver code routing.; - [x] the former function `_find_derivative_type` has been replaced by three functions headed up by `negotiate_derivative_type`. For both, the goal is to take a method name, the target derivative, and any user modifications and return the appropriate analytic or findif strategy or produce a helpful error. sounds simple, but managed methods and cbs specs complicate things. In ddd, this function is called early, not piecemeal throughout the driver, so more probing has been consolidated into the new function. In ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2536:72,test,test,72,https://psicode.org,https://github.com/psi4/psi4/pull/2536,4,['test'],"['test', 'tested', 'testing']"
Testability,## Description. This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix `psi::CharacterTable` assignment operator to copy `bits_`. . ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1179:251,Test,Tests,251,https://psicode.org,https://github.com/psi4/psi4/pull/1179,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description. This is part of Psi4 porting to Windows (#933). `psithon2` test fails on Windows:; ```; 2018-12-05T15:52:01.1057243Z 8/9 Test #307: psithon2 .........................***Failed 24.86 sec; 2018-12-05T15:52:01.1057730Z 	Built-in energy...................................................PASSED; 2018-12-05T15:52:01.1059103Z 	PSIPATH database..................................................PASSED; 2018-12-05T15:52:01.1059291Z 	Built-in database.................................................PASSED; 2018-12-05T15:52:01.1059763Z 	PSIPATH plugin....................................................PASSED; 2018-12-05T15:52:01.1059834Z ; 2018-12-05T15:52:01.1060236Z QcdbException BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for key BASIS among:; 2018-12-05T15:52:01.1060376Z Shell Entries: ['O']; 2018-12-05T15:52:01.1060874Z Basis Sets: [('MYSTO3G', 'MYSTO3G', None)]; 2018-12-05T15:52:01.1061043Z File Path: D:\a\1\b\build\tests\psithon2, D:\a\1\b\build\tests\psithon2\psiaux1:psiaux2, D:\a\1\b\build\stage\share\psi4\basis; 2018-12-05T15:52:01.1061446Z Input Blocks: ; 2018-12-05T15:52:01.1061509Z ; 2018-12-05T15:52:01.1061540Z ; 2018-12-05T15:52:01.1061649Z ; 2018-12-05T15:52:01.1061699Z Traceback (most recent call last):; 2018-12-05T15:52:01.1062102Z File ""D:/a/1/b/build/stage/bin/psi4"", line 272, in <module>; 2018-12-05T15:52:01.1062185Z exec(content); 2018-12-05T15:52:01.1062629Z File ""<string>"", line 68, in <module>; 2018-12-05T15:52:01.1062767Z File ""D:\a\1\b\build\stage\lib\psi4\driver\driver.py"", line 545, in energy; 2018-12-05T15:52:01.1063166Z wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); 2018-12-05T15:52:01.1063257Z File ""D:\a\1\b\build\stage\lib\psi4\driver\procrouting\proc.py"", line 2022, in run_scf; 2018-12-05T15:52:01.1063640Z scf_wfn = scf_helper(name, post_scf=False, **kwargs); 2018-12-05T15:52:01.1063739Z File ""D:\a\1\b\build\stage\lib\psi4\driver\procrouting\proc.py"", line 1281, in sc",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1410:75,test,test,75,https://psicode.org,https://github.com/psi4/psi4/pull/1410,2,"['Test', 'test']","['Test', 'test']"
Testability,"## Description. This is the second PR of the M-D series, this time replacing the OS code for arbitrary-order multipole integrals.; Some notable points:. - I added a new routine `ao_multipoles` to the Py API to conveniently call those integrals.; - There's also a new `multipole_grad` which computes first derivatives of arbitrary-order multipole integrals (new feature!).; - The dipole derivative code in `DipoleInt` (which uses l2 for dipole ints, used OS86 for derivs) is removed.; - To keep the API stable, the `dipole_grad` is hard-wired to `multipole_grad` with the appropriate arguments.; - ➡️ more features, less code 💡. ## ToDos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Implement arbitrary-order multipole integrals using M-D; - [x] first derivatives; - [x] finite-difference tests; - [x] more equation numbers; - [x] small benchmark against OS86 implementation. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for **SQUASH-merge** (wait for @andysim and @loriab approval)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2496:841,test,tests,841,https://psicode.org,https://github.com/psi4/psi4/pull/2496,5,"['Test', 'benchmark', 'test']","['Tests', 'benchmark', 'tests']"
Testability,"## Description. Update links to Grimme's DFT-D3. Note that the link to the parameter source may not be correct - those with knowledge of the source, please chime in. Fixes #1084. ## Questions; - [ ] Is the link to the parameter source correct?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1085:265,Test,Tests,265,https://psicode.org,https://github.com/psi4/psi4/pull/1085,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description. With prompting and help from @SebWouters this PR updates ChemPS2 to v1.7 for DMRG-CASPT2 computations.; ## Todos; - [x] Psi4 now uses ChemPS2 tag 1.7; - [x] ChemPS2 no longer requires GSL, nuked that from CMake; - [x] Fiddled with the CMake a bit to clear up BLAS linking issues; - [x] Names have moved from `dmrgci` to `dmrg-ci` following discussion with @loriab @SebWouters ; - [x] Updated `src/dmrg` to latest version from ChemPS2; - [x] Added CASPT2 test case; - [x] Closes #263, #266, and #384 ; - [ ] Issue #150 is still open, for 1.0 we really need to clean this up. I think the two largest issues are the documentation and the keyword review. I think @loriab and @dgasmith will have to handle the rest.; - [ ] We have been experiencing some linking issues. While this works on my linux box and OS X laptop a few others testing this compilation would be beneficial. May close #264.; ## Questions; - [x] Keywords have moved around to align to the ""plugin"" version of ChemPS2 with a few minor alterations. Please check these out @loriab @kannon92 @SebWouters ; - [x] Do we want to add additional test cases?; ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/388:470,test,test,470,https://psicode.org,https://github.com/psi4/psi4/pull/388,3,['test'],"['test', 'testing']"
Testability,## Description. assemble_dipder_from_dipole function to compute dipole derivatives using finite differences.; Modified one test to not forgive IR intensities when dertype is 1.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1738:123,test,test,123,https://psicode.org,https://github.com/psi4/psi4/pull/1738,1,['test'],['test']
Testability,## Description. assemble_dipder_from_dipole function to compute dipole derivatives using finite differences.; Modified test to not forgive IR intensities when dertype is 1.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1740:119,test,test,119,https://psicode.org,https://github.com/psi4/psi4/pull/1740,1,['test'],['test']
Testability,## Description. follows from #2653 . NOT FOR REVIEW. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2662:237,Test,Tests,237,https://psicode.org,https://github.com/psi4/psi4/pull/2662,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description. mostly, polishes off CheMPS2; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] update dmrg keywords. add docs. fixes #414, #150; - [x] updates some tests for documentation; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/427:204,test,tests,204,https://psicode.org,https://github.com/psi4/psi4/pull/427,1,['test'],['tests']
Testability,"## Description. smooth user interactions with mp2 & cepa so that minimal inputs have a chance of working (esp. w/grad) and the same call to different modules returns the same answer.; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] `cepa(0)`/`ocepa(0)` in occ/dfocc called more specifically as `lccd`/`olccd`. psivars adjusted accordingly.; - [x] meanwhile, `cepa(0)` in fnocc called more specifically as `lccsd` (alias `cepa(0)`) or w/o singles as `lccd`. psivars and managed methods adjusted accordingly.; - [x] fixed defaulting of grad to findif of energies for managed methods. it had broken b/c just tested availability of analytic grad on `procedures['gradient']` and for managed methods that doesn't tell the full story. now probe the managed method in proc.py to see if gradient available.; - [x] alter default algorithms for scf for fnocc and dfocc. we've always said that the scf default for df post-HF methods was df, but only actually did algorithm switching for dfmp2 and sapt. now we really do it. in particular, so long as you don't set scf_type to the contrary, this will make a conv mp2 gradient run conv+conv and a df mp2 gradient run df+df.; ## Minor Todos; - [x] test cases build and run all the plugin templates; - [x] let ppl know how to access rohf mp3 & mp4 for toy problems; ## Questions; - [x] @edeprince3 should look over my changes to fnocc procedures in proc.py to make sure the scf algorithm flipping is sensible.; - [x] ditto, @bozkaya for occ/dfocc; ## Status; - [x] Ready to go, after @edeprince3 and @bozkaya sign off on it.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/306:646,test,tested,646,https://psicode.org,https://github.com/psi4/psi4/pull/306,2,['test'],"['test', 'tested']"
Testability,"## Description; #1532 identified problem with memory leaks. Using cppcheck, I've found a number of possible candidates. My idea is to slowly work through all of them and replace all alloc/dealloc pairs with an RAII solution. Feel free to chime in if you disagree with the and design decisions. I'll do one object at a time so allow easy reverting, so this will eventually need to be squashed. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Fix leaks identified in #1532 by avoiding explicit allocation and deallocation. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1534:591,Test,Tests,591,https://psicode.org,https://github.com/psi4/psi4/pull/1534,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; #1550 switched the CPHF solver for analytic Hessians from libfock to the wfn one. That switched the CPHF from 1e-6 to 1e-4 and the HOOH_TS-analytic test case in test_vibanalysis took exception. This PR sends the relevant `CPHF` module (aka libfock) options to the Hessian CPHF call. So returns the default to 6. Thanks to @andysim for difference-hunting. ## Questions; - [ ] user set-able via `set solver_convergence 5`. but `set cphf solver_convergence 5` has no effect b/c ""SCF"" module is the active options set at this time. I think that calls for a greater overhaul than this fix. ## Checklist; - [x] full tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1609:164,test,test,164,https://psicode.org,https://github.com/psi4/psi4/pull/1609,2,['test'],"['test', 'tests']"
Testability,"## Description; #2476 and #2594 indicate a major problem in Psi's SCF code: the simplistic formula `nalphapi = doccpi + soccpi` and `nbetapi = doccpi` is incapable of describing references where there are more beta than alpha orbitals of a given irrep. This occurs in MOM (where we instead use ugly hacks) and in UHF (where we crash). Furthermore, storing all of these irrep quantities is redundant. This PR remedies the situation by only storing `nalphapi` and `nbetapi`. `doccpi` and `soccpi` can be computed from these when needed. The Py-side API is unchanged `doccpi(), soccpi()`, while the C-side API changes from `doccpi_, soccpi_` to `doccpi(), soccpi()`. While we are doing some extra work to compute docc and socc every time they're needed, the computational cost is negligible in comparison to Fock diagonalizations, integral transforms, and tensor contractions. . To prevent scope creep, this PR aims solely to change the wavefunction. **This is a major undertaking and should not be done lightly.** A subsequent PR will fix the linked issues (if not fixed by this PR) and add them as test cases once the fix is confirmed. Obligatory @susilehtola ping. ## Todos; - [x] DOCC and SOCC are now computed rather than stored; - [x] MOM simplified; - [x] Lots of docc/socc replaced with alphapi/betapi where more appropriate; - [x] More auto; - [x] More dimension, fewer raw arrays . ## Checklist; - [x] Passes ctest and pytest (all, except addons). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2619:1097,test,test,1097,https://psicode.org,https://github.com/psi4/psi4/pull/2619,1,['test'],['test']
Testability,"## Description; #3004 seems to have been a false alarm (closes #3004), but since the code made a couple people suspicious, may as well add some notes. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3005:171,Test,Tests,171,https://psicode.org,https://github.com/psi4/psi4/pull/3005,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; **What?** This PR creates the `IrrepedVector` class template. The `Vector` and `IntVector` classes now inherit from this, adding on methods that only make sense for that particular template instance. **Why?** During a refactor of the MOM code, I had to use `Vector` and `IntVector` features heavily and found this synchronization of the classes necessary to keep my sanity. **Who cares?** Obligatory pings to @hokru (who may want to create `FloatVector` for faster `dfocc` operations) and @lothian (who may want to create `ComplexVector` for magnetic spectroscopies). No reviews required. **How do I review this?** The changes to `export_mints.cc`, `vector.h`, `vector.cc`, `intvector.cc`, and `test_vector.py` are the heart of this PR. The rest are either compatibility changes or general code cleanup. Be warned that `iota` and the `sort` functions are needed for my upcoming MOM changes and are currently unused, and I've changed some functions to not use pointers. ## Todos; - [x] Created `IrrepedVector<T>`; - [x] `Vector` and `IntVector` inherit from `IrrepedVector<T>`; - [x] `Vector` and `IntVector` now have identical code logic; - [x] `iota` and `sort` methods are added; - [x] `IntVector` now has more functionality; - [x] Added bounds checking to several `IrrepedVector<T>` methods.; - [x] Increased test coverage of `Vector`; - [x] Added test coverage of `IntVector`; - [x] Silenced compiler warning about missing override; - [x] Removed several pointers from parameter types; - [x] Removed several pointers from return types; - [x] Changed convention from ""irreped"" to ""irrepped"". ## Checklist; - [x] Full ctest passed (before some trivial edits); - [x] `test_vector.py` passed . ## Status; - [x] Ready for review; - [x] Ready for merge **SQUASH**; Jet approval **required** before merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2628:1148,log,logic,1148,https://psicode.org,https://github.com/psi4/psi4/pull/2628,3,"['log', 'test']","['logic', 'test']"
Testability,"## Description; **work in progress**; Enables basic linear algebra in single-precision (FP32).; For now rather a rough proof-of-principle implementation for perturbative triples correction in single-precision. Any help is welcome and perhaps even needed for clean C++ and/or smart implementations. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Most of BLAS in single-precision; - [x] SharedTensor analogues for FP32 in `dfocc` module; - [x] basic version of (T)-correction in FP32 for `dfocc` module working. (50% faster on my workstation over FP64, error below 1e-11 for benzene-methane complex at VTZ); - [ ] tidy up; - [ ] template for double-to-float conversion of SharedTensor (currently manual loops); - [ ] documentation; - [ ] ... ## Questions/Notes; - general comments and directions welcome! Also on general conventions. . ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1261:905,Test,Tests,905,https://psicode.org,https://github.com/psi4/psi4/pull/1261,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; - Update to adcc 0.15.0 and adapt interface (plural forms of keys have been deprecated).; - Add PE-ADC test as adcc now automatically detects PE ground states and includes appropriate corrections. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1914:119,test,test,119,https://psicode.org,https://github.com/psi4/psi4/pull/1914,4,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; - [x] Package build on Windows was getting the error below. From https://numpy.org/doc/stable/user/basics.types.html, I think this'll fix it. (Also probing whether an Azure error in another PR is repeatable.). ```; Tests failed for psi4-1.8a1.dev6+758d3af-py38_0.tar.bz2 - moving package to C:\tools\miniconda3\conda-bld\broken; WARNING:conda_build.build:Tests failed for psi4-1.8a1.dev6+758d3af-py38_0.tar.bz2 - moving package to C:\tools\miniconda3\conda-bld\broken; E File ""%PREFIX%\lib\site-packages\psi4\driver\qcdb\bfs.py"", line 80, in BFS. E radii = _get_covalent_radii(elem). E File ""%PREFIX%\lib\site-packages\psi4\driver\qcdb\bfs.py"", line 155, in _get_covalent_radii. E covrad = np.fromiter((covalent_radii_lookup[caps[at]] for at in range(nat)), dtype=np.float, count=nat). E File ""%PREFIX%\lib\site-packages\numpy\__init__.py"", line 284, in __getattr__. E raise AttributeError(""module {!r} has no attribute "". E . E AttributeError: module 'numpy' has no attribute 'float'. E . E Printing out the relevant lines from the Psithon --> Python processed input file:. E [10, 33], . E [11, 34, 35], . E [17], . E [18]] . E qmol = qcdb.Molecule.from_string(iceIh, dtype='xyz'). E --> frag, arrs, bmols, bmol = qmol.BFS(seed_atoms=[[3,16], [21]], return_arrays=True, return_molecule=True, return_molecules=True). E compare_integers(frag == ref_fragmentation, 1, 'Q: BFS from qcdb.Molecule') . E compare_arrays(qmol.geometry(np_out=True)[[1, 14, 19]], arrs[0][3], 4, 'Q: geom back from BFS') . E compare_integers(15, bmol.nfragments(), 'Q: nfrag') . E compare_values(qmol.nuclear_repulsion_energy(), bmol.nuclear_repulsion_energy(), 4, 'Q: nre') . E compare_arrays(qmol.geometry(np_out=True)[[2, 13, 20]], bmols[4].geometry(np_out=True), 4, 'Q: frag geom back from BFS') ; ```; - [x] The docs-pr build has been failing on several PRs due to the docs.yaml env not solving. It solves locally for me on conda, but apparently not on the mamba setup we have in the GHA. I've switched tha",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2845:231,Test,Tests,231,https://psicode.org,https://github.com/psi4/psi4/pull/2845,2,['Test'],['Tests']
Testability,"## Description; 99% of the docstrings export_mints.cc are now composed, with appropriate py::arg's. There are a few docstrings remaining, which were left either because I couldn't figure them out or they lacked C++ documentation. Psi4 compiled and psi4 --test finished successfully after these changes.; ## Todos; - [ ] Fill in last remaining docstrings. ## Questions; - [ ] Psi4 does not compile when I supply the MatrixFactory function's py::args, and I could not figure out why. Can someone more knowledgeable take a look at this?. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/761:255,test,test,255,https://psicode.org,https://github.com/psi4/psi4/pull/761,1,['test'],['test']
Testability,## Description; <!-- Adds DirectDFJK Functionality for cases where disk use is too inefficient. -->. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] On-the-fly calculation of DF-ERI tensors for Fock builds; - [x] Works for RHF cases. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2040:313,Test,Tests,313,https://psicode.org,https://github.com/psi4/psi4/pull/2040,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. --> ; Fixes a couple of minor issues for a research project of mine. See todos. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Within the OCC module, updating the opdm to the wavefunction; - [x] Exposed a function to update the num_frozen_uocc global. ## Checklist. - [x] quick tests, occ module tests, standard suite tests. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2072:413,test,tests,413,https://psicode.org,https://github.com/psi4/psi4/pull/2072,3,['test'],['tests']
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. --> @andysim's suggestion worked! Overcomes the bad combination of Intel icpc, c++17 standard, and Libint2 (water energy off by 50 Eh). I've only run smoke tests so far but will fix that tomorrow. *EDIT* I removed some l2 headers among the export_* files that didn't seem to be necessary. And I reordered some l2 headers for consistency with the l2 convenience header. this'll need a little adaptation after #2388 merge, I expect. ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2392:231,test,tests,231,https://psicode.org,https://github.com/psi4/psi4/pull/2392,4,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. --> This switches from detecting the config.cmake file from a cppe library to detecting the python module. It's more realistic about what psi4 actually needs. By chance, this detection worked ok with internal builds or with c-f cppe or with psi4 cppe+pycppe. . `adcc-formaldehyde-pe-adc2` still failing with `catching classes that do not inherit from BaseException is not allowed` on `InvalidReference`. ## Checklist; - [ ] ~Tests added for any new features~; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2391:500,Test,Tests,500,https://psicode.org,https://github.com/psi4/psi4/pull/2391,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] #2775 I guess wasn't up-to-date with master so the combination of it and some intervening changes broke the build. ~Hopefully this fixes it, and the weird L2 error I'm getting locally is nothing.~ An explicit destructor was needed, too. Thanks to https://stackoverflow.com/a/34073221 for guidance.; - [x] Analogous to #2845 for the master docs build should fix that; - [x] A couple old copyrights. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2855:738,Test,Tests,738,https://psicode.org,https://github.com/psi4/psi4/pull/2855,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] CI must have bumped OSX images to 12, so added logic to grab a SDK. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2843:367,log,logic,367,https://psicode.org,https://github.com/psi4/psi4/pull/2843,1,['log'],['logic']
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Some setups were using a BLAS that doesn't support the extension AXPBY, so #2887 caused runtime can't-find-symbol errors. Most notably, this occurred for Mac users linking to Accelerate. This bypasses the trouble by rerouting to dscal+daxpy; - [x] clarifies who's getting scaled in the export docs.; - Note that the CI error was due to ongoing changes in QCArchive `next` branch. I've pinned the dep back a release so that psi4's interface to it can be fixed later. ## Questions; - [ ] Can someone confirm this works with the Accelerate setup? Below is a quick test.; ```; import psi4; import numpy as np. vecX = np.array([1., 1., 1.]); pvecX = psi4.core.Vector.from_array(vecX); print(pvecX.np) # 1. vecY = np.array([5., 5., 5.]); pvecY = psi4.core.Vector.from_array(vecY); print(pvecY.np) # 5. pvecX2 = pvecX.clone(); pvecX2.axpy(2.0, pvecY); print(pvecX2.np) # 11. pvecX2 = pvecX.clone(); pvecX2.axpby(2.0, 1.0, pvecY); print(pvecX2.np) # 11. pvecX2 = pvecX.clone(); pvecX2.axpby(2.0, 3.0, pvecY); print(pvecX2.np) # 13; ```. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2895:881,test,test,881,https://psicode.org,https://github.com/psi4/psi4/pull/2895,4,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] cmake to 3.19 in preparation for einsums; - [x] Einsums 0.5 to fix CI; - [x] bump mem to fix error in fsapt1 test. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3162:429,test,test,429,https://psicode.org,https://github.com/psi4/psi4/pull/3162,4,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] fix two cookbook tests. they were already set old and new ways, so getter change not needed. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2819:337,test,tests,337,https://psicode.org,https://github.com/psi4/psi4/pull/2819,1,['test'],['tests']
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] regenerate samples/. ## Checklist; - [ ] ~Tests added for any new features~; - [ ] ~[All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests)~. ## Status; - [x] Ready for review (autogen, so rubber stamp); - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2957:362,Test,Tests,362,https://psicode.org,https://github.com/psi4/psi4/pull/2957,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Dev notes & details; This seems a silly PR since there's no net change to the physical constants, but it came up as a nice self-contained part of a DDD solution I'm working on. Plus, it closes #1795 .; - [x] instead of code importing physical constants from qcel everywhere, import it once, ensure that it's codata 2014 to match the c-side, and then everywhere in the driver that needs constants grabs this one instance. qcdb, too. for background, qcel has 2014 and 2018 with default 2014. so no net change.; - [x] removed some out-of-date import trials (csx and pasture) and co-opted the `dependency_check.py` for (1) the above physconst purpose and (2) to define some print formats that were cluttering `driver/__init__.py`, then renamed it `constants.py`. `extras.py` might have been better, but that gets confused with `psi4/extras.py`.; - [x] directed all the `pkg_resources` to qcel that has the same call https://github.com/MolSSI/QCElemental/blob/master/qcelemental/util/importing.py#L110-L116 . `pkg_resources` is deprecated, so this'll let us upgrade it consistently from one place someday. ## Checklist; - [ ] ~Tests added for any new features~; - [x] passes quicktests. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3027:1205,Test,Tests,1205,https://psicode.org,https://github.com/psi4/psi4/pull/3027,1,['Test'],['Tests']
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; - [x] Psi doesn't use ambit directly so never has required a version. Now that it's had its python interface updated (kill the boost!), most uses in the presence of Psi4 will need the new version, so let's not let lingering old versions pass.; - [x] The ecosystem GHA seems to have settled in nicely to testing addons, so let's remove that responsibility from the Azure CI lanes.; - leaving dftd3 and gcp since they're fast, easy, and important; - now addons tested with less compiler variety on Linux, but I don't think that's too big a problem. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2546:393,test,testing,393,https://psicode.org,https://github.com/psi4/psi4/pull/2546,2,['test'],"['tested', 'testing']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; - [x] Something about how CMake detects NumPy during FindPython is different between NumPy 1.22 and 1.23; only on Windows. No apparent changes in CMake FindPython. No apparent changes in conda NumPy recipe. All header files in the same places in a Windows c-f 1.22 and 1.23 NumPy distribution. Linux builds fine with a c-f NumPy 1.23. I don't know what's the real change, so we'll tell CMake where to look in the Azure recipe and pass the hint on to psi4/CM for the second `find_package(Python ...)`.; - [x] My other theory for solving the Azure problem was that my patched `anaconda-client` was behind the times. That wasn't the problem, but it's updated to v1.10.0 anyways.; - [x] Pinned qcelemental and qcengine in Windows recipe; * There's upcoming changes to those packages such that all of psi4 should be pinned and then advanced with the changes. This does that for the Windows recipe.; * fixes #2614 where Windows conda package had _no_ qcel pinning, so depending on channel order, sometimes took a really old qcel and pydantic. after this, channel order shouldn't matter. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2624:1191,Test,Tests,1191,https://psicode.org,https://github.com/psi4/psi4/pull/2624,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2255:264,Test,Tests,264,https://psicode.org,https://github.com/psi4/psi4/pull/2255,9,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2301:264,Test,Tests,264,https://psicode.org,https://github.com/psi4/psi4/pull/2301,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] #2210 revealed that an early test case had fallen prey to `phi_ao`'s Cartesian-only usefulness; - [x] mild enhancement to `diff_gbs` utility script so it can compare out-of-order basis sets; - [x] bump a few dep from-source-build versions. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2262:216,test,test,216,https://psicode.org,https://github.com/psi4/psi4/pull/2262,1,['test'],['test']
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Collect enough extra docstrings and tweak enough references to functions so that all the links in the docs resolve.; - [x] Ended up needing mild to moderate docs renovation through whole QCA stack; - [x] Now can turn on Sphinx warnings-to-errors and nitpicky so that docs remain healthy; - [x] Added new doc extension dependency, https://github.com/mansenfranzen/autodoc_pydantic, so that Pydantic models (as introduced in #2575) now get superior, rather than inferior, autodoc compared to classes.; - [x] Add in a few more `__all__`s to driver files. ## Checklist; - ~Tests added for any new features~; - [x] Full tests run. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2597:756,Test,Tests,756,https://psicode.org,https://github.com/psi4/psi4/pull/2597,2,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Libxc 5.1.2 required. actually 5.1.0 is fine with Psi4, but 5.1.1 _isn't_ for at least OP fctls like BOP; - thanks to @susilehtola for fixing up libxc so we could have a clean test suite again; - [x] lgtm, which only has old cmake available, can't use `Python::Module`, so providing workaround.; - [x] linux and mac conda packages are ready; - [x] win conda package should be published shortly. ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) full test suite run with 5.1.2. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2113:363,test,test,363,https://psicode.org,https://github.com/psi4/psi4/pull/2113,5,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Nowadays, ctest (quick) followed by pytest (quick) runs a lot of duplicate tests (unless the latter uses ""quick and api""). Let's not do that. This switches Azure to ctest(smoke) followed by pytest (quick).; - before: ; - W: 1h30m; - L: 41-57m; - after:; - W: 1h5m; - L: 34-38m; - In working on dfocc, I found some stdsuite updates that hadn't been ported from qcng to psi4 and some general improvements.; - [x] better check expected vs intended modules. (can catch if the default compute module for a method+circs changes.); - [x] `test_*_default` in stdsuite changed meaning slightly. now PASSED means get final method answer correctly and XFAIL means known NYI. formerly, inputs that got the final method answer correctly but were not able to supply some submethod (like same-spin mp2 for ccsd) also got the XFAIL result.; - [x] have a mini ref file so can add reference data w/o waiting for a new qcengine release; - [x] regex and human-directed error messages to simplify and consolidate NYI methods testing. ## Checklist; - [x] Tests added for any new features; - [x] full stdsuite runs. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2632:262,test,tests,262,https://psicode.org,https://github.com/psi4/psi4/pull/2632,3,"['Test', 'test']","['Tests', 'testing', 'tests']"
Testability,## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Put back separate section for API/RN headlines in PR template; - [x] Looks like the dlpno fix in #2707 slightly broke a test. Zach has confirmed this is the reasonable fix. Only showed up in quad-zeta cbs step. ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2718:307,test,test,307,https://psicode.org,https://github.com/psi4/psi4/pull/2718,4,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] bumped libxc url to 5.1.4; - [x] fixed nbody bug where global qcvars != wfn qcvars for gradient nbody runs; - [x] fixed nbody bug identified by @AlexHeide and @psi-rking that [I introduced recently](https://github.com/psi4/psi4/pull/2180/files#diff-6c949ad06bfcc0f8d646a54c79a427c47e008cbdae82ca148b0f0af1e1319a63L223-R220) and led to CURRENT ENERGY being disp, not total for nbody runs involving dftd3; - [x] added module to provenance in qcschema return. ok place? it's sort of like ran function, also in prov.; - [x] fixed `psi4 --qcschema --messy` so that files remain, as ordered; - [x] test qcvars setting in nbody a bit more thoroughly and add a nbody+dftd3 test case. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2191:779,test,test,779,https://psicode.org,https://github.com/psi4/psi4/pull/2191,5,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] cast in DFTensor memory estimation so that one can perform a fno-df-cc on 6 heavy atoms with aqz in 31 GiB of memory, not 17179869183.261 GiB . (How did this bug live this long?) Improve printing to match DFHelper; - [x] start converting existing mem printing to GiB from mega. afaict, the fnocc values were already mebibytes, though labeled MB; - change in printing for identical calc below:. ```; < The DF Tensor (Qso) construction requires 31.261 GiB of memory. ; ---; > DFTensor Memory: Qso construction needs 31.261 GiB; user supplied 35.390 GiB. ; ```; ```; < Total memory available: 38146.97 mb; < CCSD memory requirements: 35113.77 mb; < 3-index integrals: 10081.38 mb; < CCSD intermediates: 25032.39 mb; < (T) algorithm: 9055.34 mb (low-memory); ---; > Total memory available: 37.253 [GiB]; > CCSD memory requirements: 34.291 [GiB]; > 3-index integrals: 9.845 [GiB]; > CCSD intermediates: 24.446 [GiB]; > (T) algorithm: 8.843 [GiB] (low-memory); ```. ## Checklist; - ~Tests added for any new features~; - ~[All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests)~. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2673:1164,Test,Tests,1164,https://psicode.org,https://github.com/psi4/psi4/pull/2673,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] switch gcp interface to QCEngine; - [x] add dftd4 interface calling QCEngine; - [x] update types return for disp. engine can handle ndarray, so leave arrays as np and shaped rather than flat lists; - [x] more tests -- psiapi, parameters extend func; - [x] add docs; - [x] note min qcng version, prob. v0.19; - [x] this passes cleanly locally but that's with custom engine and dftd4, so several PRs ahead of this one; - [x] allow doi as citations for dft; - [x] note that for `Mol.run_dftd4`, func overrides parameters in keeping with dftd4 API behavior, whereas in dftd3, parameters extend or override func. ## Questions; - [x] @jeffschriber should fisapt grab 2-body disp analysis or total disp analysis; - [x] a couple of the interface updates should be in v1.4 but d4 itself can be in v1.5. so this can get split after upstream settles down. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Aug 2021 Notes; - [x] rebased. the only thing that's left of the original PR checklist is dftd4 itself. gcp and dftd3 updates were pulled in in #2180.; - [x] note that it's not the dftd4 exe that this (that is, qcng) needs; rather, it's the dftd4 pymod that's needed.; - [x] one _can_ use the c-f `dftd4-python` conda package if you know how to set up your env to install both it and psi4 deps. But for linux only, I've prepared a `dftd4` conda package (not in final build form) off `-c psi4/label/dev`. ## Status; - [x] Ready for review; - [x] Ready for merge. EDIT: closes #1710",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2142:396,test,tests,396,https://psicode.org,https://github.com/psi4/psi4/pull/2142,4,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## User API & Changelog headlines. ## Dev notes & details; - [x] I was seeing 17m to solve the env last week, so let's switch to mamba solve.; - [x] Have to turn off analytic Hessian testing for windows since no ints.; - [x] Looks like it was testing twice -- one exe and one lib. Not really necessary.; - [x] Turn c-b back on. It was only off so I could get a green check on the release last week. ## Checklist; - ~Tests added for any new features~; - ~[All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests)~. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2961:263,test,testing,263,https://psicode.org,https://github.com/psi4/psi4/pull/2961,5,"['Test', 'test']","['Tests', 'testing', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## User API & Changelog headlines. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Fixes the wfn plugin; - [x] Adds a libecpint test to smoke so the c-f build can track it. ## Checklist; - [x] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2988:400,test,test,400,https://psicode.org,https://github.com/psi4/psi4/pull/2988,4,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## User API & Changelog headlines. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] It turns out one can build a psi4 with Fortran extensions (detected, not compiled) w/o a Fortran compiler by letting the CXX compiler handle the linking. This is very useful on Windows where we want a `clang-cl` C/CXX compiler, but the only cohesive Fortran-including stack is the ming (gcc/g++/gfortran) one. So this adds an option `psi4_SKIP_ENABLE_Fortran` to _not_ enable Fortran when the code otherwise would. It doesn't check that the circumstances are suitable (that is, all detected, none to-be-compiled). Works great on Windows (that's how the conda pkg has dkh); haven't tried it on Linux.; - [x] Increasingly, where the <project>Config.cmake files get installed to is configurable, esp. as there's no one place cmake looks for linux/mac/win. So adding that option `psi4_INSTALL_CMAKEDIR`. You won't see a change unless you were customizing `CMAKE_INSTALL_DATADIR`.; - [x] also fix a couple install locations that were obvious for windows install.; - [x] stop testing the extra cli qcf tests for qcf master since those are run on mac, and it hangs. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2946:1325,test,testing,1325,https://psicode.org,https://github.com/psi4/psi4/pull/2946,5,"['Test', 'test']","['Tests', 'testing', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## User API & Changelog headlines. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Update binder environment and regenerate image.; - [x] Fix obscure bug where `psi4 --test quick_not_d2ints` couldn't be run serial and needed `-n2`.; - [x] Update some headmatter badges. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2966:440,test,test,440,https://psicode.org,https://github.com/psi4/psi4/pull/2966,1,['test'],['test']
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## User API & Changelog headlines. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] on c-f Linux and Mac, iomp5=omp, so need the threading ldd test altered to build psi4-dev pkg. also update some printing to f-strings; - [x] closes #3006 by adding a header. ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3007:414,test,test,414,https://psicode.org,https://github.com/psi4/psi4/pull/3007,4,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] fix bug where final findif and nbody quantities are computed and probe-able but not printed or logged.; - [x] update CI for c-f based; - [x] add docs warnings about out-of-dateness for build; - [x] work around windows console not liking strikethrough; - [x] psi4.addons() isn't the definitive word on ecosys availability -- testing.using is -- but it's simpler. This updates the Grimme addons to detect the favored distributions. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2959:582,log,logged,582,https://psicode.org,https://github.com/psi4/psi4/pull/2959,5,"['Test', 'log', 'test']","['Tests', 'logged', 'testing', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] one test failed in full tests. I can't check it easily, but I think this is the fix after #2885 ; - [ ] Feature2. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2908:491,test,test,491,https://psicode.org,https://github.com/psi4/psi4/pull/2908,5,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2960:588,Test,Tests,588,https://psicode.org,https://github.com/psi4/psi4/pull/2960,24,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] `samples/` changes are autogenerated -- don't read them; - [x] update docs env to use psi4-path-advisor; - [x] the old versions of `variable`/`set_variable` fns on core and wfn have been warning-and-forwarding since v1.4 . we had a debugging case where that forward was the problem, so it's time to actually disable them. they'll still give upgrade advice but won't run; - [x] allow running a a GRID_ESP or GRID_FIELD property through qcschema. need to pass in grid.dat contents through `atin.extras[""extra_infiles""] = {""grid.dat"": <contents>}` and be sure to `atin.protocols.native_files = ""all""`, then one can retrieve through `atres.native_files[""grid_esp.dat""]` or `""grid_field.dat""` closes #2307 . ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3095:1265,Test,Tests,1265,https://psicode.org,https://github.com/psi4/psi4/pull/3095,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Allow the use of upstream master for Libint2. The L2 build that v1.8 required also still works. ## Dev notes & details; - [x] Very recent L2 upstream master (after [10ca429217977bc2baac78fdaf3ac8d4f8aa05d9](https://github.com/evaleev/libint/commit/10ca429217977bc2baac78fdaf3ac8d4f8aa05d9) on 24 Nov) has everything Psi4 needs to run, namely Windows compatibility and runtime solid harmonic order (sho) switching. 🎉 ; - [x] However, for *this* L2 changeover, there's no particular reason to demand users switch from the L2 (loriab branch) you've been using since 8 May & v1.8. The runtime internals are all the same.; - [x] So the goal of this PR is to make Psi4 compatible with both L2 branches: May 2023 loriab and Nov 2023 upstream. The differences are:; - [x] there's a different components scheme, so max_am_eri=5 energy is represented as `eri_c4_5_d0` for May but `None` (if not patched) or `eri_hhhh_d0` (patched) for Nov. This PR makes sure psi4 can process both schemes for outfile printout and to redirect to findif if Hessian ints aren't available.; - [x] `find_package(Libint2 COMPONENTS eri_... cxx_ho ss.)` on May properly checks components but for Nov it's not picky. Only thing to do is be aware.; - [x] Note that upstream master has Jonathon's erfc nuclear fix, so a time is coming soon when your May 2023 L2 branches will have to be retired. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3047:1664,Test,Tests,1664,https://psicode.org,https://github.com/psi4/psi4/pull/3047,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] If you call `psi4.set_output_file()` (note that this is the usual fancy one, not the low-level `psi4.core.set_output_file()`), that file will have a psi4 header so suitable for cclib parsing. closes #2893; - [x] Sometimes you don't want psi4 managing the logging. Added a `inherit_loglevel` to exe and set_output_file so that psi4 doesn't tamper with loglevel. @bennybp request. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] we always had `set_output_file` and `print_header` separate, but I'm guessing that that was originally b/c former in C++ and latter in Py. Now that we have the former in python to set up logging, too, it's reasonable to combine them, I think. Note that in exe, we do need to set up threads & mem first so that header stats are as correct as possible.; - [x] I set it up so that the header prints whenever a new file is opened. seemed reasonable. had to rewire core.cc calls to take notice of ""stdout"". Any problem with that?; - [x] `-o stdout` now gets a logging file `stdout.log` bug? feature?; - [x] a plain `import psi4; psi4.energy()` is still going to print to screen w/o header. `import psi4; set_output_file(""asdf""); psi4.energy()` newly has a header. DDD calcs still have repetitive header, but it's no worse that before. ## Questions; - [x] @AlexHeide, does removing those two `root` lines in `psi4.__init__.py` mess up your optking logging?. ## Checklist; - [ ] ~Tests added for any new features~; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2932:508,log,logging,508,https://psicode.org,https://github.com/psi4/psi4/pull/2932,2,['log'],"['logging', 'loglevel']"
Testability,## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Libxc 5.2.3 (latest in the 5 series) has had full tests run; - [x] fix qcng to 0.25.0 for the sake of fsaptd-terms before #2791 fixes it again. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2815:303,test,tests,303,https://psicode.org,https://github.com/psi4/psi4/pull/2815,1,['test'],['tests']
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Of the three exchange calculations for non-decomposed FISAPT, skip the DCBS. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3133:381,Test,Tests,381,https://psicode.org,https://github.com/psi4/psi4/pull/3133,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] PCMSolver now works with Windows. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] This note in Py docs was why pcmsolver through psiapi wasn't working on Windows https://docs.python.org/3/library/tempfile.html#tempfile.NamedTemporaryFile . ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2972:706,Test,Tests,706,https://psicode.org,https://github.com/psi4/psi4/pull/2972,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] While not recommended to use a `/` character in your molecule labels, if you do, at least now it won't segfault if density fitting is involved. Thanks to @bennybp for the bug report. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Error can be triggered with below. Shows up in `DFHelper::put_tensor()`. ```; import psi4. mymol = psi4.Molecule.from_arrays(geom=[0, 0, 0, 2, 0, 0], elem=[""h"", ""h""], name=""h2/mol""). # segfaults if any DF (that is, following line commented). runs if DF suppressed (following line active); #psi4.set_options({""scf_type"": ""pk"", ""df_basis_guess"": ""false""}). ene = psi4.energy(""b3lyp/cc-pvtz"", molecule=mymol); print(ene); ```. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2984:1120,Test,Tests,1120,https://psicode.org,https://github.com/psi4/psi4/pull/2984,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] `basis_relativistic <name> {...}` now works; - [x] Python 3.11 basically tested. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Windows CI allowed to access new qcel bump 0.25.1 that has broader pint compatibility; - [x] closes #2754 and fixes dft-pruning test. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2764:326,test,tested,326,https://psicode.org,https://github.com/psi4/psi4/pull/2764,2,['test'],"['test', 'tested']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] fix for BrianQC in #3185 as suggested by @wszs. ## CI Fixes; - [x] mac eco: with cmake v3.30.0, FindPython got seemingly unrelated updates, and now it `Could NOT find Python (missing: Python_NumPy_INCLUDE_DIRS NumPy)` as tested with longstanding np v1. I suspect an interaction with pb11 (hasn't greenlit 3.30 yet). so codedeps is restraining cmake to <=3.29; - [x] win eco, Part 1: so after the GHA win image issue (`Unexpected compiler version, expected Clang`) got fixed, we started seeing `error: capturing a structured binding is not yet supported in OpenMP`. That seems to be https://github.com/llvm/llvm-project/pull/80216 where a syntax warning in clang v18 collides with a MSVC header that L2 includes. That warning was shifted in clang v19 to only fire within OMP loops rather than generically, but v19 isn't released and the fix hasn't ported back to v18, so the only sol'n is to use v17, which we're now requesting from conda. Note that the Azure Win is asking for v17 directly from Chocolatey, so that's why it was ok.; - [x] win eco, Part 2: so we have clang v17 from conda and can get past libmints, then we hit `error: use of undeclared identifier 'omp_set_max_active_levels'` in sapt.cc . This is the only use of this in the code, and the error probably has to do with limited omp support by windows. Fortunately, it seems that passing the path to the `intel-openmp`-provided `omp.h` which is in the weird dir `${PREFIX}\opt\compiler\include` rather than letting it find the clang-provided omp.h did the trick. Moreover, at long last the `intel-openmp` package provides the libiomp5md.lib (import library) and libiomp5md.dll (runtime library) _pair_ needed at buildtime rather than just the latter. So we no longer need to link aga",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3186:474,test,tested,474,https://psicode.org,https://github.com/psi4/psi4/pull/3186,1,['test'],['tested']
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] gets rid of old `conda-forge/label/libint_dev` that were littered around the CI files. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] In order to upload the big AM L2 v281, I had to delete some libint pkgs that were used in CI, so this fixes CI; - [x] Update the L2 src tarballs; - [x] Prep for some extra functions that L2 will someday provide; - [x] Do proper float testing on a file; - [x] build einsums (still optional) on linux azure. this needs min gcc10. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3107:814,test,testing,814,https://psicode.org,https://github.com/psi4/psi4/pull/3107,4,"['Test', 'test']","['Tests', 'testing', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is detined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2746:587,Test,Tests,587,https://psicode.org,https://github.com/psi4/psi4/pull/2746,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. #### Review guide; below are the key files for review; * proc.py; * sapt-compare/input.dat; * sapt.rst. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] update various build docs, especially for Libint2 and libecpint; - [x] a coalition including @konpat and @CDSherrill agree that it's better to update the default for elst terms for sapt0 in Ed's code for (1) physics and (2) match the other two sapt codes. this implements that decision. hopefully the docs additions are clear. glad of suggestions. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2582:659,Test,Tests,659,https://psicode.org,https://github.com/psi4/psi4/pull/2582,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. (To review, turn on ""hide whitespace"" at the little gear to see that task_base changes are just deleted alternate logic.). ## User API & Changelog headlines; - [x] Since v1.7, Psi4 has supported legacy v0.15.8 qcfractal (latest release until Sep 2023) and the incipient ""next"" branch. ""next"" was released in Sep 2023 as v0.50, so for v1.9 we support only ""next"" (currently v0.52) and drop legacy support. ## Dev notes & details; - [x] Cancel all the v0.51 + tweaks we were using to keep snowflakes running and pull the new qcfractal v0.52; - [x] Cease supporting legacy (pre-next) v0.15.8 qcfractal in anticipation of the v1.9 release. Now the Mac eco GHA will be testing ""next"", not ""legacy"", so we're not restricted to old python.; - [x] Addresses the CMake version problem pointed out in closes #3089 ; - [x] T~he urllib3 thing I think might help the Win nightly build uploads~. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3090:194,log,logic,194,https://psicode.org,https://github.com/psi4/psi4/pull/3090,5,"['Test', 'log', 'test']","['Tests', 'logic', 'testing', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. @lothian, the primary files to look at are procedures/proc.py, cc.rst, preview_capabilities_ccenergy.rst, and (for example) cc13b/input.dat. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Conventional ccsd(t) gradients will now proceed as finite-difference calculations, which are much more memory efficient. If you still want to access the analytic gradients, add `set qc_module ccenergy`. ## Dev notes & details; - [x] the main change is disabling default conv rhf/uhf ccsd(t) analytic gradients through ccenergy in proc.py . they're still accessible by setting `qc_module=ccenergy` explicitly; - [x] changes to tests so that we're still testing the gradients; - [x] changes to the capabilities auto-documentation that starts with stdsuite, gets stored in samples/stdsuite_psi4.txt, and gets processed into docs tables, a viz preview of which are stored in sphinxman/source/.; - [x] simpler docs-building environment!. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). closes #2913 . ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2943:820,test,tests,820,https://psicode.org,https://github.com/psi4/psi4/pull/2943,5,"['Test', 'test']","['Tests', 'testing', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. Collect SAPT changes in the progress of SAPT consolidation. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] avoid stumbling into memdf with disk algorithem. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3131:679,Test,Tests,679,https://psicode.org,https://github.com/psi4/psi4/pull/3131,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. FISAPT itself untested, so logic for disp term may need adjustment. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3171:107,log,logic,107,https://psicode.org,https://github.com/psi4/psi4/pull/3171,4,"['Test', 'log', 'test']","['Tests', 'logic', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. Refactor `electric_field()` to return ElectricFieldInt rather than OneBodyAOInt. Fixes #2793 . ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] ElectricFieldInt returned now by `IntegralFactory.electric_field()`; - [x] Equivalent changes in `libmintshelper` made to stop immediate `static cast`. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] ElectricFieldInt returned now by `IntegralFactory.electric_field()`; - [x] Equivalent changes in `libmintshelper`. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2795:875,Test,Tests,875,https://psicode.org,https://github.com/psi4/psi4/pull/2795,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. The purpose of this PR is the following:; - Fix #2871 . The bug observed when optimizing a molecule containing `Cl` atom using `geometric` via Psi4. . ## User API & Changelog headlines. - [x] Fixing compatibility with geometric 1.0. ## Dev notes & details. - [x] The atom list in Psi4 is upper-cased while geometric expects a capitalized one. This is not a problem for atom symbols containing a single letter like `H`, `C` etc. but becomes a problem for `Cl`, `Br` etc. ## Questions; - [x] Are there any tests of the Psi4/geometric interface?. ## Checklist; - [x] Tests added for any new features -> not a new feature; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2872:584,test,tests,584,https://psicode.org,https://github.com/psi4/psi4/pull/2872,4,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. This is No. 3 of the DDD series, #1351. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] hopefully gets Win conda pkg building again with right pytest; - [x] a few easy formatting improvements, typos from DDD PR. ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) full suite passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2518:372,Test,Tests,372,https://psicode.org,https://github.com/psi4/psi4/pull/2518,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. This is a snapshot in which all n-body tests pass using QCManyBody locally. There's lots of code to be erased and reworked yet. And qcmb isn't installed in CI, so tests aren't expected to pass. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Internal code has been replaced by an external Python module, QCManyBody; - [x] Several n-body efficiency improvements and a new option `supersystem_ie_only` that computes the IE rather than MBE, useful for trimers and larger.; - [x] bug fix for gradient or Hessian vmfc for max_nbody >=3. ## Dev notes & details; * Unrelated; - [x] updated basis_set_exchange to v0.10 and probably fixed the internal build; - [x] switched internal build of optking to a tag that can work with py312; - [x] qcvar `GEOMETRY ITERATIONS` wasn't actually getting set. `OPTIMIZATION ITERATIONS` is actually listed in the docs glossary, so switched to that and set it.; - [x] added `resp` to the codedeps now that it's on c-f, and thus to the ecosystem testing; - [x] fixed previously excused docs links to qcfractal; - [x] added back dftd4 to ecosystem for py312; * QCManyBody: build; - [x] Adds a new pure-python required dependency, `qcmanybody`, available from c-f or pypi; * QCManyBody: BSSE efficiency improvements/bug fixes; - [x] `bsse_type=cp` + `return_total_data=True` (not default for energy) will now no longer do every species in both supersystem (for cp) and natural (for uncp) basis sets. It will do everything in the supersystem basis (since cp requested) and only monomers in the monomer basis (for rtd=T).; - [x] `driver=g/h` + `return_total_data=False`, an unlikely combination, won't just fail with syntax error; - [x] `bsse_type=vmfc` + `driver=g/h + `max_nbody`>2 are now computed correctly. Previously (at least since v1.6), only the two highest-body te",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3160:119,test,tests,119,https://psicode.org,https://github.com/psi4/psi4/pull/3160,2,['test'],['tests']
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. closes #2867 . ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] functionals created by dict (like TPSS or custom) weren't hitting XC_build where the libxc citation was being set. Fixed by setting the citation from a static fn on LibXCFunctional. ## Checklist; - [ ] ~Tests added for any new features~; - [ ] ~[All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests)~. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2877:705,Test,Tests,705,https://psicode.org,https://github.com/psi4/psi4/pull/2877,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. closes #3040. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] print_variables prints array variables. (first and last element); - [x] Used this to test scf guesses in pytest.; - [x] Store new qc variable ""SCF TOTAL ENERGIES"" that is a list of all the SCF iteration energies. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3052:610,test,test,610,https://psicode.org,https://github.com/psi4/psi4/pull/3052,4,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,## Description; <!-- Provide a brief description of the PR's purpose here. -->; - fix [E101](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [E502](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [E703](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [E711](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [E712](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [E713](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [E722](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [W605](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes). ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->. ## Questions. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2428:935,Test,Tests,935,https://psicode.org,https://github.com/psi4/psi4/pull/2428,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; @carolinesargent identified a bug where running FSAPT with an external potential w/o having frozen the orientation with no_com + no_reorient would run but give the wrong answer. :-(. External potentials has long been one of those cases where we required the user to freeze the orientation at molecule creation time so that the potential could be set in the same frame. This couldn't be fixed driver-side because as soon as the `core.Mol` builds w/o freeze directives, it loses the original Cartesian coordinates. (The clone, set_nocom, set_noreorient calls in the driver allow _regular_ sapt to forego user setting by preventing the dimer, monoA, monoB from having different frames.). Happily, in the intervening period, @maxscheurer ran into exactly this problem for polarizable embedding potentials and solved it by tacking a copy of the original Cartesians onto the molecule. So we're applying this to FSAPT also. . I've been getting some segfaults that I think are a quirk of my directory, hence the cc31 testing. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Fixes bug where FSAPT with an external potential and without no_com/no_reorient set would return wrong answer. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Let's use this route to accommodate aux info in the frame of the Cartesianmol. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2934:1089,test,testing,1089,https://psicode.org,https://github.com/psi4/psi4/pull/2934,4,"['Test', 'test']","['Tests', 'testing', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; A lot of error exits in `libdpd` are implemented with `exit(1)` or equivalent. This makes debugging harder, and results in less informative error messages when a test fails in the CI environment. This PR modernizes all `exit(1)` error exits in `libdpd` into `throw PSIEXCEPTION`. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Psi4 now prints more detailed error messages if an error happens in its DPD module. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] All `exit(1)` and `exit(PSI_RETURN_FAILURE)` calls in `libdpd` have been replaced with a `throw PSIEXCEPTION`. ## Checklist; - [x] No new features; - [x] CI tests are failing only due to libint being in flux. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3117:242,test,test,242,https://psicode.org,https://github.com/psi4/psi4/pull/3117,2,['test'],"['test', 'tests']"
Testability,## Description; <!-- Provide a brief description of the PR's purpose here. -->; A one-line change to enable an SCF calculation with an arbitrary one-electron matrix `X` added to the Fock matrix via `wfn.push_back_external_potential(X)`. Fixes #3227. ## Questions; - [x] Is this the right way to accomplish this goal (computing SCF with an extra 1-electron operator added to the Fock matrix)?; - [x] Does this mess up PCM/DDX/PE in any way? (It shouldn't). ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3228:476,Test,Tests,476,https://psicode.org,https://github.com/psi4/psi4/pull/3228,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; A preliminary implementation of new functionalities in intramolecular SAPT proposed by Du Luu and Konrad Patkowski in [https://doi.org/10.1021/acs.jpca.2c06465](https://doi.org/10.1021/acs.jpca.2c06465). The code is coauthored by @dluu12. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - The new available options for `FISAPT_LINK_ASSIGNMENT` are `SAO0, SAO1, SAO2, SIAO0, SIAO1, SIAO2`. The `SIAO1` variant is the recommended one that solves some serious issues of the default `FISAPT_LINK_ASSIGNMENT=C` variant and, after some more testing, will hopefully take over as the production ISAPT scheme.; - A couple minor options for the new variant (orthogonalization of link orbitals, making cube files) have been added and documented in the manual.; - After quite a bit of effort, FISAPT (that is, the F-SAPT partitioning of ISAPT) seems to be working fine.; - A suitable fragment in the manual and two tests (isapt-siao1 and fisapt-siao1) have been added. ## Questions; - The code does what it is supposed to, but certainly needs extensive general cleanup.; - Not tested with external potentials.; - Presently, there are two functions that produce different cube files: `FISAPT::raw_plot()` and `FISAPT::do_cubes()`. They have different capabilities but should probably be merged into one. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2899:801,test,testing,801,https://psicode.org,https://github.com/psi4/psi4/pull/2899,6,"['Test', 'test']","['Tests', 'tested', 'testing', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; A quick cleanup removing `new` and `delete` in favor of `std::vector` in SOBasis. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3024:670,Test,Tests,670,https://psicode.org,https://github.com/psi4/psi4/pull/3024,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; A small addition needed for an F12 code to work Python-side. Adds the ability to call; ```; ao_f12g12(exp_coeff, Basis1, Basis2, Basis3, Basis4); ao_double_commutator(exp_coeff, Basis1, Basis2, Basis3, Basis4); ```; with an arbitrary combination of 4 bases (some combinations require `SCREENING == 'NONE'` - see #2973). The other kinds of F12 integrals, e.g. `ao_f12()`, already have this functionality and just the two above types were missing. ## Dev notes & details; This minor PR should be completely orthogonal to the recent PRs from @EricaCMitchell. All of these PRs will be needed for the upcoming F12 codes. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run] `ctest -L quick` passes with no errors. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2987:716,Test,Tests,716,https://psicode.org,https://github.com/psi4/psi4/pull/2987,2,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Added SAPT0-D4 and SAPT0-D4M methods and parameters along with a test. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3172:145,test,test,145,https://psicode.org,https://github.com/psi4/psi4/pull/3172,4,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Added an example for an ISAPT calculation (with the new SIAO1 variant) for a charged molecule, probing a cation-pi interaction between a benzene ring and a protonated amine group, connected to each other by a (CH<sub>2</sub>)<sub>3</sub> aliphatic linker. The example was inspired by @loriab's question whether new (or old) ISAPT works for charged molecules. It shows that yeah, it does work, and no special issues were encountered. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2950:533,Test,Tests,533,https://psicode.org,https://github.com/psi4/psi4/pull/2950,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Addressing Issue #2226, changing the gemm() method in Matrix.cc. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is detined for the release notes. May be empty. -->; - [x] None. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Calculates row and column totals from rowspi_ and colspi_; - [x] Throws a Psi exception error if the dimensions don't match up. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2729:711,Test,Tests,711,https://psicode.org,https://github.com/psi4/psi4/pull/2729,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Adds SAPT0-D and FISAPT-D routines, continuation of #1786. This code only works with the latest QCEngine commit, so it will fail the tests until the next QCEngine release. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [X] Add SAPT0-D and FISAPT0-D, for any -D variant available to HF; - [X] Enable access to pairwise dispersion decomposition from dftd3; - [x] Adapt fsapt.py analysis to use -D dispersion info. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - [x] Test fsaptdiff.py. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2081:213,test,tests,213,https://psicode.org,https://github.com/psi4/psi4/pull/2081,5,"['Test', 'test']","['Test', 'Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Adds a missing doi in a source tree README file, also standardizes the use of doi syntax (it is doi:foo not DOI foo). ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2509:382,Test,Tests,382,https://psicode.org,https://github.com/psi4/psi4/pull/2509,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Adds optking keywords missed in #3204. For users, if these options are needed with an older version of Psi4, they can be passed through `psi4.optimize(..., 'optimizer_keywords'=)` to optking. Features require `optking >= 0.3.0`. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Adds shortcut for freezing all dihedrals in a molecule `freeze_all_dihedrals` and `unfreeze_dihedrals` . ## Checklist; - [x] Ran -L opt subset; - [x] keywords checked explicitly in optking's tests . ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3209:673,test,tests,673,https://psicode.org,https://github.com/psi4/psi4/pull/3209,1,['test'],['tests']
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Adds shorthand for SPW92 functional. Also removes a spurious citation from SVWN. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Calculations can be launched with SPW92. ## Questions; - [x] Can someone add in the test reference energies? I don't have a running version of Psi4... ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2784:676,test,test,676,https://psicode.org,https://github.com/psi4/psi4/pull/2784,4,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; After seeing some GCC warnings related to sprintf usage I decided to modernize SAPTDIIS label generation with the use of `std::string` and a new utility function to retain the output format of `%2d`. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] No user-visible changes. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] New function: `to_str_width`: converts any type supported by `std::to_string` to an `std::string`, and prepends as many spaces as required to meet the specified minimum width.; - [x] `SAPTDIIS::get_vec_label` and `SAPTDIIS::get_err_label` are modernized to return an `std::string`, instead of a `char*` that the caller needs to deallocate.; - [x] Functions using these two functions have been adapted to the changes. ## Checklist; - [x] No new features; - [x] Tests run by the CI are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2804:1178,Test,Tests,1178,https://psicode.org,https://github.com/psi4/psi4/pull/2804,1,['Test'],['Tests']
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; After the removal of `sem_test` in #2776, the only remaining internal user of `libqt/schmidt_add.cc` is `libqt/david.cc`. That too is destined for removal, if its only user in `dfocc` is removed by #2684. So it looks like `schmidt_add` could be removed in the future, when all of its callers are gone. To keep the promise of not randomly breaking API without fair warning, this PR deprecates the function, setting up its eventual removal. Note that this `schmidt_add` is not the same function as the `schmidt_add` in `cceom` or `detci`, even though the name is the same. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] `PSI_API` function `int schmidt_add(double** A, int rows, int cols, double* v)` is deprecated and 1.7 will be the last release with it present. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Deprecation message is added to `schmidt_add` in `libqt`. ## Questions; - [ ] This function was tagged as `PSI_API` in #1077 by @raimis, do we know why it was necessary back then?. ## Checklist; - [x] No new features; - [x] CI tests are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2822:1435,test,tests,1435,https://psicode.org,https://github.com/psi4/psi4/pull/2822,1,['test'],['tests']
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Apparently `errno` is not defined on FreeBSD by default, so we have to explicitly include `<cerrno>` in files that use it. This PR adds that include.; Fixes and closes #2810. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] None? The offending code has not made it to any release yet. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] `#include <cerrno>` is added to the few PSIO files that use `errno`. ## Checklist; - [x] No new features; - [x] CI tests are passsing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2811:844,test,tests,844,https://psicode.org,https://github.com/psi4/psi4/pull/2811,1,['test'],['tests']
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Around the time when the Boost dependency was being removed, some `PRAGMA_WARNING` manipulations were inserted, presumably to reduce warning noise during builds.; The Boost includes have since been removed and these are no longer necessary. `#include <memory>` thankfully does not require such guarding. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] No user visible changes. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Stop unnecessarily guarding `#include <memory>` with `PRAGMA_WARNING_IGNORE_DEPRECATED_DECLARATIONS` . ## Checklist; - [x] No new features; - [ ] CI tests are passing. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3088:971,test,tests,971,https://psicode.org,https://github.com/psi4/psi4/pull/3088,1,['test'],['tests']
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; As a result of implementing new ISAPT variants, a printout of dipole moments before/after link reassignment was added. This printout does not make any sense for the original `FISAPT_LINK_ASSIGNMENT == C` variant (there was no link reassignment so what do before and after even mean?). This PR removes this spurious printout for old link reassignment schemes `FISAPT_LINK_ASSIGNMENT == C` and `FISAPT_LINK_ASSIGNMENT == AB`. . ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2956:526,Test,Tests,526,https://psicode.org,https://github.com/psi4/psi4/pull/2956,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; As discussed in #2997 and #3117, no debugging information is produced in many places in Psi4. I believe this is because of improper calls to `exit()`, which is a remnant of the C history of Psi. #3117 replaces the calls to `exit()` with `throw`s in libdpd. This PR replaces the calls in the rest of Psi4. Sorry for the verbose changes; I ran clang-format on the files since my editor's indentation doesn't match that in Psi4. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Obsoleted calls to `exit()` have been replaced by exceptions, which should better guarantee the passing of error messages to the end user. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Spurious calls to `exit()` have been removed in favor of exceptions, which should better guarantee error messages getting through to the user. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3118:1252,Test,Tests,1252,https://psicode.org,https://github.com/psi4/psi4/pull/3118,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; As it says in the title, see #2942 and #2938. Closes #2942. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] `adcc` version `0.15.16` at least required due to bugfixes in `adcc`. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Check `adcc` min version at runtime. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). closes #2938 closes #2942. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2944:711,Test,Tests,711,https://psicode.org,https://github.com/psi4/psi4/pull/2944,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; <!-- Provide a brief description of the PR's purpose here. -->; Basic can-get-it-in-psi for Rob Shaw's https://github.com/robashaw/libecpint . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2368:343,Test,Tests,343,https://psicode.org,https://github.com/psi4/psi4/pull/2368,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Both `normalize` and `schmidt_add` are now unused. `schmidt_add` is `PSI_API`, but it has been given a deprecation period of one release. The files will be submitted to the attic after this is merged. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Deprecated `PSI_API` function `schmidt_add(double** A, int rows, int cols, double* v)` has been removed. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Unused `normalize` function and file are removed; - [x] Deprecated `PSI_API` function `schmidt_add` and file are removed. ## Checklist; - [x] No new features; - [x] CI tests are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2927:967,test,tests,967,https://psicode.org,https://github.com/psi4/psi4/pull/2927,1,['test'],['tests']
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Cleanup to libmints/petitelist to remove manual memory management in favor of `std::vector`. Some of the code was not really clear (use of both `len` and `length` in some of the SO objects). ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3026:779,Test,Tests,779,https://psicode.org,https://github.com/psi4/psi4/pull/3026,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; <!-- Provide a brief description of the PR's purpose here. -->; Closes #2321: removes spurious unused basis. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2373:309,Test,Tests,309,https://psicode.org,https://github.com/psi4/psi4/pull/2373,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Closes #2799 : prints out the name of the file that failed to open. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2801:656,Test,Tests,656,https://psicode.org,https://github.com/psi4/psi4/pull/2801,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Closes #3115. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] The default definition for a molecule has been removed. Prior to this release, if a `molecule` had not been defined, Psi4 would run on a hydrogen molecule with bond length 0.74 Å. This change only affects Psithon input. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3116:804,Test,Tests,804,https://psicode.org,https://github.com/psi4/psi4/pull/3116,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Definitions of various IO system call macros are currently replicated and/or scattered across files. These macros were added to paper over differences between Windows and Linux/Mac.; This PR coalesces all of them into `psio.h`. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is detined for the release notes. May be empty. -->; None. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] `SYSTEM_WRITE`, `SYSTEM_READ`, `SYSTEM_LSEEK`, `SYSTEM_OPEN`, `SYSTEM_CLOSE`, `SYSTEM_UNLINK`, `PSIO_OPEN_OLD_FLAGS`, `PSIO_OPEN_NEW_FLAGS `and `PERMISSION_MODE `are now only defined in `psio.h`, which is already included by pretty much all PSIO-related files anyways.; - [x] Same goes for the Windows specific `io.h` include, and the non-Windows `unistd.h`. ## Checklist; - [x] Tests run by the CI are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2741:1099,Test,Tests,1099,https://psicode.org,https://github.com/psi4/psi4/pull/2741,1,['Test'],['Tests']
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Detci still has a few places where error termination is effected through printf+abort(). This PR replaces the calls to abort() in with `throw PSIEXCEPTION(msg)`. The rest of the codebase has more of this pattern, those are subject to future PRs to keep this one small. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] A few error terminations in the detci module now print a more detailed error information to the console, instead of just the error message in the output file. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Calls to `abort()` in detci are replaced with `throw PSIEXCEPTION(msg)`, where `msg` is the relevant error message taken from the context of the `abort()`. ## Checklist; - [x] No new features; - [x] Tests run by the CI are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3168:1120,Test,Tests,1120,https://psicode.org,https://github.com/psi4/psi4/pull/3168,1,['Test'],['Tests']
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Fix for the bug described in [issue #1968](https://github.com/psi4/psi4/issues/1968) about incorrectly loading ECPs for ghosted atoms. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Calculations using ghosted atoms that contain ECPs in the basis set can now be executed properly. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] When loading basis functions we check if we should skip loading ECPs (`skip_ghost_ecps`) and if `true` then we check if an atom is a ghost (`mol->Z(atom) == 0.0`). If yes we do not load ECPs fot it.; - [x] Added optional boolean argument `skip_ghost_ecps` for `construct_basisset_from_pydict` function. The default is `true`, we set it `false` for atomic calculations (like SAD guess). ## Questions; - [x] Are the check runs failing due to the changes in this PR?. ## Checklist; - [x] Minimal working example; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3167:1276,test,tests,1276,https://psicode.org,https://github.com/psi4/psi4/pull/3167,2,['test'],['tests']
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Fixes a bug encountered when running optimizations in BAKERJCC96. All calculations in a finite difference; calculation were writing orbitals to disk and overwriting the old orbitals. Only reference calculation should; be saved. In cases were the symmetry was lowered in one of the last displacements, subsequent gradient calculations; were failing to read orbitals. ``` ; File ""/home/zander/github/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 1761, in scf_helper; raise ValidationError(""Cannot compute projection of different symmetries.""); ```. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] scf_helper assumes orbitals should always be written. Passes `write_orbitals` = `false` through kwargs for displacements. ## Questions; - [ ] The new test is an optimization, would a test in ddd-function-kwargs or similar be preferred?. ## Checklist; - [x] Tests added for any new features; - [x] full ctest (Psi4, Psi4 + [CheMPS2, DFTD3, dkh, gCP, gdma, simint, ecpint]). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2827:1199,test,test,1199,https://psicode.org,https://github.com/psi4/psi4/pull/2827,3,"['Test', 'test']","['Tests', 'test']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Fixes a bug in `sad.cc`: pseudo-orbitals should be obtained by multiplying the orbital with the square root of their occupation to reproduce the correct density matrix C occ C^T. Closes #3137. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3138:781,Test,Tests,781,https://psicode.org,https://github.com/psi4/psi4/pull/3138,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Fixes the buffer overflow error described in #3214 . ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3215:641,Test,Tests,641,https://psicode.org,https://github.com/psi4/psi4/pull/3215,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; GT will trial this before it's ready for merging, but it's good to get eyes on it and to not lose track of the changes. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Users of QCFractal `next` can now customize protocols, tags, priorities, and owner_groups. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Allow psi4 to turn all the knobs qcportal allows: https://github.com/MolSSI/QCFractal/blob/next/qcportal/qcportal/client.py#L903-L915. ## Questions; - [x] @bennybp look ok? Ben has looked this over and approved. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3013:936,Test,Tests,936,https://psicode.org,https://github.com/psi4/psi4/pull/3013,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; GWH is not a guess, but a way to approximate the Hamiltonian for interacting systems. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2406:350,Test,Tests,350,https://psicode.org,https://github.com/psi4/psi4/pull/2406,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; I have added an option to compute the necessary GRAC shifts for SAPT(DFT) automatically. I added a little extra logic to ""try harder"" at converging cations to hopefully fail less often if this option is specified. These changes will enable more users to call SAPT(DFT) more routinely in their workflows without having to consider acquiring GRAC shifts externally through their own logic or tabulated sources. . ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Automatically computes SAPT(DFT) GRAC shifts for monomer A and/or B; - [ ] Logic for trying extra options with level shifts to attempt to converge more cations in approximating the ionization potential. ## Questions; - [ ] Perhaps I should add a more challenging pytest in which the first cation SCF convergence attempt fails but the iterative options approach succeeds. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3232:192,log,logic,192,https://psicode.org,https://github.com/psi4/psi4/pull/3232,6,"['Log', 'Test', 'log', 'test']","['Logic', 'Tests', 'logic', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; I think whoever brought up the new ""warnings"" in the sphinx log was on the right track. We do have the treat-warnings-as-errors flag on. It's the treat-broken-links-as-errors flag that we can't enable yet. Between that and the 9800 PR in the newest sphinx changelog released 17 Jan https://www.sphinx-doc.org/en/master/changes.html#release-4-4-0-released-jan-17-2022, I bet that's what's causing our docsbuild fail. Hopefully I haven't added any new syntax errors. - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2422:140,log,log,140,https://psicode.org,https://github.com/psi4/psi4/pull/2422,1,['log'],['log']
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; I was looking through the source code to understand what the `DFT_REMOVE_DISTANT_POINTS` keyword does, and realized I could not understand what the `remove_distant_points` function was doing. I also suspect that that code was partly wrong. This PR cleans up that function so that it now does what it should. However, it is also evident that the logic of this function is not optimal. Instead of checking if any nucleus is within the maximal spatial extent of the basis set, one should check if any nucleus is within the extent of that nucleus' basis functions. This is just a drive-by commit, as I don't think it's worthwhile to spend time on Psi4's quadrature code, since [IntegratorXX](https://github.com/wavefunction91/IntegratorXX/) and [GauXC](https://github.com/wavefunction91/GauXC) offer a reusable solution that could be used also in Psi4 with significant negative LOCs. . ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3012:425,log,logic,425,https://psicode.org,https://github.com/psi4/psi4/pull/3012,4,"['Test', 'log', 'test']","['Tests', 'logic', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Implements OpenOrbitalOptimizer support in Psi4. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] (Optional) If OpenOrbitalOptimizer support is enabled at compile-time, an improved atomic Hartree-Fock solver is used in the SAD, SADMO, and HUCKEL guesses. In contrast to the legacy solver in Psi4, the OpenOrbitalOptimizer atomic self-consistent field is fully symmetry aware, which is especially important for e.g. transition metal atoms. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3136:960,Test,Tests,960,https://psicode.org,https://github.com/psi4/psi4/pull/3136,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Improvements discussed in a comment to #3043. The 64-character limit may not be valid on all architectures; this PR should avoid having to revisit the patch. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3044:746,Test,Tests,746,https://psicode.org,https://github.com/psi4/psi4/pull/3044,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; In, SAPT(DFT), I removed setting ""DF_INTS_IO"" to ""SAVE"" because it blocked scf_type==""DF"" from accessing MemDF on its own. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3173:711,Test,Tests,711,https://psicode.org,https://github.com/psi4/psi4/pull/3173,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; <!-- Provide a brief description of the PR's purpose here. -->; Includes all the STO-nG basis sets from the Basis Set Exchange. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2230:328,Test,Tests,328,https://psicode.org,https://github.com/psi4/psi4/pull/2230,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; It is done. The beast lays slain.; This PR replaces the last calls of the `sq_rsp` function in the `dfoccwave::Tensor2d::diagonalize` overloads with the new DSYEV wrappers, and removes the function and its file. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Deprecated `PSI_API` function `void sq_rsp(int nm, int n, double **array, double *evals, int matz, double **evecs, double toler)` has been removed. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Merge `dfoccwave::Tensor2d::diagonalize` overloads to minimize code dupliaction; - [x] Add machine-readable docstrings in the header file; - [x] `dfoccwave::Tensor2d::diagonalize` overloads now throw on non-square matrices or diagonalizer failure; - [x] Replace calls of `sq_rsp` with `DSYEV_ascending` and `DSYEV_descending`; - [x] Delete `sq_rsp` function and file. ## Checklist; - [x] No new features; - [x] CI tests are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2928:1267,test,tests,1267,https://psicode.org,https://github.com/psi4/psi4/pull/2928,1,['test'],['tests']
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; It looks like `libmints/svd.cc` is unused. Psi4 appears to build just fine without it. It contains what looks like ancient LAPACK code that was auto-translated with f2c. This PR deletes the file. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] None. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Unused file `libmints/svd.cc` is deleted. ## Checklist; - [x] No new features; - [x] Tests run by the CI are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3169:780,Test,Tests,780,https://psicode.org,https://github.com/psi4/psi4/pull/3169,1,['Test'],['Tests']
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Just comments a cryptic line in xhost.cmake. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2983:633,Test,Tests,633,https://psicode.org,https://github.com/psi4/psi4/pull/2983,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Looks like I didn't push the updated reference output for the MODHUCKEL guess... ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3011:669,Test,Tests,669,https://psicode.org,https://github.com/psi4/psi4/pull/3011,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; <!-- Provide a brief description of the PR's purpose here. -->; Looks like there is a small error in the VMFC Hessian. The `sign` variable is changed for VMFC but it is not used to multiply the Hessian. Compare this with the gradient above and the energy in line 661. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2389:468,Test,Tests,468,https://psicode.org,https://github.com/psi4/psi4/pull/2389,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; <!-- Provide a brief description of the PR's purpose here. -->; Looks like there was a mistake in the added note on damping in #2225 that wasn't caught by the CI; this PR rectifies the referenced keyword. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2237:405,Test,Tests,405,https://psicode.org,https://github.com/psi4/psi4/pull/2237,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; <!-- Provide a brief description of the PR's purpose here. -->; Minor cleanups to `find_occupation` as well as the introduction of sanity checks for #2476 to prevent sudden changes of the spin state during the calculation. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2488:423,Test,Tests,423,https://psicode.org,https://github.com/psi4/psi4/pull/2488,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Much like PR #2804, this PR is mostly about eliminating `sprintf`-related compiler warnings and modernizing C-style string handling to C++, this time in libmints' `BasisSet::print_detail_cfour`. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Modernized `BasisSet::print_detail_cfour()`, highlights:; - [x] No longer uses `sprintf` and a fixed-size char array; - [x] Variables are made `const` wherever reasonable; - [x] Use of `std::find` on doubles is replaced by new functions (`none_of_equal` and `fpeq`) that implement a fuzzy compare with a default tolerance of 1E-14. Probably no behaviour change in practice (unless someone has basis fns which differ in exponent by >0 but <1E-14), but it is usually not recommended to use == on FP types, which is what `std::find` does.; - [x] The `slater.chemie.uni-mainz.de` URL has succumbed to link rot. Replaced with one that points to the latest version that is being preserved by the Internet Archive, both in the C++ and Python implementations.; - [x] Ran clang-format on `basisset.cc` and `basisset.h`. ## Questions; - [x] The new functions `none_of_equal` and `fpeq` are just living in `basisset.cc` and `basisset.h` right now. Would some other file be a better place to put them?. ## Checklist; - [x] No new features; - [x] Tests run by the CI are passing; - [x] I do not have CFOUR, so I cannot really test if this breaks something. It should not, but the `std::find` change _is_ behaviour-altering, albeit only in a corner case. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2937:1549,Test,Tests,1549,https://psicode.org,https://github.com/psi4/psi4/pull/2937,2,"['Test', 'test']","['Tests', 'test']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; My main goal is to provide an option for users to run FSAPT directly through the psiapi and not to have to create extra files and post-process the psi4 outputs. This is largely done by adding an fsapt analysis function to `./psi4/driver/driver.py`. I extended `fsapt.py` by moving its history to `psi4/driver/procrouting/sapt/fsapt.py` to enable users to either run the analysis directly after a `psi4.energy('fisapt0')` calculation through psi variables or through an `AtomicResults` as is demonstrated in `tests/pytests/test_fisapt.py`. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] Addition of `./psi4/driver/driver.py:fsapt_analysis()` to call fsapt analysis through the psi4 module. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] FSAPT is now available directly through psi4 instead of post-processing output files; - [ ] FISAPT results can be stored in `AtomicResults` permitting the storage of results in a QCArchive database. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3222:588,test,tests,588,https://psicode.org,https://github.com/psi4/psi4/pull/3222,4,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; NOTE: this commit was applied to v1.8.1 even though not merge to master until after that release. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] closes #3003 we usually have pytest around, but it shouldn't be absolutely required. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3008:523,Test,Tests,523,https://psicode.org,https://github.com/psi4/psi4/pull/3008,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; On the Fedora build system, `python` is not available which causes tests to fail.; This patch fixes this issue for good. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3216:147,test,tests,147,https://psicode.org,https://github.com/psi4/psi4/pull/3216,4,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; PR #2684 has removed the last remaining call site of the `libqt` Davidson solver. This PR removes this unused function and file.; The file will be submitted to the attic after this is merged. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] None, `david` was not `PSI_API`. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Unused `libqt` function `david` and its file are removed.; - [x] Declared-but-never-defined function `print_block` is removed from `qt.h`. ## Checklist; - [x] No new features; - [x] CI tests are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2925:903,test,tests,903,https://psicode.org,https://github.com/psi4/psi4/pull/2925,1,['test'],['tests']
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; PR #2686 has accidentally added some superfluous includes of `libpsi4util/PsiOutStream.h`, and I also missed removing a superfluous printf line. No real harm done, but they can be removed. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Remove some includes added by #2686 ; - [x] Remove a printf added by #2686 . ## Checklist; - [x] No new features; - [ ] CI tests are passing. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2813:799,test,tests,799,https://psicode.org,https://github.com/psi4/psi4/pull/2813,1,['test'],['tests']
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Printf format specifiers are required to match the type of the variable being printed. Using an incorrect format specifier may be UB. This PR resolves instances where the format specifier was incorrect. At least some of these have been triggering GCC warnings, so Psi4 now compiles with a couple fewer warnings. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Likely no user-visible changes. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] `cctransort/memcheck`: Replace 14 instances of `%1lu` being used for printing an `int`, with `%d`. Make argument `const`.; - [x] `detci/olsengraph.cc`: fix one instance of `%3d` being used for printing a `size_t` integer; - [x] `dlpno/mp2.cc`: fix 12 instances of %d being used for `size_t` integers; - [x] `fnocc/lowmemory_triples.cc`: fix `%i` being used to print a `long`; - [x] `libfock/DirectJK.cc`: fix %3d being used for `size_t` integer; - [x] `libfock/solver.cc`: fix %d being used for `size_t` integer; - [x] `libmints/cdsalclist.cc`: fix 5 instances of %d being used for `size_t` integers; - [x] `libmints/extern.cc`: fix 3 instances of %d being used for `size_t` integers. Make argument `const &`. ## Checklist; - [x] No new features; - [x] Tests run by the CI are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2771:1590,Test,Tests,1590,https://psicode.org,https://github.com/psi4/psi4/pull/2771,1,['Test'],['Tests']
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Psi4 has wrappers for seven LAPACK functions which have been marked as deprecated by the LAPACK devs for a long time. These functions have also been marked as deprecated within Psi4. Luckily they are not marked as `PSI_API`, nor are they used by Psi4. This PR removes them. Note that the default git diff algorithm is getting confused by the repetitive text in `lapack_intfc.cc` and incorrectly indicates that some lines were added. The correct diff can be obtained with `--diff-algorithm=minimal` :; ```; $ git diff --stat --diff-algorithm=minimal master remove_deprecated_lapack; psi4/src/export_blas_lapack.cc | 7 -; psi4/src/psi4/libmints/psimath.cc | 50 --; psi4/src/psi4/libmints/psimath.h | 27 -; psi4/src/psi4/libqt/CMakeLists.txt | 19 -; psi4/src/psi4/libqt/lapack_intfc.cc | 1021 -----------------------------; psi4/src/psi4/libqt/lapack_intfc_mangle.h | 35 -; psi4/src/psi4/libqt/qt.h | 25 -; 7 files changed, 1184 deletions(-); ```. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Psi4 now requires the LAPACK library to provide `DGGSVD3` and `DGGSVP3`. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Fortran, C and C++ style wrappers for `DGEGS`, `DGEGV,` `DGELSX,` `DGEQPF,` `DGGSVD,` `DGGSVP` and `DTZRQF` are removed.; - [x] CMake checks for the availability of `DGGSVD3` and `DGGSVP3` are removed. ## Checklist; - [x] No new features; - [x] CI tests are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2823:1759,test,tests,1759,https://psicode.org,https://github.com/psi4/psi4/pull/2823,1,['test'],['tests']
Testability,## Description; <!-- Provide a brief description of the PR's purpose here. -->; Psi4 isn't checking that basis sets are given in a sensible format at the moment. This pull fixes the issue somewhat. Closes #2253 . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Corrupt basis sets are detected instead of used. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2254:420,Test,Tests,420,https://psicode.org,https://github.com/psi4/psi4/pull/2254,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Refactored code in the WaveFunction class as per #2875. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] No changes to user experience. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Removed `nmo_` cache variable in favor of `nmopi_.sum()` to keep things in sync; - [ ] Refactored code to reflect removal of variable. ## Questions; - [ ] Best ways to test this change?. ## Checklist; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge. #2875",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2980:748,test,test,748,https://psicode.org,https://github.com/psi4/psi4/pull/2980,3,['test'],"['test', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Remove c++ optking. Add new python optking driver. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is detined for the release notes. May be empty. -->; - [x] RN 1 The fixed_* optimization keywords have been changed to ranged_* options; - [x] RN 2 output will be changed. Check output.dat for simple convergence / step info. output.log for detailed info; - [x] RN 3 IRC convergence behavior different for minima and substep. ; - [x] Downstream plugin users who were still getting wfn from globals will find it has now departed. Please follow the advice it's been issuing for years to do wfn passing. [LAB added]. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] New optimizer. Most of driver is very similar; - [x] Hessian Updating and optimization logic is in optking as much as possible; - [x] Restarting optimizations now supported. Optking can write entire state to disc (json); - [x] Driver attempts to symmetrize geometries; - [x] New keywords added. Some removed / updated. ; - [x] old optking removed from CMakeLists.txt from `/psi4/src/psi4`; - [x] optking py_funcs removed from core.cc; - [x] All tests have been verified for equal or better convergence. (except opt-irc-2); - [x] globals legacy gradient, wfn, and molecule removed [LAB added]. ## Questions; - [ ] A document describing differences between the optimzers may be necessary; - [ ] Unclear if I have fully removed old optking and building with new optking is fully working. ## Checklist; - [x] test15 tests restart; - [x] Can remove old deprecated set_gradient; - [x] ctest -L opt run. ## Status; - [x] Ready for review; - [ ] Ready for merge. For documentation on the new optimizer please see",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2727:476,log,log,476,https://psicode.org,https://github.com/psi4/psi4/pull/2727,1,['log'],['log']
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Running ip_tunning clogs stdout by emitting non-silenced printouts, and red-herring warnings.; `ip_tune` does set charge/multiplicity via `set_molecular_charge` and `set_multiplicity`:; * https://github.com/psi4/psi4/blob/master/psi4/driver/frac.py#L609; * https://github.com/psi4/psi4/blob/master/psi4/driver/frac.py#L610C5-L610C37. so it should be safe to keep them out. An example:; ```log; ...; c: [1.0, 0]; fc: [0.0]; m: [2]; fm: [3]; Following warning is harmless if you've altered chgmult through `set_molecular_change` or `set_multiplicity`. Such alterations are an expert feature. Specifying in the original molecule string is preferred. Nonphysical masses may also trigger the warning. c: [1.0, 0]; fc: [0.0]; m: [2]; fm: [3]; Following warning is harmless if you've altered chgmult through `set_molecular_change` or `set_multiplicity`. Such alterations are an expert feature. Specifying in the original molecule string is preferred. Nonphysical masses may also trigger the warning. c: [1.0, 0]; fc: [0.0]; m: [2]; fm: [3]; Following warning is harmless if you've altered chgmult through `set_molecular_change` or `set_multiplicity`. Such alterations are an expert feature. Specifying in the original molecule string is preferred. Nonphysical masses may also trigger the warning. c: [1.0, 0]; fc: [0.0]; m: [2]; fm: [3]; Following warning is harmless if you've altered chgmult through `set_molecular_change` or `set_multiplicity`. Such alterations are an expert feature. Specifying in the original molecule string is preferred. Nonphysical masses may also trigger the warning.; ...; ```. ```; c: [1.0, 0]; fc: [0.0]; m: [2]; fm: [3]; ```; steems from https://github.com/psi4/psi4/blob/master/psi4/driver/qcdb/molecule.py#L1646. and can be silenced by setting `verbose=-1`,; the other is 4 lines below:. https://github.com/psi4/psi4/blob/master/psi4/driver/qcdb/molecule.py#L1650. This PR, adds `quiet` param to ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3229:469,log,log,469,https://psicode.org,https://github.com/psi4/psi4/pull/3229,1,['log'],['log']
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Simple performance improvement for the DLPNO-MP2 algorithm. For DLPNO-MP2 computations on many-core machines, I see speedups around 20%. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Clone (rather than create from scratch) a `TwoBodyAOInt` for each thread; - [x] More appropriate OMP scheduling. ## Checklist; - [x] DLPNO tests still pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2378:463,test,tests,463,https://psicode.org,https://github.com/psi4/psi4/pull/2378,1,['test'],['tests']
Testability,## Description; <!-- Provide a brief description of the PR's purpose here. -->; Simple print option change to ensure printing of the final result for the nonapproximated E(20)exch-disp energy. Fixes #2317. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2318:226,Test,Tests,226,https://psicode.org,https://github.com/psi4/psi4/pull/2318,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Sometime between https://github.com/psi4/psi4/commit/5b54376e4f358ec1318539d3ac0a2e42ea0483f8 and https://github.com/psi4/psi4/commit/7e4ecf968ec7920ab404cb357de827cf3785a254, the original(?) code for generating broken-symmetry guesses for UHF/UKS was disabled, and parts of it may have been removed since.; These days, the way to get a BS guess seems to be setting `guess_mix true`, which does not use the old BS code fragments in `scf_helper`.; So, as far as I can tell it is dead code. This PR removes it. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] None, option/feature has been defunct/superseded for 6+ years. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Defunct broken-symmetry code is removed from Python function `scf_helper`. ## Checklist; - [x] No new features; - [x] Tests run by the CI are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2774:1183,Test,Tests,1183,https://psicode.org,https://github.com/psi4/psi4/pull/2774,1,['Test'],['Tests']
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; TBA. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] TBA. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3114:580,Test,Tests,580,https://psicode.org,https://github.com/psi4/psi4/pull/3114,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; TODO. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3101:535,Test,Tests,535,https://psicode.org,https://github.com/psi4/psi4/pull/3101,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; The `-H<path>` option for CMake is technically not part of the CMake public interface, it is not documented and was never meant for public use. Since CMake 3.13 there is a proper alternative, `-S<path>`, so Psi4 should use that and stop suggesting users to use `-H<path>`. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Psi4 no longer suggests users to use the undocumented `-H<path>` CMake option when building from source. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Replace `-H<path>` with `-S<path>` in CMake invokations. ## Questions; - [ ] I have no idea where to make a PR for fixing this in psi4-path-advisor. ## Checklist; - [x] No new features; - [x] CI tests are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2797:1066,test,tests,1066,https://psicode.org,https://github.com/psi4/psi4/pull/2797,1,['test'],['tests']
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; The aim of this pull request is twofold:; - it introduces our hybrid perturbative methods REMP (https://doi.org/10.1063/1.5086168) and OO-REMP (https://doi.org/10.1021/acs.jctc.1c00280) into the OCC and the DFOCC module; - It fixes #2215 by porting the coupled DIIS scheme from the OCC module to the DFOCC module; - Furthermore, a number of potential integer overflows in the DFOCC module are fixed which may lead to wrong memory demand estimates for large molecules. REMP is essentially a hybrid between MP and CEPA(0) rewritten as perturbation theory (https://doi.org/10.1016/j.cplett.2006.07.081). - Note: This PR also contains code pulled from @bozkaya 's fork. ## Sub-PR List. [LAB] This PR's content, including https://github.com/loriab/psi4/tree/dfocc2 by @bozkaya and @yavuzalagoz, will be added through the following sub-PRs:; * #2653 +12k/-1k; * #2663 +4k/-4k; * #2669 +2k/-1k; * #2670 +22k/-0k; * #2739 +20k/-2k. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Documentation; - [x] Test cases. ## Checklist; - [x] Tests added for any new features; - [ ] ~~[All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests)~~; - [ ] ~~Some tests fail locally but these are not related to any code touched in this PR~~; - [x] ~~The initial pull request broke DF-OMP2.5 and DF-OMP3. Will be fixed in a follow-up commit.~~ Fixed. ## Status; - [X] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2354:1132,Test,Test,1132,https://psicode.org,https://github.com/psi4/psi4/pull/2354,5,"['Test', 'test']","['Test', 'Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; The current guess mix code runs in iteration 0, but SAD doesn't have orbitals there, while some other guesses don't call `form_C` in iteration 0. This PR fixes guess_mix for all guesses. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Tests for guess_mix added for all guesses. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2411:374,Test,Tests,374,https://psicode.org,https://github.com/psi4/psi4/pull/2411,4,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; The version of ADCC that the Psi4 CMake system currently requires (and tries to build if not found) is incompatible with C++17, and thus always fails to build. See https://github.com/adc-connect/adcc/issues/131 for the error message. This error was also mentioned in issue #2572.; This has been resolved by the ADCC/libtensor devs since, so bumping the required/built ADCC version to the latest release should fix _this particular_ issue with the ADCC build process. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Psi4 now requires ADCC version 0.15.13 or newer.; - [x] Fixed issue where building Psi4 from source with the ADCC plugin enabled-but-not-found resulted in a build failure with the error message `ISO C++17 does not allow dynamic exception specifications`. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] CMake now looks for ADCC 0.15.13 or newer, if not found the 0.15.13 tarball is downloaded and built. ## Checklist; - [x] No new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2785:1393,test,tests,1393,https://psicode.org,https://github.com/psi4/psi4/pull/2785,2,['test'],['tests']
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; There are some char arrays in `ccdensity::RHO_Params` that are set in `get_rho_params` but are otherwise never used. This PR removes them. This rectifies a few warnings with GCC 12, caused by the `sprintf `calls used to set them. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] No user-visible changes. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] `R1B_lbl` and similar unused members of `RHO_Params` are removed, except `R1A_lbl` which becomes not unused if `EOM_DEBUG` is defined. ## Checklist; - [x] No new features; - [x] Tests run by the CI are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2805:926,Test,Tests,926,https://psicode.org,https://github.com/psi4/psi4/pull/2805,1,['Test'],['Tests']
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; These functions are relics from Psi3 (or before?) and they have many issues, unfortunately one of them is their function signature. Stemming from the awful interface, users of `rsp(...)` and `sq_rsp(...)` never check if the diagonalization failed, because they _cannot_. To keep the promise of not randomly breaking API without fair warning, this PR deprecates said functions but keeps them usable. After #2776, `rsp(...)` has no internal callers left. As for `sq_rsp(...)`:. - many former callers of `sq_rsp(...)` have turned out to be unused functions and have been removed; - If #2686 is merged the vast majority of remaining callers are migrated to a new wrapper around DSYEV; - The remaining call sites of `sq_rsp(...)` will all be in `dfocc`, which is not touched for the time being to avoid causing merge conflicts for the many pending PRs for that module. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] `PSI_API` function `void rsp(int nm, int n, int nv, double *array, double *evals, int matz, double **evecs, double toler)` is deprecated and 1.7 will be the last release with it present.; - [x] `PSI_API` function `void sq_rsp(int nm, int n, double **array, double *evals, int matz, double **evecs, double toler)` is deprecated and 1.7 will be the last release with it present. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Added deprecation notices to `rsp(...)` and `sq_rsp(...)`. ## Checklist; - [x] No new features; - [x] Tests pass as per Lori. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2798:1836,Test,Tests,1836,https://psicode.org,https://github.com/psi4/psi4/pull/2798,1,['Test'],['Tests']
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This PR allows for using basis sets from the Basis Set Exchange library (https://github.com/MolSSI-BSE/basis_set_exchange) directly in psi4. To use a basis set from the BSE, you prefix the name of the basis set with `bse:`. Optionally, you can specify the version with a suffix (like `:1`). ```; # use most recent def2-tzvp version; set basis bse:def2-tzvp. # specifically use version 0 of sto-3g; set basis bse:sto-3g:0; ```. Also can be used with `assign`. ```; basis {; assign DZ; assign C bse:sto-3g:0; }; ```. Using these of course requires that the BSE be installed. This should be accessible from both schema/json and psithon. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] Add capability to use basis sets from the Basis Set Exchange. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Adds optional dependency to basis_set_exchange; - [x] Adds handling for basis sets that start with `bse:`; - [ ] Modifies some regexes to allow for colons in basis set names. ## Questions; None. ## Checklist; - [x] Optional dependency added to build chain; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2905:1452,Test,Tests,1452,https://psicode.org,https://github.com/psi4/psi4/pull/2905,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This PR builds upon the functions added in #2711 and #2700 to provide more informative error messages if a `SYSTEM_READ`, `SYSTEM_WRITE` or `SYSTEM_LSEEK` fails, including the OS-provided error message, which may have clues for the cause of the error (disk is full, no permission, etc). ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is detined for the release notes. May be empty. -->; - [x] Error messages related to some IO errors are now more specific and detailed. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] New function: `psio_compose_err_msg`. This helps composing PSIO error messages without too much code duplication. It can optionally take an errno value and tack on the error message provided by the OS.; - [x] `psio_volseek` has been reworked to handle any errors internally by calling `psio_error`, instead of returning -1 on error. Appropriate error message generation and some `const` qualifiers were added.; - [x] `PSIO::rw` has been adapted to the changes to `psio_volseek` and error message generation was added after each read/write/seek.; - [x] Functions in `toclen.cc` are now also using `psio_compose_err_msg` to generate messages. ## Checklist; - [x] Tests run by the CI are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2756:1517,Test,Tests,1517,https://psicode.org,https://github.com/psi4/psi4/pull/2756,1,['Test'],['Tests']
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This PR fixes #3147 . Basically the psithon way of defining molecules converted _initial_cartesian on parsing.; When adding an external potential this was used as; molecule.set_geometry(clone_molecule._initial_cartesian).; set_geometry applies the conversion again. The two python ways I found, which set initial_cartesian did not do the conversion leading to incorrect geometries, when using external_potential and molecules defined as unit=angstrom. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Fixes #3147: Parsing molecules with angstrom units and using external_potential from python was broken. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Fixes #3147: Parsing molecules from psithon and python left mol._initial_cartesian in a different unit. This aligns the units. Downstream this had the effect of breaking using molecules with angstrom units with an external_potential from python. ## Questions; - [x] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3148:1346,Test,Tests,1346,https://psicode.org,https://github.com/psi4/psi4/pull/3148,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This PR implements another variant of the Hückel guess.; The only modification is that the `k` parameter in the GWH rule is replaced by the updated rule from [doi:10.1021/ja00480a005](https://doi.org/10.1021/ja00480a005). ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3002:810,Test,Tests,810,https://psicode.org,https://github.com/psi4/psi4/pull/3002,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This PR implements level shifts. Closes #2216. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Level shifts in restricted methods; - [x] Level shifts in unrestricted methods; - [x] Level shifts in constrained unrestricted methods; - [x] Level shifts in restricted open shell methods. ## Questions; - [ ] Should the level shift be turned on by default? Since Psi4 does not have EDIIS/ADIIS, it will often fail to reach the convergence radius of DIIS. Level shifts may slow down convergence somewhat, but if they're turned off at large residual gradient (e.g. 1e-2) then the slowdown should be negligible in most cases. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2225:777,Test,Tests,777,https://psicode.org,https://github.com/psi4/psi4/pull/2225,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This PR removes the `Matrix::diagonalize` overloads deprecated in PR #2738 and closes #2693 as done/superseded. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Deprecated `PSI_API` member function `Matrix::diagonalize(Matrix* eigvectors, Vector* eigvalues, diagonalize_order nMatz = ascending)` is removed.; - [x] Deprecated `PSI_API` member function `Matrix::diagonalize(SharedMatrix& eigvectors, Vector& eigvalues, diagonalize_order nMatz = ascending)` is removed.; - [x] Deprecated `PSI_API` member function `Matrix::diagonalize(SharedMatrix& metric, SharedMatrix& eigvectors, std::shared_ptr<Vector>& eigvalues, diagonalize_order nMatz = ascending)` is removed. ## Checklist; - [x] Tests run by the CI are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2837:891,Test,Tests,891,https://psicode.org,https://github.com/psi4/psi4/pull/2837,1,['Test'],['Tests']
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This PR removes the `rsp` diagonalizer which was deprecated in #2798, and its supporting functions `tqli` and `tred2`, which are not used anywhere else.; These can be preserved in psi4attic after this PR is merged. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Deprecated `PSI_API` function `void rsp(int nm, int n, int nv, double *array, double *evals, int matz, double **evecs, double toler)` is removed. ## Checklist; - [x] Tests run by the CI are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2838:634,Test,Tests,634,https://psicode.org,https://github.com/psi4/psi4/pull/2838,1,['Test'],['Tests']
Testability,## Description; <!-- Provide a brief description of the PR's purpose here. -->; This PR removes the hardcoded list of functionals that contain omega and allows setting omega for any Libxc functional that contains it. Solves an issue described in #2641. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Omega can be set for any functional. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2643:448,Test,Tests,448,https://psicode.org,https://github.com/psi4/psi4/pull/2643,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This PR reworks and simplifies `libqt/probabil.cc`. Excessive conditionals are removed, sanity checks now throw instead of returning zero, and the `double` kludge is supplanted by `uint64_t`. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] `factorial` and `combinations` now return `uint64_t` instead of `double`, and take `const uint64_t` instead of `int`; - [x] `factorial` now throws if the result would overflow; - [x] `combinations` now throws if computing n-choose-k is impossible. ## Checklist; - [x] No new features; - [x] CI tests are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2907:806,test,tests,806,https://psicode.org,https://github.com/psi4/psi4/pull/2907,1,['test'],['tests']
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This PR solves an issue with the use of the native optimization flags, which are different in various compilers and often get misinterpreted. It looks like the best solution is to first check the brand of the compiler, and then try whether the brand-specific flag(s) work. Related issues https://gitlab.com/libxc/libxc/-/issues/361 and #2023. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2377:607,Test,Tests,607,https://psicode.org,https://github.com/psi4/psi4/pull/2377,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This adds the missing citation to Libxc in the manual's introduction. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2975:658,Test,Tests,658,https://psicode.org,https://github.com/psi4/psi4/pull/2975,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This changes the name of the controller for all three SAPT modules and standardizes their convergences as residual only with default of 1e-8. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3105:730,Test,Tests,730,https://psicode.org,https://github.com/psi4/psi4/pull/3105,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This is an implementation of the fitted version of the SAP guess, described in [J. Chem. Phys. 152, 144105 (2020)](https://doi.org/10.1063/5.0004046). The repulsive potential on every atom is fit in terms of error function potentials, which means that the guess can be evaluated with few two-electron integrals; namely. $$ {\bf F}^\text{SAP} = {\bf H} + {\bf V}^\text{SAP} $$. $$ V_{\mu \nu}^\text{SAP} = \sum_{A} (A|\mu \nu) $$. where $A$ is a fully contracted $1s$ function on each atom. I have no idea how the integrals work in Psi4. I followed [a Psi4Numpy example](https://github.com/psi4/psi4numpy/blob/master/Moller-Plesset/DF-MP2_NAF.py) @loriab hinted me at. The appears to compile; the only problem being the final assembly, i.e. the sum over the 3-center integrals. If anyone can tell me what I should be doing, help would be appreciated... Closes #2054 . ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Implement scheme and get something that matches ERKALE; - [ ] Use optimal storage. ## Questions; - [ ] Is the basis build call correct? Should I also add a new basis role somewhere?. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3036:1581,Test,Tests,1581,https://psicode.org,https://github.com/psi4/psi4/pull/3036,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This is an implementation of the fitted version of the SAP guess, described in [J. Chem. Phys. 152, 144105 (2020)](https://doi.org/10.1063/5.0004046). The repulsive potential on every atom is fit in terms of error function potentials, which means that the guess can be evaluated with few two-electron integrals; namely. $$ {\bf F}^\text{SAP} = {\bf H} + {\bf V}^\text{SAP} $$. $$ V_{\mu \nu}^\text{SAP} = \sum_{A} (A|\mu \nu) $$. where $A$ is a fully contracted $1s$ function on each atom. The implementation is not optimal, since I use `ao_eri` to compute the integrals. An optimal implementation would accumulate the auxiliary functions' integrals on-the-fly; however, optimization can be safely left to a later stage... Closes #2054 . ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Implement scheme and get something that matches ERKALE. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3039:1356,Test,Tests,1356,https://psicode.org,https://github.com/psi4/psi4/pull/3039,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This is for after #2861. ## User API & Changelog headlines. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Add option `psi4_SHGAUSS_ORDERING` to use `sss` (all CCA standard orderings internally). expert only! all tests will pass (this pulls over Andy Simmonett's fchk fix from #2537) except mints3, and this adds alternate refs for that, too. This by no means means that all exported formats are safe -- only the ones we test :-) ; - [x] Uses a new commit for dkh that has some build updates. also passes it blas that it uses and I apparently missed before. closes #2537. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) These changes fixed all test on a different branch. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2949:486,test,tests,486,https://psicode.org,https://github.com/psi4/psi4/pull/2949,6,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This is the variant of DirectJK I mentioned at the end of @davpoolechem's talk at PsiCon last Saturday. The idea is simple: instead of updating the reference every iteration, which is subject to creeping numerical noise, use a fixed reference density and JK matrix for all iterations. I also simplified some of the DirectJK code, and added missing documentation. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Should full formation still happen every N iterations? I don't know if this truly is less susceptible to numerical noise accumulation... ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3111:1077,Test,Tests,1077,https://psicode.org,https://github.com/psi4/psi4/pull/3111,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This pull request adds electrostatic embedding capabilities to the F-SAPT code. Previously, the point charges could only be assigned to the environment. Now point charges can be included with either the interacting fragments A and B or the external environment C. This PR adds support only for point charges. Future PRs can potentially add support for more complex external potentials but this is not intended here. The external potential interface is currently under revision in #2069. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Add electrostatic embedding to the F-SAPT code. ## Questions; - [ ] . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2131:764,Test,Tests,764,https://psicode.org,https://github.com/psi4/psi4/pull/2131,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This updates the Windows Azure for testing and conda build from 2016 to 2022 environment and 11 to 13 llvm. It's definitely needed soonish as 2016 is getting retired. I don't see any reason the llvm change should hurt the broad usability of the conda package, so I'm for trying it in the wild. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2415:115,test,testing,115,https://psicode.org,https://github.com/psi4/psi4/pull/2415,1,['test'],['testing']
Testability,## Description; <!-- Provide a brief description of the PR's purpose here. -->; This works with both test_fchk_writer and #2400 (needed for independent run of fchk()). Thank goodness the fchk tester had a dfocc (comparatively old-style storage) case. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2408:192,test,tester,192,https://psicode.org,https://github.com/psi4/psi4/pull/2408,4,"['Test', 'test']","['Tests', 'tester', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; To implement the SAP guess (#3036), I need to toy with the contraction coefficients. Currently, there is duplicated data in BasisSet, as the Libint2 shells are built alongside the basis set itself. The idea of this PR is to modularize the Libint2 shell data creation so that the data can be refreshed based on the data in the BasisSet. The PR also fixes an issue in that the `n_prim_per_shell_` member of BasisSet was never populated. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3037:1023,Test,Tests,1023,https://psicode.org,https://github.com/psi4/psi4/pull/3037,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Updates CMakeLists to pull libxc 7.0.0. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3231:628,Test,Tests,628,https://psicode.org,https://github.com/psi4/psi4/pull/3231,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; While testing PR https://github.com/psi4/psi4/pull/2756, I have discovered a regression introduced by an earlier PR (#2700) of mine.; Before `throw`ing, `psio_error()` tries to write some data to the scratch files. But if `psio_error()` is called due to a write error, and the scratch disk is completely full, then this write will also fail, leading to `psio_error()` getting called again, and an infinite recursion ensues. The source of the regression is that `psio_tocwrite()` ends up calling `wt_toclen()`, which has been enhanced in #2700 to use `psio_error()` if it fails.; This PR resolves the issue by not trying to write anything to scratch if `psio_error()` is called due to a write failure. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] None? This regression was new enough that no release suffered from it. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Do not call `psio_tocwrite()` in `psio_error()` if `errval == PSIO_ERROR_WRITE`. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2773:86,test,testing,86,https://psicode.org,https://github.com/psi4/psi4/pull/2773,1,['test'],['testing']
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; `DPD::buf4_sort(...)` has some problems, the main scope of the function is quite ~~polluted~~ cluttered and it is a behemoth of a function.; This PR attempts to improve that by moving the incore/out-of-core decision logic into a separate function and file. `DPD::buf4_sort_axpy(...)` had the same code duplicated. The new function uses `const` wherever possible, its integers are now `int64_t` (with the exception of irrep numbers - having >2 billion irreps seems unlikely) and the `incore` variable is now a `bool`. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] `DPD::buf4_sort(...)` and `DPD::buf4_sort_axpy(...)` are slightly easier to read and debug; - [x] Code duplication between `DPD::buf4_sort(...)` and `DPD::buf4_sort_axpy(...)` is reduced; - [x] Possible reduction in `int` overflow risk via `int64_t`. ## Checklist; - [x] CI tests are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2717:296,log,logic,296,https://psicode.org,https://github.com/psi4/psi4/pull/2717,2,"['log', 'test']","['logic', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; `DPD::buf4_sort(...)` is not exactly easy on the eyes. This PR attempts to improve that by reducing the scope pollution of the main scope of the function. Const is now used wherever appropriate. The `int` variables are suspect when it comes to overflowing, but this PR intends to be purely a cleanup that does not change any behavior, so all types are preserved as-is, modulo the addition of `const` qualifiers. Squash merge may be a good idea for this PR. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Make `DPD::buf4_sort(...)` slightly easier to read/debug. ## Checklist; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - [ ] Compiles with -Wshadow -Werror=shadow. ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2716:756,test,tests,756,https://psicode.org,https://github.com/psi4/psi4/pull/2716,2,['test'],['tests']
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; `Matrix::swap_rows` and `Matrix::swap_columns` do no seem to have any internal users, but since `Matrix` as a whole is `PSI_API`, it would be rude to suddenly remove them. This PR adds deprecation notices. The motivation for removal is that these two functions are the only internal users of the DSWAP BLAS interface. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] `PSI_API` functions `Matrix::swap_rows` and `Matrix::swap_columns` are now deprecated due to a lack of users. Unless someone speaks up, 1.8 will be the last release to have them. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Deprecation notices added to `matrix.h`. ## Checklist; - [x] No new features; - [ ] CI tests are passing. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2909:1077,test,tests,1077,https://psicode.org,https://github.com/psi4/psi4/pull/2909,1,['test'],['tests']
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; `Molecule::clear()` is currently almost a no-op, because it is calling `std::vector::empty()`, which is a getter function that does not modify the object. This PR corrects that. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] The `clear()` member function of `PSI_API` class `Molecule` now correctly clears `Molecule::atoms_` and `Molecule::full_atoms_`. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Use `std::vector::clear()` instead of `std::vector::empty()` in `Molecule::clear()`. ## Questions; - [ ] What is the user/caller expectation for the state of `Molecule::atoms_` and `Molecule::full_atoms_` after `Molecule::clear()` returns? In `molecule.h` the comment suggests it should be ""zeroed out"": https://github.com/psi4/psi4/blob/61c0b47982ceafd92f567934a29601610fbb1520/psi4/src/psi4/libmints/molecule.h#L137-L138 But that is not what `std::vector::clear()` does, it destructs all elements, leaving the vector with a size of zero. Moreover, the elements of `Molecule::atoms_` and `Molecule::full_atoms_` are `std::shared_ptr`, so what does ""zeroing"" really mean here?. Is the comment misleading as I suspect it is, or do callers of `Molecule::clear()` really expect it to preserve the size of `Molecule::atoms_` and `Molecule::full_atoms_`?. ## Checklist; - [x] No new features; - [ ] Tests run by the CI are passing. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2864:1694,Test,Tests,1694,https://psicode.org,https://github.com/psi4/psi4/pull/2864,1,['Test'],['Tests']
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; `block_matrix` should not let its callers discard the arrays it allocates. This PR adds the `[[nodiscard]]` attribute.; Also, if an allocation fails, `block_matrix` now throws instead of calling `exit(1)` and tells the user how many bytes it has tried and failed to allocate. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] PSI_API function `double **block_matrix(size_t n, size_t m, bool mlock = false)` now has the `[[nodiscard]]` attribute, as discarding its return value is a guaranteed memory leak (unless n or m is zero, in which case no allocation happens). ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] `[[nodiscard]]` attribute added to declaration and definition; - [x] `exit(PSI_RETURN_FAILURE)` replaced with `throw PSIEXCEPTION`; - [x] VScode can now parse the docstring of the function. ## Checklist; - [x] No new features; - [x] All tests run by the CI are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3104:1247,test,tests,1247,https://psicode.org,https://github.com/psi4/psi4/pull/3104,1,['test'],['tests']
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; `libqt/ras_set.cc` has a lot of commented-out code in it, some of it would not even compile anymore.; `qt.h` declares a pair of functions that are never defined, but would be used in the commented-out `ras_set` code.; This PR removes this dead code. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Commented out code is removed from `libqt/ras_set.cc`; - [x] Declarations of `int* get_frzcpi()` and `int* get_frzvpi()` are removed from `qt.h`. ## Checklist; - [x] No new features; - [x] Tests run by the CI are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2814:926,Test,Tests,926,https://psicode.org,https://github.com/psi4/psi4/pull/2814,1,['Test'],['Tests']
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; addresses #3099. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] fix libxc min to v6.1. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] fix some `assert()`. tests still pass on linux. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3103:543,assert,assert,543,https://psicode.org,https://github.com/psi4/psi4/pull/3103,5,"['Test', 'assert', 'test']","['Tests', 'assert', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; closes #2939 . ## User API & Changelog headlines; - [x] fix bug where `optimize(..., engine=""geometric"", molecule=mol)` would not run; - [x] undo some hack fixes and make distributed driver runs through QCFractal ""next"" branch more reliable by making array qcvars shaped numpy arrays. Works with QCFractal >=v0.50beta10. Show examples of using `get_psi_results()` to prepare the results of distributed driver runs in ""normal"" psi4 way. ## Dev notes & details; - [x] In the early days (before ddd entered psi4), all array-like pieces of AtomicResults came back as flat lists, so we had to ""plump"" them into e.g., (nat, 3) for gradient. Then, by the time of v1.6 and QCFractal master v15.8, the AtomicResults preserved all that, so we stopped using the plumper. Now in qcfractal next, they're back to lists again _and_ qcvars have been mingled with other properties, so both separation and plumping are required.; - [x] promote `get_psi_results` as a drop-in replacement after running distributed. It sets up a dummy wfn and qcvariables, just like an internal run, so one doesn't have to deal with picking results off the AtomicResult QCSchema.; - [x] Added labels to tests (mostly findif) so that one can catch all ddd-using tests with `pytest -m ""findif and cbs and nbody""`; - [x] set up a mechanism where can parameterize both pytests and ctests with a snowflake with minimum clutter. ## Questions; - [x] This won't work with current qcf release. I'll ask @bennybp to mint a beta10, then this should work. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review (for review, the 4th commit has the material changes. 3rd are test changes. 1st & 2nd are labeling and syntax.); - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2929:1246,test,tests,1246,https://psicode.org,https://github.com/psi4/psi4/pull/2929,6,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; fixes a couple full tests. with these and the ones Jonathon fixed, full tests should be clean again. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] the nbody-vmfc-hessian has one element of value 0.85 above reference by 1.2e-8 caused by adiis. not a big deal, so convcrit loosened from 1e-8 to 2e-8.; - [x] the new molden writer tests are nicely structured, but they use r_convergence=12 a lot for SCF, which doesn't tighten the criteria for SCF. so the new adiis tipped one test over the failure limit. (see below the original (r_conv=12) and tight (e_conv=12) SCF cycles w/ diis and adiis.) I've regenerated the reference molden.refs with e_convergence 12 and plain diis, then relaxed the convergence for normal running. no trouble with adiis. sound ok, @sgoodlett?; - [ ] @hokru, on the new dft_blocking_schemes test, I'm getting `OCTREE GRID POINTS:: computed value (293260.0) does not match (293259) by difference (1.0).` Is it reasonable to test for 293259 +/- 2 or so?. ```. Total Energy Delta E RMS |[F,P]|. @RHF iter SAD: -672.15146809832379 -6.72151e+02 0.00000e+00; @RHF iter 1: -672.63084564264716 -4.79378e-01 9.00814e-03 DIIS; @RHF iter 2: -672.71442224758289 -8.35766e-02 5.30043e-03 DIIS; @RHF iter 3: -672.74379684057214 -2.93746e-02 5.52535e-04 DIIS; @RHF iter 4: -672.74452788784220 -7.31047e-04 1.91489e-04 DIIS; @RHF iter 5: -672.74459677446487 -6.88866e-05 5.52833e-05 DIIS; @RHF iter 6: -672.74460689141483 -1.01169e-05 1.01025e-05 DIIS; @RHF iter 7: -672.74460730536885 -4.13954e-07 1.76374e-06 DIIS; @RHF iter 8: -672.74460731378190 -8.41305e-09 7.61045e-07 DIIS; Energy and wave function converged. @RHF iter SAD: -672.15146809832379 -6.72151e+02 0.00000e+00; @RHF iter 1: -672.63084564264716 -4.79378e-01 9.00814e-03 DIIS; @RHF iter 2: -672.71442224758289 -8.35766e-02 5.30043e-03 DIIS; @RHF iter 3: -672.74379684057214 -2.93746e-02 5",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2446:100,test,tests,100,https://psicode.org,https://github.com/psi4/psi4/pull/2446,5,['test'],"['test', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; the Windows conda package isn't working for some computers. A report (http://forum.psicode.org/t/how-to-run-psi4-on-windows-10/2174/16) is that compiling with AVX _does_ work. The current situation should be building with AVX2 (https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L145) and @kcpearce reports that the conda pkg still fails on his computer with AVX2 instructions, but this is worth a shot. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2292:509,Test,Tests,509,https://psicode.org,https://github.com/psi4/psi4/pull/2292,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; time to fix the full test suite again. these will help, though more PRs may be needed. ## Status; - [x] Ready for review; - [x] Ready for merge SQUASH",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2312:101,test,test,101,https://psicode.org,https://github.com/psi4/psi4/pull/2312,1,['test'],['test']
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; ~Ignore this for now. This is so I can get a build snapshot.~ It might well fail tests b/c needs qcel and qcng snapshots. Full tests is clean locally. Changes for the most part are RTG except for two lines noted below. UPDATE: go ahead and review, please. I'll take out the 2 improper lines noted below before merge. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] report FD G & H more fully in core and wfn vars; - [x] add MP2 Hessian testing to stdsuite; - [x] I guess the a-ccsd(t) docs changes didn't make it into #2241 ?; - [x] some cfour interface expansions that are really only useful for internal debugging. use the regex harvesting from qcng, not here; - [x] this bit https://github.com/psi4/psi4/compare/master...loriab:sept21qcdb?expand=1#diff-3abbb4f37a59cc2e6cfbff3f4cb73b312dfd94044a19f38b00bf7ae140db13e7R540-R541 needs removing before actual merge is considered. proper way to handle would be if the select_ccsd_gradient was smart enough to say ""can't do"" to FC gradients, so it'd fall back to FD by ene. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2293:161,test,tests,161,https://psicode.org,https://github.com/psi4/psi4/pull/2293,6,"['Test', 'test']","['Tests', 'testing', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; ~Note: this isn't going to pass until after #2946~. ## Dev notes & details; - [x] We had the odd situation where the install directories (GNUInstallDirs) were pretty flexible. But it wasn't quite flexible enough for the usual Windows install layout (see https://github.com/psi4/psi4/blob/master/conda/win/meta.yaml#L32-L41). And if you got those all in the right place, the paths computation in `run_psi4.py` (-> `bin/psi4`) and `psi4/__init__.py` wasn't quite as flexible as GNUInstallDirs allowed. So I modernized the lot with pathlib and hopefully systemitized it a bit, too.; - [x] There's a weird case on linux c-f where we're in a git repo, but it's not the psi git repo. Thus versioning is much confused. The versioner can now escape from that case and version as if tarball. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - [x] works for lin, mac, win conda-builds. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2948:883,Test,Tests,883,https://psicode.org,https://github.com/psi4/psi4/pull/2948,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; ~for now must enable with `-D ENABLE_IntegratorXX=ON`. recc installing catch2 first to avoid downloading each time.~. ~CI will fail because I added a integratorxx header to a file for trial, but haven't enabled the addon in the buildsys everywhere.~. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] optionally build integratorXX with `-D ENABLE_IntegratorXX=ON`. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3041:588,Test,Tests,588,https://psicode.org,https://github.com/psi4/psi4/pull/3041,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; <!--Adds clean-up recommended by LGTM-->. ## Checklist; - [ ] Tests added for any new features (no new features); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) (tests that run before changes also run after changes). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2038:78,Test,Tests,78,https://psicode.org,https://github.com/psi4/psi4/pull/2038,4,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; @andysim added the `dcft` module to Psi in 2010, as its pilot implementation. As the method was developed, @ssh2 decided that it was best to drop the `f` and name it `dct`. The abbreviation `dcft` hasn't been used in papers since 2012, and DCT papers since last year have just called the method density cumulant theory, cutting out the `f` entirely. This PR brings Psi up-to-the-present and calls the method `dct` everywhere. Now that we know what the method _is called_, this PR fixes a bug reported on the forums, where the method's density fitting basis set wasn't picked up by the input parser. This was the motivation for this massive PR, and it took one whole line of code. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Replaces `dcft` and `DCFT` with `dct` and `DCT`, throughout all C- and Py- side code; - [x] Added UpgradeHelper errors for users who try `energy('dcft')` and some such; - [x] Added PsiException errors for users who try a dcft option block; - [x] Added PsiException errors for users who try a dcft option; - [x] Updates the tests; - [x] Updates the samples; - [x] Updates the documentation (abbreviations kept when they are part of a paper title); - [x] Removed debug options which the code didn't even use anymore; - [x] Adds the one line of code needed to fix the instigating bug. ## Checklist; - [x] Every `ctest` test calling DCT is run and passes (14 dedicated DCT tests plus four additional tests); - [x] I've confirmed that you encounter the various errors when expected; - [x] I've manually checked the documentation. The only thing not working is the link to the `dct` folder, which won't exist until _after_ the PR is accepted. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1719:1117,test,tests,1117,https://psicode.org,https://github.com/psi4/psi4/pull/1719,4,['test'],"['test', 'tests']"
Testability,"## Description; @bennybp pointed out [here](https://github.com/psi4/erd/pull/5) that we need to be paying attention to thread safety in called libraries, even if they don't have OpenMP, because Psi4 does. This is trying to follow the guidance in [the venerable document (search `ifcoremt`)](https://software.intel.com/en-us/articles/threading-fortran-applications-for-parallel-performance-on-multi-core-systems). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Adds rtl_init and rtl_finalize calls. According to the sample code below, also supposed to set reentrancy, but I don't know what to do about that.; - [x] Drops clang-3.9 travis test that's a little slow. I'm told that clang 3.9 is the same as Mac/Distelli is running anyways.; * **User-Facing for Release Notes**. ## Questions; - [x] I don't know much about this, but it appears harmless, at least for Intel compilers. Going to let Travis test other build systems. Any thoughts?. ## Status; - [x] Ready to go. ```; /*; * Multithreaded C-Fortran mixed language test program; */. #include <stdio.h>; #include <stdlib.h>; #include <unistd.h>; #include <pthread.h>; #include <errno.h>; #include ""threadpool.h"". #include ""forreent.h"". #define NUM_THREADS 12; #define NUM_JOBS 10. /* definitions for Fortran Runtime library init/finalize */; extern void for_rtl_init_ (int *, char **);; extern int for_rtl_finish_ ( );; extern int for_set_reentrancy (int *);. /* declare the external Fortran function 'fpa' */; extern void fpa(int io, char *filename); . void job_thread(void *arg1, void *arg2);. int main(int argc, char **argv); {; threadpool tp;; int i;; int *reent ;; int fstat;. char filenames[NUM_JOBS][100];; int io[NUM_JOBS];. int io_status;; /* Call the Fortran Runtime library for initialization */; for_rtl_init_ (&argc, argv);; *reent = FOR_K_REENTRANCY_THREADED;; fstat = for_set_reentrancy( reent );; printf (""fstat %i \n"", fstat);. /* Create a thread pool of 12 thre",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/604:705,test,test,705,https://psicode.org,https://github.com/psi4/psi4/pull/604,2,['test'],['test']
Testability,"## Description; @dgasmith and I had to do some preliminary work to get the Hessian code extended, and here's the result. Essentially, we've centralized the construction of the core Hamiltonian and its derivatives, which ensures that different codes will correctly obey any new one electron contributions (field perturbation, MM point charges, ECPs, *etc.*) and derivatives thereof. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] @psi-rking: your perturbed CC gradient request should be addressed by this fix.; - [x] Test cases for DFOCC and CCENERGY gradients, with dipole field.; * **User-Facing for Release Notes**; - [x] Improved support for ECPs and external fields, and their gradients, in correlated calculations. . ## Questions; - [x] How should we handle the new signature for mol's `nuclear_repulsion_energy()`? The current solution is to mandate that the field be specified C++-side, but py-side just provides a default zero field. Another option would be to overload with an arg-less function, and provide a deprecation warning for that version (to force the programmer to think about whether they really mean to compute the nuc. energy ignoring the field). ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/844:584,Test,Test,584,https://psicode.org,https://github.com/psi4/psi4/pull/844,1,['Test'],['Test']
Testability,"## Description; @hokru recently reported that when he attempted to use `dfomp2` through `dfocc` to compute dipoles, he was not able to reproduce ORCA's RI-OMP2 to within even 0.01 a.u. I determined by comparison to my own Psi4Numpy implementation of DF-OMP2 that this was an error in the `dfocc` module and eventually tracked it down to `dfocc` sending the wrong orbitals to `OEProp`. The primary purpose of this PR was to fix that and get density-fitted orbital optimized properties hooked up to the driver. ...Unfortunately, adding a test that the remaining dipoles are correct required me to fix some other standing `dfocc` issues that prevent users from setting tight convergence (#1143). That in turn required quite a few test changes. While working through that, I also solved #1509. The 0.7 mHartree difference I was seeing was due to another bug in `dfocc`. It computed the MP2.5/MP3 energy by adding to the _SCF reference_ and not the current determinant. Those are different things in orbital-optimized methods. When you add in the correct reference energy, the disagreement reported in #1509 goes away. In brief, this PR fixes #1143 and fixed #1509. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix a bug where `dfocc` properties were incorrect; - [x] Add a test that the `dfocc` properties are now correct; - [x] Hook up `dfocc` properties to the driver; - [x] Fix a bug where DFOMP2.5/DFOMP3 energies could be incorrect depending on convergence settings; - [x] Simplified/Sanitized handling of convergence criteria in `dfocc`; - [x] Modified `dfocc` tests due to above. ## Checklist; - [x] `ctest -L dfo` and `ctest -L cdo` pass; - [x] `test_dipole.py` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1772:536,test,test,536,https://psicode.org,https://github.com/psi4/psi4/pull/1772,4,['test'],"['test', 'tests']"
Testability,## Description; A few additional tweaks for the Psi4 1.2 release. - Updates gCP alias function testing so that basis sets are applied for aliases.; - Hides DeepDiff import so that *most* of Psi4 is usable without this module.; - Updates the JSON spec to the V1 release.; - Ensures QCSchema input is correctly *copied* and not just updated. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1030:95,test,testing,95,https://psicode.org,https://github.com/psi4/psi4/pull/1030,1,['test'],['testing']
Testability,## Description; A few consequences of #2462 . ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2470:67,Test,Tests,67,https://psicode.org,https://github.com/psi4/psi4/pull/2470,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; A few dipole/quadrupole full tests evaded earlier passes. Also give Windows the right L2 after #2413 ; ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2494:45,test,tests,45,https://psicode.org,https://github.com/psi4/psi4/pull/2494,4,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; A few testing bugs and completing the pytest access route. Nothing controversial. Most of this PR is autogenerated. Due diligence on review can be achieved by examining:; * `empirical_dispersion.py`; * `addons.py`; * `extern1/input.dat`; * `tester.py`; * `test_addons.py`. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] fixed bug that wouldn't allow plain pytest of installed `psi4/` b/c would bring in incorrectly configured qcdb tests. workaround was to pytest `psi4/tests/`; - [x] add a couple corrections I had promised to #2536 but had forgotten to push; - [x] fixes #2548 by passing psi4's `-n` to qcng for dftd3/gcp/mp2d; - [x] corrects `dfmp2-freq2` ctest was registered as `dfmp2-freq1`; - [x] I realized externalpotentials weren't getting unset after a energy/grad/etc. command. This is probably a new bug after #2515 but didn't confirm. It's healed in DDD, but the solution didn't port, so I added the test and temporary workaround to extern1; - [x] Added feature to ctest_runner to allow directory structure to be copied into test scratch for psithon2. This is proven to work but needs a couple lines added to qcengine, so hidden for now.; - [x] Fixed resp addon tests that always failed in parallel. these write to fixed-name files that aren't configurable, so they need to be chdir'd, if not run serially.; - [x] Added a script tester.py that checks some config stuff and writes out missing `test_input.py`. See the goals there for details. Running it produces a list of flaws like the below. I'll post this to an issue for later attention. Someday this can be hooked up to GHA and replace the perl script.; ```; Complaints; ----------; - [ ] 1. cc5: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 2. cookbook/manual-sow-reap: missing cmake directory registration. `vi cookbook/CMakeLists.txt`; - [ ] 3. cookbook/manual-sow-reap: missing CMakeLists. `vi cookbook/manual-sow-reap/CMakeLists.txt",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2549:22,test,testing,22,https://psicode.org,https://github.com/psi4/psi4/pull/2549,4,['test'],"['tester', 'testing', 'tests']"
Testability,"## Description; A minor correction to the test file of rhf-hessian. Unfortunately, this wasn't picked ; before the merge of https://github.com/psi4/psi4/pull/757. ; ## Status; - [X] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/894:42,test,test,42,https://psicode.org,https://github.com/psi4/psi4/pull/894,1,['test'],['test']
Testability,## Description; A rebase of #2135 for CI studies. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2580:234,Test,Tests,234,https://psicode.org,https://github.com/psi4/psi4/pull/2580,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; A recent forum request needed to use serialized wavefunctions with `detci`. That's a very easy one, and one I can easily see myself needing as I start getting into some FCI benchmarking, so might as well fix it now. I decided to use `_default_psio_lib_` rather than making a new PSIO object because `_default_psio_lib_` is used elsewhere in `detci`. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] `detci` has now escaped #1851. ## Checklist; - [x] All `ci` ctests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1861:189,benchmark,benchmarking,189,https://psicode.org,https://github.com/psi4/psi4/pull/1861,1,['benchmark'],['benchmarking']
Testability,"## Description; A small, simple companion to https://github.com/psi4/psi4/pull/2833. This updates to the reference output files for the tests that use CompositeJK methods (linK-1, linK-2, linK-3, and scf5), especially notable since the current reference files use `DIRECTDFJ` for composite `SCF_TYPE` methods instead of the current `DFDIRJ`. ## User API & Changelog headlines; N/A. ## Dev notes & details; - [X] Regenerate the reference output files for the tests linK-1, linK-2, linK-3, and scf5. ## Questions; N/A. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [X] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2954:136,test,tests,136,https://psicode.org,https://github.com/psi4/psi4/pull/2954,5,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; A step toward #883 by improving qcvar capabilities on Wfn and localizing some modules. ## Todos; - [x] removes or py3-izes scripts; - [x] addresses the floats part of #1375 by; - expanding the variable operations on `Wavefunction`; - making their storage always uppercase and their access case-insensitive; - dev alert: any code that wrote to wfn array directly in non-UC (e.g., `wfn.variables_[""lower or mixed-case var""] = val`) needed to be changed to `wfn.set_variable`; - [x] adds runtime FutureWarning to renamed fns: `psi4.core.get_variable`, psi4.core.get_variables`, `Wavefunction.get_variable`; - [x] improves the wfn localization of qcvars for DFT, scf_helper, DFMP2, OEPROP. trying to set on `wfn` c-side, then just copy into `P::e.globals` in proc.py.; - [x] moves DETCI, DFMP2 entirely to qcvar passing on Wfn. OCC, DFOCC, FNOCC do so for mp2-like only.; - [x] adds some functional-including qcvars for DFT; - [x] BREAKS8; - remove `SCS-MP2 OPPOSITE-SPIN CORRELATION ENERGY` and `SCS-MP2 SAME-SPIN CORRELATION ENERGY` from dfmp2 `Wavefunction.variables_`; - remove MP2 psivars from double-hybrid DFT final return; - `SCS-MP2 * ENERGY` now are defined (6/5, 1/3) quantities. For the user-influenceable vars, it's `CUSTOM SCS-MP2 * ENERGY`; - `core.variable` now throws when you access a key not set. This is what `Wavefunction.variable` did before, but `core.variable` used to just create the key and set to 0. ## Questions; - [ ] FutureWarning provides the offending line. However, this is complicated by our promoting the get_variable namespace and the PsiAPI and Psithon calling routes. It's going to be hard to get this offending line printing universally right. It's hit and miss now. ## Checklist; - [x] full tests. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1381:1743,test,tests,1743,https://psicode.org,https://github.com/psi4/psi4/pull/1381,1,['test'],['tests']
Testability,## Description; A test case for dgasmith's orbital rotation code using an ROHF reference.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/585:18,test,test,18,https://psicode.org,https://github.com/psi4/psi4/pull/585,1,['test'],['test']
Testability,"## Description; A typo in the overlap integral second derivatives caused errors in the analytic hessians. The error seems to be confined to one of the three contributions to matrix elements where the angular momentum in the bra and ket differ, and only when the derivatives both refer to the same perturbation; which is why the code made it through the initial tests. I'm still trying to wrap my head around exactly why those tests work, so I'd like a day or two before this is ready to merge. My sincere apologies to all whom this bug inconvenienced. Fixes #791 and #901. ## Todos; Notable points that this PR has either accomplished or will accomplish. * **User-Facing for Release Notes**; - [ ] Fixed a bug in the analytic Hessian code. ## Questions; - [x] Which extra tests do you have in mind, @loriab?. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/903:361,test,tests,361,https://psicode.org,https://github.com/psi4/psi4/pull/903,3,['test'],['tests']
Testability,"## Description; According to [clang source](http://llvm.org/svn/llvm-project/cfe/trunk/lib/Frontend/InitPreprocessor.cpp) (about half way down the page), clang always reports version 4.2.1 when using ```__GNUC__```, ```__GNUC_MINOR__```, ```__GNUC_PATCHLEVEL__```. This PR updates the version tester to use ```__clang_major__```, ```__clang_minor__```, ```__clang_patchlevel__``` when clang is detected. This issue appeared when using Intel compilers on a Mac. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/579:293,test,tester,293,https://psicode.org,https://github.com/psi4/psi4/pull/579,1,['test'],['tester']
Testability,"## Description; Add HF- and PBEh-3c capabilities, now that the former have been verified from Orca and the latter through S. Grimme private communications. ## Todos; * **Developer Interest**; - [x] gcp smoke tests going to pytest PR; - [x] write a bit of docs; - [x] So this is where my compare_values improvements ran off to. Now have a toggle to fail or not and can check mismatch by val, not just by order of magnitude value.; - [x] Add `gcp` interface, but not as advanced as `dftd3` b/c not writing to a file, just takes one of the pre-def values. ; * **User-Facing for Release Notes**; - [x] Semi-semiempirical methods HF-3c and PBEh-3c of Grimme can now be accessed (with `dftd3` and `gcp` executables detectable in PATH). Access through `energy('hf3c')` and `energy('pbeh3c')`. Can run with or without preferred basis set specified (minix and def2-msvp, respectively). ## Questions; * @dgasmith, this'll need a little adaption for 1.2. ## Status; - [x] Ready to go. Not averse to a squash.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/630:208,test,tests,208,https://psicode.org,https://github.com/psi4/psi4/pull/630,1,['test'],['tests']
Testability,"## Description; Add PSI_API to all functions called by Forte (also see #955, there might be some duplication to address). ## Todos; This PR exposes C++ functions/classes that are required by Forte. . ## Checklist; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/958:254,test,tests,254,https://psicode.org,https://github.com/psi4/psi4/pull/958,2,['test'],['tests']
Testability,"## Description; Add PSI_API to libmints/multipolesymmetry.h, so that it can support a version of v2rdm_casscf plugin. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Feature1; * **User-Facing for Release Notes**; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1131:347,Test,Tests,347,https://psicode.org,https://github.com/psi4/psi4/pull/1131,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Add ScreeningType::None as a user option and sets ScreeningType::Schwarz as the default. This should allow use of mixed basis set types to be used in integrals as well. ## User API & Changelog headlines; N/A. ## Dev notes & details; - [X] Breaks out of setup_sieve() in twobody.cc before exception can be thrown; - [X] Adds ""NONE"" to list of options in read_options.cc. ## Checklist; - [X] Tests added for any new features; - [X] All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2973:406,Test,Tests,406,https://psicode.org,https://github.com/psi4/psi4/pull/2973,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Add a couple of missing stub files from my previous PR, fixes #1146",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1147:40,stub,stub,40,https://psicode.org,https://github.com/psi4/psi4/pull/1147,1,['stub'],['stub']
Testability,"## Description; Add cct3 plugin. Patch liboptions. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] add build connection, proc.py connection, and token smoke test; - [x] fix embarrassing bug where enum-like string options weren't validating when set in local scope. that is, `set guess nonsense` would protest, but `set scf guess nonsense` would pass. this isn't perfect as validation occurs against a union of allowed values among different local scopes, but it's an improving patch.; - [x] @edeustua is going to rename the repo to plain `cct3`, so this'll need a name adjustment pass.; - this is connected with https://github.com/piecuch-group/psi4_cct3/pull/2; - note that cct3 builds slowly as it has some hefty fortran files. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1934:207,test,test,207,https://psicode.org,https://github.com/psi4/psi4/pull/1934,4,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; Add rotational strength as new property, which has become available in adcc 0.14.3. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [X] Rotational strength for all ADC methods from adcc; - [x] Velocity gauge for oscillator strength. ## Questions; - [x] Adcc now allows oscillator strengths to be computed in both velocity and length gauge. What is the canonical way to expose this in Psi4?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1892:473,Test,Tests,473,https://psicode.org,https://github.com/psi4/psi4/pull/1892,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; Add set_Lagrangian in Wavefunction. Also expose `C_DGEQP3` function. . ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) `ctest -L quick` all passed. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2064:141,test,tests,141,https://psicode.org,https://github.com/psi4/psi4/pull/2064,2,['test'],['tests']
Testability,"## Description; Added PSI_API macro to libqt/reorder_qt.cc functions and corresponding libqt/qt.h. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - Exposes libqt/reorder_qt() and libqt/reorder_qt_uhf() to plugins. ## Checklist; - [X] All or relevant fraction of full tests run. ## Status; - [X] Ready for review; - [X] Ready for merge. ## Comment; This seems pretty trivial, but I haven't made a PR in a long, long time...",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1212:312,test,tests,312,https://psicode.org,https://github.com/psi4/psi4/pull/1212,1,['test'],['tests']
Testability,## Description; Added PSI_API to OEProp for use in external pluggins. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1603:245,Test,Tests,245,https://psicode.org,https://github.com/psi4/psi4/pull/1603,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Added a couple of new features to cubeprop. The functionality seems to work, but the PR is rather unpolished. An illustration of me while writing this PR can be found here:. https://ih0.redbubble.net/image.511550362.9563/flat,1000x1000,075,f.u1.jpg. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Implements printing of ECP electrons, issue #1136 ; * **User-Facing for Release Notes**; - [x] Added keyword `""FRONTIER_ORBITALS""` to cubeprop tasks. This computes the alpha HOMO and LUMO (if nalpha == nbeta), or the highest-energy doubly occupied (DOMO), the singly occupied (SOMO) and the unoccupied (LUMO) orbitals of both spins.; - [x] Added keyword `""DUAL_DESCRIPTOR""` to cubeprop tasks. Computes (for closed shell systems) the dual descriptor function (ie. the difference of the Fukui functions) from the HOMO and LUMO. Some references: [10.1021/jp046577a](http://dx.doi.org/10.1021/jp046577a) and [10.1007/s10910-014-0437-7](http://dx.doi.org/10.1007/s10910-014-0437-7). ## Checklist; - [x] Add documentation of the new features to the manual.; - [X] Add tests; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1138:1143,test,tests,1143,https://psicode.org,https://github.com/psi4/psi4/pull/1138,3,['test'],['tests']
Testability,"## Description; Added a dictionary-based method for implementing density functionals. All non-dispersion versions of original functionals are working with some exceptions, the new definition of functionals has ""TEST-"" prefix for now. Not working functionals are: HF+D and HJS-B88 which do not run, HF3C for unknown reason, B97-D which should be -D2 not -D3 corrected in master. Some dispersion corrected methods already implemented - all BLYP functionals, for example. Script used for testing attached:; [test.dat.txt](https://github.com/psi4/psi4/files/1735039/test.dat.txt). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fix for Issue #920 ; - [x] Easy implementation of new functionals; - [x] LibXC parameters (ALPHA, BETA, OMEGA) now exposed to python; - [x] Check functionals against Q-Chem; - [ ] oPBE-D, oTPSS-D, oPWLYP-D ,oBLYP-D, TPSSh-D3BJ - not included in PR #880 ; - [x] B97-D; - [x] wB97X-D3 - needs tweaks - was disabled.; - [x] DSD-***; - [x] [PBE]HF3C; * **User-Facing for Release Notes**; - [ ] Eventually: let user pass a dict to psi4 with custom functionals? . ## Questions; - [ ] What do you think about the current interface?. ## Status; - [x] Dashparams for functionals need to be migrated too.; - [x] Ready to go - from my PoV at least.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/922:211,TEST,TEST,211,https://psicode.org,https://github.com/psi4/psi4/pull/922,4,"['TEST', 'test']","['TEST', 'test', 'testing']"
Testability,"## Description; Added and tested the following functionals. For the last two, unfortunately no bench value is provided.; ```; Functional: libxc : rob qchem; Comparison SOGGA11: -76.3720792686 : nan 3.84e-05 ; Comparison SOGGA11-X: -76.3569745367 : nan 1.10e-05 ; Comparison M06-L: -76.3766432198 : nan 1.95e-06 ; Comparison MN12-L: -76.3109178757 : nan 3.84e-05 ; Comparison MN15-L: -76.3001901669 : nan 5.49e-06 ; Comparison MN15: -76.3017521834 : nan nan ; Comparison PBE0-DH: -76.1613318950 : nan nan ; ```. Added worker functions for SCAN family of functionals, however without XC_MGGA_C_SCAN (which is available in LibXC 3.0.1) they won't work - commented out. See http://forum.psicode.org/t/libxc-density-functionals/589/",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/904:26,test,tested,26,https://psicode.org,https://github.com/psi4/psi4/pull/904,1,['test'],['tested']
Testability,## Description; Added casts to long int to prevent integer overflow in SAPT amplitudes. ## Checklist; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1364:142,test,tests,142,https://psicode.org,https://github.com/psi4/psi4/pull/1364,2,['test'],['tests']
Testability,"## Description; Added the one line `ao_multipole_potential` function to `export_mints.cc`. This allows the user to access one-center integrals from the python interface. The most common use case for this is to calculate electrostatic potential and field from an auxiliary basis set expansion of the electron density. ## User API & Changelog headlines; - added `ao_multipole_potential` to `export_mints.cc`. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - Makes no changes to existing `export_mints.cc`; - Adds a function to grab One Body Integrals for a given basis set. ## Checklist; - [x] [All or relevant fraction of full tests run]. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2744:813,test,tests,813,https://psicode.org,https://github.com/psi4/psi4/pull/2744,1,['test'],['tests']
Testability,"## Description; Address issue #2087. Specifically:. On `numpy.rst`:; 1) Updated Numpy quickstart guide link; 2) Updated Psi4Numpy Repo link; 3) Updated psi4.{Matrix, Vector, Dimension} -> psi4.core.{Matrix, Vector, Dimension}; 4) Added link to Psi4's Symmetry quick guide. On `numpy_helper.py`:; 1) Updated docstring example to `psi4.core.Matrix`. . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ]. ## Questions; - [ ] Section ""Array to Matrix"" and ""Matrix to Array"" print and run the docstring. For ""Matrix to Array"" the example can be run with no problem. But ""Matrix to Array"" can only be run by its own class. Should this example be updated as well? e.g. replace both examples of; https://github.com/psi4/psi4/blob/master/psi4/driver/p4util/numpy_helper.py#L99 with:. ```; >>> data = np.random.rand(20,1); >>> vector = psi4.core.Matrix.from_array(data); ```; My concern is that the example would not be calling the function directly. What would be the best way to proceed?. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2089:1057,Test,Tests,1057,https://psicode.org,https://github.com/psi4/psi4/pull/2089,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; Addresses #1362 . This PR will modify the ShellPair struct used throughout the ERI code. This object is an intermediate in integral calculations that describes the overlap between two basis set shells. Each shell pair is composed of gaussian primitives pairs. Many of these primitive pairs don't make a significant contribution to the integral calculations and can be screened via the overlap term. This PR will also modernize the ShellPair object by replacing C++ arrays with `std::vector` and remove explicit memory-related operations. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Functional `std::vector` based ShellPair; - [x] Primitive Screening in new ShellPair; - [x] Remove old ShellPair struct. ## Questions; - [ ] What should we use for the overlap threshold? It's currently set at ~~10e-10~~ 10e-12. This doesn't affect the SCF energy in the handful of molecules I've tested. I may have to investigate other codes. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All ~~or relevant fraction of full~~ tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1411:948,test,tested,948,https://psicode.org,https://github.com/psi4/psi4/pull/1411,4,"['Test', 'test']","['Tests', 'tested', 'tests']"
Testability,"## Description; Addresses #1431 . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Changes ORBSYM (the symmetry of each orbital) from Psi4's internal convention of ordering irreps to the traditional FCIDUMP ordering; - [x] Adds ISYM (the symmetry of the overall wavefunction); - [x] Updates the `fcidump` test to match new ordering. ## Questions; - [x] Does this change in convention break anything in Psi4? (Or anything that uses Psi4?); - [x] Since I altered the tests to match the output, how to verify correctness of this change?. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1453:354,test,test,354,https://psicode.org,https://github.com/psi4/psi4/pull/1453,4,['test'],"['test', 'tests']"
Testability,"## Description; Addresses #1724 by telling QCEngine to parent the scratch of dftd3 and mp2d into `$PSI_SCRATCH`. Contrary to what I said in that issue, the dftd3 parameters are written to local working dir (that is, scratch), not to $HOME. There's one other qcng call. It's `qcdb.Molecule.run_dftd3`. I really don't want to be calling `core` there, and it only runs in tests, so leaving that for now. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1725:369,test,tests,369,https://psicode.org,https://github.com/psi4/psi4/pull/1725,1,['test'],['tests']
Testability,"## Description; Addresses #885 by refactoring N-Body driver to three newly independent functions, driven by the existing `nbody_gufunc()`:; - `build_nbody_compute_list()`: Builds list of all N-body computations to be performed; - `compute_nbody_components()`: Performs given N-body computation(s), could be exploited as pleasantly parallel; - `assemble_nbody_components()`: Stitches components back together into _bona fide_ N-body energies (currently standard behavior of N-body driver). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - Opportunity for ""pleasantly parallel"" N-body computations; * **User-Facing for Release Notes**; - UI to N-Body driver unchanged; - Standard N-body calls, e.g., `energy(..., bsse_type='cp')` retain current functionality via `nbody_gufunc()`. ## Questions; - [x] Docstring styleguide: For the new functions, should the docstrings be in NumPy format or should they look more like the docstring in `nbody_gufunc()` so that sphinxman can scrape them for the manual?. ## Checklist; - [x] Tests added for any new features (existing tests sufficient); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/975:1082,Test,Tests,1082,https://psicode.org,https://github.com/psi4/psi4/pull/975,4,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Addresses (TODO: PAO slices) from original DLPNO-MP2 PR (#2093), reducing the scaling and storage costs of `Qia` integrals in DLPNO-MP2 from quadratic to linear. Request review from @zachglick before merge. ## Dev notes & details. ## Questions. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2851:281,Test,Tests,281,https://psicode.org,https://github.com/psi4/psi4/pull/2851,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; Addresses a linker warning when building on OSX.; Original change in 703c8a07b238249134424fd938374eae01d8c5af.; related: https://stackoverflow.com/questions/9894961/strange-warnings-from-the-linker-ld. example of the warning:; ```; ld: warning: direct access in function '__GLOBAL__sub_I_blas_diis.cc' from file 'psi4/psimrcc/libpsimrcc.a(blas_diis.cc.o)' to global weak symbol '__ZNSt6vectorISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ESaIS7_EED1Ev' from file 'CMakeFiles/core.dir/create_new_plugin.cc.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.; ```. ## Checklist; - [x] quick tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2129:734,test,tests,734,https://psicode.org,https://github.com/psi4/psi4/pull/2129,1,['test'],['tests']
Testability,## Description; Addresses issue #2379. IBOLocalizer is a MO localizer that exists in the FISAPT branch. Moving it to libmints cleans up the code. ## Checklist; - [x] All fsapt tests run; - [x] FSAPT tests passing; - [x] FSAPT-D tests passing. ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2385:176,test,tests,176,https://psicode.org,https://github.com/psi4/psi4/pull/2385,3,['test'],['tests']
Testability,"## Description; Addresses issues highlighted in #1600:; - energies and radii are now sorted based on radius of the diatomic; - initial guess for `r_e` is now the point of minimum energy; - check for number of points around minimum: if fewer than three on either side, print out a warning. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Addresses #1600 . ## Questions; - [ ] Handling warnings? Do we need a special tag?. ## Checklist; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1601:525,test,tests,525,https://psicode.org,https://github.com/psi4/psi4/pull/1601,2,['test'],['tests']
Testability,"## Description; Adds ECP capabilities by interfacing the integrals written @robashaw. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] ECP SCF energies.; - [x] ECP gradients by finite differences in Python.; - [x] Test case(s) and documentation.; - [x] Make sure frozen core code doesn't add contributions from ECP bearing atoms.; - [x] Add / document more basis sets, and add ECP info to existing Def2 series (w/help from @loriab). * **User-Facing for Release Notes**; - Effective Core Potentials available for SCF energies and gradients, as well as post-SCF energies.; - Def2 family of basis sets available for all atoms supported by those basis sets. Followup projects include:; - Add fully analytic when derivative integrals are available.; - Add CPHF terms and consolidate the OE derivatives from scfgrad and mp2grad.; - Try to clean up Python/C++ parsing and processing of basis sets. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/681:280,Test,Test,280,https://psicode.org,https://github.com/psi4/psi4/pull/681,1,['Test'],['Test']
Testability,"## Description; Adds Goerigk's D3 versions of B97M-V, wB97M-V, wB97X-V; https://pubs.acs.org/doi/10.1021/acs.jctc.8b00842. Absolute and relative energies added from L. Georigk. S22 MADs in SI are also reproduced. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] fixes #1188 ; - [x] B97M-D3(BJ), wB97M-D3(BJ); - [x] wB97X-D3(BJ) (of wB97X-V origin); - [x] revTPSS-NL parameters from Kruse,Banas,Sponer (JCTC 'just accepted'); - [x] moves rest of the post-scf NL logic to python. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1320:510,log,logic,510,https://psicode.org,https://github.com/psi4/psi4/pull/1320,4,"['Test', 'log', 'test']","['Tests', 'logic', 'tests']"
Testability,"## Description; Adds Python interfaces and code to semicanonicalize MCSCF orbitals. ## Todos; * **Developer**; - [x] Tested to make sure resulting orbitals diagonalize docc, actv, and virt blocks of average Fock matrix. ## Questions; - [x] By default MCSCF orbitals are semicanonicalized, unless user requests natural orbitals. This seems the most sensible choice, OK with other devs?. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/722:117,Test,Tested,117,https://psicode.org,https://github.com/psi4/psi4/pull/722,1,['Test'],['Tested']
Testability,"## Description; Adds STO-6G, uses same jkfit/ri bases as STO-3G. . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [X] Adds STO-6G to list of basis sets. ## Questions; - [ ] Is a test needed?. ## Status; - [X] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1853:225,test,test,225,https://psicode.org,https://github.com/psi4/psi4/pull/1853,1,['test'],['test']
Testability,## Description; Adds a basic memory check for the construction of the `Qso` DF Tensor.; This is e.g. needed for large (~1k bfs) (FNO)-DF-CC calculations where the tensor construction may become the main memory bottleneck. Closes #1372 . ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2382:291,test,tests,291,https://psicode.org,https://github.com/psi4/psi4/pull/2382,2,['test'],['tests']
Testability,## Description; Adds a constructor to `Wavefunction` taking a reference wavefunction as argument. The body of the CTOR performs:; ```; shallow_copy(reference_wavefunction);; set_reference_wavefunction(reference_wavefunction);; ```; which seemed to be otherwise copy-pasted in correlated wavefunction CTORs. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Add CTOR from `SharedWavefunction` in `Wavefunction` class ; - [x] Rework CTOR in `CIWavefunction` to use the new CTOR in the base class.; - [x] Mark one-parameter CTOR for `CIWavefunction` as `explicit`; - [x] Use delegating CTOR for one-parameter CTOR of `CIWavefunction`. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1277:700,Test,Tests,700,https://psicode.org,https://github.com/psi4/psi4/pull/1277,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Adds a few classes to the PSI_API list so one of my plugins will run. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] plugins can access DFJK, PKJK, VBase, and BasisFunctions classes. ## Checklist; - [x] passes smoke, quicktests subsets of tests. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/981:323,test,tests,323,https://psicode.org,https://github.com/psi4/psi4/pull/981,1,['test'],['tests']
Testability,"## Description; Adds a few functionals (SCAN0, revSCAN0, SCAN, revSCAN, BMK, revM06-L).; ~Enables `dft_bench_i*` tests for SCAN, SCAN0, revPBE, SOGGA, SOGGA11, MN12-SX, MGGA_MS2h, MN12-L, BMK, N12, MGGA_MVS, PKZB, MN15-L, PBE50, MGGA_MVSh, SOGGA11-X, M06-L, N12-SX, PBEOP, MPW1LYP and GAM.~; Enables all reference values in `dft_bench_i*` tests, now sorted alphabetically. Functionals not present in Psi4 are automatically ~marked with `xfail`~ skipped - this currently includes B3TLAP, BP86VWN, LRC-BOP, PBEsol, t-HCTH, t-HCTHh, wM05-D and wM06-D3, in addition to wB97X-D3 which was already marked `xfail`. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] adds SCAN and SCAN0; - [ ] tests for revSCAN, revSCAN0, revM06-L are missing - if anyone has access to these in other codes, I'd appreciate reference values!. ## Checklist; - [x] Tests added for functionals, where available; - [x] `dft_bench_interaction` and `dft_bench_ionization` pass. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1597:113,test,tests,113,https://psicode.org,https://github.com/psi4/psi4/pull/1597,4,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Adds a generalized Davidson solver to solvers.py. Issue #886. @dgasmith @amjames . ## Todos; * **Developer Interest**; - [x] General Davidson solver in python, takes an arbitrary number of roots, the convergence tolerance and maximum number of guess vectors. ## Questions; - [ ] Should the solver do all operations with psi4.core.Matrix functions? Currently, I’m using a QR decomposition in numpy to orthogonalize the added guess vectors with respect to the previous guess vectors. - [ ] I also need to change the code to handle a list of psi4.core.Matrix objects. Can I assume that this would be a list of guess vectors, with their second dimension being 1?. - [ ] Since this is a general solver, should I be worrying about irreps?. ## Checklist; - [ ] Currently takes in and returns numpy arrays, needs to take in and return a list of Psi4.core.Matrix objects; - [ ] May implement RHF stability analysis as a test case. ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1080:927,test,test,927,https://psicode.org,https://github.com/psi4/psi4/pull/1080,1,['test'],['test']
Testability,"## Description; Adds a helper functions to aid in options parsing from a Python input. For example currently one must do:. ```python; psi4.core.set_global_option(""SCF_TYPE"", ""DF""); psi4.core.set_global_option(""BASIS"", ""6-31G""); ...; ```. Through the new helper you can set options by:; ```python; psi4.set_options({""SCF_TYPE"": ""DF"",; ""BASIS"": ""6-31G""}); ```. The question comes into play of what about local options:. Scheme 1:; ```python; psi4.set_module_options(""SCF"", {""SCF_TYPE"": ""DF"", ...}); ```; or; ```python; psi4.set_module_options({""SCF"", {""SCF_TYPE"": ""DF"", ...},; ""DFMP2"", {""MP2_TYPE"": ""DF"", ...}}); ```. Scheme 2:; ```python; psi4.set_options([[""SCF_TYPE"", ""DF""], # 2 parameters - global; [""SCF"", ""SCF_TYPE"", ""DF""]]) # 3 parameters - local; ```. Scheme 3:; ```python; psi4.core.set_local_option(""SCF"", ""SCF_TYPE"", ""DF""); ```. Scheme 3 is the current setup where we leave local options alone as they are not all that common. . From writing quite a bit of Python-based Psi4 this is quite annoying and *something* needs to be done with globals at the very least. Hopefully we can figure out a logical local scheme as well. . As a note we are looking into ways to override global options. For example, the following could be a scheme that would accomplish this:. ```python; mol = psi4.geometry(""He""); opt = {""SCF_TYPE"": ""DF""}; psi4.energy('SCF', molecule=mol, options=opt); ```. Thoughts on any of the choices?. ## Questions; - [x] Decision on global options input; - [x] Decision on local options input. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/511:1102,log,logical,1102,https://psicode.org,https://github.com/psi4/psi4/pull/511,1,['log'],['logical']
Testability,"## Description; Adds ability for psi4.set_memory() to take unit-containing string as an argument, so that; `psi4.set_memory('30 GB')` behaves as would be expected. ## Todos; * **User API Changes**; - `int`, `float`, and `str` argument types supported; - `int` and `float` type arguments taken literally as number of bytes of memory to be set; - `str` type arguments must have units attached, e.g., `'20 mb'`, and are case-insensitive; - Added return of the amount of memory set; - renamed underlying fn to `psi4.core.set_memory_bytes(); - Arranged for inputparser to use the same psi4.set_memory() as psiapi, so now kib/mib/gib/tib avail. in input; - Correct the Psi4 and SCF headers which were computing MB and labeling MiB; - Add and test some bad examples of mem setting; - Add a minimum memory (250 MiB), adjust the default mem to 500 MiB. ## Questions; - [x] Currently, arguments of type `str` **MUST** have units. Should we allow users to input unitless numbers as `str`, to be taken literally? Or, if they wish to do that, should they just input as `int` or `float`? Consensus is, No, string args must have unit. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/641:736,test,test,736,https://psicode.org,https://github.com/psi4/psi4/pull/641,1,['test'],['test']
Testability,"## Description; Adds ability to call Axilrod-Teller-Muto (ATM) 3-body dispersion correction from Grimme's DFTD3. Fixes #1407 . ## Todos; - [x] Callable ATM correction from DFTD3 using `<func-name>-atmgr`; - [x] Moves all the dftd3 interface stuff out of psi and now calls qcengine MolSSI/QCEngine#46; - [x] Adds mp2d energies, also through qcengine. ## Questions; - [x] I've added QCEngine as if it were a required dependency. This is debatable, but there'll be lots of things we'll want to run this way, possibly efp/efp, geometric, pyoptking, etc. Let's debate. ## Notices; - For this month as things move quickly, I'm not copying (light py) packages over from conda-forge to psi4 channels. You'll have to `-c psi4/label/dev -c conda-forge` during `conda install` at times. (drat, there's a libxc on c-f and old qcel on psi4, which means that there's not a good channel ordering ...). ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1491:907,Test,Tests,907,https://psicode.org,https://github.com/psi4/psi4/pull/1491,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Adds an initial implementation of the E(30)exch-ind SAPT correction without the single exchange (S^2) approximation, introduced in https://doi.org/10.1063/5.0035050. Original Psi4NumPy implementation by Jonathan Waldrop (@jwaldrop107), ported to C++ by Konrad Patkowski. . The resulting numbers for a bunch of tests match the SI of the above paper and the calculation takes a tiny fraction of the total SAPT2+3 time. E(30)exch-ind,resp is approximated by scaling unrelaxed E(30)exch-ind in the same way as before and is also printed. ## Usage; The nonapproximated E(30)exch-ind and E(30)exch-ind,resp numbers will be calculated by `energy('sapt2+3')` if `do_ind30_exch_sinf` is set to `True`. . ## Technical Questions and Unresolved Issues; - [x] There's certainly room for code cleanup.; - [x] I think `libsapt_solver` is the most logical home for this code and `energy('sapt2+3')` its most logical invocation - after all, this correction forms a part of SAPT2+3 only, not the lower SAPT levels. The E(30)ind correction needs to be calculated beforehand, both for subtracting its value from the total (ind+ex-ind) calculated here, and for generating the third-order induction amplitudes that are reused here. However, unlike most of the stuff in `libsapt_solver`, the code is AO-based and the two-electron integrals enter only via generalized J/K matrices. Therefore, I had to export some additional AO quantities in `libsapt_solver/sapt.h` and I don't know if I did this in an optimal way.; - [x] Note to self: frozen core still needs to be checked. ## Design (Big-Picture) Questions - input from @CDSherrill @dgasmith @loriab and others will be highly beneficial!; - [ ] The three new(ish) beyond-S^2 corrections, E(20)exch-ind, E(20)exch-disp, and E(30)exch-ind cannot be currently calculated by a single SAPT call: the first two require `energy('sapt(dft)')` and the last one `energy('sapt2+3')`. That's quite unfortunate and we need a better workflow, possibly by making the non-",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2314:326,test,tests,326,https://psicode.org,https://github.com/psi4/psi4/pull/2314,3,"['log', 'test']","['logical', 'tests']"
Testability,## Description; Adds analytic UHF hessians. ## Todos; Notable points that this PR has either accomplished or will accomplish. - [X] UHF response terms (conventional algorithm); - [X] UHF response terms (DF algorithm); - [X] UHF JK derivs; - [X] Add tests . ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/842:249,test,tests,249,https://psicode.org,https://github.com/psi4/psi4/pull/842,1,['test'],['tests']
Testability,"## Description; Adds analytic dipole derivatives for RHF, allowing IR intensities to be computed; @loriab, @dsirianni and crew are working on the finite difference version for cases like DF-MP2, where finite differences of gradients are used for frequencies. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Adds dipole derivative code, and a test to verify that they match the CCQC programming project values. ## Questions; - [ ] Does anybody object to wavefunction holding these?; - [ ] Does anybody object to the various `set_` methods of wavefunction taking SharedMatrix by value, not by reference?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1382:392,test,test,392,https://psicode.org,https://github.com/psi4/psi4/pull/1382,4,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; Adds capabilities for magnetic dipole derivative integrals and exports them to Python side for use in calculating VCD. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Adds origin dependence to electric dipole derivatives in `compute_pair_deriv1()` function in `psi4/src/psi4/libmints/dipole.cc`; - [x] Implements `compute_pair_deriv1()` function in `psi4/src/psi4/libmints/angularmomentum.cc`; - [x] Adds `.def(""ao_ang_mom_deriv1"")` and `.def(""mo_ang_mom_deriv1"")` binding to `psi4/src/export_mints.cc`; - [x] Adds `ao_ang_mom_deriv1()` and `mo_ang_mom_deriv1()` definition/declaration to `psi4/src/psi4/libmints/mintshelper.cc(h)`; - [x] Adds `ao_ang_mom_deriv1_helper()` helper function to `psi4/src/psi4/libmints/mintshelper.cc(h)`. ## Questions; - [x] Ideas on how to test these once implemented? Considering using finite difference to check my implementation rather than comparing to another code. Thoughts?. ## Checklist; - [ ] Add test in `/tests/pytests/test_mints.py`; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1852:838,test,test,838,https://psicode.org,https://github.com/psi4/psi4/pull/1852,5,['test'],"['test', 'tests']"
Testability,"## Description; Adds capabilities for overlap half-derivative integrals and exports them to Python side for use in calculating VCD. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Adds `.def(""ao_overlap_half_deriv1"")` and `.def(""mo_overlap_half_deriv1"")` binding to `psi4/src/export_mints.cc`; - [x] Adds `ao_overlap_half_deriv1()` and `mo_overlap_half_deriv1()` definition/declaration to `psi4/src/psi4/libmints/mintshelper.cc(h)`; - [x] Adds `ao_overlap_half_deriv1_helper()` helper function to `psi4/src/psi4/libmints/mintshelper.cc(h)`. ## Questions; - None. ## Checklist; - [x] Add test in `/tests/pytests/test_mints.py`; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1895:637,test,test,637,https://psicode.org,https://github.com/psi4/psi4/pull/1895,4,['test'],"['test', 'tests']"
Testability,## Description; Adds contributing excitations to tdscf output for non-C1 symmetry. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2605:137,test,tests,137,https://psicode.org,https://github.com/psi4/psi4/pull/2605,2,['test'],['tests']
Testability,"## Description; Adds empirical dispersion capabilities to F-/ISAPT, while maintaining functional group partitioning capabilities. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Add hooks in driver/QCEngine; - [ ] Add tests. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1786:268,test,tests,268,https://psicode.org,https://github.com/psi4/psi4/pull/1786,4,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Adds external potentials (PCM, PE) to the CP-SCF solver. Design and majority of the work done by @maxscheurer. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] static polarizabilties with PCM + PE (no UHF in response_solver); - [x] TD-SCF excitation energies with PCM + PE (RHF/UHF); - [x] python callback function to easily add external potentials at the python level; - [x] `print 2` shows which ext. pot. is added. ## Checklist; - [x] docs update; - [x] new test: RHF static dipole polarizabilities with PCM + PE; - [x] new test: RHF TD-SCF excitation energies with PCM + PE; - [x] new test: UHF TD-SCF excitation energies with PCM + PE (regression-only); - [x] `ctest -L pcm/cppe/quick` pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2006:535,test,test,535,https://psicode.org,https://github.com/psi4/psi4/pull/2006,3,['test'],['test']
Testability,## Description; Adds hierarchical timers to FISAPT for code profiling purposes. Timing info for various F-SAPT terms and HF embedding printed to `timer.dat`. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Enables term-wise profiling of F-ISAPT procedure. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1029:343,Test,Tests,343,https://psicode.org,https://github.com/psi4/psi4/pull/1029,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; Adds in-core handling of range-separated functionals to MemDFJK. ![dfh_wK](https://user-images.githubusercontent.com/28900775/68413784-ecd19a80-015c-11ea-9f34-95bbda23f787.png). The blue curve shows in-core DiskDFJK time. The orange curve shows the time taken by in-core MemDFJK wK which constitutes this pull request's addition to the code. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] in core omega integrals for MemDFJK in DFHelper; - [x] improves runtime of range separated DFT calculations; - [ ] out of core omega integrals for MemDFJK. ## Questions; - [ ] Should we have a way to default back to Disk_DF if user asks for Mem_DF but does not give enough memory? Currently there is a psiexcption. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1749:791,Test,Tests,791,https://psicode.org,https://github.com/psi4/psi4/pull/1749,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Adds libint2 one electron integrals. A few integrals still use the hand-written code for now, but they will be addressed in subsequent PRs, as linked below.; ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Add libint2 one electron integrals.; - [x] Convert all double shell loops to use Onebody object's shell pair list instead.; - [x] Convert multipole potential ints to use L2 engines or McMurchie-Davidson recursions (#2414); - [x] Convert X2C ints to use L2 engines.; - [x] Convert AngularMomentum ints to use L2 engines. (#2414); - [x] Delete unused hand written code for recursions and integrals. (#2414); - [x] Document changes; - [x] Build Windows Libint2 Conda package. ## New Features for Release Notes; - Screening of one electron integrals to improve efficiency of PCM, EFP, and embedding methods; - Parallelized PCM integral computations, which are typically rate-limiting for implicit solvent SCF. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2388:1007,Test,Tests,1007,https://psicode.org,https://github.com/psi4/psi4/pull/2388,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Adds minao Br. Update CheMPS2 upstream. Remove Fort checking. Whiteli……st Cfour parallelism variable. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Remove copied-in CMake CheckFortranCompilerFlag module now that min cmake is 3.3 which always provides it. Also echo-target, which was more of a devel utility.; - [x] Fixed the suggest-near-option-match for py3.; - [x] Whitelist CFOUR_NUM_CORES envvar for Cfour, closing psi4/psi4#661, fix `psi4 -s` not handling relpaths property with Cfour.; * **User-Facing for Release Notes**; - [x] Pull CheMPS2 from upstream v1.8.3-12, now that the lapack & hdf5 cmake target have been included upstream.; - [x] From Rob, add Br to cc-pvtz-minao.gbs; - [x] Adjusted the molecule name parsing in inputparser. Now allow practically any name through the `molecule ... {...}`, then test if valid Py object name, printing error msg if not. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/672:900,test,test,900,https://psicode.org,https://github.com/psi4/psi4/pull/672,1,['test'],['test']
Testability,"## Description; Adds missing CPHF terms, so that DF-MP2 gradients are correct when an external potential is present. Fixes #618. ## Todos. * **Developer Interest**; - [x] Fixed DF-MP2 gradient code.; - [x] Added test case for DF-MP2 QM/MM gradients (extern2, not currently in quicktests, but runs in 12 seconds).; * **User-Facing for Release Notes**; - [x] Fixed bug so that QM/MM gradients are correct for DF-MP2. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/622:212,test,test,212,https://psicode.org,https://github.com/psi4/psi4/pull/622,1,['test'],['test']
Testability,"## Description; Adds new density functional approximations and Grimme group composite methods. closes #2121 #1898 . ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] new DFA: `r2SCAN0`, `r2SCANh`, `r2SCAN50` (plus `-D4` versions); - [x] new DFA composite methods: `r2SCAN-3C`, `B97-3C` ; - [x] new basis sets for the composite methods: `def2-mTZVP`, `def2-mTZVPP`. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - `B97-3c` requires `s-dftd3` and `mctc-gcp`; - `r2SCAN-3c` requires `mctc-gcp` and `dftd4 3.5.0`; - `[dispersion]['params']` functional dictionary can be incomplete. Defaults will be added automatically.; - allow parameter tweaking of pre-defined LibXC functionals.; - keep compatibility with LibXC 5 for windows; - requires `qcengine` update https://github.com/MolSSI/QCEngine/pull/393#pullrequestreview-123770667 ; - and `dftd4-python` with https://github.com/dftd4/dftd4/pull/184; - needs Libxc v6.0; - adds wb97x-3c closes #2850. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2842:1277,Test,Tests,1277,https://psicode.org,https://github.com/psi4/psi4/pull/2842,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; Adds new optking options to `read_options.cc`. Adds soon to be added `OPT_COORDINATES CUSTOM` option. ## User API & Changelog headlines; - [x] Default TS search algorithm is now RS_I_RFO. ## Checklist; - [x] opt16 now by default tests with RS_I_RFO (old algorithm still tested by optking's test suite); - [x] `-L opt`. ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3204:245,test,tests,245,https://psicode.org,https://github.com/psi4/psi4/pull/3204,3,['test'],"['test', 'tested', 'tests']"
Testability,## Description; Adds reference files for the FCHK pytest.; Changing geometry of test molecules to avoid degenerate orbitals. ## Checklist; - [x] fchk pytest works on a different machine. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2047:80,test,test,80,https://psicode.org,https://github.com/psi4/psi4/pull/2047,1,['test'],['test']
Testability,"## Description; Adds regression tests which ensure consistency between different `qc_module`s for `cc_type`= `conv`. Should finish off #714?. ## Questions; - [x] What lists should this test be on? Currently listed as `psi;quicktests;cc` because I copied and minimally modified from `CMakeLists.txt` in the mp2-module test. ; - [x] Managed methods [table](http://psicode.org/psi4manual/master/notes_c.html#table-managedmethods) lists DETCI as a possible choice for conventional CCSD with RHF/ROHF reference, but I errors from the driver trying these combinations.; ```python; set qc_module DETCI; energy('ccsd'). RuntimeError:; FatalError: DETCI: The CC module is not currently enabled. ; ```; ## TODO; - [x] ~Add ROHF/RHF CCSD checks against DETCI if they apply (pending feedback about 2nd point above)~ Remove indications that DETCI can do CCSD from the table; - [x] Add checks between fnocc and dfocc; - [x] Add non-frozen-core tests. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/966:32,test,tests,32,https://psicode.org,https://github.com/psi4/psi4/pull/966,4,['test'],"['test', 'tests']"
Testability,## Description; Adds spin-flip SAPT to Psi4. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] Adds Spin-Flip SAPT for computing all multiplet interactions between two high-spin monomers. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1027:284,Test,Tests,284,https://psicode.org,https://github.com/psi4/psi4/pull/1027,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Adds the DLPNO-MP2 method to Psi4. Callable as `energy('dlpno-mp2')`. DLPNO-MP2 (or domain-based local pair natural orbital MP2) is the method described in the following paper:. [Pinski, Peter, et al. ""Sparse maps—A systematic infrastructure for reduced-scaling electronic structure methods. I. An efficient and simple linear scaling local MP2 method that uses an intermediate basis of pair natural orbitals."" The Journal of chemical physics 143.3 (2015): 034108](https://doi.org/10.1063/1.4926879); ; DLPNO-MP2 recovers about 99.9% of the DF-MP2 correlation energy, and scales much better in both time and memory. The following graph compares this implementation with Psi4's DF-MP2 code on linear alkanes (18 core i9-10980XE, 200 GB, cc-pVTZ basis):. ![alkanes](https://user-images.githubusercontent.com/16376046/105784584-b38e7180-5f3e-11eb-97ce-9e5d05896d82.png). ## Todos; - [x] Implement DLPNO-MP2; - [x] Add tests; - [x] Add docs. ## Questions; - [x] Are there any other ways that this calculation should be routed? In particular, should `DLPNO` be an option for the `MP2_TYPE` keyword? Should DLPNO be an option for `QC_MODULE`?; - [x] Related to the previous question, suppose a user wants to run a SCS DLPNO-MP2 calculation. How should that be parsed? Not a big deal if that isn't supported.; - [x] How best to handle DLPNO options? There are many thresholds associated with this method, but the error and cost of the method are primarily controlled by just two of them: `T_CUT_DO` and `T_CUT_PNO`. Should the other options be user-facing at all? For now, I've marked them expert. Opinions from anyone with experience running local correlation methods are welcome here. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2093:930,test,tests,930,https://psicode.org,https://github.com/psi4/psi4/pull/2093,4,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; Adds the ability to consume and produce MolSSI QC JSON Schema. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] A prototype MolSSI QC Schema has been implemented (http://molssi-qc-schema.readthedocs.io/en/latest/index.html). ## Questions; - [x] How much validation do we want?; - [x] A full test suite should like come from the schema itself?; - [x] How we will we handle extra psi vars? Is the current setup sufficient. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/979:373,test,test,373,https://psicode.org,https://github.com/psi4/psi4/pull/979,1,['test'],['test']
Testability,"## Description; Adds the nZaPa basis sets that converge faster for SCF and correlation energies than many others. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] nZaPa-NR basis sets for n=2,3,4,5,6,7; - [x] RI and JKFIT definitions for nZaPa and cc-pVnZ-F12; - [x] `[23]ZaPa-NR` bracket detection for CBS. ## Checklist; - [x] Tests added for any new features; - [x] relevant fraction of full tests run. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1346:376,Test,Tests,376,https://psicode.org,https://github.com/psi4/psi4/pull/1346,2,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Adds the new QCSchema Wavefunction properties to the Psi4 schema runner. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Creates a schema BasisSet object; - [ ] ECP Basis quantities; - [x] Maps Psi4 arrays to schema `return_result` quantities; - [x] Reorders Psi4 arrays to CCA ordering for both spherical and cartesian basis functions.; - [ ] Provides support for post-SCF `return_result`s; - [x] Verify that spherical/cartesian orders are correct. Not entirely sure how we can correctly map post-SCF quantities. It becomes difficult to understand when new orbitals/densities are created. Thinking through a few options here, but if anyone has suggestions let me know!. Also is there a _good_ test for ensuring basis orders are correct? It becomes difficult to correctly test D orbital ordering as there is usually symmetry there. I *think* we can fully test P's with ammonia. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1728:760,test,test,760,https://psicode.org,https://github.com/psi4/psi4/pull/1728,3,['test'],['test']
Testability,## Description; Adds the option to solve the potential integrals for point charges interacting with the density and the related Vpcm operator numerically.; -> anthracene HF/6-31+G*: factor 3 faster and parallel. (Makes PCM no longer the bottleneck). delta E(total)=0.11 mEh. _This is work in progress and messy in some places. But general comments welcome. Specific benchmark requests are encouraged._. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] spherical and cartesian basis; - [ ] Feature2. ## Questions; - [ ] where should this live? ; - [ ] . ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2076:366,benchmark,benchmark,366,https://psicode.org,https://github.com/psi4/psi4/pull/2076,4,"['Test', 'benchmark', 'test']","['Tests', 'benchmark', 'tests']"
Testability,"## Description; Adds the tensors generated from the CC response code to the reference wave function, eventually to be included in the JSON output for a [QCEng](https://github.com/molssi/qcengine) run. Also patched CC-level dipoles and (static) quadrupoles in `proc.py` to be consistent with other naming conventions, allowing them to pass through `schema_wrapper.py`. This means that all (ground state, static) CC one-electron properties should follow the naming convention used on wfn. Old excited state (EOM) and dynamic property variables remain unchanged. . Updates to the schema wrapper to allow the other tensors though are coming in a separate PR. . ## Todos; - [x] Electric dipole polarizability tensor; - [x] Optical rotation (electric-dipole/magnetic-dipole) tensor; - [x] Electric dipole-quadrupole polarizability tensor (stored as three 3x3 components) (calculated through `roa.cc`); - [x] Patch CC dipole and (static) quadrupole QCVars; - [x] New pytest for all new QCVars; - [x] Update `cc46` to adhere to new ground state `psi4.core.variables()` names. ## Questions; - [x] `tests/pytests/test_qcschema.py` doesn't include any properties (yet). Are the existing returns of dipoles / quadrupoles in `schema_wrapper` tested anywhere? @loriab . ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) `ctest -L cc` comes clean.; - [x] New pytest `test_ccresponse.py` comes clean. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2022:1089,test,tests,1089,https://psicode.org,https://github.com/psi4/psi4/pull/2022,4,['test'],"['tested', 'tests']"
Testability,## Description; Adds the tests that I could have added in #1695 . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1701:25,test,tests,25,https://psicode.org,https://github.com/psi4/psi4/pull/1701,4,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Adds threading to the MintsHelper object. Notably we no longer build SO integrals directly in the SO basis, but build AO and transform AO->MO. This appears to be about as efficient as the former when threading, we can revisit this if the potential integrals can be improved. Benchmark is a carbon chain in the cc-pvdz basis set, tuned to compute about a million basis functions per row. I am separating this out from #592 which will wait for further tests. ```; # Original - 1 thread; nbf ntrial ao_overlap ao_kinetic ao_potential so_overlap so_kinetic so_potential; 0 28 1275 0.002474 0.000240 0.000936 0.000253 0.000311 0.001072; 1 98 104 0.005268 0.002996 0.031417 0.002182 0.002873 0.031835; 2 168 35 0.007805 0.007087 0.149304 0.005561 0.007733 0.150582; 3 238 17 0.019714 0.014981 0.415791 0.010558 0.014752 0.418562; 4 308 10 0.029242 0.023728 0.890593 0.017159 0.023903 0.938164; 5 378 6 0.038581 0.034306 1.624236 0.023958 0.034886 1.637466; 6 448 4 0.058684 0.050234 2.687780 0.033669 0.048659 2.867169; 7 518 3 0.073995 0.067988 4.212363 0.043464 0.063137 4.170965. # New algorithm - 1 thread; nbf ntrial ao_overlap ao_kinetic ao_potential so_overlap so_kinetic so_potential; 0 28 1275 0.002221 0.000152 0.000583 0.002632 0.000274 0.000731; 1 98 104 0.004644 0.001872 0.016447 0.004653 0.002240 0.016920; 2 168 35 0.005474 0.004001 0.076230 0.006461 0.004780 0.078292; 3 238 17 0.007382 0.006899 0.210317 0.010013 0.008758 0.214130; 4 308 10 0.011478 0.011354 0.449083 0.015937 0.015050 0.452936; 5 378 6 0.017539 0.016836 0.817148 0.025508 0.022129 0.825095; 6 448 4 0.022457 0.023191 1.350382 0.028970 0.031135 1.363716; 7 518 3 0.029087 0.030661 2.079129 0.040195 0.042085 2.086033. # New algorithm - 6 threads; nbf ntrial ao_overlap ao_kinetic ao_potential so_overlap so_kinetic so_potential; 0 28 1275 0.001724 0.000046 0.001282 0.001815 0.000171 0.001468; 1 98 104 0.001922 0.000262 0.004997 0.002548 0.000852 0.005569; 2 168 35 0.002558 0.000697 0.019184 0.003850 0.0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/635:291,Benchmark,Benchmark,291,https://psicode.org,https://github.com/psi4/psi4/pull/635,2,"['Benchmark', 'test']","['Benchmark', 'tests']"
Testability,"## Description; Adds threading to the MintsHelper object. Notably we no longer build SO integrals directly in the SO basis, but build AO and transform AO->MO. This appears to be about as efficient as the former when threading, we can revisit this if the potential integrals can be improved. Benchmark is a carbon chain in the cc-pvdz basis set, tuned to compute about a million basis functions per row. ```; # Original - 1 thread; nbf ntrial ao_overlap ao_kinetic ao_potential so_overlap so_kinetic so_potential; 0 28 1275 0.002474 0.000240 0.000936 0.000253 0.000311 0.001072; 1 98 104 0.005268 0.002996 0.031417 0.002182 0.002873 0.031835; 2 168 35 0.007805 0.007087 0.149304 0.005561 0.007733 0.150582; 3 238 17 0.019714 0.014981 0.415791 0.010558 0.014752 0.418562; 4 308 10 0.029242 0.023728 0.890593 0.017159 0.023903 0.938164; 5 378 6 0.038581 0.034306 1.624236 0.023958 0.034886 1.637466; 6 448 4 0.058684 0.050234 2.687780 0.033669 0.048659 2.867169; 7 518 3 0.073995 0.067988 4.212363 0.043464 0.063137 4.170965. # New algorithm - 1 thread; nbf ntrial ao_overlap ao_kinetic ao_potential so_overlap so_kinetic so_potential; 0 28 1275 0.002221 0.000152 0.000583 0.002632 0.000274 0.000731; 1 98 104 0.004644 0.001872 0.016447 0.004653 0.002240 0.016920; 2 168 35 0.005474 0.004001 0.076230 0.006461 0.004780 0.078292; 3 238 17 0.007382 0.006899 0.210317 0.010013 0.008758 0.214130; 4 308 10 0.011478 0.011354 0.449083 0.015937 0.015050 0.452936; 5 378 6 0.017539 0.016836 0.817148 0.025508 0.022129 0.825095; 6 448 4 0.022457 0.023191 1.350382 0.028970 0.031135 1.363716; 7 518 3 0.029087 0.030661 2.079129 0.040195 0.042085 2.086033. # New algorithm - 6 threads; nbf ntrial ao_overlap ao_kinetic ao_potential so_overlap so_kinetic so_potential; 0 28 1275 0.001724 0.000046 0.001282 0.001815 0.000171 0.001468; 1 98 104 0.001922 0.000262 0.004997 0.002548 0.000852 0.005569; 2 168 35 0.002558 0.000697 0.019184 0.003850 0.001897 0.020388; 3 238 17 0.003629 0.001342 0.049260 0.005645 0.003470 ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/592:291,Benchmark,Benchmark,291,https://psicode.org,https://github.com/psi4/psi4/pull/592,1,['Benchmark'],['Benchmark']
Testability,## Description; Adds timers for SAPT(DFT) procedure to track bottle-necks for improving performance. Information printed into `timer.dat`. A few other minor modifications are also done (see below). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Added step-wise timers for SAPT(DFT).; - [x] Appended missing dimer SCF step for FISAPT timer.; - [x] Exported timer functions to python-side.; - [x] Fixed a few typos in SAPT(DFT) procedure `sapt_proc.py`.; - [x] Expanded output width for `timer.dat` to avoid overflowing. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge. ## Attachment; [timer_dat.txt](https://github.com/psi4/psi4/files/2203735/timer_dat.txt); Seems that github doesn't like .dat files so I renamed it.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1083:641,test,tests,641,https://psicode.org,https://github.com/psi4/psi4/pull/1083,2,['test'],['tests']
Testability,"## Description; All pieces of `ccdensity` related to transition densities have been migrated to use `Matrix` and `Slice` tech, for a net cut of nearly 1100 lines of code!. Don't let the large delta LoC fool you. It's the same tricks over and over and over... ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] `L`, `nabla` and `dipole` integrals within `ccdensity` changed to `Matrix`; - [x] Left and right transition densities (alpha and beta) changed to `Matrix` ; - [x] `scf_qt` eliminated from MOInfo; - [x] _Massive_ elimination of manual BLAS and indexing and LoC . ## Checklist; - [x] Tests still pass. Three cheers for the mega test pass on `cc`. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2751:781,Test,Tests,781,https://psicode.org,https://github.com/psi4/psi4/pull/2751,2,"['Test', 'test']","['Tests', 'test']"
Testability,"## Description; All the docs links fixes that don't involve restructuring the driver imports. . ## Todos; - [x] fix qcvar collection and referencing. envvar referencing.; - [x] add mechanism for renaming, retiring qcvars; - [x] there's an extension for using typing in sphinx autodoc now, so move typing from docstrings to signature.; - [x] been partially isort-ed. these are the harmless changes.; - [x] edited a few misc. narrative docs; - [x] extensive additions to qcvar glossary so everything's defined. feel free to edit; - [x] instead of registering each pytest file, let cmake install all pytest tests by glob; - [x] added kwargs and some docstring cleanup to exports; - [x] removed broken option and added alias to run_psi4. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2164:604,test,tests,604,https://psicode.org,https://github.com/psi4/psi4/pull/2164,4,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Allow Alhrichs (`def2-`), Jensen (`pcseg-`) and custom Dunning (`cc-[...]z`) families of basis sets into CBS expansion. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `p4util.kwargs_lower()` no longer mangles floats to True or False; * **User-Facing for Release Notes**; - [x] CBS extrapolation possible with `def2-` bases; - [ ] CBS extrapolation possible with `roos-ano-` bases; - [x] CBS extrapolation possible with `pcseg-` bases; - [x] CBS extrapolation possible with custom `*-cc-pvxz-*` bases; - [x] SCF extrapolations of Truhlar and Kanton and Martin added ; - [x] custom alpha possible for `scf_xtpl_[...]_2` and `corl_xtpl_helgaker_2`; - [x] custom `corl_alpha` as well as `delta_alpha` parsing for eg. `MP2/[TQ] +D: CCSD(T)/[DT]`; - [ ] ~~handle fallbacks for light atoms in `[aug]-cc-pv[dtq]z-PP` bases using non-PP bases~~; - [x] tests for `def2-` extrapolation. ## Checklist; - [x] Tests added for any new features; - [x] All relevant tests run. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/963:927,test,tests,927,https://psicode.org,https://github.com/psi4/psi4/pull/963,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Allow non-symmetric matrix <-> dpdfile2. The hard part of this PR was figuring out how to initialize a dpd object successfully. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] `Matrix::write_to_dpdfile2` now works on non-totally symmetric matrices; - [x] Several long-deprecated Matrix methods have been removed. They now live in the `linalg` namespace. . ## Checklist; - [x] New test passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2722:588,test,test,588,https://psicode.org,https://github.com/psi4/psi4/pull/2722,1,['test'],['test']
Testability,## Description; Allow psi4 to be compiled with C++17. Default compilation still uses C++11. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Ready for C++17. ## Checklist; - [x] All cc tests run. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1345:234,test,tests,234,https://psicode.org,https://github.com/psi4/psi4/pull/1345,1,['test'],['tests']
Testability,"## Description; Allow users to provide custom functionals using the new `dict_func` syntax. The following calls are now equivalent:; ```; energy(""PBE""); energy(""SCF"", dft_functional=""PBE""); energy(""SCF"", dft_functional={ ""name"": ""PBE"",; ""x_functionals"": { ""GGA_X_PBE"": {} },; ""c_functionals"": { ""GGA_C_PBE"": {} }, ; } ); ```. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `dict_builder.build_superfunctional_from_dictionary()` now builds superfunctionals from dictionaries, not strings ; * **User-Facing for Release Notes**; - [x] allow users to supply DFT functionals using the new syntax directly. ## Checklist; - [x] Tests added for any new features - modified `dft_smoke`; if that's not appropriate let me know; - [x] original part of `dft_smoke` runs fine. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/986:689,Test,Tests,689,https://psicode.org,https://github.com/psi4/psi4/pull/986,1,['Test'],['Tests']
Testability,"## Description; Allows TDSCF code to be called from any SCF (HF,DFT) computation. . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [X] Implement functions in proc.py; - [X] Add options handling; - [x] Add tests. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1885:252,test,tests,252,https://psicode.org,https://github.com/psi4/psi4/pull/1885,1,['test'],['tests']
Testability,## Description; Allows optking to take gradients from the nbody wrapper. Fix VMFC gradient and Hessian and CP total data. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Connect optking with nbody gradient.; - [x] Add VMFC gradient and Hessian.; - [x] Correct CP-corrected total data.; - [x] Fix a few bugs.; - [x] Add electrostatic embedding.; - [x] Add multi-level many-body expansion. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1042:475,Test,Tests,475,https://psicode.org,https://github.com/psi4/psi4/pull/1042,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; Alternative solution to problem at #1640 . ## Checklist; - [x] v2rdm compiles against this on Mac and runs a test. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1642:125,test,test,125,https://psicode.org,https://github.com/psi4/psi4/pull/1642,1,['test'],['test']
Testability,"## Description; Another in the tidy-and-document-and-rationalize the driver series. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] adds more `__all__`s and a few more docstrings; - [x] necessitates some explicit imports (e.g., `import math`) that it was odder that they _weren't_ needed before; - [x] first real change in function addressing hits sapt-dft-api and sapt-dft-lrc where now have to add `driver.`. this may not be the last change. those were definitely expert usage, though.; - [x] removes the circular import blocker!; - [x] needs #2615 rebased out. ## Checklist; - ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review ~(if you can ignore the cfour commit)~; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2617:640,Test,Tests,640,https://psicode.org,https://github.com/psi4/psi4/pull/2617,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Apparently UKS Meta-GGA's have been wrong since the LibXC patch. I have fixed this error and get quite a nice agreement across our test set. I have changed the `dft1` test to cover these cases and be a bit more specific in what we are testing. I have also started on UKS VV10; however, I am not quite confident it is correct. The VV10 energy is certainly correct, but the gradient might not be scaled correctly. This is the last chance I have to look at it for several weeks so it will need to wait. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/897:147,test,test,147,https://psicode.org,https://github.com/psi4/psi4/pull/897,3,['test'],"['test', 'testing']"
Testability,"## Description; Apparently missed two tests when moving CI to a zero-indexing. A bit confused why there were not picked up by the ""ci"" tag, but oh well. Fixed now. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/551:38,test,tests,38,https://psicode.org,https://github.com/psi4/psi4/pull/551,1,['test'],['tests']
Testability,"## Description; Approve if you like tests that pass. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Fixed a test that https://github.com/psi4/psi4/pull/3138 broke; - [x] Explains a magic number in said test . ## Checklist; - [x] All tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3212:36,test,tests,36,https://psicode.org,https://github.com/psi4/psi4/pull/3212,4,['test'],"['test', 'tests']"
Testability,"## Description; As a preliminary PR to giving DMRG a wavefunction, this PR changes many function signatures in DMRG to either not take a wavefunction, use a const reference to a wavefunction when the wavefunction doesn't change, and use a const reference to a Matrix when the Matrix doesn't change. This PR is 100% cleanup and should probably be saved until 1.5. ## Checklist; - [x] `chemps2` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge **squash**",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2257:393,test,tests,393,https://psicode.org,https://github.com/psi4/psi4/pull/2257,1,['test'],['tests']
Testability,"## Description; As a side effect of #961, all wavefunctions had to have a density-fitted basis set when doing any energy computations, even if not density-fitted. Any scripts calling `psi4.core.Wavefunction.build` would have to manually set the DF basis to zero. `psi4.core.Wavefunction.build` now automatically sets the DF basis to zero - one less upgrade problem for users to worry about. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `psi4.core.Wavefunction.build` have zero DF basis by default. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1014:622,test,tests,622,https://psicode.org,https://github.com/psi4/psi4/pull/1014,2,['test'],['tests']
Testability,"## Description; As discussed, full circle — plugins are back in `tests/`. Also, removed old plugins that hadn't been maintained compilable. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] There was some dpd code deleted that possibly shouldn't fade out of memory, in case we ever want a dpd plugin again.; - [x] `ctest -L plug` works same as before.; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/640:65,test,tests,65,https://psicode.org,https://github.com/psi4/psi4/pull/640,1,['test'],['tests']
Testability,"## Description; As documented in #859, an IRC performed on a tightly converged transition state would converge to the initial transition state. The obvious workaround showed non-deterministic optking steps, as documented in #860. Both bugs originate from neglecting the possibility of near-zero gradients and have been fixed. Also as documented in #860, there is still some non-deterministic behavior after the minimum has been found. As optking is going to be moved Python-side soon and this behavior is irrelevant for most users, I'll hold off from investigating that until we see if the Python-version has the problem. I have added a test case for tightly converged transition states, thanks to the oddly prescient #881. For the sake of other developers, I added a page on how to add test cases. ## Todos; Notable points that this PR has either accomplished or will accomplish. * **User-Facing for Release Notes**; - [x] Fixes a bug disabling IRCs for tightly converged transition states. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/882:637,test,test,637,https://psicode.org,https://github.com/psi4/psi4/pull/882,2,['test'],['test']
Testability,"## Description; As is says in the title.; I've added a quicktest for PE-ADC(1) such that we catch issues like this directly from now on... adcc 0.15.9 introduced a breaking change in the environment parameter handling, I've adapted the existing test accordingly. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2393:245,test,test,245,https://psicode.org,https://github.com/psi4/psi4/pull/2393,4,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; As it says on the tin. ~**ONLY REVIEW SECOND COMMIT** Rebase req'd after PR No. 3 merged and before this merge.~. This is PR No. 4 in the mega-dfocc-remp series. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] REMP and OREMP added to dfocc along with 8 tests and stdsuite testing; - [x] general notations and eqn numbers from SB ported. ## Questions; - [x] @behnle the citation to which the eqn number comments refer you probably put in the bibliography, but it might be handy to have notated in the code. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2670:328,test,tests,328,https://psicode.org,https://github.com/psi4/psi4/pull/2670,5,"['Test', 'test']","['Tests', 'testing', 'tests']"
Testability,"## Description; As of qcengine 0.24, the keyword `local_options` is deprecated in favor of `task_config`. This PR updates the keywords in any remaining qcng calls (looks like main call in `task_base.py` was caught in a previous PR). ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Deprecated qcng keywords updated. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2755:561,test,tests,561,https://psicode.org,https://github.com/psi4/psi4/pull/2755,2,['test'],['tests']
Testability,"## Description; As of this PR, `cc` tests 1-33, 35-45, 52 are ported. Several tests have been deferred until after #2486. **This test is not marked ready for merge because I'm not happy with one of the psivar definitions: opinions wanted.**. We have ""CCSD QUADRUPOLE POLARIZABILITY TENSOR COMPONENT 0 @ 589NM"", ""CCSD QUADRUPOLE POLARIZABILITY TENSOR COMPONENT 1 @ 589NM"", and ""CCSD QUADRUPOLE POLARIZABILITY TENSOR COMPONENT 2 @ 589NM"". I _imagine_ we can combine these into a single array of dimension 3 x 3 x 3, just like we do with the octopole. Thoughts, @loriab @lothian?. ## Checklist; - [x] `cc52` ported off autotests. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2508:36,test,tests,36,https://psicode.org,https://github.com/psi4/psi4/pull/2508,3,['test'],"['test', 'tests']"
Testability,"## Description; As of this PR, cctests 1-33, 35-39 are ported. The next batch of tests will involve EOM oscillator strengths. ## Checklist; - [x] Edited tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2460:81,test,tests,81,https://psicode.org,https://github.com/psi4/psi4/pull/2460,2,['test'],['tests']
Testability,"## Description; As of this PR, cctests 1-33, 35-45 are ported. `cc44` and `cc45` (which test EOM root energies) needed no modifications. The tests added here cover CC2 rotational proeprties. Next on the list is an EOM dipole test, possibly bundled with an oscillator strength test. @loriab @lothian . ## Checklist; - [x] Changed tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2461:88,test,test,88,https://psicode.org,https://github.com/psi4/psi4/pull/2461,5,['test'],"['test', 'tests']"
Testability,"## Description; As part of #1005, UHF instability analysis is migrated over to use the Python Davidson solver. This adds LDA UKS instability analysis. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] The keyword `SOLVER_ROOTS_PER_IRREP` has been added to allow more fine-tuned control over the roots converged during instability analysis.; - [x] Instability keywords have moved from the `CPHF` module to the `SCF` module. See the corresponding SCF subsection of the documentation for details. . ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] LoC reduced by nearly 2000; - [x] Several CPHF keywords have been removed or copied over to SCF.; - [x] UHF LDA stability analysis is now enabled.; - [x] SOLVER_ROOTS_PER_IRREP keyword has been added. It overrides SOLVER_N_ROOT.; - [x] If SOLVER_N_GUESS is not set, the number of guess vectors is taken from SOLVER_CONVERGENCE, per the TDSCF code.; - [x] To the handling of landing in the same instability: the check is made more precise by checking absolute value, and we remember to reset the step scaling after landing in a new instability.; - [x] The Davidson solver no longer eliminates zero and negative eigenvalues by default. ## Question; - [x] Do we need more test coverage? I haven't actually _checked_ LDA instability analysis. Imagining a test is tricky. ## Checklist; - [x] Tests should still be passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2766:1528,test,test,1528,https://psicode.org,https://github.com/psi4/psi4/pull/2766,3,"['Test', 'test']","['Tests', 'test']"
Testability,"## Description; As part of #1877, and the ongoing subproject to give `psimrcc` a wavefunction, the goal of this PR is to eliminate the various `allocate` and `release` calls in psimrcc so we can remove the MemoryManager global. They will be replaced with `std::vector`, smart pointers, or more direct creation of raw pointers where appropriate. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Modernizing of `psimrcc` memory management.; - [x] Speed is fine!. ## Questions; - [x] ~~Is there a better way to handle the `std::vector` replacements in `blas_diis.cc`? I'm not happy that I need to do a `reinterpret_cast`, but it's at least (marginally) better than C-style casts. Just focus on the third commit.~~ There is no better way.; ## Checklist; - [x] All psimrcc tests pass as of the last commit. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1901:817,test,tests,817,https://psicode.org,https://github.com/psi4/psi4/pull/1901,1,['test'],['tests']
Testability,"## Description; As the title says, plus some preparatory work for solvated response (but not yet implemented or tested). ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] The interface towards the pyddx library for continuum solvation is extended by support for the linearized Poisson-Boltzmann model (LPB). ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2918:112,test,tested,112,https://psicode.org,https://github.com/psi4/psi4/pull/2918,4,"['Test', 'test']","['Tests', 'tested', 'tests']"
Testability,"## Description; As the title says. PSIO errors now give suggestions on how to fix the observed PSIO issue. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [X] PSIO errors now provide advice on how to rerun the calculation to fix the PSIO issue. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [X] Adjusts PSIO error printout so that advice is now given on how to rerun calculations to fix the observed PSIO issue. ## Questions; - [X] N/A. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3139:768,Test,Tests,768,https://psicode.org,https://github.com/psi4/psi4/pull/3139,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Assigning an int to an array variable accepts it as a one-item array, rather than throwing a fit. @robertodr, this should work for https://github.com/psi4/psi4/pull/1814#issuecomment-642655962. Feel free to just incorporate these lines into your TDDFT PR. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1927:292,Test,Tests,292,https://psicode.org,https://github.com/psi4/psi4/pull/1927,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; At least on Mac, these tests were failing with the latest pytest (5). Happily, the fix doesn't look to break pytest 4. ## Questions; - heads-up @dgasmith that qcel, qcng may also be susceptible. ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1674:39,test,tests,39,https://psicode.org,https://github.com/psi4/psi4/pull/1674,4,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; At long last, kill the Fork!. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Adjust LibxcFunctional for new tweakers interface. Have to pad tweakers array sometimes; - [x] ~Any fctl involving PW91 is failing. Keeps segfaulting when I uncomment that block~. ## Questions; - [ ] Need to find out from M. Oliveira if there's a released version with this interface. tagged 5.0.0; - [ ] https://gitlab.com/libxc/libxc/issues/61. ## Checklist; - [ ] ~Tests added for any new features~; - [x] Any fctl involving PW91 is failing. Keeps segfaulting when I uncomment that block; ```; 	372 - dft-custom-dhdf (Failed); 	373 - dft-custom-hybrid (Failed); 	376 - dft-bench-ionization (Failed); 	377 - dft-bench-interaction (Failed); ```; - [x] All tests pass. ## Status; - [x] Ready for review; - [ ] Ready for merge. closes #2057",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101:529,Test,Tests,529,https://psicode.org,https://github.com/psi4/psi4/pull/1101,2,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; At long, long, long last fixes #1777 and fixes #1793. We now DIIS on the combined vector of orbital rotation amplitudes and T2 amplitudes. This is the approach taken by the orbital-optimized DCT code, which has not had nearly the problems that the `occ` module has had with orbital convergence. `occ` should now have much more robust convergence and _not_ be one of the banes of the test suite. In addition, full tests now pass, minus things involving conda dependencies. `v2rdm_casscf` was (unsurprisingly) segfaulting, and I was getting an error with `mp2d` that seems to trace back to me having an outdated version of QCEngine. I had to make some changes to `opt-irc-2` to get the test suite working. See #1793 for my diagnosis of the problem. In brief, the IRC in Psi can overshoot the endpoint, causing some numerical instability in the steps post-overshoot. This is a problem to fix in PyOptking, so I just changed the test value. This concludes the OCC's Open-Heart Surgery series. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Coupled orbital and amplitude DIIS for improved convergence in `occ`; - [x] Validated every `occ` test with OMP2, OMP3, OMP2.5, OCEPA that uses no spin-scaling against Psi4Numpy implementations converged with obsessive tightness. ## Checklist; - [x] Full tests pass, except for conda dependencies. That means `ctest` and `pytest`. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1846:399,test,test,399,https://psicode.org,https://github.com/psi4/psi4/pull/1846,6,['test'],"['test', 'tests']"
Testability,"## Description; At present the program prints a warning if electrons are outside the active space, and then later on crashes. This PR changes behavior so that the program terminates at once. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1696:366,Test,Tests,366,https://psicode.org,https://github.com/psi4/psi4/pull/1696,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; At the risk of gaining a reputation for single-character PR's, I think I have a fix for #1596. The extra character in the error message looked suspicious, so I nuked it and the `adc` tests still pass. I'll show the output of the OP's calculation below. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix a probable typo in ADC, which introduced a bug. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1599:199,test,tests,199,https://psicode.org,https://github.com/psi4/psi4/pull/1599,3,['test'],['tests']
Testability,"## Description; Basic smart SCF solver. Contains a smart_solver class for easy extensibility of convergence aids. This is still WIP, just looking for feedback on my first PR!. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Adds smart_solver class that shares data with a wfn object during SCF iterations.; * **User-Facing for Release Notes**; - [ ] With SMART_SCF set to `true`, SOSCF is automatically engaged in case of trailing convergence and the initial oscillations of SAD, GWH, and CORE guesses are damped. . ## Questions; - [ ] Do we want 'macroiterations' i.e. restarting the SCF with different initial conditions to be included in this PR, or another?. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - [ ] Ensure SOSCF exists for current method before turning it on. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1135:750,Test,Tests,750,https://psicode.org,https://github.com/psi4/psi4/pull/1135,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; Begin reorganizing Programmers' Manual. Put in some stub pages. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1141:68,stub,stub,68,https://psicode.org,https://github.com/psi4/psi4/pull/1141,1,['stub'],['stub']
Testability,"## Description; Ben Pritchard has been extensively revamping QCFractal/QCArchive. It has reached the point that the QCFractal `master` branch (latest release v0.15.8) will get no more support, and the `next` branch (no releases or conda packages) is in beta testing. This PR switches Psi4 distributed driver from `master` to `next` interfaces. It shouldn't affect many, if any. Only affects ppl running Psi4 and have `client = FractalClient(...)` in their inputs. User-side, was:; ```; from qcfractal.interface import FractalClient; client = FractalClient(""localhost:7777"", verify=False); ...; plan = gradient('scf', dertype=0, return_plan=True); plan.compute(client); ret = plan.get_results(client); ```. User-side, now:; ```; from qcportal import PortalClient; client = PortalClient(""http://localhost:7777"", verify=False); ...; plan = gradient('scf', dertype=0, return_plan=True); plan.compute(client); ret = plan.get_results(client); ```. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Updates interface for QCFractal `next`. Core snippet written by Ben.; - [x] ADDED: Also, updated to `task_config` from `local_options`. This isn't urgently needed, but it'll silence a repeated warning, at the cost of requiring latest qcng and hence latest qcel. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - [x] I've tested it on GT cluster. Various calls were changed out for new ones. I'm not sure if error handling is any worse or better. ## Status; - [x] Ready for review; - [ ] Ready for merge, no particular hurry",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2645:258,test,testing,258,https://psicode.org,https://github.com/psi4/psi4/pull/2645,5,"['Test', 'test']","['Tests', 'tested', 'testing', 'tests']"
Testability,"## Description; BrianQC in #1893 only runs in c1 point group, so they'd like to have a sub test suite that can work in c1. This provides a label `noc1` for tests that _need_ symmetry (occasionally for convergence but mostly b/c keywords include DOCC or STATES_PER_IRREP). It was determined by forcing c1 by adding `mol->reset_point_group(""c1"");` here https://github.com/psi4/psi4/blob/master/psi4/src/export_mints.cc#L235 . That line *is not* in this PR, but the BrianQC ppl may want to consider it when their engine is enabled. With that line in place, `ctest -LE noc1 -j<N>` runs cleanly. It can also be combined, so `ctest -L quick -LE noc1` and `ctest -R scf -LE noc1` also valid. ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1958:91,test,test,91,https://psicode.org,https://github.com/psi4/psi4/pull/1958,5,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,## Description; Bug fix and improvements to the MintsHelper class constructor. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fixes a bug introduced in the DMRG code. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1802:272,test,tests,272,https://psicode.org,https://github.com/psi4/psi4/pull/1802,2,['test'],['tests']
Testability,## Description; Bug fix. Exports missing `MP3 TOTAL ENERGY` variable for `mp2.5` calculations. Expected by the `cbs` driver function. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1707:188,test,tests,188,https://psicode.org,https://github.com/psi4/psi4/pull/1707,2,['test'],['tests']
Testability,"## Description; Bump gau2grid to v1.0 and lose `mpmath`. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] gau2grid is `v1.0` now, so pointing to that. This drops the `mpmath` requirement.; - Note that bumping the `find_package(gau2grid 1.0)` is only for appearances sake since 0.1 tag worked just fine. ; - [x] Fix pcm test links closes #967; * **User-Facing for Release Notes**. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/968:385,test,test,385,https://psicode.org,https://github.com/psi4/psi4/pull/968,1,['test'],['test']
Testability,"## Description; Bump the QCA stack. qcng 0.6.3 is minted but doesn't exist on c-f yet, so this'll be a nice test of does it do internal build. Some tools (LGTM) won't `git clone`, so switching remaining upstreams to URL, which thanks to GH is as flexible as `GIT_TAG`. Also, fix some cfour interface issues, fix some deprecationwarnings, and add mp2d to smoke tests. ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1577:108,test,test,108,https://psicode.org,https://github.com/psi4/psi4/pull/1577,2,['test'],"['test', 'tests']"
Testability,"## Description; Calculates exchange terms in a single tensor rather than contracting and adding. Reduces the cost of contractions against SCF coefficients in range separated DFT. Changes the working equation for calculating the coulomb matrix in range separated DFT calculations. This lowers the number of tensors that Psi4 needs to store, reducing memory costs and extending the number of cases operable by DFHelper. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Extend formulations to DiskDFJK. ## Questions; - [ ] Question1. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1911:634,test,tests,634,https://psicode.org,https://github.com/psi4/psi4/pull/1911,2,['test'],['tests']
Testability,"## Description; Change of FINDIF to be metadata based per #1148, task one, and qcdb molecule compatibility per #1148, task two. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Change finite difference code to use metadata.; - [x] Fixes bugs #1296 and #1306.; - [x] Reap/Sow code removed. ## Questions; - [x] How should I document that a functions takes as an argument or returns the metadata dictionary? That needs to be specified somewhere.; - [x] Are we all agreed on the metadata style? The things I've left undone are going to depend heavily on any additional metadata changes. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - [x] Implement the changes to all four finite difference functions: empirical dispersion, hessian by gradients, hessian by energies, gradient by energies.; - [x] Polish the resulting code. In particular, there are a few variables taken from the initialization `data` that should probably be taken from `metadict` instead. For the compute functions, it should only need the barest skeleton of the current initialization call. Depending on other revisions, I may want to create a separate initialization function for the compute functions.; - [x] Modify the reap/sow cookbooks to work.; - [x] Make this compatible with QCDB molecules. To do this _correctly_, we need CdSalc tech reproduced in QCDB. Better to just coerce the QCDB molecule for now.; - [x] Remove the optimization side reap/sow code. ## Status; - [x] Ready for review; - [x] Ready for merge.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1289:686,test,tests,686,https://psicode.org,https://github.com/psi4/psi4/pull/1289,2,['test'],['tests']
Testability,"## Description; Changes a setting in the COSX JK algorithm to a more conservative default. Previously, the incremental fock option (`cosx_incfock`) was enabled by default. This gave a minor speedup, but it came at the risk of possible SCF convergence issues when using diffuse basis sets. This PR disables this option, so the COSX algorithm will be slightly slower, but more robust by default. ## Todos; - [x] Changed `cosx_incfock` default. ## Checklist; - [x] COSX tests still pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2689:467,test,tests,467,https://psicode.org,https://github.com/psi4/psi4/pull/2689,1,['test'],['tests']
Testability,"## Description; Cleans a function I came across when working on some SCF improvements. ## Checklist; - [x] All tests pass except `frac-traverse` (see 2284, unrelated to this PR). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2285:111,test,tests,111,https://psicode.org,https://github.com/psi4/psi4/pull/2285,1,['test'],['tests']
Testability,## Description; Cleans up some of the logic and printing in optking's set_params. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2170:38,log,logic,38,https://psicode.org,https://github.com/psi4/psi4/pull/2170,3,"['log', 'test']","['logic', 'tests']"
Testability,"## Description; Cleanup EOM CC3 code a bit. ## Todos; - [x] Catchup the code with psifiles, etc., so that EOM_DEBUG toggle can be used; - [x] Change restart behavior in EOM CC3 computations to avoid odd bug. ## Checklist; - [x] No additional tests should be needed.; - [x] Tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2085:242,test,tests,242,https://psicode.org,https://github.com/psi4/psi4/pull/2085,2,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Cleanup of tests directory following #2555. Heals various typos preventing some tests from getting pytest registration as well as some discrepancies between ctest and pytest labels. Deletes many unused/broken tests. ## Todos; - [x] All unused optimizer tests deleted following discussion in #2555.; - [x] All unused sowreap tests deleted.; - [x] `cc5`, `scf11-freq-from-energies`,`dft-pbe0-2`, `dft-dsd`, `dft-dldf` are all unused duplicates of other tests. Deleted.; - [x] `min-input` Broken + unused. Deleted.; - [x] `fsapt-diff1` Unused + not a test. Deleted. ; - [x] `dfmp2-freq1`, `dfmp2-freq2`, `props4` were unused but are passing, quick, and useful. These are saved and added to `CMakeLists.txt`.; - [x] `tester.py` no longer erroneously complains about ecppint tests having mismatched labels. ## Checklist; - [x] All tests that were missing registrations are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2655:27,test,tests,27,https://psicode.org,https://github.com/psi4/psi4/pull/2655,10,['test'],"['test', 'tester', 'tests']"
Testability,"## Description; Closes #1673. This PR fixes an indexing error causing the wrong orbitals to be scaled during fractional occupation, when there are multiple irreps. Now that the SCF module has its correctness errors fixed, I can get to some convergence improvements. ## Todos; - [x] Fixed a bug causing incorrect energies during fractional occupation for systems with point group symmetry. ## Checklist; - [x] Tests added for any newly working features; - [x] frac tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2280:409,Test,Tests,409,https://psicode.org,https://github.com/psi4/psi4/pull/2280,2,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Closes #1692 and adds some of those examples as test cases. The heart of the PR is that MOM no longer sets the iteration number to 0, which would triggered logic resetting some wavefunction variables. ## Todos; - [x] Fixes a bug where MOM could clear all electrons. ## Questions; - [x] The new tests take about 20 seconds. Do you want me to reduce the basis set size, to speed this up?. ## Checklist; - [x] Tests added for newly working features; - [x] `scf` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2270:64,test,test,64,https://psicode.org,https://github.com/psi4/psi4/pull/2270,5,"['Test', 'log', 'test']","['Tests', 'logic', 'test', 'tests']"
Testability,"## Description; Closes #1872. . CEPA Conventions Now:; `dct`: Does not know about CEPA(0), per #1873 ; `occ`: Every use of CEPA or CEPA(0) is now converted to LCCD. The section header and the final results section include [CEPA(0)] in parentheses. The same applies to the orbital optimized methods. The string ""OCEPA"" is still used internally as a wavefunction type when referring to LCCD, but that part of `occ` could use refactoring anyways, so I'm not going to spend the time to change it for something that relatively minor.; `dfocc`: Unchanged, because it always said `lccd` anyways. Bozkaya changed his preferred name for the method from CEPA to LCCD between `occ` and `dfocc`; `fnocc`: For consistency with the other CEPA methods, this still uses CEPA(0) to refer to both LCCD and LCCSD for the final results, but the start of the computation writes out Linearized CCD or Linearized CCSD.; Driver: This is unchanged. `cepa(0)` means LCCSD. Obligatory ping to notify @edeprince3. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Standardizes CEPA terminology in Psi output. ## Checklist; - [x] Quick tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1909:1155,test,tests,1155,https://psicode.org,https://github.com/psi4/psi4/pull/1909,1,['test'],['tests']
Testability,"## Description; Closes #1890. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] When DETCI computes TDMs, it does so for all excitations to higher roots, not just excitations from the ground state.; - [x] Added OPDM and TPDM tests. ## Questions; - [x] ~~Is it worth adding the i > j case, or is it i < j the standard convention for multistate problems? If so, rather than have these be explicitly constructed, it's probably best to just take the adjoint of the i < j case.~~ Added.; - [x] ~~We currently have zero test coverage of OPDMs from `detci`. We could check that Matrices are equal for a same-state OPDM and a TDM. This is a bit larger than usual for a Matrix comparison, but I think it'll be fine with H2/cc-pVDZ. I assume this would go in pytests?~~ Added. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1910:273,test,tests,273,https://psicode.org,https://github.com/psi4/psi4/pull/1910,2,['test'],"['test', 'tests']"
Testability,## Description; Closes #2031 . ## Todos; - [X] Add `compute_field_over_grid_in_memory` to `oeprop.cc` and `oeprop.h`; - [X] Expose `compute_field_over_grid_in_memory` in `export_oeprop.cc`.; - [X] Update `mints14` test. ## Questions; - N / A. ## Checklist; - [X] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2032:214,test,test,214,https://psicode.org,https://github.com/psi4/psi4/pull/2032,4,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; Closes #2192 : a correctness error in threaded correlated DF gradients accidentally introduced during my refactoring. I recommend making a new release candidate sooner rather than later. Sorry, Lori. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Fix DF gradient paralellization error . ## Lessons Learned; - [ ] We could _really_ use a threaded pass of quicktests as part of the test suite; - [ ] The difficulty of compiling Psi4 can be a bottleneck in the dev process. In particular, the instructions to get Psi source-compiled on Linux don't work out of the box, and Mac clang compilers are still choking on programs that are five lines of code. ## Checklist; - [x] Threaded quicktests pass. @hokru found the only failure was the bug which this PR fixed, and the failing test cases pass now. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2193:456,test,test,456,https://psicode.org,https://github.com/psi4/psi4/pull/2193,2,['test'],['test']
Testability,"## Description; Closes #2310 - an error message is more helpful than a segfault, in my opinion. ## Checklist; - [x] Tests added for any newly trapped keywords; - [x] cc test still pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2450:116,Test,Tests,116,https://psicode.org,https://github.com/psi4/psi4/pull/2450,2,"['Test', 'test']","['Tests', 'test']"
Testability,"## Description; Closes #2432. This is PR 1 in an ongoing series to make `ccdensity` compatible with the standard `Matrix` and `Wavefunction` machinery used elsewhere in Psi. (That means I'll have a lot of PRs for you two to review. Let me know if there's another person from VA Tech you want to take the responsibility of reviewing my PRs.). ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Adds finite difference test on CCSD dipoles; - [x] Standardizes `onepdm` vs `opdm` in `ccdensity` keywords.; - [x] Corrects incorrect description of the `onepdm`/`opdm` keyword; - [x] Creates new `ccdensity` function to convert `** double` to `Matrix`; - [x] Adds `Ca` matrix to parameters, to begin phasing out the QT ordered `** double` representation of the orbitals . ## Checklist; - [x] Passes `cc` tests; - [x] Passes finite difference test on CCSD dipoles. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2434:472,test,test,472,https://psicode.org,https://github.com/psi4/psi4/pull/2434,3,['test'],"['test', 'tests']"
Testability,"## Description; Closes #941. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] Fixes a bug where the incorrect number of displacements would be reported during a hessian obtained by fintie difference of energies. ## Checklist; - [ ] _Somehow_, I don't think running test cases for this one is necessary. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/987:342,test,test,342,https://psicode.org,https://github.com/psi4/psi4/pull/987,1,['test'],['test']
Testability,"## Description; Closes #943: the last of the `cc` tests is expressed in terms of psivars instead of the autotest mechanism. The last test moved required adding psivars about pair energies for RHF CC computations. I want a review from Zach for pair energies, from TDC for CC, and from Lori for psivars. ## Todos; - [x] Adds MP2 and CC pair energy psivars; - [x] Removes `autotest` capabilities . ## Questions; - [ ] If you close a ""mugworthy"" PR but already have a mug, what then?. ## Checklist; - [x] `cc43` still passes; - [x] quick tests still pass . ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2551:50,test,tests,50,https://psicode.org,https://github.com/psi4/psi4/pull/2551,3,['test'],"['test', 'tests']"
Testability,## Description; Closes issue #2559 . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Removed redundant work in parallel TwoBodyAOInt construction. ## Questions. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2581:274,test,tests,274,https://psicode.org,https://github.com/psi4/psi4/pull/2581,2,['test'],['tests']
Testability,## Description; Completes PR #1119. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1123:56,Test,Tests,56,https://psicode.org,https://github.com/psi4/psi4/pull/1123,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Compromise version with #2645. That replaced the longstanding v0.15 qcfractal/qcportal with v0.50b ""next"" branch. This one allows either. Adds a test, via ecosystem mac testing v0.15. CI testing of ""next"" didn't work out, but it's ok locally. Also switched to mamba solver for conda since qca is long to solve for. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Additionally support the `next` branch of QCArchive with the distributed driver, as well as the longstanding v0.15.8. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge. closes #2645",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2821:161,test,test,161,https://psicode.org,https://github.com/psi4/psi4/pull/2821,6,"['Test', 'test']","['Tests', 'test', 'testing', 'tests']"
Testability,"## Description; Consider this a hacked bare minimum. Needs work. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] They are _still_ playing about with fctls so xc_funcs.h is still changing and having to be copied over into our file. I've pinned the commit for the moment so you won't get stray ""can't find libxc fctl"" errors.; - [x] From https://gitlab.com/libxc/libxc/commit/21ee6588bb8039c3c83e5b39d01b2ee4234fe5e3 , I think they've changed over 'set_params' to 'ext_params'. Haven't figured out how to do so psi-side. Not all the set_params lived so the funcs that got dropped are now commented in LibxcFunctionals.cc; - [x] They seems to have dropped lda_set_params entirely. I saw at least one commit msg indicating it was duplicate functionality; - [x] All tests but 4 (+ scf-covereage for me) pass. Fails are of the type below. ```RuntimeError: ; Fatal Error: Matrix::power: C_DSYEV failed; Error occurred in file: /home/psilocaluser/gits/hrw-dgas/psi4/src/psi4/libmints/matrix.cc on line: 2584; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::Matrix::power(double, double); psi::DIISManager::extrapolate(int, ...); psi::scf::HF::iterations(); psi::scf::HF::compute_energy(); ```. ### April 2018 updates; - [x] psi's fork of Libxc resides in a branch on GH:loriab/libxc . I'd transfer that repo to psi4/libxc except then all the present cmake pulls (to the 3.0 master in that repo) would break.; - [x] added in M05, M052X, M06, M062X, M06HF, M08SO, M08HF, M11; - [x] M11 close (0.00035 E_h) but broken; - [x] MGGA_MVSh & MGGA_MVS broken; - [x] otherwise, test suite is clean; - [x] Need https://gitlab.com/libxc/libxc/merge_requests/65 to go through and hopefully 4.0.5 tag made, then pull over to GH and re-point this PR. ## Status; - [x] Ready to go. Absolutely not",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/802:828,test,tests,828,https://psicode.org,https://github.com/psi4/psi4/pull/802,2,['test'],"['test', 'tests']"
Testability,"## Description; Continues from #1120. pyoptking largely plumbed in. ## Todos. Failing tests from full suite. These will definitely include (a) functions to opt, (b) mixed basis sets, an odd thing in fnocc2 where I can't get the wfn to freeze core.; - [ ]	 17 - cbs-xtpl-opt (Failed); - [ ]	 18 - cbs-xtpl-func (Failed); - [ ]	 20 - cbs-xtpl-wrapper (Failed); - [ ]	114 - dcft5 (Failed); - [ ]	204 - fnocc2 (Failed); - [ ]	267 - opt-lindep-change (Failed); - [ ]	277 - opt8 (Failed); - [ ]	281 - opt13 (Failed); - [ ]	282 - opt14 (Failed); - [ ]	283 - opt-irc-1 (Failed); - [ ]	284 - opt-irc-2 (Failed); - [ ]	285 - opt-irc-3 (Failed); - [ ]	301 - pubchem1 (Failed); - [ ]	304 - pywrap-all (Failed); - [ ]	393 - python-pubchem (Failed); - [ ]	419 - gcp-pbeh3c (Failed); - [ ]	428 - pcmsolver-opt-fd (Failed). ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for preliminary review. hopefully the optking team can work off this.; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1335:86,test,tests,86,https://psicode.org,https://github.com/psi4/psi4/pull/1335,4,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Continues from psi4/psi4#850 in getting sns-mp2 integrated into psi as an endorsed plugin. Also various infrastructure additions to accommodate downstream and python projects. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] First downstream project buildable during superbuild; - [x] First pure python project buildable during superbuild. That is, `setup.py`, not `addonConfig.cmake`, so opt-in/detect-from machinery a lot shakier. Have to use FindPythonModule adapted from internet, rather than sturdy `find_package()`. For where-module?, relying totally on :envvar:PYTHONPATH. Seems to be behaving sensibly, but report oddities.; - [x] Add some dev docs for how to do workflows with addons; - [x] Adapt some snsmp2 test to work with psi ctest and pytest; - [x] Fix up tests/pytest/test_numpy_views so that it runs with pytest and doesn't interfere when `memory_profiler` not installed; - [x] ~Until https://github.com/DEShawResearch/sns-mp2/pull/2 goes in, pulling from my fork~; - [x] Adds some (mildly tested) versioning capabilities to FindPythonModule; * **User-Facing for Release Notes**; - [x] Enable [sns-mp2](https://github.com/DEShawResearch/sns-mp2) to be built at build-time via `cmake -DENABLE_snsmp2=ON`. Can also detect it if you put an external snsmp2 in PYTHONPATH (but as it's an optional runtime dependency, latter's only really useful for testing); - [x] Fix nasty bug that made the number of points computed for cube file dependent on rounding error. Could show up as differences in cube files btwn compilers. Tightened down cubefile checking. ## Questions; - [x] @rmcgibbo, I'd still like to know about getting the version from the imported plugin. Also, it'd be nice to get pytest in the sns-mp2 repo working in its own right.; - [x] @shannonhouck, there'll probably be a few more docs to add, if you don't mind. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/865:800,test,test,800,https://psicode.org,https://github.com/psi4/psi4/pull/865,4,['test'],"['test', 'tested', 'testing', 'tests']"
Testability,"## Description; Continuing #1403. Since we want to check Becke fctl here, better call it B97-0 since surrendered B97 to Grimme. ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1436:149,Test,Tests,149,https://psicode.org,https://github.com/psi4/psi4/pull/1436,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; Corrects a minor bug in the coupled cluster ROA code. . ## Todos; - [X] Fixes ROA code in `ccresponse` so that `cc52` passes for code compiled with `debug`. ## Checklist; - [X] All `cc` tests run now. ## Status; - [X] Ready for review; - [X] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2077:202,test,tests,202,https://psicode.org,https://github.com/psi4/psi4/pull/2077,1,['test'],['tests']
Testability,## Description; Corrects additional JK logic edge cases found and increases the verbosity of the error messages. At the same time we should continuously discourage users to set a `SCF_TYPE` to anything besides `DF`. `MEM_DF` and `DISK_DF` are truly expert user options and I believe have been marked as such in a variety of places. Also added a throw if someone requests dlDF+D gradients as these have never been implemented. . Fixes #1021. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1023:39,log,logic,39,https://psicode.org,https://github.com/psi4/psi4/pull/1023,1,['log'],['logic']
Testability,"## Description; Corrects bad test values. Part of #2885. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] The bad test values were inserted as part of #2849, and the new values are qualitatively similar to the values previous to that commit. The source for my reference data, PySCF, gives many spurious low-energy roots, and I accidentally included one in the roots. _Mea culpa_. The reference values weren't actually used, which is why this didn't create a problem before. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2886:29,test,test,29,https://psicode.org,https://github.com/psi4/psi4/pull/2886,2,['test'],['test']
Testability,"## Description; Couldn't (I think) go in the header, but this PR prints the correct scratch directory at the beginning of energy() and gradient() calls. This is particularly useful if the user simultaneously specifies scratch directories in different ways. ## Checklist; - [X] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1731:277,Test,Tests,277,https://psicode.org,https://github.com/psi4/psi4/pull/1731,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Coupled Cluster methods in general do not compute the OPDM unless necessary, however when they do need to compute the OPDM they do not communicate that back to the wfn object. This has led to some confusion on the part of users trying to access CC density matrices. (see #504 ). . ~~The ccdensity module will now set `ref_wfn.arrays[""CC_OPDM_A""/""CC_OPDM_B""] ` with the ground state opdm.~~. CCdensity does the MO/AO transformation and sets the ref_wfn Da/Db members internally, no python, and no longer using the `arrays` map. ; ## Features; - CC OPDM can be accessed via wfn object returned from a property calculation that constructs it.; - eom root psivars for dipole/quadrupole components are now properly assigned.; ## Todos; - [x] ~~Python-side code to convert arrays[""CC_OPDM_A/B""] to ref_wfn.Da()/Db()~~; - [x] fix assignment of root psivars for cc routines ; - [x] add tests to check OPDM assignment in wfn through OEProps; ## Questions; - [x] @dgasmith re the suggestion you made in #504 : would that not give us a ref_wfn with two copies of the same data? One held in `ref_wfn.arrays[""CC_OPDM_A""]` and the second in `ref_wfn.Da` ? I think we would want the entry in the arrays table to be freed? . ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/506:894,test,tests,894,https://psicode.org,https://github.com/psi4/psi4/pull/506,1,['test'],['tests']
Testability,## Description; Cramming a few more deprecations into v1.2. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] `Wavefunction.reference_energy()` --> `Wavefunction.energy()` in keeping with grad/hess and because reference is not apt. py-side was already plain `energy()`.; - [x] deprecate the c-side `Wavefunction.frequencies` member data and getter/setter. getter now reads off the py-side member data. setter will go away entirely. ## Questions; - [ ] can one suppress compile-time deprecation warnings for two lines? the export_mints legacy_freq lines are properly throwing errors and disrupting the clean build. ## Checklist; - [ ] ~Tests added for any new features~; - [x] ran the freq tests with earlier v of code. ## Status; - [x] Ready for review. ~This has got bits of #1454 and #1449 in it. I'll rebase once they're in.~; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1455:683,Test,Tests,683,https://psicode.org,https://github.com/psi4/psi4/pull/1455,2,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Current qcel not compatible with the new pydantic v2. I minted a new qcel build with the constraint, but the solver sometimes optimizes for pydantic anyways. So let's try explicit constraint. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2999:716,Test,Tests,716,https://psicode.org,https://github.com/psi4/psi4/pull/2999,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Currently, DIIS files are dumped to working directory for ambit tensors. This PR moves these temporary files to the scratch directory, which seems a better place to store these files. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; I just prepend the full path before filename. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3219:698,Test,Tests,698,https://psicode.org,https://github.com/psi4/psi4/pull/3219,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Currently, the phi_ao function returns the value of the basis functions at a point. However, this ONLY works for cartesian and not spherical basis sets. I updated the code to make this change. This is important to the development of seminumerical methods, like chain-of-spheres exchange. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Code is tested in my developmental chain-of-spheres exchange branch; - [x] Made an explicit test testing the validity of my bug fix. ## Questions; - [x] Will this impact existing functions that use the phi_ao call?. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2210:419,test,tested,419,https://psicode.org,https://github.com/psi4/psi4/pull/2210,3,['test'],"['test', 'tested', 'testing']"
Testability,"## Description; DCT files were not correctly being cleared upon completion. Among other things, the tau matrix was not properly cleared, which led to energy denominator computations for the MP2 guess incorporating the tau matrix when a DC-12 variant was selected. The MP2 guess was not correct. Requesting the attention of @andysim on this. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Clears DCT files correctly. ## Checklist; - [x] [All 'dcft' tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1310:499,test,tests,499,https://psicode.org,https://github.com/psi4/psi4/pull/1310,2,['test'],['tests']
Testability,"## Description; DCT's `cepa0` capabilities are removed. Per #1872, Psi has a problem with being consistent about what `cepa0` is. DCT has `cepa0` and is contributing to the problem. The best option is to just get rid of it. We only have it for testing purposes, but that's a Psi4Numpy task nowadays. The documentation even said don't use it for production. Besides, `cepa0`'s days as a useful point of comparison to `dct` are numbered. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Removed `cepa0` functionality from `dct` module. Use `occ`, `dfocc`, or `fnocc` instead.; - [x] Removed test checking for consistency between `fnocc` and `dct` CEPA because `dct` no longer has `CEPA`. ## Questions; - [ ] One procedural concern: At what point are we pulling the plug on getting new PRs into 1.4? I do not want keeping up with my PRs to take time that core devs should be spending moving 1.4 forward. ## Checklist; - [x] `ctest -L quick` passes; - [x] `ctest -L dct` passes; - [x] Documentation updated; - [x] Error message added. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1873:244,test,testing,244,https://psicode.org,https://github.com/psi4/psi4/pull/1873,2,['test'],"['test', 'testing']"
Testability,"## Description; DDD in #1351 is nominally ready, but looking through the diff, I don't think I can answer close questioning on all the pieces. So I'm going to try to pick off some topics for coherent discussion. This is No. 1 of the DDD series, #1351. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] New `psi4.set_output_file` function to both set up a logger and call `psi4.core.set_output_file`; - [x] Added some brief logging in the driver. This doesn't look much like DDD, but it's something to work with.; - [x] output file naming has been changed up. outputs may have double extension (e.g., myfile.log.out) to cope with the oddity of two extensions. Mostly, something.in creates something.out and something.log.; - [x] docs. Below is an example of output set at DEBUG with an extra `gradient()` call added to tu1; `>>> psi4 ../tests/tu1-h2o-energy/input.dat --loglevel=10 && cat ../tests/tu1-h2o-energy/input.log`; ```; 2022-03-28:21:06:46,635 INFO [psi4.driver.driver:603] Compute energy(): method=scf, basis=cc-pvdz, molecule=h2o, nre=9.168193296424349; 2022-03-28:21:06:46,644 DEBUG [psi4.driver.driver:604] {'elbl': array(['', '', ''], dtype='<U1'),; 'elea': array([16, 1, 1]),; 'elem': array(['O', 'H', 'H'], dtype='<U1'),; 'elez': array([8, 1, 1]),; 'fix_com': False,; 'fix_orientation': False,; 'fragment_charges': [0.0],; 'fragment_multiplicities': [1],; 'fragment_separators': [],; 'geom': array([ 0. , 0. , -0.06577557, 0. , -0.75906199,; 0.52195302, 0. , 0.75906199, 0.52195302]),; 'mass': array([15.99491462, 1.00782503, 1.00782503]),; 'molecular_charge': 0.0,; 'molecular_multiplicity': 1,; 'name': 'h2o',; 'provenance': {'creator': 'QCElemental', 'routine': 'qcelemental.molparse.from_string', 'version': 'v0.24.0'},; 'real': array([ True, True, True]),; 'units': 'Angstrom'}; 2022-03-28:21:06:47,79 INFO [psi4.driver.driver:606] Return energy(): -76.0266327350908; 2022-03-28:21:06:47,83 INFO [psi4.driver.driver:748] Co",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2512:412,log,logger,412,https://psicode.org,https://github.com/psi4/psi4/pull/2512,8,"['log', 'test']","['log', 'logger', 'logging', 'loglevel', 'tests']"
Testability,"## Description; DFT-NL (=non-local) adds the VV10 correlation energy to arbitrary DFT functionals using functional specific vv10_b parameter. Conceptually similar to DFT-D. DOI: 10.1021/ct200644w. Fixes https://github.com/psi4/psi4/issues/870. * **User-Facing for Release Notes**; - [x] SCF option `DFT_VV10_B` enables and adds VV10 correlation according to DFT-NL scheme (fixed `vv10_c`, user-supplied `vv10_b`). ; - [x] `DFT_VV10_C` also gives access to the C parameter.; - [x] `NL_DISPERSION_PARAMETERS` similar to `DFT_DISPERSION_PARAMETERS`; - [x] `energy('functional-nl')` sets pre-defined vv10_b parameters for over 15 functionals. Recommended usage for most users.; - [X] `DFT_VV10_POSTSCF` enables a post-scf VV10 calculation. Large gain in speed with minimal loss of VV10 correlation energy.; - [x] added documentation. . * **Developer notes**; - [x] rebase+adjustment to PR https://github.com/psi4/psi4/pull/922; - [x] figure out DSD variant and param citations; - [x] re-integrate tests. * ** Notes**; * forcing pure HF with VV10 will seg. fault. (no integration grid). Only `energy('hf')` with `set DFT_VV10_B` is caught, not `energy('scf')` to allow custom access to the scf.; * NL parameters were entered manually, someone please check over them for strange values or typos; * tests are kept short, but we also don't test every dispersion dash parameter out there.; * for double-hybrids with multiple versions, the frozen core and/or D3BJ parent variant was chosen for a sensible consistency. . ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/914:993,test,tests,993,https://psicode.org,https://github.com/psi4/psi4/pull/914,3,['test'],"['test', 'tests']"
Testability,## Description; DMRG density to wavefunction. Closes #2558. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] DMRG density on wavefunction; - [x] Experimental alpha and beta density fields are combined. ## Questions; - [ ] Suggestions on how to test this? The best idea I've got is comparing an FCI and a DMRG density. ## Checklist; - [x] chemps2 tests pass; - [x] eom tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2570:302,test,test,302,https://psicode.org,https://github.com/psi4/psi4/pull/2570,3,['test'],"['test', 'tests']"
Testability,## Description; DSD-BLYP and DSD-PBE-PBE86 subtests in dft-custom-dhdf are failing. This is the easiest way to get it tested externally.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/945:118,test,tested,118,https://psicode.org,https://github.com/psi4/psi4/pull/945,1,['test'],['tested']
Testability,## Description; Debug symbols where being mistakenly striped from the core python module. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Debug symbols are back; - [x] Ability to break on line numbers is back. ## Checklist; - [x] Works for @JonathonMisiewicz and myself. Doesn't affect any test cases. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2159:349,test,test,349,https://psicode.org,https://github.com/psi4/psi4/pull/2159,1,['test'],['test']
Testability,"## Description; Defines couple new XC functionals in the driver and adds few D3BJ parameters. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] Double-Hybrids: B2GPPLYP, PWPB95, PTPSS, DSD-BLYP; - [x] hybrid-GGAs: PW6B95; - [x] mega-GGAs: TPSS, revTPSS; - [x] GGAs: mPWPW; - [x] tests; - [x] adding of some reference outputs; - [x] clean-up ; - [x] praying libxc 4.0 switch does not break the tweaking options. * **Developer notes/issues**; - [x] tests put into dft-custom-gga/mgga/hybrid/dhdf; supersedes a number of older tests (removed only from CMakeLists.txt):; -`dft-dsd + dft-pbe0-2 `moved into `dft-custom-dhdf`; -`dft-dldf` moved into `dft-custom-mgga`; - [x] new tests for mgga_ms0/1/2 based on libxc test data.; - incomplete dft-custom-hybrid test: missing wpbe, wpbe0, b5050lyp. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/877:355,test,tests,355,https://psicode.org,https://github.com/psi4/psi4/pull/877,6,['test'],"['test', 'tests']"
Testability,## Description; Disable cmake policy CMP0144 due to limited cmake support. ## User API & Changelog headlines; - [x] Remove cmake policy CMP0144 from the main CMakeLists.txt file. ## Questions; - [x] Is this policy critical? It appears not. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3089:294,test,tests,294,https://psicode.org,https://github.com/psi4/psi4/pull/3089,2,['test'],['tests']
Testability,"## Description; Ditch `QCAspect` in favor of its code descendant, `qcel.Datum`. Because vib involves strings and complex numbers, need qcel `v0.4.1` (not released at time of posting). ## Checklist; - [ ] ~Tests added for any new features~; - [x] full tests run. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1654:205,Test,Tests,205,https://psicode.org,https://github.com/psi4/psi4/pull/1654,2,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; Docs cleanup. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] allows building docs w/o psi-sphinx-theme (though you lose psivar indexing); - [x] makes sure all the tests (incl. psiapi/json) get copied to samples; - [x] fixes up misc. options-referencing errors. ## Checklist; - [x] built with alabaster sphinx theme. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1044:247,test,tests,247,https://psicode.org,https://github.com/psi4/psi4/pull/1044,1,['test'],['tests']
Testability,## Description; Documentation update for the new dft logic. ## Todos; - [x] Ensure currently existing docs are updated with the new dft logic; - [x] Include new examples on functional customization. Waiting on #799 to be merged to test new examples for the docs. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/805:53,log,logic,53,https://psicode.org,https://github.com/psi4/psi4/pull/805,3,"['log', 'test']","['logic', 'test']"
Testability,"## Description; Does exactly what it says in the title. We need the maximum value of `maxGradient` _across all threads_. ## Checklist; - [x] Tested that even in parallel, orbital gradients are now deterministic. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1435:141,Test,Tested,141,https://psicode.org,https://github.com/psi4/psi4/pull/1435,1,['Test'],['Tested']
Testability,"## Description; Does exactly what it says. I tested for correctness not only by comparison to basis sets that are on EMSL, but also by reproducing the G2 energy of SO2 reported by Brown and Barber (DOI: 10.1021/j100020a034) within 2E-5 hartrees. The G2 method requires this basis set. I get the same error margin when I try to reproduce their CO2 energies, so I attribute this to them not having converged their geometry tightly. Many thanks to @loriab for guidance with Psi's basis set parser. ## Status; - [x] Ready for review; - [X] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1531:45,test,tested,45,https://psicode.org,https://github.com/psi4/psi4/pull/1531,1,['test'],['tested']
Testability,"## Description; During review of the ADIIS PR, it was suggested that Psi raise an error if the BFGS doesn't meet the target convergence criteria. This PR changes that, so the error will be raised _if BFGS is very far from meeting the convergence criteria_. 1e-6 would be nice, but 1e-3 is good enough for our purposes. @loriab, these are the last of the Psi tests on my list to heal. ## Checklist; - [x] Failing tests Lori pointed out work; Can't cause tests that previously passed to fail. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2445:358,test,tests,358,https://psicode.org,https://github.com/psi4/psi4/pull/2445,3,['test'],['tests']
Testability,"## Description; During the L2 upgrade, I missed the function that handles diffuse external multipoles. In constructing a test case to avoid a repeat, I found some normalization problems (and a lack of gradients) which will be addressed in a followup PR. H/T to @g-andres and his group for pointing the problem out. ## Todos; - [ ] Fixes energies with external diffuse potentials. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2068:121,test,test,121,https://psicode.org,https://github.com/psi4/psi4/pull/2068,1,['test'],['test']
Testability,## Description; Efforts to LGTM-ize `libsapt_solver`. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1623:108,test,tests,108,https://psicode.org,https://github.com/psi4/psi4/pull/1623,2,['test'],['tests']
Testability,"## Description; Eliminate index management from `ccresponse`. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Eliminates QT-Pitzer interconversion from `ccresponse`; - [x] Eliminates memory leaks from `ccresponse`; - [x] Cleaned up integral writing to disk. ## Checklist; - [x] cc tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2753:473,test,tests,473,https://psicode.org,https://github.com/psi4/psi4/pull/2753,1,['test'],['tests']
Testability,## Description; Eliminates a compilation warning due to the way the copy constructor and = operator were disabled in the PKWorker class. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Use C++11 `delete` syntax . ## Checklist; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1129:334,test,tests,334,https://psicode.org,https://github.com/psi4/psi4/pull/1129,2,['test'],['tests']
Testability,"## Description; Enable mp2-d gradients (for dfmp2 only). ## Todos; - [x] interface and test mp2-d findif and analytic gradient code, calling QCEngine and a different version of the `mp2d` executable (was v0.1, now v1.1); - [x] `dashparam.py` moved in QCEngine https://github.com/MolSSI/QCEngine/pull/85 so changes needed to be made here, too; - [x] set disp qcvars on wfn, not core; - [x] separate processing of `_disp_functor` so it can work better with mp2.; - note that mp2d energies follow the ""dft"" pattern in `proc.py`, while gradients follow the ""mp2"" pattern. This is awkward but simplest until dft double-hybrid gradients pave the way.; - [ ] none of this is going to work until aforementioned PR is merged and qcng `v0.7.0` released. ## Checklist; - [x] Tests added for any new features; - [x] full tests is clean locally, except for `dft-pruning`. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1661:87,test,test,87,https://psicode.org,https://github.com/psi4/psi4/pull/1661,3,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; Enable v2rdm_casscf build from psi4. Add tests. This gets Eugene's renovated 0.5 plugin that now has gradients working again with psi4. Suppresses the plugin ""module loaded"" text since that command isn't called directly anymore and the text was interfering with CMake by corrupting the cache. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/866:57,test,tests,57,https://psicode.org,https://github.com/psi4/psi4/pull/866,1,['test'],['tests']
Testability,"## Description; Enables dispersion corrected F-/ISAPT with optimal damping parameters, calling QCEngine for pairwise DFTD3 analysis. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Toggle empirical/exact dispersion in F-/ISAPT, call relevant damping functions; - [x] Parses pairwise atomic D3 interactions from QCEngine & DFTD3; - [ ] Functional group partitioning of D3 pairwise interactions. ## Questions; - [ ] Current test ""fails"" with 1.e-5 Eh difference between direct D3 IE and supramolecular D3 IE. Likely due to precision of pairwise atomic contact energies from DFTD3, which may be addressed in subsequent PRs to QCEngine. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1753:472,test,test,472,https://psicode.org,https://github.com/psi4/psi4/pull/1753,4,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; Enables plugin gpu_dfcc as external plugin compiled with psi4. ## Todos; * **User-Facing for Release Notes**; - [x] enables GPU-accelerated DF-CCSD. ## Checklist; - [x] tests comparing energies from DF-CCSD and GPU DF-CCSD -- present in psithon and psiapi; - [x] check for NVIDIA compilers and skip compilation if they are missing -- no need since user's `ENABLE_gpu_dfcc=ON` means build-or-die-trying; - [x] For `ENABLE_gpu_dfcc=ON` and built, on a sys w/o GPUs, cmake tests will fail, pytest test will skip. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/997:185,test,tests,185,https://psicode.org,https://github.com/psi4/psi4/pull/997,3,['test'],"['test', 'tests']"
Testability,"## Description; Enables screening of small densities using LibXC's built-in functionality. Enables user to set custom values. ; This fixes, e.g., issues with calculating the H-atom with many functionals. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] introduces `xc_func_set_dens_threshold`; - [x] `DFT_DENSITY_TOLERANCE` as a (expert) user option; - [x] related PsiAPI options for Functional/LibXCFunctional/Superfunctional. ## Questions; - [ ] `lsda/meta_cutoff` routines seem unused. Remove?; - [x] default is **off** . ## Checklist; - [x] Tests added for any new features; - [x] documentation added; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge. ----. Python API notes (as one would use in `superfunctionals.py`); It is recommend to set the threshold via the SuperFunctional class; e.g. `sup[0].set_density_tolerance(1e-10) `. Alternatively one can set the threshold also via the LibXCFunctional class, and potentially; set individual thresholds for the components. Below sets the same threshold for all XC kernels.; ```; dens_cut=core.get_option(""SCF"",""DFT_DENSITY_TOLERANCE""); if sup[0].is_libxc_func():; sup[0].c_functionals()[0].set_density_cutoff(dens_cut); # print(""screening python:"",sup[0].c_functionals()[0].density_tolerance()); else:; for x_func in sup[0].x_functionals():; x_func.set_density_cutoff(dens_cut); for c_func in sup[0].c_functionals():; c_func.set_density_cutoff(dens_cut); ```; ---. Tests concerning the threshold:; `1e-12` passes all tests without issues; `1e-10` fails only at `pcmsolver-dft` else everything passes. Testing meta-GGA TPSS/aug-pcseg-1 on the A24 benchmark set /w ghost-atoms (simple organic molecules):; [cut10_tpss.apc1.out.txt](https://github.com/psi4/psi4/files/4475320/cut10_tpss.apc1.out.txt); [cut12_tpss.apc1.out.txt](https://github.com/psi4/psi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1860:594,Test,Tests,594,https://psicode.org,https://github.com/psi4/psi4/pull/1860,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; Enhances user experience for DF-CCSD(T) gradients. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] timings for DF-(T) gradient (copied from fnocc module); - [x] corrects ijk count for gradient (full combination instead of unique pairs). ## Checklist; - [x] relevant tests run (dfccsd-t-grad1). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1241:332,test,tests,332,https://psicode.org,https://github.com/psi4/psi4/pull/1241,1,['test'],['tests']
Testability,## Description; Ensures JSON is written back to file when called from CLI. Not entirely sure of a good way to test this however to ensure that it is not broken again without a fairly involved script. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1369:110,test,test,110,https://psicode.org,https://github.com/psi4/psi4/pull/1369,1,['test'],['test']
Testability,"## Description; Even though Intel+defaults conda gcc7.3, azure gcc-s, and c-f conda gcc9 are perfectly fine with it, defaults conda gcc7.3 as primary compiler segfaults if the `py_psi_get_atomic_point_charges` fn is removed. I don't understand it, but I will appease it. All other changes are fixing stray non-ascii chars, since that's one of my routine steps when things don't make sense. Checking full tests locally. EDIT: full tests clean. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2175:404,test,tests,404,https://psicode.org,https://github.com/psi4/psi4/pull/2175,2,['test'],['tests']
Testability,"## Description; Exactly what it says in the title. New `libmints` functions mean a @jturney ping, and new functions messing with integrals mean an @andysim ping. Also, a positive LoC PR. Sad. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Metric derivatives and derivative of the 3-center integrals are now available to Python. ## Checklist; - [x] I've tested that P4N DF-OMP2 gradients using these new functions match `dfocc` gradients to 6 decimal places, but that isn't suitable for the test suite. I'm open to suggestions on tests. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2088:413,test,tested,413,https://psicode.org,https://github.com/psi4/psi4/pull/2088,3,['test'],"['test', 'tested', 'tests']"
Testability,## Description; Exactly what it says in the title. This is a preliminary PR before I make some other `OEProp` changes. ## Checklist; - [x] `properties` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2507:152,test,tests,152,https://psicode.org,https://github.com/psi4/psi4/pull/2507,1,['test'],['tests']
Testability,"## Description; Exports Boys localization for plugins. ## Checklist; - [X] ""smoke"" tests pass. ## Status; - [X] Ready for review; - [X] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1026:83,test,tests,83,https://psicode.org,https://github.com/psi4/psi4/pull/1026,1,['test'],['tests']
Testability,"## Description; Exports electric dipole derivative integrals to Python side for use in calculating VCD. ## Todos; - [x] Adds `.def(""ao_elec_dip_deriv1"")` and `.def(""mo_elec_dip_deriv1"")` binding to `psi4/src/export_mints.cc`; - [x] Adds `ao_elec_dip_deriv1()` and `mo_elec_dip_deriv1()` definition/declaration to `psi4/src/psi4/libmints/mintshelper.cc(h)`; - [x] Adds `ao_elec_dip_deriv1_helper()` helper function to `psi4/src/psi4/libmints/mintshelper.cc(h)`. ## Checklist; - [x] Add `/tests/pytests/test_mints.py`; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1799:487,test,tests,487,https://psicode.org,https://github.com/psi4/psi4/pull/1799,3,['test'],['tests']
Testability,"## Description; Exports intermediate energies computed within N-Body driver to psivars named `N-BODY {cluster-identity} TOTAL ENERGY` for workflow incorporation and sanity-checking. Convention for `cluster-identity`: `(monomer_tuple)@(basis_tuple)` enumerates the particular monomers involved in the cluster computation in `monomer_tuple`, and enumerates the basis set used within the cluster computation in `basis_tuple`. In this way, ghost monomers are easily identified as any fragment with basis functions (included in `basis_tuple` not present in `monomer_tuple`. For example,; ```; ""N-BODY (1, 2)@(1, 2, 3) TOTAL ENERGY"" => -529.655058639489; ```; indicates that the total energy for the fragment (1, 2) in basis set (1, 2, 3) is -529.66 [Eh]. . ## Todos; - [x] Variable documentation (pending notation consensus, see questions below). Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] Psivar export of intermediate energies in N-Body for workflow integration. ## Questions; - [ ] Is the cluster identification syntax described above suitably intuitive? Should the `@` symbol be replaced with another, perhaps `:`, to remove potential confusion with ghost atoms notation in the molecule block?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/952:1287,Test,Tests,1287,https://psicode.org,https://github.com/psi4/psi4/pull/952,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; Expose the function C_DGELS (found in `qt.h`). ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2356:117,test,tests,117,https://psicode.org,https://github.com/psi4/psi4/pull/2356,2,['test'],['tests']
Testability,"## Description; Exposition of the function Fa_subset and Fb_subset to python. ## Todos; There really are not todos here. Beforehand it was quite cumbersome to get the F matrix in AO form. . ## Questions; - [ ] Was the API made private on purpose? If yes, reject this request. ## Checklist; - [ ] Tests added for any new features:; No tests were added.; - [ ] [All or relevant fraction of full tests run] ; ctest -L quick runs through. ## Status; - [X] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1127:296,Test,Tests,296,https://psicode.org,https://github.com/psi4/psi4/pull/1127,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Extracts some miscellaneous, uncontroversial and minor, changes from #1443 . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Use `pybind11_add_module` to declare the Python module at the CMake level. This follows suggestions from the pybind11 project. Note that I had to deactivate the link-time optimization (the `NO_EXTRAS` flag). I'd get `Aborted (core dumped)` otherwise with GCC (tested with versions 5, 6, and 7); - [x] More `auto`-izing and switch to the free functions in the `linalg` namespace. . ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1595:451,test,tested,451,https://psicode.org,https://github.com/psi4/psi4/pull/1595,1,['test'],['tested']
Testability,"## Description; Extracts the `Exception`-based error message and prints it out in an attention-seeking box. ## Checklist; - [x] few manual tests. ## Status; - [x] Ready for review; - [x] Ready for merge. ----; Example:; ```; Cleaning optimization helper files. PsiException: Could not converge geometry optimization in 1 iterations. Traceback (most recent call last):; File ""/Users/kruse/qc/psi4.bin/bin/psi4"", line 331, in <module>; exec(content); File ""<string>"", line 29, in <module>; File ""/Users/kruse/qc/psi4.bin/lib/psi4/driver/driver.py"", line 1201, in optimize; raise OptimizationConvergenceError(""""""geometry optimization"""""", n - 1, wfn). psi4.driver.p4util.exceptions.OptimizationConvergenceError: Could not converge geometry optimization in 1 iterations. Printing out the relevant lines from the Psithon --> Python processed input file:; """""",""LiF2m""); core.IO.set_default_namespace(""LiF2m""); core.set_global_option(""BASIS"", ""minix""); core.set_global_option(""SCF_TYPE"", ""pk""); core.set_global_option(""GEOM_MAXITER"", 1); --> optimize('hf'). !----------------------------------------------------------- !; ! !; ! Could not converge geometry optimization in 1 iterations. !; ! !; !----------------------------------------------------------- !. Psi4 stopped on: Thursday, 09 April 2020 10:17AM; Psi4 wall time for execution: 0:00:00.77. *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4.; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1862:139,test,tests,139,https://psicode.org,https://github.com/psi4/psi4/pull/1862,1,['test'],['tests']
Testability,"## Description; FINDIF's geometry generator is brought Py-Side, per [#884](https://github.com/psi4/psi4/issues/884). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Geometry generators are now unified, so we don't need to edit all three generators when one is bugged.; - [x] Various PyBinding has been done. Among other things, the new Py-side compute_atom_map function from pyvib2 now works with psi4 molecules.; - [x] Fixes a bug in the `CharacterTable` copy constructor member initialization list, which used to require a string to be an integer.; - [x] Getting geometries for finite difference calculations is now Py-side.; - [x] Computing gradients from energies is now Py-side.; - [x] Computing hessians from gradients is now Py-side.; - [ ] Computing hessians from energies _will be_ Py-side.; - [ ] Add the banner.; - [ ] Finish renaming the finite difference functions.; - [ ] Review the findif test suite and add any tests as needed. In particular, make sure the functions are agnostic as to psi4 vs. qcdb molecules.; - [ ] Run the entire test suite, to make sure my PyBind'ing hasn't caused any deep problems.; * **User-Facing for Release Notes**; - [x] A warning now displays if you attempt to access-by-index or iterate over an irreped object, instead of using a NumPy accessor. ## Questions; - [ ] I had to change the internals of SymmetryOperation to make PyBind happy. I trust there are no objections?. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1010:971,test,test,971,https://psicode.org,https://github.com/psi4/psi4/pull/1010,3,['test'],"['test', 'tests']"
Testability,"## Description; FIxes the `fcidump` function for C1 symmetry. The looping over irreps was done incorrectly and the tests did not catch it. ; As noted by @loriab, the UHF FCIDUMP files seem erratic when it comes to the number of nonzero two-electron integrals printed out. ~I am tracking down the problem in issue #980 This PR disables the generation of integral dumps from UHF references.~. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fix `fcidump` function for C1 symmetry.; - [x] More robust testing facilities for FCIDUMP. Headers are compared and integrals are used to recompute the SCF one-, two-electron, total electronic and MP2 correlation energies. These are compared to the values computed by Psi4. This also fixes #980 Thanks @dgasmith!. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/957:115,test,tests,115,https://psicode.org,https://github.com/psi4/psi4/pull/957,5,"['Test', 'test']","['Tests', 'testing', 'tests']"
Testability,## Description; Fedora switched to the use of [FlexiBLAS](https://www.mpi-magdeburg.mpg.de/projects/flexiblas) in Fedora 33 as a unified interface to various BLAS/LAPACK implementations. This PR ports the patch by Björn Esser from Fedora to Psi4 per Fedora's guidelines of contributing any patches back upstream. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2246:497,Test,Tests,497,https://psicode.org,https://github.com/psi4/psi4/pull/2246,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; Finishes fixing up the full test suite. Full tests should now pass. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/717:44,test,test,44,https://psicode.org,https://github.com/psi4/psi4/pull/717,2,['test'],"['test', 'tests']"
Testability,## Description; First look at psi4-optking3.0 interface. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] replaces optking 2.0 call with optking 3.0 (python). ## Questions. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1120:259,Test,Tests,259,https://psicode.org,https://github.com/psi4/psi4/pull/1120,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; First we had to constrain einsums to the openblas variant on linux to get the env to solve b/c the most recent libblas wasn't available for MKL 2023. Then that got fixed on c-f and we could use the mkl variant. But that as a constraint, of course, won't work on Mac Silicon, which doesn't have MKL. It'd be cleanest if the solver handled it, so I'm giving the no-constraint a try. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3163:905,Test,Tests,905,https://psicode.org,https://github.com/psi4/psi4/pull/3163,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; First, this PR cleans up some manual memory management in `libscf_solver`, including a memory leak of an `nao`-by-`nso` matrix created once per call to the SCF code. During the course of fixing that, I uncovered a correctness error in `libmints`: the `dgemv` function was using rows rather than cols for an argument. The original choice was correct in Fortran-style indexing but not C-style indexing and disagreed with every other `C_DGEMV` call in Psi. It didn't cause any issues because `Vector::dgemv` is almost never used in Psi. The one other time I found it used was for a Hermitian matrix, which of course won't have problems. ## Questions; - [x] Jet, please double-check my claim of a bug in `libmints`. ## Checklist; - [x] Quick tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2347:754,test,tests,754,https://psicode.org,https://github.com/psi4/psi4/pull/2347,1,['test'],['tests']
Testability,## Description; Fix #2330. There was a unit error when the molecule is specified in Bohr. Now the fisapt-ext-abc test case and the modified script in #2330 give the same answer. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2331:113,test,test,113,https://psicode.org,https://github.com/psi4/psi4/pull/2331,4,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; Fix a minor logic error in DLPNO-MP2 code, where Mulliken charges are used for determining local density fitting domains, also cleans up variable names (removes underscores from variables that are not instance variables). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2707:28,log,logic,28,https://psicode.org,https://github.com/psi4/psi4/pull/2707,1,['log'],['logic']
Testability,"## Description; Fix for #1102. We were subtracting ECP's, as (Z + ECP) was > 0 (usually around 10), even when the atom was ghosted (Z == 0). ## Questions; - [x] Should this be applied against master or against #953?. ## Checklist; - [x] [All or relevant fraction of full tests run.](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) Test `dfmp2-ecp` modified to check for correct behaviour.; - [x] Fix #843. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1109:271,test,tests,271,https://psicode.org,https://github.com/psi4/psi4/pull/1109,3,"['Test', 'test']","['Test', 'tests']"
Testability,## Description; Fix more instances where RI inverse overlap is formed without the proper value for the fitting condition. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1546:297,Test,Tests,297,https://psicode.org,https://github.com/psi4/psi4/pull/1546,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; Fix occurrences of `psi4.property` in the documentation and replace by `psi4.properties`. ## Checklist; - [-] Tests added for any new features; - [-] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1762:126,Test,Tests,126,https://psicode.org,https://github.com/psi4/psi4/pull/1762,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Fix the mismatch issue on Github (#2258) and on the forum [http://forum.psicode.org/t/slight-mismatching-of-casscf-between-total-mcscf-energy-and-mcscf-root-0-energy/1693/4](http://forum.psicode.org/t/slight-mismatching-of-casscf-between-total-mcscf-energy-and-mcscf-root-0-energy/1693/4).; A more efficient way to obtain the CI coefficients after a redundant orbital rotation would be a direct transformation without solving the CI again, see [https://doi.org/10.1063/1.479573](https://doi.org/10.1063/1.479573). There might be two related issue:; - `H0block_` in DETCI keeps filling up during the MCSCF macro iteration. This will lead to repeated entries during the MCSCF iterations and sometimes lead to uncertain numerical behavior.; - The `""DFILE""` CI guess for the CI after orbital canonicalization is directly related to this issue. Using this guess leads to very slow convergence for the CI. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2259:936,Test,Tests,936,https://psicode.org,https://github.com/psi4/psi4/pull/2259,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Fixed wB97X-D3 to use the correct libxc functional, added KMLYP, and added/modified tests for both. Fixes #2206. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2207:100,test,tests,100,https://psicode.org,https://github.com/psi4/psi4/pull/2207,4,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Fixes #1052 at long, long last: when the user explicitly declares a symmetry, findif is now smart enough to put displacements in the proper subgroup. As part of the fix, control over molecule cloning for finite difference has passed to `_process_displacement`. It seemed easier (and more appropriate) than adding code to make a new clone in each for loop. The clone would be necessary so that each displacement can have its own symmetry. Since I was touching that part of the code anyways, I have reorganized so that the reference is guaranteed to be the first displacement. This has the advantage that if orbital reading is enabled, the following displacements will be able to read from the reference, as intended. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fixes #1052; - [x] Exposes more C functions to Python; - [x] Move the reference geometry first for ease of orbital reads. ## Checklist; - [x] Tests modified to account for bug fix; - [x] All findif tests passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1424:972,Test,Tests,972,https://psicode.org,https://github.com/psi4/psi4/pull/1424,2,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Fixes #1288. The trouble was that Bozkaya's code used libtrans to transform integrals, and those were written to disk in their antisymmetrized, redundancy-free form, as libtrans does. The DCT code gets different integrals from libtrans but then sorts those to get the same blocks as Bozkaya wrote earlier in the redundant form. Because the DCT-sorted integral block had antisymmetry redundancies, it was larger than the libtrans block that did not have those redundancies. Fixed by changing the code to use a block without those redundancies. I imagine this is of interest to @amjames and @ssh2. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fixes 1288. ## Checklist; - [x] DCFT tests run. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1336:747,test,tests,747,https://psicode.org,https://github.com/psi4/psi4/pull/1336,1,['test'],['tests']
Testability,"## Description; Fixes #1290 by wrapping calls to deprecated (and removed in Netlib's LAPACK 3.8.0) with appropriate replacements. **UPDATE**; I have added a `PSI_DEPRECATED` macro in `pragma.h` to be used to deprecate functions, classes, variables. It will emit a warning at compile-time. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Added a `PSI_DEPRECATED` macro; - [x] Wrap call to `DGEGS` with `DGGES`. Deprecate `C_DGEGS`.; - [x] Wrap call to `DTZRQF` with `DTZRZF`. Deprecate `C_DTZRQF`.; - [x] Wrap call to `DGEGV` with `DGGEV`. Deprecate `C_DGEGV`; - [x] Wrap call to `DGELSX` with `DGELSY`. Deprecate `C_DGELSX`; - [x] Wrap call to `DGEQPF` with `DGEQP3`. Deprecate `C_DGEQPF`; - [x] Check whether `DGGSVD3` and `DGGSVP3` are available in `tgt::lapack`. Fence off their use accordingly based on the `LAPACK_HAS_DGGSVD3` and `LAPACK_HAS_DGGSVP3` preprocessor variables, respectively. ; - [x] Wrap call to `DGGSVD` with `DGGSVD3`, if the latter is available. Deprecate `C_DGGSVD`.; - [x] Wrap call to `DGGSVP` with `DGGSVP3`, if the latter is available. Deprecate `C_DGGSVP`. ## Checklist; None of these subroutines were used in Psi4, so I only ran smoketests locally.; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge **SQUASH**",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1314:1236,Test,Tests,1236,https://psicode.org,https://github.com/psi4/psi4/pull/1314,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Fixes #1370 and cleans up some code relating to orbital occupations. `scf_iterator.py` is yapf-ified, the occupation printing code is now Py-side, and two variables specifying the same thing (`nirreps` and `nirrep_`) in the HF initialization have been condensed into a single variable. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] An error message is now raised when the electron count from DOCC and SOCC is inconsistent with the molecule's electron count. ## Checklist; - [x] `scf` and `findif` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1637:565,test,tests,565,https://psicode.org,https://github.com/psi4/psi4/pull/1637,1,['test'],['tests']
Testability,## Description; Fixes #1528: the index offsets were wrong for ghost atoms. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1529:250,Test,Tests,250,https://psicode.org,https://github.com/psi4/psi4/pull/1529,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Fixes #1698. Psi wasn't sending AOs normalized to unity, and NBO was correcting it by transforming the Fock matrix and the density matrix both _inversely_ to the overlap matrix. That's not how you want to do it! The Fock matrix transforms the same way, but the density matrix (and the AO index of C) transform inversely. Because NBO can't be trusted to do the transformation correctly, Psi does it itself. To make coding that easier, the NBO writing was moved to Python. The C-code still exists until 1.5, where it shall be ripped out of `libmints`. Deprecation warnings have been added. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fixes a bug causing incorrect Psi to produce incorrect NBO input files involving Cartesian basis sets with angular momentum of d or more (#1698).; - [x] Moved NBO Writing python-side.; - [x] Please use `wfn.write_nbo(name)` to write NBO files from now on. ## Checklist; - [x] Confirmed that the old and new NBO interfaces produce the same input.47 files for the current test case and a test case with linear dependencies.; - [x] Confirmed that the NAO populations and energies match with the 6-31+G(d) basis between QChem and Psi4. This confirms the accuracy of the overlap, AO density, and AO Fock matrices. The disagreements are either in the last decimal place or due to setting up coordinate systems.; - [x] Confirmed that the MOs in terms of AOs, as reported by NBO, match with the 6-31+G(d) basis between QChem and Psi4. This additionally checks the accuracy of the C matrix. Again, the order of the d matrices shifts due to different orientation systems in my test cases. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1790:1072,test,test,1072,https://psicode.org,https://github.com/psi4/psi4/pull/1790,3,['test'],['test']
Testability,"## Description; Fixes #1918 by removing the subspace preconditioner, per @robertodr's recommendation. This also adds some more comments to the code, crucially, the fact that this solves the problem `Hx=b` as opposed to `Hx+b=0`. Signs are important. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Disables the broken subspace preconditioner in the CGRSolver. ## Checklist; - [x] Tested that a helpful warning runs if the user specifies a subspace preconditioner for the CGRSolver. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1919:430,Test,Tested,430,https://psicode.org,https://github.com/psi4/psi4/pull/1919,1,['Test'],['Tested']
Testability,"## Description; Fixes #2136 by remembering to close a DPD file, because I'm a glutton for DF gradient bugs. I'm impressed that these gradients are correct. I would have thought that the standard `libmints/deriv.cc` technology couldn't have gotten DF gradients right, but you can't argue with finite difference tests. I'll have to look into this at a later date. ## Todos; - [x] DF-CC2 gradients working. ## Checklist; - [x] Tests added for newly working DF-CC2 gradients. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2137:310,test,tests,310,https://psicode.org,https://github.com/psi4/psi4/pull/2137,2,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Fixes #2265.; This is a first attempt to make the feature work in `cpscf_linear_response`, but the code is a bit ugly and needs to be cleaned up...; ~~I'm also not 100% sure why/where correct pre-factors/signs need to be added 🤯 😄~~. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] UHF linear response properties; - [x] removed user-provided vectors from `cpscf_linear_response`. ## Questions; - [x] How should user vectors be handled?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2266:532,Test,Tests,532,https://psicode.org,https://github.com/psi4/psi4/pull/2266,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Fixes #994 and #1038. FT97 does not want to converge, so I gave it a handicap. And with that, all the tests that run in a reasonable amount of time pass on a release build. ## Checklist; - [x] [All full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1378:118,test,tests,118,https://psicode.org,https://github.com/psi4/psi4/pull/1378,3,['test'],['tests']
Testability,## Description; Fixes a PCM test failure when running `psi4 --test`. The bug was pointed out by @loriab in #697 . Closes #697. ## Questions; - [x] Should I also modify `tests/pytest/test_addons.py` to mirror the contents of `pcmsolver/scf/input.dat` so that it doesn't rely on `P::e.globals`? Both methods to get `PCM POLARIZATION ENERGY` are now tested. See discussion in #697 . ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/701:28,test,test,28,https://psicode.org,https://github.com/psi4/psi4/pull/701,4,['test'],"['test', 'tested', 'tests']"
Testability,## Description; Fixes a bug in the DFJK gradient algorithm when using disk paging. On top of drawing similarities to Python and C++ one should be very aware of their differences as well. Bit me here. Fixes #1094 and Fixes #1095. As a note it is not possible to ensure that the provided test continues to check the paging algorithms as circumstance may change. Is there a good way to encode this thought into the test?. Something to back port quickly. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1096:286,test,test,286,https://psicode.org,https://github.com/psi4/psi4/pull/1096,2,['test'],['test']
Testability,"## Description; Fixes a bug in the semicanonicalization procedure cause by an uninitialized matrix. This also exposes a `set_Lagrangian` in the `Wavefunction` class, which is needed to make gradients work for plugins not based on `Wavefunction`. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1847:300,test,tests,300,https://psicode.org,https://github.com/psi4/psi4/pull/1847,2,['test'],['tests']
Testability,"## Description; Fixes a bug that occurs when one runs `psi4 --qcschema` and requests that the wavefunction is returned. . Before the orbitals / fock matrix / etc. are returned, all AO-indexed tensors are sorted according to CCA ordering: `Ca` and `Cb` are dimension [AO x MO], so their rows are sorted. `Fa`, `Fb`, `Da`, and `Db` are all dimension [AO x AO], so they are sorted by both row and column. `epsilon_a` and `epsilon_b` are not AO-indexed, so they shouldn't be sorted at all. As an example, the following HF calculation has fewer MOs than AOs because of linear dependencies, and Psi4 will throw an error when `epsilon_a` is treated as if it were of length AO:; ```; import psi4. ret = psi4.schema_wrapper.run_qcschema({; ""molecule"": {; ""geometry"": [; 0.0, 0.0, -0.1294769411935893,; 0.0, -1.494187339479985, 1.0274465079245698,; 0.0, 1.494187339479985, 1.0274465079245698; ], ; ""symbols"": [""O"", ""H"", ""H""],; }, ; ""driver"": ""energy"",; ""model"": {; ""method"": ""hf"",; ""basis"": ""d-aug-cc-pvqz"" # larger basis -> more lin deps; }, ; ""keywords"": {; ""scf_type"": ""df"",; ""s_tolerance"" : 1e-4, # loosen lin dep cutoff; }, ; ""protocols"": {; ""wavefunction"" : ""orbitals_and_eigenvalues"",; } ; ; }); print(ret.error); ```. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2112:1270,test,tests,1270,https://psicode.org,https://github.com/psi4/psi4/pull/2112,2,['test'],['tests']
Testability,## Description; Fixes a bug that prohibits computing stability analysis for wfns with an X2C Hamiltonian.; Previously the relativistic basis was not set which made mints unhappy. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1374:199,Test,Tests,199,https://psicode.org,https://github.com/psi4/psi4/pull/1374,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; Fixes a bug where a Becke grid is used instead of Treutler in case a Treutler grid was requested. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2044:298,Test,Tests,298,https://psicode.org,https://github.com/psi4/psi4/pull/2044,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Fixes a bug where the following input file crashes:; ```; molecule {; O; H 1 1 ; H 1 1 2 104.5; }. set basis sto-3g. set scf {; damping_percentage 20; }. energy('scf'); ```. `damping_percentage` is defined as a _double_. Before this commit, Psi would naively set the relevant keyword to be the int the user gave it and then complain when it tried to read options later. It now knows to cast to double. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fixes type conversion bug in options system. ## Checklist; - [x] No tests run beyond Travis and that the input file up top. This PR doesn't need it. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1352:584,test,tests,584,https://psicode.org,https://github.com/psi4/psi4/pull/1352,1,['test'],['tests']
Testability,"## Description; Fixes a segfault discovered by @mfherbst while developing #2767.; It was caused by adding `#include ""psi4/libmints/potentialint.h""` in `mintshelper.cc`, because `potentialint.h` included L2's `engine.h`. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Fix ""future"" segfault by reorganizing PCM functors (moved to `.cc` files to avoid L2 `engine.h` include). See discussion in #2767 . ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2770:643,Test,Tests,643,https://psicode.org,https://github.com/psi4/psi4/pull/2770,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; Fixes an error involving a FNO-(T) delta correction for CBS as in `energy('fno-ccsd/cc-pVDZ+D:fno-ccsd(t)/cc-pVDZ'`. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1377:187,test,tests,187,https://psicode.org,https://github.com/psi4/psi4/pull/1377,2,['test'],['tests']
Testability,"## Description; Fixes and closes #1298. `full_hess_every` now takes hessians at the latest geometry rather than the reference geometry. Because this bug was not caught by the test suite, I've added a test to catch this bug, and it clocks in at just over 6 seconds on my Mac. ## Checklist; - [x] Tests added for newly working features. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1299:175,test,test,175,https://psicode.org,https://github.com/psi4/psi4/pull/1299,3,"['Test', 'test']","['Tests', 'test']"
Testability,## Description; Fixes bug reported [here](http://forum.psicode.org/t/fixed-dihedral-optimization-error/323). I was sloppy and apparently no one had tried a 0 degree fixed angle before. * **User-Facing for Release Notes**; - [ ] Fixes bug preventing fixed (target) values of exactly zero. ## Status; Passed HOOH at 0 degrees. Still need to run other psi standard tests. ; - [ ],MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/535:362,test,tests,362,https://psicode.org,https://github.com/psi4/psi4/pull/535,1,['test'],['tests']
Testability,"## Description; Fixes calculation of nuclear-nuclear interaction energy if a QM/MM point charge and a Ghost atom are at the same position as in the example below. Since a Ghost atom has no nuclear charge, it should not contribute. At any other position apart from the nuclear centers, it would not contribute. But since at this position, the distance between the Ghost and the atom is zero such that the current code wrongly produces a NaN energy. Setups like this are relevant for [alchemical calculations](https://dx.doi.org/10.1103/PhysRevResearch.2.023220) where fractional nuclear charges are required. ```; molecule mol {; @N 0. 0. 1.; N 0. 0. 0.; no_reorient; no_com; symmetry c1; -7 1; }. Chrgfield = QMMM(); Chrgfield.extern.addCharge(7.05, 0., 0., 1.); psi4.set_global_option_python('EXTERN', Chrgfield.extern). set basis 6-31G; set reference rhf; e, wfn = energy('pbe', return_wfn=True); ```. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish. ## Questions. ## Checklist; - [x] [All or relevant fraction of full tests run on local machine](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1993:1063,test,tests,1063,https://psicode.org,https://github.com/psi4/psi4/pull/1993,2,['test'],['tests']
Testability,## Description; Fixes crash when the automatic Cholesky procedure is triggered by a linearly dependent basis set. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fixes a bug where the program crashes when the automatic Cholesky cleanup is triggered; - [x] Adds a test for the automatic Cholesky cleanup; - [x] Doesn't print out the Cholesky decomposed matrix any more; saving tens to hundreds of megabytes in log file size; - [x] Unifies printout between the partial Cholesky and other orthogonalization methods. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1817:313,test,test,313,https://psicode.org,https://github.com/psi4/psi4/pull/1817,5,"['Test', 'log', 'test']","['Tests', 'log', 'test', 'tests']"
Testability,## Description; Fixes inconsistent basis set parsing as decribed in https://github.com/psi4/psi4/issues/1996. ## Todos. ## Questions. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2002:154,Test,Tests,154,https://psicode.org,https://github.com/psi4/psi4/pull/2002,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; Fixes issue #3085 . ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] `oeprop()` args are no longer case-sensitive (py-side). ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3086:285,Test,Tests,285,https://psicode.org,https://github.com/psi4/psi4/pull/3086,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; Fixes issues #2487 where the `print` keyword was not being properly set in part of `detci` module. S^2 value now prints out if `calc_s_squared` is turned on. ## Checklist; - [x] CI tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2589:197,test,tests,197,https://psicode.org,https://github.com/psi4/psi4/pull/2589,1,['test'],['tests']
Testability,"## Description; Fixes many compiler warnings by no longer passing redundant arguments to Matrix constructors. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Fixes 83 compiler warnings, 81 of which were coming from `dct`. ## Checklist; - [x] quick tests and dct tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3175:440,test,tests,440,https://psicode.org,https://github.com/psi4/psi4/pull/3175,2,['test'],['tests']
Testability,"## Description; Fixes some of the issues with ERD in Psi4. Moves a piece of the normalization from ERD to Psi4. This prevents multiplication by zero inside ERD, which results in incorrect integral values. Note that the multiplication by zero doesn't happen in Psi4, as the normalization routine doesn't get called for a ""zero"" basis set (ie, in density fitting). **Warning** I don't know how well-tested ERD in Psi4 is. I still get some failing tests, although there is certainly an improvement from before. Ideas for why this might be are welcome. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/587:397,test,tested,397,https://psicode.org,https://github.com/psi4/psi4/pull/587,2,['test'],"['tested', 'tests']"
Testability,"## Description; Fixes the ""decimal point of death for Zn"" BS radius that leads to likely wrong DFT results (and bad SCF convergence).; Relevant for MBIS PR ( #1961) test systems, where the error became apparent. ZnO molecule with PBE0/def2-SVP and 434 spherical grid points:; | radial points | old N(electrons) | old E | new N(electrons) | new E |; |---------|--------------------|---------------------|--------------------|---------------------|; | 75 | 42.38542254742733 | -1867.6992099879865 | 37.999997369772665 | -1853.8406995133948 |; | 99 | 35.70883041483774 | -1843.0139920380993 | 37.99999898528541 | -1853.8406965374315 |; | 200 | 37.996233783694734 | -1853.8819221398608 | 37.99999900043764 | -1853.8406976562953 |. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] fixes Zn radius (2551 -> 2.551) !!. ## Checklist; - [x] manual Zn tests. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2000:165,test,test,165,https://psicode.org,https://github.com/psi4/psi4/pull/2000,2,['test'],"['test', 'tests']"
Testability,## Description; Fixes the DKH interface in Psi4. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [X] Test case added comparing to a Molpro calculation. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/702:175,Test,Test,175,https://psicode.org,https://github.com/psi4/psi4/pull/702,1,['Test'],['Test']
Testability,## Description; Fixes the documentation build because I forgot to remove the deleted `adcc` cmake test dir from `doc/sphinxman/document_tests.pl`. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2539:98,test,test,98,https://psicode.org,https://github.com/psi4/psi4/pull/2539,4,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,## Description; Fixes the issue #1694 . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Calculations work also when the zeroth symmetry block has no basis functions. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1695:267,Test,Tests,267,https://psicode.org,https://github.com/psi4/psi4/pull/1695,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Fixes up the OpenMP problems. This still needs some tidying, but you can start to take a look. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Mostly this polishes the new OpenMP/Math interface/detection by expanding it to C/CXX/Fortran (thanks, v2rdm, for playing your persistent role of complicating things) and making sure vars are propagated among the externalprojects. Key cmake option is `OpenMP_LIBRARY_DIRS` which is a `;`-sep PATH-like var to search for omp libs if not naturally found. closes #1041 ; - [x] fix a few DISK_DF in driver and add some long-awaited (really, look at the milestone history for that ticket) freq docs in #350 ; - [x] fatal_error's ERD; - [x] bump various upstream/downstream; - [x] get ambit back (can't readily test it except by building plugin). ## Questions; - [x] Roberto and Radovan should look over the CMake. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1053:831,test,test,831,https://psicode.org,https://github.com/psi4/psi4/pull/1053,1,['test'],['test']
Testability,"## Description; Follow-up PR to #2359. This PR implements the direct-density fitted J algorithm (https://pubs.rsc.org/en/content/articlelanding/2002/cp/b204199p) to be used with LinK to allow for performance gains. A new code infrastructure is also introduced that allows for split J/K build algorithms, through the Composite JK class (not callable by user, but a reroute by the developer). Example of how to call my new code:; ```; scf_type direct_df_linK; ```. ### NOTES:; - Composite JK will be extended with other Split JK algorithms in the future (CFMM @andyj10224, and Chain-of-Spheres K @zachglick). ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Introduction of Composite JK class; - [x] Implementation of Direct-DF-J algorithm; - [x] Refactor of LinK algorithm into Composite JK framework. ## Questions; - [x]. ## Checklist; - [x] Tests added for any new features; - [x] Docs added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge. ## Table of Contents (Suggested Review Order); ### 1.) LinK Refactor; - [Removal of LinK from DirectJK](https://github.com/psi4/psi4/pull/2543#discussion_r848777136); - [LinK Class Header Information](https://github.com/psi4/psi4/pull/2543#discussion_r848776564); - [New Home of LinK Algorithm](https://github.com/psi4/psi4/pull/2543#discussion_r848777810). ### 2.) DirectDFJ Algorithm; - [DirectDFJ Header File](https://github.com/psi4/psi4/pull/2543#discussion_r848778214); - [Home of DirectDFJ Algorithm](https://github.com/psi4/psi4/pull/2543#discussion_r848778585). ### 3.) CompositeJK Structure; - [CompositeJK Header Information](https://github.com/psi4/psi4/pull/2543#discussion_r848779185); - [SplitJK Base Class Header Information](https://github.com/psi4/psi4/pull/2543#discussion_r848779584); - [Calling my code from jk",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2543:900,Test,Tests,900,https://psicode.org,https://github.com/psi4/psi4/pull/2543,2,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; For large systems it's often sensible to freeze HF orbitals, rather than dumping a very large FCIDUMP file, only to be slowly read in again and frozen in the downstream program. However, I noticed that the `fcidump` functionality isn't handling the frozen keywords in the expected way (the MO slice goes from `frzcpi` to `active_mopi`, when it should obviously go to `frzcpi+active_mopi`). I've also added a test in `tests/fcidump/input.dat` to check this. The added test would fail on the current master. Additionally, for some reason the patch in #2277 stopped working, and in the current master, the 1/0 e integrals are again 1 space wider than the 2e integrals. This patch also fixes it. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2545:424,test,test,424,https://psicode.org,https://github.com/psi4/psi4/pull/2545,3,['test'],"['test', 'tests']"
Testability,"## Description; For reasons described at https://github.com/PCMSolver/pcmsolver/issues/201, Psi4 has been fixed at PCMSolver v1.2.1 . This updates to v1.2.x with very small (e.g., 1e-8) tweaks to ref values. I do finally understand why v1.3.x was failing, but those are much larger changes to ref values (e.g., 1e-2; probably washes out in relative energies), so I'd like @robertodr to weigh in. UPDATE: The plan is to go with v1.2 for now and wait on v1.3. The conda package is RTG at 1.2 but isn't merged yet. A later rebuild of the 1.8 conda package could include pcmsolver support. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Update PCMSolver to v1.2.3 ~or v1.3.x~. ## Dev notes & details; - [x] add pcmsolver citation printing to psi4 output file; - [ ] build c-f package https://github.com/conda-forge/staged-recipes/pull/22286; - [x] update ecosys GHA to test pcmsolver; - [x] this runs fine locally, and I'm confident in it, so marking ready for review. it'll take a while for CI to catch up to that optimism. ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2903:991,test,test,991,https://psicode.org,https://github.com/psi4/psi4/pull/2903,4,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; For some applications it may be helpful to know the converged populations and widths of all shells in MBIS, so here goes the patch. As for the initial values, the info is only printed when debug>=1. ## User API & Changelog headlines; N/A. ## Dev notes & details; - [x] Print converged MBIS shell populations and widths when debug>=1. ## Checklist; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3102:404,test,tests,404,https://psicode.org,https://github.com/psi4/psi4/pull/3102,2,['test'],['tests']
Testability,## Description; Fractional SAD now honors the atomic ground spin state. A guess with spin-restricted occupations is also available. The fractional code now supports all elements up to Og. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1452:363,Test,Tests,363,https://psicode.org,https://github.com/psi4/psi4/pull/1452,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; Fractional SAD now honors the atomic spin state. The code also now supports all elements up to Og. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Density corresponds to right spin state; - [x] Code supports the whole of the periodic table. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1450:358,Test,Tests,358,https://psicode.org,https://github.com/psi4/psi4/pull/1450,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Furthers the generality of integral transformations and enables a special workflow, `DIRECT_iaQ`, to alleviate disk IO when transforming to `pqQ` forms. Timings comparing the `DIRECT_iaQ` and `DIRECT` methods are inbound. Edit: Here are some tests that (almost comically) display the efficacy of `DIRECT_iaQ` over `DIRECT` + `pqQ`. 1. Test1: ; [input.txt](https://github.com/psi4/psi4/files/1740970/input.txt); [timer.txt](https://github.com/psi4/psi4/files/1740977/timer.txt). 2. Test2: ; [input.txt](https://github.com/psi4/psi4/files/1740966/input.txt); [timer.txt](https://github.com/psi4/psi4/files/1740974/timer.txt). Notice the difference between the `DFH: MO to disk` timers. . Edit2: I added a reduction on `max_val` in `prepare_sparsity` to ensure thread safety. This was incorrect before. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - DF_Helper now has three methods for integral transformations:; `STORE`: Contracts metric with AO integrals, stores, then transforms.; `DIRECT`: Transforms integrals, contracts with metric.; `DIRECT_iaQ`: Optimized `DIRECT` workflow when using `pqQ` transformed integrals. - DF_Helper outputs any transformed integral form you want: `Qpq`, `pQq`, or `pqQ`. The following can be used for each of the respective methods listed above:; `STORE`: `Qpq`, `pQq`, or (ill-advised) `pqQ`; `DIRECT`: `Qpq`, `pQq`, or (ill-advised) `pqQ`; `DIRECT_iaQ`: `pqQ`. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/913:258,test,tests,258,https://psicode.org,https://github.com/psi4/psi4/pull/913,1,['test'],['tests']
Testability,"## Description; Get Psi4 running correctly with Intel (2021.4) again. I'm sorry to uglify the nice structured bindings (thanks for the name, @robertodr). Edit with any better suggestions. I've got full tests running locally. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2511:202,test,tests,202,https://psicode.org,https://github.com/psi4/psi4/pull/2511,4,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Get ready for CODATA 2018. I'm stashing this branch for now where I won't forget it. Not targeting v1.4. ## Todos; - [x] sometimes had been importing directly from qcel.constants, which has been always 2014 but in future could be 2014 or 2018 depending on qcel version. So now everyone's using the 2018 object set up as `psi4.driver.constants`; - [x] prepare c-side constants in physconst.h dumped by qcel; - [ ] heal tests from constants change. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1795:434,test,tests,434,https://psicode.org,https://github.com/psi4/psi4/pull/1795,4,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; Get rid of some unused custom DIIS code that I found. ## Checklist; - [x] SAPT tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2334:95,test,tests,95,https://psicode.org,https://github.com/psi4/psi4/pull/2334,1,['test'],['tests']
Testability,"## Description; Gets back to full testsuite passing, fix cmake fix, better random directory labeling. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Changed all the subdirs uniqued by `random` for cfour, dftd3, gcp, basis blocks into `uuid`.; - [x] `MintsHelper::so_potential` was returning C1 matrices w/o applying perturbations, probably an oversight in psi4/psi4#635. Fixed test pcmsolver/dipole, which this had broken.; - [x] Too small memory for dftd3/version so fixed.; - [x] MRCC distributes a GENBAS with insufficient basissets that was getting picked up before psi4's GENBAS. So select psi4's GENBAS specifically.; - [x] The problem addressed by psi4/psi4#652 broke some of the underlying code, letting, for example, `/usr/lib64` into rpath, which is not the purpose of rpath. @susilehtola, please check that the current patch fixes your original psi4/psi4#648; - [x] The 180.npz wan't working for relative execution _e.g._, `(objdir >>>) stage/.../bin/psi4 ../tests/tu1.../input.dat` so fixed. Also moved orb rotation test case to cookbook dir.; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/654:34,test,testsuite,34,https://psicode.org,https://github.com/psi4/psi4/pull/654,4,['test'],"['test', 'tests', 'testsuite']"
Testability,"## Description; HERE IT IS!!! This is a draft of the DLPNO-CCSD PR that will be coming in the next few months. The purpose of this is for the developers and research groups to be able to run and test DLPNO-CCSD before it is officially part of the code. . Credit to @JoseMadriaga for the derivations ; [LocalCCSD1to10.pdf](https://github.com/psi4/psi4/files/11114337/LocalCCSD1to10.pdf). Useful References:; [Original DLPNO-CCSD Paper](https://aip.scitation.org/doi/full/10.1063/1.47735); [Sparse Maps II Paper](https://aip.scitation.org/doi/10.1063/1.4939030). Example Input File; ```; memory 20 GB. molecule mol {; 0 1; O 0.705 0.744 0.16; H -0.071 0.264 0.45; H 1.356 0.064 -0.014; symmetry c1; }. set {; basis cc-pVDZ; scf_type df; freeze_core true; pno_convergence normal; }; energy('dlpno-ccsd'); ```. ### Results (Waterclusters in TZ); [Speedups, relative to DF-CCSD]; ![wc_tz_speedups](https://user-images.githubusercontent.com/60559795/228892229-c3269bf9-3386-4861-8660-92a6dcc3685e.jpeg). [Percent Correlation Energy Recovered, relative to DF-CCSD, all >= 99.9%]; ![wc_tz_percent_corr_recovered](https://user-images.githubusercontent.com/60559795/228892322-7c968c62-f874-496c-84e3-06b65c84803d.jpeg). ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Implement the DLPNO-CCSD algorithm. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feel free to use this code, it is not fully tested yet, but preliminary tests show encouraging results, and is MUCH faster than conventional CCSD; - [ ] If you benchmark my code, please post results in the thread. ## Questions; - [ ] Question1. ## Checklist; - [ ] Add documentation; - [ ] Add references to terms and equations; - [ ] Tests a",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2915:195,test,test,195,https://psicode.org,https://github.com/psi4/psi4/pull/2915,1,['test'],['test']
Testability,## Description; Heals tests and marks the tests that _should have caught this_ as `fnocc` tests. ## Checklist; - [x] `ctest -L fnocc` passes _and is now enlarged_. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2444:22,test,tests,22,https://psicode.org,https://github.com/psi4/psi4/pull/2444,3,['test'],['tests']
Testability,"## Description; Here's another JK mini-PR. This one seems to be of interest in multiple future JK-related developments (such as https://github.com/psi4/psi4/pull/3158), so I figured it would be good to add it on its own. This PR changes the behavior of `CompositeJK::name()` so that, instead of returning the value ""CompositeJK"", it returns the names of the underlying `SplitJK` algorithms used. Additionally, using this feature, a new test has been added to `test_compositejk.py`, testing to make sure that proper composite algorithm pairs are called, given an input `SCF_TYPE=J_ALGO + K_ALGO`. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [X] Improves behavior of the `CompositeJK::name()` function. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [X] `CompositeJK::name()` now returns the combined names of the substituent `SplitJK` components rather than ""CompositeJK"".; - [X] Adds new test to ensure proper calling of CompositeJK algorithm pairs. ## Questions; - [X] N/A. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3182:436,test,test,436,https://psicode.org,https://github.com/psi4/psi4/pull/3182,6,"['Test', 'test']","['Tests', 'test', 'testing', 'tests']"
Testability,"## Description; Honestly, this started as just updating pybind11 to detect via config. It got out of hand, but to good results. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `exception.message` --> `str(exception)` since former sometimes raises an error in the course of handling another.; - [x] fix python/json testing when PYMOD_INSTALL_LIBDIR is non-default.; - [x] export psi4::core target. use it in plugin. much simplify the psi4Config. tidy up the share installs.; - [x] flatten install dir structure. no more `external/`; - [x] shift importing of official plugins. rename psi4 --plugin* options. add cmake -C line. update CM templates.; - [x] switch over Py detection to PythonLibsNew. Beautify components printing. ; - [x] Move threads detection to target.; - [x] start testing the plugin templates again; - [x] standardize `Psi4Macros` --> `psi4OptionsTools`.; - [x] Correct CXX comp names in autocmake_static_lib (@robertodr, I copied this from you, so you may have it wrong, too). Check enabled langs properly rather than compilers defined so OptionsTools usable to other projects with diff enabled langs.; - [x] switch pybind11 to upstream source. better handle c++ std wrt pybind. `PSI4_CXX_STANDARD` --> `psi4_CXX_STANDARD`.; - [x] compile test of gcc version able to account for -gcc-name/-gxx-name (@bennybp, here's the code for what we talked about once in `custom_cxxstandard.cmake`); - [x] convert restrict test to write its own file.; - [x] kill off LAB and @jturney config files. replace with `cmake -C psi4PluginCache.cmake` suited config file.; - [x] `psi4pasture` --> `pasture`.; - [x] always whole-archive dpd and qt; - [x] `external` --> `external/upstream`, `internals` --> ``external/downstream`; - [x] remove old Find*cmake files. * **User-Facing for Release Notes**; - [x] We changed our python detection module to the one used by NumPy. Also changed so that not actually using libpython anywhere.; - ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/554:381,test,testing,381,https://psicode.org,https://github.com/psi4/psi4/pull/554,2,['test'],['testing']
Testability,## Description; How many PRs does it take to correctly and conveniently print JK memory? This is the fourth. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] SAD guess was printing a dfh memory announcement for every atom type of the SAD guess ever since we starting printing for both sufficient and insufficient AO in-core memory in #1097. This adds a `print_lvl` to DFHelper and sets it to 0 for SAD. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1104:523,test,tests,523,https://psicode.org,https://github.com/psi4/psi4/pull/1104,2,['test'],['tests']
Testability,"## Description; I added a new integral transformation for CASSCF. This PR does the integral transformation as a series of J builds rather than actually carrying out an N^5 integral transformation. For direct, DF, gtfock, this can provide some significant savings. . For example, a system with 3248 basis functions, the AO-DF-CASSCF performs the CASSCF procedure in 7054 second while the DF-CASSCF performs the CASSCF procedure in 14800 seconds. . This is a serial version of the AO-CASSCF procedure. It is possible to implement this in parallel by using a distributed Fock builder. I will make another PR once I can get GTFock to compile, but this code works without GTFock and MPI. . ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Corrected a call to build Q in IncoreSOMCSCF; - [x] Allowing GTFockJK to work better with libfock (can initialize GTFockJK and compute later on); - [x] Added two test cases for this feature: ao-casscf-sp and ao-dfcasscf-sp; - [x] I don't understand how the CI ordering works for frozen core. Might need a little guidance for this. ; ## Questions; - [x] @dgasmith, ; Could you take a look at how to add frozen core to the integral transformation?; I can show you how I have frozen core in my CASSCF, but I don't understand how the CI ordering changes with frozen core.; - [x] I tried to add test cases, but I am not sure if I followed the right way to add test cases. Please take a look to make sure I added those correctly. . ## Status; - [x] If you are fine with no frozen core, this is ready to go.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/520:962,test,test,962,https://psicode.org,https://github.com/psi4/psi4/pull/520,3,['test'],['test']
Testability,"## Description; I didn't know https://github.com/lothian/test-psi4-map existed, so possibly others don't either. Now that we have codemeta.json for this sort of info, let's consolidate there. Added latitude and longitude fields. Also updated Alex Sokolov and Peter Kraus locations. ## Status; - [x] Ready for review; - [x] Ready for merge **SQUASH**",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1305:57,test,test-,57,https://psicode.org,https://github.com/psi4/psi4/pull/1305,1,['test'],['test-']
Testability,"## Description; I don't want to fix py27 bug in #1098, so this evades testing it. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] CI: stop testing py27. insufficient conda pkgs to add py37. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1099:70,test,testing,70,https://psicode.org,https://github.com/psi4/psi4/pull/1099,2,['test'],['testing']
Testability,"## Description; I hate to add 7MB to the repo, but we really ought to have complete/new output.ref's, so here 'tis. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fresh output.ref for tests; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/705:252,test,tests,252,https://psicode.org,https://github.com/psi4/psi4/pull/705,1,['test'],['tests']
Testability,"## Description; I have discovered that running DLPNO-MP2 (#2093, #2378) on Cartesian basis sets like (6-31G, 6-31G*, 6-31+G, 6-31+G*, etc) leads to a segfault. Turns out, this was a bug in the `PointsFunction` class, where `set_deriv(0)` is not called ; if the basis set is NOT spherical. I fixed the bug and added a new test case to reflect this. Requesting reviews from @zachglick @loriab @JonathonMisiewicz . ## User API & Changelog headlines; None :). ## Dev notes & details; - [x] Fix DLPNO-MP2 Segfault with Cartesian Basis Sets; - [x] Add new DLPNO-MP2 test for Cartesian Basis Sets. ## Questions; None. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2840:321,test,test,321,https://psicode.org,https://github.com/psi4/psi4/pull/2840,5,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; I realized that when running PBEh-3c, the calculation would take longer than expected. This was due to the use of a large basis during the density fitting procedure. I have just added the information required to make the code use the same auxiliary basis for the def2-mSVP basis as the ones used for def2-SVP. I did not test this modifications using the test cases. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Improve performance of PBEh-3c when used with the default def2-mSVP basis set. ## Questions; - [ ] None. . ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1558:336,test,test,336,https://psicode.org,https://github.com/psi4/psi4/pull/1558,5,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; I recently discovered a bug where CBS finite-difference Hessians will crash on systems with zero dipole moment. This is due to `CompositeComputer` not loading a dipole with entries all exactly zero into qcvars. This fix checks that CBS results are not None rather than have any non-zero entries before loading into qcvars. I have verified that this fixes the crash and that e.g. non-existing Hessians are stiil not loaded into result qcvars. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Fixed a bug causing CBS extrapolated finite-difference Hessians to crash on systems with zero dipole moment. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] `CompositeComputer` loads variables with zero'd entries in qcvars.; - [x] `FiniteDifferenceComputer` checks for dipoles when doing finite-difference by gradients. ## Checklist; - [x] cbs tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2759:1167,test,tests,1167,https://psicode.org,https://github.com/psi4/psi4/pull/2759,1,['test'],['tests']
Testability,## Description; I think I owe everyone an update on the docs to answer the question: Which algorithm/implementation is used for which kind of one-electron integral? This PR adds a table to the integral documentation with all the necessary information. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Table added. ## Checklist; - [x] ~Tests added for any new features~; - [x] ~[All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests)~. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2527:393,Test,Tests,393,https://psicode.org,https://github.com/psi4/psi4/pull/2527,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; I thought I would try out increasing our code coverage a bit. As such, I have added several tests and removed a deprecated pieces of code. This accidentally includes my NumPy PR, so please pull that one in first. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Always Flush on `outfile->Printf` call. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/754:108,test,tests,108,https://psicode.org,https://github.com/psi4/psi4/pull/754,1,['test'],['tests']
Testability,"## Description; I tracked down a seg fault during a largish cc2 calculation to an integer overflow in the value of `size` in DPD::buf4_scmcopy(). I think it was triggered because I allocated a large amount of RAM so a huge chunk of data was to be copied in one go rather than in bits. In my case,; `size = rowtot*coltot = 47252*47252 = -2062215792`; Funnily enough, memcpy wasn't very happy being called with a negative size to copy!. It's a simple case of `int*int` being larger than an int!. Changing `size` to a `long int` and adding some casts matches other sections of the file (although perhaps replacing them all with `size_t` might be better?). ## Questions; This fix got my calculation past the point where it caused the seg fault (although it's still running: it might take a few days!). This bug probably only got triggered by large jobs with a lot of RAM so the in-core copy was performed: there could be similar overflows to track down (similar to that [recently found in the SAPT code](http://forum.psicode.org/t/sapt2-calculation-segmentation-fault-during-exch12-computation/415/6)). I guess a safer option would be test the values for overflow (I've not thought how it behaves 32 vs 64 bit!). ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/685:1131,test,test,1131,https://psicode.org,https://github.com/psi4/psi4/pull/685,1,['test'],['test']
Testability,"## Description; I was testing a trick I had heard of to clean up valgrind output (which alas, didn't work). I got carried away fixing the memory leaks it reported before deciding that continuing was not the best way to use my time. Don't expect this work to be continued in the immediate future. A ""Valgrind Day"" just like ""LGTM Day"" or ""Documentation Day"" would be very useful. ## Checklist; - [x] Because this was just fixing memory leaks, I'll leave testing to Azure. I can do more if anybody thinks there would be use in it?. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1755:22,test,testing,22,https://psicode.org,https://github.com/psi4/psi4/pull/1755,2,['test'],['testing']
Testability,"## Description; I would like access to the CCSD pair energies from the FNOCC code in Psi4. I made a small modification to the FNOCC code so the pair energies are calculated (using an existing for loop) and I've added the new variable ""CCSD PAIR ENERGIES"" to store the quantity. . This is my first PR with Psi4 so I apologize in advance if I've missed any coding guidelines. . ## Questions; - [ ] Should I add a test for this new variable?. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1950:411,test,test,411,https://psicode.org,https://github.com/psi4/psi4/pull/1950,4,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; I've just watched this test take 84--120 iterations to converge over consecutive runs. Lately for py38 conda package it has needed 121, failing the whole thing. So I'm adding extra cushioning. The output.ref is 88, so nothing new. Also the MKL_CBWR=AVX seems on average to increase the iterations needed. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2173:39,test,test,39,https://psicode.org,https://github.com/psi4/psi4/pull/2173,1,['test'],['test']
Testability,"## Description; If you look closely, the driver structure and its autodoc are a little weird, as reviewed in #2166. Also, many driver functions are minimally documented or don't take advantage of typing to guide the developer. This PR considers only `driver/p4utils/` directory and fills in docstrings and typing while checking the built docs for maximum info and links. Even when I saw good things to change in code, for this most part, this PR leaves them be and focuses on docstrings. Piece 1 from the ""driver import"" series, #2166 . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] add `__all__` to guide `from module import *`. This same effect can be had by `def _functionname` but the PEP https://peps.python.org/pep-0008/#public-and-internal-interfaces still recommends `__all__`.; - [x] a few things actually retired: ; - `PsiImportError`, `CSXError`, `Dftd3Error` -- not used since v1.4 at latest; - `fchkfile_to_string` hidden in fchk.py (just opening and reading a file); - `basname` hidden in python_helpers.py (one-liner); - `format_kwargs_for_input` (as soon as v1.4); - `extract_sowreap_from_output` (as soon as v1.4); - `format_currentstate_for_input` (as soon as v1.4); - `Table` (as soon as v1.4); - `print_stdout` (as soon as v1.4); - `print_stderr` (as soon as v1.4). ## Checklist; - Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2592:1363,Test,Tests,1363,https://psicode.org,https://github.com/psi4/psi4/pull/2592,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Implements Density matrix-based integral screening algorithms for Direct SCF, as well as Incremental Fock Build, the process of building a Fock matrix using the difference in the density matrix between SCF iterations. Reference Paper:; https://onlinelibrary.wiley.com/doi/abs/10.1002/jcc.540100111. Updated Version of PR #2062. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Provide Massive Speedups to DirectJK Builds for HF and DFT; - [x] Accuracy of Calculations remain uncompromised. ## Questions; - [x] Is my current method of handling the density matrix for UHF and ROHF ideal?. ## Checklist; - [x] Passing cc-pVDZ and cc-pVTZ tests for HF and DFT (e_convergence 1.0e-6); - [x] Passing aug-cc-pVDZ, aug-cc-pVTZ tests for HF and DFT. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155:709,test,tests,709,https://psicode.org,https://github.com/psi4/psi4/pull/2155,2,['test'],['tests']
Testability,"## Description; Implements a basic . ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ *] Adds a smart solver class that can easily share data with a wfn object during SCF iterations. ; - [ *] Provides a platform for quickly adding new smart solving capabilities.; - [ *] With a metric for detecting oscillation, a dynamic damping function can be turned on to limit changes in Drms to a target value. * **User-Facing for Release Notes**; - [ *] With SMART_SCF set to `true`, SOSCF is automatically turned on when trailing convergence is detected, the initial oscillations in SAD, GWH, and CORE guess are damped at 70%. ## Questions; - [ *] What can be changed about the structure of the smart_solver class for ease of readability and use?; - [ *] This code leaves out 'macroiterations', i.e. restarting the SCF upon failure with updated initial conditions and options. Do we want this functionality in this PR, or another?; ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ *] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1134:1007,Test,Tests,1007,https://psicode.org,https://github.com/psi4/psi4/pull/1134,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Implements density screening into the direct SCF Algorithm, no incremental Fock build currently, but incremental Fock build will be a future addition. Reference paper: https://onlinelibrary.wiley.com/doi/abs/10.1002/jcc.540100111. ## Notable Features; - [x] Improve the efficiency (less time) of the direct SCF Algorithm without compromising accuracy. ## Checklist; - [x] Passes Sanity Check for Water Molecule, will include a Google Sheets link as I include more tests; - [x] Passes Tests Using The Benzene, Naphthalene, etc... series; - [x] Code works with multithreading; - [x] Code works with reaction energies, interaction energies, conformation energies; - [x] Code works on open-shelled systems; - [x] Code tested on a diverse set of molecules. ## Status; - [x] Rough Draft Phase; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2062:480,test,tests,480,https://psicode.org,https://github.com/psi4/psi4/pull/2062,3,"['Test', 'test']","['Tests', 'tested', 'tests']"
Testability,"## Description; Implements the linear exchange matrix build (LinK) algorithm for Direct SCF.; Reference: C. Ochsenfeld, C.A. White, and M. Head-Gordon, J. Chem. Phys. 109, 1663 (1998); (https://aip.scitation.org/doi/10.1063/1.476741). NOTE: The J build already has density screening implemented (see #2155). ![wc_linK_errors_updated_06_04_21](https://user-images.githubusercontent.com/60559795/120875167-7c793e00-c578-11eb-83d2-b2b2e197d788.jpg); ![wc_linK_timings_hornet_06_04_21](https://user-images.githubusercontent.com/60559795/120875169-7d11d480-c578-11eb-8315-642e4ee0510c.jpg). ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Builds the K matrix of large molecular systems in O(N) time; - [x] Errors are minimal when compared to approximations like Density Fitting. ## Questions; - [ ] This code is currently in DirectJK, should I make a new JK module for fast methods like LinK, since a fast K algorithm would be really useful for density fitting?. ## Checklist; - [x] Tested accuracy and speed of method on a 3D system of growing water clusters. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2187:1037,Test,Tested,1037,https://psicode.org,https://github.com/psi4/psi4/pull/2187,1,['Test'],['Tested']
Testability,"## Description; Improvements to basis set handling, including; - elimination of duplicate code and introducing array size checks via use of std::string in gshell; - sanity checks for angular momentum parsing, eliminating segfaults; - support for explicit definition of angular momentum in the basis set input (fixes #628). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Eliminated duplicate code and introduced array size checks via std::string in gshell.; - [x] Introduced angular momentum checks in the basis set parser.; - [x] Added support for L=n format into the basis set parser. ## Questions; - [x] The basis set parser is doing regexp validation for the shell entry. Thanks to @PhillCli for supplying a working regexp. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1994:798,Test,Tests,798,https://psicode.org,https://github.com/psi4/psi4/pull/1994,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; In C++, the destructor for a templated class should not include the template parameter in the destructor's name. This is not a problem for C++17 and earlier standards, but with C++20 compilers it raises an error. This PR fixes one instance of this problem in psi4. ## User API & Changelog headlines; - [x] API should now be compatible with both C++17 and C++20. ## Dev notes & details; - [x] Change one line. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3061:479,test,tests,479,https://psicode.org,https://github.com/psi4/psi4/pull/3061,2,['test'],['tests']
Testability,"## Description; In accordance with https://github.com/MolSSI/QCElemental/pull/275, return certain files in qcschema to be pruned down by user protocols. Bump qcel to 0.24.0 (and qcng to 0.23.0 once it's minted). Note that this can't handle the wfn file b/c binary. And it can't handle `timer.dat` b/c there's no fixed place it lands (I can get it to save calling schema_wrapper directly but not for QCEngine calling psi4). ## Checklist; - [x] Tests added for any new features -- tested at qcengine test_canonical_fields; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2361:443,Test,Tests,443,https://psicode.org,https://github.com/psi4/psi4/pull/2361,4,"['Test', 'test']","['Tests', 'tested', 'tests']"
Testability,"## Description; In order to bring back SCF hooks, kill the C-side EFP octopus, and provide a foundation for a smart SCF driver, want control over SCF iterations to be at the driver level. Features will have to be filled out more fully from the commit msgs once this stabilizes, but current status is (1) rebased, (2) no EFP or PCM yet, (3) otherwise, all tests pass, (4) haven't done a final output vs. output.ref comparison. Please to assess mercilessly the general structure and stable parts of the C/Py handshake. There's very little that I'll defend energetically. There's a few questions and notes marked with `Q:` in the code. Hack away in the ""pre-review"" time. That is, this can't be merged b/c it breaks addons. But it'd be nice if this was tentatively pre-approved before continuing on into efp, pcm, and json stages. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/847:355,test,tests,355,https://psicode.org,https://github.com/psi4/psi4/pull/847,1,['test'],['tests']
Testability,"## Description; In preparation for allowing `detci` to support symmetry broken displacements for frequencies, this PR streamlines the active space setting logic used by `detci`. Nothing should have changed except function signatures and code clarity. Obligatory ping to @fevangelista, since this touches on active space specifications. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Streamline `ras_set`; - [x] Adds `Dimension::copy` @jturney ; - [x] Fewer raw pointers, more `Dimension` . ## Checklist; - [x] `ctest -L ci` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3208:155,log,logic,155,https://psicode.org,https://github.com/psi4/psi4/pull/3208,1,['log'],['logic']
Testability,"## Description; In preparation for some PRs adding EDIIS and ADIIS to Psi, this PR moves the `compute_orbital_gradient` functions, which call DIIS, to the Python layer. There are multiple things going on:; - For pybinding, it was convenient to convert the enums in `libdiis` to _strongly typed enums_. This means the enums have their own scope, which changes how other functions had to call them. Every change in occ, dfocc, dct, fisapt, and libdiis is _solely_ due to this. This occupies commit one.; - Many other functions had to be pybound. In particular, it was necessary to convert `diis_manager` into a property. Old code would call `HF.diis_manager()`, but now they call `HF.diis_manager_`. We're not bothering to deprecate the old way of calling it. I'm not aware if there's a way to still support the old syntax. It might work if we change the property name to `diis_manager`? I haven't tested this.; - It is not possible to pybind a variadic, so I had to pybind every `set_error_vector_size` and `set_vector_size` and `add_entry` type combination that Python might use. Sad, but necessary. And with that done, all four of the `compute_orbital_gradient` functions could finally be moved to the Python layer. `compute_orbital_gradient` is kept as a virtual function, C++ side, to signal that Psi expects such a function to exist. My tests indicate that if the function is defined C++ side, it still works, so this won't break any SCF subclasses defined in plugins. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] _Lots_ of pybind-ing involving DIIS; - [x] Alert! `HF.diis_manager()` has changed to `HF.diis_manager_`; - [x] `HF.compute_orbital_gradient` moved to the Python layer. C-side `compute_orbital_gradient` is still supported, but not used by the core Psi. ## Questions; - [ ] Who is responsible for updating the Great DFOCC Branch with the `libdiis` API change?; - [ ] How do we feel about the new functions I Pybind-ed over?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2298:896,test,tested,896,https://psicode.org,https://github.com/psi4/psi4/pull/2298,1,['test'],['tested']
Testability,"## Description; In preparation of the DLPNO-CCSD(T) code, I have changed the class heirarchy of the DLPNO module. Currently, there is only a `DLPNOMP2` class. However, I have split that class into a `DLPNO -> DLPNOMP2` inheritance heirarchy, to allow for ; `DLPNO -> DLPNOCCSD -> DLPNOCCSD_T` in the future, and potentially `DLPNO -> DLPNOMP2 -> DLPNOMP2_F12`. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Changes class heirarchy of DLPNO module; - [x] Changes the way the DOI grids are handled in DLPNO-MP2, adds separate user options for the DOI grid specifically. ## Questions; - [ ] . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3192:804,Test,Tests,804,https://psicode.org,https://github.com/psi4/psi4/pull/3192,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; In response to #714 adds a test checking LCCD against DCFT/CEPA0. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/715:43,test,test,43,https://psicode.org,https://github.com/psi4/psi4/pull/715,1,['test'],['test']
Testability,"## Description; In some basis sets that contain ECPs, the ""valence"" f-shell is included in the effective core. This seems true for all post-lanthanide/actinide atoms. . In current master, those 60 ECP electrons are always frozen, but in a non-ECP basis with frozen core we'd freeze only 54 of those. The simple solution is to always freeze the 4f electrons (for 6th period) if the shell is full. ## Checklist; - [x] Tests added for any new features; - [x] `ctest -L ecp` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1930:416,Test,Tests,416,https://psicode.org,https://github.com/psi4/psi4/pull/1930,1,['Test'],['Tests']
Testability,"## Description; In trying to make a good test case for #2068, I found some normalization problems that are fixed in this PR. Also, the analytic gradients were not implemented, has been addressed. The interface used here is terrible, but will eventually be merged with #1720 to give a better user experience; this test case will be helpful in making sure everything works correctly during that development. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Add a new feature to allow arbitrary order, arbitrary exponent multipoles to be defined.; - [x] Implement analytic gradients for the above.; - [x] New test case to make sure it all works and to demonstrate the current (terrible and to be replaced) syntax. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2069:41,test,test,41,https://psicode.org,https://github.com/psi4/psi4/pull/2069,6,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; In very rare cases, the number of frozen core orbitals in computing the dMP2 correction in SAPT was inconsistent between the dimer and monomer calculations. I only encountered this when one monomer was a charged alkali metal. For example, when computing the dMP2 correction for Na-H20, `freeze_core true` results in one frozen orbital each for Na and H2O in the separate monomer computations, but six frozen orbitals in the dimer computation. Separately, these values make sense, but in this context they result in a meaningless dMP2 value. . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [X] Set # frozen core for dimer as sum of monomer # frozen core. ## Checklist; - [X] Tests added for any new features; - [X] Add a warning in the manual. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2271:747,Test,Tests,747,https://psicode.org,https://github.com/psi4/psi4/pull/2271,1,['Test'],['Tests']
Testability,"## Description; Include external potentials in the FISAPT module. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Add interaction of external potential with nuclei to nuclear repulsion; - [x] Add interaction of external potential with basis functions to one-electron Hamiltonian for SCF calculations and calculation of HF interaction energy; - [x] Fixed minor typo in proc_util.py. ## Questions; - [ ] I added a method to the Wavefunction class to access the protected external_pot_ object. Was there some other way I could have accessed this object?; - [ ] Adding the external potential directly to the one-electron potential matrices for each fragment leads to this potential being double-counted in some terms used to calculate the HF interaction energy. So I stored the external potential as an additional matrix, matrices_[""VE""], that is then added to the one-electron potential for the monomer SCF calculations and the HF term. Is there a better way to handle this problem that doesn't require storing an additional matrix?; - [ ] I compared total SAPT0 energy for a 2-fragment F-SAPT calculation to the SAPT module. Is there a good way to check a 3-fragment I-SAPT energy with the SAPT module?. ## Checklist; - [x] For a 2-fragment system, total SAPT0 energies with and without an external potential in FISAPT module agree with SAPT module; - [x] For a 3-fragment system, total SAPT0 energies with and without an external potential give reasonable energies; - [x] Passed included smoke and sapt tests. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1608:1552,test,tests,1552,https://psicode.org,https://github.com/psi4/psi4/pull/1608,1,['test'],['tests']
Testability,"## Description; Includes Joe's psi4/psi4#772, since the original point of this was to do properly the hacks needed to get the normco into the Wfn. This includes py-side vibrational analysis, thermo, and small-system reordering. Also fixes Hessian symmetrization (py-side; haven't moved it back c-side). ~This isn't a final product. I only re-hooked-back-up one conventional freq test case. There's plenty of organizational, naming, storage (want both freq and normco in Wfn? and if so, only vibs, not RT? and how ID imag freq if we're float and don't want `-`?) choices yet. What this does have is a substantial py test case with 6 Hessian readouts from Cfour and 6 matching p4 findif-by-grad vibrational analyses to help debug some analytic Hessian errors at wwdc.~. ~And watch out – any change to `findif.h` recompiles most of psi.~. In the end, this added a py-side vib analysis, identified two Hessian bugs, upgraded the two Molecule classes, added Molecule serialization everywhere except initial string input parsing, added alignment and BFS tools, and lots more – see below. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - This PR includes Joe's psi4/psi4#772; - adds an optional history object to the optimize output. This object contains energies, gradients, and coordinates for the molecule at each step of the optimization. Hooked up to MDT.; - ~adds normalmode displacement export to the api and optional saving of normal modes to the wavefunction.~; - Adds handling of several one-electron properties to the API and saves them to the wavefunction.; - `qcdb.Molecule`; - Fix some bugs, including C3/D3 symmetry detection w/o verbose and printing for Q-Chem when dummy (or ghost?, don't remember which) present; - Simplify rotational_constants, add rotational_symmetry_number, add axis_representation (probably should double-check this with a spectroscopy book); - Optimize instantiation (really, update_geometry) of large syst",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/834:379,test,test,379,https://psicode.org,https://github.com/psi4/psi4/pull/834,2,['test'],['test']
Testability,"## Description; Initial draft. Next step is going to be ensure more backwards compatibility... This will involve more complicated manipulations of the current module, probably. Mark III of this refactor is going to use this code in Psi4. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3220:746,Test,Tests,746,https://psicode.org,https://github.com/psi4/psi4/pull/3220,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Issue from forums: https://forum.psicode.org/t/dispersion-gradients/2979. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Fix issue where the dispersion correction contribution to gradients is not correctly labelled when debug printing is enabled. . ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3082:512,test,tests,512,https://psicode.org,https://github.com/psi4/psi4/pull/3082,2,['test'],['tests']
Testability,"## Description; It implements a new version of `timer` in `libqt`, which enables calling of `timer_on` and `timer_off` in OpenMP parallel blocks. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Parallel based on original code**; - [x] Have a working version of parallel timer; * **Introducing new C++ features and optimize performance**; - [x] Replace the original timer data structure (doubly linked list) by std::list; - [x] Replace old timing C functions by C++11 std::chrono library; - [x] Optimization; * **Timer format and output**; - [x] Nested timer; - [x] Format output; * **Test and debug**; - [x] Debug; * **Clean up**; - [x] Clean up. ## Questions; - [x] Is there a way to get correct thread rank in `timer_on` and `timer_off` functions rather than introducing an extra arg. ## Status; - [x] Ready to go. ## Note; The signature of timer operations are:; (1) `void timer_on(const std::string& key)`; (2) `void timer_off(const std::string& key)`; (3) `void parallel_timer_on(const std::string& key, int thread_rank)`; (4) `void parallel_timer_off(const std::string& key, int thread_rank)`. In order to run timer correctly in parallel, (1) and (2) should only be called in seriel part of code and (3) and (4) should only be called in OpenMP parallel sections. Calling to (3) and (4) requires to pass an additional arg `thread_rank` unique to every thread. Generally, call; - `parallel_timer_on(""your_key_string"", omp_get_thread_num());`; - `parallel_timer_off(""your_key_string"", omp_get_thread_num());`; will work. ## An example code; ```; double SCF::compute_energy(); {; timer_on(""energy"");. #pragma omp parallel; for (int a = 0; a < 100; a++); {; parallel_timer_on(""inner"",omp_get_thread_num());; // some running code; parallel_timer_off(""inner"",omp_get_thread_num());; } . timer_off(""energy"");; return 0.0;; }; ```. ## An example output; ```; Host: DESKTOP-JOFFIR0. Timers On : Fri Jul 7 15:47:10 2017; Timers Off: Fri Jul 7 15:47:13 2017. Wall Time",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/743:623,Test,Test,623,https://psicode.org,https://github.com/psi4/psi4/pull/743,1,['Test'],['Test']
Testability,"## Description; It looks like errors like #2080 happen when `throw` called from within threaded code in C++. From non-threaded code, Pybind11 catches them and turns them into nicely behaved `RuntimeError`s but from threaded, it just segfaults. This PR averts a few, but there could be far more throughout codebase. closes #2080 . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] cleans up namespace markings in libfock. also adds `namespace psi` into a formerly anonymous namespace; - [x] pre-clears SG0 and SG1 atoms before entering the threaded grid build proper. the non-SG0 and SG1 block had some throws, too, but I couldn't trigger them. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2082:721,Test,Tests,721,https://psicode.org,https://github.com/psi4/psi4/pull/2082,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; It seems that in the course of harmonizing dftd4 in QCEngine, I touched enough dftd3, gcp, and mp2d that #2142 (dftd4 and minor dftd3, gcp, mp2d) can't be put off after the QCEngine v0.19 release. So here's the non-dftd4 tweaks. ## Todos; - [x] switch gcp interface to QCEngine; - [x] update types return for disp. engine can handle ndarray, so leave arrays as np and shaped rather than flat lists; - [x] Note that this won't build until new QCEngine release. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2180:496,Test,Tests,496,https://psicode.org,https://github.com/psi4/psi4/pull/2180,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; It was agreed at PsiCon that the `Matrix` and `Vector` class be rewritten to use xtensor as storage backend. This is my work on this so far. It is not complete - indeed `Matrix` and `Vector` are still used everywhere - but I think it's better to put this up early because it will take time to transition to the new classes. **Easter update**. The Python bindings for the `Tensor` class mostly come for free through `xtensor-python`. They allow to:; * Access blocks _via_ the subscript operator.; * Assign a NumPy array to a block.; * Get a block and update it in NumPy.; ```; import numpy as np. from psi4.core import Dimension, Matrix_D. dim_row = Dimension([3, 2, 1, 4]); dim_col = Dimension([4, 2, 0, 2]); m3 = Matrix_D('m3', dim_row, dim_col); m3[0] = np.random.rand(*m3[3].shape); block = m3[3]; block[:] = np.arange(m3[3].size, dtype=float).reshape(*m3[3].shape); ```. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Use `_a` literal in pybind11 export sources rather that `py::arg` --> Split and merged with #1448 ; - [x] Basic templated `Tensor` class with Python bindings.; - [x] `doublet` for `Tensor<double, 2>` aka a `Matrix` of `double`-s working. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1443:1247,Test,Tests,1247,https://psicode.org,https://github.com/psi4/psi4/pull/1443,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; It would be nice to be able to pass in an external hamiltonian to be able to test-drive some code (e.g. for the calculation of external potentials) without always needing to recompile. This PR adds this possibilty. I am testing it by making a calculation without an external hamiltonian but with a potential (and saving the nuclear_repulsion addition, which is not mediated by the additional H term) and comparing it to a simulation without an external potential, but with the captured potential hamiltonian. FYI: This is on top of #3148 , because otherwise the tests don't pass.; Also fyi: I did not build the docs. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] Added possibility to pass in an external hamiltonian contribution via `energy(..., external_hamiltonian = np.array(...))`. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Added possibility to pass in an external hamiltonian contribution via `energy(..., external_hamiltonian = np.array(...))`.; - [ ] Tested via simulation with external_potential and an equivalent external_hamiltonian. ## Questions. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3149:93,test,test-drive,93,https://psicode.org,https://github.com/psi4/psi4/pull/3149,7,"['Test', 'test']","['Tested', 'Tests', 'test-drive', 'testing', 'tests']"
Testability,"## Description; Kill off the last fork!. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] upstream Libxc with !62-style tweak syntax ([summary of this vs #1101](https://gitlab.com/libxc/libxc/issues/61#note_129049055)); - [x] un-namespaced the `xc.h` header so that a cmake libxc build that works for psi4 can work for other libxc users.; - [x] pulling from my fork (trivial change), so that needs conda testing and merge before updating this and merging. ## Checklist; - [ ] ~Tests added for any new features~; - [x] full test suite run. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1502:453,test,testing,453,https://psicode.org,https://github.com/psi4/psi4/pull/1502,3,"['Test', 'test']","['Tests', 'test', 'testing']"
Testability,"## Description; Kudos to @andysim for pointing out in January the exact 13 lines of code to change for the vast preponderance of the gaussian to standard ordering switch. As far as timeline, there's no particular reason this needs to be in for v1.6. But if we _could_ avoid hosting forever one fewer set of L2 packages for a single release, that'd be kind of nice. But fixing the output formats (i.e., fchk, qcsk, molden, fcidump) is likely to take some careful work. If anyone would like to tackle a part of this, go for it. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] current test status (pretty impressive, imo); - after g2g commit; - ctest: `99% tests passed, 3 tests failed out of 487`; - pytest: `12 failed, 2971 passed, 270 skipped, 269 xfailed`; - after first solidharmonics.cc commit; - ctest: ~`90% tests passed, 50 tests failed out of 487`~; - pytest: ~`43 failed, 2911 passed, 208 skipped, 269 xfailed`~; - [ ] only Linux in CI b/c only it has an appropriate L2 conda package built. - categories to examine; - [x] tdscf; - [x] cubeprop; - [ ] fchk; - [ ] qcsk atomicresult.wavefunction; - [x] mbis; - [ ] molden; - [ ] fcidump; - [ ] nbo. - fails pytest; - [x] tdscf; - [x] dft_block_schemes; - [ ] mcmurchie_davidson_consistency_angmom (fails because ref data are deposited in Gaussian ordering); - [ ] test_rhf_fchk[df-rhf-dft)]; - [ ] test_rhf_fchk[conv-rhf-dct]; - [ ] test_rhf_fchk[df-rhf-omp2]; - [ ] test_uhf_fchk[df-uhf-mp2]; - [ ] test_rhf_fchk[conv-rhf-ccsd] ; - [ ] test_uhf_fchk[df-uhf-dft]; - [ ] test_uhf_fchk[conv-uhf-ccsd]; - [ ] test_rhf_fchk[df-rhf-mp2]; - [ ] test_uhf_fchk[df-uhf]; - [ ] test_rhf_fchk[df-rhf)]; - [ ] test_rhf_fchk[conv-rhf-cc2]. - fails ctest; - [x]	103 - cubeprop (Failed); - [x]	104 - cubeprop-frontier (Failed); - [x]	123 - density-screen-2 (Timeout); - [x]	161 - dft-grad-lr1 (Failed); - [x]	162 - dft-grad-lr2 (Failed); - [x]	163 - dft-grad-lr3 (Failed); - [x]	168 - dft-b2plyp (Fail",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2537:641,test,test,641,https://psicode.org,https://github.com/psi4/psi4/pull/2537,5,['test'],"['test', 'tests']"
Testability,"## Description; Last summer, I discovered that the energy _increased_ along the IRC for my complex formation coordinate. I eventually tracked this down to a bug where the molecule did not displace the initial geometry correctly, which this PR fixes. Since that time, those of us at UGA have found this fix essential to follow modes <200i. I discuss this in more detail [here](https://github.com/psi-rking/optking/issues/19). I updated a test to reflect the fact that the IRC can go a bit further when it displaces correctly. I didn't bother updating the reference files, as I expect it'll be invalidated soon anyways. The whole reason I'm submitting this PR now is to eliminate this bug from consideration when I send @psi-rking the _latest_ IRC bug I found. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix IRCs. ## Checklist; - [x] All IRC tests run. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1663:437,test,test,437,https://psicode.org,https://github.com/psi4/psi4/pull/1663,2,['test'],"['test', 'tests']"
Testability,"## Description; Legacy modules that were default in the past, but have been replaced will move to the [psi4pasture](http://github.com/psi4/psi4pasture) repo. The ccsort/transqt2 modules now live there. This PR introduces some machinery for installing them from psi4's build, and allowing them to be used in the driver at run-time if they are installed. ## Todo; - [x] cleanup history; - [x] find specific libs that have missing symbols + add `${PRE/POST_LIBRARY_OPTIONS}` to each not all.; - [x] Docs: Finalize build instructions for `PastureRequiredError`; - [x] Docs: Add transqt2/ccsort note to read_options.cc; - [x] Tests: add tests as lori mentioned . * **Developer Interest**; - I would say this functionality is experimental since pasture does not have any travis checks.; - I am not completely confident in the way I have ""injected"" pasture.addins.ccsort_transqt2 into proc.py, but it seems to work okay. See the code comments; - Does the pasture module even need to be installed w/in lib/psi4/driver?. * **User-Facing for Release Notes**; - ccsort/transqt2 are no longer part of psi4_core; - adds ENABLE_ccsort and ENABLE_transqt2 flags to optionally build/install them from pasture. * **Self imposed CI checks**; - [x] MacOS/clang/python2 build + use pasture ok; - [x] MacOS/clang/python3 build + use pasture ok; - [x] Linux/gcc/python2 build + use pasture ok; - [x] Linux/gcc/python3 build + use pasture ok. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/534:621,Test,Tests,621,https://psicode.org,https://github.com/psi4/psi4/pull/534,2,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; Libint2 and shell screening. ## Todos; - [x] initial cmake integration of fixed AM Libint2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1721:159,Test,Tests,159,https://psicode.org,https://github.com/psi4/psi4/pull/1721,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Libxc is getting some hybrid LDA functionals (https://gitlab.com/libxc/libxc/merge_requests/163), which require some trivial yet benign changes to the DFT driver code. It appears that Psi4 doesn't do the evaluation itself, getting all data from pylibxc, where I hope to have made all of the necessary changes as well. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Psi4 can run LDA0 and CAM-LDA0 calculations with an up-to-date libxc. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1645:553,Test,Tests,553,https://psicode.org,https://github.com/psi4/psi4/pull/1645,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Longawaited maintenance on physconst and duplicate naming. ## Todos; * **Developer Interest**; - [x] There was dir driver/procedures and dict procedures['energy']... Renamed the former to procrouting to avoid future trouble. Note that all plugins will need [this line](https://github.com/edeprince3/v2rdm_casscf/blob/master/pymodule.py#L28) fixed by `procedures` --> `procrouting`.; - [x] Move i/fsapt test cases higher in list, so they can backfill.; * **User-Facing for Release Notes**; - [x] Physical constants in PsiAPI are now `psi4.constants.amu2kg` instead of `psi4.p4const.psi_amu2kg`. In Psithon, still `psi_amu2kg`. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/632:418,test,test,418,https://psicode.org,https://github.com/psi4/psi4/pull/632,1,['test'],['test']
Testability,"## Description; Lori brought to my attention that my previous PR accidentally introduced a bug causing tests to fail. (It was an obvious indexing bug.) That is now fixed. In the interests of making test-running less onerous, I've also changed the test cases so that I can run all `dct` tests faster. We're checking things less tightly and using smaller basis sets. ## Todos; - [x] Fix bug introduced in #2152 ; - [x] Faster `dct` tests. ## Checklist; - [x] `dct` tests pass, and in under two minutes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2165:103,test,tests,103,https://psicode.org,https://github.com/psi4/psi4/pull/2165,6,['test'],"['test', 'test-running', 'tests']"
Testability,"## Description; Lots o' stuff. **I recommend reviewing commit-by-commit.**. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fix ""write() argument must be str, not bytes"" error that occurs in new NumPy; - [x] QCDB: migrate Hungarian alg from hungarian module to hacked scipy. now ""align"" tests should pass w/o incident or add'l software; - [x] Mol: migrate Molecule.to_string() back from QCDB. not used, but may as well be handy.; - [x] QCDB: squash some printing. migrate some changes back from QCDB.; - [x] AddOns: Don't let scipy missing (for snsmp2) pass silently.; - Discovered faulty logic where snsmp2 will rebuild more than necessary b/c detection involves ""import psi4"" which probably doesn't exist at the start of a psi4 build. not fixed.; - [x] AddOns: Bump pybind11 to 2.2.3; - [x] AddOns: renegotiate the psi vs. libefp options compromise. We generally try to follow addon's naming conventions unless they directly contradict our own. For SAPT we do have our own, but when libefp was implemented, we used our sapt for two (elst & exch) and let libefp win on (pol). I've since put a translation of input and printing system into pylibefp. that isn't active here, but thought may as well change keywords now.; ```; 'psi': {; 'elec': 'elst',; 'pol': 'ind',; 'xr': 'exch',; 'elec_damp': 'elst_damping',; 'pol_damp': 'ind_damping',; 'disp_damp': 'disp_damping',; 'pol_driver': 'ind_driver',; 'ai_elec': 'ai_elst',; 'ai_pol': 'ai_ind',; 'ai_xr': 'ai_exch',; ```; - [x] Add warnings accumulated so far -- ECP, DFT-SAPT, DFT; - [x] set up plugins via native conda gxx; - [x] AddOns: bump libefp to 1.5.0, chemps2 to 1.8.7; - [x] returns align tests to quicktest; - [x] adds `psi4 --test` to travis to test psiapi and addons coverage; - [x] switches MINIX to spherical as advocated [here](https://github.com/psi4/psi4/pull/961#issuecomment-385644036). ## Questions; - [ ] I took the warn DFT functionals from tests and notes, not o",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/993:354,test,tests,354,https://psicode.org,https://github.com/psi4/psi4/pull/993,2,"['log', 'test']","['logic', 'tests']"
Testability,"## Description; MKL 2020.1 often selects a different basis fn set than 2019.4 or 2020.0, so answers often differ by 1.14e-8. This relaxes tolerance to 2.e-8. Alternative is to add `mkl!=2020.1` to `conda create` line, but this would be disruptive to conda packaging. * **Note** A definitive test of above statement that returns to 1.e-8 but bans 2020.1 is running at https://dev.azure.com/psi4/psi4/_build/results?buildId=1969&view=logs&j=96451287-da82-57a8-2c11-8da7db9ab71a , but I'll get a head start and submit this PR. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1896:291,test,test,291,https://psicode.org,https://github.com/psi4/psi4/pull/1896,2,"['log', 'test']","['logs', 'test']"
Testability,## Description; MP2 energy for one-electron systems should be equal to HF energy. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] UHF energy via DFMP2 works; - [x] UKS energy and finite-difference gradient for DFT work; - [x] UHF gradient via DFOCC now throws an exception instead of segfault. ## Checklist; - [x] Tests added for any new features; - [x] `ctest -L mp2` runs fine. ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1857:364,Test,Tests,364,https://psicode.org,https://github.com/psi4/psi4/pull/1857,1,['Test'],['Tests']
Testability,"## Description; Make `back_transform` consistent across the various signatures and better behaved for more ""exotic"" cases. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is detined for the release notes. May be empty. -->; - [x] Improved `Matrix::back_transform`'s ability to handle edge cases. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] All `back_transform` signatures now trickle down to a single function; - [x] All `back_transform` signatures resize the target matrix if necessary (only one did this previously, DGEMM error otherwise); - [x] All `back_transform` signatures handle symmetry correctly (at least some would error previously). ## Checklist; - [x] `back_transform` passing tests. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2745:952,test,tests,952,https://psicode.org,https://github.com/psi4/psi4/pull/2745,1,['test'],['tests']
Testability,"## Description; Make `psi4.test()` safe to run. And beer safe to grep. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] The psi4 vs numpy threading test is more likely to work if run first, so moved it there. But since that's still no guarantee, made it an expected failure, so it doesn't count against pytest either way.; - [x] with `ENABLE_GENERIC`, blas/lapack detection looks for dynamic libm.; * **User-Facing for Release Notes**; - [x] Geometry optimizations that exceed maxiter no longer just print a warning and exit successfully (beer). Now they exit unsuccesfully (coffee) and raise a `psi4.ConvergenceError`. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/638:27,test,test,27,https://psicode.org,https://github.com/psi4/psi4/pull/638,2,['test'],['test']
Testability,"## Description; Make `transform` consistent across the various signatures and better behaved for more ""exotic"" cases. Sister PR to #2745. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is detined for the release notes. May be empty. -->; - [x] Improved `Matrix::transform`'s ability to handle edge cases. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] All `transform` signatures now trickle down to a single function; - [x] All `transform` signatures resize the target matrix if necessary (only one did this previously, DGEMM error otherwise); - [x] All `transform` signatures handle symmetry correctly (at least some would error previously). ## Checklist; - [x] `transform` passing tests. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2748:942,test,tests,942,https://psicode.org,https://github.com/psi4/psi4/pull/2748,1,['test'],['tests']
Testability,"## Description; Make psi safe for py38. The basic conda pkg does build, but I haven't done full stack yet. For practical reasons, no use turning on a CI lane for 38 until conda pkg available. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] req'd mods for python 3.8; - [x] avoid ""DeprecationWarning: In future, it will be an error for 'np.bool_' scalars to be interpreted as an index"" in `Molecule.from_dict`; - [x] more killing off travis. ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1776:512,Test,Tests,512,https://psicode.org,https://github.com/psi4/psi4/pull/1776,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Make tests run reliably and a bit cleaner. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] @JonathonMisiewicz, @amjames so the continuation of the `cc3` saga is that it continued flaky, usually running clean but sometimes throwing PSIO errors at first findif freq, sometimes throwing PSIO errors at second findif freq. Finally figured out that the G0 calc was leaving scratch files before findif launched and findif was only cleaning _after_ each displacement. Previously this was nearly always safe b/c G0 had full symmetry and first findif displacement was totally symmetric (bet we were never testing partial freq on a susceptible mol). But now findif displacements appear in random order, and if the first one up has a lower irrep, it doesn't like those totally symmetric leftovers, so PSIO error. There's any number of places one could put the `clean` -- I chose least obtrusive.; - [x] `gcp` calcs weren't deleting their directories in scratch, so made them. ## Checklist; - [ ] ~Tests added for any new features~; - [x] full tests less bench run. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1326:21,test,tests,21,https://psicode.org,https://github.com/psi4/psi4/pull/1326,4,"['Test', 'test']","['Tests', 'testing', 'tests']"
Testability,"## Description; Make v2rdm_casscf work with psi in the v2.2.2 pybind11 era. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] ~half~ done adding `PSI_API` to psi where v2rdm wants it; - [x] corresponding v2rdm repo change is https://github.com/loriab/v2rdm_casscf/commit/7d4507d8979b61b3333fc6ceab450a61392836ff. ## Questions; - [x] @jturney, @edeprince3, I intended to finish this, but I'm confused by `C_DDOT`. `core.so` has the symbol that `v2rdm_casscf.so` wants, but the test file complains about DDOT anyway. Maybe there's some more complicated place that `PSI_API` needs to be inserted that I'm not seeing from simple pattern following. So consider this work a start and a puzzle.; ```; >>> ../hrw-qcdb/objdir/stage/usr/local/psi4/bin/psi4 tests/v2rdm3/input.dat ; H3 / cc-pvdz / D+D3 vs full CI, scf_type = PK; /home/psilocaluser/miniconda3/envs/idp35p4/bin/python: symbol lookup error: /home/psilocaluser/gits/hrw-qcdb/objdir/stage/usr/local/psi4/lib/v2rdm_casscf/v2rdm_casscf.so: undefined symbol: _ZN3psi6C_DDOTEmPdiS0_i; >>> nm v2rdm_casscf.so | grep DDOT; U _ZN3psi6C_DDOTEmPdiS0_i; >>> nm ../hrw-qcdb/objdir/stage/usr/local/psi4/lib/psi4/core.so | grep DDOT; 00000000006013c0 t _ZN3psi6C_DDOTEmPdiS0_i; 00000000017384d0 t _ZN3psi8PSI_DDOTEimSt10shared_ptrINS_6VectorEEiS2_i; ```; - [x] if https://github.com/edeprince3/v2rdm_casscf/pull/26 gets merged quickly, then I should re-point the cmake back to Eugene; - [ ] should we export _all_ lapack in https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libqt/lapack_intfc.cc ?. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/955:541,test,test,541,https://psicode.org,https://github.com/psi4/psi4/pull/955,2,['test'],"['test', 'tests']"
Testability,"## Description; Makes SAPT(DFT) quite a bit more flexible by allowing a potential user to build SCF wavefunctions (any will work, HF or DFT). An example can be found in `tests/sapt-dft-api`. I have also added LRC references with SAPT(DFT). @ajmisquitta please checkout `tests/sapt-dft-lrc` and verify these are working as expected. Closes #939 . ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Users can now call SAPT(DFT) directly with reference wave functions. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/942:170,test,tests,170,https://psicode.org,https://github.com/psi4/psi4/pull/942,2,['test'],['tests']
Testability,## Description; Makes changes suggested by lgtm; ATTENTION: Changes local variable names that overlapped with parameter names in ; libfock/hamiltonian.cc. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1635:175,Test,Tests,175,https://psicode.org,https://github.com/psi4/psi4/pull/1635,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; Makes print statement more clearly communicate to user which density matrix is being employed. c closes #1055 ; ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Feature1; * **User-Facing for Release Notes**; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1068:357,Test,Tests,357,https://psicode.org,https://github.com/psi4/psi4/pull/1068,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Makes restarting an SCF and saving orbitals more accessible and updates documentation. Saving MOs for every SCF step to `my_mos.npy` and keeping it after psi4 finishes:; ```; energy('hf/minix',write_orbitals='my_mos'); # or; set orbitals_write my_mos; energy('hf/minix'); ```. Reading `my_mos.npy`:; ```; set guess read; energy('hf/minix',restart_file='my_mos'); ```. Using a serialized `wfn` works as well (`my_mos.npy` is just that); ```; e, scf_wfn = psi4.energy('scf', return_wfn=True); scf_wfn.to_file('saved_wfn'); set guess read; energy('scf', restart_file='saved_wfn'); ```. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] `write_orbitals' extended to also take a string to save user-named `180.npy` file; - [x] fixed and updated `restart_file` for `npy` files; - [x] added `ORBITALS_WRITE` option; - [x] if `write_orbitals=file` then MOs will be saved every iteration.; - [x] doc re-work (minimal entry on serializing a wfn and simplifying `restart_file`); - [x] adds `sphinx-autodoc-typehints` module to sphinx build hinting in cmake ; - [x] `serial-wfn` ctest to new pytest about restarts. ## Remarks; - `write_orbitals=boolean` is not documented but still an internal functionality. ; - `restart_file` doc is ambiguous on purpose. No idea which modules support restarting. If this is something a user; should be able to do, the respective module needs to add a documentation. ## Checklist; - [x] Tests; - [x] Docs; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2190:1483,Test,Tests,1483,https://psicode.org,https://github.com/psi4/psi4/pull/2190,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; Memory estimation for the amplitudes now recognize frozen_core settings. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] fixes #898 ; - [x] check code for same problem in CD algorithm variant. ## Checklist; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1244:313,test,tests,313,https://psicode.org,https://github.com/psi4/psi4/pull/1244,2,['test'],['tests']
Testability,## Description; Memory overhead estimate in fdisp is an underestimate. Improve this slightly in hopes of addressing a crashing large test case. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Better memory used estimate; - [x] Some printing of memory use to help users see if they are going over to multipass algorithm. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1810:133,test,test,133,https://psicode.org,https://github.com/psi4/psi4/pull/1810,1,['test'],['test']
Testability,"## Description; Minor CI patches. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Closes https://github.com/psi4/psi4/issues/559 and moves these features to a wishlist.; - [x] Closes https://github.com/psi4/psi4/issues/558, RSP eigenvectors were indeed wrong. Adds a RSP MCSCF test case for future testing. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/566:344,test,test,344,https://psicode.org,https://github.com/psi4/psi4/pull/566,2,['test'],"['test', 'testing']"
Testability,"## Description; Misc. ## Todos; * **Developer Interest**; - [x] CI: Removes align tests that require hungarian package from quicktests; - [x] Allow basis set blocks to be names ""custom"", ""special"", ""general"" w/o spewing a page of errors at you.; - [x] CMake: upgrade versioner to avoid hard-coded project version. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/974:82,test,tests,82,https://psicode.org,https://github.com/psi4/psi4/pull/974,1,['test'],['tests']
Testability,"## Description; Miscellaneous substantive changes short of moving vars from globals to wfn. ## Todos; - [x] for FINDIF, renamed some functions for easier comprehension (e.g., `compute_gradient_from_energy` --> `compute_gradient_from_energies`). speak up, @JonathonMisiewicz if I've misinterpreted anything (it won't count in GH's reckoning, but you're always welcome to review).; - [x] `core.get_gradient`/`core.set_gradient` aren't regularly set, even in v1.2, being used only in internal communication for OPTKING. I consider this effectively a silent deprecation in 1.2, so made that official (in case downstream using it), and renamed to `legacy_gradient` internally, until the demise of C-optking.; - [x] de-py2-adapted `psi4.driver.p4util`; - [x] fixed bug where in `driver_fn(..., kwargvar=None)`, `kwargvar` turned into `False`; - [x] deprecated many old fns in p4util -- see if you agree. Most for v1.4 but a few for v1.3.; - [x] added tolerance field to `compare_wavefunctions`; - [x] renamed and `_`-prefixed many functions in python_helpers.py so connection to demangled fn name easier to track and the `import *` doesn't contaminate namespace; - [x] for dfmp2, energy was starting the timer _after_ `scf_helper`, gradient was starting timer _before_ SCF, and properties wasn't timing at all. changed the latter two to match the first.; - [x] added `set_energy` to Wfn; - [x] `psi4 --fulltest -n NTHREAD` available to run full pytest test suite. Parallel only available if `pytest-xdist` installed (`conda install pytest-xdist`). ## Checklist; - [ ] ~Tests added for any new features~; - [x] quick tests is fine at this PR. full tests of this + other commits is fine. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1394:1446,test,test,1446,https://psicode.org,https://github.com/psi4/psi4/pull/1394,4,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; Modifies how one electron properties are computed to allow the `properties` kwarg to behave consistently with other modules. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] CCDENSITY no longer calls into OEPROPs this is now done in the python layer. ; - [x] After calling CCDENSITY the `wfn.arrays['CC ROOT {n} D{a|b}']` can be used to access the OPDM for excited states in the SO basis as in the convention for matrix quantities set on the wfn. ; * **User-Facing for Release Notes**; - [x] Excited state OPDMs are now set in the wfn.arrays, so that they can be used to compute 1e properties for all roots requested in EOM-CC* calls.; - [x] Now additional valid one electron properties can be passed as part of the `properties=[]` list. These would previously cause a validation error. Valid one electron properties are now:; - dipole *; - quadrupole *; - mulliken_charges **; - lowdin_charges; - mayer_indices; - wiberg_lowdin_indices; - no_occupations **; - [x] The previous behavior was such that requesting the properties marked with * above would lead to all * -ed properties and additional (**) properties being computed automatically. The new logic implemented in the driver still has this behavior so existing workflows do no need to change, at least for now. . ## Questions; - [x] @loriab The block of code that I removed from CCDENSITY had comments that were used to trigger documentation of some psivars. Where should these go now? . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - I ran all of the CC tests and there were no errors. The new logic changes where in the output file the 1 electron properties appear, but the perl script still finds them since they are labeled/formatted the same way. . ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/995:1233,log,logic,1233,https://psicode.org,https://github.com/psi4/psi4/pull/995,6,"['Test', 'log', 'test']","['Tests', 'logic', 'tests']"
Testability,"## Description; More `cc` tests ported over. There's one `autotest` test left. ## Todos; - [x] Documented several CC psivars; - [x] Updated dipole size managing functions to work with new ""DIPOLE -"" syntax; - [x] cc density variables renamed to new syntax; - [x] cc dipole/quadrupole variables renamed to new syntax . ## Checklist; - [x] ctests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2541:26,test,tests,26,https://psicode.org,https://github.com/psi4/psi4/pull/2541,2,['test'],"['test', 'tests']"
Testability,"## Description; More build changes. ## Todos; Notable points that this PR has either accomplished or will accomplish.; - [x] enable py3 testing; - [x] fix versioning at releases, allow conda build to get version before build; - [x] fix case where Fortran compilers required, but not detectable, have to be passed in; - [x] dashboard back. ## Questions; - [x] After these two PRs, just waiting on plugins from @jturney . ## Status; - [x] Ready to go **after oct_cmake**",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/488:136,test,testing,136,https://psicode.org,https://github.com/psi4/psi4/pull/488,1,['test'],['testing']
Testability,"## Description; Mostly posting to serve as ECP test bed. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Also: HEAVY28 & RG6, but ECP convergence problems, such that they don't match pub values; * **User-Facing for Release Notes**; - [x] New Grimme databases: ADIM6, ALK6, DARC, DC9, HEAVY28, IDISP, ISO34, RG6; - [x] More Grimme databases: AL2X, ISOL22, NBPRC, RSE42. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/795:47,test,test,47,https://psicode.org,https://github.com/psi4/psi4/pull/795,1,['test'],['test']
Testability,"## Description; Mostly xtpl refinements, plus some misc. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fixed the typo @fevangelista noticed on the GitHub workflow slide (it was definitely mine, not Andy's, in my zeal to use https). Added the link to this on the front page that CDS wanted. Added a do/don't git pull/push slide; - [x] Added ability to forward the extrapolation scheme from a method/basis spec; - [x] Tested and added docs and test for user-specified extrapolation functions. Added refs for xtpl fns.; - [x] Changed import of xtpl fns to `from driver_cbs import *` in inputparser after they had previously been named explicitly. This should be fine b/c the targeted ones are the only fns in file not beginning with underscore. This way anyone can add an extrapolation fn to driver w/o having to know to edit inputparser.; * **User-Facing for Release Notes**; - [x] Bump libefp source to upstream tag 1.4.2; - [x] Fix more int/float in basis set files that wouldn't get read correctly by parser. In particular, def2 RI fitting for Mg. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/686:485,Test,Tested,485,https://psicode.org,https://github.com/psi4/psi4/pull/686,2,"['Test', 'test']","['Tested', 'test']"
Testability,"## Description; Mostly, get psi4 up-to-date with pybind again, remove extraneous python linking, and sanitize chemps2 & pcmsolver test case names and ctest labels. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] add message-coloring module, useable by all, and used to warn about <4.9 GCC and highlight addon detection; - [x] make autodocing tools aware of the detci properties psivars that are now set py-side; - [x] re-work some list casting that (with pybind11 Nov 16 updates) broke our array options; - [x] dropped the versioned code object library in psi4/src/CM; - [x] documented python/pybind linking a bit; - [x] ctest `shorttests` gone and `minitests` in; * **User-Facing for Release Notes**; - [x] `dmrg` tests and label now accessed through `chemps2`; - [x] `pcmsolver` tests dropped ""pcm"" prefix; - [x] tests involving external code now accessible with label `addon` rather than `ext-exe-dep`; - [x] no longer linking to libpython. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/524:130,test,test,130,https://psicode.org,https://github.com/psi4/psi4/pull/524,4,['test'],"['test', 'tests']"
Testability,"## Description; Moved old Molden writer to Python, fixed normalization issue, and added test cases. ## Todos. ## Questions. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2229:88,test,test,88,https://psicode.org,https://github.com/psi4/psi4/pull/2229,4,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; Much misc. ## Todos; - [x] Better error msg for MathOpenMP, mostly when GCC+MKL and can't find iomp5; - [x] Fix items in p4c4 interface; - [x] ccsd(t) grad in cfour v1 (came down to an unneeded `\s*`). test-suite-wise, approx works equally well with v1 or v2; - [x] DROPMO handling; - [x] backport a lot of the parsing changes from github.com/qcdb/qcdb to here; - [x] modernize Molecult.init_with_xyz(); - [ ] @JonathonMisiewicz, if you hit can't-align errors, let me know, and I'll switch it out to new mech; - [x] I forgot to obfuscate the global variable names used in pylibefp in #953, so do that here; - [x] fix [forum 1009](http://forum.psicode.org/t/nameerror-name-wfn-is-not-defined/1009/2?u=loriab); - [x] update a bunch of docs items that had accumulated; - [x] officially make python 2.7 unacceptable to the build system. ## Checklist; - [ ] ~[All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests)~. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1122:218,test,test-suite-wise,218,https://psicode.org,https://github.com/psi4/psi4/pull/1122,3,['test'],"['test-suite-wise', 'tests']"
Testability,"## Description; My debugging efforts indicate the problem with #1325 is that when attempting to clone a molecule with an atom with ZMAT and Cartesian coordinates, when that ZMatrixEntry atom is cloned, its `rto_`, `ato_`, `dto_` CoordEntries are Cartesian. This somehow leads to the parent ZMatrixEntry having `computed_` true, but not for `rto_` and friends. So, we somehow have a bug in molecule creation. To avoid creating new bugs, I want to understand exactly what is going on before trying to implement a fix. Unfortunately, this part of the code is not in great shape. I'll hopefully include a fix for the bug in here, but in the meantime, I'm submitting the code cleanup I'm doing as I try to follow this part of the code. We do not want `libmints` changes to escape a thorough vetting process. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Cleanup `CoordValue` and `CoordEntry`; - [x] Document `add_atom` and `add_unsettled_atom`; - [x] Actually fix #1325 . ## Checklist; - [ ] Is it worth adding a test for this bugfix? This should be a quick one to test, but it looks like we're seeing timeouts due to test overload again.; - [x] Tested this fixes #1325 ; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) obsessively - everything in ctest except the dft benchmarks and python-vibanalysis. ## Status; - [x] Ready for review; - [ ] Ready for merge. (After the question of whether to add a test.)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1379:1060,test,test,1060,https://psicode.org,https://github.com/psi4/psi4/pull/1379,8,"['Test', 'benchmark', 'test']","['Tested', 'benchmarks', 'test', 'tests']"
Testability,"## Description; New MBIS functionality enables computation of atom-in-molecule (AIM) volumes (<r^3>). More often in force field development, a volume ratio between the AIM volume and the free atom is needed (basically describes the difference in atomic volume between a free atom and an atom in a molecule). This PR automates the computation of MBIS volume ratios by computing free-atom densities at the same level of theory as the molecule. The free-atom computations are on the ground state of a given atom, with the multiplicity taken from the SAD code. These free-atom densities are then run through the MBIS routine, and volumes are computed along with the desired volume ratios. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [X] Automate computation of unique free-atom densities; - [X] Compute volume ratio in MBIS routine. ## Questions; - [ ] Running the MBIS code now causes many UHF computations to run, do we need all of the printing here?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2127:1029,Test,Tests,1029,https://psicode.org,https://github.com/psi4/psi4/pull/2127,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; No new features were added. This is a bugfix for a minor problem described in issue #1485. The MoldenWriter::write method was appending output to an existing Molden file, if present. This is not the desired behavior since the appended part is not read by post-processing tools, nor is it part of the definition of the file format. This becomes especially confusing when doing a test calculation, where one is trying to get a psi4 input file to work as intended with some trial and error. All results from previous trials are kept in the Molden file and only the first one is read by a post-processing tool, not the last one. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Truncate an existing Molden file, instead of appending. ## Questions; None. ## Checklist; - No new tests added; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1506:394,test,test,394,https://psicode.org,https://github.com/psi4/psi4/pull/1506,4,['test'],"['test', 'tests']"
Testability,## Description; Non-urgent stuff I found this week. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Expand my collection of Windows problems and solutions after Tuesday's fun with #2624 ; - [x] Update supported Py versions in README; - [x] Fix a test that wasn't declaring its dependencies; - [x] Make non-optional the use of `git --atomic` for versions/tags/CI conda; - [x] Expand logic on whether to build conda-pkg or not to include the 1.N.x maintenance branches. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2629:305,test,test,305,https://psicode.org,https://github.com/psi4/psi4/pull/2629,2,"['log', 'test']","['logic', 'test']"
Testability,"## Description; Not expected to pass, as it needs a special qcel and qcng. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3034:583,Test,Tests,583,https://psicode.org,https://github.com/psi4/psi4/pull/3034,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Not for review. This in contents is much a duplicate of #2354, except that was (18 months ago master + SB commits + UB commits + SB commits, all with some master commits sprinkled in) and this is (current master + UB commits + 1 LAB commit with occ/dfocc testing + SB commits). This will have more testing added and be broken up into further PRs. Just notification of progress, @behnle. Thanks for the very nice contribution. ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2633:271,test,testing,271,https://psicode.org,https://github.com/psi4/psi4/pull/2633,2,['test'],['testing']
Testability,"## Description; Now that I have set up a conda environment, I was able to check whether #2218 fixed the issue of the capitalization of the xc functional keywords. It did not. This merge solves the issue:; ```. => Exchange Functionals <=. 1.0000 XC_LDA_X. => Correlation Functionals <=. 1.0000 XC_LDA_C_PW. => LibXC Density Thresholds <==. XC_LDA_C_PW: 1.00E-15 ; XC_LDA_X: 1.00E-15 ; ```. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2227:573,Test,Tests,573,https://psicode.org,https://github.com/psi4/psi4/pull/2227,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; OH molden tests were getting tripped up in conda packages on B1 vs. B2. Specifying `c2vz` and playing with convergence didn't help. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2264:26,test,tests,26,https://psicode.org,https://github.com/psi4/psi4/pull/2264,4,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; On Python 3.8.2, I was getting the following warnings; ```; /usr/lib/psi4/driver/qcdb/modelchems.py:95: SyntaxWarning: 'str' object is not callable; perhaps you missed a comma?; text += """""" %17s: %s\n"""""" (rol, cit.doi); /usr/lib/psi4/driver/qcdb/modelchems.py:148: SyntaxWarning: 'str' object is not callable; perhaps you missed a comma?; text += """""" %17s: %s\n"""""" (rol, cit.doi); /usr/lib/psi4/driver/qcdb/modelchems.py:170: SyntaxWarning: 'str' object is not callable; perhaps you missed a comma?; text += """""" %17s: %s\n"""""" (rol, cit.doi); /usr/lib/psi4/driver/qcdb/modelchems.py:192: SyntaxWarning: 'str' object is not callable; perhaps you missed a comma?; text += """""" %17s: %s\n"""""" (rol, cit.doi); /usr/lib/psi4/driver/procrouting/proc.py:1249: SyntaxWarning: ""is"" with a literal. Did you mean ""==""?; read_orbitals = core.get_option('SCF', 'GUESS') is ""READ""; ```; after running something like ; ```; #! Sample HF/cc-pVDZ H2O Computation; import psi4; psi4.set_memory('500 MB'). h2o = psi4.geometry(""""""; O; H 1 0.96; H 1 0.96 2 104.5; """"""). psi4.energy('scf/cc-pvdz'); ```. It looked like two simple fixes. The string formatting was missing a `%` and the comparison could be replaced by `==`. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Fewer warnings. ## Questions; - [ ] Does this need a test?. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1891:1365,test,test,1365,https://psicode.org,https://github.com/psi4/psi4/pull/1891,4,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; Optimizes the integral transformation step of SAPT(DFT), in which the transformed MO needs to be written to the disk. The `STORE` scheme in `src/psi4/lib3index/dfhelper.cc` has problem in writing blocks of integrals efficiently, and this PR changes it to `direct_iaQ` to optimize the writing process. Also fixed a few memory related bugs and modified a few timer tags.; The deafult scaling scheme of SAPT(DFT) exchange-dispersion energy is now changed from `DISP` to `FIXED`. It scales the uncoupled Exch-Disp2 by 0.769848. Deeper details are discussed in the paper [Y. Xie, D. G. A. Smith, and C. D. Sherrill, J. Chem. Phys. **157**, 024801 (2022)].; The SAPT(DFT) procedure is also optimized for the case that `SAPT_DFT_FUNCTIONAL = HF`, i.e. running SAPT0 with the SAPT(DFT) driver, to avoid redundant SCF calculations. ## Todos. - [ ] Optimization of disk I/O in SAPT(DFT) integral transformation; - [ ] Fixed minor memory related bugs and modified timer tags; - [ ] Switched default exch-disp scaling scheme to FIXED (default factor 0.769848); - [ ] Optimization of SAPT(HF) procedure. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481:1158,Test,Tests,1158,https://psicode.org,https://github.com/psi4/psi4/pull/2481,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Originally, only the last rotation or polarizability values computed were actually dumped to the dictionary accessed by `core.get_variables`. This fix pushes each one into the dictionary with its corresponding wavelength (in NM). I've added a few lines to `tests/cc39/input.dat` and `tests/cc29/input.dat` to test the polarization and rotation variables, respectively. I've run the tests separately since the quick tests on Travis may not cover them, the results can be found [here](https://gist.github.com/bgpeyton/6a7842adb77a03a10bf696c8364a9c54) and [here](https://gist.github.com/bgpeyton/a6654acd0f7fcaa89b5023bebd40b025). . ## Todos; - [x] Make polarizabilities push each calculated value to the dictionary just like I did with rotation; - [x] Add to polarizability / rotation test cases to ensure new variables don't get overwritten by ""accident"". ## Questions; None. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/857:273,test,tests,273,https://psicode.org,https://github.com/psi4/psi4/pull/857,6,['test'],"['test', 'tests']"
Testability,"## Description; PR #2022 labeled _ground-state_ properties with the method name... even when the method name included ""EOM-"". So even though `ccsd` and `eom-ccsd` compute the same ground state dipole, they weren't given the same name. This PR fixes that. More fixes to come, but the next PR will be heftier. Obligatory @bgpeyton ping. ## Checklist; - [x] `eom` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2533:361,test,tests,361,https://psicode.org,https://github.com/psi4/psi4/pull/2533,1,['test'],['tests']
Testability,"## Description; PR #844 made the dipole field a required argument almost everywhere but missed DMRG. The DMRG code now supplies this argument, so the code can be built again!. ## Questions; - [x] ~I couldn't find a dmrg test suite. I assume that DMRG doesn't need any wacky external field handling.~ Tested and passing!. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/873:220,test,test,220,https://psicode.org,https://github.com/psi4/psi4/pull/873,2,"['Test', 'test']","['Tested', 'test']"
Testability,"## Description; PR 1 / ? of global diagonalizer cleanup (#2642); This is a subset of #2642, and the rest of #2642 will be broken up into new PRs after this is merged. `sq_rsp.cc` contained an entire commented out diagonalizer function, and some comments related to that, from 2010. (?); Deleted. rsp.cc still used its own implementation of a diagonalizer, now it has been rewritten to use the LAPACK routine instead.; This has allowed the deletion of tred2.cc and tqli.cc. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Remove unused code from sq_rsp.cc; - [x] Rewrite rsp.cc. ## Questions; - [ ] The **only** user of rsp(...) is fine with ascending order results: https://github.com/psi4/psi4/blob/ad2063594a88fd9f60d5a122398bf2f6ae2102a9/psi4/src/psi4/detci/diag_h.cc#L245; Based on this, I have not reimplemented the old function's support for reordering the results (`matz > 1`), so this will be a change in behaviour and rsp(...) is marked as `PSI_API`. Is this objectionable? It now fails with an error message if someone tries to ask for the eigenvalues in descending order.; - [x] It is not documented if the packed lower-triangular matrix on the input is supposed to be row-major-packed or column-major-packed. Based on the call site above, I guessed it is row-major packed. Is this correct? LAPACK expects column-major-packed, so I am transforming the array to be just so.; - [ ] I _think_ I got everything right, but I am not entirely sure if the DETCI test suite is thorough enough to find out if I did not. Codecov suggests the call site is not covered (https://app.codecov.io/gh/psi4/psi4/blob/master/psi4/src/psi4/detci/diag_h.cc), but the last coverage measurement seems to have been a year ago. ## Checklist; - [x] No new features; - [x] All or relevant fraction of full tests run, see [test.log](https://github.com/psi4/psi4/files/9162565/test.log). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2637:1524,test,test,1524,https://psicode.org,https://github.com/psi4/psi4/pull/2637,6,"['log', 'test']","['log', 'test', 'tests']"
Testability,"## Description; PSIMRCC has a wavefunction now. This is **not** the last PR in the PSIMRCC series. Another brief PR will be needed for clang format and to finish moving the responsibility of keeping track of ""free memory"" to the wavefunction. You'll notice that at present, the `free_memory_` variable isn't modified. That used to be ""done"" by myriad allocate/release statements, which were removed in #1901. This is a very long PR as it is, so I'm moving that task to a separate PR. Obligatory pings: @loriab, @fevangelista, @andysim. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] PSIMRCC has a wavefunction!. ## Checklist; - [x] Quick tests and psimrcc tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1949:689,test,tests,689,https://psicode.org,https://github.com/psi4/psi4/pull/1949,2,['test'],['tests']
Testability,"## Description; Parallelism was added to the construction of the DFT Grid with OpenMP. . The grid construction's asymptotic complexity is a function of the number of atoms, so it can be significant for small-to-medium sized molecules, especially when a smaller basis set is used. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Parallelized DFT grid construction. ## Questions; - [x] Is this necessary? I ran some scaling tests, and grid construction accounted for up to one third of the total wall time on 6 cores for molecules with between ~75 and ~225 atoms; - [x] Are there best practices for OpenMP specific to Psi4? I used the static scheduler since it seems that each atom will result in the same amount of work, but I'm open to other opinions. The best scheduler could also be determined empirically on a set of test calculations, but I don't know if the differences between scheduler performance is significant enough to warrant this. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] Ran all tests, passed everything but cbs-xtpl-freq, x2c1, dftd3-version, and mrcc-rohf_ccsdt_q_. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1291:472,test,tests,472,https://psicode.org,https://github.com/psi4/psi4/pull/1291,4,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; Partial fix to #2634. thanks, @TiborGY, for that report. The mrcc interface beyond single-points was another casualty of distributed driver. The Allen test needs a further fix that involves moving a dictionary. In the meantime, this heals all the ctests. Update: I've got all parts fixed locally, and one of these changes is no longer necessary. I'll leave this open until the other PR available, in case someone needs a quick fix. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2638:167,test,test,167,https://psicode.org,https://github.com/psi4/psi4/pull/2638,4,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,## Description; Patch to the plugin code to work with ```PYMOD_INSTALL_LIBDIR``` paths. Tested with and without ```PYMOD_INSTALL_LIBDIR``` set to ```/python2.7/site-packages```. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/490:88,Test,Tested,88,https://psicode.org,https://github.com/psi4/psi4/pull/490,1,['Test'],['Tested']
Testability,"## Description; Patch up VV10 UKS dispersion. This had been a nagging issue for awhile now, but it turns out the only real issue is that I forgot to add the VV10 energy to the total SCF energy. I had originally started blaming the Fock term as the VV10 energy was spot on and subsequently starting playing with those values. Quite the blooper on my part:. ```; (p4dev) daniel:~/Gits/psi4ds/tests/dft-bench-ionization (vv10_uks)$ python ../../psi4/run_psi4.py --inplace input.dat; 	VSXC: Psi4 vs. Q-Chem.............................................PASSED; 	VV10: Psi4 vs. Q-Chem.............................................PASSED; 	B97M-V: Psi4 vs. Q-Chem...........................................PASSED; 	LC-VV10: Psi4 vs. Q-Chem..........................................PASSED; 	wB97M-V: Psi4 vs. Q-Chem..........................................PASSED; 	wB97X-V: Psi4 vs. Q-Chem..........................................PASSED; ```. This also fixes a small bug in meta-GGA UKS gradients from the original implementation. Fixes #982 and fixes #962. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/983:390,test,tests,390,https://psicode.org,https://github.com/psi4/psi4/pull/983,1,['test'],['tests']
Testability,"## Description; Per discussion on the conference call, this PR gives some error messages for cases where using a serialized wavefunction would give a segfault. 1851 is still an issue, but one that shouldn't hold up 1.4 or eat my time to straighten out `dfocc`. I'm modernizing enough modules in Psi as it is... ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Replace some segfaults from #1851 with actual error messages. ## Checklist; - [x] Tested that all four error modules used to segfault and now give an error message. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1858:491,Test,Tested,491,https://psicode.org,https://github.com/psi4/psi4/pull/1858,1,['Test'],['Tested']
Testability,"## Description; Per issue #2374, this PR adds an interface to Yukawa ERIs from Libint2. ## Questions; - [x] How would I test my new code? (How are erf kernels tested?); - [x] Do I need to add functions in MintsHelper for the Yukawa kernel?. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2386:120,test,test,120,https://psicode.org,https://github.com/psi4/psi4/pull/2386,2,['test'],"['test', 'tested']"
Testability,"## Description; Phase 1 in trying to be more systematic about checking consistency within psi. Also, separate a set of references that can reside in qcng for common testing btwn p4/qcng/qcdb. This runs several classes of tests --; * can each mp2-capable module do something sensible with each scf_type?; * can each mp2-capable module return the same right answer for each capable scf_type/mp2_type?; * can each mp2_type returns something good w/o the user knowing about modules?; * all above for gradient, plus check against findif; * for all these, is the full qcvars, return values, `CURRENT ENERGY`, etc. contract fulfilled for both P::e and wfn? . ## Todos; - [x] check mp2 fundamentals from mp2 energy targets (e.g., `MP2 TOTAL ENERGY` from `energy('mp2')`; - [x] check mp2 fundamentals from mp2 gradient targets (e.g., `MP2 TOTAL ENERGY` from `gradient('mp2')`; - [ ] check scs mp2 from mp2 targets (e.g., `CUSTOM SCS-MP2 TOTAL ENERGY` from `energy('mp2')`; - [x] check mp2 fundamentals from post-mp2 targests (e.g., `MP2 TOTAL ENERGY`) from `energy('fnoccsd')`; - [x] routing; - [x] I think we got the logic of `check_disk_df` off a little in proc.py in that we were checking if correlated method type was `DISK_DF` (my fault) and along the way forbidding `PK` refs with `DF` correlated. I think I fixed this for dfocc but haven't done df with fnocc yet.; - [x] Also corrected logic that was letting through mixed ref+corl derivatives (e.g., pk+df) that had gotten lost. See #245 for much discussion. tl;dr we have none, so let's not continue to let psi proceed with calculations that give beer + wrong answers; - [x] CISD is a poor way to calculate MP2, and it's not like we don't have other modules for RHF & ROHF besides DETCI. And @CDSherrill has allowed that we're unlikely to get to the bottom of it, so closes #311 . And the mp2 detci code is unsteady for multiple-detci-single-psi4 calcs, so it's not smooth to test.; - [x] qcvars; - [x] Newly sets `<mtd> TOTAL GRADIENT` from findif in",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1850:165,test,testing,165,https://psicode.org,https://github.com/psi4/psi4/pull/1850,2,['test'],"['testing', 'tests']"
Testability,## Description; Preparing for future code by improving docstrings and removing unused member variables. ## Checklist; - [x] Quick tests still pass. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2610:130,test,tests,130,https://psicode.org,https://github.com/psi4/psi4/pull/2610,1,['test'],['tests']
Testability,"## Description; Previous nbody tests take long time. I have changed the methods, basis sets and/or molecules to make faster tests. ## Status; - [ ] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1365:31,test,tests,31,https://psicode.org,https://github.com/psi4/psi4/pull/1365,2,['test'],['tests']
Testability,"## Description; Previously, the `dertype` specified in a frequency or optimization-with-hessian computaiton wouldn't get passed on to the pre-hessian gradient. This is now fixed. For optimizations, we can do one better and pass in the last gradient, so we don't need to recompute it. While solving this, I uncovered that supplying a dertype that was ""too high"" for the derivative level would lead to the default case of energy-only computations. That is also fixed. **Although this is an enhancement, this is also a bug fix.** Without this PR, I have no way to get a frozen core MP2 optimization with a `full_hess_every` hessian. The user is responsible for supplying the `dertype`, and they currently have no way to get the `dertype` argument to the pre-hessian gradient. ## Checklist; - [x] Tested this solved my fc-MP2 use case; - [x] Tested this solved the case of a dertype=2 RHF hessian. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1551:793,Test,Tested,793,https://psicode.org,https://github.com/psi4/psi4/pull/1551,2,['Test'],['Tested']
Testability,"## Description; Previously, the `dfocc`, `dfmp2` and `scfgrad` modules all had nearly identical code to compute the **metric term** of density fitted gradients, the contraction against the metric integral derivatives. `dfmp2` even did this _twice_ for a total of 4 times near identical logic appears. (It was 5 before #1953.) This PR consolidates those into a single `MintsHelper` method. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Various classes and functions now take in a `MintsHelper` rather than basis sets directly; - [x] Metric integral derivative contractions are consolidated into `MintsHelper`. ## Checklist; - [x] Timing tests show that with these changes, there's a slowdown of <0.1s, and scaling is effectively constant compared to the scaling of the much more expensive SCF iterations and the `Amn_x` term. I can live with this.; - [x] Quick tests and gradient tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1974:286,log,logic,286,https://psicode.org,https://github.com/psi4/psi4/pull/1974,4,"['log', 'test']","['logic', 'tests']"
Testability,"## Description; Prints out the MBIS valence charges. These were already being computed, just not exposed to the user. Tests were added for the new output, and all tests pass. There is no impact on runtime because it is just exposing values already being computed. Addresses https://github.com/psi4/psi4/issues/3140. ## User API & Changelog headlines; - [x] MBIS valence charges are now exposed and printed in MBIS output; - [x] The wfn array_variable `MBIS VALENCE CHARGES` is now available to be retrieved. ## Dev notes & details; - [x] Saves the MBIS valence charges to it's own little matrix; - [x] And exposes those charges on the python side as the wfn variable `MBIS VALENCE CHARGES`; - [x] Updates the relevant tests. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3226:118,Test,Tests,118,https://psicode.org,https://github.com/psi4/psi4/pull/3226,6,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; Provide a brief description of the PR's purpose here. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1628:90,Test,Tests,90,https://psicode.org,https://github.com/psi4/psi4/pull/1628,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; Provide a brief description of the PR's purpose here. ## Checklist; - [ ] Tests added for any new features; - [x] tested gdma. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1524:90,Test,Tests,90,https://psicode.org,https://github.com/psi4/psi4/pull/1524,2,"['Test', 'test']","['Tests', 'tested']"
Testability,"## Description; Provide a brief description of the PR's purpose here. ## Todos; - [x] bump pb11 internal build to v2.5.0; - [x] bump ambit internal build to v0.4.1; - [x] update paper and acknowledge more folks in header; - [x] add extra arg to bindings of so_overlap/kinetic so p4n ref impl can run as-is; - [x] fix missing qcvars, wfn settings in fnocc and occ for conventional LCCD; - [x] add conventional LCCD tests to standard_suite courtesy of @JonathonMisiewicz reference implementation over at p4n, https://github.com/psi4/psi4numpy/tree/master/Coupled-Electron-Pair-Approximation; - [x] depends on https://github.com/MolSSI/QCEngine/pull/244 for data. Furthermore all standard_suite tests are presently suppressed until qcng v0.15 minted. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1913:414,test,tests,414,https://psicode.org,https://github.com/psi4/psi4/pull/1913,2,['test'],['tests']
Testability,"## Description; Provide a brief description of the PR's purpose here. ## Todos; - [x] deprecate DIPOLE X and QUADRUPOLE XX qcvars that were anomolously in Debye-Ang units; - [x] add DIPOLE and QUADRUPOLE array qcvars in atomic units; - [x] edit all the tests so that they check both for the interim; - [x] the `P::e.globals` and `Wfn.variables_` maps work in `core.Matrix`. Want to keep this storage for continuity and the preservation of symmetry, but 2D is not what one expects for dipole or charges (much less what one expects for octupole). So selected properties vars are returned as ndarray from the `variable()` query fns. This means you can't assume the return is a Matrix.; - [x] schema handling addressed accordingly and tested for run_json and run_qcschema setups. Note that return units now au; - [x] handling >quadrupole. **EDIT** change of plans from first post. in order not to have to go from unique multipole elements (10 for octupole) to complete array (27) c-side and flat since P::e.globals restricted to Matrix, now only the compressed array is stored in globals/variables_ and that gets turned into (and back) the complete multidimensional ndarray when queried py-side. quadrupole has been turned back c-side to `(6)`, rather than `(3,3)` for consistency with the other poles. ## Checklist; - [x] Tests added for any new features ; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1800:253,test,tests,253,https://psicode.org,https://github.com/psi4/psi4/pull/1800,5,"['Test', 'test']","['Tests', 'tested', 'tests']"
Testability,## Description; Provide a brief description of the PR's purpose here. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1307:245,Test,Tests,245,https://psicode.org,https://github.com/psi4/psi4/pull/1307,6,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Provide a brief description of the PR's purpose here. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] fix ""<built-in method X of PyCapsule object at Y> returned NULL without setting an error"" (http://forum.psicode.org/t/frequency-calculations-result-in-built-in-method-x-of-pycapsule-object-at-y-returned-null-without-setting-an-error/1436) by following jcerezo's advice.; - [x] change `compare_vibinfo` to always be `atol`, not `digits`.; - [x] check DF Hessian calcs to PK refs at looser tols; - [x] test atom Hessian (analytic only; fix findif in ddd). ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1845:568,test,test,568,https://psicode.org,https://github.com/psi4/psi4/pull/1845,4,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; Provide a brief description of the PR's purpose here. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] switch to qcel for covalent radii. require v0.1.2; - [x] to try out covalent radii, add a test for translating to MOL format. add to psi4.core.Mol.; - [x] fix the compare_vals in threading_test; - [x] clean up all but json_out files from ctest run; - [x] add levels to pytest. while `psi4 --test` still does smoke only, other access modes have smoke/quick/default/long and we can start expanding the pytest suite. ## Checklist; - [x] added MOL writer test; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1330:258,test,test,258,https://psicode.org,https://github.com/psi4/psi4/pull/1330,5,['test'],"['test', 'tests']"
Testability,"## Description; Provide a brief description of the PR's purpose here. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; * Misc; - [x] Add PR help, as found by DGAS http://makeapullrequest.com; - [x] Add statement of support for https://python3statement.org/; - [x] Rename some DFHelper timers for the sake of alignment in timer.dat; - [x] More work on test_threading python script that will check the mkl/omp linking of psi4.so and the dfmp2 plugin template (or any other .so). Also will run psithon and psiapi tests on psi4 and dfmp2 plugin to make sure multithreads at least 1.3x speedup over single-thread; - [x] Update docs on BLAS recommendations, conda compilers. cautions on OpenBLAS sufficient to close psi4/psi4#1009; * Real part; - BLAS/LAPACK, compiler, and OpenMP are handled independently but are actually intertwined. Greatest complication comes about psi compiled by Intel with MKL (req. iomp5), then plugin built off that psi by GCC with OpenMP=ON and end up with both gomp and iomp5 linked, which is a subtle disaster.; - What we have been doing: cmake/math finds mkl_rt and outright adds iomp5, pthreads, etc. external/common/lapack packages those all into a target to pass along to blas-using dependencies. Meanwhile cmake/autocmake_omp detects just OpenMP flags (e.g., `-fopenmp` and `-qopenmp`) for the various compilers add adds them directly to `CMAKE_CXX_FLAGS` (for propagation to to psi4 (and consequently plugins) but **not** to deps (which might have OpenMP=OFF)). Actual OpenMP _libraries_ are not handled (except the aforementioned iomp5 hard-code) so (1) gomp can intrude with GCC and (2) the nice `-fopenmp=iomp5` capabilities of Clang aren't used.; - Trouble with sending me on long car trips (i.e., LSU) is that I begin plotting how things _should_ be. This PR is my take on answering this. It's insane to spring it at this point in the release cycle, but the first time after Setca that I tried building an ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1031:570,test,tests,570,https://psicode.org,https://github.com/psi4/psi4/pull/1031,1,['test'],['tests']
Testability,## Description; Provide a brief description of the PR's purpose here. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Feature1; * **User-Facing for Release Notes**; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1086:299,Test,Tests,299,https://psicode.org,https://github.com/psi4/psi4/pull/1086,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Provide a brief description of the PR's purpose here. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Inclusion of outer P-shell for cc-pVTZ-MINAO for alkali and alkali earth was split between FOR (Rob, CDS, Susi) and AGAINST (FAE, Molpro). CDS changed his vote, so deleted and added as appropriate so filled in through Kr thanks to Cici. No change in test cases. We should now match Molpro.; - [x] Added conda package instructions to obtaining psi4 docs section; - [x] Nixed `using namespace std;` in favor of explicit `std::`. Appears to have broken sapt7 test (now fixed).; - [x] Made `std::abs` and `std::fabs` explicit; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/756:435,test,test,435,https://psicode.org,https://github.com/psi4/psi4/pull/756,2,['test'],['test']
Testability,"## Description; Provide a brief description of the PR's purpose here. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] removes lingering RC1 refs, fixing psi4/psi4#564; - [x] ESP cubes had been broken by the basis set changes associated with inversion, so fixed that, as brought up on [forum]( http://forum.psicode.org/t/auxiliary-basis-set-not-found-in-cubeprop-esp-calculations/383); - [x] new cubeprop-esp test case. only 4 s with df-scf/qzvp electrostatic potential. any red flags?. ## Questions; - [ ] Note that I had to add a fn to wfn. I'm glad to go another way if ppl object and suggest. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/568:475,test,test,475,https://psicode.org,https://github.com/psi4/psi4/pull/568,1,['test'],['test']
Testability,"## Description; Provide a brief description of the PR's purpose here. ## Todos; Notable points that this PR has either accomplished or will accomplish.; - [x] renamed gtfock and erd. enable erd allowed w/o being default; - [x] add astropy docs dependence. all psi4.core and psi4.driver autodoc-ed w/o helper scripts; - [x] do absolute, not relative, imports in psi4.driver; - [x] replace cdict with variables and arrays in core.Wfn; - [x] reimplement versioning, at least internally. publish `v1.0` tag on top of `1.0`; - [x] 	Switched sto-3g and 3-21G DF fitting basis sets to def2-SVP; - [x]	Reword castup basis logic; - [x] **python 3 compatible**, now with testing!; - [x] numpy interface updates; - [x] effectively re-enable threaded MKL (build issue); - [x] reenable mostly static linked build; - [x] externals installed to `external/` not `external/{pkgname}`. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/486:614,log,logic,614,https://psicode.org,https://github.com/psi4/psi4/pull/486,2,"['log', 'test']","['logic', 'testing']"
Testability,## Description; Provide documentation for a soon-to-follow PR from Lori that will fix the Ca basis for cc-pCV5Z. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Add notes on why we are updating the file; * **User-Facing for Release Notes**; - [x] Clarify a couple of points in the user manual regarding custom basis sets (came across this while I was testing the fixed basis). ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/781:418,test,testing,418,https://psicode.org,https://github.com/psi4/psi4/pull/781,1,['test'],['testing']
Testability,"## Description; Provides a remedy for [#909](https://github.com/psi4/psi4/issues/909). `Molecule::mass` and `Molecule::Z` show inconsistent behavior for ghosts. This PR requires a new argument `bool zero_ghost` on the C++ side and optionally in the Python layer which gives a choice for behavior. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Required C++ argument `bool zero_ghost` for `Molecule::mass`; - [x] Optional python argument `bool zero_ghost` for `Molecule::mass`; - [x] Required argument `bool zero_ghost` for `Molecule::Z`; - [x] Optional python argument `bool zero_ghost` for `Molecule::Z`; - [x] Optional C++ argument `bool zero_ghost` for `Molecule::center_of_mass`; - [x] Optional C++ argument `bool zero_ghost` for `Molecule::inertia_tensor`; - [x] Check all C++ calls for ""intended behavior""; * **User-Facing for Release Notes**; - [x] New optional python arguments for `Molecule.mass()` and `Molecule.Z()`. ## Questions; - Each file changed on the C++ side needs to be passed either `True` or `False`. I'm defaulting to previous behavior in all cases except `optrot.cc` where I know functionality should change. ; - ""Previous behavior"" is that `mass` returns non-zero for ghost atoms (equivalent to `zero_ghost = false`), and `Z` returns zero for ghost atoms (`zero_ghost = true`). This behavior may want to be changed in some places, so this is a good time for a logic pass-through. . ## Checklist; - [x] Add argument for `mass`; - [x] Add argument for `Z`; - [x] Tests; - [x] Docs. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/990:1453,log,logic,1453,https://psicode.org,https://github.com/psi4/psi4/pull/990,2,"['Test', 'log']","['Tests', 'logic']"
Testability,"## Description; Provides and exposes a `matrix` method to check if two matrices are the same, within a given tolerance. This may allow for some simplifying of the test infrastructure, but I don't know the test infrastructure nearly well enough to say. ## Checklist; - [x] `test_matrix.py` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2395:163,test,test,163,https://psicode.org,https://github.com/psi4/psi4/pull/2395,2,['test'],['test']
Testability,"## Description; Provides users the ability to form a basisset composed of two combined basissets, the two can be combined simply or through use of the complementary auxiliary basis set (CABS) approach of Valeev et al. ## Dev notes & details; - [X ] Uncomments `pyconstruct_combined` in qcdb with minor changes to fit updated python; - [X ] Changes input to `build_ri_space` in OrbitalSpace to require a prebuilt combined `BasisSet` object; - [X ] Changes `build_cabs_space` in OrbitalSpace to use a full SVD; - [X ] Adds pytest `test_orbitalspace.py` to check orthonormality between orbital basis set and CABS; - [X ] Adds updated F12 basissets from the Basis Set Exchange; - [X ] Use of the CABS created works with my F12 plugin giving correct energies. ## Questions; - [ ] Shoud I generalize `_pybuild_basis` aka `BasisSet.build` to work with a list of keys, targets, roles, and other? Or create a new function to more easily access the building of a combined basisset?. ## Checklist; - [X ] `test_orbitalspace.py`; - [X ] Passes quick tests [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2982:1038,test,tests,1038,https://psicode.org,https://github.com/psi4/psi4/pull/2982,3,['test'],['tests']
Testability,"## Description; Psi4 ecosystem is growing (good) and spreading (good, b/c psi4 channel isn't a natural home for openfermion, for instance; bad, b/c it's harder to install/test/keep-track-of everything at once). The initial scope of this PR was to set up a GHA that tested as many addons as conda could lay its hands on. Other stuff happened along the way ... ### Highlights for review (link permanence questionable); - [.github/workflows/README.md](https://github.com/psi4/psi4/pull/2454/files#diff-636942e0afa55e1aea027fb857aa2c6046858fb317c0b9a4f12ff3ca17e64ffb); - [.github/workflows/ecosystem.yml](https://github.com/psi4/psi4/pull/2454/files#diff-9886b1fe077112c3a9952964ed992dc3cd38b48d0a506a6b7a00241e4669d2b1); - [doc/sphinxman/source/add_tests.rst](https://github.com/psi4/psi4/pull/2454/files#diff-c35e937cac108347811127c527ab39f06b064d399a1eced0714ecdc47d954058); - representative; - [tests/tu1-h2o-energy/test_input.py](https://github.com/psi4/psi4/pull/2454/files#diff-54403c03174a7c69742c46e5553bf1ba9f7d4b855c649eae56ffb0662a0ba50e); - [tests/adcc/formaldehyde-pe-adc1/test_input.py](https://github.com/psi4/psi4/pull/2454/files#diff-58c0e6c9056f03a206a5b10c17a465c7931c41d6a9c6c8d7e434adca515084d0); - if you want to read testing docstrings [psi4/driver/p4util/testing.py](https://github.com/psi4/psi4/pull/2454/files#diff-7104dfa29c684b4211ecc2cc6e77479d18570fdadc5a67951d3442e45f462d89); - if you want to read testing code [tests/pytests/addons.py](https://github.com/psi4/psi4/pull/2454/files#diff-93c9a8823b9fa2f85a114c39cd0d17d6c66e4cb93aa00189785ff8040d3169b3). ## Todos. - CI; - [x] read [.github/workflows/README.md](https://github.com/psi4/psi4/pull/2454/files#diff-636942e0afa55e1aea027fb857aa2c6046858fb317c0b9a4f12ff3ca17e64ffb); - [x] current readings are below (fail/pass/skip/uncollected/xfail/xpass/warnings) for `pytest -m ""addon and not long""`; - L: -/244/ 10/3229/4/4/303; - M: -/229/ 25/3229/6/2/304; - W: -/144/112/3229/2/4/303; - skipped on Linux are things like ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2454:171,test,test,171,https://psicode.org,https://github.com/psi4/psi4/pull/2454,3,['test'],"['test', 'tested', 'tests']"
Testability,"## Description; Psi4 is currently using the RMS norm to check for wave function convergence. However, it's well known that the RMS norm isn't as robust as the absolute error in some pathological cases: even though the RMS error is small, you may still have significant gradients for a few orbitals. This PR implements the maximum absolute norm for DIIS in SCF calculations, which can be toggled by setting ```DIIS_RMS_ERROR false```. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Implemented absolute error criterion for DIIS. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1460:630,Test,Tests,630,https://psicode.org,https://github.com/psi4/psi4/pull/1460,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; Pull more attributes from the wavefunction rather than the `MOInfo` object. The next PR will be less trivial. ## Checklist; - [x] cc tests still pass. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2715:149,test,tests,149,https://psicode.org,https://github.com/psi4/psi4/pull/2715,1,['test'],['tests']
Testability,"## Description; Pulls in the C, CXX, and Fortran compiler flags from Psi4, this includes additional compiler flags the user provided in their initial cmake call, and passes them to the new plugin's CMakeLists.txt file. Need people to test to ensure all the needed flags are being obtained. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [ ] User provided Psi4 compiler flags are passed to new plugins. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/543:234,test,test,234,https://psicode.org,https://github.com/psi4/psi4/pull/543,1,['test'],['test']
Testability,## Description; Put helPME into build and testing. I know OpenMP detection isn't there and prob have to pass `FFTW_ROOT`. ## Todos. ## Questions. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1357:42,test,testing,42,https://psicode.org,https://github.com/psi4/psi4/pull/1357,4,"['Test', 'test']","['Tests', 'testing', 'tests']"
Testability,"## Description; QCSchema has comment and provenance fields. With this PR (and molssi/qcelemental#7), the `qcdb.Molecule` and `psi4.core.Molecule` classes can passthrough these objects. ## Checklist; - [ ] ~Tests added for any new features~; - [x] full tests run. ## Status; In good shape, but I'll probably add more.; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1316:206,Test,Tests,206,https://psicode.org,https://github.com/psi4/psi4/pull/1316,2,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; Quick fix to symmetry in one-electron integral calls in MintsHelper. Closes #2985 . ## Dev notes & details; - [X] Changes the bool to `one_body_ao_computer` to check if the provided basis sets are the same in `mintshelper.cc`. ## Questions; - [X] N/A. ## Checklist; - [X] Adds a test for the one-electron overlap integrals in `test_mints.py`; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2986:295,test,test,295,https://psicode.org,https://github.com/psi4/psi4/pull/2986,3,['test'],"['test', 'tests']"
Testability,"## Description; REMP methods added to `occ` and attendant testing and routing. This is PR 1/? in the mega-dfocc-remp series. #### PR Background (not of general interest); There was https://github.com/loriab/psi4/tree/dfocc2 by @bozkaya and @yavuzalagoz that added to `dfocc` (1) non-oo uhf ccsd-level E & G, (2) oo ccd-level E & G, and (3) fno everything. Then, there was #2354 that added remp2 E & G to `occ` and `dfocc` and made extensive improvements to `dfocc` in the matter of combined DIIS (vital for convergence) and int overflows. All based on pre-DIIS overhaul #2369 . To untangle this, I started from master, cherry-picked the dfocc2 commits, cherry-picked the #2354 commits, modernized the DIIS calls, then added the neglected stdsuite testing and attendant qcvar fixups for existing occ/dfocc methods and new methods remp2 and categories (1) and (2) from dfocc2 branch. That mega-changeset lives at #2633 for now. This PR breaks off the `occ` portion for review. ## Todos; - [x] @behnle added REMP2 and OREMP2 hybrid perturbation theories (https://doi.org/10.1063/1.5086168) with conventional integrals added to `occ` module, as originally proposed in #2354; - [ ] note that this uses a specialty QCEngine for reference values. https://github.com/MolSSI/QCEngine/pull/375 It'll build by itself. I'll need to mint a QCEngine patch release before building conda packages with this PR in master.; - [x] docs-wise, I picked off a bit and included it in this PR. on the whole, let's defer docs edits until the dfocc PR; - [x] reworked the run_occ* driver functions a bit so that method defs are localized and there's less risk of missing an internal setting when adding new methods.; - [x] added stdsuite testing for new methods remp2 energy and oremp2 energy and gradient. added stdsuite testing for existing E & G for omp2, omp2.5, omp3, oremp2, olccd and filled in some gaps for ccsd, ccsd(t), a-ccsd(t). all conventional ints. fixed up some mis-set byproducts uncovered by stdsuite testing:",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2653:58,test,testing,58,https://psicode.org,https://github.com/psi4/psi4/pull/2653,2,['test'],['testing']
Testability,## Description; Raises exception to address #1045. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Feature1; * **User-Facing for Release Notes**; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1048:280,Test,Tests,280,https://psicode.org,https://github.com/psi4/psi4/pull/1048,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Rebase through of qcel v0.4.0 (not yet released). ## Todos; - [x] moved `tests/pytest` to `tests/pytests` so latter can be a module w/o confusing ""import pytest""; - [x] migrated to use which, which_import, parse_version from qcl; - [x] removed alignment code that migrated to QCElemental. - [x] derived testing fns from qcel, rather than scattering and duplicating in psi4/qcdb; * there's two conflicting APIs going on:; * Psi4: `compare_something(expected, computed, significant_digits, label, verbose=1)`; * QCEl: `compare_something(expected, computed, label=None, atol=1.e-6, quiet=False)`; * and there's two sets of fn names:; * Psi4: `compare_integers`, `compare_strings`, `compare_arrays`, `compare_values`, `compare_matrices`; * QCEl: `compare` (for exact comparison scalars or np-castable arrays), `compare_values` (for floating point comparison scalaurs or np-castable arrays), `compare_recursive` (for iterables containing any of the previous); * Basically, now in psi4 or qcdb, you can use the qcel fns and the psi4 fns and the psi4 API or the qcel API. And their failure response is localized in a fn that can be switched out. ; * A few highly specialized comp fns (like `compare_molrecs` have been deprecated or psi4 API deprecated, but there should be enough UpgradeHelper guides to raise a problem and suggest solution.; * EDIT: whether using psi4 or qcel APIs, `label` is no longer required -- it'll default to the calling fn name (or `<module>` in a script). - [x] added link to binder image and fix tutorial cmd that didn't work in binder. ## Questions; - [ ] Someone should look at the old/new `compare_matrices` fns to check that the values comparison is still catching any detailed uses of the `^` operator. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1644:89,test,tests,89,https://psicode.org,https://github.com/psi4/psi4/pull/1644,6,"['Test', 'test']","['Tests', 'testing', 'tests']"
Testability,## Description; Recent changes to the cmake build systems introduced an issue when compiling psi4 plugins and Forte on a Mac. Compilation fails at the linking stage with the error; ```; ld: can't link with bundle (MH_BUNDLE) only dylibs (MH_DYLIB); ```. This PR reverts two changes. ## Questions; - [ ] Is there a better solution that still uses `pybind11_add_module(core MODULE NO_EXTRAS core.cc)`?. ## Checklist; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1640:455,test,tests,455,https://psicode.org,https://github.com/psi4/psi4/pull/1640,2,['test'],['tests']
Testability,## Description; Redirects the PSIO errors from `stderr` to exception message (stderr and normal output).; Essentially addressing #2019 and #1965. Example print:. ```; !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: PSIO_ERROR: 5 (open call failed) !; ! Check the location of your scratch directory which can be !; ! specified via the $PSI_SCRATCH environment variable or in !; ! the $HOME/.psi4rc file. !; ! Please note that the scratch directory must exist and be !; ! writable by Psi4 !; ! Error occurred in file: /Users/kruse/qc/psi4/psi4/src/psi4/libpsio/error.cc on !; ! line: 133 !; ! The most recent 2 function calls were: !; ! !; !----------------------------------------------------------------------------------!; ```. ## Feature; - [x] PSIO errors to stderr and normal output. ## Checklist; - [x] limited manual testing by deleting files; - tests not applicable . ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2030:881,test,testing,881,https://psicode.org,https://github.com/psi4/psi4/pull/2030,2,['test'],"['testing', 'tests']"
Testability,"## Description; Regenerate samples from tests. No need to examine diff. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2757:40,test,tests,40,https://psicode.org,https://github.com/psi4/psi4/pull/2757,1,['test'],['tests']
Testability,"## Description; Rehabilitates Cfour interface. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Interface working again for primary modes (~60 tests). Not yet for `vpt2()`; - [x] Test cases kw-7, kw-8, rohf-mp4 still failing for known reasons; * **User-Facing for Release Notes**; - [x] Cfour interface working again. Recc to use in communication with a developer. Cfour 2.00beta. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/730:209,test,tests,209,https://psicode.org,https://github.com/psi4/psi4/pull/730,2,"['Test', 'test']","['Test', 'tests']"
Testability,"## Description; Remove mention of `ERISieve` from some modules that no longer use it. `libfock` still uses it, but that's a problem for another day. Also, `dfmp2` cleanup. No more `new`!. ## Checklist; - [x] `dfmp2` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2657:216,test,tests,216,https://psicode.org,https://github.com/psi4/psi4/pull/2657,1,['test'],['tests']
Testability,## Description; Remove some unused files. Bump qcel -- the 0.19 isn't strictly needed but it'll avert some bad qcel+pydantic combinations in the wild. Bump v2rdm -- @hokru noticed an incompatibility after #2100 . . ## Questions; - [ ] May as well wait on this PR until determine if safe to update reference of fchk+dct test. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2128:319,test,test,319,https://psicode.org,https://github.com/psi4/psi4/pull/2128,4,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; Remove spaces when reading options, fixes #2004. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2051:85,Test,Tests,85,https://psicode.org,https://github.com/psi4/psi4/pull/2051,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Removes cc46 from ctest temporarily to keep full tests passing. There is no major bug here, rather a bunch of conflicting logic in the `run_cc_property` driver that will be patched before final release. . ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1002:65,test,tests,65,https://psicode.org,https://github.com/psi4/psi4/pull/1002,2,"['log', 'test']","['logic', 'tests']"
Testability,## Description; Removes initialization of DFHelper object in fexch and find by having a dfh object as member data. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Circumvents recalculation of molecular integrals in the fisapt package.; - [x] Provides a corresponding speed-up . ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1140:382,test,tests,382,https://psicode.org,https://github.com/psi4/psi4/pull/1140,2,['test'],['tests']
Testability,## Description; Removes over 4000 unused LoC that I don't think anybody knows how to maintain. DGAS said this was deprecated in favor of Python solvers anyways. ## Checklist; - [x] Quick tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2348:187,test,tests,187,https://psicode.org,https://github.com/psi4/psi4/pull/2348,1,['test'],['tests']
Testability,"## Description; Removes the obsolete mention of Psi3 in the build docs. If someone wants psi3, they can find it by Google... ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1815:300,Test,Tests,300,https://psicode.org,https://github.com/psi4/psi4/pull/1815,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Repercussions from trying to fix #1986 . I think this fixes #1939, fixes #1978, fixes #2011. ## Todos; - [x] standardize pytests on `@using(""<addon>"")` rather than `@using_<addon>`. addon detection is more runtime than compiletime; - [x] start a smoke tests suite of running through `psi4 --qcschema` to live alongside psithon and psiapi; - [x] finally fix the need for pe/pcm to manually set fix_com/fix_reorient. I have a strategy locally.; - [ ] expand `Mol._initial_cartesian` to other ways to construct a Mol; - [x] snsmp2 1.0.4; - [x] pybind11 2.6.1; - [x] pcmsolver ~1.3.?~ 1.3 having some numerical issues with psi, so going back to a patched v1.2.1. ## Questions; - [ ] Opening the discussion to how to deal with methods that needs no_com/no_reorient/symmetry c1 _from_the_beginning_. Many of our present symmetry tolerant methods just need their parts consistent (e.g., dimer, monoA, monoB); whereas, cppe needs the exact input Cart to match the potfile. (Fun fact: a Mol can go from fix_com T -> F but not the reverse.) The sol'n in this PR is to carry the input Cartesians along as `Mol._initial_cartesians` (so long as not a variable or zmat Mol), which can then be used to reset through `set_geometry()` if the method demands it. This member is akin to the `Mol.EFP` object that gets carried along. Presently this is implemented for just the molecule constructors that psithon/psiapi `psi4.geometry()` and qcsk `Mol.from_schema()` use, but should probably be expanded if adopted. Thoughts on whether this is the best way to solve the problem?; - [ ] @robertodr PCMSolver: I'm only imposing c1, not fix_com/orient based on your slack reply. ok? I've removed all those lines from your ctest and pytest examples (except for alpha that needed it for matching). There's a new pcm mode test in test_addons_qcschema.py. It's writing the input file for pcm input, which is a little questionable in the schema-running world, but it's working for now. Any concerns?; - [ ] @maxsche",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2037:268,test,tests,268,https://psicode.org,https://github.com/psi4/psi4/pull/2037,1,['test'],['tests']
Testability,"## Description; Replace an old-style call to `moinfo_` in `cc` with something more modern: get your number of irreps and orbital space information from the wavefunction. Once this is in, I can batch MOInfo elimination from several more files. ## Checklist; - [x] `cc` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2704:268,test,tests,268,https://psicode.org,https://github.com/psi4/psi4/pull/2704,1,['test'],['tests']
Testability,## Description; Replace an old-style call to `moinfo_` in `cc` with something more modern: using Matrix technology to bypass the loop over the number of irreps. ## Checklist; - [x] `cc` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2703:186,test,tests,186,https://psicode.org,https://github.com/psi4/psi4/pull/2703,1,['test'],['tests']
Testability,"## Description; Replace char** irrep_labels() with std::vector<std::string> irrep_labels(); Convert with .c_str() when needed in print statements.; Remove calls to free(); Removed calls to delete in dcft_scf_UHF.cc. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Part of the change to std::string; * **User-Facing for Release Notes**; - [ ] None. ## Status; - [ ] Test jobs cc1, dfmp2-1, scf-occ all passed, and Irrep labels printed were the same as the reference.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/780:432,Test,Test,432,https://psicode.org,https://github.com/psi4/psi4/pull/780,1,['Test'],['Test']
Testability,"## Description; Replaces #824: Frozen Natural Orbitals were implemented for DF-CCSD and DF-CCSD(T) energies. ## Todos; - [x] FNOs are implemented for MP2.5, MP3, LCCD, CCD, CCSD, CCSD(T), and CCSD(AT).; - [x] Both DF and CD options are available (only for RHF ref for now). ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1390:294,Test,Tests,294,https://psicode.org,https://github.com/psi4/psi4/pull/1390,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Requiring libefp was rather a holdover from the early days of code-in-repo add-ons. This PR makes it slightly easier on packagers and enables us to have only three required compile-in dependencies in the figure in the paper (libint, blas/lapack, pybind11). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `#ifdef`-ing the EFP code probably could have been done to varying degrees of thoroughness. But since EFP is tied into `P::e` _and_ Molecule _and_ it's own interface, none of which I wanted to rexamine, this is the one that requires a minimum of recompilation if you change `ENABLE_libefp` ON/OFF. When OFF, the EFP object still exists, but only the constructor, destructor, and nfragments method (that returns 0 fragments). This way the driver needs no mods (which is a good thing, since we can't `#ifdef` python).; - If you build w/o libefp and try an efp-containing molecule, throws a runtime error with text `EFP fragments detected but are not available`.; - [x] slight fix of passing `pybind11_DIR` to plugin cache. helps with mixed install/staged psi4/pybind11. we'll see how this goes, as I'm not sure it's the best fix.; - [x] more thoroughly test cmake variable for PCMSolver path (`if ""@ENABLE_PCMSolver@"".upper() in [""1"", ""ON"", ""YES"", ""TRUE"", ""Y""]`); - Hope this helps a bit on packaging, @susilehtola ; * **User-Facing for Release Notes**; - [x] Psi4 can be build without libefp add-on. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/623:1239,test,test,1239,https://psicode.org,https://github.com/psi4/psi4/pull/623,1,['test'],['test']
Testability,"## Description; Resolves #1404. This makes `dsd-blyp-d3(bj)` pull data from `dsd-blyp-d3bj`, as opposed to `dsd-blyp` + `dashparam[""d3bj""][""dsd-blyp""]`. Currently affected functionals are:. ```; created b97-0-d2 from b97-d2; created b97-0-d from b97-d2; created b97-d from b97-d2; created b97-0-d3bj from b97-d3bj; created b97-0-d3(bj) from b97-d3bj; created b97-d3(bj) from b97-d3bj; created b97-0-d3mbj from b97-d3mbj; created b97-0-d3m(bj) from b97-d3mbj; created b97-d3m(bj) from b97-d3mbj; created dsd-blyp-d from dsd-blyp-d2; created dsd-blyp-d3(bj) from dsd-blyp-d3bj; created dsdpbep86-d2 from dsd-pbep86-d2; created dsdpbep86-d from dsd-pbep86-d2; created dsd-pbep86-d from dsd-pbep86-d2; created dsdpbep86-d3bj from dsd-pbep86-d3bj; created dsdpbep86-d3(bj) from dsd-pbep86-d3bj; created dsd-pbep86-d3(bj) from dsd-pbep86-d3bj; created dsdpbep86-nl from dsd-pbep86-nl; created dsdpbepbe-d2 from dsd-pbepbe-d2; created dsdpbepbe-d from dsd-pbepbe-d2; created dsd-pbepbe-d from dsd-pbepbe-d2; created dsdpbepbe-d3bj from dsd-pbepbe-d3bj; created dsdpbepbe-d3(bj) from dsd-pbepbe-d3bj; created dsd-pbepbe-d3(bj) from dsd-pbepbe-d3bj; created dsdpbepbe-nl from dsd-pbepbe-nl; created dsd-pbeb95-d from dsd-pbeb95-d2; created dsd-pbeb95-d3(bj) from dsd-pbeb95-d3bj; ```. The `B97-0` and `B97-D2` mess will have to wait until #1403 is merged. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [X] When a functional has a defined dispersion version, aliases are copied from that, as opposed to the `dashparam` data. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1405:1617,test,tests,1617,https://psicode.org,https://github.com/psi4/psi4/pull/1405,2,['test'],['tests']
Testability,"## Description; Resolves #1593 . ## Todos; - [x] also added `""options_lo""` description. ## Checklist; - [ ] ~Tests added for any new features~; - [x] Docs (sphinxmini) build fine. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1643:109,Test,Tests,109,https://psicode.org,https://github.com/psi4/psi4/pull/1643,1,['Test'],['Tests']
Testability,## Description; Resolves #1694 by throwing an exception when active molecule has only 1 fragment.; Resolves #1675 by throwing an exception when requested atom is out of bounds.; Resolves #1613 by changing the lookup path for AUX/DECON bases from `libraryPath` to `basisPath`. ## Checklist; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1714:330,test,tests,330,https://psicode.org,https://github.com/psi4/psi4/pull/1714,2,['test'],['tests']
Testability,## Description; Resolves #1876. ## Checklist; - [x] Tests added for any new features into `dft-custom`; - [x] `ctest -L dft` and `ctest -R castup` both pass fine. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1880:52,Test,Tests,52,https://psicode.org,https://github.com/psi4/psi4/pull/1880,1,['Test'],['Tests']
Testability,## Description; Restore a `const` lost during the Vector refactor. Quick merge appreciated - needed to fix Forte. ## Checklist; - [x] Tests added for any new features. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2705:134,Test,Tests,134,https://psicode.org,https://github.com/psi4/psi4/pull/2705,1,['Test'],['Tests']
Testability,## Description; Rewrite of the CC wavefunction as per #1247 . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1273:237,Test,Tests,237,https://psicode.org,https://github.com/psi4/psi4/pull/1273,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; SCF convergence has only been reported with the message ""Energy converged."" which is missing out on the more important part, i.e. the convergence of the wave function. For pedagogical reasons, this PR changes the printout so that also the wave function is mentioned in the message. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1468:473,Test,Tests,473,https://psicode.org,https://github.com/psi4/psi4/pull/1468,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; SCF: Add SCFConvergence Error such that the error will have the wavefunction as a member. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1130:126,Test,Tests,126,https://psicode.org,https://github.com/psi4/psi4/pull/1130,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; See #2608 for background. Fixes #2608. Recent emphasis has been on Cfour through QCEngine or QCDB, so the Psi4/Cfour test suite likely hasn't been checked since pre v1.4. Nevertheless, for things like cbs, Psi4/Cfour is still the right choice. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] switching away from `molecule = geometry()` in `interface_cfour.py` below isn't strictly necessary, but it helps with some import stuff in a future PR; - [x] The main thing that the distributed driver broke is that non-set basis sets get set as `(auto)`, so the interface needed to learn that was the same as unset. Also, there isn't the continuous storage of qcvars in `P::e`, so those need to be reloaded from ""wfn"".; - [x] interface used to allow gradients with ghost atoms. dropping that here, but I did implement it in qcdb and qcengine.; - [x] it looks like I hacked up the tests until they passed. broadly, this is true, but removed things are singles and same- and opposite-spin energies. harvesting all these values is tested far more extensively and carefully now over at qcdb than here, so I am not discomfited.; - [x] all psi4/cfour tests pass. ## Checklist; - ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2615:133,test,test,133,https://psicode.org,https://github.com/psi4/psi4/pull/2615,7,"['Test', 'test']","['Tests', 'test', 'tested', 'tests']"
Testability,## Description; See below. ## User API & Changelog headlines; - [x] `Matrix::set_block` can be used on matrices that are not totally symmetric. ## Dev notes & details; - [x] `Matrix::set_block` can be used on matrices that are not totally symmetric.; - [x] `Matrix::set_block` now raises an explicit error when the symmetry of the target and block matrices disagree. ## Checklist; - [x] New test working. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2734:391,test,test,391,https://psicode.org,https://github.com/psi4/psi4/pull/2734,1,['test'],['test']
Testability,## Description; See below. Sister PR to #2734. Needed before I can cleanup `ccresponse`. ## User API & Changelog headlines; - [x] `Matrix::get_block` can be used on matrices that are not totally symmetric. ## Dev notes & details; - [x] `Matrix::get_block` can be used on matrices that are not totally symmetric. ## Checklist; - [x] New test working. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2752:336,test,test,336,https://psicode.org,https://github.com/psi4/psi4/pull/2752,1,['test'],['test']
Testability,"## Description; Sets up Ruff to replace yapf & isort. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Should not affect end-users,; - [x] Will affect open PRs once `main` is re-formatted and ruff is enforced on the CI level, . ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] aligns code formatting convention to [Ruff](https://docs.astral.sh/ruff/formatter/), replacing yapf & isort,. ## Questions; - [ ] Should pre-commit run in the CI? It could run to let know PR might not be following the style, but the failure might not be blocking. It's something like a warning for a maintainer/PR issuer. ## Checklist; - [x] No new tests are required for that,; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3234:941,test,tests,941,https://psicode.org,https://github.com/psi4/psi4/pull/3234,3,['test'],['tests']
Testability,## Description; Several bug fixes and enhancements promised for 1.3. Primary goal for these changes is to localize the estimation of DF memory in a single location to prevent some odd errors. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Remove class method attribute for `Wavefunction.to_file`.; - [x] Reworks SCF `save_orbitals` to use canonical Wavefunction serialization.; - [x] `JK.name()` returns the name of the JK object.; - [x] `JK.memory_estimate()` attempts to estimate the amount of in-core memory required.; - [x] Reworks DFT cache size logic to account for Schwarz screening.; - [x] Removes SCF initialize JK from C++ for better initialization control; - [x] Attempts to close #1218. ## Questions; - [ ] Can we get better estimates on PK memory usage @jgonthier.; - [ ] Does IWL use virtually zero memory? @andysim . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1446:602,log,logic,602,https://psicode.org,https://github.com/psi4/psi4/pull/1446,4,"['Test', 'log', 'test']","['Tests', 'logic', 'tests']"
Testability,"## Description; Since #582, presumably, all the skeleton plugins that we check out and build from template have actually been using the same, `basic`, template. The adding to ctest bit wasn't working either. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Now we have the compacted code of #582 _and_ the testing functionality of pre- #582 .; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/624:372,test,testing,372,https://psicode.org,https://github.com/psi4/psi4/pull/624,1,['test'],['testing']
Testability,"## Description; Since we [say we're returning the dimer wfn](https://github.com/psi4/psi4/blob/master/psi4/driver/driver.py#L505-L507), let's return the dimer wfn for fisapt. currently returning a `psi4.core.FISAPT` object that does not inherit from Wfn. Hence no way to drive OEPROP on a sapt calc. ## Checklist; - [x] I checked that the dipole/quadrupole from running oeprop on this returned wfn matches a forced quadrupole in the early scf_helper; - [x] ran all the sapt tests. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1201:474,test,tests,474,https://psicode.org,https://github.com/psi4/psi4/pull/1201,1,['test'],['tests']
Testability,## Description; Slowly replacing `ERISieve` entirely... ## Checklist; - [x] Quick tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2659:82,test,tests,82,https://psicode.org,https://github.com/psi4/psi4/pull/2659,1,['test'],['tests']
Testability,"## Description; Small bug fix that prevents adding local options to a module. This error shows only for `string` and `int` type options, but I potentially also in `array` and `python` data types. This PR addresses all four cases. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix option reading bug. ## Questions; - In the following part of the code one can potentially encounter the same problem. This can be fixed by adding `module` to the list of parameters passed to this function. Any reason why there is no `std::string module` in the parameter list? Adding it would also make this function consistent with other `set_local_x` functions.; https://github.com/psi4/psi4/blob/396b4c51d6902301baeed41386c49ccb9099a30b/psi4/src/core.cc#L705-L707. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1412:854,test,tests,854,https://psicode.org,https://github.com/psi4/psi4/pull/1412,2,['test'],['tests']
Testability,"## Description; Small fix to Libint build generator. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [X] Moves `_build_shared_libs` and `_cmake_build_type` outside of if-else statement so they are defined for both cases for `BUILD_Libint2_GENERATOR`. ## Checklist; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3078:493,test,tests,493,https://psicode.org,https://github.com/psi4/psi4/pull/3078,2,['test'],['tests']
Testability,"## Description; Small improvements to the TDDFT solver. This one should be merged after #1885. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [X] Document; - [x] Handle computation of triplets properly; - [x] Implement transition moments and spectroscopic observables:; - [x] Electric dipole moment, length representation; - [x] Electric dipole moment, velocity representation; - [x] Magnetic dipole moment; - [x] Oscillator strengths, length representation; - [x] Oscillator strengths, velocity representation; - [x] Rotatory strengths, length representation; - [x] Rotatory strengths, velocity representation; - [x] Robustness fix: `states_per_irrep` sometimes fails with an obscure out-of-bounds error.; - [x] Usability fix: verbosity should be slightly higher, to let the user know stuff is being done (currently, only printout is at convergence); - [x] Implement functions to plot electronic absorption (EAS) and eletronic circular dichroism (ECD) spectra; - [x] Remove warning on potential inaccuracy of results.; - [X] Check convergence only against the norm of the residual (`r_tol`). The `e_tol` parameter has been completely removed. ## Follow-up; - The solver stalls when very tight convergence (`r_tol = 1e-8`) is requested. I am not quite sure if this is a fundamental issue with the algorithm. That convergence threshold is insanely tight, I am not even sure if this should be considered a real problem... ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [X] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814:1487,Test,Tests,1487,https://psicode.org,https://github.com/psi4/psi4/pull/1814,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; Small timer mistype in VV10 NL correlation. I patched this up and added a (faster) test to the quicktests suite so that we also check VV10 in CI. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/889:99,test,test,99,https://psicode.org,https://github.com/psi4/psi4/pull/889,1,['test'],['test']
Testability,## Description; Small tweak to SAPT(DFT) to help eliminate small ~30cal/mol wiggles in the PES. Tracked this down to issues in allowing the derivatives of very small densities leading to quite spurious results. This was changed to the same tolerance as the V derivative builds. Does change the result by ~1cal/mol for a test case- this is lost in the noise of DFT. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/840:320,test,test,320,https://psicode.org,https://github.com/psi4/psi4/pull/840,1,['test'],['test']
Testability,"## Description; So `psi4.clean_options()` is a mainstay of psiapi mode because it allows you to do two calculations after another both starting from a clean slate of options. Likewise, it is important for testing b/c we do one behind the scenes (in pytest) between each test so that your MP2 doesn't get PCM solvation, etc. For plugins, this has been broken since the `clean_options()` command was invented, in that as soon as you tried to set an option unique to the plugin (as opposed to one that another module in read_options.cc defined) _after_ a options cleanse, it would complain about an invalid option. This PR reloads the plugin options after a cleanse. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1032:205,test,testing,205,https://psicode.org,https://github.com/psi4/psi4/pull/1032,2,['test'],"['test', 'testing']"
Testability,"## Description; So in the course of working on DDD/pydantic, a fix I needed triggered the dreaded ""circular import"" error, which anyone who's tried to alter the driver's fragile import structure has probably seen, too. Being sick of this, I located https://medium.com/brexeng/avoiding-circular-imports-in-python-7c35ec8145ed with advice to do `from .driver import energy`, not `from psi4.driver.driver import energy`. So that's the first pass on the driver imports. This fixes my circular import problem and makes it easier to find others. Since all the imports are churned anyways, I set up `isort` (that is, you can run isort on the repo, not that it's enforced on the repo). This is a utility (https://pycqa.github.io/isort/index.html) that sorts all the imports at the top of the file into stdlib, third_party, and first_party blocks and then alphabetizes the imports within. It also effectively tests the fragility of the import structure by jumbling them all into alphabetical order. Attempts in past years to run isort led to circular imports and a retreat. This time I was able to fix the single one that came about. Third pass is that I ran `autoflake` on the driver to remove unused stdlib imports. It also removed some `pass` on empty fns that weren't needed because the docstring suffices for the syntax. ## User notes; - [x] the import structure has changed. you might need to add standard library imports to your input files if you use them (e.g., `import math` before `math.pi`) that previously were preloaded by psi4. ## Dev notes & details; - [x] switched import style to relative imports, ran isort, ran autoflake; - [x] actual material changes:; * stop importing `molutil` into `sapt_proc`. this is the main one that allows killing off the embarrassing `temp_circular_import_blocker` fn. https://github.com/psi4/psi4/compare/master...loriab:psi4:import_slayer?expand=1#diff-f3e93ffa6125dd1f79abad7630bbf259bb1daeee89e983d2889b68af6038875aL35; * delay loading fisapt_proc until runti",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3033:900,test,tests,900,https://psicode.org,https://github.com/psi4/psi4/pull/3033,1,['test'],['tests']
Testability,"## Description; So once upon a time, Psi4 ran ConfigMath to get its lapack/blas, then [tested for mkl](https://github.com/psi4/psi4private/blob/71ea2ea8ee142ee42541c589c42977fff2d3c381/CMakeLists.txt#L173-L174) to set `HAVE_MKL`. Then in the code proper, `#include mkl.h` (that defines `__INTEL_MKL__`) and the [very important `mkl_set_num_threads()`](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libparallel/process.cc#L91-L93) were guarded by `HAVE_MKL` ifdefs. Then, on the fateful 23 Jun 2016 (https://github.com/psi4/psi4/commit/e07d645ea7acc85ae90d8c60a30f3426c977fc26) in the course of CMR, ConfigMath was blown away and all the `HAVE_MKL`s were replaced by `__INTEL_MKL__`. But that's circular because the mkl.h inclusions, which define `__INTEL_MKL__` were guarded by `__INTEL_MKL__` ifdefs. So Psi4 hasn't been threading MKL (though OMP threading has still been present). Story continues in bullet below. Identification and debugging of this issue by @dgasmith and Matt Schieber. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] ~~This PR identifies which of MKL, OPENBLAS, etc. has been detected by ConfigMath.~~ Identify MKL-or-not by searching for ""mkl"" in the full lapack library list, whether detected math or passed-in math. Colors ""MKL LAPACK"" to screen if ""on"". If MKL, attaches the `USING_LAPACK_MKL` compiler definition to the `tgt::lapack` target that every module of Psi4 is linked with. Thus we're getting MKL threading again.; - [x] Adds min version tags for dkh, gdma, erd; - [x] Adjusts where the required check comes in for hdf5 so we don't get an warning; - [x] Add docs with examples of math detection; - [x] Remove unused routes in math detection: explicit, external, mkl_flag; - [x] ConfigMath now FATAL_ERRORs if math libs _not_ found; - [x] Newly pays attention to headers for math. Only required for MKL.; - [x] Add a threading testing script for general maintenance, see comment below. In g",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/615:87,test,tested,87,https://psicode.org,https://github.com/psi4/psi4/pull/615,1,['test'],['tested']
Testability,"## Description; Solve #1462 by creating both big-endian and little-endian quadrature data files, then installing the proper one via cmake. Will probably fail cross-compile, but I don't know of such cases. ## Checklist; - [ ] no big endian machine to test on. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1464:250,test,test,250,https://psicode.org,https://github.com/psi4/psi4/pull/1464,1,['test'],['test']
Testability,"## Description; Some C++ style fixes for files in the `ccenergy` folder. . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Remove `return;` where useless; - [x] Remove unused `ioff_` array; - [x] Localize loop variables, use `auto`; - [x] Switch to `std::` data structures. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1269:344,Test,Tests,344,https://psicode.org,https://github.com/psi4/psi4/pull/1269,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Some PCM related updates/fixes that were enabled after the move of SCF to Python. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Tests ROHF with PCM. Close #999 ; ~- [ ] Do gradients with PCM semi-numerically [à la ECP](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc.py#L2095-L2132), see https://github.com/psi4/psi4/issues/402#issuecomment-386149151~ **Probably for 1.4**. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1327:196,Test,Tests,196,https://psicode.org,https://github.com/psi4/psi4/pull/1327,4,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Some Psi4-side fixes to getting @bennybp's simint AddOn added. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Includes all commits of #533 ; - [x] Temporarily based off private repo https://github.com/loriab/simint branch config6 until the integration settles down, and we can return to tarballs. Note that if you want to test this branch, you may need to supply your GH credentials during the build to clone simint.; - [x] Adds all the pre-built detection, target referencing, docs, standardized variable names, tests that we expect from an addon to simint; - [x] Continued general documentation on addons.; - [x] Modestly tested- static and dynamic on Linux, dynamic on Mac; * **User-Facing for Release Notes**; - [x] New integral library available with `-DENABLE_simint`. ## Questions for @bennybp ; - [ ] There's some questions in external/upstream/simint/CMakeLists.txt; - [ ] I've made the simint on my acct private and just added you and some core developers who may want to test it. If you don't mind it being public, as a temp repo, that'd be a little easier.; - [ ] There are spots where I supply at most separate home, docs, and source links for addons. I've got your website, http://www.bennyp.org/research/simint/, for all three at the moment, so let me know if there are more specifics.; - [ ] I filled in the installing and configuring sections of simint.rst according to the template. Other addons (http://psicode.org/psi4manual/master/interfacing.html) often have middle sections about interacting with the code. Fill in anything you like.; - [ ] Got the following unexpected failing test cases on Linux and partially confirmed on Mac, all segfaulted. Could you take a look? None are in quicktests.; ```; The following tests FAILED:; 	 16 - cbs-xtpl-wrapper (Failed); 	144 - dft-b2plyp (Failed); 	269 - pywrap-checkrun-rhf (Failed); 	270 - pywrap-checkrun-rohf (Failed); 	271 - pywrap-checkrun-uhf (F",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/625:406,test,test,406,https://psicode.org,https://github.com/psi4/psi4/pull/625,3,['test'],"['test', 'tested', 'tests']"
Testability,## Description; Some bugs were exterminated in `find()` and `fexch()`. ; Additional unit tests were added. ; Thanks to @bwb314 for creating extensive unit tests which check all fsapt terms. ## Status; - [ ] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/879:89,test,tests,89,https://psicode.org,https://github.com/psi4/psi4/pull/879,2,['test'],['tests']
Testability,## Description; Some changes to make Forte and Psi compatible with each other again. Heavily coordinated with Lori. Also gets rid of an unused function that was raising a compile-time warning. ## Checklist; - [x] Psi tests pass; - [x] Forte tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2595:217,test,tests,217,https://psicode.org,https://github.com/psi4/psi4/pull/2595,2,['test'],['tests']
Testability,## Description; Some code triplication may be eliminated. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [X] Yay for negative LOC. ## Checklist; - [X] No new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2464:264,test,tests,264,https://psicode.org,https://github.com/psi4/psi4/pull/2464,2,['test'],['tests']
Testability,"## Description; Some functions in the `Vector` and `Matrix` have been ""freed"". Separated from #1443, as requested. ## Todos; - [x] `doublet`, `triplet`, `create`, `horzcat`, `vertcat` and the blocked matrix ""new"" and ""delete"" are now free functions, rather than static methods in `Matrix`; - [x] `create` for `Vector` also a free function now.; - [x] Removal of various unused functions in `Vector`; - [x] Remove the `defines.h` header in DCFT folder. File numbers are in `psifiles.h`. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1447:506,Test,Tests,506,https://psicode.org,https://github.com/psi4/psi4/pull/1447,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Some info about module-level provenance of a Wfn would be handy. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] add `Wavefunction.module_` member data and export; - [x] add setting to most modules (not psimrcc or fockci); - [x] incorporate into stdsuite testing. ## Questions; - [x] @dgasmith I've given mcscf its own name. prefer ""detci""?; - [x] @maxscheurer I edited a couple error messages to ADCC from ADC. ok?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1935:321,test,testing,321,https://psicode.org,https://github.com/psi4/psi4/pull/1935,4,"['Test', 'test']","['Tests', 'testing', 'tests']"
Testability,## Description; Some minor fixes cherry-picked from #1061 . ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1267:80,Test,Tests,80,https://psicode.org,https://github.com/psi4/psi4/pull/1267,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Some miscellaneous code cleanup from my first attempt at fixing #2560. There will be a follow-up PR that renames many variables in this code before I can resume the attempt. Note that although I create Same-Spin and Opposite-Spin matrices, those are currently unused, but will be needed for the #2560 fix. Quick review appreciated, so I can continue the `fnocc` push. Obligatory @edeprince3 ping. ## Todos; - [x] Code cleanup; - [x] Introduced framework for modernizing pair energies in `fnocc`. ## Checklist; - [x] `fnocc` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2561:540,test,tests,540,https://psicode.org,https://github.com/psi4/psi4/pull/2561,1,['test'],['tests']
Testability,"## Description; Start rearranging CBS for DDD. This is No. 4 of the DDD series, #1351. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] DON'T LOOK AT THE FIRST COMMIT -- it's just moving code around. the second commit is a nice diff to review; - [x] add typing and consolidate the docstring improvements between master and ddd for the cbs xtpl fns; - [x] switch the array xtpl computation from core.Matrix to np.ndarray. here, the data enters and leaves as Matrix, but in ddd, it'll be pure ndarray; - [x] modernize and improve printing in xtpl fns. ## BugFix; - [x] @PeterKraus, you're confident on this bug https://github.com/psi4/psi4/pull/1351/files#r441933046 ? I've fixed it here and altered the reference values in the alpha test without investigating the correction. Applies to Karton 2-point SCF extrapolation. ## Checklist; - [x] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2526:790,test,test,790,https://psicode.org,https://github.com/psi4/psi4/pull/2526,4,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; Stops overwriting DFT energy by D3 energy only. I am not sure how to test for this, as the gradients as well as geometries with and without the patch agree to 8 DP's. I only noticed it when using the `vibrational_analysis(wfn)`, as there the current total energy plays a role... ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Resolves #1356. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1470:85,test,test,85,https://psicode.org,https://github.com/psi4/psi4/pull/1470,4,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; Substitute some int by size_t, and introduces (size_t) casts wherever multiplication of integers seemed problematic. ## Todos; * **Developer Interest**; - [x] Integer declarations in all .h files in libsapt_solver have been examined and the ones that could potentially generate overflows were converted to size_t. Probably some overkill there.; - [x] Searched the whole source in libsapt_solver for a regex representing 4 variables being multiplied, to find all the occ*vir*occ*vir that are bound to overflow. Added (size_t) cast for those that were missing it. ## Questions; - [ ] This originated in a problem reported by a user on the forum. I can't run Psi4 on good enough hardware to actually test the patch on a large system. Anyone want to give it a try ? Or do we let the user test it ?. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/619:713,test,test,713,https://psicode.org,https://github.com/psi4/psi4/pull/619,2,['test'],['test']
Testability,"## Description; Suceeds #1381 as a step toward #883 by improving qcvar capabilities on Wfn and localizing some modules. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] improves the wfn localization of qcvars for DFT, scf_helper, DFMP2, OEPROP. trying to set on wfn c-side, then just copy into P::e.globals in proc.py.; - [x] moves DETCI, DFMP2 entirely to qcvar passing on Wfn. OCC, DFOCC, FNOCC do so for mp2-like only.; - [x] adds some functional-including qcvars for DFT; - [x] BREAKS; - remove `SCS-MP2 OPPOSITE-SPIN CORRELATION ENERGY` and `SCS-MP2 SAME-SPIN CORRELATION ENERGY` from dfmp2 `Wavefunction.variables`; - remove MP2 psivars from double-hybrid DFT final return; - `SCS-MP2 * ENERGY` now are defined (6/5, 1/3) quantities. For the user-influenceable vars, it's `CUSTOM SCS-MP2 * ENERGY`. ## Notes; - reference E for detci https://github.com/psi4/psi4/pull/1381#discussion_r237680985. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1445:970,Test,Tests,970,https://psicode.org,https://github.com/psi4/psi4/pull/1445,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; Switches times in CC modules from `tstart`/`tstop` to `timer_on`/`timer_off`. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Use `timer_on`/`timer_off` in CC modules; - [x] Remove `void` from argument lists . ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1268:296,Test,Tests,296,https://psicode.org,https://github.com/psi4/psi4/pull/1268,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Switches to use `_a` rather than more verbose `py::arg`. Separated from #1443, as requested. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Use `_a` literal.; - [x] Formatting pass at bindings. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1448:281,Test,Tests,281,https://psicode.org,https://github.com/psi4/psi4/pull/1448,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; TDSCF/ADC and EOM can't agree on how to name variables for excitation energies. Per discussion between Lori and I, this moves the TDSCF variable names to the new standard, as I see it. This PR is not complete and is submitted for feedback from the excited-state gurus, who are likely to have strong opinions: @loriab @robertodr @lothian @maxscheurer . To demonstrate the changes, consider the example file I added. Old code would write the second transition as ""TD-HF ROOT 0 -> ROOT 2 EXCITATION ENERGY - B2 SYMMETRY"". The new code replaces that with three new psivars:. - TD-HF ROOT 0 (B1) -> ROOT 0 (B2) EXCITATION ENERGY; - TD-HF ROOT 0 -> ROOT 2 EXCITATION ENERGY; - TD-HF ROOT 0 -> ROOT 2 EXCITATION ENERGY - A2 SYMMETRY. We have one access call that requires the symmetries of initial and target states and the indices of both _within their irreps_. We have one access call that requires no symmetry information and just requires the index of the states _among all irreps_. The last access call is like the second, but adds on the symmetry of the _transition_. **This is a breaking change** because old code instead used the symmetry of the final state. After coding this all up, I'm inclined to remove the last access call. The original reason for keeping it up was consistency with the current way TDSCF operates, but it's still inconsistent, per the last paragraph. I'll add docs once we're settled about the new naming conventions. Once this PR is in, the other modules will need to update to the new style. ## Questions; - [x] Opinions on the new variable names?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2462:1611,Test,Tests,1611,https://psicode.org,https://github.com/psi4/psi4/pull/2462,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Test case cc46 was removed after it was noticed to be failing (#1002 ), it was determined that the failure was not indicating a bug, so it was temporarily removed so pre-release pakages wouldn't be reporting a failure. This PR reactivates the test with modifications so that it is passing again. . * **Developer Interest**; - cc46 checks GS and excited state Dipole/Quadrupole components against reference values generated by psi. ; - Was failing because calling `properties=['oscillator_strength']` prior to #995 was the only way to force ccdensity to make a call to OEProp for each excited state. Post #995 this does not compute one electron properties for excited states so the computed values were all zero.; - Correcting the driver call `properties=['dipole','quadrupole']` is not enough; - The test values were generated using `oscillator_strength` which triggers EOM/Lambda convergence thresholds to be reduced.; - The computed values are 'too good' and comparison with the older reference values fails in the 4th decimal place for some quadrupole components of excited states.; - *Final Solution*; - I dropped the convergence thresholds manually in the test-input to what the were set to by the driver at the time that the reference data was generated. . Side Note:; - Personally I don't think the savings achieved by this over ride of the convergence thresholds are significant enough to justify potentially confusing situations. ; - If a user sets those values manually and requested `oscilator_strength` and/or `rotational_strength` the user-set values are overridden.; - Commenting out the [relevant lines](https://github.com/psi4/psi4/blob/72c30b536201a25171fa6426c8f319e2abdbb1cb/psi4/driver/procrouting/proc.py#L2647-L2649) all cc tests still pass. Including this one (with my changes). ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for rev",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1070:16,Test,Test,16,https://psicode.org,https://github.com/psi4/psi4/pull/1070,3,"['Test', 'test']","['Test', 'test']"
Testability,"## Description; Thanks to @JonathonMisiewicz for catching this one!. This PR fixes a typo in `SplitJK::set_lr_symmetric`, wherein the `lr_symmetric_` variable is assigned to itself rather than the intended behavior of being assigned to the function input. This also opens up the question of why this wasn't caught in testing, which I plan on exploring further and addressing in a second PR. Currently, composite methods where `LinK` is used, throw exceptions for cases where `lr_symmetric_` is set to false; but composite methods using `COSX` does not. ## User API & Changelog headlines; N/A. ## Dev notes & details; - [X] `SplitJK::set_lr_symmetric` now behaves as intended. ## Questions; N/A. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3055:317,test,testing,317,https://psicode.org,https://github.com/psi4/psi4/pull/3055,4,"['Test', 'test']","['Tests', 'testing', 'tests']"
Testability,"## Description; The Cholesky is now based on the Gershgorin theorem, which I describe in a note in the PRA article. The routines' accuracy has been benchmarked in the arXiv paper. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1842:148,benchmark,benchmarked,148,https://psicode.org,https://github.com/psi4/psi4/pull/1842,4,"['Test', 'benchmark', 'test']","['Tests', 'benchmarked', 'tests']"
Testability,"## Description; The DFMP2 gradient was not symmetrized to the molecule's (Abelian) point group before, so optimizations could potentially break symmetry, as pointed out [on the forums](http://forum.psicode.org/t/losing-symmetry-on-first-step-of-geometry-optimization/1201). This PR enforces the Abelian symmetry, preventing problems with symmetry breaking in optimizations. ## Todos; - [x] Fixes a bug in DFMP2 gradients that led to slight noise in which, in some cases, could break the symmetry of the molecule. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1483:567,test,tests,567,https://psicode.org,https://github.com/psi4/psi4/pull/1483,2,['test'],['tests']
Testability,"## Description; The Hessian code can be cleaned up by using the SCF class's hessian-vector products. To avoid the need to cast pointers inside the orbital response code, this PR specializes the response class for each reference type, and removes some junk symmetry code. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Specialize response code by reference; - [x] Simplify dipole derivative handling; - [x] Remove symmetry code from response; - [x] Use the `Hx` functions from the SCF class to solve CPHF. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1550:576,Test,Tests,576,https://psicode.org,https://github.com/psi4/psi4/pull/1550,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; The Molden format allows one to store data in high precision, which is beneficial for post-processing. This PR increases the number of digits and the format of the relevant numbers to double precision. Fixes #1486. See also #1485 . I've tested with the following example:. ```; molecule {; 0 1; O 1.01646 0.05097 0.09714; H 1.98435 0.06069 0.05173; H 0.73761 0.24513 -0.81034; }. set basis cc-pVTZ. E, wfn = properties('ccsd', properties=['dipole'], return_wfn=True); Da_so = wfn.Da(); SCa = core.doublet(wfn.S(), wfn.Ca(), False, False); Da_mo = core.triplet(SCa, Da_so, SCa, True, False, False); molden(wfn, 'psi4.molden', density_a=Da_mo); ```. The Molden files before and after the change are attached: [psi4.molden.zip](https://github.com/psi4/psi4/files/2817866/psi4.molden.zip). Relevant part of the output of the Molden program when reading the molden file prior to the change. Note the wrong total charge:. ```; Mulliken Charges; ================; ; O -0.4661; H 0.2332; H 0.2332; ; Sum of Mulliken Charges: 0.0003; ```. Same output, but after increasing the precision: (Note the correct total charge.). ```; Mulliken Charges; ================; ; O -0.4663; H 0.2331; H 0.2331; ; Sum of Mulliken Charges: 0.0000; ```. (FYI: this is my last Molden-related PR.). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Write out orbital energies, orbital occupation numbers and molecular orbital coefficients in double precision in a Molden file. ## Questions; None. ## Checklist; - No tests added; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1510:253,test,tested,253,https://psicode.org,https://github.com/psi4/psi4/pull/1510,4,['test'],"['tested', 'tests']"
Testability,"## Description; The QCSchema wrapper was lacking the capability to save the t-amplitudes and the one-electron density matrix, so this was added. ## Todos; This will add the ability to save the t-amplitudes using the new ""tamps"" driver. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2328:256,Test,Tests,256,https://psicode.org,https://github.com/psi4/psi4/pull/2328,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; The SAD fractional density matrix didn't actually use fractional densities. This is fixed in the present PR. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] SAD density matrix is fractionally occupied. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1451:319,Test,Tests,319,https://psicode.org,https://github.com/psi4/psi4/pull/1451,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; The SAD guess is rescaling the guess density at present. This should not be done; the SAD guess is independent of the actual charge and/or spin state of the molecule. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] SAD guess is independent of charge and spin state of molecule. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1479:395,Test,Tests,395,https://psicode.org,https://github.com/psi4/psi4/pull/1479,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; The UHF version of #2171. The open-shell DCT code now adds two terms before contracting them against the two-electron integrals, rather than after. Unfortunately, this change was tightly coupled to surrounding code, making it unnecessarily complicated. This PR also removes that complexity. Again, I'd expect this code to be faster due to reduced random access in `process_so_integrals`, but I haven't run timings. ## Todos; - [x] More transparent code; - [x] 100 less lines code; - [x] Four fewer global variables . ## Checklist; - [x] DCT tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2185:557,test,tests,557,https://psicode.org,https://github.com/psi4/psi4/pull/2185,1,['test'],['tests']
Testability,"## Description; The `LaplaceDenominator` class is exported to the Python layer, but not `TLaplaceDenominator`. I have a Psi4Numpy version of a new (T) method I invented that won't work without this. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Export `TLaplaceDenominator` to Python. ## Questions; - [x] None. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2664:392,Test,Tests,392,https://psicode.org,https://github.com/psi4/psi4/pull/2664,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; The `large-atoms` test was previously sitting around unused, waiting for improved ECPs (see discussion in #2234). This PR renovates that test, checking SCF and DF-MP2 energies and gradients on period 5/6 atoms. . ~~TODO (future PR): after MP2 ECP gradients are validated+enabled, should be added to this test~~ 01/25 update: DF-MP2 gradients now enabled and tested. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Add `test_large_atoms` pytest; - [x] Enable DF-MP2 gradients . ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2836:34,test,test,34,https://psicode.org,https://github.com/psi4/psi4/pull/2836,4,['test'],"['test', 'tested']"
Testability,"## Description; The aim of the PR is to implement the parameter-free radial quadrature by Krack and Koster. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] ; - [ ] . ## Questions; - [ ] The cubature code is unintelligible, and needs to be restructured for clarity. See #2044 . ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2045:356,Test,Tests,356,https://psicode.org,https://github.com/psi4/psi4/pull/2045,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; The arXiv manuscript detailing the finite-element calculations for the SAP potenials has been published; this PR updates the documentation with the final reference. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1797:356,Test,Tests,356,https://psicode.org,https://github.com/psi4/psi4/pull/1797,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; The default `MAX_AM_ERI` isn't high enough to perform this test. Add it only when it is configured high enough. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1409:75,test,test,75,https://psicode.org,https://github.com/psi4/psi4/pull/1409,1,['test'],['test']
Testability,"## Description; The fcidump.py file writes out 2e integrals by calling fcidump_helper.cc, in the `%28.20E%4d%4d%4d%4d` (cpp) format, and in fcidump.py the additional 1- and 0- electron integrals are written in the `{:29.20E} {:4d} {:4d} {:4d} {:4d}` (Python) format. The whitespace in between the Python format string causes the 1/0e integrals fields to be 1 wider than the 2e integrals, causing problems in reading the file. E.g. in Fortran the 2e integrals can be read normally by `READ(*,'(1X,G28.20E2,4I4)') Z,I,J,K,L`, but will fail to read the 1/0e integrals properly. ## Todos; - [x] Update fcidump.py; - [x] Update fcidump test outputs . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2277:631,test,test,631,https://psicode.org,https://github.com/psi4/psi4/pull/2277,4,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; The final removal of the `ERISieve` class, and the culmination of the work in PRs https://github.com/psi4/psi4/pull/2935 and https://github.com/psi4/psi4/pull/2974. This fully, and completely, gets rid of `ERISieve` from Psi4, with `TwoBodyAOInt` now being the class of choice for ERI computations. Note: Now that v1.9 has released officially with ERISieve throwing an UpgradeHelper exception, I am opening this up for review. ## User API & Changelog headlines; - [X] The ERISieve class has been completely removed from Psi4. For previous ERISieve functionalities, the TwoBodyAOInt class should be used instead. ## Dev notes & details; - [X] Gets rid of all occurrences of the `ERISieve` class in Psi4, from build files to UpgradeHelper Python functions to C++ implementation details.; - [X] Slight update of integrals documentation with a better description of what is occurring. ## Questions; N/A. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3009:936,Test,Tests,936,https://psicode.org,https://github.com/psi4/psi4/pull/3009,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; The first eight DDD extracts PRs reduced the delta from; 99 changed files, and 5,314 additions and 2,946 deletions. c. dgasmith:recursive to; 59 changed files, and 3,408 additions and 1,885 deletions. c. loriab:recursive62; so here's No. 9 of the DDD series, #1351. ## Todos; - [x] This is the non-class parts of changes to finite difference. Mostly; * using pieces from Mol, rather than mol, to reduce dependence on psi objects; * use more numpy, less Matrix; * consolidate printing so can go to logging; * start to pass finite difference options (points, steps, projection) as kwargs rather than having findif consult global options; - [x] added in the dipder from dipole but it's not used; - closes #1683; - [x] along the way, psimrcc-fd-freq1 failed. as far as I can judge now, this is an existing bug. part of the old output is below. psi is evaulating the gradient, finding it over the cutoff, and so recommending not projecting rotations. then, because of https://github.com/psi4/psi4/blob/master/psi4/driver/driver.py#L1613, that setting of FD_PROJECT gets tossed, and findif runs projecting rotations, and the test passes. I'm calling this a bug and setting fd_project in the input to force the array dimensions to match and the test to pass. glad to hear other interpretations. ```. Based on options and gradient (rms=3.60E-02), recommend projecting translations and not projecting rotations.; hessian() will perform frequency computation by finite difference of analytic energies. ----------------------------------------------------------; FINDIF; R. A. King and Jonathon Misiewicz; ---------------------------------------------------------. Using finite-differences of gradients to determine vibrational frequencies and; normal modes. Resulting frequencies are only valid at stationary points.; Generating geometries for use with 5-point formula.; Displacement size will be 1.00e-02.; Number of atoms is 2.; Number of irreps is 8.; Number of SALCs is 1.; Translations proj",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2552:513,log,logging,513,https://psicode.org,https://github.com/psi4/psi4/pull/2552,1,['log'],['logging']
Testability,"## Description; The first iteration energy in SAD is at best non-variational (RHF, UHF), and at worst completely nonsensical (ROHF, CUHF). As neither a DIIS error can be formed in the lack of a proper density matrix, this PR sets the first iteration energy to zero, so that only sensical energies are printed out. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Guess energy correctly evaluated in ROHF and CUHF; - [x] Guess energy properly labeled. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1493:551,Test,Tests,551,https://psicode.org,https://github.com/psi4/psi4/pull/1493,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; The formatted checkpoint files currently produced by Psi4 misname the orbital coefficient and the density matrix fields. This PR (re)establishes the expected behavior, as well as fixes other bugs in the code. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix labels of MO energies and coefficients; - [x] Fix labels of density matrices; - [x] Fix printout of number of linearly independent functions; - [x] Don't print the MO coefficients into the log file; - [x] Only print out beta orbs and spin density if wave function is not spin-restricted.; - [ ] Identify if density is correlated; if it is, print out both SCF and correlated density. Otherwise only print out SCF density. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1475:516,log,log,516,https://psicode.org,https://github.com/psi4/psi4/pull/1475,4,"['Test', 'log', 'test']","['Tests', 'log', 'tests']"
Testability,"## Description; The general idea is to allow more flexible definition of CBS functions, and clean up the `cbs()` function a little. The goal is to allow further corrections to the energy into CBS, eg differences of basis sets (eg. `\Delta E_{diff} = E(aug-cc-pvtz) - E(cc-pvtz)`) or frozen core corrections (`\Delta E_{ae} = E(freeze_core True) - E(freeze_core False)` or DKH ... Added `frequency` to cbs-compatible calls. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Simple, dict-based interface to CBS.; - [x] Handling of an arbitrary number of correction functions.; - [x] Support for passing of arbitrary options (such as `freeze_core`). ; - [x] Fix `pywrap-cbs1` which fails on `cbs_number` checks.; - [x] Documentation.; - [x] Frequency calculations via cbs are now possible. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1235:855,Test,Tests,855,https://psicode.org,https://github.com/psi4/psi4/pull/1235,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; The goal of this PR is to expand test coverage of the DFJCOSK and DFJLinK JK subclasses within Psi4 by including their testing within the scf5 test. The scf5 test in Psi4 tests a variety of combinations of SCF_TYPE and SCF reference for singlet and triplet O2. As it were, the COSX and LinK SCF_TYPES were missing from the list of methods analyzed within this test. This PR simply adds COSX and LinK to the list of methods tested in scf5, expanding testing of these two methods beyond what was previously present. NOTE TO REVIEWERS: This PR is a general JK maintenance/cleanup/improvement PR and is independent of the developments occurring regarding CompositeJK and its direct implementation into Psi4. . ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] N/A. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Adds COSX and LINK to the list of SCF_TYPEs tested in the scf5 test option. ## Questions; - [ ] Is the methodology by which COSX and LinK tested acceptable? Unfortunately, the reference energies used in scf5 are either canonical (i.e., non-DF) or DF, neither of which fully describe the COSX and LINK methods. The approach I took is to compare each COSX and LINK energy to the corresponding canonical energy with an atol of 1E-4. Any feedback on this particular approach to testing COSX and LINK would be appreciated. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2768:49,test,test,49,https://psicode.org,https://github.com/psi4/psi4/pull/2768,15,"['Test', 'test']","['Tests', 'test', 'tested', 'testing', 'tests']"
Testability,"## Description; The goal of this PR is to save one-electron integrals in core and cache them. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] One-electron integrals are no longer stored on disk. The `Wavefunction` base class holds a pointer to a `MintsHelper` object.; - [x] T, V, and S integrals are cached.; - [x] Address issue #1758 (no effect of perturbation on X2C energy); - [x] Fixes issue #1794; - [x] May fix issue #1791. ## For developers; - [x] Added a `MintsHelper` object to `Wavefunction`. ## Checklist; - [x] Tests added for X2C finite field contributions; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) except for eight test cases that are linked to #1793. ## Status; - [x] Working code; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1770:574,Test,Tests,574,https://psicode.org,https://github.com/psi4/psi4/pull/1770,4,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; The idea is to try to extend Psi4 to the calculation of repulsive potentials. Unfortunately, some of Psi4's machinery is preventing such calculations to be run due to chemists' short-sightedness ;). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Change cutoffs so that close-lying atoms are accepted by the program (the cutoffs / disabling them should be an input parameter); - [ ] Fix problem with the code putting atoms on top of each other. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1843:562,Test,Tests,562,https://psicode.org,https://github.com/psi4/psi4/pull/1843,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; The instructions in the docstring did not result in a correct Molden file. Fixes #1485. No new features added. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix docstring. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1500:291,Test,Tests,291,https://psicode.org,https://github.com/psi4/psi4/pull/1500,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; The main script (`run_psi4.py` in the source tree or `psi4` when installed) was importing qcelemental before it had a chance to modify the Python search path. If you didn't already have a copy of qcelemental in your Python search path would cause an error. Encountered this on our cluster while trying to run the tests. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1925:329,test,tests,329,https://psicode.org,https://github.com/psi4/psi4/pull/1925,1,['test'],['tests']
Testability,"## Description; The main things to get over our docs troubles happened elsewhere:; * hosting the built `html/` through GH pages avoids the `/` anchors that netlify was dropping into our href links that were in turn confusing the psicode.org redirects (https://github.com/psi4/psicode-hugo-website/blob/master/netlify.toml#L14) and making links seem broken for psicode.org/psi4manual .; * the combination of progressing Sphinx development and stagnant cloud theme development (from which the sphinx_psi_theme is derived) eventually robbed us of the ""search"" bar and the homing logo. That got minimally revived through https://github.com/psi4/sphinx-psi-theme/commit/feda2119994519c6dc1eb0979686c9cdbf916acc , so use the v1.1 now. But there's a few modest improvements here, especially to allow anyone so inspired to switch the docs theme and figure out new customizations. Apart from a certain fondness for the colors and an insistence that tables like https://psicode.org/psi4manual/master/introduction.html#id59 not be mangled, I'd be pleased if anyone wanted to overhaul the docs theme. Some things to know:; * psi4 colors and specializations are https://github.com/psi4/sphinx-psi-theme/blob/master/sphinx_psi_theme/themes/sphinx_psi_theme/theme.conf#L37; * to use a different theme, pass `-DSPHINX_THEME=another_theme` to cmake (or edit it in the cache); * build with `cmake --build . --target sphinxman`; * built docs will be in `<objdir>/doc/sphinxman/html/`. that html dir can be tarred and sent anywhere to load in a browser. ## Dev notes & details; - [x] the two sphinx extensions that were in the sphinx_psi_theme are now stored here in the repo. this lets them be used by any theme, which is important for the QCVariables one that otherwise emits thousands of warnings.; - [x] more logic around `@SPHINX_THEME@` in the controlling docs/sphinxman/source/conf.py.in so that one can use options and configuration particular to different themes. feel free to add more. tried themes are psi, clo",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3053:576,log,logo,576,https://psicode.org,https://github.com/psi4/psi4/pull/3053,1,['log'],['logo']
Testability,## Description; The mandatory option setting the `DFT_WEIGHT_TOLRANCE` was missing. ## Checklist. - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1662:138,test,tests,138,https://psicode.org,https://github.com/psi4/psi4/pull/1662,2,['test'],['tests']
Testability,## Description; The mapping from psi4's string-based DFT functional representation to the BrianQC GPU module's macro-based one was flawed; this was corrected. This pull request only touches BrianQC addon-specific code paths. ## Checklist; - [x] The BrianQC-specific tests were run and they passed (ctest -L brianqc). ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2357:266,test,tests,266,https://psicode.org,https://github.com/psi4/psi4/pull/2357,1,['test'],['tests']
Testability,"## Description; The most important part of this PR is the changes to `occ/mograd.cc`. The previous formula for the RMS MO gradient was incorrect, causing it to be too large by a factor of `sqrt(occ*vir)`. Even for systems in the test suite, this can be as large as a factor of 10. **As a result, under this PR, orbital-optimized `occ` computations will take more iterations; it was not actually achieving the accuracy it claimed previously.** We may loosen the default convergence criteria as a result of this, but exploring that is deferred to the standard suite pass in #1980. Also included in this PR is commenting and removing some unused (not even compiled!) `dfocc` code found while investigating issues tangential to #1980. Obligatory @loriab ping for #1980. Obligatory @ssh2 ping for OMP convergence changes. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix the RMS orbital residual calculation in `occ`; - [x] Remove 1100+ lines of dead code from `dfocc`. ## Checklist; - [x] `ctest -R ""^omp|^olccd""` and `pytest -k test_olccd` pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1988:229,test,test,229,https://psicode.org,https://github.com/psi4/psi4/pull/1988,1,['test'],['test']
Testability,"## Description; The next batch of readability fixes to `dfhelper.cc`. The potentially contentious issue here is that I remove the `AO_files_` variable, which was just an identity mapping. Plenty more cleanup to go!. ## Checklist; - [x] Quick tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2654:242,test,tests,242,https://psicode.org,https://github.com/psi4/psi4/pull/2654,1,['test'],['tests']
Testability,"## Description; The next bite-sized DCT cleanup PR. To construct an intermediate `Fa_` and `Fb_`, previously, we'd divide the term in three parts, compute the three contributions separately, and then add them together. Making things more complicated, we add the pieces in different functions. In the RHF case, this PR combines two of those terms from the outset, so there are only two contributions to add. As a result, we now construct fewer `double*`, use fewer class variables, and have less cause to worry about whether the intermediates `Fa_` and `Fb_` are completely or incompletely constructed. While I haven't run timings, this code should also be faster due to reduced random-access of arrays. The UHF code is more complicated, so that's best saved for another PR. At that point, I hope to eliminate a few more class variables. ## Todos; - [x] More code cleanup. ## Checklist; - [x] DCT tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2171:896,test,tests,896,https://psicode.org,https://github.com/psi4/psi4/pull/2171,1,['test'],['tests']
Testability,"## Description; The number of electrons as integrated on the DFT quadrature is printed as ""Post-Iterations"" quantity. Current formatting:; ```; Energy and wave function converged. ==> Post-Iterations <==. electrons on quadrature grid:; NTotal = 2.0000000000 ; deviation = -7.638e-14. Orbital Energies [Eh]; ---------------------. --; electrons on quadrature grid:; Nalpha = 5.9997499893 ; deviation = -2.500e-04; Nbeta = 4.9997504300 ; deviation = -2.496e-04; NTotal = 10.9995004192 ; deviation = -4.996e-04. @Spin Contamination Metric: 2.559910084E-05; ```. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] NTotal/Nalpha/Nbeta electrons are printed as obtained from the grid as a health check; - [x] adds `psivars`: `GRID ELECTRONS TOTAL/ALPHA/BETA`. ## Questions; - [ ] Open to suggestions and opinions for naming and formatting. Especially regarding printing of decimals. ## Checklist; - [x] psivars doc string; - [ ] Tests?. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2001:970,Test,Tests,970,https://psicode.org,https://github.com/psi4/psi4/pull/2001,1,['Test'],['Tests']
Testability,"## Description; The old instability following procedure Trotterized a matrix exponential. Now we compute it (more or less) exactly. Obligatory @susilehtola ping. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Modified the orbital instability following procedure. This should be a minor change for most applications: contact developers if you notice a problem. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Change the algorithm we use to approximate a matrix exponential when instability following from a Trotter approximation to that of the build-in `expm` function.; - [x] Added documentation for the rationale for the orbital rotation step. ## Questions; - [ ] **Warning!** None of our tests cover instability following. I've run a check that the old and new codes mostly agree for the particular instability I'm trying to track. Is this an issue?. ## Status; - [x] Ready for review; - [ ] Ready for merge after discussion",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2758:1008,test,tests,1008,https://psicode.org,https://github.com/psi4/psi4/pull/2758,1,['test'],['tests']
Testability,"## Description; The paper describing the finite element calculations for the SAP potentials used in Psi4 is now in preprint, so it's a good time to switch to fully converged potentials. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1700:361,Test,Tests,361,https://psicode.org,https://github.com/psi4/psi4/pull/1700,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; The primary purpose of this PR is to correct some errors in density-fitted DCT. In brief, none of the nuclear gradient, orbital residual, or amplitude residual could be derived by differentiating the density-fitted DCT energy functional. All deviations were in different ways. This PR changes the energy functional to have a simpler density-fitted energy functional and correct all of its derivatives (orbital, amplitude, and nuclear geometry). _Unfortunately_, this is a gargantuan PR, and I owe all reviewers some beer. Simplifying some code requires adding new code that best belonged in other modules, there was a lot of new technology needed to get DCT in working order, DCT needed to be hooked up to properties in order to get tests properly working, and I did a lot of code reorganizing to make finding bugs a touch easier for me. ## Todos; - [x] DF-DCT energies, properties, density matrices, and gradients are all now correct; - [x] DCT supports one-electron properties for methods that support gradients; - [x] Adds a new libmints SaveType: ThreeIndexLowerTriangle.; - [x] Adds utility functions to `libdpd` and `libmints` with slightly different arguments/return types.; - [x] Eliminates many unneeded pointers from `dct`.; - [x] clang format DCT; - [x] DCT variables are now written to the wavefunction rather than globals; - [x] Eliminated the special procedure to get a DCT Molden file.; - [ ] There's still some cleanup to do, but it can be a new PR. This one is already very big. (I'm looking at you, incomplete use of the new SaveType, and explicit construction of the VVVV block of the TPDM.). ## Questions; - [ ] Any deprecation warnings necessary? This is an unusual case, to put it lightly. ## Checklist; - [x] Dipole and gradient finite difference tests created and _passing_.; - [x] `dct` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2100:749,test,tests,749,https://psicode.org,https://github.com/psi4/psi4/pull/2100,3,['test'],['tests']
Testability,"## Description; The purpose of this PR is to expose the wavefunction as well as access to all amplitudes from CC to the python side. This has the advantage to sort out the relationship of Wavefunction, CCEnergyWavefunction and CCLambdaWavefunction in a more natural C++ way through inheritance. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] CCLambdaWavefunction inherits from CCEnergyWavefunction to facilitate better runtime access from the python side.; - [x] Setter and getter for all T & L amplitudes are included in the python interface to enable more sophisticated methods in the future, e.g. in the broker from #1057.; * **User-Facing for Release Notes**; - [x] Setter and getter for all T & L amplitudes are included in the python interface to enable more sophisticated methods in the future, e.g. in the broker from #1057. ## Questions; - [ ] Does the more technical details from above (inheritance change and exposing of the amplitudes to python) require more text for the release notes?; - [ ] The python documentation should be automatically built, is there more documentation for this part required?. ## Checklist; - [x] Tests added for any new features (not required as no new functionality added); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1061:1203,Test,Tests,1203,https://psicode.org,https://github.com/psi4/psi4/pull/1061,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; The purpose of this PR is to implement the first bits and pieces to connect psi to [i-pi](https://github.com/i-pi/i-pi) to enable molecular dynamics simulations with psi. For instance, it would be possible to carry out path integral molecular dynamics simulations such as [in this reference](https://doi.org/10.1039/C4CP05192K) with psi. It would be great to get a first review of the basic idea in the code and I can add some documentation of the above infrastructure after that as well. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Infrastructure to connect to [i-pi](https://github.com/i-pi/i-pi) is included in `broker.py`; * **User-Facing for Release Notes**; - [ ] Infrastructure to connect to [i-pi](https://github.com/i-pi/i-pi) is included (but not yet documented yet). ## Questions; - [ ] Is the dynamic dependency to [i-pi](https://github.com/i-pi/i-pi) to setup the interface on runtime fine? Or would you prefer to have the Client side implementation to have fully here in psi as well? If the latter is the case, this has the disadvantage, that the client side might need adjustments with a new version of i-pi, which is why I left the client implementation in i-pi for now. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1057:1294,Test,Tests,1294,https://psicode.org,https://github.com/psi4/psi4/pull/1057,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; The purpose of this PR is to turn off FDDS dispersion when SAPT_DFT_FUNCTIONAL = HF in SAPT(DFT). . SAPT0 uses a HF description of monomers, whereas SAPT(DFT) replaces this description with KS-DFT. When SAPT(DFT)’s functional is set to HF, the results should be equivalent to those of SAPT0. Currently, SAPT(DFT) / SAPT_DFT_FUNCTIONAL HF computes coupled dispersion with FDDS. This step is costly and unnecessary. . ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] The dispersion energy for SAPT(DFT) with HF will now match SAPT0 and no longer calculate or print Disp2,r or Est. Exch-Disp2,r; - [x] No change necessary in input files. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Places SAPT(DFT)'s FDDS dispersion into an if statement so that FDDS disp is only computed when the functional is not HF; - [x] Carries information regarding the functional into the printing code so that the correct dispersion terms are printed out. ## Questions; - [ ] Question1. ## Checklist; - [x] sapt-dft1, sapt-dft2, and sapt-compare all pass; no need for the creation of additional tests. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3080:1404,test,tests,1404,https://psicode.org,https://github.com/psi4/psi4/pull/3080,1,['test'],['tests']
Testability,## Description; The reorganized SAD code was missing a check if the basis set is actually large enough to allow a full valence active space; this is now fixed. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1481:335,Test,Tests,335,https://psicode.org,https://github.com/psi4/psi4/pull/1481,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; The resurrection of #2543. This PR refactors my LinK code (#2359) and Zach's semi-numerical K (#2567) code into the CompositeJK framework (to allow mixing and matching of J and K types). The DirectDFJ implementation here is derived from Zach's semi-numerical K PR. This framework is robust and allows for the rapid development of new J/K methods and combinations in the future, and avoids code duplication. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Creates composite JK framework to allow for mixing and matching of different J/K types; - [x] Makes LinK usable with the DirectDFJ algorithm. ## Questions; - [x] To call my LinK code, `SCF_TYPE` is set to `LINK`, should it be `DFJ_LINK` instead?. ## Checklist; - [x] Tests added for any new features; - [x] Passing pytests for COSK (from Zach) and LinK; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2588:797,Test,Tests,797,https://psicode.org,https://github.com/psi4/psi4/pull/2588,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; The self tests (`python mpl.py`) now work with modern py3 & mpl. ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1690:25,test,tests,25,https://psicode.org,https://github.com/psi4/psi4/pull/1690,4,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; The size check in the scf response code was wrong. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1999:242,Test,Tests,242,https://psicode.org,https://github.com/psi4/psi4/pull/1999,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; The support for matrices with `symmetry() != 0` is flawed in several places in the matrix class. While *some* operations are only valid if the matrix is totally symmetric, most do not have this requirement. . These issues have long gone unnoticed because the majority of places where the object is used the quantity will be totally symmetric. I started noticing these flaws while working on TDDFT which will require most of the changes made here in order to work properly. ## FYI; - Comments/error messages/variables names have been updated to make meaning more precise.; - In general the non-zero block of the matrix found at `matrix_[h]` has shape `{rowspi_[h], colspi_[h^symmetry_]}` **not** `{rowspi_[h], colspi_[h]}`. The two are coincidentally the same when `symmetry_ == 0` (This was the cause of many segfaults/incorrectly raised errors).; - I have aggressively applied DRY to avoid issues. Example (`add`, `subtract`, and `axpy`) all lead to different calls to `C_DAXPY`, however `axpy` computed the size incorrectly and led to a segfault. ; - I have added unit tests for the matrix class to avoid reintroducing any of the bugs I root out. ## Todos; - [x] python bindings for non-totally symmetric constructor; - [x] consolidate `axpy` type operations, fix size issue; - [x] consolidate `gemm` type operations, fix A/B/C block logic. ## Questions; - [ ] If anyone has noticed problems, missing/bugged functionality that I have missed now is a good time to point them out. . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1383:1087,test,tests,1087,https://psicode.org,https://github.com/psi4/psi4/pull/1383,5,"['Test', 'log', 'test']","['Tests', 'logic', 'tests']"
Testability,## Description; The user needs not set `dertype='energy'` explicitly anymore when calling `optimize`. The test case has been extended accordingly. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] FInite difference gradient is always forced when using PCM . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1001:106,test,test,106,https://psicode.org,https://github.com/psi4/psi4/pull/1001,4,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; The value for ```DF_FITTING_CONDITION``` used by the code was changed in #1446, which resulted in a change of numerical values. This PR restores the previously used threshold. See discussion in #1350 and on Slack. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Restores numerical agreement with previous revisions of Psi4. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1472:441,Test,Tests,441,https://psicode.org,https://github.com/psi4/psi4/pull/1472,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; The value of dft_spherical_points should only be able to take certain Lebedev numbers. The test for appropriate values is broken and gives undefined behaviour for non-Lebedev numbers. This fix should give the expected behaviour for unsupported values, bailing out with a table of allowed values. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/674:107,test,test,107,https://psicode.org,https://github.com/psi4/psi4/pull/674,1,['test'],['test']
Testability,"## Description; There are a few bugs and usability issues with calculations in the presence of a dipole field; this PR will address them. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fix and test dipole derivative integrals.; - [x] Add dipole derivative terms to SCF gradients.; - [x] Add dipole derivative terms to MP2 gradients.; - [x] Ensure findif calculations in the presence of a field don't project rotations/translations.; - [x] Add tests for SCF and MP2 gradients.; - [x] Fix nuclear repulsion energies and gradients when a dipole field is present.; - [x] Document method for specifying dipole perturbation. * **User-Facing for Release Notes**; - [x] Improve handling of calculations in the presence of a field. ## Questions; - [x] I don't like the fact that we have to set `perturb_h`, `perturb_with` and `perturb_magnitude`. The biggest problem is that we can only specify x, y, or z perturbations as-is. I propose something like keeping `perturb_h` for easy toggling of the field, but then we should deprecate `dipole_{x,y,z}` in favor of `dipole`. Then an option like `perturb_dipole` or similar that would take a 3-vector to specify the magnitudes would be better. Please weigh in on this. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/668:261,test,test,261,https://psicode.org,https://github.com/psi4/psi4/pull/668,2,['test'],"['test', 'tests']"
Testability,"## Description; There was a bug (see conversation between myself and Andy Simmonett in Slack channel earlier today) where if you attempted to use orbital casting on a frequency computation with symmetry, the first symmetry-breaking displacement would succeed at the small basis computation but crash at the large basis computation, saying that it couldn't cast orbitals between symmetries. The code was previously set so that GUESS would be set to READ. This would cause Psi to attempt to read the last saved orbitals. As [the casting mechanism has nothing to do with reading](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc.py#L1336-L1341), the last saved orbitals weren't the orbitals from the small basis computation, but the orbitals from the last geometry, which may well be of the wrong point group. As I can find no reason to have GUESS set to READ, the offending code has been removed. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix a bug causing `basis_guess` to crash if the user has geometries of different symmetries, e.g., a finite difference hessian for a system with symmetry. ## Checklist; - [x] [Quicktests and cast tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - [x] Confirmed this fixes the problem I saw. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1139:1210,test,tests,1210,https://psicode.org,https://github.com/psi4/psi4/pull/1139,2,['test'],['tests']
Testability,"## Description; There were a few more `set dft_functional fctl` in the full test suite. This should polish it off. ## Accomplished; - [x] Pin pybind11 to 2.0.0 so psi doesn't pick up any incompatible newer versions lying around; - [x] long tests all pass. ## Questions; - [ ] @dgasmith, should `gradient('scf', dft_functional='bp86')` work?. tests/dftd3/grad/input.dat; ```; ...; grad = gradient('bp86-d2gr'); compare_matrices(ref, grad, 7, ""Outsourced dft gradients called by name"") #TEST; clean(). grad = gradient('scf', dft_functional='bp86-d2gr'); compare_matrices(ref, grad, 7, ""Outsourced dft gradients called by options"") #TEST; ```; ```; 	Outsourced dft gradients called by name...........................PASSED; Traceback (most recent call last):; File ""stage/usr/local/psi4/bin/psi4"", line 260, in <module>; exec(content); File ""<string>"", line 43, in <module>; File ""/home/psilocaluser/gits/hrw-matt/objdir/stage/usr/local/psi4/lib/psi4/driver/driver.py"", line 606, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/psilocaluser/gits/hrw-matt/objdir/stage/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 2055, in run_scf_gradient; grad = core.scfgrad(ref_wfn). RuntimeError: ; Fatal Error: V: RKS should have only one D Matrix; Error occurred in file: /home/psilocaluser/gits/hrw-matt/psi4/src/psi4/libfock/v.cc on line: 915; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::RV::compute_gradient(); psi::scfgrad::SCFGrad::compute_gradient(); psi::scfgrad::scfgrad(std::shared_ptr<psi::Wavefunction>, psi::Options&); py_psi_scfgrad(std::shared_ptr<psi::Wavefunction>); ```. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/811:76,test,test,76,https://psicode.org,https://github.com/psi4/psi4/pull/811,5,"['TEST', 'test']","['TEST', 'test', 'tests']"
Testability,"## Description; These are the breaking, user-facing changes for cbs in DDD. That is, these changes aren't needed at present for the cbs back-end, but this is coercing the input front-end into the right syntax. This is No. 6 of the DDD series, #1351. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] All `fn(cbs)` and passing to extrapolation functions are changed over to `fn(""cbs"")` and passing the _names_ of extrapolation functions. This is making cbs behave more like other wrappers: findif you don't call directly, you use kwarg dertype and nbody you don't call directly, you use bsse_type. Functions are trickier to keep imported and don't serialize well, so in ddd, they're registered and replaced by strings, akin to the procedures dictionary.; - [x] alias functions are replaced with dict specification instead of kwarg specification; - [x] UpdateHelpers are added so that if you feed an existing input, it prompts you to make the fn -> str changes.; - [x] Fix bug where allen_focal_point wasn't working b/c used kwargs, not dict, specification for cbs, so the higher deltas were getting lopped off. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2532:1187,Test,Tests,1187,https://psicode.org,https://github.com/psi4/psi4/pull/2532,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; Think of the default orbital optimization algorithm in OCC with the following pseudocode:; ```; orbital_gradient = compute_orbital_gradient(); try:; orbital_step = compute_NR_step_via_PCG_with_HF_MO_hessian(orbital_gradient); except ConvergenceError:; orbital_step = compute_step_with_crude_diagonal_MO_hessian(orbital_gradient); diis_step(); ```. I traced a test failure in an upcoming PR (ocepa-grad2) to a failure in the approximate NR step. Five failures, in fact.; 1. The HF MO Hessian couples alpha and beta IDPs. You need a single alpha, not a different alpha for each spin.; 2. For the same reason, you need a single beta.; 3. The Fock term assumed semicanonical orbitals. OCC does not use semicanonical orbitals.; 4. The Fock matrix was acting on the wrong vector.; 5. One of the tensor contractions involving TEI was incorrect. After fixing those five bugs, I observed three things:; 1. After accounting for whether you index by (v,o) or (o, v), the matrix-vector products of the new occ implementation match those of the SOUHF P4N tutorials,; 2. The X (kappa) converged to does satisfy Ax=b; 3. The orbital equations refuse to converge. My conclusion is that the implementation of the algorithm is now correct, but it's not a good way to generate orbital steps. The off-diagonal terms can end up being significant for the open-shell systems that would lead you to use an orbital-optimized method. This didn't cause obvious problems before because the previous errors rendered the PCG procedure non-convergent, so you would always fall back to the crude diagonal step _unless_ your orbital gradient was so low that you didn't need to iterate at all. So what we expect to see from this bug is difficulties converging occ tightly, which has been my experience. To remedy the situation, the default orbital step is now the crude semicanonical step. The next PR should be the final one in the series. I'll just need to rebase it onto this one, repair the two tests I mentioned on",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1829:375,test,test,375,https://psicode.org,https://github.com/psi4/psi4/pull/1829,1,['test'],['test']
Testability,"## Description; Third in the qcelemental series, following #1234 (no use reviewing this one until that one goes through and this one's rebased. This moves molecule parsing out of `driver/qcdb/molparse` and into `qcelemental.molparse`. Since the latter are files copied from the former last week, no real concern about different behavior. EDIT: now with an actual unique commit!. EDIT: Skipping #1234 as intermediate, so copying that checklist to here.; - [x] driver-side physconst --> no change; - [x] driver-side psifiles --> `psi4.driver.constants.PSIF_` --> `psi4.driver.psif.PSIF_`; - [x] psiapi --> can't `from psi4.driver.constants import c`, instead `psi4.driver.constants.c` or `c = psi4.driver.constants.c`; - [x] psithon --> no change; - [x] qcdb --> `psi_c` --> `qcel.constants.c`; - [x] put in a basic connection to cmake. it'll clone it for you and install next to psi (which means pythonpath picks it up). ## Checklist; - [ ] ~Tests added for any new features~; - [x] full test suite run. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1275:941,Test,Tests,941,https://psicode.org,https://github.com/psi4/psi4/pull/1275,2,"['Test', 'test']","['Tests', 'test']"
Testability,## Description; This PR (finally) fixes issue #1830 with USAPT0 by introducing a bunch of conditionals. I also uncovered and corrected a bug in the Exch-Disp term in USAPT0 while working on this. ## Questions; - [x] Does anybody have acces to another UHF-based SAPT0 code that we could test against ?. ## Checklist; - [x] Tests need to be run; - [x] There should probably be some kind of announcement about the USAPT0 Exch-Disp term. ## Status; - [x ] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1948:286,test,test,286,https://psicode.org,https://github.com/psi4/psi4/pull/1948,2,"['Test', 'test']","['Tests', 'test']"
Testability,"## Description; This PR adds a new psivar for the length gauge origin-dependence of the specific rotation, to aid in migration of the CC tests. `cc29` now tests this psivar. Once the psivar is accepted, I can resume porting tests over. This is PR 6 in an ongoing series to make `ccdensity` compatible with the standard `Matrix` and `Wavefunction` machinery used elsewhere in Psi. Obligatory @lothian and @loriab ping for new `cc` psivars. For TDC's benefit, you can go to the ""Files changed"" tab, ""Review changes"", and then mark to approve if things look good to you. ## Checklist; - [x] Newly added psivar is tested. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2451:137,test,tests,137,https://psicode.org,https://github.com/psi4/psi4/pull/2451,4,['test'],"['tested', 'tests']"
Testability,"## Description; This PR adds a new psivariable, the overlap between the left and right CC eigenvectors. This was previously tested by `psitest.pl`, but promoting it to a psivar allows the standard `compare_values` machinery to test it. This PR integrates the new psivar into tests of `cc18`. This PR also removes the file `overlap_LAMPS.cc`, which was unused and differs from `overlap.cc` just by a search-replace on the name of the file to which quantities were being written. This is PR 4 in an ongoing series to make `ccdensity` compatible with the standard `Matrix` and `Wavefunction` machinery used elsewhere in Psi. **Do not merge until** we have approval from @loriab and @lothian, as we are adding a new psivar to the `cc` mega-module. The next stage will be to ensure all variables are set _on the wavefunction_, for testing purposes. This will proceed module-by-module, to minimize the chances of anything getting overlooked. ## Questions; - [x] Are there any Crawford group projects that need `overlap_LAMPS.cc`?; - [x] Please double-check that my assignments of method to ground state name are correct. ## Checklist; - [x] Tests added for any newly testable features; - [x] `cc` tests pass. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2443:124,test,tested,124,https://psicode.org,https://github.com/psi4/psi4/pull/2443,7,"['Test', 'test']","['Tests', 'test', 'testable', 'tested', 'testing', 'tests']"
Testability,## Description; This PR adds functionality for frequency-dependent first hyperpolarizabilities using the CCSD quadratic response theory. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Implementation of left hand perturbed amplitudes.; - [ ] Implementation of quadratic response functions.; - [ ] Implementation of frequency-dependent first hyperpolarizabilities.; - [ ] Optimization and clean-up.; - [ ] Testing. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2043:464,Test,Testing,464,https://psicode.org,https://github.com/psi4/psi4/pull/2043,4,"['Test', 'test']","['Testing', 'Tests', 'tests']"
Testability,"## Description; This PR adds support for the remaining access patterns for EOM oscillator strengths and einstein coefficients. The pieces are now in place to adapt densities and multipoles as well. I'm hopeful that will be the next PR, which should be enough to get 3 of the 4 remaining cc tests ported over. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Infrastructure Change: `ccdensity` and `cceom` now require an incoming `CCEnergyWavefunction`; - [x] Infrastructure Change: `CCEnergyWavefunction` now has a field to store excited state symmetry labels; - [x] Infrastructure Change: Some SharedWavefunction arguments became refernces to CCEnergyWavefunction; - [x] Fully moved `cceom` internal vars to new standard. ## Checklist; - [x] `eom` ctests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2538:290,test,tests,290,https://psicode.org,https://github.com/psi4/psi4/pull/2538,1,['test'],['tests']
Testability,"## Description; This PR adds the [SNS-MP2 plugin](https://github.com/DEShawResearch/sns-mp2) to the list of endorsed Psi4 plugins such that the SNS-MP2 method can be called by energy() without the use of any import statements. ## Todos; - [x] Added SNS-MP2 (via endorsed_plugins.py); - [x] Added documentation for SNS-MP2; - [ ] Make sure a full Psi4 install includes SNS-MP2; - [ ] Add tests. ## Questions; - [x] Is there anything I should add to or change about the documentation? (Tagging @rmcgibbo because he wrote the code, as well as @dgasmith and @loriab because of their general Psi4 and documentation knowledge.); - [x] The plugin itself comes with several tests already. Should I incorporate those tests into the standard Psi4 test suite?; - [x] I've borrowed several lines of code for the installation and example [from the plugin's README](https://github.com/DEShawResearch/sns-mp2/blob/master/README.md). Is this ok, or should I change it?. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/850:387,test,tests,387,https://psicode.org,https://github.com/psi4/psi4/pull/850,4,['test'],"['test', 'tests']"
Testability,"## Description; This PR adds the [psi4fockci plugin](https://github.com/shannonhouck/psi4fockci) as an endorsed plugin, allowing people to perform generalized spin-flip and IP/EA calculations. ([Related to Issue #1838 here](https://github.com/psi4/psi4/issues/1838).). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Added psi4fockci to endorsed_plugins.py; - [x] Added documentation; - [x] Added tests. ## Questions; - [x] The addition of the psi4fockci tests seem to be breaking test_psi4_cas; it fails with a ""Fatal Error: CIWavefunction: Iterations did not converge!"" error. I presume this is because I'm somehow not cleaning variables correctly; I'm calling core.clean(), core.clean_options(), and core.clean_variables(). Is there one I'm missing?. ## Checklist; - [x] Tests added for psi4fockci; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1855:447,test,tests,447,https://psicode.org,https://github.com/psi4/psi4/pull/1855,5,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This PR aims to export the first and second derivatives of one and two electron integrals in both AO and MO basis to python so that they can be used in psi4numpy for educational purposes. While calculating first derivatives, one gets a vector of matrices as the output, one for each cartesian component of the atom number provided in the input. Similarly, for hessians, one gets a total of 9 matrices for a given pair of atoms. ; ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [X] add first derivatives ; - [X] add second derivatives; - [X] optimization and cleanup; - [X] add corresponding test cases in psi4numpy tests folder. ## Status; - [X] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/757:671,test,test,671,https://psicode.org,https://github.com/psi4/psi4/pull/757,2,['test'],"['test', 'tests']"
Testability,"## Description; This PR aims to expose useful functions from _detci_ and _libpsio_ to the python side:; - libpsio needs **read()**, **write()**, **read_entry()**, and **write_entry()** functions available in python to be actually useful to the user who intends to use Psi4 intermediate files, containers and buffers.; - There are publicly accessible _get_opdm()_ and _get_tpdm()_ functions in _detci_ but for the active-space only. This PR tries to bring the **opdm_add_inactive()** function to the public scope as well and expose it to the python side.; - Members of the **psio_address** structure are also exposed that can be adopted as arguments in _libsio_'s _read()/write()_ function calls. ## Todos. * Having a spatial symmetry-imposed bock-structured sparse TPDM as a result of get_tpdm() instead of the dense format only is desirable.; * Adding _opdm_add_inactive()_'s counterpart in order to complete the full structure of TPDM [such as **tpdm_add_inactive()**] will be extremely useful. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1821:1048,Test,Tests,1048,https://psicode.org,https://github.com/psi4/psi4/pull/1821,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This PR aims to implement computation of multipole potential integrals up to a desired; order. Such integrals are used for EFP and PE (#1401), where for EFP, the integrals; are already implemented, but are always computed through third order (octupoles). For PE, often parameters are only available up to quadrupoles, so I'd like to avoid computation; of higher order integrals all the time. ~~The code is copied from `efpmultipolepotential`, so probably one should decide on whether; to keep `efpmultipolepotential` or to use the new code to avoid code duplication.~~. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] enable octupole moments as well; - [x] change ordering of cartesian components to Cartesian; - [x] use `multipolepotential` for EFP (`ao_efp_multipole_potential` calls `ao_multipole_potential` and does the remapping of components in `mintshelper.cc`); - [x] remove `efpmultipolepotential.{hh,cc}`; - [x] tests of the actual integrals using finite differences. ## Questions; - [x] ~~Switch to `multipolepotentials` for EFP in another PR?~~. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1657:988,test,tests,988,https://psicode.org,https://github.com/psi4/psi4/pull/1657,4,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This PR aims to improve the performance of electric field integrals for multiple; coordinates. These are needed, e.g., in EFP and Polarizable Embedding (PE, #1401) calculations, where the; integrals need to be evaluated at all sites in the environment. For large environments, the electric field integrals can become the bottleneck of the calculation. The code I've already implemented is quite ugly and mainly serves as a proof of principle.; Exposure to the Python layer is also not well done at the moment, but it made testing; super easy. In my current [test script](https://gist.github.com/maxscheurer/4736a100ff5de12190ef27f7bc2eaade), I computed integrals at 2000 random points for Water/cc-pVQZ, for which I get a 25x speed-up compared to the existing implementation. Tasks the implementation enables:; - compute field integrals on multiple points; - contract the integrals with a density matrix (for expectation values of the electric field at all points); - contract the integrals with a dipole moment (for building the induction operator for PE/EFP). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] hackish, preliminary version (proof of principle); - [x] cleanup `mintshelper` etc.; - [x] proper naming of new functions. ## Checklist; - [x] Tests added for any new features (`pytests/test_elec_fields.py`); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1671:538,test,testing,538,https://psicode.org,https://github.com/psi4/psi4/pull/1671,5,"['Test', 'test']","['Tests', 'test', 'testing', 'tests']"
Testability,"## Description; This PR attempts to enable calculations of TD-HF/DFT optical rotations (ORs) with GIAOs, also called as London orbitals. This ensures that the length gauge OR results are independent of the choice of origin used in the geometry. ; ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [X] adds the gradients of one and two electron integrals of GIAOs; - [] constructs the modified RHS corresponding to magnetic response vectors. ; - [] implements TD-HF optical rotation in psi4numpy as an example. ; ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1081:593,Test,Tests,593,https://psicode.org,https://github.com/psi4/psi4/pull/1081,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This PR builds on the start that @PeterKraus made to get the libecpint library from @robashaw up and running as Psi4's ECP engine. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - Improve the speed and stability of the ECP integrals. ## Questions; - [ ] @robashaw are the derivative integrals ready to go in Libecpint yet? If not, do you have any idea how much work it will be to implement them?. ## Checklist; - [x] Make libecpint play nicely with our CMake infrastructure; - [ ] Write wrappers for ECP integral code, making the new code path optional for now; - [ ] Tests added for any new features. ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1340:629,Test,Tests,629,https://psicode.org,https://github.com/psi4/psi4/pull/1340,1,['Test'],['Tests']
Testability,"## Description; This PR changes how `OEProp` saves variables and fixes a bug where ""CC ROOT 0"" variables were not being set. Previously, OEProp overloaded `title_` to refer to both the name used for the density matrix (for print purposes) and for the name used for properties (as a prefix for variable saving purposes). Only one such name can be used.; Now, OEProp uses the density matrix's name as the density matrix's name (for print purposes) and for the names used for properties (for variable saving purposes, and with the generality of format strings). Multiples names can be used. With this, I can now save the CC dipoles as both ""CC DIPOLE"" and ""CC2 DIPOLE"", so ""CC DIPOLE"" can be found. The Psi code that tried to access this was never entered previously because it checked for a 'dipole' variable rather than a 'DIPOLE' variable. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] More flexibility in OEProp names; - [x] Previously missing CC property variables are set. ## Checklist; - [x] Properties tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2534:1068,test,tests,1068,https://psicode.org,https://github.com/psi4/psi4/pull/2534,1,['test'],['tests']
Testability,"## Description; This PR changes the code to fix the majority of combinations of `SCF_TYPE`/`SCF_SUBTYPE`/`SCREENING` keywords which were previously broken. It was discovered that there were a lot of combinations of `SCF_TYPE`, `SCF_SUBTYPE`, and `SCREENING` keywords (e.g., `SCF_TYPE = {CompositeJK}` with `SCREENING = NONE`) that would break upon use, either with an exception or with a hard error such as a segfault. PR https://github.com/psi4/psi4/pull/2978 added testing to detect these broken combinations. This PR actually fixes the broken combinations detected through the added test. The most notable change as a result of fixing these issues is the handling of how certain variables within the `TwoBodyAOInt` class are initialized. To enable universal support of JK builds with `SCREENING = NONE`, an option has been added to manually call the `TwoBodyAOInt::create_sieve_pair_info()` function via the new wrapper function `TwoBodyAOInt::initialize_sieve()`. Multiple JK builds rely on values of variables initialized via `create_sieve_pair_info()` , and `initialize_sieve()` is now used to initialize the required variables if `SCREENING = NONE` is set. In this way, `SCREENING = NONE` can exist with the benefits it provides, while still working with all JK builds. Also, changes are made to ensure that no screening actually occurs in JK builds when `SCREENING` is set to `NONE`. In line with the above, some tests have been expanded. `test_comprehensive_jk_screening.py` has been changed to account for the `SCF_TYPE`/`SCF_SUBTYPE`/`SCREENING` combinations that were fixed. `test_erisieve.py` has been updated to more thoroughly test `SCREENING=NONE`. It is worth noting that, unfortunately, `TwoBodyAOInt::initialize_sieve()` must be defined per integral engine, and so the fixes of this PR only work with Libint2. The issues this PR tries to fix, still persist if Simint is used instead. ## User API & Changelog headlines; - [X] N/A. ## Dev notes & details; - [X] Adds a new function to",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3060:467,test,testing,467,https://psicode.org,https://github.com/psi4/psi4/pull/3060,2,['test'],"['test', 'testing']"
Testability,"## Description; This PR clarifies the libxc interface code and function descriptions as to the meaning of the alpha and beta parameters in psi4 vs libxc. See #1258 . Also, the definition of wPBE0 is fixed. See #1259 . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Feature1. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1260:377,Test,Tests,377,https://psicode.org,https://github.com/psi4/psi4/pull/1260,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This PR closes #1916 and corrects a bug causing third-decimal errors in gradients computed by `dfmp2` with the frozen virtual approximation. See the commit marked ""Bugfix!"" to see exactly what the issue was. There was a sign error, and Rob was looping over frozen core orbitals when he meant to loop over frozen virtual orbitals. More importantly for me, this code inserts many, many comments into Rob's code, so I know what I'm doing when I modify it throughout the rest of this PR series. This includes uncovering a very devious computational trick, that as far as I know is unpublished, and also some errors in the original papers. Many thanks to Francesco and Shuhe for the DSRG-PT2 paper, which formed part of the Rosetta Stone for figuring out how this code works. Several explicit types are now `auto`. Reviewers, double-check that I didn't accidentally remove a pass-by-reference or `const` declaration when doing so. Lastly, `test_gradients.py` has been added to pytests to confirm the accuracy of `dfmp2` gradients. This PR series will culminate with the addition of DF-ODC-12 to `test_gradients.py`. Currently, DF-ODC-12 would fail due to #1579. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Corrects a critical bug causing errors in frozen virtual gradients computed with the `dfmp2` module; - [x] Adds many comments to `dfmp2`; - [x] Replaces a lot of explicit type with `auto`. ## Checklist; - [x] Tests added for newly working features; - [x] `dfmp2` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1923:1480,Test,Tests,1480,https://psicode.org,https://github.com/psi4/psi4/pull/1923,2,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This PR closes #2120. The user-side problem is that when there are linear dependencies in the molecule, `fnocc` reports uncontrolled energies, iteration-by-iteration. The mechanism for this is as follows:. * `run_fnocc` requests an SCF computation. `nmopi_ < nsopi_` due to linear dependencies.; * `fnocc` is incompatible with point group symmetry, so calls `c1_deep_copy` to transform the solution to a c1 solution. For concreteness, we'll assume RHF, although all HF subclasses have the same problem.; * `RHF::c1_deep_copy` calls `Wavefunction::c1_deep_copy`. The resulting wavefunction has `nmo_` equal to `nmopi_.sum()` of the previous wavefunction, as desired.; * `RHF::c1_deep_copy` calls the RHF constructor on the new wavefunction, which calls to `HF::common_init`, which initializes `nmopi_ = nsopi_`, under assumption that the subsequent SCF will call `form_Shalf`, which is _actually_ responsible for first eliminating linear dependencies and then determining `nmopi_`.; * There is no subsequent SCF, so `nmopi_ = nsopi_` at the time `fnocc` begins.; * Garbage In, Garbage Out. `fnocc` is given a garbage wavefunction and gives garbage energies. The remedy here is to no longer have `common_init` put suspect information on the wavefunction. Obligatory ping to @edeprince3. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] `c1_deep_copy` no longer leads to a wrong `nmopi_` in case of linear dependency. This fixes problems with linear dependencies observed in the `fnocc` module. ## Questions; - [ ] What does this PR mean for #1545? Holger confirmed the bug there was symmetry related, and the system does have a linear dependency... It's probably worth re-investigating after this gets merged in. ## Checklist; - [x] Tests added for any newly working features; - [x] `ctest -j4` is 490/490. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2302:1805,Test,Tests,1805,https://psicode.org,https://github.com/psi4/psi4/pull/2302,1,['Test'],['Tests']
Testability,"## Description; This PR contains changes necessary to make Psi4 bare-bones compatible with the development branch of Libxc. Note, however, that the Libxc API will be breaking again in the development branch when double hybrids are introduced. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Add support for double hybrids. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1904:424,Test,Tests,424,https://psicode.org,https://github.com/psi4/psi4/pull/1904,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This PR covers some miscellanea needed to fully finish the `psimrcc` series, which will close #1877. Ready for review, but not yet merge. I need @fevangelista to answer the questions, and then to run clang format. And then I can assess where I'm at for the libtrans refactor preliminary to the gradient refactor. It'll end one of these days... ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Removes some dead code; - [x] `free_memory_` is now actually used; - [x] Clang formatting. ## Questions; - [x] special_matrices.cc::MatrixBase and derived subclasses currently do not update the free memory. While I can make it update memory, that would require giving each Matrix a wavefunction. Should I add memory costs for this?; - [x] I assumed that the memory cost of the index.cc classes was negligible, as these are three-index or smaller. Should I add memory costs for this?1. ## Checklist; - [x] psirmrcc tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1956:972,test,tests,972,https://psicode.org,https://github.com/psi4/psi4/pull/1956,1,['test'],['tests']
Testability,"## Description; This PR deprecates Psi's built-in ADC module, per discussion on the January developer conference call, issue #1033, and my own investigation. ## Checklist; - [x] Tested ADC still runs, but with well-deserved warnings. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2419:178,Test,Tested,178,https://psicode.org,https://github.com/psi4/psi4/pull/2419,1,['Test'],['Tested']
Testability,"## Description; This PR does cleanup in `dmrgscf` to mark variables const, remove non-RAII dynamic memory, and switch from pointers to references where possible. This PR is in preparation for updating the deprecated molden call. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] DMRG memory and `const` cleanup. ## Checklist; - [x] DMRG tests still pass. ## Status; - [x] Ready for review; - [x] Ready for merge **squash**",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2383:394,test,tests,394,https://psicode.org,https://github.com/psi4/psi4/pull/2383,1,['test'],['tests']
Testability,## Description; This PR does some miscellaneous cleanup of the OEI part of `libtrans` and will probably lead to another series of smaller PRs involving `libtrans`. The focus of this PR is to take away from `libtrans` responsibility for creating unused or barely used one-electron objects. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Remove unused OEI functions from `libtrans`; - [x] Remove creation of Fock matrices from being the responsibility of `libtrans`; - [x] Add a readme file explaining why `libtrans` is bothering with a frozen core operator. ## Checklist; - [x] `pytest test_standard_suite.py` and all C-tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1991:670,test,tests,670,https://psicode.org,https://github.com/psi4/psi4/pull/1991,1,['test'],['tests']
Testability,"## Description; This PR enables CCSD calculations with the PCM in the [PTED (Perturbation-To-Energy-and-Density) approximation](http://dx.doi.org/10.1063/1.3245400). The PCM potential is calculated from the CCSD _density_. Thus macroiterations are introduced to solve the CCSD amplitude **and** multiplier equations, obtain the CCSD density and update the PCM potential. @jH0ward the macroiterations are handled in the Python layer. . ~There are two test cases, both currently failing, and the code is quite ugly.~. ## Todos; * **User-Facing for Release Notes**; - [x] For SCF, the PCM potential is now added on top of the Fock matrix in `form_F()`. I added a `std::vector<SharedMatrix> external_potentials_` to the HF base class. External potentials are stored there and then added on top `Fa_` and `Fb_` in the implementation of `form_F()` for the RHF, UHF and ROHF subtypes. This was necessary to get ROHF to work with PCM.; - [x] `compute_E()` for the RHF, UHF, ROHF and CUHF subtypes of the abstract HF type now use the one- and two-electron matrices to compute the energy, instead of `Fa_` and `Fb_`. This avoids ambiguities when external potentials, such as PCM, have been/will have to be added to the Fock matrix. ; - [x] CCSD with the PCM in the PTED approximation.; - [x] Final report of energy clearly reports polarization and correlation components for the PTE and PTED schemes.; - [x] Added tests for RHF and UHF references.; - [x] Updated version of PCMSolver. ## Known problems; - The HeH+ test case (`pcmsolver-ccsd-pted-heh+`) doesn't work when setting a ROHF reference. I suspect the problem is in the [`update_Fock_matrix_rhf` function in `ccdensity/ccdensity.cc`](https://github.com/psi4/psi4/pull/810/files#diff-ed90974ac2a85f17445ff27956c7d6dfR791). ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/810:450,test,test,450,https://psicode.org,https://github.com/psi4/psi4/pull/810,3,['test'],"['test', 'tests']"
Testability,## Description; This PR enables easier single-shot calculations in Psi4 by short-circuiting the SCF solver if `maxiter == 0`. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2073:310,Test,Tests,310,https://psicode.org,https://github.com/psi4/psi4/pull/2073,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This PR entirely removes the Obara-Saika code for one-electron integrals. Note that, as explained in #2473, the *unique* `PseudoSpectralInt` functionality (erf integrals) is not used anywhere in Psi right now, so it can be safely removed. Once the problems with L2 (which currently put #2473 on hold) are sorted out, this functionality will become available. **Merge button click** reserved for @andysim. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Remove `osrecur.{cc,h}`; - [x] Remove `PseudoSpectralInt` (will be reconciled in #2473). ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2517:637,Test,Tests,637,https://psicode.org,https://github.com/psi4/psi4/pull/2517,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This PR exposes Einstein Coefficients and Rotary Strengths to `psivar`. As of this PR, cc tests 1-33, 35-45, 47, 49-53, 55-56 are ported. Four tests to go. I'm not ultimately happy with these tests (see the six issues I filed this evening), but it's as good as we have right now. ## Questions; - [x] **Please confirm the descriptions and units of the glossary additions.**. ## Checklist; - [x] Newly added tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2525:106,test,tests,106,https://psicode.org,https://github.com/psi4/psi4/pull/2525,4,['test'],['tests']
Testability,"## Description; This PR exposes `Vector.clone()` to the Python layer, a generally useful function and one I specifically need for PyDIIS. Sadly, positive LoC this time. The cast to `shared_ptr` is necessary for the clone to be available Py-side because when we pybound `Vector`, we specified `std::shared_ptr<Vector>` as its holder type. I imagine this is an example of ""[holder types must be applied consistently](https://pybind11.readthedocs.io/en/stable/advanced/smart_ptrs.html#std-shared-ptr.)."" Let's not talk about how long it took for me to implicate holder types in my test originally failing. ## Todos; - [x] `Vector.clone` available on the Python layer. ## Checklist; - [x] Tests added for any new features. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2375:578,test,test,578,https://psicode.org,https://github.com/psi4/psi4/pull/2375,2,"['Test', 'test']","['Tests', 'test']"
Testability,## Description; This PR exposes all of libmints and libciomr to plugins via the PSI_API macro. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Expose libmints; - [x] Expose libciomr; - [x] Expose JK and Denominator classes; - [x] Expose Options print functions. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1400:366,test,tests,366,https://psicode.org,https://github.com/psi4/psi4/pull/1400,2,['test'],['tests']
Testability,"## Description; This PR exposes the two functions `compute_orbitals` and `compute_density` from `CubeProperties` to the Python layer. This allows for more flexible dumping of cube files. Example Code:; ```Python; import psi4; import numpy as np. def test_cube_files(expected, computed):; expected = np.genfromtxt(expected, skip_header=9, skip_footer=1); computed = np.genfromtxt(computed, skip_header=9, skip_footer=1); np.testing.assert_allclose(expected, computed, atol=1e-14). mol = psi4.geometry(""""""; O 0 0 0; H 0 0 1.795239827225189; H 1.693194615993441 0 -0.599043184453037; symmetry c1; units au; """"""). psi4.core.be_quiet(); psi4.set_options({'basis': ""sto-3g"",; 'scf_type': 'pk',; 'cubeprop_tasks': ['density', 'orbitals']}); scf_e, wfn = psi4.energy('SCF', return_wfn=True); psi4.cubeprop(wfn). cubegen = psi4.core.CubeProperties(wfn). dt = wfn.Da(); dt.add(wfn.Db()); cubegen.compute_density(dt, ""hf_density""). # obtain alpha coefficients; orbs = wfn.Ca_subset(""AO"", ""OCC"").np; # select the two highest occupied orbitals; occs = orbs[:, -2:]; occs_pm = psi4.core.Matrix.from_array(occs); cubegen.compute_orbitals(occs_pm, [0, 1], [""homo-1"", ""homo""], ""orbital""). test_cube_files(""Dt.cube"", ""hf_density.cube""); test_cube_files(""Psi_a_5_5-A.cube"", ""orbital_2_homo.cube""); test_cube_files(""Psi_a_4_4-A.cube"", ""orbital_1_homo-1.cube""); ```. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] export functions . ## Questions; - [x] ~~Should some tests be added for this? Like in the example code above to be 100% safe?~~ I added a simple test like in the example script to be safe. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1917:423,test,testing,423,https://psicode.org,https://github.com/psi4/psi4/pull/1917,6,"['Test', 'test']","['Tests', 'test', 'testing', 'tests']"
Testability,"## Description; This PR finishes the reorganization of the SAD code. Renames ```SAD_FRAC_SR_OCC``` to ```SAD_SPIN_AVERAGE```, which is also valid without fractional occupations. Fixes the guess in the presence of ghost atoms. I also turn fractional occupations and spin-averaging on by default, because; * fractional occupations are well-known to give better results than integer ones; * differences between spin-averaged SAD and atomic ground state SAD appear to be small when fractional occupations are used; * the spin-averaged code not limited to Z <= Rn. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Turn fractional averaging in SAD on by default; - [x] Turn spin-averaging in SAD on by default; - [x] SAD works in the presence of ghost atoms; - [x] SAD works in the presence of ECPs; - [x] Make SAD the default guess . ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1458:929,Test,Tests,929,https://psicode.org,https://github.com/psi4/psi4/pull/1458,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This PR fixed a problem that prevents setting string options for modules when these are not defined to be global. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] When calling `Options::set_str` we now check if the option `key` exists in global. If yes, check if it matches any of the choices. ## Checklist; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1955:413,test,tests,413,https://psicode.org,https://github.com/psi4/psi4/pull/1955,2,['test'],['tests']
Testability,"## Description; This PR fixes Example 1 of #2231, some GEMM errors in the DCT module in the presence of linear dependencies. There's more debugging to do, but this is a perfectly good standalone bugfix. I also refactored the offending function. Less code duplication, less gratuitous pointers, and eliminated an offset. This PR is anodyne, so getting this in for 1.4 would be appreciated. ## Checklist; - [x] No tests to add? The old code completed successfully because there was a back-up algorithm when the one that was acting up errored out.; - [x] `ctest -R dct` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2232:412,test,tests,412,https://psicode.org,https://github.com/psi4/psi4/pull/2232,1,['test'],['tests']
Testability,"## Description; This PR fixes a bug causing TD-DFT and stability analysis to give incorrect results (or diverge) when used with density-fitting and symmetry : more generally, the bug occurs any time JK objects used back-transformed C matrices that weren't totally symmetric. This is ultimately an issue of orbital indexing. When the left index of the generalized C matrix is back-transformed from SO to AO, the blocks need to be flattened together. The code previously combined the blocks from smallest h to lowest h. So columns of irrep `h ^ symmetry_` appear _in order of h ascending_, with the left C assumed totally symmetric. The matrices have different orbital indexing if your right C `symmetry_` is not totally symmetric! This produced inconsistencies when contracting quantities against each other that inherited this indexing. The fix is simple: change the order we back-transform irreps of the right matrix, so the order of orbitals is consistent and `symmetry_`-independent. Closes #2122. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Bugfix: Can now converge TD-SCF with DF and symmetry; - [x] Bugfix: Can now get correct stability analysis with DF and symmetry. ## Checklist; - [x] Tests added for newly working TD-SCF - they pass; - [x] Quick tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2124:1257,Test,Tests,1257,https://psicode.org,https://github.com/psi4/psi4/pull/2124,2,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This PR fixes a bug found by Lori, and gives `compare_matrices` the ability to compare names. Although Lori and I were in talks about some other improvements to comparison functions, those would touch `qcelemental` so can't be included here. This blocks some development on another branch, so I'd appreciate a fast review. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Fixes `compare_recursive` bug; - [x] Adds flag to `compare_matrices` so named can be checked. ## Checklist; - [x] New tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2397:564,test,tests,564,https://psicode.org,https://github.com/psi4/psi4/pull/2397,1,['test'],['tests']
Testability,"## Description; This PR fixes a bug in the UHF gradients for systems with no beta electrons (1-electron systems).; On line 463 of `psi4/src/psi4/scfgrad/jk_grad.cc` I couldn't avoid skipping this operation because this buffer is read somewhere else (and it practically does not matter for 1-electron systems).; ```C++; // > Stripe < //; psio_->write(unit_b_, ""(A|ij)"", (char*)Aijp[0], sizeof(double) * np * nb * nb, next_Aijb, &next_Aijb);; ```; ## Todos; - [x] Fixes logic in `scf_grad` code. ## Checklist; - [x] Added a test of the UHF gradient for H2+.; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2344:468,log,logic,468,https://psicode.org,https://github.com/psi4/psi4/pull/2344,4,"['log', 'test']","['logic', 'test', 'tests']"
Testability,"## Description; This PR fixes a bug introduced in #1749, where `MemDFJK` handling of range-separated functional was incorrect in the asymmetric case. This incorrect handling lead to incorrect TD-DFT excitation spectra for range-separated functionals when `MemDFJK` was used. This PR hence closes #2431. In the symmetric case, either swapping the contraction order had no effect, or it was corrected by a hermitivitize call later on, so no error was observed. I strongly recommend backporting this PR (or at least the two characters needed to fix the bug). The rest of the PR other than those two characters is tests and commenting. Credit to @hokru for tag-team debugging. . ## Checklist; - [x] Tests added for newly working features. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2435:610,test,tests,610,https://psicode.org,https://github.com/psi4/psi4/pull/2435,2,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This PR fixes a bug when the `method/basis` specification is used in conjunction with DiskDF (i.e. when the reference wfn is passed on to, e.g. TDSCF or FNOCC). Fixes #1604. New test cases added that would trigger the original problem. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] fix; - [x] add tests. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2141:194,test,test,194,https://psicode.org,https://github.com/psi4/psi4/pull/2141,5,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; This PR fixes a docs fail caused by the previous PR in the series and also adapts a few more tests. Test `cc29` needs another adaptation, but as that will require a new psivar, I'm saving that for the next PR. This is PR 5 in an ongoing series to make `ccdensity` compatible with the standard `Matrix` and `Wavefunction` machinery used elsewhere in Psi. Obligatory @lothian ping for `cc` and obligatory @loriab ping for fixing the docs. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2447:109,test,tests,109,https://psicode.org,https://github.com/psi4/psi4/pull/2447,2,"['Test', 'test']","['Test', 'tests']"
Testability,## Description; This PR fixes a line in cookbook-rohf-orb-rot test that was previously causing a failure. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Fixes previously failing tests; * **User-Facing for Release Notes**; - Not sure if this is applicable?. ## Questions; - No questions at this time. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/841:62,test,test,62,https://psicode.org,https://github.com/psi4/psi4/pull/841,2,['test'],"['test', 'tests']"
Testability,"## Description; This PR fixes a memory leak which I inadvertently introduced myself when refactoring `libdiis`. What I was _trying_ to do was take heap memory and move it into the stack. You can't actually do that. So when I released my `std::vector` from the smart pointer and saved it to a class variable, the memory was _not_ cleared on object delete because it was still heap memory and not stack memory. _Mea culpa_. ## Checklist; - [x] Quick tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2350:448,test,tests,448,https://psicode.org,https://github.com/psi4/psi4/pull/2350,1,['test'],['tests']
Testability,## Description; This PR fixes some typos in `cc29` which reduced test coverage and also migrates `cc30` and `cc31` from autotest to ctest. `cc32` and `cc33` are good as written. This is PR 7 in an ongoing series to make ccdensity compatible with the standard `Matrix` and `Wavefunction` machinery used elsewhere in Psi. Obligatory @lothian and @loriab pings - reviews appreciated but not mandatory. ## Checklist; - [x] Changed tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2456:65,test,test,65,https://psicode.org,https://github.com/psi4/psi4/pull/2456,2,['test'],"['test', 'tests']"
Testability,## Description; This PR fixes the segmentation fault of `CCEnergyWavefunction::rotation()` when there are frozen virtual orbitals. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1887:151,Test,Tests,151,https://psicode.org,https://github.com/psi4/psi4/pull/1887,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This PR fixes three bugs in Psi's NBOWriter.; 1. The AO->MO matrix was previously put in the transpose way to how NBO expected it.; 2. MO coefficients for non-totally symmetric irrep were transformed from SOs to AOs incorrectly, leading to #1566. Closes #1566.; 3. The map from angular momentum functions in Psi to labels for NBO was wrong. For instance, p0 was previously px instead of pz. Due to point 3, **all previous NBO computations from Psi-generated NBO files are suspect.** I very nearly published wrong results due to that, so I advocate backporting this to 1.3. **NEW**; Linear dependencies and angular momentum up to _h_ is now handled properly. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix critical errors in NBOWriter. ## Tests of Correctness; I compared the overlap, density, and Fock matrices for nearly-cis diazene from file47's from Psi and QChem. After accounting for the fact that they order the AOs differently, they match almost perfectly. The density matrix was off in the last decimal place for a few entries. The NAO energies, NAO occupations, and perturbative analysis matched as well. I repeated for my instigating case, cis-sulfurous acid. QChem matches Psi with symmetry matches Psi without symmetry for NAO energies, NAO occupations, and perturbative analysis. Finally, to verify the molecular orbitals, I had both QChem and Psi report the MOs in the basis of NBOs. Apart from ordering the NBOs differently, the two match to within the last decimal place. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1602:809,Test,Tests,809,https://psicode.org,https://github.com/psi4/psi4/pull/1602,1,['Test'],['Tests']
Testability,"## Description; This PR follows the change of PR #2064. To avoid compilation errors for any downstream packages, `Lagrangian()` and `X()` in the `Wavefunction` class have been marked deprecated instead of removing them. Future code should use lowercase `lagrangian()` and `set_lagrangian()` to obtain and set the orbital Lagrangian matrix (both C++ and Python), respectively. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2066:430,test,tests,430,https://psicode.org,https://github.com/psi4/psi4/pull/2066,2,['test'],['tests']
Testability,"## Description; This PR gets rid of all `new` and `delete` calls within `libdiis`, replacing them with `std::unique_ptr` and `std::vector`. . Per [recommendations](https://herbsutter.com/2013/06/05/gotw-91-solution-smart-pointer-parameters/), I use a `std::unique_ptr` to signify the caller (of the `DIISEntry` constructor) loses ownership of the object. ## Checklist; - [x] Quick tests still pass. ## Status; - [x] Ready for review; - [x] Ready for merge **SQUASH**",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2325:381,test,tests,381,https://psicode.org,https://github.com/psi4/psi4/pull/2325,1,['test'],['tests']
Testability,"## Description; This PR gets rid of the `TaskListComputer` base class, condensing it into `OEProp`, the only class that inherited from it. We gained nothing from having that class around. ## Checklist; - [x] Properties tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2531:219,test,tests,219,https://psicode.org,https://github.com/psi4/psi4/pull/2531,1,['test'],['tests']
Testability,"## Description; This PR has tho objectives:. 1. Make MBIS volume ratios callable from both `oeprop(...,'MBIS_VOLUME_RATIOS')` and `set scf_properties ['MBIS_VOLUME_RATIOS']`. So, solve #2299. ; 2. A recent comment suggested that the `free_atom_volume()` function was still being called even though they only requested computation of MBIS charges. This PR also ensures that this doesn't happen anymore. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [X] Solve #2299 ; - [X] Remove calling of free atom functions when volume ratios aren't requested. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [X] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2370:624,Test,Tests,624,https://psicode.org,https://github.com/psi4/psi4/pull/2370,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This PR implements The Combined Schwarz Approximation Maximum (CSAM) estimate for prescreening two-electron integrals. CSAM was described in this paper by Thompson and Ochsenfeld: https://aip.scitation.org/doi/10.1063/1.4994190. In Psi4, TEIs are screened using the well-known Cauchy-Schwarz Inequality:; `(pq|rs)^2 <= (pq|pq)*(rs|rs)`; This type of screening is effective when the overlap between orbitals p and q (or r and s) is sufficiently small. However, it doesn't take into account the scenario in which the two orbital products pq and rs are individually significant, but very far apart. CSAM factors in this distance dependence. . The following benchmarks show modest improvements in efficiency with negligible loss in accuracy:; ![Screen Shot 2019-05-28 at 1 59 57 PM](https://user-images.githubusercontent.com/16376046/58500885-1c618d00-8151-11e9-82f8-ced6ce967483.png). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Adds CSAM screening to ERISieve ; - [x] Adds python binding for the ERISieve class; - [x] Adds a ERISieve PsiAPI test. ## Questions; - [ ] The `ERISieve` constructor now takes a boolean `do_csam` (which defaults to `false`). What's the best way to hook this up to the user interface?; - [x] The `ERISieve` class contains a partially-finished attempt at implementing a similar type of screening (QQR). Are their plans to finish this? Or implement other integral-related optimizations?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1499:670,benchmark,benchmarks,670,https://psicode.org,https://github.com/psi4/psi4/pull/1499,5,"['Test', 'benchmark', 'test']","['Tests', 'benchmarks', 'test', 'tests']"
Testability,"## Description; This PR implements ```SAD_SCF_TYPE``` options that aren't currently allowed as ```SAD_SCF_TYPE``` options, as well as adds tests to check that the computed SAD guess is exact for closed-shell atoms. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] SAD solution is fully converged for noble gases when ```SAD_SCF_TYPE = SCF_TYPE```. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1477:139,test,tests,139,https://psicode.org,https://github.com/psi4/psi4/pull/1477,4,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This PR implements a Huckel guess, based on the routine I recently implemented in ERKALE and described in https://pubs.acs.org/doi/10.1021/acs.jctc.8b01089. The guess reproduces an idempotent density matrix, yielding a variational guess energy. It also appears to be an universal improvement over SAD: because the Huckel guess has energetics, it is able to e.g. adapt to different charge and spin states. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Guess works without symmetry; - [x] Guess works in all symmetries. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1498:637,Test,Tests,637,https://psicode.org,https://github.com/psi4/psi4/pull/1498,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This PR implements a semi-numerical algorithm for computing the exchange (K) matrix as described in [this paper](https://doi.org/10.1016/j.chemphys.2008.10.036) and [this paper](https://doi.org/10.1063/1.3646921) as ""Chain of Spheres"" exchange or COSK. The implementation is added to a new `JK` class, `DFJCOSK`, which combines COSK with a simple direct density-fitted J algorithm. COSK is easily parallelized, completely in-core, and has good scaling--between O(N^1) and O(N^2)--making it ideal for HF/DFT calculations on large systems, particularly calculations for which the `DF` algorithm must store integrals on disk. The low scaling comes at the cost of a large pre-factor, so it shouldn't be used on small systems. In my benchmarking, `DFJCOSK` is almost always faster than `DIRECT` (even with density screening and incremental fock construction). The crossover between `DFJCOSK` and `DF` is dependent on the system, basis, CPU, memory, etc. but I've observed it as early as <3000 basis functions. I've attached a performance comparison of the `DFJCOSK`, `DIRECT`, and `DF` algorithms on a set of linear alkanes in which it's clear that `DFJCOSK` outperforms the other two algorithms for large systems. ![alkanes](https://user-images.githubusercontent.com/16376046/166322946-172d8fee-3ce3-4811-9633-db094219d17e.png). An encouraging fact about these results is that this implementation is far from optimal. The cost of the COSK algorithm is dominated by the evaluation of one-electron integrals on a quadrature grid. Therefore, there are a number of improvements to be made, in order of increasing difficulty:. - Do a better job at screening small integrals before they're computed (like [these](https://aip.scitation.org/doi/pdf/10.1063/1.5048491)); - Use better grids (such as [here](https://aip.scitation.org/doi/full/10.1063/1.5049435)); - Compute individual integrals faster. This could be done by reusing intermediates in the recursion for integrals involving the same she",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2567:744,benchmark,benchmarking,744,https://psicode.org,https://github.com/psi4/psi4/pull/2567,1,['benchmark'],['benchmarking']
Testability,"## Description; This PR implements analytical nuclear gradients for Polarizable Embedding (PE). I've been messing with some integral routines, so now `ao_multipole_potential` and `ao_multipole_potential_gradient`; exist. I think we can also reconcile this and make it consistent (pass all moments and coordinates) throughout... I'm creating this PR as a preliminary draft for now so we can better coordinate. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] PE-SCF gradients; - [ ] some sort of dispersion/repulsion for optimizations (D3, LJ, ...); - [ ] Release and bump `cppe`; - [ ] add tests once new `cppe` is out; - [ ] consistent top-level integral routines. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2039:648,test,tests,648,https://psicode.org,https://github.com/psi4/psi4/pull/2039,4,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This PR implements the Superposition of Atomic Potentials guess that I described last fall in arXiv:1810.11659 and doi:10.1021/acs.jctc.8b01089. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] The SAP guess can be used to start SCF calculations. ## Questions; - [ ] Screening? For yuge systems, one could truncate the calculation of the SAP potential to the practical infinity of the atomic calculation (20 bohr), since the potential is a hard zero outside of it. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1665:550,Test,Tests,550,https://psicode.org,https://github.com/psi4/psi4/pull/1665,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This PR implements the grid pruning scheme of Matthews (https://pubs.acs.org/doi/10.1021/acs.jctc.9b01205), applying a pivoted Cholesky decomposition to the S matrix to remove linear dependencies and drastically reduce the number of grid points. Per @PhillCli's comments on #3157, taking the pseudoinverse of the S matrix can be costly, and this PR fixes that problem! The final rank appears to be _mostly_ invariant to grid size, but only to the molecule/basis set (results in tables below). | System | Radial, Spherical Points | Initial Rank | Final Rank |; | ------------- | ------------- | ------------- | ------------- |; | Water/cc-pVDZ | (25, 50) | 2605 | 280 |; | Water/cc-pVDZ | (50, 86) | 8739 | 280 |; | Water/cc-pVTZ | (25, 50) | 2630 | 1184 |; | Water/cc-pVTZ | (50, 86) | 8774 | 1328 |; | Benzene/cc-pVDZ | (25, 50) | 9831 | 3124 |; | Benzene/cc-pVDZ | (50, 86) | 32588 | 3414 |. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Drastically reduction of the rank of the intermediates in a THC factorization. ## Questions; - [x] The pivoted Cholesky algorithm presented by Matthews requires the upper triangular form. I modified the algorithm in matrix.cc to the upper triangular form because `Matrix::pivoted_cholesky` is not called elsewhere. Is this okay?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3187:1500,Test,Tests,1500,https://psicode.org,https://github.com/psi4/psi4/pull/3187,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; This PR implements the last guess I described last fall: the SAD natural orbitals guess. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Can start calculations from SAD natural orbitals.; - [x] Add missing CUHF tests to scf-guess. ## Questions. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1672:277,test,tests,277,https://psicode.org,https://github.com/psi4/psi4/pull/1672,4,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This PR implements the partial Cholesky orthogonalization procedure I've recently described in https://arxiv.org/abs/1911.10372, which can be used to avoid pathological linear dependencies in the basis set. This is the simple version of the algorithm which just hides the pathological functions; the more sophisticated one is already available in ERKALE but it is limited to fixed geometries. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Partial Cholesky decomposition implemented; - [x] Calculation of basis function extents via `r^2` value implemented; - [x] Basis functions sorted so that steep ones get treated first by the decomposition. ## Questions; - [x] How to handle the sorting of basis functions in the presence of symmetry? AFAIK each SO basis functions is a superposition of identical functions on different atoms; this means that the corresponding symmetry-blocked `r^2` values could just be one of these.; - [x] Although matrix.cc already implements pivoted Cholesky, it's also available in LAPACK as `dpstrf()`. Maybe the implementation should be replaced with a call to LAPACK?; - [ ] Would it be possible to make Psi4 drop the irrelevant shells altogether from the basis set to make calculations more efficient? This would need to be done at every geometry... ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1760:1368,Test,Tests,1368,https://psicode.org,https://github.com/psi4/psi4/pull/1760,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This PR introduces a new `DFTensor` class to DCT. This is a lightweight wrapper over Matrix which I use to get some extra dimension information, as well as to store the DF contraction functions which were previously cluttering DCT's wavefunction object. Accordingly, many objects which were previously a `Matrix` have been specialized to a `DFTensor`. This also allows more careful input validation for the functions of `DFTensor`, but my primary motivation is for **code organization for the sake of a future PR**. Although there's a large LoC change, most of this is just moving code around and the bare minimum changes needed to make the code compile. **Reviewers, the thing to look at is the header files.**. Also of note: `Matrix bQpqA_mo_;` was never actually used and is thus removed. That should be decent memory savings. Do **not** merge until 1.5. It is far too late in the game for PRs of this scope. ## Checklist; - [x] DCT test passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2250:952,test,test,952,https://psicode.org,https://github.com/psi4/psi4/pull/2250,1,['test'],['test']
Testability,## Description; This PR introduces an atomic blocking scheme for quadrature grid points. All grid points in a `BlockOPoints` object belong to a singular parent atom.; Part 1 contains just the basic feature to get it our for people depending on it. Optimization for speed is yet to come. ### New options:; - `DFT_BLOCK_SCHEME = ATOMIC` (unique blocks of grid points for each atom); - `DFT_REMOVE_DISTANT_POINTS` (new flag for existing functionality). ### primary C++ feature:; - `grid->atomic_blocks()[N_ATOM][N_BLOCKS]` additionally to `grid->blocks()[N_BLOCKS]` # provides all grid points for an atom; - `block->parent_atom()` # atom the current block belongs to. ### fixes; - collocation size estimate in naive gridblocker was wrong.; - removes unused `index` vector. #### note; - Automated formatting of the files with `clang-format` made unrelated changes. ## Questions; - [ ] The ugly code [here](https://github.com/hokru/psi4/blob/atomic_grid1/psi4/src/psi4/libfock/cubature.cc#L4630-L4641) is because of an issue with the `BlockOPoints` [object](https://github.com/hokru/psi4/blob/atomic_grid1/psi4/src/psi4/libfock/cubature.h#L179). I'd like advice how to handle this better. ## Checklist; - [x] Tests added for any new features. ## Status; - [x] Ready for review; - [x] Ready for merge. ---. ## Usage. Normal loop structure; ```; for (size_t Q = 0; Q < grid_->blocks().size(); Q++) {; size_t parent_atom_ = grid_->blocks()[Q]->parent_atom();; .; .; .; }; ```. Looping over atoms and their blocks. ; ```; # openmp note: for best performance the atom and block loop could possibly; # be collapsed into a singular loop using `collapse(2)`; for (size_t i = 0; i < grids_.size(); i++) { # here size = number of atoms; for (size_t Q = 0; Q < grid_->atomic_blocks()[A].size(); Q++) {. // access a block; std::shared_ptr<BlockOPoints> block = grid_->atomic_blocks()[A][Q];; .; .; .; }; ```,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2336:1204,Test,Tests,1204,https://psicode.org,https://github.com/psi4/psi4/pull/2336,1,['Test'],['Tests']
Testability,"## Description; This PR introduces an option in the call to `Deriv::compute()` so that the user can specify the type of gradient computation. Currently, this class determines which procedure to follow using an internal logic that is not sufficiently flexible to accommodate plugins. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Add deric_calc_type option to `Deriv::compute()`; - [x] Define enum and python interface. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1756:219,log,logic,219,https://psicode.org,https://github.com/psi4/psi4/pull/1756,3,"['log', 'test']","['logic', 'tests']"
Testability,"## Description; This PR is a companion to https://github.com/psi4/psi4/pull/2933. The goal of https://github.com/psi4/psi4/pull/2933 is to completely eliminate the `ERISieve` class, for reasons explained there. However, it turns out that eliminating `ERISieve` requires fiddling with the v2rdm_casscf plugin, as well, since it also uses `ERISieve`. This PR is meant to be a deprecation of the `ERISieve` class that will show up in v1.8 in the meantime, in case `ERISieve` isn't fully removed by then. ## User API & Changelog headlines; - [X] Deprecates the `ERISieve` class. ## Dev notes & details; - [X] Fully deprecates the `ERISieve` class C++-side by tagging it with the deprecated attribute.; - [X] Deprecates the `ERISieve` class Python-side by creating helper functions for the Python-facing `ERISieve` functions that warn about deprecation. ## Questions; - [x] Is `PSI_DEPRECATED` the preferred mechanism by which to perform this deprecation?; - [X] Assuming the answer to the first question is ""yes"", are there any other functions in `ERISieve` that should be tagged? I chose specifically the user-facing functions.; - [x] I _loathe_ having to use a global variable for the Python-side helper functions. But, unbelievably, it is what I considered the best one I could think of. I would be very happy to hear out alternative suggestions.; - [ ] Using the `PSI_API` and `PSI_DEPRECATED` macros together to tag the `ERISieve` class cause the compiler to complain. On further exploration, replacing `PSI_DEPRECATED` with its textual definition seems to work fine. Is this an acceptable solution?. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2935:1622,Test,Tests,1622,https://psicode.org,https://github.com/psi4/psi4/pull/2935,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; This PR is a follow up of PR #1948 and resolves issue #1830.; It covers the corner case where zero spin block occurs in USAPT0 mp2_term due to freezing the core. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1969:198,Test,Tests,198,https://psicode.org,https://github.com/psi4/psi4/pull/1969,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This PR is a reimplementation of https://github.com/psi4/psi4/pull/2933; but instead of entirely deleting the `ERISieve` class, it makes `ERISieve` inaccessible for use through the following:. - Using `core.ERISieve.build` now throws an `UpgradeHelper` exception when called, as compared to the previous behavior of giving a warning.; - Calling the `ERISieve` constructor C++-side now throws an exception, with the same message as the UpgradeHelper would give. Aside from that, this PR does the same things as https://github.com/psi4/psi4/pull/2933. `ERISieve` is replaced with `TwoBodyAOInt` in all use cases, with adjustments as necessary. Additionally, the new version of v2rdm_casscf is used, which also uses `TwoBodyAOInt` instead of `ERISieve`. ## User API & Changelog headlines; - [X] Calling `core.ERISieve.build` Py-side, or constructing an `ERISieve` object C++-side, now throws an exception. The removed functionalities, specifically `shell_significant`, can be accessed via the construction of a TwoBodyAOInt object. ## Dev notes & details; - [X] The `ERISieve` class in libmints has been made inaccessible, now throwing exceptions when constructed (with an UpgradeHelper Py-side, and a PSIEXCEPTION C++-side).; - [X] Functionalities in `ERISieve` that were not in `TwoBodyAOInt` and were required in the code, were added to `TwoBodyAOInt`.; - [X] The PKJK files have been adjusted as necessary to support the use of `TwoBodyAOInt`. ## TODO; - [X] Remove ERISieve from all other external plugins (currently focusing on v2rdm_casscf). ## Questions; - N/A. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2974:1603,Test,Tests,1603,https://psicode.org,https://github.com/psi4/psi4/pull/2974,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; This PR is designed to add more tests for libXC in Psi4. ## Todos; - [x] output.ref files need to be generated; - [x] CMakeLists.txt needs to added; - [x] Test names need to be added to psi4/tests/CMakeLists.txt. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/880:48,test,tests,48,https://psicode.org,https://github.com/psi4/psi4/pull/880,3,"['Test', 'test']","['Test', 'tests']"
Testability,"## Description; This PR is designed to enable testing of a wide variety of combinations of `SCF_TYPE`, `SCF_SUBTYPE`, and `SCREENING` keywords available in Psi4. Of the currently-available JK tests, scf5 covers a wide variety of build methods, but only at a single screening type per method (density or csam, depending on the method). Meanwhile, `test_erisieve.py`, after the updates introduced in https://github.com/psi4/psi4/pull/2973, tests a wide variety of screening types, but with limited testing in conjunction with different JK builds (the only tests that don't use the Python interface of `TwoBodyAOInt` directly, use `SCF_TYPE=DIRECT` or `DF` as the JK method for screening comparisons). This leaves a lot of untested JK build+screening combos, which may be potentially broken and uncaught by the CI as a result. As a matter of fact, such cases actually do exist in the code currently (e.g., CompositeJK methods + no screening). This PR adds a new pytest module, `test_comprehensive_jk_screening.py`. It is effectively an expanded version of the scf5 test module, testing one of the scf5 systems (singlet oxygen) with the same basis set, but also including different screening methods and algorithmic subtypes available in Psi4. Screening is assumed to have an insignificant impact on energy within the tolerance used, so all screening types for a given method use the same reference energy. Some combinations of method and screening type throw an exception by design; this is accounted for in the test by testing that such combinations do indeed throw an exception as expected. Other combinations of method and algorithm are broken at the moment and error out; these are simply skipped for now. They are all logged in the same spot, and can and will be addressed in future PRs. ## User API & Changelog headlines; - [X] N/A. ## Dev notes & details; - [X] Adds a new pytest module to Psi4, `test_comprehensive_jk_screening.py` , to test different combinations of JK build algorithms and ERI ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2978:46,test,testing,46,https://psicode.org,https://github.com/psi4/psi4/pull/2978,5,['test'],"['testing', 'tests']"
Testability,## Description; This PR is meant to replace (now closed) PR #513. The overall goal is to build and install Psi4 in a manner that allows it to be included as a dependency in other packages. ## Todos; - [x] Get tests to pass. Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Supports externally built Pybind11; - [x] Required pulling in PR #557 (*i.e.* this PR includes that one); - [x] No more `LD_PRELOAD` required for MKL; - [x] Factored plugin copy/pasted code so that the next item need only be changed in one place; - [x] Plugins now respect `CMAKE_PREFIX_PATH` and do not clobber it; * **User-Facing for Release Notes**; - [x] `find_package(psi4 CONFIG REQUIRED)` works and respects externally built Pybind11. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/563:209,test,tests,209,https://psicode.org,https://github.com/psi4/psi4/pull/563,1,['test'],['tests']
Testability,"## Description; This PR is the _first part_ of migrating EOM variables to the new standard for variable names, introduced in #2462. Among other things, the new standard gets rid of a longstanding grievance of TDC's: you no longer need to mix up all the irreps. This PR is content to migrate energy variable names. Other EOM variables go through `oeprop`, which will be a follow-up PR. A comprehensive test of EOM naming conventions is deferred to Pt. 2. This PR also contains misc. minor EOM cleanup I did while trying to understand the big picture of the code. More cleanup is possible, but you need to give EOM a wavefunction first, which is far outside the scope of this PR. Obligatory pings to @loriab and @lothian. ## Todos; - [x] Improve cc docs; - [x] Rename EOMCC energy variables to new standard ; - [x] Creates new EOM tag for tests . ## Checklist; - [x] All cc tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2475:401,test,test,401,https://psicode.org,https://github.com/psi4/psi4/pull/2475,3,['test'],"['test', 'tests']"
Testability,"## Description; This PR is the first in a series of planned PRs designed to remove density screening from the TwoBodyAOInt object and into the JK object. Having density screening available in TwoBodyAOInt runs the risk of applying density screening to algorithms where density screening doesn't make sense. Thus, it would be a good idea to move the logic of density screening to where it is more correctly applied, i.e., the JK object. This PR solves two issues simultaneously:. 1. The primary purpose of this PR is to change the test_erisieve.py tests to work with the planned future density screening refactor. One issue that moving density screening from TwoBodyAOInt to JK currently brings up, is that it causes the tests on density screening within the pytest test_erisieve.py to fail. These failures occur because test_erisieve.py performs its screening tests directly using an ERI object generated by IntegralFactory. With density screening being removed from the TwoBodyAOInt object, this method of density screening testing can no longer be done. The current PR is designed to address this issue for when the density screening refactor happens. The aforementioned issue is addressed by implementing a new variable to the HF wavefunction, computed_shells_per_iter_, which keeps track of the number of shell quartets computed per SCF iteration. The computed_shells_per_iter_ variable is accessible to the user via Python, and thus can be used to conduct screening tests. In this way, density screening tests can be performed without the need for an ERI object. 2. As a bonus from the changes introduced by this PR, the DirectJK algorithm no longer has a need to print computed shell quartet counts to bench.dat. Bench.dat is used exclusively by the DirectJK object to dump the number of shell quartets computed per SCF iteration somewhere. That data is now accessible to the user in a cleaner fashion - it can be accessed through Python, in a manipulatable format. ## Notes; 1. Note that the ch",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2547:349,log,logic,349,https://psicode.org,https://github.com/psi4/psi4/pull/2547,5,"['log', 'test']","['logic', 'testing', 'tests']"
Testability,"## Description; This PR is the second in a series of planned PRs designed to remove density screening from the TwoBodyAOInt object and into the JK object, with PR #2547 being the first such PR. Having density screening available in TwoBodyAOInt runs the risk of applying density screening to algorithms where density screening doesn't make sense. Thus, it would be a good idea to move the logic of density screening to where it is more correctly applied, i.e., the JK object. The primary purposes of this PR are twofold:; 1. First, this PR introduce the shell_significant() framework to the JK class. The shell_significant() framework starts with a shell_significant() virtual function that exists in the base JK class. The shell_significant() function can then be redefined specifically for different JK derived classes as needed. The existence of shell_significant() provides a unified framework for performing screening for any JK method, and it also provides the method by which density screening can be added directly to the relevant JK classes.; 2. Second, this PR uses the shell_significant() framework to reimplement screening for certain JK methods. Most significantly, as implied in the first point, the biggest change in this regard was the removal of shell_significant_density() from TwoBodyAOInt into the domain and its reimplementation into the DirectJK shell_significant() definition. With this change, density screening is now the domain of individual JK classes rather than the TwoBodyAOInt class, which was one of the primary goals of this overall refactor PR set in the first place. Additionally, another method that was subject to slight changes from the shell_significant() framework was the Yoshimine PKJK algorithm, in which its test for shell significance was implemented using the shell_significant() framework. ## Notes; I wanted to outline what the next steps were for this chain of PRs, since this one accomplishes one of the main goals of the refactor in the first place:;",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2695:389,log,logic,389,https://psicode.org,https://github.com/psi4/psi4/pull/2695,1,['log'],['logic']
Testability,"## Description; This PR makes changes so that `Psi` can do DIIS on an `ambit.BlockedTensor`, as required by the `forte` plugin. This PR will not work until [this ambit PR](https://github.com/jturney/ambit/pull/53) is merged, but passes locally. The test suite tells us little about this one, sadly. @loriab, I leave it up to you whether this warrants an update to the version of ambit that Psi takes. @fevangelista @lcyyork. ## Status; - [x] Ready for review; - [ ] Leave merging to me",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2505:249,test,test,249,https://psicode.org,https://github.com/psi4/psi4/pull/2505,1,['test'],['test']
Testability,"## Description; This PR makes small changes to the `PsiException` class, specifically regarding the printout of the function call stack upon throwing. Now, the number of functions included in the printed call stack during exception printout is tied to a singular variable, instead of being scattered about in multiple places. The goal is to allow easier control of the function call stack size during printout for debugging purposes, if desired. . There are a couple small cleanups here and there as well. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [X] N/A. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [X] All separate instances of function call stack printout sizes have been replaced with a single variable definition.; - [X] The `Stack` variable now uses a `std::array` instead of a `std::vector`.; - [X] Uses of `&Stack[0]` have been replaced with `Stack.data()`. ## Questions; - [X] N/A. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3179:1231,Test,Tests,1231,https://psicode.org,https://github.com/psi4/psi4/pull/3179,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This PR makes two small improvements to the `JK` class and SCF code. These improvements simplify the addition of new JK algorithms to Psi4, particularly an upcoming semi-numerical exchange. The first change is transferring the responsibility of zeroing out the `J`, `K`, and `wK` matrices from the parent `JK` class to each derived `JK` class. This makes it easier to implement JK algorithms which build the fock matrix incrementally. (i.e. use the difference in density between SCF iterations to compute differences in J/K). With this change, much of the incremental fock code in the `DirectJK` class can be simplified. The second change is the addition of an `early_screening_` member variable to the `JK`. The idea is that some future JK algorithms will increase performance by using looser screening procedures/thresholds in early SCF iterations. Screening is then tightened as the SCF approaches convergence. This logic was added to the SCF driver. The `early_screening_` variable defaults to false for all existing JK classes, so there is currently. no change in behavior. ## Todos; - [x] Derived `JK` classes are responsible for zeroing their matrices; - [x] JK screening is SCF iteration dependent. ## Questions. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2529:935,log,logic,935,https://psicode.org,https://github.com/psi4/psi4/pull/2529,4,"['Test', 'log', 'test']","['Tests', 'logic', 'tests']"
Testability,## Description; This PR migrates 8 of the `cc` tests from using `autotest` to using standard `compare_values`. The 13 `cc` tests that still use `autotest` are all more delicate (usually because they involve properties) and are deferred to another PR. This PR handles the easy cases. This is PR 3 in an ongoing series to make `ccdensity` compatible with the standard `Matrix` and `Wavefunction` machinery used elsewhere in Psi. Review requested from Lori for all things testing. Obligatory @lothian ping. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2440:47,test,tests,47,https://psicode.org,https://github.com/psi4/psi4/pull/2440,5,['test'],"['testing', 'tests']"
Testability,"## Description; This PR modifies the SAD guess so that it first runs a plain Fock build and diagonalizes the obtained Fock matrix. This allows the SAD guess to also work for ROHF, as well as allowing one to manually set the orbital occupations in combination with the SAD guess. Test calculation on the quintet state of Cr(N2)6 in aug-pcseg-1:; ```; molecule {; 2 5; Cr 0.0000925386 0.0000682032 0.0019012828; N 0.0004102713 2.3625659492 0.0026269619; N 0.0005967051 3.4672101357 0.0029548744; N 2.3620320503 -0.0004101212 0.0009507667; N 3.4666734940 -0.0002636830 0.0034835308; N -0.0003928082 -2.3624420331 0.0002298447; N -0.0001812896 -3.4670841683 0.0023676850; N -2.3618731053 0.0004033492 0.0009468195; N -3.4665147528 0.0006033882 0.0034481887; N 0.0000117173 -0.0007732394 2.1429780137; N -0.0000350947 -0.0013203851 3.2475238798; N 0.0002480331 0.0009562329 -2.1392146821; N 0.0003478216 0.0015074164 -3.2437570404; }. set reference rohf; set basis aug-pcseg-1; set guess core; set scf_type direct; set df_scf_guess false; energy('scf'); ```. Results:. | Guess | num iter | final energy |; | -- | -- | -- |; | GWH | 38 | -1696.14766117804697 |; | CORE | 24 | -1696.14766109152993 |; | SAD, atomic occupations | 33 | -1696.14766127808366 |; | SAD, fractional occupations | 25 | -1696.14766099831081 |; | SAD, fractional spin-restricted occupations | 22 | -1696.14766111108497 |. Due to the high symmetry of the test case, CORE is surprisingly efficient. SAD still beats the current default, GWH, by a large margin. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] SAD guess working for ROHF; - [x] SAD guess working with manually set occupations. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1456:279,Test,Test,279,https://psicode.org,https://github.com/psi4/psi4/pull/1456,5,"['Test', 'test']","['Test', 'Tests', 'test', 'tests']"
Testability,"## Description; This PR modifies the SAD guess so that it first runs a plain Fock build and diagonalizes the obtained Fock matrix. This allows the SAD guess to also work for ROHF, as well as allowing one to manually set the orbital occupations in combination with the SAD guess. Test calculation on the quintet state of Cr(N2)6 in aug-pcseg-1:; ```; molecule {; 2 5; Cr 0.0000925386 0.0000682032 0.0019012828; N 0.0004102713 2.3625659492 0.0026269619; N 0.0005967051 3.4672101357 0.0029548744; N 2.3620320503 -0.0004101212 0.0009507667; N 3.4666734940 -0.0002636830 0.0034835308; N -0.0003928082 -2.3624420331 0.0002298447; N -0.0001812896 -3.4670841683 0.0023676850; N -2.3618731053 0.0004033492 0.0009468195; N -3.4665147528 0.0006033882 0.0034481887; N 0.0000117173 -0.0007732394 2.1429780137; N -0.0000350947 -0.0013203851 3.2475238798; N 0.0002480331 0.0009562329 -2.1392146821; N 0.0003478216 0.0015074164 -3.2437570404; }. set reference rohf; set basis aug-pcseg-1; set guess core; set scf_type direct; set df_scf_guess false; energy('scf'); ```; * ```CORE``` 24 iterations, energy -1696.14766109152993; * ```SAD``` 29 iterations, energy -1696.14766127128701; * ```GWH``` 38 iterations, energy -1696.14766117804697. Due to the high symmetry of the test case, ```CORE``` is surprisingly efficient. ```SAD``` still beats the current default, ```GWH```, by a large margin. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] SAD guess working for ROHF; - [x] SAD guess working with manually set occupations; - [x] Default guess switched to SAD. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1429:279,Test,Test,279,https://psicode.org,https://github.com/psi4/psi4/pull/1429,5,"['Test', 'test']","['Test', 'Tests', 'test', 'tests']"
Testability,"## Description; This PR modifies the partial Cholesky approach by determining the initial pivot by an approach motivated by the Gershgorin circle theorem. By ordering the basis functions in terms of increasing values of `\sum_j |S_{ij}|`, the Cholesky procedure is initialized with functions that are as close as possible to eigenfunctions of S. Although the original scheme works well, this one is conceptually more attractive as it needs no external input. Moreover, this one should be more generally applicable, e.g. in the case of computing strongly repulsive potentials where some tight functions might have large overlap. The two approaches appear to reproduce similar results, so the change should not break anything. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Switch to using Gershgorin theorem in partial Cholesky code.; - [x] Remove hacks that were needed for the old implementation. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1824:1000,Test,Tests,1000,https://psicode.org,https://github.com/psi4/psi4/pull/1824,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This PR moves `fnocc`'s pair energies to the same standard used by `cc`: report MP2 and CC, separate by spin, and construct spin-adapted pair energies as well. The diff is mostly changes in the reference file, so the LoC count is inflated. ## Todos; - [x] Standardize `cc` pair energies. ## Checklist; - [x] `fnocc` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2568:332,test,tests,332,https://psicode.org,https://github.com/psi4/psi4/pull/2568,1,['test'],['tests']
Testability,"## Description; This PR moves the Polarizable Embedding (PE) tests using CPPE py-side in `test_cppe.py`.; The tests can now be run independently of the configure step (`ENABLE_cppe`) due to runtime detection of CPPE.; As such, the CI pipeline will run the PE tests from now on 😄 . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Move tests; - [x] Nuke old (cmake) tests. ## Questions; - [x] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2140:61,test,tests,61,https://psicode.org,https://github.com/psi4/psi4/pull/2140,8,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This PR moves the printing of the SCF pre-iteration header from `scf_iterate` (where we had to check the number of iterations to know if we needed to print) to the SCF initializer (where no checks are needed). This can and should wait until 1.5. This is part of a larger project to remove overloading of the `iterations_` variable in HF, needed to get MOM properly working. ## Questions; - [ ] Do we need to regenerate samples for this? The printing should be exactly the same except in pathological corner cases involving SOSCF instabilities at less than two iterations. ## Checklist; - [x] quick tests pass. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2247:614,test,tests,614,https://psicode.org,https://github.com/psi4/psi4/pull/2247,1,['test'],['tests']
Testability,"## Description; This PR perfects the `fcidump` interface by adding a field that stores the point group symmetry (`PNTGRP`, just to keep it in the FORTRAN spirit of ""Thou shall use no unnecessary vowels in variable names""). For example:; ```; ORBSYM=1,1,1,1,4,4,4,3,3,3,2,2,2,; ISYM=1,; PNTGRP=D2H,; ```; Why is this change necessary? In essence because with the current information it is impossible to restart a computation that uses symmetry. Without the point group information, one cannot determine the psi4 irrep labels of orbitals from the standard information contained in the FCIDUMP file (see issue #1431) because when the file is written the irreps are resorted in a way that depends on the point group. One potential issue: codes that consume FCIDUMP files produced by psi4 could encounter problems parsing the line that starts with `PNTGRP`. So I made this extra line optional via an argument passed to the `fcidump()` python function. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Add point group information to fcidump files (enabled via bool argument); - [x] Fix a bug in the function that reads fcidump files when no orbital energies are present. ## Checklist; - [x] Updated `fcidump` test. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1942:1252,test,test,1252,https://psicode.org,https://github.com/psi4/psi4/pull/1942,2,['test'],['test']
Testability,"## Description; This PR provides access to T1/T2 python side for other packages using psi4 as a library. Amplitudes will be available for symmetry C1 calculations only as the numpy shape on the T2 matrices can't be set correctly (This is similar to how mintshelper does not provide bindings for SO basis ERIs). All spin combinations of T1/T2 wil be loaded into memory, so you do not want to use this method when there is not enough memory to hold these quantities in core. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] UHF ; - [x] RHF; - [x] ROHF; - [x] Check that nirrep > 1 will raise meaningful errors. ## Checklist; - [x] UHF Test; - [x] RHF Test; - [x] ROHF Test. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1344:682,Test,Test,682,https://psicode.org,https://github.com/psi4/psi4/pull/1344,3,['Test'],['Test']
Testability,## Description; This PR refactors EFP routines such that they use the mints functions I implemented for PE a while ago.; Less code and a significant speed-up for the electric field integral evaluations. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Move `efp.py` to `solvent` folder; - [x] Refactor functions. ## Questions; - [x] Question1. ## Checklist; - [x] Tests added for any new features (already present); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2111:422,Test,Tests,422,https://psicode.org,https://github.com/psi4/psi4/pull/2111,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This PR refactors `ThreeCenterOverlapInt` using Libint2. Even though one cannot compute these integrals directly, it's possible to obtain them through the delta function: `<phi(r_1) phi(r_1)| delta(r_1 - r_2) | phi(r_2) 1>`. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] 3-center overlap integrals with L2. ## Checklist; - [x] Tests added for any new features (SAPT-DFT still working, Python API via `MintsHelper` tested locally 👍); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2489:404,Test,Tests,404,https://psicode.org,https://github.com/psi4/psi4/pull/2489,4,"['Test', 'test']","['Tests', 'tested', 'tests']"
Testability,"## Description; This PR refactors angular momentum integrals (`AngularMomentumInt`) using the McMurchie-Davidson scheme. It is the first PR of a series to replace most of the existing OS86 code with M-D (#2414). I've chosen the angular momentum integrals because they are really simple and only require the E matrix (Hermite-to-Cartesian conversion factors). ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] `AngularMomentumInt` w/ M-D scheme. ## Questions; - [x] Is it worth to pre-allocate the E-matrix? This would require some boilerplate code, which could be worth packing into a small class that all future M-D integrals will inherit from?. ## Checklist; - [x] Tests added for any new features (consistency check against Psi4 v1.5); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2483:724,Test,Tests,724,https://psicode.org,https://github.com/psi4/psi4/pull/2483,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This PR refactors the existing `PseudospectralInts` (untested, unused, but maybe needed at some point, see #2414); with some refactoring: The ""old"" `PseudospectralInts` did compute `<p| 1/R |q>` *or* `<p| erf(omega*R)/R |q>` with `R = |r -r_c|` for some given point/origin `r_c`. . - The class `PseudospectralInts` is removed. To compute the ""normal"" Coulomb potential at a given origin, one can use either `MultipolePotentialInt` (with `max_k=0`) *OR* `ElectrostaticInt`.; - To compute the erf-attenuated Coulomb potential, I created a new class named `PotentialErfInt` to better reflect the actual ""property integral"" being computed. For testing purposes, I also added the erfc-attenuated Coulomb potential (`PotentialErfComplementInt`), maybe they're also useful at some point. Both use L2 under the hood.; - The point `r_c` is canonically set with `set_origin`.; - I've added the new integrals to `MintsHelper` and the Python API.; - Tests are added. (`erf(infinity*R)/R = 1/R`, `erfc(0*R)/R = 1/R`, and `1/R - erf(R)/R - erfc(R)/R = 0`). This is a preparation to get rid of most of the remaining OS86 code as discussed in #2414.; Ping @loriab @zachglick @andysim . ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2473:656,test,testing,656,https://psicode.org,https://github.com/psi4/psi4/pull/2473,5,"['Test', 'test']","['Tests', 'testing', 'tests']"
Testability,"## Description; This PR removes Psi's internal ADC module, so that all ADC calculations are run through `adcc` from now on.; Closes #1033. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is detined for the release notes. May be empty. -->; - [x] remove built-in ADC module (does not remove any ADC features), closing #1033. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] remove built-in ADC code; - [x] update `proc.py`; - [x] update docs. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2737:749,Test,Tests,749,https://psicode.org,https://github.com/psi4/psi4/pull/2737,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; This PR removes duplicated code in Psi4 so that orthogonalization of the basis is handled in one place. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] No code duplication; - [x] Everything works as before. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1759:324,Test,Tests,324,https://psicode.org,https://github.com/psi4/psi4/pull/1759,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This PR removes several `new`, `delete`, `block_matrix`, and `free_block` calls in `cubeprop`. I was hoping to eliminate all such calls in order to use `cubeprop` as a test case to study memory management in Psi, but I can't finish the job without refactoring `BlockOPoints`, which is far outside the scope of the PR. ## Checklist; - [x] `cubeprop` tests still pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2345:184,test,test,184,https://psicode.org,https://github.com/psi4/psi4/pull/2345,2,['test'],"['test', 'tests']"
Testability,"## Description; This PR removes some convergence checks in the `dct` module that are redundant (when formulated correctly) and currently not implemented correctly. In the current `dct` code, my threaded computations with near linear dependencies were taking a variable number of iterations to converge, due to the condition `update_scf_density_RHF() < orbitals_threshold_` being false. That check is _intended_ to enforce convergence of the orbitals, which change iteration-to-iteration. `update_SCF_density_RHF` returns a measure of how much the reference density changed but does not treat it with an orthogonalizer, so in the near linearly-dependent case, numerical noise leads to the computation proceeding even after all other convergence metrics are flat. Given the choice between fixing the check or removing it, this PR removes it.; * In the case where orbitals are optimized to _satisfy a commutator equation_, all of our orbital convergence metrics are motivated by SCF. We already have the SCF check for small orbital residual elsewhere in the code. We don't check that the absolute change in the density is small in the SCF case, so we shouldn't check it here, either.; * In the case where orbitals are optimized to _minimize the energy_, there is no theoretical justification for this check. We have existing checks that the residual of the orbital gradient is small. ## Todos; - [x] Removes an unnecessary, buggy `dct` convergence metric. ## Checklist; - [x] `dct` tests still pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2381:1479,test,tests,1479,https://psicode.org,https://github.com/psi4/psi4/pull/2381,1,['test'],['tests']
Testability,"## Description; This PR removes some unused code from the `dct` module. Most importantly for me, this gets rid of a difficult-to-follow function and removes an IWL call. I count all three of those as victories for code cleanup. Expect another PR to replace some IWL in `dct` with `libdpd`, but that depends on the timing tests. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Removes unused code. ## Checklist; - [x] DCT tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2168:321,test,tests,321,https://psicode.org,https://github.com/psi4/psi4/pull/2168,2,['test'],['tests']
Testability,## Description; This PR removes the `dpd.gbl` file from `libdpd`. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1254:86,Test,Tests,86,https://psicode.org,https://github.com/psi4/psi4/pull/1254,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This PR removes the files `PSIF_CHKPT` and `PSIF_OLD_CHKPT`, as well as references to them elsewhere in the docs and the code. These were unused and caused some confusion in a [recent forum topic](http://forum.psicode.org/t/cannot-retain-scratch-file/2181/4). ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Remove `PSIF_CHKPT` and `PSIF_OLD_CHKPT`. ## Checklist; - [x] [`ctest` passes](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2186:542,test,tests,542,https://psicode.org,https://github.com/psi4/psi4/pull/2186,1,['test'],['tests']
Testability,"## Description; This PR removes ~300 lines worth of duplicate code in `dct`'s density-fitting, as well as some class variables that had no business being class variables. This is in preparation for an upcoming PR to fix a longstanding bug in the density-fitted code. ## Todos; - [x] Code cleaned. ## Checklist; - [x] DCT tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2078:321,test,tests,321,https://psicode.org,https://github.com/psi4/psi4/pull/2078,1,['test'],['tests']
Testability,## Description; This PR replaces `new`/`delete` in `lib3index/fittingmetric.cc` with `std::vector` per task in #2412 . ## Checklist; - [x] Quick tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2417:145,test,tests,145,https://psicode.org,https://github.com/psi4/psi4/pull/2417,1,['test'],['tests']
Testability,"## Description; This PR replaces several `int *` types in `ccdensity` with `Dimension` or `std::vector<int>` objects as appropriate. In addition to eliminating manual memory management and making the code more readable, easy access to `Dimension` objects will allow for a subsequent PR to construct `Matrix` objects directly, replacing the current `block_matrix` representation of objects. This is PR 2 in an ongoing series to make `ccdensity` compatible with the standard `Matrix` and `Wavefunction` machinery used elsewhere in Psi. Obligatory @lothian notification. ## Checklist; - [x] `cc` tests still pass. ## Status; - [x] Ready for review; - [ ] Ready for merge - to be explicit, Lori advised me **not** to merge until I had manually checked the `cc` tests, since those tests run by perl script",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2438:593,test,tests,593,https://psicode.org,https://github.com/psi4/psi4/pull/2438,3,['test'],['tests']
Testability,"## Description; This PR reverts the behaviour of standard `bsse_type='cp'` calculations to calculate all fragments (monomers) in the full (dimer) basis only. The PR also fixes printing interaction energies disguised as total energies in those tables. When a calculation is requested with `bsse_type='cp', return_total_data=True`, an `bsse_type=['cp', 'nocp']` is automatically performed and the total energies are calculated & returned. With `bsse_type=['cp','nocp']` (and `return_total_data` unspecified or `False`), the total energies are calculated, but the interaction energies are returned. The PR fixes #1691 . ## Checklist; - [x] Tests updated; - [x] `ctest -L nbody` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2221:637,Test,Tests,637,https://psicode.org,https://github.com/psi4/psi4/pull/2221,1,['Test'],['Tests']
Testability,## Description; This PR solves #1666. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] In-core algorithm used in MemDFJK if there's enough memory; - [x] Printout matches what the algorithm is doing. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1667:299,Test,Tests,299,https://psicode.org,https://github.com/psi4/psi4/pull/1667,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This PR threads the calculation of one-electron potential integrals from external point charges. It replaces a call to `OneBodyAOInt.compute()`, which is not threaded and computes the full N-by-N matrix, with a new threaded `for` loop over pairs of shells so that only the lower triangle of the symmetric matrix is calculated. Here's a quick benchmark of times for a SAPT0/jun-cc-pVDZ calculation of a nucleic acid base pair (144 electrons, 425 basis functions, 1879 auxiliary basis functions) with 7393 external point charges on an Intel Xeon E5-2695v4 with 18 cores in each of 2 sockets:. Cores | Old code, no charges | Old code, with charges | New code, no charges | New code, with charges; ----- | ------- | ------- | ------- | -------; 1 | 1.00 | 1.00 | 1.00 | 1.00; 2 | 1.65 | 1.08 | 1.71 | 1.68; 4 | 2.43 | 1.14 | 2.64 | 2.61; 8 | 3.25 | 1.20 | 3.08 | 4.01; 16 | 5.29 | 1.24 | 2.61 | 2.90; 32 | 5.36 | 1.23 | 4.24 | 7.04. Each column shows the speedup relative to the calculation with 1 core (i.e. t_1 / t_c). With charges, the performance of the old code scales poorly with additional cores; the performance of the new code matches or exceeds the scaling of the calculation without charges. ## Questions; - [x] The resulting matrix `V_charge` is always symmetric in my tests. Are there any cases where this would not be true?; - [ ] I opted to replace `force_cartesian_ ? shell(i).ncartesian() : shell(i).nfunction()` from `OneBodyAOInt.compute()` with `shell(i).nfunction()`. Are there any cases where `force_cartesian_` needs to be checked for this potential?. ## Checklist; - [x] Passes smoke tests and `fsapt-ext` test added in #1608. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1946:358,benchmark,benchmark,358,https://psicode.org,https://github.com/psi4/psi4/pull/1946,4,"['benchmark', 'test']","['benchmark', 'test', 'tests']"
Testability,"## Description; This PR updates options for CPPE (new release is out, including linear-scaling FMM); and adds PE(ECP) repulsive potentials to avoid electron spill-out (https://doi.org/10.1021/acs.jctc.9b01162). ~**Still work in progress....**~. Thanks @loriab for helping with the basis set customization!. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] options for FMM; - [x] bump CPPE version; - [x] option to enable PE(ECP); - [x] add basis set file for ECPs; - [x] add tests for PE(ECP). ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2025:533,test,tests,533,https://psicode.org,https://github.com/psi4/psi4/pull/2025,4,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This PR updates the MBIS documentation to match the state of the code. Missing logic to reshape the mbis multipoles was also added, which previous tests don't check for, but is necessary when running psi4's mbis through qcengine. ## Todos; - [x] Fixed docs; - [x] Fixed / cleaned up the handling of multipole matrix shapes. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2035:95,log,logic,95,https://psicode.org,https://github.com/psi4/psi4/pull/2035,2,"['log', 'test']","['logic', 'tests']"
Testability,## Description; This PR updates the MDI integration to support version 1.2 of the MDI Library. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2160:115,Test,Tests,115,https://psicode.org,https://github.com/psi4/psi4/pull/2160,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This PR updates the `cppe` interface code (including option handling) to the newest version `v0.2.1` (major performance improvement 🚀). . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Updated interface, options; - [x] Add options for Thole damping. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1922:368,Test,Tests,368,https://psicode.org,https://github.com/psi4/psi4/pull/1922,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This PR updates the documentation to reflect two aspects of the JK code:. 1. It mentions the `SCF_TYPE` naming option added as per https://github.com/psi4/psi4/pull/3001. ; 2. It provides a warning regarding the current defaults for the COSX grids. From my testing, these grids are very crude in practical use, and cannot be expected to be accurate if high (e.g., chemical) accuracy is desired. The documentation is updated to reflect this. ## User API & Changelog headlines; - [X] N/A. ## Dev notes & details; - [X] Updates documentation regarding `SCF_TYPE` selection and COSX grid issues. ## Questions; - [X] N/A. ## TODO; - [X] Recommend tighter grid settings in contrast to the defaults. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3079:273,test,testing,273,https://psicode.org,https://github.com/psi4/psi4/pull/3079,4,"['Test', 'test']","['Tests', 'testing', 'tests']"
Testability,"## Description; This PR uses `axpy` and `memcpy` throughout `libdiis`, for the sake of fairer comparisons when I'm doing speed profiling. ## Checklist; - [x] quick tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge **SQUASH**",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2355:164,test,tests,164,https://psicode.org,https://github.com/psi4/psi4/pull/2355,1,['test'],['tests']
Testability,"## Description; This PR was motivated by a comment by @andyj10224 in PR https://github.com/psi4/psi4/pull/3150, pointing out that implementing method-specific setters/getters in `SplitJK` could more elegantly and sensibly be performed via downcasting. While the comment in that PR addressed knobs specific to `snLinK`, it is also applicable to other methods within the CompositeJK framework. This PR fixes that, replacing all instances of method-specific setters/getters in the base `SplitJK` class with downcasting to call the needed function at the derived-class level. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [X] Renames `COSK::set_COSX_grid` and `COSK::get_COSX_grid` functions to `COSK::set_grid` and `COSK::get_grid`, respectively.; - [X] Removes `SplitJK::set_COSX_grid` and `SplitJK::get_COSX_grid` functions. . ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [X] Removes `SplitJK::set_COSX_grid` and `SplitJK::get_COSX_grid` functions, localizing their presence to the `COSK` class.; - [X] Replaces utilizations of the above with usage of downcasting in the `CompositeJK::set_COSX_grid` and `CompositeJK::get_COSX_grid` functions. ## Questions; - [X] N/A. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3183:1502,Test,Tests,1502,https://psicode.org,https://github.com/psi4/psi4/pull/3183,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This PR will expose the `PCM` object in Psi4 out to Python, similarly to #861, but will bring it to fruition within the Python-side SCF iteration scheme. The `PCM` object wraps the PCMSolver library and offers one method: `compute_PCM_terms` to calculate the polarization energy **and** the Fock matrix contributions due to the continuum. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Clean-up the `PCM` object and corresponding sources:; * Forward-declare as much stuff as possible instaed on `include`-ing; * Remove raw pointers in favor of `std::vector`, `Vector` or `std::shared_ptr`; * Use a [scoped `enum`](http://en.cppreference.com/w/cpp/language/enum) instead of an [unscoped `enum`](http://en.cppreference.com/w/cpp/language/enum); - [x] Moved `HF::print_energies()` Py-side; - [x] Mirror changes introduced in #896 ; - [x] Add tests for density-fitted SCFs (thanks @CDSherrill for pointing this out); * **User-Facing for Release Notes**; - [x] Exposing the `PCM` object to Python.; - [x] Restoring PCM functionality with Py-side iterations.; - [ ] Document behavior for gradients (see question). ## Questions; - @andysim and/or @lothian, the file [psi4/libmints/integral.h](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/integral.h#L487) has a comment `/// Want to change the name of this after the PCM dust settles`. Do you remember what was the intention there?; - The electrostatic potential and apparent surface charge vectors are now dimensioned using a `Dimension` object that keeps track of how many cavity points per irrep there are. This is one step to get PCM fully functional with point group symmetry. It seems to me the integrals are always calculated using C1. How can I get them to be calculated with symmetry?; - As (probably not very clearly) noted in the manual, **analytical gradients including PCM are NOT available**. Should there be a stop in the code when such a re",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/878:923,test,tests,923,https://psicode.org,https://github.com/psi4/psi4/pull/878,1,['test'],['tests']
Testability,"## Description; This PR's purpose is to add the Polarizable Embedding (PE) model to Psi4. In the [PE](https://pubs.acs.org/doi/10.1021/ct1003803) model, the environment is modeled by a multi-center multipole expansion with dipole-dipole polarizabilities placed at the expansion sites (similar to EFP). A tutorial on PE in general can be found [here](https://onlinelibrary.wiley.com/doi/full/10.1002/qua.25717). I added the PE model through my [CPPE](https://github.com/maxscheurer/cppe) library on the Python level. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Ground-state (HF and DFT) SCF calculations with PE; ~~- [ ] Perturbative state-specific (ptSS) corrections for EOM-CC calculations~~ can be done in user code on the Python layer; - [x] rebase once #1657 is merged; - [x] include `cppe` on the Python layer; - [x] remove C++ code; - [x] cleanup CMake; - [x] pin a released CPPE version; - [x] bump pybind to v2.3.0; - [x] simple documentation. ## Questions; - [x] The tests need a _potential_ input file (`*.pot`), currently residing in the `tests/cppe/scf-hf` folder. The path specification I have to put in the input file is currently a bit weird because the tests are not run from inside the test directory. Is there any nice solution to this issue?. ## Checklist; - [x] Tests added for any new features (SCF); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1401:1030,test,tests,1030,https://psicode.org,https://github.com/psi4/psi4/pull/1401,7,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; This _will eventually_ conclude the standardizing of excited state variable names across all of Psi and the docs. Right now, this just standardizes TD-DFT psivars for final comments. This is a short-and-sweet spec of the new standard that I'm putting up for comments. (Largely from @loriab). ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Excited state psivar final cleanup. ## Checklist; - [x] TDDFT tests pass; - [x] ADC tests pass; - [x] EOM tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2569:477,test,tests,477,https://psicode.org,https://github.com/psi4/psi4/pull/2569,3,['test'],['tests']
Testability,## Description; This addresses at least one of the problems (see details below) associated with #2279. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Fix #2279. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2283:241,Test,Tests,241,https://psicode.org,https://github.com/psi4/psi4/pull/2283,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This adds further output to TDSCF and TDDFT calculations, including electric TDM vectors and the excitations and deexcitations that contribute to each excited state. Currently, excitations / deexcitations are only printed for C1 symmetry. A new option TDSCF_COEFF_CUTOFF (default = 0.1) has been added that sets the cutoff for printing excitation / deexcitation coefficients. ## Todos; - [ ] Add support for symmetry; - [ ] Add further output (e.g. other transition dipoles, etc. I've only added what I'm usually after from these calculations). ## Questions; - [ ] How to construct excitations / deexcitations when symmetry is used?; - [ ] Does documentation for new options get built automatically or do I need to add something somewhere?. ## Checklist; - [ ] Further comparisons could be added to the tdscf tests, e.g. TDM vectors; - [ ] All tdscf-? tests pass (although the output will be longer than the reference output; other tests still running - slow test machine - but should run as expected) . ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2156:825,test,tests,825,https://psicode.org,https://github.com/psi4/psi4/pull/2156,4,['test'],"['test', 'tests']"
Testability,"## Description; This adds new DF basis files for dzvp. dgauss-dzvp-autoaux was generated using the autoaux program (courtesy Susi Lehtola). This is a short-term solution for the current problem that there is no working DF basis for dzvp, as it is an all-electron basis for elements going beyond Kr. dgauss-dzvp-mix contains a mixture of the previous default, def2-qzvpp-jkfit for H-Br, and dgauss-dzvp-autoaux for heavier elements. The purpose of this DF basis is to avoid the performance decrease (without affecting accuracy) that comes with using dgauss-dzvp-autoaux for all elements. `basislistother.py` has also been updated to use dgauss-dzvp-mix for jkfit and dgauss-dzvp-autoaux for rifit. ## Status; - [x] Ready for review; - [x] Ready for merge. ## Benchmark of basis sets and DF basis sets for conformational energies; [combined-results.pdf](https://github.com/psi4/psi4/files/6167929/combined-results.pdf)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2134:758,Benchmark,Benchmark,758,https://psicode.org,https://github.com/psi4/psi4/pull/2134,1,['Benchmark'],['Benchmark']
Testability,"## Description; This autobuilds the docs and deploys them to a netlify site, https://psi4manual.netlify.app/index.html. It also starts correcting all the format and bad link warnings. Started with ~300 and down to 15, so ready to start reviewing. Once clean, we can turn on warnings->errors and avert future beaks. This hasn't started looking at docs content, only docs format errors. No linkchecker run yet either. GHA-wise, this is for every master commit. There'll be other GHA to run similarly on PRs so that ppl can preview docs changes or note when changes broke docs. But that'll need different permissions. This seems a good place to start. I don't think this needs minute review -- save your energies for real code. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Any rst files added that I shouldn't have?. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge SQUASH",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2144:942,Test,Tests,942,https://psicode.org,https://github.com/psi4/psi4/pull/2144,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; This branch is just a sandbox for me to query / update the Windows Azure config. ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2018:38,sandbox,sandbox,38,https://psicode.org,https://github.com/psi4/psi4/pull/2018,1,['sandbox'],['sandbox']
Testability,"## Description; This change allows F_DGEMV to be called (when using plugins, for example) without modifying the source code in fnocc/blas.cc and recompiling Psi4. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Feature1; * **User-Facing for Release Notes**; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1046:392,Test,Tests,392,https://psicode.org,https://github.com/psi4/psi4/pull/1046,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This cleans up a matrix before diagonalisation by removing extremely small values arising from numerical accuracy during matrix generation. Diagonalisation of matrices that have off-diagonal elements of ca <10-14 with DSYEV appears to lead to unexpected eigenvalues, which ultimately lead to different DFT grid generation on different processor types that show subtly different behaviour with numerical accuracy. Ultimately, this enables the dftd3-version test to pass on core i7-5930X processors (all Haswell?) where before it failed due to generation of an odd DFT grid compared with other processors. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - I don't think this should affect anything other than within OrientationMgr but the main developers will know better!; * **User-Facing for Release Notes**; - None. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/678:472,test,test,472,https://psicode.org,https://github.com/psi4/psi4/pull/678,1,['test'],['test']
Testability,"## Description; This code is an implementation of the CFMM Method (C.A. White et. al 1994) for linear-scaling building of the J matrix, used in HF, DFT, and SAPT. Reference Paper: https://www.sciencedirect.com/science/article/pii/0009261494011281. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Implements a Low Scaling J matrix build that is competitive with traditional DirectJK J matrix build, giving a complementing linear scaling algorithm to Linear Exchange (LinK).; - [x] Implements a new and more efficient multipoles library in Psi4 (in libfmm as multipoles_helper). ## Questions; - [ ] Do we need to make a new JK class to handle new methods like CFMM and LinK? (Like LinearJK : public JK). ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge. ## Data; (Comparing the J build in CFMM (Waterclusters, 6-31G*) to a traditional DirectJK build of the J and K matrices); ![Comparative CFMM Watercluster Results 10-02-2021](https://user-images.githubusercontent.com/60559795/135762894-9a9eb837-731e-4f12-92d7-932b4918c602.png). (Looking at the CFMM errors over system size (using multipole order 10, only considering systems that converge within 8 iterations); ![CFMM Errors (New CFMM Code)](https://user-images.githubusercontent.com/60559795/135762954-e672f7cb-e818-439a-b2bf-3d84dc1aaa7e.png). (Looking how the CFMM total J time compares to the total wall time [No LinK is used]); (NOTE: The near field calculations take up a majority of the J build time, as multipoles are relatively free); ![CFMM Watercluster Results 10-02-2021](https://user-images.githubusercontent.com/60559795/135762959-71ec2078-79bc-48d8-b418-5689f1045e48.png)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2311:781,Test,Tests,781,https://psicode.org,https://github.com/psi4/psi4/pull/2311,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This code removes `oeprop`'s specialized dipole/quadrupole functions in favor of the general multipole function. The output for dipoles _does_ change. I can change the printout if there's demand for it, but I don't care either way. I just want to have less code to mess with for the next stage of excited state variable cleanup. ### Old Function; ```; Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]. Properties computed using the SCF density matrix. Nuclear Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: 0.9783. Electronic Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: -0.1680. Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: 0.8103 Total: 0.8103. Dipole Moment: [D]; X: 0.0000 Y: 0.0000 Z: 2.0595 Total: 2.0595; ```. ### New Function; See [here](https://github.com/psi4/psi4/pull/2485#issuecomment-1077774801). ## Checklist; - [x] Quick tests pass; - [x] Properties pass . ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2485:871,test,tests,871,https://psicode.org,https://github.com/psi4/psi4/pull/2485,1,['test'],['tests']
Testability,"## Description; This continues #3056, which was off by a directory level. This time I remembered the backup trigger branch, so it's tested. ## User API & Changelog headlines. ## Dev notes & details; - [x] Now build docs for `1.{Y}.x` branches, too, as well as `master`. Save them to a dir at psi4/psi4docs according to branch name, so easy to reposition. . ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3058:132,test,tested,132,https://psicode.org,https://github.com/psi4/psi4/pull/3058,1,['test'],['tested']
Testability,"## Description; This fixes #2452. I export the correct value TD-LEFT EIGENVECTOR BETA and do not overwrite TD-LEFT EIGENVECTOR ALPHA anymore. ## Checklist; I did not rerun the tests, as the fix is trivial. I did not find pre-existing unittests referencing TD-LEFT EIGENVECTOR ALPHA or TD-LEFT EIGENVECTOR BETA. ## Status; - [X] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2453:176,test,tests,176,https://psicode.org,https://github.com/psi4/psi4/pull/2453,1,['test'],['tests']
Testability,"## Description; This fixes Example 2 of #2231. DF-DCT no longer segfaults in the presence of linear dependencies. Even with this merged in, #2231 should stay open until I've had a chance to do some more thorough testing of the module. This is, once again, a stand-alone bugfix. ## Questions; - [x] Test case added! ~~It would be good for me to write a test case for everything I check as part of #2231. Should this live in ctests or pytests? I'm not clear on test best practices at this point in Psi development, since we want to mover over to pytests eventually. Even then, _right now_ is a bad time to write the test since #2232 will change the reference output.~~. ## Checklist; - [x] `ctest -R dct` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2233:212,test,testing,212,https://psicode.org,https://github.com/psi4/psi4/pull/2233,5,"['Test', 'test']","['Test', 'test', 'testing']"
Testability,"## Description; This fixes a bug in ""options"" handling - previously, options requested in CBS() stage were not stashed properly, as OptionsStash requires an array of arrays with option names, instead of an array of option names. I've also added ""options_lo"" keyword, so that one can do, say, `""cc_type"": ""conv""` calculation in an otherwise `""cc_type"": ""df""` recipe, or as shown in the test, a frozen-core stage in an all-electron recipe. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fixed ""options"" handling; - [x] Implemented ""options_lo"" keyword. ## Checklist; - [x] Tests added for any new features; - [x] All or relevant fraction of full tests run: `ctest -L cbs` works fine. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1585:385,test,test,385,https://psicode.org,https://github.com/psi4/psi4/pull/1585,3,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,## Description; This fixes a bug in the load_plugin function that incorrectly converted `_` to `-` instead of the opposite. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix a bug. ## Checklist; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1428:287,test,tests,287,https://psicode.org,https://github.com/psi4/psi4/pull/1428,2,['test'],['tests']
Testability,"## Description; This follows (and includes #1213), so that one should be merged and this one rebased for a smaller PR to examine. Whereas that one switches out physconst py-side and c-side (big effect) and periodictable c-side (no effect), this one deletes all physconst and periodictable sources py-side and starts pulling from qcelemental. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] driver-side physconst --> no change; - [x] driver-side psifiles --> `psi4.driver.constants.PSIF_` --> `psi4.driver.psif.PSIF_`; - [x] psiapi --> can't `from psi4.driver.constants import c`, instead `psi4.driver.constants.c` or `c = psi4.driver.constants.c`; - [x] psithon --> no change; - [x] qcdb --> `psi_c` --> `qcel.constants.c`; - [x] put in a basic connection to cmake. it'll clone it for you and install next to psi (which means pythonpath picks it up). ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1234:922,Test,Tests,922,https://psicode.org,https://github.com/psi4/psi4/pull/1234,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This is No. 10 of the DDD series, #1351. ## Todos; - mostly a few little differences with ddd that will reduce the changed line overhead; - [x] add logging printing, minimize imports; - [x] `mol = core.Molecule.from_schema(molschemus, nonphysical=True)` allows freq-masses test to run in ddd. nonphysical flag allows user-set atomic masses outside the known isotope range. the schema runner shouldn't be the block to this.; - [x] in tests add some alternate ref values. sometimes these are conventional, which can be handy reusing a test in a non-df program; - [x] adding deprecation warnings is good, but we don't often actually delete the fn promptly at the version we say it will stop working at. this is harmless, in my opinion, as it gives people longer to adapt, and developers can clear away the old fns when they actually become inconvenient. to better reflect this state of affairs, the standard message ""Using blah is deprecated, and in version it will stop working"" has been changed to ""Using blah is deprecated, and as soon as version it will stop working"". this also removes the temptation to keep incrementing <version>, which gives a misleading impression about how long ago users were warned. have backtracked on run_json accordingly from 1.7 to 1.5. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2557:164,log,logging,164,https://psicode.org,https://github.com/psi4/psi4/pull/2557,7,"['Test', 'log', 'test']","['Tests', 'logging', 'test', 'tests']"
Testability,"## Description; This is No. 5 of the DDD series, #1351. ## Todos; - [x] Add `psi4 --module` for find pymod. qcng already tries to use it; - [x] Add another mode to `prepare_options_for_modules` that instead of figuring out what options are active in a module (mediated mode, used previously for sow/reap, I think) now records the settings for reset (state mode, used in DDD). Added a context manager to ""hold and restore"" the options state.; - [x] Add `run_qcschema(..., postclean)` option that handles the trouble when this is called *from Psi4* of deleting the parent session's output file.; - [x] Be tolerant of missing files when cleaning numpy files. I don't remember why/if this was necessary, but on the whole, a missing numpy file isn't worth erroring on.; - [x] Aboid extra '/' in paths from psio. I don't remember if this was fixing an error or just aesthetic.; - [x] docstrings; - [x] ADDED: another attempt to fix Win conda package. ## Checklist; - [x] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2530:966,Test,Tests,966,https://psicode.org,https://github.com/psi4/psi4/pull/2530,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This is No. 8 of the DDD series, #1351. ## Todos; - [x] qcvars `FINDIF NUMBER` and `NBODY NUMBER` are handy to confirm those wrappers are planning correctly. This PR forward-ports more tests of those vars; - [x] two more detailed nbody tests are forward-ported. one is a copy of a ctest only run through qcschema. the other checks the total vs ie return that was wrong in nbody for a while and solved by #2221.; - [x] add ""nbody"" label/mark to ctests and pytests systematically. make all nbody tests runable through pytest. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2544:201,test,tests,201,https://psicode.org,https://github.com/psi4/psi4/pull/2544,6,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This is a continuation of @bennybp's #587 that I'd like to wrap up, but the gdma Travis isssue needs fixing. We can work out merge order later. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] everything #587 does; - [x] changes the ERD warning, updates the docs, adds test case; * **User-Facing for Release Notes**; - [x] ERD integrals now work for far more types of systems. Previously it was only direct, conventional HF. Now works for most all energies (except LRC DFT). Does not work for gradients, but those are disabled. ## Questions; - [x] Waiting for a clean Travis test (gdma culprit), then ready to go. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/605:351,test,test,351,https://psicode.org,https://github.com/psi4/psi4/pull/605,2,['test'],['test']
Testability,"## Description; This is a first pass at implementing serialization of the Wavefunction object as suggested by @dgasmith in #887 . This functionality allows a wavefunction to be read to or written from a file:. closes #887 . ```; # get a wavefunction from some calculation; e, wfn_old = energy('mp2', return_wfn=True). # write the wavefunction to file; Wavefunction.to_file(wfn_old, filename). # ...; # other calculations may occur; # ... # read the wavefunction from file; wfn_new = Wavefunction.from_file(filename); ```. The wavefunction can also be stored directly in memory as a python dictionary:; ```; # write the wavefunction to file; wfn_dict = Wavefunction.to_file(wfn_old). # ...; # other calculations may occur; # ... # read the wavefunction from file; wfn_new = Wavefunction.from_file(wfn_dict); ```. In this code snippet, `wfn_new` and `wfn_old` should be identical (by value, not reference). A test case was added that corresponds to this example. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Read/Write Wavefunction object to file; - [x] Serialize a few more variables (PCM related stuff, etc.); - [x] ~~Deal with Wavefunction inheritance~~ (future PR). ## Questions; - [x] Does anyone have thoughts on the file naming scheme? Currently, the user specifies the filename in the call and a `.npy` file is generated in the working directory. This allows the user to have an arbitrary number of saved wavefunctions that persist between jobs. Alternatively, using a reserved filename (similar the `scf guess` procedure) might be better because users wouldn't have to work with filenames at all, but they would be limited to a single wavefunction.; - [x] ~~How should classes that are derived from Wavefunction (like CIWavefunction) be dealt with?~~; - [ ] Is everything implemented in a reasonable location? ; - [ ] Any inconsistencies in format/style?. ## Checklist; - [x] Added Test `serial-wfn`; - [ ] [All or relevant fraction of full ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1304:907,test,test,907,https://psicode.org,https://github.com/psi4/psi4/pull/1304,1,['test'],['test']
Testability,"## Description; This is a first step towards DFT Hessians. The code seems to be correct based on initial tests, but this needs a lot more stress testing. The emphasis here is correctness over efficiency, and I just want to get all of the nasty CPKS infrastructure in place before worrying about making it fast and memory efficient. The symmetric stretch of water is off by 2.8cm-1 (less than 1%), but there are a number of possible causes: 1) noise in the finite difference reference, which is unlikely given my experiments with 5 point FDs and different step sizes 2) the lack of grid weight derivatives, also unlikely because the error doesn't decrease when I use a huge grid 3) the filtering of the functional derivatives in areas of small density. I think number 3) is most likely, but it's also possible that there's something wrong in the code still. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Adds analytic DFT hessians for LSDA functionals (RKS wavefunctions only). ## Questions; - [x] How should we handle the procrouting? We could explicitly list all LSDA type functionals, but that would not be good for custom functionals. I'm sure there's a better way that I'm just not familiar with. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run]; ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1664:105,test,tests,105,https://psicode.org,https://github.com/psi4/psi4/pull/1664,4,"['Test', 'test']","['Tests', 'testing', 'tests']"
Testability,"## Description; This is a more elegant solution to the test failures fixed in #2445. When doing ADIIS/EDIIS, you need to solve a constrained quadratic programming problem. Hu and Yang's ADIIS paper solved the equations by doing a change of variables and throwing the problem at BFGS. Instead, I threw the constrained problem at SLSQP, which is naturally able to incorporate these constraints. All tests pass with no modifications now, and not including the variable transformation simplifies the equations. _What About Other Packages?_; PySCF follows Hu and Yang, and it isn't consistently able to solve the equations. Our friends at HORTON have [a custom solver for such problems](https://github.com/theochem/horton/blob/master/horton/meanfield/scf_ediis.py#L137-L150), but as this problem isn't positive or negative semi-definite, their solver is on the expensive side. ## Checklist; - [x] Passes `ctest` locally. Test suite will cover `pytest. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2449:55,test,test,55,https://psicode.org,https://github.com/psi4/psi4/pull/2449,3,"['Test', 'test']","['Test', 'test', 'tests']"
Testability,"## Description; This is a part of *Psi4* porting to Windows (#933). Add options to *Azure* pipeline to build a optimized *Psi4* with custom *Python* version. ~~**Depends on #1527**~~. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Add an option to trigger optimized builds; - [x] Add an option to choose *Python* version; - [x] https://dev.azure.com/psi4/psi4 pipeline have to be configured to provide the following variables:; - `cmake.build_type` with default `Debug` (settable at queuing time); - `python.version` with default `3.6` (settable at queuing time). ## Questions; - [x] For the optimized builds, `MAX_AM_ERI` is set 8. -- 8 is enough.; - [x] Python 3.5 isn't supported. Some dependencies are broken. -- Python 3.5 is dropped. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1539:813,Test,Tests,813,https://psicode.org,https://github.com/psi4/psi4/pull/1539,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This is a part of *Psi4* porting to Windows (#933). Add options to *Azure* pipeline to run all the tests. This can be used after significant changes and before release. This can be used only by users, who have permissions to queue jobs manually on https://dev.azure.com/psi4/psi4 or have their own *Azure* pipelines (e.g. https://dev.azure.com/raimisg/psi4). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Add an option to trigger all ctests; - [x] Add an option to trigger all pytests; - [x] https://dev.azure.com/psi4/psi4 pipeline have to be configured to provide the following variables:; - `ctest.type` with default `quick` (settable at queuing time); - `pytest.type` with default `quick` (settable at queuing time). ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1527:115,test,tests,115,https://psicode.org,https://github.com/psi4/psi4/pull/1527,4,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This is a part of *Psi4* porting to Windows (#933). The last element of `array` is `array[n-1]`, so the access of `array[n]` is not correct:; https://github.com/psi4/psi4/blob/62bb956ccfb38cad1bef7e6227aac70ddb1172f7/psi4/src/psi4/libmoinfo/moinfo_base.cc#L281-L285; It is better to use pointer arithmetics: `array + n`. This is not a bug, just it gives a false positive in memory error detection. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix memory error in `MOInfoBase::convert_int_array_to_vector`. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1480:597,Test,Tests,597,https://psicode.org,https://github.com/psi4/psi4/pull/1480,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This is a part of *Psi4* porting to Windows (#933). The size `ref_wfn.frzcpi()` is not `nirreps_ref` in `psimrcc-fd-freq2` test:; https://github.com/psi4/psi4/blob/5c0e495bdd3042795d8e39fe250ec153c4d236e9/psi4/src/psi4/libmoinfo/moinfo.cc#L257; It makes `convert_int_array_to_vector` to access invalid memory. In the past, I replaced `nirreps` with `nirreps_ref` to solve another problem #1427 and this one became visible after fixing #1480. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Demonstrate a memory error in `psi::MOInfo::read_mo_spaces`; - [x] Fix the memory error in `psi::MOInfo::read_mo_spaces`. ## Questions; - [x] I'm lacking enough understanding of the code to fix, so just highlighting the problem. Who could help?. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1521:139,test,test,139,https://psicode.org,https://github.com/psi4/psi4/pull/1521,4,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; This is a part of *Psi4* porting to Windows (#933). The size of `aQT_` is `nmo_`. In `cookbook-rohf-orb-rot` test, `aPitzerCount` exceeds it:; https://github.com/psi4/psi4/blob/96296f1e3740b348bd207aa2ed0e3568e723a5a1/psi4/src/psi4/libtrans/integraltransform_moinfo.cc#L209-L212. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Demonstrate memory error in `psi::IntegralTransform::process_spaces`; - [x] Fix memory error in `psi::IntegralTransform::process_spaces`. ## Questions; - [x] I don't know how to fix this, just highlighting the problem. Who could help? . ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1488:125,test,test,125,https://psicode.org,https://github.com/psi4/psi4/pull/1488,4,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; This is a part of *Psi4* porting to Windows (#933). The size of `leftp` is smaller than `doccpi_[h]` in `soscf-ref` tests:; https://github.com/psi4/psi4/blob/be5824d8926dd3e2c12a56944ceec50d1935ca83/psi4/src/psi4/libscf_solver/rohf.cc#L589-L591. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Demonstrate invalid memory access in psi::ROHF::Hx; - [x] Fix invalid memory access in psi::ROHF::Hx. ## Questions; - [x] I don't know how to fix this, just highlighting the problem. Who could help?. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1489:132,test,tests,132,https://psicode.org,https://github.com/psi4/psi4/pull/1489,4,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This is a part of Psi4 porting to Windows (#933). `tensor_rr` is `double***`, so it needs double dereferencing to have a pointer to data: ; https://github.com/psi4/psi4/blob/c9be896dd4b4c550b6f7ac792cf11a1274a9a038/psi4/src/psi4/cc/ccresponse/roa.cc#L238; I guess, it should be like here:; https://github.com/psi4/psi4/blob/c9be896dd4b4c550b6f7ac792cf11a1274a9a038/psi4/src/psi4/cc/ccresponse/roa.cc#L289. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix memory error in `psi::ccresponse::roa`. ## Questions; - [x] I don't real know what that part of code is doing. The fix has to be verified by someone who does. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1476:705,Test,Tests,705,https://psicode.org,https://github.com/psi4/psi4/pull/1476,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This is a preliminary PR for moving DIIS Python-side, submitted for general review over PsiCon and to see if Windows hates this. This is going to expedite EDIIS/ADIIS, and is a prototype for moving more code to the Python layer. ## Todos; - [x] Moves DIIS to Python. ## Questions; - [x] Where should the boundary between Python and C++ be?; - [x] Can we clean up the C-side API at all?; - [x] What kind of compile-time hit do we take by the CMake changes?; - [x] Can we get more detailed estimates on time and memory costs? My benchmarks so far say there's no hit.; - [x] The new DPD functionality is somewhat hacky, but it is DPD. Are we okay with this...?. ## Checklist; - [x] Quick tests pass. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2369:543,benchmark,benchmarks,543,https://psicode.org,https://github.com/psi4/psi4/pull/2369,2,"['benchmark', 'test']","['benchmarks', 'tests']"
Testability,"## Description; This is a simple aesthetic cleanup to make the printout more systematic. If I define the xc functional inline as e.g.; ```; my_dft = {; ""name"": ""my lda"",; ""x_functionals"": {""lda_x"": {}},; ""c_functionals"": {""lda_c_pw"": {}}; }; energy('scf', dft_functional=my_dft); ```; the capitalization is inconsistent in the output; ```; => Exchange Functionals <=. 1.0000 XC_lda_x. => Correlation Functionals <=. 1.0000 XC_lda_c_pw; ```; ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2218:625,Test,Tests,625,https://psicode.org,https://github.com/psi4/psi4/pull/2218,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This is a start to addressing #2272 . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] `MBIS_CHARGES` and `MBIS_VOLUME_RATIOS` are now separate oeprop tasks to the user but still reusing code.; - [ ] `oeprop(wfn, ""MBIS_VOLUME_RATIOS"")` should be fine (indep oeprop fn), but `set scf_properties mbis_volume_ratios; energy(""scf"")` will still fail as #2272 reported because those are `OEProp` class instantiations called from proc.py, and the free atom volumes aren't available. The oeprop.cc code could exit gracefully when free atom volumes aren't available, but having different properties lists for the two calling routes isn't good.; - [ ] so why not add the loc from oeprop() to `OEProp`s in proc.py so that atom volumes are available? nice thought, but the fn that produces them itself calls oeprop() and energy() and descends into endless recursion. I haven't sought the logic that makes this all work together.; - [ ] add tests. probably some of the existing ones will break for only calling one mbis property but checking volrat. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2273:950,log,logic,950,https://psicode.org,https://github.com/psi4/psi4/pull/2273,5,"['Test', 'log', 'test']","['Tests', 'logic', 'tests']"
Testability,"## Description; This is a starting PR for @amjames @robertodr @kcpearce and myself (in addition to anyone else) to hack on for TDDFT functionality in Psi4. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Restricuted C1 TDDFT Spectra; - [x] Unrestricted C1 TDDFT Spectra; - ~Restricted C1 Stability Analysis~; - ~Unrestricted C1 Stability Spectra~; - [x] Per-irrep abilities for the above. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge. ## Notes; - Iterative Diagonalization methods have been generalized to work with an `engine` which is an object that must provide a particular API (documented). The `engine` provides the relevant Matrix x trial vector functions and a series of methods that allow the engine to perform standard operations on the trial vectors without needing to know what data structure is used for a trial vector. ; - Two engines have been implemented that provide the products required for TDHF/TDDFT. A flag passed to the engines `__init__` method will determine if they are configured to perform Ax products (for TDA/CIS) or both (A+B)x and (A-B)x products for Full TDDFT/TDHF. ; - The Restricted reference engine `TDRSCFEngine` also expects a flag to determine if products are spin adapted for singlet or triplet excitations.; - It appears as best as I can tell that the `UV::compute_Vx` method is not implemented correctly for GGA functionals so UKS excitations are only correct for LDA functionals and pure HF; - It also appears that the `RV::compute_Vx` provides the singlet spin adapted product as RKS singlet excitations are correct for LDA/GGA Hybrids and LRC, but not for the triplet. Looking in the literature and at the implementation in pyscf I am pretty sure that for the triplet product a spin polarized XC kern",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1349:459,Test,Tests,459,https://psicode.org,https://github.com/psi4/psi4/pull/1349,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This is a trivial one. It just sets the `CMAKE_EXPORT_COMPILE_COMMANDS` option to `ON` when setting up the `psi4-core` external project.; Upon generation, CMake will dump the compile options for each file in `psi4-core` to a `compile_commands.json` file in `<build-dir>/psi4-core-prefix/src/psi4-core-build`. This file can be used by `clang-tidy` to perform various static checks and apply corresponding fixes. For the latter, PRs are incoming. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1312:481,Test,Tests,481,https://psicode.org,https://github.com/psi4/psi4/pull/1312,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This is an intermediary PR to https://github.com/psi4/psi4/pull/3060. Reviews on that PR have made me reconsider some design decisions as implemented in that PR. At the same time, I want to ensure that no end user runs into any hard failures due to broken `SCF_TYPE` + `SCF_SUBTYPE` + `SCREENING` combinations in v1.9. So this PR goes and simply throws exceptions for every hard failure case as logged in `test_comprehensive_jk_screening.py`. Tests are updated to match, and there's some small refactoring of how JK type + screening exceptions are handled in `jk.cc.` . ## User API & Changelog headlines; - [X] N/A. ## Dev notes & details; - [x] Broken combinations of `SCF_TYPE` + `SCF_SUBTYPE` + `SCREENING` now throw an exception, instead of running to failure. ## Questions; - [X] N/A. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3081:411,log,logged,411,https://psicode.org,https://github.com/psi4/psi4/pull/3081,5,"['Test', 'log', 'test']","['Tests', 'logged', 'tests']"
Testability,"## Description; This is consistent to [what HF orthog was doing](https://github.com/psi4/psi4/pull/1759/files?utf8=%E2%9C%93&diff=split&w=1#diff-542034e7ed85da9a795544399b295be6L743) pre #1759 . Fixes the cookbook/rohf and scf-guess-read2 tests, both of which involve ROHF. Look sensible, @susilehtola?. ## Checklist; - [ ] ~Tests added for any new features~; - [x] All or relevant fraction of full tests run -- full ctest now passes at 1759. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1765:239,test,tests,239,https://psicode.org,https://github.com/psi4/psi4/pull/1765,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This is my attempt to resolve #1271 . I would like to use this PR to hash out the FC functionality more thoroughly. The questions I have are:. - what is the ideal expected behaviour of `freeze_core True`; - do we want to implement ""previous shells"" freezing, using eg. `freeze_core {1,2,...}`; - how about ""ridiculous"" cases such as Li2+ or F2-, how much hand-holding do we want the code to do and at which point we give up?. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [X] Resolves #1271; - [ ] Clarify . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1350:592,Test,Tests,592,https://psicode.org,https://github.com/psi4/psi4/pull/1350,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This is part of *Psi4* porting to *Windows* (https://github.com/psi4/psi4/issues/933). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] MSVC does not support non-standard `not`, `and`, `or`, `xor` operators, which are replaced with `!`, `&&`, `||`, `^`, respectively. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1065:372,Test,Tests,372,https://psicode.org,https://github.com/psi4/psi4/pull/1065,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Fix memory error in `psi::sapt::SAPTDFInts`; - [ ] Fix memory error in `psi::sapt::Iterator`; - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1238:287,test,tests,287,https://psicode.org,https://github.com/psi4/psi4/pull/1238,4,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Add MSVC-specific compiler definitions (`/D_USE_MATH_DEFINES` and `/EHsc`); - [x] Add MSVC-specific compiler options (`/bigobj`); - [x] Disable PyBind C++ standard on MSVC. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1182:359,Test,Tests,359,https://psicode.org,https://github.com/psi4/psi4/pull/1182,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Add missing `PSI_API` in fnocc. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1181:218,Test,Tests,218,https://psicode.org,https://github.com/psi4/psi4/pull/1181,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Add the OpenMP test to Azure; - [x] Add failing ctests to Azure; - [x] Update pytest. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1399:179,test,test,179,https://psicode.org,https://github.com/psi4/psi4/pull/1399,4,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Create `%PREFIX%\Scripts` -- `conda` stopped doing it automatically.; - [x] Don't package `bin\psi4.bat` -- `conda` learnt to recognize *Python* scripts and generate wrappers for them, i.e. `%PREFIX%\Scripts\psi4.exe`, but it is still needed for local testing.; - [x] Pin LLVM 7.0.1 -- 8.0.0 fails to build the optimized libint. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) -- https://github.com/psi4/psi4/issues/933#issuecomment-494354023. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1648:416,test,testing,416,https://psicode.org,https://github.com/psi4/psi4/pull/1648,4,"['Test', 'test']","['Tests', 'testing', 'tests']"
Testability,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix `psi::PSIO::rename_file`; - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1227:223,test,tests,223,https://psicode.org,https://github.com/psi4/psi4/pull/1227,4,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix `pytest_output.dat` deleting in `tear_down()`; - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1276:244,test,tests,244,https://psicode.org,https://github.com/psi4/psi4/pull/1276,4,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix a filesystem error in `psi.driver.cbs`. Windows does not support `*` in filenames.; - [x] Fix `cbs-parser` test on Windows. ## Questions; - [x] How *Psi4* is suppose to sanitize filenames? Have I missed some function? --> That suppose to be removed in 1.4, so just a quick fix for now. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1442:275,test,test,275,https://psicode.org,https://github.com/psi4/psi4/pull/1442,4,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix list decrement in `psi::DFHelper::identify_order`; - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1221:248,test,tests,248,https://psicode.org,https://github.com/psi4/psi4/pull/1221,4,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix memory leak; - [x] Fix invalid deallocation (`new` allocations have to be deallocated with `delete`); - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1246:299,test,tests,299,https://psicode.org,https://github.com/psi4/psi4/pull/1246,4,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix undefine variable in `psi::CIvect::dcalc2`; - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1219:241,test,tests,241,https://psicode.org,https://github.com/psi4/psi4/pull/1219,4,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix vector indexing error in `psi::IntegralTransform::process_spaces`; - [x] Update passing Windows tests. ## Questions; - [x] The offending line is commented out. Does a more sophisticated fix is need here? --> @andysim will find a better fix. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1220:264,test,tests,264,https://psicode.org,https://github.com/psi4/psi4/pull/1220,4,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix vector indexing error in `psi::PKMgrDisk::batch_sizing`; - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1237:254,test,tests,254,https://psicode.org,https://github.com/psi4/psi4/pull/1237,4,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Make failing `psi4 --test` to return non-zero status. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1363:185,test,test,185,https://psicode.org,https://github.com/psi4/psi4/pull/1363,4,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Match `malloc` with `free`. `free_block` uses `delete[]`. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1250:244,Test,Tests,244,https://psicode.org,https://github.com/psi4/psi4/pull/1250,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Match `malloc` with `free`; - [x] Match `new` with `delete`; - [x] Match `new[]` with `delete[]`. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1248:284,Test,Tests,284,https://psicode.org,https://github.com/psi4/psi4/pull/1248,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Reduce the number of tests on Appveyor to reduce timeouts. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1249:185,test,tests,185,https://psicode.org,https://github.com/psi4/psi4/pull/1249,4,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Remove ""failing tests"" which do not fail anymore on Azure. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1522:180,test,tests,180,https://psicode.org,https://github.com/psi4/psi4/pull/1522,4,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Remove hard-code paths; - [x] Replace `os.system` with `subprocess.run`; - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1239:266,test,tests,266,https://psicode.org,https://github.com/psi4/psi4/pull/1239,4,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Repeat `ci-property` test to catch random failures; - [x] Remove memory error in `psi::MultipolePropCalc::compute_mo_extents`.; - [x] Fix `ci-property` test on Windows. ## Questions; - [x] Removed some dead code, including the part with `C_DDOT`, which was segment-faulting. Could you check, it was really a dead code, not some incomplete implementation? --> Dead!. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1440:185,test,test,185,https://psicode.org,https://github.com/psi4/psi4/pull/1440,5,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Replace `os.unlink`; - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1180:214,test,tests,214,https://psicode.org,https://github.com/psi4/psi4/pull/1180,4,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Switch MSVC to LLVM compiler; - [x] Fix linkage errors; - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1264:249,test,tests,249,https://psicode.org,https://github.com/psi4/psi4/pull/1264,4,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] set Python interpreter explicitly. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1183:221,Test,Tests,221,https://psicode.org,https://github.com/psi4/psi4/pull/1183,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This is part of *Psi4* porting to Windows (#933). *Appveyor* is switching to Python 3.7 by default, but some package are not yet ready. So stay with Python 3.6 for a while. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Use Python 3.6 for Windows builds. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1278:344,Test,Tests,344,https://psicode.org,https://github.com/psi4/psi4/pull/1278,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This is part of *Psi4* porting to Windows (#933). *FindOpenMP* doesn't yet support *clang-cl*, so the config has to be done manually. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix OpenMP config for clang-cl on Windonws; - [x] Check if OpenMP config hadn't failed silently. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1348:365,Test,Tests,365,https://psicode.org,https://github.com/psi4/psi4/pull/1348,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This is part of *Psi4* porting to Windows (#933). Appveyor is falling, because the new version (2019.0) of MKL is not detected. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Lock MKL version. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1240:282,Test,Tests,282,https://psicode.org,https://github.com/psi4/psi4/pull/1240,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This is part of *Psi4* porting to Windows (#933). As discussed in https://github.com/psi4/psi4/issues/933#issuecomment-423183802, *clang-cl* supports *OpenMP* 4.0, so the adaptation to *OpenMP* 2.0 is not necessary. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Revert #1225. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1384:366,Test,Tests,366,https://psicode.org,https://github.com/psi4/psi4/pull/1384,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This is part of *Psi4* porting to Windows (#933). As discussed in https://github.com/psi4/psi4/issues/933#issuecomment-423183802, *clang-cl* supports *OpenMP* 4.0, so the adaptation to *OpenMP* 2.0 is not necessary. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Revert #1226. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1385:366,Test,Tests,366,https://psicode.org,https://github.com/psi4/psi4/pull/1385,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This is part of *Psi4* porting to Windows (#933). As discussed in https://github.com/psi4/psi4/issues/933#issuecomment-423183802, *clang-cl* supports *OpenMP* 4.0, so the adaptation to *OpenMP* 2.0 is not necessary. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Revert #1231. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1386:366,Test,Tests,366,https://psicode.org,https://github.com/psi4/psi4/pull/1386,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This is part of *Psi4* porting to Windows (#933). Enable *conda* package building for *Windows* with *Azure*. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Enable package building; - [x] Add conda recipe; - [x] Add an option to trigger package building; - [x] https://dev.azure.com/psi4/psi4 pipeline have to be configured to provide the following variables:; - `conda.build` with default `false` (settable at queuing time). ## Questions; - [x] Currently, the conda recipe is in `conda/win`. Maybe it should be somewhere in https://github.com/psi4/psi4meta/? --> Recipe will stay in `conda/win`, for now. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1560:695,Test,Tests,695,https://psicode.org,https://github.com/psi4/psi4/pull/1560,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This is part of *Psi4* porting to Windows (#933). Fix the crash reported by @tonigi (https://github.com/psi4/psi4/issues/933#issuecomment-446601070). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Clean up `psi::psio_volseek`; - [x] Fix integer overflow: `lseek` returns `off_t` (i.e. `long` or `long long`), which is written to `int`.; - [x] Change `_lseek` to `_lseeki64` on Windows, as it doesn't support large files implicitly. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1432:521,Test,Tests,521,https://psicode.org,https://github.com/psi4/psi4/pull/1432,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This is part of *Psi4* porting to Windows (#933). From MKL 2019.0, the packaging of Windows packages has changed. Import libraries (.lib) have been moved to separate `mkl-devel` package (https://github.com/ContinuumIO/anaconda-issues/issues/10154), which follows the changes in Intel channel (https://anaconda.org/intel). The same happened to `intel-openmp`, but `intel-openmp-devel` package has not been created. *Clang* needs an import library `libiomp5md.lib` to link with `libiomp5md.dll`. Interestingly, MKL installer from *Intel* (https://software.intel.com/en-us/mkl/choose-download/windows) has that library. This obsoletes #1408 . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix the missing Intel OpenMP import file; - [x] Update to MKL 2019.1; - [x] Improve CMake message. ## Questions; - [x] This is hackish, but makes things to work. Ideally, we need `intel-openmp-devel`, so hopefully *Intel* decides to make it. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1571:1018,Test,Tests,1018,https://psicode.org,https://github.com/psi4/psi4/pull/1571,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; This is part of *Psi4* porting to Windows (#933). Implement `psi4` command on Windows. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Generate and install `psi4.bat`; - [x] Test `psi4` command. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1420:240,Test,Test,240,https://psicode.org,https://github.com/psi4/psi4/pull/1420,4,"['Test', 'test']","['Test', 'Tests', 'tests']"
Testability,"## Description; This is part of *Psi4* porting to Windows (#933). MSVC supports only OpenMP 2.0, but *Psi4* needs higher at some part. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Change `size_t` to `long` in OpenMP loops; - [x] Remove `update` from OpenMP atomic; - [x] Conditional compilation for `simd`. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1226:382,Test,Tests,382,https://psicode.org,https://github.com/psi4/psi4/pull/1226,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This is part of *Psi4* porting to Windows (#933). MSVC supports only OpenMP 2.0, but *Psi4* needs higher at some parts. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Change `size_t` to `long` in OpenMP loops. ## Checklist; - [x] ~~Tests added for any new features~~; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1228:299,Test,Tests,299,https://psicode.org,https://github.com/psi4/psi4/pull/1228,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This is part of *Psi4* porting to Windows (#933). MSVC supports only OpenMP 2.0, but *Psi4* needs higher at some parts. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Change `size_t` to `long` in OpenMP loops. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1225:299,Test,Tests,299,https://psicode.org,https://github.com/psi4/psi4/pull/1225,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This is part of *Psi4* porting to Windows (#933). MSVC supports only OpenMP 2.0, but *Psi4* needs higher at some parts. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Change `size_t` to `long` in OpenMP loops; - [x] Conditional compilation of `collapse` clause. ## Checklist; - [x] ~~Tests added for any new features~~; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1230:351,Test,Tests,351,https://psicode.org,https://github.com/psi4/psi4/pull/1230,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This is part of *Psi4* porting to Windows (#933). MSVC supports only OpenMP 2.0, but *Psi4* needs higher at some parts. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Change `size_t` to `long` in OpenMP loops; - [x] Conditional compilation of `simd` clause. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1231:347,Test,Tests,347,https://psicode.org,https://github.com/psi4/psi4/pull/1231,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This is part of *Psi4* porting to Windows (#933). MSVC supports only OpenMP 2.0, but *Psi4* needs higher at some parts. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Change `size_t` to `long` in OpenMP loops; - [x] Conditional compilation of `simd` clause; - [x] Conditional compilation of `collapse` clause. ## Checklist; - [x] ~~Tests added for any new features~~; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1229:399,Test,Tests,399,https://psicode.org,https://github.com/psi4/psi4/pull/1229,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This is part of *Psi4* porting to Windows (#933). MSVC supports only OpenMP 2.0, but *Psi4* needs higher at some parts. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Change `size_t` to `long` in OpenMP loops; - [x] Remove `update` from OpenMP atomic, as it is default behaviour. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1224:369,Test,Tests,369,https://psicode.org,https://github.com/psi4/psi4/pull/1224,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; This is part of *Psi4* porting to Windows (#933). Make *Psi4* to work without setting `PSI_SCRATCH`. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Set the default path to `TEMP` or `TMP` value. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1413:284,Test,Tests,284,https://psicode.org,https://github.com/psi4/psi4/pull/1413,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This is part of *Psi4* porting to Windows (#933). Some time ago (#1240), MKL version had to be pinned for Windows builds. Now it is fixed and the latest version could be used. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Unpin MKL version. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1408:331,Test,Tests,331,https://psicode.org,https://github.com/psi4/psi4/pull/1408,3,"['Test', 'test']","['Tests', 'tests']"
Testability,## Description; This is part of *Psi4* porting to Windows (#933). The problem was already reported in #1255. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix a memory error in `psi::MOInfo::read_mo_spaces`; - [x] Fix `psimrcc-fd-freq2` test on Windows. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1427:289,test,test,289,https://psicode.org,https://github.com/psi4/psi4/pull/1427,4,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"## Description; This is part of *Psi4* porting to Windows (#933). The problem was reported in #1255. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix an invalid memory access in `psi::CIWavefunction::sem_iter`; - [x] Fix `fci-tdm` test on Winodows; - [x] Fix `fci-tdm-2` test on Winodows. ## Questions; - [x] This needs an actual fix, but I'm not enough familiar with the method. Who knows how to fix? --> Fixed. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1441:284,test,test,284,https://psicode.org,https://github.com/psi4/psi4/pull/1441,5,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,## Description; This is part of *Psi4* porting to Windows (#933). The problem was reported in #1255. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix invalid memory access in `psi::cceom::get_moinfo`; - [x] Fix `cc46` and `cc47` tests on Windows. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1422:282,test,tests,282,https://psicode.org,https://github.com/psi4/psi4/pull/1422,4,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This is part of *Psi4* porting to Windows (#933). There is an invalid memory access at line 209, because `Ca_->colspi()[h]` is smaller than `nalphapi_[h]`:; https://github.com/psi4/psi4/blob/ba98fb72ab73350a613ae96b56d1d4c6074c2ae9/psi4/src/psi4/libtrans/integraltransform_sort_so_tei.cc#L201-L217. I have added an asset to prove that. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Prove a bug in `psi::IntegralTransform::presort_so_tei`; - [x] Fix the bug in `psi::IntegralTransform::presort_so_tei`. ## Questions; - [x] Who knows how to fix this? -- https://github.com/raimis/psi4/pull/4. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1469:681,Test,Tests,681,https://psicode.org,https://github.com/psi4/psi4/pull/1469,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This is part of *Psi4* porting to Windows (#933). This is intended as a replacement for *Appveyor*, which has 60 min limit. *Azure* allow to run up to 360 min!. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] CI for Windows on *Azure*. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1368:322,Test,Tests,322,https://psicode.org,https://github.com/psi4/psi4/pull/1368,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"## Description; This is part of *Psi4* porting to Windows (#933). `cctriples` and `libdpd` use `pthread` directly, but its port to Windows (`pthread-win32`) is a bit questionable quality. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Make libdpd to use OpenMP instead of `pthread`; - [x] Make cctriples to use OpenMP instead of `pthread`; - [x] Do not link to `pthread` explicitly; - [x] Do not install `pthread-win32` on Appveyor. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1199:506,Test,Tests,506,https://psicode.org,https://github.com/psi4/psi4/pull/1199,3,"['Test', 'test']","['Tests', 'tests']"
