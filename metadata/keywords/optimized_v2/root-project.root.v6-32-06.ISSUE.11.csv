quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,wiki,url,total_similar,target_keywords,target_matched_words
Testability,"# This Pull request:; Removes invocations to the root-config executable at *ROOT module import time*. The executable `root-config` was invoked twice to check if RDataFrame was available. Such a behaviour causes a severe slowdown, especially on cvmfs. This has been replaced by a simple string comparison, which is fast and which has no impact in terms of memory (as a query to the type system would have caused with modules),. More in general, this simple PR could be considered as the first of a series to reduce the time needed to `import ROOT` as much as possible. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13803:611,test,tested,611,https://root.cern,https://github.com/root-project/root/pull/13803,1,['test'],['tested']
Testability,# This Pull request:; Removes the implicit `auto` keyword support added in: https://github.com/root-project/root/commit/071d08487ceea4f8f28231ea182ba350e6836e30 and https://github.com/root-project/root/commit/1f4a6dc0539acfc0ec58cea7443fe08a0a4479d4; ## Changes or fixes:; This feature was deprecated in: https://github.com/root-project/root/pull/14645. Will update LLVM and squash the commits here before the final merge/decision. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16410:453,test,tested,453,https://root.cern,https://github.com/root-project/root/pull/16410,1,['test'],['tested']
Testability,"# This Pull request:; Replace the shebang with python for the python scripts under `main/python`. ## Changes or fixes:; Use `/usr/bin/env python` as it is done everywhere else in ROOT (in some places; it's `python3` instead of `python`). Avoid having to; deal with the length of the shebang being too long when using a python installed; in deep locations (like in deep folder paths in cvmfs). I believe this shouldn't change anything in most setups except in those where; ROOT was built with one python and then the first python found in PATH is a; different one, but that is a weird setup (?). Alternatively it may be possible; to substitute only the name of the python executable, like `python3.11`, but; then it has to be in PATH. but I think this is the cleanest way and the cases; where this wouldn't work would be related to issues in the environment rather; than ROOT itself. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13380:904,test,tested,904,https://root.cern,https://github.com/root-project/root/pull/13380,1,['test'],['tested']
Testability,# This Pull request:; Returns the newly added node from call to TGeoVolume::AddNode; Allows an option to avoid voxelation. back port of #10576. ## Changes or fixes:; Profiling geometry building in CMSSW turned up two issues. 1. Doing a linear lookup for newly added nodes to a TGeoVolume was very slow2.; 2. CMS uses DD4Hep (which uses ROOT) as a geometry description system not as a geometry navigation system. The building of the voxels was slow and is never used in CMSSW. This change was temporarily incorporated into CMS' development branch and did not cause any noticeable problems and did give a speed boost. ## Checklist:. - [ x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10641:638,test,tested,638,https://root.cern,https://github.com/root-project/root/pull/10641,1,['test'],['tested']
Testability,"# This Pull request:; Solve the problem with a segfault in the tests. ## Changes or fixes:; * Changed the routines to eval R code in several methods on TRInterface.; * Fixed link to the documentation (ROOT-R Users Guide). ## Checklist:. - [X] tested changes locally; - [X] updated the docs (if necessary). This PR fixes # ; https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-v6-24-00-patches/93/LABEL=ROOT-centos7,SPEC=noimt,V=6-24/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8822:63,test,tests,63,https://root.cern,https://github.com/root-project/root/pull/8822,3,['test'],"['testReport', 'tested', 'tests']"
Testability,# This Pull request:; Synchronizes all changes dome in the materials. ## Changes or fixes:. ## Checklist:. - [ x] tested changes locally; - [ ] updated the docs (if necessary). This PR is requested in #11272,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11386:114,test,tested,114,https://root.cern,https://github.com/root-project/root/pull/11386,1,['test'],['tested']
Testability,"# This Pull request:; TGeo uses internally a material ""dummy"", which is not a valid material, but gets ejected into the GDML.; This material is not understood by Geant4 and inhibits produced GDML files being loaded to Geant4.; A user switch `TGDMLWrite::SetIgnoreDummyMaterial(true)` allows to inhibit to eject this material into the GDML. ## Changes or fixes:; Badly produced GDML files. ## Checklist:. - [ x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11886:411,test,tested,411,https://root.cern,https://github.com/root-project/root/pull/11886,1,['test'],['tested']
Testability,"# This Pull request:; The RDF FromNumpy was silently reading wrong values if sliced arrays (arrays with strides) were given as an input. This PR fixes the issue by producing copies of the sliced arrays that are then read correctly. . TODO for the future: a neater solution, without making copies. . ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #13690",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13738:320,test,tested,320,https://root.cern,https://github.com/root-project/root/pull/13738,1,['test'],['tested']
Testability,"# This Pull request:; The `RooLagrangianMorphFunc` loads its input objects from a nested set of `TFolders` stored in a `TFile`. ; This MR adds protection (inspired by [ROOT-9275](https://sft.its.cern.ch/jira/browse/ROOT-9275) to avoid memory leaks in the initialisation of the `RooLagrangianMorphFunc`, which for large `RooFit` workspaces with many morphing functions can otherwise become unfeasible to use. . ## Changes or fixes:; - add a `cleanUpFolder` helper method to an existing anoymous namespace to `RooLagrangianMorphFunc.cxx`, which ensures ownership is enabled for `TFolder`s loaded from `TFile`s and optionally deletes the folders after setting them up ; - add a templated `loadFromFileResidentFolder` method to the same anonymous namespace in `RooLagrangianMorphFunc.cxx`, refactoring the procedure of loading an object from a nested `TFolder` structure that was previously performed in various locations in the class. The method exploits the `cleanUpFolder` method to prevent memory leaks in the access procedure. . ## Checklist:. - [ x ] tested changes locally - confirmed leak rate massively reduced in local testing. Draft test script (not yet merged) provided by @rahulgrit retains same output as before the changes; - [ ] updated the docs (if necessary) - no changes to user-accessible code. Inline doxygen documentation of new methods. . Tagging @rahulgrit @guitargeek",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9717:1053,test,tested,1053,https://root.cern,https://github.com/root-project/root/pull/9717,3,['test'],"['test', 'tested', 'testing']"
Testability,"# This Pull request:; This PR aims to address #14085 by making thisroot.sh identify the shell correctly even when run under qemu, for example in emulated docker containers. ## Changes or fixes:; When qemu is run, then `/proc/$$/comm` contains the name of the command that is emulated. ## Checklist:; - [x] tested changes locally; - [ ] ~~updated the docs (if necessary)~~ N/A. This PR fixes #14085. ## Tests; Before:; ```console; (Fri Dec-15 2:11:32pm)-(CPU 20.2%:0:Net 1)-(root:/)-(64K:21); > source thisroot.sh; ERROR: must ""cd where/root/is"" before calling "". bin/thisroot.sh"" for this version of ""aarch64-binfmt-P""!; (ERROR)-(Exit Code 1)-(General error); (Fri Dec-15 2:11:37pm)-(CPU 20.2%:0:Net 1)-(root:/)-(64K:21); ```; After:; ```console; (Fri Dec-15 2:12:57pm)-(CPU 20.2%:0:Net 1)-(root:/)-(16M:23); > source thisroot.sh; (Fri Dec-15 2:13:00pm)-(CPU 20.2%:0:Net 1)-(root:/)-(16M:23); ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14251:306,test,tested,306,https://root.cern,https://github.com/root-project/root/pull/14251,2,"['Test', 'test']","['Tests', 'tested']"
Testability,"# This Pull request:; This PR is a WIP and has been posted to collect feedback. It proposes a fix for warnings on MacOS which are prompted when linking the libCore shared library due to two links to libxxHash, which are there only if xxhash and lz4 are builtins. This seems to be a non trivial CMake problem, which is fixed with some perhaps non-hortodox CMake code. ## Changes or fixes:. ## Checklist:. - [v] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13739:410,test,tested,410,https://root.cern,https://github.com/root-project/root/pull/13739,1,['test'],['tested']
Testability,# This Pull request:; This PR is based on #12941 and [Dynamic-Op](https://github.com/root-project/root/compare/master...Neel-Shah-29:root-1:Dynamic-Op) both by Neel Shah. ## Changes or fixes:. - Add support for intermediate tensors with dynamic shape; - Implement the [Range operator](https://github.com/onnx/onnx/blob/main/docs/Operators.md#Range); - Add tests for the Range operator. ## Checklist:. - [x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13457:356,test,tests,356,https://root.cern,https://github.com/root-project/root/pull/13457,2,['test'],"['tested', 'tests']"
Testability,# This Pull request:; This Pull request adds the support for Clip operator in SOFIE. ## Changes or fixes:; Implemented the Operator Class files and also included tests and onnx models for the same. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16726:162,test,tests,162,https://root.cern,https://github.com/root-project/root/pull/16726,2,['test'],"['tested', 'tests']"
Testability,# This Pull request:; This Pull request adds the support for Sin and Cos operators in SOFIE; ## Changes or fixes:; - Implemented the respective ROperator files; - Included respective tests and ONNX models. ## Checklist:; - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16809:183,test,tests,183,https://root.cern,https://github.com/root-project/root/pull/16809,2,['test'],"['tested', 'tests']"
Testability,"# This Pull request:; This Pull request allows to set in TGeo the transparency of objects at the level of individual TGeoVolume instances. ROOT was attributing the volume transparency to the material of the volume.; This is not always the desired behavior. The PR preserves the current functionality if the transparency level is not; explicitly set to the volume instance. ; Improved functionality: If the transparency level is set directly to the volume instance, the volume transparency ; takes precedence over the material transparency. The default behavior can be restored by setting a transparency ; level of -1 to the volume. ## Changes or fixes:; Improves the flexibility to set transparency to geometry volumes. ## Checklist:. - [xxx] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13402:743,test,tested,743,https://root.cern,https://github.com/root-project/root/pull/13402,1,['test'],['tested']
Testability,"# This Pull request:; This change gives the possibility to steer selection through REveSelection::Deviator. This was a request for CMS event display where highlight and selection need to be propagated to associated collections. For example, associated hits can be highlighted with a reconstructed cluster. The list of changed files is long because REveEelement::FillImpliedSet needed one additional argument. In REveSelection the NewElementPicked function is split into two parts: one does mapping of picked element and possibly calls deviator. The second part compares and stores the selection state in the internal map. . ## Changes or fixes:; The change also enables the deselection of a single item in the secondary selectable objects in the multiple select mode (Ctrl key modifier). For example, a single track, a hit, or a calorimeter tower can be deselected on the second click. The table view now restores row selection state on reload or on change of displayed collection. ## Checklist:; The selection tests has been made macros collection_proxies.C, event_demo.C, calorimeters.C, and boxset.C. This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10054:1011,test,tests,1011,https://root.cern,https://github.com/root-project/root/pull/10054,1,['test'],['tests']
Testability,"# This Pull request:; This draft PR for testing the doxygen generation github action with our self-hosted runners.; Uses our existing Makefile setup. ## Status; Succeeded with building only docs for `core`.; The workflow first builds `root` without tests and then makes the doxygen documentation. ## Checklist:; - [x] **Test with build from scratch and all documentation folders**; - [ ] Install latest version of `doxygen`, `qhelpgenerator` and other required packages in image at https://github.com/root-project/root-ci-images; - [ ] Upload result to website/S3; - [ ] Nightlies for different releases; - [ ] OPTIMIZATION: use build from existing build workflows instead of building again in this workflow. We could for example add a job in `root-master.yml` that only builds documentation after the `run_nightlies` job. Github actions supports defining dependencies between jobs: https://docs.github.com/en/actions/using-jobs/using-jobs-in-a-workflow#defining-prerequisite-jobs",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15337:40,test,testing,40,https://root.cern,https://github.com/root-project/root/pull/15337,3,"['Test', 'test']","['Test', 'testing', 'tests']"
Testability,"# This Pull request:; This is a follow up of https://github.com/root-project/root/pull/13748, which was modified by ; @guitargeek to fix the unnecessary use of exceptions. ## Changes or fixes:; Made the static function `TH1::CheckConsistency` public, and changed its return type to `Int_t`.; Since the meaning of the returned integer is actually part of `EInconsistencyBits`, I made the `enum` public as well (but left the return value type to `Int_t`). This is done in a separate commit in case it is decided to keep the `enum` itself as an implementation detail. ## Motivation; At the moment `TH1::CheckConsistency` is called internally by `TH1::Add`, and error messages are print in case of failure, but continues the execution. Making it public allows user code to manually check the consistency to catch errors and stop the program. This is especially useful for programs that make hundreds of `Add`s, out of which only a few fail, and the error messages may be lost in logs and go unnoticed. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14077:975,log,logs,975,https://root.cern,https://github.com/root-project/root/pull/14077,2,"['log', 'test']","['logs', 'tested']"
Testability,# This Pull request:; This is an initial attempt at getting this thing building on modern FreeBSD (i.e. without /proc); some discussion was going on in issue #12787 and @hahnjo suggested a broader review and discussion in a PR. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #12787,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12996:271,test,tested,271,https://root.cern,https://github.com/root-project/root/pull/12996,1,['test'],['tested']
Testability,"# This Pull request:; This is for not losing the path of the input filename after getting its filename without its path. This allows the parser to read files in any directory (previously, only models in the current working directory could be parsed). ## Changed files:; - /tmva/sofie_parsers/src/RModelParser_ONNX.cxx. ## Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8725:340,test,tested,340,https://root.cern,https://github.com/root-project/root/pull/8725,1,['test'],['tested']
Testability,"# This Pull request:; This is the Scipy plugin for ROOT math libraries for minimization; * Implementation using Python C API that supports several methods such as; Nelder-Mead, L-BFGS-B, Powell, CG, BFGS, TNC, COBYLA, SLSQP, trust-constr,; Newton-CG, dogleg, trust-ncg, trust-exact and trust-krylov.; * It supports:; * Jacobian (Gradients); * Hessian; * Bounds for the variables.; * Constraints functions but not using [NonlinearConstraint](https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.NonlinearConstraint.html#scipy.optimize.NonlinearConstraint), this requires more design/development to be implemented.; * The implementation of extra parameters was implemented.; * This is part of the work presented in CHEP 2023 https://indico.jlab.org/event/459/contributions/11597/. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12997:837,test,tested,837,https://root.cern,https://github.com/root-project/root/pull/12997,1,['test'],['tested']
Testability,# This Pull request:; This is the continuation of work done earlier: PR #11377 which followed https://github.com/root-project/root/issues/8685. ## Changes or fixes:; The ProgressBar feature is now functional with the current master. It is shown in DF tutorials: 102 (one large file) and 106 (multiple smaller files). It also works with MT mode enabled. . The changes compared to what was done in PR #11377 include:; - minor visual improvements; - addition of the number of processed files (useful if many files are processed); - printing of the ProgressBar at the end of computation; - technically: changes that were previously added to RInterface.hxx are now implemented in RInterfaceBase.hxx . ## Checklist:. - [ ] tested changes locally. ![Screenshot 2023-07-07 at 16 33 26](https://github.com/root-project/root/assets/80402204/ac42ca74-eede-4896-a4f3-5143932563a5); ![Screenshot 2023-07-07 at 16 33 34](https://github.com/root-project/root/assets/80402204/b3b983f9-3343-4182-ac8f-33bb2a4771ac),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13210:717,test,tested,717,https://root.cern,https://github.com/root-project/root/pull/13210,1,['test'],['tested']
Testability,"# This Pull request:; To address https://github.com/root-project/root/issues/7254. ## Changes or fixes:; The analytical integrals code in Hypatia2 is un-commented, except a few lines that are not needed. ## Checklist:. - [x] tested changes locally (the script for test: [test_script.zip](https://github.com/user-attachments/files/16266457/test_script.zip), where the `RooHypatia2O` class is the current version in master); - [x] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16045:225,test,tested,225,https://root.cern,https://github.com/root-project/root/pull/16045,2,['test'],"['test', 'tested']"
Testability,# This Pull request:; Translated FOAM tutorials into Python. ## Checklist:. - [ yes] tested changes locally; - [ yes] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15565:85,test,tested,85,https://root.cern,https://github.com/root-project/root/pull/15565,1,['test'],['tested']
Testability,# This Pull request:; Translated Matrix-Tutorials into Python. ## Checklist:. - [ yes ] tested changes locally; - [ yes ] updated the docs (if necessary); - [ yes ] synchronized forked with master(latest-stable),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15575:88,test,tested,88,https://root.cern,https://github.com/root-project/root/pull/15575,1,['test'],['tested']
Testability,"# This Pull request:; Translates all ""math"" tutorials into Python.; ## Changes or fixes:; It shows creative ways of using C++ methods in Python more than; the usual way of ROOT.gROOT.ProcessLine method. There are some notes; about why we should or shouldn't use some syntax(inherited from C++-ROOT) ; in Python.; Enjoy them as much as I did reproducing them. ## Checklist:. - [yes] very well tested changes locally; - [yes] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15960:392,test,tested,392,https://root.cern,https://github.com/root-project/root/pull/15960,1,['test'],['tested']
Testability,"# This Pull request:; Translates the tutorials of the `root/tutorials/v7` into Python language.; Some of them have C++ wrappers(simple extension module) to achieve their functionality and match ; the behavior of its corresponding C++ version.; As suggested by cppyy documentation, first they(the wrappers) are compiled, then they are loaded in the Python script. ## Checklist:; - [yes] tested changes locally; - [yes] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16657:386,test,tested,386,https://root.cern,https://github.com/root-project/root/pull/16657,1,['test'],['tested']
Testability,"# This Pull request:; Update the distributed RDataFrame to use the HeadNode _localrdf to keep track of transform operations, and add the ability to call GetColumnNames on a NodeProxy object. . ## Changes or fixes:; - Add GetColumnNames method to NodeProxy which calls the HeadNode GetColumnNames method; - Propagate transform operations to the HeadNode _localrdf, mainly to keep track of user-defined columns . ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #15442",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15476:432,test,tested,432,https://root.cern,https://github.com/root-project/root/pull/15476,1,['test'],['tested']
Testability,# This Pull request:; Updates the TGeoHype reference documentation.; ## Changes or fixes:; The definition of stin/stout were incorrect; https://root-forum.cern.ch/t/tgeohype-reference-documentation/54605/2. ## Checklist:. - [ ] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12700:228,test,tested,228,https://root.cern,https://github.com/root-project/root/pull/12700,1,['test'],['tested']
Testability,"# This Pull request:; Updates the implementation of BatchNormalization Operator to parse input tensors with parametric shapes.; - `x` input tensor can have shapes of form `{dim1, dim2, dim3}`; - `scale`, `B`, `input_mean`, `input_var` tensors need to be initialized tensors. [ONNX Documentation](https://github.com/onnx/onnx/blob/main/docs/Operators.md#BatchNormalization); ## Changes or fixes:; - Updated implementation in the `ROperator_BatchNormalization.hxx` file to handle parametric shapes. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16282:518,test,tested,518,https://root.cern,https://github.com/root-project/root/pull/16282,1,['test'],['tested']
Testability,"# This Pull request:; When the GDML file contains definitions of elements with isotopes and the element name matches one of the predefined standard elements, the pre-defined element is overwritten rather than being reused, since this is the expected behaviour.; ## Changes or fixes:; Added support for modifying a pre-defined element (adding isotopes). ## Checklist:. - [x ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #9421",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9602:375,test,tested,375,https://root.cern,https://github.com/root-project/root/pull/9602,1,['test'],['tested']
Testability,"# This Pull request:; While using the FromSpec function, the ordering of parsed files from the JSON specification file is alphabetical, while it should be the nominal ordering of samples and friends from the JSON file. . ## Changes or fixes:; The JSON ordering is fixed in the RDataFrame.cxx file. The test is added in dataframe_datasetspec test file. . ## Checklist:. - [x] tested changes locally. This PR fixes #13037",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13187:302,test,test,302,https://root.cern,https://github.com/root-project/root/pull/13187,3,['test'],"['test', 'tested']"
Testability,"# This Pull request:; [DF] Added SaveGraph Tutorials; [DF] Remove static members from SaveGraph (Apply improvements from #9145). ## Changes or fixes:. Removed the static GraphNode id initializer (relevant for SaveGraph). Removed static maps, which were used to check if a define/filter/range node were already on the computation graph.; Solution is to pass a (non-static) map, which is created at each call of SaveGraph. The visited map is now only one and has signature `std::unordered_map<void *, std::shared_ptr<GraphNode>>` - in this manner, different type of nodes can use the same map. The size of the map of visited nodes is used to assign unique ids. Now, also the action nodes are in the visited map. Moreover, some friend methods are now redundant. Tests were adapted accordingly. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #9145",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9540:759,Test,Tests,759,https://root.cern,https://github.com/root-project/root/pull/9540,2,"['Test', 'test']","['Tests', 'tested']"
Testability,"# This Pull request:; adds UInts to `RField::AutoAdjustColumnTypes` to make sure we don't split them when compression is 0, similarly to Int and Real types. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16534:178,test,tested,178,https://root.cern,https://github.com/root-project/root/pull/16534,1,['test'],['tested']
Testability,# This Pull request:; adds a `fCreateBare` option to `RCreateModelOptions that allows reconstructing a model without a default entry. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #16324,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16678:155,test,tested,155,https://root.cern,https://github.com/root-project/root/pull/16678,1,['test'],['tested']
Testability,"# This Pull request:; adds a field in the RNTuple anchor that specifies the max key size, i.e. the biggest payload that can be stored in a TKey.; This will allow the RNTuple readers and writers to handle payloads bigger than that limit (currently 1 GiB) by splitting it into multiple TKeys. Bumped RNTuple class version to 6. **NOTE**: this change doesn't break forward compatibility because old readers weren't able to read payloads larger than `maxKeySize` anyway. . ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15771:490,test,tested,490,https://root.cern,https://github.com/root-project/root/pull/15771,1,['test'],['tested']
Testability,"# This Pull request:; adds a new ColumnType `Real32Trunc`, that stores a real value as a tightly-packed, IEEE-754 single precision float using less than 32 bits. The missing bits are simply truncated from the mantissa, causing the value to be rounded towards zero.; The valid range of bit widths is `[10, 31]` inclusive. This is the first ColumnType with a variable bit width, therefore it requires some extra handling on the RColumnElement and RField side, but it uses a single type id on disk (`0x1D`) and a single enum value `EColumnType::kReal32Trunc`. The way to use it is by calling the new `SetTruncated(nBits)` method on `RField<float>`. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16192:667,test,tested,667,https://root.cern,https://github.com/root-project/root/pull/16192,1,['test'],['tested']
Testability,"# This Pull request:; adds an option to CreateModel: `fForwardCompatible`. If true, the model will be created successfully even if the RNTuple contains unknown column types, and all fields that recursively contain one will be skipped and won't appear in the model. ## Notes:; Depends on #16627; #16602 will be rebased on this. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16631:348,test,tested,348,https://root.cern,https://github.com/root-project/root/pull/16631,1,['test'],['tested']
Testability,# This Pull request:; adds documentation for the RNTuple anchor structure in the ntuple specifications. Fixes https://github.com/root-project/root/issues/15666. ## Checklist:. - [ ] tested changes locally; - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15673:182,test,tested,182,https://root.cern,https://github.com/root-project/root/pull/15673,1,['test'],['tested']
Testability,"# This Pull request:; adds the `-Ddev=on` flag on the debian CI machine. It's a ""test run"" to see if we can later enable it on more (potentially all) build machines. Here's what the flag does:; - enables asserts; - (Linux|BSD) enables -Werror; - (Linux|BSD) does not relink if a dependent .so has changed (CMAKE_LINK_DEPENDS_NO_SHARED On); - (Linux|BSD) splits debug info (-gsplit-dwarf); - (Linux|BSD) uses lld if available; - defines USE_LESS_INCLUDES",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15853:81,test,test,81,https://root.cern,https://github.com/root-project/root/pull/15853,2,"['assert', 'test']","['asserts', 'test']"
Testability,"# This Pull request:; adds the `Real32Quant` column type to RNTuple. This column type stores floating point values on disk as integers with a user-defined precision (from 3 to 32 bits) and a user-defined value range. This allows to reduce the storage space required to save floats with a well-defined range with more precision than a simple truncation. The conversion is defined as (pseudocode): ; ```; def quantize(value, min, max, n_precision_bits); {; quantized_max = (1 << n_precision_bits) - 1;; scale = quantized_max / (max - min);; quantized = round((value - min) * scale);; return quantized;; }; ```. This change requires adding metadata to the on-disk information, more specifically in the Field Description (see specifications.md for more details). ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16390:780,test,tested,780,https://root.cern,https://github.com/root-project/root/pull/16390,1,['test'],['tested']
Testability,"# This Pull request:; adds the `html` build options to allow enabling/disabling building of THtml-related code. ; Setting the flag to **OFF** by default (meaning we won't build html anymore by default), since we intend to deprecate THtml in the near future. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16267:279,test,tested,279,https://root.cern,https://github.com/root-project/root/pull/16267,1,['test'],['tested']
Testability,"# This Pull request:; adds the possibility of requesting metrics in `RNTupleReadOptions`. ; Since one normally has to call `EnableMetrics()` on the RNTupleReader to start collecting metrics, it is currently not possible to query the metrics gathered during construction of the reader itself. With this new option you can request metrics to be enabled at construction time. As a somewhat arbitrary choice, an RNTupleReader created via `Clone()` will inherit this option from the one it is cloned from. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15953:522,test,tested,522,https://root.cern,https://github.com/root-project/root/pull/15953,1,['test'],['tested']
Testability,# This Pull request:; adds the use of `RClusterPool` to preload clusters during merging of RNTuples. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15954:122,test,tested,122,https://root.cern,https://github.com/root-project/root/pull/15954,1,['test'],['tested']
Testability,"# This Pull request:; allows loading a RNTuple containing locators of unknown types. Rather than failing upon reading the RNTuple, we will throw an exception only when attempting to load a page containing an unknown locator type. This allows reconstructing the model and reading the descriptor. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16760:316,test,tested,316,https://root.cern,https://github.com/root-project/root/pull/16760,1,['test'],['tested']
Testability,# This Pull request:; as described and discussed in #13174. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #13174,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13247:103,test,tested,103,https://root.cern,https://github.com/root-project/root/pull/13247,1,['test'],['tested']
Testability,"# This Pull request:; avoids throwing an exception when creating the descriptor for an RNTuple containing an unknown column type. We want to support this case for forward compatibility. Also adds a unit test testing this specific case.; Some dedicated code needs to be added to the internals of RNTuple to support this kind of test case, but it's not exposed to the user. ## Remarks; Currently the test just checks that we can read back the descriptor. A future PR will add a ""fwd compatibility mode"" to the read options that'll allow a user to reconstruct the model skipping over fields containing unknown column types. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16516:203,test,test,203,https://root.cern,https://github.com/root-project/root/pull/16516,5,['test'],"['test', 'tested', 'testing']"
Testability,# This Pull request:; bumps the version of built-in Vc to 1.4.4 which does not use any more the deprecated std::iterator in favour of traits. ## Changes or fixes:. ## Checklist:. - [v] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes warnings on Fedora,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13823:185,test,tested,185,https://root.cern,https://github.com/root-project/root/pull/13823,1,['test'],['tested']
Testability,"# This Pull request:; by @hahnjo suggestion, since we are exposing a type-erased virtual interface for `RColumnElement` through `RColumnElementBase`, we can hide all the concrete definitions into a cxx file.; This has the benefit of reducing the compile time of any translation unit that includes `RColumnElementBase.hxx` significantly, as the compiler won't have to instantiate all the combination matrix of `RColumnElement<CppT, ColumnType>` every time.; It also let us have better control on exactly which types of `RColumnElement` we allow to instantiate by explicitly listing them into a proxy enum. ## Changes or fixes:; - renamed `RColumnElement.hxx` to `RColumnElementBase.hxx`; - moved all concrete definitions from `RColumnElementBase.hxx` to `src/RColumnElement.hxx`. This is a private header file that is included by `RColumnElement.cxx` and by `ntuple_endian.cxx`. The reason to separate this from `RColumnElement.cxx` is that `ntuple_endian.cxx` needs to simulate a big-endian machine by defining `R__LITTLE_ENDIAN 0`, which changes the definitions of some `RColumnElement`s. To avoid including the whole `RColumnElement.cxx` in the test, we decided to split the definitions into a file that can be included independently by the test. It's not a perfect solution (the test executable ends up with mismatching instantiations of RColumnElement since it links to libROOTNTuple.so) but it's technically not worse than before. We still might want to think of alternative solutions.; - introduces an enum `EColumnCppType` that lists all the allowed c++ in-memory types for RColumnElement. This is used internally to map the templated `RColumnElementBase::Generate` to a non-templated function that can be implemented in the cxx file. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16299:1147,test,test,1147,https://root.cern,https://github.com/root-project/root/pull/16299,4,['test'],"['test', 'tested']"
Testability,# This Pull request:; clang-formats some RDF tests (that will need to be modified by a later PR),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15794:45,test,tests,45,https://root.cern,https://github.com/root-project/root/pull/15794,1,['test'],['tests']
Testability,# This Pull request:; deletes file `BasicMinimumError.cxx` containing unused class `BasicMinimumError`. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16524:125,test,tested,125,https://root.cern,https://github.com/root-project/root/pull/16524,1,['test'],['tested']
Testability,"# This Pull request:; depends on https://github.com/root-project/root/pull/15553. The interesting file to look at is `ntuple_compat.cxx`. Adding some RNTuple compat tests where we handcraft an on-disk representation for a RNTuple (and its wrapping TKey) and we try to read it back to verify it works.; The reason to do this is that we can then mess around with the binary representation to simulate both a corrupted payload and a future version of RNTuple, which allows to test forward compatibility. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15618:165,test,tests,165,https://root.cern,https://github.com/root-project/root/pull/15618,3,['test'],"['test', 'tested', 'tests']"
Testability,"# This Pull request:; fixed https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/2946/LABEL=ROOT-performance-centos8-multicore,SPEC=default,V=master/console. ## Changes or fixes:; reverted header RExport.h changed in https://github.com/root-project/root/commit/4809ef48e9d3cc48bfe5f81f971a5c535b593b39. ## Checklist:. - [ X] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes # . https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/2946/LABEL=ROOT-performance-centos8-multicore,SPEC=default,V=master/console",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8843:361,test,tested,361,https://root.cern,https://github.com/root-project/root/pull/8843,1,['test'],['tested']
Testability,# This Pull request:; fixes `getDirectory` inside `TFileMerger.cxx` which is looking up objects by name rather than by full path. Added regression test: https://github.com/root-project/roottest/pull/1191. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #16190 and #16474,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16518:147,test,test,147,https://root.cern,https://github.com/root-project/root/pull/16518,2,['test'],"['test', 'tested']"
Testability,"# This Pull request:; fixes an issue when installing as root changes the permissions of the `etc` folder and makes the installation unusable for other users. This happened because `etc` didn't have enough permissions in the source tree for other users and those are preserved in the installation directory.; ## Changes or fixes:; The issue is the following, if `etc` has permissions, for example, 700 in the source tree, after compiling as a user and then using `sudo ninja install`, the folder `etc` keeps the same permissions. This is an ls of the installation folder when I install to `/usr/local`:; ```; Permissions Size User Date Modified Name; drwxr-xr-x - root 3 Apr 18:08 bin; drwxr-xr-x - root 3 Apr 18:08 cmake; drwxr-xr-x - root 3 Apr 18:08 config; drwx------ - root 3 Apr 18:08 etc; drwxr-xr-x - root 28 Jan 09:45 fonts; drwxr-xr-x - root 28 Jan 09:45 icons; drwxr-xr-x - root 3 Apr 18:08 include; drwxr-xr-x - root 3 Apr 18:08 js; drwxr-xr-x - root 3 Apr 18:08 lib; .rw-r--r-- 847 root 29 Oct 2023 LICENSE; drwxr-xr-x - root 28 Jan 09:45 macros; drwxr-xr-x - root 28 Jan 09:44 man; drwxr-xr-x - root 28 Jan 09:45 README; drwxr-xr-x - root 3 Apr 18:08 tutorials; drwxr-xr-x - root 28 Jan 09:45 ui; ```; This PR fixes it by setting the right permissions at installation time, so that the permissions in the source tree don't matter. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). I'm using CMake 3.29 and compiling ROOT 6.30.06 but this has been happening for a while for different versions of CMake and ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15138:1365,test,tested,1365,https://root.cern,https://github.com/root-project/root/pull/15138,1,['test'],['tested']
Testability,"# This Pull request:; fixes the order of declaration of TTree/TFile in a test function of RDF, that was mistakenly changed in 5f56b95832d0f31d0d85dc0a6cc93aa9cb375159. . ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16421:73,test,test,73,https://root.cern,https://github.com/root-project/root/pull/16421,2,['test'],"['test', 'tested']"
Testability,# This Pull request:; gives RNTupleMerger the capability of changing the source RNTuples' compression while doing the merging. This can also be used to change the compression of a single RNTuple. Depends on #15954 . ## Changes or fixes:. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15992:259,test,tested,259,https://root.cern,https://github.com/root-project/root/pull/15992,1,['test'],['tested']
Testability,# This Pull request:; implements access to some cpu information via gSystem->GetSysInfo. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #13128,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13129:132,test,tested,132,https://root.cern,https://github.com/root-project/root/pull/13129,1,['test'],['tested']
Testability,# This Pull request:; implements the Equal Operator with unit tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13171:62,test,tests,62,https://root.cern,https://github.com/root-project/root/pull/13171,1,['test'],['tests']
Testability,"# This Pull request:; is the first half of #15714. It deprecates `ECompressionAlgorithm` in favor of `RCompressionSetting::EAlgorithm` and fixes the code to use the new enum.; This PR should be much safer and less problematic to merge than #15714, so we can start with this and later discuss about changing the `RCompressionSetting` enums to enum classes. Depends on #15820 . ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15821:397,test,tested,397,https://root.cern,https://github.com/root-project/root/pull/15821,1,['test'],['tested']
Testability,"# This Pull request:; moves most of the nested classes definitions in RNTupleDescriptor.cxx out of line, for ease of reading.; (Unfortunately, since the types are all public, they cannot be moved to the cxx). ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16166:230,test,tested,230,https://root.cern,https://github.com/root-project/root/pull/16166,1,['test'],['tested']
Testability,# This Pull request:; moves the dtor of RNTupleInspector to the cxx to avoid including (or having the user include) RPageStorage.hxx (otherwise ~unique_ptr<RPageSource> complains about incomplete type). ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16533:224,test,tested,224,https://root.cern,https://github.com/root-project/root/pull/16533,1,['test'],['tested']
Testability,# This Pull request:; moves various definitions outside of `RFieldBase` for improved readability. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16510:119,test,tested,119,https://root.cern,https://github.com/root-project/root/pull/16510,1,['test'],['tested']
Testability,"# This Pull request:; refactors RNTupleMerger to properly support late model extension.; The ""Union"" merging mode is added, allowing the merger to late-model-extend the destination to include all the fields of the input ntuples (instead of ignoring unknown fields / complaining when models don't match).; Likewise, the ""Strict"" merging mode is added that checks that all inputs have the exact same structure.; By default, the old behavior (named ""Filter"") is used. To better compare the RNTuples structures, the merging logic is now more properly considering the fields of each input, rather than just the columns as it was previously. This also allows for more descriptive messages to the user if some mismatch is found. NOTE: the `RNTupleMerger::Merge` function now returns a RResult instead of throwing exceptions on error. ## TODO; - the new merging modes should be exposed to hadd. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16080:520,log,logic,520,https://root.cern,https://github.com/root-project/root/pull/16080,2,"['log', 'test']","['logic', 'tested']"
Testability,# This Pull request:; remove deprecated code for PyMVA. ## Changes or fixes:; remove a couple of methods for python that are not needed anymore. ## Checklist:. - [ X] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12206:167,test,tested,167,https://root.cern,https://github.com/root-project/root/pull/12206,1,['test'],['tested']
Testability,# This Pull request:; removes commented-out code from TKey involving `kMAXFILEBUFFER`. That code has been commented-out since 2001 and it's unlikely to see use again. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15671:188,test,tested,188,https://root.cern,https://github.com/root-project/root/pull/15671,1,['test'],['tested']
Testability,# This Pull request:; rf204_extrangefit.py translated to C++; ## Changes or fixes:; Whole python code was translated to C++ with code description as written in rf204_extrangefit.py. Hope this helps. Thanks! . ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9218:230,test,tested,230,https://root.cern,https://github.com/root-project/root/pull/9218,1,['test'],['tested']
Testability,# This Pull request:; roostats tutorials translated into Python; ## Changes or fixes:; The unmarked C++ roostats tutorials have been translated into python3. ## Checklist:. - [ yes ] tested changes locally with ipython3; - [ yes ] updated the docs . This PR fixes # ; https://github.com/root-project/root/issues/8758 ; and should close the issue.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15371:183,test,tested,183,https://root.cern,https://github.com/root-project/root/pull/15371,1,['test'],['tested']
Testability,"# This Pull request:; splits `RNTupleView<T, bool>` into `RNTupleUnownedView` and `RNTupleOwnedView`. `RNTupleView` is renamed to `Internal::RNTupleViewBase` and used as the base class for the new public classes. # Notes; - I'm conflicted about the naming of the classes. For me it's ambiguous whether the `Unowned` and `Owned` labels should be changed to, respectively, `Owning` and `Unowning` (note the swap). On one hand you could say `RNTupleView<T, false>` is ""Unowned"" *by the user*; on the other, you could say it is ""Owning"" its memory. Thoughts about this?; - I made `RNTupleViewBase` not constructible (aside from friend classes) by giving it a protected destructor. Maybe we don't want to exclude this possibility (e.g. to allow users to use the base class in template metaprogramming), but in this case maybe we don't want to make it `Internal` either. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #16321",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16363:886,test,tested,886,https://root.cern,https://github.com/root-project/root/pull/16363,1,['test'],['tested']
Testability,"# This Pull request:; uses `RNTuple::fMaxKeySize` to split any payload larger than that into multiple chunks, each backed by a TKey. These keys are then read back as a single object. Depends on #15869. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15776:223,test,tested,223,https://root.cern,https://github.com/root-project/root/pull/15776,1,['test'],['tested']
Testability,"# This pull request:. Switches ROOT to only using ""pthread_attr_setaffinity_np"" on glibc, instead of all platforms that aren't MacOS. This function is only available on glibc (see [here](http://stress.stappe.de/software/gnulib/manual/html_node/pthread_005fattr_005fsetaffinity_005fnp.html), so this can currently not be compiled on other libc's for linux, such as musl, or other OS's besides MacOS that don't use glibc. ## Changes or fixes:. Fixes compatibility for platforms that aren't MacOS or glibc. . ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10045:527,test,tested,527,https://root.cern,https://github.com/root-project/root/pull/10045,1,['test'],['tested']
Testability,"## Backport of #14627. ## Changes or fixes:. ROOT is known to have a 1 GB maximum IO size, see https://github.com/root-project/root/issues/6734, but did not provide proper safety checks against this (since 18y). This lead to silent crashes in the WriteFastArray function. The length of the buffer Int_t l takes a negative value if we do not add these checks and n is high enough. This fixes the crash reported here: https://root-forum.cern.ch/t/crash-when-writing-canvas-to-tfile/58010/8?u=ferhue ; A reproducer of the crash is also in that link.; Seems there are more people seeing a similar crash on the forum https://root-forum.cern.ch/t/writing-out-events-larger-than-1-gb/33106. I did not check in depth, but this PR also probably fixes https://github.com/cms-sw/cmssw/issues/40132. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). Fixes https://github.com/root-project/root/issues/14644",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15687:809,test,tested,809,https://root.cern,https://github.com/root-project/root/pull/15687,1,['test'],['tested']
Testability,## Changes or fixes:. * Rvec can now swap small and adopting vectors.; * Introduce ROOT::Detail::VecOps::IsSmall(v) and ROOT::Detail::VecOps::IsAdopting(v) to check whether an RVec is small and owning its memory respectively; * Added a corresponding test suite. ## Checklist:. - [x] tested changes locally. This PR fixes #10297,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10325:250,test,test,250,https://root.cern,https://github.com/root-project/root/pull/10325,2,['test'],"['test', 'tested']"
Testability,"## Changes or fixes:. 1. Environment variable `CLING_HISTFILE` to specify history file path.; 2. Environment variable `CLING_HISTSIZE` to specify history size. The original behavior is to not set the history size explicitly.; That is equivalent to unlimited history size according to `textinput::History::AppendToFile()` (history file will never be pruned so it grows indefinitely). This is probably not most users expect. @Axel-Naumann, @vgvassilev do you think it makes sense to set default cling history size to something like 500 ? (That changes current behavior.). ## Checklist:. - [X] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11286:591,test,tested,591,https://root.cern,https://github.com/root-project/root/pull/11286,1,['test'],['tested']
Testability,## Changes or fixes:. A minor memleak in cling::UserInterface::runInteractively() reported by valgrind. ## Checklist:. - [X] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11274:125,test,tested,125,https://root.cern,https://github.com/root-project/root/pull/11274,1,['test'],['tested']
Testability,"## Changes or fixes:. I built from source using the default ""ROOT-llvm16"" branch of root-project/llvm-project. I didn't have to do much work to allow the creation of updated Jupyter kernels (C++20 and C++2b). I thought I might as well share the result. All the best, Daniel. (Nb: I moved this pull request from the root/cling mirror site as suggested by @ferdymercury ). ## Checklist:. - [X] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15245:392,test,tested,392,https://root.cern,https://github.com/root-project/root/pull/15245,1,['test'],['tested']
Testability,## Changes or fixes:. Implement startup script support according to this post:; https://root-forum.cern.ch/t/cling-startup-scripts-support/51358. ## Checklist:. - [X] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11262:167,test,tested,167,https://root.cern,https://github.com/root-project/root/pull/11262,1,['test'],['tested']
Testability,"## Changes or fixes:. On Ubuntu 22.04 , execute standalone cling binary. In cmd prompt execute .x meta command without giving a filename, cling crashes. The proposed solution is to directly reject the .x command without giving clear diagnostics. This is not user friendly but this is currently how `MetaParser.cpp` handles all parsing/input error. At least it prevents crashing. ## Checklist:. - [X] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11264:400,test,tested,400,https://root.cern,https://github.com/root-project/root/pull/11264,1,['test'],['tested']
Testability,"## Changes or fixes:. With ROOT6 understanding STL containers, there is no reason to pass arrays as two parameters ``(int size, some_t* array)``. . A TAxis with custom bins can now be constructed from a ``std::vector<double>``, which will be convenient later. . A THnSparseT can now be constructed from either a ``std::vector<TAxis*>`` (more in the spirit ""always use pointers"" of ROOT) or ``std::vector<TAxis>`` (which allows neatly filling the vector from a initializer list, but does not allow the reuse of one TAxis object in different vectors, not that I personally care). . Both forms will allow providing some TAxis in the (bins, min, max) scheme and other axes as an explicit list, which previous constructors did not support. (I have not yet tested such histograms much yet.). One might discuss marking the new TAxis constructor explicit to prevent implicit conversion of ``std::vector<double>``. . ## Checklist:; - [x] tested changes locally (compiles, GetAxis results look like what I expected.); - [X] updated the docs (if necessary) (Only the /// Comment in some constructors). Excerpt from [test2.txt](https://github.com/root-project/root/files/10451814/test2.txt); ```; // old:; std::vector<double> xv{0, 1, 2, 3, 4, 5};; TAxis a0 {int(xv.size()-1), xv.data()};; // new: construct axis from std::vector<double> bin list; TAxis a1 {{0, 1, 2, 3, 4, 5}}; ; ...; //THnSparseX by std::vector<TAxis>:; THnSparseD h{""test"", ""test"",; // std::vector<TAxis>; {{100, 0., 20.}, // TAxis by bins, min, max; {int(xv.size()-1), xv.data()}, // TAxis by bins, double*; {{7, 8, 9, 10, 11}} }}; // TAxis by new constructor; ```; Excerpt from [out.txt](https://github.com/root-project/root/files/10451816/out.txt):; ```; THnSparseT<TArrayD> (*0x7ffd225ee5a0): ""test"" ""test""; 3 dimensions, 1 entries in 1 filled bins; axis 0: 100 bins from 0 to 20 (uniform bin widths); axis 1: 5 bins from 0 to 5 (custom bin widths); axis 2: 4 bins from 7 to 11 (custom bin widths); ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12059:751,test,tested,751,https://root.cern,https://github.com/root-project/root/pull/12059,6,['test'],"['test', 'tested']"
Testability,"## Changes or fixes:; * Add XZ,YZ, ZX, and ZY projection types; * Zero version of Lego view type; * Add energy scaling in REveDataProxyBuilderBase; * Ability to set camera type through REveViewer; * Corrections in reuse of compounds in REveDataSimpleProxyBuilder; * Fix selection/highlight in REveStraightLineSet. ## Checklist:. - [ x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8676:336,test,tested,336,https://root.cern,https://github.com/root-project/root/pull/8676,1,['test'],['tested']
Testability,## Changes or fixes:; * Rvec can now correctly swap small and adopting vectors with RVec's `swap` function; * Introduce ROOT::Detail::VecOps::IsSmall(v) and ROOT::Detail::VecOps::IsAdopting(v) to check whether an RVec is small and owning its memory respectively; * Added a corresponding test suite. ## Checklist:; - [x] tested changes locally; This PR fixes #10297,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10340:287,test,test,287,https://root.cern,https://github.com/root-project/root/pull/10340,2,['test'],"['test', 'tested']"
Testability,"## Changes or fixes:; After b5d751c069df2725dbc0d96bb1a6a677addc3895, RField.cxx on clang yields the warning:; ```; /home/jp/root/tree/ntuple/v7/src/RField.cxx:2504:58: error: expression with side effects will be evaluated despite being used as an operand to 'typeid' [-Werror,-Wpotentially-evaluated-expression]; errMsg += ""Item field type: "" + std::string(typeid(*fSubFields[0]).name());; ```. Fixing the warning is just a matter of splitting the ptr dereference from the `typeid` expression. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15869:516,test,tested,516,https://root.cern,https://github.com/root-project/root/pull/15869,1,['test'],['tested']
Testability,## Changes or fixes:; Fix shared library output name if the generator is not `Visual Studio` but e.g. `Ninja`. ## Checklist:; - [x] tested changes locally; - [x] ~~updated the docs (if necessary)~~,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12705:132,test,tested,132,https://root.cern,https://github.com/root-project/root/pull/12705,1,['test'],['tested']
Testability,## Changes or fixes:; Fixes build of ntuple tests which sometimes break due to RIO not being regenerated properly. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15784:44,test,tests,44,https://root.cern,https://github.com/root-project/root/pull/15784,2,['test'],"['tested', 'tests']"
Testability,"## Changes or fixes:; Let `a_t` be a c++ class, and we have done `using std::ostream;`.; In standalone cling cmd prompt, all of the below function definitions fail to be parsed and compiled(incrementally).; ```; ::a_t& ::a_t::operator()(int k) {return *this; }; const a_t& a_t::operator[](int k) const {return *this; }; a_t::a_t() = default;; a_t::~a_t() = delete;; ::a_t& ::a_t::operator()(int k) {return *this; }; std::ostream& operator>>(std::ostream& os, const a_t& a) {return (os << a.str << '\n');}; ostream& operator>>(std::ostream& os, const a_t& a) {return (os << a.str << '\n');}; const std::ostream& operator """" _tt(unsigned long long t) {return std::cout << ""tt is "" << t << '\n'; }; ::a_t& operator>=(a_t &lhs, int t) {return lhs; }; a_t& operator<=(::a_t &lhs, int t) {return lhs; }; const a_t& operator<(a_t &lhs, int t) {return lhs; }; const ::a_t& operator>(a_t &lhs, int t) {return lhs; }; ```; They get ""error: function definition is not allowed here"" due to `cling::utils::getWrapPoint()` wrongly determines to wrap function definition inside wrapper function `__cling_Un1Qu3...` . The root cause is that `MinimalPPLexer::IsClassOrFunction()` does not parse them as function definitions. This pullrequest enables `MinimalPPLexer::IsClassOrFunction()` to parse these kinds of func def but there are probably more edge cases of standard c++ func def not being recognized by `MinimalPPLexer::IsClassOrFunction()`. ## Checklist:. - [X] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes ""error: function definition is not allowed here"" ( https://github.com/root-project/cling/issues/184 ).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11265:1452,test,tested,1452,https://root.cern,https://github.com/root-project/root/pull/11265,1,['test'],['tested']
Testability,## Changes or fixes:; `RTreeColumnReader` now uses `swap` in stead of `std::swap`. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10040:104,test,tested,104,https://root.cern,https://github.com/root-project/root/pull/10040,1,['test'],['tested']
Testability,"## Changes or fixes:; added/modified MinInt, MaxInt, IntRndm.; added test of Integer interface. ## Checklist:. - [ x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12410:69,test,test,69,https://root.cern,https://github.com/root-project/root/pull/12410,2,['test'],"['test', 'tested']"
Testability,"## Changes:. This PR introduces a major refactoring of the `RooAbs(Opt)TestStatistic`-`RooNLLVar` inheritance tree into:. 1. statistics-based classes on the one hand;; 2. calculation/evaluation/optimization based classes on the other hand. The likelihood is the central unit on the statistics side. The `RooAbsL` class is implemented for four kinds of likelihoods: binned, unbinned, ""subsidiary"" (an optimization for numerical stability that gathers components like global observables) and ""sum"" (over multiple components of the other types). These classes provide ways to compute their components in parallelizable chunks that can be used by the calculator classes as they see fit. On top of the likelihood classes, we also provide for convenience a set of likelihood builders. The calculator ""`...Wrapper`"" classes are abstract interfaces. These can be implemented for different kinds of algorithms, or with different kinds of optimization ""back-ends"" in mind. In an upcoming PR, we will introduce the fork-based multi-processing implementation based on `RooFit::MultiProcess`. Other possible implementations could use the GPU or external tools like TensorFlow. The coupling of all these classes to `RooMinimizer` is made via the `MinuitFcnGrad` class, which owns the `...Wrappers` that calculate the likelihood components. ## Todo:. There are still a couple of things that require attention, which I hope the reviewers can help me with:. 1. I have a Kahan summation helper class. This should probably be replaced with the new Kahan summation class in ROOT itself, but I didn't get to this yet. Maybe it is not urgent to do now, up for discussion.; 2. `likelihood_builders.cxx` is still missing the top level entry point function. This should be quite a simple function: it should just check whether the pdf is binned, unbinned or sum and has subsidiary terms. All the building blocks are already present, so it is just a matter of building it, but didn't get to it yet.; 3. `optional_parameter_type",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8700:71,Test,TestStatistic,71,https://root.cern,https://github.com/root-project/root/pull/8700,1,['Test'],['TestStatistic']
Testability,## Checklist:. - [ ] tested changes locally; - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12145:21,test,tested,21,https://root.cern,https://github.com/root-project/root/pull/12145,1,['test'],['tested']
Testability,## Checklist:. - [ ] tested changes locally; - [x] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/13513,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13545:21,test,tested,21,https://root.cern,https://github.com/root-project/root/pull/13545,1,['test'],['tested']
Testability,"## Checklist:. - [X] tested changes locally; - ~[ ] updated the docs (if necessary)~. Dear ROOT maintainers,; While the ROOT version shipped with FairSoft (v6-26-10) seems not to compile with C++20 yet, the ROOT libraries (compiled with C++17) can be linked against C++20 code. . But while trying to do that, I noticed that my compiler got confused because it had multiple definitions of ``std::span``:; One in [span.hxx](https://github.com/root-project/root/blob/master/core/foundation/inc/ROOT/span.hxx#L147); ```; namespace std {; inline namespace __ROOT {; template<class T>; class span { ... };; }}; ```; and one provided in a header by g++ or libstdc++. . I feel that unless one is developing a libstdc++, there are few valid cases of declaring stuff in the std namespace. (Exceptions include overloading operators for iostream with custom classes.) The point of having namespaces in the first place is to avoid such collisions!. The following actions would resolve my complaint:; * Merging this PR or something similar and replacing std::span with std::__ROOT_NI::span (or perhaps ROOT::span?) ; * Removing span.hxx from the API, using it only internally during ROOT compilation.; * Requiring C++20 and using the std::span which comes with the users libstdc++; * Shipping your own libstdc++, thus taking responsibility for the whole std namespace. . Cheers,; Philipp",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11968:21,test,tested,21,https://root.cern,https://github.com/root-project/root/pull/11968,1,['test'],['tested']
Testability,## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15879:21,test,tested,21,https://root.cern,https://github.com/root-project/root/pull/15879,1,['test'],['tested']
Testability,## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes https://sft.its.cern.ch/jira/browse/ROOT-8498,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11281:21,test,tested,21,https://root.cern,https://github.com/root-project/root/pull/11281,1,['test'],['tested']
Testability,"## Describe the bug. I am trying to use the new TBulkRead API. I have a set of branches that I read with (updated with full reproducer):. ```c++; #include <TBufferFile.h>; #include <TFile.h>; #include <TTree.h>; #include <iostream>. void foo() {; auto f = TFile::Open(""http://hyperloop.cern.ch/train-workdir/testdata/LFN/alice/data/2015/LHC15o/000245064/pass5_lowIR/PWGZZ/Run3_Conversion/71_20200915-2255_child_1/0935/AO2D.root"");; auto t = (TTree*)f->Get(""O2track"");; auto e = t->GetEntries();; auto b = t->GetBranch(""fAlpha"");; assert(b);; int pos = 0;; while (pos < e) {; TBufferFile buf(TBuffer::EMode::kWrite, 32*1024);; auto &r = b->GetBulkRead();; auto s = r.GetBulkEntries(pos, buf);; pos += s;; std::cout << ""Read "" << s << "" elements "" << std::endl;; b->Print();; }; }; ```. however when I get to read the last but one buffer, I get:. ```c++; Read 1000 elements; *Br 3398 :fAlpha : fAlpha/F *; *Entries : 3399743 : Total Size= 13939349 bytes File Size = 11798760 *; *Baskets : 3399 : Basket Size= 1000 bytes Compression= 1.17 *; *............................................................................*; Fatal: fExtraBasket == nullptr && ""fExtraBasket should have been set to nullptr by GetFreshBasket"" violated at line 1474 of `/Users/ktf/src/sw/SOURCES/ROOT/v6-20-02-alice7/v6-20-02-alice7/tree/tree/src/TBranch.cxx'; aborting; ```. ## Expected behavior. Reading all the baskets, with the last one returning the appropriate number of entries. ## To Reproduce. ## Setup. 6.20.0. ## Additional context. TFile with a few TTree in it, all the branches have basic types or arrays of basic types.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6416:308,test,testdata,308,https://root.cern,https://github.com/root-project/root/issues/6416,2,"['assert', 'test']","['assert', 'testdata']"
Testability,"## Describe the bug. I just ran into an issue while trying to use the ATLAS analysis software on the latest version of macOS, with the latest version of Xcode. While trying to load the dictionary of a class whose header includes `<boost/shared_ptr.hpp>`, my test application dies. To simplify things a bit, I put a simple reproducer under: https://github.com/krasznaa/root-boost-dictionary-error With which I see the following:. ```; [bash][eowyn-1]:root-boost-dictionary-error > root; ------------------------------------------------------------------; | Welcome to ROOT 6.22/02 https://root.cern |; | (c) 1995-2020, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for macosx64 on Aug 17 2020, 12:46:52 |; | From tags/v6-22-02@v6-22-02 |; | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------. root [0] MyClass c;; In file included from libMyLibrary dictionary payload:5:; In file included from ./MyClass.h:6:; In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:; /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:31: error: expected expression; template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT; ^; /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:83:73: note: expanded from macro 'atomic_is_lock_free'; #define atomic_is_lock_free(obj) __c11_atomic_is_lock_free(sizeof(*(obj))); ^; In file included from libMyLibrary dictionary payload:5:; In file included from ./MyClass.h:6:; In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:; /Users",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6454:258,test,test,258,https://root.cern,https://github.com/root-project/root/issues/6454,1,['test'],['test']
Testability,"## Describe the bug. See PR #6418 's `core/metacling/test/TClingMethodInfoTests.cxx`, in `TEST(TClingMethodInfo, TemplateFun)`",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6481:53,test,test,53,https://root.cern,https://github.com/root-project/root/issues/6481,2,"['TEST', 'test']","['TEST', 'test']"
Testability,"## Describe the bug; <!--; A clear and concise description of what the wrong behavior is.; -->. Reported [on the forum](https://root-forum.cern.ch/t/crash-when-creating-rdataframe-graph/42343/3), with a reproducer. [test3.C](https://root-forum.cern.ch/uploads/short-url/7ZVxQ0j0rgaCf65KgARmFplQGlz.C) + [testtree2.root](https://root-forum.cern.ch/uploads/short-url/bXK8KdWy4gp0xW8iT7zEIXAXJ3V.root) should produce . ![image](https://user-images.githubusercontent.com/10999034/99836526-88665b00-2b66-11eb-8859-7e1b7364487e.png). but instead produce. ![image](https://user-images.githubusercontent.com/10999034/99836547-9025ff80-2b66-11eb-84b5-938b2d212152.png). when the following line is uncommented:. ```; //latestDF = std::make_unique<RNode>(latestDF->Define(""r42"",[](){return 42;}));; ```. Furthermore, `Define`s are displayed out of order, in general, by `SaveGraph`. ### Additional context; <!--; Add any other context about the problem here.; -->. The problem is due to broken logic in the `GetGraph` function of `RAction` and `RFilter`: it loops over a `std::map` of Defines to figure out which have been added between that node and the previous node in the graph, but the loop over the `std::map` is out of order -- this causes both issues, the first because the out of order defines cause misattribution of parent nodes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6853:983,log,logic,983,https://root.cern,https://github.com/root-project/root/issues/6853,1,['log'],['logic']
Testability,"## Describe the bug; <!--; A clear and concise description of what the wrong behavior is.; -->. With [ROOT-10692](https://sft.its.cern.ch/jira/browse/ROOT-10692) fixed, ROOT now, by default, uses the default C++ standard of the compiler rather than always using C++11. However, due to how our cmake logic is structured, root7 is still turned off by default, even if the default C++ standard used by the compiler was detected to be C++14 or higher. ## Expected behavior; <!--; A clear and concise description of what you expected to happen.; -->. With a compiler that defaults to `-std=C++14` or above, a vanilla `cmake path/to/root` should have root7 turned on. ## Additional context; <!--; Add any other context about the problem here.; -->. I think the root cause is that, at the following lines in our main `CMakeLists.txt`, we _first_ include `RootBuildOptions` (which sets root7 to OFF by default because it doesn't detect a high-enough C++ standard) and _then_ we include `CheckCompiler`, which sets our default `CMAKE_CXX_STANDARD` to the compiler default. https://github.com/root-project/root/blob/33458dc53621cf3e685a302a4bf899108aed0d0c/CMakeLists.txt#L128-L134. Moving `include(CheckCompiler)` above `include(RootBuildOptions)` fixes this issue but breaks Windows, because some cmake variable that `CheckCompiler` needs in the case of windows were defined earlier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6406:299,log,logic,299,https://root.cern,https://github.com/root-project/root/issues/6406,1,['log'],['logic']
Testability,"## Describe the bug; <!--; A clear and concise description of what the wrong behavior is.; -->; The following code works fine with 6.20.04, but segfaults with 6.22.02. ```cpp; #include ""RooDataSet.h""; #include ""RooRealVar.h""; #include ""TFile.h""; #include ""TTree.h"". int main(int argc, char* argv[]) {; TTree* tree = new TTree(""tree"", ""tree"");; double var = 1;; tree->Branch(""var"", &var, ""var/D"");; tree->Fill();. RooRealVar* roovar = new RooRealVar(""var"", ""var"", 0, 10);; TFile* output_file = new TFile(""test.root"", ""RECREATE"", ""output_file"");. output_file->Print();; RooDataSet* data_set = new RooDataSet(""data_set"", ""data_set"", tree, RooArgSet(*roovar));; output_file->Print();. return 0;; }; ```. The segfault happens on the last `output_file->Print();` line - it seems the creation of the `RooDataSet` somehow destroys the object pointed to by `output_file`. ## Expected behavior; <!--; A clear and concise description of what you expected to happen.; -->; I expect the code to run without segfaulting. ## To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->; 1. Save the quoted code to `mwe_tfile.cc`; 2. Build with `g++ mwe_tfile.cc -o mwe_tfile $(root-config --cflags --glibs) -lRooFitCore`; 3. Run `./mwe_tfile`. ## Setup; <!--; 1. ROOT version; 2. Operating system; 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself.; -->; Ubuntu 18.04; Binary ROOT installs; Works with 6.20.04; Doesn't work with 6.22.02",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6408:504,test,test,504,https://root.cern,https://github.com/root-project/root/issues/6408,1,['test'],['test']
Testability,"## Describe the bug; <!--; A clear and concise description of what the wrong behavior is.; -->; The problem is visible in the [conda nightly builds](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/), e.g. [here](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/136/testReport/junit/projectroot.python/JupyROOT/roottest_python_JupyROOT_importROOT_notebook/). JupyROOT tests are red because a new json field `""execution""` is added to the `.ipynb` file. ## To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->; It should be enough to install the [ROOT conda nightlies](https://root.cern/install/nightlies/#conda-package), build roottest against them and run one of the JupyROOT tests via ctest. ## Additional context; <!--; Add any other context about the problem here.; -->. I _think_ the reason this problem cropped up is that the version of nbconvert installed by conda (conda-forge channel) was recently bumped from 5.6.1 to 6.0.2. nbformat documents that new `""execution""` field in notebooks as of [8 months ago](https://github.com/jupyter/nbformat/commit/1b6cbffd2ae527354d8b90e17740f823291a8dca). The `nbdiff.py` steering script already filters some lines from the notebooks before diff'ing them, but the introduction of a new json field also changes the surrounding lines, e.g. a closed brace becomes a comma, an extra closing brace is added, and the current filtering mechanism is not able to deal with this, so I am not sure what the best way to proceed would be.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6356:320,test,testReport,320,https://root.cern,https://github.com/root-project/root/issues/6356,3,['test'],"['testReport', 'tests']"
Testability,"## Describe the bug; Crash. ```; [@ test]$ ./pad3. *** Break *** segmentation violation. ===========================================================; There was a crash.; This is the entire stack trace of all threads:; ===========================================================; gdb.printing.register_pretty_printer(gdb.current_objfile(),; #0 0x00007fd0a354d46c in __libc_waitpid (pid=19301, stat_loc=stat_loc; entry=0x7fffd00a2ce0, options=options; entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31; #1 0x00007fd0a34caf62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148; #2 0x00007fd0a66ce5dc in TUnixSystem::StackTrace (this=0x1a0b980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408; #3 0x00007fd0a66d106a in TUnixSystem::DispatchSignals (this=0x1a0b980, sig=kSigSegmentationViolation) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646; #4 <signal handler called>; #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171; #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at test/pad3.cxx:11; ===========================================================. The lines below might hint at the cause of the crash.; You may get help by asking at the ROOT forum http://root.cern.ch/forum; Only if you are really convinced it is a bug in ROOT then please submit a; report at http://root.cern.ch/bugs Please post the ENTIRE stack trace; from above as an attachment in addition to anything else; that might help us fixing this issue.; ===========================================================; #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171; #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at test/pad3.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6446:36,test,test,36,https://root.cern,https://github.com/root-project/root/issues/6446,1,['test'],['test']
Testability,"## Describe the bug; Crash. ```; [@test]$ ./pad5.exe . *** Break *** floating point exception. ===========================================================; There was a crash.; This is the entire stack trace of all threads:; ===========================================================; gdb.printing.register_pretty_printer(gdb.current_objfile(),; #0 0x00007f16b818a46c in __libc_waitpid (pid=29363, stat_loc=stat_loc; entry=0x7ffeea3c7360, options=options; entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31; #1 0x00007f16b8107f62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148; #2 0x00007f16bb30b5dc in TUnixSystem::StackTrace (this=0x19fb980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408; #3 0x00007f16bb30e06a in TUnixSystem::DispatchSignals (this=0x19fb980, sig=kSigFloatingException) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646; #4 <signal handler called>; #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=; 0x7ffeea3c9dc0: 0, yb=; 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108; #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at test/pad5.cxx:87; ===========================================================. The lines below might hint at the cause of the crash.; You may get help by asking at the ROOT forum http://root.cern.ch/forum; Only if you are really convinced it is a bug in ROOT then please submit a; report at http://root.cern.ch/bugs Please post the ENTIRE stack trace; from above as an attachment in addition to anything else; that might help us fixing this issue.; ===========================================================; #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=; 0x7ffeea3c9dc0: 0, yb=; 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108; #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at test/pad5.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6449:35,test,test,35,https://root.cern,https://github.com/root-project/root/issues/6449,1,['test'],['test']
Testability,"## Describe the bug; Crash.; ```; [averbyts@lxplus701 test]$ ./pad2.exe; Warning in <UnknownClass::SetDisplay>: DISPLAY not set, setting it to 91.114.73.210:0.0. *** Break *** segmentation violation. ===========================================================; There was a crash.; This is the entire stack trace of all threads:; ===========================================================; #0 0x00007fe989ecb46c in waitpid () from /lib64/libc.so.6; #1 0x00007fe989e48f62 in do_system () from /lib64/libc.so.6; #2 0x00007fe98ba740bc in TUnixSystem::StackTrace() () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libCore.so; #3 0x00007fe98ba716d5 in TUnixSystem::DispatchSignals(ESignals) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libCore.so; #4 <signal handler called>; #5 0x00007fe98b1ddee9 in TPad::FillCollideGrid(TObject*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so; #6 0x00007fe98b1de2eb in TPad::PlaceBox(TObject*, double, double, double&, double&) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so; #7 0x0000000000401293 in main (argc=<optimized out>, argv=<optimized out>) at /afs/cern.ch/user/a/averbyts/Projects/zevis/test/pad2.cxx:84; ===========================================================. The lines below might hint at the cause of the crash.; You may get help by asking at the ROOT forum http://root.cern.ch/forum; Only if you are really convinced it is a bug in ROOT then please submit a; report at http://root.cern.ch/bugs Please post the ENTIRE stack trace; from above as an attachment in addition to anything else; that might help us fixing this issue.; ===========================================================; #5 0x00007fe98b1ddee9 in TPad::FillCollideGrid(TObject*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6428:54,test,test,54,https://root.cern,https://github.com/root-project/root/issues/6428,1,['test'],['test']
Testability,"## Describe the bug; Crash; ```. [@lxplus795 test]$ ./pad6.exe ; Warning in <UnknownClass::SetDisplay>: DISPLAY not set, setting it to . *** Break *** segmentation violation. ===========================================================; There was a crash.; This is the entire stack trace of all threads:; ===========================================================; #0 0x00007fc0d7d5e46c in waitpid () from /lib64/libc.so.6; #1 0x00007fc0d7cdbf62 in do_system () from /lib64/libc.so.6; #2 0x00007fc0d99070bc in TUnixSystem::StackTrace() () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libCore.so; #3 0x00007fc0d99046d5 in TUnixSystem::DispatchSignals(ESignals) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libCore.so; #4 <signal handler called>; #5 0x00007fc0d9056288 in TPad::Close(char const*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so; #6 0x00007fc0d905f746 in TPad::~TPad() [clone .part.0] () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so; #7 0x00007fc0d905f919 in TPad::~TPad() () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so; #8 0x000000000040124b in main (argc=<optimized out>, argv=<optimized out>) at test/pad6.cxx:9; ===========================================================. The lines below might hint at the cause of the crash.; You may get help by asking at the ROOT forum http://root.cern.ch/forum; Only if you are really convinced it is a bug in ROOT then please submit a; report at http://root.cern.ch/bugs Please post the ENTIRE stack trace; from above as an attachment in addition to anything else; that might help us fixing this issue.; ===========================================================; #5 0x00007fc0d9056288 in TPad::Close(char const*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-ce",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6453:45,test,test,45,https://root.cern,https://github.com/root-project/root/issues/6453,1,['test'],['test']
Testability,"## Describe the bug; I store a custom event class in a TTree. Some of the members of the class are arrays (c-style). Accessing the array members works for the first time the GetEntry() is called, but subsequent accesses result in segmentation faults. I am using the ""old"" way of reading the tree (with SetBranchAddress). . One possible workaround might be to use std::array instead of c-style arrays, although I have not fully tested if this works. . ## Expected behavior; Array members of objects in TTrees are accessible via PyROOT as was the case before 6.22. . ## To Reproduce. I attached a MWE (really a minimal failing example), including a script to build/generate a tree/run the offending python scripts (faiing.sh): [mwe.tar.gz](https://github.com/root-project/root/files/5286101/mwe.tar.gz). The gist is that the event here is a simple class: ; ```. #ifndef _mwe_event_h; #define _mwe_event_h. #include ""TObject.h"" ; #include <array>. class MWEEvent ; {. public: ; MWEEvent() { iev =-1; bar=-1; foo[0] =-1; foo[1]=-1; } . // workaround for not being able to access foo directly ; double get_foo(int i) const { return foo[i]; } . int iev; ; double bar; ; double foo[2]; ; virtual ~MWEEvent() { ; } . ClassDef(MWEEvent,1);; }; ; ```. A tree of these objects can be read with PyROOT fine if only the scalar members are touched, or the getter is used:. ```; import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); ; t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): ; t.GetEntry(i); ; print (ev.iev) ; print (ev.bar) ; print (ev.get_foo(0)); print (ev.get_foo(1)); ```. But if you try to access the array member directly (as used to work), it does not work:; ```; import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); ; t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): ; t.GetEntry(i); ; print (ev.iev) ; print (ev.bar) ; print (ev.foo[0]); print (",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6468:427,test,tested,427,https://root.cern,https://github.com/root-project/root/issues/6468,1,['test'],['tested']
Testability,"## Describe the bug; TPad::GetPrimitives() returns nullptr instead of an empty list, gets defererenced ... and so on.; ```; [@test]$ ./pad4 . *** Break *** segmentation violation. ===========================================================; There was a crash.; This is the entire stack trace of all threads:; ===========================================================; gdb.printing.register_pretty_printer(gdb.current_objfile(),; #0 0x00007fc2c245846c in __libc_waitpid (pid=25123, stat_loc=stat_loc; entry=0x7ffefaecb520, options=options; entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31; #1 0x00007fc2c23d5f62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148; #2 0x00007fc2c55d95dc in TUnixSystem::StackTrace (this=0xcf6980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408; #3 0x00007fc2c55dc06a in TUnixSystem::DispatchSignals (this=0xcf6980, sig=kSigSegmentationViolation) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646; #4 <signal handler called>; #5 0x00007fc2c54dd41d in TObject::AppendPad (this=0x190c210, option=0x400c96 """") at /usr/src/debug/root-6.22.02/core/base/src/TObject.cxx:112; #6 0x0000000000400b76 in main (argc=<optimized out>, argv=<optimized out>) at test/pad4.cxx:13; ===========================================================. The lines below might hint at the cause of the crash.; You may get help by asking at the ROOT forum http://root.cern.ch/forum; Only if you are really convinced it is a bug in ROOT then please submit a; report at http://root.cern.ch/bugs Please post the ENTIRE stack trace; from above as an attachment in addition to anything else; that might help us fixing this issue.; ===========================================================; #5 0x00007fc2c54dd41d in TObject::AppendPad (this=0x190c210, option=0x400c96 """") at /usr/src/debug/root-6.22.02/core/base/src/TObject.cxx:112; #6 0x0000000000400b76 in main (argc=<optimized out>, argv=<optimized out>) at test/pad4.cxx:13; =================",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6447:126,test,test,126,https://root.cern,https://github.com/root-project/root/issues/6447,1,['test'],['test']
Testability,"## Describe the bug; With `Event.root` (from `test\Event`) we get:; ```; root [12] T->Scan(""Alt$(fMeasures,-1)""); ************************; * Row * Alt$(fMea *; ************************; * 0 * 1 *; * 1 * 0 *; * 2 * 2 *; ```. ## Expected behavior. ```; ****************************************; * Row * Instance * Alt$(fMeasures) *; ****************************************; * 0 * 0 * 1 *; * 0 * 1 * 0 *; * 0 * 2 * 1 *; * 0 * 3 * 1 *; * 0 * 4 * 3 *; * 0 * 5 * 16 *; * 0 * 6 * 4 *; * 0 * 7 * 22 *; * 0 * 8 * 8 *; * 0 * 9 * 4 *; * 1 * 0 * 0 *; * 1 * 1 * 1 *; * 1 * 2 * 5 *; * 1 * 3 * -1 *; * 1 * 4 * 5 *; * 1 * 5 * 9 *; * 1 * 6 * 6 *; * 1 * 7 * 6 *; * 1 * 8 * 3 *; * 1 * 9 * 20 *; ```. Note that when used as intended (i.e. with another array, even itself, it works properly:; ```; root [13] T->Scan(""Alt$(fMeasures,-1):fMeasures""); ***********************************************; * Row * Instance * Alt$(fMea * fMeasures *; ***********************************************; * 0 * 0 * 1 * 1 *; * 0 * 1 * 0 * 0 *; * 0 * 2 * 1 * 1 *; * 0 * 3 * 1 * 1 *; ```; or; ```; root [11] T->Scan(""Alt$(fMeasures,-1):fMatrix""); ***********************************************; * Row * Instance * Alt$(fMea * fMatrix *; ***********************************************; * 0 * 0 * 1 * 1.5405316 *; * 0 * 1 * 0 * 0.0947428 *; * 0 * 2 * 1 * 1.5246920 *; * 0 * 3 * 1 * 0 *; * 0 * 4 * 3 * -0.136309 *; * 0 * 5 * 16 * 0.8007842 *; * 0 * 6 * 4 * 1.7062356 *; * 0 * 7 * 22 * 0 *; * 0 * 8 * 8 * -1.160293 *; * 0 * 9 * 4 * 2.012362 *; * 0 * 10 * -1 * 4.0220642 *; * 0 * 11 * -1 * 0 *; * 0 * 12 * -1 * 0 *; * 0 * 13 * -1 * 0 *; * 0 * 14 * -1 * 0 *; * 0 * 15 * -1 * 0 *; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6378:46,test,test,46,https://root.cern,https://github.com/root-project/root/issues/6378,1,['test'],['test']
Testability,"## Describe the bug; the attached TH3 has two missing labels. Note that changing the diction to ""not optimise"" makes them appear. ## Expected behavior; The two missing labels should be displayed. ## To Reproduce. ```; {; f = new TFile(""th3_label.root”);; h3->Draw();; cout << h3->GetXaxis()->GetNbins() << endl;; h3->GetXaxis()->GetLabels()->ls();; }; ```. The root file is [th3_label.log](https://github.com/root-project/root/files/5244737/th3_label.log) (renamed `. log` to be able to attach it).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6381:385,log,log,385,https://root.cern,https://github.com/root-project/root/issues/6381,3,['log'],['log']
Testability,"## Description. There are several known compatibility problems of PyMVA and SOFIE with common Python modules that need to be fixed:. ### 1. Collisions of `openblas` because of SOFIE vs. NumPy; SOFIE can load an `openblas` version that is different from the one built in to NumPy, which can cause crashes for example on AlmaLinux 9 (the [TMVA_SOFIE_RSofieReader.C](https://github.com/root-project/root/blob/master/tutorials/CMakeLists.txt#L302) tutorial test is deactivated for this reason). ### 2. TensorFlow 2.16 compatibility for Python 3.12 support; PyMVA doesn't work with TensorFlow>=2.16 because of the change from Keras 2 to Keras 3 in TensorFlow (that the motivation for this version check in [requirements.txt](https://github.com/root-project/root/blob/master/requirements.txt)). TensorFlow 2.16 support is important, because it's the first version that supports Python 3.12. ### 3. Collisions of `openblas` because of `tmva-cpu` vs NumPy; The TMVA CPU backend (activated with `tmva-cpu` has the same problem as stated in **1.**, because it also uses openblas. That's the reason why `tmva-cpu` is deactivated on `alma9`. ### 4. Collisions of `std::regexp` because of cppyy vs {torch, xgboost}; Collisions of `std::regexp` that comes with cppyy with the `std::regexp` in XGBoost or PyTorch. This is more of a [cppyy issue](https://github.com/wlav/cppyy/issues/227) (or an issue of the other modules), but mostly affects PyMVA tutorials, because that's where ROOT is imported together with machine learning libraries. When this is fixed, 872886b and 1bf3d5a can be reverted. Related issues:; * https://github.com/root-project/root/issues/15211",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15309:453,test,test,453,https://root.cern,https://github.com/root-project/root/issues/15309,1,['test'],['test']
Testability,"## Description; Development of the functionality for parsing a PyTorch PT file to ROOT format using the Fast Inference System SOFIE for the **ROOT Storage of Deep Learning Models** Project of *Google Summer of Code'21*. Project Link: https://summerofcode.withgoogle.com/projects/#5424575602491392. ## Progress; - [x] Parser function for extracting the model information and weights and instantiate a RModel Object; - [x] Support for PyTorch nn.Module, nn.Sequential, nn.ModuleList containers.; - [x] Supports Linear, ReLU and Transpose Layers/operations.; - [x] Header file for the function; - [x] Function implementation . ## Interface; The parser requires the shape and data type of the input tensors. Shape is a mandatory parameter, whereas the function defaults to Float data-type for the input tensors, if not explicitly mentioned.; ; **Example usage**; ```; std::vector<size_t> s1{120,1};; std::vector<std::vector<size_t>> inputShape{s1};; auto model = TMVA::Experimental::SOFIE::PyTorch::Parse(""trained_model_dense.pt"",inputShape);; ```; ; ## Checklist:; - [x] tested changes locally; - [x] Parser. ## Tests ; - [x] Emit Files for generating header files; - [x] Tests for Parser; - [x] CMake Configuration for tests . ## Documentation; - [x] Doxygen Docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8684:1068,test,tested,1068,https://root.cern,https://github.com/root-project/root/pull/8684,4,"['Test', 'test']","['Tests', 'tested', 'tests']"
Testability,"## Description; Development of the functionality for parsing and converting a Keras H5 file to ROOT format using the Fast Inference System SOFIE for the **ROOT Storage of Deep Learning Models** Project of *Google Summer of Code'21*. Project Link: https://summerofcode.withgoogle.com/projects/#5424575602491392. ## Progress; - [x] Restructured SOFIE to avoid dependency conflicts between different Python libraries; - [x] Parser function for extracting the model information and weights and instantiate a RModel Object ; - [x] Support for Keras Sequential API Models ; - [x] Support for Keras Functional API Models ; - [x] Supports Dense (with relu activation),ReLU and Permute Layers ; - [ ] ~~Support for Keras Subclassing Models~~ (Currently not supported by Root); - [x] Header file for the function ; - [x] Function implementation ; ; ## Checklist:; - [x] tested changes locally; - [x] Parser. ## Tests; - [x] Emit Files for generating header files; - [x] Tests for Parser; - [x] CMake Configuration for tests. ## Documentation ; - [x] Doxygen Docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8430:860,test,tested,860,https://root.cern,https://github.com/root-project/root/pull/8430,4,"['Test', 'test']","['Tests', 'tested', 'tests']"
Testability,## Description; This PR modifies the AddOutputTensorNameList() function present in RModel.hxx to use the UTILITY::Clean_name() function to process the strings before adding them into the RModel. ## Checklist:; - [x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8640:216,test,tested,216,https://root.cern,https://github.com/root-project/root/pull/8640,1,['test'],['tested']
Testability,"## Description; This PR restructures SOFIE by separating the RModelParser_ONNX to a different directory which depends on Protobuf. . Keeping the RModelParser_ONNX in a different directory prevents any clash or segmentation violation which may happen while using the Converters for translating external models like Keras into RModel, as they can have dependency issues with Protobuf. ## Checklist:; - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8594:404,test,tested,404,https://root.cern,https://github.com/root-project/root/pull/8594,1,['test'],['tested']
Testability,"## Explain what you would like to see improved. TDirectory::TContext should be documented more explicitly. Currently the ""documentation"" is spread through-out release notes and git logs. See the releases notes for v5.34 patches and v6.06 as well as the commit log for; 843a15939587b0f730ce81d668ae0358b8d89cf6; af78af292ca467334ebb175e1d437a02abcc7d83; 135e659287a8b7199b4bdf7bd7c0baac514f8258",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6500:181,log,logs,181,https://root.cern,https://github.com/root-project/root/issues/6500,2,['log'],"['log', 'logs']"
Testability,"## Is your feature request related to a problem? Please describe. ROOT compilation requires hours of compilation time (up to 10 hours on virtual machines such as CI bots, and I hasn't seen compilation time less than an hour by now). ROOT takes hundreds of megabytes (600 - 800?) of space and requires a number of dependencies. This both greatly affects image sizes (e.g. docker) which, in turn, affects many areas such as automated testing, CI, transferring to farm nodes, even using in cloud resources and binder. . If one dares to build ROOT with it dependencies in something like Spack or other kind build scripts which take root dependencies into account and work on older system (which is a standard in HENP community) it just takes forever. Even If one uses something like Conda with precompiled ROOT binaries it quickly eats couple of gigabytes of space and still takes time. . Yet **many application require just a minimal ROOT IO** with saving data to files in ROOT format. Even without reflection, generating dictionaries and etc. - flat root files with `vector<value>` as the max complexity. . ## Describe the solution you'd like. In the ideal world I would be glad to have really modular ROOT build where I could choose that I want to have just a basic IO and get root installation witch is done in minutes and resulting binaries would be just megabytes in size. . ## Describe alternatives you've considered. - Surprisingly one can achieve such behavior with uproot. The only caveat is that you have to call python from C++ which is slow and feels perverse. Still compilation time of the whole python is much less and for sure python is preinstalled on all linux systems. . - Geant4 has some C++ library for writing root files and one even can find it on github ([It is diana_hep. Isn't it?](https://github.com/diana-hep/inexlib_rio)) but it doesn't allow to save something like arrays or something like `vector<double>`. I'm talking about at least some basic IO but not that basic. uproot",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6471:432,test,testing,432,https://root.cern,https://github.com/root-project/root/issues/6471,1,['test'],['testing']
Testability,"## Overview. RDICT files store some useful information (in particular about class offsets) in ROOT files to avoid the potentially expensive call to the interpreter if the information is not the PCH. For example, ROOT's `libGeom` and other third-party code. This is done to circumvent the costly call to `ShowMembers` which will require parsing. CxxModules diminish that benefit as providing a finer grained control over the information deserialization. We see no observable benefits in generating RDICT files next to our pcm files. . ## Performance results. We have run several times all tests in `roottest/io` and `roottest/meta/MakeProject` folders and compared the results with and without generating RDICT (namely with ROOT master with `-Druntime_cxxmodules=On` with and without this PR). They are available [here](https://docs.google.com/spreadsheets/d/1Y_swct0USyX1DMp0tJOPdZzvmvIOTXOS9s7n08wCb2I/edit?usp=sharing) and [here](https://docs.google.com/spreadsheets/d/1s5LbPmhGBfhimirA0GH87nyEKcrGUfCX80H7-fOrjAU/edit?usp=sharing). ### Methodology. We have a forwarding `root.exe` which essentially calls `/usr/bin/time -v root.exe $@`. We have processed and stored this information in csv files. We have run in:; * (no)dict1-cold -- Tests are run immediately after restarting the physical test machine.; * (no)dict1a-cold -- Tests are run immediately after restarting the physical test machine. Second time.; * (no)dict2 -- Tests are run once again after running (no)dict1-cold;; * (no)dict3 -- Tests are run once again after running (no)dict2;; * (no)dict4 -- Tests are run once again after running (no)dict3;; * (no)dict5 -- Tests are run once again after running (no)dict4. The values of each column in (no)dict* are the sum of each value produced after running each test under roottest/io. The average values are computed in the columns under `dict` and `nodict`. The difference is shown in `diff`. There are two known test failures wrt to modules whose values are ignored. The machine specifi",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3012:588,test,tests,588,https://root.cern,https://github.com/root-project/root/pull/3012,1,['test'],['tests']
Testability,"## Performance after further //-isation. Note these are small gains; Benchmarks are run on small sample sizes. Training takes ~50% of total run time. Before:; root -l -b -q 'TMVAClassification.C(""BDTG"")' 4.06s user 1.01s system 147% cpu 3.423 total; root -l -b -q 'TMVARegression.C(""BDTG"")' 14.52s user 2.47s system 149% cpu 11.396 total; root -l -b -q 'TMVAMulticlass.C(""BDTG"")' 16.51s user 2.81s system 181% cpu 10.645 total. After:; root -l -b -q 'TMVAClassification.C(""BDTG"")' 3.99s user 0.97s system 149% cpu 3.310 total; root -l -b -q 'TMVARegression.C(""BDTG"")' 13.60s user 2.51s system 147% cpu 10.924 total; root -l -b -q 'TMVAMulticlass.C(""BDTG"")' 19.52s user 3.87s system 242% cpu 9.631 total. ## Output comparison. Summary: output identical before and after. ```; Classification; ==============. Top line: before; Bottom line: after. DataSet MVA Signal efficiency: from test sample (from training sample); Name: Method: @B=0.01 @B=0.10 @B=0.30; ------------------------------------------------------------------------------------------; dataset BDTG : 0.206 (0.540) 0.705 (0.858) 0.902 (0.928); dataset BDTG : 0.206 (0.540) 0.705 (0.858) 0.902 (0.928). Regression; ==========. Top line: before; Bottom line: after. DataSet Name: MVA Method: <Bias> <Bias_T> RMS RMS_T | MutInf MutInf_T; dataset BDTG : 0.198 0.165 2.60 2.00 | 3.084 3.149; dataset BDTG : 0.198 0.165 2.60 2.00 | 3.084 3.149. Multiclass; ==========. Top line: before; Bottom line: after. Dataset MVA Method ROC AUC Sig eff@B=0.01 Sig eff@B=0.10 Sig eff@B=0.30; Name: / Class: test (train) test (train) test (train) test (train). After:; dataset BDTG; ------------------------------; Signal 0.966 (0.981) 0.486 (0.659) 0.910 (0.955) 0.994 (0.996); Signal 0.966 (0.981) 0.486 (0.659) 0.910 (0.955) 0.994 (0.996); ; bg0 0.905 (0.932) 0.252 (0.325) 0.716 (0.801) 0.908 (0.955); bg0 0.905 (0.932) 0.252 (0.325) 0.716 (0.801) 0.908 (0.955); ; bg1 0.951 (0.955) 0.463 (0.465) 0.850 (0.845) 0.970 (0.979); bg1 0.951 (0.955) 0.463 (0.4",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2631:69,Benchmark,Benchmarks,69,https://root.cern,https://github.com/root-project/root/pull/2631,2,"['Benchmark', 'test']","['Benchmarks', 'test']"
Testability,"## Pythonic interaction with the RooWorkspace. This issue tracks the progress on the GSoC project on the Pythonic interaction with the RooWorkspace:; https://hepsoftwarefoundation.org/gsoc/2023/proposal_RooFit-RooWorkspacePythonization.html. This project was assigned to @yashnator. ## Milestones and TODOs. - [x] Pythonic way to use the RooWorkspace factory language using `__setitem__` on the workspace (#12911); - [x] Enable creation of pdf, functions and variables from Python dictionaries passed to `RooWorksapce.__setitem__` (#12994); - [x] Implement automatic loading of JSON IO keys (#13152); - [ ] Support creation of binned datasets from dictionaries as described in [this comment](https://github.com/root-project/root/issues/13185#issuecomment-1621628860); - [ ] Move all logic except for `dict` to string conversion to the C++ side; - [ ] Avoid using nlohmann-json directly, but use RooFits `JSONInterface` instead. ## Merged PRs. 1. https://github.com/root-project/root/pull/12911; 2. https://github.com/root-project/root/pull/12994; 3. https://github.com/root-project/root/pull/13152; 4. https://github.com/root-project/root/pull/13150",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13185:783,log,logic,783,https://root.cern,https://github.com/root-project/root/issues/13185,1,['log'],['logic']
Testability,"## SOFIE-SYCL; SOFIE-SYCL extends SOFIE functionality so that SYCL inference code can be generated for Intel GPUs using Intel oneAPI libraries for the BLAS routines. This functionality is already enabled by default when -Dtmva-sofie=On. The inference code should be compiled with a SYCL compiler and linked against the Intel oneAPI MKL library. Currently, the only SYCL Implementation supported is IntelDPCPP. The correctness of the SYCL implementations of the ONNX Operators has been tested with the SOFIE gtests. Also, missing gtests for BatchNormalization, Slice, Transpose have been added. In addition, the transpose convolution for 3d (ConvTranspose3d) operator that was not supported before has been added for both C++ and SYCL inference code, as well as the respective gtest.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13550:485,test,tested,485,https://root.cern,https://github.com/root-project/root/pull/13550,1,['test'],['tested']
Testability,"## Standalone TTree does not allow for TBulkRead. I created a standalone TTree, without a backing TFile, for test purposes. While using TTreeReader works just fine, using TBulkRead does not work. ## Expected behavior. Given the API to request a TBulkRead does not involve a TFile, I would have expected it to work without. ## Setup. 6.20.0. ##",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6417:109,test,test,109,https://root.cern,https://github.com/root-project/root/issues/6417,1,['test'],['test']
Testability,"## The problem. In the [bindings/pyroot/pythonizations/CMakeLists.txt](https://github.com/root-project/root/blob/master/bindings/pyroot/pythonizations/CMakeLists.txt) file, the following code is used to compile the Python sources. ```cmake; # Compile .py files; foreach(py_source ${py_sources}); install(CODE ""execute_process(COMMAND ${python_executable} -m py_compile ${localruntimedir}/${py_source})""); install(CODE ""execute_process(COMMAND ${python_executable} -O -m py_compile ${localruntimedir}/${py_source})""); endforeach(); ```. However, with this `execute_process` trick, there is no error code checking, so it often happens that the compilation actually fails with Python 2 because the Pythonizations use features that are only available in Python 3!. I notice this when trying to replace this ""install-to-build-directory"" trick with proper CMake targets, kind of like this:. ```cmake; # Compile .py files; foreach(py_source ${py_sources}); add_custom_command(TARGET ${libname}; COMMAND ${python_executable} -m py_compile ${localruntimedir}/${py_source}; COMMAND ${python_executable} -O -m py_compile ${localruntimedir}/${py_source}; DEPENDS ${localruntimedir}/${py_source}; COMMENT ""Compiling ${py_source} for ${libname}""); endforeach(); ```. With `add_custom_command`, failures in compiling the Python sources causes the build to fail (as it should be I think). ## What needs to be done to fix this issue. * Have CMakes error out when Python compilation fails by using `add_custom_command`; * Make the Pythonization sources compatible with Python 2...; * ... except for the sources that should [only be used for Python 3](https://github.com/root-project/root/blob/master/bindings/pyroot/pythonizations/CMakeLists.txt#L17). For these, the compilation should be done only with Python 3 (logic to do this needs to be added to the CMakeLists.txt)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11437:1796,log,logic,1796,https://root.cern,https://github.com/root-project/root/issues/11437,1,['log'],['logic']
Testability,## This PR introduces new functionality in REve to draw and browse TGeo geometry; * Use JSROOT tessellation to draw TGeo geometry in 3D REve Viewer. Support Three.js and RenderCore renderers.; * Introduce REveGeoTopNode to draw TGeo geometry with given path and visibility level.; * Integrate JSROOT geo hierarchy browser in REveGeo table. ### Test macro demonstrating geometry table and ReveGeoTopNode. The macro is located in `tutorials/eve7/eveGeoBrowser.C`; ![Screenshot from 2024-10-31 15-26-59](https://github.com/user-attachments/assets/b973c2ef-06b3-445c-80a5-a89aea9ec43b). ### Test macro demonstrating two REveGeoTopNodes without geometery table. The test macro is located in `tutorials/eve7geoTopNode.C`; ![Screenshot from 2024-10-31 15-30-55](https://github.com/user-attachments/assets/94d2dee0-0a97-4396-921a-bb7dd4494553),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16806:344,Test,Test,344,https://root.cern,https://github.com/root-project/root/pull/16806,3,"['Test', 'test']","['Test', 'test']"
Testability,## This Pull request. Add a missing attribute to the Softmax operator. the axis attribute describes the dimension along which the softmax will be computed as specified in the ONNX documentation https://github.com/onnx/onnx/blob/main/docs/Operators.md#Softmax. ## Checklist:. - [x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11379:281,test,tested,281,https://root.cern,https://github.com/root-project/root/pull/11379,1,['test'],['tested']
Testability,## This Pull request:. - Implement UnidirectionalBroadcasting and MultidirectionalBroadcasting according to numpy's broadcasting rules.; - Broadcast the input tensors of the binary operator to the same shape. ## Checklist:; - [x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11415:230,test,tested,230,https://root.cern,https://github.com/root-project/root/pull/11415,1,['test'],['tested']
Testability,"## This Pull request:. Development of the ConvTranspose operator for TMVA/SOFIE. Depends on #11382. ## Checklist:. - [x] tested changes locally; - [x] tests for 1d, 2d and 3d ConvTranspose",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11309:121,test,tested,121,https://root.cern,https://github.com/root-project/root/pull/11309,2,['test'],"['tested', 'tests']"
Testability,## This Pull request:. Development of the Gather operator for TMVA/SOFIE. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11754:95,test,tested,95,https://root.cern,https://github.com/root-project/root/pull/11754,1,['test'],['tested']
Testability,## This Pull request:. Development of the nary operators with multi directional broadcasting for TMVA/SOFIE. ## Checklist:. - [x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11586:130,test,tested,130,https://root.cern,https://github.com/root-project/root/pull/11586,1,['test'],['tested']
Testability,"## This Pull request:. This is to follow-up on the mistake I did when performing the rebase for the [previous PR](https://github.com/root-project/root/pull/9665). ; Stating the PR message for clarity. The pull request add the tutorials for the lagrangian ; morphing class and also add an example for the factory interface. The are some accompanying ; fixes as listed below.; Please take a look and let me know if this looks good !. ## This Pull request:. - Add two tutorials `rf711_lagrangianmorph` and `rf712_lagrangianmorphfit` to demonstrate ; the usage of the `RooLagrangianMorphFunc` class; - The PR also includes an update to `rf512_wsfactory_oper` showing an example for the new; options of `taylorexpand` and `lagrangianmorph`; ; ## Changes or fixes:; - formatting of `tutorials/roofit/rf710_roopoly.py`; - The attribute for new physics couplings in the `RooLagrangianMorphFunc` class is changed ; from `NP` to `NewPhysics` to avoid confusion with other abbreviations; - The `lagrangianmorph` factory interface is update to accept arguments in any order. ## Checklist:. - [x] tested changes locally. Cheers,; Rahul",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9680:1084,test,tested,1084,https://root.cern,https://github.com/root-project/root/pull/9680,1,['test'],['tested']
Testability,## This Pull request:; - Initialize the size and the stride of the axis; - throw an error when the input tensor has more than 5 dimensions. ## Checklist:; - [x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11403:161,test,tested,161,https://root.cern,https://github.com/root-project/root/pull/11403,1,['test'],['tested']
Testability,## This Pull request:; Broadcast the bias of Conv to ouput channels x output depth x output height x output width and add it to the output of each batch inside the loop. This makes it faster for Conv models with large batch size and especially for models with large input images and large batch size. It doesn't affect the performance of SOFIE for single event inference. - [x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11642:378,test,tested,378,https://root.cern,https://github.com/root-project/root/pull/11642,1,['test'],['tested']
Testability,## This Pull request:; Development of some unary operators for TMVA/SOFIE. ## Checklist:. - [x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11387:96,test,tested,96,https://root.cern,https://github.com/root-project/root/pull/11387,1,['test'],['tested']
Testability,## This Pull request:; Development of the Gated Recurrent Unit operator for the Google Summer of Code project [Inference Code Generation for Recurrent Neural Networks](https://summerofcode.withgoogle.com/projects/#5885532631990272).; Depends on #8800 and #8881. ## Checklist:. - [ x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8847:284,test,tested,284,https://root.cern,https://github.com/root-project/root/pull/8847,1,['test'],['tested']
Testability,## This Pull request:; Development of the LayerNormalization operator for TMVA/SOFIE. ## Checklist:. - [x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11595:107,test,tested,107,https://root.cern,https://github.com/root-project/root/pull/11595,1,['test'],['tested']
Testability,## This Pull request:; Development of the Long Short-term Memory operator for the Google Summer of Code project [Inference Code Generation for Recurrent Neural Networks](https://summerofcode.withgoogle.com/projects/#5885532631990272).; Depends on #8800 and #8881. ## Checklist:. - [ x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8846:286,test,tested,286,https://root.cern,https://github.com/root-project/root/pull/8846,1,['test'],['tested']
Testability,## This Pull request:; Development of the Recurrent Neural Network operator for the Google Summer of Code project [Inference Code Generation for Recurrent Neural Networks](https://summerofcode.withgoogle.com/projects/#5885532631990272).; Depends on #8800 and #8881. ## Checklist:. - [ x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8825:288,test,tested,288,https://root.cern,https://github.com/root-project/root/pull/8825,1,['test'],['tested']
Testability,## This Pull request:; Register operators in the constructor of RModelParser_ONNX so that they can be updated when RegisterOperator is called with the name of an existing operator. ## Checklist:. - [x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11641:202,test,tested,202,https://root.cern,https://github.com/root-project/root/pull/11641,1,['test'],['tested']
Testability,## This Pull request:; This PR is based on #13066 by @Neel-Shah-29 . ## Changes or fixes:; - A weight file isn't created by default when generating the code; - Options to save the weights in a text file or in a ROOT binary file. ## Checklist:. - [x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13423:250,test,tested,250,https://root.cern,https://github.com/root-project/root/pull/13423,1,['test'],['tested']
Testability,"## This Pull request:; This pull request adds a github action for a CI. Currently it builds the master branch only, but adding functionality to rebase a feature- and release branch based on pull-request metadata should be easy. Next steps are to fix eventual bugs and implement a CI to run roottest. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (not really but WIP documentation is here: https://codimd.web.cern.ch/GCUf9u1QTU-rdsPq9M7pig)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12063:321,test,tested,321,https://root.cern,https://github.com/root-project/root/pull/12063,1,['test'],['tested']
Testability,"## This Pull request:; Use enum as flags for RModel::Generate(). By default, SOFIE will generate a session class and store the weights in a file:; ```; using namespace TMVA::Experimental::SOFIE;; RModelParser_ONNX parser;; RModel model = parser.Parse(""path/to/model.onnx"");; model.Generate();; ```. Here's how the options can be used to :; - not use the session class; ```; model.Generate(Options::kNoSession);; ```; - not save the weights in a file; ```; model.Generate(Options::kNoWeightFile);; ```; - not use both; ```; model.Generate(Options::kNoSession | Options::kNoWeightFile);; ```. ## Checklist:. - [x] tested changes locally; - [] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10698:612,test,tested,612,https://root.cern,https://github.com/root-project/root/pull/10698,1,['test'],['tested']
Testability,## This Pull request:; Use the member functions GetBlasRoutines and GetStdLibs in the operators to specify the blas routines and the standard library headers needed to compile and run the generated code. - [x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11639:210,test,tested,210,https://root.cern,https://github.com/root-project/root/pull/11639,1,['test'],['tested']
Testability,"### Check duplicate issues. - [ ] Checked for duplicates. ### Describe the bug. When I tried to run TMVA test code with the follow errors. root [0] ; Processing TMVA_Higgs_Classification.C...; <FATAL> : Can't import __main__; ***> abort program execution; libc++abi: terminating due to uncaught exception of type std::runtime_error: FATAL error. macOS 13.4, M1, root 6.28.04, any solution? thanks. . ### What is the expected behaviour?. run TMVA tutorial code on macOS M1 it reported an error about libc++abi exceptions. ### How to reproduce?. root $ROOTSYS/tutorials/tmva/TMVA_Higgs_Classification.C ; on macOS 13.4 M1 processor. ### ROOT version. 6.28.04. ### How did you install ROOT?. download from root.cern.ch. ### Which operating system are you using?. macOS 13.4. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13002:105,test,test,105,https://root.cern,https://github.com/root-project/root/issues/13002,1,['test'],['test']
Testability,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. After updating to the lastest master I got the following error:; ```; && /cvmfs/cms.cern.ch/el9_amd64_gcc11/external/gcc/11.4.1-30ebdc301ebd200f2ae0e3d880258e65/bin/c++ -fdiagnostics-color=always -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -rdynamic core/testsupport/CMakeFiles/TestSupport.dir/src/TestSupport.cxx.o core/base/test/CMakeFiles/CoreBaseTests.dir/TNamedTests.cxx.o core/base/test/CMakeFiles/CoreBaseTests.dir/TQObjectTests.cxx.o core/base/test/CMakeFiles/CoreBaseTests.dir/TExceptionHandlerTests.cxx.o core/base/test/CMakeFiles/CoreBaseTests.dir/TStringTest.cxx.o core/base/test/CMakeFiles/CoreBaseTests.dir/TBitsTests.cxx.o -o core/base/test/CoreBaseTests -Wl,-rpath,/home/pcanal/root_working/build/quick-devel/lib lib/libCling.so -ldl lib/libRIO.so googletest-prefix/src/googletest-build/lib//libgtest_main.a googletest-prefix/src/googletest-build/lib//libgmock.a googletest-prefix/src/googletest-build/lib//libgmock_main.a -Wl,--unresolved-symbols=ignore-in-object-files lib/libThread.so lib/libCore.so googletest-prefix/src/googletest-build/lib//libgtest.a && :; /cvmfs/cms.cern.ch/el9_amd64_gcc11/external/gcc/11.4.1-30ebdc301ebd200f2ae0e3d880258e65/bin/../lib/gcc/x86_64-redhat-linux-gnu/11.4.1/../../../../x86_64-redhat-linux-gnu/bin/ld: lib/libCling.so: undefined reference to `clang::CXXMethodDecl::getThisObjectType() const'; ```; and indeed:; ```; ./lib/libCling.so: U clang::CXXMethodDecl::getThisObjectType() const; ./interpreter/cling/tools/plugins/clad/clad-prefix/src/clad-build/lib/libcladDifferentiator.a:BaseForwardModeVisitor.cpp.o: U clang::CXXMethodDecl::getThisObjectType() const; ./interpreter/cling/tools/plugins/clad/clad-prefix/src/clad-build/lib/libcladDifferentiator.a:HessianModeVisitor.cpp.o: U clang::CXXMethodDecl::getThisObjectType() const; ./interpreter/llvm-project/llvm/lib/libclangAST.a:DeclCX",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16668:412,test,testsupport,412,https://root.cern,https://github.com/root-project/root/issues/16668,9,"['Test', 'test']","['TestSupport', 'test', 'testsupport']"
Testability,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. As first reported at https://root-forum.cern.ch/t/rootsys-test-cannot-be-found/56151 . Running the `copytree3.C` tutorial produces the following. ```; $: root $ROOTSYS/tutorials/tree/copytree3.C ; root [0] ; Processing /home/vpadulan/programs/mambaforge/envs/root-628/tutorials/tree/copytree3.C...; In file included from input_line_8:1:; /home/vpadulan/programs/mambaforge/envs/root-628/tutorials/tree/copytree3.C:14:1: fatal error: '/home/vpadulan/programs/mambaforge/envs/root-628/test/libEvent.so' file not found; R__LOAD_LIBRARY($ROOTSYS/test/libEvent.so); ```. In fact, there is no `test` folder in the $ROOTSYS . ### Reproducer. See above. ### ROOT version. 6.28. ### Installation method. conda. ### Operating system. Linux Fedora 38. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13548:133,test,test-cannot-be-found,133,https://root.cern,https://github.com/root-project/root/issues/13548,4,['test'],"['test', 'test-cannot-be-found']"
Testability,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. As seen in https://lcgapp-services.cern.ch/root-jenkins/job/roottest-pullrequests-build/14222/testReport/projectroot.bindings.pyroot.pythonizations/test/pyunittests_pyroot_dependency_versions/. this test fails because of missing access to `scikit-learn` and `xgboost`. Are those hard requirement of ROOT? . If they are, why does the configuration succeed?. If they are not, why does the test fail?. ### Reproducer. ```; test_versions (dependency_versions.DependencyVersions); Test the versions of the installed packages versus the ... Attempting requirement 'numpy>=1.4.1'; Attempting requirement 'scikit-learn'; Attempting requirement 'xgboost'; Attempting requirement 'numba>=0.47.0; python_version < ""3.11""'; Attempting requirement 'numba>=0.57.0; python_version >= ""3.11"" and python_version < ""3.12""'; Attempting requirement 'cffi>=1.9.1'; Attempting requirement 'notebook>=4.4.1'; Attempting requirement 'metakernel>=0.20.0'; Ignore dependency pyspark>=2.4; Ignore dependency dask>=2022.08.1; python_version >= ""3.8""; Ignore dependency distributed>=2022.08.1; python_version >= ""3.8"". Full path to requirements.txt: /home/sftnight/build/workspace/roottest-pullrequests-build/root/requirements.txt; Details about not matched dependencies:; - The 'scikit-learn' distribution was not found and is required by the application; - The 'xgboost' distribution was not found and is required by the application; ERROR; ```. ### ROOT version. master. ### Installation method. Jenkins/CI. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15212:169,test,testReport,169,https://root.cern,https://github.com/root-project/root/issues/15212,5,"['Test', 'test']","['Test', 'test', 'testReport']"
Testability,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. As seen on https://github.com/root-project/roottest/pull/1106#issuecomment-2050216040 and https://github.com/root-project/roottest/pull/1106#issuecomment-2050220592 there are several tutorials failures in the TMVA tutorials. We do not see those failures in the new CI thus it could be that either the new CI is not running them (or ignoring the failures); or there is a missing protection against a bad/not-supported configuration. This is a blocker to completely retiring the jenkins build as they currently ""appear"" to show failure that the new CI does not detect. . ### Reproducer. A sample of the failure output in case the log are deleted can be found at https://gist.github.com/pcanal/d68be81d3ea618a83fb50a11d4ea1d1d. ### ROOT version. master. ### Installation method. Jenkins/CI. ### Operating system. Ubuntu 22.04. ### Additional context. Seen on; ROOT-ubuntu2004/python3. Running on root-ubuntu-2004-1.cern.ch; and; ROOT-ubuntu2204/nortcxxmod.Running on root-ubuntu-2204-2.cern.ch",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15211:703,log,log,703,https://root.cern,https://github.com/root-project/root/issues/15211,1,['log'],['log']
Testability,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Building from source with:; ```; cmake -Droofit_multiprocess=ON -DCMAKE_INSTALL_PREFIX=../root_install/ ../root_src/; cmake --build . --target install -j6; ```. Results in; ```; CMake Error at /home/tomas/ROOT/build/TBB-prefix/src/TBB-stamp/TBB-build-Release.cmake:37 (message):; Command failed: 2. '/usr/bin/cmake' '--build' '.'. See also. /home/tomas/ROOT/build/TBB-prefix/src/TBB-stamp/TBB-build-*.log. -- stdout output is:; [ 3%] Building CXX object src/tbb/CMakeFiles/tbb.dir/address_waiter.cpp.o. -- stderr output is:; gmake[4]: *** read jobs pipe: Bad file descriptor. Stop.; gmake[4]: *** Waiting for unfinished jobs....; gmake[5]: *** read jobs pipe: Bad file descriptor. Stop.; gmake[5]: *** Waiting for unfinished jobs....; In file included from /usr/include/c++/14/atomic:50,; from /home/tomas/ROOT/build/TBB-prefix/src/TBB/src/tbb/../../include/oneapi/tbb/detail/_utils.h:22,; from /home/tomas/ROOT/build/TBB-prefix/src/TBB/src/tbb/address_waiter.cpp:17:; In member function ‘void std::__atomic_base<_IntTp>::store(__int_type, std::memory_order) [with _ITp = bool]’,; inlined from ‘void std::atomic<bool>::store(bool, std::memory_order)’ at /usr/include/c++/14/atomic:109:20,; inlined from ‘void tbb::detail::r1::concurrent_monitor_base<Context>::abort_all_relaxed() [with Context = tbb::detail::r1::address_context]’ at /home/tomas/ROOT/build/TBB-prefix/src/TBB/src/tbb/concurrent_monitor.h:430:53,; inlined from ‘void tbb::detail::r1::concurrent_monitor_base<Context>::abort_all() [with Context = tbb::detail::r1::address_context]’ at /home/tomas/ROOT/build/TBB-prefix/src/TBB/src/tbb/concurrent_monitor.h:413:26,; inlined from ‘void tbb::detail::r1::concurrent_monitor_base<Context>::destroy() [with Context = tbb::detail::r1::address_context]’ at /home/tomas/ROOT/build/TBB-prefix/src/TBB/src/tbb/concurrent_monitor.h:446:24,; inlined from ‘void tbb::detail::r1::clear_address_waiter_table()’ at /home/tomas/R",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16654:476,log,log,476,https://root.cern,https://github.com/root-project/root/issues/16654,1,['log'],['log']
Testability,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Following up on an issue which was buried in https://github.com/root-project/root/pull/12449#issuecomment-1464946488. In current nightlies this test case behaves slightly differently, but still not correctly. It fails with sensible error messages on the first attempt, but then ""succeeds"" on the second attempt. I would expect it to fail with the same errors again if the state were really fully rolled back. ### Reproducer. test.h; ```; template <typename T>; class Helper {. public:. Helper() {}. std::size_t operator() () const {; const std::size_t res = 0;; res = T{0, 0}.size();; return res;; }. };. template <typename H>; std::size_t call_helper(const H &helper) {; return helper();; }; ```. testdeclare.py; ```; import ROOT. ret = ROOT.gInterpreter.Declare('#include ""test.h""'); print(""header include ret"", ret). print(""creating helper""); helper = ROOT.Helper[ROOT.std.vector[""double""]](). bad_template = ""template std::size_t call_helper<Helper<std::vector<double>>>(const Helper<std::vector<double>>&);"". for i in range(2):; print(f""declare attempt {i}""); ret = ROOT.gInterpreter.Declare(bad_template); print(""ret"", ret); ```. output:; ```; header include ret True; creating helper; declare attempt 0; In file included from input_line_34:1:; ./test.h:10:9: error: cannot assign to variable 'res' with const-qualified type 'const std::size_t' (aka 'const unsigned long'); res = T{0, 0}.size();; ~~~ ^; ./test.h:18:10: note: in instantiation of member function 'Helper<std::vector<double, std::allocator<double> > >::operator()' requested here; return helper();; ^; ./test.h:9:23: note: variable 'res' declared const here; const std::size_t res = 0;; ~~~~~~~~~~~~~~~~~~^~~~~~~; ret False; declare attempt 1; ret True; ```. ### ROOT version. ```; ------------------------------------------------------------------; | Welcome to ROOT 6.33.01 https://root.cern |; | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Ra",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16577:219,test,test,219,https://root.cern,https://github.com/root-project/root/issues/16577,4,['test'],"['test', 'testdeclare']"
Testability,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. From https://its.cern.ch/jira/browse/ROOT-10196. Since boundary check of TH1D::fArray is not performed in TH1D::AddBinContent, the method can cause memory issues.  . I understand that TH1::AddBinContent is very frequently called from TH1::Fill and thus I guess the developers do not want to repeat a boundary check again in TH1::AddBinContent. But TH1::SetBinContent does a boundary check and users like me expect that TH1::AddBinContent also checks the TH1::fArray boundary. ```cpp; void test() {}; int nbins = 500;;  TH1D* h = new TH1D(""h"", """", nbins, 0, nbins);.   for(int j = 0; j < 1000; j++){;     int bin = h->GetBin(500);;     for(int i = bin; i < bin + 100; i++){;       h->AddBinContent(i, 1);;     };   }; ```; ```; $ root; root [0] .L test.C; root [1] for(int i = 0; i < 100; i++) test();; Warning in <TROOT::Append>: Replacing existing TH1: h (Potential memory leak).; Warning in <TROOT::Append>: Replacing existing TH1: h (Potential memory leak).; Warning in <TROOT::Append>: Replacing existing TH1: h (Potential memory leak).; Warning in <TROOT::Append>: Replacing existing TH1: h (Potential memory leak).; Warning in <TROOT::Append>: Replacing existing TH1: h (Potential memory leak).; Warning in <TROOT::Append>: Replacing existing TH1: h (Potential memory leak).; root.exe(67870,0x10be0f5c0) malloc: Incorrect checksum for freed object 0x7fedb5190a00: probably modified after being freed.; Corrupt value: 0x408f400000000000}}{{root.exe(67870,0x10be0f5c0) malloc: *** set a breakpoint in malloc_error_break to debug; ```. ### Reproducer. As per the description. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14575:564,test,test,564,https://root.cern,https://github.com/root-project/root/issues/14575,3,['test'],['test']
Testability,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. From https://its.cern.ch/jira/browse/ROOT-10813. In principle, markers 24, 25, 26, 27, 28, 30, 32 should be drawn as ""open shape"" so the ""underlying"" error bars should clearly be visible, also in cases when they are smaller than the marker.; Unfortunately this is not the case.; The marker 4 (""kCircle"") behaves properly, though.; A simple test macro which demonstrates this problem is below (note: it uses graphs but I guess the same problem appears for all objects which use these markers, e.g. histograms). ```cpp; {; const Int_t m = 24; // try 24, 25, 26, 27, 28, 30, 32; TGraphErrors *g1 = new TGraphErrors(1);; g1->SetMarkerStyle(4); // error bars clearly visible; g1->SetPoint(0, 0.2, 0.5); g1->SetPointError(0, 0.01, 0.01);; TGraphErrors *g2 = new TGraphErrors(1);; g2->SetMarkerStyle(m); // marker covers error bars; g2->SetPoint(0, 0.4, 0.5); g2->SetPointError(0, 0.01, 0.01);; TGraphErrors *g3 = new TGraphErrors(1);; g3->SetMarkerStyle(4); // error bars clearly visible; g3->SetPoint(0, 0.6, 0.5); g3->SetPointError(0, 0.05, 0.05);; TGraphErrors *g4 = new TGraphErrors(1);; g4->SetMarkerStyle(m); // marker covers error bars; g4->SetPoint(0, 0.8, 0.5); g4->SetPointError(0, 0.05, 0.05);; TMultiGraph *mg = new TMultiGraph();; mg->Add(g1); mg->Add(g2); mg->Add(g3); mg->Add(g4);; mg->GetXaxis()->SetLimits(0., 1.);; mg->SetMinimum(0.); mg->SetMaximum(1.);; mg->Draw(""AP"");; }; ```. ### Reproducer. As per description. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14549:415,test,test,415,https://root.cern,https://github.com/root-project/root/issues/14549,1,['test'],['test']
Testability,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. From https://its.cern.ch/jira/browse/ROOT-4839. Dear Rooters,. I was writing an online monitoring program. Our DAQ is constantly writing data to a temporary TTree, and a monitoring GUI is reading the tree periodically. I followed the instructions (AutoSave) from the reference page http://root.cern.ch/root/html534/TTree.html. The program occasionally crashes after a Refresh() followed by a GetEntry(). I was able to reproduce the problem with a static TTree. The script that generates the tree is below.; ```cpp. {; gROOT->Reset();. TFile *f = new TFile(""test.root"",""recreate"");; TTree *tree = new TTree(""test"",""my test tree"");; TH1F *hh = new TH1F(""hh"",""hh"",100,-10,10);; Float_t x;. tree->Branch(""x"",&x,""x/F"");; //tree->SetCircular(10000);; int Count = 0;; for(size_t ii=0;ii<1000;ii++){; x = gRandom->Gaus(0,2);; tree->Fill();; hh->Fill(x);; Count++;; if(Count%1000==0) {; tree->AutoSave(""SaveSelf"");; //hh->Write();; }; }; tree->Write();; hh->Write();; f->Close();; }; ```. Then I used a root session to open the file. ```cpp; jliu@jliu-VirtualBox:~$ root \-l test.root; root [0]; Attaching file test.root as _file0...; root [1] TTree *t = (TTree*)gDirectory->Get(""test""); root [2] t->GetEntry(0); (Int_t)4; root [3] t->Refresh(); root [4] t->GetEntry(0); Error in <TObjArray::AddAt>: index \-1 out of bounds (size: 10, this: 0x9953a50); ```. This is very puzzling. Is there a way to get around this. I was able to reproduce this on both ROOT 5.27 (SL5.5) and ROOT 5.34 (Ubuntu 11.04). ### Reproducer. As per the description. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14560:632,test,test,632,https://root.cern,https://github.com/root-project/root/issues/14560,6,['test'],['test']
Testability,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. From https://its.cern.ch/jira/browse/ROOT-5114. All TString functions should raise an exception when they're asked to allocate more space than kMaxSize, instead of just logging an error and clamping the value. For example, the Clobber function is documented as allocating 'nc' characters, but the silent clamping is not mentioned at all. If the TString::Streamer was trying to read a malformed ROOT file, with a TString larger than kMaxSize (currently probably not possible due to alignment in the capacity of the TString, and kMaxSize being set to kMaxInt - 1, but this may accidentally be changed in the future), the Clobber-function would return a buffer that's too small, and potentially exploitable memory corruption would occur. ### Reproducer. NA. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14552:244,log,logging,244,https://root.cern,https://github.com/root-project/root/issues/14552,1,['log'],['logging']
Testability,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. From https://its.cern.ch/jira/browse/ROOT-6317. Hi,. In roottest/root/meta/runnamespace.C, a namespace is declared in an ACLiC library and then a using statement is done for this namespace. At the moment this does not provoke any auto parsing of the header (and/or all the headers) declaring the content of the namespace. (In addition a direct call to gInterpreter->AutoParse(namespace_name) as no effect). Cheers,; Philippe. PS. Because of the potential-spread-over-multiple-header-files-and-library nature of namespace this test may actually be a concrete example of the weakness of the current auto parsing implementation. ### Reproducer. As per the description. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14586:601,test,test,601,https://root.cern,https://github.com/root-project/root/issues/14586,1,['test'],['test']
Testability,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. From https://its.cern.ch/jira/browse/ROOT-8348. When I run the included program with the following command line:; ```; TestExe ""BDT::BDT0_75"" TMVAClassification_BDT.weights.xml; ```; I get a segmentation fault:. ```; ===========================================================; There was a crash (kSigSegmentationViolation).; This is the entire stack trace of all threads:; ===========================================================; #0 0x00007f2a6116db0c in waitpid () from /lib64/libc.so.6; #1 0x00007f2a610f2092 in do_system () from /lib64/libc.so.6; #2 0x00007f2a62a75cf8 in TUnixSystem::Exec (this=0x1225750, shellcmd=0x39585f0 ""/afs/cern.ch/sw/lcg/releases/ROOT/6.06.02-6cc9c/x86_64-slc6-gcc49-dbg/etc/gdb-backtrace.sh 8321 1>&2"") at /var/build/jenkins/workspace/lcg_release/BUILDTYPE/Debug/COMPILER/gcc49/LABEL/slc6-physical/build/projects/ROOT-6.06.02/src/ROOT/6.06.02/core/unix/src/TUnixSystem.cxx:2073; #3 0x00007f2a62a7654d in TUnixSystem::StackTrace (this=0x1225750) at /var/build/jenkins/workspace/lcg_release/BUILDTYPE/Debug/COMPILER/gcc49/LABEL/slc6-physical/build/projects/ROOT-6.06.02/src/ROOT/6.06.02/core/unix/src/TUnixSystem.cxx:2301; #4 0x00007f2a62a79d6b in TUnixSystem::DispatchSignals (this=0x1225750, sig=kSigSegmentationViolation) at /var/build/jenkins/workspace/lcg_release/BUILDTYPE/Debug/COMPILER/gcc49/LABEL/slc6-physical/build/projects/ROOT-6.06.02/src/ROOT/6.06.02/core/unix/src/TUnixSystem.cxx:3539; #5 0x00007f2a62a721e9 in SigHandler (sig=kSigSegmentationViolation) at /var/build/jenkins/workspace/lcg_release/BUILDTYPE/Debug/COMPILER/gcc49/LABEL/slc6-physical/build/projects/ROOT-6.06.02/src/ROOT/6.06.02/core/unix/src/TUnixSystem.cxx:395; #6 0x00007f2a62a79cb9 in sighandler (sig=11) at /var/build/jenkins/workspace/lcg_release/BUILDTYPE/Debug/COMPILER/gcc49/LABEL/slc6-physical/build/projects/ROOT-6.06.02/src/ROOT/6.06.02/core/unix/src/TUnixSystem.cxx:3516; #7 <signal handler called>; ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14569:194,Test,TestExe,194,https://root.cern,https://github.com/root-project/root/issues/14569,1,['Test'],['TestExe']
Testability,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Hi ROOT team,. We ran into some trouble last night with the ROOT ""HEAD"" builds that have CUDA enabled in our LCG nightlies. The builds failed on these platforms: x86_64-centos7-gcc11-opt, x86_64-centos8-gcc11-opt, and el9-gcc11-opt. These are the ones we use for this configuration. @bellenot: asked me to let you know, so here's the ticket. Here's the error message we got:. ```; Error: Module 'RooFitCuda.pcm' failed to load.; ```; and this:; ```; make[5]: *** [roofit/roofitcore/CMakeFiles/G__RooFitCore.dir/build.make:519: roofit/roofitcore/G__RooFitCore.cxx] Error 1; make[5]: Target 'roofit/roofitcore/CMakeFiles/G__RooFitCore.dir/depend' not remade because of errors.; make[4]: *** [CMakeFiles/Makefile2:44521: roofit/roofitcore/CMakeFiles/G__RooFitCore.dir/all] Error 2; ```. you can find the full build logs here:. http://cdash.cern.ch/upload/d526fd513d6f4007d95aa0eeb56dfc0627929bf1/ROOT-HEAD-build.log. Thanks for looking into this, and let me know if you need anything else!. Cheers,; Dmitri. ### Reproducer. No reproducer. ### ROOT version. HEAD. ### Installation method. build from sources. ### Operating system. Linux, centos7. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13415:887,log,logs,887,https://root.cern,https://github.com/root-project/root/issues/13415,2,['log'],"['log', 'logs']"
Testability,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Hi root team,. We are the ATLAS VHbbcc analysis team and we are testing with the new root preview version v6.32-rc1 since it has the bug fix related to the issue: https://root-forum.cern.ch/t/cling-jit-session-error-cannot-allocate-memory/56744. However we met some different behavior in this version compared to the previous 6.32/02 that we use. . 1) The pyROOT, we got a different type when access the RooCategory allowedState name. In the new version, it returns `cppyy.gbl.std.string` object, previously it is a python `str` object. May I ask it is designed or a bug? ; 2) We found this because it crushes when we tried to pass it to `re.findall()` function. But according to the cppyy document, the cppyy should convert `cppyy.gbl.std.string` to `str` automatically when the `str` is needed. So what is the reason for not being converted automatically?; 3) We also found that it takes much longer time to run the fit using the new root version, in our case, a 1-hour fit now takes 3-hours to finish. Is there any hint what may be the cause?. Thanks a lot for your time. Yuhao. ### Reproducer. ```; import ROOT. g = ROOT.TFile.Open(""/afs/cern.ch/work/y/yuhao/public/test.root""); ws=g.combined; simpdf=ws.pdf(""simPdf""); channelCat = simpdf.indexCat(); print(type(channelCat.begin().first)); ```. ### ROOT version. 6.32-rc1. ### Installation method. build from source. ### Operating system. Linux el9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15479:139,test,testing,139,https://root.cern,https://github.com/root-project/root/issues/15479,2,['test'],"['test', 'testing']"
Testability,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. I was investigating why test number 50 of stressGraphics is failing when stressGraphics is run in interpreted mode on Mac.; In compiled mode mode it runs just fine. I have extracted the failing test and made the following macro:. ### Reproducer. ```; void sg50b() {; Int_t i;; const Int_t nx = 48;; const char *states [nx] = {; ""alabama"", ""arizona"", ""arkansas"", ""california"",; ""colorado"", ""connecticut"", ""delaware"", ""florida"",; ""georgia"", ""idaho"", ""illinois"", ""indiana"",; ""iowa"", ""kansas"", ""kentucky"", ""louisiana"",; ""maine"", ""maryland"", ""massachusetts"", ""michigan"",; ""minnesota"", ""mississippi"", ""missouri"", ""montana"",; ""nebraska"", ""nevada"", ""new_hampshire"", ""new_jersey"",; ""new_mexico"", ""new_york"", ""north_carolina"", ""north_dakota"",; ""ohio"", ""oklahoma"", ""oregon"", ""pennsylvania"",; ""rhode_island"", ""south_carolina"", ""south_dakota"", ""tennessee"",; ""texas"", ""utah"", ""vermont"", ""virginia"",; ""washington"", ""west_virginia"", ""wisconsin"", ""wyoming""; };; Double_t pop[nx] = {; 4708708, 6595778, 2889450, 36961664, 5024748, 3518288, 885122, 18537969,; 9829211, 1545801, 12910409, 6423113, 3007856, 2818747, 4314113, 4492076,; 1318301, 5699478, 6593587, 9969727, 5266214, 2951996, 5987580, 974989,; 1796619, 2643085, 1324575, 8707739, 2009671, 19541453, 9380884, 646844,; 11542645, 3687050, 3825657, 12604767, 1053209, 4561242, 812383, 6296254,; 24782302, 2784572, 621760, 7882590, 6664195, 1819777, 5654774, 544270; };. Double_t lon1 = -130;; Double_t lon2 = -65;; Double_t lat1 = 24;; Double_t lat2 = 50;; TH2Poly *p = new TH2Poly(""USA"",""USA Population"",lon1,lon2,lat1,lat2);; gErrorIgnoreLevel = 9999;; TFile::SetCacheFileDir(""."");; TFile *f = TFile::Open(""http://root.cern/files/usa.root"", ""CACHEREAD"");. if (!f) {; printf(""Cannot access usa.root. Is internet working ?\n"");; return;; }. // Define the TH2Poly bins.; TMultiGraph *mg;; TKey *key;; TIter nextkey(gDirectory->GetListOfKeys());; while ((key = (TKey*)nextkey())) {; TObjec",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14598:99,test,test,99,https://root.cern,https://github.com/root-project/root/issues/14598,2,['test'],['test']
Testability,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. I've been using RooFit for my binned chi2 fits (with chi2FitTo). I use the `lb-conda` LHCb wrapper for python. Lately it seems that the `lb-conda` has updated and with the new version, my fits stopped working.; The old version of ROOT I was using is 6.28/04 (python 3.11.4), and the new one is 6.30/04 (python 3.11.8). The new version finds a different minimum, returns status `MINIMIZE=-1 HESSE=302` and zero errors. The old version returns `MINIMIZE=1 HESSE=1 ` and meaningful errors.; I set ROOT.RooFit.Minimizer(""Minuit2"",""migrad"") option for both. I didn't manage to reproduce the error in other conditions, so I packed my workspace in a reproducible example, found in my public lxplus area (`/afs/cern.ch/work/v/vyeroshe/public/test.root`). ### Reproducer. ```; import ROOT as r. file = r.TFile(""/afs/cern.ch/work/v/vyeroshe/public/test.root""); workspace = file.Get(""w_test""). hist = workspace.data(""jpsi_ppbar_mass""); pdf = workspace.pdf(""model_Low""). result = pdf.chi2FitTo(hist, r.RooFit.Save(),r.RooFit.Minimizer(""Minuit2"",""migrad"")); result.Print(); ```. ### ROOT version. ```; ------------------------------------------------------------------; | Welcome to ROOT 6.30/04 https://root.cern |; | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on Feb 06 2024, 23:27:10 |; | From heads/master@tags/v6-30-04 |; | With |; | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------. ```. ### Installation method. lb-conda. ### Operating system. CentOS Linux 7. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15196:809,test,test,809,https://root.cern,https://github.com/root-project/root/issues/15196,2,['test'],['test']
Testability,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. In the GPU-PR #16580, @dpiparo suggested to disable a few components to speed up the non-GPU-related parts. After disabling the webgui, the following test started to hang and time out:; ```; TEST FAILURES:; 1521:roottest-python-JupyROOT-Cpp_IMT_Canvas_notebook; ```. ### Reproducer. This is the full config:; ```; cmake -S '/github/home/ROOT-CI/src' -B '/github/home/ROOT-CI/build' -DCMAKE_BUILD_TYPE=RelWithDebInfo ""-DCMAKE_BUILD_TYPE=RelWithDebInfo"" ""-Dalien=off"" ""-Dall=off"" ""-Darrow=off"" ""-Dasan=off"" ""-Dasimage=on"" ""-Dasserts=off"" ""-Dbuiltin_cfitsio=off"" ""-Dbuiltin_clang=on"" ""-Dbuiltin_cling=on"" ""-Dbuiltin_cppzmq=on"" ""-Dbuiltin_davix=off"" ""-Dbuiltin_fftw3=off"" ""-Dbuiltin_freetype=off"" ""-Dbuiltin_ftgl=off"" ""-Dbuiltin_gl2ps=off"" ""-Dbuiltin_glew=off"" ""-Dbuiltin_gsl=off"" ""-Dbuiltin_llvm=on"" ""-Dbuiltin_lz4=off"" ""-Dbuiltin_lzma=off"" ""-Dbuiltin_nlohmannjson=off"" ""-Dbuiltin_openssl=off"" ""-Dbuiltin_openui5=on"" ""-Dbuiltin_pcre=off"" ""-Dbuiltin_tbb=off"" ""-Dbuiltin_unuran=on"" ""-Dbuiltin_vc=off"" ""-Dbuiltin_vdt=off"" ""-Dbuiltin_veccore=off"" ""-Dbuiltin_xrootd=off"" ""-Dbuiltin_xxhash=off"" ""-Dbuiltin_zeromq=on"" ""-Dbuiltin_zlib=off"" ""-Dbuiltin_zstd=off"" ""-Dccache=on"" ""-Dcefweb=off"" ""-Dclad=on"" ""-Dclingtest=off"" ""-Dcocoa=off"" ""-Dcoverage=off"" ""-Dcuda=on"" ""-Dcudnn=off"" ""-Dcxxmodules=off"" ""-Ddaos=off"" ""-Ddataframe=on"" ""-Ddavix=on"" ""-Ddcache=off"" ""-Ddev=off"" ""-Ddistcc=off"" ""-Dfail-on-missing=on"" ""-Dfcgi=off"" ""-Dfftw3=on"" ""-Dfitsio=on"" ""-Dfortran=off"" ""-Dgdml=off"" ""-Dgminimal=off"" ""-Dgnuinstall=off"" ""-Dgsl_shared=off"" ""-Dgviz=off"" ""-Dhttp=on"" ""-Dimt=on"" ""-Djemalloc=off"" ""-Dlibcxx=off"" ""-Dmacos_native=off"" ""-Dmathmore=on"" ""-Dmemory_termination=off"" ""-Dminimal=off"" ""-Dmpi=off"" ""-Dmysql=off"" ""-Dodbc=off"" ""-Dopengl=on"" ""-Dpgsql=on"" ""-Dpyroot=on"" ""-Dpythia8=off"" ""-Dqt5web=off"" ""-Dqt6web=off"" ""-Dr=off"" ""-Droofit=on"" ""-Droofit_multiprocess=on"" ""-Droot7=on"" ""-Drootbench=off"" ""-Droottest=on"" ""-Droottest_force_checkout=off"" ""-Drp",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16689:225,test,test,225,https://root.cern,https://github.com/root-project/root/issues/16689,2,"['TEST', 'test']","['TEST', 'test']"
Testability,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Moving from JIRA: [ROOT-10694](https://its.cern.ch/jira/browse/ROOT-10694). We have a tiny amount of global state (namely, two or three {{static}}s) within the RDF framework that should be protected from concurrent modification, and we do not test the case of concurrent usage of different RDF objects. ### Reproducer. -. ### ROOT version. any. ### Installation method. any. ### Operating system. any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15080:318,test,test,318,https://root.cern,https://github.com/root-project/root/issues/15080,1,['test'],['test']
Testability,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. On a large node (127 cores, 128 GB), I ran:; 1. ctest -j 32; 2. ctest --rerun-failed; 3. ctest -j 32. After 1. many test failes due to lack of resources (running out of threads, see #16552 ):; ```; 47:PyMVA-Keras-Classification; 348:PyMVA-Keras-Regression; 349:PyMVA-Keras-Multiclass; 350:gtest-tmva-pymva-test-TestRModelParserKeras; 984:tutorial-tmva-TMVA_SOFIE_GNN_Application; 985:tutorial-tmva-TMVA_SOFIE_Keras; 986:tutorial-tmva-TMVA_SOFIE_Keras_HiggsModel; 988:tutorial-tmva-TMVA_SOFIE_RDataFrame; 990:tutorial-tmva-TMVA_SOFIE_RSofieReader; 1238:tutorial-tmva-RBatchGenerator_PyTorch-py; 1239:tutorial-tmva-RBatchGenerator_TensorFlow-py; 1246:tutorial-tmva-TMVA_SOFIE_Models-py; 1247:tutorial-tmva-TMVA_SOFIE_RDataFrame-py; 1252:tutorial-tmva-keras-GenerateModel-py; 1253:tutorial-tmva-keras-MulticlassKeras-py; ```; However in 2., several tests still failed (even-though resources where no longer an issue):; ```; 50:gtest-tmva-pymva-test-TestRModelParserKeras; 984:tutorial-tmva-TMVA_SOFIE_GNN_Application; 986:tutorial-tmva-TMVA_SOFIE_Keras_HiggsModel; 988:tutorial-tmva-TMVA_SOFIE_RDataFrame; 990:tutorial-tmva-TMVA_SOFIE_RSofieReader; 1247:tutorial-tmva-TMVA_SOFIE_RDataFrame-py; ```; The errors listed there included:; ```; IncrementalExecutor::executeFunction: symbol 'saxpy_' unresolved while linking [cling interface function]!; IncrementalExecutor::executeFunction: symbol 'sgemm_' unresolved while linking [cling interface function]!; tutorials/tmva/TMVA_SOFIE_RDataFrame.C:29:10: fatal error: 'Higgs_trained_model.hxx' file not found; /tutorials/tmva/TMVA_SOFIE_GNN_Application.C:10:10: fatal error: 'encoder.hxx' file not found; ```. From this I conclude that those tests (in particular `TMVA_SOFIE_RDataFrame.C` and `tutorials/tmva/TMVA_SOFIE_GNN_Application.C`) are missing a dependencies that failed in the first run. Note `tutorial-tmva-TMVA_SOFIE_Keras_HiggsModel` and `tutorial-tmva-TMVA_SOFIE_RDataFr",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16553:191,test,test,191,https://root.cern,https://github.com/root-project/root/issues/16553,2,['test'],"['test', 'test-TestRModelParserKeras']"
Testability,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Parameter nentries of TTreePlayer::Scan works bad if number is small. Found thanks to @vepadulano. ### Reproducer. Reproducer ROOT test file here: https://its.cern.ch/jira/browse/ROOT-8256; Script below. ```; root -l -b -q -e 'TChain c(""Nominal/llllTree""); c.Add(""my.output.root""); c.Scan(""llll_type"","""","""",3);'; Warning in <TClass::Init>: no dictionary for class TChannelInfo is available; ***********************************; * Row * Instance * llll_type *; ***********************************; * 0 * 0 * *; * 1 * 0 * *; * 2 * 0 * *; ***********************************. root -l -b -q -e 'TChain c(""Nominal/llllTree""); c.Add(""my.output.root""); c.Scan(""llll_type"","""","""",4);'; Warning in <TClass::Init>: no dictionary for class TChannelInfo is available; ***********************************; * Row * Instance * llll_type *; ***********************************; * 0 * 0 * *; * 1 * 0 * *; * 2 * 0 * *; * 3 * 0 * 1111 *; * 3 * 1 * 1111 *; * 3 * 2 * 1111 *; * 3 * 3 * 1111 *; * 3 * 4 * 1111 *; * 3 * 5 * 1111 *; * 3 * 6 * 1111 *; * 3 * 7 * 1111 *; * 3 * 8 * 1111 *; * 3 * 9 * 1111 *; * 3 * 10 * 1111 *; * 3 * 11 * 1111 *; * 3 * 12 * 1111 *; * 3 * 13 * 1111 *; * 3 * 14 * 1111 *; * 3 * 15 * 1111 *; * 3 * 16 * 1111 *; * 3 * 17 * 1111 *; * 3 * 18 * 1111 *; * 3 * 19 * 1111 *; * 3 * 20 * 1111 *; * 3 * 21 * 1111 *; Type <CR> to continue or q to quit ==> q; ***********************************; ```. ### ROOT version. ```; ROOT v6.30/04; Built for linuxx8664gcc on Jan 31 2024, 10:01:37; From heads/master@tags/v6-30-04; With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0; Binary directory: /opt/root/bin; ```. ### Installation method. Binary Release. ### Operating system. Ubuntu 22.04 MATE desktop. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15210:206,test,test,206,https://root.cern,https://github.com/root-project/root/issues/15210,1,['test'],['test']
Testability,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. RBDT was never testing proper handling of xgboost models, either in writing them to ROOT format or in their usage afterwards. The functionality was never actually tested since the `xgboost` package was not installed on the CI nodes and the only available test was silently not running if the package was not found https://github.com/root-project/root/blob/05203aeefeaaeaa8efe1ca162fa6477d2b638c8a/tmva/tmva/test/CMakeLists.txt#L34-L41. The test had to be disabled right after the package was installed on some nodes and it immediately triggered failures as documented in this PR https://github.com/root-project/root/pull/15183. Since today, all platforms are now running (for the first time) RBDT tests with xgboost models. The Alma9 platform highlights a severe problem on the following three tests. ```; TEST FAILURES:; 296:test-tcollbm; 1314:tutorial-tmva-tmva101_Training-py; 1315:tutorial-tmva-tmva102_Testing-py; ```. By running inside a debugger, we can see that there is an issue at exit time (which **does not** depend on the version of xgboost); ```; (ROOT-CI) [root@663cf5af2db5 tmva]# gdb --args python tmva102_Testing.py ; [...]; Thread 1 ""python"" received signal SIGSEGV, Segmentation fault.; 0x00007f1251f78110 in __do_global_dtors_aux () from /lib64/libopenblaso.so.0; (gdb) ; (gdb) bt; #0 0x00007f1251f78110 in __do_global_dtors_aux () from /lib64/libopenblaso.so.0; #1 0x00007f1279ebef9e in _dl_fini () at dl-fini.c:142; #2 0x00007f12796574dd in __run_exit_handlers (status=0, listp=0x7f12797fa838 <__exit_funcs>, run_list_atexit=run_list_atexit@entry=true, ; run_dtors=run_dtors@entry=true) at exit.c:116; #3 0x00007f1279657620 in __GI_exit (status=<optimized out>) at exit.c:146; #4 0x00007f127963feb7 in __libc_start_call_main (main=main@entry=0x557932280160 <main>, argc=argc@entry=2, argv=argv@entry=0x7ffe94d9b838); at ../sysdeps/nptl/libc_start_call_main.h:74; #5 0x00007f127963ff60 in __libc_start_ma",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15197:90,test,testing,90,https://root.cern,https://github.com/root-project/root/issues/15197,9,"['TEST', 'test']","['TEST', 'test', 'test-tcollbm', 'tested', 'testing', 'tests']"
Testability,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Rumors have it that SIGTERM doesn't trigger writing in-memory objects to open `TFile`s. We should have a test for this. ### Reproducer. Likely this should be enough:; ```C++; TFile file(""out.root"", ""RECREATE"");; TH1F hist(""h"", ""h"", 10, 0., 1.);; raise(SIGTERM);; ```. ### ROOT version. 6.29/01. ### Installation method. From source. ### Operating system. Some Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13300:180,test,test,180,https://root.cern,https://github.com/root-project/root/issues/13300,1,['test'],['test']
Testability,### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Running the test suite for ROOT 6.32.00 fais in gtest-roofit-roofitcore-test-testLikelihoodJob:; ```; [==========] Running 45 tests from 4 test suites.; [----------] Global test environment set-up.; [----------] 9 tests from LikelihoodJobTest; [ RUN ] LikelihoodJobTest.UnbinnedGaussian1D; [ OK ] LikelihoodJobTest.UnbinnedGaussian1D (368 ms); [ RUN ] LikelihoodJobTest.UnbinnedGaussian1DSelectedParameterValues; [ OK ] LikelihoodJobTest.UnbinnedGaussian1DSelectedParameterValues (233 ms); [ RUN ] LikelihoodJobTest.UnbinnedGaussian1DTwice; [ OK ] LikelihoodJobTest.UnbinnedGaussian1DTwice (219 ms); [ RUN ] LikelihoodJobTest.UnbinnedGaussianND; [ OK ] LikelihoodJobTest.UnbinnedGaussianND (331 ms); [ RUN ] LikelihoodJobTest.SimBinned; [ OK ] LikelihoodJobTest.SimBinned (323 ms); [ RUN ] LikelihoodJobTest.BinnedConstrained; [ OK ] LikelihoodJobTest.BinnedConstrained (311 ms); [ RUN ] LikelihoodJobTest.SimUnbinned; [ OK ] LikelihoodJobTest.SimUnbinned (281 ms); [ RUN ] LikelihoodJobTest.SimUnbinnedNonExtended; [ OK ] LikelihoodJobTest.SimUnbinnedNonExtended (264 ms); [ RUN ] LikelihoodJobTest.BatchedUnbinnedGaussianND; [ OK ] LikelihoodJobTest.BatchedUnbinnedGaussianND (362 ms); [----------] 9 tests from LikelihoodJobTest (2698 ms total); [----------] 2 tests from LikelihoodJobBinnedDatasetTest; [ RUN ] LikelihoodJobBinnedDatasetTest.UnbinnedPdf; [ OK ] LikelihoodJobBinnedDatasetTest.UnbinnedPdf (152 ms); [ RUN ] LikelihoodJobBinnedDatasetTest.BinnedNLL; [ OK ] LikelihoodJobBinnedDatasetTest.BinnedNLL (325 ms); [----------] 2 tests from LikelihoodJobBinnedDatasetTest (480 ms total); [----------] 2 tests from LikelihoodJobSimBinnedConstrainedTest; [ RUN ] LikelihoodJobSimBinnedConstrainedTest.BasicParameters; [ OK ] LikelihoodJobSimBinnedConstrainedTest.BasicParameters (452 ms); [ RUN ] LikelihoodJobSimBinnedConstrainedTest.ConstrainedAndOffset; /usr/include/c++/14/bits/stl_vector.h:1130: std::vector<_Tp,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15730:87,test,test,87,https://root.cern,https://github.com/root-project/root/issues/15730,6,['test'],"['test', 'test-testLikelihoodJob', 'tests']"
Testability,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. See https://root-forum.cern.ch/t/shift-of-row-index-in-tmatrixtsparse/56525. According to Eddy it's a bug in the initialization of a sparse matrix with a row index not starting at 0. ### Reproducer. ```c++; void testSparse(Int_t msize=5); {; TMatrixDSparse m1(1,4,0,msize-1);; {; Int_t nr = 4*msize;; Int_t *irow = new Int_t[nr];; Int_t *icol = new Int_t[nr];; Double_t *val = new Double_t[nr];. Int_t n = 0;; for (UInt_t i = m1.GetRowLwb(); i <= m1.GetRowUpb(); i++) {; for (UInt_t j = m1.GetColLwb(); j <= m1.GetColUpb(); j++) {; irow[n] = i;; icol[n] = j;; val[n] = TMath::Pi()*i+TMath::E()*j;; n++;; }; }; m1.SetMatrixArray(nr,irow,icol,val);; delete [] irow;; delete [] icol;; delete [] val;; }. m1.Print();. TMatrixD m2(1,4,0,msize-1);; for (UInt_t i = m2.GetRowLwb(); i <= m2.GetRowUpb(); i++); for (UInt_t j = m2.GetColLwb(); j <= m2.GetColUpb(); j++); m2(i,j) = TMath::Pi()*i+TMath::E()*j;; m2.Print();. std::cout << ""matrices identical "" << ((m1 == m2) ? ""OK"" : ""FAILED"") << std::endl;; }; ```. ### ROOT version. master. ### Installation method. any. ### Operating system. any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13848:287,test,testSparse,287,https://root.cern,https://github.com/root-project/root/issues/13848,1,['test'],['testSparse']
Testability,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Something goes wrong in the code generation for a lot of tests, this case is roottest-root-meta-evolution-data1-build; for some reason the first entry from the list of available elf objects ([vdso]) makes it to the generated command line (and because it is not a path, I imagine, something get's thrown off). Where is that generated? A quick search left me with nothing... I suspect this is a reason for a lot of trouble here. ```; 1874: Processing /home/mkrzewic/src/root/roottest/scripts/build.C(""/home/mkrzewic/src/root/roottest/root/meta/evolution/data1.C"","""","""")...; 1874: Info in <TUnixSystem::ACLiC>: creating shared library /home/mkrzewic/build/root/roottest/root/meta/evolution/data1_C.so; 1874: __cxa_thread_call_dtors: dtr 0x82394b8f0 from unloaded dso, skipping; 1874: __cxa_thread_call_dtors: dtr 0x82394b8f0 from unloaded dso, skipping; 1874: __cxa_thread_call_dtors: dtr 0x82394b8f0 from unloaded dso, skipping; 1874: __cxa_thread_call_dtors: dtr 0x82394b8f0 from unloaded dso, skipping; 1874: __cxa_thread_call_dtors: dtr 0x82394b8f0 from unloaded dso, skipping; 1874: __cxa_thread_call_dtors: dtr 0x82394b8f0 from unloaded dso, skipping; 1874: __cxa_thread_call_dtors: dtr 0x82ce907b0 from unloaded dso, skipping; 1874: sh: Syntax error: Unterminated quoted string; 1874: Error in <ACLiC>: Executing 'cd ""/home/mkrzewic/build/root/roottest/root/meta/evolution"" ; c++ -fPIC -c -g -std=c++17 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -D_REENTRANT -pipe -W -Woverloaded-virtual -fsigned-char -pthread -DClingWorkAroundTClassUpdateDouble32 -I/usr/local/include/root -I/home/mkrzewic/build/root/roottest/root/meta/evolution -I""/usr/home/mkrzewic/build/root/etc/"" -I""/usr/home/mkrzewic/build/root/etc//cling"" -I""/usr/home/mkrzewic/build/root/etc//cling/plugi",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13080:132,test,tests,132,https://root.cern,https://github.com/root-project/root/issues/13080,1,['test'],['tests']
Testability,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. TL;DR: I did a self contained executable which you can find in the Reproducer part and it crashes using <http://alimonitor.cern.ch/train-workdir/testdata/LFN/alice/data/2015/LHC15o/000246392/pass2/PWGZZ/Run3_Conversion/320_20220701-0813/AOD/174/AO2D.root> with the following stacktrace:. ```; TDirectoryFile; Found TDirectoryFile: DF_2463920048222775916; Found TTree: DbgEventExtra; Convert leaf fStart [Int_t] --> field fStart [std::int32_t]; Convert leaf fNentries [Int_t] --> field fNentries [std::int32_t]; Warning in <[ROOT.NTuple] Warning /Users/ktf/src/sw/SOURCES/ROOT/186ec88ba4/0/tree/ntuple/v7/src/RPageStorageFile.cxx:51 in ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(std::string_view, const RNTupleWriteOptions &)>: The RNTuple file format will change. Do not store real data with this version of RNTuple!; Found TTree: O2bc; Convert leaf fRunNumber [Int_t] --> field fRunNumber [std::int32_t]; Convert leaf fGlobalBC [ULong64_t] --> field fGlobalBC [std::uint64_t]; Convert leaf fTriggerMask [ULong64_t] --> field fTriggerMask [std::uint64_t]; Warning in <[ROOT.NTuple] Warning /Users/ktf/src/sw/SOURCES/ROOT/186ec88ba4/0/tree/ntuple/v7/src/RPageStorageFile.cxx:51 in ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(std::string_view, const RNTupleWriteOptions &)>: The RNTuple file format will change. Do not store real data with this version of RNTuple!; Found TTree: O2calo; Convert leaf fIndexBCs [Int_t] --> field fIndexBCs [std::int32_t]; Convert leaf fCellNumber [Short_t] --> field fCellNumber [std::int16_t]; Convert leaf fAmplitude [Float_t] --> field fAmplitude [float]; Convert leaf fTime [Float_t] --> field fTime [float]; Convert leaf fCellType [Char_t] --> field fCellType [char]; Convert leaf fCaloType [Char_t] --> field fCaloType [char]; Warning in <[ROOT.NTuple] Warning /Users/ktf/src/sw/SOURCES/ROOT/186ec88ba4/0/tree/ntuple/v7/src/RPageStorageFile.cxx:51 in ROOT::Experi",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13996:220,test,testdata,220,https://root.cern,https://github.com/root-project/root/issues/13996,1,['test'],['testdata']
Testability,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. The RDataFrame execution order for branches of the computation graph is bottom-up: actions request values to the upstream readers traversing them one by one in reverse order w.r.t. their insertion. This logic seems to be flipped when the action is JITted. In a simple example with two `Define`d columns and one `Graph`, the order of execution of the `Define`s changes depending on whether the action needs to infer the column types or not. Correc order (bottom-up); ```; ./repro_graph_compiled.out ; Info in <[ROOT.RDF] Info /home/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RLoopManager.cxx:852 in void ROOT::Detail::RDF::RLoopManager::Run(bool)>: Starting event loop number 0.; Info in <[ROOT.RDF] Info /home/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RLoopManager.cxx:811 in void ROOT::Detail::RDF::RLoopManager::Jit()>: Nothing to jit and execute.; Defining 'b2': address: 0x7ffe1477198c, value: 42; Defining 'b1': address: 0x7ffe1477198c, value: 10; Info in <[ROOT.RDF] Info /home/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RLoopManager.cxx:889 in void ROOT::Detail::RDF::RLoopManager::Run(bool)>: Finished event loop number 0 (0s CPU, 6.10352e-05s elapsed).; graph: X: 10,Y:42; Info in <[ROOT.RDF] Info /home/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RLoopManager.cxx:811 in void ROOT::Detail::RDF::RLoopManager::Jit()>: Nothing to jit and execute.; ```. Wrong order; ```; ./repro_graph_jitted.out ; Info in <[ROOT.RDF] Info /home/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RLoopManager.cxx:852 in void ROOT::Detail::RDF::RLoopManager::Run(bool)>: Starting event loop number 0.; Info in <[ROOT.RDF] Info /home/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RLoopManager.cxx:825 in void ROOT::Detail::RDF::RLoopManager::Jit()>: Just-in-time compilation phase completed in 1.388524 seconds.; Defining 'b1': address: 0x7ffd017cb8dc, value: 42;",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15686:278,log,logic,278,https://root.cern,https://github.com/root-project/root/issues/15686,1,['log'],['logic']
Testability,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. The command ""root --notebook"" is not allowed on Windows 11. ### Reproducer. Run the ""root --notebook"" command. This is my code.; ```; import ROOT; ```; The following is an error.; ```; In file included from libGeom dictionary payload:17:; In file included from D:/ROOT/root_v6.30.02.win64.vc17\include\TGeoExtension.h:15:; In file included from C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\cassert:9:; In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\assert.h:12:; C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt.h:260:12: error: redefinition of '_CrtEnableIf<true, _Ty>'; struct _CrtEnableIf<true, _Ty>; ^~~~~~~~~~~~~~~~~~~~~~~; C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt.h:205:12: note: previous definition is here; struct _CrtEnableIf<true, _Ty>; ^; In file included from libGeom dictionary payload:17:; In file included from D:/ROOT/root_v6.30.02.win64.vc17\include\TGeoExtension.h:15:; In file included from C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\cassert:9:; In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\assert.h:12:; C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt.h:610:16: error: redefinition of '__crt_locale_data_public'; typedef struct __crt_locale_data_public; ^; C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt.h:596:16: note: previous definition is here; typedef struct __crt_locale_data_public; ^; In file included from libGeom dictionary payload:17:; In file included from D:/ROOT/root_v6.30.02.win64.vc17\include\TGeoExtension.h:15:; In file included from C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\cassert:9:; In file included from C:\Program Files (x86)\Windows Kits\10\Include\1",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14302:609,assert,assert,609,https://root.cern,https://github.com/root-project/root/issues/14302,1,['assert'],['assert']
Testability,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. The currently documented method of opening a TFile utilizes unique pointers:; `std::unique_ptr<TFile> myFile( TFile::Open(""file.root"", ""RECREATE"") );`. However, if a histogram is read from this file via and then drawn:; `TH1F* h1 = (TH1F*)file->Get(""Hist"");`; `TCanvas *c1 = new TCanvas(""c1"",""Fitting Demo"");`; `c1->cd()`; `h1->Draw()`. The canvas is empty and the histogram will not be drawn. This can be resolved by opening the file as a raw pointer. Either the documentation should consider this, or there is a bug with `unique_ptr` that should be addressed. ### Reproducer. 1) Read a TFile as a unique_ptr; 2) Get a histogram from the file; 3) Draw the histogram. run like root -x myMacro.cxx; [inputFile.zip](https://github.com/root-project/root/files/12231406/inputFile.zip). `void myMacro(){`; ` std::unique_ptr<TFile> file(TFile::Open(""inputFile.root"", ""read""));`; ` TH1F* h1 = (TH1F*)file->Get(""h1"");`; ` TCanvas *c1 = new TCanvas(""c1"",""Fitting Demo"");`; ` c1->cd();`; ` h1->Draw()`; `}`. ### ROOT version. Tested on:. Linux: 6.26; Linux: 6.28; MacOS: 6.26. ### Installation method. pre-built binary, homebrew. ### Operating system. MacOS, Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13369:1091,Test,Tested,1091,https://root.cern,https://github.com/root-project/root/issues/13369,1,['Test'],['Tested']
Testability,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. The failure seen in the asan job for the `gtest-tree-dataframe-test-dataframe-interface` test is due to the reproducer attached. It seems trying to JIT a function with a very long return expression is causing issues. Unfortunately asan just reports a segfault with no stacktrace, but I was able to get a (very long) stacktrace with gdb and the reproducer, see the attachment. Note that the reproducer is completely detached from RDataFrame and just calls the interpreter. [gdb_ginterpreter_declare_manyargs.txt](https://github.com/user-attachments/files/15794771/gdb_ginterpreter_declare_manyargs.txt). ### Reproducer. ```cpp; #include <TInterpreter.h>. int main(){; gInterpreter->Declare(R""(; namespace R_rdf {; auto func0(const int var0){return var0 + var0 + var0 + var0+var0 + var0 + var0 + var0+var0 + var0 + var0 + var0+var0 + var0 + var0 + var0+var0 + var0 + var0 + var0+var0 + var0 + var0 + var0+var0 + var0 + var0 + var0+var0 + var0 + var0 + var0+var0 + var0 + var0 + var0+var0 + var0 + var0 + var0+var0 + var0 + var0 + var0+var0 + var0 + var0 + var0+var0 + var0 + var0 + var0+var0 + var0 + var0 + var0+var0 + var0 + var0 + var0+var0 + var0 + var0 + var0+var0 + var0 + var0 + var0+var0 + var0 + var0 + var0+var0 + var0 + var0 + var0+var0 + var0 + var0 + var0+var0 + var0 + var0 + var0+var0 + var0 + var0 + var0+var0 + var0 + var0 + var0+var0 + var0 + var0 + var0+var0 + var0 + var0 + var0+var0 + var0 + var0 + var0+var0 + var0 + var0 + var0+var0 + var0 + var0 + var0+var0 + var0 + var0 + var0+var0 + var0 + var0 + var0+var0 + var0 + var0 + var0+var0 + var0 + var0 + var0+var0 + var0 + var0 + var0+var0 + var0 + var0 + var0+var0 + var0 + var0 + var0+var0 + var0 + var0 + var0+var0 + var0 + var0 + var0+var0 + var0 + var0 + var0+var0 + var0 + var0 + var0+var0 + var0 + var0 + var0+var0 + var0 + var0 + var0+var0 + var0 + var0 + var0+var0 + var0 + var0 + var0+var0 + var0 + var0 + var0+var0 + var0 + var0 + var0+var0 + va",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15818:138,test,test-dataframe-interface,138,https://root.cern,https://github.com/root-project/root/issues/15818,2,['test'],"['test', 'test-dataframe-interface']"
Testability,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. The function `TClass::GetClassInfo()` is not thread safe because `TObject::TestBit` is not thread safe. The function `TClass::GetClassInfo()` is used routinely outside of the global interpreter lock, e.g. https://github.com/root-project/root/blob/dcebd46c6dec4028f68f1b7bf8e37d64558f1e56/core/meta/src/TListOfDataMembers.cxx#L408. https://github.com/root-project/root/blob/dcebd46c6dec4028f68f1b7bf8e37d64558f1e56/core/meta/src/TListOfFunctions.cxx#L376C26-L376C38. As CMS is experiencing problems where the list of functions returned from TClass will infrequently be empty when we are running multi-threaded, it is possible this race condition is the cause. ### Reproducer. Visual inspection shows the problem. We have not been able to make a small reproducer for the thread problem we are seeing. ### ROOT version. 6.30. ### Installation method. build from source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15090:150,Test,TestBit,150,https://root.cern,https://github.com/root-project/root/issues/15090,1,['Test'],['TestBit']
Testability,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. The logic at . https://github.com/root-project/root/blob/e9fffa9a7c3aeeb17a4e05d5a05a83911c54b5dc/graf2d/gpad/src/TCanvas.cxx#L2261-L2264. Introduced a compiler warning, visible in every PR build, for example at https://github.com/root-project/root/pull/16161/files. <img width=""1183"" alt=""Screenshot 2024-08-03 at 15 28 50"" src=""https://github.com/user-attachments/assets/2880c4ea-fa11-48dc-91df-f3b45f890a7c"">. ### Reproducer. See description. ### ROOT version. Master. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16163:79,log,logic,79,https://root.cern,https://github.com/root-project/root/issues/16163,1,['log'],['logic']
Testability,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. The test `PyMVA-Keras-Regression` fails on 6.32 and master with this error:; ```; Error: [ERROR] Mean squared error is 115.737 (>30.0); ```; The test needs to be fixed in order to prevent this unstable behaviour. This is a blocker for the release of 6.32.00. ### Reproducer. See nightlies, e.g. https://github.com/root-project/root/actions/runs/8908577851/job/24464458546. ### ROOT version. master and 6.32. ### Installation method. from sources. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15396:79,test,test,79,https://root.cern,https://github.com/root-project/root/issues/15396,2,['test'],['test']
Testability,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. The test roottest-root-hist-h2root broken on Alma9 march=native builds. This PR https://github.com/root-project/root/pull/15935 deactivated FORTRAN on Alma9 march=native to avoid confusing developers with ""expected failures"" (broken windows). The test should be fixed and the PR reverted ASAP. ### Reproducer. Just run the aforementioned test on the aforementioned platform. ### ROOT version. master. ### Installation method. from sources. ### Operating system. Linux, Alma9, march=native on modern Intel/AMD. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15936:79,test,test,79,https://root.cern,https://github.com/root-project/root/issues/15936,3,['test'],['test']
Testability,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. This is related to #15406. In a run of `cling::utils::Lookup::Named` with:; ```; (lldb) p sofar->dumpAsDecl(); NamespaceDecl 0x12e8d0788 </Users/pcanal/root_working/test/2024-meta/test_usingenum.cxx:3:1, col:34> col:11 C; `-UsingDirectiveDecl 0x12e8d0818 <col:15, col:31> col:31 Namespace 0x12e8d0438 'A'; ```; will not look (or at least not find) anything brought by the using directive. This results in both `TClass::GetClass` and `TClass::GetEnum` (even after #15406 is resolved) with nothing find entity that are spelt via a using directive:. This is due to `TClassEdit::GetNormalizedName` is not correctly resolving the name (due to the incorrect behavior of `cling::utils::Lookup::Named`. ### Reproducer. ```; root [0] namespace A { enum E { kOne }; class C; }; root [1] namespace B { using namespace A; }; root [2] TClass::GetClass(""A::C""); Warning in <TClass::Init>: no dictionary for class A::C is available; (TClass *) 0x12fe265f0; root [3] TClass::GetClass(""B::C""); (TClass *) nullptr; root [4] TEnum::GetEnum(""A::E""); (TEnum *) 0x600000e64c30; root [5] TEnum::GetEnum(""B::E""); (TEnum *) nullptr; ```. ```; namespace A { enum E { kOne }; class C; }; namespace B { using namespace A; }. int testing(); {; 	auto c = TClass::GetClass(""B::C"");; if (!c) ; return 1;; if (c != TClass::GetClass(""A::E"");; return 2;. // Should work when PR #15408 is merged but does not.; auto e = TEnum::GetEnum(""B::E""); if (!e); return 3;; if (e != TEnum::GetEnum(""A::E"");; return 4;; return 0;; }; ```. ### ROOT version. v6.00+ including master. ### Installation method. any. ### Operating system. any. ### Additional context. A commented out part of `roottest/root/enums/test_usingenum.cxx` is failing due to this issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15407:240,test,test,240,https://root.cern,https://github.com/root-project/root/issues/15407,2,['test'],"['test', 'testing']"
Testability,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. This problem has been already mentioned here [0] but no solution has been proposed. When you compare a RooDataHist obtained from a TH1 with fixed size binning everything looks ok but when you do the same from a variable size binning the comparison fails. See code below to reproduce the comparison. [0] https://root-forum.cern.ch/t/roodatahist-and-th1d-why-different-shape-bin-content/56971. ### Reproducer. just run root mytest.cpp. ```; using namespace RooFit;. void mytest() {. const int nBin=100;; double xbins[nBin+1];; const float left_Val = 150;; const float rightVal = 1150; ; const float logxmin = TMath::Log10(left_Val);; const float logxmax = TMath::Log10(rightVal);; const double dxLog = (logxmax-logxmin)/nBin;; for (int i=0;i<=nBin;i++) xbins[i] = TMath::Power(10., logxmin + i * dxLog);. TF1 *f1 = new TF1(""f1"",""expo(0)"",left_Val,rightVal);; f1->SetParameters(1e2,-1e-2);. TH1D *h1 = new TH1D(""h1"","""",nBin,xbins);; h1->FillRandom(""f1"",10000000);; RooRealVar mInv(""mInv"",""m [GeV]"",150,1150);; RooDataHist hist_test1(""hist_test1"",""hist_test1"",mInv,Import(*h1,false));; TCanvas *cExpo1 = new TCanvas();; gPad->SetLogx();; gPad->SetLogy();; auto plot_test1 = mInv.frame();; hist_test1.plotOn(plot_test1,DataError(RooAbsData::SumW2));; plot_test1->Draw();; h1->Draw(""same"");. TH1D *h2 = new TH1D(""h2"","""",nBin,left_Val,rightVal);; h2->FillRandom(""f1"",10000000);; RooDataHist hist_test2(""hist_test2"",""hist_test2"",mInv,Import(*h2,false));; TCanvas *cExpo2 = new TCanvas();; gPad->SetLogx();; gPad->SetLogy();; auto plot_test2 = mInv.frame();; hist_test2.plotOn(plot_test2,DataError(RooAbsData::SumW2));; plot_test2->Draw();; h2->Draw(""same"");. }; ```. ### ROOT version. ROOT 6.30/06. ### Installation method. homebrew. ### Operating system. OSX Sonoma 14.5. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16028:672,log,logxmin,672,https://root.cern,https://github.com/root-project/root/issues/16028,4,['log'],"['logxmax', 'logxmax-logxmin', 'logxmin']"
Testability,### Check duplicate issues. - [ ] Checked for duplicates. ### Description. We have seen recently ubuntu24 failures of the type; ```; 2400/2509 Test #2432: roottest-root-tree-branches-make ..................................................................***Failed 1.79 sec; -- TEST COMMAND -- ; cd /github/home/ROOT-CI/roottest/root/tree/branches; /usr/bin/timeout -s USR2 1770s /usr/bin/gmake cleantest; -- BEGIN TEST OUTPUT --; /usr/bin/gmake -f Makefile test; gmake[1]: Entering directory '/github/home/ROOT-CI/roottest/root/tree/branches'; ; Processing runnoname.C...; Warning in <TBranch::TBranch>: No name was given to the leaf number '1' in the leaflist of the branch 'nhitshcal'.; *** buffer overflow detected ***: terminated; Aborted (core dumped); gmake[1]: Leaving directory '/github/home/ROOT-CI/roottest/root/tree/branches'; ```. as seen for example [here](https://github.com/root-project/root/actions/runs/9201038116/job/25308591312#step:11:26510). ### Reproducer. The reproducer is the roottest test at https://github.com/root-project/roottest/blob/a05d63796f584020aa2e749d95218434ef28cc37/root/tree/branches/runnoname.C. ### ROOT version. Any. ### Installation method. Built from source. ### Operating system. Ubuntu 24.04. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15621:143,Test,Test,143,https://root.cern,https://github.com/root-project/root/issues/15621,5,"['TEST', 'Test', 'test']","['TEST', 'Test', 'test']"
Testability,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When accessed after the generating RNTupleReader is gone, the RNTupleView segfaults. It should fail more gracefully. ### Reproducer. ```; TEST(RNTuple, ViewPastLifetime); {; FileRaii fileGuard(""test_ntuple_view_pastlifetime.root"");. auto model = RNTupleModel::Create();; auto fieldPt = model->MakeField<float>(""pt"", 42.0);; {; auto writer = RNTupleWriter::Recreate(std::move(model), ""ntpl"", fileGuard.GetPath());; writer->Fill();; }. auto reader = RNTupleReader::Open(""ntpl"", fileGuard.GetPath());; EXPECT_EQ(1u, reader->GetNEntries());; auto viewPt = reader->GetView<float>(""pt"");; reader.reset();; EXPECT_FLOAT_EQ(42.0, viewPt(0));; }; ```. ### ROOT version. master. ### Installation method. n/a. ### Operating system. n/a. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16489:213,TEST,TEST,213,https://root.cern,https://github.com/root-project/root/issues/16489,1,['TEST'],['TEST']
Testability,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When compiles ROOT on OpenSUSE Linux, one gets following compilation failure:; ```; /home/linev/git/json/tree/dataframe/test/datasource_arrow.cxx:14:10: fatal error: arrow/testing/builder.h: No such file or directory; 14 | #include <arrow/testing/builder.h>; | ^~~~~~~~~~~~~~~~~~~~~~~~~; ```. Seems to be `/usr/include/arrow/testing` directory not exists at all when `arrow` installed as provided by linux distributions. ### Reproducer. Compilation with `-Darrow=ON` on OpenSUSE Tumbleweed. ### ROOT version. master. ### Installation method. build from source. ### Operating system. OpenSUSE Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13516:195,test,test,195,https://root.cern,https://github.com/root-project/root/issues/13516,4,['test'],"['test', 'testing']"
Testability,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When creating a modified version of a histogram/graph it's useful to have the axis of the new variation emulate those of the original. Something like target.SetXXX( original.GetXXX()) should do the trick. And it does for almost everything. The exception are the Ticks. Where if idol has bits 9 & 10 (kTickPlus and kTickMinus) both false, GetTicks returns '+' which SetTicks encodes as bit 9 on and bit 10 off. This not only messes up the display of the ticks, but also the location of the tick labels and the axis' main title.; I'm working around that by manually called SetBit, so it's no longer a problem for me. But it just seems like an API bug. ### Reproducer. ```; TAxis idol, target;; target.SetTicks( idol.GetTicks() ); cout<<idol.TestBits( 1<<9 )<<"" --> ""<<target.TestBits( 1<<9 )<<endl;; ```. ### ROOT version. ```; 6.26/06; Built for linuxx8664gcc on Jul 28 2022, 18:08:51; From tags/v6-26-06@v6-26-06 ; With c++ (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0 ; ``` . ### Installation method. Built from source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14256:814,Test,TestBits,814,https://root.cern,https://github.com/root-project/root/issues/14256,2,['Test'],['TestBits']
Testability,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When jitting code with errors in some cases, the failure leads to a segfault in cling. I didn't manage a very minimal reproducer, so here's the actual code which provoked this. (including an Eigen dependency, where the include of the Eigen headers seems to be relevant to provoking the crash). ### Reproducer. test.h; ```#ifndef WREMNANTS_EtaPtCorrelatedEfficiency_h; #define WREMNANTS_EtaPtCorrelatedEfficiency_h. #include ""TROOT.h""; #include ""TH2D.h""; #include ""TH3D.h""; #include ""TFile.h""; #include ""TMath.h"". #include <eigen3/Eigen/Dense>; // #include <eigen3/Eigen/Eigenvalues>; //#include <stdlib.h>; //#include <stdio.h>; #include <cstdlib> ; #include <cstdio>; #include <cmath>; #include <iostream>; #include <string>; #include <fstream>; #include <cassert>. namespace wrem {. // ================================================; // Some functions to be used for EtaPtCorrelatedEfficiency; // ================================================; // TODO:; // put functions in another header file; // write a base class to make all functions derive from, at least for polynomials; // write a generic class for polynomials; class pol3_custom {; public:; pol3_custom() {};; pol3_custom(const double& xMin, const double& xRange) {; xMinNorm_ = xMin;; xRangeNorm_ = xRange;; };; double operator() (std::vector<double> &x, std::vector<double> &p) {; double xscaled = (x[0] - xMinNorm_) / xRangeNorm_;; return p[0] + p[1]*xscaled + p[2]*std::pow(xscaled,2) + p[3]*std::pow(xscaled,3);; }; void setPolynomialArgument(const double& xMin, const double& xRange) {; xMinNorm_ = xMin;; xRangeNorm_ = xRange;; }; int getNparams() { return nparams_; }; protected:; // to normalize polynomial argument; int nparams_ = 4;; double xMinNorm_ = 0.0;; double xRangeNorm_ = 1.0;; };. class pol4_custom {; public:; pol4_custom() {};; pol4_custom(const double& xMin, const double& xRange) {; xMinNorm_ = xMin;; xRangeNorm_ = xRange;; };; double ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16578:385,test,test,385,https://root.cern,https://github.com/root-project/root/issues/16578,1,['test'],['test']
Testability,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When running with `ctest -j 32` on a node with 127 cores (see below for more details), one of the run had many failures due to running out of thread resources. The list of affected test includes:; ```; 47:PyMVA-Keras-Classification ; 348:PyMVA-Keras-Regression ; 349:PyMVA-Keras-Multiclass ; 985:tutorial-tmva-TMVA_SOFIE_Keras; 1238:tutorial-tmva-RBatchGenerator_PyTorch-py ; 1239:tutorial-tmva-RBatchGenerator_TensorFlow-py ; 1247:tutorial-tmva-TMVA_SOFIE_RDataFrame-py ; 1252:tutorial-tmva-keras-GenerateModel-py ; 1253:tutorial-tmva-keras-MulticlassKeras-py ; 1584:roottest-root-io-evolution-make ; 1641:roottest-root-io-newstl-make; ```. those (and possibly `tutorial-tmva-keras-MulticlassKeras-py` which did not run because it requires the previous test). ### Reproducer. ```; 347/2278 Testing: PyMVA-Keras-Classification; 347/2278 Test: PyMVA-Keras-Classification; Command: ""/usr/bin/cmake"" ""-DCMD=/home/pcanal/root_working/build/quick-devel/tmva/pymva/test/testPyKerasClassification"" ""-DSYS=/home/pcanal/root_working/build/quick-devel"" ""-P"" ""/home/pcanal/root_working/code/quick-devel/cmake/modules/RootTestDriver.cmake""; Directory: /home/pcanal/root_working/build/quick-devel/tmva/pymva/test; ""PyMVA-Keras-Classification"" start time: Sep 24 20:01 UTC; Output:; ----------------------------------------------------------; Get test data...; Generate keras model...; 2024-09-24 20:01:12.572604: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered; 2024-09-24 20:01:12.572668: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered; 2024-09-24 20:01:12.573914: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Att",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16552:256,test,test,256,https://root.cern,https://github.com/root-project/root/issues/16552,2,['test'],['test']
Testability,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. While testing 6.32, it appears that the new default evaluation backend returns incorrect results for binned likelihoods. It is returning ""20"" in the example below when I'm pretty sure it should just return ""10"", which the legacy implementation does. . ### Reproducer. ```c++; {; using namespace ROOT::Experimental::XRooFit;. double n = 0;; double mu = 10;. // create a single-channel, single-bin model; xRooNode w(""RooWorkspace"",""combined"",""my workspace"");; w[""simPdf/SR""]->SetXaxis(1,0,1);; w[""simPdf/SR/bkg""]->SetBinContent(1,mu);; w[""simPdf/SR""]->SetBinData(1,n);. // activate binned likelihood; w[""simPdf/SR/samples""]->get<RooAbsArg>()->setAttribute(""BinnedLikelihood"");. double newVal = w[""simPdf""]->get<RooAbsPdf>()->createNLL(*w[""obsData""]->get<RooAbsData>())->getVal();; double legacyVal = w[""simPdf""]->get<RooAbsPdf>()->createNLL(*w[""obsData""]->get<RooAbsData>(),RooFit::EvalBackend(""legacy""))->getVal();; double ans = -log(TMath::Poisson(n,mu));. // correct answer should be -log(Pois(n|mu)). std::cout << newVal << std::endl << legacyVal << std::endl << ans << std::endl;. }; ```. ### ROOT version. 6.32, master. ### Installation method. source. ### Operating system. all. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15694:81,test,testing,81,https://root.cern,https://github.com/root-project/root/issues/15694,3,"['log', 'test']","['log', 'testing']"
Testability,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. While trying to update to LCG_106_ATLAS_3 (root 6.32/02) we encountered a test failure. An intermediate file produce with this release could not be read back with an older release (6.10/06, 6.08.06), we encounter a segfault when the file is closed. . Background: ATLAS Trigger simulation of run 2 uses the release that was used for data-taking during run 2. . ### Reproducer. I copied the intermediate file + reproducer script to /afs/cern.ch/work/w/wlampl/public/ATEAM-1001 ; The script is quite simple:; ```; from ROOT import TFile; f=TFile.Open(""tmp.RDO""); f.ls(); t=f.Get(""CollectionTree""); n=t.GetEntries(); for i in range(n):; s=t.GetEntry(i); print(s); f.Close(); ```; For root versions back to about 6.16.00 it works as expected. Running with 6.08.06 and 6.10.06 (in a centos7 container), I encounter a segfault as the end. A log can be found in /afs/cern.ch/work/w/wlampl/public/ATEAM-1001/log.22.0.0; . ### ROOT version. Writing: 6.32/02; Reading: 6.10/06 or 6.08.06 . ### Installation method. SFT/LCG. ### Operating system. CentOS7. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15964:149,test,test,149,https://root.cern,https://github.com/root-project/root/issues/15964,3,"['log', 'test']","['log', 'test']"
Testability,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. With master, on a node without xrootd (so using builtin xrootd) doing on an empty directory:; ```; cmake /Users/pcanal/root_working/code/rootcling -G Ninja -Dbuiltin_davix=OFF -Ddavix=OFF; cmake .; ```; i.e. without buillding; leads to:; ```; CMake Error:; Running. '/Users/pcanal/bin/ninja' '-C' '/Users/pcanal/root_working/builds/master-xrootd-test' '-t' 'recompact'. failed with:. ninja: error: build.ninja:25026: multiple rules generate lib/libXrdCl.dylib; ```. ### Reproducer. ```; mkdir build; cd build; cmake /Users/pcanal/root_working/code/rootcling -G Ninja -Dbuiltin_davix=OFF -Ddavix=OFF; cmake .; ```. ### ROOT version. master. ### Installation method. local build. ### Operating system. macos. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16149:421,test,test,421,https://root.cern,https://github.com/root-project/root/issues/16149,1,['test'],['test']
Testability,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. [`RLoopManager::RunDataSource`](https://github.com/root-project/root/blob/727181ec7612c44aa3d6f04fcccfc5b23834fec2/tree/dataframe/src/RLoopManager.cxx#L614) is lacking the logic to update the sample information which is present in the equivalent runners for the empty data source or the [TTree data source](https://github.com/root-project/root/blob/727181ec7612c44aa3d6f04fcccfc5b23834fec2/tree/dataframe/src/RLoopManager.cxx#L581-L583). This notably prevents using `DefinePerSample` effectively when the input data source is an `RNTuple`. ```; $: ./repro.out; +-----+-----------+; | Row | file_name |; +-----+-----------+; | 0 | """" |; +-----+-----------+; | 1 | """" |; +-----+-----------+; | 2 | """" |; +-----+-----------+; | 3 | """" |; +-----+-----------+; | 4 | """" |; +-----+-----------+; | 5 | """" |; +-----+-----------+; | 6 | """" |; +-----+-----------+; | 7 | """" |; +-----+-----------+; | 8 | """" |; +-----+-----------+; | 9 | """" |; +-----+-----------+; | 10 | """" |; +-----+-----------+; | 11 | """" |; +-----+-----------+; | 12 | """" |; +-----+-----------+; | 13 | """" |; +-----+-----------+; | 14 | """" |; +-----+-----------+; ```. ### Reproducer. ```cpp; #include <ROOT/RNTupleDS.hxx>; #include <ROOT/RNTupleWriter.hxx>; #include <ROOT/RNTupleModel.hxx>; #include <TFile.h>; #include <ROOT/RNTuple.hxx>; #include <ROOT/RNTupleReader.hxx>; #include <ROOT/RVec.hxx>. #include <iostream>. using RNTupleModel = ROOT::Experimental::RNTupleModel;; using RNTupleWriter = ROOT::Experimental::RNTupleWriter;. void create_definepersample(const std::string &ntpl_name, const std::vector<std::string> &filenames); {; for (const auto &fn : filenames); {; auto model = RNTupleModel::Create();; auto fldX = model->MakeField<ULong64_t>(""x"");; auto ntpl = RNTupleWriter::Recreate(std::move(model), ntpl_name, fn);; for (ULong64_t entry = 0; entry < 10; entry++); {; *fldX = entry;; ntpl->Fill();; }; }; }. int main(); {; std::vector<std::string>",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15086:247,log,logic,247,https://root.cern,https://github.com/root-project/root/issues/15086,1,['log'],['logic']
Testability,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. `Cling` is not seeing of the content of `math.h` on MacOS. ### Reproducer. With the file header.h; ```; #include <math.h>. void func(); {; float a = 0, b = 0, c = 0;; __sincospif(a, &b, &c);; }; ```; the file compiles:; ```; clang++ -c header.h ; clang: warning: treating 'c-header' input as 'c++-header' when in C++ mode, this behavior is deprecated [-Wdeprecated]; ```; but fails to be parsed by `Cling` (well `rootcling`); ```; rootcling -f dict.cxx header.h; In file included from input_line_8:3:; header.h:6:4: error: use of undeclared identifier '__sincospif'; __sincospif(a, &b, &c);; ^; Error: rootcling: compilation failure (dict51adc8b8cb_dictUmbrella.h); ```. ### ROOT version. Tested on master likely also on older releases. ### Installation method. manual build and/or spack. ### Operating system. MacOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14442:764,Test,Tested,764,https://root.cern,https://github.com/root-project/root/issues/14442,1,['Test'],['Tested']
Testability,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. ```; root [0] .L sparsehist.C ; root [1] .x sparsehist.C ; Assertion failed: (isa<X>(Val) && ""cast<Ty>() argument of incompatible type!""), function cast, file Casting.h, line 255.; Abort trap: 6; ```. ### Reproducer. See description and https://root-forum.cern.ch/t/break-segmentation-violation-when-executing-sparsehist-c/56948/5. ### ROOT version. ```; ------------------------------------------------------------------; | Welcome to ROOT 6.31/01 https://root.cern |; | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for macosxarm64 on Nov 02 2023, 22:29:51 |; | From heads/master-13574@v6-31-01-108-g1cf66addc0 |; | With Apple clang version 15.0.0 (clang-1500.0.40.1) |; | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------; ```. ### Installation method. local build. ### Operating system. MacOS but likely any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14012:134,Assert,Assertion,134,https://root.cern,https://github.com/root-project/root/issues/14012,1,['Assert'],['Assertion']
Testability,### Check duplicate issues. - [ ] Checked for duplicates. ### Description. ```ctest -R dataframe-datasetspec``` gives something like:; ```; Start 424: pyunittests-dataframe-datasetspec; Start 401: gtest-tree-dataframe-test-dataframe-datasetspec; 1/2 Test #401: gtest-tree-dataframe-test-dataframe-datasetspec ... Passed 5.65 sec; 2/2 Test #424: pyunittests-dataframe-datasetspec ................. Passed 9.25 sec; ```; Where where have `gtest-tree-dataframe` by `pyunittests-dataframe` with a missing `tree-` part. This has 2 negative consequences:; * Names of `pyunittests` must be across all test directories.; * Finding the test based on its name is (slightly) harder than it should. Ideally the names of the test would:; ```; gtest-tree-dataframe-dataframe-datasetspec; pyunittests-tree-dataframe-dataframe-datasetspec; ```. ### Reproducer. ```; ctest -R dataframe-datasetspec; ```. ### ROOT version. master	. ### Installation method. local build. ### Operating system. any. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16647:218,test,test-dataframe-datasetspec,218,https://root.cern,https://github.com/root-project/root/issues/16647,7,"['Test', 'test']","['Test', 'test', 'test-dataframe-datasetspec']"
Testability,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. running some tests on 6.32 with the CMS Higgs workspace I am getting a crash with the top of the stack trace pointing to `RooBernstein::fillBuffer()` which was introduced in https://github.com/root-project/root/commit/50a1bddacc1cbd22d7ce0e184db42bc04e9b0088. I can confirm that I don't see the crash when I use a version of ROOT master from just before this commit. . Looking at the commit, it has introduced a new data member, `_buffer` ... but has not done any schema evolution. . I'm wondering if the crash is that the `_buffer` in the auto-evolved instance is empty, and then the `fillBuffer` method is trying to fill into this? The resize of `_buffer` only happens in the non-default-constructor, I note. ### Reproducer. In 6.32:; ```; import ROOT.Experimental.XRooFit as XRF; w = XRF.xRooNode(""/afs/cern.ch/work/w/will/public/cms_higgs_ws.root""); w[""model_s""][0].Draw(); ```; or in C++:; ```; using namespace ROOT::Experimental::XRooFit;; xRooNode w(""/afs/cern.ch/work/w/will/public/cms_higgs_ws.root"");; w[""model_s""]->at(0)->Draw();; ```. ### ROOT version. 6.32. ### Installation method. source. ### Operating system. el9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15690:88,test,tests,88,https://root.cern,https://github.com/root-project/root/issues/15690,1,['test'],['tests']
Testability,"### Check duplicate issues. - [X] Checked for duplicates. ### Describe the bug. During parsing of the JSON file, the main keys ""samples"", are parsed in an alphabetical order. . For example, while parsing the JSON file: . '{; ""samples"": {; ""B"": {; ""trees"": [""subTree""],; ""files"": [""TestFileB.root""]; },; ""A"": {; ""trees"": [""subTree""],; ""files"": [""TestFileA.root""]; }; }; }'. the sample's A:`TestFileA.root` file will be accessed first, even though sample's B file should be accessed first according to the nominal ordering. The alphabetical ordering can lead to problems while the RDataFrame of interest has friend trees as the friend trees need to be aligned with the main TChain. . ### What is the expected behaviour?. The keys of the JSON file should be parsed according to the nominal ordering of the JSON file (non-alphabetical). . ### How to reproduce?. [JSON_ordering_issue.zip](https://github.com/root-project/root/files/11769777/JSON_ordering_issue.zip). Run `fromspec_ordering.py` with `spec.json`. . The output is `TestFileA.root` before `TestFileB.root`. ### ROOT version. 6.28. ### How did you install ROOT?. source. ### Which operating system are you using?. MacOS 13. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13037:281,Test,TestFileB,281,https://root.cern,https://github.com/root-project/root/issues/13037,5,['Test'],"['TestFileA', 'TestFileB']"
Testability,"### Check duplicate issues. - [X] Checked for duplicates. ### Describe the bug. Hi,; We are trying to test latest ROOT 6.28 patches (commit 55513fb518) and ROOT master (commit d4d1df86b07886d56c4bd1372590d0a62c3987c0) branch changes in cmssw. Though root itself builds fine in both cases but we get CMSSW build errors [a]. Note that we did not see such errors with ROOT 6.28-patches commit a13590901c or ROOT maser commit f499987. . [a]; ```; @@@@ Running edmWriteConfigs for SimG4CoreSaveSimTrackAction. *** Break *** segmentation violation. ===========================================================; There was a crash (kSigSegmentationViolation).; This is the entire stack trace of all threads:; ===========================================================; #0 0x0000152ecd0815db in waitpid () from /lib64/libc.so.6; #1 0x0000152eccfe3ce7 in do_system () from /lib64/libc.so.6; #2 0x0000152ece6e73e2 in TUnixSystem::Exec (this=0x234e8c0, shellcmd=0x51d8ad0 ""/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc11/lcg/root/6.28.05-e7deaecb5e40f02a68a0fd8a7c036f40/etc/gdb-backtrace.sh 1509407 1>&2"") at /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.05-e7deaecb5e40f02a68a0fd8a7c036f40/root-6.28.05/core/unix/src/TUnixSystem.cxx:2104; #3 0x0000152ece6e7c83 in TUnixSystem::StackTrace (this=0x234e8c0) at /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.05-e7deaecb5e40f02a68a0fd8a7c036f40/root-6.28.05/core/unix/src/TUnixSystem.cxx:2395; #4 0x0000152ece6eb6be in TUnixSystem::DispatchSignals (this=0x234e8c0, sig=kSigSegmentationViolation) at /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.05-e7deaecb5e40f02a68a0fd8a7c036f40/root-6.28.05/core/unix/src/TUnixSystem.cxx:3615; #5 0x0000152ece6e35da in SigHandler (sig=kSigSegmentationViolation) at /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/r",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12957:102,test,test,102,https://root.cern,https://github.com/root-project/root/issues/12957,3,['test'],"['test', 'testBuildDir', 'tests']"
Testability,"### Check duplicate issues. - [X] Checked for duplicates. ### Describe the bug. The presence of tessellated volumes in the TGeo geometry leads to erroneous node identification from coordinates. The tessellated volume is identified as the node containing the given point, which actually lies in another volume. Removing the tessellated volume the right one is correctly identified. This issue has originally been reported in the VGM project (see [here](https://github.com/vmc-project/vgm/issues/14#issuecomment-1589757201)) and identified by the VGM developer as a problem with Root navigation. . ### What is the expected behaviour?. The volume including the origin should be found when searching for origin coordinates even with the tessellated tray in the geometry. ### How to reproduce?. A full reproducer is available [here](https://basket.fi.infn.it/f/30bd4036d8/?dl=1). After decompressing the tarball, create the build folder for cmake and build as usual. Then transfer the tray.gdml and vis.mac macros in the build folder and launch the test executable. The test program consists of a GDML tray filled with cubic crystals, and will first show the geometry in an OpenGL canvas, then export the geometry to TGeo and find the volume in the origin (the geometry is also saved in a Root file for convenience). From very last line of the console output one can see that the volume at the origin is the tray, while it should be a cubic crystal. Indeed, commenting out lines 62-64 of main.cpp and running the geometry is now made only of cubes in the very same positions as before, and now TGeo correctly finds a crystal in the origin. ### ROOT version. 6.26/04. ### How did you install ROOT?. Build from source. ### Which operating system are you using?. Archlinux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13039:1044,test,test,1044,https://root.cern,https://github.com/root-project/root/issues/13039,2,['test'],['test']
Testability,"### Check duplicate issues. - [X] Checked for duplicates. ### Describe the bug. We are using a customized version of https://github.com/therocode/meta_enum that fails with ROOT v6-28-00-patches. When including the attached file I get an assertion failure from LLVM:; ```; root [0] #include ""custom_meta_enum_test.hpp""; root.exe: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-28-00-patches/src/ROOT/v6-28-00-patches/interpreter/llvm/src/tools/clang/lib/AST/ExprConstant.cpp:5921: bool HandleUnionActiveMemberChange({anonymous}::EvalInfo&, const clang::Expr*, const {anonymous}::LValue&): Assertion `declaresSameEntity(FD, LHS.Designator.Entries[PathLength] .getAsBaseOrMember().getPointer())' failed.; ```. By trial and errors I managed to find the bit of code that triggers the assertion error and I embedded the workaround in the attached file:; ```; root [0] #define WORKAROUND; root [1] #include ""custom_meta_enum_test.hpp""; root [2] ; ```. The difference that works around the issue is basically; ```patch; +++ b/Kernel/LHCbKernel/include/Kernel/meta_enum.h; @@ -130,10 +130,11 @@ namespace meta_enum_internal {; currentStringStart = currentStringEnd;; }; for ( size_t i = 0; i < memberStrings.size(); ++i ) {; - result.members[i].name = parseEnumMemberName( memberStrings[i] );; + auto name = parseEnumMemberName( memberStrings[i] );; + result.members[i].name = name;; result.members[i].value = std::get<1>( values )[i];; if ( std::get<0>( values ) == std::get<1>( values )[i] ) {; - result.defaultString = result.members[i].name;; + result.defaultString = name;; result.defaultValue = std::get<0>( values );; }; }. ```. [custom_meta_enum_test.hpp.gz](https://github.com/root-project/root/files/11749495/custom_meta_enum_test.hpp.gz). ### What is the expected behaviour?. _No response_. ### How to reproduce?. From lxplus9.cern.ch:; ```; ❯ . /cvmfs/sft-nightlies.cern.ch/lcg/views/dev4/Mon/x86_64-el9-gcc13-dbg/setup.sh; ❯ root; --------------------------------------------",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13019:237,assert,assertion,237,https://root.cern,https://github.com/root-project/root/issues/13019,3,"['Assert', 'assert']","['Assertion', 'assertion']"
Testability,"### Check duplicate issues. - [X] Checked for duplicates. ### Describe the bug. When doing a simple `TFile::Open()`, ROOT initialises the interpreter on the first `TEnv::GetValue` needed by the aforementioned method. This makes it load all the pcms which it can find, regardless of weather they are needed to read the file or not (in our case we only have branches with basic types, e.g. floats or ints or vector of thereof). ; This has the net result of adding 70MB of RSS for no particular reason to any process which uses ROOT. You can find more details in the attached instruments screenshot.; Moreover, single stepping with the debugger and printing out the LoadModule argument, it seems that the pcms for Sofie, Proof and 3D graphics are particularly honours, all of which we do not need and we do not link. ![image](https://github.com/root-project/root/assets/10544/c1ee3a82-a5cc-4f64-a131-ea4fce1453c3). ### What is the expected behaviour?. The best would be for ROOT to be smart enough to lazily load the pcms when they are actually needed, not upfront. A second best option would be to be able to start the interpreter in a clean slate state and load by hand only the pcms which are needed to read a file. ### How to reproduce?. On macOS using Instruments one can do:; ; ```bash; xcrun xctrace record --output root.trace --time-limit 30s --template Allocations --launch -- /Users/ktf/src/sw/osx_arm64/ROOT/alice-v6-28-04-local2/bin/root.exe -q -b http://alimonitor.cern.ch/train-workdir/testdata/LFN/alice/data/2015/LHC15o/000246392/pass2/PWGZZ/Run3_Conversion/320_20220701-0813/AOD/019/AO2D.root; open root.trace; ```. and get the report in question. Using the alice environment should not matter, but in principle you should be able to load it from CVMFS. ### ROOT version. 6.28.04, but it's a while we see it. ### How did you install ROOT?. ALICE build environment. ### Which operating system are you using?. macOS, linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13000:1497,test,testdata,1497,https://root.cern,https://github.com/root-project/root/issues/13000,1,['test'],['testdata']
Testability,"### Check duplicate issues. - [X] Checked for duplicates. ### Describe the bug. With `ROOT::IsImplicitMTEnabled() == false`, `TVirtualFitter::GetFitter()` should return the fitter used in a previous fit operation. With ROOT 6.28.04 (and older versions too) compiled form source on the latest macOS/Xcode this doesn't seem to be the case anymore. The `GetFitter()` call returns `nullptr` despite a previous successful call to a fit routine. As a result, various tests that employ fits fail/crash, for example the ""test-stresshistogram"" test. ### What is the expected behaviour?. After a call to a fit function, e.g.`h1->Fit(...)` (see below) , expect `TVirtualFitter::GetFitter() != nullptr` to be true. ### How to reproduce?. This snippet (taken from the test-stresshistogram source),; ```; ROOT::DisableImplicitMT();; double gaus1d(const double *x, const double * p) { return p[0] * TMath::Gaus( x[0], p[1], p[2], true); }; TH1D * h1 = new TH1D(""h1"",""h1"",100,-5,5);; TF1 * gaus = new TF1(""gaus1d"",gaus1d,-5,5,3);; gaus->SetParameters(1,0,1);; h1->FillRandom(""gaus1d"",10000);; auto res = h1->Fit(gaus,""L0S"");; cout << TVirtualFitter::GetFitter() << endl;; ```; run either interactively or in compiled code, should print a non-zero number, which it does on older platforms. But it prints `0x0` with the latest ROOT/macOS/Xcode (details below). ### ROOT version. 6.28.04, 6.26.10. ### How did you install ROOT?. Custom build from source. ### Which operating system are you using?. macOS 13.4, Xcode 14.3.1; macOS 12.6.5, Xcode 14.2. ### Additional context. It works with ROOT 6.28.04 on macOS 11.7.7 (Intel) with Xcode 13.2.1. It fails with the exact same ROOT, compiled with the exact same configuration, on macOS 13.4 (Intel) with Xcode 14.3.1. Details:; ```; $ root-config --cflags; -stdlib=libc++ -pthread -std=c++17 -m64 -I/Users/ole/Develop/BUILD/ROOT/6.28.04/include; $ root-config --features; cxx17 asimage builtin_afterimage builtin_clang builtin_cling builtin_freetype builtin_glew builtin_gte",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13041:461,test,tests,461,https://root.cern,https://github.com/root-project/root/issues/13041,4,['test'],"['test', 'test-stresshistogram', 'tests']"
Testability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. ### TL;DR:; Running multiple times the reproducer posted here I get inconsistent behaviour on Ubuntu 22.04.1.; It goes in `SIGSEGV` ~25% of the times, and would expect it to either fail consistently or always succeed. ### Context:; The `deleteTCollections()` function in the reproducer is a utility I copied verbatim from our framework.; The reproducer is a minimal version of a unit test we run in our CI.; We started to experience this regression (test failing) on our CI when we tried to move to a version of root compiled with C++20.; It turns out that this is reproduced in root v6-28 and v6-30 even if C++20 **is not enabled**.; It appeared only on Ubuntu tests, so far. I am attaching the test.C asap in editing this issue. ### Reproducer. ```C++; #include <TObject.h>; #include <TObjArray.h>; #include <TList.h>; #include <TH1I.h>; #include <TH2I.h>; #include <iostream>. void deleteTCollections(TObject *obj); {; std::cout << ""Processing "" << ((TNamed *)obj)->TNamed::GetName() << "" of type "" << obj->ClassName() << std::endl;; if (auto c = dynamic_cast<TCollection *>(obj)); {; std::cout << ""Entering TCollection... "" << std::endl;; c->SetOwner(false);; auto iter = c->MakeIterator();; while (auto element = iter->Next()); {; deleteTCollections(element);; }; delete iter;; delete c;; }; else; {; delete obj;; }; }. void test(); {; int bins{10}, min{0}, max{10};; TObjArray *main = new TObjArray();; main->SetOwner(false);. auto *collectionInside = new TList();; collectionInside->SetOwner(true);. TH1I *histo1DinsideCollection = new TH1I(""histo 1d"", ""histo 1d"", bins, min, max);; histo1DinsideCollection->Fill(2);; collectionInside->Add(histo1DinsideCollection);. main->Add(collectionInside);; std::cout << "" ====== Listing elements in lists... ====== "" << std::endl;; for (int i = 0; i < main->GetEntries(); ++i); {; std::cout << ""main["" << i << ""] = "" << main->At(i) << "" is a: "" << main->At(i)->ClassName() << "" w",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14504:459,test,test,459,https://root.cern,https://github.com/root-project/root/issues/14504,4,['test'],"['test', 'tests']"
Testability,### Check duplicate issues. - [X] Checked for duplicates. ### Description. A new test was added to gtest-core-metacling-test-TClingTest in root 6.30.04. This test fails on s390x; ``` 144/1248 Test #101: gtest-core-metacling-test-TClingTest ................................***Failed 7.66 sec; Running main() from /builddir/build/BUILD/googletest-release-1.11.0/googletest/src/gtest_main.cc; Note: Google Test filter = -RCsvDS.Remote:RRawFile.Remote:RSqliteDS.Davix:TChainParsing.RemoteGlob:TFile.ReadWithoutGlobalRegistrationNet:TFile.ReadWithoutGlobalRegistrationWeb:RNTuple.TClassEBO; [==========] Running 33 tests from 4 test suites.; [----------] Global test environment set-up.; [----------] 9 tests from TClingTests; [ RUN ] TClingTests.GenerateDictionaryErrorHandling; [ OK ] TClingTests.GenerateDictionaryErrorHandling (0 ms); [ RUN ] TClingTests.GenerateDictionaryRegression; [ OK ] TClingTests.GenerateDictionaryRegression (2404 ms); [ RUN ] TClingTests.GenerateDictionary; [ OK ] TClingTests.GenerateDictionary (3057 ms); [ RUN ] TClingTests.GetEnumWithSameVariableName; [ OK ] TClingTests.GetEnumWithSameVariableName (0 ms); [ RUN ] TClingTests.MakeInterpreterValue; [ OK ] TClingTests.MakeInterpreterValue (2 ms); [ RUN ] TClingTests.GetClassSharedLibs; [ OK ] TClingTests.GetClassSharedLibs (0 ms); [ RUN ] TClingTests.GetSharedLibDeps; [ OK ] TClingTests.GetSharedLibDeps (722 ms); [ RUN ] TClingTests.ClingLookupHelper; [ OK ] TClingTests.ClingLookupHelper (985 ms); [ RUN ] TClingTests.ROOT10499; [ OK ] TClingTests.ROOT10499 (5 ms); [----------] 9 tests from TClingTests (7180 ms total); [----------] 15 tests from TClingCallFunc; [ RUN ] TClingCallFunc.Void; [ OK ] TClingCallFunc.Void (1 ms); [ RUN ] TClingCallFunc.Conversions; [ OK ] TClingCallFunc.Conversions (2 ms); [ RUN ] TClingCallFunc.FunctionWrapper; [ OK ] TClingCallFunc.FunctionWrapper (1 ms); [ RUN ] TClingCallFunc.FunctionWrapperPointer; [ OK ] TClingCallFunc.FunctionWrapperPointer (0 ms); [ RUN ] TClingCallFunc.Fu,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14512:81,test,test,81,https://root.cern,https://github.com/root-project/root/issues/14512,10,"['Test', 'test']","['Test', 'test', 'test-TClingTest', 'tests']"
Testability,### Check duplicate issues. - [X] Checked for duplicates. ### Description. After updating from gcc 13.2.1 to gcc 14.1.1 I get several compile errors starting with e.g.; ```; While building module 'Core':; While building module 'std' imported from input_line_1:1:; In file included from <module-includes>:10:; In file included from /usr/include/c++/14.1.1/chrono:49:; In file included from /usr/include/c++/14.1.1/bits/shared_ptr.h:53:; In file included from /usr/include/c++/14.1.1/bits/shared_ptr_base.h:66:; /usr/include/c++/14.1.1/bits/align.h:93:21: error: call to 'has_single_bit' is ambiguous; static_assert(std::has_single_bit(_Align));; ^~~~~~~~~~~~~~~~~~~; /usr/include/c++/14.1.1/bit:439:5: note: candidate function [with _Tp = unsigned long]; has_single_bit(_Tp __x) noexcept; ^; ```; The full log is ; [install.txt](https://github.com/root-project/root/files/15391030/install.txt). ### Reproducer. ```bash; git clone https://github.com/root-project/root.git; cd root/; git checkout v6-30-06; mkdir build install; cd build; cmake -DCMAKE_INSTALL_PREFIX=../install -DCMAKE_CXX_STANDARD=20 ../; cmake --build . --target install -j 12 &> install.txt; ```. ### ROOT version. v6-30-06. ### Installation method. from source. ### Operating system. Linux (arch linux). ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15585:805,log,log,805,https://root.cern,https://github.com/root-project/root/issues/15585,1,['log'],['log']
Testability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. As of https://github.com/root-project/root/commit/e9d264eb545be5f7c3df9733fe8adb9d4dac1163, building ROOT inside a docker container for arm64 architectures on a x86_64 host system using qemu emulation fails on the hsimple.C test:; ```; Consolidate compiler generated dependencies of target GeomBuilder; make[2]: Entering directory '/mnt/root-build-ubuntu'; make[2]: Leaving directory '/mnt/root-build-ubuntu'; [100%] Generating etc/allDict.cxx.pch; make[2]: Entering directory '/mnt/root-build-ubuntu'; [100%] Linking CXX shared library ../../lib/libGeomBuilder.so. Generating PCH for core core/clingutils core/imt core/multiproc core/rint core/thread graf2d/gpad graf2d/graf graf2d/postscript graf3d/g3d gui/fitpanel gui/gui hist/hist hist/histpainter io/io math/genvector math/mathcore math/matrix math/minuit math/physics math/smatrix math/vecops net/net tree/tree tree/treeplayer tree/treeviewer. make[2]: Leaving directory '/mnt/root-build-ubuntu'; [100%] Built target GeomBuilder; make[2]: Leaving directory '/mnt/root-build-ubuntu'; [100%] Built target onepcm; make[2]: Entering directory '/mnt/root-build-ubuntu'; make[2]: Leaving directory '/mnt/root-build-ubuntu'; make[2]: Entering directory '/mnt/root-build-ubuntu'; [100%] Generating tutorials/hsimple.root. Processing hsimple.C... *** Break *** segmentation violation; Generating stack trace...; 0x000000550424be2c in <unknown> from /mnt/root-build-ubuntu/lib/libCling.so; 0x000000550424c598 in <unknown> from /mnt/root-build-ubuntu/lib/libCling.so; 0x000000550432bef4 in <unknown> from /mnt/root-build-ubuntu/lib/libCling.so; 0x0000005504338200 in <unknown> from /mnt/root-build-ubuntu/lib/libCling.so; 0x000000550433a1d4 in <unknown> from /mnt/root-build-ubuntu/lib/libCling.so; 0x00000055043253ec in <unknown> from /mnt/root-build-ubuntu/lib/libCling.so; 0x000000550415c38c in <unknown> from /mnt/root-build-ubuntu/lib/libCling.so; 0x0000005504174cf4 in TClin",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13845:299,test,test,299,https://root.cern,https://github.com/root-project/root/issues/13845,1,['test'],['test']
Testability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. As per the title, `TBranch::GetBulkEntries` does not work for variable-sized arrays, while it works for static-sized arrays and scalars. ### Reproducer. ```cpp; #include <ROOT/RDataFrame.hxx>; #include <ROOT/RVec.hxx>; #include <TBufferFile.h>; #include <TFile.h>; #include <TTree.h>. void FillTree(const char *filename, const char *treeName) {; TFile f(filename, ""recreate"");; TTree t(treeName, treeName);; int n = 2;; double *x = new double[2];; x[0] = 42;; x[1] = 84;; t.Branch(""n"", &n);; t.Branch(""x"", x, ""x[n]/D"");; t.Fill();; t.Write();; f.Close();; }. int main() {; auto filename = ""repro_getbulkread.root"";; auto treename = ""t"";; FillTree(filename, treename);. TFile f(filename);; auto *t = f.Get<TTree>(treename);. t->Scan();; ; auto *b = t->GetBranch(""x"");; TBufferFile buf(TBuffer::kWrite, 10000);; const auto n = b->GetBulkRead().GetBulkEntries(0, buf);; assert(n == 1);; }; ```. ### ROOT version. 6.29. ### Installation method. any. ### Operating system. any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13239:942,assert,assert,942,https://root.cern,https://github.com/root-project/root/issues/13239,1,['assert'],['assert']
Testability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. As requested by @Axel-Naumann in #13130 this is a follow up of [my note there](https://github.com/root-project/root/issues/13130#issuecomment-1798152115). Basically I recently built and linked to ROOT in an external project (in a Docker image) and I got all unit tests failing because of a memory leak detected by the address sanitiser. As ROOT was set up using CMake via; ```; cmake -DCMAKE_INSTALL_PREFIX=../root_install ../root_src -Dxrootd=OFF; ```; the backtrace reported in my previous note was pretty small. Hence, I tried to compile ROOT as; ```; cmake -DCMAKE_INSTALL_PREFIX=../root_install ../root_src -Dxrootd=OFF -Dasan=ON; ```; but this failed with [this output](https://github.com/root-project/root/files/13353729/ROOT_failed_build.txt). Then I tried to make a minimal build via; ```; cmake -DCMAKE_INSTALL_PREFIX=../root_install ../root_src -Dxrootd=OFF -Dasan=ON -Dminimal=ON; ```; and this succeeded and I got my Docker image built. Inside it the tests of my application were still failing as expected, but this time the backtrace was way larger. In [this file](https://github.com/root-project/root/files/13353730/ROOT_backtrace_leak.txt) you find it all. ### Reproducer. As the build fails because of a leak, I am pretty much expecting that the two issues are related and I did not invest more time in building up a MWE to reproduce the second issue. However, I would naively guess that linking to the build library in any executable with the address sanitiser on would make it. ### ROOT version. In the Docker container in the minimal build ROOT binary folder, I get:; ```; root@fc0d5912f35b:/SMASH/root_install/bin# ./root.exe -b -q; ------------------------------------------------------------------; | Welcome to ROOT 6.28/06 https://root.cern |; | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on Aug 28 2023, 11:29:15 |; | From tags/v6-28-06@v6-28-06 |; ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14055:338,test,tests,338,https://root.cern,https://github.com/root-project/root/issues/14055,1,['test'],['tests']
Testability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. As seen in https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/190460/testReport/projectroot.roottest.root/hist/roottest_root_hist_h2root, `h2root` fails from time to time on Linux and always if the *march=native* option is active. ### Reproducer. ```; -- TEST COMMAND -- ; cd /home/sftnight/build/workspace/root-pullrequests-build/build/roottest/root/hist; /usr/bin/timeout -s USR2 270s h2root mb4i1.hbook; -- BEGIN TEST OUTPUT --. *** Break *** segmentation violation. ===========================================================; There was a crash.; This is the entire stack trace of all threads:; ===========================================================; #0 0x00007f55ea9f53ea in __GI___wait4 (pid=1686062, stat_loc=stat_loc; entry=0x7ffffe689758, options=options; entry=0, usage=usage; entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30; #1 0x00007f55ea9f53ab in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc; entry=0x7ffffe689758, options=options; entry=0) at ./posix/waitpid.c:38; #2 0x00007f55ea95bbdb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171; #3 0x00007f55eb242bc4 in TUnixSystem::StackTrace() () from /home/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.so.6.31; #4 0x00007f55eb23fef5 in TUnixSystem::DispatchSignals(ESignals) () from /home/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.so.6.31; #5 <signal handler called>; #6 0x0000556fff8ce440 in mzlink_ (); #7 0x0000556fff8be829 in hlimit_ (); #8 0x0000556fff8ad586 in main (); #9 0x00007f55ea934d90 in __libc_start_call_main (main=main; entry=0x556fff8ad4d0 <main>, argc=argc; entry=2, argv=argv; entry=0x7ffffe68cf78) at ../sysdeps/nptl/libc_start_call_main.h:58; #10 0x00007f55ea934e40 in __libc_start_main_impl (main=0x556fff8ad4d0 <main>, argc=2, argv=0x7ffffe68cf78, init=<optimized out>, fini=<optimized out>, rtld_fini=<optimized out>, stack_end=0x7fff",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14155:166,test,testReport,166,https://root.cern,https://github.com/root-project/root/issues/14155,3,"['TEST', 'test']","['TEST', 'testReport']"
Testability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. Building ROOT 6.28.06 from source with python 3.11 results in easily-trigger GC assertion errors for at least me and and other user (@clark2668, who ran into this issue and sought out help from me in debugging this), on two different platforms (me on F38, @clark2668 on some version of Ubuntu). . In particular, the following script fails from a fresh build. . ```; import ROOT; f = ROOT.TFile(""test.root"",""CREATE""); ; ```. with stack trace. ```; #6 0x00007fc00f3cf844 in __pthread_kill_implementation () from /lib64/libc.so.6; #7 0x00007fc00f37eabe in raise () from /lib64/libc.so.6; #8 0x00007fc00f36787f in abort () from /lib64/libc.so.6; #9 0x00007fc00f36779b in __assert_fail_base.cold () from /lib64/libc.so.6; #10 0x00007fc00f377147 in __assert_fail () from /lib64/libc.so.6; #11 0x00007fc00f7ed8f3 in subtype_traverse (self=0x7fbfe6b16be0, visit=0x7fc00f8df3c1 <visit_decref>, arg=0x7fbfe6b16be0) at Objects/typeobject.c:1210; #12 0x00007fc00f8ddad9 in subtract_refs (containers=containers; entry=0x7fc00fbd5768 <_PyRuntime+59656>) at Modules/gcmodule.c:478; #13 0x00007fc00f8dedfb in deduce_unreachable (base=base; entry=0x7fc00fbd5768 <_PyRuntime+59656>, unreachable=unreachable; entry=0x7ffcb1bbae50) at Modules/gcmodule.c:1100; #14 0x00007fc00f8df921 in gc_collect_main (tstate=tstate; entry=0x7fc00fbef818 <_PyRuntime+166328>, generation=generation; entry=2, n_collected=n_collected; entry=0x7ffcb1bbaea8, n_uncollectable=n_uncollectable; entry=0x7ffcb1bbaea0, nofail=nofail; entry=0) at Modules/gcmodule.c:1226; #15 0x00007fc00f8dfe5e in gc_collect_with_callback (tstate=tstate; entry=0x7fc00fbef818 <_PyRuntime+166328>, generation=generation; entry=2) at Modules/gcmodule.c:1400; #16 0x00007fc00f8e042f in PyGC_Collect () at Modules/gcmodule.c:2086; #17 0x00007fc00f8b893d in Py_FinalizeEx () at Python/pylifecycle.c:1830; #18 0x00007fc00f8dd981 in Py_RunMain () at Modules/main.c:682; #19 0x00007fc00f8dd9d4 in",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13694:155,assert,assertion,155,https://root.cern,https://github.com/root-project/root/issues/13694,2,"['assert', 'test']","['assertion', 'test']"
Testability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. Calling `ROOT::Experimental::RNTupleWriter::Recreate` with a path to a full disk results in an assert in RMiniFile.cxx about `fileStream` being bad. A more useful error message would be appreciated. ### Reproducer. Should happen anytime you write to a full disk. ### ROOT version. ------------------------------------------------------------------; | Welcome to ROOT 6.31/01 https://root.cern |; | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on Jan 21 2024, 23:43:23 |; | From heads/master@tags/v6-31-01 |; | With g++ (GCC) 12.3.1 20230527 |; | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------. ### Installation method. CMSSW release. ### Operating system. Linux alma 8. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14487:170,assert,assert,170,https://root.cern,https://github.com/root-project/root/issues/14487,1,['assert'],['assert']
Testability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. Constructing an RNTuple field with a CMSSW data format appears to be causing an assertion failure inside clang:; ```; root.exe: /data/cmsbld/jenkins/workspace/build-any-ib/w/BUILD/el8_amd64_gcc12/lcg/root/6.31.01-167ba8c8f4839ca54faaf182c09898b0/root-6.31.01/interpreter/llvm-project/clang/lib/Sema/SemaCXXScopeSpec.cpp:122: clang::DeclContext* clang::Sema::computeDeclContext(const clang::CXXScopeSpec&, bool): Assertion `!isSFINAEContext() && ""partial specialization scope specifier in SFINAE context?""' failed.; ```. ### Reproducer. ```bash; source ; pushd /cvmfs/cms-ib.cern.ch/sw/x86_64/nweek-02807/el8_amd64_gcc12/cms/cmssw/CMSSW_13_3_ROOT6_X_2023-10-18-2300; cmsenv; popd; root -l; ```; in the prompt,; ```cpp; auto model = ROOT::Experimental::RNTupleModel::Create();; auto field1 = model->MakeField<vector<edm::Ref<vector<TTTrack<edm::Ref<edm::DetSetVector<Phase2TrackerDigi>,Phase2TrackerDigi,edm::refhelper::FindForDetSetVector<Phase2TrackerDigi> > > > > >>(""test"");; ```. ### ROOT version. ```; ------------------------------------------------------------------; | Welcome to ROOT 6.31/01 https://root.cern |; | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on Oct 18 2023, 22:20:53 |; | From heads/master@tags/v6-31-01 |; | With g++ (GCC) 12.3.1 20230527 |; | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------; ```. ### Installation method. CMSSW IB. ### Operating system. EL8. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13913:155,assert,assertion,155,https://root.cern,https://github.com/root-project/root/issues/13913,3,"['Assert', 'assert', 'test']","['Assertion', 'assertion', 'test']"
Testability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. Currently, irrelevant value is returned if compressed size exceeds the range of int. ### Reproducer. ```; $ root --web=off -l -b -q ntpl_inspect_skim_compressed_size.C+ > ntpl_inspect_skim_compressed_size.log; ```; [ntpl_inspect_skim_compressed_size.C.txt](https://github.com/user-attachments/files/16393470/ntpl_inspect_skim_compressed_size.C.txt); [ntpl_inspect_skim_compressed_size.log](https://github.com/user-attachments/files/16393474/ntpl_inspect_skim_compressed_size.log); [ntpl_skim_compressed_size.root](https://cernbox.cern.ch/s/mbKHZOwZMEADWyq). ### ROOT version. ```; ------------------------------------------------------------------; | Welcome to ROOT 6.33.01 https://root.cern |; | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on Jul 19 2024, 22:56:36 |; | From heads/master@v6-31-01-2659-gd4c8fa6bab |; | With g++ (GCC) 13.1.0 |; | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------; ```. ### Installation method. build from source installation. ### Operating system. Red Hat Enterprise Linux release 9.4 (Plow). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16124:280,log,log,280,https://root.cern,https://github.com/root-project/root/issues/16124,3,['log'],['log']
Testability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. Dear experts,; since ROOT 6.30 I have encountered an issue when calling simple functions inside a `TTree::Scan`. For example, if I consider a function whose prototype is ; `int func(int a)`; and call it in a `TTree::Scan`; `t->Scan(""func(myBranch)"")`. it will always be called with 0 as argument. This happens also when passing a constant argument (`t->Scan(""func(2)"")`). This issue doesn't appear in root 6.28. Cheers,; Marino. ### Reproducer. To reproduce the bug just call the `test()` function in the following piece of code; ```; root[] .L filename.C; root[] test(); ```. If this macro is run with root 6.28, the `cout` in `testfunc` will correctly print the values of the branches and `testfunc` column in the Scan will show the correct output of the formula `a+b*c`. When run with ROOT 6.30, the `cout` will print `0 0 0` and the `testfunc` column will always be 0. ```; #include <iostream>; #include <string>; #include <TFile.h>; #include <TTree.h>. using namespace std;. float testfunc(int a, int b, float c); {; cout << a << "" "" << b << "" "" << c << endl;; return a + b * c;; }. void createTree(const string &filename); {; cout << ""Creating tree in file "" << filename << endl;; TFile *f = TFile::Open(filename.c_str(), ""RECREATE"");; TTree *t = new TTree(""t"", ""t"");; int a;; int b;; float c;; t->Branch(""a"", &a, ""a/I"");; t->Branch(""b"", &b, ""b/I"");; t->Branch(""c"", &c, ""c/F"");; for (int i = 0; i < 10; ++i); {; a = i;; b = i + 1;; c = i + 2;; t->Fill();; }; t->Write();; f->Close();; cout << ""Tree created"" << endl;; }. void runExampleScan(const string &filename); {; cout << ""Running example scan"" << endl;; TFile *f = TFile::Open(filename.c_str());; TTree *t = (TTree *)f->Get(""t"");; t->Scan(""a:b:c:testfunc(a,b,c)"", """", ""colsize=20"");; delete t;; delete f;; }. void runExampleDraw(const string &filename); {; gROOT->SetBatch();; TCanvas *c = new TCanvas(""c"", ""c"", 800, 600);; cout << ""Running example draw"" << endl;;",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14405:556,test,test,556,https://root.cern,https://github.com/root-project/root/issues/14405,5,['test'],"['test', 'testfunc']"
Testability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. Downstream bug report: https://bugzilla.redhat.com/show_bug.cgi?id=2278644. root fails to build with Python 3.13.0a6.; 116 tests failed out of 1314, mostly with:. AttributeError: 'tuple' object attribute '__doc__' is read-only; AttributeError: Failed to get attribute RooRealVar from ROOT. https://docs.python.org/3.13/whatsnew/3.13.html. For all our attempts to build root with Python 3.13, see:; https://copr.fedorainfracloud.org/coprs/g/python/python3.13/package/root/. Testing and mass rebuild of packages is happening in copr.; You can follow these instructions to test locally in mock if your package builds with Python 3.13:; https://copr.fedorainfracloud.org/coprs/g/python/python3.13/. ### Reproducer. Instructions for reproducing the build in a local mock is provided by the page linked from the downstream bug report:; https://copr.fedorainfracloud.org/coprs/g/python/python3.13/. ### ROOT version. 6.30.06. ### Installation method. Package build on Fedora rawhide from source with additional Python 3.13 packages. ### Operating system. Fedora rawhide. ### Additional context. Python 3.13 is planned to be included in Fedora 41.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15430:198,test,tests,198,https://root.cern,https://github.com/root-project/root/issues/15430,5,"['Test', 'mock', 'test']","['Testing', 'mock', 'test', 'tests']"
Testability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. Drawing a TEfficiency to a TCanvas then saving it to .C format does not produce a working macro. I have encountered two different issues:; - the line `eff->SetStatisticOption(0);` errors out with `error: cannot initialize a parameter of type 'TEfficiency::EStatOption' with an rvalue of type 'int'`; - Even if the issue is manually fixed in the macro, if one is using weighted entries, warnings like the following appears: ; ```; warning: implicit conversion from 'double' to 'Int_t' (aka 'int') changes value from 1.2 to 1; [-Wliteral-conversion]; test1->SetTotalEvents(1,1.2);`; ```. ### Reproducer. ```python; import ROOT; ROOT.gROOT.SetBatch(); cnv = ROOT.TCanvas(""c"", """", 0, 0, 800, 600); teff = ROOT.TEfficiency(""test"", """", 1, 0, 1); teff.FillWeighted(True, 1.2, 0); teff.Draw(); cnv.SaveAs(""teff_test.C""); ROOT.gROOT.ProcessLine("".x teff_test.C""). ofile = open('teff_test_2.C', 'w'); for line in open('teff_test.C').readlines():; if 'SetStatisticOption' in line:; continue; ofile.write(line). print(""Second try""); ROOT.gROOT.ProcessLine("".x teff_test_2.C""); ``` ; . ### ROOT version; ```; ------------------------------------------------------------------; | Welcome to ROOT 6.30/02 https://root.cern |; | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on Jan 25 2024, 20:04:04 |; | From heads/master@tags/v6-30-02 |; | With c++ (GCC) 13.2.1 20230801 |; | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------; ```. ### Installation method. pacman package, root-6.30.02-2. ### Operating system. Arch linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14801:794,test,test,794,https://root.cern,https://github.com/root-project/root/issues/14801,1,['test'],['test']
Testability,### Check duplicate issues. - [X] Checked for duplicates. ### Description. During https://github.com/root-project/root/pull/14669 a new test was added which tests `std::set` in PyROOT. This exposed an issue where creating a set in PyROOT on the windows builds fails. A conditional windows test skip was added in `bindings/pyroot/pythonizations/test/CMakeLists.txt` to fix this (where the `stl_set.py` is added). Whenever this issue is resolved this test skip should also be removed. - [ ] Remove windows test skip for `stl_set.py`. ### Reproducer. `s = ROOT.std.set['int']()` (in windows). ### ROOT version. 6.31/01 (dev). ### Installation method. Build from source. ### Operating system. Windows. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14710:136,test,test,136,https://root.cern,https://github.com/root-project/root/issues/14710,6,['test'],"['test', 'tests']"
Testability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. Ever since integrating with ROOT, my cmake project cannot find a dependency using `find_package()`. It seems that `ROOTConfig.cmake` [reconfigures](https://github.com/root-project/root/blob/v6-32-00/cmake/scripts/ROOTConfig.cmake.in#L148) the value of `CMAKE_FIND_LIBRARY_PREFIXES` in order to find ROOT libraries with the `lib` prefix. However, the original value is never put back. Later on, this breaks e.g. `find_library(ZLIB)`, which relies on the existence of a file called `zlib.lib` (not `libzlib.lib`). This was discussed in [another issue](https://github.com/microsoft/vcpkg/issues/39099). ### Reproducer. 1. Create a hello world C++ project with cmake build system.; 2. Add dependency on ROOT using `find_package(ROOT CONFIG REQUIRED)`.; 3. Add dependency on ZLIB using `find_package(ZLIB REQUIRED)`.; 4. Attempt to configure the project with cmake. Expected result: the project configures successfully and can be built.; Actual result: the configuration fails, see [the issue referenced earlier](https://github.com/microsoft/vcpkg/issues/39099) for detailed logs. ### ROOT version. My build environment uses ROOT v6.26.10, but I confirmed that the bug is present in v6.32.00 as well. ### Installation method. pre-built binary. ### Operating system. Windows. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15727:1145,log,logs,1145,https://root.cern,https://github.com/root-project/root/issues/15727,1,['log'],['logs']
Testability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. Fedora 40 updated gcc to version 14. After this. the test gtest-math-matrix-test-testMatrixTSparse started failing on aarch64, ppc64le and s390x. The test still succeeds on ix86 and x86_64. The test failure:. ```; Start 207: gtest-math-matrix-test-testMatrixTSparse; 243/1265 Test #207: gtest-math-matrix-test-testMatrixTSparse ..................................***Failed 0.03 sec; Running main() from /builddir/build/BUILD/googletest-1.14.0/googletest/src/gtest_main.cc; Note: Google Test filter = -RCsvDS.Remote:RRawFile.Remote:RSqliteDS.Davix:TChainParsing.RemoteGlob:TFile.ReadWithoutGlobalRegistrationNet:TFile.ReadWithoutGlobalRegistrationWeb:RNTuple.TClassEBO; [==========] Running 1 test from 1 test suite.; [----------] Global test environment set-up.; [----------] 1 test from testSparse; [ RUN ] testSparse.LwbInit; /builddir/build/BUILD/root-6.30.02/math/matrix/test/testMatrixTSparse.cxx:47: Failure; Expected equality of these values:; m1; Which is: 80-byte object <00-00 02-AA 28-E9 07-70 00-00 00-00 02-00 00-00 00-00 00-04 00-00 00-05 00-00 00-01 00-00 00-00 00-00 00-14 00-00 00-05 3C-B0 00-00 00-00 00-00 01-00 03-FF 87-BA DF-98 00-00 02-AA 29-1E 84-50 00-00 02-AA 29-1E 65-B0 00-00 02-AA 29-1E 7F-00>; m2; Which is: 264-byte object <00-00 02-AA 28-E9 04-58 00-00 00-00 02-00 00-00 00-00 00-04 00-00 00-05 00-00 00-01 00-00 00-00 00-00 00-14 00-00 00-00 3C-B0 00-00 00-00 00-00 01-22 00-C0 4C-E7 2C-66 40-09 21-FB 54-44 2D-18 ... 40-34 B8-A1 9E-49 B7-53 40-37 70-82 EF-AC 42-40 00-00 02-AA 29-1E 83-A0 00-00 03-FF 87-BA DF-98 00-00 03-FF 87-86 06-68 00-00 03-FF 87-85 04-16 00-00 03-FF EE-2F 6B-28 00-00 03-FF EE-2F 6A-E0>; [ FAILED ] testSparse.LwbInit (0 ms); [----------] 1 test from testSparse (0 ms total); [----------] Global test environment tear-down; [==========] 1 test from 1 test suite ran. (0 ms total); [ PASSED ] 0 tests.; [ FAILED ] 1 test, listed below:; [ FAILED ] testSparse.LwbInit; 1 FA",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14446:128,test,test,128,https://root.cern,https://github.com/root-project/root/issues/14446,16,"['Test', 'test']","['Test', 'test', 'test-testMatrixTSparse', 'testMatrixTSparse', 'testSparse']"
Testability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. Firstly, I realize that root 5.x is now ancient and there may be little anyone can/wants to do about this. But for the record.. NixOS now builds all packages with [`-D_FORTIFY_SOURCE=3`](https://developers.redhat.com/articles/2022/09/17/gccs-new-fortification-level), and this has caused the build for our `root5` package to fail with `*** buffer overflow detected ***: terminated`. This is around the section where `loadfile.cxx` is being built and the compiler's static checks are complaining extensively about e.g. `'__builtin___snprintf_chk' output 8 or more bytes (assuming 1054) into a destination of size 1024`. For a full build log see https://hydra.nixos.org/log/m5px209xi7xr4iinwsgjjf01xxlwsq9g-root-5.34.38.drv (mirrored https://gist.github.com/risicle/d2118ace061c90f8eca3d4c366a93434). ### Reproducer. Build on linux with `-D_FORTIFY_SOURCE=3`?. This is with gcc12 & glibc 2.37. ### ROOT version. 5.34.38 + 348f30a6a3b5905ef734a7bd318bc0ee8bca6dc9 (""gcc9 fix"") + 3c243b18768d3c3501faf3ca4e4acfc071021350 (""gcc10 fix"") + c75458024082de0cc35b45505c652b8460a9e71b (""python 3.7 fix""). ### Installation method. NixOS package. ### Operating system. NixOS Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13216:711,log,log,711,https://root.cern,https://github.com/root-project/root/issues/13216,2,['log'],['log']
Testability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. FreeBSD for some reason prints a warning (to stderr) when doing cleanup at exit, so root always prints the following out after exit:. __cxa_thread_call_dtors: dtr 0x82b2c78f0 from unloaded dso, skipping. so it confuses those tests which compare output to some reference output.; I have patched my libc (lib/libc/stdlib/cxa_thread_atexit_impl.c) to not print this out (which fixes those tests) but that is not a generic way to go:). It would be good to have a look whether this can be somehow handled more gracefully in root internals (or possibly ignore stderr in tests?). ### Reproducer. ctest -V -R roottest-root-meta-MakeProject-examples. ### ROOT version. master. ### Installation method. source. ### Operating system. FreeBSD13.2p1. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13172:300,test,tests,300,https://root.cern,https://github.com/root-project/root/issues/13172,3,['test'],['tests']
Testability,### Check duplicate issues. - [X] Checked for duplicates. ### Description. FreeBSD installs bash in /usr/local/bin; failing test can be fixed e.g. by either using `#!/bin/sh` (I think that might work most of the time as I have not seen too many bashisms there) or `#!/usr/bin/env bash` which should be pretty generic (and works at least on linux as well).; What would be the preference?. ### Reproducer. ctest. ### ROOT version. master. ### Installation method. source. ### Operating system. freeBSD 13.2p1. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13174:124,test,test,124,https://root.cern,https://github.com/root-project/root/issues/13174,1,['test'],['test']
Testability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. Hello all,; It seems there is a bug in the TAxis::FindBin (Double_t x) method. When the joint script is executed, one can see that the bin number returned from ax->FindBin (ax->GetBinLowEdge (i)) is not always i as expected. When looking at the code of TAxis::FindBin ([ROOT: hist/hist/src/TAxis.cxx Source File](https://root.cern/doc/v628/TAxis_8cxx_source.html#l00293) line 314), the formula used to compute the bin number is subject to rounding errors. It should be corrected as propose in the joint script. Daniel CUSSOL. ### Reproducer. File TAxisBug.C. ```; #include ""TAxis.h""; #include ""Riostream.h""; #include ""TROOT.h"". Int_t GetRightBin (TAxis *ax, Double_t x); {; //; // Get correct bin number from x value for TAxis ax; // ; Int_t retVal = 1+Int_t(ax->GetNbins()*(x-ax->GetXmin())/(ax->GetXmax()-ax->GetXmin()) + 0.5);; return retVal;; }. void TAxisBug (Int_t nBins = 30, Double_t xMin=3.0, Double_t xMax=6.0); {; //; // Test TAxis bug ; // ; TAxis *ax=new TAxis (nBins, xMin, xMax);; cout << ""Root version : "" << gROOT->GetVersion() << endl; ; for (Int_t i=1;i<=ax->GetNbins();i++); {; cout << i << "" => "" << ax->FindBin (ax->GetBinLowEdge (i)) ; << "" : "" << ; GetRightBin (ax, ax->GetBinLowEdge (i)); ; if (i != ax->FindBin (ax->GetBinLowEdge (i))); {; cout << "" <= Bug!!! "";; }; cout << endl;; }; cout << endl;; }. ```. root TAxisBug.C+. ### ROOT version. from ROOT v6.24.00. ### Installation method. pre-built and binaries. ### Operating system. Ubuntu 22.04.3 LTS (Jammy Jellyfish). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14091:1007,Test,Test,1007,https://root.cern,https://github.com/root-project/root/issues/14091,1,['Test'],['Test']
Testability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. Hello! Sorry for the newbie issue, but I can't seem to work around it...!; After upgrading from ubuntu 22 to ubuntu 23, my root stopped working. I would try to run my old macros and the system would always break (can't find those logs now, I'm sorry!). ### Reproducer. I was using the precompiled version and therefore I have uninstalled it and tried to reinstall it again. From the root webpage I was suggested to do so via snap. I managed to install it and in the end, when I oppened a session and tried new TBrowser() to check some hists and if everything was according to how it was previously, I got this as header of the break:. ```; cling::DynamicLibraryManager::loadLibrary(): libAfterImage.so.0: cannot open shared object file: No such file or directory; Error in <TInterpreter::TCling::AutoLoad>: failure loading library libASImage.so for TASImage; cling::DynamicLibraryManager::loadLibrary(): libAfterImage.so.0: cannot open shared object file: No such file or directory; Error in <TGVSplitter::TGVSplitter>: splitterv.xpm not found; Error in <TGHSplitter::TGHSplitter>: splitterh.xpm not found; Error in <TGComboBox::TGComboBox>: arrow_down.xpm not found; Error in <TGVScrollBar::TGVScrollBar>: arrow_*.xpm not found; ```. I proceeded to uninstall it and try to build it on my own.; I followed the instructions on this webpage https://root.cern/install/build_from_source/ after checking all the dependencies. When I made the first cmake I got some things that it couldn't find which would give the following lines on terminal. ```; Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY) (Required is at least version ""0.4""); -- VDT not found. Ensure that the installation of VDT is in the CMAKE_PREFIX_PATH; ```; The things it couldn't find were:; ```; PCRE; xxHash; ZSTD; GIF; TIFF; JPEG; GLEW; gl2ps; LibXml2; MySQL; PostgreSQL; Sqlite; CFITSIO; XROOTD; FTGL; LibXml2; TBB; Vdt; OCaml; ```; Then I got the fol",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14479:305,log,logs,305,https://root.cern,https://github.com/root-project/root/issues/14479,1,['log'],['logs']
Testability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. Hello,. Since we moved to TCMalloc (instead of JeMalloc) for `cmsRun` we have seen some failures in `TROOT::EndOfProcessCleanups` upon destruction of `TString` (and some other destructors) affecting CMSSW ROOT6 (version `6.29.01`) and ROOT628 (version `6.28.05`) IBs (`el8_amd64_gcc11`). We reported the issue in the cmssw repo at [#42468](https://github.com/cms-sw/cmssw/issues/42468). ### Reproducer. The errors can be reproduced on lxplus as follows:; ```; lxplus816:~> cmssw-el8; Singularity> cd /cvmfs/cms-ib.cern.ch/week1/el8_amd64_gcc11/cms/cmssw/CMSSW_13_3_ROOT6_X_2023-08-07-2300/src/; Singularity> cmsenv; Singularity> cd /tmp/avalenzu/; Singularity> cmsRun /cvmfs/cms-ib.cern.ch/week1/el8_amd64_gcc11/cms/cmssw/CMSSW_13_3_ROOT6_X_2023-08-07-2300/src/Alignment/OfflineValidation/test/inspectData_cfg.py unitTest=True trackCollection=ALCARECOTkAlCosmicsCTF0T; ``` . And for gdb:; ```; Singularity> gdb cmsRun; (gdb) run /cvmfs/cms-ib.cern.ch/week1/el8_amd64_gcc11/cms/cmssw/CMSSW_13_3_ROOT6_X_2023-08-07-2300/src/Alignment/OfflineValidation/test/inspectData_cfg.py unitTest=True trackCollection=ALCARECOTkAlCosmicsCTF0T; ```. A sample stacktrace upon destruction of the `TString`:; ```; Thread 1 (Thread 0x7ffff413fc80 (LWP 3407688) ""cmsRun""):; #0 tcmalloc::SLL_PopRange (end=<synthetic pointer>, start=<synthetic pointer>, N=32, head=0x45a0a0) at src/linked_list.h:88; #1 tcmalloc::SLL_PopRange (end=<synthetic pointer>, start=<synthetic pointer>, N=32, head=0x45a0a0) at src/linked_list.h:79; #2 tcmalloc::ThreadCache::FreeList::PopRange (end=<synthetic pointer>, start=<synthetic pointer>, N=32, this=0x45a0a0) at src/thread_cache.h:238; #3 tcmalloc::ThreadCache::ReleaseToCentralCache (this=this@entry=0x45a040, src=src@entry=0x45a0a0, cl=<optimized out>, N=N@entry=32) at src/thread_cache.cc:206; #4 0x00007ffff57dff2c in tcmalloc::ThreadCache::ListTooLong (this=0x45a040, list=0x45a0a0, cl=<optimized out>) at s",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13429:864,test,test,864,https://root.cern,https://github.com/root-project/root/issues/13429,1,['test'],['test']
Testability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. Hi, I use Spack to evaluate Fujitsu compilers for Fugaku and FX1000.; When I tried to install this application on spack with the ""--test=root"" option(unit tests), I got the following error:. ```; /fefs/spack2/tmp/spack-stage/spack-stage-root-6.30.02-ifueiwdgknhz2zyg3olctrljdchct3mv/spack-src/tree/dataframe/test/dataframe_datasetspec.cxx:15:10: fatal error: nlohmann/json.hpp: No such file or directory; 15 | #include <nlohmann/json.hpp>; | ^~~~~~~~~~~~~~~~~~~; compilation terminated.; make[2]: *** [tree/dataframe/test/CMakeFiles/dataframe_datasetspec.dir/build.make:79: tree/dataframe/test/CMakeFiles/dataframe_datasetspec.dir/dataframe_datasetspec.cxx.o] Error 1; make[2]: Leaving directory '/fefs/spack2/tmp/spack-stage/spack-stage-root-6.30.02-ifueiwdgknhz2zyg3olctrljdchct3mv/spack-build-ifueiwd'; make[1]: *** [CMakeFiles/Makefile2:51492: tree/dataframe/test/CMakeFiles/dataframe_datasetspec.dir/all] Error 2; make[1]: Leaving directory '/fefs/spack2/tmp/spack-stage/spack-stage-root-6.30.02-ifueiwdgknhz2zyg3olctrljdchct3mv/spack-build-ifueiwd'; make: *** [Makefile:169: all] Error 2; ```. Attached build log.; [spack-build-out_root.txt](https://github.com/root-project/root/files/14339928/spack-build-out_root.txt). ### Reproducer. ``` ; $ spack install --test=root root@6.30.02%gcc@12.2.0; ```. ### ROOT version. [v6-30-02](https://github.com/root-project/root/releases/tag/v6-30-02). ### Installation method. Spack package manager. ### Operating system. Linux(RHEL 8.8,aarch64). ### Additional context. There is another problem when using Spack. ; Please check the issue of spack.; [Installation issue: root@6.30.02 fails to build with --test=root option #42720](https://github.com/spack/spack/issues/42720)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14769:207,test,test,207,https://root.cern,https://github.com/root-project/root/issues/14769,9,"['log', 'test']","['log', 'test', 'tests']"
Testability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. Hi, the documentation for `getPropagatedError` contains a mistake in the definition of the error propagation formula as far as I can tell. In the current definition of the master version, the calculation uses the covariance matrix, but defines a function `F` to not be a slope to approximate a derivative, but instead the average variation of `f`. When using the covariance matrix, the definition of `F` should include a `da` in the denominator. Alternatively, the definition of the propagation should use the correlation matrix with `F` unchanged. The same version of the formula is used in the 6.24 docs. The 6.22 docs contain a version that uses the correlation matrix (with `F` unchanged), but misses a square on the uncertainty (this was since fixed). I could be wrong in my math of course, so please ensure I am not misunderstanding something here. master: https://root.cern.ch/doc/master/classRooAbsReal.html#a4d7678837410aabcd93e6f0937de525b (uses covariance); 6.24: https://root.cern.ch/doc/v624/classRooAbsReal.html#a8ea9118e0ca9578fee21443e919fa3c0 (uses covariance); 6.22: https://root.cern.ch/doc/v622/classRooAbsReal.html#a8ea9118e0ca9578fee21443e919fa3c0 (uses correlation). In addition to this, the formula rendering is broken for me for this function in 6.22+ documentation (MacOS, tested on Firefox/Safari/Chrome). ![Screenshot 2023-08-04 at 17 20 58](https://github.com/root-project/root/assets/45009355/1f192cd6-1dee-4772-8b63-90b449a33acb). The changes track back to #6387 (https://github.com/root-project/root/pull/6387/files#diff-6933c2fd9e2c651fe82af05b368fd4a0c1bd32d965a24e523973ee6a0846f89d). cc @guitargeek @kratsg for prior related exchanges. ### Reproducer. n/a. ### ROOT version. n/a. ### Installation method. n/a. ### Operating system. MacOS. ### Additional context. n/a",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13404:1374,test,tested,1374,https://root.cern,https://github.com/root-project/root/issues/13404,1,['test'],['tested']
Testability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. Hi:; I build ROOT on Windows with msvc and with option /permissive-, it issues error like below, could you take a look at this issue, thanks.; `F:\gitP\root-project\root\tmva\tmva\inc\TMVA/RBatchGenerator.hxx(100,89): error C4576: a parenthesized type followed by an initializer list is a non-standard explicit type conversion syntax [F:\gitP\root-project\root\build_amd64\tmva\tmva\G__TMVA.vcxproj]`. **Workaround:**; If I remove the brackets around the `std::vector<std::size_t>` in the line: https://github.com/root-project/root/blob/master/tmva/tmva/inc/TMVA/RBatchGenerator.hxx#L100, error will disappear. ### Reproducer. Open a VS2022 x64 Native Tools command.; 1. git clone https://github.com/root-project/root F:\gitP\root-project\root; 2. git -C ""F:\gitP\root-project\root"" reset --hard 0d1f204109a31cc4884e9fd49519edf0fa2e4505; 3. mkdir F:\gitP\root-project\root\build_amd64 and cd F:\gitP\root-project\root\build_amd64; 4. python.exe -m pip install pytest ; 5. set _CL_=/permissive-; 6. cmake -G ""Visual Studio 17 2022"" -A x64 -DCMAKE_SYSTEM_VERSION=10.0.22621.0 -DCMAKE_BUILD_TYPE=Release -Droofit=off -Dtesting=ON -Droottest=ON ..; 7. msbuild /m /p:Platform=x64 /p:Configuration=Release ALL_BUILD.vcxproj /t:Rebuild. ### ROOT version. commit: 0d1f204109a31cc4884e9fd49519edf0fa2e4505. ### Installation method. build from source. ### Operating system. Windows. ### Additional context. [build.log](https://github.com/root-project/root/files/12300237/build.log)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13421:1479,log,log,1479,https://root.cern,https://github.com/root-project/root/issues/13421,2,['log'],['log']
Testability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. I played around with printing a canvas to pdf, using the EmbedFonts option or not. During EmbedFonts, where ghostcsript is called, it complaines about missing endobj in the pdf file. As far as i understand it is just a warning and the output still looks correct. . Still, no need for this warning. Why not just print the endobj? . Also: ghostscript option -dUseCIEColor is deprecated for gs > 9.11 One could remove this option in the print. Changes to the ROOT code: ; graf2d/postscript/src/TPDF.cxx:; Add `PrintStr(""endobj@"");` at the end of the `""/Title (Page""` blocks and the` ""/Title (Contents""` block. graf2d/gpad/src/TPad.cxx:; remove option `-dUseCIEColor` from the gs system call. After this two changes, everything is fine for me again. No more warnings. And output looks still the same. ### Reproducer. ROOT macro: (Macro.cpp); ```; {; TCanvas *c1=new TCanvas(""c1"",""c1"");; double *a=new double[3];; a[0]=1;a[1]=2;a[2]=3;; TGraph *g=new TGraph(3,a,a);; g->Draw();; c1->Print(""Test.pdf"",""EmbedFonts"");; }. ```; Run with: `root -l -b -q Macro.cpp`. ### ROOT version. ROOT version: 6.24/08. ### Installation method. yum. ### Operating system. CentOS7. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13560:1060,Test,Test,1060,https://root.cern,https://github.com/root-project/root/issues/13560,1,['Test'],['Test']
Testability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. If a class allocates memory in its ctor (and deallocates in dtor). And included in `LinkDef.h` without `+` after class name. During I/O, the ctor will be called but not the dtor. ### Reproducer. Please refer to this code: https://github.com/karuboniru/root_memory_leak_report. It compiles to `gen`, `read{,_old}`. `gen` produces a `.root` file containing a tree of user defined class `TestData`. And `read` `read_old` read the tree to do something. `read` uses RDataFrame language and `read_old` uses old `SetBranchAddress` way. In the constructor of TestData, it will allocate memory for class `a_member`. And deallocate it in its destructor. Any call to the constructor or destructor of class `a_member` will be logged. If `#pragma link C++ class TestData;`, instead of `#pragma link C++ class TestData+;` is in the `LinkDef.h`, the read program will contain multiple call to `a_member::a_member` but only single or none call to `a_member::~a_member`, potenially causing memory leak per entry processed. ### ROOT version. ```; ROOT v6.32.04; Built for linuxx8664gcc on Aug 21 2024, 00:00:00; From heads/master@tags/v6-32-04; With clang version 18.1.8 (Fedora 18.1.8-3.fc41); Binary directory: /usr/bin; ```. ### Installation method. reproducable from self build (from copr), from fedora repo (official version) and ROOT from `/cvmfs/sft.cern.ch/lcg/views/LCG_106/x86_64-el9-gcc13-opt/setup.sh`. ### Operating system. Linux Fedora 41 and CentOS9. ### Additional context. This issue seems to be causing massive memory leak with [GENIE](https://github.com/GENIE-MC/Generator/blob/37ed4484091904ab614b6dbc179d1b676b11a2e1/src/Framework/Ntuple/NtpMCEventRecord.h#L37). The GENIE related tools [manually cleans](https://github.com/GENIE-MC/Generator/blob/37ed4484091904ab614b6dbc179d1b676b11a2e1/src/Apps/gNtpConv.cxx#L1282) the resources but it seems I can't do the same with RDataFrame.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16375:460,Test,TestData,460,https://root.cern,https://github.com/root-project/root/issues/16375,5,"['Test', 'log']","['TestData', 'logged']"
Testability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. Importing the ROOT module and accessing anything inside it is enough to freeze the program.; All tests in the CI are failing because of this. ### Reproducer. ```python; import ROOT; ROOT.TH1F(); ```. ### ROOT version. master. ### Installation method. built from sources. ### Operating system. MacOS 12, x86 and ARM. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13769:172,test,tests,172,https://root.cern,https://github.com/root-project/root/issues/13769,1,['test'],['tests']
Testability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. In ATLAS we noticed a strange behavior of some of our python scripts after switching to the latest ROOT version. Importing ROOT seems to prevent proper garbage collection in Python, i.e. the class destructor `__del__` is not being called before the process exits. Reproducible with ROOT 6.32.00 to 6.32.04, i.e. the problem was introduced at some point after 6.30.08. Internal Jira issues: [ADHI-4985](https://its.cern.ch/jira/browse/ADHI-4985) [ATR-29707](https://its.cern.ch/jira/browse/ATR-29707) . ### Reproducer. On lxplus9 with ROOT 6.32.04 consider this python script (thanks to Wainer Vandelli):; ```python; import ROOT. class Test(object):; def __init__(self):; print('Init'); def __del__(self):; print('Del'). obj = Test(); ```; ```sh; > python3 --version; Python 3.9.18; > python3 test.py ; Init; > ; ```; Remove the `import ROOT` and the result is as expected:; ```sh; > python3 test.py; Init; Del; ```; Explicitly calling `del obj` can be used as a workaround but that's certainly not what the user expects having to do. ### ROOT version. ROOT 6.32.04. ### Installation method. cvmfs. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16402:710,Test,Test,710,https://root.cern,https://github.com/root-project/root/issues/16402,4,"['Test', 'test']","['Test', 'test']"
Testability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. In `tmva/tmva/inc/TMVA/RTensor.hxx`, line 217 and line 231.; With and empty vector, `vector::begin() == vector::end()` and one cannot dereference end(), [as explained in the standard](https://en.cppreference.com/w/cpp/container/vector/end):; > end() returns an iterator to the element following the last element of the vector. This element acts as a placeholder; attempting to access it results in undefined behavior.; A possible fix is in the PR #13322 . ### Reproducer. Run the TMVA tests in debug mode with /RTC1 flag on Windows. ### ROOT version. master. ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13498:560,test,tests,560,https://root.cern,https://github.com/root-project/root/issues/13498,1,['test'],['tests']
Testability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. In `tmva/tmva/src/MethodLD.cxx`, line 177 and line 202, at `std::vector<Float_t>::const_iterator it = ev->GetValues().begin()`, `it` is initialised to `GetValues().begin()` and is then compared by `!=` to `GetValues().end()`. But `getValue()` returns a vector by value, not by reference, so it returns a copy, which means that every time we call `getValue()`, we get a different vector, so we get incompatible iterators. For the compiler, this does not make any difference. Type safety does not help, two iterators which belong to different container instances have the same type, so the code compiles. At run time, however, additional checks are made to ensure that two iterators that are being compared really belong to the same container object. (As explained [here](https://stackoverflow.com/questions/32978410/debug-assertion-vector-iterators-incompatible-c)); A possible fix is in the PR #13321. ### Reproducer. Run the TMVA tests in debug mode with /RTC1 flag on Windows. ### ROOT version. master. ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13497:896,assert,assertion-vector-iterators-incompatible-c,896,https://root.cern,https://github.com/root-project/root/issues/13497,2,"['assert', 'test']","['assertion-vector-iterators-incompatible-c', 'tests']"
Testability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. It looks like we're leaking memory dynamically allocated through `std::string`, e.g., `std::string::reserve` and/or `std::string::append` etc. It seems to be reproducible via vanilla `cppyy` as shown below. Can someone take a look, please? Many thanks. cc: @scott-snyder . ### Reproducer. ```; import cppyy. cppyy.cppdef(""""""; #include <string>; class foo {; public:; const std::string leak (std::size_t size) const {; std::string result;; result.reserve(size);; return result;; }; };; """"""). obj = cppyy.gbl.foo(); for i in range(1000000):; s = obj.leak(2048); ```. ### ROOT version. Tested in both tags/v6-28-12@v6-28-12 and heads/master@v6-31-01-2207-gbeb5aead7a. ### Installation method. LCG_104d_ATLAS_15 and LCG dev3 nightly. ### Operating system. AlmaLinux release 9.4 (Shamrock Pampas Cat). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15703:658,Test,Tested,658,https://root.cern,https://github.com/root-project/root/issues/15703,1,['Test'],['Tested']
Testability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. It seems that when saving a canvas to a ROOT file (`SaveAs(""c.root"")`), colors defined with `TColor::GetColor` are not preserved whereas builtin colors are. This can be seen saving the canvas to both . png .root formats, then load the .root and save it again as a .png, and compare the two pngs created. . Tagging CMS CAT conveners @lenzip @anigamova and DPROC subconveners @oglez @ttedeschi . ### Reproducer. Define a save.C macro:; ```C++; {; TRandom3 r;; TH1F h = TH1F(""test"",""Test"",100,-1.0,1.0);; for (int i=0;i<=1000;++i) {; h.Fill(r.Rndm());; }. TCanvas c = TCanvas();; c.Draw();. h.SetFillStyle(1001);; h.SetFillColor(TColor::GetColor(""#F5BB54""));. //h.SetFillColor(kRed);; h.Draw(""HIST"");. c.SaveAs(""c.root"");; c.SaveAs(""c.png"");; }; ```; and a load.C macro:; ``` C++; {; TFile *f = new TFile(""c.root"");; TH1F *h1 = (TH1F*)f->Get(""c1"");; h1->Draw();; h1->SaveAs(""loaded_c.png""); }; ```. If `h.SetFillColor(TColor::GetColor(""#F5BB54""));` is uncommented and `h.SetFillColor(kRed)` is commented, `c.png` and `loaded_c.png` differ (the latter lacks the color), whereas if `h.SetFillColor(TColor::GetColor(""#F5BB54""))` is commented and `h.SetFillColor(kRed)` is uncommented, `c.png` and `loaded_c.png` are the same (both properly showing the red fill color). ### ROOT version. 6.32.04. ### Installation method. [Docker image](https://github.com/root-project/root-docker/blob/6.32.04-ubuntu24.04/ubuntu2404/Dockerfile). ### Operating system. Ubuntu 24.04⁠. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16560:548,test,test,548,https://root.cern,https://github.com/root-project/root/issues/16560,2,"['Test', 'test']","['Test', 'test']"
Testability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. On macOS 14, if you compile a library with ACLiC, it is not possible to load it in PyROOT with `gSystem.Load()` without loading `libRint` before. ### Reproducer. ```sh; # Creating a dummy library; echo ""void foo() {}"" > foo.C; root -l -b -q -e "".L foo.C+"". # With the ROOT interpreter, everything goes fine; root -l -b -q -e 'std::cout << gSystem->Load(""foo_C"") << std::endl;'. # Let's see with a compiled script; echo '#include <TSystem.h>; #include <iostream>; int main() { std::cout << gSystem->Load(""foo_C"") << std::endl; }' > main.cpp. g++ main.cpp $(root-config --cflags) -I $(root-config --incdir) -L $(root-config --libdir) -lCore -o main; ./main. # But with PyROOT, it doesn't work on macos 14 beta; python3 -c 'import ROOT; print(ROOT.gSystem.Load(""foo_C""))'. # With loading Rint before, it works!; python3 -c 'import ROOT; ROOT.gSystem.Load(""libRint""); print(ROOT.gSystem.Load(""foo_C""))'. ```; The Python version without loading libRint first is failing on macos 14 beta with the following error message:; ```txt; cling::DynamicLibraryManager::loadLibrary(): dlopen(/Users/sftnight/build/jenkins/night/LABEL/macbeta/SPEC/cxx20/V/master/build/roottest/python/pythonizations/foo_C.so, 0x0009): Library not loaded: @rpath/libRint.so; Referenced from: <3831F8AB-C7D6-3522-AF78-6E908F97B77A> /Users/sftnight/build/jenkins/night/LABEL/macbeta/SPEC/cxx20/V/master/build/roottest/python/pythonizations/foo_C.so; Reason: no LC_RPATH's found; -1; ```. ### ROOT version. ROOT `master`. ### Installation method. build from source. ### Operating system. macOS 14 (beta). ### Additional context. This problem makes several tests in the `macbeta` nighlies fail:; https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=macbeta,SPEC=cxx20,V=master/lastBuild/#showFailuresLink",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13734:1695,test,tests,1695,https://root.cern,https://github.com/root-project/root/issues/13734,1,['test'],['tests']
Testability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. On macOS, drawing a histogram leads to nasty and confusing printouts on screen. ### Reproducer. ```; -> root -l; root [0] TH1F h(""h"",""h"", 64, -4,4);; root [1] h.FillRandom(""gaus""); root [2] h.Draw(); Info in <TCanvas::MakeDefCanvas>: created default TCanvas with name c1; FALLBACK (log once): Fallback to SW vertex processing (lineMode && (localGroupInfo & GLRGroupInfoPrimitiveEmulatedFill)); FALLBACK (log once): Fallback to SW vertex processing, m_disable_code: 800; FALLBACK (log once): Fallback to SW vertex processing in drawCore, m_disable_code: 800; ```. ### ROOT version. master. ### Installation method. from sources. ### Operating system. MacOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15348:357,log,log,357,https://root.cern,https://github.com/root-project/root/issues/15348,3,['log'],['log']
Testability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. One of the overloads of the function abuses the logic of the class:. https://github.com/root-project/root/blob/224551cf3fc5bdc80b2693578d082eb9cb0e32a3/tmva/tmva/src/DataLoader.cxx#L126-L133. In this overload a `DatasetInfo` object is created on the heap (as a temporary). Then `DatasetManager::AddDatasetInfo` takes the input argument as l-value ref and finally stores the `DatasetInfo` object as a shallow-reference in the internal `TList` data member `fDataSetInfoCollection`. This data member is not owning, thus at destruction time it will not take care of deleting its items. . https://github.com/root-project/root/blob/224551cf3fc5bdc80b2693578d082eb9cb0e32a3/tmva/tmva/src/DataSetManager.cxx#L105-L113. At the same time, the `DataSetInfo` object was created with `new` but never deleted. This logic is faulty and is related to the following report by valgrind:. ```; ==290973== Conditional jump or move depends on uninitialised value(s); ==290973== at 0x2C720F3A: TMVA::DataLoader::AddTree(TTree*, TString const&, double, TCut const&, TMVA::Types::ETreeType) (DataLoader.cxx:360); ==290973== by 0x2C72113C: TMVA::DataLoader::AddSignalTree(TTree*, double, TMVA::Types::ETreeType) (DataLoader.cxx:373); ==290973== by 0x4F9573B: ???; ==290973== by 0x4F9107E: ???; ==290973== by 0x6EC8BCD: cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const (in /home/vpadulan/Programs/rootproject/rootbuild/fix-tutorial-tmva-cnn-classification-testing/lib/libCling.so); ==290973== by 0x6E4EA4E: cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) (in /home/vpadulan/Programs/rootproject/rootbuild/fix-tutorial-tmva-cnn-classification-testing/lib/libCling.so); ==290973== by 0x6E4F13C: cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned lo",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14433:123,log,logic,123,https://root.cern,https://github.com/root-project/root/issues/14433,2,['log'],['logic']
Testability,### Check duplicate issues. - [X] Checked for duplicates. ### Description. ROOT_HEAD failed in the nightlies in centos7 platfom; The reported error estracted from the[ log file ](http://cdash.cern.ch/upload/43670d452f7f3ef813ce655ef9357e62800d1e7a/ROOT-HEAD-configure.log)is:; gnu/11.3.0/../../../../include/c++/11.3.0/x86_64-pc-linux-gnu:/cvmfs/sft.cern.ch/lcg/releases/gcc/11.3.0-ad0f5/x86_64-centos7/bin/../lib/gcc/x86_64-pc-linux-gnu/11.3.0/../../../../include/c++/11.3.0/backward' at runtime.; -- And then fallback to: 'g++'; -- Performing Test CXX_HAS_fno_rtti; -- Performing Test CXX_HAS_fno_rtti - Success; -- Performing Test found_arc4; -- Performing Test found_arc4 - Failed; -- Performing Test found_arc4_bsd; -- Performing Test found_arc4_bsd - Failed; -- Performing Test found_getrandom; -- Performing Test found_getrandom - Failed; CMake Error at core/unix/CMakeLists.txt:42 (message):; Fail to detect cryptographic random generator. ### Reproducer. [lcg_nightly_pipeline](https://lcgapp-services.cern.ch/spi-jenkins/view/LCG%20Nightlies/job/lcg_nightly_pipeline/). ### ROOT version. master. ### Installation method. build from source. ### Operating system. centos7. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14958:168,log,log,168,https://root.cern,https://github.com/root-project/root/issues/14958,10,"['Test', 'log']","['Test', 'log']"
Testability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. Rootcling fails to load correctly std::filesystem::path. This is discussed in [this post](https://root-forum.cern.ch/t/rootcling-with-std-filesystem/55388), from which I am reproducing here the provided example. ### Reproducer. Create the following two files:. test.hh:; ```C++; #ifndef test_hh; #define test_hh; #include <iostream>; #include <filesystem>; namespace fs = std::filesystem;. class test; {; public:; test();; ~test();. private:; fs::path path;; };. #endif; ```. test.cpp:; ```C++; #include ""test.hh""; test::test(); {; std::cout << ""test constructor"" << std::endl;; this->path = ""."";; }. test::~test(); {; std::cout << ""test destructor"" << std::endl;; }; ```. Then load with ACLiC:; ```; $ root; ------------------------------------------------------------------; | Welcome to ROOT 6.28/06 https://root.cern |; | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |; | From tags/v6-28-06@v6-28-06 |; | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |; | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------. root [0] .L test.cpp+; Info in <TUnixSystem::ACLiC>: creating shared library /data/giraudpf/tmp/./test_cpp.so; input_line_11:6:22: error: '_List' is a private member of 'std::filesystem::path'; filesystem::path::_List::_Impl_deleter _1;; ^; /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here; struct _List; ^; input_line_11:7:22: error: '_List' is a private member of 'std::filesystem::path'; filesystem::path::_List::_Impl* _0;; ^; /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here; struct _List; ^; Error in <Load>: Could not declare TEmulatedTuple<filesystem::path::_List::_Impl*,filesystem::path::_List::_Impl_deleter>; ```. ### ROOT version. ```; ---------------------------------------------------------------",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13574:336,test,test,336,https://root.cern,https://github.com/root-project/root/issues/13574,12,['test'],['test']
Testability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. Since a few days, our GitHub Actions are failing when building ROOT via CMake. This is part of a SuperBuild with lots of other projects, and uses a parallel build. The problem is reproducible, i.e. all jobs fail at the same point. However, the failure depends on the ROOT version. When compiling v6-26-10, we get https://github.com/SyneRBI/SIRF-SuperBuild/issues/857; ```; CMake Error at /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/builds/ROOT/build/TBB-prefix/src/TBB-stamp/TBB-build-Release.cmake:49 (message):; Command failed: 2. 'make' 'compiler=gcc' 'cpp0x=1' 'CXXFLAGS= -mno-rtm' 'CPLUS=/usr/lib/ccache/g++-11' 'CONLY=/usr/lib/ccache/gcc-11' 'LDFLAGS='; See also; /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/builds/ROOT/build/TBB-prefix/src/TBB-stamp/TBB-build-*.log; ```; the log file says; ```; build/common.inc:48: ""Warning: deprecated cpp0x=1 is used, stdver must be used instead. Building in stdver=c++0x mode.""; ../../build/Makefile.tbb:28: CONFIG: cfg=debug arch=intel64 compiler=gcc target=linux runtime=cc11.4.0_libc2.35_kernel6.2.0; make[7]: *** read jobs pipe: Bad file descriptor. Stop.; make[7]: *** Waiting for unfinished jobs....; In file included from ../../src/tbb/concurrent_hash_map.cpp:17:; ../../include/tbb/concurrent_hash_map.h: In constructor ‘tbb::interface5::internal::hash_map_base::hash_map_base()’:; ../../include/tbb/concurrent_hash_map.h:131:24: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘struct tbb::interface5::internal::hash_map_base::bucket’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess]; 131 | std::memset(my_embedded_segment, 0, sizeof(my_embedded_segment));; | ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~; ../../include/tbb/concurrent_hash_map.h:93:16: note: ‘struct tbb::interface5::internal::hash_map_base::bucket’ declared here; 93 | struct bucket : tbb::internal::",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14520:868,log,log,868,https://root.cern,https://github.com/root-project/root/issues/14520,2,['log'],['log']
Testability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. Since yesterday, March 13 we observe errors in our tests using our installed nightly view.; And also on LXPLUS, see here for an error from our build system: https://lcgapp-services.cern.ch/cdash/testDetails.php?test=24046676&build=314678. ### Reproducer. On lxplus for example; ```; source /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/latest/x86_64-el9-gcc13-dbg/setup.sh; root; ```; gives; ```; <<< cling interactive line includer >>>: fatal error: module file '/build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT-HEAD-build/lib/Vc.pcm' not found: module file not found; <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Wed/ROOT/HEAD/x86_64-el9-gcc13-dbg/lib/MathCore.pcm'; Failed to load module MathCore; Failed to load module Hist; Failed to load module ROOTBrowsable; Failed to load module Unfold; Failed to load module RHTTPSniff; Failed to load module HistPainter; Failed to load module PyMVA; Failed to load module FitPanel; Failed to load module Unuran; Failed to load module Quadp; Failed to load module GeomPainter; Failed to load module Genetic; Failed to load module Eve; Failed to load module TreeViewer; Failed to load module Physics; Failed to load module ROOTTMVASofieParser; Failed to load module EG; Failed to load module Tree; Failed to load module HistFactory; Failed to load module Spectrum; Failed to load module Matrix; Failed to load module Html; Failed to load module Hist; Failed to load module GuiHtml; Failed to load module Gpad; Failed to load module TMVAGui; Failed to load module Postscript; Failed to load module ROOTEve; Failed to load module RGL; Failed to load module Fumili; Failed to load module Geom; Failed to load module RooFitMore; Failed to load module X3d; Failed to load module SPlot; Failed to load module Hbook; Failed to load module RooFit; Failed to load module RCsg; Fai",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14964:126,test,tests,126,https://root.cern,https://github.com/root-project/root/issues/14964,3,['test'],"['test', 'testDetails', 'tests']"
Testability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. Some classes/functions that call classes/functions from the ROOT.Internal namespace will be broken when it is accidentally overridden by the ROOT.Math.Internal. ### Reproducer. ```; import cppyy; import ROOT; Internal_0 = ROOT.Internal; declaration = \; """"""; using namespace ROOT::Math;; """"""; cppyy.cppdef(declaration); Internal_1 = ROOT.Internal; print(Internal_0, Internal_1); ```. We see that `Internal_0` belongs to `namespace cppyy.gbl.ROOT.Internal`, whereas `Internal_1` belongs to `namespace cppyy.gbl.ROOT.Math.Internal`. This has the undesirable side effect that some classes/functions will be broken:. ```; ROOT.RDataFrame(10).Define(""x"", ""1"").Snapshot(""test"", ""test.root""); ROOT.RDF.Experimental.Distributed.Dask.RDataFrame(""test"", ""test.root""); ```. which will give the error; ```; AttributeError: <namespace cppyy.gbl.ROOT.Math.Internal at 0x864b200> has no attribute 'TreeUtils'. Full details:; type object 'Internal' has no attribute 'TreeUtils'; 'ROOT::Math::Internal::TreeUtils' is not a known C++ class; 'TreeUtils' is not a known C++ template; 'TreeUtils' is not a known C++ enum. ```. A temporary fix will be to override ROOT.Internal withe the correct namespace after it is changed. I am wondering if there are being ways to make sure that the classes/functions from the correct namespace are being called (in PyROOT)?. ### ROOT version. 6.30/04. ### Installation method. LCG(Swan). ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15035:740,test,test,740,https://root.cern,https://github.com/root-project/root/issues/15035,4,['test'],['test']
Testability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. Sometiems I need to make a ""sum"" of two RooPlot objects. (results of fits for two samples).; Typically for this task I make a loop over RooPlot components and ""sum"" them manually.; To make a fum of two `RooHist` obejcs I rely on a costructor of `RooHist` from two `RooHist` objects.; I observed that sumamtion of two RooPlot object is broken for for ROOT 6.30/04 ( I use ROOT instalaltion ; from LCG cvmff build: /cvmfs/sft.cern.ch/lcg/views/LCG_105a_LHCB_7/; The sum of two histos is very different from expected. The script to preproduce the error is veyr trivial, but it shows no problems for all ""simple"" RooHist.; I've prepared a file with two `RooHist` objects in mu piblic AFS directory; ```; import ROOT. f = ROOT.TFile('/afs/cern.ch/user/i/ibelyaev/public/test.root','READ'); h1 = f.Get ( 'h1' ) ## RooHist ; h2 = f.Get ( 'h2' ) ## RooHist . ## it shoukd be the sum ; hs = ROOT.RooHist ( h1 , h2 ) . hs.Draw ('ap' ) ## draw the sum ; h1.Draw ('same') ## draw the first component ; h2.Draw ('same') ## draw the second component . h1.SetLineColor(2); h2.SetLineColor(4); ```. . ### Reproducer. The script to preproduce the error is veyr trivial, but it shows no problems for all ""simple"" RooHist.; I've prepared a file with two `RooHist` objects in mu piblic AFS directory; ```; import ROOT. f = ROOT.TFile('/afs/cern.ch/user/i/ibelyaev/public/test.root','READ'); h1 = f.Get ( 'h1' ) ## RooHist ; h2 = f.Get ( 'h2' ) ## RooHist . ## it shoukd be the sum ; hs = ROOT.RooHist ( h1 , h2 ) . hs.Draw ('ap' ) ## draw the sum ; h1.Draw ('same') ## draw the first component ; h2.Draw ('same') ## draw the second component . h1.SetLineColor(2); h2.SetLineColor(4); ```. . ### ROOT version. ROOT 6.30/04. ### Installation method. LCG cvmfs build: /cvmfs/sft.cern.ch/lcg/views/LCG_105a_LHCB_7/. ### Operating system. x86_64-el9-gcc13-opt. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15052:840,test,test,840,https://root.cern,https://github.com/root-project/root/issues/15052,2,['test'],['test']
Testability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. TCanvas is not displayed in Jupyter notebook on secondary cell executions **if `Print` method is used in the cell**. | **First time cell execution** | **Secondary cell executions (note the order execution number)**|; |-------------|--------------------; |![image](https://github.com/root-project/root/assets/44311461/1be434e1-f316-4045-8994-4c20138a1d09)|![image](https://github.com/root-project/root/assets/44311461/b7ea39c0-12b9-48df-ab34-af17c4a47491)|. See discussion here: https://github.com/root-project/root/issues/13631#issuecomment-1941706841. ### Reproducer. ```; c1 = ROOT.TCanvas(""c1"",""c1"",600,400); c1.Draw(). h1 = ROOT.TH1F(""h1"",""h1"",100,-10,10); h1.FillRandom(""gaus"",1000). c1.Print(""test.pdf""); ```. ### ROOT version. 6.30/02. ### Installation method. Arch linux package manager. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14689:774,test,test,774,https://root.cern,https://github.com/root-project/root/issues/14689,1,['test'],['test']
Testability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. TTreeProcessorMP process events multiple times when you read multiple files using TChain, and some of the files have fewer entries than there are threads. This has been observed using TChain and TSelector, but I haven't tried it out with any other methods of using TTreeProcessorMP. The attached reproducer minimally shows this bug by showing that the Process method is run more than it should be. Another observations that are not shown in the reproducer is that the additional events are repeats of existing events. In the code where I first observed this, we frequently have files where one thread is processing multiple events (5-10ish), and most of them are real events, with the last few being repeats. It also seems like it always tries to process at least 15 events for each file if you use 16 threads, even if those events don't exist; if there are more than 15 events than it seems to behave as expected. ### Reproducer. [mp_bug.zip](https://github.com/root-project/root/files/15226978/mp_bug.zip); Run:; ```; mkdir files; root FillRootFiles.C; root TestMP.C+; ```; This will create 100 root files with 1 entry each called `files/f_0###.root`. It will then use TTreeProcessorMP with 16 threads to read through the files and count the number of events read. This should be 100; instead it is 1500. ### ROOT version. v6.28/06 and 6.26/10. ### Installation method. Built from source. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15425:1135,Test,TestMP,1135,https://root.cern,https://github.com/root-project/root/issues/15425,1,['Test'],['TestMP']
Testability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. Take this CI run as an example. https://github.com/root-project/root/actions/runs/5546846102/jobs/10127673943?pr=13246. The PR it belongs to, https://github.com/root-project/root/pull/13246, makes some changes to `DistRDF` code that should immediately trigger an error in the tests. This is evident from jenkins runs of the same PR, e.g. https://github.com/root-project/root/pull/13246#issuecomment-1634733833 . Instead, the builds of the new CI state they are running the DistRDF tests and they also pass. ```; 2410/2429 Test #1573: roottest-python-distrdf-dask-test_all ............................................................. Passed 127.24 sec; ```. Which is evidently wrong. One possible reason behind this is that the new CI runs on incremental builds and it's possible that Python files are not properly copied over after the changes. ### Reproducer. See the description above. ### ROOT version. pull request. ### Installation method. CI. ### Operating system. ubuntu22 . ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13249:351,test,tests,351,https://root.cern,https://github.com/root-project/root/issues/13249,3,"['Test', 'test']","['Test', 'tests']"
Testability,### Check duplicate issues. - [X] Checked for duplicates. ### Description. The ROOT CI has endemically suffered of instabilities. Every time people need to check if the bots report the same failures on other PRs. A possible implementation is to export PR context as part of every job via the GitHub API and each build to look at the last 10 finished jobs for common test failures... . ### Reproducer. N/A. ### ROOT version. N/A. ### Installation method. N/A. ### Operating system. N/A. ### Additional context. The bugreport template should not have most of the fields that are currently marked as mandatory. That's not a tax declaration form.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14781:366,test,test,366,https://root.cern,https://github.com/root-project/root/issues/14781,1,['test'],['test']
Testability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. The change from the root to the web based widget which went into effect with; https://github.com/linev/root/commit/662c32fbfeba987f2b04c7a052c852d8e840607f; is breaking tests in DD4hep.; https://github.com/AIDASoft/DD4hep/actions/runs/10163662170/job/28269502696. The TGeoManager->GetLastTrack() function is returning a nullptr following this change, instead of the last track. ### Reproducer. This builds an executable linked against a ""fixed"" version of GetGeomPainter, and once against current ROOT master from dev3 lcg builds. The working version (with ""root"") gets a track pointer, while the broken one gets a nullptr for the track. ```bash; mkdir repro; cd repro. source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/x86_64-el9-gcc13-opt/setup.sh; cat > CMakeLists.txt << EOF; cmake_minimum_required( VERSION 3.20 ); project( PatchGeo CXX); set( PROJECT_VERSION_MAJOR 0 ); set( PROJECT_VERSION_MINOR 1 ); set(CMAKE_CXX_STANDARD 20); add_library(geopatch SHARED geopatch.cpp); find_package(ROOT REQUIRED); target_link_libraries(geopatch ROOT::Core ROOT::Geom ); add_executable(repro repro.cpp); target_link_libraries(repro geopatch ); add_executable(reproBroken repro.cpp); target_link_libraries(reproBroken ROOT::Core ROOT::Geom ). EOF. cat > repro.cpp <<EOF; #include ""TGeoManager.h""; #include ""TGeoNode.h""; #include ""TGeoVolume.h""; #include ""TVirtualGeoTrack.h""; #include <iostream>; int main() {; double point1[] = {0.0, 0.0, 0.0};; double point2[] = {0.3, 0.4, 0.5};; auto _tgeoMgr = new TGeoManager(""mygeo"", ""mygeo"");; //--- define some materials; TGeoMaterial *matVacuum = new TGeoMaterial(""Vacuum"", 0,0,0);; TGeoMaterial *matAl = new TGeoMaterial(""Al"", 26.98,13,2.7);; TGeoMedium *Vacuum = new TGeoMedium(""Vacuum"",1, matVacuum);; TGeoMedium *Al = new TGeoMedium(""Root Material"",2, matAl);; TGeoVolume *top = _tgeoMgr->MakeBox(""TOP"", Vacuum, 270., 270., 120.);; _tgeoMgr->SetTopVolume(top);; _tgeoMgr->CloseGeometry();;",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16167:244,test,tests,244,https://root.cern,https://github.com/root-project/root/issues/16167,1,['test'],['tests']
Testability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. The change in https://github.com/root-project/root/pull/16568 causes gtest to be always required, or at least in the config we use for LCG stacks in Release mode. See; https://lcgapp-services.cern.ch/cdash3/build/34617/file/1275. ```; In file included from /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/testsupport/src/TestSupport.cxx:14:; /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/testsupport/inc/ROOT/TestSupport.hxx:28:10: fatal error: gtest/gtest.h: No such file or directory; 28 | #include ""gtest/gtest.h""; | ^~~~~~~~~~~~~~~; compilation terminated.; ```; Therefore this should fail in the configure step already. ### Reproducer. lcgcmake. ### ROOT version. master. ### Installation method. build from source. ### Operating system. linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16612:422,test,testsupport,422,https://root.cern,https://github.com/root-project/root/issues/16612,4,"['Test', 'test']","['TestSupport', 'testsupport']"
Testability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. The event weight obtained from `TGenPhaseSpace::Generate()` that is used to get a flat distribution is not normalized to 1. The number rather seems to correspond to the square of the portion of the phase space occupied by the kinematically allowed final states, e.g., for three massless particles, the shape is a triangle that occupies 1/2 of the m_{12}^2 and m_{23}; ^2 ranges, and the normalization is indeed 1/4 (instead of 1). Maybe this is a feature and not a bug, but it should be documented in the `TGenPhaseSpace::Generate()` method. It would also be useful to have a method that returns the correct event weight. At the moment, in order to get a correctly normalized weight, one can run a Monte Carlo to obtain an overall normalization of the distribution for chosen masses and then apply this normalization as a correction on individual weights of generated events. ### Reproducer. A simplest example can be the tutorial macro: [PhaseSpace.C](https://root.cern.ch/doc/master/PhaseSpace_8C.html). ### ROOT version. Present in v6.30 but the behavior was the same in v5 and possibly before. ### Installation method. built from source. ### Operating system. Probably all systems (tested on Linux Centos 7, Centos 8, Rocky 9, macOS Sonoma 14). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14765:1261,test,tested,1261,https://root.cern,https://github.com/root-project/root/issues/14765,1,['test'],['tested']
Testability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. The pythonization of `TDirectoryFile` has a `_TDirectoryFile_Get` function (used to implement `Get()`) that may return a TObject whose memory is not owned by either c++ or python, causing a memory leak. I [attempted to fix the issue](https://github.com/root-project/root/compare/master...silverweed:root:py_tdirectoryfile_fix_leak) with a simple `ROOT.SetOwnership`, but that causes some tests to fail, specifically `pyunittests-pyroot-pyz-tdirectoryfile-attrsyntax-get`. ### Reproducer. 1. in python, open a TFile containing many different objects (e.g. histograms); 2. Get all those objects using `file.Get(name)` in a `for` loop (relinquishing their reference at every iteration); 3. see the memory increase forever. You can test the bug with the following script:; ```; import resource; import ROOT. def print_memory_usage(message):; print(f""{message:50} {resource.getrusage(resource.RUSAGE_SELF).ru_maxrss}""). print_memory_usage(""start""); histogram_names = open(""histogram_names.txt"").read().splitlines(); print_memory_usage(""read histogram names""). fn = ""NTUP_PHYSVAL.40023485._000001.pool.root.1""; with ROOT.TFile.Open(fn) as f:; print_memory_usage(""open ROOT file""); for i, histogram_name in enumerate(sorted(histogram_names)):; h = f.Get(histogram_name); if i % 1000 == 0:; print_memory_usage(f""read {i+1} histograms""); print_memory_usage(""read all histograms""); print_memory_usage(""outside context maneger (closing ROOT file)""); ```. The files used were provided by the user who reported the issue, [see the forum post](https://root-forum.cern.ch/t/memory-leak-when-looking-on-histograms/60429). ### ROOT version. master. ### Installation method. built from source. ### Operating system. Linux. ### Additional context. This bug was reported on [the forum](https://root-forum.cern.ch/t/memory-leak-when-looking-on-histograms/60429)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16178:463,test,tests,463,https://root.cern,https://github.com/root-project/root/issues/16178,2,['test'],"['test', 'tests']"
Testability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. The pyunittests-pyroot-pyz-ttree-setbranchaddress test segfaults with Python 3.13:; ```; 41/1342 Test #31: pyunittests-pyroot-pyz-ttree-setbranchaddress .............................***Failed 57.97 sec; test_array_branch (ttree_setbranchaddress.TTreeSetBranchAddress.test_array_branch) ... ok; test_basic_type_branch (ttree_setbranchaddress.TTreeSetBranchAddress.test_basic_type_branch) ... ok; test_class_with_array_member (ttree_setbranchaddress.TTreeSetBranchAddress.test_class_with_array_member) ... ok; test_fallback_case (ttree_setbranchaddress.TTreeSetBranchAddress.test_fallback_case) ... *** Break *** segmentation violation. ===========================================================; There was a crash.; This is the entire stack trace of all threads:; ===========================================================; #0 0x00007f3f13f12e87 in wait4 () from /lib64/libc.so.6; #1 0x00007f3f13e664fb in do_system () from /lib64/libc.so.6; #2 0x00007f3f13322cf0 in TUnixSystem::Exec (this=0x5619b6bb82b0, shellcmd=<optimized out>) at /builddir/build/BUILD/root-6.32.00-build/root-6.32.00/core/unix/src/TUnixSystem.cxx:2151; #3 TUnixSystem::StackTrace (this=0x5619b6bb82b0) at /builddir/build/BUILD/root-6.32.00-build/root-6.32.00/core/unix/src/TUnixSystem.cxx:2442; #4 0x00007f3f13511c5f in (anonymous namespace)::do_trace (sig=1) at /builddir/build/BUILD/root-6.32.00-build/root-6.32.00/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:189; #5 (anonymous namespace)::TExceptionHandlerImp::HandleException (this=<optimized out>, sig=1) at /builddir/build/BUILD/root-6.32.00-build/root-6.32.00/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:202; #6 0x00007f3f133203b9 in TUnixSystem::DispatchSignals (this=0x5619b6bb82b0, sig=kSigSegmentationViolation) at /builddir/build/BUILD/root-6.32.00-build/root-6.32.00/core/unix/src/TUnixSystem.cxx:3657; #7 <signal handler called>; #8 CPy",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15799:125,test,test,125,https://root.cern,https://github.com/root-project/root/issues/15799,2,"['Test', 'test']","['Test', 'test']"
Testability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. The test `TMVA-DNN-LSTM-BackpropagationCudnn` crashes on ubuntu2404 cuda-12.6.1 with cudnn with the following stack trace:; ```; 0x00007fda7f0b5540 in <unknown> from /usr/lib64/libcuda.so.1; 0x00007fda7ed1491e in <unknown> from /usr/lib64/libcuda.so.1; 0x00007fda7f08f040 in <unknown> from /usr/lib64/libcuda.so.1; 0x00007fda7ed0ef22 in <unknown> from /usr/lib64/libcuda.so.1; 0x00007fda7eed2bae in <unknown> from /usr/lib64/libcuda.so.1; 0x00007fdaaa248b01 in <unknown> from /usr/local/cuda-12.6/targets/x86_64-linux/lib/libcudart.so.12; 0x00007fdaaa218baa in <unknown> from /usr/local/cuda-12.6/targets/x86_64-linux/lib/libcudart.so.12; 0x00007fdaaa270721 in cudaMemcpy + 0x211 from /usr/local/cuda-12.6/targets/x86_64-linux/lib/libcudart.so.12; 0x000055d25af29e37 in bool testLSTMBackpropagation<TMVA::DNN::TCudnn<double> >(unsigned long, unsigned long, unsigned long, unsigned long, TMVA::DNN::TCudnn<double>::Scalar_t, std::vector<bool, std::allocator<bool> >, bool) + 0x4d37 from /github/home/ROOT-CI/build/tmva/tmva/test/DNN/LSTM/testLSTMBackpropagationCudnn; ```. Specifically, it's the assignment in this loop:; https://github.com/root-project/root/blob/9d876cd7faafcb6f0249b1185831a1be53865cac/tmva/tmva/test/DNN/LSTM/TestLSTMBackpropagation.h#L149-L159. Which triggers a cuda_memcpy to the GPU. The crash happens somewhere in the cuda library. Other cudnn tests work, so the problem is not necessarily a broken installation. ### Reproducer. ```; cmake -Dtmva-gpu=On -Dtesting=On <src>; ctest -R TMVA-DNN-LSTM-BackpropagationCudnn; ```. ### ROOT version. Master. ### Installation method. Source. ### Operating system. ubuntu24 docker container with cuda 12.6.1. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16790:79,test,test,79,https://root.cern,https://github.com/root-project/root/issues/16790,7,"['Test', 'test']","['TestLSTMBackpropagation', 'test', 'testLSTMBackpropagation', 'testLSTMBackpropagationCudnn', 'tests']"
Testability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. There is a `can't dereference invalidated vector iterator` assertion failure in `SimpleCollectionProxy.hxx` (at line 23) when running `ntuple_show.exe` on Windows. This code is the issue: `*end_arena = &(*vec.end());` one cannot dereference `end()`, [as explained in the standard](https://en.cppreference.com/w/cpp/container/vector/end):; > end() returns an iterator to the element following the last element of the vector. This element acts as a placeholder; attempting to access it results in undefined behavior. Note there is the same kind of potential issue at line 27 with `static_cast<IteratorData *>(*end_arena)->ptr = &(*vec.end());`. ### Reproducer. Run the `ntuple_show.exe` test in debug mode with the /RTC1 flag on Windows. ### ROOT version. master (6.29/01). ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13568:134,assert,assertion,134,https://root.cern,https://github.com/root-project/root/issues/13568,2,"['assert', 'test']","['assertion', 'test']"
Testability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. There is a very simple way to cause an assertion in cling through wrong but innocent C++ code. ### Reproducer. ```cpp; root [0] g=TF1(""gaus""); Assertion failed: ((D->NextInContextAndBits.getPointer() || D == LastDecl) && ""decl is not in decls list""), function removeDecl, file DeclBase.cpp, line 1477.; ```. ### ROOT version. master, MacOS 14. ### Installation method. built from sources, debug (clang in release mode). ### Operating system. MacOS 14. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13965:114,assert,assertion,114,https://root.cern,https://github.com/root-project/root/issues/13965,2,"['Assert', 'assert']","['Assertion', 'assertion']"
Testability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. There seems to be a subtle bug in the way colors are registered, which in the case described below makes `TColor::GetFreeColorIndex()` return a color index that is already used by a user-defined color. . This happens when I load a canvas from a `.root` file where the canvas was saved in a separate ROOT session that defined a new fill color AND a palette using `gStyle->SetPalette()`. The bug appears in 6.32.00 and 6.32.02 but NOT in 6.30.08. ### Reproducer. 1. Download minimal reproducible example at https://gist.github.com/bgrube/a939a059fd397129efacb8f0643ae022; 2. `source /cvmfs/sft.cern.ch/lcg/app/releases/ROOT/6.32.02/x86_64-almalinux9.4-gcc114-opt/bin/thisroot.sh`; 3. `python3 ./TColorBug.py`; 4. Output; 	```; 	Creating test file in a separate process; 	Color:1179 Red=1.000000 Green=1.000000 Blue=1.000000 Alpha=1.000000 Name=myColor; 	Info in <TCanvas::SaveAs>: ROOT file TColorBug.root has been created; 	Reading test file; 	ROOT.TColor.GetFreeColorIndex() = 1179; 	Color:1179 Red=1.000000 Green=1.000000 Blue=1.000000 Alpha=1.000000 Name=myColor; 	Wrong behavior: index 1179 returned by ROOT.TColor.GetFreeColorIndex() is already used; 	```. ### ROOT version. 6.32. ### Installation method. pre-built binary. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16051:810,test,test,810,https://root.cern,https://github.com/root-project/root/issues/16051,2,['test'],['test']
Testability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. This code in [RTensor.hxx](https://github.com/root-project/root/blob/master/tmva/tmva/inc/TMVA/RTensor.hxx#L460):; ```; shape.insert(shape.end() + 1 + idx, 1);; ```; generates a debug assertion failure ""cannot seek vector iterator after end"".; As explained [in the standard](https://en.cppreference.com/w/cpp/container/vector/end): end() returns an iterator to the element following the last element of the vector. This element acts as a placeholder; attempting to access it results in undefined behavior. ### Reproducer. Compile ROOT in Debug mode on Windows with the `/RTC1` compiler flag and run the TMVA tests/tutorials. ### ROOT version. master (6.29/01). ### Installation method. built from source. ### Operating system. Windows. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13325:259,assert,assertion,259,https://root.cern,https://github.com/root-project/root/issues/13325,2,"['assert', 'test']","['assertion', 'tests']"
Testability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. This https://github.com/root-project/root/pull/14703 (my guess on the changes, I did not confirm that this is the case) seems to have caused issues in python projects depending on root. E.g. https://lcgapp-services.cern.ch/cdash/testDetails.php?test=23867111&build=312289 ; ```; # setting LC_ALL to ""C""; Traceback (most recent call last):; File ""<string>"", line 1, in <module>; File ""/cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Thu/x86_64-el9-gcc11-opt/python/GaudiPython/__init__.py"", line 29, in <module>; from .Bindings import * # noqa: F401 F403; File ""/cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Thu/x86_64-el9-gcc11-opt/python/GaudiPython/Bindings.py"", line 55, in <module>; import cppyy; File ""/cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Thu/x86_64-el9-gcc11-opt/lib/cppyy/__init__.py"", line 71, in <module>; from ._cpython_cppyy import *; File ""/cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Thu/x86_64-el9-gcc11-opt/lib/cppyy/_cpython_cppyy.py"", line 18, in <module>; c = loader.load_cpp_backend(); File ""/cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Thu/x86_64-el9-gcc11-opt/lib/cppyy_backend/loader.py"", line 79, in load_cpp_backend; raise RuntimeError(""could not load cppyy_backend library""); RuntimeError: could not load cppyy_backend library; ```. and many others in the list https://lcgapp-services.cern.ch/cdash/viewTest.php?onlyfailed&buildid=312289. Are we missing some required changes to build options?. ### Reproducer. On any centos7 machine with cvmfs (or use available stack for your OS); ```; source /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/latest/x86_64-centos7-gcc11-dbg/setup.sh; python -c ""import GaudiPython""; ```. ### ROOT version. Master from tonight.; Things were fine yesterday. ### Installation method. build from sources in lcgcmake, options https://gitlab.cern.ch/sft/lcgcmake/-/blob/master/projects/CMakeLists.txt#L95. ### Operating system. centos7, alma9, alma8, ubuntu20, ubuntu22. ### Add",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14904:304,test,testDetails,304,https://root.cern,https://github.com/root-project/root/issues/14904,2,['test'],"['test', 'testDetails']"
Testability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. Using ROOT 6.30/04 built by EP-SFT stacks for `aarch64-el9-gcc13-dbg` on `lxplus-arm.cern.ch` the application is aborted because of a failed assert:; ```; root.exe: /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h:77: clang::serialization::InputFile::InputFile(clang::FileEntryRef, bool, bool): Assertion `!(isOverridden && isOutOfDate) && ""an overridden cannot be out-of-date""' failed.; ```. It turns out that the failure is implicitly caused by an updated version of GCC (from 11.3 to 11.4). ### Reproducer. Here is a redacted log a sessions exposing the problem:; ```; ssh lxplus-arm.cern.ch; > rpm -q gcc; gcc-11.4.1-2.1.el9.aarch64; > . /cvmfs/sft.cern.ch/lcg/releases/gcc/13.1.0-b3d18/aarch64-el9/setup.sh; > . /cvmfs/sft.cern.ch/lcg/views/LCG_105a/aarch64-el9-gcc13-dbg/setup.sh; > root; root.exe: /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h:77: clang::serialization::InputFile::InputFile(clang::FileEntryRef, bool, bool): Assertion `!(isOverridden && isOutOfDate) && ""an overridden cannot be out-of-date""' failed.; >; ```. The optimized build, of course, works; ```; ssh lxplus-arm.cern.ch; > rpm -q gcc; gcc-11.4.1-2.1.el9.aarch64; > . /cvmfs/sft.cern.ch/lcg/releases/gcc/13.1.0-b3d18/aarch64-el9/setup.sh; > . /cvmfs/sft.cern.ch/lcg/views/LCG_105a/aarch64-el9-gcc13-opt/setup.sh; > root; ------------------------------------------------------------------; | Welcome to ROOT 6.30/04 https://root.cern |; | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxarm64 on Feb 03 2024, 21:41:03 |; | From heads/master@tags/v6-30-04 |; | With g++ (GCC) 13.1.0 |; | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |; --------------------------",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14789:216,assert,assert,216,https://root.cern,https://github.com/root-project/root/issues/14789,3,"['Assert', 'assert', 'log']","['Assertion', 'assert', 'log']"
Testability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. We identified an issue which might be related to unloading. This issue prevents any test with dask+htcondor without the usage of unelegant cludges. It would be great if it could be fixed. ### Reproducer. The macro (`unloadingIssue.C`); ```.cpp; #include <ROOT/RVec.hxx>. ROOT::RVecF unloadingIssue(); {; return 1 + ROOT::RVecF({-.2,.2});; }. ```; The commands at the prompt:; ```; root [0] .L unloadingIssue.C+; Info in <TMacOSXSystem::ACLiC>: creating shared library /mypath/./unloadingIssue_C.so; root [1] .! touch unloadingIssue.C; root [2] .x unloadingIssue.C ; Assertion failed: (!Calls.empty() && ""Missing lambda call operator!""), function getLambdaCallOperatorHelper, file DeclCXX.cpp, line 1499.; ```. Note that if the macro is changed to; ```.cpp; #include <ROOT/RVec.hxx>. ROOT::RVecF unloadingIssue(); {; return ROOT::RVecF({-1.2,1.2});; }. ```; The issue does not manifest itself: the overloaded operator+ for int and RVec<float> seems to trigger it. ### ROOT version. Master. ### Installation method. built from sources. ### Operating system. MacOS, Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13677:159,test,test,159,https://root.cern,https://github.com/root-project/root/issues/13677,2,"['Assert', 'test']","['Assertion', 'test']"
Testability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. When Range() is called on a RDF object with a progress bar, the progress bar seems to show all the events instead of reducing the events to the values provided in the Range() call. ### Reproducer. ```c++; void test() {. ROOT::RDataFrame df(100);; ROOT::RDF::Experimental::AddProgressBar(df);; auto def = df.Define(""x"", [](){ return gRandom->Rndm(); });; auto max = def.Range(0, 10);; auto hist = max.Histo1D(""x"");; std::cout << hist->Integral() << ""\n"";; }; ```. The following code shows:; ```; root [0] ; Processing test.cxx...; [Total elapsed time: 0:00m processed files: 0 / 0 processed evts: 100 / 100] ; 10; ```. While the progress bar should ideally show 10/10. ### ROOT version. Recent master branch. ### Installation method. git clone + local compilation. ### Operating system. Ubuntu 23.10. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15323:285,test,test,285,https://root.cern,https://github.com/root-project/root/issues/15323,2,['test'],['test']
Testability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. When attempting to produce a PCM from a module map specifying a header that cannot be found, I get the message; ```; /scratch/greenc/build/mrb-art-summer/e28-prof/build_slf7.x86_64/critic/critic/test/art/sampling-input/module.modulemap:3:10: error: cannot emit module critic_test_art_sampling-input_dict: size must be explicitly specified for missing header file ""canvas/Persistency/Common/Sampled.h""; header ""canvas/Persistency/Common/Sampled.h""; ^; ```; This—while unwelcome—is reasonable. However, `rootcling` then exits with status code 0 and the continues with the PCM file never generated. ### Reproducer. 1. Create a simple module map attempting to use a nonexistent header, e.g.; ```; module ""critic_test_art_sampling-input_dict"" {; requires cplusplus; header ""canvas/Persistency/Common/Sampled.h""; link ""libcanvas.so""; }; ```; 1. Attempt to create a PCM from it:; ```; rootcling --cxxmodule -f -v4 ...; ```; 1. Check the error code:; ```; echo $?; ```. ### ROOT version. ```; ------------------------------------------------------------------; | Welcome to ROOT 6.28/04 https://root.cern |; | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on May 08 2023, 02:44:07 |; | From tags/v6-28-04@v6-28-04 |; | With g++ (GCC) 13.1.0 |; | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------; ```. ### Installation method. UPS. ### Operating system. SL7. ### Additional context. * GCC13.1.0/C++20",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13675:270,test,test,270,https://root.cern,https://github.com/root-project/root/issues/13675,1,['test'],['test']
Testability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. When input files to `RDataFrame` are remote files, force caching of remote files does not work and the remote files will be downloaded every time. . ### Reproducer. ```; import os; import ROOT. user = os.environ['USER']; outdir = f""/eos/user/{user[0]}/{user}""; filename = os.path.join(outdir, ""test.root""); # create dummy root file; ROOT.RDataFrame(100).Define(""x"", ""1"").Snapshot(""test"", filename). ROOT.TFile.SetCacheFileDir(""/tmp"", True, True); # this does not trigger loading of cached root file; ROOT.RDataFrame(""test"", f""root://eosuser.cern.ch/{filename}"").Sum(""x"").GetValue(); ```. This is because internally RDataFrame will create a TChain using [`ROOT.Internal.TreeUtils.MakeChainForMT(treename)`](https://root.cern/doc/master/RLoopManager_8cxx_source.html#l01169), which creates a `TChain` object with the mode `ROOT.TChain.kWithoutGlobalRegistration`. This in turn forces the TFile open option to be [""READ_WITHOUT_GLOBALREGISTRATION""](https://root.cern/doc/master/TChain_8cxx_source.html#l00505). This causes the TFile to be opened without caching since it only checks the [fgCacheFileForce](https://root.cern/doc/master/classTFile.html#a04d17cde8f18d500653077fc7d7dc3ac) flag when option is [""READ""](https://root.cern/doc/master/TFile_8cxx_source.html#l04182). ### ROOT version. 6.30/04 (LCG105a). ### Installation method. LCG (Swan). ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15028:369,test,test,369,https://root.cern,https://github.com/root-project/root/issues/15028,3,['test'],['test']
Testability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. When passing some identical histograms to KSTest of TH1, the code return probability 0 in case of the ""X"" option (runing toys) while the probablity of the default KS test is 1 (as expected). ### Reproducer. running the following macro reproduces the issue:; ```c++; void kstest() {. TFile* f = TFile::Open(""kstest.root"", ""READ"");. TH1D* h1 = f->Get<TH1D>(""SR2_2L_el/tt_Conv/nominal/SR2_2L_el_tt_Conv"");; TH1D* h2 = f->Get<TH1D>(""SR2_2L_el/tt_Conv/FSRAlphaS_ttbar/SR2_2L_el_tt_Conv_FSRAlphaS_ttbar_Shape_Down"");. std::cout << ""integral h1: "" << h1->Integral() << "", h2: "" << h2->Integral() << ""\n"";. const double probX = h1->KolmogorovTest(h2, ""X"");; const double prob = h1->KolmogorovTest(h2);; std::cout << ""KS probability using toys is: "" << probX << "", without toys it is: "" << prob << ""\n"";; }; ```; with the input file available in this public afs repository: /afs/cern.ch/user/t/tdado/public/kstest.root. I could not reproduce it with a dummy histograms, so it must be somehow related to the actual values in the bins?. ### ROOT version. ROOT Version: 6.28/04; Built for linuxx8664gcc on Jul 10 2023, 18:22:00; From v6-28-04@v6-28-04. ### Installation method. source from LCG. ### Operating system. CentOS7 (lxplus). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13697:241,test,test,241,https://root.cern,https://github.com/root-project/root/issues/13697,1,['test'],['test']
Testability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. When running the `gtest-hist-histv7-test-histhistv7testUnit` test, there is the following error on Windows:; ```; Run-Time Check Failure #3 - The variable 'bins_per_hyperplane' is being used without being initialized.; ```; in `RHistImpl.hxx` at line 936:; ```; Internal::RComputeLocalBinsInitialisation<NDIMS - 1, NDIMS, decltype(fAxes)>()(bins_per_hyperplane, regular_bins_per_hyperplane, fAxes);; ```. ### Reproducer. Run the `gtest-hist-histv7-test-histhistv7testUnit` test in debug mode with the /RTC1 flag on Windows. ### ROOT version. master (6.29/01). ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13569:111,test,test-,111,https://root.cern,https://github.com/root-project/root/issues/13569,4,['test'],"['test', 'test-']"
Testability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. When running with 6.32.02 the ALICE reconstruction we were plagued by errors like the following:. ./itstpcMatch.log[16548:itstpc-track-writer]: Error in <TStreamerInfo::Build>: o2::dataformats::AbstractRef<25,5,2>, unknown type: typename std::conditional<(32> mRef. which were not there when using 6.30.0. We have since been able to workaround this by doing:. https://github.com/AliceO2Group/AliceO2/pull/13310/files. however I was wondering if this is not some more serious issue. In particular I am puzzled by the ""(32"" template argument, which seems to indicate some weird memory overwrite / macro expansion of NBIT. ### Reproducer. I do not have a simple reproducer. ### ROOT version. 6.32.02. ### Installation method. aliBuild. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16119:187,log,log,187,https://root.cern,https://github.com/root-project/root/issues/16119,1,['log'],['log']
Testability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. When setting `TFile.v630forwardCompatibility` to true in `/etc/root/system.rootrc`, there is still confusing behavior and new files can be written without compability. In particular, *new* files are not opened in compatibility mode (largely limiting the usefulness of the configuration flag). ### Reproducer. ```; gEnv->GetValue(""TFile.v630forwardCompatibility"", 0). TFile file1 = TFile(""file1.root"",""CREATE""); file1.TestBit(TFile::k630forwardCompatibility); file1.Close(). TFile file2 = TFile(""file1.root"",""READ""); file2.TestBit(TFile::k630forwardCompatibility); file2.Close(). TFile* file3 = TFile::Open(""file3.root"",""CREATE""); file3->TestBit(TFile::k630forwardCompatibility); file3->Close(). TFile* file4 = TFile::Open(""file3.root"",""READ""); file4->TestBit(TFile::k630forwardCompatibility); file4->Close(); ```; produces; ```; $ root -l ; root [0] gEnv->GetValue(""TFile.v630forwardCompatibility"", 0); (int) 1; root [1] ; root [1] TFile file1 = TFile(""file1.root"",""CREATE""); (TFile &) Name: file1.root Title: ; root [2] file1.TestBit(TFile::k630forwardCompatibility); (bool) false; root [3] file1.Close(); root [4] ; root [4] TFile file2 = TFile(""file1.root"",""READ""); (TFile &) Name: file1.root Title: ; root [5] file2.TestBit(TFile::k630forwardCompatibility); (bool) true; root [6] file2.Close(); root [7] ; root [7] TFile* file3 = TFile::Open(""file3.root"",""CREATE""); (TFile *) 0x5650bd7edba0; root [8] file3->TestBit(TFile::k630forwardCompatibility); (bool) false; root [9] file3->Close(); root [10] ; root [10] TFile* file4 = TFile::Open(""file3.root"",""READ""); (TFile *) 0x5650bd584570; root [11] file4->TestBit(TFile::k630forwardCompatibility); (bool) true; root [12] file4->Close(); ```. ### ROOT version. ```; ------------------------------------------------------------------; | Welcome to ROOT 6.30/02 https://root.cern |; | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16189:492,Test,TestBit,492,https://root.cern,https://github.com/root-project/root/issues/16189,4,['Test'],['TestBit']
Testability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. hi -. ATLAS is seeing a number of unit test failures in the dev4LCG/el9 nightlies; (which use root-6.28.00-patches); that are linked to trying to operate on Eigen objects from pyroot.; I've managed to reduce this to a simple, standalone example, which reveals; that the issue has to do with a template overload for operator(). The reproducer is in the attached archive. The included setup script; should be appropriate for lxplus9.; Run:. $ . ./setup; $ ./build.sh; $ python test.py. and it crashes with a segmentation violation. From gdb, the stack trace is:. ```; #0 0x00007ffff7558f13 in std::construct_at<CPyCppyy::PyCallable*, CPyCppyy::PyCallable* const&> (__location=0x5f3a3a676e697274); at /cvmfs/sft.cern.ch/lcg/releases/gcc/13.1.0-b3d18/x86_64-el9/include/c++/13.1.0/bits/stl_construct.h:97; #1 0x00007ffff75588c3 in std::allocator_traits<std::allocator<CPyCppyy::PyCallable*> >::construct<CPyCppyy::PyCallable*, CPyCppyy::PyCallable* const&> (; __p=0x5f3a3a676e697274, __a=...); at /cvmfs/sft.cern.ch/lcg/releases/gcc/13.1.0-b3d18/x86_64-el9/include/c++/13.1.0/bits/alloc_traits.h:539; #2 std::vector<CPyCppyy::PyCallable*, std::allocator<CPyCppyy::PyCallable*> >::push_back (this=0x7ffff75ba167, __x=@0x7fffffff7c40: 0x73abec0); at /cvmfs/sft.cern.ch/lcg/releases/gcc/13.1.0-b3d18/x86_64-el9/include/c++/13.1.0/bits/stl_vector.h:1281; #3 0x00007ffff75624a9 in CPyCppyy::CPPOverload::AdoptMethod (; this=0x7ffff75fe9a0 <CPyCppyy::TemplateProxy_Type>, pc=0x73abec0); at /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-28-00-patches/src/ROOT/v6-28-00-patches/bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx:946; #4 0x00007ffff759fb6a in CPyCppyy::TemplateProxy::AdoptMethod (; this=0x7fffd65c01f0, pc=0x73abec0); at /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-28-00-patches/src/ROOT/v6-28-00-patches/bindings/pyroot/cppyy/CPyCppyy/src/TemplateProxy.cxx:111; #5 0x00007",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13410:114,test,test,114,https://root.cern,https://github.com/root-project/root/issues/13410,2,['test'],['test']
Testability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. hi -. For some time now, ATLAS has had issues with dictionary operations; sometimes failing with clang assertions. When this happens, it is; of course only in the debug build; in the optimized build,; everything seems to work fine. The problem; is related to the ordering in which dictionaries are loaded --- we can; usually make the crashes go away by forcing a particular dictionary; loading order. This appears to be related to the traits-like class that we use to specify; the inheritance relations for our DataVector class. Schematically, it looks; like this:. ```; struct NoBase {};. template <class T>; struct DataVectorBase; {; typedef NoBase Base;; };. // Specialized derived version.; template <class T, class BASE = typename DataVectorBase<T>::Base>; class DataVector : public BASE {...};. // Base class version.; template <class T>; class DataVector<T, NoBase> {...};; ```. where user classes then specialize the DataVectorBase class; (in practice, done via a macro). I've now finally bit the bullet and reduced one example of this such that; it does not depend on ATLAS software. The test case is attached. If github still isn't allowing be to attach; archives, i've also put a copy on lxplus at ~ssnyder/public/fwddict-crash.tar. The set up is against a nightly debug build of 6.28-patches:. ```; $ . ./setup; $ echo $ROOTSYS; /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-el9-gcc13-dbg; $ ./build.sh ; $ python -i test.py; python: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-28-00-patches/src/ROOT/v6-28-00-patches/interpreter/llvm/src/tools/clang/lib/Sema/SemaLookup.cpp:2165: bool clang::Sema::LookupQualifiedName(clang::LookupResult&, clang::DeclContext*, bool): Assertion `(!isa<TagDecl>(LookupCtx) || LookupCtx->isDependentContext() || cast<TagDecl>(LookupCtx)->isCompleteDefinition() || cast<TagDecl>(LookupCtx)->isBeingDefined()) && ""Declaratio",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14186:178,assert,assertions,178,https://root.cern,https://github.com/root-project/root/issues/14186,1,['assert'],['assertions']
Testability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. tests fail. ### Reproducer. ctest -R ""TThread"". ### ROOT version. master. ### Installation method. source. ### Operating system. FreeBSD. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13068:75,test,tests,75,https://root.cern,https://github.com/root-project/root/issues/13068,1,['test'],['tests']
Testability,"### Check duplicate issues. - [x] Checked for duplicates. ### Description. Following from wlav/cppyy#201, it seems there is an issue with (ROOT's) cppyy's handling of SFINAE functions with variadic template arguments. . ### Reproducer. ```py; import ROOT; import cppyy. cppyy.cppdef('''; template <typename T> struct TestSfinae {; template <typename U, typename V = T,; std::enable_if_t<std::is_arithmetic_v<V>, bool> = false>; auto test_single(U arg) {; std::cout << ""good"" << std::endl;; return 0;; }; template <typename... Args, typename V = T,; std::enable_if_t<std::is_arithmetic_v<V>, bool> = false>; auto test_pack(Args... args) {; std::cout << ""good"" << std::endl;; return 0;; }; };; '''). # call from cling; cppyy.cppdef('''auto testing = TestSfinae<float>();'''); cppyy.cppdef('''auto single_call = testing.test_single(1);''') # good; cppyy.cppdef('''auto pack_call = testing.test_pack(1,2,3);''') # good. # call from bindings; testing = cppyy.gbl.TestSfinae['float'](); testing.test_single(1) # good; testing.test_pack(1,2,3) # fails; ```. ### ROOT version. ```; ------------------------------------------------------------------; | Welcome to ROOT 6.28/06 https://root.cern |; | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for macosx64 on Sep 17 2023, 12:38:14 |; | From heads/latest-stable@7745d36d |; | With Apple clang version 14.0.3 (clang-1403.0.22.14.1) |; | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------; ```. ### Installation method. build from source. ### Operating system. MacOS. ### Additional context. ```; input_line_24:6:70: error: no matching member function for call to 'test_pack'; new (ret) (int) (((TestSfinae<float>*)obj)->TestSfinae<float>::test_pack<int, int, int, float, false>(*(int*)args[0], *(int*)args[1],; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~; input_line_18:11:8: note: candidate template igno",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14016:317,Test,TestSfinae,317,https://root.cern,https://github.com/root-project/root/issues/14016,8,"['Test', 'test']","['TestSfinae', 'testing']"
Testability,"### Check duplicate issues. - [x] Checked for duplicates. ### Description. Hello, I have been trying to play with parameter names with TF1 (and TFormula). I need to draw a TF1 curve, for simplicity I want to include clear parameter names.; But I see some very strange behaviors.. I play with parameter names and my formula gets completely mess up..; How can this be ?. The output of the reproducer is the following:; My f0 gets modified into t0..; ```; root [1] .x test.C; [f0] + [beta]*x; [t0]+[beta]*x <<<<< EXPECTED : ""[f0] + [beta]*x""; ```. ### Reproducer. Here is the reproduced. My example just use f0 and beta, but my program use some other parameters also depending on if/else conditions. . ```; {; 	double t0 = 0;; 	double t1 = 10;; 	; 	double f0 = 12.5;; 	double f1 = 2;. 	double beta = (f1-f0)/t1;. 	TString formulaStr = ""[f0] + [beta]*x"";; TF1 *formula = new TF1(""formula1"", formulaStr);; formula->SetParName (0, ""beta"");; formula->SetParameter(0, beta);; formula->SetParName (1, ""t0"");; formula->SetParameter(1, t0);; formula->SetParName (2, ""f0"");; formula->SetParameter(2, f0);; formula->SetParName (3, ""t1"");; formula->SetParameter(3, t1);; formula->SetParName (4, ""f1"");; formula->SetParameter(4, f1);. std::cout << formulaStr << std::endl;; std::cout << formula->GetFormula()->GetExpFormula() << std::endl;; }; ```. ### ROOT version. ROOT master 2023/08/31. ### Installation method. build from source. ### Operating system. macos. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13709:465,test,test,465,https://root.cern,https://github.com/root-project/root/issues/13709,1,['test'],['test']
Testability,"### Check duplicate issues. - [x] Checked for duplicates. ### Description. Hello,; I am trying to load a GDML file using matrix and variables. Here in an extract from the gdml:. ```; <matrix name=""someNumbers"" coldim=""1"" values=""4 3 2 3""/>; <variable name=""testVariable"" value=""someNumbers[1]""/>; ```. ROOT complains when parsing the GDML, with the following error:. ```; input_line_155:2:81: error: subscripted value is not an array, pointer, or vector; Double_t TFormula____id2222353222929674449(Double_t *x,Double_t *p){ return p[0][1] ; }; ~~~~^~; Error in <prepareMethod>: Can't compile function TFormula____id2222353222929674449 prototype with arguments Double_t*,Double_t*; Error in <TFormula::InputFormulaIntoCling>: Error compiling formula expression in Cling; Error in <TFormula::ProcessFormula>: Formula ""[someNumbers][1]"" is invalid !; Error in <TFormula::Eval>: Formula is invalid and not ready to execute ; Fatal in <TGDMLParse::Value>: Got bad value nan from string 'someNumbers[1]'; aborting; ```. It seems that the parser fails in understanding how to access the matrix element. . Cheers,; Noemi. ### Reproducer. [geometry_test.gdml.txt](https://github.com/root-project/root/files/11833941/geometry_test.gdml.txt). Please note the attached file is `.txt`. To reproduce the issue, you can do:. ```; root -l; TGeoManager::Import(""geometry_test.gdml""); ```. ### ROOT version. ROOT Version: 6.26/10. ### Installation method. build from source using gcc 12.2.1. ### Operating system. Linux Fedora 38. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13074:257,test,testVariable,257,https://root.cern,https://github.com/root-project/root/issues/13074,1,['test'],['testVariable']
Testability,"### Check duplicate issues. - [x] Checked for duplicates. ### Description. Hi all,. [MSVC] ROOT_x86 failed due to failed due to libCling.exp : error LNK2001: unresolved external symbol ""char const * __cdecl __std_find_trivial<char const ,char>(char const *,char const *,char). It can be reproduced on this commit `1f86c24` Could you please help look at this issue? Thanks in advance!. ### Reproducer. Steps to reproduce the behavior:; 1. https://github.com/root-project/root C:\gitP\root-project/root; 2. Open a VS2022 x86 cmd; 3. set VSCMD_SKIP_SENDTELEMETRY=1 & ""C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat"" -host_arch=x86 -arch=x86 & set _CL_= /Bcapture_repro C:\a\_work\_temp\rwc_project_logs\ROOT\preprocessed_repro_build & set _LINK_= /onfailrepro:C:\a\_work\_temp\rwc_project_logs\ROOT\link_repro_build; 4. cd /d C:\gitP\root-project\root\build_x86; 5. msbuild /m /p:Platform=Win32 /p:Configuration=Release ALL_BUILD.vcxproj /t:Rebuild 2>&1. Error Message: After updating the hash commit, ROOT_amd64 passed but ROOT_X86 failed with the following error:; libCling.exp : error LNK2001: unresolved external symbol ""char const * __cdecl __std_find_trivial<char const ,char>(char const *,char const *,char)"". **What is the expected behaviour?**; Project Pass. **Operating System**; Windows. **What versions of the operating systems?**; VS 2022 + Windows Server 2022 Datacenter. **Architectures**; 86-bit. **Stacktrace**; No response. **Plug-in formats (if applicable)**; No response. **Plug-in host applications (DAWs) (if applicable)**; No response. **Testing on the develop branch**; The bug is present on the develop branch. ### ROOT version. N/A. ### Installation method. N/A. ### Operating system. Windows. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15336:1595,Test,Testing,1595,https://root.cern,https://github.com/root-project/root/issues/15336,1,['Test'],['Testing']
Testability,"### Check duplicate issues. - [x] Checked for duplicates. ### Description. I am getting some `Warning in <Snapshot>: A lazy Snapshot action was booked but never triggered.` warning at the end of the program while found that all output files I expected to be present are present. What make things worse is that snapshot operation in this case can cause `TH1D::SaveAs` to stop working. I did some test regarding the issue and found following minimal reproduce. ### Reproducer. Create `toy.cpp` with content:; ```cpp; #include <ROOT/RDataFrame.hxx>; #include <TRandom.h>. void toy() {; // comment this line out (i.e. single thread) won't reproduce the problem.; ROOT::EnableImplicitMT();; ROOT::RDataFrame emptydf{10000};; auto df = emptydf.Define(""x"", []() { return gRandom->Gaus(); }, {});; ROOT::RDF::RSnapshotOptions opts;; opts.fLazy = true;; auto act = df.Snapshot(""treeout"", ""test3.root"", """", opts);; // this should triggr the snapshot; *act;; return;; }. int main() {; toy();; return 0;; }; ```; Run it by `rool -l toy.cpp` or compile and run by `c++ toy.cpp -o t $(root-config --cflags --glibs) && ./t`. Result: `Warning in <Snapshot>: A lazy Snapshot action was booked but never triggered.` warning is given but `test3.root` is present. ---. Create `toy.cpp` with content:; ```cpp; #include <ROOT/RDataFrame.hxx>; #include <TRandom.h>. void toy() {; // comment this line out (i.e. single thread) won't reproduce the problem.; ROOT::EnableImplicitMT();; ROOT::RDataFrame emptydf{10000};; auto df = emptydf.Define(""x"", []() { return gRandom->Gaus(); }, {});; ROOT::RDF::RSnapshotOptions opts;; opts.fLazy = true;; auto act = df.Snapshot(""treeout"", ""test3.root"", """", opts);; // create a histogram and trigger the event loop; df.Histo1D(""x"")->SaveAs(""hist.root"");; return;; }. int main() {; toy();; return 0;; }; ```; Run it by `rool -l toy.cpp` or compile and run by `c++ toy.cpp -o t $(root-config --cflags --glibs) && ./t`. Result: `Warning in <Snapshot>: A lazy Snapshot action was booked but n",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14132:395,test,test,395,https://root.cern,https://github.com/root-project/root/issues/14132,1,['test'],['test']
Testability,"### Check duplicate issues. - [x] Checked for duplicates. ### Description. ROOT crashes when performing the uncertainty correction in (Fitter::DoWeightMinimization) when doing a weighted likelihood fit. ; See https://root-forum.cern.ch/t/root-crashes-when-doing-a-weighted-likelihood-fit/57976. ### Reproducer. ```; void test(){ ; TH1F* h = new TH1F(""h"",""h"",3,0,3); ; for(int i = 0; i < 3; i++)h->Fill(0.5); ; for(int i = 0; i < 4; i++)h->Fill(1.5); ; for(int i = 0; i < 3; i++)h->Fill(2.5); ; ; //This works ; std::cout << ""Likelihood Fit:"" << std::endl; ; h->Fit(""pol0"",""L""); ; ; //This dosn't ; h->Sumw2(); ; h->Scale(10); ; std::cout << ""Weighted Likelihood Fit:"" << std::endl; ; h->Fit(""pol0"",""WL""); ; } ; ``` . ### ROOT version. 6.28, 6.30 and master. ### Installation method. all. ### Operating system. all. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14458:321,test,test,321,https://root.cern,https://github.com/root-project/root/issues/14458,1,['test'],['test']
Testability,"### Check duplicate issues. - [x] Checked for duplicates. ### Description. ROOT misbehaves when ASAN is enabled. Below different incarnation of the problem are illustrated:; - [ ] root/io/bigevent, root/io/event, root/io/compression, root/io/datamodelevolution, root/io/perf, root/treeformula/event, root/treeformula/retobj, ; root/treeformula/schemaEvolution, root/treeformula/sync, root/tree/friend, root/tree/evolution, root/tree/treeproblem, root/treeproxy, root/io/compression : bad linkage to asan functions; - [ ] root/io/references: badly setup dependency on libEvent; - [ ] root/tree/addresses : `AddressSanitizer: heap-buffer-overflow`; - [ ] root/io/newClassDef: Real failure with ASAN enabled; - [ ] root/io/cint: bad linkage to ASAN libraries. Should also check if the tests are needed at all. Moreover, the above (and root/tree/addresses) are automatic Makefile driven tests. They could be translated to CMake to gain granularity. ### Reproducer. Run with Asan. ### ROOT version. master. ### Installation method. From sources (need asan). ### Operating system. Linux, mac. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14682:782,test,tests,782,https://root.cern,https://github.com/root-project/root/issues/14682,2,['test'],['tests']
Testability,"### Check duplicate issues. - [x] Checked for duplicates. ### Description. TMVA tests sporadically fail in ROOT's integration buils (both PR and Nightly). Often the stack traces are not easily readable, for example when the test is steered through PyROOT. However, at least one clear problem emerged in the I/O of `TMVA::Experimental::SOFIE::RModel` instances.; In [this build](https://github.com/root-project/root/actions/runs/8568832804/job/23483489958) it can be clearly seen that the segfault happens when a `RModel` instance is read from a ROOT file.; The stack trace is the following:; ``` ; TMVA SOFIE Operator Conv: asymmetric padding not supported. Assume an average padding ; ; *** Break *** segmentation violation; [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info); [/Users/sftnight/ROOT-CI/build/lib/libROOTTMVASofie.so] TMVA::Experimental::SOFIE::InitializedTensor::CastPersistentToShared() (no debug info); [/Users/sftnight/ROOT-CI/build/lib/libROOTTMVASofie.so] TMVA::Experimental::SOFIE::RModel::Streamer(TBuffer&) (no debug info); [/Users/sftnight/ROOT-CI/build/lib/libRIO.so] TKey::ReadObjectAny(TClass const*) (no debug info); [/Users/sftnight/ROOT-CI/build/lib/libRIO.so] TDirectoryFile::GetObjectChecked(char const*, TClass const*) (no debug info); [/Users/sftnight/ROOT-CI/build/tmva/sofie/test/emitFromROOT] EmitModel(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>) (no debug info); [/Users/sftnight/ROOT-CI/build/tmva/sofie/test/emitFromROOT] main (no debug info); [/usr/lib/dyld] start (no debug info); make[2]: *** [SofieCompileModels_ROOT] Error 139; make[1]: *** [tmva/sofie/test/CMakeFiles/SofieCompileModels_ROOT.dir/all] Error 2; make: *** [all] Error 2; ```. This bug could be affecting other ROOT branches (for sure at least master). Moreover, the I/O of those objects might be corrupt ( the class is in the `Experimental` na",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15156:80,test,tests,80,https://root.cern,https://github.com/root-project/root/issues/15156,2,['test'],"['test', 'tests']"
Testability,"### Check duplicate issues. - [x] Checked for duplicates. ### Description. We have an error in the nightlies build for dev3cuda-x86_64-el9-gcc11-opt and dev3cuda-x86_64-el8-gcc11-opt; Here, CUDA is enabled. The build without CUDA are fine. The error seems to be related to the RooFit::Evaluator::assignToGPU function:; ```; /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/roofit/roofitcore/src/RooFit/Evaluator.cxx:574:68: error: use of deleted function 'std::__ROOT::span<T>& std::__ROOT::span<T>::operator=(std::__ROOT::span<T>&&) [with T = double]'; ```; Also this throws an error; ```; /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/roofit/roofitcore/src/RooFit/Evaluator.cxx:575:48: error: cannot convert 'std::__ROOT::span<double>' to 'const std::__ROOT::span<const double>&'; 575 | _evalContextCUDA.set(node, _evalContextCUDA._currentOutput);; ```. The full log for ROOT-HEAD can be found here: https://lcgapp-services.cern.ch/cdash/upload/405718ff1f150aae3de5d392f40f70fd238ea254/ROOT-HEAD-build.log. ### Reproducer. /. ### ROOT version. master. ### Installation method. lcgcmake from source: options [gitlab.cern.ch/sft/lcgcmake/-/blob/master/projects/CMakeLists.txt?ref_type=heads#L82](https://gitlab.cern.ch/sft/lcgcmake/-/blob/master/projects/CMakeLists.txt?ref_type=heads#L82); ### Operating system. alma8 alma9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15087:940,log,log,940,https://root.cern,https://github.com/root-project/root/issues/15087,2,['log'],['log']
Testability,"### Check duplicate issues. - [x] Checked for duplicates. ### Description. We've been using MSVC to build ROOT, and we've recently encountered the following error:. `error G694476FC: static_assert failed ""Unexpected size""`. Our developer has suggested the compiler that was used needs to implement the Defect Report https://cplusplus.github.io/CWG/issues/2518.html (which has been implemented by MSVC and Clang). ### Reproducer. Repro step:. 1. Open ""x64 Native Tools Command Prompt for VS 2022""; 2. git clone https://github.com/root-project/root.git; 3. mkdir root\build_amd64; 4. cd /d root\build_amd64; 5. set VSCMD_SKIP_SENDTELEMETRY=1 & ""C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat"" -host_arch=amd64 -arch=amd64; 6. python.exe -m pip install pytest 2>&1; 7. cmake -G ""Visual Studio 17 2022"" -A x64 -DCMAKE_SYSTEM_VERSION=10.0.22621.0 -Dtesting=ON -Droottest=ON -Droofit=off .. 2>&1; 8. msbuild /m /p:Platform=x64 /p:Configuration=Release ALL_BUILD.vcxproj /t:Rebuild 2>&1. ### Expected result:; Build succesfully. ### ROOT version. We are using the latest commit. ### Installation method. git. ### Operating system. Windows server 2022 data center. ### Additional context. Detailed log:; [Build.log](https://github.com/root-project/root/files/15090474/Build.log)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15321:1227,log,log,1227,https://root.cern,https://github.com/root-project/root/issues/15321,3,['log'],['log']
Testability,"### Check duplicate issues. - [x] Checked for duplicates. ### Description. as in desc, possibly more tests affected. Due to unimplemented system info in TUnixSystem. rudimentary patch coming. ### Reproducer. ctest. ### ROOT version. master. ### Installation method. source. ### Operating system. FreeBSD 13.2. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13128:101,test,tests,101,https://root.cern,https://github.com/root-project/root/issues/13128,1,['test'],['tests']
Testability,"### Check duplicate issues. - [x] Checked for duplicates. ### Description. roofit tests (test-stressroofit-batchmode-*) segfault, maybe it rings a bell with the experts I cannot find the culprit (yet):; ```; 304: Test 52 : B Physics p.d.f.s......................................OK; 304: Test 53 : Automated MC studies...................................OK; 304: Test 54 : MC Study with chi^2 calculator.........................OK; 304: Test 55 : MC Study with param rand. and Z calc...................OK; 304: Test 56 : MC Studies with aux. obs. constraints..................OK; 304:; 304: *** Break *** segmentation violation; 304: ******************************************************************; 304: * SYS: FreeBSD hack 13.2-RELEASE-p1 FreeBSD 13.2-RELEASE-p1 GENERIC; 304: ******************************************************************; 304: ******************************************************************; 304: * ROOTMARKS =4262.5 * Root6.29/01 20221221/1150; 304: ******************************************************************; 304: Time at the end of job = 18.882812 seconds; 304: Generating stack trace...; 304: 0x0000000826fefe68 in _ZNSt3__112__hash_tableINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4hashIS6_EENS_8equal_toIS6_EENS4_IS6_EEE25__emplace_unique_key_argsIS6_JRKS6_EEENS_4pairINS_15__hash_iteratorIPNS_1 at /usr/include/c++/v1/__hash_table:2070 from /home/mkrzewic/build/root/lib/libTree.so; 304: 0x0000000830314f3e in TClass::TDeclNameRegistry::AddQualifiedName(char const*) at /usr/include/c++/v1/stdexcept:153 from /home/mkrzewic/build/root/lib/libCore.so; 304: 0x0000000830315169 in TClass::InsertTClassInRegistryRAII::~InsertTClassInRegistryRAII() at /usr/include/c++/v1/stdexcept:153 from /home/mkrzewic/build/root/lib/libCore.so; 304: 0x000000083032618c in TClass::SetUnloaded() at /usr/include/c++/v1/stdexcept:153 from /home/mkrzewic/build/root/lib/libCore.so; 304: 0x00000008302d88cb in ROOT::RemoveClass(char const*, TClass*) at /usr/incl",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13200:82,test,tests,82,https://root.cern,https://github.com/root-project/root/issues/13200,7,"['Test', 'test']","['Test', 'test-stressroofit-batchmode', 'tests']"
Testability,"### Describe the bug. About 1/3 of the tests fail on aarch64 with errors like:; ~~~; cling JIT session error: Failed to materialize symbols: { (main, { __aarch64_ldadd8_acq_rel }) }; cling JIT session error: Failed to materialize symbols: { (main, { _ZN9RooArgSetC1IJEEERK9RooAbsArgDpOT_ }) }; cling JIT session error: Failed to materialize symbols: { (main, { _ZN9RooArgSetC1IJEEERK9RooAbsArgDpOT_ }) }; cling JIT session error: Failed to materialize symbols: { (main, { _ZN9RooArgSetC1IJEEERK9RooAbsArgDpOT_ }) }; ~~~; ### Expected behavior. No failing tests. ### To Reproduce. Build ROOT 6.28.00 for aarch64, run tests. 1. ROOT version 6.28.00; 2. Operating system GNU/Linux RHEL+EPEL 9, Fedora 36. Fedora 37, Fedora 38. Fedora 39 - same result on all; 3. Package build from source. ### Additional context. epel9: 67% tests passed, 434 tests failed out of 1317; f36: 67% tests passed, 435 tests failed out of 1318; f37: 67% tests passed, 435 tests failed out of 1318; f38: 67% tests passed, 436 tests failed out of 1318. Some of the symbols that can't be found are in libgcc:; $ nm /usr/lib/gcc/aarch64-redhat-linux/12/libgcc.a | grep __aarch64_ldadd4_acq_rel; 0000000000000000 T __aarch64_ldadd4_acq_rel",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12294:39,test,tests,39,https://root.cern,https://github.com/root-project/root/issues/12294,11,['test'],['tests']
Testability,### Describe the bug. AddShapeFactor from HistFactory::Sample does not work and causes crashes when used. ### To Reproduce. execute the attached script [test.tar.gz](https://github.com/root-project/root/files/8815596/test.tar.gz). ### Setup. latest ROOT master on archlinux,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10687:153,test,test,153,https://root.cern,https://github.com/root-project/root/issues/10687,2,['test'],['test']
Testability,"### Describe the bug. Distributed RDataFrame roottest has been failing for a while on Mac (11 or 12) on ARM. Here is an example stacktrace (up until the calls to cling). ```; -- TEST COMMAND -- ; cd /Users/sftnight/build/workspace/roottest-pullrequests-build/build/roottest/python/distrdf/dask; /usr/bin/python3 /Users/sftnight/build/workspace/roottest-pullrequests-build/roottest/python/distrdf/dask/test_backend.py --fixcling; -- BEGIN TEST OUTPUT --; Assertion failed: (isInt<33>(Addend) && ""Invalid page reloc value.""), function encodeAddend, file /Users/sftnight/build/workspace/roottest-pullrequests-build/root/interpreter/llvm/src/lib/ExecutionEngine/RuntimeDyld/Targets/RuntimeDyldMachOAArch64.h, line 210.; *** Break *** abort; [/Users/sftnight/build/workspace/roottest-pullrequests-build/build/lib/libCore.6.27.01.so] TUnixSystem::DispatchSignals(ESignals) (no debug info); [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info); [/usr/lib/system/libsystem_pthread.dylib] pthread_kill (no debug info); [/usr/lib/system/libsystem_c.dylib] abort (no debug info); [/usr/lib/system/libsystem_c.dylib] err (no debug info); [/Users/sftnight/build/workspace/roottest-pullrequests-build/build/lib/libCling.6.27.01.so] llvm::RuntimeDyldMachOAArch64::encodeAddend(unsigned char*, unsigned int, llvm::MachO::RelocationInfoType, long long) const (.cold.6) (no debug info); [/Users/sftnight/build/workspace/roottest-pullrequests-build/build/lib/libCling.6.27.01.so] llvm::RuntimeDyldMachOAArch64::encodeAddend(unsigned char*, unsigned int, llvm::MachO::RelocationInfoType, long long) const (no debug info); [/Users/sftnight/build/workspace/roottest-pullrequests-build/build/lib/libCling.6.27.01.so] llvm::RuntimeDyldImpl::resolveLocalRelocations() (no debug info); [/Users/sftnight/build/workspace/roottest-pullrequests-build/build/lib/libCling.6.27.01.so] llvm::RuntimeDyldImpl::resolveRelocations() (no debug info); [/Users/sftnight/build/workspace/roottest-pullrequests-build/build/lib/l",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10061:178,TEST,TEST,178,https://root.cern,https://github.com/root-project/root/issues/10061,3,"['Assert', 'TEST']","['Assertion', 'TEST']"
Testability,"### Describe the bug. Doing:. ```C++; #include <TBufferFile.h>; #include <TFile.h>; #include <TTree.h>; #include <iostream>. void bar() {; auto f = TFile::Open(""/Users/ktf/Downloads/AO2D-2.root"");; char const *dfs[1] = {""DF_2449800039997798139;1""};; ; for (auto di = 0; di < 1; di++) {; auto df = dfs[di];; auto d = (TDirectoryFile*)f->Get(df);; ; std::cout << ""Reading DF "" << df << std::endl;; char const *treeNames[4] = {""O2bc"", ""O2collision"", ""O2fdd"", ""O2ft0""};. for (auto ti = 0; ti < 4; ti++) {; std::cout << ti << std::endl;; std::cout << treeNames[ti] << std::endl;; auto t = (TTree*)d->Get(treeNames[ti]);; t->SetClusterPrefetch(true);; auto branchList = t->GetListOfBranches();; auto e = t->GetEntries();; for (auto bi = 0; bi < branchList->GetEntries(); ++bi) {; auto b = (TBranch*)branchList->At(bi);; assert(b);; int pos = 0;; while (pos < e) {; b->Print();; TBufferFile buf(TBuffer::EMode::kWrite, 32*1024);; auto &r = b->GetBulkRead();; auto s = r.GetBulkEntries(0, buf);; pos += s;; std::cout << ""Read "" << s << "" elements "" << std::endl;; }; }; }; }; }; ```. crashes with:. ```C++; [22971:internal-dpl-aod-reader_t0]: Fatal: fExtraBasket == nullptr && ""fExtraBasket should have been set to nullptr by GetFreshBasket"" violated at line 1523 of `/Users/ktf/src/sw/SOUR; CES/ROOT/ad1ddb8593/0/tree/tree/src/TBranch.cxx'; ```. if one of the branches has more than one basket. Removing `t->SetClusterPrefetch(true)` fixes the issue. Notice how it still works fine with branches which have only one basket. I can provide a file to reproduce if needed. ### Expected behavior. I would expect it to work. ### Setup. Vanilla 6.24.02 on linux or macOS.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8962:814,assert,assert,814,https://root.cern,https://github.com/root-project/root/issues/8962,1,['assert'],['assert']
Testability,"### Describe the bug. During a build of root with tmva-sofie enabled, the build fails with the following error:. In file included from /builddir/build/BUILD/root-6.26.00/tmva/sofie/test/TestCustomModelsFromROOT.cxx:3:; /builddir/build/BUILD/root-6.26.00/redhat-linux-build/tmva/sofie/test/Linear_16_FromROOT.hxx:14:123: error: 'nan' was not declared in this scope; 14 | float tensor_2bias[800] = {-2.14694423e+20, -2.62987679e-27, -3.31015721e+10, -3.77250566e-25, 2721.82764, -0.185639352, -nan, 4.30533447e-18, 2.46234533e+27, -4.90863758e-14, 9355069, -1.40139204e-31, -4.42654684e+15, 7.01436106e+16, 0.104793049, -3234.07764, -2.00034187e+36, -1.6853868e+38, -7.29983234e+27, 1.04351275e-35, -4.85025149e-26, -1.8755401e-25, -1.1517516e+36, -4.63935318e-31, 0.686275303, 1.24939929e-20, 1.69885186e+27, 2.25105193e+21, -364749.844, 1.5719514e-34, 8.914608, 0.017398471, -1.69850501e+13, -5.68424096e+26, 5.46905411e-28, -4550.52832, 9.75181774e-06, 58461.7383, -9.21360134e-21, 3.14942058e+27, 0.000689532433, -7.38048164e-12, 1.63026903e+36, -23409.6191, 7.75302674e+23, -4.05909378e+21, -1.36839554e-21, nan, 3.00273573e-29, 214934480, -2.14694423e+20, -2.62987679e-27, -3.31015721e+10, -3.77250566e-25, 2721.82764, -0.185639352, -nan, 4.30533447e-18, 2.46234533e+27, -4.90863758e-14, 9355069, -1.40139204e-31, -4.42654684e+15, 7.01436106e+16, 0.104793049, -3234.07764, -2.00034187e+36, ....... The floats in the declared array fluctuate violently, and there are both ""nan"" and ""-nan"" in there. This header file is generated during the build. Compare this to the code generated on x86_64:. float tensor_16bias[800] = {-0.142527401, 0.168874308, -0.0887828916, -0.0631441548, -0.0660232753, 0.0544182472, 0.0641550943, 0.0606994219, -0.0223076269, 0.102970138, 0.0258652028, -0.0809393153, -0.0276761875, 0.0546831638, 0.128886178, -0.0795307532, -0.0189131647, -0.120750055, 0.17368494, -0.0492844023, -0.0578795224, 0.0671775565, 0.0123591702, 0.132642269, -0.0525798798, 0.0173827056, 0.06598",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10146:181,test,test,181,https://root.cern,https://github.com/root-project/root/issues/10146,3,"['Test', 'test']","['TestCustomModelsFromROOT', 'test']"
Testability,"### Describe the bug. Following up on #11396, I noticed that a NLL created from a RooSimultaneous in a multi-ranged configuration doesn't give the expected value. In https://github.com/root-project/root/pull/11445, I tried to implement a unit test that was checking exactly that, but the NLL from RooSimultaneous was not consistent with a mathematically equivalent sum of NLLs per category. It is still not clear whether the difference is only a constant factor that doesn't influence the fit result, but this is potentially a but that even has an influence on the results. I suspect that it is actually biasing the fit result, because in multi-ranged fits the NLL is computed using an integral of the top-level PDF that is created with `createIntegral`, and I'm not sure if the integral of a RooSimultaneous is well defined in that context. Please @AlkaidCheng, take note of this, because this is a potential problem for your workflow. ### Expected behavior. The NLL value from a RooSimultaneous in a multi-range configuration should be the same value as the normalized combination of individual NLLs created in the individual categories. ### To Reproduce. Comment out the final part of the `MultiRangeFitWithSplitRange` unit test in `testRooSimultaneous`. ### Setup. Arch Linux with ROOT master. ### Additional context. - The priority level of this issue can be reduced if it turns out that the difference in the NLL value is a constant that doesn't affect the fit result",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11447:243,test,test,243,https://root.cern,https://github.com/root-project/root/issues/11447,3,['test'],"['test', 'testRooSimultaneous']"
Testability,"### Describe the bug. I encounter a problem while using Project or Draw and I want to project a vector from TTree. Assume that all_particles_pt is a vector<double>, all_particles_m is a vector<double> and index is an integer, all of these are branches of a tree.; The command; `tree->Draw(""all_particles_pt"", ""all_particles_m[index] > 100"") `; returns 0 entries, independently on the actual value of the condition, so the histogram will always be empty. I tested with several files and in both with cases where all_particles_pt and all_particles_m are the same or different vectors. ### Expected behavior; I would expect that this would draw/project in an histogram all the entries of all_particles_pt for all the events passing the condition.; This works in ROOT versions <= 6.18.04. ### To Reproduce; I have posted at the end a small pyroot code that creates a tree with 2 vectors and an int and Draw it in an histogram. Both running in 6.20.06 and 6.18.04 should print on the terminal the content of an histogram, with 6.20.06 I see it empty. . ### Setup; ROOT version > 6.20.06 . ### Additional context. I have never seen this problem with ROOT versions <= 6.18.04; I tested 6.22.06 and the bug appears to be still there.; I have observed the same behavior opening the file with ROOT or pyroot, with files created with ROOT or pyroot. Thanks for your help!; Federica; ; =========CODE==================; ```; ##FFabbri 21/06/2021. import re, array, os; import ROOT; from ROOT import TFile, TTree, TH1F; import random. ## function to create a tree with vectors; def create_tree():. m=ROOT.std.vector('double')(); pt=ROOT.std.vector('double')(); index=array.array('i', [0]). f = TFile( 'VectorTree.root', 'RECREATE' ); tree = TTree( 'Tree', 'Tree' ); tree.Branch( 'all_particles_pt', pt); tree.Branch( 'all_particles_mass', m); tree.Branch( 'index', index,'index/I'); ; for i in range(0,500):. pt.clear(); m.clear(); ; number_of_particles=random.randint(1,5); index[0]=random.randint(1,number_of_part",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8497:456,test,tested,456,https://root.cern,https://github.com/root-project/root/issues/8497,1,['test'],['tested']
Testability,"### Describe the bug. If a RooProdPdf is in a RooAddPdf, its values change if one changes the normalization range of its factors with `RooAbsPdf::normRange()`. ### Expected behavior. The values of a RooProdPdf should not depend on the `normRange()` of its factors, because the RooProdPdf is responsible for normalizing itself. ### To Reproduce. Enable the new unit test in `testRooProdPdf` shipped with https://github.com/root-project/root/pull/11485. ### Setup. ROOT master on Arch Linux. ### Additional context. It is important now to fix the issues related to the `RooAbsPdf::normRange()` feature, because as of https://github.com/root-project/root/pull/11455 it is used in multi-range fits. Thus, we need to make sure it's less fragile. After this issue is fixed, it should be verified with `stressRooFit` that things would still work if one were to set the normalization ranges of all PDFs in the computation graph in [RooAbsOptTestStatistic::initSlave()](https://github.com/root-project/root/blob/master/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx#L294) not just the top-level PDF:. For debugging, it could be helpful to replace the RooProdPdfs with `RooFixedProdPdf` objects, which explicitly represent the conputation graph of a RooProdPdf for a given normalization set without internal caching:; ```C++; if(auto prodPdf = dynamic_cast<RooProdPdf *>(pdf)) {; auto normalizedPdf = std::make_unique<RooFixedProdPdf>(*prodPdf, currNormSet);. replaceArg(*normalizedPdf, *pdf);. newNodes.emplace_back(std::move(normalizedPdf));. continue;; }; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11486:365,test,test,365,https://root.cern,https://github.com/root-project/root/issues/11486,2,['test'],"['test', 'testRooProdPdf']"
Testability,"### Describe the bug. If you generate a toy dataset from a model that is a product of sums, you still get the `Evaluating RooAddPdf without a defined normalization set` warnings, even though the normalization set is defined. ### Expected behavior. There should be no such warnings, because the normalization set is defined. When you generate toy data for a given set of observables. ### To Reproduce. ```c++; void testProdOfSum(); {; RooWorkspace ws{""ws""};; ws.factory(""Gaussian::gs(x[0,10], mu[2, 0, 10], sg[2, 0.1, 10])"");; ws.factory(""Exponential::ex(x, lm[-0.1, -10, 0])"");; ws.factory(""SUM::gs_ex(f[0.5, 0, 1] * gs, ex)"");; ws.factory(""Gaussian::gs_1(x, mu_1[4, 0, 10], sg_1[2, 0.1, 10])"");; ws.factory(""PROD::pdf(gs_1, gs_ex)"");. std::unique_ptr<RooDataSet>data{ws.pdf(""pdf"")->generate(*ws.var(""x""), 10000)};; }; ```. ### Setup. ROOT `master` on Arch Linux. ### Additional context. This issue was observed when running the reproducer code from the related JIRA issues [ROOT-9436](https://sft.its.cern.ch/jira/browse/ROOT-9436) and [ROOT-10483](https://sft.its.cern.ch/jira/browse/ROOT-10483). If this GitHub issue is fixed, this should also be taken as a opportunity to implement a unit test that covers the linked JIRA issues, which was already fixed in 6.24 but there is yet no unit test that covers it. There are also two more JIRA issues that might be related to this one:; * https://sft.its.cern.ch/jira/browse/ROOT-9649 (*by now, it was checked that it's unrelated*); * https://sft.its.cern.ch/jira/browse/ROOT-10814 (*by now, it was checked that it's unrelated*)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11476:414,test,testProdOfSum,414,https://root.cern,https://github.com/root-project/root/issues/11476,3,['test'],"['test', 'testProdOfSum']"
Testability,"### Describe the bug. Reported in https://root-forum.cern.ch/t/new-pyroot-cant-pickle-derived-class-types/45415. ### Expected behavior. That the derived class is pickled without error / a proper error message appears. ### To Reproduce. In Derived.py:; ```python; import ROOT. class Derived(ROOT.TH1F):; def __reduce__(self):; return (self.__class__, ()); ```; In test.py:; ```python; from Derived import Derived; import pickle; pickle.dumps(Derived()); ```. Running test.py throws a segfault in the `__reduce__` implementation:; ```; #7 0x00007f6aeb43a8ac in TClass::StreamerTObject(TClass const*, void*, TBuffer&, TClass const*) () from /home/vpadulan/Programs/rootproject/rootinstall/v6-24-00/lib/libCore.so; #8 0x00007f6aeaaba5a6 in TBufferFile::WriteObjectClass(void const*, TClass const*, bool) () from /home/vpadulan/Programs/rootproject/rootinstall/v6-24-00/lib/libRIO.so; #9 0x00007f6aeaac1b74 in TBufferIO::WriteObjectAny(void const*, TClass const*, bool) () from /home/vpadulan/Programs/rootproject/rootinstall/v6-24-00/lib/libRIO.so; #10 0x00007f6add1ca55f in op_reduce(CPyCppyy::CPPInstance*, _object*) () from /home/vpadulan/Programs/rootproject/rootinstall/v6-24-00/lib/libROOTPythonizations3_8.so; #11 0x00007f6af8cab364 in cfunction_vectorcall_NOARGS () from /lib64/libpython3.8.so.1.0; #12 0x00007f6af8cb58e4 in PyVectorcall_Call () from /lib64/libpython3.8.so.1.0; #13 0x00007f6aeb6c8bf5 in CPyCppyy::im_call(_object*, _object*, _object*) () from /home/vpadulan/Programs/rootproject/rootinstall/v6-24-00/lib/libcppyy3_8.so; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8438:363,test,test,363,https://root.cern,https://github.com/root-project/root/issues/8438,2,['test'],['test']
Testability,"### Describe the bug. Running a `Snapshot` in distributed mode creates as many partial snapshots as distributed tasks. Each task will append its task id to the original file name, so that different tasks do not overwrite each other's data. The input file name is modified in-place in each task, but this leads to a situation where a task can receive a modified file name and modify it further, thus leading to wrong file names after the Snapshot. The following reproducer; ```python; import ROOT; RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. from dask.distributed import Client, LocalCluster. import os. def test(client):. df = RDataFrame(10, daskclient=client).Define(""a"",""1.""). snap_df = df.Snapshot(""dummy_distributed"", ""dummy_distributed.root""); print(snap_df._headnode.inputfiles). tmp_files = [f""dummy_distributed_{i}.root"" for i in range(2)]. if __name__ == ""__main__"":; client = Client(LocalCluster(n_workers=2, threads_per_worker=1, processes=True)); for i in range(2):; test(client); ```; leads to; ```; $: python repro.py; ['dummy_distributed_0.root', 'dummy_distributed_1.root']; ['dummy_distributed_1_0.root', 'dummy_distributed_0_1.root']; ```. Interestingly, this happens only with Dask. ### Expected behavior; Each task can properly process the Snapshot in isolation. ### Setup; ROOT >= 6.26",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10390:627,test,test,627,https://root.cern,https://github.com/root-project/root/issues/10390,2,['test'],['test']
Testability,"### Describe the bug. See -> [concise video showcase of the bug](https://drive.google.com/file/d/1tRHdUNdXSxzGJhdSPX6aYDn3Ecg95h_E/view?usp=share_link). Wrong bin is being highlighted, when using `SetShowProjection()` with 2D histogram being with logarithmic axis.; Even when the mouse hovers over the far left bin, the bin with the value 1 is being highlighted. ### Expected behavior. Only the bin should be highlighted where mouse coursor hovers, as it happens when using linear scale. ### To Reproduce; ```cpp; void test() {; auto h = new TH2F(""h"", ""title;x;y"", 100, 0.001, 5, 100, 0., 5);; for(int i=0; i < 100000; i++){; double x = gRandom->Uniform(0., 5.);; double y = gRandom->Uniform(0., 5.);; h->Fill(x, y);; }. auto c = new TCanvas();; h->Draw(""colz"");; h->SetStats(0);; c->SetLogx();; // right-click on the histogram and SetShowProjectionY afterwards; }; ```. `$ root test.cpp`; EDIT: In the newer versions of ROOT with the web-based `TBrowser` to reproduce, run:; `$ root --web=off test.cpp`. ### Setup; 1. ROOT version: 6.26/06; 2. OS: Centos 7 (NOTE: Mac users are unaffected, as there seem to be no highlighting at all). ### Additional context; 1. Initially submited on forum:; https://root-forum.cern.ch/t/setshowprojection-highlights-the-wrong-position-with-logarithmic-axis/53965/3",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12497:247,log,logarithmic,247,https://root.cern,https://github.com/root-project/root/issues/12497,5,"['log', 'test']","['logarithmic', 'logarithmic-axis', 'test']"
Testability,### Describe the bug. See https://github.com/cms-sw/cmsdist/pull/6690#issuecomment-788782759. ### Expected behavior. `typedef` forward declaration should be skipped as it refers to a specialization that we cannot forward declare. ### To Reproduce. See test coming up.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7390:252,test,test,252,https://root.cern,https://github.com/root-project/root/issues/7390,1,['test'],['test']
Testability,"### Describe the bug. Test failure on i686 only with numpy 1.24.1. Fails during package build in Fedora rawhide.; Build architectures are i686, x86_64, aarch64, ppc64le and s390x.; So the failure is on the only 32 bit architecture, so could be 32 bit related. ~~~; 115/1232 Test #69: pyunittests-pyroot-roofit-roodataset-numpy ..........................***Failed 2.72 sec; test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range); Test that rows with out-of-range values are skipped, both for ... ; RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby ; Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University; All rights reserved, please read http://roofit.sourceforge.net/license.txt; [#0] WARNING:DataHandling -- FAIL; test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy); Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events; ok; test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted); Test exporting to numpy and then importing back a weighted dataset. ... ok; test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic); Basic test with a real value and a category. ... ok; test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight); Test if the optional computation of derived weights works. ... ok; test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted); Test with a weighted dataset. ... ok; ======================================================================; FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range); Test that rows with out-of-range values are skipped, both for; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""/b",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12162:22,Test,Test,22,https://root.cern,https://github.com/root-project/root/issues/12162,6,['Test'],"['Test', 'TestRooDataSetNumpy']"
Testability,"### Describe the bug. The analytical integral of the RooPoisson is implemented wrongly for the case where the boundaries are `0 < a < 1e30` and `b >= 1e30`. ### Expected behavior. The integral should be correct. ### To Reproduce. The wrong integral can be reproduced with this code snippet. ```C++; void testPoissonIntegral() {. const double mu = 100;; const double inf = std::numeric_limits<double>::max();. // 1. Should be 1 because the probability to have x greater than 100000 is; // basically zero.; std::cout << getPoissonIntegral(0, 100000, mu) << std::endl;. // 2. Should be around 0.5, as the range of x is from the mean of the; // Poisson to basically infinity.; std::cout << getPoissonIntegral(100, 100000, mu) << std::endl;. // 3. Should be the same as the first integral; std::cout << getPoissonIntegral(0, inf, mu) << std::endl;. // 3. Should be the same as the second integral but it isn't!; std::cout << getPoissonIntegral(100, inf, mu) << std::endl;; }; ```. ### Setup. Any setup will do. ### Additional context. The problem is most likely that in the analytical integration code for the RooPoisson, it is hardcoded to return 1.0 if the upper boundary is infinite:; https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L102. An addition code branch is required for the case where the upper bound is infinite and the lower bound greater than zero.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10868:304,test,testPoissonIntegral,304,https://root.cern,https://github.com/root-project/root/issues/10868,1,['test'],['testPoissonIntegral']
Testability,"### Describe the bug. The following tests fail:; ```; 428 - gtest-tree-ntuple-v7-test-ntuple-types (Failed); 1052 - tutorial-v7-concurrentfill.cxx (Failed); 1054 - tutorial-v7-histops.cxx (Failed); 1055 - tutorial-v7-perf.cxx (Failed); 1056 - tutorial-v7-perfcomp.cxx (Failed); 1057 - tutorial-v7-simple.cxx (Failed); 1060 - tutorial-rcanvas-rcanvas_mt.cxx (Failed); 1063 - tutorial-rcanvas-rh1.cxx (Failed); 1064 - tutorial-rcanvas-rh1_large.cxx (Failed); 1065 - tutorial-rcanvas-rh1_twoscales.cxx (Failed); 1066 - tutorial-rcanvas-rh2.cxx (Failed); 1067 - tutorial-rcanvas-rh2_colz.cxx (Failed); 1068 - tutorial-rcanvas-rh2_large.cxx (Failed); 1069 - tutorial-rcanvas-rh3.cxx (Failed); 1070 - tutorial-rcanvas-rh3_large.cxx (Failed); 1071 - tutorial-rcanvas-rlegend.cxx (Failed); 1082 - tutorial-rcanvas-subpads.cxx (Failed); 1577 - roottest-root-core-execStatusBitsCheck (Failed); ```. AFAICS most fail with `clang/lib/Serialization/ASTReaderDecl.cpp:1000: void clang::ASTDeclReader::VisitFunctionDecl(clang::FunctionDecl *): Assertion 'Reader.getContext().getLangOpts().Modules && ""already deserialized this template specialization""' failed.`, except `gtest-tree-ntuple-v7-test-ntuple-types` and `roottest-root-core-execStatusBitsCheck` which cannot find data members. ### How to reproduce?. Build with `-DCMAKE_CXX_STANDARD=17 -Druntime_cxxmodules=OFF`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13058:36,test,tests,36,https://root.cern,https://github.com/root-project/root/issues/13058,4,"['Assert', 'test']","['Assertion', 'test-ntuple-types', 'tests']"
Testability,"### Describe the bug. Then changing the Address of a Branch in TTree it seems to sometimes still use the old memory address after the call. As a minimal example here we create a TNamed, set it as branch but directly after delete it and set the branch address to `nullptr` before filling:. ```c++; #include <TTree.h>; #include <TFile.h>. #include <iostream>. int main() {; auto* tf = TFile::Open(""test.root"", ""RECREATE"");; auto* t = new TTree(""tree"", ""tree"");. TNamed *f = new TNamed(""foo"", ""bar"");; auto* b = t->Branch(""FileMetaData"", &f);; ; delete f;; f = nullptr;; b->SetAddress(nullptr);. t->Fill();; t->Write();; tf->Close();; return 0;; }; ```. When running this with address sanitizer it gives the following error with 6.24:. ```; g++ -g `root-config --cflags --libs` -fsanitize=address -o mwe mwe.C && ./mwe ; =================================================================; ==934566==ERROR: AddressSanitizer: heap-use-after-free on address 0x606000112a68 at pc 0x7fcd23e920f0 bp 0x7ffcc8579ab0 sp 0x7ffcc8579aa8; READ of size 4 at 0x606000112a68 thread T0; #0 0x7fcd23e920ef in int TStreamerInfoActions::WriteBasicType<unsigned int>(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*) root/io/io/src/TStreamerInfoActions.cxx:252; #1 0x7fcd239c8950 in TStreamerInfoActions::TConfiguredAction::operator()(TBuffer&, void*) const root/io/io/inc/TStreamerInfoActions.h:123; #2 0x7fcd239c8950 in TBufferFile::ApplySequence(TStreamerInfoActions::TActionSequence const&, void*) root/io/io/src/TBufferFile.cxx:3572; #3 0x7fcd21fdd5dc in TBranch::FillImpl(ROOT::Internal::TBranchIMTHelper*) root/tree/tree/src/TBranch.cxx:891; #4 0x7fcd22016bfa in TBranchElement::FillImpl(ROOT::Internal::TBranchIMTHelper*) root/tree/tree/src/TBranchElement.cxx:1265; #5 0x7fcd22016441 in TBranchElement::FillImpl(ROOT::Internal::TBranchIMTHelper*) root/tree/tree/src/TBranchElement.cxx:1290; #6 0x7fcd22016441 in TBranchElement::FillImpl(ROOT::Internal::TBranchIMTHelper*) root/tree/tree/src/TBranchElemen",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8027:396,test,test,396,https://root.cern,https://github.com/root-project/root/issues/8027,1,['test'],['test']
Testability,"### Describe the bug. There are several issues when compiling root 6.24.00 on ppc64le. 1. The fix for the altivec __vector keyword that was previously backported (from LLVM 10) was lost in the LLVM 9 upgrade (#8069). 2. After fixing that, running root 6.24.00 on ppc64le fails with an assert: https://github.com/root-project/root/blob/3b0d691a83cfe12c28d50a74d9d8b2c7da703c6c/interpreter/cling/lib/Interpreter/IncrementalExecutor.cpp#L81. 3. Trying to request the large code model rather than assert fail (https://github.com/ellert/root/commit/a71528ca1d5af631d49251ad9525f9d6a875ce7d) does not work. The build fails with a segmentation fault at the very end of the build when the hsimple.C macro is run to create the hsimple.root file. 4. Testing to run with the default code model (i.e. neither trying to change to the large model, nor assert if the model is not the large one) avoids the segmentation fault above, but many tests fail with:; ```; Relocation R_PPC64_REL32 overflow; UNREACHABLE executed at /builddir/build/BUILD/root-6.24.00/interpreter/llvm/src/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp:800!; ```. So it really needs the large code model. Enabling the large code model for ppc64le did not result in a segmentation fault in previous versions of root, so this is a regression. ### Expected behavior; Working root on ppc64le. ### To Reproduce; Compile root 6.24.00 for ppc64le. ### Setup; 1. ROOT version: 6.24.00; 2. Operating system: Fedora Linux 33",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8072:285,assert,assert,285,https://root.cern,https://github.com/root-project/root/issues/8072,5,"['Test', 'assert', 'test']","['Testing', 'assert', 'tests']"
Testability,"### Describe the bug. When adding two histograms, the weights associated with the bin contents of those histograms should also be added appropriately. `THnSparse` does not do this. It still reports the weights of the first histogram, ignoring the second. ### Expected behavior. The sum of weights should include the weights of both histograms that were added together. ### To Reproduce. The script is here: https://www.dropbox.com/s/j5wvixrmdtdx3b5/testTHNadd.C?dl=0; (GitHub apparently does not allow attaching .C files). ```bash; root -b -l -q testTHNadd.C; ```. This script shows the bug by comparing two cases:; 1. Filling one histogram twice; 2. Filling two histograms once and adding them. The output is:; ```; THnSparseT<TArrayD> (*0x6c127c0): ""hs"" ""CASE 1""; 8 dimensions, 2 entries in 2 filled bins; axis 0 """": 10 bins (-5..10), variable bin sizes; axis 1 """": 10 bins (-10..70), variable bin sizes; axis 2 """": 5 bins (-1000..3000), variable bin sizes; axis 3 """": 30 bins (-3..3), variable bin sizes; axis 4 """": 10 bins (0..5), variable bin sizes; axis 5 """": 4 bins (0..2), variable bin sizes; axis 6 """": 18 bins (0..2), variable bin sizes; axis 7 """": 12 bins (0..5), variable bin sizes; with error calculation; Sum(w)=2, Sum(w^2)=2.5; axis 0: Sum(w*x)=3.5, Sum(w*x^2)=6.5; axis 1: Sum(w*x)=3.5, Sum(w*x^2)=6.5; axis 2: Sum(w*x)=3.5, Sum(w*x^2)=6.5; axis 3: Sum(w*x)=3.5, Sum(w*x^2)=6.5; axis 4: Sum(w*x)=3.5, Sum(w*x^2)=6.5; axis 5: Sum(w*x)=3.5, Sum(w*x^2)=6.5; axis 6: Sum(w*x)=3.5, Sum(w*x^2)=6.5; axis 7: Sum(w*x)=3.5, Sum(w*x^2)=6.5; coordinates stored in 1 chunks of 16384 entries; 3.07559e-09 of bins filled using 6.61576e-05 of memory compared to an array; Bin at (5,2,2,21,3,3,10,3) = 0.5 (+/- 0.5); Bin at (5,2,2,26,5,5,19,5) = 1.5 (+/- 1.5); 2; THnSparseT<TArrayD> (*0x57c3b10): ""hs"" ""CASE 2""; 8 dimensions, 2 entries in 2 filled bins; axis 0 """": 10 bins (-5..10), variable bin sizes; axis 1 """": 10 bins (-10..70), variable bin sizes; axis 2 """": 5 bins (-1000..3000), variable bin s",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11333:449,test,testTHNadd,449,https://root.cern,https://github.com/root-project/root/issues/11333,2,['test'],['testTHNadd']
Testability,"### Describe the bug. When building root 6.28.00 for RHEL+EPEL 8 on ppc64le there are build and test failures. Test failures happens in compiled unit tests (gtest), tests using interpreded root and tests using python. All tests fail with the error ""pure virtual method called"" and the backtrace all indicate the same line:. ~~~; #9 llvm::orc::ExecutionSession::lookup (this=0x1099d16e0, SearchOrder=std::vector of length 1, capacity 1 = {...}, Name=..., RequiredState=<optimized out>) at /builddir/build/BUILD/root-6.28.00/interpreter/llvm/src/lib/ExecutionEngine/Orc/Core.cpp:2040; ~~~. https://github.com/root-project/root/blob/db1e83871f8a34574c4980d94c5e5ab667fa8672/interpreter/llvm/src/lib/ExecutionEngine/Orc/Core.cpp#L2031-L2043. 187 tests fail with the error ""pure virtual method called"". Most of them are related to dataframe or roofit, but not exclusively. These errors do not happen on the other RHEL+EPEL 8 architecture (x86_64).; These errors do not happen on ppc64le on other systems: RHEL+EPEL 9, Fedora 36, 37, 38, 39. It is specific to ppc64le on RHEL+EPEL 8. ### Expected behaviour. Root should behave the same on RHEL+EPEL 8 ppc64le and RHEL+EPEL 8 x86_64. ### To Reproduce. Steps to reproduce the behavior:; 1. Build root 6.28.00 for RHEL+EPEL 8 on ppc64le using the default compiler -- g++ (GCC) 8.5.0 20210514 (Red Hat 8.5.0-16); 2. Run tests. ### Setup; 1. ROOT version 6.28.00; 2. Operating system RHEL+EPEL 8 ppc64le; 3. Built from source. ### Additional context. How the build crashes with the SOFIE parser option enabled:. ~~~; ===========================================================; There was a crash (#5 0x00007fffa8fac284 in SigHandler (sig=<optimized out>) at /builddir/build/BUILD/root-6.28.00/core/unix/src/TUnixSystem.cxx:395).; This is the entire stack trace of all threads:; ===========================================================; #0 0x00007fffa84f2f04 in waitpid () from /lib64/glibc-hwcaps/power9/libc-2.28.so; #1 0x00007fffa845a38c in do_system () fro",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12372:96,test,test,96,https://root.cern,https://github.com/root-project/root/issues/12372,7,"['Test', 'test']","['Test', 'test', 'tests']"
Testability,"### Describe the bug. When running make test on a root build on Fedora 34 (using gcc 11) several tests fail that do not fail on Fedora 33 (using gcc 10). ### Expected behavior; No test failures. ### To Reproduce; 1. Build root 6.24.00 on Fedora 34.; 2. Run make test. ### Setup; 1. ROOT version: 6.24.00; 2. Operating system: Fedora Linux 34. ### Additional context; The kind of errors vary. But many of them seems to be related to disagreement on the size of data structures. Here are some examples: [test.log.gz](https://github.com/root-project/root/files/6413774/test.log.gz). Some examples: ; ```; Error in <TInterpreter::InspectMembers>: TClass and cling disagree on the size of the class ROOT::Experimental::RAttrLine, respectively 368 400; Error in <TInterpreter::InspectMembers>: TClass and cling disagree on the size of the class ROOT::Experimental::RAttrColor, respectively 64 72; Error in <TInterpreter::InspectMembers>: TClass and cling disagree on the size of the class ROOT::Experimental::RAttrBase, respectively 64 72; ```; and; ```; python3.9: /builddir/build/BUILD/root-6.24.00/roofit/roofitcore/src/RooArgSet.cxx:108: static void* RooArgSet::operator new(size_t): Assertion `sizeof(RooArgSet) == bytes' failed.; ```; Does anyone have any idea what is going on?",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8071:40,test,test,40,https://root.cern,https://github.com/root-project/root/issues/8071,9,"['Assert', 'log', 'test']","['Assertion', 'log', 'test', 'tests']"
Testability,"### Describe the bug. When running the tests after compiling root 6.24.00 many of the root7 tests fail:; ```; The following tests FAILED:; 	972 - tutorial-v7-concurrentfill.cxx (Failed); 	973 - tutorial-v7-draw.cxx (Failed); 	975 - tutorial-v7-draw_frame.cxx (Failed); 	976 - tutorial-v7-draw_legend.cxx (Failed); 	977 - tutorial-v7-draw_mt.cxx (Failed); 	979 - tutorial-v7-draw_rh1.cxx (Failed); 	980 - tutorial-v7-draw_rh1_large.cxx (Failed); 	981 - tutorial-v7-draw_rh2.cxx (Failed); 	982 - tutorial-v7-draw_rh2_colz.cxx (Failed); 	983 - tutorial-v7-draw_rh2_large.cxx (Failed); 	984 - tutorial-v7-draw_rh3.cxx (Failed); 	985 - tutorial-v7-draw_rh3_large.cxx (Failed); 	986 - tutorial-v7-draw_subpads.cxx (Failed); 	989 - tutorial-v7-histops.cxx (Failed); 	996 - tutorial-v7-perf.cxx (Failed); 	997 - tutorial-v7-perfcomp.cxx (Failed); 	998 - tutorial-v7-simple.cxx (Failed); Errors while running CTest; ```; The error is the same for all of them:; ```; 973/1121 Test #972: tutorial-v7-concurrentfill.cxx ......................................***Failed 3.25 sec; Processing /builddir/build/BUILD/root-6.24.00/tutorials/v7/concurrentfill.cxx...; root.exe: /builddir/build/BUILD/root-6.24.00/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReaderDecl.cpp:976: void clang::ASTDeclReader::VisitFunctionDecl(clang::FunctionDecl*): Assertion `Reader.getContext().getLangOpts().Modules && ""already deserialized this template specialization""' failed.; CMake Error at /builddir/build/BUILD/root-6.24.00/x86_64-redhat-linux-gnu/RootTestDriver.cmake:237 (message):; error code: Subprocess aborted; ```; This happens both with gcc 10 on Fedora 33 (defaults to C++ 14) and gcc 11 on Fedora 34 (defaults to C++ 17). ### Expected behavior; Successful tests. ### To Reproduce; Steps to reproduce the behavior:; 1. Build root with -Droot7:BOOL=ON; 2. Run make test. ### Setup; 1. ROOT version: 6.24.00; 2. Operating system: Fedora Linux 33 and 34; 3. Failures during ""make test"" run during RPM package build (",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8073:39,test,tests,39,https://root.cern,https://github.com/root-project/root/issues/8073,4,"['Test', 'test']","['Test', 'tests']"
Testability,"### Describe the bug. While investigating some test failures I found that even though a class is in a library's dictionary, and autoloading works in most cases, the autoloading fails if the first member function used is a new or delete and the class has non-standard new and delete operators. ### Expected behavior. Failures like these should not happen:. ```; 870/1231 Test #852: tutorial-roofit-rf509_wsinteractive .................................***Failed 1.39 sec; Processing /builddir/build/BUILD/root-6.26.00/tutorials/roofit/rf509_wsinteractive.C...; RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby ; Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University; All rights reserved, please read http://roofit.sourceforge.net/license.txt; IncrementalExecutor::executeFunction: symbol '_ZN9RooArgSetdlEPv' unresolved while linking [cling interface function]!; You are probably missing the definition of RooArgSet::operator delete(void*); Maybe you need to load the corresponding shared library?; Symbol found in '/builddir/build/BUILD/root-6.26.00/redhat-linux-build/lib/libRooFitCore.so.6.26.00'; did you mean to load it with '.L /builddir/build/BUILD/root-6.26.00/redhat-linux-build/lib/libRooFitCore.so.6.26.00'?; CMake Error at /builddir/build/BUILD/root-6.26.00/redhat-linux-build/RootTestDriver.cmake:227 (message):; error code: 1. 833/1153 Test #804: tutorial-roofit-rf408_RDataFrameToRooFit ............................***Failed 3.01 sec; Processing /builddir/build/BUILD/root-6.26.00/tutorials/roofit/rf408_RDataFrameToRooFit.C...; RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby ; Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University; All rights reserved, please read http://roofit.sourceforge.net/license.txt; IncrementalExecutor::executeFunction: symbol '_ZN10RooDataSetnwEm' unresolved while linking [cling interface function]!; You are probably missing the definition of RooDataSet::operator new(unsigned lon",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10203:47,test,test,47,https://root.cern,https://github.com/root-project/root/issues/10203,2,"['Test', 'test']","['Test', 'test']"
Testability,"### Describe the bug. ``` 1018 - tutorial-roofit-rf208_convolution-py (Failed); 1020 - tutorial-roofit-rf210_angularconv-py (Failed); 1021 - tutorial-roofit-rf211_paramconv-py (Failed); 1052 - tutorial-roofit-rf512_wsfactory_oper-py (Failed); ```; if ROOT is not built with fft3. ### Expected behavior. The tutorials are skipped. ### To Reproduce. Configure with testing, without fft, run tests. ### Additional context; Add to `fftw3_veto` in `tutorials/CMakeLists.txt`",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8261:363,test,testing,363,https://root.cern,https://github.com/root-project/root/issues/8261,2,['test'],"['testing', 'tests']"
Testability,"### Describe the bug. ```; Processing /data/sftnight/workspace/root-benchmark/BUILDTYPE/Release/COMPILER/default/LABEL/performance-cc8/SPEC/default/root/tutorials/math/multivarGaus.C...; In file included from input_line_10:1:; /data/sftnight/workspace/root-benchmark/BUILDTYPE/Release/COMPILER/default/LABEL/performance-cc8/SPEC/default/root/tutorials/math/multivarGaus.C:12:15: error: no type named 'GSLRandomEngine' in namespace 'ROOT::Math'; ROOT::Math::GSLRandomEngine rnd;; ~~~~~~~~~~~~^; CMake Error at /data/sftnight/workspace/root-benchmark/BUILDTYPE/Release/COMPILER/default/LABEL/performance-cc8/SPEC/default/build/RootTestDriver.cmake:237 (message):; error code: 1; ```. ```; Directory: /data/sftnight/workspace/root-benchmark/BUILDTYPE/Release/COMPILER/default/LABEL/performance-cc8/SPEC/default/build/runtutorials; ""tutorial-math-exampleFunction-py"" start time: May 11 01:28 CEST; Output:; ----------------------------------------------------------. ****************************************; Minimizer is Minuit / Migrad; MinFCN = 1.687e-08; NDf = 0; Edm = 3.37793e-08; NCalls = 146; Par_0 = 0.999952 +/- 1.00372 ; Par_1 = 0.999892 +/- 2.00986 ; Error in <TUnixSystem::FindDynamicLibrary>: libMathMore[.so | .dll | .dylib | .sl | .dl | .a] does not exist in /data/sftnight/workspace/root-benchmark/BUILDTYPE/Release/COMPILER/default/LABEL/performance-cc8/SPEC/default/build/lib:/data/sftnight/workspace/root-benchmark/BUILDTYPE/Release/COMPILER/default/LABEL/performance-cc8/SPEC/default/build/lib:.:/data/sftnight/workspace/root-benchmark/BUILDTYPE/Release/COMPILER/default/LABEL/performance-cc8/SPEC/default/build/lib:/lib64/tls/haswell/x86_64:/lib64/tls/haswell:/lib64/tls/x86_64:/lib64/tls:/lib64/haswell/x86_64:/lib64/haswell:/lib64/x86_64:/lib64:/usr/lib64/tls/haswell/x86_64:/usr/lib64/tls/haswell:/usr/lib64/tls/x86_64:/usr/lib64/tls:/usr/lib64/haswell/x86_64:/usr/lib64/haswell:/usr/lib64/x86_64:/usr/lib64:/data/sftnight/workspace/root-benchmark/BUILDTYPE/Release/COMPILER/defau",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8145:68,benchmark,benchmark,68,https://root.cern,https://github.com/root-project/root/issues/8145,4,['benchmark'],['benchmark']
Testability,"### Describe the bug. cling crashes when running some LHCb process involving using python within C++ code called from python; Here is the top of the stack trace :; ```; #11 0x00007f10460f38cc in clang::Sema::getTemplateDepth(clang::Scope*) const () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.28.00-a8528/x86_64-centos7-gcc11-dbg/lib/libCling.so; #12 0x00007f1045b8e15f in clang::Sema::EnterTemplatedContext(clang::Scope*, clang::DeclContext*) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.28.00-a8528/x86_64-centos7-gcc11-dbg/lib/libCling.so; #13 0x00007f1045a8a95c in clang::Sema::ActOnCXXEnterDeclaratorScope(clang::Scope*, clang::CXXScopeSpec&) () from /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.28.00-a8528/x86_64-centos7-gcc11-dbg/lib/libCling.so; ```. ### Expected behavior. No crash obviously. ### To Reproduce. files lhcbRunEnv and test-XMLSummary-exception.py are attached to the report. I had to zip together into material.zip to please github... ```; source /cvmfs/lhcb.cern.ch/lib/LbEnv.sh; source lhcbRunEnv; python /tmp/test-XMLSummary-exception.py; ```. ### Setup; 1. ROOT version : LCG 103, hence ROOT 6.28.00-a8528; 2. Linux, centos7; 3. cvmfs. ### Additional context; The same is working under LCG 102. Also it seems to be related to using a complicated stack where python calls C++ which calls python which calls C++ again, with ROOT dictionary at pretty much all levels. Moreover, no LHCb code is used in the example, only Gaudi, but of course LHCb dictionaries are still loaded and a key point to the failure.; [material.zip](https://github.com/root-project/root/files/11397560/material.zip)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12758:853,test,test-XMLSummary-exception,853,https://root.cern,https://github.com/root-project/root/issues/12758,2,['test'],['test-XMLSummary-exception']
Testability,"### Describe the bug. numpy.object was deprecated in numpy 1.20 and has been removed in numpy 1.24. ### Expected behavior. No failing tests. ### To Reproduce. The following tests FAILED:; 	 54 - pyunittests-pyroot-pyz-rdataframe-asnumpy (Failed); 	1087 - tutorial-dataframe-df026_AsNumpyArrays-py (Failed). Test failing due to:. AttributeError: module 'numpy' has no attribute 'object'. File ""/builddir/build/BUILD/root-6.26.10/redhat-linux-build/lib/ROOT/_pythonization/_rdataframe.py"", line 138, in GetValue; tmp = numpy.empty(len(cpp_reference), dtype=numpy.object). ### Setup. 1. ROOT version 6.26.10; 2. Operating system Fedora 38; 3. How you obtained ROOT: Failures when running tests during package build from source. ### Additional context. From numpy 1.24 release notes:. The deprecation for the aliases np.object, np.bool, np.float, np.complex, np.str, and np.int is expired (introduces NumPy 1.20). Some of these will now give a FutureWarning in addition to raising an error since they will be mapped to the NumPy scalars in the future.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12148:134,test,tests,134,https://root.cern,https://github.com/root-project/root/issues/12148,4,"['Test', 'test']","['Test', 'tests']"
Testability,"### Describe the bug; <!--; A clear and concise description of what the wrong behavior is.; -->. Due to the logic in `TTree::GetCacheAutoSize`, if `fAutoFlush == 0` then the size of the `TTreeCache` is set to 0 which in turn disables it. However there are separate mechanisms to disable the `TTreeCache` if desired (e.g. `TTree::SetCacheSize`) and even if `fAutoFlush == 0`, when reading over the network, we can benefit greatly from `TTreeCache`'s pre-fetching. ### Additional context; <!--; Add any other context about the problem here.; -->. - discussion and debugging: https://mattermost.web.cern.ch/root/pl/uzub3wwt3bdxxcdu4jmxxyrmby; - summary: https://mattermost.web.cern.ch/root/pl/xmtuq55j3pnc7cp7f8zyhf5ujw",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8713:108,log,logic,108,https://root.cern,https://github.com/root-project/root/issues/8713,1,['log'],['logic']
Testability,"### Describe the bug; <!--; A clear and concise description of what the wrong behavior is.; -->. Our nightly conda builds are affected. An example of the broken tests is [here](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/183/testReport/junit/projectroot.cling/array/roottest_cling_array_runarray1/). The relevant part of the output:. ```; cd /test_job/roottest_build/cling/array; /usr/bin/timeout -s USR2 270s /opt/conda/envs/test-root/bin/root -e '#define NDEBUG' -e '#define ClingWorkAroundMissingDynamicScope' -e '#define ClingWorkAroundUnnamedInclude' -e '#define ClingWorkAroundMissingSmartInclude' -e '#define ClingWorkAroundNoDotInclude' -e '#define ClingWorkAroundMissingAutoLoadingForTemplates' -e '#define ClingWorkAroundAutoParseUsingNamespace' -e '#define ClingWorkAroundTClassUpdateDouble32' -e '#define ClingWorkAroundAutoParseDeclaration' -e '#define ClingWorkAroundMissingUnloading' -e '#define ClingWorkAroundBrokenUnnamedReturn' -e '#define ClingWorkAroundUnnamedDetection2' -e 'gSystem->SetBuildDir(""/test_job/roottest_build/cling/array"",true)' -e 'gSystem->AddDynamicPath(""/test_job/roottest_build/cling/array"")' -e 'gROOT->SetMacroPath(""/test_job/roottest/cling/array"")' -e 'gInterpreter->AddIncludePath(""-I/test_job/roottest_build/cling/array"")' -e 'gSystem->AddIncludePath(""-I/test_job/roottest_build/cling/array"")' -q -l -b /test_job/roottest/cling/array/runarray1test.C; -- BEGIN TEST OUTPUT --. ROOT_cli_0:1:9: warning: 'NDEBUG' macro redefined [-Wmacro-redefined]; #define NDEBUG; ^; <command line>:1:9: note: previous definition is here; #define NDEBUG 1; ^; ```. ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->. To reproduce it's sufficient to compile ROOT with `-DCMAKE_BUILD_TYPE=Release -Droottest=OFF` ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6575:161,test,tests,161,https://root.cern,https://github.com/root-project/root/issues/6575,3,['test'],"['test-root', 'testReport', 'tests']"
Testability,"### Describe the bug; <!--; A clear and concise description of what the wrong behavior is.; -->. The current logic to construct a TChain in a distributed task to pass to the RDF constructor is at; https://github.com/root-project/root/blob/b494a9b145246b66868fa38e2fd3e1f37fa73c47/bindings/experimental/distrdf/python/DistRDF/Backends/Base.py#L166-L168. But this is too simple, since it doesn't account for the common use case of a TChain with no name and sub trees with different names:; ```py; >>> import ROOT; >>> RDF = ROOT.RDF.Experimental.Distributed.Spark.RDataFrame; >>> c = ROOT.TChain(); >>> c.Add(""10entries.root/entries""); 1; >>> c.Add(""other10entries.root/otherentries""); 1; >>> df = RDF(c); >>> df.Count().GetValue(); Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; File ""/home/vpadulan/Programs/rootproject/rootbuild/devdebugtest/lib/DistRDF/Proxy.py"", line 127, in GetValue; headnode.backend.execute(generator); File ""/home/vpadulan/Programs/rootproject/rootbuild/devdebugtest/lib/DistRDF/Backends/Base.py"", line 135, in execute; ranges = headnode.build_ranges(); File ""/home/vpadulan/Programs/rootproject/rootbuild/devdebugtest/lib/DistRDF/HeadNode.py"", line 307, in build_ranges; clustersinfiles = Ranges.get_clusters(self.treename, self.inputfiles); File ""/home/vpadulan/Programs/rootproject/rootbuild/devdebugtest/lib/DistRDF/Ranges.py"", line 220, in get_clusters; entries = t.GetEntriesFast(); AttributeError: 'TObject' object has no attribute 'GetEntriesFast'; ```. The error is due to the current sub tree not being found (since the input chain has no name). ### Expected behavior; <!--; A clear and concise description of what you expected to happen.; -->. Distributed RDataFrame should support this use case. ### Setup; <!--; 1. ROOT version; 2. Operating system; 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself.; -->; ROOT master built on Fedora32",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8750:109,log,logic,109,https://root.cern,https://github.com/root-project/root/issues/8750,1,['log'],['logic']
Testability,"### Describe the bug; <!--; Setup snap ""root-framework"" (723) security profiles for auto-connections (cannot obtain mount security snippets for snap ""root-framework"": shared-memory plug with ""private: true"" cannot be connected if ""/dev/shm"" is a symlink).; -->. ### Expected behavior; <!--; Root-framework can be installed.; -->. ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. sudo daemonize /usr/bin/unshare --fork --pid --mount-proc /lib/systemd/systemd --system-unit=basic.target; 2. exec sudo nsenter -t $(pidof systemd) -m -p su - $LOGNAME; 3. snap version; snap 2.56.2+22.04ubuntu1; snapd 2.56.2+22.04ubuntu1; series 16; ubuntu 22.04; kernel 5.10.102.1-microsoft-standard-WSL2; -->. ### Setup; <!--; 1. ROOT version: v6-26-06; 2. Operating system:; Distributor ID: Ubuntu; Description: Ubuntu 22.04.1 LTS; Release: 22.04; Codename: jammy; 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself:; snap install root-framework; -->. ### Additional context; <!--; NA.; -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11338:551,LOG,LOGNAME,551,https://root.cern,https://github.com/root-project/root/issues/11338,1,['LOG'],['LOGNAME']
Testability,"### Describe the bug; A crash is produced if you type `.Class` in the ROOT prompt. ```; ===========================================================================; struct std::atomic<_Tp *>; SIZE: (NA) FILE: atomic LINE: -1; List of member variables --------------------------------------------------; root.exe: /opt/root_src/interpreter/llvm/src/tools/clang/include/clang/AST/TypeNodes.def:100: clang::TypeInfo clang::ASTContext::getTypeInfoImpl(const clang::Type*) const: Assertion `!T->isDependentType() && ""should not see dependent types here""' failed.; ```. ### Expected behavior; No crash. Also, if you type `.Class TTree` it should only print TTree's class info, not all the list of classes. In analogy to .class TTree vs .class. ### To Reproduce; `.Class; `; or `.Class TTree`. ### Setup; ```; ------------------------------------------------------------------; | Welcome to ROOT 6.27/01 https://root.cern |; | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on Jan 12 2022, 10:17:19 |; | From heads/master@v6-25-01-2870-gdac9b6398d |; | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |; | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------; ```. ### Additional context; https://github.com/root-project/root/pull/10121",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10140:475,Assert,Assertion,475,https://root.cern,https://github.com/root-project/root/issues/10140,1,['Assert'],['Assertion']
Testability,"### Describe the bug; As seen in #7488, changing headers / data structures in Clang doesn't rebuild Clad and causes very weird test failures. ### Expected behavior; The build system should detect the changes and rebuild Clad as well as `libCling.so` as needed. ### To Reproduce; Apply / Revert #7488 to see a crash or just touch Clang header files and observe that Clad isn't rebuilt.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7977:127,test,test,127,https://root.cern,https://github.com/root-project/root/issues/7977,1,['test'],['test']
Testability,"### Describe the bug; Because of #6563 and the fix in CMake we need to move from linking `${PYTHON_LIBRARIES}` to instead depend on `Python3::Python`. See https://gitlab.kitware.com/cmake/cmake/-/issues/21293. This fixes test failures:; ```; cling::DynamicLibraryManager::loadLibrary(): dlopen(/Users/sftnight/build/night/LABEL/mac1015/SPEC/noimt/V/6-22/build/lib/libPyMVA.so, 9): Library not loaded: @rpath/Python3.framework/Versions/3.8/Python3; Referenced from: /Users/sftnight/build/night/LABEL/mac1015/SPEC/noimt/V/6-22/build/lib/libPyMVA.so; Reason: image not found; ```. ### Expected behavior; RPath correctly set. ### To Reproduce; Jenkins nightly master or 6.22 on macos15, https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-v6-22-00-patches/LABEL=mac1015,SPEC=noimt,V=6-22/. ### Setup. ### Additional context",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6753:221,test,test,221,https://root.cern,https://github.com/root-project/root/issues/6753,1,['test'],['test']
Testability,### Describe the bug; Configuring a build with a different ROOT build already in the environment causes CTest to test the wrong build. I wonder how many devs are not testing their changes but that of some completely unrelated build :-(. ### Expected behavior; `cmake -Droottest=On` should have `ctest` test *that* build. ### To Reproduce; ```; $ which root; $ mkdir ../1; $ cd ../1; $ . /home/axel/build/root/master/deb/bin/thisroot.sh; $ cmake -Droottest=On ../src; $ grep ROOTSYS CMakeCache.txt ; ROOTSYS:INTERNAL=/home/axel/build/root/master/deb; ```. ### Setup; 1. ROOT version: master; 2. Operating system: Ubuntu 20.04; 3. How you obtained ROOT: I built it myself.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7081:113,test,test,113,https://root.cern,https://github.com/root-project/root/issues/7081,3,['test'],"['test', 'testing']"
Testability,"### Describe the bug; Hi All,. I am trying to build ROOT project as well as tests, but there is an error occurred when building, and it maybe related to pytest version. When I use same build steps but different pytest version, ROOT project build success with pytest version 6.1.1, but SofieCompileModels_PyTorch.vcxproj fails to compile with pytest version 6.2.5, the error as belows. I have checked if pytest version is 6.1.1, there is no pymva folder generated after cmake commands, and for pytest version 6.2.5, pymva folder generated after cmake commands. Could you please help have a look at this issue? Thanks a lot!; ![image](https://user-images.githubusercontent.com/17844901/147636210-34c8102b-8380-4b92-828d-097a6af7829d.png). C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(155,5): error MSB3073: The command ""setlocal [F:\gitP\root-project\root\build_amd64\tmva\pymva\test\SofieCompileModels_PyTorch.vcxproj]; C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(155,5): error MSB3073: .\emitFromPyTorch [F:\gitP\root-project\root\build_amd64\tmva\pymva\test\SofieCompileModels_PyTorch.vcxproj]; C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(155,5): error MSB3073: if %errorlevel% neq 0 goto :cmEnd [F:\gitP\root-project\root\build_amd64\tmva\pymva\test\SofieCompileModels_PyTorch.vcxproj]; C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(155,5): error MSB3073: :cmEnd [F:\gitP\root-project\root\build_amd64\tmva\pymva\test\SofieCompileModels_PyTorch.vcxproj]; C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(155,5): error MSB3073: endlocal & call :cmErrorLevel %errorlevel% & goto :cmDone [F:\gitP\root-project\root\build_amd64\tmva\pymva\test\So",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9487:76,test,tests,76,https://root.cern,https://github.com/root-project/root/issues/9487,2,['test'],"['test', 'tests']"
Testability,"### Describe the bug; Hi All,. I have follow [Build from source](https://root.cern/install/#build-from-source) to build root project on Windows with VS 2019, but hit below CMake Error while building, it seems the error details are in FREETYPE-configure-out.log, and I have attached the log.; [FREETYPE-configure-out.log](https://github.com/root-project/root/files/7617109/FREETYPE-configure-out.log); Could you please help have a look? Thanks a lot!. Error:; CMake Error at F:/root-project/root_build/FREETYPE-prefix/src/FREETYPE-stamp/FREETYPE-configure-Release.cmake:49 (message):; Command failed: 1; ; 'C:/Program Files/CMake/bin/cmake.exe' '-G' 'Visual Studio 16 2019' '-DCMAKE_INSTALL_PREFIX=F:/root-project/root_install' '-GVisual Studio 16 2019' '-AWin32' '-Thost=x64' '-DCMAKE_GENERATOR_INSTANCE:INTERNAL=C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise' 'F:/root-project/root_build/FREETYPE-prefix/src/FREETYPE'; ; See also; ; F:/root-project/root_build/FREETYPE-prefix/src/FREETYPE-stamp/FREETYPE-configure-*.log; ; ### Expected behavior; Successfully build root project without errors. ### To Reproduce; 1. Open a x86 Native Tools Command Prompt for VS 2019; 2. git clone --branch latest-stable https://github.com/root-project/root.git root_src; 3. mkdir root_build root_install && cd root_build; 4. cmake -G""Visual Studio 16 2019"" -A Win32 -Thost=x64 -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_INSTALL_PREFIX=../root_install ../root_src; 5. cmake --build . --config Release --target install. ### Setup; 1. Operating system: Windows 10; 2. Visual studio version: 16.11.6; 2. How you obtained ROOT: built it myself.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9347:257,log,log,257,https://root.cern,https://github.com/root-project/root/issues/9347,5,['log'],['log']
Testability,"### Describe the bug; Hi All,. I have follow below steps to build root project with msvc on AddressSanitizer mode, but hit below errors. And I have seen ""WARNING ""Address sanitizer builds only tested with gcc and Clang"" on CMakeLists. So I am not sure if root support asan mode with msvc. Could you please help have a look and confirm it? Thanks a lot!. (The error message shows ""The items cannot be built in parallel."" but I have tried build single parallel still hit this error); Error:; ```; CustomBuild:; ""The build of 'F:\gitP\root-project\root\build_x86_asan2\CMakeFiles\ecd3d997f4f89e0243288555110c5833\onepcm.rule' depends on 'F:\GITP\ROOT-PROJECT\ROOT\BUILD_X86_ASAN2\ETC\ALLDICT.CXX.PCH' which is produced by the build of 'F:\gitP\root-project\root\build_x86_asan2\CMakeFiles\1b80de060c1a00976f83382f69cf2b7f\allDict.cxx.pch.rule'. The items cannot be built in parallel.""; Generating etc/allDict.cxx.pch; ; Generating PCH for core core\clingutils core\imt core\rint core\thread graf2d\asimage graf2d\gpad graf2d\gpadv7 graf2d\graf graf2d\postscript graf2d\primitivesv7 graf2d\win32gdk graf3d\g3d graf3d\gl gui\fitpanel gui\fitpanelv7 gui\gui hist\hist hist\histdrawv7 hist\histpainter hist\histv7 hist\spectrum hist\spectrumpainter io\io math\genetic math\genvector math\mathcore math\matrix math\minuit math\minuit2 math\physics math\smatrix math\vecops net\net roofit\RDataFrameHelpers roofit\roofit roofit\roofitcore roofit\roostats tmva\sofie tmva\tmva tmva\tmvagui tree\dataframe tree\ntuple tree\tree tree\treeplayer tree\treeviewer; ; =================================================================; ==6948==ERROR: AddressSanitizer: allocator is out of memory trying to allocate 0x203ffff bytes; #0 0x6684e141 (C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.29.30133\bin\HostX64\x86\clang_rt.asan_dynamic-i386.dll+0x1003e141); #1 0x693e0308 in llvm::safe_realloc(void *, unsigned int) (F:\gitP\root-project\root\build_x86_asan2\bin\libCling.dll+0x11",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9445:193,test,tested,193,https://root.cern,https://github.com/root-project/root/issues/9445,1,['test'],['tested']
Testability,"### Describe the bug; I get a crash with ROOT after a (stupid) test of undo sequences. ### Expected behavior; No crash. ### To Reproduce; ```; root -l; root [0] int x; (int) 0; root [1] .undo; root [2] x; (int) 0; root [3] .undo; root [4] .undo; root [5] x; input_line_13:2:3: error: use of undeclared identifier 'x'; (x); ^; Error in <HandleInterpreterException>: Error evaluating expression (x).; Execution of your code was aborted.; root [6] x; input_line_15:2:3: error: use of undeclared identifier 'x'; (x); ^; Error in <HandleInterpreterException>: Error evaluating expression (x).; Execution of your code was aborted.; root [7] int x; (int) 0; root [8] int x; (int) 0; root [9] x; (int) 0; root [10] x; (int) 0; root [11] x; (int) 0; root [12] x; (int) 0; root [13] .undo; root [14] x; (int) 0; root [15] .undo 5; root [16] x; input_line_24:2:3: error: use of undeclared identifier 'x'; (x); ^; terminate called after throwing an instance of 'cling::CompilationException'; what(): Error evaluating expression (x); ```. ### Setup; ```; ------------------------------------------------------------------; | Welcome to ROOT 6.27/01 https://root.cern |; | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on Jan 12 2022, 10:17:19 |; | From heads/master@v6-25-01-2870-gdac9b6398d |; | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |; | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10178:63,test,test,63,https://root.cern,https://github.com/root-project/root/issues/10178,1,['test'],['test']
Testability,"### Describe the bug; I have root installed from EPEL8-testing, version 6.24.02.; I also have installed a package called perl-Unicode-Map, which provides a file /usr/bin/map.; When TInterpreter::AutoParse finds ; ```; #include <map> ; ```; in my headers it tries to parse /usr/bin/map. ```; In file included from /usr/include/zevis/ZStyleScheme.h:12:; /usr/bin/map:1:2: error: invalid preprocessing directive; #!/usr/bin/perl -w; ^; /usr/bin/map:2:2: error: invalid preprocessing directive; #$Id: map,v 1.20 1998/02/11 23:58:27 schwartz Exp $; ```. ### Expected behavior; /usr/bin/map is not parsed. ### To Reproduce; Eh, not sure if I can provide a short reproducer immediately. ### Setup; 1. ROOT 6.24.02 from EPEL8 testing; 2. CentSO8 Stream; 3. `dnf install` / binary download / you built it yourself. Best regards,. Andrii",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8904:55,test,testing,55,https://root.cern,https://github.com/root-project/root/issues/8904,2,['test'],['testing']
Testability,"### Describe the bug; I try to build the current master with the `-Dbuiltin_nlohmannjson=on`, but I obtain a lot of error messages [(make.log)](https://drive.google.com/file/d/161nAtyhRd3VFMud4V-F4xSQoype3T-Lt/view?usp=sharing). ### Expected behavior; The build succeeds. ### Setup. 1. ROOT version: current master (452f82119a07fb873a7b050004477d9d9f93120d); 2. Operating system: Archlinux, gcc 12.1.1",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11236:138,log,log,138,https://root.cern,https://github.com/root-project/root/issues/11236,1,['log'],['log']
Testability,"### Describe the bug; I'm installing the most recent ROOT 6.22.06 from source archive on Arch Linux. At progress around 60% the compilation fails suggesting to look for details in . XROOTD-prefix/src/XROOTD-stamp/XROOTD-build-err.log. > CMake Error at /opt/root/build-root-6.22.06/XROOTD-prefix/src/XROOTD-stamp/XROOTD-build-Release.cmake:49 (message):; Command failed: 2; '/usr/bin/make'; See also; /opt/root/build-root-6.22.06/XROOTD-prefix/src/XROOTD-stamp/XROOTD-build-*.log; make[2]: *** [CMakeFiles/XROOTD.dir/build.make:131: XROOTD-prefix/src/XROOTD-stamp/XROOTD-build] Error 1 ; make[1]: *** [CMakeFiles/Makefile2:7256: CMakeFiles/XROOTD.dir/all] Error 2; make[1]: *** Waiting for unfinished jobs.... The file contains this infomation:. > [I] No git repository info found. Trying to interpret VERSION_INFO; [I] src/XrdVersion.hh successfully generated; /opt/root/build-root-6.22.06/XROOTD-prefix/src/XROOTD/src/XrdPosix/XrdPosix.cc: In function ‘int XrdPosix_Fstat(int, stat*)’:; /opt/root/build-root-6.22.06/XROOTD-prefix/src/XROOTD/src/XrdPosix/XrdPosix.cc:379:27: error: ‘_STAT_VER’ was not declared in this scope; 379 | : Xunix.Fstat64(_STAT_VER, fildes, (struct stat64 *)buf));; | ^~~~~~~~~; /opt/root/build-root-6.22.06/XROOTD-prefix/src/XROOTD/src/XrdPosix/XrdPosix.cc: In function ‘int XrdPosix_Lstat(const char*, stat*)’:; /opt/root/build-root-6.22.06/XROOTD-prefix/src/XROOTD/src/XrdPosix/XrdPosix.cc:563:27: error: ‘_STAT_VER’ was not declared in this scope; 563 | ? Xunix.Lstat64(_STAT_VER, path, (struct stat64 *)buf); | ^~~~~~~~~; /opt/root/build-root-6.22.06/XROOTD-prefix/src/XROOTD/src/XrdPosix/XrdPosix.cc: In function ‘int XrdPosix_Stat(const char*, stat*)’:; /opt/root/build-root-6.22.06/XROOTD-prefix/src/XROOTD/src/XrdPosix/XrdPosix.cc:891:26: error: ‘_STAT_VER’ was not declared in this scope; 891 | ? Xunix.Stat64(_STAT_VER, path, (struct stat64 *)buf); | ^~~~~~~~~; make[5]: *** [src/CMakeFiles/XrdPosixPreload.dir/build.make:108: src/CMakeFiles/XrdPosixPreload.dir/Xr",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7292:230,log,log,230,https://root.cern,https://github.com/root-project/root/issues/7292,2,['log'],['log']
Testability,"### Describe the bug; If an exception happens on the C++ side during the execution of an RDF task within a Dask worker process, this is not properly propagated. Most times it leads to some kind of unrepairable error. Take the following example. ```python; from dask.distributed import LocalCluster, Client; import ROOT; RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. def create_connection():; cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=False); client = Client(cluster); return client. if __name__ == ""__main__"":; connection = create_connection(); df = RDataFrame(100, daskclient=connection); df = df.Define(""x"", ""1"").Define(""y"", ""ROOT::RVecF{1., 2., 3.}""); g = df.Graph(""x"", ""y""); gv = g.GetValue(); ```. The expected error here is that the graph cannot be filled with columns of mixed scalar/vector types. Running the code above gives; ```; $: python test.py; RDataFrame::Run: event loop was interrupted; Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor; 	which can be called without argument, objects of this class; 	can not be read with the current library. You will need to; 	add a default constructor before attempting to read it.; Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved; Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved; Error in <TClass::New>: cannot create object of class runtime_error; Error in <TBufferFile::ReadObject>: could not create object of class runtime_error; *** Break *** bus error; ```; Followed by the usual gdb stacktrace produced by ROOT. This happens because Dask tries to serialize the error object in order to send it back to the user. But the exception cannot be serialized by ROOT as stated in the warning. ### Expected behavior; The C++ exceptions should be properly propagated to the user. ### Setup; ROOT master; GCC 12",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11050:894,test,test,894,https://root.cern,https://github.com/root-project/root/issues/11050,1,['test'],['test']
Testability,"### Describe the bug; It's not possible to catch exceptions in the interactive `root` prompt on Apple Silicon, nor does `TRint` take care of uncaught exceptions. ### Expected behavior; The user should be able to catch exceptions, or at least the fallback handler should prevent process termination. ### To Reproduce; The most simple examples are; ```; root [0] try { throw 1; } catch (...) { }; libc++abi.dylib: terminating with uncaught exception of type int; ```; and; ```; root [0] throw 1;; libc++abi.dylib: terminating with uncaught exception of type int; ```; (which should be handled in `TRint::HandleTermInput()`). ### Setup; ROOT 6.25/01 on `macphsft25`. ### Additional context; Plenty:; * #7100 fixed catching exceptions from constructors on macOS (and has tests, including unwinding through multiple JIT recursions).; * [ROOT-10703](https://sft.its.cern.ch/jira/browse/ROOT-10703) and [ROOT-10962](https://sft.its.cern.ch/jira/browse/ROOT-10962) for the original reports. #### Edit:; Same in 6.22/07, tested on `macphsft24`",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7541:767,test,tests,767,https://root.cern,https://github.com/root-project/root/issues/7541,2,['test'],"['tested', 'tests']"
Testability,"### Describe the bug; On exit of program, program can crash from SIGSEGV triggered by `std::_Sp_counted_base` called during processing destructor of `ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface`. ### Expected behavior; Since `ROOT::RDF::RNode` is based on smart pointers, and user is not trying to hack pointers itself, crash should not happen. ### To Reproduce; This problem arose from a larger framework, I made a minimal reproduce:; 1. Decompress [test.tar.gz](https://github.com/root-project/root/files/10410351/test.tar.gz) in anywhere you want, `cd <...>`; 2. `mkdir build && cd build && cmake .. && cmake --build .`; 3. Run `./makesample` to generate sample to be used.; 4. Run `./main ../example/toy.json` : Crash; 5. Run `./main ../example/toy1.json` : Won't crash. ### Setup; I have 2 setups, one can reproduce the problem and another won't. #### The one can reproduce; Fedora 37, with GCC `12.2.1 20221121 (Red Hat 12.2.1-4) (GCC)`; ```; ------------------------------------------------------------------; | Welcome to ROOT 6.26/10 https://root.cern |; | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on Nov 16 2022, 10:42:54 |; | From tags/v6-26-10@v6-26-10 |; | With g++ (GCC) 12.2.1 20220819 (Red Hat 12.2.1-2) |; | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------; ```; ROOT is installed from fedora official repository `dnf install root ...` (on my own machine). #### Another that finish step 4 without crashing; CentOS Linux release 7.9.2009 (Core), GCC `gcc version 11.2.0 (GCC)`; ```; ------------------------------------------------------------------; | Welcome to ROOT 6.26/06 https://root.cern |; | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on Jul 28 2022, 18:08:51 |; | From tags/v6-26-06@v6-26-06 |; | With g++ (GCC) 11.2.0 |; | Try '.help', '.demo', '.license', '.credi",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12023:478,test,test,478,https://root.cern,https://github.com/root-project/root/issues/12023,2,['test'],['test']
Testability,"### Describe the bug; One time, I made a typo when writing something in the interpreter that made whole ROOT crash. ### Expected behavior; A warning is issued instead of crashing. ### To Reproduce; ```; root [0] for(auto& p : pn9) cout << std::bitset<14>(p) << endl;; ROOT_prompt_0:1:50: error: cannot initialize an array element of type 'void *' with an rvalue of type 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &)'; for(auto& p : pn9) cout << std::bitset<14>(p) << endl;; ^~~~; root.exe: /opt/root_src/interpreter/cling/lib/Interpreter/DynamicLookup.cpp:764: clang::Expr* cling::EvaluateTSynthesizer::BuildDynamicExprInfo(clang::Expr*, bool): Assertion `ExprAddresses && ""Could not build the void* array""' failed.; ```; ### Setup; ```; ------------------------------------------------------------------; | Welcome to ROOT 6.25/01 https://root.cern |; | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on Jun 09 2021, 21:20:28 |; | From heads/master@v6-25-01-1189-g1ca221f010 |; | With |; | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------. ```. ### Additional context; Not sure why, maybe cause I built in 'debug mode' or it is another version, but I have another computer where it does not crash.; ```; root -b; ------------------------------------------------------------------; | Welcome to ROOT 6.25/01 https://root.cern |; | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on Jun 08 2021, 21:53:04 |; | From heads/master@v6-25-01-1189-g1ca221f010 |; | With |; | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------. root [0] for(auto& p : pn9) cout << std::bitset<14>(p) << endl;; ROOT_prompt_0:1:50: error: cannot initialize an array element of type 'void *' with an rvalue of type 'basic_ost",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8389:698,Assert,Assertion,698,https://root.cern,https://github.com/root-project/root/issues/8389,1,['Assert'],['Assertion']
Testability,"### Describe the bug; RDataFrame constructed within a function with a TChain becomes inaccessible when returned, unless TChain is returned with it (segfault occurs). ### Expected behavior; RDataFrame constructed with a TChain should be able to be returned from a function. ### To Reproduce; ```python; import ROOT; import glob. def build_rdataframe(filepath, tree):; chain = ROOT.TChain(tree); for file in glob.glob(filepath):; chain.Add(file); Rdf = ROOT.RDataFrame(chain). return chain, Rdf. chain, df = build_rdataframe(""path/to/files"", ""tree""); print(df.Count().GetValue()); # works. def build_rdataframe_2(filepath, tree): ; chain = ROOT.TChain(tree); for file in glob.glob(filepath):; chain.Add(file); Rdf = ROOT.RDataFrame(chain). return Rdf. df = build_rdataframe_2(""path/to/files"", ""tree""); print(df.Count().GetValue()); # segfault; ```. ### Setup; 1. ROOT version 6.24.00 / Python 3.10.4 | ROOT version 6.20.06 / Python 2.7.5; 2. Arch Linux / Centos7; 3. ROOT downloaded from conda-forge / Arch linux repository / lxplus; (tested on multiple OSs/environments)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10965:1033,test,tested,1033,https://root.cern,https://github.com/root-project/root/issues/10965,1,['test'],['tested']
Testability,"### Describe the bug; ROOT crashes when trying to compile a file where I add a tstring with a c string with a c++ string. ```; root.exe: /opt/root_src/core/metacling/src/TCling.cxx:2326: virtual void TCling::RegisterModule(const char*, const char**, const char**, const char*, const char*, void (*)(), const FwdDeclArgsToKeepCollection_t&, const char**, Bool_t, Bool_t): Assertion `cling::Interpreter::kSuccess == compRes && ""Payload code of a dictionary could not be parsed correctly.""' failed.; ```; ### Expected behavior; No crash, just a compiler error. ### To Reproduce; - Download this test [test.txt](https://github.com/root-project/root/files/6702369/test.txt); - Rename it to .cpp; - `root -l test.cpp+`. ### Setup; ```; ------------------------------------------------------------------; | Welcome to ROOT 6.25/01 https://root.cern |; | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on Jun 08 2021, 21:53:04 |; | From heads/master@v6-25-01-1189-g1ca221f010 |; | With |; | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8524:371,Assert,Assertion,371,https://root.cern,https://github.com/root-project/root/issues/8524,5,"['Assert', 'test']","['Assertion', 'test']"
Testability,"### Describe the bug; ROOT v6.24.06 is currently failing to build in Ubuntu 22.04. This appears to be due to an upgrade to [OpenSSL 3.0](https://www.openssl.org/blog/blog/2021/09/07/OpenSSL3.Final/) with this new LTS release; you can see for example a similar issue [here](https://github.com/chris2511/xca/issues/320). The specific build error happens while building XROOTD. (I apologize in advance if this is not the correct place to report the issue.). ### Expected behavior; ROOT builds without error using latest OpenSSL. ### To Reproduce; 1) Clean install of Ubuntu 22.04; 2) `sudo apt update`, followed by `sudo apt upgrade` and `sudo apt install` the required libraries for building ROOT; 3) Download ROOT source code and unzip; 4) Configure & build (using system Python 3.10). ### Setup; ROOT version: v6-24-06; Operating system: Ubuntu 22.04 LTS (on Windows Subsystem for Linux / WSL2); How you obtained ROOT: building from source. ### Additional context; `root-v6-24-06/src/ROOT-build/XROOTD-prefix/src/XROOTD-stamp/XROOTD-build-*.log` files are attached:; [XROOTD-build-out.log](https://github.com/root-project/root/files/8613858/XROOTD-build-out.log); [XROOTD-build-err.log](https://github.com/root-project/root/files/8613857/XROOTD-build-err.log). The specific error from `XROOTD-build-err.log`:; `root-v6-24-06/src/ROOT-build/XROOTD-prefix/src/XROOTD/src/XrdCrypto/XrdCryptosslgsiAux.cc:901:32: error: invalid conversion from ‘const rsa_st*’ to ‘RSA*’ {aka ‘rsa_st*’} [-fpermissive]`. Finally, if it is helpful, the build script being used is [here](https://github.com/ezradlesser/heppy/blob/master/external/root/build.sh), with the only modification to the script being the `root_version` variable: `root_version=6-24-06`",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10518:1041,log,log,1041,https://root.cern,https://github.com/root-project/root/issues/10518,6,['log'],['log']
Testability,"### Describe the bug; TGaxis::SetNdivisions is recommended to set the maximum number of digits of a TGaxis is instance, however its behavior leads to wrong data being printed, depending on the argument. https://root.cern.ch/doc/master/classTGaxis.html#a6b93d66237560f7b11701402a1a446ce. See here, for N=1,2,3,4, how the TGaxis completely changes:. ![image](https://user-images.githubusercontent.com/10653970/187413185-1a8923ff-aded-4317-a110-ff10e5ad404e.png). Weird things also happen with `SetStripDecimals(kFALSE)`:. ![image](https://user-images.githubusercontent.com/10653970/187413563-86b4c3c8-7d91-48e9-a70f-3e9826dca1b8.png). ### Expected behavior; Calling SetNdivisions or SetMaxDigits should not change the TGaxis being painted, otherwise it leads to wrong data being shown. ### To Reproduce; ```cpp; #include ""TGraph.h""; #include ""TF1.h""; #include ""TCanvas.h""; #include ""TStyle.h""; #include ""TGaxis.h"". void testgraphaxis(bool strip = kTRUE); {; new TCanvas();. TF1 *f2=new TF1(""fcal"",""pol2"",0,45);; f2->SetParameters(6.975e3,-6.339e1,3.10185e-1);; f2->Draw();. TF1 *f1=new TF1(""fcalinv"",""pol2"",f2->Eval(45),f2->Eval(0));; f1->SetParameters(2.239e2,-4.985e-2,2.55121e-6);//I had to invert my original graph and fit again to get the new parameters. TGraph* gr = new TGraph();; gr->SetPoint(0,5,0.2);; gr->SetPoint(1,7,0.5);; gr->GetXaxis()->SetLimits(0,45);; gr->GetYaxis()->SetRangeUser(0,1);. gStyle->SetStripDecimals(strip);. for (int N = 0; N < 12; ++N) {; new TCanvas();; gr->Draw(""APL"");. gPad->Modified();; gPad->Update();. TGaxis *A1 = new TGaxis(gPad->GetUxmin(),gPad->GetUymax(),gPad->GetUxmax(),gPad->GetUymax(),""fcalinv"",510,""-"");; if (N!=0) A1->SetNdivisions(N*1000000 + (A1->GetNdiv()%1000000));; A1->Draw();; }; }; ```. ### Setup; ```; ------------------------------------------------------------------; | Welcome to ROOT 6.27/01 https://root.cern |; | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on Jan 11 2022, 18:39:08 |; | ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11280:918,test,testgraphaxis,918,https://root.cern,https://github.com/root-project/root/issues/11280,1,['test'],['testgraphaxis']
Testability,### Describe the bug; The MSVC team recently added root as part of RWC testing. And we found some errors when building root with '/std:c++latest' and '/permissive-'. Could you please help look at this issue or provide some workarounds? Thanks in advance.; ### Expected behavior; root project could build successfully under '/std:c++latest' and '/permissive-' mode.; ### To Reproduce; 1. git clone https://github.com/root-project/root F:\gitP\root-project\root; 2. mkdir F:\gitP\root-project\root\build_amd64; 2. set CL= /std:c++latest or set CL= /permissive-; 3. set PATH=%PATH:C:\Strawberry\perl\bin;=%; 4. msbuild /m /p:Platform=x64 /p:Configuration=Release ALL_BUILD.vcxproj /t:Rebuild; ### Setup; Visual Studio 2019 16.11.8; ### Additional context; Build.log:; /std:c++latest: [build.log](https://github.com/root-project/root/files/7889383/build.log); /permissive-: [build.log](https://github.com/root-project/root/files/7889386/build.log),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9607:71,test,testing,71,https://root.cern,https://github.com/root-project/root/issues/9607,6,"['log', 'test']","['log', 'testing']"
Testability,"### Describe the bug; The following code when run with the interpreter crashes (on the line with std::seed_seq). Names are with underscore to avoid clashes.; ```; constexpr uint32_t seed_bits = 19937;; constexpr uint32_t seed_32_count = 19937 / 32 + bool(19937 % 32);. std::random_device _dev;; uint32_t _seed[seed_32_count];; for (uint32_t i = 0; i < seed_32_count; ++i) {; 	_seed[i] = _dev();; }; std::seed_seq _seq(_seed, _seed + seed_32_count);; ```. This may be related to handling of stack variables. (Calling alloca will also crash the interpreter, but that is a corner case, I suppose.). ### Expected behavior; Initialize a seed sequence for use with `std::mt19937` (`TRandom3` should suffice? But that doesn't give the whole seed vector). ### To Reproduce; Input the above line by line into interpreter. Also note that writing `_seed` to see a pointer or content on the last line will also crash the interpreter. . ### Setup; ROOT 32 bit 6.26; Windows (Not yet tested on linux).; Binary install. ### Additional context; Should be sufficient here.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10386:970,test,tested,970,https://root.cern,https://github.com/root-project/root/issues/10386,1,['test'],['tested']
Testability,"### Describe the bug; The logic to retrieve the input files of a distributed RDataFrame is faulty at; https://github.com/root-project/root/blob/76fa2000a41ede1080650393f66f336f9baa8255/bindings/experimental/distrdf/python/DistRDF/Node.py#L744-L748. Because the globbing done by `glob.glob` is not the same as that done by `TChain`, in general. ### Expected behavior. The list of input files is actually used to retrieve the clusters of all the trees used to create the distributed RDataFrame in; https://github.com/root-project/root/blob/76fa2000a41ede1080650393f66f336f9baa8255/bindings/experimental/distrdf/python/DistRDF/Node.py#L363-L368. So in general this extra globbing step is not needed. A way to solve this is to directly create the TChain with whatever string the user passes (i.e. with globbing characters) and retrieve the clusters from the TChain rather than traversing the list of files coming out of the globbing. ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->. ### Setup; <!--; 1. ROOT version; 2. Operating system; 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself.; -->. ### Additional context; <!--; Add any other context about the problem here.; -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8490:26,log,logic,26,https://root.cern,https://github.com/root-project/root/issues/8490,1,['log'],['logic']
Testability,"### Describe the bug; The type name normalization `TClassEdit::GetNormalizedName` does not strip the allocator off STL classes on Windows. On Linux, it works. ### Expected behavior; On both, Windows and Linux the following should be true. ```; std::string n;; TClassEdit::GetNormalizedName(n, ""std::vector<float, class std::allocator<float>>"");; n == std::string(""vector<float>"");; ```. Note that even on Windows the allocator _is_ stripped for `std::vector<float, std::allocator<float>>` (i.e. without prefixing `std::allocator` by `class`). ### Setup; <!--; 1. Master; 2. Arch Linux / Windows 10; 3. Compiled from sources; -->. ### Additional context; The issue was found while testing PR #6548",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6607:680,test,testing,680,https://root.cern,https://github.com/root-project/root/issues/6607,1,['test'],['testing']
Testability,"### Describe the bug; Using the TGCommandLinePlugin, if I type ""T"" or ""new TBr"" and press tab for autocompletion, I get a crash:. ```; /opt/root_src/interpreter/llvm/src/tools/clang/include/clang/AST/DeclBase.h:2330: void clang::DeclContext::setMustBuildLookupTable(): Assertion `this == getPrimaryContext() && ""should only be called on primary context""' failed. 1 __GI_raise raise.c 51 0x7ffff6176fb7 ; 2 __GI_abort abort.c 79 0x7ffff6178921 ; 3 __assert_fail_base assert.c 92 0x7ffff616848a ; 4 __GI___assert_fail assert.c 101 0x7ffff6168502 ; 5 (anonymous namespace)::ClingASTImporter::Imported(clang::Decl *, clang::Decl *) 0x7fffea0cd56c ; 6 clang::ASTImporter::Import(clang::Decl *) 0x7fffec671055 ; 7 cling::ExternalInterpreterSource::ImportDecl(clang::Decl *, clang::DeclarationName&, clang::DeclarationName&, clang::DeclContext const *) 0x7fffea0cd5f4 ; 8 cling::ExternalInterpreterSource::completeVisibleDeclsMap(clang::DeclContext const *) 0x7fffea0ce4ac ; 9 LookupVisibleDecls(clang::DeclContext *, clang::LookupResult&, bool, bool, clang::VisibleDeclConsumer&, (anonymous namespace)::VisibleDeclsRecord&, bool, bool) [clone .part.1455] 0x7fffead875c6 ; 10 LookupVisibleDecls(clang::Scope *, clang::LookupResult&, (anonymous namespace)::UnqualUsingDirectiveSet&, clang::VisibleDeclConsumer&, (anonymous namespace)::VisibleDeclsRecord&, bool) 0x7fffead92949 ; 11 LookupVisibleDecls(clang::Scope *, clang::LookupResult&, (anonymous namespace)::UnqualUsingDirectiveSet&, clang::VisibleDeclConsumer&, (anonymous namespace)::VisibleDeclsRecord&, bool) 0x7fffead92540 ; 12 clang::Sema::LookupVisibleDecls(clang::Scope *, clang::Sema::LookupNameKind, clang::VisibleDeclConsumer&, bool, bool) 0x7fffead9319b ; 13 clang::Sema::CodeCompleteOrdinaryName(clang::Scope *, clang::Sema::ParserCompletionContext) 0x7fffeaa73a0f ; 14 clang::Parser::ParseStatementOrDeclarationAfterAttributes(llvm::SmallVector<clang::Stmt *, 32u>&, clang::Parser::ParsedStmtContext, clang::SourceLocation *, clang::Parser::",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8126:269,Assert,Assertion,269,https://root.cern,https://github.com/root-project/root/issues/8126,3,"['Assert', 'assert']","['Assertion', 'assert']"
Testability,"### Describe the bug; Valgrind reports memory leak when opening and closing ROOT, even when using the ROOT-suppression file. See attachment. ; [valgrind.log](https://github.com/root-project/root/files/5977813/valgrind.log). Definitely lost:; ```; ==25553== 16 bytes in 1 blocks are definitely lost in loss record 287 of 4,056; ==25553== at 0x4C3217F: operator new(unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so); ==25553== by 0x88D9187: cling::Interpreter::ShutDown() (in /opt/root_bld/lib/libCling.so); ==25553== by 0x88D942D: cling::Interpreter::~Interpreter() (in /opt/root_bld/lib/libCling.so); ==25553== by 0x88D98C8: cling::Interpreter::~Interpreter() (in /opt/root_bld/lib/libCling.so); ==25553== by 0x880DD95: TCling::~TCling() (in /opt/root_bld/lib/libCling.so); ==25553== by 0x880E048: TCling::~TCling() (in /opt/root_bld/lib/libCling.so); ==25553== by 0x52078FD: TROOT::~TROOT() (in /opt/root_bld/lib/libCore.so); ==25553== by 0x5D82160: __run_exit_handlers (exit.c:108); ==25553== by 0x5D82259: exit (exit.c:139); ==25553== by 0x5360A9A: TUnixSystem::Exit(int, bool) (in /opt/root_bld/lib/libCore.so); ==25553== by 0x521759C: TApplication::Terminate(int) (in /opt/root_bld/lib/libCore.so); ==25553== by 0x4E50BEB: TRint::Run(bool) (in /opt/root_bld/lib/libRint.so); ```; Possibly lost --> about 4000 lines of output, which make it quite challenging to find your 'own memory leaks' in your code. ### Expected behavior; No leaks are reported if the ROOT suppression file is used.; Thanks for the attention!. ### To Reproduce; valgrind --suppressions=$ROOTSYS/etc/valgrind-root.supp --leak-check=full --log-file=valgrind.log root.exe -n -l -b -q. ### Setup; 1. ROOT 6.23/01; 2. Ubuntu 18; 3. Self-built",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7207:153,log,log,153,https://root.cern,https://github.com/root-project/root/issues/7207,4,['log'],"['log', 'log-file']"
Testability,"### Describe the bug; We must be able to build ROOT even if there's another ROOT installation at `/usr/local`. https://root-forum.cern.ch/t/problem-building-6-22-00-on-osx-10-14-with-clang-11/40652/9 seems to suggest that this is currently not the case. This is relevant for; - sanity: separating the build and its artifacts from other, pre-existing ROOT artifacts allows us to be certain we build what we think we build and we test the build and not a combination of the build and whatever other ROOT there is;; - people building ROOT on shared resources for which they don't have admin powers. ### Expected behavior; ROOT builds should be the same whether or not there are other ROOT installs / binaries no the system. ### To Reproduce; See forum. ### Setup; See forum. ### Additional context; Loosely related to https://github.com/root-project/root/issues/7081",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7128:428,test,test,428,https://root.cern,https://github.com/root-project/root/issues/7128,1,['test'],['test']
Testability,"### Describe the bug; When importing a TTree in a RooDataSet, if a RooCategory is filled from a tree branch of type Short_t, incorrect values are silently loaded. The category is always the same (it seems that it picks the first label in alphabetical order). The same problem appears for other types, only Int_t and UChar_t seem to work correctly. ### Expected behavior; Either correctly load the data set or fail with an error. ### To Reproduce; ```; TTree* tree = new TTree(""test_tree"", ""Test tree"");; Short_t cat_in;; tree->Branch(""cat"", &cat_in);. cat_in = 2; //category B; tree->Fill();. RooCategory cat(""cat"", ""Category"",{; {""B_cat"", 2},; {""A_cat"", 3}; });; RooDataSet data(""data"", ""RooDataSet"", RooArgSet(cat), RooFit::Import(*tree));. data.table(cat)->Print(""v"");; ```; We should get an event in category cat_B but instead we get an event in category cat_A. ### Setup; Latest ROOT from git, master branch, commit 8d87e2bb6e6a; Linux. ### Additional context; It seems to come from [RooAbsCategory::attachToTree](https://github.com/root-project/root/blob/943706c005c6723500e00061872d6eff4967d262/roofit/roofitcore/src/RooAbsCategory.cxx#L454) where there should probably be an error message if the type of branch is neither Int_t or UChar_t.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10278:490,Test,Test,490,https://root.cern,https://github.com/root-project/root/issues/10278,1,['Test'],['Test']
Testability,"### Describe the bug; ```; cmake .. -Droottest=ON ... #without -Dtest=ON; FAILED: math/mathcore/test/GradientUnit; : && /usr/lib64/ccache/c++ -fdiagnostics-color=always -std=c++14 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -rdynamic math/mathcore/test/CMakeFiles/GradientUnit.dir/testGradient.cxx.o -o math/mathcore/test/GradientUnit -Wl,-rpath,/build/workspace/manual/build/lib lib/libHist.so lib/libTree.so lib/libGenVector.so googletest-prefix/src/googletest-build/lib//libgtest.a googletest-prefix/src/googletest-build/lib//libgtest_main.a googletest-prefix/src/googletest-build/lib//libgmock.a googletest-prefix/src/googletest-build/lib//libgmock_main.a lib/libMatrix.so lib/libNet.so lib/libRIO.so lib/libThread.so -lpthread lib/libMathCore.so lib/libCore.so && :; /usr/bin/ld: googletest-prefix/src/googletest-build/lib//libgtest_main.a(gtest_main.cc.o): in function `main':; gtest_main.cc:(.text.startup+0x26): undefined reference to `testing::InitGoogleTest(int*, char**)'; /usr/bin/ld: gtest_main.cc:(.text.startup+0x2b): undefined reference to `testing::UnitTest::GetInstance()'; /usr/bin/ld: gtest_main.cc:(.text.startup+0x33): undefined reference to `testing::UnitTest::Run()'; ```. ### Expected behavior. success",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6504:96,test,test,96,https://root.cern,https://github.com/root-project/root/issues/6504,7,['test'],"['test', 'testGradient', 'testing']"
Testability,"### Describe the bug; ```; void test() { return 1; }; ```. Interpreting this snippet with cling does not raise errors. Compiling with AcLiC .C+ generates an error.` error: void function 'test' should not return a value [-Wreturn-type]`. ### Expected behavior; Interpreting should at least raise a warning?. ### To Reproduce; `root -l test.C`; vs; `root -l test.C+`. or copy-paste the function in the ROOT terminal and call test(). ### Setup; ```; ------------------------------------------------------------------; | Welcome to ROOT 6.27/01 https://root.cern |; | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on Apr 25 2022, 22:21:18 |; | From heads/master@v6-25-01-3897-gf39eb0e984 |; | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |; | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------; ```. ### Additional context; Since I always teach my students to use ""root -l myscript.c+"", @Axel-Naumann asked me once for one example where compiling the code gave me more useful info when error appears than just interpreting, in order to find your own silly bugs when you write code. At that moment, I couldn't find a good example, it was more about past experience I had in the back of the mind, but this could be one (not specially relevant) case ;). (Maybe it's not exactly about cling, but rather to the fact that the compilation enables more warning flags than the 'interpret', thus making it easier to you to find your issues in the code).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10895:32,test,test,32,https://root.cern,https://github.com/root-project/root/issues/10895,5,['test'],['test']
Testability,### Describe the bug; concurrent call to methods like `TDatabasePDG::Instance()->GetParticle(xxx)->GetName()` can cause segmentation violation. Even with `ROOT::EnableImplicitMT()` Set. ### Expected behavior; ROOT::EnableImplicitMT() should make TDatabasePDG::GetParticle(...) thread safe without user taking locks. ### To Reproduce; Any program calling `TDatabasePDG::Instance()->GetParticle(xxx)->GetName()` at different thread. ### Setup; ```; ROOT Version: 6.26/06; Platform: Fedora 37 Beta; Compiler: g++ (GCC) 12.2.1 20220819 (Red Hat 12.2.1-2); ```. ### Additional context; https://root-forum.cern.ch/t/tdatabasepdg-is-not-thread-safe-while-creating-multiple-thread-only-instance-cause-log-spam/51957,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11580:693,log,log-spam,693,https://root.cern,https://github.com/root-project/root/issues/11580,1,['log'],['log-spam']
Testability,"### Describe the solution you'd like; It would be nice if ROOT provided a C++ function to generate a sequence of pseudo-random numbers that are frequently used in electronics testing, see:; https://en.wikipedia.org/wiki/Pseudorandom_binary_sequence. ### Describe alternatives you've considered; * Perl https://metacpan.org/pod/Math::PRBS; * Matlab https://es.mathworks.com/help/serdes/ref/prbs.html; * Python https://www.reddit.com/r/askscience/comments/63a10q/for_prbs3_with_clock_input_on_each_gate_how_can/; * online examples https://www3.advantest.com/documents/11348/33b24c8a-c8cb-40b8-a2a7-37515ba4abc8 https://gist.github.com/mattbierner/d6d989bf26a7e54e7135. ### Additional context; Pulse generators usually generate this random bits. To know whether things are working in your data acquisition, you have to compare with the expected values.; https://cryptography.fandom.com/wiki/Linear_feedback_shift_register. There are also some snippets in ROOT using it, like here: https://root.cern/doc/master/civetweb_8c_source.html",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8199:175,test,testing,175,https://root.cern,https://github.com/root-project/root/issues/8199,1,['test'],['testing']
Testability,"### Description. A C++ build of ROOT with GCC 13 works fine and passes all tests, *unless* also enabling Pythia8. Then suddenly `roottest-root-meta-MakeProject-examples` starts failing, as demonstrated with https://github.com/root-project/root/pull/14216:; ```; In module 'std' imported from input_line_1:1:; /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:305:7: error: 'std::pair<const int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > >::pair' from module 'std.bits_stl_iterator_h' is not present in definition of 'std::pair<const int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > >' in module 'std.bits_stl_iterator_h'; pair(const _T1& __x, const _T2& __y); ^; /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:197:17: note: declaration of 'pair' does not match; constexpr pair(const pair&) = default; ///< Copy constructor; ^; /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:198:17: note: declaration of 'pair' does not match; constexpr pair(pair&&) = default; ///< Move constructor; ^; /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:202:2: note: declaration of 'pair' does not match; pair(piecewise_construct_t, tuple<_Args1...>, tuple<_Args2...>);; ^; /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:238:2: note: declaration of 'pair' does not match; pair(tuple<_Args1...>&, tuple<_Args2...>&,; ^; /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:249:7: note: declaration of 'pair' does not match; pair(); ^; /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:305:7: note: declaration of 'pair' does not match; pair(const _T1& __x, const _T2& __y); ^; /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:315:2: note: declaration of 'pair' does not match; pair(_U1&& __x, _U2&& __y); ^; /usr/lib/gcc/x86_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14217:75,test,tests,75,https://root.cern,https://github.com/root-project/root/issues/14217,1,['test'],['tests']
Testability,"### Description. Cling is (rightfully) confused when evaluating a type trait on a forward-declared template specialization and then supplying the full definition (see reproducer). This breaks `roottest-root-meta-ROOT-7462-make` with the upgrade to LLVM 16 (https://github.com/root-project/root/pull/13273) in a C++20 build with GCC 13. This is because the test first expects `std::pair<std::string, Inner<int>>` to be ""bad"" with only a forward declaration and then to succeed after providing the definition. This doesn't work with the `requires` implementation of `libstdc++` under C++20:; ```; In file included from instlib dictionary payload:5:; ./instGood.cxx:10:33: error: no matching constructor for initialization of 'std::pair<string, Inner<int> >' (aka 'pair<basic_string<char>, Inner<int> >'); std::pair<string,Inner<int>> p;; ^; /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:249:7: note: candidate constructor not viable: constraints not satisfied; pair(); ^; /usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:251:12: note: because 'is_default_constructible_v<Inner<int> >' evaluated to false; && is_default_constructible_v<_T2>; ^; ```. (I'm still investigating why this doesn't happen in `master` with LLVM 13...). ### Reproducer. ```; root [0] template <typename T> class Inner;; root [1] template <> class Inner<int>;; root [2] std::is_default_constructible_v<Inner<int>>; (... error: incomplete type 'Inner<int>' used in type trait expression ...); root [3] template <> class Inner<int> { public: int fValue; };; root [4] std::is_default_constructible_v<Inner<int>>; (const bool) false; ```. Interestingly enough, the following works:; ```; root [0] struct A;; root [1] std::is_default_constructible_v<A>; (... error: incomplete type 'A' used in type trait expression ...); root [2] struct A { int v; };; root [3] std::is_default_constructible_v<A>; (const bool) true; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13815:356,test,test,356,https://root.cern,https://github.com/root-project/root/issues/13815,1,['test'],['test']
Testability,"### Description. In an unnamed macro having:; ```; {; gROOT->ProcessLine(statement_1);; statement_2;; }; ```; is process line by line (per se) and `statement_2` should (and does in most case) be able to use declaration made in `statement_1`. In some circumstances it does not. One such circumstance is the test `roottest-cling-return-constRetrunTest_WILL_FAIL` which should actually succeed (the original problem is fixed by moving to `Cling`) but still fails (unexpectedly) with:; ```; Processing run.C...; /Users/pcanal/root_working/code/master/roottest/cling/return/./run.C:7:1: error: unknown type name 't02'; t02 t;; ^; ```. ### Reproducer. With the files in [trun.tar.gz](https://github.com/root-project/root/files/15279954/trun.tar.gz); we can set that the declaration in the `ProcessLine` are properly seen in the next lines. For example this version of `trun.C`:; ```; {; gROOT->ProcessLine("".L t1.C"");; gROOT->ProcessLine("".L t2.C"");; int i123 = t_1;; int j123 = t_2;; }; ```; works fine. Note that issuing on the prompt right after the `.x trun.C` the command `gROOT->SetDirLevel(t_1);` or `i123 = t_2;` works as well. But this version:; ```; {; gROOT->ProcessLine("".L t1.C"");; gROOT->ProcessLine("".L t2.C"");; int i123 = t_1;; int j123 = t_2;; gROOT->SetDirLevel(t_1);; }; ```; mysteriously fails with:; ```; Processing trun.C...; /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: error: cannot initialize an array element of type 'void *' with an rvalue of type 'TROOT *(*)()'; gROOT->SetDirLevel(t_1);; ^~~~~; /Users/pcanal/root_working/builds/master-pr/include/TROOT.h:407:16: note: expanded from macro 'gROOT'; #define gROOT (ROOT::GetROOT()); ^~~~~~~~~~~~~; ```; The error seems to indicate that the parser is 'prefixing' to `gROOT` something related to `array of void*` and initialization. Similarly; ```; {; gROOT->ProcessLine("".L t1.C"");; gROOT->ProcessLine("".L t2.C"");; int i123 = t_1;; int j123 = t_2;; i123 = t_2;; }; ```; fails with:; ```; Processing tr",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15481:306,test,test,306,https://root.cern,https://github.com/root-project/root/issues/15481,1,['test'],['test']
Testability,"### Description. On a Alma 9.4 node (specifically cmslpc-el9-heavy01.fnal.gov), I used verbatim the instructions from the CI for an arbitrary PR build (see [here](https://github.com/root-project/root/actions/runs/10343508810/job/28658232103?pr=16202#step:9:8064) and a copy/paste in the reproducer. However, I get 23 failures not seen on any of the CI runs (see list below and ; full log of the failures at: [RootCI-Container-LastTest.log](https://github.com/user-attachments/files/16615802/RootCI-Container-LastTest.log). Looking in the log the problem seem to include:; * Missing (py)Torch installation (PyMVA); * Missing ipython3 installation (Jupyter); * Failure to connect to a server (roottest-python-distrdf-backends-test_all ); * Some more unclear failures; * See below for an extraction of the relevant output; * see [RootCI-Container-LastTest.log](https://github.com/user-attachments/files/16615802/RootCI-Container-LastTest.log) for more details. ```; The following tests FAILED:; 385 - PyMVA-RandomForest-Classification (Failed); 386 - PyMVA-RandomForest-Multiclass (Failed); 387 - PyMVA-GTB-Classification (Failed); 388 - PyMVA-GTB-Multiclass (Failed); 389 - PyMVA-AdaBoost-Classification (Failed); 390 - PyMVA-AdaBoost-Multiclass (Failed); 391 - PyMVA-Torch-Classification (Failed); 392 - PyMVA-Torch-Regression (Failed); 393 - PyMVA-Torch-Multiclass (Failed); 394 - gtest-tmva-pymva-test-TestRModelParserPyTorch (Failed); 1068 - tutorial-tmva-TMVA_CNN_Classification (Failed); 1069 - tutorial-tmva-TMVA_Higgs_Classification (Failed); 1070 - tutorial-tmva-TMVA_RNN_Classification (Failed); 1071 - tutorial-tmva-TMVA_SOFIE_PyTorch (Failed); 1203 - tutorial-dataframe-df102_NanoAODDimuonAnalysis-py (Failed); 1205 - tutorial-dataframe-df104_HiggsToTwoPhotons-py (Failed); 1261 - tutorial-rcanvas-df104-py (Failed); 1564 - roottest-python-JupyROOT-importROOT_notebook (Failed); 1565 - roottest-python-JupyROOT-simpleCppMagic_notebook (Failed); 1566 - roottest-python-JupyROOT-thread_local_n",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16242:384,log,log,384,https://root.cern,https://github.com/root-project/root/issues/16242,6,['log'],['log']
Testability,"### Description. Since around beginning of August, the test `roottest-python-regression-regression` crashes on Fedora - coinciding with the upgrade of GCC 13.1.0 to GCC 13.2.0:; ```; Unhandled cleanup; missing full expression marker?; UNREACHABLE executed at /github/home/ROOT-CI/src/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp:14945!; ```. After heavily reducing the test case, this is caused by a `constexpr` destructor and a very specific combination of template instantiations in different modules. See the upstream report in https://github.com/llvm/llvm-project/issues/68702. ### Reproducer. Build with at least GCC 13.2.0 (or rather `libstdc++` from GCC 13.2.0) and C++20 on Linux.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13851:55,test,test,55,https://root.cern,https://github.com/root-project/root/issues/13851,2,['test'],['test']
Testability,"### Description. `libstdc++` provides `std::filesystem` symbols in a static archive `libstdc++fs.a`. This causes problems on some platforms because the linker might strip the symbols. See https://github.com/root-project/root/issues/11601 and the note on `devtoolset`s in https://root.cern/install/build_from_source/#caveats for instances of similar problems. If a proper solution is found, the Cling test `test/Prompt/ValuePrinter/FileSystemPath.C` should be re-enabled (it was disabled in https://github.com/root-project/root/pull/16258). ### Reproducer. Try to run in standalone `cling`:; ```; #include <filesystem>; auto p = std::filesystem::path(""/some/path/foo.cpp"");; ```. ### ROOT version. `master`. ### Installation method. from source. ### Operating system. Linux, with `libstdc++`. ### Additional context. It seems to work in ROOT itself.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16269:400,test,test,400,https://root.cern,https://github.com/root-project/root/issues/16269,2,['test'],['test']
Testability,"### Description; This PR implements serialisation of RModel by adding a custom streamer in class RModel and modifying the definition of structure TMVA::Experimental::SOFIE::InitializedTensor. ### Checklist:; - [x] tested changes locally; ; ### Tests ; - [x] Tests for Serialisation of Custom Models . ### Example usage ; **Writing the RModel object** ; ```; using namespace TMVA::Experimental;; TFile file(""model.root"",""CREATE"");; SOFIE::RModelParser_ONNX parser;; SOFIE::RModel model = parser.Parse(""Linear_2.onnx"");; model.Write(""model"");; file.Close();; ```. **Reading the RModel object**; ```; using namespace TMVA::Experimental;; TFile file(""model.root"",""READ"");; SOFIE::RModel *model;; file.GetObject(""model"",model);; file.Close();; model->Generate();; model->OutputGenerated(""model.hxx"");; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8666:214,test,tested,214,https://root.cern,https://github.com/root-project/root/pull/8666,3,"['Test', 'test']","['Tests', 'tested']"
Testability,"### Expected behavior; The problem occurs when two histograms that were created with different upper edge of the last bin are drawn in the same pad with Log y axis. I would expect that the edge of the last bin would be drawn as the minimum y value of the pad, instead it is always set to 1. This artifact is most noticeable when the histogram values are less than 1. ### To Reproduce; python3 demo.py # produces demo.pdf; [demo.pdf](https://github.com/root-project/root/files/10851293/demo.pdf). # demo.py; from ROOT import *. gStyle.SetOptStat(0) # no statistics box; gStyle.SetOptTitle(0) # no title. #....make two histograms with different xmax; h15 = TH1F('h15','test histogram', 15*2, 0, 15); h25 = TH1F('h25','test histogram', 25*2, 0, 25). gaus = gROOT.GetFunction('gaus'); gaus.SetParameters(1, 0, 15) # Constant, Mean, Sigma; h15.FillRandom('gaus', 10000). gaus.SetParameters(1, 0, 25) # Constant, Mean, Sigma; h25.FillRandom('gaus', 10000); h25.SetLineColor(2). h15.Scale(.0005); h25.Scale(.02). h25.SetMaximum(10); h25.SetMinimum(.01). h25.Draw('hist'); h15.Draw('hist same'). gPad.SetLogy(1); gPad.Print('demo.pdf'). ### Setup; Root v6.26.10; Red Hat Enterprise Linux release 8.7 (Ootpa); Installed and compiled from source",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12394:153,Log,Log,153,https://root.cern,https://github.com/root-project/root/issues/12394,3,"['Log', 'test']","['Log', 'test']"
Testability,"### Explain what you would like to see improved and how. From https://its.cern.ch/jira/browse/ROOT-10118. In Python, it's ""Pythonic"" convention that you can test the validity of containers by implicit cast to bool, e.g. ""if mylist: do_something"" rather than ""if len(mylist) > 0: ..."". Unfortunately PyROOT's wrapping of STL containers seems to break this: if I read a ROOT tree containing branches of type std::vector<float>, PyROOT's wrapper classes are automatically used, but the test ""if tree.some_vector_branch: ..."" always evaluates true, even if the vector is empty. To be consistently Pythonic and avoid bad surprises for users, can the STL container Pythonisations be given a def __bool__(self): return bool(self.size()) or similar method?. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14573:157,test,test,157,https://root.cern,https://github.com/root-project/root/issues/14573,2,['test'],['test']
Testability,"### Explain what you would like to see improved and how. From https://its.cern.ch/jira/browse/ROOT-10190. Files for fastcloningeventtree were moved from filemerger directory during its migration to CMake. During migration to CMake, it was found that test was not running for some time and as a result it is not compiling. . Fastcloningeventtree is temporary disabled for this reason. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14579:250,test,test,250,https://root.cern,https://github.com/root-project/root/issues/14579,1,['test'],['test']
Testability,"### Explain what you would like to see improved and how. I checked various compiler optimizations like Profile-Guided Optimization (PGO) on many projects - all the results are available at https://github.com/zamazan4ik/awesome-pgo . Since such optimizations help with optimizing CPU-intensive apps, I think it can be an interesting idea to optimize the Root project with PGO since the project cares a lot about performance. I can suggest the following ideas:. * Perform PGO benchmarks with some typical for the project workloads. If it shows improvements - add a note to the documentation about possible improvements in Root's performance with PGO. E.g. for Cling I already proposed evaluating PGO: https://github.com/root-project/cling/issues/508; * Perform testing Post-Link Optimization techniques (like [LLVM BOLT](https://github.com/llvm/llvm-project/blob/main/bolt/README.md)) would be interesting too (Clang and Rustc already use BOLT as an addition to PGO). However, I recommend starting with the usual PGO since it's a much more stable technology with fewer limitations. ### ROOT version. Latest. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15778:474,benchmark,benchmarks,474,https://root.cern,https://github.com/root-project/root/issues/15778,2,"['benchmark', 'test']","['benchmarks', 'testing']"
Testability,"### Explain what you would like to see improved and how. Implement the RNTuple standard benchmarks using ORC: https://orc.apache.org/; Measure read/write time, memory consumption, and final file size. Moved from https://its.cern.ch/jira/browse/ROOT-10264. ### ROOT version. n/a. ### Installation method. n/a. ### Operating system. n/a. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16310:88,benchmark,benchmarks,88,https://root.cern,https://github.com/root-project/root/issues/16310,1,['benchmark'],['benchmarks']
Testability,"### Explain what you would like to see improved and how. In `TKey.cxx`, `TBufferXML.cxx`, `TMessage.cxx`, and `TBasket.cxx` the compression buffer is allocated with a size like:; ```; Int_t buflen = TMath::Max(512,fKeylen + fObjlen + 9*nbuffers + 28); //add 28 bytes in case object is placed in a deleted gap; ```; where ; ```; Int_t buflen = TMath::Max(512,fKeylen + fObjlen);; ```; is likely enough (i.e. there is no point in keeping the result of the compression if it is larger (including any headers) than the uncompressed data. A related issue is the test at `TKey.cxx:267` (similar test is present is other places).; ```; if (nout == 0 || nout >= fObjlen) { //this happens when the buffer cannot be compressed; ```; where the `nout` of a single fragment (thus at most `kMAXZIPBUF` with the total size of the object. The check is accurate if and only if there is only one fragment (i.e. `(1 + (fObjlen - 1)/kMAXZIPBUF) == 1`) other wise one can construct a scenario with some of the fragment compressing poorly (but being accepted because of the wiggle room mentioned above) and leading to case were we store the compressed data but the reader used is as uncompressed data because: `noutot == fObjlen`. Finally one should consider unifying those 4 similar code fragment (and maybe also the one in `RNTuple`) by factoring it ou. See https://github.com/root-project/root/pull/14523 for related discussions. ### ROOT version. master ; 6.32/00 or later as the fix for https://github.com/root-project/root/issues/14508 is required before attempted to address this is. ### Installation method. any. ### Operating system. all. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14651:557,test,test,557,https://root.cern,https://github.com/root-project/root/issues/14651,2,['test'],['test']
Testability,"### Explain what you would like to see improved and how. In https://github.com/root-project/root/pull/15376#issuecomment-2099245931, in the ubuntu20 CI build, we saw a timeout of the Queue test, seemingly at the first test (FIFOQueue.TaskOrder), giving the following output:. ```; 2535/2551 Test #265: gtest-roofit-multiprocess-test-test-RooFit-MultiProcess-Queue .....................................***Timeout 1500.10 sec; Running main() from /build/googletest-j5yxiC/googletest-1.10.0/googletest/src/gtest_main.cc; [==========] Running 5 tests from 3 test suites.; [----------] Global test environment set-up.; [----------] 1 test from FIFOQueue; [ RUN ] FIFOQueue.TaskOrder; ```. It's unclear what is causing this. It seems to be spurious. We should investigate what is going on and then fix it. ### ROOT version. Master + PR https://github.com/root-project/root/pull/15376. ### Installation method. build from source. ### Operating system. Ubuntu20. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15494:189,test,test,189,https://root.cern,https://github.com/root-project/root/issues/15494,8,"['Test', 'test']","['Test', 'test', 'test-test-RooFit-MultiProcess-Queue', 'tests']"
Testability,### Explain what you would like to see improved and how. It would be very helpful for debugging purposes if tests that are stopped by a timeout actually print to the log file the stack trace for all threads at the time the timeout is reached. (It may or may not be 'possible' to add this). ### ROOT version. master	. ### Installation method. from source. ### Operating system. any. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15144:108,test,tests,108,https://root.cern,https://github.com/root-project/root/issues/15144,2,"['log', 'test']","['log', 'tests']"
Testability,"### Explain what you would like to see improved and how. One should fix following warning. Appears in following line: https://github.com/root-project/root/blob/master/tree/dataframe/inc/ROOT/RDF/InterfaceUtils.hxx#L270. ```; In file included from /usr/include/c++/14/string:51,; from /home/linev/git/webgui/core/meta/inc/TSchemaHelper.h:17,; from /home/linev/git/webgui/core/meta/inc/TGenericClassInfo.h:21,; from /home/linev/git/webgui/core/base/inc/Rtypes.h:193,; from /home/linev/git/webgui/core/base/inc/TObject.h:17,; from /home/linev/git/webgui/core/base/inc/TNamed.h:25,; from /home/linev/git/webgui/core/base/inc/TDirectory.h:24,; from /home/linev/git/webgui/core/base/inc/TROOT.h:28,; from /home/linev/git/webgui/tree/dataframe/inc/ROOT/RDataFrame.hxx:19,; from /home/linev/git/webgui/tree/dataframe/test/dataframe_utils.cxx:1:; In static member function ‘static constexpr _Up* std::__copy_move<_IsMove, true, std::random_access_iterator_tag>::__copy_m(_Tp*, _Tp*, _Up*) [with _Tp = long unsigned int; _Up = long unsigned int; bool _IsMove = false]’,; inlined from ‘constexpr _OI std::__copy_move_a2(_II, _II, _OI) [with bool _IsMove = false; _II = long unsigned int*; _OI = long unsigned int*]’ at /usr/include/c++/14/bits/stl_algobase.h:521:30,; inlined from ‘constexpr _OI std::__copy_move_a1(_II, _II, _OI) [with bool _IsMove = false; _II = long unsigned int*; _OI = long unsigned int*]’ at /usr/include/c++/14/bits/stl_algobase.h:548:42,; inlined from ‘constexpr _OI std::__copy_move_a(_II, _II, _OI) [with bool _IsMove = false; _II = long unsigned int*; _OI = long unsigned int*]’ at /usr/include/c++/14/bits/stl_algobase.h:555:31,; inlined from ‘constexpr _OI std::copy(_II, _II, _OI) [with _II = long unsigned int*; _OI = long unsigned int*]’ at /usr/include/c++/14/bits/stl_algobase.h:651:7,; inlined from ‘constexpr std::vector<bool, _Alloc>::iterator std::vector<bool, _Alloc>::_M_copy_aligned(const_iterator, const_iterator, iterator) [with _Alloc = std::allocator<bool>]’ at /usr",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16360:809,test,test,809,https://root.cern,https://github.com/root-project/root/issues/16360,1,['test'],['test']
Testability,"### Explain what you would like to see improved and how. ROOT cannot run cling's testsuite because it compiles llvm with `-fvisibility=hidden` which the cling tests cannot work with. However, in many cases when we commit code to cling (and more importantly during llvm upgrades) these tests provide minimal reproducers for common issues. Note that the CI should run only if there are changes to `root-src/interpreter/`. ### ROOT version. N/A. ### Installation method. N/A. ### Operating system. N/A. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14972:81,test,testsuite,81,https://root.cern,https://github.com/root-project/root/issues/14972,3,['test'],"['tests', 'testsuite']"
Testability,"### Explain what you would like to see improved and how. See https://bugs.gentoo.org/show_bug.cgi?id=926439 in the Gentoo tracker.; I extracted the important part from the build log from the bug above. Here it is:; ```; >>> Completed installing sci-physics/root-6.30.04 into /var/tmp/portage/sci-physics/root-6.30.04/image. * Final size of build directory: 8271248 KiB (7.8 GiB); * Final size of installed tree: 1643460 KiB (1.5 GiB). * Verifying compiled files for python3.11; * ; * QA Notice: The following unexpected files/directories were found; * top-level in the site-packages directory:; * ; * /usr/lib/python3.11/site-packages/libJupyROOT3_11.so.6.30.04; * /usr/lib/python3.11/site-packages/libROOTPythonizations3_11.so.6.30.04; * ; * This is most likely a bug in the build system. More information; * can be found in the Python Guide:; * https://projects.gentoo.org/python/guide/qawarn.html#stray-top-level-files-in-site-packages; ```. Ideally, ROOT would install `libROOTPythonizations3_11.so.6.30.04` inside the `ROOT/` subdirectory of PyROOT, and `libJupyROOT3_11.so.6.30.04` inside `JupyROOT`, with the appropriate adjustments so that RPATHs, etc, are correct. ### ROOT version. 6.30.04. ### Installation method. emerge. ### Operating system. Gentoo Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14917:178,log,log,178,https://root.cern,https://github.com/root-project/root/issues/14917,1,['log'],['log']
Testability,"### Explain what you would like to see improved and how. Taking as an example; ![image](https://github.com/root-project/root/assets/15638895/8fe5f2bc-0fee-4290-9487-7ff78eeee57a). From https://github.com/root-project/root/actions/runs/9201095928/job/25318040512 . The label of the build says the build type should be debug and it should have the LLVM assertions enabled, but the configuration of the nightly job doesn't have either. One of the two should be fixed to reflect the other. ```; cmake -S '/github/home/ROOT-CI/src' -B '/github/home/ROOT-CI/build' -DCMAKE_BUILD_TYPE=Release ""-Dalien=off"" ""-Dall=off"" ""-Darrow=off"" ""-Dasan=off"" ""-Dasimage=on"" ""-Dasserts=off"" ""-Dbuiltin_cfitsio=off"" ""-Dbuiltin_clang=on"" ""-Dbuiltin_cling=on"" ""-Dbuiltin_cppzmq=on"" ""-Dbuiltin_davix=off"" ""-Dbuiltin_fftw3=off"" ""-Dbuiltin_freetype=off"" ""-Dbuiltin_ftgl=off"" ""-Dbuiltin_gl2ps=off"" ""-Dbuiltin_glew=off"" ""-Dbuiltin_gsl=off"" ""-Dbuiltin_llvm=on"" ""-Dbuiltin_lz4=off"" ""-Dbuiltin_lzma=off"" ""-Dbuiltin_nlohmannjson=off"" ""-Dbuiltin_openssl=off"" ""-Dbuiltin_openui5=on"" ""-Dbuiltin_pcre=off"" ""-Dbuiltin_tbb=off"" ""-Dbuiltin_unuran=on"" ""-Dbuiltin_vc=off"" ""-Dbuiltin_vdt=off"" ""-Dbuiltin_veccore=off"" ""-Dbuiltin_xrootd=off"" ""-Dbuiltin_xxhash=off"" ""-Dbuiltin_zeromq=on"" ""-Dbuiltin_zlib=off"" ""-Dbuiltin_zstd=off"" ""-Dccache=off"" ""-Dcefweb=off"" ""-Dclad=on"" ""-Dclingtest=off"" ""-Dcocoa=off"" ""-Dcoverage=off"" ""-Dcuda=off"" ""-Dcudnn=off"" ""-Dcxxmodules=off"" ""-Ddaos=off"" ""-Ddataframe=on"" ""-Ddavix=on"" ""-Ddcache=off"" ""-Ddev=off"" ""-Ddistcc=off"" ""-Dfail-on-missing=on"" ""-Dfcgi=off"" ""-Dfftw3=on"" ""-Dfitsio=on"" ""-Dfortran=on"" ""-Dgdml=on"" ""-Dgminimal=off"" ""-Dgnuinstall=off"" ""-Dgsl_shared=off"" ""-Dgviz=off"" ""-Dhttp=on"" ""-Dimt=on"" ""-Djemalloc=off"" ""-Dlibcxx=off"" ""-Dmacos_native=off"" ""-Dmathmore=on"" ""-Dmemory_termination=off"" ""-Dminimal=off"" ""-Dmpi=off"" ""-Dmysql=on"" ""-Dodbc=off"" ""-Dopengl=on"" ""-Dpgsql=on"" ""-Dpyroot=on"" ""-Dpythia8=off"" ""-Dqt5web=off"" ""-Dqt6web=off"" ""-Dr=off"" ""-Droofit=on"" ""-Droofit_multiprocess=on"" ""-Droot7=on"" ""-Drootbench=",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15615:351,assert,assertions,351,https://root.cern,https://github.com/root-project/root/issues/15615,1,['assert'],['assertions']
Testability,"### Explain what you would like to see improved and how. The RDataFrame JIT logic makes use of a series of controlled memory leaks between different functions to ensure lifetime of objects that are needed by the JIT until that actually happens. This is an optimization but has certain fragilities, that were already analysed in a recent [bug report](https://github.com/root-project/root/issues/15399). The same topic surfaced in the past (see [this issue moved from JIRA](https://github.com/root-project/root/issues/15076)). And the fact we rely on leaking objects is subtly error-prone (see a recent [PR](https://github.com/root-project/root/pull/15477)). We should investigate how to implement a different way to handle the JIT machinery so that it does not require leaking objects. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15520:76,log,logic,76,https://root.cern,https://github.com/root-project/root/issues/15520,1,['log'],['logic']
Testability,"### Explain what you would like to see improved and how. The RNTupleParallelWriter should be extended to allow to fix the logical order of clusters written to disk. This would allow to better align parallel writing with, e.g., lumi blocks. The physical on-disk order of clusters written by the parallel writer will still be arbitrary, but the meta-data can link them to another, logical order. ### ROOT version. master. ### Installation method. n/a. ### Operating system. n/a. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16326:122,log,logical,122,https://root.cern,https://github.com/root-project/root/issues/16326,2,['log'],['logical']
Testability,"### Explain what you would like to see improved and how. The issues [#8905, #8922] are all about tests failing because ASAN is used. They should be consolidated in one single issue. ### ROOT version. all. ### Installation method. all. ### Operating system. all. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14680:97,test,tests,97,https://root.cern,https://github.com/root-project/root/issues/14680,1,['test'],['tests']
Testability,"### Explain what you would like to see improved and how. The other day someone helpful suggested this way of creating an artifically enlarged ntuple file for testing:; ```c++; TChain chain;; for (int i = 0; i < 25; i++) chain.Add(""B2HHH~zstd.root?#DecayTree""); // TTree file; ROOT::Experimental::RNTupleImporter::Create(&chain, ""B2HHH~zstd~25x.ntuple"")->Import();; ```; Afterwards however, I was quite lost because the tree inside the result file was no longer called ""DecayTree"", but ""ROOT::Experimental::RNTuple"". I understand that if you mix multiple files with a `TChain` there is no unique name to pick. But if there was a unique name, I think it would be great to carry it over to the resulting file!. ### ROOT version. ROOT Version: 6.29/01; Built for linuxx8664gcc on Jun 22 2023, 16:45:00; From heads/master@v6-29-01-1712-g1d65f2ecf4. ### Installation method. built from source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13088:158,test,testing,158,https://root.cern,https://github.com/root-project/root/issues/13088,1,['test'],['testing']
Testability,"### Explain what you would like to see improved and how. This a catch-all issue where to collect ideas for future tests, that usually appear while solving an issue, but where devs have no time to implement them; - [x] https://github.com/root-project/root/pull/14231#issuecomment-1855806343 ; - [x] https://github.com/root-project/root/pull/14275#issuecomment-1864499314; - [x] https://github.com/root-project/root/pull/13217; - [x] https://github.com/root-project/root/issues/14085; - [x] https://github.com/root-project/root/issues/11707; - [x] https://github.com/root-project/root/issues/11667; - [ ] https://github.com/root-project/root/issues/11004; - [ ] https://github.com/root-project/root/issues/10140; - [ ] https://github.com/root-project/root/issues/9953; - [ ] https://github.com/root-project/root/issues/8365; - [x] https://github.com/root-project/root/issues/14767; - [x] https://github.com/root-project/root/issues/13130; - [x] https://github.com/root-project/root/issues/14910; - [x] https://its.cern.ch/jira/browse/ROOT-8276; - [x] https://github.com/root-project/root/pull/14957#issuecomment-1994747384. ### ROOT version. ```; ROOT v6.30/02; Built for linuxx8664gcc on Nov 27 2023, 19:50:38; From tags/v6-30-02@; With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0; Binary directory: /opt/root/bin; ```. ### Installation method. Binary. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14319:114,test,tests,114,https://root.cern,https://github.com/root-project/root/issues/14319,1,['test'],['tests']
Testability,"### Explain what you would like to see improved and what isn't as good as it could be and why. By @amadio's words in https://mattermost.web.cern.ch/root/pl/xu1a5816u3rizqe68hi3n6nn1o:. ""This new version of TBB only uses CMake as build system, so the builtin TBB logic will also need to be updated, as that relies on the Makefile-based build system up to now.""",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7063:262,log,logic,262,https://root.cern,https://github.com/root-project/root/issues/7063,1,['log'],['logic']
Testability,"### Explain what you would like to see improved. A set of usability improvements to `RLogger` coming out of a discussion of #6875 with @pcanal . ### Optional: share how it could be improved. - [ ] add a function (to `RLogManager`?) to emit just a string to the log (e.g. by creating an otherwise empty `RLogEntry` and having `Emit` not write out anything like function, file, etc.);; - [ ] add a ""show timestamp"" option flag to `RLogManager`, on by default. (And try to add ""nanoseconds since call to `ROOT()`"")",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6931:261,log,log,261,https://root.cern,https://github.com/root-project/root/issues/6931,1,['log'],['log']
Testability,"### Explain what you would like to see improved. For instance both have ""am I log scale"": they should get merged, or their relationship should be defined / reconsidered.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7966:78,log,log,78,https://root.cern,https://github.com/root-project/root/issues/7966,1,['log'],['log']
Testability,"### Explain what you would like to see improved. For vector-like constructs (`TVector2`, `TVector3`, `TLorentzVector`, `ROOT::Math::DisplacementVector3D`, etc.), it would be very helpful to support structured bindings to the Cartesian coordinates (e.g.):. ```cpp; auto const [x, y] = func_that_returns_TVector2();. // which would be equivalent to the pair of statements:; TVector2 const vec = func_that_returns_TVector2();; auto const [a, b] = std::pair{vec[0], vec[1]};. assert(x == a);; assert(y == b);; ```. I understand that this utility would only be helpful for accessing Cartesian coordinates, and not those related to (e.g.) polar representations. ### Optional: share how it could be improved. This can be done by introducing suitable template specializations of `get<std::size_t>`, `std::tuple_size`, and `std::tuple_element`. See https://compiler-explorer.com/z/bv4Yef8GE as an example. If this seems a desirable feature, I am willing to consider helping implement it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11806:472,assert,assert,472,https://root.cern,https://github.com/root-project/root/issues/11806,2,['assert'],['assert']
Testability,"### Explain what you would like to see improved. I have a `c++` class with several constructors:. MyClass(const std::string& configfilename);; MyClass(const MyClass& other);. I have python bindings for this class that were generated with `cppyy`. Now, I have a piece of python code that instantiates my class, with a nice `try`-`except` block:. try:; obj = MyClass(args.config); except ConfigFileNotFoundError:; print(""config file ""+args.config+"" was not found!""); exit(0). Now, to test, I'm executing this with a wrong config file. But what I get is roughly this:. TypeError: none of the 2 overloaded methods succeeded. Full details:; MyClass(const std::string&) => ConfigFileNotFoundError; MyClass::MyClass(const MyClass&) => TypeError. So I'm wondering:; Since `cppyy` seems to handle function overloading with a `try`/`except` block, is there any reasonable way to do error handling for such applications? . I'd love to actually get the `ConfigFileNotFoundError` to handle it properly, rather than getting this `TypeError`. . I've started to look into using `__overload__`, but this seems less than elegant. Also, I was unable to figure out how to ask `__overload__` for the accepted signatures.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9909:482,test,test,482,https://root.cern,https://github.com/root-project/root/issues/9909,1,['test'],['test']
Testability,"### Explain what you would like to see improved; <!-- ; Explain what isn't as good as it could be and why; --> ; In RooMCStudy, the parameter of interest should also be fitted with Gaussian in addition to its pull distribution. This is important to perform the linearity test.; ### Optional: share how it could be improved; <!--; If you already have an idea what we could improve, then please tell us.; --> The details problem and solution are explained in, https://root-forum.cern.ch/t/why-the-fitgauss-true-doesnt-work-for-plotparam-in-roomcstudy/53706. ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code: build it / `root myMacro.C` / ...; -->. ### Setup; <!--; 1. ROOT version; 2. Operating system; 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself.; -->. ### Additional context; <!--; Add any other context about the problem here.; -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12387:271,test,test,271,https://root.cern,https://github.com/root-project/root/issues/12387,1,['test'],['test']
Testability,"### Explain what you would like to see improved; <!--; Explain what isn't as good as it could be and why; -->. Currently there is a setup step done in the client before actually starting the distributed computations. During the setup, a list of ranges of entries from the original dataset is computed. The logic is as follows:; 1. For each file of the dataset, open it and compute a list of all the clusters in the file.; 2. From the list of all clusters of all files, divide it into groups of clusters (`Range`s) depending on the `npartitions` parameter of the dataframe. Each `Range` will be assigned its own task in the distributed resources. The point 1. above can be particularly expensive to run since it relies on `TFile::Open` . If the files of the dataset are stored remotely, the overhead adds up pretty quickly. The call happens specifically in:; https://github.com/root-project/root/blob/db3d4240abbda1c946fd2a7af08544cf1b357911/bindings/experimental/distrdf/python/DistRDF/Node.py#L363-L368. ### Optional: share how it could be improved; <!--; If you already have an idea what we could improve, then please tell us.; -->. Ideally we could avoid calling TFile::Open in the client. @Axel-Naumann proposed on mattermost to estimate the number of clusters of each file depending on its size and consequently compute the number of tasks to run on the distributed resources:; ```; If you have these files:. 50MB; 100MB; 300MB; 3GB. then I'd translate that to cluster estimates:. 2; 3; 10; 100. and split this into n tasks accordingly.; ```. The single task in the distributed worker would then be responsible to open only the file(s) where the estimated clusters should be stored. This needs to be explored. ### Additional context; <!--; Add any other context about the problem here.; -->; Thanks to @stwunsch for bringing this up. This issue will keep track of further discussion and updates on the matter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8232:306,log,logic,306,https://root.cern,https://github.com/root-project/root/issues/8232,1,['log'],['logic']
Testability,### Explain what you would like to see improved; <!--; Explain what isn't as good as it could be and why; -->. `rootbrowse` [was broken](https://sft.its.cern.ch/jira/browse/ROOT-10774) by the upgrade to the new PyROOT but as we do not test it we never noticed. (I am not sure how to test that the GUI starts and works correctly though),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6785:235,test,test,235,https://root.cern,https://github.com/root-project/root/issues/6785,2,['test'],['test']
Testability,"### Explain what you would like to see improved; <!--; Explain what isn't as good as it could be and why; -->; I prepared two short MWEs assigning bin numbers to events in a dataset of 10000 events and printing the number of events in each bin. One is C++ using `RDataFrame`, the other is Python using Pandas. The Pandas one is 3x faster; see the output from `hyperfine`. ```; Benchmark #1: ./mwe ../data/D0_sample_5.root; Time (mean ± σ): 1.338 s ± 0.010 s [User: 1.233 s, System: 0.093 s]; Range (min … max): 1.321 s … 1.349 s 10 runs; ```; ```; Benchmark #1: python3 mwe.py ../data/D0_sample_5.root; Time (mean ± σ): 431.3 ms ± 4.6 ms [User: 469.8 ms, System: 153.6 ms]; Range (min … max): 423.9 ms … 436.5 ms 10 runs; ```. This is the first time I attempted to use `RDataFrame` and I might very well be doing it wrong. Advice would be appreciated. ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code: build it / `root myMacro.C` / ...; -->; 1. Download [D0_sample_5.root](http://ipnp.cz/~cervenkov/data/D0_sample_5.root) (1.6MB); 2. Compile `RDataFrame` MWE using `g++ mwe.cc $(root-config --cflags) $(root-config --glibs) -o mwe`; 3. Run `./mwe D0_sample_5.root` and `python3 mwe.py D0_sample_5.root`. #### `mwe.cc`:; ```cpp; #include <iostream>; #include <vector>. #include ""ROOT/RDataFrame.hxx"". int which_time_bin(const double time) {; const double bin_edges[] = {0, 0.00025 * 1, 0.00025 * 2,; 0.00025 * 3, 0.00025 * 4, 0.00025 * 5,; 0.00025 * 6, 0.00025 * 7, 0.00025 * 8};; int bin = -1;; for (int i = 0; i < 9; i++) {; if (time < bin_edges[i]); return bin;; bin++;; }; return bin;; }. int main(int argc, char *argv[]) {; ROOT::RDataFrame df_raw(""DalitzEventList"", argv[1]);; auto df = df_raw.Define(""time_bin"", which_time_bin, {""D_decayTime""});. const int time_bins = 8;; ROOT::RDF::RResultPtr<ULong64_t> counts[",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7273:377,Benchmark,Benchmark,377,https://root.cern,https://github.com/root-project/root/issues/7273,2,['Benchmark'],['Benchmark']
Testability,### Explain what you would like to see improved; Allow to use root as dependency using `FetchContent`. ### To Reproduce; ```cmake; cmake_minimum_required(VERSION 3.16). project(Test). include(FetchContent). FetchContent_Declare(; root; GIT_REPOSITORY https://github.com/root-project/root.git; GIT_TAG latest-stable; ). FetchContent_MakeAvailable(root); ```; ### Setup; ROOT version : latest-stable; Operating system : Linux; How you obtained ROOT : github,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8923:177,Test,Test,177,https://root.cern,https://github.com/root-project/root/issues/8923,1,['Test'],['Test']
Testability,"### Explain what you would like to see improved; Hi all,; It takes long time for loading rootlogon.C about(20s); I've test for the reason; It seems I've a line; ```; gROOT->ProcessLine(""#include <ROOT_cx.hh>"");; ```; [ROOT_cx.hh.zip](https://github.com/root-project/root/files/5453842/ROOT_cx.hh.zip); I include all of the header file I've used in this header; I cannot find a faster way doing this. ### Optional: share how it could be improved. precompile rootlogon.C; or other ways. . ### Setup. 1. ROOT version 6.22.02; 2. Operating system Mac OS X 10.15 lastest; 3. How you obtained ROOT, from homebrew. ### Additional context. see https://root-forum.cern.ch/t/groot-processline-include-slower-than-before/42031",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6719:118,test,test,118,https://root.cern,https://github.com/root-project/root/issues/6719,1,['test'],['test']
Testability,"### Explain what you would like to see improved; I don't know if this a new feature request or a bug:. In TTreePlayer::Scan(), there is no way to left-justify a branch that contains text. A line like this works (assuming a TTree called `Options`):. ```; Options->Scan("""","""",""col=20s:15s:8s:1s:25s:15s""); ```. The TTreePlayer::Scan documentation says this about the colon-delimited arguments passed via cols: ""The format string should follow the printf format specification. The value given will be prefixed by %..."". The printf specification states that to left-justify a column, one precedes it with a minus sign; e.g., ""%-20s"" to left-justify a column of text 20 characters wide. However, this does not work:. ```; Options->Scan("""","""",""col=-20s:15s:8s:1s:25s:15s""); ```. Some testing shows that if I put a minus sign in any of the `cols=` specifications, TTreePlayer::Scan will use the specifications until it encounters the first `-`. After that, all columns have the default width (and remain right-justified). . If I look at the code in TTreePlayer.cxx, I can see that the code cannot interpret a `-` character in the specification. . This is not a ""breaking"" change for the work I want to do, but it would be nice to fully support left justification. . ### Setup; 1. ROOT version: 6.26/00; 2. Operating system: CentOS 7; 3. How you obtained ROOT: Built it myself.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11786:778,test,testing,778,https://root.cern,https://github.com/root-project/root/issues/11786,1,['test'],['testing']
Testability,"### Explain what you would like to see improved; List of things that can be vectorised / speeded up in RooFit. - [x] Vectorise https://github.com/root-project/root/blob/bd6bb9f6f62f08eba591edfc7e25b8f45857a562/roofit/roofitcore/src/RooAbsPdf.cxx#L373-L378; - [x] Same for computing logarithms in same class (getLogProbabilities()); - [x] RooNLLVar::computeBatched(); - [x] Investigate if norm and logs can be contracted. - [ ] Generation of events. Unless specialised generator functions are implemented, RooFit employs accept/reject sampling. Since this has to evaluate the PDF many times, one could think about using the batch interface to generate e.g. 2x the requested number of events, and do accept/reject on those. Repeat until enough events have been generated, and throw away the rest.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7032:282,log,logarithms,282,https://root.cern,https://github.com/root-project/root/issues/7032,2,['log'],"['logarithms', 'logs']"
Testability,"### Explain what you would like to see improved; Looking through `TH1::SmoothArray`, I noticed a few minor things. I am happy to submit a PR with the following changes if desired. 1) The `hh` array; https://github.com/root-project/root/blob/ac22e5a2952150f59c502c7c09692d261bcf31d9/hist/hist/src/TH1.cxx#L6733; is used to store various intermediate values for the running median calculation and the quadratic interpolation. While it has length 6, the last entry is never used. The fourth and fifth entries are used when calculating the running median with length 5, and while the full array is passed to `TMath::Median`, only the first five entries are used at most (when `medianType==5`). 2) The function also contains an `assert` that can be removed: ; https://github.com/root-project/root/blob/ac22e5a2952150f59c502c7c09692d261bcf31d9/hist/hist/src/TH1.cxx#L6749-L6755; Since `ifirst` is either `1` or `2`, and `ii>=ifirst` in the loop, `ii - ifirst >= 0` is always true. 3) The calculation of the running median with window length 5 for the second-to-last bin; https://github.com/root-project/root/blob/ac22e5a2952150f59c502c7c09692d261bcf31d9/hist/hist/src/TH1.cxx#L6780-L6784; has a slightly misleading comment. Instead of handling the last two entries in the array, this code finds the value for the second-to-last bin by using window length 3. ### Optional: share how it could be improved; `hh` can be length 5, the `assert` can be removed and the comment can be updated. ### To Reproduce; Anything that calls `TH1::SmoothArray`; ```c++; #include <TH1.h>. void script() {; const int nbins = 5;; double hist[nbins] = {10, 12, 16, 13, 16};; TH1::SmoothArray(nbins, hist);; }; ```; or `TH1::Smooth`. ### Setup; 1. ROOT version: 6.22.06; 2. Operating system: Debian 10.4; 3. How you obtained ROOT: built from source. ### Additional context; none",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7029:724,assert,assert,724,https://root.cern,https://github.com/root-project/root/issues/7029,2,['assert'],['assert']
Testability,"### Explain what you would like to see improved; RNTuple DAOS unit tests should be automatically run in a testing build. Specifically, `-Ddaos_mock=ON` should be set if `testing` is defined. `daos_mock` has no dependency on the real libdaos and is safe to run in our testing environment. ### Optional: share how it could be improved; Once PR #6825 is merged, a follow-up PR will be created to address this.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8074:67,test,tests,67,https://root.cern,https://github.com/root-project/root/issues/8074,4,['test'],"['testing', 'tests']"
Testability,"### Explain what you would like to see improved; ROOT migrated some time ago from Makefile to CMakeLists, but there are a couple of places where there are still some legacy Makefiles, check https://github.com/root-project/root/find/master:. ```; test/Makefile; etc/Makefile.arch; config/Makefile.in; test/Makefile.win32; test/rhtml/Makefile; test/RootIDE/Makefile; test/periodic/Makefile; config/Makefile-comp.in; tutorials/tmva/makefile; test/RootShower/Makefile; test/histviewer/Makefile; test/rhtml/Makefile.win32; gui/fitpanel/test/Makefile; math/smatrix/test/Makefile; proof/doc/confman/Makefile; test/RootIDE/Makefile.win32; math/genvector/test/Makefile; test/ProofBench/Makefile_event; test/RootShower/Makefile.win32; math/mathcore/test/fit/Makefile; test/dt_Makefile; core/textinput/src/textinput/Makefile; documentation/*/Makefile; graf2d/asimage/src/libAfterImage/Makefile.in; graf2d/asimage/src/libAfterImage/configure.in; ```. ### Optional: share how it could be improved; It could be done all via CMakeLists to be more homogeneous. This allows easier overview from IDEs like QtCreator that show the whole CMake subdirectories and subprojects. Moreover, it also allows to pass correctly or more easily the CMAKE_CXX_STANDARD to subprojects. ### Setup; ```; ------------------------------------------------------------------; | Welcome to ROOT 6.25/01 https://root.cern |; | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on Jul 08 2021, 11:17:13 |; | From heads/master@v6-25-01-1584-g068c20d159 |; | With c++ (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0 |; | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------. ```. ### Additional context; https://github.com/root-project/root/issues/8125#issuecomment-841519742",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9090:246,test,test,246,https://root.cern,https://github.com/root-project/root/issues/9090,16,['test'],['test']
Testability,"### Explain what you would like to see improved; The man page for the Chi2Test method (https://root.cern.ch/doc/master/classTH1.html#ab7d63c7c177ccbf879b5dc31f2311b27) says it is a ""chi2 test for comparing weighted and unweighted histograms"" without saying that they are normalised. If you follow the maths two pages later it does have this information but....who reads the details of the maths used to calculate a chi2? It took us an hour trying to understand the details of the rebin method which was being used in our example, and was irrelevant, to see why the NDF was not equal to the bin count. ### Optional: share how it could be improved; Add in the first page that the comparison is a normalised test: the integrals are not used. e.g. ""chi2 test for a shape comparison of weighted and unweighted histograms"". ### To Reproduce; No code needed...just documentation. ### Setup; WWW. ### Additional context",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12290:187,test,test,187,https://root.cern,https://github.com/root-project/root/issues/12290,3,['test'],['test']
Testability,"### Explain what you would like to see improved; `-O1` for cling spends considerable time in stressGraphics:. test | opt | non-opt; -----|-----|--------; stressGraphics.cxx | 57.68 | 16.13. We need to; - verify that it's the optimizer taking so long; - find out which pass is causing it; - consider disabling that pass by default, or reproducing and discussing with upstream what we can do. See also https://github.com/root-project/root/pull/9301",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9312:110,test,test,110,https://root.cern,https://github.com/root-project/root/issues/9312,1,['test'],['test']
Testability,"### Feature description. Currently, for non-incremental builds, we build and then test ROOT from the build directory. This could be improved, for example testing the packed binaries. In steps what could be done is:; 1) after a build, remove source and build directory; 2) unpack / install from ROOT package; 3) check out roottest and run on ROOT installation from 2). Inspired by [ROOT-7370](https://its.cern.ch/jira/browse/ROOT-7370). ### Alternatives considered. _No response_. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15861:82,test,test,82,https://root.cern,https://github.com/root-project/root/issues/15861,2,['test'],"['test', 'testing']"
Testability,"### Feature description. From https://its.cern.ch/jira/browse/ROOT-11018. It's currently possible to set symmetric axis by calling SetRangeUser with appropriate bounds.; It would be nice to be able to require the axis to be always drawn symmetrically so it gets calculated automatically (so whatever data is drawn/added the automatic axis is symmetric). I think most of the time it would be around 0 (for example when doing a residual plot), but that could be a configurable number.; This could be a canvas (like the Log axis) or an axis (like SetRangeUser) property, not sure what would be easier.; PS: One of the use cases where I do this often is when I have a COLZ TH2D plot with a palette like kTemperatureMap and want to make sure the 0 is at the ""white"" region. [symmetric_v2.patch](https://github.com/root-project/root/files/14157702/symmetric_v2.patch); [symmetric.patch](https://github.com/root-project/root/files/14157703/symmetric.patch). ### Alternatives considered. _No response_. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14543:517,Log,Log,517,https://root.cern,https://github.com/root-project/root/issues/14543,1,['Log'],['Log']
Testability,### Feature description. It would become familiar and user-friendly for the users and developers if they would have a login and signup option which they can use for more future works in the website. I would like to make this new feature. Please assign this work to me. ### Alternatives considered. _No response_. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16646:118,log,login,118,https://root.cern,https://github.com/root-project/root/issues/16646,1,['log'],['login']
Testability,"### Feature description. The legacy backend classes, inheriting from, `RooAbsTestStatistic`, implement the `RooAbsReal::setData` method that allows for datasets to be swapped over in a test statistic function without having to reconstruct the test statistic. To support the new backend, in xRooFit I am having to destroy and recreate the test statistics (NLL function) each time I change the dataset. I dont know if this introduces an unnecessary overhead or not, but I'd be interested to know if implementing the `setData` method with the new classes could be easily implemented or not?. ### Alternatives considered. _No response_. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15763:185,test,test,185,https://root.cern,https://github.com/root-project/root/issues/15763,3,['test'],['test']
Testability,"### Is your feature request related to a problem? Please describe. Currently it's hard to debug issues that happen when the modules are rebuilt as there is no information displayed about why ROOT decided to rebuild them. For an example see https://github.com/conda-forge/root-feedstock/issues/136. ### Describe the solution you'd like. When rebuilding modules information will be displayed such as: `/usr/include/foo.h got updated, must regenerate module bar`. ### Describe alternatives you've considered. ### Additional context. I've tried a few thing to try and force a module rebuild, e.g. editing headers, touching files and installing different versions of dependencies but ROOT never seems to notice. The best I've managed is to delete all `lib/*.pcm` files which obviously triggers them to be rebuilt:. ```bash; $ root; input_line_1:1:10: remark: building module 'std' as '/home/cburr/miniconda3/envs/test/lib/std.pcm' [-Rmodule-build]; #include <new>; ^; input_line_1:1:10: remark: finished building module 'std' [-Rmodule-build]; input_line_2:1:10: remark: building module 'Cling_Runtime' as '/home/cburr/miniconda3/envs/test/lib/Cling_Runtime.pcm' [-Rmodule-build]; #include ""cling/Interpreter/RuntimeUniverse.h""; ^; While building module 'Cling_Runtime' imported from input_line_2:1:; In file included from <module-includes>:3:; /home/cburr/miniconda3/envs/test/etc//cling/Interpreter/DynamicLookupRuntimeUniverse.h:16:10: remark: building module 'Cling_Runtime_Extra' as '/home/cburr/miniconda3/envs/test/lib/Cling_Runtime_Extra.pcm' [-Rmodule-build]; #include ""cling/Interpreter/DynamicExprInfo.h""; ^; ```. I don't know if ROOT is supposed to be able to recover from this but I run in to three issues, the first is the known `tbb` dependency issue in 6.24.0 that is already fixed for the next patch release. The second issue is that `MathCore.pcm` fails to build with:. ```bash; <<< cling interactive line includer >>>: remark: building module 'MathCore' as '/home/cburr/miniconda3/envs/t",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8518:908,test,test,908,https://root.cern,https://github.com/root-project/root/issues/8518,1,['test'],['test']
Testability,"### Is your feature request related to a problem? Please describe.; <!--; A clear and concise description of what the problem is. E.g ""I always have to [...] when I want to [...]""; -->; Here:. https://root.cern.ch/doc/master/TH2Poly_8h_source.html#l00033. The code suggests that we cannot store in these bins neither the bin error nor the sum of the squares of the weights. Thus in order to keep track of the errors we need two TH2Poly instances, one for the values and the other for the errors. What is the logic behind this design? I do not think this makes sense. Can this be changed? ; ### Describe the solution you'd like; <!--; A clear and concise description of what you want to happen.; -->; Add setters and getters for errors, add members for the error and a member for the sum of squares of weights. . ### Describe alternatives you've considered; <!--; Can you think of alternative solutions or features?; -->. ### Additional context; <!--; Add any other context or screenshots about the feature requested here.; -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8340:508,log,logic,508,https://root.cern,https://github.com/root-project/root/issues/8340,1,['log'],['logic']
Testability,"### Is your feature request related to a problem? Please describe.; When taking a snapshot (generating a `TTree`) of an `RInterface` with RDataFrame, I need to close the current file, write to it, and open it up again. ### Describe the solution you'd like; Aside from the file name, I also hope to be able to feed a `TDirectory` to the `Snapshot()` method of an `RInterface`. ### Describe alternatives you've considered; The workaround is to close the file, write and reopen it. I havent tested if it's able to write to a sub-`TDirectory` inside a `TFile`. ### Additional context; I tried to add it myself, but failed to find the code that implements the snapshot functionality.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9225:488,test,tested,488,https://root.cern,https://github.com/root-project/root/issues/9225,1,['test'],['tested']
Testability,"### The observed bug; I have been using the RooMomentMorphND (and RooMomentMorphFuncND) classes, where I am trying to save these functions to a workspace .root file. I am not able to do this, as an error occurs specifically when trying to write this class to a workspace. Note this error is not seen when I tested on the RooMomentMorph class, only in the ND case. . ### To Reproduce; I have prepared a small example in order to reproduce the error: ; ```c++; #include <iostream>; #include <fstream>; #include<TRandom.h>. float input_lambda(float width){; return -6.347e-07*width*width+0.0015*width+1.835;; }. void exampleND(){; auto myy = new RooRealVar(""myy"", ""myy"", 110., 155.);; myy->setBins(450.);. auto w = new RooWorkspace(""w"");. auto hist_1 = new TH1F(""hist_1_125"",""hist_1_125"", 450, 110., 155.);; for(double i=0; i<10000; i++){hist_1->Fill(gRandom->Gaus(125., input_lambda(1.)));}; auto hist_400 = new TH1F(""hist_400_125"",""hist_400_125"", 450, 110., 155.);; for(double i=0; i<10000; i++){hist_400->Fill(gRandom->Gaus(125., input_lambda(400.)));}; hist_1->Scale(1./hist_1->Integral());; hist_400->Scale(1./hist_400->Integral());. auto data_sig_1 = new RooDataHist(""data_sig_1"", ""data_sig_1"", RooArgList(*myy), hist_1);; auto data_sig_400 = new RooDataHist(""data_sig_400"", ""data_sig_400"", RooArgList(*myy), hist_400);. auto hist_pdf_1 = new RooHistPdf(""hist_pdf_1"", ""hist_pdf_1"", RooArgList(*myy), *data_sig_1);; auto hist_pdf_400 = new RooHistPdf(""hist_pdf_400"", ""hist_pdf_400"", RooArgList(*myy), *data_sig_400);. std::vector<float> Lambda_list = {1., 400.};; auto Lambda = RooRealVar(""lambda"", ""lambda"", 1., 400.);; auto paramVec = TVectorD(2);; for (int j = 0; j < 2; ++j){; 	paramVec[j] = Lambda_list[j];; }. auto morph_ND = new RooMomentMorphND(""morph_ND"",""morph_ND"", Lambda, RooArgList(*myy), RooArgList(*hist_pdf_1, *hist_pdf_400), paramVec, RooMomentMorphND::Linear);. w->import(*morph_ND);; w->Print();; w->writeToFile(""test_workspace.root"");; }; ```; If you run the code, you will see t",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11876:307,test,tested,307,https://root.cern,https://github.com/root-project/root/issues/11876,1,['test'],['tested']
Testability,"### This Pull request:. Hi @guitargeek , the class `RooPolyFunc` is introduced with this pull request. This class allow to form multi-variable polynomials of arbitrary number of variables. . The class also allows for RooFit functions to be Taylor expanded as a function of the dependent variables. This is provided by static functions which return the Taylor expanded function as a `RooPolyFunc`. ## Checklist:. - [x] tested changes locally; - [x] added tutorials; - [x] added unit test; - [ ] analytical integral",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9184:418,test,tested,418,https://root.cern,https://github.com/root-project/root/pull/9184,2,['test'],"['test', 'tested']"
Testability,### This Pull request:; * Fix axis labels ; * CaloTower selection in context of REveDataCollection when collection filter is applied; * Fix client's duplicate error messages from server; * Minor correction in Summary view layout; * Add expression validator for new column expression in table; * Review log messages; * Introduce HttpPublic option which disable usage of RFileDialog; * Updates REnderCore with fixes in font renderin. From verion 1.5 to 1.6.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16829:302,log,log,302,https://root.cern,https://github.com/root-project/root/pull/16829,1,['log'],['log']
Testability,"### This Pull request:; ; Hi @guitargeek, this PR is just to refactor the simple class in; RooLagrangianMorphFunc::Config as a struct to keep it's usage apparent.; Let me know what you think !; ; #### Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9180:219,test,tested,219,https://root.cern,https://github.com/root-project/root/pull/9180,1,['test'],['tested']
Testability,"### Version; ROOT version: 6.18/04; OS: Linux, SLC7; How you obtained ROOT: conda install; ### Describe the bug. When using pyROOT (might not necessarily be due to using pyROOT) with '-h' or '--help' in sys.argv, if a ROOT method is called, a root CLI help message will be wrongly printed out. In a lot of cases when designing a python package that uses ROOT with CLI support, this bug will make the CLI print out the root help instead of the intended help message from the python package. ### To reproduce the issue (e.g. using python interpreter):; ```; import sys; sys.argv.append('-h'); import ROOT; ROOT.Double(); ```; This will print out the following message:. """"""; usage: root [-b B] [-x X] [-e E] [-n N] [-t T] [-q Q] [-l L] [-config CONFIG]; [-memstat MEMSTAT] [-h HELP] [--version VERSION]; [--notebook NOTEBOOK] [--web WEB] [--web=<browser> WEB=<BROWSER>]; [dir] [file:data.root] [file1.C...fileN.C]. OPTIONS:; -b Run in batch mode without graphics; -x Exit on exceptions; -e Execute the command passed between single quotes; -n Do not execute logon and logoff macros as specified in .rootrc; -t Enable thread-safety and implicit multi-threading (IMT); -q Exit after processing command line macro files; -l Do not show splash screen; -config print ./configure options; -memstat run with memory usage monitoring; -h, -?, --help Show summary of options; --version Show the ROOT version; --notebook Execute ROOT notebook; --web Display graphics in a default web browser; --web=<browser> Display graphics in specified web browser; [dir] if dir is a valid directory cd to it before executing; [file:data.root] Open the ROOT file data.root; [file1.C...fileN.C] Execute the the ROOT macro file1.C ... fileN.C; """"""; And the program will terminate. ### Expected behaviour. No root CLI help message should be printed out",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7161:1056,log,logon,1056,https://root.cern,https://github.com/root-project/root/issues/7161,2,['log'],"['logoff', 'logon']"
Testability,"### What's wrong. When trying to Snapshot a RDataFrame that contains certain variables of the array type, segmentation violation occurs in 6.26/04. This however works in 6.24/00. ### Expected behavior. No crash... ### To Reproduce. A minimal reproducer can be called by running this code. ```C++; #include ""TROOT.h""; #include ""TChain.h""; #include ""ROOT/RDataFrame.hxx""; using namespace ROOT;. void preselect_test(){; ROOT::EnableImplicitMT(3);. TChain tree(""DecayTree"");; tree.Add(""testtuple.root"");; RDataFrame df1(tree);. TCut AllCuts = ""1>0"";; auto df2 = df1.Filter(AllCuts.GetTitle());; df2.Snapshot(""DecayTree"", ""myoutput.root"");; }; ```; where the input file `testtuple.root` can be found here: https://cernbox.cern.ch/index.php/s/ujgGnDwpDpQZo44 ; In my example, the input file contains a few branches, in particular the array-type variable `Lambda_DTFL_KS_M` which has a size of `Lambda_DTFL_KS_nPV`. In ROOT 6.24/00 this code runs smoothly producing an output file.; In ROOT 6.26/04 the following happens:. ```; Error in <TBranch::TBranch>: Illegal leaf: Lambda_DTFL_KS_M/Lambda_DTFL_KS_M[Lambda_DTFL_KS_nPV]/F. If this is a variable size C array it's possible that the branch holding the size is not available. *** Break *** segmentation violation. ===========================================================; There was a crash.; This is the entire stack trace of all threads:; ===========================================================; #0 0x00007f3f0f1ec60c in waitpid () from /lib64/libc.so.6; #1 0x00007f3f0f169f62 in do_system () from /lib64/libc.so.6; #2 0x00007f3f0f79f545 in TUnixSystem::StackTrace() () from /opt/miniconda/envs/root_forge/lib/libCore.so.6.26; #3 0x00007f3f0f79c8c7 in TUnixSystem::DispatchSignals(ESignals) () from /opt/miniconda/envs/root_forge/lib/libCore.so.6.26; #4 <signal handler called>; #5 0x00007f3efbe302d0 in ?? (); #6 0x0000009900000224 in ?? (); #7 0x0046561992848cc0 in ?? (); #8 0x00007f3f0fa886ba in ?? () from /opt/miniconda/envs/root_forge/lib/li",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10920:482,test,testtuple,482,https://root.cern,https://github.com/root-project/root/issues/10920,2,['test'],['testtuple']
Testability,"### What's wrong?. The signal yield is different before and after calling the `RooStats::SPlot` method. This happens if the signal model is a RooAddPdf. . ### Expected behavior. The signal yield should stay the same after calling the sPlot method. . ### To Reproduce; I have prepared a fairly minimal reproducer based on the `rs301_splot` example.; https://cernbox.cern.ch/index.php/s/2jCaTgG1I2kKakU; how to run: `root testsplot.C`. With ROOT 6.24/00:; the signal yield before and after sPlot is roughly the same✅:; ```; Signal yield before doing an sPlot: 285.981; Signal yield after doing an sPlot: 286.012; ```; With ROOT 6.26/04:; the signal yield after sPlot is reset to zero❌. ; ```; Signal yield before doing an sPlot: 285.981; Signal yield after doing an sPlot: 9.19709e-08; ```; This leads to nonsense behavior of the sWeights, as well as in subsequent plotting, etc.; Some investigation shows that the problem is visible when the signal model is a RooAddPdf, but the issue does not seem to be present if a single PDF is used for the signal. . ### Setup. 1. ROOT version: 6.26/04; 2. Operating system: CentOS 7; 3. How you obtained ROOT: from conda",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10869:420,test,testsplot,420,https://root.cern,https://github.com/root-project/root/issues/10869,1,['test'],['testsplot']
Testability,"##### Edit:; I noticed an issue at https://github.com/root-project/cling/issues/515#issue-2092431022 created six months ago that describes the same problem. Sadly this issue has persisted for such a long time not fixed. 😣. ##### Original PR description:; I'm not certain if it's just me, but after spending an entire day to building Cling, CMake consistently reported that the target `nvptx` was not found. This is quite perplexing, especially for someone with limited experience with CMake like myself. After searching the LLVM repository, I discovered that the target name should be capitalized as `NVPTX`. If this is not just me, then there appears to be a discrepancy in the build guide. ## Changes:; Simply changed `nvptx` to `NVPTX`. Additionally, CMake requires the explicit passing of `-DCMAKE_BUILD_TYPE`, which I have included as well. Fixes https://github.com/root-project/cling/issues/515. ## Checklist:. - [x] tested changes locally; - [x] updated the documentation as necessary",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15972:923,test,tested,923,https://root.cern,https://github.com/root-project/root/pull/15972,1,['test'],['tested']
Testability,"#10966 fixes LikelihoodJob so that it can now be used for parallelizing non-gradient parts of the migrad minimization. This should be reflected in the relevant README.md section here: https://github.com/root-project/root/tree/master/roofit/roofitcore/src/TestStatistics#calculators. We have yet to thoroughly test the class on real life fits. We intend to do this in the coming weeks. After this, we will rewrite the docs, taking into account any possible fixes or API changes that may have been necessary after our tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10967:255,Test,TestStatistics,255,https://root.cern,https://github.com/root-project/root/issues/10967,3,"['Test', 'test']","['TestStatistics', 'test', 'tests']"
Testability,"#13592 broke a few tests in TMVA, visible in that same PR and in all other recent CI builds, e.g. https://github.com/root-project/root/pull/13571. This PR reverts those commits.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13622:19,test,tests,19,https://root.cern,https://github.com/root-project/root/pull/13622,1,['test'],['tests']
Testability,"#2 0x00007ffff4c9c8f3 in __GI___libc_free (mem=<optimized out>) at malloc.c:3391; #3 0x00007ffff7b30e64 in TStorage::ObjectDealloc (vp=0x55555562e410) at ../core/base/src/TStorage.cxx:362; #4 0x00007ffff7b14518 in TObject::operator delete (ptr=0x55555562e410) at ../core/base/src/TObject.cxx:1001; #5 0x00007ffff7b11cba in TObject::~TObject (this=0x55555562e410, __in_chrg=<optimized out>) at ../core/base/src/TObject.cxx:91; #6 0x0000555555556242 in main () at foo.cpp:9; ```. where the line that accidentally sets the bit again is 3181 here:. ```cpp; 3172 /* Caller must ensure that we know tc_idx is valid and there's room; 3173 for more chunks. */; 3174 static __always_inline void; 3175 tcache_put (mchunkptr chunk, size_t tc_idx); 3176 {; 3177 tcache_entry *e = (tcache_entry *) chunk2mem (chunk);; 3178; 3179 /* Mark this chunk as ""in the tcache"" so the test in _int_free will; 3180 detect a double free. */; 3181 e->key = tcache_key;; 3182; 3183 e->next = PROTECT_PTR (&e->next, tcache->entries[tc_idx]);; ```. and this version of the test circumvents that behavior of `_int_free` so it does not crash (at least on my laptop):. ```cpp; void *mem = malloc(sizeof(TObject));; auto o = new (mem) TObject();; auto l = new TList();; l->SetName(""my own list"");; l->Add(o);; o->~TObject();; l->Clear();; free(mem);; ```. If my understanding is correct, this also means that the test failure is real in the sense that the `kNotDeleted` mechanism does not correctly work on platforms where `free` has that behavior. From Philippe (https://github.com/root-project/roottest/pull/880#issuecomment-1239663370):. > We (I) need to extend the core library to detect when there is a memory checker (or similar) that leads to the memory being salted after a delete and in that case disable our own already-deleted test (since it is now ineffective anyway and assumingly it is already doing the job of warning the user about use-after-delete). And subsequently the test needs to also be disabled in those cases.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11330:1413,test,test,1413,https://root.cern,https://github.com/root-project/root/issues/11330,4,['test'],['test']
Testability,"% 8;; 		std::cerr << ""jEntry: "" << jEntry << ""\tnVar: "" << nVar << ""\tvar0: "" << var0 << std::endl;; 		vTest.resize(nVar, 0.);; 		for (size_t iVar = 0; iVar < nVar; ++iVar) {; 			vTest[iVar] = var0 + 0.125 * iVar;; 			std::cerr << vTest[iVar] << "" "" << std::flush;; 		}; 		std::cerr << std::endl;; 		ttOut->Fill();; 	}; 	ttOut->Write();; 	tfOut->Close();; }; ```; 2. Read with `RDataFrame`, define a column, redefine it, and save the two columns to histograms:; `reproduce.C`; ```C++; #include <Rtypes.h>; #include <TFile.h>; #include <TTree.h>; #include <TBranch.h>; #include <TH1.h>; #include <ROOT/RDataFrame.hxx>. #include <vector>; #include <string>. void reproduce(const std::string pathFileIn = ""file_float_vector.root"", const std::string pathFileOut = ""file_out.root"") {; 	TFile *tfIn = TFile::Open(pathFileIn.c_str());; 	TTree *ttIn = tfIn->Get<TTree>(""Events"");; 	ROOT::RDataFrame dfIn(*ttIn);; 	std::cerr << ""Creating a custom column ..."" << std::endl;; 	auto dfAug = dfIn.Define(""TestVar2"", ""TestVar + 1."");; 	std::cerr << ""Redefining ..."" << std::endl;; 	auto dfOut = dfAug.Redefine(""TestVar2"", ""TestVar2.size() ? ROOT::VecOps::Take(TestVar2, {0}) : ROOT::VecOps::Take(TestVar2, {})"");; 	std::cerr << ""Action: Histo1D"" << std::endl;; 	// auto histview1 = dfOut.Histo1D({""hTest1"", ""Histogram showing the column in the input tree"", 30000, 0., 3.}, ""TestVar"");; 	auto histview2 = dfOut.Histo1D({""hTest2"", ""Histogram showing the custom (defined) column"", 30000, 0., 3.}, ""TestVar2"");; 	std::cerr << ""Saving histogram ..."" << std::endl;; 	TFile *tfOut = TFile::Open(pathFileOut.c_str(), ""RECREATE"");; 	tfOut->cd();; 	// std::cerr << ""Writing histview1"" << std::endl;; 	// histview1->Write();; 	std::cerr << ""Writing histview2"" << std::endl;; 	histview2->Write();; 	std::cerr << ""Finalizing ..."" << std::endl;; 	tfOut->Close();; 	tfIn->Close();; 	std::cerr << ""Complete!"" << std::endl;; }; ```. Here is the output of the second piece of code:; <pre><font color=""#55FF55""><b>$</b></font> root -",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8857:2665,Test,TestVar,2665,https://root.cern,https://github.com/root-project/root/issues/8857,1,['Test'],['TestVar']
Testability,"%3Aissue); * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT); for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"".; -->. ## Describe the bug; <!--; A clear and concise description of what the wrong behavior is.; -->. *New PyROOT* fails to (de)serialize the ROOT objects using `pickle` (or `dill`) if `ROOT` module is not pre-imported. ; If one pre-imports `ROOT` module, deserialization is successful, otherwise it results in the segmentation fauilt. ; It is definitely related to *new PyROOT* - with *old PyROOT*, deserialization is successfull both with `pickle` and `dill`.; . (For `python3` there is another problem described in [issue#6370](https://github.com/root-project/root/issues/6370) ); ## Expected behavior; <!--; A clear and concise description of what you expected to happen.; -->; Deseriazation should *not* depend on pre-import of `ROOT`. ## To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->. see this [gist](https://gist.github.com/VanyaBelyaev/1403e2ea8853ad68d7a7fba1e3496f67) where there are reproducers both for `pickle` and for `dill`. The first lines in the scritps show the test matrix: It fails for `LCG_98` and for lcg-dev3-slot, while is it successful for LCG versions from LCG_95 to LCG_97a. (see the environment part in the reproducers) ; ; ## Setup. 1. ROOT version 6.22-6.23; 2. Operating system lxplus ; 3. How you obtained ROOT: lxplus , cvmfs, LCG . ## Additional context; <!--; Add any other context about the problem here.; -->; It could have something common with [issue#6370](https://github.com/root-project/root/issues/6370), but those issue is `pyton3`-specific, while this one for `python2.7+new PyROOT`",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6552:1565,test,test,1565,https://root.cern,https://github.com/root-project/root/issues/6552,1,['test'],['test']
Testability,"' is never read in /opt/root_src/graf3d/g3d/src/TView3D.cxx:687; /opt/root_src/graf3d/g3d/src/TView3D.cxx:1741:20: warning: Value stored to 'count' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'count' is never read in /opt/root_src/graf3d/g3d/src/TView3D.cxx:1741; /opt/root_src/graf3d/g3d/src/TXTRU.cxx:800:14: warning: Although the value stored to 'indx2' is used in the enclosing expression, the value is never actually read from 'indx2' [clang-analyzer-deadcode.DeadStores]; 1: Although the value stored to 'indx2' is used in the enclosing expression, the value is never actually read from 'indx2' in /opt/root_src/graf3d/g3d/src/TXTRU.cxx:800; /opt/root_src/graf3d/gl/src/TGLBoxPainter.cxx:411:7: warning: Value stored to 'maxContent' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'maxContent' is never read in /opt/root_src/graf3d/gl/src/TGLBoxPainter.cxx:411; /opt/root_src/graf3d/gl/src/TGLScene.cxx:1500:7: warning: Value stored to 'logicalShape' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'logicalShape' is never read in /opt/root_src/graf3d/gl/src/TGLScene.cxx:1500; /opt/root_src/graf3d/gl/src/TGLScene.cxx:1510:7: warning: Value stored to 'physicalShape' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'physicalShape' is never read in /opt/root_src/graf3d/gl/src/TGLScene.cxx:1510; /opt/root_src/graf3d/gl/src/TGLVoxelPainter.cxx:270:7: warning: Value stored to 'maxContent' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'maxContent' is never read in /opt/root_src/graf3d/gl/src/TGLVoxelPainter.cxx:270; /opt/root_src/graf3d/gviz3d/src/TStructViewerGUI.cxx:509:7: warning: Variable 'i' with floating point type 'Float_t' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]; 1: Variable 'i' with floating point type 'Float_t' should not be used as a loop counter in /opt/root_src/graf3d/gviz3d/src/TStructViewerGUI.cxx:509; /opt/root",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7531:57402,log,logicalShape,57402,https://root.cern,https://github.com/root-project/root/issues/7531,1,['log'],['logicalShape']
Testability,"'__atomic_fetch_add_8' unresolved. It does not fail on any other Fedora architectures including 32 bit arm. Fedora koji scratch build: https://koji.fedoraproject.org/koji/taskinfo?taskID=55575382. ```; 50/1028 Test #11: pyunittests-pyroot-pyz-ttree-branch-attr ............................***Failed 1.24 sec; test_alias_branch (ttree_branch_attr.TTreeBranchAttr) ... ok; test_array_branch (ttree_branch_attr.TTreeBranchAttr) ... ok; test_basic_type_branch (ttree_branch_attr.TTreeBranchAttr) ... ok; test_char_array_branch (ttree_branch_attr.TTreeBranchAttr) ... ok; test_ntuples (ttree_branch_attr.TTreeBranchAttr) ... ok; test_struct_branch (ttree_branch_attr.TTreeBranchAttr) ... ok; test_struct_branch_leaflist (ttree_branch_attr.TTreeBranchAttr) ... ok; test_ttree_subclass_in_namespace (ttree_branch_attr.TTreeBranchAttr) ... IncrementalExecutor::executeFunction: symbol '__atomic_fetch_add_8' unresolved while linking symbol '__cf_16'!; ERROR; test_vector_branch (ttree_branch_attr.TTreeBranchAttr) ... ok; ======================================================================; ERROR: test_ttree_subclass_in_namespace (ttree_branch_attr.TTreeBranchAttr); ----------------------------------------------------------------------; Traceback (most recent call last):; File ""/builddir/build/BUILD/root-6.22.04/bindings/pyroot/pythonizations/test/ttree_branch_attr.py"", line 139, in test_ttree_subclass_in_namespace; t = ROOT.Foo.MyTree(); TypeError: Foo::MyTree constructor failed; ----------------------------------------------------------------------; Ran 9 tests in 0.509s; FAILED (errors=1); CMake Error at /builddir/build/BUILD/root-6.22.04/cmake/modules/RootTestDriver.cmake:237 (message):; error code: 1; ```; ### Expected behavior; Successful test on all architectures. ### To Reproduce; 1. Compile root 6.22.04 for ix32; 2. Run unit tests. ### Setup; 1. ROOT version: 6.22.04; 2. Operating system: Fedora Linux 32/33/34 for ix32; 3. Compilation from source during packaging for Fedora/EPEL",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6813:1687,test,test,1687,https://root.cern,https://github.com/root-project/root/issues/6813,4,['test'],"['test', 'tests']"
Testability,(Failed); 	213 - gtest-roofit-histfactory-test-testHistFactory (Failed); 	219 - gtest-roofit-roofit-test-testRooCrystalBall (Failed); 	220 - gtest-roofit-roofit-test-testRooJohnson (Failed); 	223 - gtest-roofit-roofit-test-testSumW2Error (Failed); 	228 - gtest-roofit-roofitcore-test-testRooBinSamplingPdf (Failed); 	229 - gtest-roofit-roofitcore-test-testRooSimPdfBuilder (Failed); 	230 - gtest-roofit-roofitcore-test-testRooWrapperPdf (Failed); 	231 - gtest-roofit-roofitcore-test-testRooFitDriver (Failed); 	233 - gtest-roofit-roofitcore-test-testRooAbsPdf (Failed); 	237 - gtest-roofit-roofitcore-test-testRooProdPdf (Failed); 	241 - gtest-roofit-roofitcore-test-testTestStatistics (Failed); 	242 - gtest-roofit-roofitcore-test-testRooProductPdf (Failed); 	243 - gtest-roofit-roofitcore-test-testNaNPacker (Failed); 	244 - gtest-roofit-roofitcore-test-testRooSimultaneous (Failed); 	245 - gtest-roofit-roofitcore-test-testRooGradMinimizerFcn (Failed); 	247 - gtest-roofit-roofitcore-test-testLikelihoodSerial (Failed); 	248 - gtest-roofit-roofitcore-test-testRooRealL (Failed); 	249 - gtest-roofit-roofitcore-test-testGlobalObservables (Failed); 	252 - gtest-roofit-roostats-test-testSPlot (Failed); 	274 - test-stresshistogram (Failed); 	275 - test-stresshistogram-interpreted (Failed); 	296 - test-stresshistofit (Failed); 	297 - test-stresshistofit-interpreted (Failed); 	396 - gtest-tree-dataframe-test-datasource-ntuple (Failed); 	402 - gtest-tree-ntuple-v7-test-ntuple-basics (Failed); 	406 - gtest-tree-ntuple-v7-test-ntuple-merger (Failed); 	412 - gtest-tree-ntuple-v7-test-ntuple-serialize (Failed); 	420 - gtest-tree-ntuple-v7-test-ntuple-minifile (Failed); 	423 - gtest-tree-ntuple-v7-test-ntuple-extended (Failed); 	870 - tutorial-roofit-rf612_recoverFromInvalidParameters (Failed); 	1077 - tutorial-dataframe-df006_ranges-py (Failed); 	1106 - tutorial-math-exampleFunction-py (Failed); Errors while running CTest; ```; With the proposed change in #10303 to not fail on the warning ab,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10409:1506,test,test-testLikelihoodSerial,1506,https://root.cern,https://github.com/root-project/root/issues/10409,1,['test'],['test-testLikelihoodSerial']
Testability,"(Failed); 	219 - gtest-roofit-roofit-test-testRooCrystalBall (Failed); 	220 - gtest-roofit-roofit-test-testRooJohnson (Failed); 	223 - gtest-roofit-roofit-test-testSumW2Error (Failed); 	228 - gtest-roofit-roofitcore-test-testRooBinSamplingPdf (Failed); 	229 - gtest-roofit-roofitcore-test-testRooSimPdfBuilder (Failed); 	230 - gtest-roofit-roofitcore-test-testRooWrapperPdf (Failed); 	231 - gtest-roofit-roofitcore-test-testRooFitDriver (Failed); 	233 - gtest-roofit-roofitcore-test-testRooAbsPdf (Failed); 	237 - gtest-roofit-roofitcore-test-testRooProdPdf (Failed); 	241 - gtest-roofit-roofitcore-test-testTestStatistics (Failed); 	242 - gtest-roofit-roofitcore-test-testRooProductPdf (Failed); 	243 - gtest-roofit-roofitcore-test-testNaNPacker (Failed); 	244 - gtest-roofit-roofitcore-test-testRooSimultaneous (Failed); 	245 - gtest-roofit-roofitcore-test-testRooGradMinimizerFcn (Failed); 	247 - gtest-roofit-roofitcore-test-testLikelihoodSerial (Failed); 	248 - gtest-roofit-roofitcore-test-testRooRealL (Failed); 	249 - gtest-roofit-roofitcore-test-testGlobalObservables (Failed); 	252 - gtest-roofit-roostats-test-testSPlot (Failed); 	274 - test-stresshistogram (Failed); 	275 - test-stresshistogram-interpreted (Failed); 	296 - test-stresshistofit (Failed); 	297 - test-stresshistofit-interpreted (Failed); 	396 - gtest-tree-dataframe-test-datasource-ntuple (Failed); 	402 - gtest-tree-ntuple-v7-test-ntuple-basics (Failed); 	406 - gtest-tree-ntuple-v7-test-ntuple-merger (Failed); 	412 - gtest-tree-ntuple-v7-test-ntuple-serialize (Failed); 	420 - gtest-tree-ntuple-v7-test-ntuple-minifile (Failed); 	423 - gtest-tree-ntuple-v7-test-ntuple-extended (Failed); 	870 - tutorial-roofit-rf612_recoverFromInvalidParameters (Failed); 	1077 - tutorial-dataframe-df006_ranges-py (Failed); 	1106 - tutorial-math-exampleFunction-py (Failed); Errors while running CTest; ```; With the proposed change in #10303 to not fail on the warning about RooNaNPacker not being implemented for big endian, the list",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10409:1573,test,test-testRooRealL,1573,https://root.cern,https://github.com/root-project/root/issues/10409,1,['test'],['test-testRooRealL']
Testability,"(For context, this is important for multi-dimensional constant arrays as described in [ROOT-7016](https://sft.its.cern.ch/jira/browse/ROOT-7016) and tested in Cling's `Interfaces/evaluate.C` test. But for reasons unknown to me, the ROOT prompt now seems to have a different way of handling this case because just reverting commit https://github.com/root-project/root/commit/d97e4dca36370a1f036026cb6976416670882bc6 still works there...). Instead of using relying on recursive templated calls, perform the type cast in the `ValueExtractionSynthesizer`. This has the advantage of avoiding an ODR violation warning in `MultipleInterpreters.C` with LLVM 16 (while unclear if that one is correct or not).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13477:149,test,tested,149,https://root.cern,https://github.com/root-project/root/pull/13477,2,['test'],"['test', 'tested']"
Testability,"(Helper &&h, const ColumnNames_t &bl, std::shared_ptr<PrevDataFrame> pd,; ^; /home/stefan/src/miniconda3/envs/test-jupyroot/bin/../lib/gcc/x86_64-conda-linux-gnu/7.5.0/../../../../x86_64-conda-linux-gnu/include/c++/7.5.0/bits/unique_ptr.h:821:34: note: in instantiation of member function 'ROOT::Internal::RDF::RAction<ROOT::Internal::RDF::FillHelper, ROOT::Detail::RDF::RNodeBase, ROOT::TypeTraits::TypeList<ROOT::VecOps::RVec<bool> > >::RAction' requested here; { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }; ^; /home/stefan/src/miniconda3/envs/test-jupyroot/include/ROOT/RDF/InterfaceUtils.hxx:157:19: note: in instantiation of function template specialization 'std::make_unique<ROOT::Internal::RDF::RAction<ROOT::Internal::RDF::FillHelper, ROOT::Detail::RDF::RNodeBase, ROOT::TypeTraits::TypeList<ROOT::VecOps::RVec<bool> > >, ROOT::Internal::RDF::FillHelper, const std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > &, std::shared_ptr<ROOT::Detail::RDF::RNodeBase>, ROOT::Internal::RDF::RBookedCustomColumns>' requested here; return std::make_unique<Action_t>(Helper_t(h, nSlots), bl, std::move(prevNode), std::move(customColumns));; ^; /home/stefan/src/miniconda3/envs/test-jupyroot/include/ROOT/RDF/InterfaceUtils.hxx:458:21: note: in instantiation of function template specialization 'ROOT::Internal::RDF::BuildAction<ROOT::VecOps::RVec<bool> , ROOT::Detail::RDF::RNodeBase>' requested here; auto actionPtr = BuildAction<BranchTypes...>(bl, std::move(rOnHeap), nSlots, std::move(prevNodePtr), ActionTag{},; ^; input_line_35:2:23: note: in instantiation of function template specialization 'ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, ROOT::VecOps::RVec<bool> , ROOT::Detail::RDF::RNodeBase, TH1D>' requested here; ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, R",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6675:6854,test,test-jupyroot,6854,https://root.cern,https://github.com/root-project/root/issues/6675,1,['test'],['test-jupyroot']
Testability,(cherry picked from commit 29c5501983ff3945478014000de06a1fd6ef619a). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9498:135,test,tested,135,https://root.cern,https://github.com/root-project/root/pull/9498,1,['test'],['tested']
Testability,(cherry picked from commit e11fb101e6edc7616798efe253be733aef2f6197)# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11872:133,test,tested,133,https://root.cern,https://github.com/root-project/root/pull/11872,1,['test'],['tested']
Testability,"(clang::Stmt*, llvm::SmallVectorImpl<llvm::PointerIntPair<clang::Stmt*, 1u, bool, llvm::PointerLikeTypeTraits<clang::Stmt*>, llvm::PointerIntPairInfo<clang::Stmt*, 1u, llvm::PointerLikeTypeTraits<clang::Stmt*> > > >*) [clone .constprop.0] () from /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/CMSSW_13_2_ROOT628_X_2023-05-04-2300/external/el8_amd64_gcc11/lib/libCling.so; #21 0x00002b4bd39ef9be in cling::DeclUnloader::VisitFunctionDecl(clang::FunctionDecl*) () from /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/CMSSW_13_2_ROOT628_X_2023-05-04-2300/external/el8_amd64_gcc11/lib/libCling.so; #22 0x00002b4bd39bf764 in cling::TransactionUnloader::unloadDeserializedDeclarations(cling::Transaction*, cling::DeclUnloader&) () from /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/CMSSW_13_2_ROOT628_X_2023-05-04-2300/external/el8_amd64_gcc11/lib/libCling.so; #23 0x00002b4bd39bfc86 in cling::TransactionUnloader::RevertTransaction(cling::Transaction*) () from /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/CMSSW_13_2_ROOT628_X_2023-05-04-2300/external/el8_amd64_gcc11/lib/libCling.so; #24 0x00002b4bd39a4afe in cling::Interpreter::unload(cling::Transaction&) () from /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/CMSSW_13_2_ROOT628_X_2023-05-04-2300/external/el8_amd64_gcc11/lib/libCling.so; #25 0x00002b4bd3a28bcf in cling::IncrementalParser::commitTransaction(llvm::PointerIntPair<cling::Transaction*, 2u, cling::IncrementalParser::EParseResult, llvm::PointerLikeTypeTraits<cling::Transaction*>, llvm::PointerIntPairInfo<cling::Transaction*, 2u, llvm::PointerLikeTypeTraits<cling::Transaction*> > >&, bool) () from /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/CMSSW_13_2_ROOT628_X_2023-05-04-2300/external/el8_amd64_gcc11/lib/libCling.so; #26 0x00002b4bd3a2b9b9 in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/CMSSW_13_2_ROOT628_X_20",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12771:7384,test,tests,7384,https://root.cern,https://github.com/root-project/root/issues/12771,2,['test'],['tests']
Testability,"(const auto& element : test_map_){; std::cout << element.first[0] << "" "" << element.first[1] << "" "" << element.second << std::endl;; }; }; private:; std::map<std::array<std::string, 2>, std::string> test_map_{};; ClassDef(TestClass, 1);; };; ClassImp(TestClass); ; void test(){; auto* test_obj = new TestClass;; test_obj->Print();; ; auto* file = TFile::Open(""test.root"", ""recreate"");; test_obj->Write(""obj"");; file->Close();; ; delete file;; delete test_obj;; ; file = TFile::Open(""test.root"", ""read"");; test_obj = file->Get<TestClass>(""obj"");; test_obj->Print();; ; file->Close();; delete file;; }; ; int main(int argc, char* argv[]) {; test();; return 0;; }. ### Running the example. With a compiled code everything works as expected:. root -l; root [0] .L test.cpp+; root [1] test(). gives correct output:. aaaa bbbbbb cccc; aaaa bbbbbb cccc. But if I try to read again the same file:. root -l test.root; root [0] gSystem->Load(""test_cpp""); root [1] obj->Print(); Error in <TBufferFile::ReadVersion>: Could not find the StreamerInfo with a checksum of 0x6b3ba626 for the class ""string"" in test.root.; Error in <TBufferFile::CheckByteCount>: object of class string read too many bytes: 72 instead of 24; Warning in <TBufferFile::CheckByteCount>: string::Streamer() not in sync with data on file test.root, fix Streamer(); aaaabbbbbb@ cccc�i�� cccc. With an older version of ROOT (6.18), everything works as expected. ### Some additional information. I tried to compare StreamerInfo for 2 ROOT versions and they are different (last item):. **root 6.18**. root [2] _file0->ShowStreamerInfo(); OBJ: TList TList Doubly linked list : 0; ; StreamerInfo for class: TestClass, version=1, checksum=0x84f55819; TObject BASE offset= 0 type=66 Basic ROOT object; map<array<string,2>,string> test_map_ offset= 0 type=300 (nodelete) ,stl=4, ctype=61,; ; StreamerInfo for class: pair<array<string,2>,string>, version=1, checksum=0x64321048; string first [2] offset= 0 type=320 ,stl=365, ctype=365,; string second ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8268:1598,test,test,1598,https://root.cern,https://github.com/root-project/root/issues/8268,1,['test'],['test']
Testability,"(reported by -Wimplicit-int-float-conversion). Fixing next failure (http://cdash.cern.ch/testDetails.php?test=69494934&build=706195):; -- TEST COMMAND -- ; cd /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core; /usr/bin/timeout -s USR2 270s root.exe -e '#define ClingWorkAroundMissingDynamicScope' -e '#define ClingWorkAroundUnnamedInclude' -e '#define ClingWorkAroundMissingSmartInclude' -e '#define ClingWorkAroundNoDotInclude' -e '#define ClingWorkAroundMissingAutoLoadingForTemplates' -e '#define ClingWorkAroundAutoParseUsingNamespace' -e '#define ClingWorkAroundTClassUpdateDouble32' -e '#define ClingWorkAroundAutoParseDeclaration' -e '#define ClingWorkAroundMissingUnloading' -e '#define ClingWorkAroundBrokenUnnamedReturn' -e '#define ClingWorkAroundUnnamedDetection2' -e 'gSystem->SetBuildDir(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"",true)' -e 'gSystem->AddDynamicPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gROOT->SetMacroPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core"")' -e 'gInterpreter->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gSystem->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -q -l -b /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+; -- BEGIN TEST OUTPUT --. Processing /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+...; Checking FromHumanReadableSize; Checking ToHumanReadableSize; Checking 1024 vs 1.024KiB an 1KB; Checking 2097152 vs 2.09715MiB an 2MB; Checking 4294967296 vs 4.29497GiB an 4GB; Checking 8796093022208 vs 8.7960",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4257:89,test,testDetails,89,https://root.cern,https://github.com/root-project/root/pull/4257,4,"['TEST', 'assert', 'test']","['TEST', 'assertHumanReadable', 'test', 'testDetails']"
Testability,") IncrementalParser.cpp:0:0; #31 0x0000000001529c34 cling::IncrementalParser::Initialize(llvm::SmallVectorImpl<llvm::PointerIntPair<cling::Transaction*, 2u, cling::IncrementalParser::EParseResult, llvm::PointerLikeTypeTraits<cling::Transaction*>, llvm::PointerIntPairInfo<cling::Transaction*, 2u, llvm::PointerLikeTypeTraits<cling::Transaction*> > > >&, bool) IncrementalParser.cpp:0:0; #32 0x000000000151d992 cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > > const&, bool, cling::Interpreter const*) Interpreter.cpp:0:0; #33 0x00000000014a5117 std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > >::~vector() /scratch/greenc/test-products/clang/v14_0_6b/Linux64bit+3.10-2.17/bin/../include/c++/v1/vector:399:17; #34 0x00000000014a5117 RootClingMain(int, char**, bool) /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:4315:7; #35 0x00000000014b2135 ROOT_rootcling_Driver /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:0:16; #36 0x00000000014f6b7e main /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/rootcling_stage1/src/rootcling_stage1.cxx:46:4; #37 0x00007f1551302555 __libc_start_main (/lib64/libc.so.6+0x22555); #38 0x000000000143eb89 _start (/scratch/greenc/test-products/root/v6_26_04/build/Linux64bit+3.10-2.17-c13-p3912-prof/core/rootcling_stage1/src/rootcling_stage1+0x143eb89); <snip/>; ```. ### Expected behavior. Successful build. ### To Reproduce. Attempt to build ROOT with LLVM/Clang 14.0.6 and C++17 / `libc++` (precise configuration should be irrelevant provided `runtime_cxxmodules` is `ON`). ### Additional context. This was a second, simplified attempt after `rootcling` failed to find PSTL headers (_e.g._ `_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10861:5563,test,test-products,5563,https://root.cern,https://github.com/root-project/root/issues/10861,1,['test'],['test-products']
Testability,") and sometimes it is not. Making a ""log message"" persistant sounds a bit weird ... But may be it should be ? ... at least the current code is not consistent: ; ```; tmva/inc/TMVA/ClassInfo.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service; tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger; tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger; tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message log",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9792:1125,log,logger,1125,https://root.cern,https://github.com/root-project/root/issues/9792,1,['log'],['logger']
Testability,") from /cvmfs/cms.cern.ch/slc7_amd64_gcc700/lcg/root/6.12.07-gnimlf5/lib/libTree.so; #10 0x00007f935cc6f4f9 in TBranchElement::GetEntry(long long, int) () from /cvmfs/cms.cern.ch/slc7_amd64_gcc700/lcg/root/6.12.07-gnimlf5/lib/libTree.so; #11 0x00007f935ccb5801 in TTree::GetEntry(long long, int) () from /cvmfs/cms.cern.ch/slc7_amd64_gcc700/lcg/root/6.12.07-gnimlf5/lib/libTree.so; #12 0x00007f9335473a51 in fitSignalShapeSimul(int*, int, int, int, int, int, double*, double*, double*, double*, double*, double*) () from /afs/cern.ch/user/m/mnadeem/roottut/CMSSW_10_2_5_patch1/src/ZZAnalysis/AnalysisStep/test/CombInputs/fitSignalShapeSimul_C.so; #13 0x00007f933547ba70 in all(int, int, int, int) () from /afs/cern.ch/user/m/mnadeem/roottut/CMSSW_10_2_5_patch1/src/ZZAnalysis/AnalysisStep/test/CombInputs/fitSignalShapeSimul_C.so; #14 0x00007f9334277091 in ?? (); #15 0x0000000100000000 in ?? (); #16 0x00007f933547b720 in ?? () from /afs/cern.ch/user/m/mnadeem/roottut/CMSSW_10_2_5_patch1/src/ZZAnalysis/AnalysisStep/test/CombInputs/fitSignalShapeSimul_C.so; #17 0x000000012f52f130 in ?? (); #18 0x000000000084ad90 in ?? (); #19 0x00007f9365b486b0 in ?? () from /cvmfs/cms.cern.ch/slc7_amd64_gcc700/lcg/root/6.12.07-gnimlf5/lib/libCling.so; #20 0x00007ffe2f52f560 in ?? (); #21 0x00007f9334277000 in ?? (); #22 0x00007f9365acc1d2 in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) [clone .part.248] () from /cvmfs/cms.cern.ch/slc7_amd64_gcc700/lcg/root/6.12.07-gnimlf5/lib/libCling.so; #23 0x00007f9365ace8b9 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () from /cvmfs/cms.cern.ch/slc7_amd64_gcc700/lcg/root/6.12.07-gnimlf5/lib/libCling.so; #24 0x00007f9365acedcb in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Trans",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7496:8163,test,test,8163,https://root.cern,https://github.com/root-project/root/issues/7496,1,['test'],['test']
Testability,")(), char const*) () from /lib64/libgtest.so.1.8.0; #29 0x00007fffa3381374 in testing::Test::Run() () from /lib64/libgtest.so.1.8.0; #30 0x00007fffa3381578 in testing::TestInfo::Run() () from /lib64/libgtest.so.1.8.0; #31 0x00007fffa33816b4 in testing::TestCase::Run() () from /lib64/libgtest.so.1.8.0; #32 0x00007fffa3381da8 in testing::internal::UnitTestImpl::RunAllTests() () from /lib64/libgtest.so.1.8.0; #33 0x00007fffa3382004 in testing::UnitTest::Run() () from /lib64/libgtest.so.1.8.0; #34 0x00007fffa3310988 in main () from /lib64/libgtest_main.so.1.8.0; #35 0x00007fffa0829f5c in generic_start_main.isra () from /lib64/glibc-hwcaps/power9/libc-2.28.so; #36 0x00007fffa082a0f4 in __libc_start_main () from /lib64/glibc-hwcaps/power9/libc-2.28.so; #37 0x0000000000000000 in ?? (); ===========================================================; pure virtual method called; terminate called without an active exception; ~~~. There are failures running from Python:. ~~~; 427/1192 Test #397: pyunittests-dataframe-histograms ....................................***Failed 191.35 sec; test_histo1D (dataframe_histograms.HistogramsFromRDF) ... *** Break *** segmentation violation; ===========================================================; There was a crash (#8 0x00007fff7c7ac284 in SigHandler (sig=<optimized out>) at /builddir/build/BUILD/root-6.28.00/core/unix/src/TUnixSystem.cxx:395).; This is the entire stack trace of all threads:; ===========================================================; #0 0x00007fff89ef2f04 in waitpid () from /lib64/glibc-hwcaps/power9/libc-2.28.so; #1 0x00007fff89e5a38c in do_system () from /lib64/glibc-hwcaps/power9/libc-2.28.so; #2 0x00007fff8ac49ad8 in system_compat () from /lib64/glibc-hwcaps/power9/libpthread-2.28.so; #3 0x00007fff7c7a9044 in TUnixSystem::Exec (shellcmd=<optimized out>, this=<optimized out>) at /builddir/build/BUILD/root-6.28.00/core/unix/src/TUnixSystem.cxx:2104; #4 TUnixSystem::StackTrace (this=0x16573fa50) at /builddir/build/BUIL",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12372:26275,Test,Test,26275,https://root.cern,https://github.com/root-project/root/issues/12372,1,['Test'],['Test']
Testability,"). However, _Size_ stored only the size of the payload.; - Use a `std::variant<...>` to represent type-specific information stored in the locator.; - Separate serialization of non-simple locators (i.e. those having the `T` bit set to 1). Serialization for those types is provided by `{Serialize,Deserialize}LocatorPayloadXxx()`.; - For non-disk locators (i.e., those with `T == 1`), add a _Reserved_ 8bit field that can be used by concrete backends to store 8bits of additional information per locator.; To accommodate that, _Size_ has been reduced to 16 bits, i.e. the maximum size of a locator is now 64kB, which is still enough.; - Explicitly store the locator type in a dedicated member in the `RNTupleLocator` structure. This makes it possible to have different type values even if the payload structure is identical, i.e. use the same alternative in the `fPosition` variant.; **NOTE:** given the reorder of members, `sizeof(RNTupleLocator)` is preserved before and after the changes in this branch, at least in x86_64 and libstdc++.; - Reassign the first representable value for the _Type_ (0x01) for URI string locators. This makes the entire contiguous range [0x02, 0x7f] assignable for concrete backends.; **NOTE:** given that URI locators were so far unused in produced files, the change should not break existing ntuples.; - Provide a new locator payload format: `RNTupleLocatorObject64`. This structure groups common data for object stores using 64bit location information.; In some cases, for locators referencing pages, this might not contain the full location of the content. In particular, concrete backends may use this information in conjunction with the cluster and column ID.; - Assign the _Type_ `0x02` for DAOS (layout of payload is given by `RNTupleLocatorObject64`).; - Update `specifications.md` accordingly. Follow-up PRs: use `kTypeDAOS` locators in RPageStorageDaos. ## Checklist:; - [X] tested changes locally; - [X] updated the docs (if necessary). This PR fixes #11758.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11828:2526,test,tested,2526,https://root.cern,https://github.com/root-project/root/pull/11828,1,['test'],['tested']
Testability,"); 	296 - test-stresshistofit (Failed); 	297 - test-stresshistofit-interpreted (Failed); 	396 - gtest-tree-dataframe-test-datasource-ntuple (Failed); 	402 - gtest-tree-ntuple-v7-test-ntuple-basics (Failed); 	406 - gtest-tree-ntuple-v7-test-ntuple-merger (Failed); 	412 - gtest-tree-ntuple-v7-test-ntuple-serialize (Failed); 	420 - gtest-tree-ntuple-v7-test-ntuple-minifile (Failed); 	423 - gtest-tree-ntuple-v7-test-ntuple-extended (Failed); 	870 - tutorial-roofit-rf612_recoverFromInvalidParameters (Failed); 	1077 - tutorial-dataframe-df006_ranges-py (Failed); 	1106 - tutorial-math-exampleFunction-py (Failed); Errors while running CTest; ```; With the proposed change in #10303 to not fail on the warning about RooNaNPacker not being implemented for big endian, the list of failures is shorter:; ```; 99% tests passed, 17 tests failed out of 1232; Label Time Summary:; longtest = 540.69 sec*proc (27 tests); multithreaded = 678.83 sec*proc (2 tests); python_runtime_deps = 60.39 sec*proc (11 tests); tutorial = 3802.05 sec*proc (786 tests); Total Test time (real) = 2732.59 sec; The following tests FAILED:; 	 16 - pyunittests-pyroot-pyz-stl-vector (Failed); 	 57 - pyunittests-pyroot-pyz-rtensor (Failed); 	237 - gtest-roofit-roofitcore-test-testRooProdPdf (Failed); 	243 - gtest-roofit-roofitcore-test-testNaNPacker (Failed); 	274 - test-stresshistogram (Failed); 	275 - test-stresshistogram-interpreted (Failed); 	296 - test-stresshistofit (Failed); 	297 - test-stresshistofit-interpreted (Failed); 	396 - gtest-tree-dataframe-test-datasource-ntuple (Failed); 	402 - gtest-tree-ntuple-v7-test-ntuple-basics (Failed); 	406 - gtest-tree-ntuple-v7-test-ntuple-merger (Failed); 	412 - gtest-tree-ntuple-v7-test-ntuple-serialize (Failed); 	420 - gtest-tree-ntuple-v7-test-ntuple-minifile (Failed); 	423 - gtest-tree-ntuple-v7-test-ntuple-extended (Failed); 	870 - tutorial-roofit-rf612_recoverFromInvalidParameters (Failed); 	1077 - tutorial-dataframe-df006_ranges-py (Failed); 	1106 - tutorial-mat",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10409:2804,test,tests,2804,https://root.cern,https://github.com/root-project/root/issues/10409,1,['test'],['tests']
Testability,* A pythonization of `RooAbsCollection::addOwned` is introduced to fix issue #8120. * The unit tests for the pythonization of `RooAbsCollection` were also extended to cover new developments from PR https://github.com/root-project/root/pull/8177. * A pythonization of `RooAbsCollection::operator()` is introduced as discussed in https://github.com/root-project/root/pull/8174.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8179:95,test,tests,95,https://root.cern,https://github.com/root-project/root/pull/8179,1,['test'],['tests']
Testability,"* Adapted from the physics analysis examples published with the 13 TeV; ATLAS Open Data release in 2020; * See http://opendata.atlas.cern/release/2020/documentation/physics/intro.html. Voila! Most likely the last tutorial I'll factor out of the ATLAS Open Data release. It's a nice one because it's very similar to the [W boson analysis](https://root.cern/doc/master/df105__WBosonAnalysis_8py.html), but in contrary heavily filters and looks for the rare production of a single top. We can run on 60GB (this one runs by default only on 5% of it), which makes it also a nice benchmark or example to test scaling with heavy filtering of the inital datasets. That's the result:. ![Screenshot from 2020-07-31 14-32-56](https://user-images.githubusercontent.com/6951222/89035448-40af8f80-d33b-11ea-976b-f2f03ea00c5c.png)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6107:574,benchmark,benchmark,574,https://root.cern,https://github.com/root-project/root/pull/6107,2,"['benchmark', 'test']","['benchmark', 'test']"
Testability,"* Add a new `ExternalConstraints()` field to the model config, to be directly passed to `createNLL`. This follows exactly the same pattern as the fields for `GlobalObservables()` and `ProjectedObservables()`. * New `ModelConfig::createNLL()` and `fitTo()` functions, such that the user doesn't need to manually transfer the information from the ModelConfig to `RooAbsPdf::createNLL/fitTo()`. * Use the new `ModelConfig::createNLL()` in RooStats to give it a little bit of test coverage. FYI @cburgard",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12877:472,test,test,472,https://root.cern,https://github.com/root-project/root/pull/12877,1,['test'],['test']
Testability,* Add array interface; * Add `__getitem__` magic; * Add tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4043:56,test,tests,56,https://root.cern,https://github.com/root-project/root/pull/4043,1,['test'],['tests']
Testability,* Comment out asserts.; * Speedup inner loop by moving some checks one level up in the outer loop.; * Actually support rewinding an RArrowDS,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3433:14,assert,asserts,14,https://root.cern,https://github.com/root-project/root/pull/3433,1,['assert'],['asserts']
Testability,* Fix Cocoa GUI for MacOS14 and clang5. * Fix the text editor (Thanks Timur !). (cherry picked from commit 6593d774ea90fbd9e5a139c1e429ac2da6125a98). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13947:215,test,tested,215,https://root.cern,https://github.com/root-project/root/pull/13947,1,['test'],['tested']
Testability,* Fixes a warning in newer python version (first commit); * Adds a test that we actually adopt memory from C++ objects and fixes the broken adoption from `numpy.array`. We should merge first the respective benchmarks in rootbench. The PR is ongoing here: https://github.com/root-project/rootbench/pull/195,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6496:67,test,test,67,https://root.cern,https://github.com/root-project/root/pull/6496,2,"['benchmark', 'test']","['benchmarks', 'test']"
Testability,* I have refactored the existing methodDL tests to support testing various optimizers.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2379:42,test,tests,42,https://root.cern,https://github.com/root-project/root/pull/2379,2,['test'],"['testing', 'tests']"
Testability,* Implement Adagrad Optimizer.; * Add Unit tests and MethodDL tests. Reference Implementation: [Tensorflow Adadelta Optimizer](https://www.tensorflow.org/api_docs/python/tf/keras/optimizers/Adadelta),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2441:43,test,tests,43,https://root.cern,https://github.com/root-project/root/pull/2441,2,['test'],['tests']
Testability,* Implement Adagrad Optimizer.; * Add Unit tests and MethodDL tests. Reference Implementation: [Tensorflow Adagrad Optimizer](https://www.tensorflow.org/api_docs/python/tf/train/AdagradOptimizer),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2439:43,test,tests,43,https://root.cern,https://github.com/root-project/root/pull/2439,2,['test'],['tests']
Testability,* Implement Adam Optimizer.; * Add Unit tests and MethodDL tests. Reference Implementation: [Tensorflow Adam Optimizer](https://www.tensorflow.org/api_docs/python/tf/train/AdamOptimizer),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2438:40,test,tests,40,https://root.cern,https://github.com/root-project/root/pull/2438,2,['test'],['tests']
Testability,"* Implement ConstAdd, ConstMult, ReciprocalElementWise, SquareElementWise, SqrtElementWise in CPU, GPU and Reference architectures. * Add Unit Tests for them in CPU, GPU architecture. * Add ROOT Style docs and clang format the code.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2315:143,Test,Tests,143,https://root.cern,https://github.com/root-project/root/pull/2315,1,['Test'],['Tests']
Testability,* Implement RMSProp Optimizer.; * Add Unit tests and MethodDL tests. Reference Implementation: [Tensorflow RMSProp Optimizer](https://www.tensorflow.org/api_docs/python/tf/train/RMSPropOptimizer),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2440:43,test,tests,43,https://root.cern,https://github.com/root-project/root/pull/2440,2,['test'],['tests']
Testability,* Increases the test coverage of interacting with third-party python packages; * Improve message to user if the pandas package is not found,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5397:16,test,test,16,https://root.cern,https://github.com/root-project/root/pull/5397,1,['test'],['test']
Testability,"* Make central function `TestReport()` which executes all planned tests for the canvas. ; * Print report when all images and scripts are generated. ; * Resort function orders to avoid need of forward declarations; * Use `TString::Format()` instead of `snprintf`; * Use `TFile::Open()` instead of `new TFile`; * Improve handling of command line args like `-k` or `-v`; * Create SVG instead of PS files when running in web mode, provide correspondent ref file; * Adjust web ref file to work on Chrome and Firefox. All this simplify structure of sressGraphics code. Execution time in web mode with chrome browser 109s. ```; ./stressGraphics --web=chrome; ... **********************************************************************; * All the tests passed. :-); **********************************************************************; * SYS: Linux hades58 6.10.11-1-default #1 SMP PREEMPT_DYNAMIC Thu S; **********************************************************************; * stressGraphics: Real Time = 109.74 seconds Cpu Time = 8.32 seconds; **********************************************************************; * ROOTMARKS =4870.6 * Root 6.33.01 20231010/0; **********************************************************************; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16579:25,Test,TestReport,25,https://root.cern,https://github.com/root-project/root/pull/16579,3,"['Test', 'test']","['TestReport', 'tests']"
Testability,"* Mark (most) `RField` specializations as `final`; the only exception is `RField<std::array<ItemT, N>>` which is the base class of `RField<ItemT[N]>`.; * Mark (most) overriden functions in the `RFieldBase` hierarchy as final; the only exception is `RSimpleField::GenerateColumns` which is overriden by `RRealField`.; * Remove many duplicate implementations in the compile-time specialized classes: The reasoning is that we use the type-erased implementations with `RFieldBase::Create`, when reconstructing a model from disk, or when `Clone`ing a model. So if they are not performant, we have to fix them anyway. For completeness, there seems to be no performance change in the `iotools` benchmarks (with hot cache, to put emphasis on the RNTuple implementation).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16721:687,benchmark,benchmarks,687,https://root.cern,https://github.com/root-project/root/pull/16721,1,['benchmark'],['benchmarks']
Testability,* Modified the logic of MapReduce and Map of the TThreadExecutor which were; initially broken for the TThreadExecutor;; * Added corresponding tests. Fix https://github.com/root-project/root/issues/10404,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10420:15,log,logic,15,https://root.cern,https://github.com/root-project/root/pull/10420,4,"['log', 'test']","['logic', 'tests']"
Testability,"* Move logic to a separate function.; * Use zip_longest to address both cases of a single friend tree or a; chain of friends.; * Correct ""/"" token to ""?#"" to separate file name from tree name.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10244:7,log,logic,7,https://root.cern,https://github.com/root-project/root/pull/10244,1,['log'],['logic']
Testability,"* Protect `EnableImplicitMT()` with `R__USE_IMT`.; * Expect error about non existent file in `readspeed` test. Those should have been caught by the `TestSupport` library, but that one doesn't work at the moment (see https://github.com/root-project/root/issues/12828).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12829:105,test,test,105,https://root.cern,https://github.com/root-project/root/pull/12829,2,"['Test', 'test']","['TestSupport', 'test']"
Testability,"* Refactor the original HistFactory code such that pieces can be reused in the HS3 JSON IO implementation; * Fix problems with ""reverse engineering"" the name of the `ShapeSys` systematics from the ParamHistFunc name; * The `testHistFactory` unit test now validates full JSON roundtripping closure of workspaces with `ShapeSys`, both with Gaussian and Poisson constraints. More details in the commit descriptions",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13572:224,test,testHistFactory,224,https://root.cern,https://github.com/root-project/root/pull/13572,2,['test'],"['test', 'testHistFactory']"
Testability,* Removal of members; * Removal of base class; * Reordering of members. Some more tests of cases that we probably want to support eventually are available in a branch: https://github.com/hahnjo/root/tree/ntuple-evolution-tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16172:82,test,tests,82,https://root.cern,https://github.com/root-project/root/pull/16172,2,['test'],['tests']
Testability,"* Remove dangerous `RField` constructors, where the user could pass subfields into typed `RField<std::pair<T1, T2>>` and `RField<std::tuple<ItemTs...>>` without checks.; * Avoid UB in `RRecordField` construction, related to unspecified order of evaluation of function arguments.; * Take container of `unique_ptr`'s by value, to signal ownership handover.; * Fix `fSize` calculation in `RRecordField::AttachItemFields`, to have less (critical) logic in the typed `RField` constructors.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16764:443,log,logic,443,https://root.cern,https://github.com/root-project/root/pull/16764,1,['log'],['logic']
Testability,* Remove man pages for non-existing binaries; They might have existed in the past: g2rootold genmap proofserva roota. * Install generated man pages in the correct subdirectory (man/man1). * Use the correct library name in the plugin definitions. * Remove obsolete plugin definition; libPeac was removed in version 5.34.01. * Simplify rule; No need to exclude files that no longer exists. * TWebVirtualX was removed - remove plugin definition using it; See commit a07af0afbe2e26237bf8ca059abc34255378a070. * Don't download input file if it already exists; This allows running the tests with pre-fetched file in environments without network - like e.g. the Fedora package build server. * Python 3 compatibility,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4026:579,test,tests,579,https://root.cern,https://github.com/root-project/root/pull/4026,1,['test'],['tests']
Testability,* Remove unnecessary alias for `ABC` in Python 2; * Remove spurious `from __future__ import print_function`; * Place creation of `logger` variable after import statements in `Proxy.py`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9938:130,log,logger,130,https://root.cern,https://github.com/root-project/root/pull/9938,1,['log'],['logger']
Testability,"* Removes unneeded custom pdfs; * Fix dependency of RooStats tutorials on HistFactory test data creation; * Veto all RooStats tutorials if XML is not found, just like is done for the HistFactory tutorials",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14074:86,test,test,86,https://root.cern,https://github.com/root-project/root/pull/14074,1,['test'],['test']
Testability,* Rename DeclareCppCallable to Numba.Declare; * Remove generic backend; * Rename and adapt test accordingly; * Add support for RVecs in callables jitted with numba; * Add tutorial. ~We desperately need numba on the PR build nodes!~ Taken care of!,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5310:91,test,test,91,https://root.cern,https://github.com/root-project/root/pull/5310,1,['test'],['test']
Testability,* Rename function access a channel from EveLog() to REveLog(); * Make logger stored messages thred local,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8191:70,log,logger,70,https://root.cern,https://github.com/root-project/root/pull/8191,1,['log'],['logger']
Testability,"* Revert changes to `emitLLVMUsed`: clearing the vectors `LLVMUsed` and `LLVMCompilerUsed` does not seem; needed because `CodeGenerator::StartModule` will swap the entire `CodeGenModule`.; * Revert changes to `SourceManager::isBeforeInTranslationUnit`: if assertions are enabled `llvm_unreachable` has the same effects as `assert(0)`. As we don't see this assertion in recent times, this change is probably not relevant anymore.; * Revert change in `SourceLocation::isBeforeInTranslationUnitThan`: I believe that all locations have a `SourceManager` nowadays, even from the command line.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13181:256,assert,assertions,256,https://root.cern,https://github.com/root-project/root/pull/13181,3,['assert'],"['assert', 'assertion', 'assertions']"
Testability,"* Since the `RooAbsMinimizeFcn` implementations don't need to be copied; anymore, we can use `std::unique_ptr` instead of `shared_ptr` for; clear ownership and less overhead. * Name variables to be consistent with RooFit style. * Streamline `public` and `private` scopes. * Avoid code duplication with new private member function that applies a; specific call to both the regular likelihood and the likelihood in the; gradient. * Additional commit fixes memory leaks of toy datasets in `TestStatistics` tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12361:487,Test,TestStatistics,487,https://root.cern,https://github.com/root-project/root/pull/12361,2,"['Test', 'test']","['TestStatistics', 'tests']"
Testability,* Split dataframe_simple.cxx by moving tests for the Display action into; dataframe_display.cxx; * Add test for displaying a std::string; * Test added due to bug reported in ROOT-10527,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4850:39,test,tests,39,https://root.cern,https://github.com/root-project/root/pull/4850,3,"['Test', 'test']","['Test', 'test', 'tests']"
Testability,"* Tests are broken after commit 9b78784, which implements squashing double; slashes in the path.; * Add additional tests with all slashes doubled",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5060:2,Test,Tests,2,https://root.cern,https://github.com/root-project/root/pull/5060,2,"['Test', 'test']","['Tests', 'tests']"
Testability,"* Use only **Browsable::Provider** class for all factory methods; * Split ROOT6 and ROOT7 drawing plugins; * Rename RBrowsable -> RBrowserData to avoid confusion; * Fix Windows compiler error, tests on Windows",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4785:193,test,tests,193,https://root.cern,https://github.com/root-project/root/pull/4785,1,['test'],['tests']
Testability,* [cmake] Fix dependency of some TMVA_SOFIE tutorials. * [tmva] Set unique model file names for tutorials. The tutorials were using the same model file name and this was causing a problem when running the tutorials in parallel as in the CI builds. Fix also some deprectations happening when using now the new Keras version based on tensorflow.keras Fix dependency also for Python Keras tutorials. Disable also Regression Keras tutorials in CI builds since they are too slow for the regression evaluation on single events. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11325:543,test,tested,543,https://root.cern,https://github.com/root-project/root/pull/11325,1,['test'],['tested']
Testability,"* [windows] Make `OpenDirectory` and `GetDirEntry` thread safe. Create a struct holding the flag, `HANDLE`, and `WIN32_FIND_DATA` used by `OpenDirectory`, `GetDirEntry`, and `FreeDirectory`, so each thread creates its own instance of it. This fixes randome failures in mutithreaded applications on Windows, like for example in the `R__USE_IMT` part of the `datasource-root` test:; ```; [ RUN ] TRootTDS.DefineSlotMT; Error in <TFile::TFile>: file C:/root-dev/build/x64/debug/tree/dataframe/test/G__NTupleStruct.vcx does not exist; [ OK ] TRootTDS.DefineSlotMT (191 ms); [ RUN ] TRootTDS.FromARDFMT; Error in <TFile::Init>: C:/root-dev/build/x64/debug/tree/dataframe/test/INSTALL.vcxproj not a ROOT file; C:\root-dev\git\master\tree\dataframe\test\datasource_root.cxx(175): error: Expected equality of these values:; 29.; Which is: 29; *max; Which is: 23; [ FAILED ] TRootTDS.FromARDFMT (6 ms); ```. * Adress the comments from Axel. * Pass the correct pointer to the helper. * Cosmetics. * Update core/winnt/src/TWinNTSystem.cxx. Prevent possible memory leak. * Update core/winnt/src/TWinNTSystem.cxx",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13500:374,test,test,374,https://root.cern,https://github.com/root-project/root/pull/13500,4,['test'],['test']
Testability,"* `RooInt` was only a wrapper class to save unit test integer results to reference files (like `RooDouble`), but it is unused by now. * `RooTFoamBinding` is an implementation detail of the `RooFoamGenerator` and should not be part of the public interface. * `RooConvIntegrandBinding` is an implementation detail of `RooNumConvPdf`/`RooNumConvolution` and should not be part of the public interface. * Some unnecessary includes are removed",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12754:49,test,test,49,https://root.cern,https://github.com/root-project/root/pull/12754,1,['test'],['test']
Testability,* fix interaction of data-source columns and user-defined columns ; * add tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1023:74,test,tests,74,https://root.cern,https://github.com/root-project/root/pull/1023,1,['test'],['tests']
Testability,"* fix invalid memory access in RooFuncWrapper by getting observables and parameters of the original function, and not the one that is compiled for a normalization set, which is temporary. What matters are the names of the parameters and observables, and they are the same anyway. * new `CodeSquashContext::buildCall()` function to avoid code duplication. * add support for `RooExponential`, including unit test. Followup to #12529.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12554:406,test,test,406,https://root.cern,https://github.com/root-project/root/pull/12554,1,['test'],['test']
Testability,* fix issue in interaction of named filters and range logic (fixes test_report on noimt builds); * throw instead of crashing when wrong branch names are used for jitted actions; * only call `ProcessLine` if there is something to jit; * use `ULong64_t` instead of `Long64_t` for number of events to generate with TDF,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/725:54,log,logic,54,https://root.cern,https://github.com/root-project/root/pull/725,1,['log'],['logic']
Testability,* fixes a memory leak in `testSPlot`; * make sure the last normalization set is kept alive in PyROOT even when the last normalization set was implicitly created from a Python collection via the new Pythonizations; * make sure no derived coefficients are evaluated without normalization sets in `SPlot` to fix undefined behavior when calling `getVal()` and `RooAbsReal::getValV()` checks for the last normalization set that might not be alive anymore; * improving the code of the `RooLinearVar` that is used by the `SPlot`. Closes #11221.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11228:26,test,testSPlot,26,https://root.cern,https://github.com/root-project/root/pull/11228,1,['test'],['testSPlot']
Testability,"* modernize RooSimPdfBuilder; * fix documentation; * add test for RooSimPdfBuilder; * fix logic error reported in https://github.com/root-project/root/issues/7481. The `RooSimPdfBuilder` is superseeded by the RooSimWSTool, but I still think it's a good idea to update this class which might still be used in the wild.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7489:57,test,test,57,https://root.cern,https://github.com/root-project/root/pull/7489,2,"['log', 'test']","['logic', 'test']"
Testability,"* moves `MinuitFcnGrad`, `RooGradMinimizerFcn`, and the implementations; of `LikelihoodWrapper` and `LikelihoodGradientWrapper` out of the; public interfaces. * removing these public interfaces is unproblematic because they have; not been released yet. * new factory methods added to `Likelihood(Gradient)Wrapper` so we can; still create specific implementations for testing. * `clang-format` applied",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9871:367,test,testing,367,https://root.cern,https://github.com/root-project/root/pull/9871,1,['test'],['testing']
Testability,"* replace wrong `dynamic_cast<RooAbsReal*>` with; `dynamic_cast<RooAbsPdf*>` (presumably a copy-paste error). * use `TIter` and range-based loop instead of `TIterator*`. * avoid C-style casts. * replace `assert(0)` with `std::runtime_error`, as asserts only work in; debug buils. * replace one orrurence of `coef->GetName()` with `pdf->GetName()`,; which was probably also a copy-paste error. This fixes the following warning in gcc11:. ```; ../roofit/roofitcore/src/RooAddModel.cxx: In constructor ‘RooAddModel::RooAddModel(const char*, const char*, const RooArgList&, const RooArgList&, Bool_t)’:; ../roofit/roofitcore/src/RooAddModel.cxx:125:106: warning: ‘this’ pointer is null [-Wnonnull]; 125 | coutE(InputArguments) << ""RooAddModel::RooAddModel("" << GetName() << "") pdf "" << pdf->GetName() << "" is not of type RooAbsPdf, ignored"" << endl ;; ```. This PR superseeds PR https://github.com/root-project/root/pull/8432 and addresses issue https://github.com/root-project/root/issues/8129.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8434:204,assert,assert,204,https://root.cern,https://github.com/root-project/root/pull/8434,2,['assert'],"['assert', 'asserts']"
Testability,* this is achieved by using RooGenericPdf instead of RooGaussian or; RooPoisson. * some more changes were made to silence the tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8792:126,test,tests,126,https://root.cern,https://github.com/root-project/root/pull/8792,1,['test'],['tests']
Testability,* update the categories_v622.root file to actually use the class; versionse from ROOT 6.22. * add new categories_v624.root reference file and use it in RooCategory; I/O unit tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8790:174,test,tests,174,https://root.cern,https://github.com/root-project/root/pull/8790,1,['test'],['tests']
Testability,"*** headers files to be 0 linux time. It turns out in that case, Cling/Clang/LLVM refused to actually uses any of the system headers coming from the spack-provided compiler build. So nothing is properly defined not even `__GLIBCXX__`. The visible consequence is:; ```; ... rootcling_stage1 ... G__Core.cxx ... ; Warning in cling::IncrementalParser::CheckABICompatibility():; Failed to extract C++ standard library version.; In file included from input_line_2:1:; /scratch/pcanal/spack-root-badter/tmp/spack-stage/spack-stage-root-develop-4gn6o5fpka65i75lxkr6h63al2u2hkmg/spack-build-4gn6o5f/etc/cling/Interpreter/RuntimeUniverse.h:175:47: error: use of undeclared identifier 'std'; void copyArray(T* src, void* placement, std::size_t size) {; ^; /scratch/pcanal/spack-root-badter/tmp/spack-stage/spack-stage-root-develop-4gn6o5fpka65i75lxkr6h63al2u2hkmg/spack-build-4gn6o5f/etc/cling/Interpreter/RuntimeUniverse.h:176:14: error: use of undeclared identifier 'std'; for (std::size_t i = 0; i < size; ++i); ^; In file included from input_line_3:1:; In file included from /usr/include/assert.h:35:; In file included from /usr/include/features.h:514:; /usr/include/gnu/stubs.h:7:11: fatal error: 'gnu/stubs-32.h' file not found; # include <gnu/stubs-32.h>; ^~~~~~~~~~~~~~~~; Error: Error loading the default rootcling header files.; ninja: build stopped: subcommand failed.; ```. ### Reproducer. ```; cat /var/tmp/a.cxx ; void a(); {; fprintf(stdout, ""Running the script a.cxx\n"");; }. touch -m a -d '1969-12-31 18:00:00.000000000' /var/tmp/a.cxx . ls -l /var/tmp/a.cxx ; -rw-r--r-- 1 pcanal us_cms 63 Dec 31 1969 /var/tmp/a.cxx. root.exe -b -l -q /var/tmp/a.cxx . Processing /var/tmp/a.cxx...; input_line_8:1:10: fatal error: file '/var/tmp/a.cxx' modified since it was first processed; #include ""/var/tmp/a.cxx""; ^; ```. ### ROOT version. | Welcome to ROOT 6.31/01 https://root.cern |; | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on Jan 12 2024, 21:36",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14372:1332,assert,assert,1332,https://root.cern,https://github.com/root-project/root/issues/14372,1,['assert'],['assert']
Testability,"**Context:**; I am working in CBM at GSI/FAIR and helping for the support of our CBMROOT CI chains.; One of our nodes was updated to Debian 12 and then had hundreds of errors in the logs of a test running without trouble on other nodes.; All errors are an identical `Error in <TTF::SetTextSize>: error in FT_Set_Char_Size`, which comes from [TTF.cxx l.574, in `TTF::SetTextSize`](https://github.com/root-project/root/blob/c6f4076e69beaa6283d520c365831dfb0149d083/graf2d/graf/src/TTF.cxx#L574). **Problem:**; The error message helps neither; - to find out the call origin ; - to identify the root cause; - to fix the problem. as it provides ; 1. neither the parameters used in the top call ; 2. nor the actual error code returned by the underlying TTF library. **Proposed solution:** ; (inspired by a quick look at handling in `graf3d/ftgl/[inc src]/FTSize.[h cxx] `); ```diff; diff --git a/graf2d/graf/src/TTF.cxx b/graf2d/graf/src/TTF.cxx; index b8acf771d9..2f844b98da 100644; --- a/graf2d/graf/src/TTF.cxx; +++ b/graf2d/graf/src/TTF.cxx; @@ -570,8 +570,9 @@ void TTF::SetTextSize(Float_t textsize); }; ; Int_t tsize = (Int_t)(textsize*kScale+0.5) << 6;; - if (FT_Set_Char_Size(fgFace[fgCurFontIdx], tsize, tsize, 72, 72)); - Error(""TTF::SetTextSize"", ""error in FT_Set_Char_Size"");; + FT_Error err = FT_Set_Char_Size(fgFace[fgCurFontIdx], tsize, tsize, 72, 72);; + if (err); + Error(""TTF::SetTextSize"", ""error in FT_Set_Char_Size: %d (input size %f, calc. size %x)"", err, textsize, tsize);; }; ; ////////////////////////////////////////////////////////////////////////////////; ```. Patch tested locally based on ROOT v6.26.10 under Debian 12 (as far as I can tell this part of the file was not changed since the initial commit so the ROOT version should not matter).; The one thing where I am unsure is whether the calculated size (`tsize`) should be printed in hexadecimal (as it is offseted by multiple bits) or as standard integer. **Effect:**; In our case it allowed to find out that the automat",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14592:182,log,logs,182,https://root.cern,https://github.com/root-project/root/issues/14592,2,"['log', 'test']","['logs', 'test']"
Testability,"**Describe the bug**. Root_x86 failed to run ""roottest-cling-exception-nullderef-e"" test on release and debug configuration with MSVC on windows. Could you please help look at this issue or provide some workarounds? Thanks in advance. **Expected behavior**; For Root_x86, ""roottest-cling-exception-nullderef-e"" test should be run pass on the windows. **To Reproduce**; 1. git clone  https://github.com/root-project/root F:\gitP\root-project\root; 2. mkdir F:\gitP\root-project\root\build_x86; 3. cd F:\gitP\root-project\root\build_x86; 4. set PATH=%PATH:C:\Strawberry\perl\bin;=%; 5. python.exe -m pip install pytest; 6. cmake -G ""{0}"" -A {1} -DCMAKE_SYSTEM_VERSION={2} -DCMAKE_BUILD_TYPE=Release -Dtesting=ON -Droottest=ON .. ; 7. set PATH=%PATH:C:\Strawberry\perl\bin;=%; 8. msbuild /m /p:Platform=Win32 /p:Configuration=Debug ALL_BUILD.vcxproj /t:Rebuild; 9. powershell.exe -NoProfile -ExecutionPolicy Bypass ""..\..\tools\LongPathsEnabled.ps1""; 10. ctest -C Release --output-on-failure -j8 -R ""roottest"" -E ""roottest-root-meta"". **Setup**; VS 2019 + Windows Server 2019. **Additional context**; [test_release.log](https://github.com/root-project/root/files/7957119/test_release.log)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9742:84,test,test,84,https://root.cern,https://github.com/root-project/root/issues/9742,4,"['log', 'test']","['log', 'test']"
Testability,"**Description of the bug**. In order to use TMapFile I link the application with ""-lNew""; For example if test.cpp is the root program to compile I will use; ```; g++ -o test test.cpp `root-config --new --cflags --glibs`; ```; The program work without any issue with rootn.exe.; Using the compiled program, Immediately it breaks:. ```; *** Break *** segmentation violation; ===========================================================; There was a crash.; This is the entire stack trace of all threads:; ===========================================================; #0 0x00007f9ece411e8a in waitpid () from /lib64/libc.so.6; #1 0x00007f9ece38d757 in do_system () from /lib64/libc.so.6; #2 0x00007f9ed00a44f5 in TUnixSystem::StackTrace() () from /home/root-6.26.04/builddir/lib/libCore.so; #3 0x00007f9ed00a1cc5 in TUnixSystem::DispatchSignals(ESignals) () from /home/root-6.26.04/builddir/lib/libCore.so; #4 <signal handler called>; #5 0x00007f9ec9b38d5b in TClingCallFunc::SetArg(long) () from /home/root-6.26.04/builddir/lib/libCling.so; #6 0x00007f9ecff6d683 in TApplication::LoadGraphicsLibs() () from /home/root-6.26.04/builddir/lib/libCore.so; #7 0x00007f9ecff6ca2a in TApplication::InitializeGraphics() () from /home/root-6.26.04/builddir/lib/libCore.so; #8 0x00007f9ecff70d89 in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/root-6.26.04/builddir/lib/libCore.so; #9 0x00000000004011fc in main (); ===========================================================. The lines below might hint at the cause of the crash.; You may get help by asking at the ROOT forum https://root.cern/forum; Only if you are really convinced it is a bug in ROOT then please submit a; report at https://root.cern/bugs Please post the ENTIRE stack trace; from above as an attachment in addition to anything else; that might help us fixing this issue.; ===========================================================; #5 0x00007f9ec9b38d5b in TClingCallFunc::SetArg(long) () from /home/root-6.26",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11353:105,test,test,105,https://root.cern,https://github.com/root-project/root/issues/11353,3,['test'],['test']
Testability,"**Edit**: This patch fixes cxxmodule tests failure; GetListOfGlobalFunctions were fine, what failing modules test was GetListOfAllPublicMethods. Let's use GetMethodAny instead. Performance benchmark:; `rootbench-build/root/hist/hist/HistBenchmarks`; Release build, without modules, without this patch:; ```; ---------------------------------------------------------------; Benchmark Time CPU Iterations ; --------------------------------------------------------------- ; BM_TFormula_CreateEmpty 0 ns 0 ns 1000000000 ; BM_TFormula_Math_Sin 221061 ns 220326 ns 3118; BM_TFormula_Pow 19896 ns 19843 ns 34679 ; BM_TFormula_Std_Pow 262071 ns 261083 ns 2592 ; ```; Release build, without modules, with this patch:; ```; ---------------------------------------------------------------; Benchmark Time CPU Iterations; ---------------------------------------------------------------; BM_TFormula_CreateEmpty 0 ns 0 ns 1000000000; BM_TFormula_Math_Sin 197420 ns 196728 ns 3384; BM_TFormula_Pow 20003 ns 19949 ns 34502; BM_TFormula_Std_Pow 27867 ns 27778 ns 25631; ```; Memory benchmark:; `/usr/bin/time -v test/TFormulaTests 2>&1 | grep resident`; Release build, without modules, without this patch:; ```; Maximum resident set size (kbytes): 208144; ```; Release build, without modules, with this patch:; ```; Maximum resident set size (kbytes): 178772; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1821:37,test,tests,37,https://root.cern,https://github.com/root-project/root/pull/1821,7,"['Benchmark', 'benchmark', 'test']","['Benchmark', 'benchmark', 'test', 'tests']"
Testability,"**Edit:** After rebasing to current master, everything is fine (fixed the memory regulation). The port is rather straight forward, however, the tutorial `pyroot002_TTreeAsMatrix.py` fails during shutdown with following backtrace:. ```; #6 0x0000000004c6c270 in ?? (); #7 0x00007f958582abc0 in TClass::Destructor (this=0x4ae4ee0, obj=0x4c64ee0, dtorOnly=<optimized out>) at /home/stefan/root-dev/core/meta/src/TClass.cxx:5211; #8 0x00007f9579d01e7f in CPyCppyy::op_dealloc_nofree (pyobj=pyobj; entry=0x7f956c67acf8) at /home/stefan/root-dev/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPInstance.cxx:45; #9 0x00007f9579d01f69 in CPyCppyy::op_dealloc (pyobj=0x7f956c67acf8) at /home/stefan/root-dev/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPPInstance.cxx:149; #10 0x00000000004f7592 in ?? (); #11 0x00000000004fc33a in _PyModule_Clear (); #12 0x00000000004fb9d3 in PyImport_Cleanup (); #13 0x00000000004f8e14 in Py_Finalize (); #14 0x00000000004938ec in Py_Main (); #15 0x00007f9586fd9830 in __libc_start_main (main=0x4934c0 <main>, argc=2, argv=0x7fffc2505518, init=<optimized out>, fini=<optimized out>, rtld_fini=<optimized out>, stack_end=0x7fffc2505508) at ../csu/libc-start.c:291; #16 0x00000000004933e9 in _start (); ```. I've ported as well the tests, these are fine.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4293:1264,test,tests,1264,https://root.cern,https://github.com/root-project/root/pull/4293,1,['test'],['tests']
Testability,"**First two commits**:. Sanity checks for a non-jitted Vary asked the nominal Define'd; columns static type information that a jitted Define did not have. With this patch RJittedDefine should also have that type; information in most if not all cases. **Last commit**:. Fix potential invalid memory access when using Vary. Users can vary a single column or multiple columns simultaneously.; In the latter case, RVariation::fLastResults contains, for each; processing slot, an RVec of RVecs of results where the outer; dimension runs over the different columns and the inner one over; the varied values of each column. Before this commit, RVariation was initializing fLastResults to; the wrong size in the case of multiple columns varied simultaneously,; which ended up causing invalid memory accesses during the event loop; in some cases. This patch fixes the problem and adds a regression test.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10699:889,test,test,889,https://root.cern,https://github.com/root-project/root/pull/10699,1,['test'],['test']
Testability,"**GitHub issue** that we still want to resolve before the v6.26.00 release:. - [x] https://github.com/root-project/root/issues/9372. **Other items** that still need to be done without any associated GitHub issue:. - [x] `Pythonizations`: write about new pythonizations in release notes; - [x] `RooFitHS3`: Write release notes; - [x] `RooFitHS3`: Put JSONInterface in `RooFit::Experimental` namespace; - [x] `Lagrangian morphing`: write about it in the release notes; - [x] `GlobalObservables`: write a tutorial about storing global observables in the datasets. **Other items** that are nice to have but can also be in **patch release**:. - [ ] `BatchMode`: Reduce overhead in RooFitDriver to achieve good evaluation time also for large computation graphs; - [ ] `BatchMode`: Implement the binned pdf optimization to speed up HistFactory fits; - [ ] `RooFitHS3`: Avoid having to import the default export keys from a file manually (e.g. like [here in the unit test](https://github.com/root-project/root/blob/master/roofit/hs3/test/testRooFitHS3.cxx#L47)). **Backports** that need to be made for the v6.26 branch (in this particular order from top to bottom, to not have a commit history too different from master):. - [x] https://github.com/root-project/root/pull/9478; - [x] https://github.com/root-project/root/pull/9504; - [x] https://github.com/root-project/root/pull/9458; - [x] https://github.com/root-project/root/pull/9553; - [x] https://github.com/root-project/root/pull/9447; - [x] https://github.com/root-project/root/pull/9552; - [x] https://github.com/root-project/root/pull/8784; - [x] https://github.com/root-project/root/pull/9177; - [x] https://github.com/root-project/root/pull/8595; - [x] https://github.com/root-project/root/pull/9444; - [x] https://github.com/root-project/root/pull/9456; - [x] https://github.com/root-project/root/pull/9640; - [x] https://github.com/root-project/root/pull/9482; - [x] https://github.com/root-project/root/pull/9690; - [x] https://github.com/root-",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9508:959,test,test,959,https://root.cern,https://github.com/root-project/root/issues/9508,1,['test'],['test']
Testability,"**Need**:. The need for a new evaluation metric for testing the convergence of the optimizer is essential. The already existing metric was maximumRelativeError() between two matrices which takes the maximum of all the relative errors between its individual elements. But the relative error between these elements depends on the element values. i.e. Relative error between a and b = abs(a-b)/(abs(a)+abs(b)). Let use consider 2 cases,. case a) If two values are a = 0.0001 , b = 0.0002, relative error = 0.3333; case b) If two values are a = 10.0001 b = 10.0002 relative error = 4.99992e-6 . Since the unit tests for optimizer is written in a way so that a sample 3 layer DNN will learn this function Y = K * X. So, If X = I ( Identity matrix ), then Y = K * I = K. This should be equivalent to the output of the trained DNN when I is feed as Input. Let Y' be the output of the trained DNN. So I need to compare the matrices K and Y' for approximate equality with a certain threshold. So If I use maximumRelativeError for comparing the approximate equality for two matrices, then even though the difference is small for two cases, the relative error is significantly different. So there is a need for a new evaluation metric.; ; **Goal**:. The goal of this PR is to implement new evaluation metric meanAbsoluteError() between two matrices which takes the mean of all the absolute errors of individual elements. Absolute error between a and b = abs(a-b). So both the cases described above will have the same absolute error. So I propose this would be a good choice of metric for comparing two matrices for approximate equality as needed for testing optimizers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2376:52,test,testing,52,https://root.cern,https://github.com/root-project/root/pull/2376,3,['test'],"['testing', 'tests']"
Testability,"**Please do not merge this branch, it is for testing only!**",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1389:45,test,testing,45,https://root.cern,https://github.com/root-project/root/pull/1389,1,['test'],['testing']
Testability,"**Testing only, do not merge.**",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1636:2,Test,Testing,2,https://root.cern,https://github.com/root-project/root/pull/1636,1,['Test'],['Testing']
Testability,"**This change is improving the development workflow, now how users are getting ROOT and RooFit!**. This will help with more modular RooFit builds, and it's also a big step; towards making the RooFit developer experience for the pythonizations; more pleasant. The goal is that people can contribute to the RooFit pythonizations; without having to interact with any CMake or C++ compilation, which was; requested by our power users. Testing changes to the pythonizations is easy now, because they can be; installed easily with pip on top of an existing ROOT install, in which; case this install will override the RooFit pythonizations shipped with; ROOT. This makes developing the pythonizations *much* easier!. A README is added to `roofit/pythonizations` that outlines the steps as follows:. Therefore, the easiest and recommended way to develop RooFit pythonizations is as follows:. 1. Make sure ROOT and RooFit are installed on your system; 2. Clone the ROOT repository and go inside the `roofit/pythonizations` directory; 3. Install with `pip install -e .` for an editable install (virtual environment recommended); 4. Any changes to the RooFit pythonizations will be in effect immediately without recompiling or installing anything!; 5. Make your changes, open PR to ROOT repository",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16608:431,Test,Testing,431,https://root.cern,https://github.com/root-project/root/pull/16608,1,['Test'],['Testing']
Testability,"*N.B: This issue is a continuation of the discussion started in https://github.com/root-project/root/pull/13904#discussion_r1395618778*. It seems like additional dictionary entries are required for ROOT builds with runtime C++ modules disabled (i.e. builds with `-Druntime_cxxmodules=off`). This is observed in the `ntuple_types.cxx` tests for `std::map` fields. These fields have an inner field of type `std::pair` representing the key and value of each item. For this specific build configuration, it is required to explicitly add the dictionary entry for this `std::pair` type. In other words, for a `std::map<char, long>`, we need to define the following two dictionary entries:; ```cpp; #pragma link C++ class std::map<char, long>+;; #pragma link C++ class std::pair<char, long>+;; ```; instead of only the first one. This does not only pertain to `std::map`. For example, the same error is observed for a `std::set<std::pair<int, CustomStruct>>` field (but not for`std::set<std::pair<int, int>>`, for example). ## Steps to reproduce; 1. Use a ROOT master build with `-Druntime_cxxmodules=off`.; 2. Remove/comment out the following dictionary entries: https://github.com/root-project/root/blob/1dbb35307ed55a1017b4620eb15f2aa22bd8514f/tree/ntuple/v7/test/ProxiedSTLContainerLinkDef.h#L28-L34; 4. Add the following snippet to the constructor for `RPairField`, after this line: https://github.com/root-project/root/blob/1dbb35307ed55a1017b4620eb15f2aa22bd8514f/tree/ntuple/v7/src/RField.cxx#L2935 (also make sure to `#include <TVirtualStreamerInfo.h>:; ```cpp; if (fClass->GetDataMember(""first"") == nullptr || fClass->GetDataMember(""second"") == nullptr) {; std::cerr << ""The TClass for "" << GetType() << "" is in state: "" << fClass->GetState() << "" and has: \n"";; fClass->GetListOfDataMembers()->ls();; fClass->GetStreamerInfo()->ls();; throw RException(R__FAIL(""Insufficient information for "" + GetType()));; }; ```; ## Observed output; ### From the snippet added above:; ```; The TClass for std::p",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14084:334,test,tests,334,https://root.cern,https://github.com/root-project/root/issues/14084,1,['test'],['tests']
Testability,"++ standard is misconfigured somewhere.; I used GCC 11 and did not specify a `-DCMAKE_CXX_STANDARD` when configuring. GCC 11.3 defaults to C++17, but in this test (see RUN: at line 3 and 4 below) clang is called with `-std=c++14` instead (My guess is that's the default for clang 9). ```; 1: FAIL: Cling :: CodeUnloading/PCH/VTables.C (36 of 185); 1: ******************** TEST 'Cling :: CodeUnloading/PCH/VTables.C' FAILED ********************; 1: Script:; 1: --; 1: : 'RUN: at line 1'; mkdir -p ""/srv/root/src/build/interpreter/cling/test/CodeUnloading/PCH/Output/Rel/Path"" || true; 1: : 'RUN: at line 2'; rm -f ""CompGen.h.pch"" && rm -f ""/srv/root/src/build/interpreter/cling/test/CodeUnloading/PCH/Output/Rel/Path/Relative.pch""; 1: : 'RUN: at line 3'; clang -x c++-header -fexceptions -fcxx-exceptions -std=c++14 -pthread /srv/root/src/root/interpreter/cling/test/CodeUnloading/PCH/Inputs/CompGen.h -o CompGen.h.pch; 1: : 'RUN: at line 4'; clang -x c++-header -fexceptions -fcxx-exceptions -std=c++14 -pthread /srv/root/src/root/interpreter/cling/test/CodeUnloading/PCH/Inputs/CompGen.h -o /srv/root/src/build/interpreter/cling/test/CodeUnloading/PCH/Output/Rel/Path/Relative.pch; 1: : 'RUN: at line 5'; cat /srv/root/src/root/interpreter/cling/test/CodeUnloading/PCH/VTables.C | /srv/root/src/build/interpreter/llvm/src/bin/cling --nologo -I/srv/root/src/build/interpreter/llvm/src/tools/clang/include -I/srv/root/src/root/interpreter/cling/test/CodeUnloading/PCH -Xclang -include-pch -Xclang CompGen.h.pch 2>&1 | /srv/root/src/build/interpreter/llvm/src/bin/FileCheck /srv/root/src/root/interpreter/cling/test/CodeUnloading/PCH/VTables.C; 1: : 'RUN: at line 6'; cat /srv/root/src/root/interpreter/cling/test/CodeUnloading/PCH/VTables.C | /srv/root/src/build/interpreter/llvm/src/bin/cling --nologo -I/srv/root/src/build/interpreter/llvm/src/tools/clang/include -I/srv/root/src/root/interpreter/cling/test/CodeUnloading/PCH -I/srv/root/src/build/interpreter/cling/test/CodeUnloading/PCH/Output/Rel/",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10693:1133,test,test,1133,https://root.cern,https://github.com/root-project/root/issues/10693,1,['test'],['test']
Testability,"++/13/bits/new_allocator.h:88; #7 0x00007f3e5fcafc66 in ROOT::Experimental::RClassField::RClassField (this=this; entry=0x7ffc9edb22f0, fieldName=""klass"", className=""8G\325Y\212U"") at /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RField.cxx:841; #8 0x0000558efca002c2 in ROOT::Experimental::RField<TestEBO, void>::RField (name=..., this=0x7ffc9edb22f0) at /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/inc/ROOT/RField.hxx:643; #9 RNTuple_TClassEBO_Test::TestBody (this=<optimized out>) at /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/test/ntuple_types.cxx:387; #10 0x00007f3e5fc02eb3 in void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) [clone .constprop.0] () from /lib64/libgtest.so.1.13.0; #11 0x00007f3e5fbef17e in testing::Test::Run() () from /lib64/libgtest.so.1.13.0; #12 0x00007f3e5fbef385 in testing::TestInfo::Run() () from /lib64/libgtest.so.1.13.0; #13 0x00007f3e5fbef4d7 in testing::TestSuite::Run() () from /lib64/libgtest.so.1.13.0; #14 0x00007f3e5fbfc090 in testing::internal::UnitTestImpl::RunAllTests() () from /lib64/libgtest.so.1.13.0; #15 0x00007f3e5fbfae98 in testing::UnitTest::Run() () from /lib64/libgtest.so.1.13.0; #16 0x00007f3e5fbac116 in main () from /lib64/libgtest_main.so.1.13.0; #17 0x00007f3e5f048b4a in __libc_start_call_main () from /lib64/libc.so.6; #18 0x00007f3e5f048c0b in __libc_start_main_impl () from /lib64/libc.so.6; #19 0x0000558efc9fc045 in _start (); ===========================================================; The lines below might hint at the cause of the crash. If you see question; marks as part of the stack trace, try to recompile with debugging information; enabled and export CLING_DEBUG=1 environment variable before running.; You may get help by asking at the ROOT forum https://root.cern/forum; Only if you are really convinced it is a bug in ROOT then please submit a; report at https://root.cern/bugs Please post the ENTIRE stack trace",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12428:8468,test,testing,8468,https://root.cern,https://github.com/root-project/root/issues/12428,2,"['Test', 'test']","['TestSuite', 'testing']"
Testability,", @Axel-Naumann @jalopezg-git please take a look); 3) Implement a mechanism for redirecting cling diagnostics to a user provided ostream and use this in cppyy to capture the diagnostic output and append it to the python exceptions or warnings as appropriate. This PR fixes https://github.com/root-project/root/issues/11854. There are still some remaining problems with the transaction rollback, however template instantiation from cppyy now behaves the same as calling ```TInterpreter::Declare``` in this respect. This is likely related to the issues described by @jalopezg-git in https://github.com/root-project/root/pull/12449#issuecomment-1467860880 and can be fixed in a future PR. Consider the following test case:. test.h:; ```cpp; template <typename T>; class Helper {. public:. Helper() {}. std::size_t operator() () const {; const std::size_t res = 0;; res = T{0, 0}.size();; return res;; }. };. template <typename H>; std::size_t call_helper(const H &helper) {; return helper();; }; ```. test.py; ```python; import ROOT. ret = ROOT.gInterpreter.Declare('#include ""test.h""'); print(""declare ret"", ret). print(""creating helper""); helper = ROOT.Helper[ROOT.std.vector[""double""]](). print(""calling helper""). for i in range(2):; print(f""call attempt {i}""); try:; res = ROOT.call_helper(helper); print(""helper call succeeded:"", res); except Exception as e:; print(""helper call failed""); print(e); ```. The output below is now close to optimal for the first instantiation attempt. On the second instantiation attempt the error message is different/less useful because of the imperfect transaction rollback already noted. (but the same happens instantiating the template through ```TInterpreter::Declare``` as said). ```; declare ret True; creating helper; calling helper; call attempt 0; helper call failed; Template method resolution failed:; Failed to instantiate ""call_helper(Helper<vector<double> >&)""; In file included from input_line_52:1:; /home/b/bendavid/pyrootdebug6/test.h:10:9: error: ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12449:1475,test,test,1475,https://root.cern,https://github.com/root-project/root/pull/12449,1,['test'],['test']
Testability,", Float_t, Float_t, Float_t, Float_t, Float_t, Float_t, Float_t, Float_t, Float_t, Double_t, Double_t, Double_t, Double_t, Double_t,std::vector<float>,std::vector<float>,std::vector<float>,std::vector<char>,std::vector<float>,std::vector<float>,std::vector<char>, Int_t, Int_t, Int_t, Int_t, Int_t, Int_t, Int_t, Int_t, Int_t, Int_t, Int_t, Int_t, Int_t, Int_t, Int_t, Int_t, UInt_t, UInt_t, Int_t, Double_t, Double_t, Int_t, Bool_t, Bool_t, Int_t, Bool_t, Bool_t,std::vector<int>,std::vector<double>,std::vector<char>,std::vector<float>,std::vector<char>,std::vector<float>,std::vector<char>,std::vector<float>,std::vector<float>, Char_t, Char_t, Char_t, Char_t, Char_t, Char_t, Char_t, Char_t, Char_t, Char_t, Char_t, Char_t, Char_t, Char_t, Char_t, Char_t, Char_t, Char_t, Char_t, Char_t, Char_t, Char_t, Char_t, Char_t, Char_t, Char_t, Char_t, Char_t, Char_t, Char_t, Char_t, Char_t, Char_t, Char_t, Char_t, Char_t, Char_t, Char_t, Char_t, Char_t, Char_t, Char_t, Char_t, Char_t, Char_t, Char_t, Char_t, Char_t, Char_t, Float_t, Float_t, Float_t, Int_t, Float_t, Float_t, Float_t, Float_t, Float_t, UInt_t, Float_t, ULong64_t, Bool_t, UInt_t, Float_t, Float_t, Float_t, Float_t, Float_t, Float_t, Double_t, Float_t, Float_t, UInt_t, Float_t>; (""test"", ""test_out.root"", columnList); .GetValue();; }; }; ```. Looking at the stacktraces it's clear that the problem is interleaved execution of RDataFrame TBB tasks (a RDF task starts and take a slot number, then ROOT::Internal::TBranchIMTHelper::Wait triggers the start of an inner RDF task that takes a second slot number without returning the first one, leading to an error in builds with asserts enabled, and undefined behavior in builds without asserts). Attached the stacktrace of the relevant thread (not the one that errors out, but the one that steals the last slot number so another thread doesn't find it and errors out). ### ROOT version. any. ### Installation method. any. ### Operating system. any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15079:8306,assert,asserts,8306,https://root.cern,https://github.com/root-project/root/issues/15079,2,['assert'],['asserts']
Testability,", ROOT::Experimental::RNTupleDescriptorBuilder&)>: Pre-release format version: RC 1; [ OK ] RNTuple.SerializeEmptyHeader (190 ms); [ RUN ] RNTuple.SerializeHeader; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RNTupleSerialize.cxx:1148 in static ROOT::Experimental::RResult<void> ROOT::Experimental::Internal::RNTupleSerializer::DeserializeHeaderV1(const void*, uint32_t, ROOT::Experimental::RNTupleDescriptorBuilder&)>: Pre-release format version: RC 1; [ OK ] RNTuple.SerializeHeader (0 ms); [ RUN ] RNTuple.SerializeFooter; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RNTupleSerialize.cxx:1148 in static ROOT::Experimental::RResult<void> ROOT::Experimental::Internal::RNTupleSerializer::DeserializeHeaderV1(const void*, uint32_t, ROOT::Experimental::RNTupleDescriptorBuilder&)>: Pre-release format version: RC 1; [ OK ] RNTuple.SerializeFooter (0 ms); [----------] 14 tests from RNTuple (190 ms total); [----------] Global test environment tear-down; [==========] 14 tests from 1 test suite ran. (190 ms total); [ PASSED ] 12 tests.; [ FAILED ] 2 tests, listed below:; [ FAILED ] RNTuple.SerializeEnvelope; [ FAILED ] RNTuple.SerializeLocator; 2 FAILED TESTS; CMake Error at /builddir/build/BUILD/root-6.28.00/cmake/modules/RootTestDriver.cmake:232 (message):; error code: 1; ~~~. #### gtest-tree-ntuple-v7-test-ntuple-types. Endian issue:. $ printf '%x\n%x\n' 180388626432 42; 2a00000000; 2a; ~~~; 465/1272 Test #433: gtest-tree-ntuple-v7-test-ntuple-types ..............................***Failed 5.68 sec; Running main() from /builddir/build/BUILD/googletest-1.13.0/googletest/src/gtest_main.cc; Note: Google Test filter = -RCsvDS.Remote:RRawFile.Remote:RSqliteDS.Davix:TFile.ReadWithoutGlobalRegistrationWeb:TFile.ReadWithoutGlobalRegistrationNet:RNTuple.TClassEBO; [==========] Running 18 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 18 tests from RNTuple; [ RUN ] RNT",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12426:14754,test,tests,14754,https://root.cern,https://github.com/root-project/root/issues/12426,4,['test'],"['test', 'tests']"
Testability,", TMVA::Types::ETreeType, TMVA::Types::EAnalysisType) (DataSet.cxx:287); ==292588== by 0x2C7BD2CB: TMVA::MethodBase::AddClassifierOutput(TMVA::Types::ETreeType) (MethodBase.cxx:874); ==292588== by 0x2C7BBD3E: TMVA::MethodBase::TrainMethod() (MethodBase.cxx:689); ==292588== by 0x2C775BCE: TMVA::Factory::TrainAllMethods() (Factory.cxx:1173); ==292588== by 0x4F963FE: ???; ==292588== by 0x4F9107E: ???; ==292588== by 0x6EC8BCD: cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const (in /home/vpadulan/Programs/rootproject/rootbuild/fix-tutorial-tmva-cnn-classification-testing/lib/libCling.so); ==292588== by 0x6E4EA4E: cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) (in /home/vpadulan/Programs/rootproject/rootbuild/fix-tutorial-tmva-cnn-classification-testing/lib/libCling.so); ==292588== by 0x6E4F13C: cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) (in /home/vpadulan/Programs/rootproject/rootbuild/fix-tutorial-tmva-cnn-classification-testing/lib/libCling.so); ==292588== by 0x6F36428: cling::MetaSema::actOnxCommand(llvm::StringRef, llvm::StringRef, cling::Value*) (in /home/vpadulan/Programs/rootproject/rootbuild/fix-tutorial-tmva-cnn-classification-testing/lib/libCling.so); ==292588== by 0x6F45003: cling::MetaParser::isXCommand(cling::MetaSema::ActionResult&, cling::Value*) (in /home/vpadulan/Programs/rootproject/rootbuild/fix-tutorial-tmva-cnn-classification-testing/lib/libCling.so); ==292588== by 0x6F468D4: cling::MetaParser::isCommand(cling::MetaSema::ActionResult&, cling::Value*) (in /home/vpadulan/Programs/rootproject/rootbuild/fix-tutorial-tmva-cnn-classification-testing/lib/libCling.so); ==292588== by 0x6F2EF9F: cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) (in /home/vpadulan/Programs/rootproject/root",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14438:2284,test,testing,2284,https://root.cern,https://github.com/root-project/root/issues/14438,1,['test'],['testing']
Testability,", __atime=..., __lock=..., this=<optimized out>) at /home/aliperf/aliperf_workspace/sw/slc7_x86-64/GCC-Toolchain/v10.2.0-alice2-local3/include/c++/10.2.0/condition_variable:158; #5 std::condition_variable::wait_for<long int, std::ratio<1, 1000>, fair::mq::StateMachine::WaitForPendingStateFor(int) const::<lambda()> > (__rtime=..., __rtime=..., __p=..., __lock=..., this=<optimized out>) at /home/aliperf/aliperf_workspace/sw/slc7_x86-64/GCC-Toolchain/v10.2.0-alice2-local3/include/c++/10.2.0/condition_variable:185; #6 fair::mq::StateMachine::WaitForPendingStateFor (this=this; entry=0x162d700, durationInMs=durationInMs; entry=1000) at /home/aliperf/aliperf_workspace/sw/SOURCES/FairMQ/v1.4.40/v1.4.40/fairmq/StateMachine.cxx:364; #7 0x00007ff44b22f882 in FairMQDevice::WaitFor<long, std::ratio<1l, 1l> > (duration=..., this=0x162d640) at /home/aliperf/aliperf_workspace/sw/slc7_x86-64/GCC-Toolchain/v10.2.0-alice2-local3/include/c++/10.2.0/chrono:422; #8 FairMQDevice::LogSocketRates (this=0x162d640) at /home/aliperf/aliperf_workspace/sw/SOURCES/FairMQ/v1.4.40/v1.4.40/fairmq/FairMQDevice.cxx:717; #9 0x00007ff44b230e6d in std::__invoke_impl<void, void (FairMQDevice::*)(), FairMQDevice*> (__f=<optimized out>, __t=<optimized out>, __f=<optimized out>, __t=<optimized out>) at /home/aliperf/aliperf_workspace/sw/slc7_x86-64/GCC-Toolchain/v10.2.0-alice2-local3/include/c++/10.2.0/bits/invoke.h:73; #10 std::__invoke<void (FairMQDevice::*)(), FairMQDevice*> (__fn=<optimized out>) at /home/aliperf/aliperf_workspace/sw/slc7_x86-64/GCC-Toolchain/v10.2.0-alice2-local3/include/c++/10.2.0/bits/invoke.h:95; #11 std::thread::_Invoker<std::tuple<void (FairMQDevice::*)(), FairMQDevice*> >::_M_invoke<0ul, 1ul> (this=<optimized out>) at /home/aliperf/aliperf_workspace/sw/slc7_x86-64/GCC-Toolchain/v10.2.0-alice2-local3/include/c++/10.2.0/thread:264; #12 std::thread::_Invoker<std::tuple<void (FairMQDevice::*)(), FairMQDevice*> >::operator() (this=<optimized out>) at /home/aliperf/aliperf_workspace/sw/s",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8931:7094,Log,LogSocketRates,7094,https://root.cern,https://github.com/root-project/root/issues/8931,1,['Log'],['LogSocketRates']
Testability,", e.g. for calculating on GPUs or in autograd enabled frameworks. The commit history also contains the proof of concept version, the benchmark results of which were presented at [ACAT19](https://indico.cern.ch/event/708041/contributions/3276177/) and [CHEP19](https://doi.org/10.1051/epjconf/202024506027) (and [preliminary results at the 2018 ROOT Users workshop in Sarajevo](https://indico.cern.ch/event/697389/contributions/3062028/)). That version was redesigned starting from 2019 to better integrate with the rest of the code and at the same time untangle the test statistics classes to conceptually bring them closer to the math, instead of the more implementation-detail oriented existing design (RooAbsTestStatistic et al.). The new packages include the following tests, which should probably still be added to the testing infrastructure somehow:. 1. MultiProcess:; 1. test_RooFitMultiProcess_Messenger; 2. test_RooFitMultiProcess_ProcessManager; 3. test_RooFitMultiProcess_Job; 2. TestStatistics:; 1. testLikelihoodGradientJob; 2. testLikelihoodSerial; 3. testRooRealL; 3. RooFitZMQ:; 1. test_RooFitZMQ; 2. test_RooFitZMQ_polling; 3. test_RooFitZMQ_HWM; 4. test_RooFitZMQ_load_balancing; 4. RooFitCore:; 1. testRooGradMinimizer; 2. testBidirMMapPipe; 3. testMPFEnll. From my side (and that of the NL eScience Center), the project has ended and time has run out to make any further major contributions to it, except, of course finishing this PR and providing help to get it working and to possibly hand over further development :). Here are some notes for possible future work:; - RooFitZMQ includes an extension of ZeroMQ itself: a ppoll function. This function should ideally be contributed to ZeroMQ, but I have had no time for this. The motivation behind ppoll is given in this [blog post](https://blog.esciencecenter.nl/combining-zeromq-posix-signals-b754f6f29cd6).; - At the last moment, I decided to reimplement part of the Queue functionality. The task distribution and parameter upd",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8294:4198,Test,TestStatistics,4198,https://root.cern,https://github.com/root-project/root/pull/8294,1,['Test'],['TestStatistics']
Testability,", in _handle_request_noblock; self.process_request(request, client_address); ```. ### Reproducer. Grab the image:; ```; $ docker run --security-opt label=disable -it registry.cern.ch/root-ci/ubuntu2404:buildready; ```; Then:; ``` ; (; rm -rf /github/home/ROOT-CI; mkdir -p /github/home/ROOT-CI; ); (; curl --output /github/home/ROOT-CI/artifacts.tar.gz https://s3.cern.ch/swift/v1/ROOT-build-artifacts/ubuntu2404/master/RelWithDebInfo/3f796869dae3bde0bfafc4ef8051339eb5ca133c/2024-08-12.tar.gz; ); (; cd /github/home/ROOT-CI && tar -xf /github/home/ROOT-CI/artifacts.tar.gz; ); (; cd '/github/home/ROOT-CI/src'; git checkout master; git fetch; git reset --hard @{u}; ); (; cd '/github/home/ROOT-CI/src'; git fetch https://github.com/root-project/root 9fc748389d42ce698fe8654ac177f9cf9a542f5c; ); (; cd '/github/home/ROOT-CI/src'; ; git config user.email ""rootci@root.cern""; git config user.name 'ROOT Continous Integration'; ; git fetch origin 7d45ab2957efacf7b6685f4ae126a9fed243494c:fix-15733; git checkout fix-15733; git rebase 531620f59e898e5ec809043135583d15b0d151a6; ); (; git clone --branch master --single-branch https://github.com/root-project/roottest.git ""/github/home/ROOT-CI/roottest""; ); (; cd '/github/home/ROOT-CI/roottest'; ; git config user.email ""rootci@root.cern""; git config user.name 'ROOT Continous Integration'; ; git fetch ; git checkout ; git rebase master; ); (; which cmake; cmake --version; which c++ || true; c++ --version || true; uname -a || true; cat /etc/os-release || true; sw_vers || true; uptime || true; df || true; ); (; cmake -S '/github/home/ROOT-CI/src' -B '/github/home/ROOT-CI/build' -N -L; ); (; cmake --build '/github/home/ROOT-CI/build' --config 'RelWithDebInfo' --parallel '16'; ); (; cd '/github/home/ROOT-CI/build'; ctest --output-on-failure --parallel 16 --output-junit TestResults.xml; ); ```. ### ROOT version. master. ### Installation method. docker copy/pasted from CI. ### Operating system. Alma9 + Ubuntu. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16242:6123,Test,TestResults,6123,https://root.cern,https://github.com/root-project/root/issues/16242,1,['Test'],['TestResults']
Testability,", it looks; like this:. ```; struct NoBase {};. template <class T>; struct DataVectorBase; {; typedef NoBase Base;; };. // Specialized derived version.; template <class T, class BASE = typename DataVectorBase<T>::Base>; class DataVector : public BASE {...};. // Base class version.; template <class T>; class DataVector<T, NoBase> {...};; ```. where user classes then specialize the DataVectorBase class; (in practice, done via a macro). I've now finally bit the bullet and reduced one example of this such that; it does not depend on ATLAS software. The test case is attached. If github still isn't allowing be to attach; archives, i've also put a copy on lxplus at ~ssnyder/public/fwddict-crash.tar. The set up is against a nightly debug build of 6.28-patches:. ```; $ . ./setup; $ echo $ROOTSYS; /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-el9-gcc13-dbg; $ ./build.sh ; $ python -i test.py; python: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-28-00-patches/src/ROOT/v6-28-00-patches/interpreter/llvm/src/tools/clang/lib/Sema/SemaLookup.cpp:2165: bool clang::Sema::LookupQualifiedName(clang::LookupResult&, clang::DeclContext*, bool): Assertion `(!isa<TagDecl>(LookupCtx) || LookupCtx->isDependentContext() || cast<TagDecl>(LookupCtx)->isCompleteDefinition() || cast<TagDecl>(LookupCtx)->isBeingDefined()) && ""Declaration context must already be complete!""' failed.; *** Break *** abort; ```. The test script here is loading dictionaries from two separate libraries:. ```; getattr( ROOT, 'DataVector<TrackParticle_v1>', None ); getattr( ROOT, 'DataVector<Egamma_v1>', None ); ```. Either of these lines works by itself, but together they cause this crash. See https://its.cern.ch/jira/browse/ATEAM-942.; May also be related to https://sft.its.cern.ch/jira/browse/ROOT-10940. ### Reproducer. See above. ### ROOT version. v6-28-00-patches. ### Installation method. lcg. ### Operating system. lxplus9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14186:1816,Assert,Assertion,1816,https://root.cern,https://github.com/root-project/root/issues/14186,2,"['Assert', 'test']","['Assertion', 'test']"
Testability,- 3 PyMVA Multiclass tests fails cause they are opening `./tmva_example_multiple_background.root` which doesn't contain required input TTree objects.; - As a dirty workaround I've changed input file path to be `../../../runtutorials/tmva_example_multiple_background.root` to use same tree filled by `runtutorials` unit-tests.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2417:21,test,tests,21,https://root.cern,https://github.com/root-project/root/pull/2417,2,['test'],['tests']
Testability,"- A new parameter, the lazyness of the snapshot, has been added to the TSnapshotOptions; - The Snapshot methods return a TResultPtr<TInteface<TLoopManager>> rather than a TInteface<TLoopManager>; - Tests and tutorials adapted; - New test for lazy snapshot added",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1870:198,Test,Tests,198,https://root.cern,https://github.com/root-project/root/pull/1870,2,"['Test', 'test']","['Tests', 'test']"
Testability,"- Add a couple of missing symbols into the export list; - Fix several test failing on Windows, mostly due to files staying open (creates file access issues on Windows); - Filter-out several unsupported tests (will add them back once the underlying issues are fixed)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4805:70,test,test,70,https://root.cern,https://github.com/root-project/root/pull/4805,2,['test'],"['test', 'tests']"
Testability,"- Add a tutorial for the Barlow-Beeston method, rf709_BarlowBeeston.C.; - Remove legacy iterators from RooHistConstraint and RooParamHistFunc,; which are used to implement the Barlow-Beeston method.; - Replace iterative logGamma in RooHistConstraint by std::lgamma; - Make sure that bins with zero entries don't get touched by MINUIT.; This reduces the number of degenerate parameters without any effect, and; stabilises the covariance matrix.; - Update documentation of the respective classes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3999:220,log,logGamma,220,https://root.cern,https://github.com/root-project/root/pull/3999,1,['log'],['logGamma']
Testability,"- Add build option `asan` to build with address sanitizer.; Only works with clang so far.; - Add suppression file for leak sanitizer, suppressing fallout from; llvm and clang memory management.; - Set up compiler flags for statically linking address sanitizer; into all ROOT exectuables.; - A micro library for configuring asan was added, and statically linked; into all ROOT executables.; Address sanitizer (at least in clang) allows to define; __asan_default_config and __lsan_default_suppressions to set good; defaults.; - A shared version of the setup library is available for all cases where; the address sanitizer run time is LD_PRELOADed into non-instrumented; executables.; - LD_PRELOAD with asan runtimes has been set up for all tests that use; python as executable.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5237:738,test,tests,738,https://root.cern,https://github.com/root-project/root/pull/5237,1,['test'],['tests']
Testability,"- Add multivariate regression for MethodDL ; - Multi class support for MethodDL; - Add tests for Regression; Targets can be added according to usual TMVA regression format:; ```; dataloader->AddTarget(""uniform1"");; dataloader->AddTarget(""uniform2"");; dataloader->AddTarget(""uniform_add"");; dataloader->AddTarget(""uniform_sub"");; ```. An example Architecture: ; ``` TString layoutString(""Layout=RESHAPE|1|1|4|FLAT,DENSE|2|SIGMOID,DENSE|4|LINEAR"");```. ~~The root file used for testing has been added to the PR.~~ It consists of 10,000 examples with a dimensionality of 4. The first two features have been sampled from a uniform distribution (0,1). The third and fourth features are the sum and differences of the first two features respectively.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2278:87,test,tests,87,https://root.cern,https://github.com/root-project/root/pull/2278,2,['test'],"['testing', 'tests']"
Testability,- Add the proper Win64 mangled symbol of `RDataFrameInterface_TypeUnknownToInterpreter_Test::TestBody(void)`; - Add several explicit `delete hfile` to prevent the following kind of error:; ```; SysError in <TFile::TFile>: could not delete BulkApiSillyStruct.root (errno: 13) Permission denied; ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9264:93,Test,TestBody,93,https://root.cern,https://github.com/root-project/root/pull/9264,1,['Test'],['TestBody']
Testability,- Added multi-class support for CUDA and CPU backend; - Added multi-class support to MethodDNN; - Switched floating point types to single precision for better performance; - Disabled log output in interactive mode; - Removed regularization contribution in loss computation,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/282:183,log,log,183,https://root.cern,https://github.com/root-project/root/pull/282,1,['log'],['log']
Testability,- Correct TReentrantRWLock::Restore; - Assert on Add during THashTable::Rehash ; - Add 'details' option to THashTable::Print,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1506:39,Assert,Assert,39,https://root.cern,https://github.com/root-project/root/pull/1506,1,['Assert'],['Assert']
Testability,- Correct TReentrantRWLock::Restore; - Assert on Add during THashTable::Rehash; - Add 'details' option to THashTable::Print,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1507:39,Assert,Assert,39,https://root.cern,https://github.com/root-project/root/pull/1507,1,['Assert'],['Assert']
Testability,- Correctly set pad range and pad user range in case of log scale; - Properly set zooming scale to histogram without context; - Fix THStack update problem,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12282:56,log,log,56,https://root.cern,https://github.com/root-project/root/pull/12282,1,['log'],['log']
Testability,- Export a couple of missing symbols (x86); - Re-enable several tests working now with LLVM 16 and VS 2022; - Reorganize `llvm13_broken_tests` and `win_broken_tests` for clarity,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15063:64,test,tests,64,https://root.cern,https://github.com/root-project/root/pull/15063,1,['test'],['tests']
Testability,- Fix TensorFlow backend for PyKeras (breaks with non-empty sys.argv in Python); - Make test cases compatible with Keras v1.x and v2.x API. This is a fix for [ROOT-8928](https://sft.its.cern.ch/jira/browse/ROOT-8928).,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/812:88,test,test,88,https://root.cern,https://github.com/root-project/root/pull/812,1,['test'],['test']
Testability,- Fix dynamic libraries extensions (.so/.dll/.pyd); - Fix path for the tests and tutorials; - Make sure hexadecimal pointer values have the correct '0x' prefix (not automatic on Windows),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3356:71,test,tests,71,https://root.cern,https://github.com/root-project/root/pull/3356,1,['test'],['tests']
Testability,- Fixes: [https://sft.its.cern.ch/jira/browse/ROOT-9418](https://sft.its.cern.ch/jira/browse/ROOT-9418); - Adds a google test for `Range` with `Define` (with and without jitted functions),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2062:121,test,test,121,https://root.cern,https://github.com/root-project/root/pull/2062,1,['test'],['test']
Testability,- GetBranchNames is now a public method of RLoopManager; - fBranchNames is now RLoopManager::fValidBranchNames; - the first call to GetBranchNames evaluates the list of; valid branch names (expensive operation) and stores it; in fValidBranchNames. Subsequent calls simply return; the cached value; - code in RInterface has been simplified as a consequence. A test python application which booked O(100k) operations in situations where caching was not performed sees an improvement of the RDF setup time from 17s to 6s.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3025:359,test,test,359,https://root.cern,https://github.com/root-project/root/pull/3025,1,['test'],['test']
Testability,"- Improve diagnostic output of compare() function; - Test inverted matrix times original against identity using; element by element comparison, and use less strict tolerance; to account for innacuracies due to matrix inversion. *Note: I am still running this test many times to make sure it doesn't fail anymore. Please wait to merge until after the runs are finished.*",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/521:53,Test,Test,53,https://root.cern,https://github.com/root-project/root/pull/521,2,"['Test', 'test']","['Test', 'test']"
Testability,- Introduced tests for some use case of the Display action; - Added the Display action to the documentation.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2514:13,test,tests,13,https://root.cern,https://github.com/root-project/root/pull/2514,1,['test'],['tests']
Testability,"- Move some RenderCore specific classes and all shaders into RenderCore source tree. - Implement all existing Three.js functionality with RenderCore. - In RenderCore, further improve on existing functionality:; - Textured points - arbitrary size and shape.; - Mesh lines - arbitrary thickness.; - Object and sub-object picking through color buffer with fragment depth detection.; - Camera handling like in TEve, with ability to pick rotation center. - The development branch has been squashed to hide redundant changes. Full history is available in PR osschar/root#41. ## C++ / Server Changes. - REveManager: Make RenderCore the default rendering engine. - Stream interpreter errors and show them in client log. - Add flag fIsRCore to REveManager. - Make REvePointSet secondary-selectable. - Add parameter for projection depth in REveDataCollection. ## JS / Client Changes. - Remove error MessageBox popup during client updates. - EveManager.js: Check change bits in ImportSceneBinary when scene changes are streamed. - EveScene.js: Optimize visibility changes. - EveScene.js: pass eve_element instead of object3d in cases where it simplifies the code. - EveScene.js, GlViewer classes: Cleamup highlite/selection management so it can be abstracted for RCore. - Separate viewer-side selection processing for Three / RCore. ## Tutorials / Demos Changes. - event_demo.C: secondary select points, jet title include pT. - Tune marker sizes, colors, visual parameters.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11936:707,log,log,707,https://root.cern,https://github.com/root-project/root/pull/11936,1,['log'],['log']
Testability,"- On Windows, attempts to find R in the default installation paths if not found via `find_program`.; - Does the same for the `R_LIBRARY` variable, which may not be reported by the R executable on Windows.; - Adds an `R_SCRIPT` variable to provide the path to RScript. This is useful if the parent CMake script wants to call R non-interactively to run a script. Fixed a typo in the comments. # This Pull request:. ## Changes or fixes:. Adds support for CMake to find R on Windows. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (not necessary, but updated docs in the FindR script)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14201:501,test,tested,501,https://root.cern,https://github.com/root-project/root/pull/14201,1,['test'],['tested']
Testability,- Only rely on presence of TMCManager in multi run (PR#6 in vmc-project/vmc); - Withdraw unwanted TMCVerbose modifications to avoid changes in the tests outputs; - Recover TGeoManager::fIsOutside for transfer tracks (PR#3 in vmc-project/vmc),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4459:147,test,tests,147,https://root.cern,https://github.com/root-project/root/pull/4459,1,['test'],['tests']
Testability,- RNTupleInspector::Create; - RNTupleReader::Open (2 overloads). ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16050:86,test,tested,86,https://root.cern,https://github.com/root-project/root/pull/16050,1,['test'],['tested']
Testability,- Refactor AdaBoost; - Add multi-class support; - Add ranking feature; - Remove deprecated file `tmva/pymva/test/Classification.C`. **NOTE:** This PR needs a rebase and is dependent on #303,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/315:108,test,test,108,https://root.cern,https://github.com/root-project/root/pull/315,1,['test'],['test']
Testability,"- Replace the old TFormula-v5-derived RooFormula by a small class that; creates a TFormula v6 [ROOT-10164,ROOT-10144].; - Update documentation for GenericPdf and FormulaVar accordingly.; - Fix small memory leak in RooAbsData.; - The This allows re-enabling the RooJohnson unit test that's based on; RooFormula [ROOT-10173]. It was further tested that [ROOT-8291] doesn't occur with the new; formula when it is serialised.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4179:277,test,test,277,https://root.cern,https://github.com/root-project/root/pull/4179,2,['test'],"['test', 'tested']"
Testability,"- RootMacros.cmake: set the correct PYTHONPATH (${ROOTSYS}/bin on Windows); - CPyCppyy/CMakeLists.txt: export all symbols and set correct prefix (lib) and suffix (.pyd); - MemoryRegulator[.cxx/.h]: downstream cppyy changes [`move hook setting to .cxx`](https://bitbucket.org/wlav/cpycppyy/commits/24ac364); - cppyy-backend/CMakeLists.txt: export all symbols; - pythonizations/CMakeLists.txt: export all symbols, set correct suffix (.pyd) and link against Python library (cannot have unresolved symbols on Windows); - PyzPythonHelpers.cxx, RDataFramePyz.cxx, RVecPyz.cxx, TPyClassGenerator.cxx, and TPython.cxx: Use proper forward declarations and fix pointer formatting; - pythonizations/test/CMakeLists.txt: disable failing tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5892:688,test,test,688,https://root.cern,https://github.com/root-project/root/pull/5892,2,['test'],"['test', 'tests']"
Testability,"- Switch to batch mode when ssh to a Windows machine, like other platforms; - Protect against potential null GC values leading to the followin error:; ```; Gdk-CRITICAL **: file gdkgc.c: line 146: assertion `gc != NULL' failed; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9323:197,assert,assertion,197,https://root.cern,https://github.com/root-project/root/pull/9323,1,['assert'],['assertion']
Testability,- Upgrade builtin tbb to 2019 and require at least 2018; - Isolate work in TThreadedExecutor; - Add test for concurrency in RDF,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2955:100,test,test,100,https://root.cern,https://github.com/root-project/root/pull/2955,1,['test'],['test']
Testability,- Use the same flags for `LLVM` than for `ROOT`; - Print out the multi-configuration generator flags; - Fix `root-config.bat` and `compiledata.win32`; - Increase the stack size for `rootcling` and for the `rfield_variant` test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16092:222,test,test,222,https://root.cern,https://github.com/root-project/root/pull/16092,1,['test'],['test']
Testability,"- When RooWorkspaces that contain a ModelConfig are cloned, the ModelConfig did not get updated. It would still point to the old workspace.; - Add unit test. This reverts commit fdab28c0ca4782733527e6b74a4f795c252a877e.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3350:152,test,test,152,https://root.cern,https://github.com/root-project/root/pull/3350,1,['test'],['test']
Testability,"- When a leaf name contains the name of its parent branch on it and a; branch with the desired name has already been found, the priority; given by SearchBranchWithCompositeName should not be considered.; - Test added in [#250](https://github.com/root-project/roottest/pull/250)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2921:206,Test,Test,206,https://root.cern,https://github.com/root-project/root/pull/2921,1,['Test'],['Test']
Testability,"- When the LLVM_BUILD_TYPE is Release, but the CXX_FLAGS are empty, a; warning is issued.; - When configuring, fix the order in which compiler flags are printed. This is the issue mentioned on mattermost. Axel proposed to issue a warning in this case. The question is if this warning catches all cases where build types might be set up wrongly or if the `CMAKE_CXX_FLAGS_${LLVM_BUILD_TYPE}` should be tested.; I also fixed the order in which the compiler flags are printed. I didn't get to this before cache-variable PR where I promised to do this got merged.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4243:401,test,tested,401,https://root.cern,https://github.com/root-project/root/pull/4243,1,['test'],['tested']
Testability,"- When trying to execute a macro with .x and the corresponding function is; not found, a more informative warning is issued.; - Further, the interpreter can now fall back to main() if defined. In local tests, I didn't manage to trigger a clash with the ""real"" main. I tried to define both; - `int main()` and; - `int main(int argc, char** argv)`,; but it just compiles and does the right thing (either it calls with the correct parameters or it complains that the parameters don't match).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4244:202,test,tests,202,https://root.cern,https://github.com/root-project/root/pull/4244,1,['test'],['tests']
Testability,"- [ X] Checked for duplicates. Dear All,; as discussed in a previous [issue](https://github.com/root-project/root/issues/7890), we have observed an increase in the memory when method GetInterval of the HypoTestInverter is called (see for example this [slide](https://docs.google.com/presentation/d/1hpDIabM3pMOvooI2TH3hen0YpVy74YCg9XUNNw5prvk/edit?usp=sharing). I've prepared a small example using root 6.22/00 on centos 3.10.0-1160.42.2.el7.x86_64, where I've only one bkg and one dummy signal sample, and I've performed an upper-limit scan with 10k toys (the workspace and .C file used for this test can be found [here](https://cernbox.cern.ch/index.php/s/FOxntIggyp89tt0).; As you can see from the picture below (it's a vimdiff of 3 different outputs of pmap), the allocated memory is increasing with the time (from the left to the right). I've also checked that for pmap the majority of this memory is flagged as dirty. ; ![image](https://user-images.githubusercontent.com/80854397/139116392-29e8cadb-1f6d-4552-ba1b-c25d185f05d8.png); Is there any way to limit the increase in memory? . Best,; Luigi",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9196:597,test,test,597,https://root.cern,https://github.com/root-project/root/issues/9196,1,['test'],['test']
Testability,"- [ ] Checked for duplicates. ### Describe the bug. When updating the version of the RooAbsArg class with 068465e (part of https://github.com/root-project/root/pull/8764), an unexpected warning appears in the testProxiesAndCategories unit test:. ```; Warning in <TStreamerInfo::BuildCheck>: ; The StreamerInfo of class RooRealVar read from file categories_v624.root; has the same version (=7) as the active class but a different checksum.; You should update the version to ClassDef(RooRealVar,8).; Do not try to write objects with the current class definition,; the files will not be readable. Warning in <TStreamerInfo::CompareContent>: The following data member of; the on-file layout version 7 of class 'RooRealVar' differs from ; the in-memory layout version 7:; RooAbsBinning _binning; //; vs; unique_ptr<RooAbsBinning,default_delete<RooAbsBinning> > _binning; //; ```. The warning is uexpected because:; * it comes from the RooRealVar class that was not changed in 068465e; * it only appears now after seemingly unrelated changes in the RooAbsArg base class; * the memory layout and checksums of the RooRealVar classes didn't change between 6.24 (version of the reference file) and ROOT master. Here is the streamer info of RooRealVar in master:; ```; root [7] TClass::GetClass(""RooRealVar"")->GetStreamerInfo()->ls(). StreamerInfo for class: RooRealVar, version=7, checksum=0xfd173f72; RooAbsRealLValue BASE offset= 0 type= 0 Abstract modifiable real-valued object; double _error offset=720 type= 8 Symmetric error associated with current value; double _asymErrLo offset=728 type= 8 Low side of asymmetric error associated with current value; double _asymErrHi offset=736 type= 8 High side of asymmetric error associated with current value; RooAbsBinning* _binning offset=744 type=64 ; i= 0, RooAbsRealLValue type= 0, offset= 0, len=1, method=0; i= 1, _error type= 28, offset=720, len=3, method=0 [optimized]; i= 2, _binning type= 64, offset=744, len=1, method=0; ```; Here is the streamer info ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8791:209,test,testProxiesAndCategories,209,https://root.cern,https://github.com/root-project/root/issues/8791,2,['test'],"['test', 'testProxiesAndCategories']"
Testability,"- [ ] Checked for duplicates; <!--; I did not find any duplicates; -->. ### Describe the bug; <!--; When compiling a makefile that includes ROOT libraries, there was an error when using TCanvas.h.; -->. ### Expected behavior; <!--; A clear and concise description of what you expected to happen.; -->. ### To Reproduce; <!--; makefile that included root libraries. ; make version 3.81. clang++ -g -Werror -fopenmp `root-config --cflags` -I./Analysis -o Test Analysis/TestAnalysis.cpp Analysis/Test.cpp `root-config --glibs` -lSpectrum ; In file included from Analysis/Test.cpp:16:; In file included from /Users/XXX/local/Cellar/root/6.26.06_2/include/root/TCanvas.h:15:; In file included from /Users/XXX/local/Cellar/root/6.26.06_2/include/root/TPad.h:15:; In file included from /Users/XXX/local/Cellar/root/6.26.06_2/include/root/TVirtualPad.h:30:; In file included from /Users/XXX/local/Cellar/root/6.26.06_2/include/root/TQObject.h:42:; /Users/XXX/local/Cellar/root/6.26.06_2/include/root/TVirtualQConnection.h:53:42: error: 'sizeof (val)' will return the size of the pointer, not the array itself [-Werror,-Wsizeof-pointer-div]; constexpr size_t size = sizeof(val)/sizeof(val[0]);; ~~~~~~~~~~~^; /Users/tamashiro1/local/Cellar/root/6.26.06_2/include/root/TVirtualQConnection.h:51:25: note: pointer 'val' declared here; void SetArg(const T* val). The SOLUTION that I used:; In line 53 of TVirtualQConnection.h, I changed ; constexpr size_t size = sizeof(val)/sizeof(val[0]);; to ; constexpr size_t size = sizeof(val)/sizeof(*val);; and my code compiled.; -->. ### Setup; <!--; 1. 6.26/06; 2. Mac OS 12.6.5; 3. homebrew; -->. ### Additional context; <!--; root works for now, but I wanted to share the bug and solution I used. ; -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12786:453,Test,Test,453,https://root.cern,https://github.com/root-project/root/issues/12786,4,['Test'],"['Test', 'TestAnalysis']"
Testability,"- [ ] Checked for duplicates; <!--; Please search in; * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue); * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT); for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"".; -->. ### Describe the bug. Under some circumstances, `createHistogram` creates histograms with a binning that does not reflect the ""correct"" binning of the observable.; In general, it should be true that especially for workspaces generated with HistFactory, the histograms created with `createHistogram` from the various category Pdfs and datasets should have the same binning as the input histograms given to HistFactory.; However, that is not always the case.; I haven't figured out yet what the exact conditions are under which this fails and cannot at the moment provide a reproducer, but I'd like to suggest adding a few unit tests that create a workspace with HistFactory with different binnings, and then use `createHistogram` to create histograms from the input.; The resulting histograms should always match the input in content (save for negative or 0 bin contents) and bin count and boundaries. I will follow up with a reproducer if I manage to create one. ### Additional context; Possibly related: https://github.com/root-project/root/pull/1916",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10401:987,test,tests,987,https://root.cern,https://github.com/root-project/root/issues/10401,1,['test'],['tests']
Testability,"- [ ] Checked for duplicates; <!--; Please search in; * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue); * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT); for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"".; -->. ### Describe the bug; <!--; A clear and concise description of what the wrong behavior is.; -->. I my project I use ROOT from LCG nightlies build dev3 slot; And for my tests (with ctest and nose) I get an error:. ``` ; Traceback (most recent call last):; File ""/afs/cern.ch/user/i/ibelyaev/cmtuser/RELEASE/ostap/build/INSTALL/LCGdev3/x86_64-centos7-gcc11-opt/lib/python3.9/site-packages/ostap/core/build_dir.py"", line 28, in <module>; import ROOT, os, glob ; File ""/cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Thu/x86_64-centos7-gcc11-opt/lib/ROOT/__init__.py"", line 69, in <module>; module = importlib.import_module(pyz.__name__ + '.' + module_name); File ""/cvmfs/sft-nightlies.cern.ch/lcg/latest/Python/3.9.6-b0f98/x86_64-centos7-gcc11-opt/lib/python3.9/importlib/__init__.py"", line 127, in import_module; return _bootstrap._gcd_import(name[level:], package, level); File ""/cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Thu/x86_64-centos7-gcc11-opt/lib/ROOT/pythonization/_roofit/__init__.py"", line 26, in <module>; from ._roocategory import RooCategory; File ""/cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Thu/x86_64-centos7-gcc11-opt/lib/ROOT/pythonization/_roofit/_roocategory.py"", line 18; """"""Constructor of RooCategory takes a map as an argument also supports python dictionaries.; ^; SyntaxError: invalid escape sequence \c; ```. ### Expected behavior; <!--; A clear and concise description of what you expected to happen.; -->. ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8902:529,test,tests,529,https://root.cern,https://github.com/root-project/root/issues/8902,1,['test'],['tests']
Testability,"- [ ] Checked for duplicates; <!--; Please search in; * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue); * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT); for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"".; -->. ### Describe the bug; <!--; A clear and concise description of what the wrong behavior is.; -->; Trying to load the plugin for a module that was not compiled returns 0 (success value); ### Expected behavior; <!--; A clear and concise description of what you expected to happen.; -->; Return the failure value (-1 ?). ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->; ```; root [1] gROOT->GetPluginManager()->FindHandler(""TVirtualGeoConverter"")->LoadPlugin(); Module ConverterVG not found.; Error in <TCling::LoadPCM>: ROOT PCM /Users/agheata/root/root_install/lib/libConverterVG_rdict.pcm file does not exist; ... long list of PCM's tried by LoadPCM; (int) 0; ```. ### Setup; <!--; 1. ROOT version; 2. Operating system; 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself.; -->; Tested with master branch on Monterey MacBook Air (M1, 2020), compiled from source. ### Additional context; <!--; Add any other context about the problem here.; -->; The same code on my Ubuntu 22.04 returns correctly -1",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12326:1411,Test,Tested,1411,https://root.cern,https://github.com/root-project/root/issues/12326,1,['Test'],['Tested']
Testability,"- [ ] Checked for duplicates; <!--; Please search in; * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue); * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT); for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"".; -->. ### Describe the bug; <!--; When running the same script twice in a row in the same root session, I get a segmentation fault. Same commands inline work fine. If changing TF1 to TH1, it works fine.; -->. ### Expected behavior; <!--; A clear and concise description of what you expected to happen.; -->. ### To Reproduce; <!--; void Test(); {; TF1 *crap = new TF1(""crap"",""pol0"",0.,1.);; crap->Print();. TFile *out = new TFile(""./test.root"",""recreate""); ; ; crap->Write();; ; out->Close();; delete out;; ; return;; }. .x Test.C; -->. ### Setup; <!--; 1. 6.22/03 ; 2. CentOS Linux 8; 3. Own build; -->. ### Additional context; <!--; Add any other context about the problem here.; -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10489:692,Test,Test,692,https://root.cern,https://github.com/root-project/root/issues/10489,3,"['Test', 'test']","['Test', 'test']"
Testability,"- [ ] Checked for duplicates; <!--; Please search in; * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue); * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT); for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"".; -->. ### Describe the bug; Running our test on SWAN, I found that TFIile can not read anymore a remote ROOT file from github.; The code; `; TFile::Open(""https://raw.githubusercontent.com/iml-wg/tmvatutorials/master/inputdata.root"");; `. produces; `; Error in <DavixOpen>: can not open file ""https://raw.githubusercontent.com/iml-wg/tmvatutorials/master/inputdata.root"" with davix: Result HTTP 404 : File not found after 3 attempts (18) ; `; The file exists and the code works with LCG_99. I did an additional test with a ROOT different ROOT file inside the domain cern.ch and it works for LCG_100; `; TFile::Open(""https://root.cern.ch/files/summer_student_tutorial_tracks.root"");; `; <!--; A clear and concise description of what the wrong behavior is.; -->. ### Expected behavior; TFIle should be able to read the file from github.; <!--; A clear and concise description of what you expected to happen.; -->. ### To Reproduce; on lxplus; `; source /cvmfs/sft.cern.ch/lcg/views/LCG_100/x86_64-centos7-gcc8-opt/setup.sh. [ozapatam@lxplus7103 ~]$ root -l -b. root [0] auto f=TFile::Open(""https://raw.githubusercontent.com/iml-wg/tmvatutorials/master/inputdata.root"");. Error in <DavixOpen>: can not open file ""https://raw.githubusercontent.com/iml-wg/tmvatutorials/master/inputdata.root"" with davix: Result HTTP 404 : File not found after 3 attempts (18); `. on LCG_99 it works; `; source /cvmfs/sft.cern.ch/lcg/views/LCG_99/x86_64-centos7-gcc8-opt/setup.sh . [ozapatam@lxplus7120 ~]$ root -l. root [0] auto f=TFile::Open(""https://raw.githubusercontent.com/iml-wg/tmvatutorials/master/inputdata.root"");. root [1] f->ls();; TDavixFile** https://raw",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8155:395,test,test,395,https://root.cern,https://github.com/root-project/root/issues/8155,2,['test'],['test']
Testability,"- [ ] Checked for duplicates; <!--; Please search in; * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue); * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT); for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"".; -->; There is a segfault in segfault for RooMomentMorph for ROOT>6.24 . I am using the example from https://gist.github.com/cranmer/46fff8d22015e5a26619 ; it was OK for ROOT 6.24 but fails for e.g. dev3 LCG nightly build . ### Describe the bug; <!--; A clear and concise description of what the wrong behavior is.; -->; There is a segfault in segfault for RooMomentMorph for ROOT>6.24 . ### Expected behavior; <!--; A clear and concise description of what you expected to happen.; -->. no segfault . ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->. at lxplus: ; ```; source /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/setup.sh; python test.py ; ```; where `tst.py` is a content of https://gist.github.com/cranmer/46fff8d22015e5a26619 with a fixed print statement. ### Setup; <!--; 1. ROOT version; 2. Operating system; 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself.; -->. 1. Fails for ROOT > 6.24 ; 2. lxplus ; 3. LCG . ### Additional context; <!--; Add any other context about the problem here.; -->. actuallt my examples are more complicated, but since it fails even for the example from the expert, I use his example",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11061:1243,test,test,1243,https://root.cern,https://github.com/root-project/root/issues/11061,1,['test'],['test']
Testability,"- [ ] Implement batch eval for Chi2 test stat; - [x] Implement recovery from disallowed regions for batch eval (https://github.com/root-project/root/pull/6401); - [x] Implement getWeightBatch() and getBatches() for RooDataHist; - [ ] Implement getBatch for RooTreeDataStore?; - [ ] Don't clear all intermediate values in batch fits between fit cycles. Only the ones that changed.; - [ ] Disable recalculateCache etc belonging to Lvl2 optimisation.; - [ ] Use batch evaluation & inverted CDF for toys; - [ ] Continue to improve interface with variadic templates; - [ ] Profile and optimise new Batch interface; - [ ] Modernise proxyList member of RooSimultaneous; - [ ] Investigate if retrieving batch data with category states is better for batch evaluations. (vs. splitting composite datasets into components, and creating one NLL for each.); - [ ] Continue modernisation of RooSimultaneous. Requires rebasing and fixing an index bug in https://github.com/hageboeck/root/tree/updateRooSimultaneous; - [ ] Implement analytical integration of RooJohnson.; - [ ] Correct interface of RooAbsData and derived classes to use e.g. `std::size_t` for indexing events. `int` doesn't make sense.; - [ ] Always have a debug version of RooFit around with `-DROOFIT_CHECK_CACHED_VALUES`.; - [ ] Use analytic integrals in RooBinSamplingPdf when available.; - [ ] Check that different integrator settings are honoured in RooBinSamplingPdf.; - [ ] https://sft.its.cern.ch/jira/browse/ROOT-8304; - [ ] Implement evaluateSpan() in classes relevant for HistFactory fits.; - [ ] Throw Gaussian & Poisson constraints into dedicated fast class.; - [ ] Switch on FastEvaluations topic in RooFit message streams, and use it to trace down PDFs that don't implement the faster interface.; - [ ] #7210, slowly augment PDFs with checks of the definition range of parameters. This prevents evaluation errors and can stabilise fits.; - [ ] #7217, pythonisations for RooFit; - [ ] Vectorized generation of events. Unless specialised",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6557:36,test,test,36,https://root.cern,https://github.com/root-project/root/issues/6557,1,['test'],['test']
Testability,"- [ checked] Checked for duplicates; <!--; Please search in; * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue); * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT); for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"".; -->. ### Describe the bug. We are trying to update the XrootD version to 5.1.1 :; https://github.com/cms-sw/cmsdist/pull/6831; but the test fails in the file open attempt; with this:. ```; 27-Apr-2021 13:36:43 CEST Initiating request to open file root://eoscms.cern.ch//eos/cms/store/data/Run2018A/ZeroBias/ALCARECO/SiStripCalMinBias-12Nov2019_UL2018-v1/260000/0F90F012-3C97-344E-8E2F-F459A798FA74.root. Thread 1 ""cmsRun"" received signal SIGSEGV, Segmentation fault.; 0x00007ffff74a42b1 in TMutex::UnLock (this=0x7fffb0c95750); at /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/slc7_amd64_gcc900/lcg/root/6.22.08-1fec05f50351c1988c4bf604c7ec21c3/root-6.22.08/core/thread/src/TMutex.cxx:70. (gdb) where; #0 0x00007ffff74a42b1 in TMutex::UnLock (this=0x7fffb0c95750); at /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/slc7_amd64_gcc900/lcg/root/6.22.08-1fec05f50351c1988c4bf604c7ec21c3/root-6.22.08/core/thread/src/TMutex.cxx:70; #1 0x00007ffff76c8b97 in TLockGuard::~TLockGuard (this=0x7fffffff0b90, __in_chrg=<optimized out>) at include/TVirtualMutex.h:86; #2 0x00007ffff67266df in TPluginHandler::CheckForExecPlugin (this=0x7fffd04c19c0, nargs=2); at /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/slc7_amd64_gcc900/lcg/root/6.22.08-1fec05f50351c1988c4bf604c7ec21c3/root-6.22.08/core/base/src/TPluginManager.cxx:284; #3 0x00007ffff6765285 in TPluginHandler::ExecPluginImpl<char const*, bool> (this=0x7fffd04c19c0); at /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/slc7_amd64_gcc900/lcg/root/6.22.08-1fec05f50351c1988c4bf604c7ec21c3/root-6.22.08/core/base/inc/T",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8008:498,test,test,498,https://root.cern,https://github.com/root-project/root/issues/8008,3,['test'],"['test', 'testBuildDir', 'tests']"
Testability,"- [ x ] Checked for duplicates. ### Describe the bug; After I write out (part of) a geometry with; ```; writer->WriteGDMLfile ( gGeoManager, n, outname.c_str(),""vgf"");; ```; the main volume is named, e.g., `HcalBarrel0x0x55d87ec06500`. However, at the end of the file it still says; ```; <world ref=""HcalBarrel""/>.; ```; The result is that ROOT itself cannot read the file:; ```; Info in <TGeoManager::Import>: Reading geometry from file: [...]; Info in <TGeoManager::TGeoManager>: Geometry GDMLImport, Geometry imported from GDML created; Error in <TGeoManager::Import>: Cannot open file; ```. ### Expected behavior; The function should return usable gdml. I tested that if I change by hand to ; ```; <world ref=""HcalBarrel0x0x55d87ec06500""/>; ```; the file is woorking and valid. ### To Reproduce; ```; root -l $ROOTSYS/tutorials/geom/rootgeom.C; TGeoNodeMatrix* m = (TGeoNodeMatrix*) gGeoManager->GetListOfNodes()->At(0);; TGeoNode* n = (TGeoNode*) m->GetNodes()->At(1);; TGDMLWrite *writer = new TGDMLWrite;; writer->SetG4Compatibility(true);; writer->WriteGDMLfile ( gGeoManager, n, ""test.gdml"",""vgf"");; .q; root -l; gGeoManager->Import(""test.gdml""); Info in <TGeoManager::Import>: Reading geometry from file: test.gdml; Info in <TGeoManager::TGeoManager>: Geometry GDMLImport, Geometry imported from GDML created; Error in <TGeoManager::Import>: Cannot open file; ```. A side bug, I cannot reproduce this with the Export option, and that; is because it doesn't recognize the f flag:; ```; root [1] gGeoManager->Export(""test.gdml"",""vgf""); Info in <TGeoManager::Export>: Exporting simple1 Simple geometry as gdml code; Info in <TGDMLWrite::WriteGDMLfile>: Potentially slow with incremental suffix naming convention set; ```. ### Setup; 1. 6.24.06; 2. singularity container running debian (on top of Scientific Linux 7); 3. Container maintainer installed it. ### Additional context; I can test in a variety of other environments, but this seems pretty cut and dry and OS-independent",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9310:660,test,tested,660,https://root.cern,https://github.com/root-project/root/issues/9310,6,['test'],"['test', 'tested']"
Testability,"- [ROOT-10242] RooMCStudy crashes when pulls for a parameter that cannot; have a pull distribution are requested. This adds logic to generate a; proper pull distribution, and returns a blank plot if no pull; distribution can be generated.; - [ROOT-8777] Also fix a rogue cout in RooMCStudy.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4119:124,log,logic,124,https://root.cern,https://github.com/root-project/root/pull/4119,1,['log'],['logic']
Testability,"- [X] Checked for duplicates. ### Describe the bug; While working on #8770, it turns out that the reading of `std::vector<T>` in RNTuple appears to be affected by memory leaks, if ``T` allocates memory in its constructor. This should be fixed and unit-tested, with a custom class that tracks constructor and destructor calls.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9133:252,test,tested,252,https://root.cern,https://github.com/root-project/root/issues/9133,1,['test'],['tested']
Testability,"- [X] Checked for duplicates. ### Describe the bug; `valgrind ... --suppressions=etc/valgrind-root.supp tree/dataframe/test/dataframe_concurrency` gives. ```; ==30221== Conditional jump or move depends on uninitialised value(s); ==30221== at 0x9D14829: (anonymous namespace)::DAGCombiner::visitOR(llvm::SDNode*) (in /home/axel/build/root/24/rel/lib/libCling.so); ==30221== by 0x9D4BF24: (anonymous namespace)::DAGCombiner::visit(llvm::SDNode*) (in /home/axel/build/root/24/rel/lib/libCling.so); ==30221== by 0x9D4D13E: (anonymous namespace)::DAGCombiner::combine(llvm::SDNode*) (in /home/axel/build/root/24/rel/lib/libCling.so); ==30221== by 0x9D4EA0D: llvm::SelectionDAG::Combine(llvm::CombineLevel, llvm::AAResults*, llvm::CodeGenOpt::Level) (in /home/axel/build/root/24/rel/lib/libCling.so); ==30221== by 0x9E2B521: llvm::SelectionDAGISel::CodeGenAndEmitDAG() (in /home/axel/build/root/24/rel/lib/libCling.so); ==30221== by 0x9E2F293: llvm::SelectionDAGISel::SelectAllBasicBlocks(llvm::Function const&) (in /home/axel/build/root/24/rel/lib/libCling.so); ==30221== by 0x9E3214B: llvm::SelectionDAGISel::runOnMachineFunction(llvm::MachineFunction&) [clone .part.0] (in /home/axel/build/root/24/rel/lib/libCling.so); ==30221== by 0x98D5399: (anonymous namespace)::X86DAGToDAGISel::runOnMachineFunction(llvm::MachineFunction&) (in /home/axel/build/root/24/rel/lib/libCling.so); ==30221== by 0x9FE37CA: llvm::MachineFunctionPass::runOnFunction(llvm::Function&) (in /home/axel/build/root/24/rel/lib/libCling.so); ==30221== by 0xB1BAA47: llvm::FPPassManager::runOnFunction(llvm::Function&) (in /home/axel/build/root/24/rel/lib/libCling.so); ==30221== by 0xB1BAAD0: llvm::FPPassManager::runOnModule(llvm::Module&) (in /home/axel/build/root/24/rel/lib/libCling.so); ==30221== by 0xB1B9A9F: llvm::legacy::PassManagerImpl::run(llvm::Module&) (in /home/axel/build/root/24/rel/lib/libCling.so); ==30221== by 0x965F899: llvm::orc::SimpleCompiler::operator()(llvm::Module&) (in /home/axel/build/root/24/rel/lib/li",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8899:119,test,test,119,https://root.cern,https://github.com/root-project/root/issues/8899,1,['test'],['test']
Testability,"- [X] Checked for duplicates. With CMake >= 3.24 we get; ```; .../LZMA-prefix/src/LZMA-stamp/LZMA-build-Release.cmake:49 (message):; Command failed: 2. 'make'. See also. .../LZMA-prefix/src/LZMA-stamp/LZMA-build-*.log; ```; which has; ```; WARNING: 'aclocal-1.15' is missing on your system.; You should only need it if you modified 'acinclude.m4' or; 'configure.ac' or m4 files included by 'configure.ac'.; The 'aclocal' program is part of the GNU Automake package:; <http://www.gnu.org/software/automake>; It also requires GNU Autoconf, GNU m4 and Perl in order to run:; <http://www.gnu.org/software/autoconf>; <http://www.gnu.org/software/m4/>; <http://www.perl.org/>; make: *** [Makefile:514: aclocal.m4] Error 127; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11743:214,log,log,214,https://root.cern,https://github.com/root-project/root/issues/11743,1,['log'],['log']
Testability,"- [X] Checked for duplicates; <!--; Please search in; * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue); * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT); for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"".; -->. ### Describe the bug; <!--; A clear and concise description of what the wrong behavior is.; -->. Building ROOT on Arch Linux and then running `ctest -R ""(dataframe|datasource)"" -- -j8` results in several test failures.; There are various possible failure modes -- the command above typically results in these kind of errors:. ```; 1369: Processing /home/jalopezg/CERN/roottest/root/dataframe/test_snapshot.C+...; 1369: Info in <TUnixSystem::ACLiC>: creating shared library /home/jalopezg/CERN/build/roottest/root/dataframe/test_snapshot_C.so; 1369: /usr/bin/ld: /home/jalopezg/CERN/build/roottest/root/dataframe/test_readFcc: _ZSt4cout: invalid version 6 (max 0); 1369: /usr/bin/ld: /home/jalopezg/CERN/build/roottest/root/dataframe/test_readFcc: error adding symbols: bad value; 1369: collect2: error: ld returned 1 exit status; 1369: Error in <ACLiC>: Executing 'cd ""/home/jalopezg/CERN/build/roottest/root/dataframe"" ; c++ -fPIC -c -O3 -DNDEBUG -std=c++14 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -W -Woverloaded-virtual -fsigned-char -pthread -I$ROOTSYS/include -I/home/jalopezg/CERN/build/roottest/root/dataframe -I""/home/jalopezg/CERN/build/etc/"" -I""/home/jalopezg/CERN/build/etc//cling"" -I""/home/jalopezg/CERN/build/include/"" -I""/home/jalopezg/CERN/build/include"" -I""/home/jalopezg/CERN/build/roottest/root/dataframe"" -D__ACLIC__ ""/home/jalopezg/CERN/build/roottest/root/dataframe/test_snapshot_C_ACLiC_dict.cxx"" ; c++ -O3 -DNDEBUG ""/home/jalopezg/CERN/build/roottest/root/dataframe/test_snapshot_C_ACLiC_dict.o"" -shared ""/usr/lib/libdl.so"" ""/usr/lib/libc.so"" ""/usr/lib/libgcc_s.so"" ""/usr/lib/libm.so"" ""/usr/lib/libstdc++.s",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7366:565,test,test,565,https://root.cern,https://github.com/root-project/root/issues/7366,1,['test'],['test']
Testability,"- [X] Checked for duplicates; <!--; Please search in; * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue); * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT); for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"".; -->. ### Describe the bug; <!--; A clear and concise description of what the wrong behavior is.; -->. The exit status of `root --help` is 1, not 0. The [exit status](https://en.wikipedia.org/wiki/Exit_status) usually indicates whether the process is successful or not. Zero means success, and non-zero values suggests an error. It doesn't affect any of the functionality, but a package maintainer who tests the build with `root --help` would be surprised by the nonzero exit status. Is this behavior a design decision, or does it imply some check failures?. ### Expected behavior; <!--; A clear and concise description of what you expected to happen.; -->. `root --help` exits with exit status 0. ### To Reproduce; 1. In a Bourn-like shell, run; ```sh; root --help; echo ""Exit status: $?""; ```. ```console; $ root --help; echo ""Exit status: $?"". usage: root; [-b B]; [-x X]; [-e E]; [-n N]; [-t T]; [-q Q]; [-l L]; [-a A]; [-config CONFIG]; [-h HELP]; [--version VERSION]; [--notebook NOTEBOOK]; [--web WEB]; [--web=<browser> WEB=<BROWSER>]; [dir]; [file:data.root]; [file1.C...fileN.C]. OPTIONS:; -b Run in batch mode without graphics; -x Exit on exceptions; -e Execute the command passed between single quotes; -n Do not execute logon and logoff macros as specified in .rootrc; -t Enable thread-safety and implicit multi-threading (IMT); -q Exit after processing command line macro files; -l Do not show the ROOT banner; -a Show the ROOT splash screen; -config print ./configure options; -h, -?, --help Show summary of options; --version Show the ROOT version; --notebook Execute ROOT notebook; --web Display graphics in a default web browser;",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11977:757,test,tests,757,https://root.cern,https://github.com/root-project/root/issues/11977,1,['test'],['tests']
Testability,"- [X] Checked for duplicates; <!--; Please search in; * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue); * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT); for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"".; -->. ### Describe the bug; <!--; A clear and concise description of what the wrong behavior is.; -->. The following snippet causes a nullptr dereference (or a corresponding assertion failure in debug builds):. ```cpp; #include <ROOT/RDataFrame.hxx>; #include <iostream>. int main() {; auto df = ROOT::RDataFrame(10000);; ROOT::RDF::RSnapshotOptions opts;; opts.fLazy = true;; auto colNames = df.GetColumnNames();; auto c = df.Count();; auto n1 = df.Snapshot(""Events"", ""A.root"", colNames, opts);; std::cout << c.GetValue() << std::endl;. return 0;; }; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7547:529,assert,assertion,529,https://root.cern,https://github.com/root-project/root/issues/7547,1,['assert'],['assertion']
Testability,"- [X] Checked for duplicates; <!--; Please search in; * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue); * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT); for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"".; -->. ### Describe the bug; <!--; A clear and concise description of what the wrong behavior is.; -->; When running an RDataFrame-based analysis macro with ~1000 histogram outputs (each of them has 20000 bins) on a 8-core laptop (16 logical processors), `EnableImplicitMT()` cause ROOT to use up the 32GB RAM and ~30GB swap space. This sometimes causes segmentation violation. Workaround: Drop the line `EnableImplicitMT()`. Related issue: #6676 . ### Expected behavior; Get a way to reduce/restrict the RAM usage of RDataFrame when `EnableImplicitMT()`. ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->. ### Setup. 1. ROOT version: 6.25/01 built against revision 24ea49d4702ba0aa9b1ea5521950520154ee151c from the master branch; ```console; $ root --version; ROOT Version: 6.25/01; Built for linuxx8664gcc on Jan 01 1980, 00:00:00; From @; ```; 2. Operating system: NixOS, x86_64-linux; ```console; $ nix-info -m; - system: `""x86_64-linux""`; - host os: `Linux 5.10.67, NixOS, 21.05.20210922.83413f4 (Okapi)`; - multi-user?: `yes`; - sandbox: `yes`; - version: `nix-env (Nix) 2.4pre20210908_3c56f62`; - nixpkgs: `/nix/var/nix/profiles/per-user/root/channels/nixos`; ```; 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself.; Custom build from source with the Nix package manager. ### Additional context; <!--; Add any other context about the problem here.; -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9087:588,log,logical,588,https://root.cern,https://github.com/root-project/root/issues/9087,2,"['log', 'sandbox']","['logical', 'sandbox']"
Testability,"- [X] Checked for duplicates; None found. ### Describe the bug; Since three nights (Jan 15th), the dev3 (ROOT-master) debug builds fail systematically with an error in; ```; clang::ASTReader::ReadModuleMapFileBlock(llvm::SmallVector<unsigned long, 64u>&, clang::serialization::ModuleFile&, clang::serialization::ModuleFile const*, unsigned int); ```; See for example [this](http://cdash.cern.ch/upload/2db1c74842498c34342939e8d67598ae973967d8/ROOT-HEAD-build.log) .; <!--; A clear and concise description of what the wrong behavior is.; -->. ### Expected behavior; A successful build ;-) .; <!--; A clear and concise description of what you expected to happen.; -->. ### To Reproduce; LCG nightlies (lcgcmake). Did not try yet in standalone.; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->. ### Setup. 1. ROOT master; 2. Operating system: centos7, centos8; 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself: built from source (github). ### Additional context; None for the moment",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9594:459,log,log,459,https://root.cern,https://github.com/root-project/root/issues/9594,1,['log'],['log']
Testability,- [X] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13104:6,test,tested,6,https://root.cern,https://github.com/root-project/root/pull/13104,1,['test'],['tested']
Testability,"- [check ] Checked for duplicates; ### Describe the bug. With regard to the file; **interpreter/CMakeLists.txt**; commit 408de13e131818a3620ce44a7341892f4bdfc420; moved the line ; `get_directory_property(LLVM_DEFS DIRECTORY llvm/src COMPILE_DEFINITIONS)`; from inside; `if (builtin_llvm)`; to inside; `if (builtin_cling)`. Error looks like: . CMake Error at interpreter/CMakeLists.txt:452 (get_directory_property):; get_directory_property DIRECTORY argument provided but requested directory; not found. This could be because the directory argument was invalid or, it; is valid but has not been processed yet. ### Expected behavior; The previous method of handling this was to simply skip this procedure. The compile flags from the external LLVM would not be appended to CLING compile flags. The new logic always checks for this dir even if llvm is external. As a result, it no longer works with my external LLVM, which doesn't have a copy of the /src directory in its installation dir. My build system removes the source trees and build dirs to save space on disk. LLVM install dir does contain cmakefiles under lib/cmake/ and those were used to identify it correctly. . ### To Reproduce. ### Setup; obtained root from https://root.cern.ch/download/root_v6.24.00.source.tar.gz. ### Additional context; I am building with cmake and I have builtin_llvm OFF but builtin_cling ON because the internet told me I am not allowed to use my own cling, I have to use the one with root-patches. I am trying very hard to not use the builtin_llvm because it clashes with the other builds on my system so root either fails to build or just crashes, depending on the version. I am an easybuilder and if I can get this to work, lots of other easybuilders will be able to replicate my procedure and build ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8141:799,log,logic,799,https://root.cern,https://github.com/root-project/root/issues/8141,1,['log'],['logic']
Testability,"- [x ] Checked for duplicates. ### Describe the bug; I'm trying to generate html documentation for ROOT. Most files are created, but it reports several issues:. > Warning in <THtml::CreateListOfClasses>: Cannot find the header for the following classes [reason]:; Warning in <THtml::CreateListOfClasses>: TVirtualPaveStats [header TVirtualPaveStats.h not found]; Warning in <THtml::CreateListOfClasses>: THtml cannot find all headers and sources. ; Warning in <THtml::CreateListOfClasses>: You might need to adjust the input path (currently ./:src/:include/:/opt/root/cur) by calling THtml::SetInputDir(); Warning in <THtml::CreateListOfClasses>: Product not set. You should call gHtml->SetProduct(""MyProductName"");. > 578 htmldoc/ROOT__Math__IParametricGradFunctionMultiDimTempl_double_.html; Error: segment [(31.517,476.17),(22,480)] does not intersect box ll=(22,328),ur=(70,681); dot: compound.c:78: boxIntersectf: Assertion `0' failed.; Error in <TClassDocOutput::RunDot>: Error running dot -q1 -Tpng -ohtmldoc/inhmem/ROOT__Math__IParametricGradFunctionMultiDimTempl_double__InhMem.png -Tcmap -ohtmldoc/inhmem/ROOT__Math__IParametricGradFunctionMultiDimTempl_double__InhMem.map htmldoc/inhmem/ROOT__Math__IParametricGradFunctionMultiDimTempl_double__InhMem.dot!. Which is worse, it doesn't create html documentation for TTree (and it's missing in the index). . I try to generate it separately:. root [4] h.SetInputDir(""$(ROOTSYS)"");; root [5] h.MakeClass(""TTree"");. > Info in <THtml::CreateListOfClasses>: Initializing - DONE.; Error in <THtml::MakeClass>: Unknown class 'TTree'!. root [6] TTree t;. works fine. ### Expected behavior; Should report no errors, should create TTree documentation. ### To Reproduce; My ~/.rootrc is. > \# THtml specific settings.; Root.Html.OutputDir: htmldoc/; Root.Html.SourcePrefix:; Unix.*.Root.Html.SourceDir: ./:src/:include/:/opt/root/cur. (I copied it from https://root.cern.ch/doc/master/classTHtml.html (MakeAll) and https://root.cern.ch/root/roottalk/root",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7295:919,Assert,Assertion,919,https://root.cern,https://github.com/root-project/root/issues/7295,1,['Assert'],['Assertion']
Testability,"- [x ] Checked for duplicates; <!--; Please search in; * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue); * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT); for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"".; -->. ### Describe the bug; <!--; A clear and concise description of what the wrong behavior is.; -->; `sudo root --notebook --log-level 10 --allow-root` works; `root --notebook --log-level 10` does not, jupyter is trying to reconnect to the kernel every few seconds.; There is no helpful debug output. For debugging I put some print statements around that line but that doesn't help much:; `/usr/lib/python3.8/site-packages/JupyROOT/kernel/rootkernel.py`; and noticed that the kernel freezes on line 57:; `MetaKernel.__init__(self,**kwargs)`. With sudo it does not freeze. ### Setup; <!--; 1. ROOT version; 2. Operating system; 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself.; -->; 1. ROOT Version: 6.22/02; 2. arch linux; 3. I tried both the package manager version and the [manual installation](https://root.cern/install). I also gave miniconda and anaconda a try but both don't work for ROOT because of dependency conflicts. The python kernel works flawlessly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6608:483,log,log-level,483,https://root.cern,https://github.com/root-project/root/issues/6608,2,['log'],['log-level']
Testability,"- [x] Checked for duplicates. ### Describe the bug. Error reading object from file. Please find a short example to reproduce below. . ### Minimal example to reproduce. Below I refer to it as **test.cpp**. #include ""map""; #include ""array""; #include ""iostream""; ; #include ""TObject.h""; #include ""TFile.h""; ; class TestClass : public TObject {; public:; TestClass(){; std::array<std::string, 2> test_array{""aaaa"", ""bbbbbb""};; test_map_[test_array] = ""cccc"";; }; ; void Print(Option_t *option="""") const {; for(const auto& element : test_map_){; std::cout << element.first[0] << "" "" << element.first[1] << "" "" << element.second << std::endl;; }; }; private:; std::map<std::array<std::string, 2>, std::string> test_map_{};; ClassDef(TestClass, 1);; };; ClassImp(TestClass); ; void test(){; auto* test_obj = new TestClass;; test_obj->Print();; ; auto* file = TFile::Open(""test.root"", ""recreate"");; test_obj->Write(""obj"");; file->Close();; ; delete file;; delete test_obj;; ; file = TFile::Open(""test.root"", ""read"");; test_obj = file->Get<TestClass>(""obj"");; test_obj->Print();; ; file->Close();; delete file;; }; ; int main(int argc, char* argv[]) {; test();; return 0;; }. ### Running the example. With a compiled code everything works as expected:. root -l; root [0] .L test.cpp+; root [1] test(). gives correct output:. aaaa bbbbbb cccc; aaaa bbbbbb cccc. But if I try to read again the same file:. root -l test.root; root [0] gSystem->Load(""test_cpp""); root [1] obj->Print(); Error in <TBufferFile::ReadVersion>: Could not find the StreamerInfo with a checksum of 0x6b3ba626 for the class ""string"" in test.root.; Error in <TBufferFile::CheckByteCount>: object of class string read too many bytes: 72 instead of 24; Warning in <TBufferFile::CheckByteCount>: string::Streamer() not in sync with data on file test.root, fix Streamer(); aaaabbbbbb@ cccc�i�� cccc. With an older version of ROOT (6.18), everything works as expected. ### Some additional information. I tried to compare StreamerInfo for 2 ROOT ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8268:193,test,test,193,https://root.cern,https://github.com/root-project/root/issues/8268,9,"['Test', 'test']","['TestClass', 'test']"
Testability,"- [x] Checked for duplicates. ### Describe the bug. Having the environment variable `MACOSX_DEPLOYMENT_TARGET` set to a value of 11 or higher (suitable for macOS Big Sur or newer) causes `rootcling` to fail at runtime. Because rootcling is used as part of the installation process itself, the environment will cause a ROOT build to fail. See https://github.com/spack/spack/issues/28161 . ### Expected behavior. ```console; $ touch foo.h; $ rootcling -v2 -f foo.cxx foo.h; Warning: Unused class rule: foo; ```. ### To Reproduce. ```console; $ touch foo.h; $ export MACOSX_DEPLOYMENT_TARGET=11 # or 11.3 or ...; $ rootcling -v2 -f foo.cxx foo.h; error: invalid version number in 'MACOSX_DEPLOYMENT_TARGET=11'; error: invalid version number in 'MACOSX_DEPLOYMENT_TARGET=11'; Error: Parsing #pragma failed in memory; Warning: Unused class rule: foo; ```. ### Setup; ```; $ rootcling --version; LLVM (http://llvm.org/):; LLVM version 9.0.1; Optimized build with assertions.; Default target: x86_64-apple-darwin20.6.0; Host CPU: skylake; ```. Installed with Spack on macOS 11:; ```; ""Configure options : -Dcxxmodules:BOOL=OFF -Dexceptions:BOOL=ON -Dexplicitlink:BOOL=ON -Dfail-on-missing:BOOL=ON -Dfortran:BOOL=OFF -Dgminimal:BOOL=ON -Dgnuinstall:BOOL=OFF -Dlibcxx:BOOL=OFF -Dpch:BOOL=ON -Droottest:BOOL=OFF -Drpath:BOOL=ON -Druntime_cxxmodules:BOOL=OFF -Dshared:BOOL=ON -Dsoversion:BOOL=ON -Dtesting:BOOL=OFF -Dthread:BOOL=ON -DCLING_CXX_PATH:STRING=/usr/bin/clang++ -Dbuiltin_afterimage:BOOL=OFF -Dbuiltin_cfitsio:BOOL=OFF -Dbuiltin_davix:BOOL=OFF -Dbuiltin_fftw3:BOOL=OFF -Dbuiltin_freetype:BOOL=OFF -Dbuiltin_ftgl:BOOL=OFF -Dbuiltin_gl2ps:BOOL=OFF -Dbuiltin_glew:BOOL=OFF -Dbuiltin_gsl:BOOL=OFF -Dbuiltin_llvm:BOOL=ON -Dbuiltin_lz4:BOOL=OFF -Dbuiltin_lzma:BOOL=OFF -Dbuiltin_nlohmannjson:BOOL=OFF -Dbuiltin_openssl:BOOL=OFF -Dbuiltin_pcre:BOOL=OFF -Dbuiltin_tbb:BOOL=OFF -Dbuiltin_unuran:BOOL=OFF -Dbuiltin_vc:BOOL=OFF -Dbuiltin_vdt:BOOL=OFF -Dbuiltin_veccore:BOOL=OFF -Dbuiltin_xrootd:BOOL=OFF -Dbuilti",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9524:957,assert,assertions,957,https://root.cern,https://github.com/root-project/root/issues/9524,1,['assert'],['assertions']
Testability,"- [x] Checked for duplicates. ### Describe the bug. I've been trying out the new `RDF.Experimental.Distributed.Dask.RDataFrame` in ROOT master, which is a great addition. It seems to work fine when using a single-machine cluster of workers (`dask.distributed.LocalCluster`), but it fails when using a batch cluster (either `dask_jobqueue.HTCondorCluster` or `dask_jobqueue.SLURMCluster`):. ```; Traceback (most recent call last):; File ""/afs/cern.ch/user/s/swertz/testDistRDF/testCondor.py"", line 81, in <module>; val = prod.GetValue(); File ""/cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Sat/x86_64-centos7-gcc11-opt/lib/DistRDF/Proxy.py"", line 130, in GetValue; self.execute_graph(); File ""/cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Sat/x86_64-centos7-gcc11-opt/lib/DistRDF/Proxy.py"", line 121, in execute_graph; headnode.backend.execute(generator); File ""/cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Sat/x86_64-centos7-gcc11-opt/lib/DistRDF/Backends/Base.py"", line 134, in execute; ranges = headnode.build_ranges(); File ""/cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Sat/x86_64-centos7-gcc11-opt/lib/DistRDF/HeadNode.py"", line 91, in build_ranges; return Ranges.get_balanced_ranges(self.nentries, self.npartitions); File ""/cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Sat/x86_64-centos7-gcc11-opt/lib/DistRDF/Ranges.py"", line 276, in get_balanced_ranges; partition_size = nentries // npartitions; ZeroDivisionError: integer division or modulo by zero; ```. ### To Reproduce. Minimal example, ran on lxplus/lxbatch:; ```python; import ROOT; RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame; distributed = ROOT.RDF.Experimental.Distributed; from dask.distributed import Client, LocalCluster; from dask_jobqueue import HTCondorCluster. cluster = HTCondorCluster(cores=1, processes=1, memory=""1GB"", disk=""0.1GB"", job_extra={""jobflavour"": ""espresso""}); cluster.scale(jobs=1); # Works fine with:; # cluster = LocalCluster(n_workers=1, threads_per_worker=1); client = Client(cluster); df = RDataF",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9429:464,test,testDistRDF,464,https://root.cern,https://github.com/root-project/root/issues/9429,2,['test'],"['testCondor', 'testDistRDF']"
Testability,"- [x] Checked for duplicates. ### Describe the bug. In the LCG dev3 and dev4 build we see a segfault when testing DD4hep, when reading the XML description of the materials of the Detector.; ```; #0 0x00007ffff4c73a1a in TGeoElement::A (this=0x0) at /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-26-00-patches/src/ROOT/v6-26-00-patches/geom/geom/inc/TGeoElement.h:76; #1 0x00007ffff4c734ee in TGeoMixture::ComputeDerivedQuantities (this=0x2945cb0); at /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-26-00-patches/src/ROOT/v6-26-00-patches/geom/geom/src/TGeoMaterial.cxx:1262; #2 0x00007fffd42bb732 in dd4hep::Converter<dd4hep::Material, dd4hep::xml::Handle_t>::operator() (this=0x7ffffffe1960, e=...); at /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/DD4hep-01.22/src/DD4hep/01.22/DDCore/src/plugins/Compact2Objects.cpp:489; #3 0x00007fffd42cadc3 in dd4hep::xml::Collection_t::for_each<dd4hep::Converter<dd4hep::Material, dd4hep::xml::Handle_t> > (this=0x7ffffffe1990, oper=...); ```. Debugging the code, I can see that the TGeoMixture is supposed to contain fNelements=4 elements, and the last one is 0x0 hence the segfault when invoking A(). Digging further, I can see that the material is defined in DD4hep compact as:. ```; <!-- ### Pipe Supports Sintimid ### -->; <material name =""Pipe:Sintimid"">; <D type=""density"" value=""1.43"" unit=""g/cm3""/>; <composite ref=""C"" n=""18""/>; <composite ref=""O"" n=""5""/>; <composite ref=""N"" n=""2""/>; </material>. <!--### Pipe Supports Sintimid15G ###-->; <material name =""Pipe:Sintimid15G"">; <D type=""density"" value=""1.42"" unit=""g/cm3""/>; <fraction ref=""Pipe:Sintimid"" n=""0.85""/>; <fraction ref=""C"" n=""0.15""/>; </material>; ```; where the second mixture is a mixture of the first mixture and an element already present. ### Expected behavior; No segfault. ### To Reproduce. I have tried to reproduce the behaviour in a simple root macro:; ```; void test_mixture(); {; TGeoManager *geom = new TGeoManager(""",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11272:106,test,testing,106,https://root.cern,https://github.com/root-project/root/issues/11272,1,['test'],['testing']
Testability,"- [x] Checked for duplicates. ### Describe the bug. PyROOT related failures on s390x. Endian issus. ### Expected behavior. PyROOT should work on big endian without glitches. ### To Reproduce. Steps to reproduce the behavior:; 1. Build root 6.28.00 for s390x; 2. run unut tests. ### Setup. 1. ROOT version: 6.28.00; 2. Fedora Linux s390x, RHEL+EPEL s390x; 3. Compilation from source. ### Additional context. The failing tests. #### pyunittests-pyroot-pyz-rtensor . This is an endian issue:. $ printf '%08x\n%08x\n' 16777216 1; 01000000; 00000001; ~~~; 109/1272 Test #62: pyunittests-pyroot-pyz-rtensor ......................................***Failed 2.92 sec; test_memoryAdoption (rtensor.ArrayInterface.test_memoryAdoption); Test correct adoption of different datatypes ... ok; test_memoryLayout (rtensor.ArrayInterface.test_memoryLayout); Test adoption of the memory layout ... ok; test_ownData (rtensor.ArrayInterface.test_ownData); Test ownership of adopted numpy array ... ok; test_dtypes (rtensor.AsRTensor.test_dtypes); Test adoption of numpy arrays with different data types ... ok; test_memoryLayout (rtensor.AsRTensor.test_memoryLayout); Test adoption of the memory layout ... FAIL; test_strides (rtensor.AsRTensor.test_strides); Test adoption of the strides ... ok; test_expandDims (rtensor.NumpyCompliance.test_expandDims); Test np.expand_dims vs RTensor::ExpandDims ... ok; test_reshape (rtensor.NumpyCompliance.test_reshape); Test np.reshape vs RTensor::Reshape ... FAIL; test_slice (rtensor.NumpyCompliance.test_slice); Test slicing operations ... ok; test_squeeze (rtensor.NumpyCompliance.test_squeeze); Test np.squeeze vs RTensor::Squeeze ... ok; test_transpose (rtensor.NumpyCompliance.test_transpose); Test np.transpose vs RTensor::Transpose ... FAIL; ======================================================================; FAIL: test_memoryLayout (rtensor.AsRTensor.test_memoryLayout); Test adoption of the memory layout; ------------------------------------------------------------",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12429:271,test,tests,271,https://root.cern,https://github.com/root-project/root/issues/12429,6,"['Test', 'test']","['Test', 'tests']"
Testability,"- [x] Checked for duplicates. ### Describe the bug. Test failures in RNTuple on s390x. Endian issues.; There are way fewer failures in 6.28.00 than in earlier versions, this report is about remaining ones. ### Expected behavior. RNTuple should work for big-endian too. ### To Reproduce. 1. Build root 6.28.00 for s390x; 2. Run unit tests. ### Setup. 1. ROOT version: 6.28.00; 2. Operating system: Fedora Linux on s390x, RHEL+EPEL on s390x; 3. Compilation from source. ### Additional context. The failing tests . #### gtest-tree-ntuple-v7-test-ntuple-basics. Fatal: nread == nbytes violated; ~~~; 474/1272 Test #421: gtest-tree-ntuple-v7-test-ntuple-basics .............................***Failed 63.64 sec; Running main() from /builddir/build/BUILD/googletest-1.13.0/googletest/src/gtest_main.cc; Note: Google Test filter = -RCsvDS.Remote:RRawFile.Remote:RSqliteDS.Davix:TFile.ReadWithoutGlobalRegistrationWeb:TFile.ReadWithoutGlobalRegistrationNet:RNTuple.TClassEBO; [==========] Running 17 tests from 2 test suites.; [----------] Global test environment set-up.; [----------] 13 tests from RNTuple; [ RUN ] RNTuple.ReconstructModel; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RPageStorageFile.cxx:51 in ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(std::string_view, const ROOT::Experimental::RNTupleWriteOptions&)>: The RNTuple file format will change. Do not store real data with this version of RNTuple!; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RNTupleSerialize.cxx:1148 in static ROOT::Experimental::RResult<void> ROOT::Experimental::Internal::RNTupleSerializer::DeserializeHeaderV1(const void*, uint32_t, ROOT::Experimental::RNTupleDescriptorBuilder&)>: Pre-release format version: RC 1; [ OK ] RNTuple.ReconstructModel (160 ms); [ RUN ] RNTuple.MultipleInFile; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RPageStorageFile.cxx:51 in ROOT::Experime",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12426:52,Test,Test,52,https://root.cern,https://github.com/root-project/root/issues/12426,9,"['Test', 'test']","['Test', 'test', 'test-ntuple-basics', 'tests']"
Testability,"- [x] Checked for duplicates. ### Describe the bug. The conda nightly builds started segfaulting late last year while generating `hsimple.root`. I think I've isolated the problem to the addition of `-O1` to the default cling arguments. For debugging I've build Friday's master with https://github.com/root-project/root/commit/eff25e526f23d86077819211898f0fcae3153dc8 reverted so the issue can be triggered at will by setting `EXTRA_CLING_ARGS=-O1` in the environment. I've only seen the crash on both CentOS 7 however the compilers and sysroot used should be coming from conda-forge so I'm not sure why the host system is relavent. I don't know if it's related but this is was built using `-Dbuiltin_llvm=OFF -Dbuiltin_clang=OFF`. <details><summary>Click for full stack trace</summary>; <p>. ```cpp; (/scratch2/root-debug2/env1) [root@31cdf387b2f5 root-debug2]# EXTRA_CLING_ARGS='-O1' root.exe -l -b -q -x test.cpp++. Processing test.cpp++...; Info in <TUnixSystem::ACLiC>: creating shared library /scratch2/root-debug2/./test_cpp.so. *** Break *** segmentation violation. ===========================================================; There was a crash.; This is the entire stack trace of all threads:; ===========================================================; #0 0x00007f54c8af741c in waitpid () from /lib64/libc.so.6; #1 0x00007f54c8a74f12 in do_system () from /lib64/libc.so.6; #2 0x00007f54c9097e78 in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x55ed24b27570) at /usr/local/src/conda/root_base-6.25.2/root-source/core/unix/src/TUnixSystem.cxx:2108; #3 TUnixSystem::StackTrace (this=0x55ed24b27570) at /usr/local/src/conda/root_base-6.25.2/root-source/core/unix/src/TUnixSystem.cxx:2399; #4 0x00007f54c9095257 in TUnixSystem::DispatchSignals (this=0x55ed24b27570, sig=kSigSegmentationViolation) at /usr/local/src/conda/root_base-6.25.2/root-source/core/unix/src/TUnixSystem.cxx:3619; #5 <signal handler called>; #6 0x00007f54c1df2cc6 in clang::CodeGen::CodeGenTBAA::getBaseTypeInfoHelper ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9595:906,test,test,906,https://root.cern,https://github.com/root-project/root/issues/9595,2,['test'],['test']
Testability,"- [x] Checked for duplicates. ### Describe the bug. The documented `nocompile` flag for `TFile::MakeProject` does not prevent compilation. . ### Expected behavior. `nocompile` flag prevents compilation of a shared object library. ### To Reproduce. Run: `tfile->MakeProject(""test"", ""*"", ""recreate+nocompile"");`; on any ROOT file with a `TTree` containing data that `MakeProject` can generate classes for.; In the generated `test` directory you will see that it built `test.so`. ### Setup. `ROOT Version: 6.24/06` but is also present in current `master` (see source code links below). ### Additional context. The documentation for [TFile::MakeProject](https://github.com/root-project/root/blob/master/io/io/src/TFile.cxx#L2627); incorrectly states that the `nocompile` option disabled compilation of the library. The actual implementation in the [source code](https://github.com/root-project/root/blob/master/io/io/src/TFile.cxx#L3257) actually requires `nocompilation`. Either the documentation or the implementation needs to be changed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9215:274,test,test,274,https://root.cern,https://github.com/root-project/root/issues/9215,3,['test'],['test']
Testability,"- [x] Checked for duplicates. ### Describe the bug. The gtest-roofit-roofitcore-test-testRooProdPdf test fails on s390x.; This is a big-endian architecture. See the log below.; The assert does not fail because the two values are the same with differnt byte order. The issue is more complicated than that::. $ printf '%x\n%x\n' 3649468902 2448666198; d98679e6; 91f3ae56. ### Expected behavior. Passing test on s390x. ### To Reproduce. 1. Build root for s390x; 2. Run unit tests. ### Setup. 1. ROOT version: 6.28.00; 2. Operating system: Fedora for s390x, RHEL+EPEL for s390x; 3. How you obtained ROOT: Compilation from source. ### Additional context. Thefailing test:; ~~~; 295/1272 Test #250: gtest-roofit-roofitcore-test-testRooProdPdf .........................***Failed 1.02 sec; Running main() from /builddir/build/BUILD/googletest-1.13.0/googletest/src/gtest_main.cc; Note: Google Test filter = -RCsvDS.Remote:RRawFile.Remote:RSqliteDS.Davix:TFile.ReadWithoutGlobalRegistrationWeb:TFile.ReadWithoutGlobalRegistrationNet:RNTuple.TClassEBO; [==========] Running 8 tests from 2 test suites.; [----------] Global test environment set-up.; [----------] 2 tests from RooProdPdf; [ RUN ] RooProdPdf.TestGetPartIntList; /builddir/build/BUILD/root-6.28.00/roofit/roofitcore/test/testRooProdPdf.cxx:146: Failure; Expected equality of these values:; hashRooProduct(prod); Which is: 3649468902; 2448666198; [ FAILED ] RooProdPdf.TestGetPartIntList (229 ms); [ RUN ] RooProdPdf.TestDepsAreCond; Warning in <RooNaNPacker>: Fast recovery from undefined function values only implemented for little-endian machines. If necessary, request an extension of functionality on https://root.cern; [ OK ] RooProdPdf.TestDepsAreCond (644 ms); [ DISABLED ] RooProdPdf.DISABLED_ChangeServerNormSetForProdPdfInAddPdf; [----------] 2 tests from RooProdPdf (873 ms total); [----------] 6 tests from RooProdPdf/TestProdPdf; [ RUN ] RooProdPdf/TestProdPdf.CachingOpt/opt0off; [ OK ] RooProdPdf/TestProdPdf.CachingOpt/opt0off (17 m",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12430:80,test,test-testRooProdPdf,80,https://root.cern,https://github.com/root-project/root/issues/12430,10,"['Test', 'assert', 'log', 'test']","['Test', 'assert', 'log', 'test', 'test-testRooProdPdf', 'tests']"
Testability,"- [x] Checked for duplicates. ### Describe the bug. The gtest-tree-ntuple-v7-test-ntuple-types test ends with a seg fault in the RNTuple.TClassEBO test. ### Expected behavior. Passing test. ### To Reproduce. 1. Compile root 6.28.00 for ix86.; 2. Run unit tests. ### Setup. 1. ROOT version: 6.28.00; 2. Operating system: Fedora Linux 36/37/38/39, RHEL+EPEl 8/9; 3. How you obtained ROOT: compilation from source. ### Additional context. Log for the failing test. ~~~; 507/1318 Test #444: gtest-tree-ntuple-v7-test-ntuple-types ..............................***Failed 91.08 sec; Running main() from /builddir/build/BUILD/googletest-1.13.0/googletest/src/gtest_main.cc; Note: Google Test filter = -RCsvDS.Remote:RRawFile.Remote:RSqliteDS.Davix:TFile.ReadWithoutGlobalRegistrationWeb:TFile.ReadWithoutGlobalRegistrationNet; [==========] Running 19 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 19 tests from RNTuple; [ RUN ] RNTuple.TypeName; [ OK ] RNTuple.TypeName (200 ms); [ RUN ] RNTuple.CreateField; [ OK ] RNTuple.CreateField (0 ms); [ RUN ] RNTuple.ArrayField; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RPageStorageFile.cxx:51 in ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(std::string_view, const ROOT::Experimental::RNTupleWriteOptions&)>: The RNTuple file format will change. Do not store real data with this version of RNTuple!; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RNTupleSerialize.cxx:1148 in static ROOT::Experimental::RResult<void> ROOT::Experimental::Internal::RNTupleSerializer::DeserializeHeaderV1(const void*, uint32_t, ROOT::Experimental::RNTupleDescriptorBuilder&)>: Pre-release format version: RC 1; [ OK ] RNTuple.ArrayField (37 ms); [ RUN ] RNTuple.StdPair; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RPageStorageFile.cxx:51 in ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(s",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12428:77,test,test-ntuple-types,77,https://root.cern,https://github.com/root-project/root/issues/12428,14,"['Log', 'Test', 'test']","['Log', 'Test', 'test', 'test-ntuple-types', 'tests']"
Testability,"- [x] Checked for duplicates. ### Describe the bug. Two RNTuple tests fail on ix86 (Intel 32 bit). ### Expected behavior. The tests should pass. ### To Reproduce. 1. Compile root 6.28.00 for ix86.; 2. Run unit tests. ### Setup. 1. ROOT version: 6.28.00; 2. Operating system: Fedora Linux 36/37/38/39 on i686; 3. How you obtained ROOT: compilation from source. ### Additional context. Logs for the two failing tests:. gtest-tree-ntuple-v7-test-ntuple-types fails due to alignment differences for std::tuple and std::pair. ~~~; 479/1318 Test #444: gtest-tree-ntuple-v7-test-ntuple-types ..............................***Failed 13.57 sec; Running main() from /builddir/build/BUILD/googletest-1.13.0/googletest/src/gtest_main.cc; Note: Google Test filter = -RCsvDS.Remote:RRawFile.Remote:RSqliteDS.Davix:TFile.ReadWithoutGlobalRegistrationWeb:TFile.ReadWithoutGlobalRegistrationNet:RNTuple.TClassEBO; [==========] Running 18 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 18 tests from RNTuple; [ RUN ] RNTuple.StdPair; /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/test/ntuple_types.cxx:102: Failure; Expected equality of these values:; (alignof(std::pair<int64_t, float>)); Which is: 4; otherField->GetAlignment(); Which is: 8; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RPageStorageFile.cxx:51 in ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(std::string_view, const ROOT::Experimental::RNTupleWriteOptions&)>: The RNTuple file format will change. Do not store real data with this version of RNTuple!; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RNTupleSerialize.cxx:1148 in static ROOT::Experimental::RResult<void> ROOT::Experimental::Internal::RNTupleSerializer::DeserializeHeaderV1(const void*, uint32_t, ROOT::Experimental::RNTupleDescriptorBuilder&)>: Pre-release format version: RC 1; [ FAILED ] RNTuple.StdPair (287 ms); [ --- ]; [ RUN ] RNTuple.StdTupl",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12427:64,test,tests,64,https://root.cern,https://github.com/root-project/root/issues/12427,12,"['Log', 'Test', 'test']","['Logs', 'Test', 'test', 'test-ntuple-types', 'tests']"
Testability,"- [x] Checked for duplicates. ### Describe the bug. When running the unit tests on s390x there are several failures:. ```; 97% tests passed, 34 tests failed out of 1232; Label Time Summary:; longtest = 572.89 sec*proc (27 tests); multithreaded = 889.21 sec*proc (2 tests); python_runtime_deps = 58.00 sec*proc (11 tests); tutorial = 4391.45 sec*proc (786 tests); Total Test time (real) = 2976.41 sec; The following tests FAILED:; 	 16 - pyunittests-pyroot-pyz-stl-vector (Failed); 	 57 - pyunittests-pyroot-pyz-rtensor (Failed); 	213 - gtest-roofit-histfactory-test-testHistFactory (Failed); 	219 - gtest-roofit-roofit-test-testRooCrystalBall (Failed); 	220 - gtest-roofit-roofit-test-testRooJohnson (Failed); 	223 - gtest-roofit-roofit-test-testSumW2Error (Failed); 	228 - gtest-roofit-roofitcore-test-testRooBinSamplingPdf (Failed); 	229 - gtest-roofit-roofitcore-test-testRooSimPdfBuilder (Failed); 	230 - gtest-roofit-roofitcore-test-testRooWrapperPdf (Failed); 	231 - gtest-roofit-roofitcore-test-testRooFitDriver (Failed); 	233 - gtest-roofit-roofitcore-test-testRooAbsPdf (Failed); 	237 - gtest-roofit-roofitcore-test-testRooProdPdf (Failed); 	241 - gtest-roofit-roofitcore-test-testTestStatistics (Failed); 	242 - gtest-roofit-roofitcore-test-testRooProductPdf (Failed); 	243 - gtest-roofit-roofitcore-test-testNaNPacker (Failed); 	244 - gtest-roofit-roofitcore-test-testRooSimultaneous (Failed); 	245 - gtest-roofit-roofitcore-test-testRooGradMinimizerFcn (Failed); 	247 - gtest-roofit-roofitcore-test-testLikelihoodSerial (Failed); 	248 - gtest-roofit-roofitcore-test-testRooRealL (Failed); 	249 - gtest-roofit-roofitcore-test-testGlobalObservables (Failed); 	252 - gtest-roofit-roostats-test-testSPlot (Failed); 	274 - test-stresshistogram (Failed); 	275 - test-stresshistogram-interpreted (Failed); 	296 - test-stresshistofit (Failed); 	297 - test-stresshistofit-interpreted (Failed); 	396 - gtest-tree-dataframe-test-datasource-ntuple (Failed); 	402 - gtest-tree-ntuple-v7-test-ntuple-bas",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10409:74,test,tests,74,https://root.cern,https://github.com/root-project/root/issues/10409,8,"['Test', 'test']","['Test', 'tests']"
Testability,"- [x] Checked for duplicates. ### Describe the bug. With 6.24/06 vanilla and v6-24-00-patches e9d29ae8eb, the test `runtime_cxxmodules_addr` in the provided reproducer ; passes regardless of the presence or absence of the feature `runtime_cxxmodules`. With 6.25/02—and master, per @pcanal—it fails with a segmentation violation trying to autoparse `art::detail::are_cv_compatible<const int, const int*>`. ### Expected behavior. * `runtime_cxxmodules_9583_good` should pass in all cases.; * `runtime_cxxmodules_9583_bad` should pass when `runtime_cxxmodules=OFF` or #9583 has been fixed.; * `runtime_cxxmodules_addr` should pass in all cases. ### To Reproduce. - Ensure you are using ROOT 6.25/02 (or see below); - Ensure you are using CMake >= 3.22.0; - Execute the provided runit script to configure, build, and execute the tests. ### Setup. * SLF7; * CMAKE_CXX_STANDARD=17. ### Additional context. Preliminary investigation by @pcanal (to ensure that I hadn't messed up something basic in the configuration or XML) indicates that the problem was introduced by PR #7488 and not fixed by its partial reversion in 2d304cf4888a8cf24aa84b7fae086a91eefa31c4. According to @pcanal, a reversion of both 2d304cf488 and 34590aeef4 resolves this issue. Reproducer: [runtime_cxxmodules-reproducer.tar.gz](https://github.com/root-project/root/files/7918981/runtime_cxxmodules-reproducer.tar.gz)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9664:110,test,test,110,https://root.cern,https://github.com/root-project/root/issues/9664,2,['test'],"['test', 'tests']"
Testability,"- [x] Checked for duplicates. ### Describe the bug. tutorial-tree-drawsparse fails on s390x. ### Expected behavior. No failure. ### To Reproduce. Steps to reproduce the behavior:; 1. Build root for 6.28.00 on s390x; 2. Run unit tests. ### Setup. 1. ROOT version: 6.28.00; 2. Operating system: Fedora Linux s390x, RHEL+EPEL s390x; 3. How you obtained ROOT: build from source. ### Additional context. Output from failing test:; ~~~; 1008/1272 Test #1006: tutorial-tree-drawsparse ................................\; ............***Failed 0.97 sec; Processing /builddir/build/BUILD/root-6.28.00/tutorials/tree/drawsparse.C...; /usr/include/c++/13/bits/stl_vector.h:1123: std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::operator[](size_type) [with _Tp = double; _Alloc = std::allocator<double>; reference = double&; size_type = long unsigned int]: Assertion '__n < this->size()' failed.; CMake Error at /builddir/build/BUILD/root-6.28.00/redhat-linux-build/RootTestDriver.cmake:232 (message):; error code: Subprocess aborted; ~~~",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12431:228,test,tests,228,https://root.cern,https://github.com/root-project/root/issues/12431,4,"['Assert', 'Test', 'test']","['Assertion', 'Test', 'test', 'tests']"
Testability,"- [x] Checked for duplicates. ### Describe the bug; A segmentation violation is encountered when trying to run fit on toys during the toy generation. ### To Reproduce; To reproduce the crash, please use the attached (minimal) code and the ROOT file with the RooWorkspace inside: [link to cernbox](https://cernbox.cern.ch/index.php/s/ADF23igrMghZPzk). ### Setup; Tested on; ROOT Version: 6.27/01; Built for linuxx8664gcc on Jul 18 2022, 09:11:00; From heads/master@ffdbbb6d. as well as ; LCG_101 x86_64-centos7-gcc8-opt. ### Additional context; Note that the code here tries to reproduce what is done in a bigger framework, It is entirely possible that we are doing something dumb and this is not an actual bug in GenerateToyData, but it is interestingly seen only for ""gammas"" NPs (i.e. one NP per bin)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11565:362,Test,Tested,362,https://root.cern,https://github.com/root-project/root/issues/11565,1,['Test'],['Tested']
Testability,"- [x] Checked for duplicates. ### Describe the bug; Attached ([HCAL_Chimney_Sector_Half_Plate.gdml.gz](https://github.com/root-project/root/files/10095037/HCAL_Chimney_Sector_Half_Plate.gdml.gz)) is a relatively simple GDML file (6280 bytes) with a single tesselated solid that is placed twice in positions that are not overlapping, yet for which ROOT reports an overlap. ### Expected behavior; ROOT should not report an overlap. Geant4 does not report an overlap, and visualizes the volumes this way (demonstrating they are not overlapping):; ![image](https://user-images.githubusercontent.com/4656391/204054829-cc8a1c58-f8d8-4b61-86f4-3679424e4d17.png). ### To Reproduce; - `TGeoManager* myGeo = new TGeoManager();`; - `myGeo->Import(""HCAL_Chimney_Sector_Half_Plate.gdml"")`; - `myGeo->CheckOverlaps()`; - `myGeo->PrintOverlaps()`. ```; 14:51:08 wdconinc@menelaos ~/EIC/detectors/epic (testcase *$%=) $ root -l ; root [0] TGeoManager* myGeo = new TGeoManager();; root [1] myGeo->Import(""HCAL_Chimney_Sector_Half_Plate.gdml""); Info in <TGeoManager::Import>: Reading geometry from file: HCAL_Chimney_Sector_Half_Plate.gdml; Info in <TGeoManager::TGeoManager>: Geometry GDMLImport, Geometry imported from GDML created; Info in <TGeoManager::SetTopVolume>: Top volume is worldVOL. Master volume is worldVOL; Info in <TGeoNavigator::BuildCache>: --- Maximum geometry depth set to 100; Info in <TGeoManager::CheckGeometry>: Fixing runtime shapes...; Info in <TGeoManager::CheckGeometry>: ...Nothing to fix; Info in <TGeoManager::CloseGeometry>: Counting nodes...; Info in <TGeoManager::Voxelize>: Voxelizing...; Info in <TGeoManager::CloseGeometry>: Building cache...; Info in <TGeoManager::CountLevels>: max level = 1, max placements = 2; Info in <TGeoManager::CloseGeometry>: 3 nodes/ 2 volume UID's in Geometry imported from GDML; Info in <TGeoManager::CloseGeometry>: ----------------modeler ready----------------; (TGeoManager *) 0x556b33e2bc60; root [2] myGeo->CheckOverlaps(); Info in <TGeoNodeMatri",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11781:887,test,testcase,887,https://root.cern,https://github.com/root-project/root/issues/11781,1,['test'],['testcase']
Testability,- [x] Checked for duplicates. ### Describe the bug; Builtin TBB has broken on MacOS M1 (reported [here](https://root-forum.cern.ch/t/help-on-compile-root-on-new-arm-macbook/42495/7)); ```; CMake Error at /Users/fermi/dev/root/build/TBB-prefix/src/TBB-stamp/TBB-build-Release.cmake:49 (message):; Command failed: 2; ‘make’ ‘compiler=clang’ ‘cpp0x=1’ ‘CXXFLAGS= -mno-rtm -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX11.0.sdk’ ‘CPLUS=/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++’ ‘CONLY=/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/cc’ ‘LDFLAGS= -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX11.0.sdk’; See also; /Users/fermi/dev/root/build/TBB-prefix/src/TBB-stamp/TBB-build-*.log; make[2]: *** [TBB-prefix/src/TBB-stamp/TBB-build] Error 1; make[1]: *** [CMakeFiles/TBB.dir/all] Error 2; make: *** [all] Error [2](url); ```; with:; ```; unknown/unsupported architecture name for: -arch armv4t; ```. ### Available patch; https://github.com/oneapi-src/oneTBB/pull/258. ### Setup; ROOT on MacOS M1,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6903:872,log,log,872,https://root.cern,https://github.com/root-project/root/issues/6903,1,['log'],['log']
Testability,"- [x] Checked for duplicates. ### Describe the bug; Cling symbol `cling::runtime::internal::LifetimeHandler` may need to be explicitly exported from shared library on windows. Define a function with function call (`sqrt` in my scenario) in interactive mode.; Use it to initialize a `TF1`; nightly 6.27.01 outputs following:; (6.26.00 release crash immediately); ```; IncrementalExecutor::executeFunction: symbol '??0LifetimeHandler@internal@runtime@cling@@QAE@PAVDynamicExprInfo@123@PAVDeclContext@clang@@PBDPAVInterpreter@3@@Z' unresolved while linking function '_GLOBAL__sub_I_cling_module_16'!; You are probably missing the definition of public: __thiscall cling::runtime::internal::LifetimeHandler::LifetimeHandler(class cling::runtime::internal::DynamicExprInfo *,class clang::DeclContext *,char const *,class cling::Interpreter *); Maybe you need to load the corresponding shared library?; IncrementalExecutor::executeFunction: symbol '??1LifetimeHandler@internal@runtime@cling@@QAE@XZ' unresolved while linking function '_GLOBAL__sub_I_cling_module_16'!; You are probably missing the definition of public: __thiscall cling::runtime::internal::LifetimeHandler::~LifetimeHandler(void); Maybe you need to load the corresponding shared library?; ```; Then call `TF1::Draw()` on it (if 6.27.01), and see interpreter dump stacktrace. Problem not present in script mode. Compiling with `.L test.cpp+` fails, but that seems irrelevant. Without `sqrt` math function interpreter works (function returing 0 immediately).; ### Expected behavior; `TF1` initialized with function pointer. ### To Reproduce; Detailed in description section. ### Setup; root nightly 6.27.01 32 bit and 64 bit; root release 6.26.00 32 bit; windows 64 bit os; installed from [nightly repo](https://root.cern/download/nightly/) and the release page binary. ### Additional context; Should be enough.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10452:1390,test,test,1390,https://root.cern,https://github.com/root-project/root/issues/10452,1,['test'],['test']
Testability,"- [x] Checked for duplicates. ### Describe the bug; During compilation, I get the following error:; ```; [6/20] Running utility command for SofieCompileModels_PyTorch; Torch Version: 1.7.0; RecursiveScriptModule(; original_name=Model; (fc1): RecursiveScriptModule(original_name=Linear); (relu): RecursiveScriptModule(original_name=ReLU); ); RecursiveScriptModule(; original_name=Model; (fc1): RecursiveScriptModule(original_name=Linear); (relu): RecursiveScriptModule(original_name=ReLU); ); libc++abi: terminating with uncaught exception of type std::runtime_error: TMVA::SOFIE - Parsing PyTorch node onnx::Shape is not yet supported ; /bin/sh: line 1: 21308 Abort trap: 6 ./emitFromPyTorch; ```. ### Expected behavior; I expect this to just compile. I believe the problem may lie with the PyTorch version I had installed, 1.7.0. CMake should detect the version and disable incompatible tests. Indeed, installing PyTorch 1.9.1 makes the problem go away. ### To Reproduce; Install PyTorch 1.7.0 with conda or pip, make sure it's in your PATH so CMake detects it, and build the `SofieCompileModels_PyTorch` target. ### Setup; 1. ROOT version: master; 2. Operating system: macOS 11.6; 3. How you obtained ROOT: built it myself",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9079:888,test,tests,888,https://root.cern,https://github.com/root-project/root/issues/9079,1,['test'],['tests']
Testability,"- [x] Checked for duplicates. ### Describe the bug; I have a PDF class implemented in C++ that I want to use in a python script through `ROOT.gSystem.CompileMacro()`. It is unreasonably slow to load each time, O(minutes). When running with `""kO""` option it is better, but still long - too long for normal usage - whereas it should be instantaneous, if I understand correctly. I have tested ROOT 6.22 and with nightlies, and nightlies are even slower. The time for a first compilation, so how long it's processing the line `Info in <TUnixSystem::ACLiC>: creating shared library /afs/cern.ch/user/t/tnanut/public/Stephan/RooThreshold_cpp.so`, for running a script and directly the CompileMacro command in ipython:; | Version | py file | ipython |; | --- | --- | --- |; |Nightlies | 3m25s | 1m55s |; |6.22 | 1m35s | 1m05s|. The run time with `""kO""` option for the 2nd iteration of running, once binaries are created:; | Version | py file |; | --- | --- | ; |Nightlies | 1m15s | ; |6.22 | 0m30s | . All above times are on same lxplus machine. Between different lxplus machines the timing changes, but at best e.g from 30s down to 20s. Another test for how much time has elapsed e.g.:; ```sh; for version in /cvmfs/sft.cern.ch/lcg/views/LCG_99/x86_64-centos7-gcc10-opt/setup.sh /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/latest/x86_64-centos7-gcc9-opt/setup.sh ; do (; source $version;; echo $version;; root --version -q; /usr/bin/time python3 -c ""import ROOT; ROOT.gSystem.CompileMacro('~tnanut/public/Stephan/RooThreshold.cpp', 'fO')"" 2>&1 | grep user.*system;; /usr/bin/time python3 -c ""import ROOT; ROOT.gSystem.CompileMacro('~tnanut/public/Stephan/RooThreshold.cpp', 'fO')"" 2>&1 | grep user.*system;; /usr/bin/time python3 -c ""import ROOT; ROOT.gSystem.CompileMacro('~tnanut/public/Stephan/RooThreshold.cpp', 'O')"" 2>&1 | grep user.*system); done; ```. Output:; ```; /cvmfs/sft.cern.ch/lcg/views/LCG_99/x86_64-centos7-gcc10-opt/setup.sh; ROOT Version: 6.22/06; Built for linuxx8664gcc on Nov 27 2020,",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7774:383,test,tested,383,https://root.cern,https://github.com/root-project/root/issues/7774,1,['test'],['tested']
Testability,"- [x] Checked for duplicates. ### Describe the bug; I see one small issue when saving a 600x600 TCanvas window as png. I get:; - Interactive mode: 598x571 pixels; - Batch mode: 596x572 pixels. ### Expected behavior; No pixel difference is found between running batch or not. Right now there is an offset of 1 up to 2 pixels. ### To Reproduce. ```cpp; void test() {; TCanvas *c = new TCanvas(""c1"",""c1"",600,600);; c->SaveAs(""c1.png"");; }; //root -l test.C -b -q; //root -l test.C -q; ```. ### Setup; ```; ------------------------------------------------------------------; | Welcome to ROOT 6.27/01 https://root.cern |; | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on Jan 11 2022, 18:39:08 |; | From heads/master@v6-25-01-2870-gdac9b6398d |; | With c++ (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0 |; | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11004:356,test,test,356,https://root.cern,https://github.com/root-project/root/issues/11004,3,['test'],['test']
Testability,"- [x] Checked for duplicates. ### Describe the bug; In commit 63aeb0d65d3817e805b0edee2ab7b8f4aa20a190 (master) and commit c3e69067256263bfd5287794b4444e20da5b0f57 (v6.22) the bindings/pyroot/pythonizations/test/ttree_branch_attr.py was extended to include an additional test. This test fails on Intel 32 bit Fedora Linux: The error is: symbol '__atomic_fetch_add_8' unresolved. It does not fail on any other Fedora architectures including 32 bit arm. Fedora koji scratch build: https://koji.fedoraproject.org/koji/taskinfo?taskID=55575382. ```; 50/1028 Test #11: pyunittests-pyroot-pyz-ttree-branch-attr ............................***Failed 1.24 sec; test_alias_branch (ttree_branch_attr.TTreeBranchAttr) ... ok; test_array_branch (ttree_branch_attr.TTreeBranchAttr) ... ok; test_basic_type_branch (ttree_branch_attr.TTreeBranchAttr) ... ok; test_char_array_branch (ttree_branch_attr.TTreeBranchAttr) ... ok; test_ntuples (ttree_branch_attr.TTreeBranchAttr) ... ok; test_struct_branch (ttree_branch_attr.TTreeBranchAttr) ... ok; test_struct_branch_leaflist (ttree_branch_attr.TTreeBranchAttr) ... ok; test_ttree_subclass_in_namespace (ttree_branch_attr.TTreeBranchAttr) ... IncrementalExecutor::executeFunction: symbol '__atomic_fetch_add_8' unresolved while linking symbol '__cf_16'!; ERROR; test_vector_branch (ttree_branch_attr.TTreeBranchAttr) ... ok; ======================================================================; ERROR: test_ttree_subclass_in_namespace (ttree_branch_attr.TTreeBranchAttr); ----------------------------------------------------------------------; Traceback (most recent call last):; File ""/builddir/build/BUILD/root-6.22.04/bindings/pyroot/pythonizations/test/ttree_branch_attr.py"", line 139, in test_ttree_subclass_in_namespace; t = ROOT.Foo.MyTree(); TypeError: Foo::MyTree constructor failed; ----------------------------------------------------------------------; Ran 9 tests in 0.509s; FAILED (errors=1); CMake Error at /builddir/build/BUILD/root-6.22.04/cmake/mod",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6813:207,test,test,207,https://root.cern,https://github.com/root-project/root/issues/6813,4,"['Test', 'test']","['Test', 'test']"
Testability,"- [x] Checked for duplicates. ### Describe the bug; It seems that in pyROOT, the NLL variable created from `RooAbsPdf.createNLL` does not get disposed of properly when the variable went out of scope, causing a memory leak. ### To Reproduce; ```Python; import ROOT. ROOT.RooMsgService.instance().getStream(1).removeTopic(ROOT.RooFit.Minimization). ws = ROOT.RooWorkspace(); ws.factory(""Gaussian::pdf(x[0,10],mu[4,0,10],sigma[1.0,0.1,10.0])""); pdf = ws.pdf(""pdf""); x = ws.var(""x""); x.setRange(""SideBandLo"", 0, 2); x.setRange(""SideBandHi"", 6, 10); ds = pdf.generate(ROOT.RooArgSet(x), 11000). import psutil. def _memstat(mem0, mem1):; MB = 1024 * 1024; rss_mb = mem1.rss // MB; vms_mb = mem1.vms // MB; rss_delta_mb = (mem1.rss - mem0.rss) / MB; vms_delta_mb = (mem1.vms - mem0.vms) / MB; print(f""Memory stat: RSS={rss_mb} MB, VMS={vms_mb} MB. Delta RSS={rss_delta_mb:.2f} MB VMS={vms_delta_mb:.2f} MB""); ; def test(pdf, ds):; nll = pdf.createNLL(ds); ; proc = psutil.Process(); mem0 = proc.memory_info(); for i in range(int(1e4)):; test(pdf, ds); if (i%1000 == 0):; mem1 = proc.memory_info(); _memstat(mem0, mem1); mem0 = mem1; ```. This gives. ```; Memory stat: RSS=4009 MB, VMS=5170 MB. Delta RSS=0.00 MB VMS=0.00 MB; Memory stat: RSS=4116 MB, VMS=5278 MB. Delta RSS=107.25 MB VMS=107.15 MB; Memory stat: RSS=4224 MB, VMS=5386 MB. Delta RSS=108.02 MB VMS=108.10 MB; Memory stat: RSS=4333 MB, VMS=5495 MB. Delta RSS=109.05 MB VMS=109.21 MB; Memory stat: RSS=4439 MB, VMS=5601 MB. Delta RSS=106.48 MB VMS=106.48 MB; Memory stat: RSS=4547 MB, VMS=5709 MB. Delta RSS=108.02 MB VMS=107.85 MB; Memory stat: RSS=4656 MB, VMS=5820 MB. Delta RSS=109.05 MB VMS=110.36 MB; Memory stat: RSS=4764 MB, VMS=5927 MB. Delta RSS=108.02 MB VMS=107.75 MB; Memory stat: RSS=4872 MB, VMS=6035 MB. Delta RSS=108.02 MB VMS=107.95 MB; Memory stat: RSS=4979 MB, VMS=6144 MB. Delta RSS=106.81 MB VMS=108.52 MB; ```. ### Setup; ROOT 6.24, 6.26 (from LCG)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11397:908,test,test,908,https://root.cern,https://github.com/root-project/root/issues/11397,2,['test'],['test']
Testability,"- [x] Checked for duplicates. ### Describe the bug; Opening a file containing a `TTree` and then typing a syntax error at the same time as reading the tree (i.e. using the name of the `TKey` to access it) triggers the `Must not nest within unloading transaction` assert and terminates `root.exe`. . ### Expected behavior; Interpreter recovers. . ### To Reproduce; #### Prepare a file; ```; $ root -l; root [0] TFile *file = new TFile(""foo.root"", ""RECREATE"");; root [1] TTree *foo = new TTree(""t"",""t"");; root [2] foo->Write(); root [3] file->Close(); root [4] .q; ```; Open the file and read the tree in conjunction with a syntax error:; ```; $ root -l foo.root ; root [0] ; Attaching file foo.root as _file0...; (TFile *) 0x55f9f7a3e860; root [1] t->Print(=); ROOT_prompt_1:1:10: error: expected expression; t->Print(=); ^; ROOT_prompt_1:1:11: error: expected expression; t->Print(=); ^; root.exe: /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/interpreter/cling/lib/Interpreter/Transaction.cpp:98: void cling::Transaction::addNestedTransaction(cling::Transaction*): Assertion `!m_Unloading && ""Must not nest within unloading transaction""' failed.; ```; ROOT terminates. . Note that when issuing a correct command first, the interpreter recovers fine:; ```; $ root -l foo.root ; root [0] ; Attaching file foo.root as _file0...; (TFile *) 0x55f9f7a3e860; root [1] t->Print(); .... correct output ...; root [2] t->Print(=); ROOT_prompt_2:1:10: error: expected expression; t->Print(=); ^; ROOT_prompt_2:1:11: error: expected expression; t->Print(=); ^; root [3]; ```. So the issue seems to happen when an object is not yet in memory, but implicitly read from disk by being accessed via the name of the `TKey`. . ### Setup; 1. ROOT version: 6.26/08; 2. Operating system: Gentoo Linux; 3. How you obtained ROOT: `emerge root` (i.e. via package manager).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11651:263,assert,assert,263,https://root.cern,https://github.com/root-project/root/issues/11651,2,"['Assert', 'assert']","['Assertion', 'assert']"
Testability,"- [x] Checked for duplicates. ### Describe the bug; ROOT 6.26/04 (https://github.com/root-project/root/tree/02b2af7af1be3430a3124236a7cdc6bb13cf90d2) fails to build with LLVM/Clang 14.0.6 with the following error from `rootcling`:. ```{Console}; [7221/9777] Generating G__Core.cxx, ../lib/Core.pcm; FAILED: core/G__Core.cxx lib/Core.pcm ...; <snip/>; rootcling_stage1: /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/interpreter/llvm/src/tools/clang/lib/Serialization/ASTWriter.cpp:2799: unsigned int clang::ASTWriter::getSubmoduleID(clang::Module *): Assertion `(ID || !Mod) && ""asked for module ID for non-local, non-imported module""' failed.; #0 0x0000000003ee5514 PrintStackTraceSignalHandler(void*) Signals.cpp:0:0; #1 0x0000000003ee32cc llvm::sys::RunSignalHandlers() Signals.cpp:0:0; #2 0x0000000003ee5935 SignalHandler(int) Signals.cpp:0:0; #3 0x00007f1552225630 __restore_rt sigaction.c:0:0; #4 0x00007f1551316387 raise (/lib64/libc.so.6+0x36387); #5 0x00007f1551317a78 abort (/lib64/libc.so.6+0x37a78); #6 0x00007f155130f1a6 __assert_fail_base (/lib64/libc.so.6+0x2f1a6); #7 0x00007f155130f252 (/lib64/libc.so.6+0x2f252); #8 0x0000000001d23bf3 clang::ASTWriter::WriteSubmodules(clang::Module*) ASTWriter.cpp:0:0; #9 0x0000000001d34a01 clang::ASTWriter::WriteASTCore(clang::Sema&, llvm::StringRef, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*) ASTWriter.cpp:0:0; #10 0x0000000001d31700 clang::ASTWriter::WriteAST(clang::Sema&, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*, llvm::StringRef, bool, bool) ASTWriter.cpp:0:0; #11 0x0000000001d7f347 clang::PCHGenerator::HandleTranslationUnit(clang::ASTContext&) GeneratePCH.cpp:0:0; #12 0x0000000001a4269c clang::MultiplexConsumer::HandleTranslationUnit(clang::ASTContext&) MultiplexConsumer.cpp:0:0; #13 0x0000000001ba6284 clang::ParseAST(clang::Sema&, bool, bool) ParseAST.cpp:0:0; #14 0x00000000019f9",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10861:385,test,test-products,385,https://root.cern,https://github.com/root-project/root/issues/10861,2,"['Assert', 'test']","['Assertion', 'test-products']"
Testability,"- [x] Checked for duplicates. ### Describe the bug; TASImage::FromPad + TASImage::Flip does not work in batch mode, no matter the rotation angle. ### Expected behavior; It should work also in batch mode. ### To Reproduce; Run the code in batch mode below to get a black output. Comment the line `Flip(0)` and you'll get the correct output.; ```cpp; void test(); {; TCanvas *c1 = new TCanvas(""c1"",""c1"",600,600);; TH1F *h = new TH1F(""gaus"",""gaus"", 100, -5, 5);; h->FillRandom(""gaus"", 10000);; h->Draw();; c1->Update();. TCanvas *c2 = new TCanvas(""c2"",""c1 rotated"",600,600);; TASImage *img = new TASImage();; img->FromPad(c1);; img->Flip(0);; img->Mirror();; img->Draw(""x"");; c2->Print(""c2.png"");; }; ```. ### Setup; ```; ------------------------------------------------------------------; | Welcome to ROOT 6.27/01 https://root.cern |; | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on Apr 25 2022, 22:21:18 |; | From heads/master@v6-25-01-3897-gf39eb0e984 |; | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |; | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------; ```. ### Additional context; https://root-forum.cern.ch/t/bug-of-tasimage-when-use-tasimage-flip/50827/; https://root-forum.cern.ch/t/timage-rendered-in-black-in-batch-not-in-interactive-mode/16781",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10996:354,test,test,354,https://root.cern,https://github.com/root-project/root/issues/10996,1,['test'],['test']
Testability,"- [x] Checked for duplicates. ### Describe the bug; TClassEdit reads behind the end of a static string to find the type of an STL container.; This breaks address sanitizer builds, because asan immediately stops at the invalid read when rootcling runs. ### Expected behavior; It shouldn't read after the end of the string. ### To Reproduce; Apply this patch:; ```; --- a/core/foundation/src/TClassEdit.cxx; +++ b/core/foundation/src/TClassEdit.cxx; @@ -13,6 +13,7 @@; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ; +#include <array>; #include <cstdio>; #include <cstdlib>; #include <cassert>; @@ -557,7 +558,9 @@ ROOT::ESTLType TClassEdit::STLKind(std::string_view type); ; int TClassEdit::STLArgs(int kind); {; - static const char stln[] =// min number of container arguments; + constexpr int nKind = 14;; + assert(kind < nKind);; + static constexpr std::array<char, nKind> stln = // min number of container arguments; // vector, list, deque, map, multimap, set, multiset, bitset,; { 1, 1, 1, 1, 3, 3, 2, 2, 1,; // forward_list, unordered_set, unordered_multiset, unordered_map, unordered_multimap; ```. Then build in debug mode. The assertion will fail when RVec shows up in this function, since it is not an STL container. ### Setup; master. Sorry, I didn't check which other versions are affected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7903:902,assert,assert,902,https://root.cern,https://github.com/root-project/root/issues/7903,2,['assert'],"['assert', 'assertion']"
Testability,"- [x] Checked for duplicates. ### Describe the bug; The `root-config` script fails in several ways when located in a `PATH` containing spaces. . ### Expected behavior; No errors when there are spaces in the path. . ### To Reproduce; ```; mkdir foo\ bar; cd foo\ bar; wget https://root.cern/download/root_v6.26.04.Linux-ubuntu18-x86_64-gcc7.5.tar.gz; tar xf root_v6.26.04.Linux-ubuntu18-x86_64-gcc7.5.tar.gz; source root/bin/thisroot.sh ; /home/me/foo bar/root/bin/root-config: line 26: [: too many arguments; /home/me/foo bar/root/bin/root-config: line 26: [: too many arguments; /home/me/foo bar/root/bin/root-config: line 31: [: too many arguments; ```; It also affects other output (as expected):; ```; $ root-config --incdir ; /home/me/foo bar/root/bin/root-config: line 26: [: too many arguments; /home/me/foo bar/root/bin/root-config: line 26: [: too many arguments; /home/me/foo bar/root/bin/root-config: line 31: [: too many arguments; /home/me ./include; ```; and:; ```; $ root-config --version; /home/me/foo bar/root/bin/root-config: line 26: [: too many arguments; /home/me/foo bar/root/bin/root-config: line 26: [: too many arguments; /home/me/foo bar/root/bin/root-config: line 31: [: too many arguments; /home/me/foo bar/root/bin/root-config: line 553: test: /home/me: binary operator expected; cannot read /home/me; ./include/RVersion.h; ```. ### Setup; 1. ROOT: versions: seen with 6.14, 6.26, likely others; 2. Operating system: any Linux-based system (seen with Ubuntu in WSL, Gentoo). ### Additional context; While spaces in paths are always nasty, this case was reported by a student of mine (who extracted the tarball in a subdirectory with spaces).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10759:1267,test,test,1267,https://root.cern,https://github.com/root-project/root/issues/10759,1,['test'],['test']
Testability,"- [x] Checked for duplicates. ### Describe the bug; We are [testing](https://github.com/cms-sw/cmsdist/pull/8020) latest [ROOT changes](https://github.com/root-project/root/compare/cd992545ae...6018b5fd45) in CMSSW, and we are getting the following build error:; ```; from /data/cmsbld/jenkins/workspace/ib-run-pr-tests/CMSSW_12_5_ROOT6_X_2022-08-14-2300/src/PhysicsTools/Utilities/interface/RooFitFunction.h:3,; from /data/cmsbld/jenkins/workspace/ib-run-pr-tests/CMSSW_12_5_ROOT6_X_2022-08-14-2300/src/PhysicsTools/Utilities/test/testRooFitFunction.cpp:1:; /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc10/external/gcc/10.3.0-84898dea653199466402e67d73657f10/include/c++/10.3.0/bits/stl_pair.h: In instantiation of 'constexpr std::pair::type>::__type, typename std::__strip_reference_wrapper::type>::__type> std::make_pair(_T1&&, _T2&&) [with _T1 = std::shared_ptr; _T2 = RooTemplateProxy; typename std::__strip_reference_wrapper::type>::__type = RooTemplateProxy; typename std::__strip_reference_wrapper::type>::__type = std::shared_ptr]':; /data/cmsbld/jenkins/workspace/ib-run-pr-tests/CMSSW_12_5_ROOT6_X_2022-08-14-2300/src/PhysicsTools/Utilities/interface/RooFitFunction.h:56:37: required from 'root::RooFitFunction::RooFitFunction(const char*, const char*, const Expr&, RooAbsReal&, RooAbsReal&, funct::Parameter&, RooAbsReal&, funct::Parameter&, RooAbsReal&, funct::Parameter&) [with X = funct::X; Expr = funct::Expression]'; /data/cmsbld/jenkins/workspace/ib-run-pr-tests/CMSSW_12_5_ROOT6_X_2022-08-14-2300/src/PhysicsTools/Utilities/test/testRooFitFunction.cpp:30:77: required from here; /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc10/external/gcc/10.3.0-84898dea653199466402e67d73657f10/include/c++/10.3.0/bits/stl_pair.h:572:14: error: no matching function for call to 'std::pair, RooTemplateProxy >::pair(std::shared_ptr, RooTemplateProxy)'; 572 | return __pair_type(std::forward<_T1>(__x), std::forward<_T2>(__y));; | ^~~~~~~~~~~~",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11188:60,test,testing,60,https://root.cern,https://github.com/root-project/root/issues/11188,8,['test'],"['test', 'testBuildDir', 'testRooFitFunction', 'testing', 'tests']"
Testability,"- [x] Checked for duplicates. ### Describe the bug; We encounter a crash during dictionary creation via rootcling when building a specific package against the [ATLAS offline software -- Athena](https://gitlab.cern.ch/atlas/athena/).; The package can be accessed in this public [gitlab repository](https://gitlab.cern.ch/tdado/publiccustomeventsaver). Essentially, the package contains classes which derive from base classes within the Athena software repository, and we need to create dictionary for this package. ### Expected behavior; Build should succeed with dictionary creation. ### To Reproduce; We've been unable trigger this with a simple minimal example. I am attaching instead the log from the build, which contains the crash. [build_log_err.txt](https://github.com/root-project/root/files/6626012/build_log_err.txt). The following classes in the package are leading to the crash:; https://gitlab.cern.ch/tdado/publiccustomeventsaver/-/blob/master/HowtoExtendAnalysisTop/CustomEventSaver.h; https://gitlab.cern.ch/atlasphys-top/reco/howtoextendanalysistop/-/blob/master/HowtoExtendAnalysisTop/DynamicKeysEventSaver.h; Both of them derive from base class in athena:; https://gitlab.cern.ch/atlas/athena/-/blob/master/PhysicsAnalysis/TopPhys/xAOD/TopAnalysis/TopAnalysis/EventSaverFlatNtuple.h. ### Setup; <!--; 1. ROOT 6.24; 2. CentOS7; 3. CERN LCG builds, gcc8.; -->. [build_log_err.txt](https://github.com/root-project/root/files/6626012/build_log_err.txt)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8387:691,log,log,691,https://root.cern,https://github.com/root-project/root/issues/8387,1,['log'],['log']
Testability,"- [x] Checked for duplicates. ### Describe the bug; When building CMS offline software stack with the ROOT commit 6f02c75fea, we get the following errors:; ```; /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc11/lcg/root/6.29.01-8b1fb99c2f98c5fc80c3d3abd70c9452/etc/cling/std.modulemap:497:10: error: module 'std.bits/uses_allocator_args.h' requires feature 'cplusplus20'; module ""bits/uses_allocator_args.h"" {; ^; /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc11/external/gcc/11.2.1-f9b9dfdd886f71cd63f5538223d8f161/include/c++/11.2.1/memory_resource:42:10: note: submodule of top-level module 'std' implicitly imported here; #include // uninitialized_construct_using_alloc; ^; ```. ```; python3: /(...)/lcg/root/6.29.01-8b1fb99c2f98c5fc80c3d3abd70c9452/root-6.29.01/interpreter/llvm/src/tools/clang/lib/AST/DeclCXX.cpp:1499: clang::NamedDecl* getLambdaCallOperatorHelper(const clang::CXXRecordDecl&): Assertion `!Calls.empty() && ""Missing lambda call operator!""' failed.; *** Break *** abort; ```. We have previously tested ROOT commit 0bd51969ce, and did not get these errors. ### Expected behavior; No build errors. ### Setup; ROOT 6.29.01 / 6f02c75fea on AlmaLinux 8, built from source (gcc 11.2)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12240:202,test,tests,202,https://root.cern,https://github.com/root-project/root/issues/12240,6,"['Assert', 'test']","['Assertion', 'testBuildDir', 'tested', 'tests']"
Testability,"- [x] Checked for duplicates. ### Describe the bug; When compiling with GCC c++ 4.8.5, GoogleTest fails to build. A sample of messages:. ```; In file included from /user/pbos/project_atlas/root-20211202/cmake-build-release/googletest-prefix/src/googletest/googletest/include/gtest/internal/gtest-death-test-internal.h:39:0,; from /user/pbos/project_atlas/root-20211202/cmake-build-release/googletest-prefix/src/googletest/googletest/include/gtest/gtest-death-test.h:41,; from /user/pbos/project_atlas/root-20211202/cmake-build-release/googletest-prefix/src/googletest/googletest/include/gtest/gtest.h:64,; from /user/pbos/project_atlas/root-20211202/cmake-build-release/googletest-prefix/src/googletest/googletest/src/gtest-all.cc:38:; /user/pbos/project_atlas/root-20211202/cmake-build-release/googletest-prefix/src/googletest/googletest/include/gtest/gtest-matchers.h: In static member function ‘static constexpr bool testing::internal::MatcherBase<T>::IsInlined()’:; /user/pbos/project_atlas/root-20211202/cmake-build-release/googletest-prefix/src/googletest/googletest/include/gtest/gtest-matchers.h:414:12: error: ‘is_trivially_copy_constructible’ is not a member of ‘std’; std::is_trivially_copy_constructible<M>::value &&; ^; /user/pbos/project_atlas/root-20211202/cmake-build-release/googletest-prefix/src/googletest/googletest/include/gtest/gtest-matchers.h:414:50: error: expected primary-expression before ‘>’ token; std::is_trivially_copy_constructible<M>::value &&; ^; /user/pbos/project_atlas/root-20211202/cmake-build-release/googletest-prefix/src/googletest/googletest/include/gtest/gtest-matchers.h:414:51: error: ‘::value’ has not been declared; std::is_trivially_copy_constructible<M>::value &&; ^; ```; There is more, but I think this already indicates that one of the issues is the GCC version, since `is_trivially_copy_constructible` is available from GCC 5. ### Expected behavior; CMake should not configure successfully on GCC versions below 5 when configuring with `-Dtesting=",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9370:302,test,test-internal,302,https://root.cern,https://github.com/root-project/root/issues/9370,3,['test'],"['test', 'test-internal', 'testing']"
Testability,"- [x] Checked for duplicates. ### Describe the bug; When using AddressSanitizer compiler flag, i.e. -fsanitize=address and when RooMinimizer is called multiple times (in a loop) to minimize a result of createNLL(), the sanitizer throws an error of type AddressSanitizer: alloc-dealloc-mismatch (malloc vs operator delete). ### Expected behavior; This error should not appear as it points to wrong memory handling. ### To Reproduce; A minimum example is provided in the following gitlab repository: https://gitlab.cern.ch/tdado/roominimizerasanexample. 1. Clone the repository; 2. run ""make""; 3. run the code with ./example . ### Setup; 1. Tested with ROOT 6.22.02 and 6.22.06; 2. Ubuntu (22.02) and CENTOS7 - lxplus (22.06); 3. ROOT installed from LCG (lxplus) or/and using the precombined binary (ubuntu). ### Additional context; The error does not appear if the minimizer is called only once.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8946:639,Test,Tested,639,https://root.cern,https://github.com/root-project/root/issues/8946,1,['Test'],['Tested']
Testability,"- [x] Checked for duplicates. ### Describe the bug; When using TH1::Draw(""P*""), the PNG and PDF output looks fine, but the markers are invisible in the TEX output. ![image](https://user-images.githubusercontent.com/10653970/137940738-13f9dee9-53c5-4984-964f-ce9740e4d681.png). ### Expected behavior; Markers are visible in TEX also. ### To Reproduce; from ROOT import TCanvas, TH1D; ```; c = TCanvas(); h = TH1D(""h"", ""h"", 10,0,10); h.SetBinContent(2,10); h.Draw(""P*""); c.SaveAs(""test.png""); c.SaveAs(""test.pdf""); c.SaveAs(""test.tex""); ```; and then compile the latex output using:. ```; \documentclass{standalone}; \usepackage{tikz}; \begin{document}; \input{test.tex}; \end{document}; ```. ### Setup; ```; ------------------------------------------------------------------; | Welcome to ROOT 6.25/01 https://root.cern |; | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on Sep 01 2021, 23:19:42 |; | From heads/master@v6-25-01-1861-g6b33e04cac |; | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |; | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------; ```. ### Additional context; https://sft.its.cern.ch/jira/browse/ROOT-8587",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9143:479,test,test,479,https://root.cern,https://github.com/root-project/root/issues/9143,4,['test'],['test']
Testability,"- [x] Checked for duplicates. ### Describe the bug; Windows running on non utf-8 code page will see scramble text for non-ascii folders and files in the current new html `TBrowser` implementation, and fails selection and opening. Older `TRootBrowser` did not have this issue but does not support 64 bit on windows. ### Expected behavior; TBrowser can see files and folders, select files and folders normally. ### To Reproduce; Used non-ascii windows system (should already have some non-ascii text in filesystem already), install root. ### Setup; 1. ROOT version: 6.26/06; 2. Operating system: Windows; 3. How you obtained ROOT binary: download from cern site. ### Additional context; Should be self explanatory. ### Suggested fix:; A post-build step should fix this on newer windows systems, as this documentation says:; https://learn.microsoft.com/en-us/windows/apps/design/globalizing/use-utf8-code-page. Tested and works on my machine. Related forum topic:; https://root-forum.cern.ch/t/tbrowser-non-ascii-text-scrambles-on-windows/51899",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11519:908,Test,Tested,908,https://root.cern,https://github.com/root-project/root/issues/11519,1,['Test'],['Tested']
Testability,"- [x] Checked for duplicates. ### Describe the bug; ```; [ 1675s] [100%] Generating tutorials/hsimple.root; [ 1675s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/tutorials && LD_LIBRARY_PATH=/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/lib: ROOTIGNOREPREFIX=1 ROOT_HIST=0 /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/bin/root.exe -l -q -b -n -x hsimple.C -e return; [ 1675s] ; [ 1675s] Processing hsimple.C...; [ 1675s] root.exe: /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include/llvm/IR/User.h:216: void llvm::User::setNumHungOffUseOperands(unsigned int): Assertion `HasHungOffUses && ""Must have hung off uses to use this method""' failed.; ```. The `HasHungOffUses` member is initialized in the overloaded `clang::User::operator new`, which may trigger undefined behavior. See e.g.:. https://github.com/llvm/llvm-project/issues/47560; https://stackoverflow.com/questions/34892732/error-when-call-createphi-in-llvm. ### Expected behavior; Builtin libLLVM works correctly. Though this is an LLVM upstream issue, either force-disabling LTO, or adding a CMake option to pass this down to the LLVM build (similar to `LLVM_BUILD_TYPE`) might be an option. ### To Reproduce; CXXFLAGS=... -O2 -flto=auto; cmake -B _builddir -S .. && make. ### Setup; 1. ROOT version: 6.26.06; 2. openSUSE Tumbleweed; 3. build from source",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11135:598,Assert,Assertion,598,https://root.cern,https://github.com/root-project/root/issues/11135,1,['Assert'],['Assertion']
Testability,"- [x] Checked for duplicates. `TCling::UpdateListOfLoadedSharedLibraries()` iterates through the linked list of dynamic libraries maintained by glibc and saves a pointer into the middle of the list:. https://github.com/root-project/root/blob/49c45b3291c71ffc7f603ae4267f112fdaf77ac4/core/metacling/src/TCling.cxx#L3285-L3290. This is a linked list that can be modified by the activity of other threads, so access to it needs to be protected by a glibc internal `dl_load_write_lock`. glibc provides an interface for this purpose, `dl_iterate_phdr(3)`:. https://linux.die.net/man/3/dl_iterate_phdr. which should be used instead of iterating through the list without the appropriate locking. This bug is not trivial to reproduce, but is believed to be responsible for crashes observed in CMS relval tests https://github.com/cms-sw/cmssw/issues/30359",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6797:796,test,tests,796,https://root.cern,https://github.com/root-project/root/issues/6797,1,['test'],['tests']
Testability,"- [x] Checked for duplicates: seems to be similar to #10522 but this is unrelated to complex numbers. ### Describe the bug. Trying to declare a `std::vector<const char*>` from python fails in ROOT 6.26 (also tested in master) with:; ```; In [1]: import ROOT. In [2]: ROOT.gROOT.GetVersion(); Out[2]: '6.26/00'. In [3]: ROOT.gInterpreter.Declare('std::vector<const char*> test = {""hello""};'); Out[3]: True. In [4]: ROOT.test; Error pythonizing class std::vector<const char*>:; Traceback (most recent call last):; File ""/cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_pythonization/__init__.py"", line 233, in _invoke ; user_pythonizor(klass, fqn); File ""/cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_pythonization/_stl_vector.py"", line 37, in pythonize_stl_vector ; if klass.value_type == 'char':; AttributeError: <class cppyy.gbl.std.vector<const char*> at 0x78c6370> has no attribute 'value_type'. Full details:; type object 'vector<const char*>' has no attribute 'value_type'; 'std::vector<const char*>::value_type' is not a known C++ class; 'value_type' is not a known C++ template; 'value_type' is not a known C++ enum; ---------------------------------------------------------------------------; AttributeError Traceback (most recent call last); <ipython-input-4-9dea63bfe1b1> in <module>; ----> 1 ROOT.test. /cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_facade.py in _fallback_getattr(self, name); 193 if res:; 194 return res; --> 195 raise AttributeError(""Failed to get attribute {} from ROOT"".format(name)); 196; 197 def _finalSetup(self):. AttributeError: Failed to get attribute test from ROOT; ```. Creating the object directly from python does not work either:; ```; In [5]: t = ROOT.std.vector[""const char*""]([""hello""]); ---------------------------------------------------------------------------; TypeError Traceback (most recent call last); <ipython-input-5-fac447a0dff2> in <module>; ----> 1 t = ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11581:208,test,tested,208,https://root.cern,https://github.com/root-project/root/issues/11581,3,['test'],"['test', 'tested']"
Testability,"- [x] Checked for duplicates; ### Describe the bug; If I try to build a TTreeIndex using a specific element of a (pointer to) vector stored in the tree (like `BuildIndex(""values[5]"")`) the expression is always evalued as 0. This happens both with `BuildIndex` and with the `TTreeIndex` constructor.; ### Expected behavior; The expression used in the creation of the index should access correctly the given element of the vector (as it does when using the same expression in the `TTree::Scan` function); ### To Reproduce; I have prepared a small macro that creates a tree with a minimal structure and show how the indexing fails: https://cernbox.cern.ch/s/JXlFpygmNVVrbjP; ### Setup; Tested with both root 6.26/08 and 5.34/25",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11883:683,Test,Tested,683,https://root.cern,https://github.com/root-project/root/issues/11883,1,['Test'],['Tested']
Testability,"- [x] Checked for duplicates; <!--; Please search in; * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue); * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT); for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"".; -->. ### Describe the bug. As reported at https://github.com/cms-sw/cmsdist/pull/6314#issuecomment-708839758; we now are getting error:; ```; An exception of category 'FatalRootError' occurred while; [0] Constructing the EventProcessor; [1] Constructing module: class=L2MuonProducer label='hltL2Muons'; Additional Info:; [a] Fatal Root Error: @SUB=TProtoClass::FindDataMember; data member with index 0 is not found in class tbb::internal::atomic_impl<unsigned long>; ```; due to some inconsistencies. ### Expected behavior; No error. ### To Reproduce; ```; scram p CMSSW_11_2_ROOT622_X_2020-10-15-1100; cd CMSSW_11_2_ROOT622_X_2020-10-15-1100/; cmsenv; runTheMatrix.py -l 11634.0; cd 11634.0_*; gdb --args cmsRun step2_DIGI_L1_DIGI2RAW_HLT.py; ```. ### Setup; ""the changes we are testing are root-project/root@d6156de...e4cd9d3 "". ### Additional context; <!--; Add any other context about the problem here.; -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6666:1136,test,testing,1136,https://root.cern,https://github.com/root-project/root/issues/6666,1,['test'],['testing']
Testability,"- [x] Checked for duplicates; <!--; Please search in; * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue); * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT); for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"".; -->. ### Describe the bug. In https://github.com/Homebrew/homebrew-core/pull/75166, macOS 10.14 and 10.15 can't build due to a signbit issue. . ### Expected behavior; <!--; A clear and concise description of what you expected to happen.; -->. Should build? :). ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->. I don't have a 10.14 or 10.15 machine to test on, if I did, this should do it:. ```bash; cd /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core; gh pr checkout 75166; brew install --build-from-source root; ```. ### Setup; <!--; 1. ROOT version; 2. Operating system; 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself.; -->. ROOT 6.24.00, macOS < 11, C++17 mode. ### Additional context; <!--; Add any other context about the problem here.; -->. Full error:. ```; While building module 'Core':; While building module 'std' imported from input_line_1:1:; In file included from <module-includes>:31:; In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/complex.h:28:; In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/ccomplex:20:; In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/complex:245:; /Applications/Xcode.app/Contents/Deve",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7881:941,test,test,941,https://root.cern,https://github.com/root-project/root/issues/7881,1,['test'],['test']
Testability,"- [x] Checked for duplicates; <!--; Please search in; * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue); * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT); for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"".; -->. ### Describe the bug. Trying to compile root 6.24r1 with binutils 2.36 or later fails if `builtin_afterImage=ON` with the following error. ```; CMake Error at .../root/AFTERIMAGE-prefix/src/AFTERIMAGE-stamp/AFTERIMAGE-build-RelWithDebInfo.cmake:49 (message):; Command failed: 2. 'make'. See also. .../root/AFTERIMAGE-prefix/src/AFTERIMAGE-stamp/AFTERIMAGE-build-*.log; ```. The mentioned logfiles show. ```; ar: libdeps specified more than once; make[5]: *** [libAfterImage.a] Error 1; ```. This is caused by a change to `ar` in [binutils 2.36](https://sourceware.org/git/gitweb.cgi?p=binutils-gdb.git;a=blob_plain;f=binutils/NEWS;hb=refs/tags/binutils-2_36) so that the ""previously unused modifier l"" now has a meaning. . The fix is quite simple, one can just replace `ar clq` in the AfterImage Makefile with `ar cq`, see for example a similar problem in tightvnc: https://www.mail-archive.com/debian-bugs-dist@lists.debian.org/msg1789948.html. ### Expected behavior. Expected behavior is to compile successfully . ### To Reproduce. You need a system with binutils 2.36 installed (can be easily installed in a local prefix). ### Setup. * Ubuntu 18.04, ; * GCC 10.2,; * ROOT 6.24rc1 from https://github.com/root-project/root/archive/v6-24-00-rc1.tar.gz; * Compilation using `-Dasimage=ON -Dbuiltin_afterimage=ON`. ### Additional context",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7558:725,log,log,725,https://root.cern,https://github.com/root-project/root/issues/7558,2,['log'],"['log', 'logfiles']"
Testability,"- [x] Checked for duplicates; <!--; Please search in; * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue); * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT); for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"".; -->. ### Describe the bug. While hunting for some other problem using address sanitizer our unit tests ran into a heap-buffer-overflow in `TSpline2`:. ```; Warning in <TH1::TH1>: nbins is <=0 - set to nbins = 1me left: 0 sec) ; Warning in <TH1::TH1>: nbins is <=0 - set to nbins = 1; =================================================================; ==903254==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x6020001549e0 at pc 0x7f530c576a66 bp 0x7ffc17738f20 sp 0x7ffc17738f18; READ of size 8 at 0x6020001549e0 thread T0; #0 0x7f530c576a65 in TMVA::TSpline2::Eval(double) const root/tmva/tmva/src/TSpline2.cxx:84; #1 0x7f530c3dd685 in TMVA::PDF::FillSplineToHist() root/tmva/tmva/src/PDF.cxx:539; #2 0x7f530c3de1e8 in TMVA::PDF::BuildSplinePDF() root/tmva/tmva/src/PDF.cxx:364; #3 0x7f530c3dfc62 in TMVA::PDF::BuildPDF(TH1 const*) root/tmva/tmva/src/PDF.cxx:299; #4 0x7f530be8247c in TMVA::MethodBase::CreateMVAPdfs() root/tmva/tmva/src/MethodBase.cxx:2220; #5 0x7f530beaaa67 in TMVA::MethodBase::TrainMethod() root/tmva/tmva/src/MethodBase.cxx:691; #6 0x7f530bd67bb7 in TMVA::Factory::TrainAllMethods() root/tmva/tmva/src/Factory.cxx:1173; #7 0x7f5311416107 in Belle2::MVA::TMVATeacher::trainFactory(TMVA::Factory&, TMVA::DataLoader&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const belle2/mva/methods/src/TMVA.cc:164; #8 0x7f5311418389 in Belle2::MVA::TMVATeacherClassification::train(Belle2::MVA::Dataset&) const belle2/mva/methods/src/TMVA.cc:303; #9 0x90859d in (anonymous namespace)::TMVATest_TMVAClassificationInterface_Test::TestBody() belle2/mva/methods/tests/test_TMVA.cc:153;",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8021:453,test,tests,453,https://root.cern,https://github.com/root-project/root/issues/8021,1,['test'],['tests']
Testability,"- [x] Checked for duplicates; <!--; Please search in; * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue); * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT); for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"".; -->. ### Describe the bug; <!--; A clear and concise description of what the wrong behavior is.; -->. Another incarnation of the ATLAS xAOD EDM overwhelming ROOT is at foot. :frowning: I was trying to understand the issue better before turning to you guys, but I feel that I would need to learn much more about LLVM/Cling to get further than what I'm willing to do... So... in a particular PyROOT test I encounter the following assertion in a debug build:. ```; (gdb) bt; #0 0x00007faf4a49d3d7 in raise () from /lib64/libc.so.6; #1 0x00007faf4a49eac8 in abort () from /lib64/libc.so.6; #2 0x00007faf4a4961a6 in __assert_fail_base () from /lib64/libc.so.6; #3 0x00007faf4a496252 in __assert_fail () from /lib64/libc.so.6; #4 0x00007faf409453d0 in clang::Sema::LookupQualifiedName (this=0x14ab0b0, R=..., LookupCtx=0x3035ca0, InUnqualifiedLookup=false); at /data/hdd-4tb/projects/ATLASG-1602/externals/build/AnalysisBaseExternals/src/ROOT/interpreter/llvm/src/tools/clang/lib/Sema/SemaLookup.cpp:2128; #5 0x00007faf40945d1b in clang::Sema::LookupQualifiedName (this=0x14ab0b0, R=..., LookupCtx=0x3035ca0, SS=...); at /data/hdd-4tb/projects/ATLASG-1602/externals/build/AnalysisBaseExternals/src/ROOT/interpreter/llvm/src/tools/clang/lib/Sema/SemaLookup.cpp:2364; #6 0x00007faf40b30acf in clang::Sema::CheckTypenameType (this=0x14ab0b0, Keyword=clang::ETK_Typename, KeywordLoc=..., QualifierLoc=..., II=..., IILoc=...); at /data/hdd-4tb/projects/ATLASG-1602/externals/build/AnalysisBaseExternals/src/ROOT/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplate.cpp:10051; #7 0x00007faf40c7d53d in clang::TreeTransform<(anonymous namespace)::TemplateI",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8578:753,test,test,753,https://root.cern,https://github.com/root-project/root/issues/8578,2,"['assert', 'test']","['assertion', 'test']"
Testability,"- [x] Checked for duplicates; <!--; Please search in; * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue); * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT); for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"".; -->. ### Describe the bug; <!--; A clear and concise description of what the wrong behavior is.; -->. The provided reproducer's ""bad"" test fails when the reproducer is built against a ROOT with `runtime_cxxmodules=ON` but passes when `runtime_cxxmodules=OFF`. Verified with 6.24/06 and 6.25/02. ### Expected behavior; <!--; A clear and concise description of what you expected to happen.; -->. Tests ""good,"" and ""bad"" should both pass. ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->. 1. Ensure you are using ROOT >= 6.24/00; 1. Ensure you are using CMake >= 3.22.0; 1. Execute the provided `runit` script to configure, build, and execute the tests. ### Setup; <!--; 1. ROOT version; 2. Operating system; 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself.; -->. 1. Problem verified on 6.24/06 and 6.25/02.; 2. SLF7.; 3. ROOT was compiled for UPS, configured using FNAL/art standard options. See attached ROOT build logs for details. ### Additional context; <!--; Add any other context about the problem here.; -->. The showstopper issue appears to be that when looking for information about `gallery::Event` (defined in an ""old-style"" dictionary rather than a C++ module), it mistakenly identifies the TMVA module as providing `Event` and never loads the dictionary containing the definition for `gallery::Event`. This issue does not occur if we look for the aliased `gal",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9583:490,test,test,490,https://root.cern,https://github.com/root-project/root/issues/9583,2,"['Test', 'test']","['Tests', 'test']"
Testability,"- [x] Checked for duplicates; <!--; Please search in; * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue); * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT); for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"".; -->. ### Describe the bug; <!--; A clear and concise description of what the wrong behavior is.; -->; I have a model containing a `RooRealSumPdf` which wraps a `RooAbsReal` with an analytical integral (I tested with `RooGaussModel` and `RooPolyVar`). One of the parameters of the `RooAbsReal` is a function of the actual fit parameter (a `RooProduct` containing a `RooRealVar` for example).; When using batchmode, in the computation of the integral of the `RooAbsReal` (which is internal to the `RooRealSumPdf`, since it overrides `analyticalIntegralWN`), the value of the transformed parameter is not synced with the changes of the `RooRealVar` it contains, leading to a wrong integral.; Inspecting the `RooFitDriver` contents shows that the dataMap entry corresponding to the transformed parameter has the correct value, it's just the integral which uses the wrong one. ### Expected behavior; <!--; A clear and concise description of what you expected to happen.; -->; Integral uses correct parameters. ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->; ```C++; void testIntegralDesync() {; using namespace RooFit;; RooRealVar x(""x"", """", 0, 1);; ; RooRealVar par(""par"", """", -0.005, -5, 5);; RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));; ; // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));; // RooRealSumPdf pdf(""pdf"", """", fn, RooConst(1));; ; RooGaussModel gm(""gm"", """", x, Roo",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11578:560,test,tested,560,https://root.cern,https://github.com/root-project/root/issues/11578,1,['test'],['tested']
Testability,"- [x] Checked for duplicates; <!--; Please search in; * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue); * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT); for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"".; -->. ### Describe the bug; <!--; A clear and concise description of what the wrong behavior is.; -->; In the current master, the interpolation that is implemented for code2 and for code3 are exactly the same. Code2: https://root.cern/doc/master/FlexibleInterpVar_8cxx_source.html#l00426; Code3: https://root.cern/doc/master/FlexibleInterpVar_8cxx_source.html#l00440. According to the comment for code3 this interpolation should implement ""a parabolic version of log-normal"" but a parabolic with linear extrapolation is implemented again (as for code2). Another small improvement/clarification (only related to a comment) could be made in this line: https://root.cern/doc/master/HistoToWorkspaceFactoryFast_8cxx_source.html#l00729. It states that a linear extrapolation is used for code4 but looking at the actual code an exponential extrapolation is implemented: https://root.cern/doc/master/FlexibleInterpVar_8cxx_source.html#l00455. The described issues also seem to be present in v6.18, v6.20 and v6.22 (I didn't check older releases).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7103:818,log,log-normal,818,https://root.cern,https://github.com/root-project/root/issues/7103,1,['log'],['log-normal']
Testability,"- [x] Checked for duplicates; <!--; Please search in; * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue); * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT); for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"".; -->. ### Describe the bug; <!--; A clear and concise description of what the wrong behavior is.; -->; It seems that to sample a N-dimensional vector, we need to call this method N times. See log file:; ```; for (int j = 0; j < 20000; j++) {; hzmodel.Sample(&flux_real[0]);; if(j<10); std::cout<<j<<"" ""<<flux_real[0]<<"" ""<<flux_real[1]<<"" ""<<flux_real[2]<<std::endl;; ```; output. ```; 1 5.73992 4.99711 4.88; 2 5.73992 4.99711 5.26624; 3 5.72944 4.99459 5.25179; 4 5.34123 4.99459 5.25179; 5 5.34123 4.96792 5.25179; 6 5.34123 4.96792 5.2696; 7 5.26477 4.99232 5.52042; 8 5.59451 4.99232 5.52042; 9 5.59451 5.04631 5.52042; ```. ### Expected behavior; <!--; A clear and concise description of what you expected to happen.; -->; By calling `SampleMulti`, all components should be randomized. ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->; try [ROOT tutorial](https://root.cern/doc/master/unuranDemo_8C.html). ### Setup; <!--; 1. ROOT version; 2. Operating system; 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself.; -->; tested on ; ubuntu 20.04 + ROOT v6.26.00 (wget); ubuntu 20.04 + ROOT v6.24.06 (wget); MacOS 10.15 + ROOT v6.26.00 (brew). ### Additional context; <!--; Add any other context about the problem here.; -->; N/A",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10222:547,log,log,547,https://root.cern,https://github.com/root-project/root/issues/10222,2,"['log', 'test']","['log', 'tested']"
Testability,"- [x] Checked for duplicates; <!--; Please search in; * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue); * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT); for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"".; -->. ### Describe the bug; <!--; A clear and concise description of what the wrong behavior is.; -->; Root 6.26.04 build fails in a Ubuntu 22.04 `pbuilder` sandbox, with the following features enabled:; ```; -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit webgui rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd; ```; with the error; ```; [ 71%] Linking CXX executable ../bin/rootcling; /usr/bin/ld: ../lib/libCling.so.6.26.04: undefined reference to `typeinfo for clang::sema::FunctionScopeInfo' ; collect2: error: ld returned 1 exit status; make[4]: *** [main/CMakeFiles/rootcling.dir/build.make:101: bin/rootcling] Error 1; ```. This looks like an incompatibility between clang and cling - which both are builtin.; Building in a 20.04 `pbuilder` sandbox succeeds (same set of features as above, minus `webgui`, btw). ### Expected behavior; <!--; A clear and concise description of what you expected to happen.; -->; The same set of build instructions (with identical dependencies) succeeds on Debian 11 Bullseye and 10 Buster, with; ```; -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_sh",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10777:512,sandbox,sandbox,512,https://root.cern,https://github.com/root-project/root/issues/10777,1,['sandbox'],['sandbox']
Testability,"- [x] Checked for duplicates; <!--; Please search in; * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue); * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT); for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"".; -->. ### Describe the bug; <!--; A clear and concise description of what the wrong behavior is.; -->; The exception occurs with `pytest` running the test code:; ```python; ============================================================================ FAILURES =============================================================================; _______________________________________________________________ test_data_frame_vec_of_vec_of_real ________________________________________________________________; RuntimeWarning: awkward::ListArray_63uTHafmYE: base class awkward::ArrayView has no streamer or dictionary it will not be saved. The above exception was the direct cause of the following exception:. tmp_path = PosixPath('/private/var/folders/wr/rfy5xgb56ls2dygmfnhx35lc0000gn/T/pytest-of-yana/pytest-15/test_data_frame_vec_of_vec_of_0'). def test_data_frame_vec_of_vec_of_real(tmp_path):; filename = os.path.join(tmp_path, ""test-listarray.root""); ; ak_array_in = ak.Array([[[1.1], [2.2]], [[3.3], [4.4, 5.5]]]); ; data_frame = ak.to_rdataframe({""x"": ak_array_in}); ; assert data_frame.GetColumnType(""x"").startswith(""awkward::ListArray_""); ; ak_array_out = ak.from_rdataframe(; data_frame,; columns=(""x"",),; ); assert ak_array_in.to_list() == ak_array_out[""x""].to_list(); ; #with pytest.raises(SystemError):; > data_frame.Snapshot(""ListArray"", filename, (""x"",)); E SystemError: ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Snapshot(basic_string_view<char,char_traits<char> > treename, basic_string_view<char,char_traits<char> > filename, initia",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11602:505,test,test,505,https://root.cern,https://github.com/root-project/root/issues/11602,1,['test'],['test']
Testability,"- [x] Checked for duplicates; <!--; Please search in; * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue); * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT); for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"".; -->. ### Describe the bug; <!--; A clear and concise description of what the wrong behavior is.; -->; When using the pythonization of _some_ `RooCmdArgs` together with the `RooArgSet` pythonization, the created set is dropped too early.; It does not always cause a segfault (depends on the `RooCmdArg`) but it is visible in `valgrind`.; I've seen this happen with `Minos`, `Slice`, `Project`, `Parameters` and SelectVar, while I tested `Conditional`, `Constrain`, `ExternalConstraints`, `Components` and `VisualizeError` and they show no issue (not even in `valgrind`). ; I _think_ the difference is wether the `RooArgSet` is stored as a `RooArgSet` in the `RooCmdArg` (works fine) or as a `TObject*` (dropped early).; I've also noticed that this happens only when you combine the two pythonizations, e.g. both; ```Python; model.fitTo(data, Minos = ROOT.RooArgSet(parameter)); model.fitTo(data, ROOT.RooFit.Minos({parameter})); ```; work fine, only; ```Python; model.fitTo(data, Minos = {parameter}); ```; is affected. ### Expected behavior; <!--; A clear and concise description of what you expected to happen.; -->; No use after free. ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->; ```Python; import ROOT. x = ROOT.RooRealVar('x', '', 0, 1); y = ROOT.RooRealVar('y', '', 0, 1). mu = ROOT.RooRealVar(""mu"", """", 0.5, 0, 1); gx = ROOT.RooGaussian(""gx"", """", x, mu, ROOT.RooFit.RooConst(0.2)); gy = ROOT.RooGaussi",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11421:785,test,tested,785,https://root.cern,https://github.com/root-project/root/issues/11421,1,['test'],['tested']
Testability,"- [x] Checked for duplicates; <!--; Please search in; * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue); * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT); for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"".; -->. ### Describe the bug; Building root in the LCG stack dev3 slot (HEAD of master branch), full logs http://cdash.cern.ch/viewFiles.php?buildid=134296; ```; [100%] Building CXX object roofit/hs3/CMakeFiles/RooFitHS3.dir/src/JSONFactories_RooFitCore.cxx.o; [100%] Building CXX object roofit/hs3/CMakeFiles/RooFitHS3.dir/src/JSONParser.cxx.o; [100%] Building CXX object roofit/hs3/CMakeFiles/RooFitHS3.dir/src/HistFactoryJSONTool.cxx.o; [100%] Building CXX object roofit/hs3/CMakeFiles/RooFitHS3.dir/src/RooJSONFactoryWSTool.cxx.o; [100%] Building CXX object roofit/hs3/CMakeFiles/RooFitHS3.dir/src/JSONFactories_HistFactory.cxx.o; /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/roofit/hs3/src/JSONParser.cxx:5:10: fatal error: nlohmann/json.hpp: No such file or directory; #include ""nlohmann/json.hpp""; ^~~~~~~~~~~~~~~~~~~; ```. I think introduced here #8944; I guess something like what is done in Eve needs to be added to the other CMakeLists.txt. cf.; https://github.com/root-project/root/blob/94f518c380d9c7c00d92f1fecf29806b8105ce9f/graf3d/eve7/CMakeLists.txt#L139. ### Expected behavior; Successful compilation using the external json header. ### To Reproduce; ```; source /cvmfs/sft.cern.ch/lcg/releases/LCG_101/ROOT/6.24.06/x86_64-centos7-gcc10-opt/ROOT-env.sh; mkdir testrootjson; cd testrootjson; mkdir build; git clone --depth=1 https://github.com/root-project/root.git; cd build; cmake -Dbuiltin_nlohmannjson=OFF -Dnlohmann_json_ROOT=${JSONMCPP__HOME} ../root/; make RooFitHS3; ```; * these steps require centos7, cvmfs, cmake and probably hep_oslibs installed on the machine.; * using the LCG ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9381:454,log,logs,454,https://root.cern,https://github.com/root-project/root/issues/9381,1,['log'],['logs']
Testability,"- [x] Checked for duplicates; <!--; Please search in; * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue); * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT); for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"".; -->. ### Describe the bug; For dates before Jan 1st, 1970, `TTimeStamp` sometimes gives incorrect results when it’s initialized with date and time, whether using the unsigned date and time constructor, or the explicit year, month, day, hours, minutes, and seconds constructor.; There are no problems if `TTimeStamp` is initialized from a `time_t`. ### Expected behavior; `TTimeStamp(19600822, 0u, 0u, true, 0).AsString(""s"")` returns `""1960-08-23 00:00:00""` instead of `""1960-08-22 00:00:00""`.; Similarly for `TTimeStamp(1960, 8, 22, 0, 0, 0)`.; Casting it to `time_t` yields `-295315200`, which is indeed the Unix time for `""1960-08-23 00:00:00""`.; `TTimeStamp(-295401600, 0).AsString(""s"")` returns correctly `""1960-08-22 00:00:00""`. ### To Reproduce; See code and various tests on the [ROOT forum](https://root-forum.cern.ch/t/bug-in-ttimestamp-days-are-skipped-when-using-date-and-time-constructor/54201/1). ### Setup; ROOT Version: 6.26/02, heads/latest-stable@c8d49336; Platform: Ubuntu 22.04.2; Compiler: linuxx8664gcc; Compiled with `cmake -DCMAKE_INSTALL_PREFIX=../install -DCMAKE_BUILD_TYPE='RelWithDebInfo' -Dbuiltin_vc='ON' -Dcudnn='OFF' -Dcfitsio='ON' -Dgviz='ON' -Dqt5_web='ON' -Dunuran='ON' -Dvc='ON' -Dveccore='ON' ../git`",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12569:1129,test,tests,1129,https://root.cern,https://github.com/root-project/root/issues/12569,1,['test'],['tests']
Testability,"- [x] Checked for duplicates; <!--; Please search in; * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue); * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT); for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"".; -->. ### Describe the bug; The build fails with gcc 9 and CMake 3.10, which I believe comes from the use of a CMake 3.11 feature.; The lines that fail are: https://github.com/root-project/root/blob/466fbd63a5d8486cd9f566bec8f70298161693c9/cmake/modules/SearchInstalledSoftware.cmake#L1780-L1783. Build log: ; ```; max@max-VirtualBox:~/projects/rootdev/root/new-build$ cmake .. -Dccache=ON -Dtesting=ON -Dxrootd=OFF -Droot7=ON -During=ON; -- Detected ROOT_VERSION 6.25.01; -- Looking for Python; -- Found GCC. Major version 9, minor version 3; -- ROOT Platform: linux; -- ROOT Compiler: GNU 9.3.0; -- ROOT Processor: x86_64; -- ROOT Architecture: linuxx8664gcc; -- Build Type: 'RelWithDebInfo' (flags = '-O3 -g'); -- Compiler Flags: -std=c++14 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -g; -- ROOT default compression algorithm: zlib; -- PyROOT will be built for version 2.7.17; -- Found ccache: /usr/bin/ccache; -- Looking for ZLib; -- Looking for Freetype; -- Building LZMA version 5.2.4 included in ROOT itself; -- Looking for X11; -- Could NOT find GIF (missing: GIF_LIBRARY GIF_INCLUDE_DIR) ; -- Could NOT find TIFF (missing: TIFF_LIBRARY TIFF_INCLUDE_DIR) ; -- Could NOT find JPEG (missing: JPEG_LIBRARY JPEG_INCLUDE_DIR) ; -- Building AfterImage library included in ROOT itself; -- Looking for liburing; -- Cannot select cudnn without selecting cuda or tmva-gpu. Option is ignored; CMake Error at cmake/modules/SearchInstalledSoftware.cmake:1783 (target_compile_options):; Cannot specify compile options for imported target ""gtest"".; Call Stack (most recent call f",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7654:658,log,log,658,https://root.cern,https://github.com/root-project/root/issues/7654,1,['log'],['log']
Testability,"- [x] Checked for duplicates; <!--; Please search in; * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue); * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT); for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"".; -->. ### Describe the bug; Using a `std::pair` for a custom class inside another custom class seems to somehow break the dictionary load mechanism. In the [attached reproducer](https://github.com/root-project/root/files/8609137/reproducer.tar.gz), `OtherClass` contains a `std::pair<int, MyClass>`; for both custom classes a dictionary is created. Manually loading the dictionary in the Root shell seems to lead to an incomplete type state for `MyClass`, such that some assertions fail. The failure disappear if the same assertion is tested before on a class from the same dictionary and not encompassed in the `std::pair`. It thus seems that the presence of the `std::pair` somehow interferes with loading the dictionary for the contained class. ### Expected behavior; <!--; A clear and concise description of what you expected to happen.; -->; The presence of `std:::pair` should not interfere with the dictionary of its contained classes. ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->. This [reproducer](https://github.com/root-project/root/files/8609137/reproducer.tar.gz) showcases the problem:; ```bash; $ rootcling -f dict.cpp MyClass.h OtherClass.h LinkDef.h; $ g++ -shared -std=c++14 -fPIC -I$ROOTSYS/include dict.cpp -o libDict.so ; $ root; root [0] .L libDict.so; root [1] std::is_copy_assignable<MyClass>::value; In module 'std' imported from input_line_1:1:; /usr/lib/gcc/x86_64-pc-linux-gnu/11.2",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10512:826,assert,assertions,826,https://root.cern,https://github.com/root-project/root/issues/10512,3,"['assert', 'test']","['assertion', 'assertions', 'tested']"
Testability,"- [x] Checked for duplicates; <!--; Please search in; * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue); * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT); for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"".; -->. ### Describe the bug; When I try to access `ROOT.TPyDispatcher` from PyROOT (for example, using tutorials/pyroot/gui_ex.py), the following error occurs:. ```; input_line_37:1:10: fatal error: 'ROOT/TPyDispatcher.h' file not found; #include ""ROOT/TPyDispatcher.h""; ^~~~~~~~~~~~~~~~~~~~~~; Traceback (most recent call last):; File ""/usr/share/doc/root/tutorials/pyroot/gui_ex.py"", line 35, in <module>; m = ROOT.TPyDispatcher( MyDraw ); File ""/usr/lib/python3.8/site-packages/ROOT/_facade.py"", line 163, in _fallback_getattr; raise AttributeError(""Failed to get attribute {} from ROOT"".format(name)); AttributeError: Failed to get attribute TPyDispatcher from ROOT; ```. I also cannot find `TPyDispatcher.h` on my system, which PyROOT tries to [include here](https://github.com/root-project/root/blob/master/bindings/pyroot/pythonizations/python/ROOT/_facade.py#L292). ### Expected behavior. ROOT.TPyDispatcher is known to be broken in 6.22.00, but [it is supposed to be fixed for 6.22.02](https://github.com/root-project/root/pull/6065). ### To Reproduce. Run `python tutorials/pyroot/gui_ex.py`. ### Setup. 1. ROOT version: 6.22.02; 2. Operating system: Linux x86_64 (Arch Linux and Ubuntu 18.04); 3. Python version: Python3.8; 4. I tested this both for root from the Arch Linux repositories and from conda-forge, so I assume it is not the packagers fault.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6579:1594,test,tested,1594,https://root.cern,https://github.com/root-project/root/issues/6579,1,['test'],['tested']
Testability,"- [x] Checked for duplicates; <!--; Please search in; * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue); * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT); for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"".; -->. ### Describe the bug; When building root 6.26/04 with gcc 11.2.1 the build process fails while compiling REveBox.cxx:. [ 89%] Building CXX object graf3d/eve7/CMakeFiles/ROOTEve.dir/src/REveBox.cxx.o; In file included from /usr/src/root-6.26.04/graf3d/eve7/src/REveBox.cxx:18:; /usr/include/nlohmann/json.hpp:847:7: error: redeclared with 9 template parameters; 847 | class basic_json;; | ^~~~~~~~~~. This is under CentOS 7, using devtoolset-11 and cmake3 (3.17.5). ### Expected behavior; It should compile without errors. ### To Reproduce. wget https://root.cern/download/root_v6.26.04.source.tar.gz; tar xzvf root_v6.26.04.source.tar.gz; cd root-6.26.04; cd build; scl enable devtoolset-11 bash; cmake3 ..; make >& make.log. ### Setup; root 6.26.04; CentOS 7, devtoolset-11 (gcc 11.2.1), cmake3 (3.17.5); Building from source (https://root.cern/download/root_v6.26.04.source.tar.gz). ### Additional context; <!--; Add any other context about the problem here.; -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10814:1082,log,log,1082,https://root.cern,https://github.com/root-project/root/issues/10814,1,['log'],['log']
Testability,"- [x] Checked for duplicates; <!--; Please search in; * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue); * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT); for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"".; -->. ### Describe the bug; With the recent version of ROOT (v6.26/08), I found out that when plotting the pull distribution after a fit with pullHist, the wrong distribution is shown with respect to the one produced with ROOT v6.26/06, for example. ### Expected behavior; When the fit converges, a gaussian-like pull distribution is expected, while with ROOT v6.26/08 the histogram bars are unreasonably high. ### To Reproduce; You can find the needed code and data to reproduce the bug at the following link:; https://cernbox.cern.ch/s/hnMmXVjUtbwlZJN; Simply run `bug_reproducer.py` with ROOT v6.26/06 and v6.26/08 and see the difference in the plot produced. ### Setup; Tested with ROOT setup from `lb-conda`",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11738:1029,Test,Tested,1029,https://root.cern,https://github.com/root-project/root/issues/11738,1,['Test'],['Tested']
Testability,"- [x] Checked for duplicates; It might be somehow associated with #7182. ### Describe the bug; In the attached [archive](https://github.com/root-project/root/files/8690168/roofit-integral.tar.gz) there is a macro test.C showing the problem. The problem is that even though all user-created objects die when functions `Integral()` and `Plot()` finish, the integral value is different if `Plot()` is invoked before the second call to `Integral()`. Both removing the call to `Plot()` or using the same value of `delta` in `Integral()` and `Plot()` make the test pass. Looks like `ws.pdf(""signal"")->plotOn(frame);` creates some global cache of the integral which is used with newly created objects. ### Expected behavior; The integral value should not depend on the `Plot()` step - be equal before and after the `Plot()`. ### To Reproduce; Unpack the attached archive and run `root -b -l -q test.C` in the unpacked directory. ### Setup; The test passes for ROOT versions up to 6.22.00, fails in 6.22.06 and later (I didn't check between). It doesn't depend on the operating system nor machine. In the archive there is also a script test.sh that can be run on lxplus.cern.ch selecting different root versions. . ### Additional context",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10577:213,test,test,213,https://root.cern,https://github.com/root-project/root/issues/10577,5,['test'],['test']
Testability,"- [x] add ARCHITECTURE.md; - [x] use `fCapacity == -1` to indicate memory-adoption mode; - [x] switch `assert`s to `throw`s; - [x] expose the small buffer size as a template parameter (defaulted to `sizeof(T)*8 > 1024 ? 0 : 8` or similar, see also https://lists.llvm.org/pipermail/llvm-dev/2020-November/146613.html and the way they currently do it in LLVM: https://llvm.org/doxygen/SmallVector_8h_source.html#l01101); - [x] re-check before/after benchmark runtimes (first measurements at https://eguiraud.web.cern.ch/eguiraud/decks/20201112_rvec_redesign_ppp ); - [x] unit test for exceptions thrown during construction or resizing (and add note about lack of exception safety in docs); - [x] confirm that crediting of LLVM is ok (currently only in `math/vecops/ARCHITECTURE.md`)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7502:103,assert,assert,103,https://root.cern,https://github.com/root-project/root/pull/7502,3,"['assert', 'benchmark', 'test']","['assert', 'benchmark', 'test']"
Testability,- [x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15642:6,test,tested,6,https://root.cern,https://github.com/root-project/root/pull/15642,1,['test'],['tested']
Testability,- [x] tested changes locally. This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11600:6,test,tested,6,https://root.cern,https://github.com/root-project/root/pull/11600,1,['test'],['tested']
Testability,- [x] tested changes locally; - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14787:6,test,tested,6,https://root.cern,https://github.com/root-project/root/pull/14787,1,['test'],['tested']
Testability,- core/base: Since Visual Studio v16.5.0 the /O2 optimization flag makes most of the roofit/roostats tests failing; - hist/histv7/test: Using /O2 compiler flag prevent the followin error when building in debug mode:; axis.obj : fatal error LNK1179: invalid or corrupt file: duplicate COMDAT '??$?8DU?$char_traits@D@std@@@__ROOT@experimental@std@@YA_NV?$basic_string_view@DU?$char_traits@D@std@@@012@0@Z',MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5343:101,test,tests,101,https://root.cern,https://github.com/root-project/root/pull/5343,2,['test'],"['test', 'tests']"
Testability,- extend API in Factory to get the ROC curve for the training data; - this required to improve ResultsClassification to fill at the same time both output score; results and classID information. Before the classID info was set only later in; MethodBase::EvaluateAllMethod and done only for the testing data set.; Now it is done when the ResultsClassification object is filled; ( in MethodBase::AddClassifierOutput).; With these changes one can get a complete results for both training and testing data and being able to retrieve ROC curve in ; both cases. - fix also the code formatting for Factory class. Indentation was not correct.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6724:293,test,testing,293,https://root.cern,https://github.com/root-project/root/pull/6724,2,['test'],['testing']
Testability,"- fix compiler warnings about current eve7 code, remove some ClassDefs; - try to add test directory to eve7; - provide latest jsroot with correspondent changes in GeoPaineter for eve7; - implement toggling of nodes visibility in eve7 geometry viewer",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3473:85,test,test,85,https://root.cern,https://github.com/root-project/root/pull/3473,1,['test'],['test']
Testability,- fix interaction of Vary and Range; - avoid useless clones of the nominal filters. @ikabadzhov will soon open a PR with a test for this as well as many other cases.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9914:123,test,test,123,https://root.cern,https://github.com/root-project/root/pull/9914,1,['test'],['test']
Testability,"- make get_tty_size() returning 0 when called without terminal (e.g. when redirecting output); - check for nonzero return value of `_isatty()`. According to the doc, `_isatty` returns a nonzero value if the descriptor is associated with a character device. Otherwise, `_isatty` returns 0.; - in `dataframe_helpers.cxx`, don't use `f1.root` and `f2.root`, they are already used in `dataframe_nodes.cxx` and might conflict when running tests concurrently. This fixes the following errors on Windows:; ```; unknown file: error: C++ exception with description ""string too long"" thrown in the test body.; [ FAILED ] RDFHelpers.ProgressHelper_Existence_ST (5009 ms); [ RUN ] RDFHelpers.ProgressHelper_Existence_MT; C:\ROOT-CI\src\core\testsupport\src\TestSupport.cxx(77): error: Failed; Received unexpected diagnostic of severity 5000 at 'TFile::TFile' reading 'could not delete C:\ROOT-CI\build\tree\dataframe\test\f2.root (errno: 13) Permission denied'.; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13489:434,test,tests,434,https://root.cern,https://github.com/root-project/root/pull/13489,5,"['Test', 'test']","['TestSupport', 'test', 'tests', 'testsupport']"
Testability,"- the CUDA sm level can be set via CLING_TEST_CUDA_SM_LEVEL environment variable (e.g. ""35""), before running the tests; - this necessary, because the minimum sm level depends on the use CUDA SDK; - for example, CUDA 8.0 supports sm level 2.0, which is not support from CUDA 10.1 anymore",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7190:113,test,tests,113,https://root.cern,https://github.com/root-project/root/pull/7190,1,['test'],['tests']
Testability,"- try harder to find branches and leaves users requested when; trying to figure out their type; - when building the list of valid column names, use the output of; TBranch::GetFullName instead of the names (joined by dots) of; the branches we traversed so far. With multiple nested; TBranchElements, the traversal might be `a.b.c` while the name; returned by TBranch::GetFullName (which is what TTree::GetBranch; recognizes) might be simply `a.c` (see e.g. ROOT-9975). These changes fix ROOT-9975, although in some corner cases they might; change which column names RDataFrame considers valid (any ""reasonable""; user application that was working should keep working -- no tutorial,; test or integration benchmark we have was broken by these changes). A test is at https://github.com/root-project/roottest/pull/632 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6988:682,test,test,682,https://root.cern,https://github.com/root-project/root/pull/6988,3,"['benchmark', 'test']","['benchmark', 'test']"
Testability,"- use ""\n"" instead of `std::endl` for all but last newline in PrintInfo; - avoid copying strings from getters when possible. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15890:146,test,tested,146,https://root.cern,https://github.com/root-project/root/pull/15890,1,['test'],['tested']
Testability,-- Threads disabled.; -- Doxygen disabled.; -- Go bindings disabled.; -- Found ld64 - /Library/Developer/CommandLineTools/usr/bin/ld; -- Could NOT find OCaml (missing: OCAMLFIND OCAML_VERSION OCAML_STDLIB_PATH) ; -- OCaml bindings disabled.; -- LLVM host triple: arm-apple-darwin23.2.0; -- LLVM default target triple: arm-apple-darwin23.2.0; -- Building with -fPIC; -- Constructing LLVMBuild project information; -- Linker detection: unknown; -- Targeting AArch64; -- Targeting NVPTX; -- Clang version: 9.0.1; -- Cling version (from VERSION file): ROOT_1.0~dev; CMake Warning at interpreter/cling/lib/Interpreter/CMakeLists.txt:278 (MESSAGE):; Cannot determine location of C++ headers for runtime. -- Cling will look for C++ headers in '' at runtime.; -- And then fallback to: 'clang'; -- Performing Test found_stdstringview; -- Performing Test found_stdstringview - Success; -- Performing Test found_stod_stringview; -- Performing Test found_stod_stringview - Failed; -- Performing Test found_stdapply; -- Performing Test found_stdapply - Success; -- Performing Test found_stdinvoke; -- Performing Test found_stdinvoke - Success; -- Performing Test found_stdindexsequence; -- Performing Test found_stdindexsequence - Success; -- ROOT Configuration . System Darwin-23.2.0; Processor 10 core Apple M1 Max (arm64); Build type Release; Install path /Users/marcomeyer/Software/root/20240113; Compiler AppleClang 15.0.0.15000100; Compiler flags:; C -m64 -pipe -W -Wall -fsigned-char -fno-common -Qunused-arguments -pthread -O3 -DNDEBUG; C++ -std=c++17 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -m64 -pipe -W -Wall -Woverloaded-virtual -fsigned-char -fno-common -Qunused-arguments -pthread -stdlib=libc++ -O3 -DNDEBUG; Linker flags:; Executable -mmacosx-version-min=14.2; Module ; Shared . -- Enabled support for: asimage builtin_afterimage builtin_,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14337:3616,Test,Test,3616,https://root.cern,https://github.com/root-project/root/issues/14337,10,['Test'],['Test']
Testability,"----------+----------; 1-10 p0(40kB) p1(80kB) p2(80kB); 11-20 p3(40kB) p4(80kB) p5(80kB); ... ... ... ...; ```. Before this change, page allocations were performed every time a page; is flushed from a column:. ```; Events | Column 0 | Column 1 | Column 2; -------+----------+----------+----------; [alloc] [alloc] [alloc]; 1-10 p0(40kB) p1(80kB) p2(80kB); [dealloc] [dealloc] [dealloc]; [alloc] [alloc] [alloc]; 11-20 p3(40kB) p4(80kB) p5(80kB); ... ... ... ...; [dealloc] [dealloc] [dealloc]; ```. After this change, allocations are held onto and reused if possible; (up to a certain limit, which for now is hard-coded to be 32 pages). ```; Events | Column 0 | Column 1 | Column 2; -------+----------+----------+----------; [alloc] [alloc] [alloc]; 1-10 p0(40kB) p1(80kB) p2(80kB); 11-20 p3(40kB) p4(80kB) p5(80kB); ... ... ... ...; [dealloc] [dealloc] [dealloc]; ```. On SSD, the following serial results were obtained for the lhcb and cms; benchmarks (average of ten cold runs, 95% confidence interval):. ```; cms. Before: 105145us +- 1338us; After: 93669us +- 2077us; %diff: 10.9%. lhcb. Before: 2111977us +- 8371us; After: 1770781us +- 11185us; %diff: 16.2%; ```. Todo: ; - [x] Handle non-mappable case in `PopulatePage`; - [x] Investigate multi-threaded case. For multithreading, the current implementation just uses the existing `UnsealPage` mechanism and is unaffected by these changes -- deleted pages are returned to the cache which deallocates them properly. . I tried adding an internal mutex to `RPageCache` and bumping the number of cached pages to 128 on the benchmark machine but the runtime was about the same as the existing cache-less implementation. Further cache size increases did not show improvements, but as expected only having 32 cached pages for 128 threads was much slower. ```; ./lhcb -m (64-cores, 10 cold runs, 95% confidence interval); no cache: 776188us +- 9918us; cache (128): 780214us +- 11888us; %diff: -0.5%; cache (32): 1369689us +- 33365us; %diff: -76.46%; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8634:1911,benchmark,benchmark,1911,https://root.cern,https://github.com/root-project/root/pull/8634,1,['benchmark'],['benchmark']
Testability,"---------------------------------------------------; runtime_error Traceback (most recent call last); Cell In[1], line 3; 1 import ROOT; 2 df = ROOT.RDataFrame(""events"", ""edm4hep_events.root""); ----> 3 df.Describe(). runtime_error: ROOT::RDF::RDFDescription ROOT::RDF::RInterfaceBase::Describe() =>; runtime_error: TTree leaf TrackerHitPlanes.covMatrix[6] has both a leaf count and a static length. This is not supported.; ```. ### Generation of the input file. To generate the input file [edm4hep_events.root.gz](https://github.com/root-project/root/files/14365763/edm4hep_events.root.gz) (38K), use the follwing steps. 1. Load the Key4hep environment:; ```console; source /cvmfs/sw.hsf.org/key4hep/setup.sh; ```; 2. Create a plain EDM4hep file, using the unit tests in EDM4hep.; ```console; git clone -b v00-10-05 https://github.com/key4hep/edm4hep /tmp/edm4hep; cmake -B/tmp/edm4hep/build -S/tmp/edm4hep; make -C/tmp/edm4hep/build; ctest --test-dir /tmp/edm4hep/build; ```; 4. The EDM4hep file will be in `/tmp/edm4hep/build/test/edm4hep_events.root`. ### ROOT version. ```; ------------------------------------------------------------------; | Welcome to ROOT 6.30/02 https://root.cern |; | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on Jan 18 2024, 03:09:46 |; | From heads/master@tags/v6-30-02 |; | With g++ (Ubuntu 13.2.0-4ubuntu3) 13.2.0 |; | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------; ```. ### Installation method. Various: Key4hep via /cvmfs/sw.hsf.org/, spack. ### Operating system. Linux Ubuntu 22.04. ### Additional context. In a couple of places [1] [2] the breadcrumbs lead to the JIRA tickets https://its.cern.ch/jira/browse/ROOT-9509, however that is for multidimensional arrays. [1]: https://root-forum.cern.ch/t/removing-entire-columns-from-rdataframe-object/52119; [2]: https://root-forum.cern.ch/t/rdataframe-functionality-missing/54505",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14790:2633,test,test,2633,https://root.cern,https://github.com/root-project/root/issues/14790,1,['test'],['test']
Testability,"----------------; Ran 11 tests in 2.036s; FAILED (failures=3); CMake Error at /builddir/build/BUILD/root-6.28.00/cmake/modules/RootTestDriver.cmake:232 (message):; error code: 1; ~~~. #### pyunittests-pyroot-pyz-stl-vector; ~~~; 61/1272 Test #18: pyunittests-pyroot-pyz-stl-vector ...................................***Failed 0.84 sec; test_vec_char_data (stl_vector.STL_vector.test_vec_char_data); Test that calling std::vector<char>::data() returns a Python string ... FAIL; test_vec_const_char_p (stl_vector.STL_vector.test_vec_const_char_p); Test that creating a std::vector<const char*> does not raise any ... ok; ======================================================================; FAIL: test_vec_char_data (stl_vector.STL_vector.test_vec_char_data); Test that calling std::vector<char>::data() returns a Python string; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""/builddir/build/BUILD/root-6.28.00/bindings/pyroot/pythonizations/test/stl_vector.py"", line 19, in test_vec_char_data; self.assertEqual(v.data(), ''.join(elems)); AssertionError: '' != 'abc'; + abc; ----------------------------------------------------------------------; Ran 2 tests in 0.174s; FAILED (failures=1); CMake Error at /builddir/build/BUILD/root-6.28.00/cmake/modules/RootTestDriver.cmake:232 (message):; error code: 1; ~~~. #### tutorial-dataframe-df006_ranges-py. TypeError: none of the 2 overloaded methods succeeded.; ~~~; 1096/1272 Test #1098: tutorial-dataframe-df006_ranges-py ..................................***Failed 7.50 sec; Traceback (most recent call last):; File ""/builddir/build/BUILD/root-6.28.00/tutorials/dataframe/df006_ranges.py"", line 44, in <module>; d_15_end_3 = d.Range(15, 0, 3); ^^^^^^^^^^^^^^^^^; TypeError: none of the 2 overloaded methods succeeded. Full details:; ROOT::RDF::RInterface<ROOT::Detail::RDF::RRange<ROOT::Detail::RDF::RLoopManager>,void> ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Ra",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12429:4255,test,test,4255,https://root.cern,https://github.com/root-project/root/issues/12429,1,['test'],['test']
Testability,"----------; Traceback (most recent call last):; File ""/builddir/build/BUILD/root-6.28.00/bindings/pyroot/pythonizations/test/rtensor.py"", line 218, in test_reshape; self.assertEqual(x.GetMemoryLayout(), 1); AssertionError: 16777216 != 1; ======================================================================; FAIL: test_transpose (rtensor.NumpyCompliance.test_transpose); Test np.transpose vs RTensor::Transpose; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""/builddir/build/BUILD/root-6.28.00/bindings/pyroot/pythonizations/test/rtensor.py"", line 151, in test_transpose; self.assertEqual(x.GetMemoryLayout(), 1); AssertionError: 16777216 != 1; ----------------------------------------------------------------------; Ran 11 tests in 2.036s; FAILED (failures=3); CMake Error at /builddir/build/BUILD/root-6.28.00/cmake/modules/RootTestDriver.cmake:232 (message):; error code: 1; ~~~. #### pyunittests-pyroot-pyz-stl-vector; ~~~; 61/1272 Test #18: pyunittests-pyroot-pyz-stl-vector ...................................***Failed 0.84 sec; test_vec_char_data (stl_vector.STL_vector.test_vec_char_data); Test that calling std::vector<char>::data() returns a Python string ... FAIL; test_vec_const_char_p (stl_vector.STL_vector.test_vec_const_char_p); Test that creating a std::vector<const char*> does not raise any ... ok; ======================================================================; FAIL: test_vec_char_data (stl_vector.STL_vector.test_vec_char_data); Test that calling std::vector<char>::data() returns a Python string; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""/builddir/build/BUILD/root-6.28.00/bindings/pyroot/pythonizations/test/stl_vector.py"", line 19, in test_vec_char_data; self.assertEqual(v.data(), ''.join(elems)); AssertionError: '' != 'abc'; + abc; ----------------------------------------------------------------------; Ran 2 tests in 0.17",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12429:3483,Test,Test,3483,https://root.cern,https://github.com/root-project/root/issues/12429,1,['Test'],['Test']
Testability,"-6.30.04/core/metacling/test/TClingDataMemberInfoTests.cxx:230: Failure; Value of: 1 == *(int*)(ROOT::GetROOT())->GetGlobal(""var1"")->GetAddress(); Actual: false; Expected: true; /builddir/build/BUILD/root-6.30.04/core/metacling/test/TClingDataMemberInfoTests.cxx:233: Failure; Value of: -2 == *(int*)(ROOT::GetROOT())->GetGlobal(""var2"")->GetAddress(); Actual: false; Expected: true; /builddir/build/BUILD/root-6.30.04/core/metacling/test/TClingDataMemberInfoTests.cxx:242: Failure; Expected equality of these values:; 3000; *(int*)(ROOT::GetROOT())->GetGlobal(""kError"")->GetAddress(); Which is: 0; [ FAILED ] TClingDataMemberInfo.Offset (7 ms); [ RUN ] TClingDataMemberInfo.issue8553; [ OK ] TClingDataMemberInfo.issue8553 (4 ms); [----------] 4 tests from TClingDataMemberInfo (14 ms total); [----------] 5 tests from TClingMethodInfo; [ RUN ] TClingMethodInfo.Prototype; [ OK ] TClingMethodInfo.Prototype (0 ms); [ RUN ] TClingMethodInfo.ROOT10789; [ OK ] TClingMethodInfo.ROOT10789 (2 ms); [ RUN ] TClingMethodInfo.DerivedCtorROOT11010; [ OK ] TClingMethodInfo.DerivedCtorROOT11010 (81 ms); [ RUN ] TClingMethodInfo.TemplateFun; [ OK ] TClingMethodInfo.TemplateFun (1 ms); [ RUN ] TClingMethodInfo.Ctors; [ OK ] TClingMethodInfo.Ctors (4 ms); [----------] 5 tests from TClingMethodInfo (90 ms total); [----------] Global test environment tear-down; [==========] 33 tests from 4 test suites ran. (7341 ms total); [ PASSED ] 32 tests.; [ FAILED ] 1 test, listed below:; [ FAILED ] TClingDataMemberInfo.Offset; 1 FAILED TEST; YOU HAVE 1 DISABLED TEST; CMake Error at /builddir/build/BUILD/root-6.30.04/cmake/modules/RootTestDriver.cmake:232 (message):; error code: 1; ```. ### Reproducer. Build root 6.30.02 for s390x; Run tests. ### ROOT version. root 6.30.04. ### Installation method. build from source. ### Operating system. Fedora Linux 40 for s390x; Fedora Linux 39 for s390x; Fedora Linux 38 for s390x; RHEL 9 + EPEL 9 for s390x; RHEL 8 + EPEL 8 for s390x. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14512:4694,test,tests,4694,https://root.cern,https://github.com/root-project/root/issues/14512,9,"['TEST', 'test']","['TEST', 'test', 'tests']"
Testability,"-; Traceback (most recent call last):; File ""/srv/root/src/root/bindings/pyroot/pythonizations/test/import_load_libs.py"", line 117, in test_import; raise Exception('Found not whitelisted libraries after importing ROOT:' \; Exception: Found not whitelisted libraries after importing ROOT:; - libz3; If the test fails with a library that is loaded on purpose, please add it to the whitelist.; ```; Note that z3 is a library used by LLVM. It may be that because I have other versions of LLVM/Clang in the system, z3 got installed and picked up by the builtin LLVM from the ROOT build. Ideally, this sort of behavior of automatically picking whatever is installed on the system should be avoided, as it can cause problems, so I recommend looking into the configuration of the builtin LLVM more closely and either disabling z3 if not used, or adding it to the dependencies of ROOT and enabling by force. - Test tutorial-v7-ntuple-ntpl005_introspection failure is related to uring support, is that tested in nightlies? It could also be a permissions issue that I don't have configured properly, I don't know.; ```sh; Start 995: tutorial-v7-ntuple-ntpl005_introspection; 7/18 Test #995: tutorial-v7-ntuple-ntpl005_introspection ...........***Failed 1.57 sec; ...; terminate called after throwing an instance of 'std::runtime_error'; what(): Fatal Error: failed to allocate memory for the smallest possible io_uring instance. 'memlock' memory has been exhausted for this user; CMake Error at /srv/root/build/RootTestDriver.cmake:237 (message):; error code: Subprocess aborted; ```; - The dataframe tests all fail with something like this; ```sh; Processing /srv/root/src/roottest/root/dataframe/test_ctors.C+...; Info in <TUnixSystem::ACLiC>: creating shared library /srv/root/build/roottest/root/dataframe/test_ctors_C.so; /usr/lib/gcc/x86_64-pc-linux-gnu/8.4.0/../../../../x86_64-pc-linux-gnu/bin/ld: /srv/root/build/roottest/root/dataframe/par: _ZTISt16invalid_argument: invalid version 7 (max 0); /usr/li",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7936:3671,Test,Test,3671,https://root.cern,https://github.com/root-project/root/issues/7936,2,"['Test', 'test']","['Test', 'tested']"
Testability,"-DCMAKE_INSTALL_RPATH=""$ORIGIN"" -DPYTHON_EXECUTABLE=""/usr/bin/python"" -Dalien=""OFF"" -Dall=""ON"" -Darrow=""OFF"" -Dcuda=""OFF"" -Dcudnn=""OFF"" -Ddcache=""OFF"" -Dfail-on-missing=""ON"" -Dgfal=""OFF"" -Dmemstat=""OFF"" -Dmonalisa=""OFF"" -Doracle=""OFF"" -Dpyroot=""ON"" -Drpath=""ON"" -Dtest_distrdf_pyspark=""OFF"" -Dtmva-gpu=""OFF"" -Dvc=""OFF"" -Dvdt=""OFF"" -Dveccore=""OFF"" -Dvecgeom=""OFF"" -Dvmc=""OFF"" -Dtesting=""ON"" -Droottest=""ON"" /srv/root/src/root; ```; and the following features were enabled:; ```; -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_openui5 cefweb clad dataframe davix exceptions fftw3 fitsio fortran gdml gviz http fcgi imt mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia6 pythia8 qt5web r roofit webgui root7 rpath runtime_cxxmodules shadowpw shared sqlite ssl tmva tmva-cpu tmva-pymva tmva-rmva spectrum unuran uring x11 xml xrootd; ```; The [CMakeCache.txt](https://github.com/root-project/root/files/6343170/CMakeCache.txt) file is attached. The test failures are as follows:. ```sh; The following tests FAILED:; 	 10 - pyunittests-pyroot-import-load-libs (Failed); 	 85 - gtest-core-metacling-test-TClingTest (Failed); 	994 - tutorial-v7-ntuple-ntpl005_introspection (Failed); 	1335 - roottest-python-JupyROOT-importROOT_notebook (Failed); 	1336 - roottest-python-JupyROOT-simpleCppMagic_notebook (Failed); 	1437 - roottest-python-pickle-read (Failed); 	1496 - roottest-root-dataframe-regression_snapshot (Failed); 	1499 - roottest-root-dataframe-test_snapshot (Failed); 	1500 - roottest-root-dataframe-test_stringfiltercolumn (Failed); 	1501 - roottest-root-dataframe-test_glob (Failed); 	1502 - roottest-root-dataframe-test_reduce (Failed); 	1513 - roottest-root-dataframe-ctors (Failed); ```. *__Update__: JupyROOT tests using wrong Python version were due to a configuration issue in jupyter on my machine. Please ignore those. For the other tests, I repeated the build with GCC 10.3 and I still see the same failures.*. Please click [here](https://githu",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7936:1420,test,test,1420,https://root.cern,https://github.com/root-project/root/issues/7936,1,['test'],['test']
Testability,"-DINSTALL=1 | Enables an extra step to call make install; | -DCDASH=1 | Enables submission to CDash (needs CTestConfig.cmake). When enabling coverage, a report is generated by default in the `coverage/` directory inside the build directory. The results can be viewed by opening the file `html/coverage_details.html`. This step can be disabled by passing `-DGCOVR=0` to `ctest`. It is recommended to use a debug build to generate the coverage analysis. The configuration can be specified directly on the command line via the `-C` option. For example, to run a coverage build in debug mode, with less verbose output, and showing test output when a test failure happens, one can run:; ```sh; ctest -V --output-on-failure -C Debug -DCOVERAGE=1 -S test.cmake; ```; Some environment variables can also influence the behavior of the script, like `CC`, `CXX`, `CMAKE_GENERATOR`, `CTEST_CONFIGURATION_TYPE`, `CMAKE_BUILD_PARALLEL_LEVEL`, `CTEST_PARALLEL_LEVEL`, `CMAKE_ARGS`, `CDASH`, `DESTDIR`, `BASE_REF`, `HEAD_REF`, and GitHub Actions environment variables. These are mostly self-explanatory and can be used to override the provided defaults. For example, to build with the clang compiler and use Ninja as CMake generator, one can run:; ```sh; env CC=clang CXX=clang++ CMAKE_GENERATOR=Ninja ctest -V -S test.cmake; ```; Finally, the script tries to load configuration files from the `.ci/` subdirectory in the source directory. The default configuration is in `.ci/config.cmake`. It is used if no specific configuration is found for the detected OS. For example, on Ubuntu, a file named `ubuntu.cmake` will be used if present instead of `config.cmake`. The script also tries to detect a version, so, for example, on Alma, one could use `almalinux8.cmake` which would have higher precedence than `almalinux.cmake`. The default `config.cmake` tries to enable as many options as possible without failing if the dependencies are not installed. Sample `ubuntu.cmake` and `macos.cmake` are added in this commit.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14999:1897,test,test,1897,https://root.cern,https://github.com/root-project/root/pull/14999,1,['test'],['test']
Testability,"-DLLVM_TARGETS_TO_BUILD=""host;NVPTX"" -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_WARNINGS=OFF -DLLVM_APPEND_VC_REV=OFF -DLLVM_ENABLE_BINDINGS=OFF -DLLVM_ENABLE_FFI=OFF -DLLVM_ENABLE_OCAMLDOC=OFF -DLLVM_ENABLE_Z3_SOLVER=OFF ../llvm-project/llvm; ```. then for root:; ```; cmake -DCMAKE_CXX_COMPILER=nvc++ -DCMAKE_C_COMPILER=nvc -DCMAKE_CXX_FLAGS=-std=c++17 -Dx11=OFF -Dtbb=OFF -Dopengl=OFF -Dgviz=OFF -Dimt=OFF -Ddavix=OFF -Dvdt=OFF -Dxrootd=OFF -Dwebgui=OFF -Dsqlite=OFF -Dssl=OFF -Dmysql=OFF -Doracle=OFF -Dpgsql=OFF -Ddavix=OFF -Dgfal=OFF -Dimt=OFF -Dbuiltin_llvm=OFF -DC_SUPPORTS_FPIC=true -DCXX_SUPPORTS_FPIC=true -DCMAKE_CXX_STANDARD=17 -DCMAKE_CXX_EXTENSIONS=Off -DLLVM_TARGETS_TO_BUILD=""host;NVPTX"" -DCMAKE_INSTALL_PREFIX=/opt/root/v6-30-03_nvhpc239 ../src; ```. However this results in the following error:; ```; rootcling_stage1: /bld6/root/bld_nvhpc/interpreter/llvm-project/clang/include/clang/Driver/Options.inc:7564: lambda []()->auto::operator()()->auto: Assertion `ValuesWereAdded && ""Couldn't add values to OptTable!""' failed.; #0 0x000000000cb9e5b1 PrintStackTraceSignalHandler(void*) Signals.cpp:0:0; #1 0x000000000cb9bf7e SignalHandler(int) Signals.cpp:0:0; #2 0x00007ffb0ce97630 __restore_rt sigaction.c:0:0; #3 0x00007ffb0a4f4387 raise (/lib64/libc.so.6+0x36387); #4 0x00007ffb0a4f5a78 abort (/lib64/libc.so.6+0x37a78); #5 0x00007ffb0a4ed1a6 __assert_fail_base (/lib64/libc.so.6+0x2f1a6); #6 0x00007ffb0a4ed252 (/lib64/libc.so.6+0x2f252); #7 0x000000000628a2f0 clang::driver::getDriverOptTable()::'lambda'()::operator()() const /bld6/root/src/interpreter/llvm-project/clang/lib/Driver/DriverOptions.cpp:7569:1; #8 0x000000000628a22a clang::driver::getDriverOptTable() /bld6/root/src/interpreter/llvm-project/clang/lib/Driver/DriverOptions.cpp:43:1; #9 0x0000000004324c6c cling::CompilerOptions::Parse(int, char const* const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14250:1488,Assert,Assertion,1488,https://root.cern,https://github.com/root-project/root/issues/14250,1,['Assert'],['Assertion']
Testability,-Fix the correct dependency of sofie tests. No ned to depend on protobuf; - Use weight file for Linear tests from ROOT; - Test also the case where the weight file is not present but the session is enabled; - Produce a runtime error when a weight file is enabled but the Session is disabled,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11529:37,test,tests,37,https://root.cern,https://github.com/root-project/root/pull/11529,3,"['Test', 'test']","['Test', 'tests']"
Testability,-callbacks ....................... Passed 8.60 sec; Start 368: gtest-tree-dataframe-test-dataframe-interface; Start 369: gtest-tree-dataframe-test-dataframe-nodes; 392/1231 Test #369: gtest-tree-dataframe-test-dataframe-nodes ........................... Passed 2.13 sec; Start 370: gtest-tree-dataframe-test-dataframe-regression; 393/1231 Test #367: gtest-tree-dataframe-test-dataframe-histomodels ..................... Passed 19.30 sec; Start 371: gtest-tree-dataframe-test-dataframe-utils; 394/1231 Test #371: gtest-tree-dataframe-test-dataframe-utils ........................... Passed 1.38 sec; Start 372: gtest-tree-dataframe-test-dataframe-report; 395/1231 Test #370: gtest-tree-dataframe-test-dataframe-regression ...................... Passed 12.11 sec; Start 373: gtest-tree-dataframe-test-dataframe-splitcoll-arrayview; 396/1231 Test #372: gtest-tree-dataframe-test-dataframe-report .......................... Passed 0.79 sec; Start 374: gtest-tree-dataframe-test-dataframe-redefine; 397/1231 Test #373: gtest-tree-dataframe-test-dataframe-splitcoll-arrayview ............. Passed 1.07 sec; Start 375: gtest-tree-dataframe-test-dataframe-definepersample; 398/1231 Test #374: gtest-tree-dataframe-test-dataframe-redefine ........................ Passed 3.63 sec; Start 376: gtest-tree-dataframe-test-dataframe-simple; 399/1231 Test #375: gtest-tree-dataframe-test-dataframe-definepersample ................. Passed 3.06 sec; Start 377: gtest-tree-dataframe-test-dataframe-helpers; 400/1231 Test #368: gtest-tree-dataframe-test-dataframe-interface ....................... Passed 21.83 sec; Start 378: gtest-tree-dataframe-test-dataframe-vecops; 401/1231 Test #378: gtest-tree-dataframe-test-dataframe-vecops .......................... Passed 3.95 sec; Start 379: gtest-tree-dataframe-test-dataframe-snapshot; 402/1231 Test #377: gtest-tree-dataframe-test-dataframe-helpers ......................... Passed 8.48 sec; Start 380: gtest-tree-dataframe-test-dataframe-display; 403/1231 Test #365: ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10300:2122,test,test-dataframe-redefine,2122,https://root.cern,https://github.com/root-project/root/pull/10300,3,"['Test', 'test']","['Test', 'test-dataframe-redefine', 'test-dataframe-splitcoll-arrayview']"
Testability,-dataframe-df005_fillAnyObject; 473/1231 Test #449: tutorial-dataframe-df002_dataModel .................................. Passed 9.46 sec; Start 453: tutorial-dataframe-df006_ranges; 474/1231 Test #451: tutorial-dataframe-df004_cutFlowReport .............................. Passed 6.28 sec; Start 454: tutorial-dataframe-df007_snapshot; 475/1231 Test #448: tutorial-dataframe-df001_introduction ............................... Passed 13.89 sec; Start 455: tutorial-dataframe-df008_createDataSetFromScratch; 476/1231 Test #452: tutorial-dataframe-df005_fillAnyObject .............................. Passed 6.60 sec; Start 456: tutorial-dataframe-df009_FromScratchVSTTree; 477/1231 Test #453: tutorial-dataframe-df006_ranges ..................................... Passed 7.33 sec; Start 457: tutorial-dataframe-df010_trivialDataSource; 478/1231 Test #455: tutorial-dataframe-df008_createDataSetFromScratch ................... Passed 3.90 sec; Start 458: tutorial-dataframe-df012_DefinesAndFiltersAsStrings; 479/1231 Test #394: gtest-tree-dataframe-test-dataframe-concurrency ..................... Passed 44.21 sec; Start 459: tutorial-dataframe-df014_CSVDataSource; 480/1231 Test #456: tutorial-dataframe-df009_FromScratchVSTTree ......................... Passed 4.16 sec; Start 460: tutorial-dataframe-df015_LazyDataSource; 481/1231 Test #454: tutorial-dataframe-df007_snapshot ................................... Passed 9.31 sec; Start 461: tutorial-dataframe-df016_vecOps; 482/1231 Test #457: tutorial-dataframe-df010_trivialDataSource .......................... Passed 3.32 sec; Start 462: tutorial-dataframe-df017_vecOpsHEP; 483/1231 Test #458: tutorial-dataframe-df012_DefinesAndFiltersAsStrings ................. Passed 5.07 sec; Start 463: tutorial-dataframe-df018_customActions; 484/1231 Test #461: tutorial-dataframe-df016_vecOps ..................................... Passed 3.80 sec; Start 464: tutorial-dataframe-df019_Cache; 485/1231 Test #462: tutorial-dataframe-df017_vecOpsHEP .............,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10300:8151,Test,Test,8151,https://root.cern,https://github.com/root-project/root/pull/10300,2,"['Test', 'test']","['Test', 'test-dataframe-concurrency']"
Testability,-leaves; 405/1231 Test #381: gtest-tree-dataframe-test-dataframe-ranges .......................... Passed 2.10 sec; Start 383: gtest-tree-dataframe-test-dataframe-resptr; 406/1231 Test #383: gtest-tree-dataframe-test-dataframe-resptr .......................... Passed 0.61 sec; Start 384: gtest-tree-dataframe-test-dataframe-take; 407/1231 Test #382: gtest-tree-dataframe-test-dataframe-leaves .......................... Passed 2.14 sec; Start 385: gtest-tree-dataframe-test-dataframe-entrylist; 408/1231 Test #385: gtest-tree-dataframe-test-dataframe-entrylist ....................... Passed 0.90 sec; Start 386: gtest-tree-dataframe-test-dataframe-merge-results; 409/1231 Test #386: gtest-tree-dataframe-test-dataframe-merge-results ................... Passed 0.54 sec; Start 387: gtest-tree-dataframe-test-dataframe-samplecallback; 410/1231 Test #384: gtest-tree-dataframe-test-dataframe-take ............................ Passed 2.19 sec; Start 388: gtest-tree-dataframe-test-dataframe-vary; 411/1231 Test #387: gtest-tree-dataframe-test-dataframe-samplecallback .................. Passed 1.09 sec; Start 389: gtest-tree-dataframe-test-datasource-more; 412/1231 Test #380: gtest-tree-dataframe-test-dataframe-display ......................... Passed 10.54 sec; Start 390: gtest-tree-dataframe-test-datasource-root; Start 391: gtest-tree-dataframe-test-datasource-trivial; 414/1231 Test #390: gtest-tree-dataframe-test-datasource-root ........................... Passed 4.54 sec; Start 392: gtest-tree-dataframe-test-datasource-lazy; 415/1231 Test #392: gtest-tree-dataframe-test-datasource-lazy ........................... Passed 0.28 sec; Start 393: gtest-tree-dataframe-test-datasource-csv; 416/1231 Test #388: gtest-tree-dataframe-test-dataframe-vary ............................ Passed 6.93 sec; Start 394: gtest-tree-dataframe-test-dataframe-concurrency; 417/1231 Test #379: gtest-tree-dataframe-test-dataframe-snapshot ........................ Passed 20.68 sec; Start 395: gtest-tree-datafram,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10300:4316,test,test-dataframe-vary,4316,https://root.cern,https://github.com/root-project/root/pull/10300,3,"['Test', 'test']","['Test', 'test-dataframe-samplecallback', 'test-dataframe-vary']"
Testability,"-pipe -W -Woverloaded-virtual -fsigned-char -pthread -DClingWorkAroundTClassUpdateDouble32 -I/usr/local/include/root -I/home/mkrzewic/build/root/roottest/root/meta/evolution -I""/usr/home/mkrzewic/build/root/etc/"" -I""/usr/home/mkrzewic/build/root/etc//cling"" -I""/usr/home/mkrzewic/build/root/etc//cling/plugins/include"" -I""/usr/home/mkrzewic/build/root/include/"" -I""/usr/home/mkrzewic/build/root/include"" -I""/home/mkrzewic/build/root/roottest/root/meta/evolution"" -D__ACLIC__ ""/home/mkrzewic/build/root/roottest/root/meta/evolution/data1_C_ACLiC_dict.cxx"" ; c++ -g ""/home/mkrzewic/build/root/roottest/root/meta/evolution/data1_C_ACLiC_dict.o"" -shared -rdynamic ""-lRint"" ""-lCore"" ""-L/usr/local/lib/root"" ""[vdso] -o ""/home/mkrzewic/build/root/roottest/root/meta/evolution/data1_C.so""' failed!; 1874: __cxa_thread_call_dtors: dtr 0x824a907b0 from unloaded dso, skipping; 1874: __cxa_thread_call_dtors: dtr 0x8231078f0 from unloaded dso, skipping; 1874: __cxa_thread_call_dtors: dtr 0x8231078f0 from unloaded dso, skipping; 1874: gmake[1]: *** [roottest/root/meta/evolution/CMakeFiles/roottest-root-meta-evolution-data1-compile-macro.dir/build.make:70: roottest/root/meta/evolution/CMakeFiles/roottest-root-meta-evolution-data1-compile-macro] Error 1; 1874: gmake: *** [Makefile:25710: roottest-root-meta-evolution-data1-compile-macro/fast] Error 2; 1/1 Test #1874: roottest-root-meta-evolution-data1-build ...***Failed 5.71 sec. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 6.86 sec. The following tests FAILED:; 1874 - roottest-root-meta-evolution-data1-build (Failed); Errors while running CTest; Output from these tests are in: /home/mkrzewic/build/root/Testing/Temporary/LastTest.log; Use ""--rerun-failed --output-on-failure"" to re-run the failed cases verbosely.; ```. ### Reproducer. ctest -j4 -R ""roottest-root-meta-evolution-data1-build"" -V. ### ROOT version. master. ### Installation method. source. ### Operating system. FreeBSD 13.2. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13080:3043,Test,Test,3043,https://root.cern,https://github.com/root-project/root/issues/13080,8,"['Test', 'log', 'test']","['Test', 'Testing', 'log', 'tests']"
Testability,"-roofit-roofitcore-test-testRooProdPdf test fails on s390x.; This is a big-endian architecture. See the log below.; The assert does not fail because the two values are the same with differnt byte order. The issue is more complicated than that::. $ printf '%x\n%x\n' 3649468902 2448666198; d98679e6; 91f3ae56. ### Expected behavior. Passing test on s390x. ### To Reproduce. 1. Build root for s390x; 2. Run unit tests. ### Setup. 1. ROOT version: 6.28.00; 2. Operating system: Fedora for s390x, RHEL+EPEL for s390x; 3. How you obtained ROOT: Compilation from source. ### Additional context. Thefailing test:; ~~~; 295/1272 Test #250: gtest-roofit-roofitcore-test-testRooProdPdf .........................***Failed 1.02 sec; Running main() from /builddir/build/BUILD/googletest-1.13.0/googletest/src/gtest_main.cc; Note: Google Test filter = -RCsvDS.Remote:RRawFile.Remote:RSqliteDS.Davix:TFile.ReadWithoutGlobalRegistrationWeb:TFile.ReadWithoutGlobalRegistrationNet:RNTuple.TClassEBO; [==========] Running 8 tests from 2 test suites.; [----------] Global test environment set-up.; [----------] 2 tests from RooProdPdf; [ RUN ] RooProdPdf.TestGetPartIntList; /builddir/build/BUILD/root-6.28.00/roofit/roofitcore/test/testRooProdPdf.cxx:146: Failure; Expected equality of these values:; hashRooProduct(prod); Which is: 3649468902; 2448666198; [ FAILED ] RooProdPdf.TestGetPartIntList (229 ms); [ RUN ] RooProdPdf.TestDepsAreCond; Warning in <RooNaNPacker>: Fast recovery from undefined function values only implemented for little-endian machines. If necessary, request an extension of functionality on https://root.cern; [ OK ] RooProdPdf.TestDepsAreCond (644 ms); [ DISABLED ] RooProdPdf.DISABLED_ChangeServerNormSetForProdPdfInAddPdf; [----------] 2 tests from RooProdPdf (873 ms total); [----------] 6 tests from RooProdPdf/TestProdPdf; [ RUN ] RooProdPdf/TestProdPdf.CachingOpt/opt0off; [ OK ] RooProdPdf/TestProdPdf.CachingOpt/opt0off (17 ms); [ RUN ] RooProdPdf/TestProdPdf.CachingOpt/opt0cpu; [ OK ]",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12430:1066,test,tests,1066,https://root.cern,https://github.com/root-project/root/issues/12430,2,['test'],"['test', 'tests']"
Testability,-test-dataframe-entrylist ....................... Passed 0.90 sec; Start 386: gtest-tree-dataframe-test-dataframe-merge-results; 409/1231 Test #386: gtest-tree-dataframe-test-dataframe-merge-results ................... Passed 0.54 sec; Start 387: gtest-tree-dataframe-test-dataframe-samplecallback; 410/1231 Test #384: gtest-tree-dataframe-test-dataframe-take ............................ Passed 2.19 sec; Start 388: gtest-tree-dataframe-test-dataframe-vary; 411/1231 Test #387: gtest-tree-dataframe-test-dataframe-samplecallback .................. Passed 1.09 sec; Start 389: gtest-tree-dataframe-test-datasource-more; 412/1231 Test #380: gtest-tree-dataframe-test-dataframe-display ......................... Passed 10.54 sec; Start 390: gtest-tree-dataframe-test-datasource-root; Start 391: gtest-tree-dataframe-test-datasource-trivial; 414/1231 Test #390: gtest-tree-dataframe-test-datasource-root ........................... Passed 4.54 sec; Start 392: gtest-tree-dataframe-test-datasource-lazy; 415/1231 Test #392: gtest-tree-dataframe-test-datasource-lazy ........................... Passed 0.28 sec; Start 393: gtest-tree-dataframe-test-datasource-csv; 416/1231 Test #388: gtest-tree-dataframe-test-dataframe-vary ............................ Passed 6.93 sec; Start 394: gtest-tree-dataframe-test-dataframe-concurrency; 417/1231 Test #379: gtest-tree-dataframe-test-dataframe-snapshot ........................ Passed 20.68 sec; Start 395: gtest-tree-dataframe-test-datasource-ntuple; 418/1231 Test #389: gtest-tree-dataframe-test-datasource-more ........................... Passed 7.48 sec; Start 396: gtest-tree-dataframe-test-datasource-sqlite; 419/1231 Test #395: gtest-tree-dataframe-test-datasource-ntuple ......................... Passed 1.80 sec; Start 397: pyunittests-dataframe-misc; 420/1231 Test #393: gtest-tree-dataframe-test-datasource-csv ............................ Passed 3.56 sec; Start 398: pyunittests-dataframe-histograms; 421/1231 Test #391: gtest-tree-dataframe-test-dat,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10300:4856,test,test-datasource-lazy,4856,https://root.cern,https://github.com/root-project/root/pull/10300,3,"['Test', 'test']","['Test', 'test-datasource-lazy']"
Testability,-tree-dataframe-test-dataframe-simple .......................... Passed 38.57 sec; 447/1231 Test #399: pyunittests-dataframe-cache ......................................... Passed 10.50 sec; Start 447: tutorial-dataframe-df000_simple; Start 448: tutorial-dataframe-df001_introduction; Start 449: tutorial-dataframe-df002_dataModel; 470/1231 Test #447: tutorial-dataframe-df000_simple ..................................... Passed 2.85 sec; Start 450: tutorial-dataframe-df003_profiles; Start 451: tutorial-dataframe-df004_cutFlowReport; 472/1231 Test #450: tutorial-dataframe-df003_profiles ................................... Passed 5.31 sec; Start 452: tutorial-dataframe-df005_fillAnyObject; 473/1231 Test #449: tutorial-dataframe-df002_dataModel .................................. Passed 9.46 sec; Start 453: tutorial-dataframe-df006_ranges; 474/1231 Test #451: tutorial-dataframe-df004_cutFlowReport .............................. Passed 6.28 sec; Start 454: tutorial-dataframe-df007_snapshot; 475/1231 Test #448: tutorial-dataframe-df001_introduction ............................... Passed 13.89 sec; Start 455: tutorial-dataframe-df008_createDataSetFromScratch; 476/1231 Test #452: tutorial-dataframe-df005_fillAnyObject .............................. Passed 6.60 sec; Start 456: tutorial-dataframe-df009_FromScratchVSTTree; 477/1231 Test #453: tutorial-dataframe-df006_ranges ..................................... Passed 7.33 sec; Start 457: tutorial-dataframe-df010_trivialDataSource; 478/1231 Test #455: tutorial-dataframe-df008_createDataSetFromScratch ................... Passed 3.90 sec; Start 458: tutorial-dataframe-df012_DefinesAndFiltersAsStrings; 479/1231 Test #394: gtest-tree-dataframe-test-dataframe-concurrency ..................... Passed 44.21 sec; Start 459: tutorial-dataframe-df014_CSVDataSource; 480/1231 Test #456: tutorial-dataframe-df009_FromScratchVSTTree ......................... Passed 4.16 sec; Start 460: tutorial-dataframe-df015_LazyDataSource; 481/1231 Test #454:,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10300:7485,Test,Test,7485,https://root.cern,https://github.com/root-project/root/pull/10300,1,['Test'],['Test']
Testability,". ### Describe the bug; We have a long-running service which reads some information from ROOT files and we have noticed that this service regularly grows its memory use until it consumes all available memory and gets killed. I think I have tracked it down to reading one particular object type `TMap`. We have relatively large `TMap` object stored in files, the key in TMap is `TObjString` and values are `TObjArray` of `TObjString`. Every time when TMap is read from a file the memory use grows dramatically by many megabytes, even though the Python object is discarded almost immediately after use. ### Expected behavior; Memory use should not grow indefinitely, memory should be deallocated when Python object is destroyed. ### To Reproduce; I managed to reproduce this issue with a simple script, attached here:; ```python; import os; import tempfile. import psutil; import ROOT. def main():. proc = psutil.Process(). with tempfile.TemporaryDirectory() as tmpdir:. file_name = os.path.join(tmpdir, ""testfile.root""); print(""Creating test root file"", file_name); _make_file_with_tmap(file_name). mem0 = proc.memory_info(); rootfile = ROOT.TFile.Open(file_name, ""READ""); while True:. ann_obj = rootfile.Get(""annotations""); # ann_obj.DeleteAll() # DeleteAll seems to slow leak but not 100%; del ann_obj. mem1 = proc.memory_info(); _memstat(mem0, mem1); mem0 = mem1. def _make_file_with_tmap(file_name):. rootfile = ROOT.TFile.Open(file_name, ""RECREATE""). map = ROOT.TMap(). for i in range(50_000):. key = ROOT.TObjString(""long_histogram_name_"" * 10 + str(i)); value = ROOT.TObjArray(); value.Add(ROOT.TObjString(""annotation"")); value.Add(ROOT.TObjString(f""10000"")); map.Add(key, value). rootfile.WriteTObject(map, ""annotations""); rootfile.Close(). def _memstat(mem0, mem1):; MB = 1024 * 1024; rss_mb = mem1.rss // MB; vms_mb = mem1.vms // MB; rss_delta_mb = (mem1.rss - mem0.rss) / MB; vms_delta_mb = (mem1.vms - mem0.vms) / MB; print(f""Memory stat: RSS={rss_mb} MB, VMS={vms_mb} MB. Delta RSS={rss_de",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11099:1031,test,testfile,1031,https://root.cern,https://github.com/root-project/root/issues/11099,1,['test'],['testfile']
Testability,". Explicitly linked the core library against `libatomic`. This is necessary on some platforms in order to use the atomic operations performed by the library. ## Changes or fixes:. The current master branch, without the fix, produces the following build error on Raspberry Pi OS with GCC 11. (Though the exact GCC version doesn't matter much, just that it would not be the built-in GCC 6.3 coming with the OS.). ```; [100%] Linking CXX executable src/rootcling_stage1; ../foundation/CMakeFiles/Foundation_Stage1.dir/src/RLogger.cxx.o: In function `ROOT::Experimental::RLogManager::Emit(ROOT::Experimental::RLogEntry const&)':; RLogger.cxx:(.text+0x99c): undefined reference to `__atomic_fetch_add_8'; RLogger.cxx:(.text+0x9c8): undefined reference to `__atomic_fetch_add_8'; RLogger.cxx:(.text+0x9e8): undefined reference to `__atomic_fetch_add_8'; RLogger.cxx:(.text+0xa08): undefined reference to `__atomic_fetch_add_8'; RLogger.cxx:(.text+0xa30): undefined reference to `__atomic_fetch_add_8'; ../foundation/CMakeFiles/Foundation_Stage1.dir/src/RLogger.cxx.o:RLogger.cxx:(.text+0xa58): more undefined references to `__atomic_fetch_add_8' follow; collect2: error: ld returned 1 exit status; core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/build.make:242: recipe for target 'core/rootcling_stage1/src/rootcling_stage1' failed; make[3]: *** [core/rootcling_stage1/src/rootcling_stage1] Error 1; CMakeFiles/Makefile2:26106: recipe for target 'core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/all' failed; make[2]: *** [core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/all] Error 2; CMakeFiles/Makefile2:26113: recipe for target 'core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/rule' failed; make[1]: *** [core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/rule] Error 2; Makefile:8132: recipe for target 'rootcling_stage1' failed; make: *** [rootcling_stage1] Error 2; ```. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary) - **Not applicable**",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9987:1938,test,tested,1938,https://root.cern,https://github.com/root-project/root/pull/9987,1,['test'],['tested']
Testability,". It is still backwards compatible, but the new functionality can be accessed through a new `create` template factory function. This template function allows users to pass in their own calculation back-ends, e.g. for calculating on GPUs or in autograd enabled frameworks. The commit history also contains the proof of concept version, the benchmark results of which were presented at [ACAT19](https://indico.cern.ch/event/708041/contributions/3276177/) and [CHEP19](https://doi.org/10.1051/epjconf/202024506027) (and [preliminary results at the 2018 ROOT Users workshop in Sarajevo](https://indico.cern.ch/event/697389/contributions/3062028/)). That version was redesigned starting from 2019 to better integrate with the rest of the code and at the same time untangle the test statistics classes to conceptually bring them closer to the math, instead of the more implementation-detail oriented existing design (RooAbsTestStatistic et al.). The new packages include the following tests, which should probably still be added to the testing infrastructure somehow:. 1. MultiProcess:; 1. test_RooFitMultiProcess_Messenger; 2. test_RooFitMultiProcess_ProcessManager; 3. test_RooFitMultiProcess_Job; 2. TestStatistics:; 1. testLikelihoodGradientJob; 2. testLikelihoodSerial; 3. testRooRealL; 3. RooFitZMQ:; 1. test_RooFitZMQ; 2. test_RooFitZMQ_polling; 3. test_RooFitZMQ_HWM; 4. test_RooFitZMQ_load_balancing; 4. RooFitCore:; 1. testRooGradMinimizer; 2. testBidirMMapPipe; 3. testMPFEnll. From my side (and that of the NL eScience Center), the project has ended and time has run out to make any further major contributions to it, except, of course finishing this PR and providing help to get it working and to possibly hand over further development :). Here are some notes for possible future work:; - RooFitZMQ includes an extension of ZeroMQ itself: a ppoll function. This function should ideally be contributed to ZeroMQ, but I have had no time for this. The motivation behind ppoll is given in this [blo",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8294:3980,test,tests,3980,https://root.cern,https://github.com/root-project/root/pull/8294,2,['test'],"['testing', 'tests']"
Testability,. Passed 3.40 sec; 444/1231 Test #400: pyunittests-dataframe-merge-results ................................. Passed 4.48 sec; 446/1231 Test #376: gtest-tree-dataframe-test-dataframe-simple .......................... Passed 38.57 sec; 447/1231 Test #399: pyunittests-dataframe-cache ......................................... Passed 10.50 sec; Start 447: tutorial-dataframe-df000_simple; Start 448: tutorial-dataframe-df001_introduction; Start 449: tutorial-dataframe-df002_dataModel; 470/1231 Test #447: tutorial-dataframe-df000_simple ..................................... Passed 2.85 sec; Start 450: tutorial-dataframe-df003_profiles; Start 451: tutorial-dataframe-df004_cutFlowReport; 472/1231 Test #450: tutorial-dataframe-df003_profiles ................................... Passed 5.31 sec; Start 452: tutorial-dataframe-df005_fillAnyObject; 473/1231 Test #449: tutorial-dataframe-df002_dataModel .................................. Passed 9.46 sec; Start 453: tutorial-dataframe-df006_ranges; 474/1231 Test #451: tutorial-dataframe-df004_cutFlowReport .............................. Passed 6.28 sec; Start 454: tutorial-dataframe-df007_snapshot; 475/1231 Test #448: tutorial-dataframe-df001_introduction ............................... Passed 13.89 sec; Start 455: tutorial-dataframe-df008_createDataSetFromScratch; 476/1231 Test #452: tutorial-dataframe-df005_fillAnyObject .............................. Passed 6.60 sec; Start 456: tutorial-dataframe-df009_FromScratchVSTTree; 477/1231 Test #453: tutorial-dataframe-df006_ranges ..................................... Passed 7.33 sec; Start 457: tutorial-dataframe-df010_trivialDataSource; 478/1231 Test #455: tutorial-dataframe-df008_createDataSetFromScratch ................... Passed 3.90 sec; Start 458: tutorial-dataframe-df012_DefinesAndFiltersAsStrings; 479/1231 Test #394: gtest-tree-dataframe-test-dataframe-concurrency ..................... Passed 44.21 sec; Start 459: tutorial-dataframe-df014_CSVDataSource; 480/1231 Test #456: tutori,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10300:7332,Test,Test,7332,https://root.cern,https://github.com/root-project/root/pull/10300,1,['Test'],['Test']
Testability,". ```Nix; {; inputs.flake-utils.url = ""github:numtide/flake-utils"";; inputs.nixpkgs.url = ""github:NixOS/nixpkgs/2787fc7d1e51404678614bf0fe92fc296746eec0"";. outputs = { flake-utils, nixpkgs, ... }: flake-utils.lib.eachDefaultSystem (system:; let; lib = nixpkgs.lib;; pkgs = nixpkgs.legacyPackages.${system};; root = with pkgs; callPackage ./. {; python = python3;; inherit (darwin.apple_sdk.frameworks) Cocoa CoreSymbolication OpenGL;; # https://github.com/NixOS/nixpkgs/issues/201254; stdenv = if stdenv.isLinux && stdenv.isAarch64 && stdenv.cc.isGNU then gcc11Stdenv else stdenv;; };; in; {; packages = {; default = root;; inherit root;; };; });; }; ```. `flake.lock`. ```JSON; {; ""nodes"": {; ""flake-utils"": {; ""locked"": {; ""lastModified"": 1667395993,; ""narHash"": ""sha256-nuEHfE/LcWyuSWnS8t12N1wc105Qtau+/OdUAjtQ0rA="",; ""owner"": ""numtide"",; ""repo"": ""flake-utils"",; ""rev"": ""5aed5285a952e0b949eb3ba02c12fa4fcfef535f"",; ""type"": ""github""; },; ""original"": {; ""owner"": ""numtide"",; ""repo"": ""flake-utils"",; ""type"": ""github""; }; },; ""nixpkgs"": {; ""locked"": {; ""lastModified"": 1670507980,; ""narHash"": ""sha256-riNZa0xzM1it3pzxciwALeMs+0CsBMWIW2FqulzK8vM="",; ""owner"": ""NixOS"",; ""repo"": ""nixpkgs"",; ""rev"": ""2787fc7d1e51404678614bf0fe92fc296746eec0"",; ""type"": ""github""; },; ""original"": {; ""owner"": ""NixOS"",; ""repo"": ""nixpkgs"",; ""rev"": ""2787fc7d1e51404678614bf0fe92fc296746eec0"",; ""type"": ""github""; }; },; ""root"": {; ""inputs"": {; ""flake-utils"": ""flake-utils"",; ""nixpkgs"": ""nixpkgs""; }; }; },; ""root"": ""root"",; ""version"": 7; }; ```. 4. Run `nix --extra-experimental-features 'nix-command flakes' build --no-link --keep-failed --print-build-logs ./test-root-6.27#root`. If `nix` is not available, run `docker run -ti -v ""$PWD:/mnt"" -v /tmp:/tmp --rm nixos/nix nix --extra-experimental-features 'nix-command flakes' build --no-link --keep-failed --print-build-logs /mnt/test-root-6.27#root` instead.; 5. The remaining build directory can be found inside `/tmp`, with a folder name like `nix-build-root-6.27.00.drv-*`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11920:10260,log,logs,10260,https://root.cern,https://github.com/root-project/root/issues/11920,4,"['log', 'test']","['logs', 'test-root-']"
Testability,... Passed 44.21 sec; Start 459: tutorial-dataframe-df014_CSVDataSource; 480/1231 Test #456: tutorial-dataframe-df009_FromScratchVSTTree ......................... Passed 4.16 sec; Start 460: tutorial-dataframe-df015_LazyDataSource; 481/1231 Test #454: tutorial-dataframe-df007_snapshot ................................... Passed 9.31 sec; Start 461: tutorial-dataframe-df016_vecOps; 482/1231 Test #457: tutorial-dataframe-df010_trivialDataSource .......................... Passed 3.32 sec; Start 462: tutorial-dataframe-df017_vecOpsHEP; 483/1231 Test #458: tutorial-dataframe-df012_DefinesAndFiltersAsStrings ................. Passed 5.07 sec; Start 463: tutorial-dataframe-df018_customActions; 484/1231 Test #461: tutorial-dataframe-df016_vecOps ..................................... Passed 3.80 sec; Start 464: tutorial-dataframe-df019_Cache; 485/1231 Test #462: tutorial-dataframe-df017_vecOpsHEP .................................. Passed 4.31 sec; Start 465: tutorial-dataframe-df020_helpers; 486/1231 Test #459: tutorial-dataframe-df014_CSVDataSource .............................. Passed 6.87 sec; Start 466: tutorial-dataframe-df021_createTGraph; 487/1231 Test #460: tutorial-dataframe-df015_LazyDataSource ............................. Passed 6.11 sec; Start 467: tutorial-dataframe-df022_useKahan; 488/1231 Test #463: tutorial-dataframe-df018_customActions .............................. Passed 3.66 sec; Start 468: tutorial-dataframe-df023_aggregate; 489/1231 Test #466: tutorial-dataframe-df021_createTGraph ............................... Passed 2.94 sec; Start 469: tutorial-dataframe-df024_Display; 490/1231 Test #467: tutorial-dataframe-df022_useKahan ................................... Passed 3.26 sec; Start 470: tutorial-dataframe-df025_RNode; 491/1231 Test #465: tutorial-dataframe-df020_helpers .................................... Passed 3.82 sec; Start 471: tutorial-dataframe-df031_Stats; 492/1231 Test #468: tutorial-dataframe-df023_aggregate .................................,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10300:9234,Test,Test,9234,https://root.cern,https://github.com/root-project/root/pull/10300,1,['Test'],['Test']
Testability,"... ok; test_transpose (rtensor.NumpyCompliance.test_transpose); Test np.transpose vs RTensor::Transpose ... FAIL; ======================================================================; FAIL: test_memoryLayout (rtensor.AsRTensor.test_memoryLayout); Test adoption of the memory layout; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""/builddir/build/BUILD/root-6.28.00/bindings/pyroot/pythonizations/test/rtensor.py"", line 42, in test_memoryLayout; self.assertEqual(root_obj.GetMemoryLayout(), 1); AssertionError: 16777216 != 1; ======================================================================; FAIL: test_reshape (rtensor.NumpyCompliance.test_reshape); Test np.reshape vs RTensor::Reshape; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""/builddir/build/BUILD/root-6.28.00/bindings/pyroot/pythonizations/test/rtensor.py"", line 218, in test_reshape; self.assertEqual(x.GetMemoryLayout(), 1); AssertionError: 16777216 != 1; ======================================================================; FAIL: test_transpose (rtensor.NumpyCompliance.test_transpose); Test np.transpose vs RTensor::Transpose; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""/builddir/build/BUILD/root-6.28.00/bindings/pyroot/pythonizations/test/rtensor.py"", line 151, in test_transpose; self.assertEqual(x.GetMemoryLayout(), 1); AssertionError: 16777216 != 1; ----------------------------------------------------------------------; Ran 11 tests in 2.036s; FAILED (failures=3); CMake Error at /builddir/build/BUILD/root-6.28.00/cmake/modules/RootTestDriver.cmake:232 (message):; error code: 1; ~~~. #### pyunittests-pyroot-pyz-stl-vector; ~~~; 61/1272 Test #18: pyunittests-pyroot-pyz-stl-vector ...................................***Failed 0.84 sec; test_vec_char_data (stl_vector.STL_vector.test_vec_char_data); Test that ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12429:2648,assert,assertEqual,2648,https://root.cern,https://github.com/root-project/root/issues/12429,1,['assert'],['assertEqual']
Testability,..... Passed 3.56 sec; Start 398: pyunittests-dataframe-histograms; 421/1231 Test #391: gtest-tree-dataframe-test-datasource-trivial ........................ Passed 6.48 sec; Start 399: pyunittests-dataframe-cache; 422/1231 Test #396: gtest-tree-dataframe-test-datasource-sqlite ......................... Passed 4.60 sec; Start 400: pyunittests-dataframe-merge-results; 423/1231 Test #397: pyunittests-dataframe-misc .......................................... Passed 3.66 sec; 424/1231 Test #398: pyunittests-dataframe-histograms .................................... Passed 3.40 sec; 444/1231 Test #400: pyunittests-dataframe-merge-results ................................. Passed 4.48 sec; 446/1231 Test #376: gtest-tree-dataframe-test-dataframe-simple .......................... Passed 38.57 sec; 447/1231 Test #399: pyunittests-dataframe-cache ......................................... Passed 10.50 sec; Start 447: tutorial-dataframe-df000_simple; Start 448: tutorial-dataframe-df001_introduction; Start 449: tutorial-dataframe-df002_dataModel; 470/1231 Test #447: tutorial-dataframe-df000_simple ..................................... Passed 2.85 sec; Start 450: tutorial-dataframe-df003_profiles; Start 451: tutorial-dataframe-df004_cutFlowReport; 472/1231 Test #450: tutorial-dataframe-df003_profiles ................................... Passed 5.31 sec; Start 452: tutorial-dataframe-df005_fillAnyObject; 473/1231 Test #449: tutorial-dataframe-df002_dataModel .................................. Passed 9.46 sec; Start 453: tutorial-dataframe-df006_ranges; 474/1231 Test #451: tutorial-dataframe-df004_cutFlowReport .............................. Passed 6.28 sec; Start 454: tutorial-dataframe-df007_snapshot; 475/1231 Test #448: tutorial-dataframe-df001_introduction ............................... Passed 13.89 sec; Start 455: tutorial-dataframe-df008_createDataSetFromScratch; 476/1231 Test #452: tutorial-dataframe-df005_fillAnyObject .............................. Passed 6.60 sec; Start 456,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10300:6819,Test,Test,6819,https://root.cern,https://github.com/root-project/root/pull/10300,1,['Test'],['Test']
Testability,....... Passed 4.16 sec; Start 460: tutorial-dataframe-df015_LazyDataSource; 481/1231 Test #454: tutorial-dataframe-df007_snapshot ................................... Passed 9.31 sec; Start 461: tutorial-dataframe-df016_vecOps; 482/1231 Test #457: tutorial-dataframe-df010_trivialDataSource .......................... Passed 3.32 sec; Start 462: tutorial-dataframe-df017_vecOpsHEP; 483/1231 Test #458: tutorial-dataframe-df012_DefinesAndFiltersAsStrings ................. Passed 5.07 sec; Start 463: tutorial-dataframe-df018_customActions; 484/1231 Test #461: tutorial-dataframe-df016_vecOps ..................................... Passed 3.80 sec; Start 464: tutorial-dataframe-df019_Cache; 485/1231 Test #462: tutorial-dataframe-df017_vecOpsHEP .................................. Passed 4.31 sec; Start 465: tutorial-dataframe-df020_helpers; 486/1231 Test #459: tutorial-dataframe-df014_CSVDataSource .............................. Passed 6.87 sec; Start 466: tutorial-dataframe-df021_createTGraph; 487/1231 Test #460: tutorial-dataframe-df015_LazyDataSource ............................. Passed 6.11 sec; Start 467: tutorial-dataframe-df022_useKahan; 488/1231 Test #463: tutorial-dataframe-df018_customActions .............................. Passed 3.66 sec; Start 468: tutorial-dataframe-df023_aggregate; 489/1231 Test #466: tutorial-dataframe-df021_createTGraph ............................... Passed 2.94 sec; Start 469: tutorial-dataframe-df024_Display; 490/1231 Test #467: tutorial-dataframe-df022_useKahan ................................... Passed 3.26 sec; Start 470: tutorial-dataframe-df025_RNode; 491/1231 Test #465: tutorial-dataframe-df020_helpers .................................... Passed 3.82 sec; Start 471: tutorial-dataframe-df031_Stats; 492/1231 Test #468: tutorial-dataframe-df023_aggregate .................................. Passed 2.25 sec; 498/1231 Test #470: tutorial-dataframe-df025_RNode ...................................... Passed 2.80 sec; 502/1231 Test #464: tutorial-,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10300:9391,Test,Test,9391,https://root.cern,https://github.com/root-project/root/pull/10300,1,['Test'],['Test']
Testability,......... Passed 10.50 sec; Start 447: tutorial-dataframe-df000_simple; Start 448: tutorial-dataframe-df001_introduction; Start 449: tutorial-dataframe-df002_dataModel; 470/1231 Test #447: tutorial-dataframe-df000_simple ..................................... Passed 2.85 sec; Start 450: tutorial-dataframe-df003_profiles; Start 451: tutorial-dataframe-df004_cutFlowReport; 472/1231 Test #450: tutorial-dataframe-df003_profiles ................................... Passed 5.31 sec; Start 452: tutorial-dataframe-df005_fillAnyObject; 473/1231 Test #449: tutorial-dataframe-df002_dataModel .................................. Passed 9.46 sec; Start 453: tutorial-dataframe-df006_ranges; 474/1231 Test #451: tutorial-dataframe-df004_cutFlowReport .............................. Passed 6.28 sec; Start 454: tutorial-dataframe-df007_snapshot; 475/1231 Test #448: tutorial-dataframe-df001_introduction ............................... Passed 13.89 sec; Start 455: tutorial-dataframe-df008_createDataSetFromScratch; 476/1231 Test #452: tutorial-dataframe-df005_fillAnyObject .............................. Passed 6.60 sec; Start 456: tutorial-dataframe-df009_FromScratchVSTTree; 477/1231 Test #453: tutorial-dataframe-df006_ranges ..................................... Passed 7.33 sec; Start 457: tutorial-dataframe-df010_trivialDataSource; 478/1231 Test #455: tutorial-dataframe-df008_createDataSetFromScratch ................... Passed 3.90 sec; Start 458: tutorial-dataframe-df012_DefinesAndFiltersAsStrings; 479/1231 Test #394: gtest-tree-dataframe-test-dataframe-concurrency ..................... Passed 44.21 sec; Start 459: tutorial-dataframe-df014_CSVDataSource; 480/1231 Test #456: tutorial-dataframe-df009_FromScratchVSTTree ......................... Passed 4.16 sec; Start 460: tutorial-dataframe-df015_LazyDataSource; 481/1231 Test #454: tutorial-dataframe-df007_snapshot ................................... Passed 9.31 sec; Start 461: tutorial-dataframe-df016_vecOps; 482/1231 Test #457: tutorial-d,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10300:7655,Test,Test,7655,https://root.cern,https://github.com/root-project/root/pull/10300,1,['Test'],['Test']
Testability,......... Passed 3.32 sec; Start 462: tutorial-dataframe-df017_vecOpsHEP; 483/1231 Test #458: tutorial-dataframe-df012_DefinesAndFiltersAsStrings ................. Passed 5.07 sec; Start 463: tutorial-dataframe-df018_customActions; 484/1231 Test #461: tutorial-dataframe-df016_vecOps ..................................... Passed 3.80 sec; Start 464: tutorial-dataframe-df019_Cache; 485/1231 Test #462: tutorial-dataframe-df017_vecOpsHEP .................................. Passed 4.31 sec; Start 465: tutorial-dataframe-df020_helpers; 486/1231 Test #459: tutorial-dataframe-df014_CSVDataSource .............................. Passed 6.87 sec; Start 466: tutorial-dataframe-df021_createTGraph; 487/1231 Test #460: tutorial-dataframe-df015_LazyDataSource ............................. Passed 6.11 sec; Start 467: tutorial-dataframe-df022_useKahan; 488/1231 Test #463: tutorial-dataframe-df018_customActions .............................. Passed 3.66 sec; Start 468: tutorial-dataframe-df023_aggregate; 489/1231 Test #466: tutorial-dataframe-df021_createTGraph ............................... Passed 2.94 sec; Start 469: tutorial-dataframe-df024_Display; 490/1231 Test #467: tutorial-dataframe-df022_useKahan ................................... Passed 3.26 sec; Start 470: tutorial-dataframe-df025_RNode; 491/1231 Test #465: tutorial-dataframe-df020_helpers .................................... Passed 3.82 sec; Start 471: tutorial-dataframe-df031_Stats; 492/1231 Test #468: tutorial-dataframe-df023_aggregate .................................. Passed 2.25 sec; 498/1231 Test #470: tutorial-dataframe-df025_RNode ...................................... Passed 2.80 sec; 502/1231 Test #464: tutorial-dataframe-df019_Cache ...................................... Passed 7.71 sec; 506/1231 Test #471: tutorial-dataframe-df031_Stats ...................................... Passed 3.82 sec; 507/1231 Test #469: tutorial-dataframe-df024_Display .................................... Passed 4.58 sec; Start 1071: tut,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10300:9698,Test,Test,9698,https://root.cern,https://github.com/root-project/root/pull/10300,1,['Test'],['Test']
Testability,........... Passed 9.31 sec; Start 461: tutorial-dataframe-df016_vecOps; 482/1231 Test #457: tutorial-dataframe-df010_trivialDataSource .......................... Passed 3.32 sec; Start 462: tutorial-dataframe-df017_vecOpsHEP; 483/1231 Test #458: tutorial-dataframe-df012_DefinesAndFiltersAsStrings ................. Passed 5.07 sec; Start 463: tutorial-dataframe-df018_customActions; 484/1231 Test #461: tutorial-dataframe-df016_vecOps ..................................... Passed 3.80 sec; Start 464: tutorial-dataframe-df019_Cache; 485/1231 Test #462: tutorial-dataframe-df017_vecOpsHEP .................................. Passed 4.31 sec; Start 465: tutorial-dataframe-df020_helpers; 486/1231 Test #459: tutorial-dataframe-df014_CSVDataSource .............................. Passed 6.87 sec; Start 466: tutorial-dataframe-df021_createTGraph; 487/1231 Test #460: tutorial-dataframe-df015_LazyDataSource ............................. Passed 6.11 sec; Start 467: tutorial-dataframe-df022_useKahan; 488/1231 Test #463: tutorial-dataframe-df018_customActions .............................. Passed 3.66 sec; Start 468: tutorial-dataframe-df023_aggregate; 489/1231 Test #466: tutorial-dataframe-df021_createTGraph ............................... Passed 2.94 sec; Start 469: tutorial-dataframe-df024_Display; 490/1231 Test #467: tutorial-dataframe-df022_useKahan ................................... Passed 3.26 sec; Start 470: tutorial-dataframe-df025_RNode; 491/1231 Test #465: tutorial-dataframe-df020_helpers .................................... Passed 3.82 sec; Start 471: tutorial-dataframe-df031_Stats; 492/1231 Test #468: tutorial-dataframe-df023_aggregate .................................. Passed 2.25 sec; 498/1231 Test #470: tutorial-dataframe-df025_RNode ...................................... Passed 2.80 sec; 502/1231 Test #464: tutorial-dataframe-df019_Cache ...................................... Passed 7.71 sec; 506/1231 Test #471: tutorial-dataframe-df031_Stats .........................,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10300:9544,Test,Test,9544,https://root.cern,https://github.com/root-project/root/pull/10300,1,['Test'],['Test']
Testability,............ Passed 5.07 sec; Start 463: tutorial-dataframe-df018_customActions; 484/1231 Test #461: tutorial-dataframe-df016_vecOps ..................................... Passed 3.80 sec; Start 464: tutorial-dataframe-df019_Cache; 485/1231 Test #462: tutorial-dataframe-df017_vecOpsHEP .................................. Passed 4.31 sec; Start 465: tutorial-dataframe-df020_helpers; 486/1231 Test #459: tutorial-dataframe-df014_CSVDataSource .............................. Passed 6.87 sec; Start 466: tutorial-dataframe-df021_createTGraph; 487/1231 Test #460: tutorial-dataframe-df015_LazyDataSource ............................. Passed 6.11 sec; Start 467: tutorial-dataframe-df022_useKahan; 488/1231 Test #463: tutorial-dataframe-df018_customActions .............................. Passed 3.66 sec; Start 468: tutorial-dataframe-df023_aggregate; 489/1231 Test #466: tutorial-dataframe-df021_createTGraph ............................... Passed 2.94 sec; Start 469: tutorial-dataframe-df024_Display; 490/1231 Test #467: tutorial-dataframe-df022_useKahan ................................... Passed 3.26 sec; Start 470: tutorial-dataframe-df025_RNode; 491/1231 Test #465: tutorial-dataframe-df020_helpers .................................... Passed 3.82 sec; Start 471: tutorial-dataframe-df031_Stats; 492/1231 Test #468: tutorial-dataframe-df023_aggregate .................................. Passed 2.25 sec; 498/1231 Test #470: tutorial-dataframe-df025_RNode ...................................... Passed 2.80 sec; 502/1231 Test #464: tutorial-dataframe-df019_Cache ...................................... Passed 7.71 sec; 506/1231 Test #471: tutorial-dataframe-df031_Stats ...................................... Passed 3.82 sec; 507/1231 Test #469: tutorial-dataframe-df024_Display .................................... Passed 4.58 sec; Start 1071: tutorial-dataframe-df000_simple-py; Start 1072: tutorial-dataframe-df001_introduction-py; Start 1073: tutorial-dataframe-df002_dataModel-py; Start 1074: t,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10300:9850,Test,Test,9850,https://root.cern,https://github.com/root-project/root/pull/10300,1,['Test'],['Test']
Testability,"............... OK; PxPyPzEVector creation 		................ OK; PxPyPzEVector addition 		................ OK; PxPyPzEVector creation 		................ OK; PxPyPzEVector setting 		................ OK; PxPyPzEVector -> PxPyPzMVector 		................ OK; Vector conversion 		................ OK; PxPyPzEVector operations 		..............; PxPyPzMVector operations 		................ OK; PxPyPzEVector delta values 		..............; PxPyPzMVector delta values 		................ OK; PxPyPzEVector write 		................ OK; PxPyPzEVector read 		................ OK; PxPyPzEVector after read 		................ OK; PxPyPzMVector write 		................ OK; PxPyPzMVector read 		................ OK; PxPyPzMVector after read 		................ OK; PxPyPzEVector_D32 write 		................ OK; PxPyPzEVector_D32 read 		................ OK; PxPyPzEVector_D32 after read 		................ OK; ******************************************************************************; 	Test of SMatrix package; ******************************************************************************; SVector<double,3> creation 		................ OK; SVector<double,3> addition 		................ OK; SVector<double,3> write 		................ OK; SVector<double,3> read 		................ OK; SVector<double,3> after read 		................ OK; SVector3_D32 write 		................ OK; SVector3_D32 read 		................ OK; SVector3_D32 after read 		................ OK; SVector<double,4> creation 		................ OK; SVector<double,4> addition 		................ OK; SVector<double,4> write 		................ OK; SVector<double,4> read 		................ OK; SVector<double,4> after read 		................ OK; SVector4_D32 write 		................ OK; SVector4_D32 read 		................ OK; SVector4_D32 after read 		................ OK; SVector<double,6> creation 		................ OK; SVector<double,6> addition 		................ OK; SVector<double,6> write 		................ OK; SVector<double,6> read ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/401:6887,Test,Test,6887,https://root.cern,https://github.com/root-project/root/pull/401,1,['Test'],['Test']
Testability,................... Passed 4.31 sec; Start 465: tutorial-dataframe-df020_helpers; 486/1231 Test #459: tutorial-dataframe-df014_CSVDataSource .............................. Passed 6.87 sec; Start 466: tutorial-dataframe-df021_createTGraph; 487/1231 Test #460: tutorial-dataframe-df015_LazyDataSource ............................. Passed 6.11 sec; Start 467: tutorial-dataframe-df022_useKahan; 488/1231 Test #463: tutorial-dataframe-df018_customActions .............................. Passed 3.66 sec; Start 468: tutorial-dataframe-df023_aggregate; 489/1231 Test #466: tutorial-dataframe-df021_createTGraph ............................... Passed 2.94 sec; Start 469: tutorial-dataframe-df024_Display; 490/1231 Test #467: tutorial-dataframe-df022_useKahan ................................... Passed 3.26 sec; Start 470: tutorial-dataframe-df025_RNode; 491/1231 Test #465: tutorial-dataframe-df020_helpers .................................... Passed 3.82 sec; Start 471: tutorial-dataframe-df031_Stats; 492/1231 Test #468: tutorial-dataframe-df023_aggregate .................................. Passed 2.25 sec; 498/1231 Test #470: tutorial-dataframe-df025_RNode ...................................... Passed 2.80 sec; 502/1231 Test #464: tutorial-dataframe-df019_Cache ...................................... Passed 7.71 sec; 506/1231 Test #471: tutorial-dataframe-df031_Stats ...................................... Passed 3.82 sec; 507/1231 Test #469: tutorial-dataframe-df024_Display .................................... Passed 4.58 sec; Start 1071: tutorial-dataframe-df000_simple-py; Start 1072: tutorial-dataframe-df001_introduction-py; Start 1073: tutorial-dataframe-df002_dataModel-py; Start 1074: tutorial-dataframe-df003_profiles-py; 1072/1231 Test #1071: tutorial-dataframe-df000_simple-py .................................. Passed 2.85 sec; Start 1075: tutorial-dataframe-df004_cutFlowReport-py; 1073/1231 Test #1074: tutorial-dataframe-df003_profiles-py ................................ Passed 5.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10300:10150,Test,Test,10150,https://root.cern,https://github.com/root-project/root/pull/10300,1,['Test'],['Test']
Testability,.................... Passed 3.80 sec; Start 464: tutorial-dataframe-df019_Cache; 485/1231 Test #462: tutorial-dataframe-df017_vecOpsHEP .................................. Passed 4.31 sec; Start 465: tutorial-dataframe-df020_helpers; 486/1231 Test #459: tutorial-dataframe-df014_CSVDataSource .............................. Passed 6.87 sec; Start 466: tutorial-dataframe-df021_createTGraph; 487/1231 Test #460: tutorial-dataframe-df015_LazyDataSource ............................. Passed 6.11 sec; Start 467: tutorial-dataframe-df022_useKahan; 488/1231 Test #463: tutorial-dataframe-df018_customActions .............................. Passed 3.66 sec; Start 468: tutorial-dataframe-df023_aggregate; 489/1231 Test #466: tutorial-dataframe-df021_createTGraph ............................... Passed 2.94 sec; Start 469: tutorial-dataframe-df024_Display; 490/1231 Test #467: tutorial-dataframe-df022_useKahan ................................... Passed 3.26 sec; Start 470: tutorial-dataframe-df025_RNode; 491/1231 Test #465: tutorial-dataframe-df020_helpers .................................... Passed 3.82 sec; Start 471: tutorial-dataframe-df031_Stats; 492/1231 Test #468: tutorial-dataframe-df023_aggregate .................................. Passed 2.25 sec; 498/1231 Test #470: tutorial-dataframe-df025_RNode ...................................... Passed 2.80 sec; 502/1231 Test #464: tutorial-dataframe-df019_Cache ...................................... Passed 7.71 sec; 506/1231 Test #471: tutorial-dataframe-df031_Stats ...................................... Passed 3.82 sec; 507/1231 Test #469: tutorial-dataframe-df024_Display .................................... Passed 4.58 sec; Start 1071: tutorial-dataframe-df000_simple-py; Start 1072: tutorial-dataframe-df001_introduction-py; Start 1073: tutorial-dataframe-df002_dataModel-py; Start 1074: tutorial-dataframe-df003_profiles-py; 1072/1231 Test #1071: tutorial-dataframe-df000_simple-py .................................. Passed 2.85 sec; Start,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10300:10000,Test,Test,10000,https://root.cern,https://github.com/root-project/root/pull/10300,1,['Test'],['Test']
Testability,........................ Passed 3.82 sec; 507/1231 Test #469: tutorial-dataframe-df024_Display .................................... Passed 4.58 sec; Start 1071: tutorial-dataframe-df000_simple-py; Start 1072: tutorial-dataframe-df001_introduction-py; Start 1073: tutorial-dataframe-df002_dataModel-py; Start 1074: tutorial-dataframe-df003_profiles-py; 1072/1231 Test #1071: tutorial-dataframe-df000_simple-py .................................. Passed 2.85 sec; Start 1075: tutorial-dataframe-df004_cutFlowReport-py; 1073/1231 Test #1074: tutorial-dataframe-df003_profiles-py ................................ Passed 5.32 sec; Start 1076: tutorial-dataframe-df006_ranges-py; 1074/1231 Test #1072: tutorial-dataframe-df001_introduction-py ............................ Passed 7.77 sec; Start 1077: tutorial-dataframe-df007_snapshot-py; 1075/1231 Test #1075: tutorial-dataframe-df004_cutFlowReport-py ........................... Passed 5.88 sec; Start 1078: tutorial-dataframe-df008_createDataSetFromScratch-py; 1076/1231 Test #1073: tutorial-dataframe-df002_dataModel-py ............................... Passed 8.55 sec; Start 1079: tutorial-dataframe-df010_trivialDataSource-py; 1077/1231 Test #1079: tutorial-dataframe-df010_trivialDataSource-py ....................... Passed 3.14 sec; Start 1080: tutorial-dataframe-df012_DefinesAndFiltersAsStrings-py; 1078/1231 Test #1078: tutorial-dataframe-df008_createDataSetFromScratch-py ................ Passed 3.91 sec; Start 1081: tutorial-dataframe-df014_CSVDataSource-py; 1079/1231 Test #1076: tutorial-dataframe-df006_ranges-py .................................. Passed 7.30 sec; Start 1082: tutorial-dataframe-df016_vecOps-py; Start 1083: tutorial-dataframe-df017_vecOpsHEP-py; 1081/1231 Test #1077: tutorial-dataframe-df007_snapshot-py ................................ Passed 9.12 sec; Start 1084: tutorial-dataframe-df019_Cache-py; 1082/1231 Test #1080: tutorial-dataframe-df012_DefinesAndFiltersAsStrings-py .............. Passed 5.30 sec; Start 1085: ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10300:11544,Test,Test,11544,https://root.cern,https://github.com/root-project/root/pull/10300,1,['Test'],['Test']
Testability,"........................***Failed 2.92 sec; test_memoryAdoption (rtensor.ArrayInterface.test_memoryAdoption); Test correct adoption of different datatypes ... ok; test_memoryLayout (rtensor.ArrayInterface.test_memoryLayout); Test adoption of the memory layout ... ok; test_ownData (rtensor.ArrayInterface.test_ownData); Test ownership of adopted numpy array ... ok; test_dtypes (rtensor.AsRTensor.test_dtypes); Test adoption of numpy arrays with different data types ... ok; test_memoryLayout (rtensor.AsRTensor.test_memoryLayout); Test adoption of the memory layout ... FAIL; test_strides (rtensor.AsRTensor.test_strides); Test adoption of the strides ... ok; test_expandDims (rtensor.NumpyCompliance.test_expandDims); Test np.expand_dims vs RTensor::ExpandDims ... ok; test_reshape (rtensor.NumpyCompliance.test_reshape); Test np.reshape vs RTensor::Reshape ... FAIL; test_slice (rtensor.NumpyCompliance.test_slice); Test slicing operations ... ok; test_squeeze (rtensor.NumpyCompliance.test_squeeze); Test np.squeeze vs RTensor::Squeeze ... ok; test_transpose (rtensor.NumpyCompliance.test_transpose); Test np.transpose vs RTensor::Transpose ... FAIL; ======================================================================; FAIL: test_memoryLayout (rtensor.AsRTensor.test_memoryLayout); Test adoption of the memory layout; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""/builddir/build/BUILD/root-6.28.00/bindings/pyroot/pythonizations/test/rtensor.py"", line 42, in test_memoryLayout; self.assertEqual(root_obj.GetMemoryLayout(), 1); AssertionError: 16777216 != 1; ======================================================================; FAIL: test_reshape (rtensor.NumpyCompliance.test_reshape); Test np.reshape vs RTensor::Reshape; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""/builddir/build/BUILD/root-6.28.00/bindings/pyroot/pythonizations/test/rtensor.py"", ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12429:1619,Test,Test,1619,https://root.cern,https://github.com/root-project/root/issues/12429,1,['Test'],['Test']
Testability,.......................... Passed 2.25 sec; 498/1231 Test #470: tutorial-dataframe-df025_RNode ...................................... Passed 2.80 sec; 502/1231 Test #464: tutorial-dataframe-df019_Cache ...................................... Passed 7.71 sec; 506/1231 Test #471: tutorial-dataframe-df031_Stats ...................................... Passed 3.82 sec; 507/1231 Test #469: tutorial-dataframe-df024_Display .................................... Passed 4.58 sec; Start 1071: tutorial-dataframe-df000_simple-py; Start 1072: tutorial-dataframe-df001_introduction-py; Start 1073: tutorial-dataframe-df002_dataModel-py; Start 1074: tutorial-dataframe-df003_profiles-py; 1072/1231 Test #1071: tutorial-dataframe-df000_simple-py .................................. Passed 2.85 sec; Start 1075: tutorial-dataframe-df004_cutFlowReport-py; 1073/1231 Test #1074: tutorial-dataframe-df003_profiles-py ................................ Passed 5.32 sec; Start 1076: tutorial-dataframe-df006_ranges-py; 1074/1231 Test #1072: tutorial-dataframe-df001_introduction-py ............................ Passed 7.77 sec; Start 1077: tutorial-dataframe-df007_snapshot-py; 1075/1231 Test #1075: tutorial-dataframe-df004_cutFlowReport-py ........................... Passed 5.88 sec; Start 1078: tutorial-dataframe-df008_createDataSetFromScratch-py; 1076/1231 Test #1073: tutorial-dataframe-df002_dataModel-py ............................... Passed 8.55 sec; Start 1079: tutorial-dataframe-df010_trivialDataSource-py; 1077/1231 Test #1079: tutorial-dataframe-df010_trivialDataSource-py ....................... Passed 3.14 sec; Start 1080: tutorial-dataframe-df012_DefinesAndFiltersAsStrings-py; 1078/1231 Test #1078: tutorial-dataframe-df008_createDataSetFromScratch-py ................ Passed 3.91 sec; Start 1081: tutorial-dataframe-df014_CSVDataSource-py; 1079/1231 Test #1076: tutorial-dataframe-df006_ranges-py .................................. Passed 7.30 sec; Start 1082: tutorial-dataframe-df016_vecOps-py; Star,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10300:11210,Test,Test,11210,https://root.cern,https://github.com/root-project/root/pull/10300,1,['Test'],['Test']
Testability,"...and add RSnapshotOptions::fOverwriteIfExists to give users the chance; to still write a TTree to a TFile opened in UPDATE mode, even if a TTree; with the same name is already present in the file, at the cost of deleting; the previous TTree from the file. This fixes ROOT-10573. ~~EDIT: still missing a test for `fOverwriteIfExists`, coming soon~~",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5193:305,test,test,305,https://root.cern,https://github.com/root-project/root/pull/5193,1,['test'],['test']
Testability,...and add a test for the broken case,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2759:13,test,test,13,https://root.cern,https://github.com/root-project/root/pull/2759,1,['test'],['test']
Testability,...and add a test for this case,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2539:13,test,test,13,https://root.cern,https://github.com/root-project/root/pull/2539,1,['test'],['test']
Testability,...and add a test.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6863:13,test,test,13,https://root.cern,https://github.com/root-project/root/pull/6863,1,['test'],['test']
Testability,"...and add a test. The new argument is to make TTreeProcessorMT consistent with other; multi-threading interfaces, namely TThreadExecutor. This is the last; ingredient required to fix ROOT-10561.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5278:13,test,test,13,https://root.cern,https://github.com/root-project/root/pull/5278,1,['test'],['test']
Testability,"...and add a test. This fixes ROOT-10321. This is also the proper fix for ROOT-9785 (basically the same; issue/feature request), which was supposed to be fixed by; 78fca0b but unfortunately that commit enabled the conversion; based on the wrong condition: `is_convertible<T, TO>` rather; than `is_convertible<T*, TO*>`.; In order to fully delegate the decision on convertibility to; `shared_ptr`, we now use `is_constructible<shared_ptr<TO>, shared_ptr<T>>`; as the condition instead.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7268:13,test,test,13,https://root.cern,https://github.com/root-project/root/pull/7268,1,['test'],['test']
Testability,...and add a test. This fixes ROOT-10346.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5292:13,test,test,13,https://root.cern,https://github.com/root-project/root/pull/5292,1,['test'],['test']
Testability,...and add a test. This fixes https://github.com/root-project/root/issues/12520.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12530:13,test,test,13,https://root.cern,https://github.com/root-project/root/pull/12530,1,['test'],['test']
Testability,...and add test coverage,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3418:11,test,test,11,https://root.cern,https://github.com/root-project/root/pull/3418,1,['test'],['test']
Testability,...and add tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1096:11,test,tests,11,https://root.cern,https://github.com/root-project/root/pull/1096,1,['test'],['tests']
Testability,...and add tests and documentation for TTreeReader+TEntryList usage. The behavior of `TTreeReader` and `TTreeProcessorMT` is changed from always assuming that entry numbers stored in `TEntryList` are global entry numbers to treating them as `TTree`-local entry numbers if they come from sub-entrylists. This fixes ROOT-10753. - [x] do entry range -> entry-list entry range transformation once for all taks; - [x] fix test failures; - [ ] check what happens with sub-entrylists in shuffled order w.r.t. TTrees in a TChain,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5667:11,test,tests,11,https://root.cern,https://github.com/root-project/root/pull/5667,2,['test'],"['test', 'tests']"
Testability,...as well as in TNetFile and TWebFile.; This fixes #10742. @pcanal can you please suggest a test?,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11321:93,test,test,93,https://root.cern,https://github.com/root-project/root/pull/11321,1,['test'],['test']
Testability,"...because we'd only redefine the _nominal_ value, which would be extremely confusing. A test for this case will soon be added as part of a general improvement to Vary's test coverage.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10543:89,test,test,89,https://root.cern,https://github.com/root-project/root/pull/10543,2,['test'],['test']
Testability,"...because when GSL is not found, HistFactory is not built. Without this change, when GSL is not present ROOT builds fail with the following error:. ```; In file included from /home/eguiraud/ROOT/root/test/stressHistFactory_tests.cxx:25:0,; from /home/eguiraud/ROOT/root/test/stressHistFactory.cxx:26:; /home/eguiraud/ROOT/root/test/stressHistFactory_models.cxx:8:46: fatal error: RooStats/HistFactory/Measurement.h: No such file or directory; #include ""RooStats/HistFactory/Measurement.h""; ^; compilation terminated.; test/CMakeFiles/stressHistFactory.dir/build.make:62: recipe for target 'test/CMakeFiles/stressHistFactory.dir/stressHistFactory.cxx.o' failed; ```. @hageboeck this fixes the issue I was complaining about today :smile: . @amadio maybe you can think of a nicer fix, this PR is most of all a bug report.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3240:201,test,test,201,https://root.cern,https://github.com/root-project/root/pull/3240,5,['test'],['test']
Testability,...even if it has the same name as a branch in the main tree.; This tests ROOT-9319.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2045:68,test,tests,68,https://root.cern,https://github.com/root-project/root/pull/2045,1,['test'],['tests']
Testability,...in an attempt to avoid bogus broken comparisons in the; RDFSnapshotArrays.SingleThread test case in dataframe_snapshot; on some platforms.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10723:90,test,test,90,https://root.cern,https://github.com/root-project/root/pull/10723,1,['test'],['test']
Testability,...in the hope to get a clearer picture about the test failures; when jitting,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1937:50,test,test,50,https://root.cern,https://github.com/root-project/root/pull/1937,1,['test'],['test']
Testability,"...instead of relying on ReadClassBuffer(). This is necessary for schema evolution with RNTuple's custom streamer. ## Changes or fixes:; Using `TBuffer::ReadClassBuffer` in `RNTuple::Streamer` is wrong because it doesn't handle cases where the schema of RNTuple changes. To do that, we need to manually read back the fields depending on the class version. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary) - not necessary",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15516:377,test,tested,377,https://root.cern,https://github.com/root-project/root/pull/15516,1,['test'],['tested']
Testability,"...so we don't need to write ""MULTITHREAD"" as fit option. Update the test.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1004:69,test,test,69,https://root.cern,https://github.com/root-project/root/pull/1004,1,['test'],['test']
Testability,"../tree/dataframe/test/dataframe_interface.cxx:451:28: warning: loop; variable ‘col’ of type ‘const string&’ {aka ‘const; std::__cxx11::basic_string<char>&’} binds to a temporary constructed; from type ‘const char* const’ [-Wrange-loop-construct]. @Axel-Naumann I don't really understand why the const ref does not increase the lifetime of the temporary as usual in this case, but this is the warning: https://godbolt.org/z/ss4zz8v3M",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8301:18,test,test,18,https://root.cern,https://github.com/root-project/root/pull/8301,1,['test'],['test']
Testability,../tree/dataframe/test/dataframe_interface.cxx:451:28: warning: loop; variable ‘col’ of type ‘const string&’ {aka ‘const; std::__cxx11::basic_string<char>&’} binds to a temporary constructed; from type ‘const char* const’ [-Wrange-loop-construct]. I decided to backport this one because it's fixing a real use-after-delete bug in a test.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8398:18,test,test,18,https://root.cern,https://github.com/root-project/root/pull/8398,2,['test'],['test']
Testability,".13.0/googletest/src/gtest_main.cc; Note: Google Test filter = -RCsvDS.Remote:RRawFile.Remote:RSqliteDS.Davix:TFile.ReadWithoutGlobalRegistrationWeb:TFile.ReadWithoutGlobalRegistrationNet:RNTuple.TClassEBO; [==========] Running 8 tests from 2 test suites.; [----------] Global test environment set-up.; [----------] 2 tests from RooProdPdf; [ RUN ] RooProdPdf.TestGetPartIntList; /builddir/build/BUILD/root-6.28.00/roofit/roofitcore/test/testRooProdPdf.cxx:146: Failure; Expected equality of these values:; hashRooProduct(prod); Which is: 3649468902; 2448666198; [ FAILED ] RooProdPdf.TestGetPartIntList (229 ms); [ RUN ] RooProdPdf.TestDepsAreCond; Warning in <RooNaNPacker>: Fast recovery from undefined function values only implemented for little-endian machines. If necessary, request an extension of functionality on https://root.cern; [ OK ] RooProdPdf.TestDepsAreCond (644 ms); [ DISABLED ] RooProdPdf.DISABLED_ChangeServerNormSetForProdPdfInAddPdf; [----------] 2 tests from RooProdPdf (873 ms total); [----------] 6 tests from RooProdPdf/TestProdPdf; [ RUN ] RooProdPdf/TestProdPdf.CachingOpt/opt0off; [ OK ] RooProdPdf/TestProdPdf.CachingOpt/opt0off (17 ms); [ RUN ] RooProdPdf/TestProdPdf.CachingOpt/opt0cpu; [ OK ] RooProdPdf/TestProdPdf.CachingOpt/opt0cpu (9 ms); [ RUN ] RooProdPdf/TestProdPdf.CachingOpt/opt1off; [ OK ] RooProdPdf/TestProdPdf.CachingOpt/opt1off (13 ms); [ RUN ] RooProdPdf/TestProdPdf.CachingOpt/opt1cpu; [ OK ] RooProdPdf/TestProdPdf.CachingOpt/opt1cpu (9 ms); [ RUN ] RooProdPdf/TestProdPdf.CachingOpt/opt2off; [ OK ] RooProdPdf/TestProdPdf.CachingOpt/opt2off (16 ms); [ RUN ] RooProdPdf/TestProdPdf.CachingOpt/opt2cpu; [ OK ] RooProdPdf/TestProdPdf.CachingOpt/opt2cpu (9 ms); [----------] 6 tests from RooProdPdf/TestProdPdf (75 ms total); [----------] Global test environment tear-down; [==========] 8 tests from 2 test suites ran. (949 ms total); [ PASSED ] 7 tests.; [ FAILED ] 1 test, listed below:; [ FAILED ] RooProdPdf.TestGetPartIntList; 1 FAILED TEST; YOU ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12430:1808,test,tests,1808,https://root.cern,https://github.com/root-project/root/issues/12430,4,"['Test', 'test']","['TestProdPdf', 'tests']"
Testability,".2"" ""/home/jalopezg/CERN/build/lib/libRIO.so"" ""/home/jalopezg/CERN/build/lib/libThread.so"" ""/home/jalopezg/CERN/build/lib/libCling.so"" ""/usr/lib/librt.so.1"" ""/usr/lib/libncursesw.so.6"" ""/usr/lib/ld-2.33.so"" ""/home/jalopezg/CERN/build/lib/libMathCore.so"" ""/home/jalopezg/CERN/build/lib/libImt.so"" ""/home/jalopezg/CERN/build/lib/libMultiProc.so"" ""/home/jalopezg/CERN/build/lib/libNet.so"" ""/usr/lib/libtbb.so.2"" ""/usr/lib/libssl.so.1.1"" ""/usr/lib/libcrypto.so.1.1"" ""/usr/lib/libnss_systemd.so.2"" -o ""/home/jalopezg/CERN/build/roottest/root/dataframe/test_snapshot_C.so"" /home/jalopezg/CERN/build/lib/libROOTDataFrame.so /home/jalopezg/CERN/build/lib/libTreePlayer.so /home/jalopezg/CERN/build/lib/libTree.so /home/jalopezg/CERN/build/roottest/root/dataframe/test_readFcc /home/jalopezg/CERN/build/roottest/root/dataframe/par' failed!; 1369: terminate called after throwing an instance of 'std::logic_error'; 1369: what(): basic_string::_M_construct null not valid; ```. I did not manage to reproduce the problem outside of ctest and without running multiple tests concurrently -- it also seems that one of the tests ""has"" to be `roottest-root-dataframe-test_snapshot_manytasks`. ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->. The following repository provides a Dockerfile to reproduce the issue in a container https://gitlab.cern.ch/eguiraud/arch_aclic_bug . ### Setup; <!--; 1. ROOT version; 2. Operating system; 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself.; -->. ROOT master (but 6.22 also has issues) and arch linux. I tried building from source (6.22 and master) as well as installing from the system repos -- failure modes are different but none can run all tests without problems. Gentoo seems to also be affected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7366:3313,test,tests,3313,https://root.cern,https://github.com/root-project/root/issues/7366,3,['test'],['tests']
Testability,".6.26.04: undefined reference to `typeinfo for clang::sema::FunctionScopeInfo' ; collect2: error: ld returned 1 exit status; make[4]: *** [main/CMakeFiles/rootcling.dir/build.make:101: bin/rootcling] Error 1; ```. This looks like an incompatibility between clang and cling - which both are builtin.; Building in a 20.04 `pbuilder` sandbox succeeds (same set of features as above, minus `webgui`, btw). ### Expected behavior; <!--; A clear and concise description of what you expected to happen.; -->; The same set of build instructions (with identical dependencies) succeeds on Debian 11 Bullseye and 10 Buster, with; ```; -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd; ```. (`webgui` is missing for a yet unknown reason). ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->. Install required and optional dependencies matching the selected feature set, then run `cmake` and `make` as suggested. ### Setup; <!--; 1. ROOT version; 2. Operating system; 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself.; -->; ROOT 6.26.04; OS Ubuntu 22.04 (amd64) `pbuilder` sandbox on 20.04 system; Source: official tarball. ### Additional context; <!--; Add any other context about the problem here.; -->; nothing yet. Full log (1.2MB) [here](https://hypatia.aei.mpg.de/lsc-amd64-jammy/root-cds_6.26.04.sg-0.22+ubuntu22.04.0_amd64.--pbuilderlog)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10777:2852,sandbox,sandbox,2852,https://root.cern,https://github.com/root-project/root/issues/10777,2,"['log', 'sandbox']","['log', 'sandbox']"
Testability,.CompareBinLabels(RAxisLabels(changed_one_label)); 77: Which is: 1; 77: To be equal to: RAxisLabels::kLabelsCmpSubset | RAxisLabels::kLabelsCmpSuperset; 77: Which is: 3; 77: Google Test trace:; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(531): Labeled axis w/o title; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(484): error: Expected: caxis.CompareBinLabels(RAxisLabels(swapped_labels)); 77: Which is: 4; 77: To be equal to: RAxisLabels::kLabelsCmpSuperset | RAxisLabels::kLabelsCmpDisordered; 77: Which is: 6; 77: Google Test trace:; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(531): Labeled axis w/o title; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(469): error: Expected: caxis.CompareBinLabels(RAxisLabels(one_extra_label)); 77: Which is: 0; 77: To be equal to: RAxisLabels::kLabelsCmpSuperset; 77: Which is: 2; 77: Google Test trace:; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(531): Labeled axis w/o title; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(477): error: Expected: caxis.CompareBinLabels(RAxisLabels(changed_one_label)); 77: Which is: 1; 77: To be equal to: RAxisLabels::kLabelsCmpSubset | RAxisLabels::kLabelsCmpSuperset; 77: Which is: 3; 77: Google Test trace:; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(531): Labeled axis w/o title; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(484): error: Expected: caxis.CompareBinLabels(RAxisLabels(swapped_labels)); 77: Which is: 4; 77: To be equal to: RAxisLabels::kLabelsCmpSuperset | RAxisLabels::kLabelsCmpDisordered; 77: Which is: 6; 77: Google Test trace:; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(531): Labeled axis w/o title; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(469): error: Expected: caxis.CompareBinLabels(RAxisLabels(one_extra_label)); 77: Which is: 0; 77: To be equal to: RAxisLabels::kLabelsCmpSuperset; 77: Which is: 2; 77: Google Test trace:; 77: C:\Users\bellenot\g,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5054:1617,test,test,1617,https://root.cern,https://github.com/root-project/root/pull/5054,5,['test'],['test']
Testability,.CompareBinLabels(RAxisLabels(one_extra_label)); 77: Which is: 0; 77: To be equal to: RAxisLabels::kLabelsCmpSuperset; 77: Which is: 2; 77: Google Test trace:; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(531): Labeled axis w/o title; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(477): error: Expected: caxis.CompareBinLabels(RAxisLabels(changed_one_label)); 77: Which is: 1; 77: To be equal to: RAxisLabels::kLabelsCmpSubset | RAxisLabels::kLabelsCmpSuperset; 77: Which is: 3; 77: Google Test trace:; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(531): Labeled axis w/o title; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(484): error: Expected: caxis.CompareBinLabels(RAxisLabels(swapped_labels)); 77: Which is: 4; 77: To be equal to: RAxisLabels::kLabelsCmpSuperset | RAxisLabels::kLabelsCmpDisordered; 77: Which is: 6; 77: Google Test trace:; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(531): Labeled axis w/o title; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(469): error: Expected: caxis.CompareBinLabels(RAxisLabels(one_extra_label)); 77: Which is: 0; 77: To be equal to: RAxisLabels::kLabelsCmpSuperset; 77: Which is: 2; 77: Google Test trace:; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(531): Labeled axis w/o title; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(477): error: Expected: caxis.CompareBinLabels(RAxisLabels(changed_one_label)); 77: Which is: 1; 77: To be equal to: RAxisLabels::kLabelsCmpSubset | RAxisLabels::kLabelsCmpSuperset; 77: Which is: 3; 77: Google Test trace:; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(531): Labeled axis w/o title; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(484): error: Expected: caxis.CompareBinLabels(RAxisLabels(swapped_labels)); 77: Which is: 4; 77: To be equal to: RAxisLabels::kLabelsCmpSuperset | RAxisLabels::kLabelsCmpDisordered; 77: Which is: 6; 77: Google Test trace:; 77: C:\Users\bellenot\g,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5054:1281,test,test,1281,https://root.cern,https://github.com/root-project/root/pull/5054,5,['test'],['test']
Testability,.CompareBinLabels(RAxisLabels(one_extra_label)); 77: Which is: 0; 77: To be equal to: RAxisLabels::kLabelsCmpSuperset; 77: Which is: 2; 77: Google Test trace:; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(531): Labeled axis w/o title; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(477): error: Expected: caxis.CompareBinLabels(RAxisLabels(changed_one_label)); 77: Which is: 1; 77: To be equal to: RAxisLabels::kLabelsCmpSubset | RAxisLabels::kLabelsCmpSuperset; 77: Which is: 3; 77: Google Test trace:; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(531): Labeled axis w/o title; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(484): error: Expected: caxis.CompareBinLabels(RAxisLabels(swapped_labels)); 77: Which is: 4; 77: To be equal to: RAxisLabels::kLabelsCmpSuperset | RAxisLabels::kLabelsCmpDisordered; 77: Which is: 6; 77: Google Test trace:; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(531): Labeled axis w/o title; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(469): error: Expected: caxis.CompareBinLabels(RAxisLabels(one_extra_label)); 77: Which is: 0; 77: To be equal to: RAxisLabels::kLabelsCmpSuperset; 77: Which is: 2; 77: Google Test trace:; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(537): Labeled axis with title; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(477): error: Expected: caxis.CompareBinLabels(RAxisLabels(changed_one_label)); 77: Which is: 1; 77: To be equal to: RAxisLabels::kLabelsCmpSubset | RAxisLabels::kLabelsCmpSuperset; 77: Which is: 3; 77: Google Test trace:; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(537): Labeled axis with title; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(484): error: Expected: caxis.CompareBinLabels(RAxisLabels(swapped_labels)); 77: Which is: 4; 77: To be equal to: RAxisLabels::kLabelsCmpSuperset | RAxisLabels::kLabelsCmpDisordered; 77: Which is: 6; 77: Google Test trace:; 77: C:\Users\bellenot,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5054:6666,test,test,6666,https://root.cern,https://github.com/root-project/root/pull/5054,1,['test'],['test']
Testability,.CompareBinLabels(RAxisLabels(swapped_labels)); 77: Which is: 4; 77: To be equal to: RAxisLabels::kLabelsCmpSuperset | RAxisLabels::kLabelsCmpDisordered; 77: Which is: 6; 77: Google Test trace:; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(531): Labeled axis w/o title; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(469): error: Expected: caxis.CompareBinLabels(RAxisLabels(one_extra_label)); 77: Which is: 0; 77: To be equal to: RAxisLabels::kLabelsCmpSuperset; 77: Which is: 2; 77: Google Test trace:; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(531): Labeled axis w/o title; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(477): error: Expected: caxis.CompareBinLabels(RAxisLabels(changed_one_label)); 77: Which is: 1; 77: To be equal to: RAxisLabels::kLabelsCmpSubset | RAxisLabels::kLabelsCmpSuperset; 77: Which is: 3; 77: Google Test trace:; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(531): Labeled axis w/o title; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(484): error: Expected: caxis.CompareBinLabels(RAxisLabels(swapped_labels)); 77: Which is: 4; 77: To be equal to: RAxisLabels::kLabelsCmpSuperset | RAxisLabels::kLabelsCmpDisordered; 77: Which is: 6; 77: Google Test trace:; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(531): Labeled axis w/o title; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(469): error: Expected: caxis.CompareBinLabels(RAxisLabels(one_extra_label)); 77: Which is: 0; 77: To be equal to: RAxisLabels::kLabelsCmpSuperset; 77: Which is: 2; 77: Google Test trace:; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(531): Labeled axis w/o title; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(477): error: Expected: caxis.CompareBinLabels(RAxisLabels(changed_one_label)); 77: Which is: 1; 77: To be equal to: RAxisLabels::kLabelsCmpSubset | RAxisLabels::kLabelsCmpSuperset; 77: Which is: 3; 77: Google Test trace:; 77: C:\Users\bellenot\g,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5054:1987,test,test,1987,https://root.cern,https://github.com/root-project/root/pull/5054,4,['test'],['test']
Testability,.CompareBinLabels(RAxisLabels(swapped_labels)); 77: Which is: 4; 77: To be equal to: RAxisLabels::kLabelsCmpSuperset | RAxisLabels::kLabelsCmpDisordered; 77: Which is: 6; 77: Google Test trace:; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(531): Labeled axis w/o title; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(469): error: Expected: caxis.CompareBinLabels(RAxisLabels(one_extra_label)); 77: Which is: 0; 77: To be equal to: RAxisLabels::kLabelsCmpSuperset; 77: Which is: 2; 77: Google Test trace:; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(531): Labeled axis w/o title; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(477): error: Expected: caxis.CompareBinLabels(RAxisLabels(changed_one_label)); 77: Which is: 1; 77: To be equal to: RAxisLabels::kLabelsCmpSubset | RAxisLabels::kLabelsCmpSuperset; 77: Which is: 3; 77: Google Test trace:; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(531): Labeled axis w/o title; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(484): error: Expected: caxis.CompareBinLabels(RAxisLabels(swapped_labels)); 77: Which is: 4; 77: To be equal to: RAxisLabels::kLabelsCmpSuperset | RAxisLabels::kLabelsCmpDisordered; 77: Which is: 6; 77: Google Test trace:; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(531): Labeled axis w/o title; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(469): error: Expected: caxis.CompareBinLabels(RAxisLabels(one_extra_label)); 77: Which is: 0; 77: To be equal to: RAxisLabels::kLabelsCmpSuperset; 77: Which is: 2; 77: Google Test trace:; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(537): Labeled axis with title; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(477): error: Expected: caxis.CompareBinLabels(RAxisLabels(changed_one_label)); 77: Which is: 1; 77: To be equal to: RAxisLabels::kLabelsCmpSubset | RAxisLabels::kLabelsCmpSuperset; 77: Which is: 3; 77: Google Test trace:; 77: C:\Users\bellenot\,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5054:6295,test,test,6295,https://root.cern,https://github.com/root-project/root/pull/5054,1,['test'],['test']
Testability,".NumpyCompliance.test_squeeze); Test np.squeeze vs RTensor::Squeeze ... ok; test_transpose (rtensor.NumpyCompliance.test_transpose); Test np.transpose vs RTensor::Transpose ... FAIL; ======================================================================; FAIL: test_memoryLayout (rtensor.AsRTensor.test_memoryLayout); Test adoption of the memory layout; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""/builddir/build/BUILD/root-6.28.00/bindings/pyroot/pythonizations/test/rtensor.py"", line 42, in test_memoryLayout; self.assertEqual(root_obj.GetMemoryLayout(), 1); AssertionError: 16777216 != 1; ======================================================================; FAIL: test_reshape (rtensor.NumpyCompliance.test_reshape); Test np.reshape vs RTensor::Reshape; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""/builddir/build/BUILD/root-6.28.00/bindings/pyroot/pythonizations/test/rtensor.py"", line 218, in test_reshape; self.assertEqual(x.GetMemoryLayout(), 1); AssertionError: 16777216 != 1; ======================================================================; FAIL: test_transpose (rtensor.NumpyCompliance.test_transpose); Test np.transpose vs RTensor::Transpose; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""/builddir/build/BUILD/root-6.28.00/bindings/pyroot/pythonizations/test/rtensor.py"", line 151, in test_transpose; self.assertEqual(x.GetMemoryLayout(), 1); AssertionError: 16777216 != 1; ----------------------------------------------------------------------; Ran 11 tests in 2.036s; FAILED (failures=3); CMake Error at /builddir/build/BUILD/root-6.28.00/cmake/modules/RootTestDriver.cmake:232 (message):; error code: 1; ~~~. #### pyunittests-pyroot-pyz-stl-vector; ~~~; 61/1272 Test #18: pyunittests-pyroot-pyz-stl-vector ...................................***Failed 0.84 sec; test_v",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12429:2598,test,test,2598,https://root.cern,https://github.com/root-project/root/issues/12429,1,['test'],['test']
Testability,".Snapshot(""atree"", ""sig.root""); r.RDataFrame(1000).Define(""v"", ""gRandom->Gaus(1, 3)"").Define(""u"", ""gRandom->Gaus(1, 6)"").Define(""e"", ""rdfentry_"").Snapshot(""atree"", ""bkg.root""); r.RDataFrame(1000).Define(""v"", ""gRandom->Gaus(-5, 10)"").Define(""u"", ""gRandom->Gaus(-5, 20)"").Define(""e"", ""rdfentry_"").Snapshot(""atree"", ""oth.root""); fsig = r.TFile.Open(""sig.root""); tsig = fsig.atree; fbkg = r.TFile.Open(""bkg.root""); tbkg = fbkg.atree; foth = r.TFile.Open(""oth.root""); toth = foth.atree; fout = r.TFile.Open(""out.root"", ""recreate""). dl = r.TMVA.DataLoader(""dataset""); dl.AddVariable(""v"", ""v"", """", ""F""); dl.AddVariable(""u"", ""u"", """", ""F""); dl.AddSpectator(""e"", ""entry number"", """"); dl.AddTree(tsig, ""sig""); dl.AddTree(tbkg, ""bkg""); dl.AddTree(toth, ""oth""). dl.PrepareTrainingAndTestTree("""", r""nTest_sig=0:nTest_bkg=0:nTest_oth=0:NormMode=NumEvents:!V:SplitSeed=100:SplitMode=Random""); fact = r.TMVA.Factory(""TMVAClassification"", fout, r""!V:!Silent:AnalysisType=Multiclass""); fact.BookMethod(; dl,; r.TMVA.Types.kBDT,; ""BDT"",; r""!H:!V:nTrees=500:BoostType=Grad""; r"":UseBaggedGrad""; ); fact.TrainAllMethods(); fact.TestAllMethods(); fact.EvaluateAllMethods(). fout.Close(); model = r.TMVA.Experimental.RReader(""dataset/weights/TMVAClassification_BDT.weights.xml""); ```; Ends with error:; ```; <FATAL> : Dataset[Default] : You declared 0 spectators in the Reader while there are 1 spectators declared in the file; ***> abort program execution; ---------------------------------------------------------------------------; TypeError Traceback (most recent call last); <ipython-input-1-cf70daeeb34f> in <module>; 34 ; 35 fout.Close(); ---> 36 model = r.TMVA.Experimental.RReader(""dataset/weights/TMVAClassification_BDT.weights.xml""). TypeError: none of the 2 overloaded methods succeeded. Full details:; RReader::RReader(TMVA::Experimental::RReader&&) =>; TypeError: could not convert argument 1; RReader::RReader(const string& path) =>; runtime_error: FATAL error; ```. ### Setup; ROOT 6.22/06; macOS; conda-forge",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7900:1593,Test,TestAllMethods,1593,https://root.cern,https://github.com/root-project/root/issues/7900,1,['Test'],['TestAllMethods']
Testability,".StdTuple; /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/test/ntuple_types.cxx:151: Failure; Expected equality of these values:; (alignof(std::tuple<char, int64_t, char>)); Which is: 4; otherField->GetAlignment(); Which is: 8; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RPageStorageFile.cxx:51 in ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(std::string_view, const ROOT::Experimental::RNTupleWriteOptions&)>: The RNTuple file format will change. Do not store real data with this version of RNTuple!; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RNTupleSerialize.cxx:1148 in static ROOT::Experimental::RResult<void> ROOT::Experimental::Internal::RNTupleSerializer::DeserializeHeaderV1(const void*, uint32_t, ROOT::Experimental::RNTupleDescriptorBuilder&)>: Pre-release format version: RC 1; [ FAILED ] RNTuple.StdTuple (317 ms); [ --- ]; [----------] 18 tests from RNTuple (7848 ms total); [----------] Global test environment tear-down; [==========] 18 tests from 1 test suite ran. (7848 ms total); [ PASSED ] 16 tests.; [ FAILED ] 2 tests, listed below:; [ FAILED ] RNTuple.StdPair; [ FAILED ] RNTuple.StdTuple; 2 FAILED TESTS. ~~~. gtest-tree-ntuple-v7-test-ntuple-extended fails with:; Fatal: fWritePage[otherIdx].IsEmpty() violated. ~~~; 520/1318 Test #454: gtest-tree-ntuple-v7-test-ntuple-extended ...........................***Failed 73.15 sec; Running main() from /builddir/build/BUILD/googletest-1.13.0/googletest/src/gtest_main.cc; Note: Google Test filter = -RCsvDS.Remote:RRawFile.Remote:RSqliteDS.Davix:TFile.ReadWithoutGlobalRegistrationWeb:TFile.ReadWithoutGlobalRegistrationNet; [==========] Running 4 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 4 tests from RNTuple; [ RUN ] RNTuple.RealWorld1; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RPageStorageFile.cxx:51 in ROOT::Experimental::Detail:",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12427:2951,test,tests,2951,https://root.cern,https://github.com/root-project/root/issues/12427,4,['test'],"['test', 'tests']"
Testability,.c:773; 43: Loop condition is false. Execution continues on line 779 in /opt/root_src/graf3d/eve7/glu/sweep.c:775; 44: Field 'dirty' is 1 in /opt/root_src/graf3d/eve7/glu/sweep.c:779; 45: Taking false branch in /opt/root_src/graf3d/eve7/glu/sweep.c:779; 46: Assuming 'eUp->Dst' is not equal to 'eLo->Dst' in /opt/root_src/graf3d/eve7/glu/sweep.c:791; 47: Taking true branch in /opt/root_src/graf3d/eve7/glu/sweep.c:791; 48: Taking true branch in /opt/root_src/graf3d/eve7/glu/sweep.c:793; 49: Assuming field 'fixUpperEdge' is not equal to 0 in /opt/root_src/graf3d/eve7/glu/sweep.c:799; 50: Taking true branch in /opt/root_src/graf3d/eve7/glu/sweep.c:799; 51: Calling 'DeleteRegion' in /opt/root_src/graf3d/eve7/glu/sweep.c:800; 52: Field 'fixUpperEdge' is not equal to 0 in /opt/root_src/graf3d/eve7/glu/sweep.c:153; 53: Taking true branch in /opt/root_src/graf3d/eve7/glu/sweep.c:153; 54: Assuming field 'winding' is equal to 0 in /opt/root_src/graf3d/eve7/glu/sweep.c:158; 55: expanded from macro 'assert' in /usr/include/assert.h:109; 56: Taking true branch in /opt/root_src/graf3d/eve7/glu/sweep.c:158; 57: expanded from macro 'assert' in /usr/include/assert.h:109; 58: Memory is released in /opt/root_src/graf3d/eve7/glu/sweep.c:162; 59: expanded from macro 'memFree' in /opt/root_src/graf3d/eve7/glu/memalloc.h:41; 60: Returning; memory was released via 2nd parameter in /opt/root_src/graf3d/eve7/glu/sweep.c:800; 61: Assuming the condition is false in /opt/root_src/graf3d/eve7/glu/sweep.c:801; 62: Taking false branch in /opt/root_src/graf3d/eve7/glu/sweep.c:801; 63: Use of memory after it is freed in /opt/root_src/graf3d/eve7/glu/sweep.c:803; /opt/root_src/graf3d/eve7/glu/sweep.c:808:10: warning: Use of memory after it is freed [clang-analyzer-unix.Malloc]; 1: Assuming the condition is false in /opt/root_src/graf3d/eve7/glu/sweep.c:1321; 2: Taking false branch in /opt/root_src/graf3d/eve7/glu/sweep.c:1321; 3: Assuming the condition is true in /opt/root_src/graf3d/eve7/glu/sweep.c:13,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7531:19978,assert,assert,19978,https://root.cern,https://github.com/root-project/root/issues/7531,2,['assert'],['assert']
Testability,".h:187; 10: Returning zero, which participates in a condition later in /opt/root_src/core/base/inc/TObject.h:187; 11: Returning from 'TObject::TestBit' in /opt/root_src/geom/geom/inc/TGeoNode.h:103; 12: Returning zero, which participates in a condition later in /opt/root_src/geom/geom/inc/TGeoNode.h:103; 13: Returning from 'TGeoNode::IsOffset' in /opt/root_src/geom/geom/src/TGeoPhysicalNode.cxx:145; 14: Taking false branch in /opt/root_src/geom/geom/src/TGeoPhysicalNode.cxx:145; 15: 'nnode' initialized to a null pointer value in /opt/root_src/geom/geom/src/TGeoPhysicalNode.cxx:151; 16: Calling 'TGeoPhysicalNode::IsAligned' in /opt/root_src/geom/geom/src/TGeoPhysicalNode.cxx:155; 17: Calling 'TObject::TestBit' in /opt/root_src/geom/geom/inc/TGeoPhysicalNode.h:77; 18: Assuming the condition is false in /opt/root_src/core/base/inc/TObject.h:187; 19: Returning zero, which participates in a condition later in /opt/root_src/core/base/inc/TObject.h:187; 20: Returning from 'TObject::TestBit' in /opt/root_src/geom/geom/inc/TGeoPhysicalNode.h:77; 21: Returning zero, which participates in a condition later in /opt/root_src/geom/geom/inc/TGeoPhysicalNode.h:77; 22: Returning from 'TGeoPhysicalNode::IsAligned' in /opt/root_src/geom/geom/src/TGeoPhysicalNode.cxx:155; 23: Taking true branch in /opt/root_src/geom/geom/src/TGeoPhysicalNode.cxx:155; 24: 'i' is >= field 'fLevel' in /opt/root_src/geom/geom/src/TGeoPhysicalNode.cxx:157; 25: Loop condition is false. Execution continues on line 168 in /opt/root_src/geom/geom/src/TGeoPhysicalNode.cxx:157; 26: 'i' is >= field 'fLevel' in /opt/root_src/geom/geom/src/TGeoPhysicalNode.cxx:168; 27: Loop condition is false. Execution continues on line 204 in /opt/root_src/geom/geom/src/TGeoPhysicalNode.cxx:168; 28: Called C++ object pointer is null in /opt/root_src/geom/geom/src/TGeoPhysicalNode.cxx:210; /opt/root_src/geom/geom/src/TGeoSphere.cxx:656:16: warning: Value stored to 'sfi1' during its initialization is never read [clang-analyzer-deadco",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7428:58926,Test,TestBit,58926,https://root.cern,https://github.com/root-project/root/issues/7428,1,['Test'],['TestBit']
Testability,".py"", line 608, in do_configure; 1312: INTERNALERROR> self.hook.pytest_configure(config=self); 1312: INTERNALERROR> File ""/home/sftnight/swunsch/root/roottest/python/pytest/_pytest/core.py"", line 377, in __call__; 1312: INTERNALERROR> return self._docall(methods, kwargs); 1312: INTERNALERROR> File ""/home/sftnight/swunsch/root/roottest/python/pytest/_pytest/core.py"", line 388, in _docall; 1312: INTERNALERROR> res = mc.execute(); 1312: INTERNALERROR> File ""/home/sftnight/swunsch/root/roottest/python/pytest/_pytest/core.py"", line 289, in execute; 1312: INTERNALERROR> res = method(**kwargs); 1312: INTERNALERROR> File ""/home/sftnight/swunsch/root/roottest/python/pytest/_pytest/assertion/__init__.py"", line 56, in pytest_configure; 1312: INTERNALERROR> warn_about_missing_assertion(mode); 1312: INTERNALERROR> File ""/home/sftnight/swunsch/root/roottest/python/pytest/_pytest/assertion/__init__.py"", line 113, in warn_about_missing_assertion; 1312: INTERNALERROR> assert False; 1312: INTERNALERROR> AssertionError; 1312: ! /home/sftnight/swunsch/root/roottest/python/pytest/_pytest/assertion/__init__.py; 1312: Traceback (most recent call last):; 1312: File ""/home/sftnight/swunsch/root/roottest/python/pytest/_pytest/main.py"", line 77, in wrap_session; 1312: config.do_configure(); 1312: File ""/home/sftnight/swunsch/root/roottest/python/pytest/_pytest/config.py"", line 608, in do_configure; 1312: self.hook.pytest_configure(config=self); 1312: File ""/home/sftnight/swunsch/root/roottest/python/pytest/_pytest/core.py"", line 377, in __call__; 1312: return self._docall(methods, kwargs); 1312: File ""/home/sftnight/swunsch/root/roottest/python/pytest/_pytest/core.py"", line 388, in _docall; 1312: res = mc.execute(); 1312: File ""/home/sftnight/swunsch/root/roottest/python/pytest/_pytest/core.py"", line 289, in execute; 1312: res = method(**kwargs); 1312: File ""/home/sftnight/swunsch/root/roottest/python/pytest/_pytest/assertion/__init__.py"", line 56, in pytest_configure; 1312: warn_about_missin",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6597:3625,assert,assert,3625,https://root.cern,https://github.com/root-project/root/issues/6597,3,"['Assert', 'assert']","['AssertionError', 'assert', 'assertion']"
Testability,/ message logger; tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service; tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger; tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger; tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger; tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; /,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9792:2121,log,logger,2121,https://root.cern,https://github.com/root-project/root/issues/9792,1,['log'],['logger']
Testability,"/ previous masks; unsigned int old_excepts;. if (fegetenv(&fenv)) {; return -1;; }; old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask; fenv.__control &= ~new_excepts;; fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;; }. inline int fedisableexcept(unsigned int excepts); {; static fenv_t fenv;; unsigned int new_excepts = excepts & FE_ALL_EXCEPT;; // all previous masks; unsigned int old_excepts;. if (fegetenv(&fenv)) {; return -1;; }; old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask; fenv.__control |= new_excepts;; fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;; }. #else; inline int feenableexcept(unsigned int excepts); {; #pragma STDC FENV_ACCESS ON; fexcept_t flags;; /* Save current exception flags. */; fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */; return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts); {; #pragma STDC FENV_ACCESS ON; fexcept_t flags;; /* Save current exception flags. */; fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */; return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */; }. #endif; #endif. int main(int argc, char **argv) {; feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);; TCanvas* C= new TCanvas(""canvas"",""canvas"",1024,768);; C->cd();; Double_t w=0, h=0, xl=0, yb=0;; TH1D* o=new TH1D();; TPad* c= new TPad();; c->PlaceBox(o,w,h,xl,yb);; delete c;; delete C;; return 0;; }; ```; compile; ```; g++ pad2.cxx $(root-config --glibs --cflags --libs) -o pad2 -g; ```; run; ```; ./pad2; ```. ## Setup. ROOT 6.22.02 CentOS7 gcc4.8.5 ; and ; lxplus with ; ```; source /cvmfs/sft.cern.ch/lcg/views/dev3python3/latest/x86_64-centos7-gcc10-opt/setup.sh; ```; Should also work with mac (not tested). ## Additional context. Hopefully this will be the last one.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6428:4837,test,tested,4837,https://root.cern,https://github.com/root-project/root/issues/6428,1,['test'],['tested']
Testability,"//github.com/root-project/root/issues/11924; * https://github.com/root-project/root/issues/12230; * https://github.com/root-project/root/issues/11411; * https://github.com/root-project/root/issues/11596. ## Upstream contributions to cppyy in the context of this synchronization. - https://github.com/wlav/CPyCppyy/pull/11; - https://github.com/wlav/CPyCppyy/pull/12; - https://github.com/wlav/CPyCppyy/pull/14; - https://github.com/wlav/CPyCppyy/pull/16 *(was in PyROOT before)*; - https://github.com/wlav/CPyCppyy/pull/17 *(was in PyROOT before)*; - https://github.com/wlav/cppyy-backend/pull/20 *(was in PyROOT before)*; - https://github.com/wlav/CPyCppyy/pull/18; - https://github.com/wlav/CPyCppyy/pull/19; - https://github.com/wlav/CPyCppyy/pull/21; - https://github.com/wlav/CPyCppyy/pull/22; - https://github.com/wlav/CPyCppyy/pull/23. ## Performance validation. To validate the performance, I ran the [Python tests in roottest](https://github.com/root-project/roottest/tree/master/python) and the [PyROOT pythonization tests](https://github.com/root-project/root/tree/master/bindings/pyroot/pythonizations/test) and compared runtimes with and without the cppyy upgrade. The total runtime of these tests reduced by about 4 % from 208 s to 287 s, so the performance impact of this PR is marginal. The runtime comparison for each test can be found in [cppyy_upgrade_test_runtimes.txt](https://github.com/root-project/root/files/14623432/cppyy_upgrade_test_runtimes.txt).; The worst observed performance penalty is 24 %. However, significant speedups are observed in some of the longer tests. For convenience, the 20 tests with the longest runtime are listed here:; ```; title no_cppyy_upgrade cppyy_upgrade ratio; python-regression-regression 32.61 34.30 1.051825; pyroot-pyz-rdataframe-asnumpy 14.30 14.61 1.021678; pyroot-pyz-rdataframe-makenumpy 13.66 9.65 0.706442; python-function-function 12.27 11.08 0.903015; python-cpp-cpp 12.03 11.26 0.935993; python-cpp-advanced 11.55 10.83 0.937662;",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14507:2893,test,tests,2893,https://root.cern,https://github.com/root-project/root/pull/14507,1,['test'],['tests']
Testability,"/BUILD/root-6.28.00/io/io/src/TKey.cxx:1102; #47 0x00007fffa934c51c in TDirectoryFile::GetObjectChecked (this=0x7ffff83eb1c8, namecycle=<optimized out>, expectedClass=0x10a596170) at /builddir/build/BUILD/root-6.28.00/io/io/src/TDirectoryFile.cxx:1111; #48 0x0000000108cd56c0 in TDirectory::GetObject<TMVA::Experimental::SOFIE::RModel> (ptr=<synthetic pointer>: <optimized out>, namecycle=0x108cd6d08 ""model"", this=0x7ffff83eb1c8) at /builddir/build/BUILD/root-6.28.00/core/meta/inc/TClass.h:651; #49 EmitModel (inputfile=..., outname=""Add"") at /builddir/build/BUILD/root-6.28.00/ppc64le-redhat-linux-gnu/tmva/sofie/test/EmitFromRoot_all.cxx:26; #50 0x0000000108cd23dc in main (argc=<optimized out>, argv=<optimized out>) at /usr/include/c++/8/ext/new_allocator.h:79; ===========================================================; pure virtual method called; terminate called without an active exception; Subprocess aborted; ~~~. Disabling the SOFIE parser, so that the build completes. There are error during testing:. There are failures when running in interpreter mode:. ~~~; 98/1192 Test #779: tutorial-roofit-rf104_classfactory ..................................***Failed Error regular expression found in output. Regex=[segmentation violation]126.58 sec; Processing /builddir/build/BUILD/root-6.28.00/tutorials/roofit/rf104_classfactory.C...; *** Break *** segmentation violation; ===========================================================; There was a crash (#5 0x00007fffa8bac284 in SigHandler (sig=<optimized out>) at /builddir/build/BUILD/root-6.28.00/core/unix/src/TUnixSystem.cxx:395).; This is the entire stack trace of all threads:; ===========================================================; #0 0x00007fffa80f2f04 in waitpid () from /lib64/glibc-hwcaps/power9/libc-2.28.so; #1 0x00007fffa805a38c in do_system () from /lib64/glibc-hwcaps/power9/libc-2.28.so; #2 0x00007fffa8ba9044 in TUnixSystem::Exec (shellcmd=<optimized out>, this=<optimized out>) at /builddir/build/BUILD/root-6.28.0",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12372:11817,test,testing,11817,https://root.cern,https://github.com/root-project/root/issues/12372,1,['test'],['testing']
Testability,"/BUILD/root-6.28.00/tree/ntuple/v7/src/RPageStorageFile.cxx:51 in ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(std::string_view, const ROOT::Experimental::RNTupleWriteOptions&)>: The RNTuple file format will change. Do not store real data with this version of RNTuple!; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RNTupleSerialize.cxx:1148 in static ROOT::Experimental::RResult<void> ROOT::Experimental::Internal::RNTupleSerializer::DeserializeHeaderV1(const void*, uint32_t, ROOT::Experimental::RNTupleDescriptorBuilder&)>: Pre-release format version: RC 1; [ FAILED ] RNTuple.StdTuple (317 ms); [ --- ]; [----------] 18 tests from RNTuple (7848 ms total); [----------] Global test environment tear-down; [==========] 18 tests from 1 test suite ran. (7848 ms total); [ PASSED ] 16 tests.; [ FAILED ] 2 tests, listed below:; [ FAILED ] RNTuple.StdPair; [ FAILED ] RNTuple.StdTuple; 2 FAILED TESTS. ~~~. gtest-tree-ntuple-v7-test-ntuple-extended fails with:; Fatal: fWritePage[otherIdx].IsEmpty() violated. ~~~; 520/1318 Test #454: gtest-tree-ntuple-v7-test-ntuple-extended ...........................***Failed 73.15 sec; Running main() from /builddir/build/BUILD/googletest-1.13.0/googletest/src/gtest_main.cc; Note: Google Test filter = -RCsvDS.Remote:RRawFile.Remote:RSqliteDS.Davix:TFile.ReadWithoutGlobalRegistrationWeb:TFile.ReadWithoutGlobalRegistrationNet; [==========] Running 4 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 4 tests from RNTuple; [ RUN ] RNTuple.RealWorld1; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RPageStorageFile.cxx:51 in ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(std::string_view, const ROOT::Experimental::RNTupleWriteOptions&)>: The RNTuple file format will change. Do not store real data with this version of RNTuple!; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RNT",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12427:3253,test,test-ntuple-extended,3253,https://root.cern,https://github.com/root-project/root/issues/12427,1,['test'],['test-ntuple-extended']
Testability,"/Inputs/CompGen.h -o CompGen.h.pch; 1: : 'RUN: at line 4'; clang -x c++-header -fexceptions -fcxx-exceptions -std=c++14 -pthread /srv/root/src/root/interpreter/cling/test/CodeUnloading/PCH/Inputs/CompGen.h -o /srv/root/src/build/interpreter/cling/test/CodeUnloading/PCH/Output/Rel/Path/Relative.pch; 1: : 'RUN: at line 5'; cat /srv/root/src/root/interpreter/cling/test/CodeUnloading/PCH/VTables.C | /srv/root/src/build/interpreter/llvm/src/bin/cling --nologo -I/srv/root/src/build/interpreter/llvm/src/tools/clang/include -I/srv/root/src/root/interpreter/cling/test/CodeUnloading/PCH -Xclang -include-pch -Xclang CompGen.h.pch 2>&1 | /srv/root/src/build/interpreter/llvm/src/bin/FileCheck /srv/root/src/root/interpreter/cling/test/CodeUnloading/PCH/VTables.C; 1: : 'RUN: at line 6'; cat /srv/root/src/root/interpreter/cling/test/CodeUnloading/PCH/VTables.C | /srv/root/src/build/interpreter/llvm/src/bin/cling --nologo -I/srv/root/src/build/interpreter/llvm/src/tools/clang/include -I/srv/root/src/root/interpreter/cling/test/CodeUnloading/PCH -I/srv/root/src/build/interpreter/cling/test/CodeUnloading/PCH/Output/Rel/Path -include-pch Relative.pch 2>&1 | /srv/root/src/build/interpreter/llvm/src/bin/FileCheck /srv/root/src/root/interpreter/cling/test/CodeUnloading/PCH/VTables.C; 1: --; 1: Exit Code: 1; 1: ; 1: Command Output (stderr):; 1: --; 1: /srv/root/src/root/interpreter/cling/test/CodeUnloading/PCH/VTables.C:11:12: error: CHECK: expected string not found in input; 1: // CHECK: I was executed; 1: ^; 1: <stdin>:1:1: note: scanning from here; 1: cling: /srv/root/src/root/interpreter/cling/lib/Interpreter/CIFactory.cpp:926: bool {anonymous}::SetupCompiler(clang::CompilerInstance*, const cling::CompilerOptions&, bool, bool): Assertion `LangOpts.CPlusPlus17 && ""Language version mismatch""' failed.; 1: ^; 1: <stdin>:6:52: note: possible intended match here; 1: #4 0x00007faf5092270e __pthread_kill_implementation /usr/src/debug/sys-libs/glibc-2.35-r5/glibc-2.35/nptl/pthread_kill.c:44:76;",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10693:1988,test,test,1988,https://root.cern,https://github.com/root-project/root/issues/10693,2,['test'],['test']
Testability,"/Interpreter/RuntimeUniverse.h:27:10: fatal error: could not build module 'Cling_Runtime_Extra'; #include ""cling/Interpreter/Visibility.h""; ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~; input_line_2:1:10: fatal error: could not build module 'Cling_Runtime'; #include <cling/Interpreter/RuntimeUniverse.h>; ~~~~~~~~^; ../../../etc/cling//plugins/lib/libcladDifferentiator.a: member ../../../etc/cling//plugins/lib/libcladDifferentiator.a(MultiplexExternalRMVSource.cpp.o) in archive is not an object; collect2: error: ld returned 1 exit status; make[2]: *** [lib/libCling.so] Error 1; make[1]: *** [core/metacling/src/CMakeFiles/Cling.dir/all] Error 2; make[1]: *** Waiting for unfinished jobs....; In file included from input_line_3:1:; In file included from /home/root-build/etc/cling/lib/clang/13.0.0/include/assert.h:8:; In file included from /usr/include/assert.h:36:; In file included from /usr/include/features.h:399:; /usr/include/gnu/stubs.h:7:11: fatal error: 'gnu/stubs-32.h' file not found; # include <gnu/stubs-32.h>; ^~~~~~~~~~~~~~~~; While building module 'Core':; While building module 'ROOT_Rtypes' imported from /home/root-build/include/Rtypes.h:23:; /home/root-build/etc/cling/std.modulemap:462:12: error: header 'bits/invoke.h' not found; header ""bits/invoke.h""; ^; /home/root-build/include/RtypesCore.h:28:10: note: submodule of top-level module 'std' implicitly imported here; #include <cstddef> // size_t, NULL; ^; /home/root-build/include/ThreadLocalStorage.h:60:10: fatal error: could not build module 'ROOT_Rtypes'; #include ""RtypesCore.h""; ~~~~~~~~^~~~~~~~~~~~~~; While building module 'Core':; While building module 'ROOT_Foundation_Stage1_NoRTTI' imported from /home/root-build/include/Rtypes.h:195:; /home/root-build/etc/cling/std.modulemap:462:12: error: header 'bits/invoke.h' not found; header ""bits/invoke.h""; ^; /home/root-build/include/ROOT/RStringView.hxx:30:12: note: submodule of top-level module 'std' implicitly imported here; # include <experimental/string_view>; ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13453:6486,stub,stubs-,6486,https://root.cern,https://github.com/root-project/root/issues/13453,1,['stub'],['stubs-']
Testability,"/Research_LL/ctau-proper/lxplus_HTcondor/preselect/result/lib/libCore.so; #11 0x00007f5aceb44017 in TApplication::Terminate(int) () from /home/shamrock/Research_LL/ctau-proper/lxplus_HTcondor/preselect/result/lib/libCore.so; #12 0x00007f5acee3c936 in TRint::Run(bool) () from /home/shamrock/Research_LL/ctau-proper/lxplus_HTcondor/preselect/result/lib/libRint.so; #13 0x000000000040110c in main (); ===========================================================. Error in &lt;TList::Delete&gt;: A list is accessing an object (0x7f5acedf5830) already deleted (list name = ClosedFiles). </pre>. 3. Substituting the line; ```C++; auto dfOut = dfAug.Redefine(...);; ```; with; ```C++; auto dfOut = dfAug;; ```; and it will complete the execution without errors. ### Setup; 1. ROOT version: master (commit eb7c9c44465ad3f8db90d83598e3116a45ca630e), ""6.25/01""; 2. Operating system: NixOS; - system: `""x86_64-linux""`; - host os: `Linux 5.10.48, NixOS, 21.05.20210717.b2f87e0 (Okapi)`; - multi-user?: `yes`; - sandbox: `yes`; - version: `nix-env (Nix) 2.4pre20210601_5985b8b`; - nixpkgs: `/nix/var/nix/profiles/per-user/root/channels/nixos`; 3. How you obtained ROOT: Build myself by upgrading the Nixpkgs `root` package. ### Additional context; Nix expressions used to build ROOT:; `flake.nix`; ```Nix; {; inputs.nixpkgs.url = ""github:NixOS/nixpkgs/nixos-21.05"";; inputs.nixpkgs-root.url = ""github:ShamrockLee/nixpkgs/root-6-25"";; inputs.flake-utils.url = ""github:numtide/flake-utils"";; inputs.root-source.url = ""github:root-project/root/master"";; inputs.root-source.flake = false;; outputs = inputs@{nixpkgs, nixpkgs-root, flake-utils, root-source, ...}: flake-utils.lib.eachDefaultSystem (system: let; pkgs = nixpkgs.legacyPackages.${system};; pkgs-root = import nixpkgs-root {; inherit system;; overlays = [; (final: prev: {; root = prev.root.overrideAttrs (oldAttrs: {; src = root-source;; });; }); ];; };; in{; legacyPackages = pkgs;; legacyPackages-root = pkgs-root;; packages = {; inherit (pkgs-root) ro",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8857:10086,sandbox,sandbox,10086,https://root.cern,https://github.com/root-project/root/issues/8857,1,['sandbox'],['sandbox']
Testability,"/TRefArray.cxx:379; 5: Assuming 'i' is < field 'fSize' in /opt/root_src/core/cont/src/TRefArray.cxx:381; 6: Loop condition is true. Entering loop body in /opt/root_src/core/cont/src/TRefArray.cxx:381; 7: Assuming the condition is true in /opt/root_src/core/cont/src/TRefArray.cxx:382; 8: Taking true branch in /opt/root_src/core/cont/src/TRefArray.cxx:382; 9: 'uid' declared without an initial value in /opt/root_src/core/cont/src/TRefArray.cxx:384; 10: Calling 'TRefArray::GetObjectUID' in /opt/root_src/core/cont/src/TRefArray.cxx:385; 11: Calling 'TObject::TestBit' in /opt/root_src/core/cont/src/TRefArray.cxx:211; 12: Assuming the condition is false in /opt/root_src/core/base/inc/TObject.h:187; 13: Returning zero, which participates in a condition later in /opt/root_src/core/base/inc/TObject.h:187; 14: Returning from 'TObject::TestBit' in /opt/root_src/core/cont/src/TRefArray.cxx:211; 15: Taking false branch in /opt/root_src/core/cont/src/TRefArray.cxx:211; 16: Calling 'TObject::TestBit' in /opt/root_src/core/cont/src/TRefArray.cxx:213; 17: Assuming the condition is true in /opt/root_src/core/base/inc/TObject.h:187; 18: Returning the value 1, which participates in a condition later in /opt/root_src/core/base/inc/TObject.h:187; 19: Returning from 'TObject::TestBit' in /opt/root_src/core/cont/src/TRefArray.cxx:213; 20: Taking true branch in /opt/root_src/core/cont/src/TRefArray.cxx:213; 21: Assuming the condition is false in /opt/root_src/core/cont/src/TRefArray.cxx:214; 22: 'valid' is false in /opt/root_src/core/cont/src/TRefArray.cxx:215; 23: Taking false branch in /opt/root_src/core/cont/src/TRefArray.cxx:215; 24: Assuming the condition is true in /opt/root_src/core/cont/src/TRefArray.cxx:218; 25: Taking true branch in /opt/root_src/core/cont/src/TRefArray.cxx:218; 26: Assuming 'gDebug' is <= 3 in /opt/root_src/core/cont/src/TRefArray.cxx:222; 27: Taking false branch in /opt/root_src/core/cont/src/TRefArray.cxx:222; 28: 'valid' is true in /opt/root_src/core/cont/src/TR",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7424:21575,Test,TestBit,21575,https://root.cern,https://github.com/root-project/root/issues/7424,1,['Test'],['TestBit']
Testability,"/build/jenkins/night/LABEL/mac1014/SPEC/cxxmod-noimt/root/test/testGenVectorVc.cxx:194:1: error: redefinition of 'Point' as different kind of symbol; using Point = ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<T>, ROOT::Math::DefaultCoordinateSystemTag>;; ^; In module 'Darwin' imported from /Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include/assert.h:42:; /Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include/MacTypes.h:538:8: note: previous definition is here; struct Point {; ^",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3605:58,test,test,58,https://root.cern,https://github.com/root-project/root/pull/3605,3,"['assert', 'test']","['assert', 'test', 'testGenVectorVc']"
Testability,"/builddir/build/BUILD/root-6.08.04/test/stressEntryList.cxx:616:42: error: 'function' is not a member of 'std'; using fcnCharPtrPair = std::pair<std::function<bool()>,const char*>;",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/353:35,test,test,35,https://root.cern,https://github.com/root-project/root/pull/353,1,['test'],['test']
Testability,"/builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/test/ntuple_types.cxx:102: Failure; Expected equality of these values:; (alignof(std::pair<int64_t, float>)); Which is: 4; otherField->GetAlignment(); Which is: 8; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RPageStorageFile.cxx:51 in ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(std::string_view, const ROOT::Experimental::RNTupleWriteOptions&)>: The RNTuple file format will change. Do not store real data with this version of RNTuple!; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RNTupleSerialize.cxx:1148 in static ROOT::Experimental::RResult<void> ROOT::Experimental::Internal::RNTupleSerializer::DeserializeHeaderV1(const void*, uint32_t, ROOT::Experimental::RNTupleDescriptorBuilder&)>: Pre-release format version: RC 1; [ FAILED ] RNTuple.StdPair (287 ms); [ --- ]; [ RUN ] RNTuple.StdTuple; /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/test/ntuple_types.cxx:151: Failure; Expected equality of these values:; (alignof(std::tuple<char, int64_t, char>)); Which is: 4; otherField->GetAlignment(); Which is: 8; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RPageStorageFile.cxx:51 in ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(std::string_view, const ROOT::Experimental::RNTupleWriteOptions&)>: The RNTuple file format will change. Do not store real data with this version of RNTuple!; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RNTupleSerialize.cxx:1148 in static ROOT::Experimental::RResult<void> ROOT::Experimental::Internal::RNTupleSerializer::DeserializeHeaderV1(const void*, uint32_t, ROOT::Experimental::RNTupleDescriptorBuilder&)>: Pre-release format version: RC 1; [ FAILED ] RNTuple.StdTuple (317 ms); [ --- ]; [----------] 18 tests from RNTuple (7848 ms total); [----------] Global test environment tear-down; [==========] 18 tes",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12427:2054,test,test,2054,https://root.cern,https://github.com/root-project/root/issues/12427,1,['test'],['test']
Testability,"/core/base/inc/TObject.h:187; 49: Returning from 'TObject::TestBit' in /opt/root_src/io/io/src/TStreamerInfo.cxx:1827; 50: Taking true branch in /opt/root_src/io/io/src/TStreamerInfo.cxx:1827; 51: Assuming the condition is true in /opt/root_src/io/io/src/TStreamerInfo.cxx:1828; 52: '?' condition is true in /opt/root_src/io/io/src/TStreamerInfo.cxx:1828; 53: Assuming 'rule' is non-null in /opt/root_src/io/io/src/TStreamerInfo.cxx:1834; 54: Taking false branch in /opt/root_src/io/io/src/TStreamerInfo.cxx:1834; 55: 'targets' initialized here in /opt/root_src/io/io/src/TStreamerInfo.cxx:1843; 56: Assuming 'targets' is null in /opt/root_src/io/io/src/TStreamerInfo.cxx:1844; 57: Taking true branch in /opt/root_src/io/io/src/TStreamerInfo.cxx:1844; 58: Called C++ object pointer is null in /opt/root_src/io/io/src/TStreamerInfo.cxx:1847; /opt/root_src/io/io/src/TStreamerInfo.cxx:2408:50: warning: Called C++ object pointer is null [clang-analyzer-core.CallAndMessage]; 1: Calling 'TObject::TestBit' in /opt/root_src/io/io/src/TStreamerInfo.cxx:1700; 2: Assuming the condition is false in /opt/root_src/core/base/inc/TObject.h:187; 3: Returning zero, which participates in a condition later in /opt/root_src/core/base/inc/TObject.h:187; 4: Returning from 'TObject::TestBit' in /opt/root_src/io/io/src/TStreamerInfo.cxx:1700; 5: Taking false branch in /opt/root_src/io/io/src/TStreamerInfo.cxx:1700; 6: Calling 'TObject::TestBit' in /opt/root_src/io/io/src/TStreamerInfo.cxx:1703; 7: Assuming the condition is false in /opt/root_src/core/base/inc/TObject.h:187; 8: Returning zero, which participates in a condition later in /opt/root_src/core/base/inc/TObject.h:187; 9: Returning from 'TObject::TestBit' in /opt/root_src/io/io/src/TStreamerInfo.cxx:1703; 10: Taking false branch in /opt/root_src/io/io/src/TStreamerInfo.cxx:1703; 11: Assuming 'gDebug' is <= 0 in /opt/root_src/io/io/src/TStreamerInfo.cxx:1709; 12: Taking false branch in /opt/root_src/io/io/src/TStreamerInfo.cxx:1709; 13: Assuming",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7431:107439,Test,TestBit,107439,https://root.cern,https://github.com/root-project/root/issues/7431,1,['Test'],['TestBit']
Testability,"/github.com/minimistjs/minimist/commit/56cad44c7f879b9bb5ec18fcc349308024a89bfc""><code>56cad44</code></a></li>; <li>[Dev Deps] update <code>covert</code>, <code>tape</code>; remove unnecessary <code>tap</code> <a href=""https://github.com/minimistjs/minimist/commit/49c5f9fb7e6a92db9eb340cc679de92fb3aacded""><code>49c5f9f</code></a></li>; <li>[Tests] add <code>aud</code> in <code>posttest</code> <a href=""https://github.com/minimistjs/minimist/commit/228ae938f3cd9db9dfd8bd7458b076a7b2aef280""><code>228ae93</code></a></li>; <li>[meta] add <code>safe-publish-latest</code> <a href=""https://github.com/minimistjs/minimist/commit/01fc23f5104f85c75059972e01dd33796ab529ff""><code>01fc23f</code></a></li>; <li>[meta] update repo URLs <a href=""https://github.com/minimistjs/minimist/commit/6b164c7d68e0b6bf32f894699effdfb7c63041dd""><code>6b164c7</code></a></li>; </ul>; <h2><a href=""https://github.com/minimistjs/minimist/compare/v1.2.5...v1.2.6"">v1.2.6</a> - 2022-03-21</h2>; <h3>Commits</h3>; <ul>; <li>test from prototype pollution PR <a href=""https://github.com/minimistjs/minimist/commit/bc8ecee43875261f4f17eb20b1243d3ed15e70eb""><code>bc8ecee</code></a></li>; <li>isConstructorOrProto adapted from PR <a href=""https://github.com/minimistjs/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d""><code>c2b9819</code></a></li>; <li>security notice for additional prototype pollution issue <a href=""https://github.com/minimistjs/minimist/commit/ef88b9325f77b5ee643ccfc97e2ebda577e4c4e2""><code>ef88b93</code></a></li>; </ul>; <h2><a href=""https://github.com/minimistjs/minimist/compare/v1.2.4...v1.2.5"">v1.2.5</a> - 2020-03-12</h2>; <h2><a href=""https://github.com/minimistjs/minimist/compare/v1.2.3...v1.2.4"">v1.2.4</a> - 2020-03-11</h2>; <h3>Commits</h3>; <ul>; <li>security notice <a href=""https://github.com/minimistjs/minimist/commit/4cf1354839cb972e38496d35e12f806eea92c11f""><code>4cf1354</code></a></li>; <li>additional test for constructor prototype pollution <a href=""https://github.com/minimi",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11865:2847,test,test,2847,https://root.cern,https://github.com/root-project/root/pull/11865,1,['test'],['test']
Testability,"/home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/build/lib/libCling.so); ==1932== by 0x9415176: llvm::vfs::getVFSFromYAML(std::unique_ptr<llvm::MemoryBuffer, std::default_delete<llvm::MemoryBuffer> >, void (*)(llvm::SMDiagnostic const&, void*), llvm::StringRef, void*, llvm::IntrusiveRefCntPtr<llvm::vfs::FileSystem>) (in /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/build/lib/libCling.so); ==1932== by 0x64D7D9D: (anonymous namespace)::collectModuleMaps(clang::CompilerInstance&, llvm::SmallVectorImpl<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&) [clone .constprop.575] (in /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/build/lib/libCling.so); ==1932== by 0x64D8CAA: (anonymous namespace)::setupCxxModules(clang::CompilerInstance&) (in /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/build/lib/libCling.so); ==1932== by 0x64DB45A: (anonymous namespace)::createCIImpl(std::unique_ptr<llvm::MemoryBuffer, std::default_delete<llvm::MemoryBuffer> >, cling::CompilerOptions const&, char const*, std::unique_ptr<clang::ASTConsumer, std::default_delete<clang::ASTConsumer> >, std::vector<std::shared_ptr<clang::ModuleFileExtension>, std::allocator<std::shared_ptr<clang::ModuleFileExtension> > > const&, bool, bool) (in /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/build/lib/libCling.so); ==1932== by 0x64DD0E9: cling::CIFactory::createCI(llvm::StringRef, cling::InvocationOptions const&, char const*, std::unique_ptr<clang::ASTConsumer, std::default_delete<clang::ASTConsumer> >, std::vector<std::shared_ptr<clang::ModuleFileExtension>, std::allocator<std::shared_ptr<clang::ModuleFileExtension> > > const&) (in /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/build/lib/libCling.so). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9476:3547,test,tested,3547,https://root.cern,https://github.com/root-project/root/pull/9476,1,['test'],['tested']
Testability,"/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp:810. #12 0x00007fffe3d807a6 in clang::declvisitor::Base<clang::declvisitor::make_ptr, clang::TemplateDeclInstantiator, clang::Decl*>::Visit (this=0x7fffffff59f0, D=0x51e8548). at /scratch/greenc/test-products/root/v6_20_04/build/Linux64bit+3.10-2.17-e20-p382-debug/interpreter/llvm/src/tools/clang/include/clang/AST/DeclNodes.inc:369. #13 0x00007fffe3d4796c in clang::Sema::InstantiateClass (this=0x7da020, PointOfInstantiation=..., Instantiation=0x7e8ed10, Pattern=0x51e4900, TemplateArgs=..., TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2083. #14 0x00007fffe3d49340 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8ed10, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2543. #15 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff5ff0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #16 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #17 0x00007fffe35607f9 in clang::Sema::RequireCompleteType<clang::SourceRange> (this=0x7da020, Loc=..., T=..., DiagID=2588). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/Sema/Sema.h:1653. --Type <RET> for more, q to quit, c to continue without paging--c. #18 0x00007fffe355c52a in clang::Sema::RequireCompleteDeclContext (this=0x7da02",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5462:4932,test,test-products,4932,https://root.cern,https://github.com/root-project/root/pull/5462,1,['test'],['test-products']
Testability,"/libc.so.6; #1 0x00007f3e5f0701eb in do_system () from /lib64/libc.so.6; #2 0x00007f3e5f91a8d8 in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x558efe2e6c50) at /builddir/build/BUILD/root-6.28.00/core/unix/src/TUnixSystem.cxx:2104; #3 TUnixSystem::StackTrace (this=0x558efe2e6c50) at /builddir/build/BUILD/root-6.28.00/core/unix/src/TUnixSystem.cxx:2395; #4 0x00007f3e5f919dd4 in TUnixSystem::DispatchSignals (this=0x558efe2e6c50, sig=kSigSegmentationViolation) at /builddir/build/BUILD/root-6.28.00/core/unix/src/TUnixSystem.cxx:3615; #5 <signal handler called>; #6 ROOT::Experimental::RClassField::RClassField (this=0x7ffc9edb22f0, fieldName=..., className=..., classp=<optimized out>) at /usr/include/c++/13/bits/new_allocator.h:88; #7 0x00007f3e5fcafc66 in ROOT::Experimental::RClassField::RClassField (this=this; entry=0x7ffc9edb22f0, fieldName=""klass"", className=""8G\325Y\212U"") at /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RField.cxx:841; #8 0x0000558efca002c2 in ROOT::Experimental::RField<TestEBO, void>::RField (name=..., this=0x7ffc9edb22f0) at /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/inc/ROOT/RField.hxx:643; #9 RNTuple_TClassEBO_Test::TestBody (this=<optimized out>) at /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/test/ntuple_types.cxx:387; #10 0x00007f3e5fc02eb3 in void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) [clone .constprop.0] () from /lib64/libgtest.so.1.13.0; #11 0x00007f3e5fbef17e in testing::Test::Run() () from /lib64/libgtest.so.1.13.0; #12 0x00007f3e5fbef385 in testing::TestInfo::Run() () from /lib64/libgtest.so.1.13.0; #13 0x00007f3e5fbef4d7 in testing::TestSuite::Run() () from /lib64/libgtest.so.1.13.0; #14 0x00007f3e5fbfc090 in testing::internal::UnitTestImpl::RunAllTests() () from /lib64/libgtest.so.1.13.0; #15 0x00007f3e5fbfae98 in testing::UnitTest::Run() () from /lib64/libgtest.so.1.13.0; #16 0x00007f3e5fbac116 in main () from /lib64",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12428:7783,Test,TestEBO,7783,https://root.cern,https://github.com/root-project/root/issues/12428,1,['Test'],['TestEBO']
Testability,/llvm/src/tools/clang/lib/Lex/CMakeFiles/obj.clangLex.dir/PPCaching.cpp.o -MF interpreter/llvm/src/tools/clang/lib/Lex/CMakeFiles/obj.clangLex.dir/PPCaching.cpp.o.d -o interpreter/llvm/src/tools/clang/lib/Lex/CMakeFiles/obj.clangLex.dir/PPCaching.cpp.o -c /scratch/cmsbuild/jenkins_b/workspace/ib-run-pr-tests/testBuildDir/BUILD/slc7_ppc64le_gcc10/lcg/root/6.24.07-12a11ac5dbf21d7c2a6a8cef92c99bc0/root-6.24.07/interpreter/llvm/src/tools/clang/lib/Lex/PPCaching.cpp; [6494/9540] /scratch/cmsbuild/jenkins_b/workspace/ib-run-pr-tests/testBuildDir/slc7_ppc64le_gcc10/external/gcc/10.3.0-84898dea653199466402e67d73657f10/bin/g++ -DGTEST_HAS_RTTI=0 -D_GNU_SOURCE -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS -Iinterpreter/llvm/src/tools/clang/lib/Lex -I/scratch/cmsbuild/jenkins_b/workspace/ib-run-pr-tests/testBuildDir/BUILD/slc7_ppc64le_gcc10/lcg/root/6.24.07-12a11ac5dbf21d7c2a6a8cef92c99bc0/root-6.24.07/interpreter/llvm/src/tools/clang/lib/Lex -I/scratch/cmsbuild/jenkins_b/workspace/ib-run-pr-tests/testBuildDir/BUILD/slc7_ppc64le_gcc10/lcg/root/6.24.07-12a11ac5dbf21d7c2a6a8cef92c99bc0/root-6.24.07/interpreter/llvm/src/tools/clang/include -Iinterpreter/llvm/src/tools/clang/include -I/scratch/cmsbuild/jenkins_b/workspace/ib-run-pr-tests/testBuildDir/slc7_ppc64le_gcc10/external/libxml2/2.9.10-32fb6ccc7a5c1482269c150e9287ec24/include/libxml2 -Iinterpreter/llvm/src/include -I/scratch/cmsbuild/jenkins_b/workspace/ib-run-pr-tests/testBuildDir/BUILD/slc7_ppc64le_gcc10/lcg/root/6.24.07-12a11ac5dbf21d7c2a6a8cef92c99bc0/root-6.24.07/interpreter/llvm/src/include -D__ROOFIT_NOBANNER -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-semantic-interposition -fPIC -fvisibility-inlines-hidden -Werror=date-time -std=c++1z -w -fdiagnostics-color -ffunction-sections -fdata-sections -fno-common -Woverloaded-virtual -fno-strict-aliasing -O3 -DNDEBUG -fvisibility=hidden -fvi,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9424:3113,test,tests,3113,https://root.cern,https://github.com/root-project/root/issues/9424,2,['test'],"['testBuildDir', 'tests']"
Testability,"/opt/root_src/core/cont/src/TRefArray.cxx:386:25: warning: Assigned value is garbage or undefined [clang-analyzer-core.uninitialized.Assign]; 1: Assuming 'obj' is non-null in /opt/root_src/core/cont/src/TRefArray.cxx:378; 2: Taking false branch in /opt/root_src/core/cont/src/TRefArray.cxx:378; 3: Assuming the condition is true in /opt/root_src/core/cont/src/TRefArray.cxx:379; 4: Taking true branch in /opt/root_src/core/cont/src/TRefArray.cxx:379; 5: Assuming 'i' is < field 'fSize' in /opt/root_src/core/cont/src/TRefArray.cxx:381; 6: Loop condition is true. Entering loop body in /opt/root_src/core/cont/src/TRefArray.cxx:381; 7: Assuming the condition is true in /opt/root_src/core/cont/src/TRefArray.cxx:382; 8: Taking true branch in /opt/root_src/core/cont/src/TRefArray.cxx:382; 9: 'uid' declared without an initial value in /opt/root_src/core/cont/src/TRefArray.cxx:384; 10: Calling 'TRefArray::GetObjectUID' in /opt/root_src/core/cont/src/TRefArray.cxx:385; 11: Calling 'TObject::TestBit' in /opt/root_src/core/cont/src/TRefArray.cxx:211; 12: Assuming the condition is false in /opt/root_src/core/base/inc/TObject.h:187; 13: Returning zero, which participates in a condition later in /opt/root_src/core/base/inc/TObject.h:187; 14: Returning from 'TObject::TestBit' in /opt/root_src/core/cont/src/TRefArray.cxx:211; 15: Taking false branch in /opt/root_src/core/cont/src/TRefArray.cxx:211; 16: Calling 'TObject::TestBit' in /opt/root_src/core/cont/src/TRefArray.cxx:213; 17: Assuming the condition is true in /opt/root_src/core/base/inc/TObject.h:187; 18: Returning the value 1, which participates in a condition later in /opt/root_src/core/base/inc/TObject.h:187; 19: Returning from 'TObject::TestBit' in /opt/root_src/core/cont/src/TRefArray.cxx:213; 20: Taking true branch in /opt/root_src/core/cont/src/TRefArray.cxx:213; 21: Assuming the condition is false in /opt/root_src/core/cont/src/TRefArray.cxx:214; 22: 'valid' is false in /opt/root_src/core/cont/src/TRefArray.cxx:215; 23: Taki",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7424:21144,Test,TestBit,21144,https://root.cern,https://github.com/root-project/root/issues/7424,1,['Test'],['TestBit']
Testability,"/opt/root_src/io/io/src/TStreamerInfo.cxx:1100; 80: Called C++ object pointer is null in /opt/root_src/io/io/src/TStreamerInfo.cxx:1116; /opt/root_src/io/io/src/TStreamerInfo.cxx:1847:53: warning: Called C++ object pointer is null [clang-analyzer-core.CallAndMessage]; 1: Calling 'TObject::TestBit' in /opt/root_src/io/io/src/TStreamerInfo.cxx:1700; 2: Assuming the condition is false in /opt/root_src/core/base/inc/TObject.h:187; 3: Returning zero, which participates in a condition later in /opt/root_src/core/base/inc/TObject.h:187; 4: Returning from 'TObject::TestBit' in /opt/root_src/io/io/src/TStreamerInfo.cxx:1700; 5: Taking false branch in /opt/root_src/io/io/src/TStreamerInfo.cxx:1700; 6: Calling 'TObject::TestBit' in /opt/root_src/io/io/src/TStreamerInfo.cxx:1703; 7: Assuming the condition is false in /opt/root_src/core/base/inc/TObject.h:187; 8: Returning zero, which participates in a condition later in /opt/root_src/core/base/inc/TObject.h:187; 9: Returning from 'TObject::TestBit' in /opt/root_src/io/io/src/TStreamerInfo.cxx:1703; 10: Taking false branch in /opt/root_src/io/io/src/TStreamerInfo.cxx:1703; 11: Assuming 'gDebug' is <= 0 in /opt/root_src/io/io/src/TStreamerInfo.cxx:1709; 12: Taking false branch in /opt/root_src/io/io/src/TStreamerInfo.cxx:1709; 13: Assuming the condition is false in /opt/root_src/io/io/src/TStreamerInfo.cxx:1715; 14: Taking false branch in /opt/root_src/io/io/src/TStreamerInfo.cxx:1715; 15: Assuming the condition is false in /opt/root_src/io/io/src/TStreamerInfo.cxx:1758; 16: Left side of '&&' is false in /opt/root_src/io/io/src/TStreamerInfo.cxx:1758; 17: Assuming 'ruleSet' is null in /opt/root_src/io/io/src/TStreamerInfo.cxx:1784; 18: Taking false branch in /opt/root_src/io/io/src/TStreamerInfo.cxx:1784; 19: Left side of '&&' is false in /opt/root_src/io/io/src/TStreamerInfo.cxx:1786; 20: Calling 'TIter::operator()' in /opt/root_src/io/io/src/TStreamerInfo.cxx:1792; 21: Calling 'TIter::Next' in /opt/root_src/core/cont/inc/TCollec",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7431:103042,Test,TestBit,103042,https://root.cern,https://github.com/root-project/root/issues/7431,1,['Test'],['TestBit']
Testability,"/opt/root_src/io/io/src/TStreamerInfo.cxx:1844; 58: Called C++ object pointer is null in /opt/root_src/io/io/src/TStreamerInfo.cxx:1847; /opt/root_src/io/io/src/TStreamerInfo.cxx:2408:50: warning: Called C++ object pointer is null [clang-analyzer-core.CallAndMessage]; 1: Calling 'TObject::TestBit' in /opt/root_src/io/io/src/TStreamerInfo.cxx:1700; 2: Assuming the condition is false in /opt/root_src/core/base/inc/TObject.h:187; 3: Returning zero, which participates in a condition later in /opt/root_src/core/base/inc/TObject.h:187; 4: Returning from 'TObject::TestBit' in /opt/root_src/io/io/src/TStreamerInfo.cxx:1700; 5: Taking false branch in /opt/root_src/io/io/src/TStreamerInfo.cxx:1700; 6: Calling 'TObject::TestBit' in /opt/root_src/io/io/src/TStreamerInfo.cxx:1703; 7: Assuming the condition is false in /opt/root_src/core/base/inc/TObject.h:187; 8: Returning zero, which participates in a condition later in /opt/root_src/core/base/inc/TObject.h:187; 9: Returning from 'TObject::TestBit' in /opt/root_src/io/io/src/TStreamerInfo.cxx:1703; 10: Taking false branch in /opt/root_src/io/io/src/TStreamerInfo.cxx:1703; 11: Assuming 'gDebug' is <= 0 in /opt/root_src/io/io/src/TStreamerInfo.cxx:1709; 12: Taking false branch in /opt/root_src/io/io/src/TStreamerInfo.cxx:1709; 13: Assuming the condition is false in /opt/root_src/io/io/src/TStreamerInfo.cxx:1715; 14: Taking false branch in /opt/root_src/io/io/src/TStreamerInfo.cxx:1715; 15: Assuming the condition is false in /opt/root_src/io/io/src/TStreamerInfo.cxx:1758; 16: Left side of '&&' is false in /opt/root_src/io/io/src/TStreamerInfo.cxx:1758; 17: Assuming 'ruleSet' is null in /opt/root_src/io/io/src/TStreamerInfo.cxx:1784; 18: Taking false branch in /opt/root_src/io/io/src/TStreamerInfo.cxx:1784; 19: Left side of '&&' is false in /opt/root_src/io/io/src/TStreamerInfo.cxx:1786; 20: Calling 'TIter::operator()' in /opt/root_src/io/io/src/TStreamerInfo.cxx:1792; 21: Calling 'TIter::Next' in /opt/root_src/core/cont/inc/TCollec",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7431:108142,Test,TestBit,108142,https://root.cern,https://github.com/root-project/root/issues/7431,1,['Test'],['TestBit']
Testability,"/root-6.28.00/tree/dataframe/src/RLoopManager.cxx:826; #24 0x000000013a4e034c in ROOT::RDF::RResultPtr<double>::TriggerRun (this=0x7fffd51c8a38) at /builddir/build/BUILD/root-6.28.00/tree/dataframe/inc/ROOT/RResultPtr.hxx:360; #25 ROOT::RDF::RResultPtr<double>::Get (this=0x7fffd51c8a38) at /builddir/build/BUILD/root-6.28.00/tree/dataframe/inc/ROOT/RResultPtr.hxx:154; #26 ROOT::RDF::RResultPtr<double>::GetValue (this=0x7fffd51c8a38) at /builddir/build/BUILD/root-6.28.00/tree/dataframe/inc/ROOT/RResultPtr.hxx:196; #27 RooAbsDataHelper_MTConstruction_Test::TestBody (this=<optimized out>) at /builddir/build/BUILD/root-6.28.00/roofit/RDataFrameHelpers/test/testActionHelpers.cxx:66; #28 0x00007fffa3390cbc in void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) () from /lib64/libgtest.so.1.8.0; #29 0x00007fffa3381374 in testing::Test::Run() () from /lib64/libgtest.so.1.8.0; #30 0x00007fffa3381578 in testing::TestInfo::Run() () from /lib64/libgtest.so.1.8.0; #31 0x00007fffa33816b4 in testing::TestCase::Run() () from /lib64/libgtest.so.1.8.0; #32 0x00007fffa3381da8 in testing::internal::UnitTestImpl::RunAllTests() () from /lib64/libgtest.so.1.8.0; #33 0x00007fffa3382004 in testing::UnitTest::Run() () from /lib64/libgtest.so.1.8.0; #34 0x00007fffa3310988 in main () from /lib64/libgtest_main.so.1.8.0; #35 0x00007fffa0829f5c in generic_start_main.isra () from /lib64/glibc-hwcaps/power9/libc-2.28.so; #36 0x00007fffa082a0f4 in __libc_start_main () from /lib64/glibc-hwcaps/power9/libc-2.28.so; #37 0x0000000000000000 in ?? (); ===========================================================; pure virtual method called; terminate called without an active exception; ~~~. There are failures running from Python:. ~~~; 427/1192 Test #397: pyunittests-dataframe-histograms ....................................***Failed 191.35 sec; test_histo1D (dataframe_histograms.HistogramsFromRDF) ... *** Break *** segmentati",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12372:25449,test,testing,25449,https://root.cern,https://github.com/root-project/root/issues/12372,2,"['Test', 'test']","['TestInfo', 'testing']"
Testability,"/root/files/9735187/0001-Print-statements-for-DistRDF-Cling-failure.txt). The following is a Python script with the test; ```py; import os. import pyspark; from dask.distributed import Client, LocalCluster. import ROOT; RunGraphs = ROOT.RDF.Experimental.Distributed.RunGraphs; SparkDF = ROOT.RDF.Experimental.Distributed.Spark.RDataFrame; DaskDF = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame; # verbosity = ROOT.Experimental.RLogScopedVerbosity(ROOT.Detail.RDF.RDFLogChannel(), ROOT.Experimental.ELogLevel.kDebug+10). def connection():; daskconn = Client(LocalCluster(n_workers=2, threads_per_worker=1, processes=True, memory_limit=""2GiB"")). conf = {""spark.master"": ""local[2]"", ""spark.driver.memory"": ""4g"", ""spark.app.name"": ""roottest-distrdf-common""}; sparkconf = pyspark.SparkConf().setAll(conf.items()); sparkconn = pyspark.SparkContext(conf=sparkconf). return daskconn, sparkconn. def test_rungraphs_sparkanddask_3histos(daskconn, sparkconn):; """"""; Submit three different RDF graphs concurrently to Spark and Dask; """"""; # Create a test file for processing; treename = ""myTree""; filename = ""2clusters.root""; nentries = 10000; opts = ROOT.RDF.RSnapshotOptions(); opts.fAutoFlush = 5000; ROOT.RDataFrame(nentries).Define(""b1"", ""42"")\; .Define(""b2"", ""42"")\; .Define(""b3"", ""42"")\; .Snapshot(treename, filename, [""b1"", ""b2"", ""b3""], opts). histoproxies_spark = [; SparkDF(treename, filename, sparkcontext=sparkconn, npartitions=2); .Histo1D((col, col, 1, 40, 45), col); for col in [""b1"", ""b2"", ""b3""]; ]. histoproxies_dask = [; DaskDF(treename, filename, daskclient=daskconn, npartitions=2); .Histo1D((col, col, 1, 40, 45), col); for col in [""b1"", ""b2"", ""b3""]; ]. histoproxies = histoproxies_spark + histoproxies_dask. # Before triggering the computation graphs values are None; for proxy in histoproxies:; assert proxy.proxied_node.value is None. RunGraphs(histoproxies). # After RunGraphs all histograms are correctly assigned to the; # node objects; for proxy in histoproxies:; histo = proxy.pro",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11515:13078,test,test,13078,https://root.cern,https://github.com/root-project/root/issues/11515,1,['test'],['test']
Testability,"/root/system.rootrc`, there is still confusing behavior and new files can be written without compability. In particular, *new* files are not opened in compatibility mode (largely limiting the usefulness of the configuration flag). ### Reproducer. ```; gEnv->GetValue(""TFile.v630forwardCompatibility"", 0). TFile file1 = TFile(""file1.root"",""CREATE""); file1.TestBit(TFile::k630forwardCompatibility); file1.Close(). TFile file2 = TFile(""file1.root"",""READ""); file2.TestBit(TFile::k630forwardCompatibility); file2.Close(). TFile* file3 = TFile::Open(""file3.root"",""CREATE""); file3->TestBit(TFile::k630forwardCompatibility); file3->Close(). TFile* file4 = TFile::Open(""file3.root"",""READ""); file4->TestBit(TFile::k630forwardCompatibility); file4->Close(); ```; produces; ```; $ root -l ; root [0] gEnv->GetValue(""TFile.v630forwardCompatibility"", 0); (int) 1; root [1] ; root [1] TFile file1 = TFile(""file1.root"",""CREATE""); (TFile &) Name: file1.root Title: ; root [2] file1.TestBit(TFile::k630forwardCompatibility); (bool) false; root [3] file1.Close(); root [4] ; root [4] TFile file2 = TFile(""file1.root"",""READ""); (TFile &) Name: file1.root Title: ; root [5] file2.TestBit(TFile::k630forwardCompatibility); (bool) true; root [6] file2.Close(); root [7] ; root [7] TFile* file3 = TFile::Open(""file3.root"",""CREATE""); (TFile *) 0x5650bd7edba0; root [8] file3->TestBit(TFile::k630forwardCompatibility); (bool) false; root [9] file3->Close(); root [10] ; root [10] TFile* file4 = TFile::Open(""file3.root"",""READ""); (TFile *) 0x5650bd584570; root [11] file4->TestBit(TFile::k630forwardCompatibility); (bool) true; root [12] file4->Close(); ```. ### ROOT version. ```; ------------------------------------------------------------------; | Welcome to ROOT 6.30/02 https://root.cern |; | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on Aug 02 2024, 15:34:40 |; | From heads/master@tags/v6-30-02 |; | With g++ (Debian 12.2.0-14) 12.2.0 |; | Try '.help'/'.?', '.demo', '.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16189:1102,Test,TestBit,1102,https://root.cern,https://github.com/root-project/root/issues/16189,1,['Test'],['TestBit']
Testability,"/src/TFile.cxx:942:20; 418: #9 0x7f1c631788ad in TFile::~TFile() /home/jhahnfel/ROOT/src/io/io/src/TFile.cxx:527:4; 418: #10 0x7f1c63179ae8 in TFile::~TFile() /home/jhahnfel/ROOT/src/io/io/src/TFile.cxx:526:1; 418: #11 0x53554a in BulkApiMultipleTest_stdRead_Test::TestBody() /home/jhahnfel/ROOT/src/tree/tree/test/BulkApiMultiple.cxx:305:4. [...]. 418: previously allocated by thread T0 here:; 418: #0 0x530e28 in operator new(unsigned long) (/home/jhahnfel/ROOT/build-clang-asan-debug/tree/tree/test/testBulkApiMultiple+0x530e28); 418: #1 0x7f1c61f3a2d4 in TStorage::ObjectAlloc(unsigned long) /home/jhahnfel/ROOT/src/core/base/src/TStorage.cxx:330:19; 418: #2 0x559734 in TObject::operator new(unsigned long) /home/jhahnfel/ROOT/src/core/base/inc/TObject.h:167:46; 418: #3 0x7f1c66d6373e in ROOT::new_TTree(void*) /home/jhahnfel/ROOT/build-clang-asan-debug/tree/tree/G__Tree.cxx:4183:36; 418: #4 0x7f1c6214d5f9 in TClass::NewObject(TClass::ENewType, bool) const /home/jhahnfel/ROOT/src/core/meta/src/TClass.cxx:4956:14; 418: #5 0x7f1c6214d23a in TClass::New(TClass::ENewType, bool) const /home/jhahnfel/ROOT/src/core/meta/src/TClass.cxx:4933:15; 418: #6 0x7f1c6322497b in TKey::ReadObjectAny(TClass const*) /home/jhahnfel/ROOT/src/io/io/src/TKey.cxx:1077:21; 418: #7 0x7f1c6312be65 in TDirectoryFile::GetObjectChecked(char const*, TClass const*) /home/jhahnfel/ROOT/src/io/io/src/TDirectoryFile.cxx:1098:25; 418: #8 0x7f1c674d4205 in void TDirectory::GetObject<TTree>(char const*, TTree*&) /home/jhahnfel/ROOT/src/core/base/inc/TDirectory.h:205:18; 418: #9 0x7f1c6765a565 in TTreeReader::TTreeReader(char const*, TDirectory*, TEntryList*) /home/jhahnfel/ROOT/src/tree/treeplayer/src/TTreeReader.cxx:232:9; 418: #10 0x534886 in BulkApiMultipleTest_stdRead_Test::TestBody() /home/jhahnfel/ROOT/src/tree/tree/test/BulkApiMultiple.cxx:287:16; ```. Note: There may be other problems in the tests after this issue is fixed. Please check locally with an instrumented build that the tests pass afterwards!",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10012:3727,Test,TestBody,3727,https://root.cern,https://github.com/root-project/root/issues/10012,4,"['Test', 'test']","['TestBody', 'test', 'tests']"
Testability,"/src/tools/clang/lib/Lex/CMakeFiles/obj.clangLex.dir/Lexer.cpp.o.d -o interpreter/llvm/src/tools/clang/lib/Lex/CMakeFiles/obj.clangLex.dir/Lexer.cpp.o -c /scratch/cmsbuild/jenkins_b/workspace/ib-run-pr-tests/testBuildDir/BUILD/slc7_ppc64le_gcc10/lcg/root/6.24.07-12a11ac5dbf21d7c2a6a8cef92c99bc0/root-6.24.07/interpreter/llvm/src/tools/clang/lib/Lex/Lexer.cpp; /scratch/cmsbuild/jenkins_b/workspace/ib-run-pr-tests/testBuildDir/BUILD/slc7_ppc64le_gcc10/lcg/root/6.24.07-12a11ac5dbf21d7c2a6a8cef92c99bc0/root-6.24.07/interpreter/llvm/src/tools/clang/lib/Lex/Lexer.cpp: In member function 'bool clang::Lexer::SkipBlockComment(clang::Token&, const char*, bool&)':; /scratch/cmsbuild/jenkins_b/workspace/ib-run-pr-tests/testBuildDir/BUILD/slc7_ppc64le_gcc10/lcg/root/6.24.07-12a11ac5dbf21d7c2a6a8cef92c99bc0/root-6.24.07/interpreter/llvm/src/tools/clang/lib/Lex/Lexer.cpp:2549:34: error: ISO C++ forbids declaration of 'type name' with no type [-fpermissive]; 2549 | !vec_any_eq(*(const vector unsigned char*)CurPtr, Slashes)); | ^~~~~~; /scratch/cmsbuild/jenkins_b/workspace/ib-run-pr-tests/testBuildDir/BUILD/slc7_ppc64le_gcc10/lcg/root/6.24.07-12a11ac5dbf21d7c2a6a8cef92c99bc0/root-6.24.07/interpreter/llvm/src/tools/clang/lib/Lex/Lexer.cpp:2549:28: error: expected primary-expression before 'const'; 2549 | !vec_any_eq(*(const vector unsigned char*)CurPtr, Slashes)); | ^~~~~; /scratch/cmsbuild/jenkins_b/workspace/ib-run-pr-tests/testBuildDir/BUILD/slc7_ppc64le_gcc10/lcg/root/6.24.07-12a11ac5dbf21d7c2a6a8cef92c99bc0/root-6.24.07/interpreter/llvm/src/tools/clang/lib/Lex/Lexer.cpp:2549:28: error: expected ')' before 'const'; /scratch/cmsbuild/jenkins_b/workspace/ib-run-pr-tests/testBuildDir/BUILD/slc7_ppc64le_gcc10/lcg/root/6.24.07-12a11ac5dbf21d7c2a6a8cef92c99bc0/root-6.24.07/interpreter/llvm/src/tools/clang/lib/Lex/Lexer.cpp:2550:21: error: expected ')' before ';' token; 2550 | CurPtr += 16;; | ^; | ); In file included from /scratch/cmsbuild/jenkins_b/workspace/ib-run-pr-tests/testBuildDir",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9424:5346,test,tests,5346,https://root.cern,https://github.com/root-project/root/issues/9424,2,['test'],"['testBuildDir', 'tests']"
Testability,"/wlav/CPyCppyy/pull/12; - https://github.com/wlav/CPyCppyy/pull/14; - https://github.com/wlav/CPyCppyy/pull/16 *(was in PyROOT before)*; - https://github.com/wlav/CPyCppyy/pull/17 *(was in PyROOT before)*; - https://github.com/wlav/cppyy-backend/pull/20 *(was in PyROOT before)*; - https://github.com/wlav/CPyCppyy/pull/18; - https://github.com/wlav/CPyCppyy/pull/19; - https://github.com/wlav/CPyCppyy/pull/21; - https://github.com/wlav/CPyCppyy/pull/22; - https://github.com/wlav/CPyCppyy/pull/23. ## Performance validation. To validate the performance, I ran the [Python tests in roottest](https://github.com/root-project/roottest/tree/master/python) and the [PyROOT pythonization tests](https://github.com/root-project/root/tree/master/bindings/pyroot/pythonizations/test) and compared runtimes with and without the cppyy upgrade. The total runtime of these tests reduced by about 4 % from 208 s to 287 s, so the performance impact of this PR is marginal. The runtime comparison for each test can be found in [cppyy_upgrade_test_runtimes.txt](https://github.com/root-project/root/files/14623432/cppyy_upgrade_test_runtimes.txt).; The worst observed performance penalty is 24 %. However, significant speedups are observed in some of the longer tests. For convenience, the 20 tests with the longest runtime are listed here:; ```; title no_cppyy_upgrade cppyy_upgrade ratio; python-regression-regression 32.61 34.30 1.051825; pyroot-pyz-rdataframe-asnumpy 14.30 14.61 1.021678; pyroot-pyz-rdataframe-makenumpy 13.66 9.65 0.706442; python-function-function 12.27 11.08 0.903015; python-cpp-cpp 12.03 11.26 0.935993; python-cpp-advanced 11.55 10.83 0.937662; pyroot-pyz-rdataframe-histo-profile 11.24 7.37 0.655694; python-basic-basic 10.11 9.95 0.984174; python-stl-stl 8.35 7.87 0.942515; pyroot-pyz-rtensor 6.94 2.32 0.334294; python-ttree-ttree 6.15 5.70 0.926829; python-basic-datatype 5.87 5.86 0.998296; python-pickle-write 5.56 5.56 1.000000; python-basic-overload 5.29 5.30 1.001890; python-py",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14507:3201,test,test,3201,https://root.cern,https://github.com/root-project/root/pull/14507,1,['test'],['test']
Testability,"0 for s390x; 2. run unut tests. ### Setup. 1. ROOT version: 6.28.00; 2. Fedora Linux s390x, RHEL+EPEL s390x; 3. Compilation from source. ### Additional context. The failing tests. #### pyunittests-pyroot-pyz-rtensor . This is an endian issue:. $ printf '%08x\n%08x\n' 16777216 1; 01000000; 00000001; ~~~; 109/1272 Test #62: pyunittests-pyroot-pyz-rtensor ......................................***Failed 2.92 sec; test_memoryAdoption (rtensor.ArrayInterface.test_memoryAdoption); Test correct adoption of different datatypes ... ok; test_memoryLayout (rtensor.ArrayInterface.test_memoryLayout); Test adoption of the memory layout ... ok; test_ownData (rtensor.ArrayInterface.test_ownData); Test ownership of adopted numpy array ... ok; test_dtypes (rtensor.AsRTensor.test_dtypes); Test adoption of numpy arrays with different data types ... ok; test_memoryLayout (rtensor.AsRTensor.test_memoryLayout); Test adoption of the memory layout ... FAIL; test_strides (rtensor.AsRTensor.test_strides); Test adoption of the strides ... ok; test_expandDims (rtensor.NumpyCompliance.test_expandDims); Test np.expand_dims vs RTensor::ExpandDims ... ok; test_reshape (rtensor.NumpyCompliance.test_reshape); Test np.reshape vs RTensor::Reshape ... FAIL; test_slice (rtensor.NumpyCompliance.test_slice); Test slicing operations ... ok; test_squeeze (rtensor.NumpyCompliance.test_squeeze); Test np.squeeze vs RTensor::Squeeze ... ok; test_transpose (rtensor.NumpyCompliance.test_transpose); Test np.transpose vs RTensor::Transpose ... FAIL; ======================================================================; FAIL: test_memoryLayout (rtensor.AsRTensor.test_memoryLayout); Test adoption of the memory layout; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""/builddir/build/BUILD/root-6.28.00/bindings/pyroot/pythonizations/test/rtensor.py"", line 42, in test_memoryLayout; self.assertEqual(root_obj.GetMemoryLayout(), 1); AssertionError: 16777216 != ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12429:1239,Test,Test,1239,https://root.cern,https://github.com/root-project/root/issues/12429,1,['Test'],['Test']
Testability,"0 ms total); [----------] Global test environment tear-down; [==========] 14 tests from 1 test suite ran. (190 ms total); [ PASSED ] 12 tests.; [ FAILED ] 2 tests, listed below:; [ FAILED ] RNTuple.SerializeEnvelope; [ FAILED ] RNTuple.SerializeLocator; 2 FAILED TESTS; CMake Error at /builddir/build/BUILD/root-6.28.00/cmake/modules/RootTestDriver.cmake:232 (message):; error code: 1; ~~~. #### gtest-tree-ntuple-v7-test-ntuple-types. Endian issue:. $ printf '%x\n%x\n' 180388626432 42; 2a00000000; 2a; ~~~; 465/1272 Test #433: gtest-tree-ntuple-v7-test-ntuple-types ..............................***Failed 5.68 sec; Running main() from /builddir/build/BUILD/googletest-1.13.0/googletest/src/gtest_main.cc; Note: Google Test filter = -RCsvDS.Remote:RRawFile.Remote:RSqliteDS.Davix:TFile.ReadWithoutGlobalRegistrationWeb:TFile.ReadWithoutGlobalRegistrationNet:RNTuple.TClassEBO; [==========] Running 18 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 18 tests from RNTuple; [ RUN ] RNTuple.TypeName; [ OK ] RNTuple.TypeName (316 ms); [ RUN ] RNTuple.CreateField; [ OK ] RNTuple.CreateField (0 ms); [ RUN ] RNTuple.ArrayField; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RPageStorageFile.cxx:51 in ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(std::string_view, const ROOT::Experimental::RNTupleWriteOptions&)>: The RNTuple file format will change. Do not store real data with this version of RNTuple!; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RNTupleSerialize.cxx:1148 in static ROOT::Experimental::RResult<void> ROOT::Experimental::Internal::RNTupleSerializer::DeserializeHeaderV1(const void*, uint32_t, ROOT::Experimental::RNTupleDescriptorBuilder&)>: Pre-release format version: RC 1; [ OK ] RNTuple.ArrayField (23 ms); [ RUN ] RNTuple.StdPair; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RPageStorageFile.cxx:51 i",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12426:15767,test,tests,15767,https://root.cern,https://github.com/root-project/root/issues/12426,1,['test'],['tests']
Testability,"0/tree/dataframe/inc/ROOT/RResultPtr.hxx:360; #25 ROOT::RDF::RResultPtr<double>::Get (this=0x7fffd51c8a38) at /builddir/build/BUILD/root-6.28.00/tree/dataframe/inc/ROOT/RResultPtr.hxx:154; #26 ROOT::RDF::RResultPtr<double>::GetValue (this=0x7fffd51c8a38) at /builddir/build/BUILD/root-6.28.00/tree/dataframe/inc/ROOT/RResultPtr.hxx:196; #27 RooAbsDataHelper_MTConstruction_Test::TestBody (this=<optimized out>) at /builddir/build/BUILD/root-6.28.00/roofit/RDataFrameHelpers/test/testActionHelpers.cxx:66; #28 0x00007fffa3390cbc in void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) () from /lib64/libgtest.so.1.8.0; #29 0x00007fffa3381374 in testing::Test::Run() () from /lib64/libgtest.so.1.8.0; #30 0x00007fffa3381578 in testing::TestInfo::Run() () from /lib64/libgtest.so.1.8.0; #31 0x00007fffa33816b4 in testing::TestCase::Run() () from /lib64/libgtest.so.1.8.0; #32 0x00007fffa3381da8 in testing::internal::UnitTestImpl::RunAllTests() () from /lib64/libgtest.so.1.8.0; #33 0x00007fffa3382004 in testing::UnitTest::Run() () from /lib64/libgtest.so.1.8.0; #34 0x00007fffa3310988 in main () from /lib64/libgtest_main.so.1.8.0; #35 0x00007fffa0829f5c in generic_start_main.isra () from /lib64/glibc-hwcaps/power9/libc-2.28.so; #36 0x00007fffa082a0f4 in __libc_start_main () from /lib64/glibc-hwcaps/power9/libc-2.28.so; #37 0x0000000000000000 in ?? (); ===========================================================; pure virtual method called; terminate called without an active exception; ~~~. There are failures running from Python:. ~~~; 427/1192 Test #397: pyunittests-dataframe-histograms ....................................***Failed 191.35 sec; test_histo1D (dataframe_histograms.HistogramsFromRDF) ... *** Break *** segmentation violation; ===========================================================; There was a crash (#8 0x00007fff7c7ac284 in SigHandler (sig=<optimized out>) at /builddir/build/BUILD/root",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12372:25619,test,testing,25619,https://root.cern,https://github.com/root-project/root/issues/12372,1,['test'],['testing']
Testability,00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+; -- BEGIN TEST OUTPUT --. Processing /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+...; Checking FromHumanReadableSize; Checking ToHumanReadableSize; Checking 1024 vs 1.024KiB an 1KB; Checking 2097152 vs 2.09715MiB an 2MB; Checking 4294967296 vs 4.29497GiB an 4GB; Checking 8796093022208 vs 8.79609TiB an 8TB; Checking 18014398509481984 vs 18.0144EiB an 16EB; Checking 16 vs 16B and 16B; Checking 24576 vs 24.576KiB and 24KB; Checking 3.77487e+07 vs 37.7487MiB and 36MB; Checking 5.79821e+10 vs 57.9821GiB and 54GB; Checking 8.90604e+13 vs 89.0604TiB and 81TB; Checking 1.36797e+17 vs 136.797EiB and 121.5EB; Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB; Checking 3.22744e+23 vs 322.744YiB and 273.375YB; (int) 0. -- END TEST OUTPUT --; -- BEGIN TEST ERROR --; Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so; In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx_ACLiC_dict.cxx:41:; In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:1:; [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m; if (v < std::numeric_limits<T>::max()) {; [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~; [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4257:2426,TEST,TEST,2426,https://root.cern,https://github.com/root-project/root/pull/4257,2,['TEST'],['TEST']
Testability,"000-2013 NIKHEF, University of California & Stanford University; All rights reserved, please read http://roofit.sourceforge.net/license.txt; [#0] WARNING:DataHandling -- FAIL; test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy); Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events; ok; test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted); Test exporting to numpy and then importing back a weighted dataset. ... ok; test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic); Basic test with a real value and a category. ... ok; test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight); Test if the optional computation of derived weights works. ... ok; test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted); Test with a weighted dataset. ... ok; ======================================================================; FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range); Test that rows with out-of-range values are skipped, both for; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""/builddir/build/BUILD/root-6.26.10/bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py"", line 145, in test_ignoring_out_of_range; self.assertEqual(dataset_numpy.numEntries(), n_in_range); AssertionError: 42 != 0; ----------------------------------------------------------------------; Ran 6 tests in 1.621s; FAILED (failures=1); ~~~. ### Expected behavior. No failure. This test did not fail with numpy 1.23. ### To Reproduce. 1. The failing test is part of the source distribution. ### Setup. 1. ROOT version 6.26.10; 2. Operating system Fedora Rawhide i686; 3. How you obtained ROOT - package build fro",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12162:1612,Test,Test,1612,https://root.cern,https://github.com/root-project/root/issues/12162,1,['Test'],['Test']
Testability,"0001; ~~~; 109/1272 Test #62: pyunittests-pyroot-pyz-rtensor ......................................***Failed 2.92 sec; test_memoryAdoption (rtensor.ArrayInterface.test_memoryAdoption); Test correct adoption of different datatypes ... ok; test_memoryLayout (rtensor.ArrayInterface.test_memoryLayout); Test adoption of the memory layout ... ok; test_ownData (rtensor.ArrayInterface.test_ownData); Test ownership of adopted numpy array ... ok; test_dtypes (rtensor.AsRTensor.test_dtypes); Test adoption of numpy arrays with different data types ... ok; test_memoryLayout (rtensor.AsRTensor.test_memoryLayout); Test adoption of the memory layout ... FAIL; test_strides (rtensor.AsRTensor.test_strides); Test adoption of the strides ... ok; test_expandDims (rtensor.NumpyCompliance.test_expandDims); Test np.expand_dims vs RTensor::ExpandDims ... ok; test_reshape (rtensor.NumpyCompliance.test_reshape); Test np.reshape vs RTensor::Reshape ... FAIL; test_slice (rtensor.NumpyCompliance.test_slice); Test slicing operations ... ok; test_squeeze (rtensor.NumpyCompliance.test_squeeze); Test np.squeeze vs RTensor::Squeeze ... ok; test_transpose (rtensor.NumpyCompliance.test_transpose); Test np.transpose vs RTensor::Transpose ... FAIL; ======================================================================; FAIL: test_memoryLayout (rtensor.AsRTensor.test_memoryLayout); Test adoption of the memory layout; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""/builddir/build/BUILD/root-6.28.00/bindings/pyroot/pythonizations/test/rtensor.py"", line 42, in test_memoryLayout; self.assertEqual(root_obj.GetMemoryLayout(), 1); AssertionError: 16777216 != 1; ======================================================================; FAIL: test_reshape (rtensor.NumpyCompliance.test_reshape); Test np.reshape vs RTensor::Reshape; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""/builddi",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12429:1534,Test,Test,1534,https://root.cern,https://github.com/root-project/root/issues/12429,1,['Test'],['Test']
Testability,"011420 <guard variable for ROOT::GenerateInitInstanceLocal(std::vector<EncodedEventId, std::allocator<EncodedEventId> > const*)::instance>, __p=0x1, __n=18446744073709551615) at /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc11/external/gcc/11.2.1-f9b9dfdd886f71cd63f5538223d8f161/include/c++/11.2.1/bits/stl_vector.h:354; #12 0x0000152ece696eac in std::_Vector_base<ROOT::TClassAlt*, std::allocator<ROOT::TClassAlt*> >::~_Vector_base (this=0x152ecc011420 <guard variable for ROOT::GenerateInitInstanceLocal(std::vector<EncodedEventId, std::allocator<EncodedEventId> > const*)::instance>, __in_chrg=<optimized out>) at /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc11/external/gcc/11.2.1-f9b9dfdd886f71cd63f5538223d8f161/include/c++/11.2.1/bits/stl_vector.h:335; #13 0x0000152ece696efd in std::vector<ROOT::TClassAlt*, std::allocator<ROOT::TClassAlt*> >::~vector (this=0x152ecc011420 <guard variable for ROOT::GenerateInitInstanceLocal(std::vector<EncodedEventId, std::allocator<EncodedEventId> > const*)::instance>, __in_chrg=<optimized out>) at /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc11/external/gcc/11.2.1-f9b9dfdd886f71cd63f5538223d8f161/include/c++/11.2.1/bits/stl_vector.h:683; #14 0x0000152ece69536b in ROOT::TGenericClassInfo::~TGenericClassInfo (this=0x152ecc011320 <ROOT::GenerateInitInstanceLocal(std::vector<EncodedEventId, std::allocator<EncodedEventId> > const*)::instance>, __in_chrg=<optimized out>) at /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.05-e7deaecb5e40f02a68a0fd8a7c036f40/root-6.28.05/core/meta/src/TGenericClassInfo.cxx:227; #15 0x0000152eccfd926c in __run_exit_handlers () from /lib64/libc.so.6; #16 0x0000152eccfd93a0 in exit () from /lib64/libc.so.6; #17 0x0000152eccfc2d8c in __libc_start_main () from /lib64/libc.so.6; #18 0x0000000000406e5e in _start (); ===========================================================. /bin/sh: lin",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12957:7964,test,tests,7964,https://root.cern,https://github.com/root-project/root/issues/12957,2,['test'],"['testBuildDir', 'tests']"
Testability,"011420 <guard variable for ROOT::GenerateInitInstanceLocal(std::vector<EncodedEventId, std::allocator<EncodedEventId> > const*)::instance>, __p=0x1, __n=18446744073709551615) at /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc11/external/gcc/11.2.1-f9b9dfdd886f71cd63f5538223d8f161/include/c++/11.2.1/bits/stl_vector.h:354; #12 0x0000152ece696eac in std::_Vector_base<ROOT::TClassAlt*, std::allocator<ROOT::TClassAlt*> >::~_Vector_base (this=0x152ecc011420 <guard variable for ROOT::GenerateInitInstanceLocal(std::vector<EncodedEventId, std::allocator<EncodedEventId> > const*)::instance>, __in_chrg=<optimized out>) at /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc11/external/gcc/11.2.1-f9b9dfdd886f71cd63f5538223d8f161/include/c++/11.2.1/bits/stl_vector.h:335; #13 0x0000152ece696efd in std::vector<ROOT::TClassAlt*, std::allocator<ROOT::TClassAlt*> >::~vector (this=0x152ecc011420 <guard variable for ROOT::GenerateInitInstanceLocal(std::vector<EncodedEventId, std::allocator<EncodedEventId> > const*)::instance>, __in_chrg=<optimized out>) at /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc11/external/gcc/11.2.1-f9b9dfdd886f71cd63f5538223d8f161/include/c++/11.2.1/bits/stl_vector.h:683; #14 0x0000152ece69536b in ROOT::TGenericClassInfo::~TGenericClassInfo (this=0x152ecc011320 <ROOT::GenerateInitInstanceLocal(std::vector<EncodedEventId, std::allocator<EncodedEventId> > const*)::instance>, __in_chrg=<optimized out>) at /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.05-e7deaecb5e40f02a68a0fd8a7c036f40/root-6.28.05/core/meta/src/TGenericClassInfo.cxx:227; #15 0x0000152eccfd926c in __run_exit_handlers () from /lib64/libc.so.6; #16 0x0000152eccfd93a0 in exit () from /lib64/libc.so.6; #17 0x0000152eccfc2d8c in __libc_start_main () from /lib64/libc.so.6; #18 0x0000000000406e5e in _start (); ===========================================================. The lines be",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12957:4435,test,tests,4435,https://root.cern,https://github.com/root-project/root/issues/12957,2,['test'],"['testBuildDir', 'tests']"
Testability,"07f3e5f919dd4 in TUnixSystem::DispatchSignals (this=0x558efe2e6c50, sig=kSigSegmentationViolation) at /builddir/build/BUILD/root-6.28.00/core/unix/src/TUnixSystem.cxx:3615; #5 <signal handler called>; #6 ROOT::Experimental::RClassField::RClassField (this=0x7ffc9edb22f0, fieldName=..., className=..., classp=<optimized out>) at /usr/include/c++/13/bits/new_allocator.h:88; #7 0x00007f3e5fcafc66 in ROOT::Experimental::RClassField::RClassField (this=this; entry=0x7ffc9edb22f0, fieldName=""klass"", className=""8G\325Y\212U"") at /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RField.cxx:841; #8 0x0000558efca002c2 in ROOT::Experimental::RField<TestEBO, void>::RField (name=..., this=0x7ffc9edb22f0) at /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/inc/ROOT/RField.hxx:643; #9 RNTuple_TClassEBO_Test::TestBody (this=<optimized out>) at /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/test/ntuple_types.cxx:387; #10 0x00007f3e5fc02eb3 in void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) [clone .constprop.0] () from /lib64/libgtest.so.1.13.0; #11 0x00007f3e5fbef17e in testing::Test::Run() () from /lib64/libgtest.so.1.13.0; #12 0x00007f3e5fbef385 in testing::TestInfo::Run() () from /lib64/libgtest.so.1.13.0; #13 0x00007f3e5fbef4d7 in testing::TestSuite::Run() () from /lib64/libgtest.so.1.13.0; #14 0x00007f3e5fbfc090 in testing::internal::UnitTestImpl::RunAllTests() () from /lib64/libgtest.so.1.13.0; #15 0x00007f3e5fbfae98 in testing::UnitTest::Run() () from /lib64/libgtest.so.1.13.0; #16 0x00007f3e5fbac116 in main () from /lib64/libgtest_main.so.1.13.0; #17 0x00007f3e5f048b4a in __libc_start_call_main () from /lib64/libc.so.6; #18 0x00007f3e5f048c0b in __libc_start_main_impl () from /lib64/libc.so.6; #19 0x0000558efc9fc045 in _start (); ===========================================================; The lines below might hint at the cause of the crash. If you see question; marks as part of th",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12428:8086,test,testing,8086,https://root.cern,https://github.com/root-project/root/issues/12428,7,"['Test', 'test']","['Test', 'testing']"
Testability,08_createDataSetFromScratch; 476/1231 Test #452: tutorial-dataframe-df005_fillAnyObject .............................. Passed 6.60 sec; Start 456: tutorial-dataframe-df009_FromScratchVSTTree; 477/1231 Test #453: tutorial-dataframe-df006_ranges ..................................... Passed 7.33 sec; Start 457: tutorial-dataframe-df010_trivialDataSource; 478/1231 Test #455: tutorial-dataframe-df008_createDataSetFromScratch ................... Passed 3.90 sec; Start 458: tutorial-dataframe-df012_DefinesAndFiltersAsStrings; 479/1231 Test #394: gtest-tree-dataframe-test-dataframe-concurrency ..................... Passed 44.21 sec; Start 459: tutorial-dataframe-df014_CSVDataSource; 480/1231 Test #456: tutorial-dataframe-df009_FromScratchVSTTree ......................... Passed 4.16 sec; Start 460: tutorial-dataframe-df015_LazyDataSource; 481/1231 Test #454: tutorial-dataframe-df007_snapshot ................................... Passed 9.31 sec; Start 461: tutorial-dataframe-df016_vecOps; 482/1231 Test #457: tutorial-dataframe-df010_trivialDataSource .......................... Passed 3.32 sec; Start 462: tutorial-dataframe-df017_vecOpsHEP; 483/1231 Test #458: tutorial-dataframe-df012_DefinesAndFiltersAsStrings ................. Passed 5.07 sec; Start 463: tutorial-dataframe-df018_customActions; 484/1231 Test #461: tutorial-dataframe-df016_vecOps ..................................... Passed 3.80 sec; Start 464: tutorial-dataframe-df019_Cache; 485/1231 Test #462: tutorial-dataframe-df017_vecOpsHEP .................................. Passed 4.31 sec; Start 465: tutorial-dataframe-df020_helpers; 486/1231 Test #459: tutorial-dataframe-df014_CSVDataSource .............................. Passed 6.87 sec; Start 466: tutorial-dataframe-df021_createTGraph; 487/1231 Test #460: tutorial-dataframe-df015_LazyDataSource ............................. Passed 6.11 sec; Start 467: tutorial-dataframe-df022_useKahan; 488/1231 Test #463: tutorial-dataframe-df018_customActions .......................,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10300:8620,Test,Test,8620,https://root.cern,https://github.com/root-project/root/pull/10300,1,['Test'],['Test']
Testability,"0: fatal error: could not build module 'std'; #include <new>; ~~~~~~~~^; Warning in cling::IncrementalParser::CheckABICompatibility():; Failed to extract C++ standard library version.; While building module 'Core':; While building module 'Cling_Runtime' imported from input_line_2:1:; While building module 'Cling_Runtime_Extra' imported from /home/luowt/Apps/root/root_build/etc/cling/Interpreter/RuntimeUniverse.h:27:; In file included from <module-includes>:1:; /home/luowt/Apps/root/root_build/etc/cling/Interpreter/DynamicExprInfo.h:13:10: fatal error:; could not build module 'std'; #include <string>; ~~~~~~~~^; /home/luowt/Apps/root/root_build/etc/cling/Interpreter/RuntimeUniverse.h:27:10: fatal error:; could not build module 'Cling_Runtime_Extra'; #include ""cling/Interpreter/Visibility.h""; ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~; In file included from input_line_3:1:; In file included from /usr/include/assert.h:35:; In file included from /usr/include/features.h:510:; /usr/include/x86_64-linux-gnu/gnu/stubs.h:7:11: fatal error: 'gnu/stubs-32.h' file not found; # include <gnu/stubs-32.h>; ^~~~~~~~~~~~~~~~; While building module 'Core':; While building module 'ROOT_Rtypes' imported from /home/luowt/Apps/root/root_build/include/Rtypes.h:23:; In file included from <module-includes>:1:; /home/luowt/Apps/root/root_build/include/RtypesCore.h:28:10: fatal error: could not build module 'std'; #include <cstddef> // size_t, NULL; ~~~~~~~~^; /home/luowt/Apps/root/root_build/include/ThreadLocalStorage.h:60:10: fatal error: could not build module 'ROOT_Rtypes'; #include ""RtypesCore.h""; ~~~~~~~~^~~~~~~~~~~~~~; While building module 'Core':; While building module 'ROOT_Foundation_Stage1_NoRTTI' imported from /home/luowt/Apps/root/root_build/include/Rtypes.h:197:; In file included from <module-includes>:3:; /home/luowt/Apps/root/root_build/include/TClassEdit.h:29:10: fatal error: could not build module 'std'; #include <cxxabi.h>; ~~~~~~~~^; Error: Error loading the default rootclin",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14062:3462,stub,stubs,3462,https://root.cern,https://github.com/root-project/root/issues/14062,1,['stub'],['stubs']
Testability,"0\um\consoleapi2.h:35:9: note: previous definition is here; 151: #define FOREGROUND_BLUE 0x0001 // text color contains blue.; 151: ^; 151: In file included from input_line_10:1:; 151: C:\Users\sftnight\git\master\test\stressHistoFit.cxx:118:9: warning: 'FOREGROUND_GREEN' macro redefined [-Wmacro-redefined]; 151: #define FOREGROUND_GREEN 2; 151: ^; 151: C:\Program Files (x86)\Windows Kits\10\Include\10.0.17134.0\um\consoleapi2.h:36:9: note: previous definition is here; 151: #define FOREGROUND_GREEN 0x0002 // text color contains green.; 151: ^; 151: In file included from input_line_10:1:; 151: C:\Users\sftnight\git\master\test\stressHistoFit.cxx:119:9: warning: 'FOREGROUND_RED' macro redefined [-Wmacro-redefined]; 151: #define FOREGROUND_RED 4; 151: ^; 151: C:\Program Files (x86)\Windows Kits\10\Include\10.0.17134.0\um\consoleapi2.h:37:9: note: previous definition is here; 151: #define FOREGROUND_RED 0x0004 // text color contains red.; 151: ^; 151: In file included from input_line_10:1:; 151: C:\Users\sftnight\git\master\test\stressHistoFit.cxx:120:9: warning: 'FOREGROUND_INTENSITY' macro redefined [-Wmacro-redefined]; 151: #define FOREGROUND_INTENSITY 8; 151: ^; 151: C:\Program Files (x86)\Windows Kits\10\Include\10.0.17134.0\um\consoleapi2.h:38:9: note: previous definition is here; 151: #define FOREGROUND_INTENSITY 0x0008 // text color is intensified.; 151: ^; 151: In file included from input_line_10:1:; 151: C:\Users\sftnight\git\master\test\stressHistoFit.cxx:124:19: error: functions that differ only in their return type cannot be overloaded; 151: bool __stdcall SetConsoleTextAttribute(void *, unsigned int);; 151: ^; 151: C:\Program Files (x86)\Windows Kits\10\Include\10.0.17134.0\um\consoleapi2.h:245:1: note: previous declaration is here; 151: SetConsoleTextAttribute(; 151: ^; 151: Error in <TInterpreter::AutoParse>: Error parsing payload code for class TUnuranContDist with content:; 151:; 151: #line 1 ""libUnuran dictionary payload""; 151:; 151: #ifndef HAVE_CONFIG",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3312:1464,test,test,1464,https://root.cern,https://github.com/root-project/root/pull/3312,1,['test'],['test']
Testability,"0x00007ffff74a42b1 in TMutex::UnLock (this=0x7fffb0c95750); at /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/slc7_amd64_gcc900/lcg/root/6.22.08-1fec05f50351c1988c4bf604c7ec21c3/root-6.22.08/core/thread/src/TMutex.cxx:70. (gdb) where; #0 0x00007ffff74a42b1 in TMutex::UnLock (this=0x7fffb0c95750); at /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/slc7_amd64_gcc900/lcg/root/6.22.08-1fec05f50351c1988c4bf604c7ec21c3/root-6.22.08/core/thread/src/TMutex.cxx:70; #1 0x00007ffff76c8b97 in TLockGuard::~TLockGuard (this=0x7fffffff0b90, __in_chrg=<optimized out>) at include/TVirtualMutex.h:86; #2 0x00007ffff67266df in TPluginHandler::CheckForExecPlugin (this=0x7fffd04c19c0, nargs=2); at /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/slc7_amd64_gcc900/lcg/root/6.22.08-1fec05f50351c1988c4bf604c7ec21c3/root-6.22.08/core/base/src/TPluginManager.cxx:284; #3 0x00007ffff6765285 in TPluginHandler::ExecPluginImpl<char const*, bool> (this=0x7fffd04c19c0); at /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/slc7_amd64_gcc900/lcg/root/6.22.08-1fec05f50351c1988c4bf604c7ec21c3/root-6.22.08/core/base/inc/TPluginManager.h:151; #4 0x00007ffff6764dee in TPluginHandler::ExecPlugin<char const*, bool> (this=0x7fffd04c19c0, nargs=2); at /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/slc7_amd64_gcc900/lcg/root/6.22.08-1fec05f50351c1988c4bf604c7ec21c3/root-6.22.08/core/base/inc/TPluginManager.h:173; #5 0x00007ffff6756a72 in TSystem::FindHelper (this=0x7ffff2c38000, ; path=0x7fffb0d42060 ""root://eoscms.cern.ch//eos/cms/store/data/Run2018A/ZeroBias/ALCARECO/SiStripCalMinBias-12Nov2019_UL2018-v1/260000/0F90F012-3C97-344E-8E2F-F459A798FA74.root"", dirptr=0x0); at /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/slc7_amd64_gcc900/lcg/root/6.22.08-1fec05f50351c1988c4bf604c7ec21c3/root-6.22.08/core/base/src/TSystem.cxx:780; #6 0x00007ffff6864ec4 in TUnixSystem::IsPathLocal (this=0x7ffff2c38000, ; path=",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8008:1880,test,tests,1880,https://root.cern,https://github.com/root-project/root/issues/8008,2,['test'],"['testBuildDir', 'tests']"
Testability,"0x2f544f); 418: #2 0x7f4f0c8251a6 in TList::Delete(char const*) (/home/jhahnfel/ROOT/build-clang-asan/lib/libCore.so+0x44c1a6); 418: #3 0x7f4f0c80cb9f in THashList::Delete(char const*) (/home/jhahnfel/ROOT/build-clang-asan/lib/libCore.so+0x433b9f); 418: #4 0x7f4f0d640e30 in TDirectoryFile::Close(char const*) (/home/jhahnfel/ROOT/build-clang-asan/lib/libRIO.so+0x285e30); 418: #5 0x7f4f0d678f08 in TFile::Close(char const*) (/home/jhahnfel/ROOT/build-clang-asan/lib/libRIO.so+0x2bdf08); 418: #6 0x7f4f0d678050 in TFile::~TFile() (/home/jhahnfel/ROOT/build-clang-asan/lib/libRIO.so+0x2bd050); 418: #7 0x7f4f0d67898d in TFile::~TFile() (/home/jhahnfel/ROOT/build-clang-asan/lib/libRIO.so+0x2bd98d); 418: #8 0x52289f in BulkApiVariableTest_stdRead_Test::TestBody() (/home/jhahnfel/ROOT/build-clang-asan/tree/tree/test/testBulkApiVarLength+0x52289f). [...]. 418: previously allocated by thread T0 here:; 418: #0 0x51ea88 in operator new(unsigned long) (/home/jhahnfel/ROOT/build-clang-asan/tree/tree/test/testBulkApiVarLength+0x51ea88); 418: #1 0x7f4f0c71e9ce in TStorage::ObjectAlloc(unsigned long) (/home/jhahnfel/ROOT/build-clang-asan/lib/libCore.so+0x3459ce); 418: #2 0x7f4f10a65df5 in ROOT::new_TTree(void*) G__Tree.cxx; 418: #3 0x7f4f0c9094d2 in TClass::NewObject(TClass::ENewType, bool) const (/home/jhahnfel/ROOT/build-clang-asan/lib/libCore.so+0x5304d2); 418: #4 0x7f4f0c90943e in TClass::New(TClass::ENewType, bool) const (/home/jhahnfel/ROOT/build-clang-asan/lib/libCore.so+0x53043e); 418: #5 0x7f4f0d765626 in TKey::ReadObjectAny(TClass const*) (/home/jhahnfel/ROOT/build-clang-asan/lib/libRIO.so+0x3aa626); 418: #6 0x7f4f0d645eb0 in TDirectoryFile::GetObjectChecked(char const*, TClass const*) (/home/jhahnfel/ROOT/build-clang-asan/lib/libRIO.so+0x28aeb0); 418: #7 0x7f4f110c884e in TTreeReader::TTreeReader(char const*, TDirectory*, TEntryList*) (/home/jhahnfel/ROOT/build-clang-asan/lib/libTreePlayer.so+0x21284e); 418: #8 0x521e1d in BulkApiVariableTest_stdRead_Test::TestBody() (/home/jh",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10096:1936,test,test,1936,https://root.cern,https://github.com/root-project/root/issues/10096,2,['test'],"['test', 'testBulkApiVarLength']"
Testability,1 Test #464: tutorial-dataframe-df019_Cache ...................................... Passed 7.71 sec; 506/1231 Test #471: tutorial-dataframe-df031_Stats ...................................... Passed 3.82 sec; 507/1231 Test #469: tutorial-dataframe-df024_Display .................................... Passed 4.58 sec; Start 1071: tutorial-dataframe-df000_simple-py; Start 1072: tutorial-dataframe-df001_introduction-py; Start 1073: tutorial-dataframe-df002_dataModel-py; Start 1074: tutorial-dataframe-df003_profiles-py; 1072/1231 Test #1071: tutorial-dataframe-df000_simple-py .................................. Passed 2.85 sec; Start 1075: tutorial-dataframe-df004_cutFlowReport-py; 1073/1231 Test #1074: tutorial-dataframe-df003_profiles-py ................................ Passed 5.32 sec; Start 1076: tutorial-dataframe-df006_ranges-py; 1074/1231 Test #1072: tutorial-dataframe-df001_introduction-py ............................ Passed 7.77 sec; Start 1077: tutorial-dataframe-df007_snapshot-py; 1075/1231 Test #1075: tutorial-dataframe-df004_cutFlowReport-py ........................... Passed 5.88 sec; Start 1078: tutorial-dataframe-df008_createDataSetFromScratch-py; 1076/1231 Test #1073: tutorial-dataframe-df002_dataModel-py ............................... Passed 8.55 sec; Start 1079: tutorial-dataframe-df010_trivialDataSource-py; 1077/1231 Test #1079: tutorial-dataframe-df010_trivialDataSource-py ....................... Passed 3.14 sec; Start 1080: tutorial-dataframe-df012_DefinesAndFiltersAsStrings-py; 1078/1231 Test #1078: tutorial-dataframe-df008_createDataSetFromScratch-py ................ Passed 3.91 sec; Start 1081: tutorial-dataframe-df014_CSVDataSource-py; 1079/1231 Test #1076: tutorial-dataframe-df006_ranges-py .................................. Passed 7.30 sec; Start 1082: tutorial-dataframe-df016_vecOps-py; Start 1083: tutorial-dataframe-df017_vecOpsHEP-py; 1081/1231 Test #1077: tutorial-dataframe-df007_snapshot-py ................................ Passed 9.12 sec; Sta,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10300:11369,Test,Test,11369,https://root.cern,https://github.com/root-project/root/pull/10300,1,['Test'],['Test']
Testability,1) Do not put the non-copiable ds in a header. It's very cumbersome; at runtime to expose it to the interpreter. The code is now in a string. 2) Make the test a death test. The static assert causes a non-recoverable; failure which should be handled by this kind of test and not with a try/catch; block.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1134:154,test,test,154,https://root.cern,https://github.com/root-project/root/pull/1134,4,"['assert', 'test']","['assert', 'test']"
Testability,1) Don't force user to build graf3d OpenGL features if `cocoa=ON`. 2) Require asimage=ON in case of opengl=ON. More detail in the commit description. I have tested on macOS that the first commit does what it should. Closes #16250.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16605:157,test,tested,157,https://root.cern,https://github.com/root-project/root/pull/16605,1,['test'],['tested']
Testability,1) Match only the custom columns of the node and not all when using regexpressions; 2) Prompt an understandable compile time error in case a cache of columns the type of which is non copyable is requested; 3) Test the ability of the data source to serve non copyable items,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1078:209,Test,Test,209,https://root.cern,https://github.com/root-project/root/pull/1078,1,['Test'],['Test']
Testability,"1. Avoid usage of `static constexpr` in header files. MSVC compiler is not happy about such construct; 2. Add R__LOAD_LIBRARY to test macros (like brower.cxx) to let it run in Windows; 3. Add handling of "".lnk"" files in RBrowser",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4791:129,test,test,129,https://root.cern,https://github.com/root-project/root/pull/4791,1,['test'],['test']
Testability,"1. Correctly fill stats box with fit function parameters; 2. Correctly show `#chi^{2}` in stats box; 3. Support color palette in th3 drawings; 4. Support ""logv"" draw option for all histogram classes - log scale for content; 5. Support ""[cutg]"" draw option for TH2/TF2 surface plots; 6. Fix fit2dHist.C macro - do not draw interim fit results; 7. Implement tickz draw option, used for color palette ticks; 8. Implement skewness and kurtosis calculations for histogram stats box",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13908:155,log,logv,155,https://root.cern,https://github.com/root-project/root/pull/13908,2,['log'],"['log', 'logv']"
Testability,"1. Correctly scale size of axis ticks - take into account NDC axis length; 2. Remove source_dir output in node.js https://github.com/root-project/jsroot/issues/296; 3. Set name and userData in geometry `build()` function https://github.com/root-project/jsroot/issues/303; 4. Draw histogram title afterwards - place in front of stats box; 5. Upgrade three.js r158 -> r162, last with WebGL1 support; 6. Split extras into three_addons.mjs, provide jsroot geometry build without three.js; 7. Fix - correctly draw only grids with AXIG draw option; 8. Fix - let read object from TFile with empty name; 9. Fix - graph drawing fix custom labels on X axis https://github.com/root-project/jsroot/issues/297; 10. Fix - draw at least line for TGraphErrors ROOT-8131; 11. Fix - log scales on TH3 drawings https://github.com/root-project/jsroot/issues/306; 12. Fix - preserve attributes and draw options when call drawingJSON() https://github.com/root-project/jsroot/issues/307; 13. Fix - draw geometry top node volume if all childs not visible https://github.com/root-project/jsroot/issues/308",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15544:765,log,log,765,https://root.cern,https://github.com/root-project/root/pull/15544,1,['log'],['log']
Testability,"1. Detect and support Edge as recognized browser `--web=edge`; 2. Newer versions of Edge browser requires registry change to work in headless mode. See https://learn.microsoft.com/en-us/deployedge/microsoft-edge-policies#headlessmodeenabled; 3. One have to use `--headless=old` for Edge browser, otherwise `--domp-dom` does not work; 4. Firefox on Windows on VirtualBox on OpenSUSE does not correctly support WebGL emulation, therefore disable `--web=firefox` stressGraphics test on Windows; 5. Optionally one can run `stressGraphics` without 3d tests to verify all other tests on Windows/Firefox; 6. Adjust reference file to let correctly run web stressGraphics on Windows on all three browsers - Chrome, Edge and Firefox",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16663:475,test,test,475,https://root.cern,https://github.com/root-project/root/pull/16663,3,['test'],"['test', 'tests']"
Testability,"1. Errors for stacked histogram were not taken into account. Therefore methods were returning wrong values; 2. Protect GetMinimum method for case of log scale; 3. Improve pads options:; 3.1. Always ensure that subpad is clear when drawing stack histograms; 3.2. Reuse existing subpads, no need to divide canvas again; 3.3. Use TPad::Add() method to add histograms to subpads",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15931:149,log,log,149,https://root.cern,https://github.com/root-project/root/pull/15931,1,['log'],['log']
Testability,1. Fix - expand item in hierarchy painter; 2. Fix - correctly use saved TF1 values for non-equidistant bins ; 3. Fix - in log scales replace 10^1 label by 10; 4. Fix - vertical align of log labels on X axis; 5. Fix - second click of the same item in hierarchy painter. Branch 7.5 of jsroot is base for 6.30 release,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13893:122,log,log,122,https://root.cern,https://github.com/root-project/root/pull/13893,2,['log'],['log']
Testability,1. Fix - interactive zooming on log color palette; 2. Fix - keyboard handling while input dialog active; 3. Fix - legend entry with not configured fill attributes; 4. Fix - prevent that color palette exceed graphical range; 5. Fix - exponential log axis labels with kMoreLogLabels bit set,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15885:32,log,log,32,https://root.cern,https://github.com/root-project/root/pull/15885,2,['log'],['log']
Testability,"1. Get information for client (`Browsable::RItem` instance) directly from `Browsable::RElement`. This unifies handling of different classes in browser; before one uses extra logic to guess class functionality without creating of dedicated `Browsable::RElement` instance; 2. Fix problem with `TObject`-derived classes where `TObject` is not direct parent - like `TQClass`. Improve browsing of top ROOT folder.; 3. Provide in `RBrowser` size/modification time information for `TKey`/`TFile` instances; 4. Significantly improve `RTreeViewer` functionality. Better handle special branches like `@size`. Double-click on branch element either involves `TTree::Draw` or add proposed expression to tree viewer. Handle special symbols in branch names like `\` or `#`.; 5. Fix several bugs in usage of `GED` inside canvas. After JSROOT v7 loading of custom code is more tricky, therefore it is better to load it directly from JSROOT components - not try to select some parts from outside.; 6. Fix several bugs in JSROOT (see changelog)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11618:174,log,logic,174,https://root.cern,https://github.com/root-project/root/pull/11618,1,['log'],['logic']
Testability,"1. Improve/fix problems with TKey/TDirectory handling.; In some cases objects were deleted, but still used in RBrowsable classes; 2. Fix bug with RBrowsable cache usage. ; Logic was not working when more than 1 levels of sub-directories in the TFile was there; 3. Empty RBrowser cache when top-level path is reloaded. Avoids holding of too many objects which are no longer used",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8101:172,Log,Logic,172,https://root.cern,https://github.com/root-project/root/pull/8101,1,['Log'],['Logic']
Testability,"1. Improve/fix problems with TKey/TDirectory handling.; In some cases objects were deleted, but still used in RBrowsable classes; 2. Fix bug with RBrowsable cache usage. ; Logic was not working when more than 1 levels of sub-directories in the TFile was there; 3. Fix statbox handling for empty histograms in JSROOT",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8100:172,Log,Logic,172,https://root.cern,https://github.com/root-project/root/pull/8100,1,['Log'],['Logic']
Testability,"1. Let use non-owned object in `TObjectDrawable`. This is the only way to provide support of objects like `THStack` and `TLegend` in PyROOT. Provide `TObjectDrawable::Set()` method - PyROOT fails with constructors template arguments evaluation.; 2. Provide `Add()`, `AddPad()`, `AddFrame()` methods in RPadBase. All should add new drawable ; 3. Make `RPad` constructors private - only RPadBase::AddPad can create new pad. Solves logical problem with `pad->SetParent(this)` calls; 4. Provide `v7/df105.py` tutorial which uses `THStack` and `TLegend`. Demonstrates that custom colors of histogram from THStack can be extracted and transported to client. ; 5. Improve original `dataframe/df105_WBosonAnalysis.py` macro to properly use draw options",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8464:429,log,logical,429,https://root.cern,https://github.com/root-project/root/pull/8464,1,['log'],['logical']
Testability,"1. Loopback is always on for web widgets, only unix socket configured by `rootssh` can be enabled; 2. Also disable usage of FastCGI with web widgets (never tested with webgui, may be used by REve); 3. Shrink warning messages for `TWebCanvas` and `RBrowser`, do not mention `--web=server:port` which is not secure for previous releases and will not work with recent fixes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14119:156,test,tested,156,https://root.cern,https://github.com/root-project/root/pull/14119,1,['test'],['tested']
Testability,"1. More primitives can be drawn on frame and on pad - RBox, RText, RMarker; 2. Allow to draw axes only with RFrame - no need for dummy histograms; 3. Provide demo in `tutorials/v7/frame.cxx` how onframe drawing is done with and without clipping; 4. Deprecate RPadUserAxis, solve https://github.com/root-project/root/issues/7966; 5. Update v7 tutorials to be able run them after each other while now they used to generate JSON files for docu and tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8154:445,test,tests,445,https://root.cern,https://github.com/root-project/root/pull/8154,1,['test'],['tests']
Testability,"1. Now unique drawable id will be produced when display items are created for drawables.; Each drawable has now fully custom id, which can be used later in CSS selector (on server and client sides). . 2. Fully remove RPadPainter and RHistPainter classes. These classes were introducing extra complication level around drawable classes. Now they are not necessary - correspondent RHistDrawable/RPadBase classes have methods to create appropriate RDisplayItem instances. ; `RDrawable::Display()` method fully replaces `RDrawable::Paint(RPadPainter &)` logic. 3. Fix small problems with ROOT6 classes support in RCanvas. Sync v7 context menu classes with ROOT6 TWebCanvas. Potentially TObject drawable could be moved to primitives. . 4. When RStyle applyed to RPadBase, it automatically distributed to all primitives",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4469:550,log,logic,550,https://root.cern,https://github.com/root-project/root/pull/4469,1,['log'],['logic']
Testability,"1. Provide in RWebWindow methods to correctly work with connections, provided by master; 2. Introduce public `RWebWindow::GetConnections()` method, simplify reply logic; 3. Handle reply to multiple clients from geometry hierarchy widget - change top or change search should be handled",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12933:163,log,logic,163,https://root.cern,https://github.com/root-project/root/pull/12933,1,['log'],['logic']
Testability,"1. RCanvas::Update() have to wait pending connections; 2. Fix problem with RCanvasPainter::AddPanel(), used for RFitPanel; 3. Rename TFitPanel -> RFitPanel; 4. Test fitpanel.cxx macro in batch mode",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2729:160,Test,Test,160,https://root.cern,https://github.com/root-project/root/pull/2729,1,['Test'],['Test']
Testability,"1. Split geometry viewer on two logical parts: hierarchy and drawing; 2. Always show full geometry hierarchy; 3. Add color and material column to hierarchy view; 4. Allow to set top visible volume using context menu; 5. Let search volume by name, material, color; use `TRegexp` for search; 6. Fix cleanup of embed web window connection when main connection closed; 7. Correctly count faces for `TGeoShape` instance, use diagonal as importance measure",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12437:32,log,logical,32,https://root.cern,https://github.com/root-project/root/pull/12437,1,['log'],['logical']
Testability,"1. String always used as storage for `RColor`. Following values are supported:; * `#00FF00` - which is standard RGB ; * `#00FF0088` - standard RGBA; * `grey` - color name; * `[0.5]` - ordinal value to select color from current palette ; * `auto` - automatic color, calculated on client side using current palette and drawable index; 2. By this change simplify CSS syntax - now any color value can be assigned as; ```; line_color: blue; fill_color: auto; marker_color: [0.3]; ``` ; 3. Introduce `RAttrOnFrame`. It has extra `onframe` attribute which indicates where drawable drawn. ; Implement first for `RLine` class, which can be now inside or outside frame; 4. Support user coordinates for drawable inside frame, provide testing with `RLine` in draw_frame.cxx tutorial; 5. Let configure all margins with single parameter, called `margin_all` in CSS",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8109:723,test,testing,723,https://root.cern,https://github.com/root-project/root/pull/8109,1,['test'],['testing']
Testability,"1. Support `TBox`, `TLatex`, `TLine`, `TMarker` drawing on ""frame"", support drawing on swapped axes; 2. Improve performance of TH3/RH3 drawing by using THREE.InstancedMesh; 3. Implement batch mode with '&batch' URL parameter to create SVG/PNG images with default GUI; 4. Adjust node.js implementation to produce identical output with normal browser; 5. Create necessary infrastructure for testing with 'puppeteer'; 6. Support inject of ES6 modules via '&inject=path.mjs'; 7. Using importmap for 'jsroot' in all major HTML files and in demos; 8. Implement `settings.CutAxisLabels` flag to remove labels which may exceed graphical range; 9. Let save canvas as JSON file from context menu, object as JSON from inspector; 10. Upgrade three.js r162 -> r168, use r162 only in node.js because of ""gl"" module; 11. Create unified svg2pdf/jspdf ES6 module, works both in browsers and node.js; 12. Internals - upgrade to eslint 9; 13. Fix - correctly handle in I/O empty std::map; 14. Fix - reading of small (<1KB) ROOT files; 15. Fix - race condition in zstd initialization [#318](https://github.com/root-project/jsroot/issues/318); 16. Fix - deployment with zstd [#317](https://github.com/root-project/jsroot/issues/317); 17. Remove unused md5.mjs",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16416:389,test,testing,389,https://root.cern,https://github.com/root-project/root/pull/16416,1,['test'],['testing']
Testability,"1. Support newest CEF 116; 2. Skip support of older CEF up to 95; 3. Remove log output, update comments",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13486:76,log,log,76,https://root.cern,https://github.com/root-project/root/pull/13486,1,['log'],['log']
Testability,"1. Use TString instead of plain char* in TCanvas methods; 2. Use std::vector<Bool_t> for TPad::fCollideGrid; 3. Fix memory leak in `TPad::DrawCollideGrid` and `TPad::DrawColorTable` methods; 4. Fix many-many memory leaks with usage of `<TPrimitive>::Draw<Primitive>` methods like `TLatex::DrawLatex` in tutorials, tests. In all these cases temporary object instance was not deleted. Now just using stack variable instead. ; 5. Improve some `TSpectrum2` tutorials - release allocated memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10852:314,test,tests,314,https://root.cern,https://github.com/root-project/root/pull/10852,1,['test'],['tests']
Testability,"1. Use hash value to detect any change in list of colors or with gStyle. If detected, modified version send to client.; 2. Interactive changes of draw options or histogram status bits send directly to server; 3. Small adjust of CEF build, tested with latest code; 4. Syntax adjusting of hist tutorials; 5. JSROOT",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11775:239,test,tested,239,https://root.cern,https://github.com/root-project/root/pull/11775,1,['test'],['tested']
Testability,1. Use hex string for RGB like 01FFC5; 2. Use also hex for color alpha like FF; 3. Make easier to compose result color; 4. Support plain SVG names - need to provide predefined list; 5. Reintroduce methods for HLS; 6. Provide different Setter/Getter/Clear methods; 7. Move RColor testing to correspondent library; 8. Update JSROOT code - for RColor but also recent fixes in v6,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4456:279,test,testing,279,https://root.cern,https://github.com/root-project/root/pull/4456,1,['test'],['testing']
Testability,"1. Use scalable line width for all 'above' symbols like `#check` or `#vector` or `#slash`. Line width is at least as much as configured for TLatex before.; 2. Fix position of `#grave` and `#acute` symbols; 3. Use small filled rectangle to draw `#dot` and `#ddot` symbols, otherwise short lines appeared when scaled up; 4. ~~Use polyline for `#tilde` instead of workaround with special tilde symbols scaling which was inperfectly placed.~~ Unfortunately, on such small pixels size poly line drawing works not nice, therefore I removed new tilde rendering for now. Here small macro which was used for testing:; ```; void latex() {; TCanvas *c1 = new TCanvas(""c1"",""test"",1600,400);; TLatex l;; l.SetTextAlign(12);; l.SetTextSize(0.8);; l.DrawLatex(0.01,0.5,""#hat{b}#dot{b}#ddot{c}#grave{A}#acute{f}#slash{m}#tilde{x}#check{U}"");; }; ```. Here is old output:; ![c1](https://github.com/root-project/root/assets/4936580/fdcf76dd-7009-40d2-9b14-2399c36242e0). Here is new output:; ![c1](https://github.com/root-project/root/assets/4936580/0e9ace65-f632-45fc-a9e9-da5f9854aebd). Also similar latex with normal size 0.07:; ![latex_old](https://github.com/root-project/root/assets/4936580/fcd982af-eada-4c75-bd02-74528c1e68b3); ![latex_new](https://github.com/root-project/root/assets/4936580/01b1c97a-b2d4-4081-9a98-9fb52dd8c2a2)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14045:599,test,testing,599,https://root.cern,https://github.com/root-project/root/pull/14045,2,['test'],"['test', 'testing']"
Testability,1. Use std::vector instead of plain arrays; 2. More use of `nullptr`; 3. Avoid usage of global variables for local data in `TGraphPainter` class; 4. Test gPad before call gPad->GetView(),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10831:149,Test,Test,149,https://root.cern,https://github.com/root-project/root/pull/10831,1,['Test'],['Test']
Testability,"1. `haxis.cxx` - horizontal Y axis and TH1 drawing; 2. `logN.cxx` - different log scales; 3. `twoscales.cxx` - fully interactive two Y and two X scales ; 4. `inframe.cxx` - drawing text, line, rect, marker in the frame with clipping; 5. `latex_url.cxx` - demo for `#url[link]{label}` functionality (with PDF support); 6. `fonts_ttf.cxx` - using of custom TTF fonts in canvas (with PDF support). Update JSROOT which implements now `#url[link]{label}` in latex parsing. Add tutorial macros in testing",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16572:56,log,logN,56,https://root.cern,https://github.com/root-project/root/pull/16572,3,"['log', 'test']","['log', 'logN', 'testing']"
Testability,"1.1, there is no pymva folder generated after cmake commands, and for pytest version 6.2.5, pymva folder generated after cmake commands. Could you please help have a look at this issue? Thanks a lot!; ![image](https://user-images.githubusercontent.com/17844901/147636210-34c8102b-8380-4b92-828d-097a6af7829d.png). C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(155,5): error MSB3073: The command ""setlocal [F:\gitP\root-project\root\build_amd64\tmva\pymva\test\SofieCompileModels_PyTorch.vcxproj]; C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(155,5): error MSB3073: .\emitFromPyTorch [F:\gitP\root-project\root\build_amd64\tmva\pymva\test\SofieCompileModels_PyTorch.vcxproj]; C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(155,5): error MSB3073: if %errorlevel% neq 0 goto :cmEnd [F:\gitP\root-project\root\build_amd64\tmva\pymva\test\SofieCompileModels_PyTorch.vcxproj]; C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(155,5): error MSB3073: :cmEnd [F:\gitP\root-project\root\build_amd64\tmva\pymva\test\SofieCompileModels_PyTorch.vcxproj]; C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(155,5): error MSB3073: endlocal & call :cmErrorLevel %errorlevel% & goto :cmDone [F:\gitP\root-project\root\build_amd64\tmva\pymva\test\SofieCompileModels_PyTorch.vcxproj]; C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(155,5): error MSB3073: :cmErrorLevel [F:\gitP\root-project\root\build_amd64\tmva\pymva\test\SofieCompileModels_PyTorch.vcxproj]; C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(155,5): error MSB3073: ex",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9487:1465,test,test,1465,https://root.cern,https://github.com/root-project/root/issues/9487,1,['test'],['test']
Testability,1072/1231 Test #1071: tutorial-dataframe-df000_simple-py .................................. Passed 2.85 sec; Start 1075: tutorial-dataframe-df004_cutFlowReport-py; 1073/1231 Test #1074: tutorial-dataframe-df003_profiles-py ................................ Passed 5.32 sec; Start 1076: tutorial-dataframe-df006_ranges-py; 1074/1231 Test #1072: tutorial-dataframe-df001_introduction-py ............................ Passed 7.77 sec; Start 1077: tutorial-dataframe-df007_snapshot-py; 1075/1231 Test #1075: tutorial-dataframe-df004_cutFlowReport-py ........................... Passed 5.88 sec; Start 1078: tutorial-dataframe-df008_createDataSetFromScratch-py; 1076/1231 Test #1073: tutorial-dataframe-df002_dataModel-py ............................... Passed 8.55 sec; Start 1079: tutorial-dataframe-df010_trivialDataSource-py; 1077/1231 Test #1079: tutorial-dataframe-df010_trivialDataSource-py ....................... Passed 3.14 sec; Start 1080: tutorial-dataframe-df012_DefinesAndFiltersAsStrings-py; 1078/1231 Test #1078: tutorial-dataframe-df008_createDataSetFromScratch-py ................ Passed 3.91 sec; Start 1081: tutorial-dataframe-df014_CSVDataSource-py; 1079/1231 Test #1076: tutorial-dataframe-df006_ranges-py .................................. Passed 7.30 sec; Start 1082: tutorial-dataframe-df016_vecOps-py; Start 1083: tutorial-dataframe-df017_vecOpsHEP-py; 1081/1231 Test #1077: tutorial-dataframe-df007_snapshot-py ................................ Passed 9.12 sec; Start 1084: tutorial-dataframe-df019_Cache-py; 1082/1231 Test #1080: tutorial-dataframe-df012_DefinesAndFiltersAsStrings-py .............. Passed 5.30 sec; Start 1085: tutorial-dataframe-df021_createTGraph-py; 1083/1231 Test #1082: tutorial-dataframe-df016_vecOps-py .................................. Passed 4.06 sec; Start 1086: tutorial-dataframe-df024_Display-py; 1084/1231 Test #1083: tutorial-dataframe-df017_vecOpsHEP-py ............................... Passed 3.68 sec; Start 1087: tutorial-dataframe-df026_AsNum,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10300:11889,Test,Test,11889,https://root.cern,https://github.com/root-project/root/pull/10300,1,['Test'],['Test']
Testability,"117cb026dc7f1e592ce455c65""><code>ab03356</code></a></li>; <li>[readme] rename and add badges <a href=""https://github.com/minimistjs/minimist/commit/236f4a07e4ebe5ee44f1496ec6974991ab293ffd""><code>236f4a0</code></a></li>; <li>[meta] create FUNDING.yml; add <code>funding</code> in package.json <a href=""https://github.com/minimistjs/minimist/commit/783a49bfd47e8335d3098a8cac75662cf71eb32a""><code>783a49b</code></a></li>; <li>[meta] use <code>npmignore</code> to autogenerate an npmignore file <a href=""https://github.com/minimistjs/minimist/commit/f81ece6aaec2fa14e69ff4f1e0407a8c4e2635a2""><code>f81ece6</code></a></li>; <li>Only apps should have lockfiles <a href=""https://github.com/minimistjs/minimist/commit/56cad44c7f879b9bb5ec18fcc349308024a89bfc""><code>56cad44</code></a></li>; <li>[Dev Deps] update <code>covert</code>, <code>tape</code>; remove unnecessary <code>tap</code> <a href=""https://github.com/minimistjs/minimist/commit/49c5f9fb7e6a92db9eb340cc679de92fb3aacded""><code>49c5f9f</code></a></li>; <li>[Tests] add <code>aud</code> in <code>posttest</code> <a href=""https://github.com/minimistjs/minimist/commit/228ae938f3cd9db9dfd8bd7458b076a7b2aef280""><code>228ae93</code></a></li>; <li>[meta] add <code>safe-publish-latest</code> <a href=""https://github.com/minimistjs/minimist/commit/01fc23f5104f85c75059972e01dd33796ab529ff""><code>01fc23f</code></a></li>; <li>[meta] update repo URLs <a href=""https://github.com/minimistjs/minimist/commit/6b164c7d68e0b6bf32f894699effdfb7c63041dd""><code>6b164c7</code></a></li>; </ul>; <h2><a href=""https://github.com/minimistjs/minimist/compare/v1.2.5...v1.2.6"">v1.2.6</a> - 2022-03-21</h2>; <h3>Commits</h3>; <ul>; <li>test from prototype pollution PR <a href=""https://github.com/minimistjs/minimist/commit/bc8ecee43875261f4f17eb20b1243d3ed15e70eb""><code>bc8ecee</code></a></li>; <li>isConstructorOrProto adapted from PR <a href=""https://github.com/minimistjs/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d""><code>c2b9819</code></a></li>;",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11865:2192,Test,Tests,2192,https://root.cern,https://github.com/root-project/root/pull/11865,1,['Test'],['Tests']
Testability,"11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > &, std::shared_ptr<ROOT::Detail::RDF::RNodeBase>, ROOT::Internal::RDF::RBookedCustomColumns>' requested here; return std::make_unique<Action_t>(Helper_t(h, nSlots), bl, std::move(prevNode), std::move(customColumns));; ^; /home/stefan/src/miniconda3/envs/test-jupyroot/include/ROOT/RDF/InterfaceUtils.hxx:458:21: note: in instantiation of function template specialization 'ROOT::Internal::RDF::BuildAction<ROOT::VecOps::RVec<bool> , ROOT::Detail::RDF::RNodeBase>' requested here; auto actionPtr = BuildAction<BranchTypes...>(bl, std::move(rOnHeap), nSlots, std::move(prevNodePtr), ActionTag{},; ^; input_line_35:2:23: note: in instantiation of function template specialization 'ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, ROOT::VecOps::RVec<bool> , ROOT::Detail::RDF::RNodeBase, TH1D>' requested here; ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, ROOT::VecOps::RVec<Bool_t>>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x563bdc7d7910), {""Muon_tightId""}, 1, reinterpret_cast<weak_ptr<TH1D>*>(0x563bdc7d77a0), reinterpret_cast<std::weak_ptr<ROOT::Internal::RDF::RJittedAction>*>(0x563bdc7d7a80), reinterpret_cast<ROOT::Internal::RDF::RBookedCustomColumns*>(0x563bdc7d9150));; ^; /home/stefan/src/miniconda3/envs/test-jupyroot/include/ROOT/RVec.hxx:387:19: note: selected 'begin' function with iterator type 'ROOT::VecOps::RVec<bool>::const_iterator' (aka 'std::_Bit_const_iterator'); const_iterator begin() const noexcept { return fData.begin(); }; ^; In module 'ROOTDataFrame':; /home/stefan/src/miniconda3/envs/test-jupyroot/include/ROOT/RDF/ActionHelpers.hxx:190:18: error: non-const lvalue reference to type 'bool' cannot bind to a temporary of type 'std::_Bit_const_iterator::const_reference' (aka 'bool'); for (auto &v : vs) {; ^ ~; /home/stefan/src/miniconda3/envs/test-jupyroot/include/ROOT/RDF/RAction.hxx:237:33: note: in instanti",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6675:3953,test,test-jupyroot,3953,https://root.cern,https://github.com/root-project/root/issues/6675,1,['test'],['test-jupyroot']
Testability,"11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > &, std::shared_ptr<ROOT::Detail::RDF::RNodeBase>, ROOT::Internal::RDF::RBookedCustomColumns>' requested here; return std::make_unique<Action_t>(Helper_t(h, nSlots), bl, std::move(prevNode), std::move(customColumns));; ^; /home/stefan/src/miniconda3/envs/test-jupyroot/include/ROOT/RDF/InterfaceUtils.hxx:458:21: note: in instantiation of function template specialization 'ROOT::Internal::RDF::BuildAction<ROOT::VecOps::RVec<bool> , ROOT::Detail::RDF::RNodeBase>' requested here; auto actionPtr = BuildAction<BranchTypes...>(bl, std::move(rOnHeap), nSlots, std::move(prevNodePtr), ActionTag{},; ^; input_line_35:2:23: note: in instantiation of function template specialization 'ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, ROOT::VecOps::RVec<bool> , ROOT::Detail::RDF::RNodeBase, TH1D>' requested here; ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, ROOT::VecOps::RVec<Bool_t>>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x563bdc7d7910), {""Muon_tightId""}, 1, reinterpret_cast<weak_ptr<TH1D>*>(0x563bdc7d77a0), reinterpret_cast<std::weak_ptr<ROOT::Internal::RDF::RJittedAction>*>(0x563bdc7d7a80), reinterpret_cast<ROOT::Internal::RDF::RBookedCustomColumns*>(0x563bdc7d9150));; ^; /home/stefan/src/miniconda3/envs/test-jupyroot/include/ROOT/RVec.hxx:387:19: note: selected 'begin' function with iterator type 'ROOT::VecOps::RVec<bool>::const_iterator' (aka 'std::_Bit_const_iterator'); const_iterator begin() const noexcept { return fData.begin(); }; ^; terminate called after throwing an instance of 'std::runtime_error'; what(): ; An error occurred during just-in-time compilation in RLoopManager::Run. The lines above might indicate the cause of the crash; All RDF objects that have not run their event loop yet should be considered in an invalid state.; ```. It's ROOT from conda (6.22/02). You can download the file here (http://opendata",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6675:7899,test,test-jupyroot,7899,https://root.cern,https://github.com/root-project/root/issues/6675,1,['test'],['test-jupyroot']
Testability,"11b4edb19b45dd98eda76de0""><code>55dda29</code></a> fix: treat nocase:true as always having magic</li>; <li><a href=""https://github.com/isaacs/minimatch/commit/5e1fb8dd2bb78c0ae22101b9229fac4c76ef039e""><code>5e1fb8d</code></a> 3.1.0</li>; <li><a href=""https://github.com/isaacs/minimatch/commit/f8145c54f34075069f4a23cb214d871da4cd4006""><code>f8145c5</code></a> Add 'allowWindowsEscape' option</li>; <li><a href=""https://github.com/isaacs/minimatch/commit/570e8b1aef6c9e823a824aa0b9be10db43857cd7""><code>570e8b1</code></a> add publishConfig for v3 publishes</li>; <li><a href=""https://github.com/isaacs/minimatch/commit/5b7cd3372be253759fb4d865eb3f38f189a5fcdf""><code>5b7cd33</code></a> 3.0.6</li>; <li><a href=""https://github.com/isaacs/minimatch/commit/20b4b562830680867feb75f9c635aca08e5c86ff""><code>20b4b56</code></a> [fix] revert all breaking syntax changes</li>; <li><a href=""https://github.com/isaacs/minimatch/commit/2ff038852ec03e85e60e0eb333005c680ac8a543""><code>2ff0388</code></a> document, expose, and test 'partial:true' option</li>; <li>Additional commits viewable in <a href=""https://github.com/isaacs/minimatch/compare/v3.0.4...v3.1.2"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=minimatch&package-manager=npm_and_yarn&previous-version=3.0.4&new-version=3.1.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR,",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11864:1624,test,test,1624,https://root.cern,https://github.com/root-project/root/pull/11864,1,['test'],['test']
Testability,"123 = t_1;; int j123 = t_2;; }; ```; works fine. Note that issuing on the prompt right after the `.x trun.C` the command `gROOT->SetDirLevel(t_1);` or `i123 = t_2;` works as well. But this version:; ```; {; gROOT->ProcessLine("".L t1.C"");; gROOT->ProcessLine("".L t2.C"");; int i123 = t_1;; int j123 = t_2;; gROOT->SetDirLevel(t_1);; }; ```; mysteriously fails with:; ```; Processing trun.C...; /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: error: cannot initialize an array element of type 'void *' with an rvalue of type 'TROOT *(*)()'; gROOT->SetDirLevel(t_1);; ^~~~~; /Users/pcanal/root_working/builds/master-pr/include/TROOT.h:407:16: note: expanded from macro 'gROOT'; #define gROOT (ROOT::GetROOT()); ^~~~~~~~~~~~~; ```; The error seems to indicate that the parser is 'prefixing' to `gROOT` something related to `array of void*` and initialization. Similarly; ```; {; gROOT->ProcessLine("".L t1.C"");; gROOT->ProcessLine("".L t2.C"");; int i123 = t_1;; int j123 = t_2;; i123 = t_2;; }; ```; fails with:; ```; Processing trun.C...; Assertion failed: (Node->getDependence() == ExprDependence::None), function VisitBinaryOperator, file DynamicLookup.cpp, line 628.; Abort trap: 6; ```. And weirdly:; ```; {; gROOT->ProcessLine("".L t1.C"");; gROOT->ProcessLine("".L t2.C"");; int i123 = t_1;; int j123 = t_2;; t_1 = 3;; }; ```; fails with:; ```; /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: warning: declaration without the 'auto' keyword is deprecated: function '__cling_Un1Qu30' [-Wdeprecated-declarations]; t_1 = 3;; ^~~; auto ; input_line_11:2:3: error: reference to 't_1' is ambiguous; (t_1); ^; /Users/pcanal/root_working/code/master/roottest/cling/return/t1.C:1:5: note: candidate found by name lookup is 't_1'; int t_1 = 3;; ^; /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: note: candidate found by name lookup is '__cling_N50::t_1'; t_1 = 3;; ^; input_line_11:2:3: error: unknown type name 't_1'; (t_1); ^; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15481:2010,Assert,Assertion,2010,https://root.cern,https://github.com/root-project/root/issues/15481,1,['Assert'],['Assertion']
Testability,"17 0x0000152eccfc2d8c in __libc_start_main () from /lib64/libc.so.6; #18 0x0000000000406e5e in _start (); ===========================================================. The lines below might hint at the cause of the crash. If you see question; marks as part of the stack trace, try to recompile with debugging information; enabled and export CLING_DEBUG=1 environment variable before running.; You may get help by asking at the ROOT forum https://root.cern/forum; Only if you are really convinced it is a bug in ROOT then please submit a; report at https://root.cern/bugs Please post the ENTIRE stack trace; from above as an attachment in addition to anything else; that might help us fixing this issue.; ===========================================================; #8 0x0000152ecd023e41 in free () from /lib64/libc.so.6; #9 0x0000152ece69809f in __gnu_cxx::new_allocator<ROOT::TClassAlt*>::deallocate (this=0x152ecc011420 <guard variable for ROOT::GenerateInitInstanceLocal(std::vector<EncodedEventId, std::allocator<EncodedEventId> > const*)::instance>, __p=0x1, __t=18446744073709551615) at /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc11/external/gcc/11.2.1-f9b9dfdd886f71cd63f5538223d8f161/include/c++/11.2.1/ext/new_allocator.h:145; #10 0x0000152ece697bca in std::allocator_traits<std::allocator<ROOT::TClassAlt*> >::deallocate (__a=..., __p=0x1, __n=18446744073709551615) at /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc11/external/gcc/11.2.1-f9b9dfdd886f71cd63f5538223d8f161/include/c++/11.2.1/bits/alloc_traits.h:492; #11 0x0000152ece697604 in std::_Vector_base<ROOT::TClassAlt*, std::allocator<ROOT::TClassAlt*> >::_M_deallocate (this=0x152ecc011420 <guard variable for ROOT::GenerateInitInstanceLocal(std::vector<EncodedEventId, std::allocator<EncodedEventId> > const*)::instance>, __p=0x1, __n=18446744073709551615) at /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc11/external/gcc/11.2.1-f9b9dfdd886f71cd63f5",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12957:6249,test,tests,6249,https://root.cern,https://github.com/root-project/root/issues/12957,2,['test'],"['testBuildDir', 'tests']"
Testability,17_vecOpsHEP-py; 1081/1231 Test #1077: tutorial-dataframe-df007_snapshot-py ................................ Passed 9.12 sec; Start 1084: tutorial-dataframe-df019_Cache-py; 1082/1231 Test #1080: tutorial-dataframe-df012_DefinesAndFiltersAsStrings-py .............. Passed 5.30 sec; Start 1085: tutorial-dataframe-df021_createTGraph-py; 1083/1231 Test #1082: tutorial-dataframe-df016_vecOps-py .................................. Passed 4.06 sec; Start 1086: tutorial-dataframe-df024_Display-py; 1084/1231 Test #1083: tutorial-dataframe-df017_vecOpsHEP-py ............................... Passed 3.68 sec; Start 1087: tutorial-dataframe-df026_AsNumpyArrays-py; 1085/1231 Test #1081: tutorial-dataframe-df014_CSVDataSource-py ........................... Passed 7.49 sec; Start 1090: tutorial-dataframe-df031_Stats-py; 1087/1231 Test #1085: tutorial-dataframe-df021_createTGraph-py ............................ Passed 3.08 sec; Start 1091: tutorial-dataframe-df032_MakeNumpyDataFrame-py; 1088/1231 Test #1086: tutorial-dataframe-df024_Display-py ................................. Passed 4.99 sec; 1089/1231 Test #1084: tutorial-dataframe-df019_Cache-py ................................... Passed 6.22 sec; 1090/1231 Test #1090: tutorial-dataframe-df031_Stats-py ................................... Passed 3.39 sec; 1095/1231 Test #1087: tutorial-dataframe-df026_AsNumpyArrays-py ........................... Passed 6.89 sec; 1103/1231 Test #1091: tutorial-dataframe-df032_MakeNumpyDataFrame-py ...................... Passed 6.12 sec. Start 635: tutorial-graphs-timeSeriesFromCSV; Start 636: tutorial-graphs-timeSeriesFromCSV_TDF; 655/1231 Test #635: tutorial-graphs-timeSeriesFromCSV ................................... Passed 0.37 sec; 674/1231 Test #636: tutorial-graphs-timeSeriesFromCSV_TDF ............................... Passed 2.75 sec; Start 1093: tutorial-graphs-timeSeriesFromCSV-py; 1092/1231 Test #1093: tutorial-graphs-timeSeriesFromCSV-py ................................ Passed 0.78 sec; ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10300:13336,Test,Test,13336,https://root.cern,https://github.com/root-project/root/pull/10300,7,['Test'],['Test']
Testability,18/1231 Test #389: gtest-tree-dataframe-test-datasource-more ........................... Passed 7.48 sec; Start 396: gtest-tree-dataframe-test-datasource-sqlite; 419/1231 Test #395: gtest-tree-dataframe-test-datasource-ntuple ......................... Passed 1.80 sec; Start 397: pyunittests-dataframe-misc; 420/1231 Test #393: gtest-tree-dataframe-test-datasource-csv ............................ Passed 3.56 sec; Start 398: pyunittests-dataframe-histograms; 421/1231 Test #391: gtest-tree-dataframe-test-datasource-trivial ........................ Passed 6.48 sec; Start 399: pyunittests-dataframe-cache; 422/1231 Test #396: gtest-tree-dataframe-test-datasource-sqlite ......................... Passed 4.60 sec; Start 400: pyunittests-dataframe-merge-results; 423/1231 Test #397: pyunittests-dataframe-misc .......................................... Passed 3.66 sec; 424/1231 Test #398: pyunittests-dataframe-histograms .................................... Passed 3.40 sec; 444/1231 Test #400: pyunittests-dataframe-merge-results ................................. Passed 4.48 sec; 446/1231 Test #376: gtest-tree-dataframe-test-dataframe-simple .......................... Passed 38.57 sec; 447/1231 Test #399: pyunittests-dataframe-cache ......................................... Passed 10.50 sec; Start 447: tutorial-dataframe-df000_simple; Start 448: tutorial-dataframe-df001_introduction; Start 449: tutorial-dataframe-df002_dataModel; 470/1231 Test #447: tutorial-dataframe-df000_simple ..................................... Passed 2.85 sec; Start 450: tutorial-dataframe-df003_profiles; Start 451: tutorial-dataframe-df004_cutFlowReport; 472/1231 Test #450: tutorial-dataframe-df003_profiles ................................... Passed 5.31 sec; Start 452: tutorial-dataframe-df005_fillAnyObject; 473/1231 Test #449: tutorial-dataframe-df002_dataModel .................................. Passed 9.46 sec; Start 453: tutorial-dataframe-df006_ranges; 474/1231 Test #451: tutorial-dataframe-df004_cut,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10300:6355,Test,Test,6355,https://root.cern,https://github.com/root-project/root/pull/10300,1,['Test'],['Test']
Testability,"2 overloaded methods succeeded.; ~~~; 1110/1272 Test #1115: tutorial-fit-combinedFit-py .........................................***Failed 1.71 sec; Traceback (most recent call last):; File ""/builddir/build/BUILD/root-6.28.00/tutorials/fit/combinedFit.py"", line 98, in <module>; fitter.Config().ParSettings(4).Fix(); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; cppyy.gbl.std.out_of_range: none of the 2 overloaded methods succeeded. Full details:; const ROOT::Fit::ParameterSettings& ROOT::Fit::FitConfig::ParSettings(unsigned int i) =>; out_of_range: vector::_M_range_check: __n (which is 0) >= this->size() (which is 0); ROOT::Fit::ParameterSettings& ROOT::Fit::FitConfig::ParSettings(unsigned int i) =>; out_of_range: vector::_M_range_check: __n (which is 0) >= this->size() (which is 0); CMake Error at /builddir/build/BUILD/root-6.28.00/redhat-linux-build/RootTestDriver.cmake:232 (message):; error code: 1; ~~~. #### tutorial-math-exampleFunction-py. ReferenceError: attempt to access a null-pointer; ~~~; 1132/1272 Test #1132: tutorial-math-exampleFunction-py ....................................***Failed Error regular expression found in output. Regex=[Error in] 2.11 sec; Error in <ROOT::Math::Fitter::SetFCN>: FCN function has zero parameters ; Use Functor1D for wrapping one-dimensional function and compute integral of f(x) = x^2-1; integral-1D value = 5.999999999999999; Use Functor for wrapping a multi-dimensional function, the Rosenbrock Function r(x,y) and find its minimum; Traceback (most recent call last):; File ""/builddir/build/BUILD/root-6.28.00/tutorials/math/exampleFunction.py"", line 57, in <module>; fitter.Result().Print(ROOT.std.cout); ReferenceError: attempt to access a null-pointer; CMake Error at /builddir/build/BUILD/root-6.28.00/redhat-linux-build/RootTestDriver.cmake:232 (message):; error code: 1; ~~~. #### tutorial-tmva-TMVA_CNN_Classification-py. There are probably 6 thread, not 25769803776. (Zero-extended from 32 to 64 bits in the wrong direction.). $ printf '%016x\n",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12429:6849,Test,Test,6849,https://root.cern,https://github.com/root-project/root/issues/12429,1,['Test'],['Test']
Testability,"2300/external/el8_amd64_gcc11/lib/libCling.so; #22 0x00002b4bd39bf764 in cling::TransactionUnloader::unloadDeserializedDeclarations(cling::Transaction*, cling::DeclUnloader&) () from /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/CMSSW_13_2_ROOT628_X_2023-05-04-2300/external/el8_amd64_gcc11/lib/libCling.so; #23 0x00002b4bd39bfc86 in cling::TransactionUnloader::RevertTransaction(cling::Transaction*) () from /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/CMSSW_13_2_ROOT628_X_2023-05-04-2300/external/el8_amd64_gcc11/lib/libCling.so; #24 0x00002b4bd39a4afe in cling::Interpreter::unload(cling::Transaction&) () from /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/CMSSW_13_2_ROOT628_X_2023-05-04-2300/external/el8_amd64_gcc11/lib/libCling.so; #25 0x00002b4bd3a28bcf in cling::IncrementalParser::commitTransaction(llvm::PointerIntPair<cling::Transaction*, 2u, cling::IncrementalParser::EParseResult, llvm::PointerLikeTypeTraits<cling::Transaction*>, llvm::PointerIntPairInfo<cling::Transaction*, 2u, llvm::PointerLikeTypeTraits<cling::Transaction*> > >&, bool) () from /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/CMSSW_13_2_ROOT628_X_2023-05-04-2300/external/el8_amd64_gcc11/lib/libCling.so; #26 0x00002b4bd3a2b9b9 in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/CMSSW_13_2_ROOT628_X_2023-05-04-2300/external/el8_amd64_gcc11/lib/libCling.so; #27 0x00002b4bd39a1b64 in cling::Interpreter::parseForModule(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) () from /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/CMSSW_13_2_ROOT628_X_2023-05-04-2300/external/el8_amd64_gcc11/lib/libCling.so; #28 0x00002b4bd37824e9 in ExecAutoParse (what=0x2b4bf4038162 ""\n#line 1 \""DataFormatsBTauReco_xr dictionary payload\""\n\n#ifndef CMS_DICT_IMPL\n #define CMS_DICT_IMPL 1\n#endif\n#ifndef _REENTRANT\n #define _REENTRANT ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12771:8063,test,tests,8063,https://root.cern,https://github.com/root-project/root/issues/12771,1,['test'],['tests']
Testability,"2300/external/el8_amd64_gcc11/lib/libCling.so; #22 0x00002b4bd39bf764 in cling::TransactionUnloader::unloadDeserializedDeclarations(cling::Transaction*, cling::DeclUnloader&) () from /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/CMSSW_13_2_ROOT628_X_2023-05-04-2300/external/el8_amd64_gcc11/lib/libCling.so; #23 0x00002b4bd39bfc86 in cling::TransactionUnloader::RevertTransaction(cling::Transaction*) () from /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/CMSSW_13_2_ROOT628_X_2023-05-04-2300/external/el8_amd64_gcc11/lib/libCling.so; #24 0x00002b4bd39a4afe in cling::Interpreter::unload(cling::Transaction&) () from /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/CMSSW_13_2_ROOT628_X_2023-05-04-2300/external/el8_amd64_gcc11/lib/libCling.so; #25 0x00002b4bd3a28bcf in cling::IncrementalParser::commitTransaction(llvm::PointerIntPair<cling::Transaction*, 2u, cling::IncrementalParser::EParseResult, llvm::PointerLikeTypeTraits<cling::Transaction*>, llvm::PointerIntPairInfo<cling::Transaction*, 2u, llvm::PointerLikeTypeTraits<cling::Transaction*> > >&, bool) () from /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/CMSSW_13_2_ROOT628_X_2023-05-04-2300/external/el8_amd64_gcc11/lib/libCling.so; #26 0x00002b4bd3a2b9b9 in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/CMSSW_13_2_ROOT628_X_2023-05-04-2300/external/el8_amd64_gcc11/lib/libCling.so; #27 0x00002b4bd39a1b64 in cling::Interpreter::parseForModule(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) () from /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/CMSSW_13_2_ROOT628_X_2023-05-04-2300/external/el8_amd64_gcc11/lib/libCling.so; #28 0x00002b4bd37824e9 in ExecAutoParse (what=0x2b4bf4038162 ""n#line 1 ""DataFormatsBTauReco_xr dictionary payload""nn#ifndef CMS_DICT_IMPLn #define CMS_DICT_IMPL 1n#endifn#ifndef _REENTRANTn #define _REENTRANT 1n#endifn",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12771:19989,test,tests,19989,https://root.cern,https://github.com/root-project/root/issues/12771,1,['test'],['tests']
Testability,"2395; #4 0x00002b4bd1896496 in (anonymous namespace)::do_trace (sig=5) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:182; #5 0x00002b4bd1896526 in (anonymous namespace)::TExceptionHandlerImp::HandleException (this=0x2a96890, sig=5) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:201; #6 0x00002b4bd1d276e5 in TUnixSystem::DispatchSignals (this=0x7472d0, sig=kSigAbort) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/core/unix/src/TUnixSystem.cxx:3610; #7 0x00002b4bd1d1f654 in SigHandler (sig=kSigAbort) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/core/unix/src/TUnixSystem.cxx:395; #8 0x00002b4bd1d2763b in sighandler (sig=6) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/core/unix/src/TUnixSystem.cxx:3586; #9 <signal handler called>; #10 0x00002b4bd102eaff in raise () from /lib64/libc.so.6; #11 0x00002b4bd1001ea5 in abort () from /lib64/libc.so.6; #12 0x00002b4bd1001d79 in __assert_fail_base.cold.0 () from /lib64/libc.so.6; #13 0x00002b4bd1027456 in __assert_fail () from /lib64/libc.so.6; #14 0x00002b4bd679065b in getLambdaCallOperatorHelper(clang::CXXRecordDecl const&) [clone .part.0] () from /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/CMSSW_13_2_ROOT628_X_2023-05-04-2300/external/el8_amd64_gcc11/lib/libCling.so; #15 0x00002b4bd67915cb in clang::CXXRecordDecl::getLambdaCal",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12771:3338,test,tests,3338,https://root.cern,https://github.com/root-project/root/issues/12771,2,['test'],"['testBuildDir', 'tests']"
Testability,"241,5): error MSB8066: Custom build for 'F:\root\build_arm64ec\CMakeFiles\b04d8333b5c039b823a8aff01d40cf91\DiagnosticDriverKinds.inc.rule;F:\root\build_arm64ec\CMakeFiles\b7ee079947e4abdf24e97017e83e6e49\ClangDiagnosticDriver.rule' exited with code -1073741819. [F:\root\build_arm64ec\interpreter\llvm\src\tools\clang\include\clang\Basic\ClangDiagnosticDriver.vcxproj]; 	Line 9722: 187>C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(241,5): error MSB8066: Custom build for 'F:\root\build_arm64ec\CMakeFiles\dbefbc0a2a22685c1829aceb789a78f5\CommentHTMLNamedCharacterReferences.inc.rule;F:\root\build_arm64ec\CMakeFiles\048ff17cb9d0ac78b7b28ec5748a1abe\ClangCommentHTMLNamedCharacterReferences.rule' exited with code -1073741819. [F:\root\build_arm64ec\interpreter\llvm\src\tools\clang\include\clang\AST\ClangCommentHTMLNamedCharacterReferences.vcxproj]; 	Line 9730: 71>C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(241,5): error MSB8066: Custom build for 'F:\root\build_arm64ec\CMakeFiles\dbefbc0a2a22685c1829aceb789a78f5\AttrImpl.inc.rule;F:\root\build_arm64ec\CMakeFiles\048ff17cb9d0ac78b7b28ec5748a1abe\ClangAttrImpl.rule' exited with code -1073741819. [F:\root\build_arm64ec\interpreter\llvm\src\tools\clang\include\clang\AST\ClangAttrImpl.vcxproj]; 	Line 10436: 167>C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(241,5): error MSB8066: Custom build for 'F:\root\build_arm64ec\CMakeFiles\b12b2d84b1adefd629d4fa9259f4b17e\Options.inc.rule;F:\root\build_arm64ec\CMakeFiles\69e845e76a17fe07436e39f1ec5645da\ClangDriverOptions.rule' exited with code -1073741819. [F:\root\build_arm64ec\interpreter\llvm\src\tools\clang\include\clang\Driver\ClangDriverOptions.vcxproj]; ```; **Error log:**; [ROOT_msbuild_error.log](https://github.com/root-project/root/files/10102082/ROOT_msbuild_error.log)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11787:27046,log,log,27046,https://root.cern,https://github.com/root-project/root/issues/11787,3,['log'],['log']
Testability,"282b4b0 in HandleInterpreterException (metaProcessor=0x11f260fc0, input_line=0x11efcdaa0 "".X /builddir/build/BUILD/root-6.28.00/tutorials/roofit/rf104_classfactory.C"", compRes=; 0x7fffff15750c: cling::Interpreter::kSuccess, result=result; entry=0x7fffff157520) at /builddir/build/BUILD/root-6.28.00/interpreter/llvm/src/include/llvm/ADT/StringRef.h:86; ===========================================================; pure virtual method called; terminate called without an active exception; ~~~. There are failures running a compiles unit test (gtest):. ~~~; 314/1192 Test #204: gtest-roofit-RDataFrameHelpers-test-testActionHelpers ...............***Failed 111.03 sec; Running main() from gtest_main.cc; Note: Google Test filter = -RCsvDS.Remote:RRawFile.Remote:RSqliteDS.Davix:TFile.ReadWithoutGlobalRegistrationWeb:TFile.ReadWithoutGlobalRegistrationNet:RNTuple.TClassEBO; [==========] Running 2 tests from 1 test case.; [----------] Global test environment set-up.; [----------] 2 tests from RooAbsDataHelper; [ RUN ] RooAbsDataHelper.MTConstruction; *** Break *** segmentation violation; ===========================================================; There was a crash (#5 0x00007fffa13ac284 in SigHandler (sig=<optimized out>) at /builddir/build/BUILD/root-6.28.00/core/unix/src/TUnixSystem.cxx:395).; This is the entire stack trace of all threads:; ===========================================================; #0 0x00007fffa08f2f04 in waitpid () from /lib64/glibc-hwcaps/power9/libc-2.28.so; #1 0x00007fffa085a38c in do_system () from /lib64/glibc-hwcaps/power9/libc-2.28.so; #2 0x00007fffa13a9044 in TUnixSystem::Exec (shellcmd=<optimized out>, this=<optimized out>) at /builddir/build/BUILD/root-6.28.00/core/unix/src/TUnixSystem.cxx:2104; #3 TUnixSystem::StackTrace (this=0x173f45850) at /builddir/build/BUILD/root-6.28.00/core/unix/src/TUnixSystem.cxx:2395; #4 0x00007fffa13ac1c8 in TUnixSystem::DispatchSignals (this=0x173f45850, sig=kSigSegmentationViolation) at /builddir/build/BUILD/root-6.2",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12372:18954,test,tests,18954,https://root.cern,https://github.com/root-project/root/issues/12372,1,['test'],['tests']
Testability,"28; 52: '?' condition is true in /opt/root_src/io/io/src/TStreamerInfo.cxx:1828; 53: Assuming 'rule' is non-null in /opt/root_src/io/io/src/TStreamerInfo.cxx:1834; 54: Taking false branch in /opt/root_src/io/io/src/TStreamerInfo.cxx:1834; 55: 'targets' initialized here in /opt/root_src/io/io/src/TStreamerInfo.cxx:1843; 56: Assuming 'targets' is null in /opt/root_src/io/io/src/TStreamerInfo.cxx:1844; 57: Taking true branch in /opt/root_src/io/io/src/TStreamerInfo.cxx:1844; 58: Called C++ object pointer is null in /opt/root_src/io/io/src/TStreamerInfo.cxx:1847; /opt/root_src/io/io/src/TStreamerInfo.cxx:2408:50: warning: Called C++ object pointer is null [clang-analyzer-core.CallAndMessage]; 1: Calling 'TObject::TestBit' in /opt/root_src/io/io/src/TStreamerInfo.cxx:1700; 2: Assuming the condition is false in /opt/root_src/core/base/inc/TObject.h:187; 3: Returning zero, which participates in a condition later in /opt/root_src/core/base/inc/TObject.h:187; 4: Returning from 'TObject::TestBit' in /opt/root_src/io/io/src/TStreamerInfo.cxx:1700; 5: Taking false branch in /opt/root_src/io/io/src/TStreamerInfo.cxx:1700; 6: Calling 'TObject::TestBit' in /opt/root_src/io/io/src/TStreamerInfo.cxx:1703; 7: Assuming the condition is false in /opt/root_src/core/base/inc/TObject.h:187; 8: Returning zero, which participates in a condition later in /opt/root_src/core/base/inc/TObject.h:187; 9: Returning from 'TObject::TestBit' in /opt/root_src/io/io/src/TStreamerInfo.cxx:1703; 10: Taking false branch in /opt/root_src/io/io/src/TStreamerInfo.cxx:1703; 11: Assuming 'gDebug' is <= 0 in /opt/root_src/io/io/src/TStreamerInfo.cxx:1709; 12: Taking false branch in /opt/root_src/io/io/src/TStreamerInfo.cxx:1709; 13: Assuming the condition is false in /opt/root_src/io/io/src/TStreamerInfo.cxx:1715; 14: Taking false branch in /opt/root_src/io/io/src/TStreamerInfo.cxx:1715; 15: Assuming the condition is false in /opt/root_src/io/io/src/TStreamerInfo.cxx:1758; 16: Left side of '&&' is false in /opt/",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7431:107713,Test,TestBit,107713,https://root.cern,https://github.com/root-project/root/issues/7431,1,['Test'],['TestBit']
Testability,"2: Taking false branch in /opt/root_src/core/meta/src/TSchemaRule.cxx:785; 3: Loop condition is true. Entering loop body in /opt/root_src/core/meta/src/TSchemaRule.cxx:793; 4: Taking false branch in /opt/root_src/core/meta/src/TSchemaRule.cxx:795; 5: Loop condition is true. Entering loop body in /opt/root_src/core/meta/src/TSchemaRule.cxx:793; 6: Taking true branch in /opt/root_src/core/meta/src/TSchemaRule.cxx:795; 7: Loop condition is false. Execution continues on line 799 in /opt/root_src/core/meta/src/TSchemaRule.cxx:793; 8: 'haveCommonTargets' is true in /opt/root_src/core/meta/src/TSchemaRule.cxx:799; 9: Taking false branch in /opt/root_src/core/meta/src/TSchemaRule.cxx:799; 10: Assuming field 'fChecksumVect' is non-null in /opt/root_src/core/meta/src/TSchemaRule.cxx:806; 11: Taking true branch in /opt/root_src/core/meta/src/TSchemaRule.cxx:806; 12: Loop condition is true. Entering loop body in /opt/root_src/core/meta/src/TSchemaRule.cxx:808; 13: Calling 'TSchemaRule::TestChecksum' in /opt/root_src/core/meta/src/TSchemaRule.cxx:809; 14: Assuming the condition is false in /opt/root_src/core/meta/src/TSchemaRule.cxx:439; 15: Taking false branch in /opt/root_src/core/meta/src/TSchemaRule.cxx:439; 16: Assuming field 'fChecksumVect' is null in /opt/root_src/core/meta/src/TSchemaRule.cxx:442; 17: Taking true branch in /opt/root_src/core/meta/src/TSchemaRule.cxx:442; 18: Called C++ object pointer is null in /opt/root_src/core/meta/src/TSchemaRule.cxx:446; ```; ```; /opt/root_src/core/meta/src/TStatusBitsChecker.cxx:153:18: warning: Missing reference in range-for with non trivial type (ROOT::Detail::TStatusBitsChecker::Registry::Info) [clazy-range-loop]; 1: const in /opt/root_src/core/meta/src/TStatusBitsChecker.cxx:153; 2: & in /opt/root_src/core/meta/src/TStatusBitsChecker.cxx:153; ```; ```; /opt/root_src/core/meta/src/TStatusBitsChecker.cxx:187:12: warning: Missing reference in range-for with non trivial type (std::pair<const unsigned char, std::__cxx11::list<ROOT:",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7426:5601,Test,TestChecksum,5601,https://root.cern,https://github.com/root-project/root/issues/7426,1,['Test'],['TestChecksum']
Testability,"2; 19: Calling 'TIter::operator()' in /opt/root_src/proof/proof/src/TProof.cxx:5148; 20: Calling 'TIter::Next' in /opt/root_src/core/cont/inc/TCollection.h:248; 21: Assuming field 'fIterator' is non-null in /opt/root_src/core/cont/inc/TCollection.h:249; 22: '?' condition is true in /opt/root_src/core/cont/inc/TCollection.h:249; 23: Returning pointer, which participates in a condition later in /opt/root_src/core/cont/inc/TCollection.h:249; 24: Returning from 'TIter::Next' in /opt/root_src/core/cont/inc/TCollection.h:248; 25: Returning pointer, which participates in a condition later in /opt/root_src/core/cont/inc/TCollection.h:248; 26: Returning from 'TIter::operator()' in /opt/root_src/proof/proof/src/TProof.cxx:5148; 27: Loop condition is true. Entering loop body in /opt/root_src/proof/proof/src/TProof.cxx:5148; 28: 'pof' is non-null in /opt/root_src/proof/proof/src/TProof.cxx:5150; 29: Taking true branch in /opt/root_src/proof/proof/src/TProof.cxx:5150; 30: Calling 'TObject::TestBit' in /opt/root_src/proof/proof/src/TProof.cxx:5151; 31: Assuming the condition is false in /opt/root_src/core/base/inc/TObject.h:187; 32: Returning zero, which participates in a condition later in /opt/root_src/core/base/inc/TObject.h:187; 33: Returning from 'TObject::TestBit' in /opt/root_src/proof/proof/src/TProof.cxx:5151; 34: Left side of '&&' is false in /opt/root_src/proof/proof/src/TProof.cxx:5151; 35: Calling 'TProofOutputFile::IsRetrieve' in /opt/root_src/proof/proof/src/TProof.cxx:5163; 36: '?' condition is true in /opt/root_src/proof/proof/inc/TProofOutputFile.h:111; 37: Returning the value 1, which participates in a condition later in /opt/root_src/proof/proof/inc/TProofOutputFile.h:111; 38: Returning from 'TProofOutputFile::IsRetrieve' in /opt/root_src/proof/proof/src/TProof.cxx:5163; 39: Taking true branch in /opt/root_src/proof/proof/src/TProof.cxx:5163; 40: Called C++ object pointer is null in /opt/root_src/proof/proof/src/TProof.cxx:5165; /opt/root_src/proof/proof/src/TP",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7534:28114,Test,TestBit,28114,https://root.cern,https://github.com/root-project/root/issues/7534,1,['Test'],['TestBit']
Testability,"2; 21: Calling 'TIter::operator()' in /opt/root_src/proof/proof/src/TProof.cxx:5148; 22: Calling 'TIter::Next' in /opt/root_src/core/cont/inc/TCollection.h:248; 23: Assuming field 'fIterator' is non-null in /opt/root_src/core/cont/inc/TCollection.h:249; 24: '?' condition is true in /opt/root_src/core/cont/inc/TCollection.h:249; 25: Returning pointer, which participates in a condition later in /opt/root_src/core/cont/inc/TCollection.h:249; 26: Returning from 'TIter::Next' in /opt/root_src/core/cont/inc/TCollection.h:248; 27: Returning pointer, which participates in a condition later in /opt/root_src/core/cont/inc/TCollection.h:248; 28: Returning from 'TIter::operator()' in /opt/root_src/proof/proof/src/TProof.cxx:5148; 29: Loop condition is true. Entering loop body in /opt/root_src/proof/proof/src/TProof.cxx:5148; 30: 'pof' is non-null in /opt/root_src/proof/proof/src/TProof.cxx:5150; 31: Taking true branch in /opt/root_src/proof/proof/src/TProof.cxx:5150; 32: Calling 'TObject::TestBit' in /opt/root_src/proof/proof/src/TProof.cxx:5151; 33: Assuming the condition is true in /opt/root_src/core/base/inc/TObject.h:187; 34: Returning the value 1, which participates in a condition later in /opt/root_src/core/base/inc/TObject.h:187; 35: Returning from 'TObject::TestBit' in /opt/root_src/proof/proof/src/TProof.cxx:5151; 36: Left side of '&&' is true in /opt/root_src/proof/proof/src/TProof.cxx:5151; 37: Calling 'TString::IsNull' in /opt/root_src/proof/proof/src/TProof.cxx:5151; 38: Returning zero, which participates in a condition later in /opt/root_src/core/base/inc/TString.h:407; 39: Returning from 'TString::IsNull' in /opt/root_src/proof/proof/src/TProof.cxx:5151; 40: Taking true branch in /opt/root_src/proof/proof/src/TProof.cxx:5151; 41: 'pof' is not equal to 'pf' in /opt/root_src/proof/proof/src/TProof.cxx:5152; 42: Left side of '&&' is false in /opt/root_src/proof/proof/src/TProof.cxx:5152; 43: Called C++ object pointer is null in /opt/root_src/proof/proof/src/TProof.cx",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7534:24508,Test,TestBit,24508,https://root.cern,https://github.com/root-project/root/issues/7534,1,['Test'],['TestBit']
Testability,"2b74b31cd79dc51b; which modifies the `TFileMerger` class. . The slow down affect ROOT versions `>= 6.22.08`. The problem is the call of the ; ```; else; dirtodelete.Add(result);; ```. When hadding files, those two lines are called for each object found in a TDirectory. ; So for instance if you store histograms in a TDirectory the directory is going to be added to `dirtodelete` as many times as you have histograms in that directory. And this slows down condiderably the hadd command as previously there was not such thing done. The deletion is called several times over the same object as well which is also inneficient. . With some inputs containing several TDirectories, hadding with ROOT version `6.22.06` takes around 1 hour on lxplus ; whereas with ROOT version `>= 6.22.08` it would take more than a day... I can provide inputs files to illustrate the problem that are stored here ; /eos/user/b/bouquet/VHbbcc_results/testHadd_3periods/; (3 files of size ~5GB each they contain ~640 TDirectory each one containing around 6000 histograms) . Or available thanks to the following link ; https://cernbox.cern.ch/index.php/s/FBryG2p5Lshp6Lx; (in practive you can download just one file and replicate it 2 times to have 3 files to hadd and do tests) . I can tell the hadd is much slower as the names of Tdirectory processed are printed out and the difference in time to process only just one TDirectory is large depending on the ROOT version used it takes few seconds (`v6.22.06`) versus 10-15 minutes (`>= v6.22.08`). . This bug needs to be absolutely fixed as it would affect many analyses and it needs backported to all the root versions starting from `6.22.08`. . I made a test commenting the two lines with the following gitlab repository https://gitlab.cern.ch/robouque/haddtests; ```; else; dirtodelete.Add(result);; ```; the speed is restored even using `ROOT 6.22.08`. So the problem really comes from adding the directory many times to that list. Many thanks in advance, ; Best, ; Romain",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9939:1517,test,tests,1517,https://root.cern,https://github.com/root-project/root/issues/9939,2,['test'],"['test', 'tests']"
Testability,"2e4b30b8c2 [RF] Better server redirection in compileForNormSet without attributes; d5ca98077e [RF] New function for server changing without setting attributes; 1f8a1666d1 [RF] Factor out marking compiled args in `NormalizationHelpers`; 7db5be20e9 [RF] Support multiple NLL with BatchMode existing at the same time; 24f1ca4fc1 [RF] Add exception if `RooAbsArg::_dataToken` is corrupted; ef69ad7633 [RF] Refactor BatchMode likelihood creation code; 364f67393d [RF] Disable RooFit multiprocess ProcessTimer test; e7d4ec3a69 [RF] Introduce `ROOFIT_MEMORY_SAFE_INTERFACES` macro; 3fd6057316 [RF] Use `RooFit::OwningPtr<>` also for RooAbsReal::createIntegral(); 8ad7711af6 [RF] Fix several memory leaks in `RooProdPdf::rearrangeProduct()`; ab420820bb [RF] Remove unused `binb` variable in RooBinnedGenContext; 81fbc904d4 [RF] Less manual memory management in RooFit; ff32c33446 [RF] Modernize memory management in RooStats; d89d54ce65 [RF] Fix `getPropagatedError()` negative parameter case for zero error; 4542e761eb [RF] Flag `RooAbsArg::getObservables()` as returning owning pointer; c246acb066 [RF] Always use `addOwned()` overload that takes `unique_ptr`; f17180742c [RF] Add `ExternalConstraints`, createNLL() and fitTo() to ModelConfig; cf98956266 [RF] Add exceptions to setter methods for non-existing objects; 1cc5ec46c8 [RF] Forbid resetting RooFormula; b483747192 [RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`; b537cbb93d [RF] Add the CHEP'23 AD results as a RooFit test; 40ab6a4d89 [RF] Fix code generation issues with RooAdd* classes; 3dcea7036a [RF] Support simultaneous fits in NLL code generation; a470a3d85e [RF] Remove internal `RooFormula` from public RooFit interface; 3d01cd2e8f [RF] Remove deprecated RooAbsString; 059af6d55a [RF] Remove RooAbsRootFinder; bdc19e090e [RF] Get rid of RooScaledFunc; 88dbb6ad17 [RF] Make RooGenProdProj private; 94ee158ddc [RF] Remove deprecated RooCatType; d46e5fc087 [RF] Remove some unused class rules in roofitcore LinkDef.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12905:2840,test,test,2840,https://root.cern,https://github.com/root-project/root/pull/12905,1,['test'],['test']
Testability,"2ecd023e41 in free () from /lib64/libc.so.6; #9 0x0000152ece69809f in __gnu_cxx::new_allocator<ROOT::TClassAlt*>::deallocate (this=0x152ecc011420 <guard variable for ROOT::GenerateInitInstanceLocal(std::vector<EncodedEventId, std::allocator<EncodedEventId> > const*)::instance>, __p=0x1, __t=18446744073709551615) at /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc11/external/gcc/11.2.1-f9b9dfdd886f71cd63f5538223d8f161/include/c++/11.2.1/ext/new_allocator.h:145; #10 0x0000152ece697bca in std::allocator_traits<std::allocator<ROOT::TClassAlt*> >::deallocate (__a=..., __p=0x1, __n=18446744073709551615) at /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc11/external/gcc/11.2.1-f9b9dfdd886f71cd63f5538223d8f161/include/c++/11.2.1/bits/alloc_traits.h:492; #11 0x0000152ece697604 in std::_Vector_base<ROOT::TClassAlt*, std::allocator<ROOT::TClassAlt*> >::_M_deallocate (this=0x152ecc011420 <guard variable for ROOT::GenerateInitInstanceLocal(std::vector<EncodedEventId, std::allocator<EncodedEventId> > const*)::instance>, __p=0x1, __n=18446744073709551615) at /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc11/external/gcc/11.2.1-f9b9dfdd886f71cd63f5538223d8f161/include/c++/11.2.1/bits/stl_vector.h:354; #12 0x0000152ece696eac in std::_Vector_base<ROOT::TClassAlt*, std::allocator<ROOT::TClassAlt*> >::~_Vector_base (this=0x152ecc011420 <guard variable for ROOT::GenerateInitInstanceLocal(std::vector<EncodedEventId, std::allocator<EncodedEventId> > const*)::instance>, __in_chrg=<optimized out>) at /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc11/external/gcc/11.2.1-f9b9dfdd886f71cd63f5538223d8f161/include/c++/11.2.1/bits/stl_vector.h:335; #13 0x0000152ece696efd in std::vector<ROOT::TClassAlt*, std::allocator<ROOT::TClassAlt*> >::~vector (this=0x152ecc011420 <guard variable for ROOT::GenerateInitInstanceLocal(std::vector<EncodedEventId, std::allocator<EncodedEventId> > const*)::instance>,",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12957:3513,test,tests,3513,https://root.cern,https://github.com/root-project/root/issues/12957,4,['test'],"['testBuildDir', 'tests']"
Testability,"3 """": 30 bins (-3..3), variable bin sizes; axis 4 """": 10 bins (0..5), variable bin sizes; axis 5 """": 4 bins (0..2), variable bin sizes; axis 6 """": 18 bins (0..2), variable bin sizes; axis 7 """": 12 bins (0..5), variable bin sizes; with error calculation; Sum(w)=2, Sum(w^2)=2.5; axis 0: Sum(w*x)=3.5, Sum(w*x^2)=6.5; axis 1: Sum(w*x)=3.5, Sum(w*x^2)=6.5; axis 2: Sum(w*x)=3.5, Sum(w*x^2)=6.5; axis 3: Sum(w*x)=3.5, Sum(w*x^2)=6.5; axis 4: Sum(w*x)=3.5, Sum(w*x^2)=6.5; axis 5: Sum(w*x)=3.5, Sum(w*x^2)=6.5; axis 6: Sum(w*x)=3.5, Sum(w*x^2)=6.5; axis 7: Sum(w*x)=3.5, Sum(w*x^2)=6.5; coordinates stored in 1 chunks of 16384 entries; 3.07559e-09 of bins filled using 6.61576e-05 of memory compared to an array; Bin at (5,2,2,21,3,3,10,3) = 0.5 (+/- 0.5); Bin at (5,2,2,26,5,5,19,5) = 1.5 (+/- 1.5); 2; THnSparseT<TArrayD> (*0x57c3b10): ""hs"" ""CASE 2""; 8 dimensions, 2 entries in 2 filled bins; axis 0 """": 10 bins (-5..10), variable bin sizes; axis 1 """": 10 bins (-10..70), variable bin sizes; axis 2 """": 5 bins (-1000..3000), variable bin sizes; axis 3 """": 30 bins (-3..3), variable bin sizes; axis 4 """": 10 bins (0..5), variable bin sizes; axis 5 """": 4 bins (0..2), variable bin sizes; axis 6 """": 18 bins (0..2), variable bin sizes; axis 7 """": 12 bins (0..5), variable bin sizes; with error calculation; Sum(w)=0.5, Sum(w^2)=0.25; axis 0: Sum(w*x)=0.5, Sum(w*x^2)=0.5; axis 1: Sum(w*x)=0.5, Sum(w*x^2)=0.5; axis 2: Sum(w*x)=0.5, Sum(w*x^2)=0.5; axis 3: Sum(w*x)=0.5, Sum(w*x^2)=0.5; axis 4: Sum(w*x)=0.5, Sum(w*x^2)=0.5; axis 5: Sum(w*x)=0.5, Sum(w*x^2)=0.5; axis 6: Sum(w*x)=0.5, Sum(w*x^2)=0.5; axis 7: Sum(w*x)=0.5, Sum(w*x^2)=0.5; coordinates stored in 1 chunks of 16384 entries; 3.07559e-09 of bins filled using 6.61576e-05 of memory compared to an array; Bin at (5,2,2,21,3,3,10,3) = 0.5 (+/- 0.5); Bin at (5,2,2,26,5,5,19,5) = 1.5 (+/- 1.5); 0.5; ```. ### Setup. 1. ROOT versions: tested 6.06.00, 6.12.07, 6.24.07 (all have the bug); 2. Scientific Linux 7.9, AlmaLinux 8.6; 4. From CMSSW on cvmfs",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11333:2850,test,tested,2850,https://root.cern,https://github.com/root-project/root/issues/11333,1,['test'],['tested']
Testability,"3-11</h2>; <h3>Commits</h3>; <ul>; <li>security notice <a href=""https://github.com/minimistjs/minimist/commit/4cf1354839cb972e38496d35e12f806eea92c11f""><code>4cf1354</code></a></li>; <li>additional test for constructor prototype pollution <a href=""https://github.com/minimistjs/minimist/commit/1043d212c3caaf871966e710f52cfdf02f9eea4b""><code>1043d21</code></a></li>; </ul>; <h2><a href=""https://github.com/minimistjs/minimist/compare/v1.2.2...v1.2.3"">v1.2.3</a> - 2020-03-10</h2>; <h3>Commits</h3>; <ul>; <li>more failing proto pollution tests <a href=""https://github.com/minimistjs/minimist/commit/13c01a5327736903704984b7f65616b8476850cc""><code>13c01a5</code></a></li>; <li>even more aggressive checks for protocol pollution <a href=""https://github.com/minimistjs/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab""><code>38a4d1c</code></a></li>; </ul>; <h2><a href=""https://github.com/minimistjs/minimist/compare/v1.2.1...v1.2.2"">v1.2.2</a> - 2020-03-10</h2>; <h3>Commits</h3>; <ul>; <li>failing test for protocol pollution <a href=""https://github.com/minimistjs/minimist/commit/0efed0340ec8433638758f7ca0c77cb20a0bfbab""><code>0efed03</code></a></li>; <li>cleanup <a href=""https://github.com/minimistjs/minimist/commit/67d3722413448d00a62963d2d30c34656a92d7e2""><code>67d3722</code></a></li>; <li>console.dir -&gt; console.log <a href=""https://github.com/minimistjs/minimist/commit/47acf72c715a630bf9ea013867f47f1dd69dfc54""><code>47acf72</code></a></li>; <li>don't assign onto <strong>proto</strong> <a href=""https://github.com/minimistjs/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94""><code>63e7ed0</code></a></li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/minimistjs/minimist/commit/c590d75b741a12b5423e2b299f38a7f7c7d25a18""><code>c590d75</code></a> v1.2.7</li>; <li><a href=""https://github.com/minimistjs/minimist/commit/0ebf4ebcd5f7787a5524d31a849ef41316b83",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11865:4581,test,test,4581,https://root.cern,https://github.com/root-project/root/pull/11865,1,['test'],['test']
Testability,3/1231 Test #367: gtest-tree-dataframe-test-dataframe-histomodels ..................... Passed 19.30 sec; Start 371: gtest-tree-dataframe-test-dataframe-utils; 394/1231 Test #371: gtest-tree-dataframe-test-dataframe-utils ........................... Passed 1.38 sec; Start 372: gtest-tree-dataframe-test-dataframe-report; 395/1231 Test #370: gtest-tree-dataframe-test-dataframe-regression ...................... Passed 12.11 sec; Start 373: gtest-tree-dataframe-test-dataframe-splitcoll-arrayview; 396/1231 Test #372: gtest-tree-dataframe-test-dataframe-report .......................... Passed 0.79 sec; Start 374: gtest-tree-dataframe-test-dataframe-redefine; 397/1231 Test #373: gtest-tree-dataframe-test-dataframe-splitcoll-arrayview ............. Passed 1.07 sec; Start 375: gtest-tree-dataframe-test-dataframe-definepersample; 398/1231 Test #374: gtest-tree-dataframe-test-dataframe-redefine ........................ Passed 3.63 sec; Start 376: gtest-tree-dataframe-test-dataframe-simple; 399/1231 Test #375: gtest-tree-dataframe-test-dataframe-definepersample ................. Passed 3.06 sec; Start 377: gtest-tree-dataframe-test-dataframe-helpers; 400/1231 Test #368: gtest-tree-dataframe-test-dataframe-interface ....................... Passed 21.83 sec; Start 378: gtest-tree-dataframe-test-dataframe-vecops; 401/1231 Test #378: gtest-tree-dataframe-test-dataframe-vecops .......................... Passed 3.95 sec; Start 379: gtest-tree-dataframe-test-dataframe-snapshot; 402/1231 Test #377: gtest-tree-dataframe-test-dataframe-helpers ......................... Passed 8.48 sec; Start 380: gtest-tree-dataframe-test-dataframe-display; 403/1231 Test #365: gtest-tree-dataframe-test-dataframe-cache ........................... Passed 44.39 sec; Start 381: gtest-tree-dataframe-test-dataframe-ranges; Start 382: gtest-tree-dataframe-test-dataframe-leaves; 405/1231 Test #381: gtest-tree-dataframe-test-dataframe-ranges .......................... Passed 2.10 sec; Start 383: gtest-tree-dataf,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10300:2457,test,test-dataframe-simple,2457,https://root.cern,https://github.com/root-project/root/pull/10300,3,"['Test', 'test']","['Test', 'test-dataframe-definepersample', 'test-dataframe-simple']"
Testability,"3059ff in decltype((fp0(fp)) , ((void)())) ROOT::Minuit2::MnPrint::HandleLambda<ROOT::Minuit2::FumiliGradientCalculator::operator()(ROOT::Minuit2::MinimumParameters const&) const::$_0>(std::ostream&, ROOT::Minuit2::FumiliGradientCalculator::operator()(ROOT::Minuit2::MinimumParameters const&) const::$_0 const&, int) /home/jhahnfel/ROOT/src/math/minuit2/inc/Minuit2/MnPrint.h:171:7; 505: #5 0x7fa7103059ce in void ROOT::Minuit2::MnPrint::StreamArgs<ROOT::Minuit2::FumiliGradientCalculator::operator()(ROOT::Minuit2::MinimumParameters const&) const::$_0>(std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >&, ROOT::Minuit2::FumiliGradientCalculator::operator()(ROOT::Minuit2::MinimumParameters const&) const::$_0 const&) /home/jhahnfel/ROOT/src/math/minuit2/inc/Minuit2/MnPrint.h:187:7; 505: #6 0x7fa71030576b in void ROOT::Minuit2::MnPrint::Log<ROOT::Minuit2::FumiliGradientCalculator::operator()(ROOT::Minuit2::MinimumParameters const&) const::$_0>(ROOT::Minuit2::MnPrint::Verbosity, ROOT::Minuit2::FumiliGradientCalculator::operator()(ROOT::Minuit2::MinimumParameters const&) const::$_0 const&) /home/jhahnfel/ROOT/src/math/minuit2/inc/Minuit2/MnPrint.h:155:7; 505: #7 0x7fa7103054c1 in void ROOT::Minuit2::MnPrint::Debug<ROOT::Minuit2::FumiliGradientCalculator::operator()(ROOT::Minuit2::MinimumParameters const&) const::$_0>(ROOT::Minuit2::FumiliGradientCalculator::operator()(ROOT::Minuit2::MinimumParameters const&) const::$_0 const&) /home/jhahnfel/ROOT/src/math/minuit2/inc/Minuit2/MnPrint.h:140:7; 505: #8 0x7fa710305184 in ROOT::Minuit2::FumiliGradientCalculator::operator()(ROOT::Minuit2::MinimumParameters const&) const /home/jhahnfel/ROOT/src/math/minuit2/src/FumiliGradientCalculator.cxx:94:10; 505: #9 0x7fa71030555b in ROOT::Minuit2::FumiliGradientCalculator::operator()(ROOT::Minuit2::MinimumParameters const&, ROOT::Minuit2::FunctionGradient const&) const /home/jhahnfel/ROOT/src/math/minuit2/src/FumiliGradientCalculator.cxx:112:17; 505: #10 0x7fa",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10014:1833,Log,Log,1833,https://root.cern,https://github.com/root-project/root/issues/10014,1,['Log'],['Log']
Testability,31 Test #374: gtest-tree-dataframe-test-dataframe-redefine ........................ Passed 3.63 sec; Start 376: gtest-tree-dataframe-test-dataframe-simple; 399/1231 Test #375: gtest-tree-dataframe-test-dataframe-definepersample ................. Passed 3.06 sec; Start 377: gtest-tree-dataframe-test-dataframe-helpers; 400/1231 Test #368: gtest-tree-dataframe-test-dataframe-interface ....................... Passed 21.83 sec; Start 378: gtest-tree-dataframe-test-dataframe-vecops; 401/1231 Test #378: gtest-tree-dataframe-test-dataframe-vecops .......................... Passed 3.95 sec; Start 379: gtest-tree-dataframe-test-dataframe-snapshot; 402/1231 Test #377: gtest-tree-dataframe-test-dataframe-helpers ......................... Passed 8.48 sec; Start 380: gtest-tree-dataframe-test-dataframe-display; 403/1231 Test #365: gtest-tree-dataframe-test-dataframe-cache ........................... Passed 44.39 sec; Start 381: gtest-tree-dataframe-test-dataframe-ranges; Start 382: gtest-tree-dataframe-test-dataframe-leaves; 405/1231 Test #381: gtest-tree-dataframe-test-dataframe-ranges .......................... Passed 2.10 sec; Start 383: gtest-tree-dataframe-test-dataframe-resptr; 406/1231 Test #383: gtest-tree-dataframe-test-dataframe-resptr .......................... Passed 0.61 sec; Start 384: gtest-tree-dataframe-test-dataframe-take; 407/1231 Test #382: gtest-tree-dataframe-test-dataframe-leaves .......................... Passed 2.14 sec; Start 385: gtest-tree-dataframe-test-dataframe-entrylist; 408/1231 Test #385: gtest-tree-dataframe-test-dataframe-entrylist ....................... Passed 0.90 sec; Start 386: gtest-tree-dataframe-test-dataframe-merge-results; 409/1231 Test #386: gtest-tree-dataframe-test-dataframe-merge-results ................... Passed 0.54 sec; Start 387: gtest-tree-dataframe-test-dataframe-samplecallback; 410/1231 Test #384: gtest-tree-dataframe-test-dataframe-take ............................ Passed 2.19 sec; Start 388: gtest-tree-dataframe-test-dat,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10300:3273,test,test-dataframe-ranges,3273,https://root.cern,https://github.com/root-project/root/pull/10300,4,"['Test', 'test']","['Test', 'test-dataframe-leaves', 'test-dataframe-ranges']"
Testability,32 against `.rodata' can not be used when making a shared object; recompile with -fPIC; /cvmfs/sft.cern.ch/lcg/contrib/bintuils/2.28/x86_64-slc6/bin/ld: ../../lib/libgsl.a(hyperg_2F1.o): relocation R_X86_64_32 against `.rodata' can not be used when making a shared object; recompile with -fPIC; /cvmfs/sft.cern.ch/lcg/contrib/bintuils/2.28/x86_64-slc6/bin/ld: ../../lib/libgsl.a(hyperg_U.o): relocation R_X86_64_32 against `.rodata' can not be used when making a shared object; recompile with -fPIC; /cvmfs/sft.cern.ch/lcg/contrib/bintuils/2.28/x86_64-slc6/bin/ld: ../../lib/libgsl.a(laguerre.o): relocation R_X86_64_32 against `.rodata' can not be used when making a shared object; recompile with -fPIC; /cvmfs/sft.cern.ch/lcg/contrib/bintuils/2.28/x86_64-slc6/bin/ld: ../../lib/libgsl.a(legendre_poly.o): relocation R_X86_64_32 against `.rodata' can not be used when making a shared object; recompile with -fPIC; /cvmfs/sft.cern.ch/lcg/contrib/bintuils/2.28/x86_64-slc6/bin/ld: ../../lib/libgsl.a(log.o): relocation R_X86_64_32 against `.rodata' can not be used when making a shared object; recompile with -fPIC; /cvmfs/sft.cern.ch/lcg/contrib/bintuils/2.28/x86_64-slc6/bin/ld: ../../lib/libgsl.a(poch.o): relocation R_X86_64_32 against `.rodata' can not be used when making a shared object; recompile with -fPIC; /cvmfs/sft.cern.ch/lcg/contrib/bintuils/2.28/x86_64-slc6/bin/ld: ../../lib/libgsl.a(pow_int.o): relocation R_X86_64_32 against `.rodata' can not be used when making a shared object; recompile with -fPIC; /cvmfs/sft.cern.ch/lcg/contrib/bintuils/2.28/x86_64-slc6/bin/ld: ../../lib/libgsl.a(psi.o): relocation R_X86_64_32 against `.rodata' can not be used when making a shared object; recompile with -fPIC; /cvmfs/sft.cern.ch/lcg/contrib/bintuils/2.28/x86_64-slc6/bin/ld: ../../lib/libgsl.a(trig.o): relocation R_X86_64_32 against `.data' can not be used when making a shared object; recompile with -fPIC; /cvmfs/sft.cern.ch/lcg/contrib/bintuils/2.28/x86_64-slc6/bin/ld: ../../lib/libgsl,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1996:21954,log,log,21954,https://root.cern,https://github.com/root-project/root/pull/1996,1,['log'],['log']
Testability,"3586; #9 <signal handler called>; #10 0x00002b4bd102eaff in raise () from /lib64/libc.so.6; #11 0x00002b4bd1001ea5 in abort () from /lib64/libc.so.6; #12 0x00002b4bd1001d79 in __assert_fail_base.cold.0 () from /lib64/libc.so.6; #13 0x00002b4bd1027456 in __assert_fail () from /lib64/libc.so.6; #14 0x00002b4bd679065b in getLambdaCallOperatorHelper(clang::CXXRecordDecl const&) [clone .part.0] () from /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/CMSSW_13_2_ROOT628_X_2023-05-04-2300/external/el8_amd64_gcc11/lib/libCling.so; #15 0x00002b4bd67915cb in clang::CXXRecordDecl::getLambdaCallOperator() const () from /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/CMSSW_13_2_ROOT628_X_2023-05-04-2300/external/el8_amd64_gcc11/lib/libCling.so; #16 0x00002b4bd39f6a20 in clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseLambdaExpr(clang::LambdaExpr*, llvm::SmallVectorImpl<llvm::PointerIntPair<clang::Stmt*, 1u, bool, llvm::PointerLikeTypeTraits<clang::Stmt*>, llvm::PointerIntPairInfo<clang::Stmt*, 1u, llvm::PointerLikeTypeTraits<clang::Stmt*> > > >*) () from /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/CMSSW_13_2_ROOT628_X_2023-05-04-2300/external/el8_amd64_gcc11/lib/libCling.so; #17 0x00002b4bd39ef4d5 in clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseStmt(clang::Stmt*, llvm::SmallVectorImpl<llvm::PointerIntPair<clang::Stmt*, 1u, bool, llvm::PointerLikeTypeTraits<clang::Stmt*>, llvm::PointerIntPairInfo<clang::Stmt*, 1u, llvm::PointerLikeTypeTraits<clang::Stmt*> > > >*) [clone .constprop.0] () from /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/CMSSW_13_2_ROOT628_X_2023-05-04-2300/external/el8_amd64_gcc11/lib/libCling.so; #18 0x00002b4bd39ea96d in clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*) [clone .part.0] () from /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/CMSSW_13_2_ROOT628_X_2023-05-04-2300/ext",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12771:4873,test,tests,4873,https://root.cern,https://github.com/root-project/root/issues/12771,1,['test'],['tests']
Testability,"382; 8: Taking true branch in /opt/root_src/core/cont/src/TRefArray.cxx:382; 9: 'uid' declared without an initial value in /opt/root_src/core/cont/src/TRefArray.cxx:384; 10: Calling 'TRefArray::GetObjectUID' in /opt/root_src/core/cont/src/TRefArray.cxx:385; 11: Calling 'TObject::TestBit' in /opt/root_src/core/cont/src/TRefArray.cxx:211; 12: Assuming the condition is false in /opt/root_src/core/base/inc/TObject.h:187; 13: Returning zero, which participates in a condition later in /opt/root_src/core/base/inc/TObject.h:187; 14: Returning from 'TObject::TestBit' in /opt/root_src/core/cont/src/TRefArray.cxx:211; 15: Taking false branch in /opt/root_src/core/cont/src/TRefArray.cxx:211; 16: Calling 'TObject::TestBit' in /opt/root_src/core/cont/src/TRefArray.cxx:213; 17: Assuming the condition is true in /opt/root_src/core/base/inc/TObject.h:187; 18: Returning the value 1, which participates in a condition later in /opt/root_src/core/base/inc/TObject.h:187; 19: Returning from 'TObject::TestBit' in /opt/root_src/core/cont/src/TRefArray.cxx:213; 20: Taking true branch in /opt/root_src/core/cont/src/TRefArray.cxx:213; 21: Assuming the condition is false in /opt/root_src/core/cont/src/TRefArray.cxx:214; 22: 'valid' is false in /opt/root_src/core/cont/src/TRefArray.cxx:215; 23: Taking false branch in /opt/root_src/core/cont/src/TRefArray.cxx:215; 24: Assuming the condition is true in /opt/root_src/core/cont/src/TRefArray.cxx:218; 25: Taking true branch in /opt/root_src/core/cont/src/TRefArray.cxx:218; 26: Assuming 'gDebug' is <= 3 in /opt/root_src/core/cont/src/TRefArray.cxx:222; 27: Taking false branch in /opt/root_src/core/cont/src/TRefArray.cxx:222; 28: 'valid' is true in /opt/root_src/core/cont/src/TRefArray.cxx:254; 29: Taking false branch in /opt/root_src/core/cont/src/TRefArray.cxx:254; 30: Returning without writing to 'uid' in /opt/root_src/core/cont/src/TRefArray.cxx:258; 31: Returning the value 1 (loaded from 'valid'), which participates in a condition later in /opt/ro",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7424:21857,Test,TestBit,21857,https://root.cern,https://github.com/root-project/root/issues/7424,1,['Test'],['TestBit']
Testability,"3bdc7d7a80), reinterpret_cast<ROOT::Internal::RDF::RBookedCustomColumns*>(0x563bdc7d9150));; ^; /home/stefan/src/miniconda3/envs/test-jupyroot/include/ROOT/RVec.hxx:387:19: note: selected 'begin' function with iterator type 'ROOT::VecOps::RVec<bool>::const_iterator' (aka 'std::_Bit_const_iterator'); const_iterator begin() const noexcept { return fData.begin(); }; ^; In module 'ROOTDataFrame':; /home/stefan/src/miniconda3/envs/test-jupyroot/include/ROOT/RDF/ActionHelpers.hxx:190:18: error: non-const lvalue reference to type 'bool' cannot bind to a temporary of type 'std::_Bit_const_iterator::const_reference' (aka 'bool'); for (auto &v : vs) {; ^ ~; /home/stefan/src/miniconda3/envs/test-jupyroot/include/ROOT/RDF/RAction.hxx:237:33: note: in instantiation of function template specialization 'ROOT::Internal::RDF::FillHelper::Exec<ROOT::VecOps::RVec<bool>, 0>' requested here; ActionCRTP_t::GetHelper().Exec(slot, std::get<S>(fValues[slot]).Get(entry)...);; ^; /home/stefan/src/miniconda3/envs/test-jupyroot/include/ROOT/RDF/RAction.hxx:149:41: note: in instantiation of function template specialization 'ROOT::Internal::RDF::RAction<ROOT::Internal::RDF::FillHelper, ROOT::Detail::RDF::RNodeBase, ROOT::TypeTraits::TypeList<ROOT::VecOps::RVec<bool> > >::Exec<0>' requested here; static_cast<Action_t *>(this)->Exec(slot, entry, TypeInd_t());; ^; /home/stefan/src/miniconda3/envs/test-jupyroot/include/ROOT/RDF/RAction.hxx:223:4: note: in instantiation of member function 'ROOT::Internal::RDF::RActionCRTP<ROOT::Internal::RDF::RAction<ROOT::Internal::RDF::FillHelper, ROOT::Detail::RDF::RNodeBase, ROOT::TypeTraits::TypeList<ROOT::VecOps::RVec<bool> > > >::Run' requested here; RAction(Helper &&h, const ColumnNames_t &bl, std::shared_ptr<PrevDataFrame> pd,; ^; /home/stefan/src/miniconda3/envs/test-jupyroot/bin/../lib/gcc/x86_64-conda-linux-gnu/7.5.0/../../../../x86_64-conda-linux-gnu/include/c++/7.5.0/bits/unique_ptr.h:821:34: note: in instantiation of member function 'ROOT::Internal::RDF:",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6675:4825,test,test-jupyroot,4825,https://root.cern,https://github.com/root-project/root/issues/6675,1,['test'],['test-jupyroot']
Testability,"3d21</code></a></li>; </ul>; <h2><a href=""https://github.com/minimistjs/minimist/compare/v1.2.2...v1.2.3"">v1.2.3</a> - 2020-03-10</h2>; <h3>Commits</h3>; <ul>; <li>more failing proto pollution tests <a href=""https://github.com/minimistjs/minimist/commit/13c01a5327736903704984b7f65616b8476850cc""><code>13c01a5</code></a></li>; <li>even more aggressive checks for protocol pollution <a href=""https://github.com/minimistjs/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab""><code>38a4d1c</code></a></li>; </ul>; <h2><a href=""https://github.com/minimistjs/minimist/compare/v1.2.1...v1.2.2"">v1.2.2</a> - 2020-03-10</h2>; <h3>Commits</h3>; <ul>; <li>failing test for protocol pollution <a href=""https://github.com/minimistjs/minimist/commit/0efed0340ec8433638758f7ca0c77cb20a0bfbab""><code>0efed03</code></a></li>; <li>cleanup <a href=""https://github.com/minimistjs/minimist/commit/67d3722413448d00a62963d2d30c34656a92d7e2""><code>67d3722</code></a></li>; <li>console.dir -&gt; console.log <a href=""https://github.com/minimistjs/minimist/commit/47acf72c715a630bf9ea013867f47f1dd69dfc54""><code>47acf72</code></a></li>; <li>don't assign onto <strong>proto</strong> <a href=""https://github.com/minimistjs/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94""><code>63e7ed0</code></a></li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/minimistjs/minimist/commit/c590d75b741a12b5423e2b299f38a7f7c7d25a18""><code>c590d75</code></a> v1.2.7</li>; <li><a href=""https://github.com/minimistjs/minimist/commit/0ebf4ebcd5f7787a5524d31a849ef41316b83c3c""><code>0ebf4eb</code></a> [meta] add <code>auto-changelog</code></li>; <li><a href=""https://github.com/minimistjs/minimist/commit/e115b63fa9d3909f33b00a2db647ff79068388de""><code>e115b63</code></a> [actions] add reusable workflows</li>; <li><a href=""https://github.com/minimistjs/minimist/commit/01fc23f5104f85c75059972e01dd33796ab529ff""><co",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11865:4907,log,log,4907,https://root.cern,https://github.com/root-project/root/pull/11865,1,['log'],['log']
Testability,4 TMVA test requires BLAS library but run even when it was not found.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16720:7,test,test,7,https://root.cern,https://github.com/root-project/root/issues/16720,1,['test'],['test']
Testability,41 sec; The following tests FAILED:; 	 16 - pyunittests-pyroot-pyz-stl-vector (Failed); 	 57 - pyunittests-pyroot-pyz-rtensor (Failed); 	213 - gtest-roofit-histfactory-test-testHistFactory (Failed); 	219 - gtest-roofit-roofit-test-testRooCrystalBall (Failed); 	220 - gtest-roofit-roofit-test-testRooJohnson (Failed); 	223 - gtest-roofit-roofit-test-testSumW2Error (Failed); 	228 - gtest-roofit-roofitcore-test-testRooBinSamplingPdf (Failed); 	229 - gtest-roofit-roofitcore-test-testRooSimPdfBuilder (Failed); 	230 - gtest-roofit-roofitcore-test-testRooWrapperPdf (Failed); 	231 - gtest-roofit-roofitcore-test-testRooFitDriver (Failed); 	233 - gtest-roofit-roofitcore-test-testRooAbsPdf (Failed); 	237 - gtest-roofit-roofitcore-test-testRooProdPdf (Failed); 	241 - gtest-roofit-roofitcore-test-testTestStatistics (Failed); 	242 - gtest-roofit-roofitcore-test-testRooProductPdf (Failed); 	243 - gtest-roofit-roofitcore-test-testNaNPacker (Failed); 	244 - gtest-roofit-roofitcore-test-testRooSimultaneous (Failed); 	245 - gtest-roofit-roofitcore-test-testRooGradMinimizerFcn (Failed); 	247 - gtest-roofit-roofitcore-test-testLikelihoodSerial (Failed); 	248 - gtest-roofit-roofitcore-test-testRooRealL (Failed); 	249 - gtest-roofit-roofitcore-test-testGlobalObservables (Failed); 	252 - gtest-roofit-roostats-test-testSPlot (Failed); 	274 - test-stresshistogram (Failed); 	275 - test-stresshistogram-interpreted (Failed); 	296 - test-stresshistofit (Failed); 	297 - test-stresshistofit-interpreted (Failed); 	396 - gtest-tree-dataframe-test-datasource-ntuple (Failed); 	402 - gtest-tree-ntuple-v7-test-ntuple-bas,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10409:415,test,tests,415,https://root.cern,https://github.com/root-project/root/issues/10409,15,['test'],"['test-', 'test-testHistFactory', 'test-testNaNPacker', 'test-testRooAbsPdf', 'test-testRooBinSamplingPdf', 'test-testRooCrystalBall', 'test-testRooFitDriver', 'test-testRooJohnson', 'test-testRooProdPdf', 'test-testRooProductPdf', 'test-testRooSimPdfBuilder', 'test-testRooSimultaneous', 'test-testRooWrapperPdf', 'test-testTestStatistics', 'tests']"
Testability,469: tutorial-dataframe-df024_Display; 490/1231 Test #467: tutorial-dataframe-df022_useKahan ................................... Passed 3.26 sec; Start 470: tutorial-dataframe-df025_RNode; 491/1231 Test #465: tutorial-dataframe-df020_helpers .................................... Passed 3.82 sec; Start 471: tutorial-dataframe-df031_Stats; 492/1231 Test #468: tutorial-dataframe-df023_aggregate .................................. Passed 2.25 sec; 498/1231 Test #470: tutorial-dataframe-df025_RNode ...................................... Passed 2.80 sec; 502/1231 Test #464: tutorial-dataframe-df019_Cache ...................................... Passed 7.71 sec; 506/1231 Test #471: tutorial-dataframe-df031_Stats ...................................... Passed 3.82 sec; 507/1231 Test #469: tutorial-dataframe-df024_Display .................................... Passed 4.58 sec; Start 1071: tutorial-dataframe-df000_simple-py; Start 1072: tutorial-dataframe-df001_introduction-py; Start 1073: tutorial-dataframe-df002_dataModel-py; Start 1074: tutorial-dataframe-df003_profiles-py; 1072/1231 Test #1071: tutorial-dataframe-df000_simple-py .................................. Passed 2.85 sec; Start 1075: tutorial-dataframe-df004_cutFlowReport-py; 1073/1231 Test #1074: tutorial-dataframe-df003_profiles-py ................................ Passed 5.32 sec; Start 1076: tutorial-dataframe-df006_ranges-py; 1074/1231 Test #1072: tutorial-dataframe-df001_introduction-py ............................ Passed 7.77 sec; Start 1077: tutorial-dataframe-df007_snapshot-py; 1075/1231 Test #1075: tutorial-dataframe-df004_cutFlowReport-py ........................... Passed 5.88 sec; Start 1078: tutorial-dataframe-df008_createDataSetFromScratch-py; 1076/1231 Test #1073: tutorial-dataframe-df002_dataModel-py ............................... Passed 8.55 sec; Start 1079: tutorial-dataframe-df010_trivialDataSource-py; 1077/1231 Test #1079: tutorial-dataframe-df010_trivialDataSource-py ....................... Passed 3.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10300:10889,Test,Test,10889,https://root.cern,https://github.com/root-project/root/pull/10300,1,['Test'],['Test']
Testability,"4898dea653199466402e67d73657f10/include/c++/10.3.0/bits/stl_pair.h: In instantiation of 'constexpr std::pair::type>::__type, typename std::__strip_reference_wrapper::type>::__type> std::make_pair(_T1&&, _T2&&) [with _T1 = std::shared_ptr; _T2 = RooTemplateProxy; typename std::__strip_reference_wrapper::type>::__type = RooTemplateProxy; typename std::__strip_reference_wrapper::type>::__type = std::shared_ptr]':; /data/cmsbld/jenkins/workspace/ib-run-pr-tests/CMSSW_12_5_ROOT6_X_2022-08-14-2300/src/PhysicsTools/Utilities/interface/RooFitFunction.h:56:37: required from 'root::RooFitFunction::RooFitFunction(const char*, const char*, const Expr&, RooAbsReal&, RooAbsReal&, funct::Parameter&, RooAbsReal&, funct::Parameter&, RooAbsReal&, funct::Parameter&) [with X = funct::X; Expr = funct::Expression]'; /data/cmsbld/jenkins/workspace/ib-run-pr-tests/CMSSW_12_5_ROOT6_X_2022-08-14-2300/src/PhysicsTools/Utilities/test/testRooFitFunction.cpp:30:77: required from here; /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc10/external/gcc/10.3.0-84898dea653199466402e67d73657f10/include/c++/10.3.0/bits/stl_pair.h:572:14: error: no matching function for call to 'std::pair, RooTemplateProxy >::pair(std::shared_ptr, RooTemplateProxy)'; 572 | return __pair_type(std::forward<_T1>(__x), std::forward<_T2>(__y));; | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~; /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc10/external/gcc/10.3.0-84898dea653199466402e67d73657f10/include/c++/10.3.0/bits/stl_pair.h:452:9: note: candidate: 'template std::pair<_T1, _T2>::pair(std::tuple<_Args1 ...>&, std::tuple<_Args2 ...>&, std::_Index_tuple<_Indexes1 ...>, std::_Index_tuple<_Indexes2 ...>) [with _Args1 = {_Args1 ...}; long unsigned int ..._Indexes1 = {_Indexes1 ...}; _Args2 = {_Args2 ...}; long unsigned int ..._Indexes2 = {_Indexes2 ...}; _T1 = std::shared_ptr; _T2 = RooTemplateProxy]'; 452 | pair(tuple<_Args1...>&, tuple<_Args2...>&,; | ^~~~; ```. N",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11188:1667,test,tests,1667,https://root.cern,https://github.com/root-project/root/issues/11188,2,['test'],"['testBuildDir', 'tests']"
Testability,"4960; /opt/root_src/proof/proof/src/TProofServ.cxx:5159:18: warning: Although the value stored to 'st' is used in the enclosing expression, the value is never actually read from 'st' [clang-analyzer-deadcode.DeadStores]; 1: Although the value stored to 'st' is used in the enclosing expression, the value is never actually read from 'st' in /opt/root_src/proof/proof/src/TProofServ.cxx:5159; /opt/root_src/proof/proofbench/src/TProofBench.cxx:499:30: warning: Called C++ object pointer is null [clang-analyzer-core.CallAndMessage]; 1: Assuming 'fout' is non-null in /opt/root_src/proof/proofbench/src/TProofBench.cxx:414; 2: Left side of '||' is false in /opt/root_src/proof/proofbench/src/TProofBench.cxx:414; 3: 'fout' is non-null in /opt/root_src/proof/proofbench/src/TProofBench.cxx:414; 4: Left side of '&&' is true in /opt/root_src/proof/proofbench/src/TProofBench.cxx:414; 5: Calling 'TObject::IsZombie' in /opt/root_src/proof/proofbench/src/TProofBench.cxx:414; 6: Calling 'TObject::TestBit' in /opt/root_src/core/base/inc/TObject.h:149; 7: Assuming the condition is false in /opt/root_src/core/base/inc/TObject.h:187; 8: Returning zero, which participates in a condition later in /opt/root_src/core/base/inc/TObject.h:187; 9: Returning from 'TObject::TestBit' in /opt/root_src/core/base/inc/TObject.h:149; 10: Returning zero, which participates in a condition later in /opt/root_src/core/base/inc/TObject.h:149; 11: Returning from 'TObject::IsZombie' in /opt/root_src/proof/proofbench/src/TProofBench.cxx:414; 12: Taking false branch in /opt/root_src/proof/proofbench/src/TProofBench.cxx:414; 13: Assuming 'nmdesc' is null in /opt/root_src/proof/proofbench/src/TProofBench.cxx:422; 14: Taking false branch in /opt/root_src/proof/proofbench/src/TProofBench.cxx:422; 15: '?' condition is false in /opt/root_src/proof/proofbench/src/TProofBench.cxx:426; 16: Left side of '||' is true in /opt/root_src/proof/proofbench/src/TProofBench.cxx:427; 17: Calling 'TString::Contains' in /opt/root_src/pr",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7534:54183,Test,TestBit,54183,https://root.cern,https://github.com/root-project/root/issues/7534,1,['Test'],['TestBit']
Testability,"4le and s390x.; So the failure is on the only 32 bit architecture, so could be 32 bit related. ~~~; 115/1232 Test #69: pyunittests-pyroot-roofit-roodataset-numpy ..........................***Failed 2.72 sec; test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range); Test that rows with out-of-range values are skipped, both for ... ; RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby ; Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University; All rights reserved, please read http://roofit.sourceforge.net/license.txt; [#0] WARNING:DataHandling -- FAIL; test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy); Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events; ok; test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted); Test exporting to numpy and then importing back a weighted dataset. ... ok; test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic); Basic test with a real value and a category. ... ok; test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight); Test if the optional computation of derived weights works. ... ok; test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted); Test with a weighted dataset. ... ok; ======================================================================; FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range); Test that rows with out-of-range values are skipped, both for; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""/builddir/build/BUILD/root-6.26.10/bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py"", line 145, in test_ignoring_out_of_range; self.assertEqual(dataset_n",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12162:1152,Test,Test,1152,https://root.cern,https://github.com/root-project/root/issues/12162,1,['Test'],['Test']
Testability,"5 - test-stresshistogram-interpreted (Failed); 	296 - test-stresshistofit (Failed); 	297 - test-stresshistofit-interpreted (Failed); 	396 - gtest-tree-dataframe-test-datasource-ntuple (Failed); 	402 - gtest-tree-ntuple-v7-test-ntuple-basics (Failed); 	406 - gtest-tree-ntuple-v7-test-ntuple-merger (Failed); 	412 - gtest-tree-ntuple-v7-test-ntuple-serialize (Failed); 	420 - gtest-tree-ntuple-v7-test-ntuple-minifile (Failed); 	423 - gtest-tree-ntuple-v7-test-ntuple-extended (Failed); 	870 - tutorial-roofit-rf612_recoverFromInvalidParameters (Failed); 	1077 - tutorial-dataframe-df006_ranges-py (Failed); 	1106 - tutorial-math-exampleFunction-py (Failed); Errors while running CTest; ```; With the proposed change in #10303 to not fail on the warning about RooNaNPacker not being implemented for big endian, the list of failures is shorter:; ```; 99% tests passed, 17 tests failed out of 1232; Label Time Summary:; longtest = 540.69 sec*proc (27 tests); multithreaded = 678.83 sec*proc (2 tests); python_runtime_deps = 60.39 sec*proc (11 tests); tutorial = 3802.05 sec*proc (786 tests); Total Test time (real) = 2732.59 sec; The following tests FAILED:; 	 16 - pyunittests-pyroot-pyz-stl-vector (Failed); 	 57 - pyunittests-pyroot-pyz-rtensor (Failed); 	237 - gtest-roofit-roofitcore-test-testRooProdPdf (Failed); 	243 - gtest-roofit-roofitcore-test-testNaNPacker (Failed); 	274 - test-stresshistogram (Failed); 	275 - test-stresshistogram-interpreted (Failed); 	296 - test-stresshistofit (Failed); 	297 - test-stresshistofit-interpreted (Failed); 	396 - gtest-tree-dataframe-test-datasource-ntuple (Failed); 	402 - gtest-tree-ntuple-v7-test-ntuple-basics (Failed); 	406 - gtest-tree-ntuple-v7-test-ntuple-merger (Failed); 	412 - gtest-tree-ntuple-v7-test-ntuple-serialize (Failed); 	420 - gtest-tree-ntuple-v7-test-ntuple-minifile (Failed); 	423 - gtest-tree-ntuple-v7-test-ntuple-extended (Failed); 	870 - tutorial-roofit-rf612_recoverFromInvalidParameters (Failed); 	1077 - tutorial-dataframe-df",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10409:2755,test,tests,2755,https://root.cern,https://github.com/root-project/root/issues/10409,1,['test'],['tests']
Testability,"5.79821e+10 vs 57.9821GiB and 54GB; Checking 8.90604e+13 vs 89.0604TiB and 81TB; Checking 1.36797e+17 vs 136.797EiB and 121.5EB; Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB; Checking 3.22744e+23 vs 322.744YiB and 273.375YB; (int) 0. -- END TEST OUTPUT --; -- BEGIN TEST ERROR --; Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so; In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx_ACLiC_dict.cxx:41:; In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:1:; [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m; if (v < std::numeric_limits<T>::max()) {; [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~; [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m; auto parseResult = ROOT::FromHumanReadableSize(input,res);; [NON-XML-CHAR-0x1B][0;1;32m ^; [NON-XML-CHAR-0x1B][0m1 warning generated. -- END TEST ERROR --; CMake Error at /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/root/cmake/modules/RootTestDriver.cmake:179 (message):; Unexpected error output",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4257:3618,assert,assertHumanReadable,3618,https://root.cern,https://github.com/root-project/root/pull/4257,2,"['TEST', 'assert']","['TEST', 'assertHumanReadable']"
Testability,"5219](https://sft.its.cern.ch/jira/browse/ROOT-5219)) updating the TRint prompt after incomplete input on a nested call to `TROOT::ProcessLine()`. Specifically, `TRint::ProcessLineNr()` used the output parameter `error` to tell if the collected input was incomplete (i.e., it contains unbalanced braces or the last line was terminated by a `\` character). While this works most of the time, it fails if there is a nested call to `ProcessLine()` that provides incomplete input, e.g.:; ```c++; $ root -l -b; root [0] gROOT->ProcessLine(""fprintf(stdout,\""the inner is printing\""\n""); (long) 0; root [1] 12; root (cont'ed, cancel with .@) [2].@; root [3] .q; ```. In this case, there are two nested `ProcessLine()` calls; the inner-most has incomplete input (missing a `)`), but the `error` output parameter is ignored. The outer-most call, however, has complete input, which is what was seen by TRint. This created inconsistency between the collected input in cling's InputValidator (which was incomplete) and the ROOT prompt string, that was not showing `root (cont'ed, cancel with .@) []`. Thus, the correct behavior would have been:; ```c++; root [0] gROOT->ProcessLine(""fprintf(stdout,\""the inner is printing\""\n"");; root (cont'ed, cancel with .@) [0]);; the inner is printing; ```. ## Changes or fixes:; - Add `InputValidator::getLastResult()` and `MetaProcessor::waitingMoreInput()` which allow to query whether the collected input is incomplete, either because it contains unbalanced braces or we found a backslash-newline (the last seen token is a `\`).; - Properly implement the `TInterpreter::GetMore()` function based on `MetaProcessor::waitingMoreInput()`. Get rid of the `fMore` member (which was not even updated correctly).; - Use `gCling->GetMore()` in `TRint::ProcessLineNr()` to tell if we are waiting for more input, and thus we should show the continuation prompt. ## Checklist:; - [X] tested changes locally. This PR fixes [ROOT-5219](https://sft.its.cern.ch/jira/browse/ROOT-5219).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9733:1943,test,tested,1943,https://root.cern,https://github.com/root-project/root/pull/9733,1,['test'],['tested']
Testability,"5: Left side of '&&' is false in /opt/root_src/tree/tree/src/TFriendElement.cxx:88; 6: Assuming 'treename' is null in /opt/root_src/tree/tree/src/TFriendElement.cxx:94; 7: Left side of '&&' is false in /opt/root_src/tree/tree/src/TFriendElement.cxx:94; 8: Calling 'TFriendElement::Connect' in /opt/root_src/tree/tree/src/TFriendElement.cxx:104; 9: Calling 'TFriendElement::GetFile' in /opt/root_src/tree/tree/src/TFriendElement.cxx:159; 10: Assuming field 'fFile' is null in /opt/root_src/tree/tree/src/TFriendElement.cxx:185; 11: Left side of '||' is false in /opt/root_src/tree/tree/src/TFriendElement.cxx:185; 12: Calling 'TObject::IsZombie' in /opt/root_src/tree/tree/src/TFriendElement.cxx:185; 13: Calling 'TObject::TestBit' in /opt/root_src/core/base/inc/TObject.h:149; 14: Assuming the condition is false in /opt/root_src/core/base/inc/TObject.h:187; 15: Returning zero, which participates in a condition later in /opt/root_src/core/base/inc/TObject.h:187; 16: Returning from 'TObject::TestBit' in /opt/root_src/core/base/inc/TObject.h:149; 17: Returning zero, which participates in a condition later in /opt/root_src/core/base/inc/TObject.h:149; 18: Returning from 'TObject::IsZombie' in /opt/root_src/tree/tree/src/TFriendElement.cxx:185; 19: Taking false branch in /opt/root_src/tree/tree/src/TFriendElement.cxx:185; 20: Assuming the condition is false in /opt/root_src/tree/tree/src/TFriendElement.cxx:187; 21: Taking false branch in /opt/root_src/tree/tree/src/TFriendElement.cxx:187; 22: Called C++ object pointer is null in /opt/root_src/tree/tree/src/TFriendElement.cxx:192; /opt/root_src/tree/tree/src/TLeaf.cxx:237:4: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7429:68221,Test,TestBit,68221,https://root.cern,https://github.com/root-project/root/issues/7429,1,['Test'],['TestBit']
Testability,"5e40f02a68a0fd8a7c036f40/root-6.28.05/core/unix/src/TUnixSystem.cxx:395; #6 0x0000152ece6eb5c1 in sighandler (sig=11) at /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.05-e7deaecb5e40f02a68a0fd8a7c036f40/root-6.28.05/core/unix/src/TUnixSystem.cxx:3586; #7 <signal handler called>; #8 0x0000152ecd023e41 in free () from /lib64/libc.so.6; #9 0x0000152ece69809f in __gnu_cxx::new_allocator<ROOT::TClassAlt*>::deallocate (this=0x152ecc011420 <guard variable for ROOT::GenerateInitInstanceLocal(std::vector<EncodedEventId, std::allocator<EncodedEventId> > const*)::instance>, __p=0x1, __t=18446744073709551615) at /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc11/external/gcc/11.2.1-f9b9dfdd886f71cd63f5538223d8f161/include/c++/11.2.1/ext/new_allocator.h:145; #10 0x0000152ece697bca in std::allocator_traits<std::allocator<ROOT::TClassAlt*> >::deallocate (__a=..., __p=0x1, __n=18446744073709551615) at /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc11/external/gcc/11.2.1-f9b9dfdd886f71cd63f5538223d8f161/include/c++/11.2.1/bits/alloc_traits.h:492; #11 0x0000152ece697604 in std::_Vector_base<ROOT::TClassAlt*, std::allocator<ROOT::TClassAlt*> >::_M_deallocate (this=0x152ecc011420 <guard variable for ROOT::GenerateInitInstanceLocal(std::vector<EncodedEventId, std::allocator<EncodedEventId> > const*)::instance>, __p=0x1, __n=18446744073709551615) at /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc11/external/gcc/11.2.1-f9b9dfdd886f71cd63f5538223d8f161/include/c++/11.2.1/bits/stl_vector.h:354; #12 0x0000152ece696eac in std::_Vector_base<ROOT::TClassAlt*, std::allocator<ROOT::TClassAlt*> >::~_Vector_base (this=0x152ecc011420 <guard variable for ROOT::GenerateInitInstanceLocal(std::vector<EncodedEventId, std::allocator<EncodedEventId> > const*)::instance>, __in_chrg=<optimized out>) at /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc11/extern",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12957:3036,test,tests,3036,https://root.cern,https://github.com/root-project/root/issues/12957,2,['test'],"['testBuildDir', 'tests']"
Testability,"5feb: true, result=...) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/core/foundation/src/TClassEdit.cxx:1741; #35 0x00002b4bd1c8ec12 in TClassEdit::ResolveTypedef[abi:cxx11](char const*, bool) (tname=0x438fe30 ""reco::SecondaryVertexTagInfo::TrackData"") at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/core/foundation/src/TClassEdit.cxx:1775; #36 0x00002b4bd1c885f9 in TClassEdit::TSplitType::ShortType (this=0x7ffd951b61c0, answ=..., mode=3618) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/core/foundation/src/TClassEdit.cxx:442; #37 0x00002b4bd1c89e1b in TClassEdit::GetNormalizedName (norm_name=..., name=...) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/core/foundation/src/TClassEdit.cxx:871; #38 0x00002b4bd1cedb74 in ROOT::TSchemaRule::SetSourceClass (this=0xc24c900, classname=...) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/core/meta/src/TSchemaRule.cxx:459; #39 0x00002b4bd1cd28b8 in ROOT::TGenericClassInfo::CreateRuleSet (this=0x2b4bf40eb840 <ROOT::GenerateInitInstanceLocal(reco::btag::TrackData const*)::instance>, vect=..., ProcessReadRules=true) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/core/meta/src/TGenericClassInfo.cxx:319; #40 0x00002b4bd1cd26bd in ROOT::TGenericClassInfo::GetClass (this=0x2b4bf40eb840 <ROOT::GenerateInitInstanceLocal(reco::btag::TrackData const*)::instance>) at /pool/condor/dir_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12771:12618,test,tests,12618,https://root.cern,https://github.com/root-project/root/issues/12771,4,['test'],"['testBuildDir', 'tests']"
Testability,"6.22.02 build error on mac OS 10.15. Building 6.22.02 from source on macOS fails. Note I maintain the ROOT6 port in MacPorts, and my ultimate aim here is to update that build to 6.22.02 (currently 6.22.00). We use a number additional options and dependencies, hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is; ```; [ 74%] Linking CXX shared library ../lib/libCore.so; <snip>; make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop.; make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so; ```. ## Expected behavior; Builds OK. ## To Reproduce; ```; git clone git@github.com:root-project/root.git; cd root; git checkout v6-22-02; cd ..; mkdir install build; cd build; cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMAKE_INSTALL_PREFIX=""/opt/local/libex",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6366:508,log,log,508,https://root.cern,https://github.com/root-project/root/issues/6366,5,['log'],['log']
Testability,"6.26 patch release:. - [x] https://github.com/root-project/root/pull/11023; Only the last commit, which has not been backported for the last patch release yet (the rest of PR was backported before the 6.26.04 release); - [x] https://github.com/root-project/root/pull/11123; Only the first commit that relates to the batch mode; - [x] https://github.com/root-project/root/pull/11162; - [x] https://github.com/root-project/root/pull/11129; Only the first two commits that are note just code modernization; - [x] https://github.com/root-project/root/pull/11134; Excluding the first commit with the code modernization; - [x] https://github.com/root-project/root/pull/11195; - [x] https://github.com/root-project/root/pull/11346; - [x] https://github.com/root-project/root/pull/11343; Only the first commit that is not code modernization; - [x] https://github.com/root-project/root/pull/11401; - [x] https://github.com/root-project/root/pull/11406; Only the last commit that changes the PDF cloning behavior, also excluding the `testRooSimultaneous` changes in that commit; - [x] https://github.com/root-project/root/pull/11416; excluding the first commit with the code modernization; - [x] https://github.com/root-project/root/pull/11417; - [x] https://github.com/root-project/root/pull/11419; - [x] https://github.com/root-project/root/pull/10842; - [x] https://github.com/root-project/root/pull/11500; Excluding the last commit that only updates the tutorials; - [x] https://github.com/root-project/root/pull/11507; - [x] https://github.com/root-project/root/pull/10811; - [x] https://github.com/root-project/root/pull/11531; Except for the second commit that fixes something that was introduced in the 6.28 development cycle. The backports were grouped in a few PRs to `v6-26-00-patches`:. 1. https://github.com/root-project/root/pull/11133; 2. https://github.com/root-project/root/pull/11402; 3. https://github.com/root-project/root/pull/11427; 4. https://github.com/root-project/root/pull/11505; 5. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11059:1683,test,testRooSimultaneous,1683,https://root.cern,https://github.com/root-project/root/issues/11059,1,['test'],['testRooSimultaneous']
Testability,"6.28.00/tree/ntuple/v7/src/RMiniFile.cxx'; aborting; [ --- ]; CMake Error at /builddir/build/BUILD/root-6.28.00/cmake/modules/RootTestDriver.cmake:232 (message):; error code: Subprocess aborted; ~~~. #### gtest-tree-ntuple-v7-test-ntuple-endian. Here the bytes are in the right order, but shifted 4 bytes. $ printf '%016x\n%016x\n' 1234605615003729920 287454020; 1122334400000000; 0000000011223344; $ printf '%016x\n%016x\n' 6153737371142586367 1432778632; 55667788ffffffff; 0000000055667788; ~~~; 449/1272 Test #424: gtest-tree-ntuple-v7-test-ntuple-endian .............................***Failed 0.04 sec; Running main() from /builddir/build/BUILD/googletest-1.13.0/googletest/src/gtest_main.cc; Note: Google Test filter = -RCsvDS.Remote:RRawFile.Remote:RSqliteDS.Davix:TFile.ReadWithoutGlobalRegistrationWeb:TFile.ReadWithoutGlobalRegistrationNet:RNTuple.TClassEBO; [==========] Running 9 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 9 tests from RColumnElementEndian; [ RUN ] RColumnElementEndian.Float; [ OK ] RColumnElementEndian.Float (6 ms); [ RUN ] RColumnElementEndian.Double; [ OK ] RColumnElementEndian.Double (3 ms); [ RUN ] RColumnElementEndian.Int16; [ OK ] RColumnElementEndian.Int16 (0 ms); [ RUN ] RColumnElementEndian.UInt16; [ OK ] RColumnElementEndian.UInt16 (0 ms); [ RUN ] RColumnElementEndian.Int32; [ OK ] RColumnElementEndian.Int32 (0 ms); [ RUN ] RColumnElementEndian.UInt32; [ OK ] RColumnElementEndian.UInt32 (0 ms); [ RUN ] RColumnElementEndian.Int64; [ OK ] RColumnElementEndian.Int64 (0 ms); [ RUN ] RColumnElementEndian.UInt64; [ OK ] RColumnElementEndian.UInt64 (0 ms); [ RUN ] RColumnElementEndian.Int64Int32; /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/test/ntuple_endian.cxx:286: Failure; Expected equality of these values:; ints[0]; Which is: 1234605615003729920; 0x0000000011223344; Which is: 287454020; /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/test/ntuple_endian.cxx:287: Failure; Expected equality of these",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12426:3588,test,tests,3588,https://root.cern,https://github.com/root-project/root/issues/12426,1,['test'],['tests']
Testability,6.28: [cmake] Disable llvm-assertions for ROOT=RelWithDebInfo:,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12101:27,assert,assertions,27,https://root.cern,https://github.com/root-project/root/pull/12101,1,['assert'],['assertions']
Testability,"6/root-6.28.03/core/clingutils/src/TClingUtils.cxx:581; #33 0x00002b4bd1c8ca31 in ResolveTypedefProcessType (tname=0x438fe30 ""reco::SecondaryVertexTagInfo::TrackData"", cursor=39, constprefix=false, start_of_type=0, end_of_type=0, mod_start_of_type=0, modified=; 0x7ffd951b5feb: true, result=...) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/core/foundation/src/TClassEdit.cxx:1477; #34 0x00002b4bd1c8e68e in ResolveTypedefImpl (tname=0x438fe30 ""reco::SecondaryVertexTagInfo::TrackData"", len=39, cursor=; 0x7ffd951b5fec: 39, modified=; 0x7ffd951b5feb: true, result=...) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/core/foundation/src/TClassEdit.cxx:1741; #35 0x00002b4bd1c8ec12 in TClassEdit::ResolveTypedef[abi:cxx11](char const*, bool) (tname=0x438fe30 ""reco::SecondaryVertexTagInfo::TrackData"") at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/core/foundation/src/TClassEdit.cxx:1775; #36 0x00002b4bd1c885f9 in TClassEdit::TSplitType::ShortType (this=0x7ffd951b61c0, answ=..., mode=3618) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/core/foundation/src/TClassEdit.cxx:442; #37 0x00002b4bd1c89e1b in TClassEdit::GetNormalizedName (norm_name=..., name=...) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/core/foundation/src/TClassEdit.cxx:871; #38 0x00002b4bd1cedb74 in ROOT::TSchemaRule::SetSourceClass (this=0xc24c900, classname=...) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12771:12036,test,tests,12036,https://root.cern,https://github.com/root-project/root/issues/12771,4,['test'],"['testBuildDir', 'tests']"
Testability,"60 ms); [ RUN ] RNTuple.MultipleInFile; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RPageStorageFile.cxx:51 in ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(std::string_view, const ROOT::Experimental::RNTupleWriteOptions&)>: The RNTuple file format will change. Do not store real data with this version of RNTuple!; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RPageStorageFile.cxx:51 in ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(std::string_view, const ROOT::Experimental::RNTupleWriteOptions&)>: The RNTuple file format will change. Do not store real data with this version of RNTuple!; Fatal: nread == nbytes violated at line 1083 of `/builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RMiniFile.cxx'; aborting; [ --- ]; CMake Error at /builddir/build/BUILD/root-6.28.00/cmake/modules/RootTestDriver.cmake:232 (message):; error code: Subprocess aborted; ~~~. #### gtest-tree-ntuple-v7-test-ntuple-endian. Here the bytes are in the right order, but shifted 4 bytes. $ printf '%016x\n%016x\n' 1234605615003729920 287454020; 1122334400000000; 0000000011223344; $ printf '%016x\n%016x\n' 6153737371142586367 1432778632; 55667788ffffffff; 0000000055667788; ~~~; 449/1272 Test #424: gtest-tree-ntuple-v7-test-ntuple-endian .............................***Failed 0.04 sec; Running main() from /builddir/build/BUILD/googletest-1.13.0/googletest/src/gtest_main.cc; Note: Google Test filter = -RCsvDS.Remote:RRawFile.Remote:RSqliteDS.Davix:TFile.ReadWithoutGlobalRegistrationWeb:TFile.ReadWithoutGlobalRegistrationNet:RNTuple.TClassEBO; [==========] Running 9 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 9 tests from RColumnElementEndian; [ RUN ] RColumnElementEndian.Float; [ OK ] RColumnElementEndian.Float (6 ms); [ RUN ] RColumnElementEndian.Double; [ OK ] RColumnElementEndian.Double (3 ms); [ RUN ] RColumnElementEndian.Int16; [ OK ] RColumnEle",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12426:2836,test,test-ntuple-endian,2836,https://root.cern,https://github.com/root-project/root/issues/12426,1,['test'],['test-ntuple-endian']
Testability,"61f170 <(anonymous namespace)::TriggerDictionaryInitialization_test_cpp_ACLiC_dict_Impl()>, fwdDeclsArgToSkip=..., classesHeaders=0x7f54bf622040 <(anonymous namespace)::TriggerDictionaryInitialization_test_cpp_ACLiC_dict_Impl()::classesHeaders>, lateRegistration=false, hasCxxModule=false) at /usr/local/src/conda/root_base-6.25.2/root-source/core/metacling/src/TCling.cxx:2332; #34 0x00007f54c8f4ec13 in TROOT::RegisterModule (modulename=modulename; entry=0x7f54bf6202bc ""test_cpp_ACLiC_dict"", headers=headers; entry=0x7f54bf6220b0 <(anonymous namespace)::TriggerDictionaryInitialization_test_cpp_ACLiC_dict_Impl()::headers>, includePaths=includePaths; entry=0x7f54bf622060 <(anonymous namespace)::TriggerDictionaryInitialization_test_cpp_ACLiC_dict_Impl()::includePaths>, payloadCode=payloadCode; entry=0x7f54bf620000 ""\n#line 1 \""test_cpp_ACLiC_dict dictionary payload\""\n\n#ifndef __ACLIC__\n #define __ACLIC__ 1\n#endif\n\n#define _BACKWARD_BACKWARD_WARNING_H\n// Inline headers\n#include \""./test.cpp\""\n\n#undef _BACKWARD_BACKW""..., fwdDeclCode=fwdDeclCode; entry=0x7f54bf6200d8 ""\n#line 1 \""test_cpp_ACLiC_dict dictionary forward declarations' payload\""\n#pragma clang diagnostic ignored \""-Wkeyword-compat\""\n#pragma clang diagnostic ignored \""-Wignored-attributes\""\n#pragma clang diagno""..., triggerFunc=triggerFunc; entry=0x7f54bf61f170 <(anonymous namespace)::TriggerDictionaryInitialization_test_cpp_ACLiC_dict_Impl()>, fwdDeclsArgToSkip=..., classesHeaders=0x7f54bf622040 <(anonymous namespace)::TriggerDictionaryInitialization_test_cpp_ACLiC_dict_Impl()::classesHeaders>, hasCxxModule=false) at /usr/local/src/conda/root_base-6.25.2/root-source/core/base/src/TROOT.cxx:2558; #35 0x00007f54bf61f24b in (anonymous namespace)::TriggerDictionaryInitialization_test_cpp_ACLiC_dict_Impl () at /scratch2/root-debug2/test_cpp_ACLiC_dict.cxx:88; #36 0x00007f54c9246973 in _dl_init_internal () from /lib64/ld-linux-x86-64.so.2; #37 0x00007f54c924b54e in dl_open_worker () from /lib64/ld-linux-x",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9595:9017,test,test,9017,https://root.cern,https://github.com/root-project/root/issues/9595,1,['test'],['test']
Testability,"621f72422b66/root-6.28.03/core/unix/src/TUnixSystem.cxx:3610; #7 0x00002b4bd1d1f654 in SigHandler (sig=kSigAbort) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/core/unix/src/TUnixSystem.cxx:395; #8 0x00002b4bd1d2763b in sighandler (sig=6) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/core/unix/src/TUnixSystem.cxx:3586; #9 <signal handler called>; #10 0x00002b4bd102eaff in raise () from /lib64/libc.so.6; #11 0x00002b4bd1001ea5 in abort () from /lib64/libc.so.6; #12 0x00002b4bd1001d79 in __assert_fail_base.cold.0 () from /lib64/libc.so.6; #13 0x00002b4bd1027456 in __assert_fail () from /lib64/libc.so.6; #14 0x00002b4bd679065b in getLambdaCallOperatorHelper(clang::CXXRecordDecl const&) [clone .part.0] () from /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/CMSSW_13_2_ROOT628_X_2023-05-04-2300/external/el8_amd64_gcc11/lib/libCling.so; #15 0x00002b4bd67915cb in clang::CXXRecordDecl::getLambdaCallOperator() const () from /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/CMSSW_13_2_ROOT628_X_2023-05-04-2300/external/el8_amd64_gcc11/lib/libCling.so; #16 0x00002b4bd39f6a20 in clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseLambdaExpr(clang::LambdaExpr*, llvm::SmallVectorImpl<llvm::PointerIntPair<clang::Stmt*, 1u, bool, llvm::PointerLikeTypeTraits<clang::Stmt*>, llvm::PointerIntPairInfo<clang::Stmt*, 1u, llvm::PointerLikeTypeTraits<clang::Stmt*> > > >*) () from /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/CMSSW_13_2_ROOT628_X_2023-05-04-2300/external/el8_amd64_gcc11/lib/libCling.so; #17 0x00002b4bd39ef4d5 in clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseStmt(clang::Stmt*, llvm::SmallVectorImpl<llvm::PointerIntPair<clang::Stmt*, 1u, bool, llvm::PointerLi",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12771:4161,test,tests,4161,https://root.cern,https://github.com/root-project/root/issues/12771,1,['test'],['tests']
Testability,"6dfb08bd7 - [IO] Do not process the streamerinfo record of a file if we read the si already read""; which was extended in scope by ""7cf9d5dc8c - fix hashing of streamer info,"". if a file is opened in update mode and the reading of its `StreamerInfo` record is skip (but; an identical record was already read) *and* some data is stored in the file, the new; `StreamerInfo` record written was missing all the classes in the original record that; were not used during the update. To resolve this we record not only the fact that the record has been read and process; but also its content (via a collectin of uid of the `TStreamerInfo` objects).; Upon skipping the `StreamerInfo` record, we now mark of its `TStreamerInfo` objects has; been used by the file (and thus upon writing the record is complete). This behavior was seen #12783 due an awkward 'create, fill, close, update immediately' cycle; for a couple of files.# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes # . Fix #12783. Since ""66dfb08bd7 - [IO] Do not process the streamerinfo record of a file if we read the si already read""; which was extended in scope by ""7cf9d5dc8c - fix hashing of streamer info,"". if a file is opened in update mode and the reading of its `StreamerInfo` record is skip (but; an identical record was already read) *and* some data is stored in the file, the new; `StreamerInfo` record written was missing all the classes in the original record that; were not used during the update. To resolve this we record not only the fact that the record has been read and process; but also its content (via a collectin of uid of the `TStreamerInfo` objects).; Upon skipping the `StreamerInfo` record, we now mark of its `TStreamerInfo` objects has; been used by the file (and thus upon writing the record is complete). This behavior was seen #12783 due an awkward 'create, fill, close, update immediately' cycle; for a couple of files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13842:1002,test,tested,1002,https://root.cern,https://github.com/root-project/root/pull/13842,1,['test'],['tested']
Testability,7/602 Test #11: mathcore-testSampleQuantiles ...............................***Failed 2.24 sec; Test ordered data ....; Testing for type 7 :		.............	 OK !; Testing for type 1 :		.............	 OK !; Testing for type 2 :		.... Failed for prob = 0.3 - R gives 0.85 TMath gives 0.7; .. Failed for prob = 0.6 - R gives 1.65 TMath gives 1.5; Failed for prob = 0.7 - R gives 1.9 TMath gives 1.8; ....; Test Failed for type 2; Testing for type 3 :		.............	 OK !; Testing for type 4 :		.............	 OK !; Testing for type 5 :		.............	 OK !; Testing for type 6 :		.............	 OK !; Testing for type 7 :		.............	 OK !; Testing for type 8 :		.............	 OK !; Testing for type 9 :		.............	 OK !; Test data in random order....; Testing for type 7 :		.............	 OK !; Testing for type 1 :		.............	 OK !; Testing for type 2 :		.... Failed for prob = 0.3 - R gives 0.85 TMath gives 0.7; .. Failed for prob = 0.6 - R gives 1.65 TMath gives 1.5; Failed for prob = 0.7 - R gives 1.9 TMath gives 1.8; ....; Test Failed for type 2; Testing for type 3 :		.............	 OK !; Testing for type 4 :		.............	 OK !; Testing for type 5 :		.............	 OK !; Testing for type 6 :		.............	 OK !; Testing for type 7 :		.............	 OK !; Testing for type 8 :		.............	 OK !; Testing for type 9 :		.............	 OK !; Test sample quantiles FAILED ; CMake Error at /builddir/build/BUILD/root-6.08.04/cmake/modules/RootTestDriver.cmake:196 (message):; error code: 255. The PR implements the same check for type < 4 that is done later in the else clause for type >= 4. So this treats all types the same and the test failure goes away.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/359:6,Test,Test,6,https://root.cern,https://github.com/root-project/root/pull/359,28,"['Test', 'test']","['Test', 'Testing', 'test', 'testSampleQuantiles']"
Testability,"70s /opt/conda/envs/test-root/bin/root -e '#define NDEBUG' -e '#define ClingWorkAroundMissingDynamicScope' -e '#define ClingWorkAroundUnnamedInclude' -e '#define ClingWorkAroundMissingSmartInclude' -e '#define ClingWorkAroundNoDotInclude' -e '#define ClingWorkAroundMissingAutoLoadingForTemplates' -e '#define ClingWorkAroundAutoParseUsingNamespace' -e '#define ClingWorkAroundTClassUpdateDouble32' -e '#define ClingWorkAroundAutoParseDeclaration' -e '#define ClingWorkAroundMissingUnloading' -e '#define ClingWorkAroundBrokenUnnamedReturn' -e '#define ClingWorkAroundUnnamedDetection2' -e 'gSystem->SetBuildDir(""/test_job/roottest_build/cling/array"",true)' -e 'gSystem->AddDynamicPath(""/test_job/roottest_build/cling/array"")' -e 'gROOT->SetMacroPath(""/test_job/roottest/cling/array"")' -e 'gInterpreter->AddIncludePath(""-I/test_job/roottest_build/cling/array"")' -e 'gSystem->AddIncludePath(""-I/test_job/roottest_build/cling/array"")' -q -l -b /test_job/roottest/cling/array/runarray1test.C; -- BEGIN TEST OUTPUT --. ROOT_cli_0:1:9: warning: 'NDEBUG' macro redefined [-Wmacro-redefined]; #define NDEBUG; ^; <command line>:1:9: note: previous definition is here; #define NDEBUG 1; ^; ```. ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->. To reproduce it's sufficient to compile ROOT with `-DCMAKE_BUILD_TYPE=Release -Droottest=OFF` and then compile roottest separately against this build of ROOT. . ### Additional context; <!--; Add any other context about the problem here.; -->. As far as I understand, that ` -e '#define NDEBUG'` in the invocation of `root.exe` used by roottest was not there before, and it's what's causing the issue. roottest takes the `-e '#define ...'` arguments from cmake's `COMPILE_DEFINITIONS` (a quick `git grep COMPILE_DEFINITIONS` in the r",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6575:1437,TEST,TEST,1437,https://root.cern,https://github.com/root-project/root/issues/6575,1,['TEST'],['TEST']
Testability,"7844901/147636210-34c8102b-8380-4b92-828d-097a6af7829d.png). C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(155,5): error MSB3073: The command ""setlocal [F:\gitP\root-project\root\build_amd64\tmva\pymva\test\SofieCompileModels_PyTorch.vcxproj]; C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(155,5): error MSB3073: .\emitFromPyTorch [F:\gitP\root-project\root\build_amd64\tmva\pymva\test\SofieCompileModels_PyTorch.vcxproj]; C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(155,5): error MSB3073: if %errorlevel% neq 0 goto :cmEnd [F:\gitP\root-project\root\build_amd64\tmva\pymva\test\SofieCompileModels_PyTorch.vcxproj]; C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(155,5): error MSB3073: :cmEnd [F:\gitP\root-project\root\build_amd64\tmva\pymva\test\SofieCompileModels_PyTorch.vcxproj]; C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(155,5): error MSB3073: endlocal & call :cmErrorLevel %errorlevel% & goto :cmDone [F:\gitP\root-project\root\build_amd64\tmva\pymva\test\SofieCompileModels_PyTorch.vcxproj]; C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(155,5): error MSB3073: :cmErrorLevel [F:\gitP\root-project\root\build_amd64\tmva\pymva\test\SofieCompileModels_PyTorch.vcxproj]; C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(155,5): error MSB3073: exit /b %1 [F:\gitP\root-project\root\build_amd64\tmva\pymva\test\SofieCompileModels_PyTorch.vcxproj]; C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(155,5): error MSB3073: :cmDone [F:",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9487:1704,test,test,1704,https://root.cern,https://github.com/root-project/root/issues/9487,1,['test'],['test']
Testability,"8) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/core/foundation/src/TClassEdit.cxx:442; #37 0x00002b4bd1c89e1b in TClassEdit::GetNormalizedName (norm_name=..., name=...) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/core/foundation/src/TClassEdit.cxx:871; #38 0x00002b4bd1cedb74 in ROOT::TSchemaRule::SetSourceClass (this=0xc24c900, classname=...) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/core/meta/src/TSchemaRule.cxx:459; #39 0x00002b4bd1cd28b8 in ROOT::TGenericClassInfo::CreateRuleSet (this=0x2b4bf40eb840 <ROOT::GenerateInitInstanceLocal(reco::btag::TrackData const*)::instance>, vect=..., ProcessReadRules=true) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/core/meta/src/TGenericClassInfo.cxx:319; #40 0x00002b4bd1cd26bd in ROOT::TGenericClassInfo::GetClass (this=0x2b4bf40eb840 <ROOT::GenerateInitInstanceLocal(reco::btag::TrackData const*)::instance>) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/core/meta/src/TGenericClassInfo.cxx:286; #41 0x00002b4bd1cac20b in TClass::GetClass (name=0xc24d320 ""reco::btag::TrackData"", load=true, silent=false, hint_pair_offset=0, hint_pair_size=0) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/core/meta/src/TClass.cxx:3039; #42 0x00002b4bd1cabf33 in TClass::GetClass (name=0xc24d320 ""reco::btag::TrackData"", load=true, silent=false) at /pool/condor/dir_43945/jenkins/workspac",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12771:13295,test,tests,13295,https://root.cern,https://github.com/root-project/root/issues/12771,4,['test'],"['testBuildDir', 'tests']"
Testability,82: gtest-tree-dataframe-test-dataframe-leaves .......................... Passed 2.14 sec; Start 385: gtest-tree-dataframe-test-dataframe-entrylist; 408/1231 Test #385: gtest-tree-dataframe-test-dataframe-entrylist ....................... Passed 0.90 sec; Start 386: gtest-tree-dataframe-test-dataframe-merge-results; 409/1231 Test #386: gtest-tree-dataframe-test-dataframe-merge-results ................... Passed 0.54 sec; Start 387: gtest-tree-dataframe-test-dataframe-samplecallback; 410/1231 Test #384: gtest-tree-dataframe-test-dataframe-take ............................ Passed 2.19 sec; Start 388: gtest-tree-dataframe-test-dataframe-vary; 411/1231 Test #387: gtest-tree-dataframe-test-dataframe-samplecallback .................. Passed 1.09 sec; Start 389: gtest-tree-dataframe-test-datasource-more; 412/1231 Test #380: gtest-tree-dataframe-test-dataframe-display ......................... Passed 10.54 sec; Start 390: gtest-tree-dataframe-test-datasource-root; Start 391: gtest-tree-dataframe-test-datasource-trivial; 414/1231 Test #390: gtest-tree-dataframe-test-datasource-root ........................... Passed 4.54 sec; Start 392: gtest-tree-dataframe-test-datasource-lazy; 415/1231 Test #392: gtest-tree-dataframe-test-datasource-lazy ........................... Passed 0.28 sec; Start 393: gtest-tree-dataframe-test-datasource-csv; 416/1231 Test #388: gtest-tree-dataframe-test-dataframe-vary ............................ Passed 6.93 sec; Start 394: gtest-tree-dataframe-test-dataframe-concurrency; 417/1231 Test #379: gtest-tree-dataframe-test-dataframe-snapshot ........................ Passed 20.68 sec; Start 395: gtest-tree-dataframe-test-datasource-ntuple; 418/1231 Test #389: gtest-tree-dataframe-test-datasource-more ........................... Passed 7.48 sec; Start 396: gtest-tree-dataframe-test-datasource-sqlite; 419/1231 Test #395: gtest-tree-dataframe-test-datasource-ntuple ......................... Passed 1.80 sec; Start 397: pyunittests-dataframe-misc; 420/1231 Te,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10300:4638,test,test-datasource-root,4638,https://root.cern,https://github.com/root-project/root/pull/10300,4,"['Test', 'test']","['Test', 'test-datasource-root', 'test-datasource-trivial']"
Testability,"8510). The inital check for the compiler was. enable_language(Fortran OPTIONAL). This does not set the the CMAKE_Fortran_COMPILER variable (or sets it to; NOTFOUND) if a Fortran compiler is not found, but still marks the; Fortran language as being enabled for the current project. This broke; the settings for BLAS/LAPACK. The second attempt (bb40ede3941d0b4f2db4e23d5f9c32b221eb5fac) was to use. check_language(Fortran); if(CMAKE_Fortran_COMPILER); enable_language(Fortran); endif(). This does not find the Fortran compiler corresponding to the used C++; compiler. Cmake has some mechanism that if the C++ compiler is a GNU; compiler, it would also prefer GNU Fortran compilers. However, as the; check_language test is running in a separate process it would not know; about the C++ compiler. This is a problem in a set-up with executables; like:. /opt/newgcc/g++; /opt/newgcc/gfortran; /usr/bin/f95 (link to gfortran); /usr/bin/g++; /usr/bin/gfortran. Two versions of GCC are installed, one by the system, and one more; recent version in a separate directory. The directory to the newer; version is in the environment variable PATH before /usr/bin. In this; case the test from above (second attempt) would use /usr/bin/f95 as the; Fortran compiler, because Cmake usually prefers the executable f95 over; gfortran. This causes problems in case the two Fortran compilers are not; ABI compatible, i.e., gfortran 4.4 installed by the system vs. 4.9 as a; slightly more recent version. A simple enable_language (as in the; initial version) would correctly use /opt/newgcc/gfortran in this case.; This had to be worked around by setting the environment variable; FC=gfortran before running Cmake. To fix this, check_language is only used to determine whether a Fortran; compiler exists at all. If a compiler is found, then the; CMAKE_Fortran_COMPILER variable is reset, and enable_language again; performs a search of the compiler, this time prefering a compiler from; the same vendor as the C++ compiler.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/891:1579,test,test,1579,https://root.cern,https://github.com/root-project/root/pull/891,1,['test'],['test']
Testability,"8; 27: Taking false branch in /opt/root_src/io/io/src/TStreamerInfo.cxx:918; 28: Assuming the condition is true in /opt/root_src/io/io/src/TStreamerInfo.cxx:921; 29: Left side of '&&' is true in /opt/root_src/io/io/src/TStreamerInfo.cxx:921; 30: Assuming the condition is true in /opt/root_src/io/io/src/TStreamerInfo.cxx:921; 31: Left side of '||' is true in /opt/root_src/io/io/src/TStreamerInfo.cxx:921; 32: Execution continues on line 929 in /opt/root_src/io/io/src/TStreamerInfo.cxx:925; 33: 'info' is not equal to null in /opt/root_src/io/io/src/TStreamerInfo.cxx:929; 34: Taking false branch in /opt/root_src/io/io/src/TStreamerInfo.cxx:929; 35: 'info' is non-null in /opt/root_src/io/io/src/TStreamerInfo.cxx:945; 36: Taking true branch in /opt/root_src/io/io/src/TStreamerInfo.cxx:945; 37: Field 'fClassVersion' is not equal to 0 in /opt/root_src/io/io/src/TStreamerInfo.cxx:950; 38: Left side of '&&' is true in /opt/root_src/io/io/src/TStreamerInfo.cxx:950; 39: Calling 'TObject::TestBit' in /opt/root_src/io/io/src/TStreamerInfo.cxx:950; 40: Assuming the condition is false in /opt/root_src/core/base/inc/TObject.h:187; 41: Returning zero, which participates in a condition later in /opt/root_src/core/base/inc/TObject.h:187; 42: Returning from 'TObject::TestBit' in /opt/root_src/io/io/src/TStreamerInfo.cxx:950; 43: Left side of '&&' is true in /opt/root_src/io/io/src/TStreamerInfo.cxx:950; 44: Assuming the condition is true in /opt/root_src/io/io/src/TStreamerInfo.cxx:950; 45: Left side of '&&' is true in /opt/root_src/io/io/src/TStreamerInfo.cxx:950; 46: Assuming the condition is true in /opt/root_src/io/io/src/TStreamerInfo.cxx:950; 47: Taking true branch in /opt/root_src/io/io/src/TStreamerInfo.cxx:950; 48: Assuming field 'fOnFileClassVersion' is not equal to 1 in /opt/root_src/io/io/src/TStreamerInfo.cxx:954; 49: Left side of '&&' is false in /opt/root_src/io/io/src/TStreamerInfo.cxx:954; 50: Assuming the condition is true in /opt/root_src/io/io/src/TStreamerInfo.cxx:95",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7431:98750,Test,TestBit,98750,https://root.cern,https://github.com/root-project/root/issues/7431,1,['Test'],['TestBit']
Testability,9 sec; 151/1231 Test #54: pyunittests-pyroot-pyz-rdataframe-asnumpy ........................... Passed 23.56 sec; Start 363: gtest-tree-dataframe-test-dataframe-friends; Start 364: gtest-tree-dataframe-test-dataframe-colnames; Start 365: gtest-tree-dataframe-test-dataframe-cache; 388/1231 Test #364: gtest-tree-dataframe-test-dataframe-colnames ........................ Passed 4.40 sec; Start 366: gtest-tree-dataframe-test-dataframe-callbacks; 389/1231 Test #363: gtest-tree-dataframe-test-dataframe-friends ......................... Passed 10.87 sec; Start 367: gtest-tree-dataframe-test-dataframe-histomodels; 390/1231 Test #366: gtest-tree-dataframe-test-dataframe-callbacks ....................... Passed 8.60 sec; Start 368: gtest-tree-dataframe-test-dataframe-interface; Start 369: gtest-tree-dataframe-test-dataframe-nodes; 392/1231 Test #369: gtest-tree-dataframe-test-dataframe-nodes ........................... Passed 2.13 sec; Start 370: gtest-tree-dataframe-test-dataframe-regression; 393/1231 Test #367: gtest-tree-dataframe-test-dataframe-histomodels ..................... Passed 19.30 sec; Start 371: gtest-tree-dataframe-test-dataframe-utils; 394/1231 Test #371: gtest-tree-dataframe-test-dataframe-utils ........................... Passed 1.38 sec; Start 372: gtest-tree-dataframe-test-dataframe-report; 395/1231 Test #370: gtest-tree-dataframe-test-dataframe-regression ...................... Passed 12.11 sec; Start 373: gtest-tree-dataframe-test-dataframe-splitcoll-arrayview; 396/1231 Test #372: gtest-tree-dataframe-test-dataframe-report .......................... Passed 0.79 sec; Start 374: gtest-tree-dataframe-test-dataframe-redefine; 397/1231 Test #373: gtest-tree-dataframe-test-dataframe-splitcoll-arrayview ............. Passed 1.07 sec; Start 375: gtest-tree-dataframe-test-dataframe-definepersample; 398/1231 Test #374: gtest-tree-dataframe-test-dataframe-redefine ........................ Passed 3.63 sec; Start 376: gtest-tree-dataframe-test-dataframe-simple; 399/,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10300:1456,test,test-dataframe-regression,1456,https://root.cern,https://github.com/root-project/root/pull/10300,3,"['Test', 'test']","['Test', 'test-dataframe-histomodels', 'test-dataframe-regression']"
Testability,"90 is 64 bytes inside a block of size 72 alloc'd; operator new[](unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_helgrind-amd64-linux.so); TStorage::ReAlloc(void*, unsigned long, unsigned long) (TStorage.cxx:238); TOrdCollection::SetCapacity(int) (TOrdCollection.cxx:387); TOrdCollection::AddAt(TObject*, int) (TOrdCollection.cxx:66); TOrdCollection::AddLast(TObject*) (TOrdCollection.cxx:102); TSeqCollection::Add(TObject*) (TSeqCollection.h:38); TSystem::AddTimer(TTimer*) (TSystem.cxx:476); TUnixSystem::AddTimer(TTimer*) (TUnixSystem.cxx:2974); TTimer::TurnOn() (TTimer.cxx:247); TGCommandPlugin::TGCommandPlugin(TGWindow const*, unsigned int, unsigned int) (TGCommandPlugin.cxx:110); MainWindow::MainWindow(TGWindow const*, unsigned int, unsigned int, PulseSurfer*, unsigned int, unsigned int, bool) (MainWindow.cpp:616); main (main.cxx:86); ```. and several more can be seen in helgrind.log in the forum post, or in helgrind.xml attached here. [helgrind.xml.zip](https://github.com/root-project/root/files/6612569/helgrind.xml.zip). When opening the XML with QtCreator, they are rendered nicely:; ![image](https://user-images.githubusercontent.com/10653970/121102408-7e870b00-c7cb-11eb-8436-816dd434bdf3.png). ### Expected behavior; No data races are found. Or they are added to helgrind-root.supp. ### To Reproduce; 0. cd /opt/ && git clone https://github.com/CLIUtils/CLI11; 1. Download https://root-forum.cern.ch/uploads/short-url/z59x8uBIVMEE5S46EWUUHyyO3df.zip and unzip it, cd into it; 2. mkdir build && cd build; 3. cmake -DROOT_DIR=/build-debug-mode-ROOT -DCMAKE_BUILD_TYPE=Debug ../; 4. make; 5. valgrind --xml=yes --xml-file=helgrind.xml --tool=helgrind --suppressions=/pathtoDebugROOT/etc/helgrind-root.supp --log-file=helgrind.log gui/runGUI --prbs 3 -q. ### Setup; 1. ROOT master; 2. Ubuntu 18; 3. Self-built. ### Additional context; https://root-forum.cern.ch/t/trentrantrwlock-thread-lock-program-freezes/45116/14; https://github.com/root-project/root/issues/8297",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8365:6192,log,log-file,6192,https://root.cern,https://github.com/root-project/root/issues/8365,2,['log'],"['log', 'log-file']"
Testability,"945/jenkins/workspace/ib-run-pr-tests/CMSSW_13_2_ROOT628_X_2023-05-04-2300/external/el8_amd64_gcc11/lib/libCling.so; #26 0x00002b4bd3a2b9b9 in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/CMSSW_13_2_ROOT628_X_2023-05-04-2300/external/el8_amd64_gcc11/lib/libCling.so; #27 0x00002b4bd39a1b64 in cling::Interpreter::parseForModule(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) () from /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/CMSSW_13_2_ROOT628_X_2023-05-04-2300/external/el8_amd64_gcc11/lib/libCling.so; #28 0x00002b4bd37824e9 in ExecAutoParse (what=0x2b4bf4038162 ""n#line 1 ""DataFormatsBTauReco_xr dictionary payload""nn#ifndef CMS_DICT_IMPLn #define CMS_DICT_IMPL 1n#endifn#ifndef _REENTRANTn #define _REENTRANT 1n#endifn#ifndef GNUSOURCEn #define GNUSOURCE 1n#e""..., header=false, interpreter=0x681b00) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/core/metacling/src/TCling.cxx:6318; #29 0x00002b4bd3782d71 in TCling::AutoParseImplRecurse (this=0x5628c0, cls=0xc1cf750 ""reco::TemplatedSecondaryVertexTagInfo<reco::IPTagInfo<edm::RefVector<vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<vector<reco::Track>,reco::Track> >,reco::JTATagInfo>,reco::Vertex>""..., topLevel=true) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/core/metacling/src/TCling.cxx:6423; #30 0x00002b4bd37833f1 in TCling::AutoParse (this=0x5628c0, cls=0xc1cf750 ""reco::TemplatedSecondaryVertexTagInfo<reco::IPTagInfo<edm::RefVector<vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<vector<reco::Track>,reco::Track> >,reco::JTATagInfo>,reco::Vertex>""...) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-test",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12771:20977,test,tests,20977,https://root.cern,https://github.com/root-project/root/issues/12771,2,['test'],"['testBuildDir', 'tests']"
Testability,"9_UL2018-v1/260000/0F90F012-3C97-344E-8E2F-F459A798FA74.root""); at /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/slc7_amd64_gcc900/lcg/root/6.22.08-1fec05f50351c1988c4bf604c7ec21c3/root-6.22.08/core/unix/src/TUnixSystem.cxx:1605; #7 0x00007ffff6e1fd33 in TFile::GetType (; name=0x7fffb0d42060 ""root://eoscms.cern.ch//eos/cms/store/data/Run2018A/ZeroBias/ALCARECO/SiStripCalMinBias-12Nov2019_UL2018-v1/260000/0F90F012-3C97-344E-8E2F-F459A798FA74.root"", option=0x7fffffff15b9 """", prefix=0x7fffffff1460); at /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/slc7_amd64_gcc900/lcg/root/6.22.08-1fec05f50351c1988c4bf604c7ec21c3/root-6.22.08/io/io/src/TFile.cxx:4685; #8 0x00007ffff6e1db61 in TFile::Open (; url=0x7fffb0d418e0 ""root://eoscms.cern.ch//eos/cms/store/data/Run2018A/ZeroBias/ALCARECO/SiStripCalMinBias-12Nov2019_UL2018-v1/260000/0F90F012-3C97-344E-8E2F-F459A798FA74.root"", options=0x7fffac8d86f9 """", ftitle=0x7fffac8d86f9 """", compress=101, netopt=0); at /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/slc7_amd64_gcc900/lcg/root/6.22.08-1fec05f50351c1988c4bf604c7ec21c3/root-6.22.08/io/io/src/TFile.cxx:4065; #9 0x00007fffac890f2d in edm::InputFile::InputFile(char const*, char const*, edm::InputType) (); from /build/mrodozov/xrootd/local_install/CMSSW_12_0_X_2021-04-26-1100/lib/slc7_amd64_gcc900/pluginIOPoolInput.so; #10 0x00007fffac8cd35d in edm::RootInputFileSequence::initTheFile(bool, bool, edm::InputSource*, char const*, edm::InputType) (); from /build/mrodozov/xrootd/local_install/CMSSW_12_0_X_2021-04-26-1100/lib/slc7_amd64_gcc900/pluginIOPoolInput.so; #11 0x00007fffac8d037c in edm::RootPrimaryFileSequence::RootPrimaryFileSequence(edm::ParameterSet const&, edm::PoolSource&, edm::InputFileCatalog const&) (); from /build/mrodozov/xrootd/local_install/CMSSW_12_0_X_2021-04-26-1100/lib/slc7_amd64_gcc900/pluginIOPoolInput.so; --Type <RET> for more, q to quit, c to continue without paging--; #12 0x00007fffac895320 in edm::Pool",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8008:3981,test,tests,3981,https://root.cern,https://github.com/root-project/root/issues/8008,2,['test'],"['testBuildDir', 'tests']"
Testability,": 'info' is non-null in /opt/root_src/tree/tree/src/TBranchElement.cxx:4553; 17: Taking false branch in /opt/root_src/tree/tree/src/TBranchElement.cxx:4553; 18: Passing the value 0 via 2nd parameter 'len' in /opt/root_src/tree/tree/src/TBranchElement.cxx:4561; 19: Calling 'TBranchElement::GetValue' in /opt/root_src/tree/tree/src/TBranchElement.cxx:4561; 20: Passing the value 0 via 2nd parameter 'len' in /opt/root_src/tree/tree/inc/TBranchElement.h:207; 21: Calling 'TBranchElement::GetTypedValue' in /opt/root_src/tree/tree/inc/TBranchElement.h:207; 22: Taking false branch in /opt/root_src/tree/tree/src/TBranchElement.cxx:2889; 23: 'j' is 0 in /opt/root_src/tree/tree/src/TBranchElement.cxx:2897; 24: Left side of '&&' is true in /opt/root_src/tree/tree/src/TBranchElement.cxx:2897; 25: Assuming field 'fBranchCount' is null in /opt/root_src/tree/tree/src/TBranchElement.cxx:2897; 26: Taking false branch in /opt/root_src/tree/tree/src/TBranchElement.cxx:2897; 27: Calling 'TObject::TestBit' in /opt/root_src/tree/tree/src/TBranchElement.cxx:2909; 28: Assuming the condition is false in /opt/root_src/core/base/inc/TObject.h:187; 29: Returning zero, which participates in a condition later in /opt/root_src/core/base/inc/TObject.h:187; 30: Returning from 'TObject::TestBit' in /opt/root_src/tree/tree/src/TBranchElement.cxx:2909; 31: Taking false branch in /opt/root_src/tree/tree/src/TBranchElement.cxx:2909; 32: 'object' is not equal to null in /opt/root_src/tree/tree/src/TBranchElement.cxx:2935; 33: Taking false branch in /opt/root_src/tree/tree/src/TBranchElement.cxx:2935; 34: Assuming field 'fType' is equal to 31 in /opt/root_src/tree/tree/src/TBranchElement.cxx:2942; 35: Taking true branch in /opt/root_src/tree/tree/src/TBranchElement.cxx:2942; 36: 'subarr' is false in /opt/root_src/tree/tree/src/TBranchElement.cxx:2944; 37: Taking false branch in /opt/root_src/tree/tree/src/TBranchElement.cxx:2944; 38: Division by zero in /opt/root_src/tree/tree/src/TBranchElement.cxx:2947; /op",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7429:31290,Test,TestBit,31290,https://root.cern,https://github.com/root-project/root/issues/7429,1,['Test'],['TestBit']
Testability,": 'info' is non-null in /opt/root_src/tree/tree/src/TBranchElement.cxx:4553; 17: Taking false branch in /opt/root_src/tree/tree/src/TBranchElement.cxx:4553; 18: Passing the value 0 via 2nd parameter 'len' in /opt/root_src/tree/tree/src/TBranchElement.cxx:4561; 19: Calling 'TBranchElement::GetValue' in /opt/root_src/tree/tree/src/TBranchElement.cxx:4561; 20: Passing the value 0 via 2nd parameter 'len' in /opt/root_src/tree/tree/inc/TBranchElement.h:207; 21: Calling 'TBranchElement::GetTypedValue' in /opt/root_src/tree/tree/inc/TBranchElement.h:207; 22: Taking false branch in /opt/root_src/tree/tree/src/TBranchElement.cxx:2889; 23: 'j' is 0 in /opt/root_src/tree/tree/src/TBranchElement.cxx:2897; 24: Left side of '&&' is true in /opt/root_src/tree/tree/src/TBranchElement.cxx:2897; 25: Assuming field 'fBranchCount' is null in /opt/root_src/tree/tree/src/TBranchElement.cxx:2897; 26: Taking false branch in /opt/root_src/tree/tree/src/TBranchElement.cxx:2897; 27: Calling 'TObject::TestBit' in /opt/root_src/tree/tree/src/TBranchElement.cxx:2909; 28: Assuming the condition is false in /opt/root_src/core/base/inc/TObject.h:187; 29: Returning zero, which participates in a condition later in /opt/root_src/core/base/inc/TObject.h:187; 30: Returning from 'TObject::TestBit' in /opt/root_src/tree/tree/src/TBranchElement.cxx:2909; 31: Taking false branch in /opt/root_src/tree/tree/src/TBranchElement.cxx:2909; 32: 'object' is not equal to null in /opt/root_src/tree/tree/src/TBranchElement.cxx:2935; 33: Taking false branch in /opt/root_src/tree/tree/src/TBranchElement.cxx:2935; 34: Assuming field 'fType' is not equal to 31 in /opt/root_src/tree/tree/src/TBranchElement.cxx:2942; 35: Taking false branch in /opt/root_src/tree/tree/src/TBranchElement.cxx:2942; 36: Assuming field 'fType' is equal to 41 in /opt/root_src/tree/tree/src/TBranchElement.cxx:2948; 37: Taking true branch in /opt/root_src/tree/tree/src/TBranchElement.cxx:2948; 38: Assuming field 'fSplitLevel' is < kSplitCollectionOf",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7429:34768,Test,TestBit,34768,https://root.cern,https://github.com/root-project/root/issues/7429,1,['Test'],['TestBit']
Testability,": 'info' is non-null in /opt/root_src/tree/tree/src/TBranchElement.cxx:4553; 17: Taking false branch in /opt/root_src/tree/tree/src/TBranchElement.cxx:4553; 18: Passing the value 0 via 2nd parameter 'len' in /opt/root_src/tree/tree/src/TBranchElement.cxx:4561; 19: Calling 'TBranchElement::GetValue' in /opt/root_src/tree/tree/src/TBranchElement.cxx:4561; 20: Passing the value 0 via 2nd parameter 'len' in /opt/root_src/tree/tree/inc/TBranchElement.h:207; 21: Calling 'TBranchElement::GetTypedValue' in /opt/root_src/tree/tree/inc/TBranchElement.h:207; 22: Taking false branch in /opt/root_src/tree/tree/src/TBranchElement.cxx:2889; 23: 'j' is 0 in /opt/root_src/tree/tree/src/TBranchElement.cxx:2897; 24: Left side of '&&' is true in /opt/root_src/tree/tree/src/TBranchElement.cxx:2897; 25: Assuming field 'fBranchCount' is null in /opt/root_src/tree/tree/src/TBranchElement.cxx:2897; 26: Taking false branch in /opt/root_src/tree/tree/src/TBranchElement.cxx:2897; 27: Calling 'TObject::TestBit' in /opt/root_src/tree/tree/src/TBranchElement.cxx:2909; 28: Assuming the condition is false in /opt/root_src/core/base/inc/TObject.h:187; 29: Returning zero, which participates in a condition later in /opt/root_src/core/base/inc/TObject.h:187; 30: Returning from 'TObject::TestBit' in /opt/root_src/tree/tree/src/TBranchElement.cxx:2909; 31: Taking false branch in /opt/root_src/tree/tree/src/TBranchElement.cxx:2909; 32: 'object' is not equal to null in /opt/root_src/tree/tree/src/TBranchElement.cxx:2935; 33: Taking false branch in /opt/root_src/tree/tree/src/TBranchElement.cxx:2935; 34: Assuming field 'fType' is not equal to 31 in /opt/root_src/tree/tree/src/TBranchElement.cxx:2942; 35: Taking false branch in /opt/root_src/tree/tree/src/TBranchElement.cxx:2942; 36: Assuming field 'fType' is equal to 41 in /opt/root_src/tree/tree/src/TBranchElement.cxx:2948; 37: Taking true branch in /opt/root_src/tree/tree/src/TBranchElement.cxx:2948; 38: Assuming field 'fSplitLevel' is >= kSplitCollectionO",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7429:38628,Test,TestBit,38628,https://root.cern,https://github.com/root-project/root/issues/7429,1,['Test'],['TestBit']
Testability,": Called C++ object pointer is null [clang-analyzer-core.CallAndMessage]; 1: Assuming 'newmat' is non-null in /opt/root_src/geom/geom/src/TGeoPhysicalNode.cxx:135; 2: Left side of '&&' is false in /opt/root_src/geom/geom/src/TGeoPhysicalNode.cxx:135; 3: Assuming the condition is false in /opt/root_src/geom/geom/src/TGeoPhysicalNode.cxx:136; 4: Taking false branch in /opt/root_src/geom/geom/src/TGeoPhysicalNode.cxx:136; 5: Assuming 'newmat' is not equal to 'gGeoIdentity' in /opt/root_src/geom/geom/src/TGeoPhysicalNode.cxx:140; 6: Taking false branch in /opt/root_src/geom/geom/src/TGeoPhysicalNode.cxx:140; 7: Calling 'TGeoNode::IsOffset' in /opt/root_src/geom/geom/src/TGeoPhysicalNode.cxx:145; 8: Calling 'TObject::TestBit' in /opt/root_src/geom/geom/inc/TGeoNode.h:103; 9: Assuming the condition is false in /opt/root_src/core/base/inc/TObject.h:187; 10: Returning zero, which participates in a condition later in /opt/root_src/core/base/inc/TObject.h:187; 11: Returning from 'TObject::TestBit' in /opt/root_src/geom/geom/inc/TGeoNode.h:103; 12: Returning zero, which participates in a condition later in /opt/root_src/geom/geom/inc/TGeoNode.h:103; 13: Returning from 'TGeoNode::IsOffset' in /opt/root_src/geom/geom/src/TGeoPhysicalNode.cxx:145; 14: Taking false branch in /opt/root_src/geom/geom/src/TGeoPhysicalNode.cxx:145; 15: 'nnode' initialized to a null pointer value in /opt/root_src/geom/geom/src/TGeoPhysicalNode.cxx:151; 16: Calling 'TGeoPhysicalNode::IsAligned' in /opt/root_src/geom/geom/src/TGeoPhysicalNode.cxx:155; 17: Calling 'TObject::TestBit' in /opt/root_src/geom/geom/inc/TGeoPhysicalNode.h:77; 18: Assuming the condition is false in /opt/root_src/core/base/inc/TObject.h:187; 19: Returning zero, which participates in a condition later in /opt/root_src/core/base/inc/TObject.h:187; 20: Returning from 'TObject::TestBit' in /opt/root_src/geom/geom/inc/TGeoPhysicalNode.h:77; 21: Returning zero, which participates in a condition later in /opt/root_src/geom/geom/inc/TGeoPh",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7428:58079,Test,TestBit,58079,https://root.cern,https://github.com/root-project/root/issues/7428,1,['Test'],['TestBit']
Testability,": UnknownInlinedFun (main.c:360); ==2728568== by 0x4B1B291: UnknownInlinedFun (main.c:379); ==2728568== by 0x4B1B291: UnknownInlinedFun (main.c:629); ==2728568== by 0x4B1B291: Py_RunMain (main.c:709); ==2728568== by 0x4AD100B: Py_BytesMain (main.c:763); ==2728568== by 0x4EE3149: (below main) (libc_start_call_main.h:58); ==2728568== Address 0x1d0d4290 is 0 bytes inside a block of size 1 alloc'd; ==2728568== at 0x4842F95: operator new(unsigned long) (vg_replace_malloc.c:483); ==2728568== by 0x3735A021: ???; ==2728568== by 0x13803C9D: WrapperCall(long, unsigned long, void*, void*, void*) (clingwrapper.cxx:802); ==2728568== by 0x138042CD: Cppyy::CallConstructor(long, unsigned long, unsigned long, void*) (clingwrapper.cxx:895); ==2728568== by 0x317DEB68: GILCallConstructor(long, unsigned long, CPyCppyy::CallContext*) (Executors.cxx:99); ==2728568== by 0x317E2622: CPyCppyy::(anonymous namespace)::ConstructorExecutor::Execute(long, void*, CPyCppyy::CallContext*) (Executors.cxx:767); ==2728568== by 0x317BBCB5: CPyCppyy::CPPMethod::ExecuteFast(void*, long, CPyCppyy::CallContext*) (CPPMethod.cxx:123); ==2728568== by 0x317BC401: CPyCppyy::CPPMethod::ExecuteProtected(void*, long, CPyCppyy::CallContext*) (CPPMethod.cxx:203); ==2728568== by 0x317BB389: CPyCppyy::CPPMethod::Execute(void*, long, CPyCppyy::CallContext*) (CPPMethod.cxx:956); ==2728568== by 0x317A99C7: CPyCppyy::CPPConstructor::Call(CPyCppyy::CPPInstance*&, _object* const*, unsigned long, _object*, CPyCppyy::CallContext*) (CPPConstructor.cxx:133); ```. See also the before/after valgrind log for the first commit. * [simple_class_before.log](https://github.com/user-attachments/files/16178619/simple_class_before.log); * [simple_class_after.log](https://github.com/user-attachments/files/16178617/simple_class_after.log). While backporting the changes in the first commit I noticed the changes of the second commit and since they are thematically related and very close to the same function I thought to backport those as well.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16014:2736,log,log,2736,https://root.cern,https://github.com/root-project/root/pull/16014,5,['log'],['log']
Testability,": test_memoryLayout (rtensor.AsRTensor.test_memoryLayout); Test adoption of the memory layout; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""/builddir/build/BUILD/root-6.28.00/bindings/pyroot/pythonizations/test/rtensor.py"", line 42, in test_memoryLayout; self.assertEqual(root_obj.GetMemoryLayout(), 1); AssertionError: 16777216 != 1; ======================================================================; FAIL: test_reshape (rtensor.NumpyCompliance.test_reshape); Test np.reshape vs RTensor::Reshape; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""/builddir/build/BUILD/root-6.28.00/bindings/pyroot/pythonizations/test/rtensor.py"", line 218, in test_reshape; self.assertEqual(x.GetMemoryLayout(), 1); AssertionError: 16777216 != 1; ======================================================================; FAIL: test_transpose (rtensor.NumpyCompliance.test_transpose); Test np.transpose vs RTensor::Transpose; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""/builddir/build/BUILD/root-6.28.00/bindings/pyroot/pythonizations/test/rtensor.py"", line 151, in test_transpose; self.assertEqual(x.GetMemoryLayout(), 1); AssertionError: 16777216 != 1; ----------------------------------------------------------------------; Ran 11 tests in 2.036s; FAILED (failures=3); CMake Error at /builddir/build/BUILD/root-6.28.00/cmake/modules/RootTestDriver.cmake:232 (message):; error code: 1; ~~~. #### pyunittests-pyroot-pyz-stl-vector; ~~~; 61/1272 Test #18: pyunittests-pyroot-pyz-stl-vector ...................................***Failed 0.84 sec; test_vec_char_data (stl_vector.STL_vector.test_vec_char_data); Test that calling std::vector<char>::data() returns a Python string ... FAIL; test_vec_const_char_p (stl_vector.STL_vector.test_vec_const_char_p); Test that creating a std::vector<const char*> does not ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12429:2851,Test,Test,2851,https://root.cern,https://github.com/root-project/root/issues/12429,1,['Test'],['Test']
Testability,":. You might have heard that we’ve integrated LGTM’s underlying CodeQL analysis engine natively into GitHub. The result is [**GitHub code scanning**](https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning)!. With LGTM fully integrated into code scanning, we are focused on improving CodeQL within the native GitHub code scanning experience. In order to take advantage of current and future improvements to our analysis capabilities, we suggest you enable code scanning on your repository. Please take a look at our [blog post for more information](https://github.blog/2022-08-15-the-next-step-for-lgtm-com-github-code-scanning/). This pull request enables code scanning by adding an auto-generated [`codeql.yml` workflow file for GitHub Actions](https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/setting-up-code-scanning-for-a-repository#setting-up-code-scanning-manually) to your repository — take a look! We tested it before opening this pull request, so all should be working :heavy_check_mark:. In fact, you might already have seen some alerts appear on this pull request!. Where needed and if possible, we’ve adjusted the configuration to the needs of your particular repository. But of course, you should feel free to tweak it further! Check [this page](https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#editing-a-code-scanning-workflow) for detailed documentation. Questions? Check out the FAQ below!. ### FAQ; <details>; <summary>Click here to expand the FAQ section</summary>. #### How often will the code scanning analysis run?; By default, code scanning will trigger a scan with the CodeQL engine on the following events:; * On every pull request — to flag up potential security problems for you to investigate before merging a PR.; * On ever",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11808:1163,test,tested,1163,https://root.cern,https://github.com/root-project/root/pull/11808,1,['test'],['tested']
Testability,":. ```; ==290973== Conditional jump or move depends on uninitialised value(s); ==290973== at 0x2C720F3A: TMVA::DataLoader::AddTree(TTree*, TString const&, double, TCut const&, TMVA::Types::ETreeType) (DataLoader.cxx:360); ==290973== by 0x2C72113C: TMVA::DataLoader::AddSignalTree(TTree*, double, TMVA::Types::ETreeType) (DataLoader.cxx:373); ==290973== by 0x4F9573B: ???; ==290973== by 0x4F9107E: ???; ==290973== by 0x6EC8BCD: cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const (in /home/vpadulan/Programs/rootproject/rootbuild/fix-tutorial-tmva-cnn-classification-testing/lib/libCling.so); ==290973== by 0x6E4EA4E: cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) (in /home/vpadulan/Programs/rootproject/rootbuild/fix-tutorial-tmva-cnn-classification-testing/lib/libCling.so); ==290973== by 0x6E4F13C: cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) (in /home/vpadulan/Programs/rootproject/rootbuild/fix-tutorial-tmva-cnn-classification-testing/lib/libCling.so); ==290973== by 0x6F36428: cling::MetaSema::actOnxCommand(llvm::StringRef, llvm::StringRef, cling::Value*) (in /home/vpadulan/Programs/rootproject/rootbuild/fix-tutorial-tmva-cnn-classification-testing/lib/libCling.so); ==290973== by 0x6F45003: cling::MetaParser::isXCommand(cling::MetaSema::ActionResult&, cling::Value*) (in /home/vpadulan/Programs/rootproject/rootbuild/fix-tutorial-tmva-cnn-classification-testing/lib/libCling.so); ==290973== by 0x6F468D4: cling::MetaParser::isCommand(cling::MetaSema::ActionResult&, cling::Value*) (in /home/vpadulan/Programs/rootproject/rootbuild/fix-tutorial-tmva-cnn-classification-testing/lib/libCling.so); ==290973== by 0x6F2EF9F: cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) (in /home/vpadulan/Programs/rootproject/root",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14433:2092,test,testing,2092,https://root.cern,https://github.com/root-project/root/issues/14433,1,['test'],['testing']
Testability,"://github.com/root-project/root/blob/224551cf3fc5bdc80b2693578d082eb9cb0e32a3/tmva/tmva/src/DataSetManager.cxx#L105-L113. At the same time, the `DataSetInfo` object was created with `new` but never deleted. This logic is faulty and is related to the following report by valgrind:. ```; ==290973== Conditional jump or move depends on uninitialised value(s); ==290973== at 0x2C720F3A: TMVA::DataLoader::AddTree(TTree*, TString const&, double, TCut const&, TMVA::Types::ETreeType) (DataLoader.cxx:360); ==290973== by 0x2C72113C: TMVA::DataLoader::AddSignalTree(TTree*, double, TMVA::Types::ETreeType) (DataLoader.cxx:373); ==290973== by 0x4F9573B: ???; ==290973== by 0x4F9107E: ???; ==290973== by 0x6EC8BCD: cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const (in /home/vpadulan/Programs/rootproject/rootbuild/fix-tutorial-tmva-cnn-classification-testing/lib/libCling.so); ==290973== by 0x6E4EA4E: cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) (in /home/vpadulan/Programs/rootproject/rootbuild/fix-tutorial-tmva-cnn-classification-testing/lib/libCling.so); ==290973== by 0x6E4F13C: cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) (in /home/vpadulan/Programs/rootproject/rootbuild/fix-tutorial-tmva-cnn-classification-testing/lib/libCling.so); ==290973== by 0x6F36428: cling::MetaSema::actOnxCommand(llvm::StringRef, llvm::StringRef, cling::Value*) (in /home/vpadulan/Programs/rootproject/rootbuild/fix-tutorial-tmva-cnn-classification-testing/lib/libCling.so); ==290973== by 0x6F45003: cling::MetaParser::isXCommand(cling::MetaSema::ActionResult&, cling::Value*) (in /home/vpadulan/Programs/rootproject/rootbuild/fix-tutorial-tmva-cnn-classification-testing/lib/libCling.so); ==290973== by 0x6F468D4: cling::MetaParser::isCommand(cling::MetaSema::ActionResult&, cling::Value*) (in /home/vpa",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14433:1750,test,testing,1750,https://root.cern,https://github.com/root-project/root/issues/14433,1,['test'],['testing']
Testability,":1834; 54: Taking false branch in /opt/root_src/io/io/src/TStreamerInfo.cxx:1834; 55: 'targets' initialized here in /opt/root_src/io/io/src/TStreamerInfo.cxx:1843; 56: Assuming 'targets' is null in /opt/root_src/io/io/src/TStreamerInfo.cxx:1844; 57: Taking true branch in /opt/root_src/io/io/src/TStreamerInfo.cxx:1844; 58: Called C++ object pointer is null in /opt/root_src/io/io/src/TStreamerInfo.cxx:1847; /opt/root_src/io/io/src/TStreamerInfo.cxx:2408:50: warning: Called C++ object pointer is null [clang-analyzer-core.CallAndMessage]; 1: Calling 'TObject::TestBit' in /opt/root_src/io/io/src/TStreamerInfo.cxx:1700; 2: Assuming the condition is false in /opt/root_src/core/base/inc/TObject.h:187; 3: Returning zero, which participates in a condition later in /opt/root_src/core/base/inc/TObject.h:187; 4: Returning from 'TObject::TestBit' in /opt/root_src/io/io/src/TStreamerInfo.cxx:1700; 5: Taking false branch in /opt/root_src/io/io/src/TStreamerInfo.cxx:1700; 6: Calling 'TObject::TestBit' in /opt/root_src/io/io/src/TStreamerInfo.cxx:1703; 7: Assuming the condition is false in /opt/root_src/core/base/inc/TObject.h:187; 8: Returning zero, which participates in a condition later in /opt/root_src/core/base/inc/TObject.h:187; 9: Returning from 'TObject::TestBit' in /opt/root_src/io/io/src/TStreamerInfo.cxx:1703; 10: Taking false branch in /opt/root_src/io/io/src/TStreamerInfo.cxx:1703; 11: Assuming 'gDebug' is <= 0 in /opt/root_src/io/io/src/TStreamerInfo.cxx:1709; 12: Taking false branch in /opt/root_src/io/io/src/TStreamerInfo.cxx:1709; 13: Assuming the condition is false in /opt/root_src/io/io/src/TStreamerInfo.cxx:1715; 14: Taking false branch in /opt/root_src/io/io/src/TStreamerInfo.cxx:1715; 15: Assuming the condition is false in /opt/root_src/io/io/src/TStreamerInfo.cxx:1758; 16: Left side of '&&' is false in /opt/root_src/io/io/src/TStreamerInfo.cxx:1758; 17: Assuming 'ruleSet' is null in /opt/root_src/io/io/src/TStreamerInfo.cxx:1784; 18: Taking false branch in /opt/",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7431:107868,Test,TestBit,107868,https://root.cern,https://github.com/root-project/root/issues/7431,1,['Test'],['TestBit']
Testability,":290; 41: Left side of '&&' is false in /opt/root_src/proof/proof/src/TProof.cxx:5623; 42: Taking false branch in /opt/root_src/proof/proof/src/TProof.cxx:5623; 43: 'el' is null in /opt/root_src/proof/proof/src/TProof.cxx:5632; 44: Taking true branch in /opt/root_src/proof/proof/src/TProof.cxx:5632; 45: Assuming the condition is true in /opt/root_src/proof/proof/src/TProof.cxx:5633; 46: Taking true branch in /opt/root_src/proof/proof/src/TProof.cxx:5633; 47: Assuming 'f' is non-null in /opt/root_src/proof/proof/src/TProof.cxx:5635; 48: Left side of '&&' is true in /opt/root_src/proof/proof/src/TProof.cxx:5635; 49: Calling 'TObject::IsZombie' in /opt/root_src/proof/proof/src/TProof.cxx:5635; 50: Calling 'TObject::TestBit' in /opt/root_src/core/base/inc/TObject.h:149; 51: Assuming the condition is false in /opt/root_src/core/base/inc/TObject.h:187; 52: Returning zero, which participates in a condition later in /opt/root_src/core/base/inc/TObject.h:187; 53: Returning from 'TObject::TestBit' in /opt/root_src/core/base/inc/TObject.h:149; 54: Returning zero, which participates in a condition later in /opt/root_src/core/base/inc/TObject.h:149; 55: Returning from 'TObject::IsZombie' in /opt/root_src/proof/proof/src/TProof.cxx:5635; 56: Left side of '&&' is true in /opt/root_src/proof/proof/src/TProof.cxx:5635; 57: Assuming the condition is true in /opt/root_src/proof/proof/src/TProof.cxx:5635; 58: Taking true branch in /opt/root_src/proof/proof/src/TProof.cxx:5635; 59: Calling 'TIter::operator()' in /opt/root_src/proof/proof/src/TProof.cxx:5638; 60: Calling 'TIter::Next' in /opt/root_src/core/cont/inc/TCollection.h:248; 61: Assuming field 'fIterator' is non-null in /opt/root_src/core/cont/inc/TCollection.h:249; 62: '?' condition is true in /opt/root_src/core/cont/inc/TCollection.h:249; 63: Returning pointer, which participates in a condition later in /opt/root_src/core/cont/inc/TCollection.h:249; 64: Returning from 'TIter::Next' in /opt/root_src/core/cont/inc/TCollection.h:",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7534:37443,Test,TestBit,37443,https://root.cern,https://github.com/root-project/root/issues/7534,1,['Test'],['TestBit']
Testability,"::Experimental::Detail::RPageSinkFile::RPageSinkFile(std::string_view, const ROOT::Experimental::RNTupleWriteOptions&)>: The RNTuple file format will change. Do not store real data with this version of RNTuple!; Fatal: nread == nbytes violated at line 1083 of `/builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RMiniFile.cxx'; aborting; [ --- ]; CMake Error at /builddir/build/BUILD/root-6.28.00/cmake/modules/RootTestDriver.cmake:232 (message):; error code: Subprocess aborted; ~~~. #### gtest-tree-ntuple-v7-test-ntuple-endian. Here the bytes are in the right order, but shifted 4 bytes. $ printf '%016x\n%016x\n' 1234605615003729920 287454020; 1122334400000000; 0000000011223344; $ printf '%016x\n%016x\n' 6153737371142586367 1432778632; 55667788ffffffff; 0000000055667788; ~~~; 449/1272 Test #424: gtest-tree-ntuple-v7-test-ntuple-endian .............................***Failed 0.04 sec; Running main() from /builddir/build/BUILD/googletest-1.13.0/googletest/src/gtest_main.cc; Note: Google Test filter = -RCsvDS.Remote:RRawFile.Remote:RSqliteDS.Davix:TFile.ReadWithoutGlobalRegistrationWeb:TFile.ReadWithoutGlobalRegistrationNet:RNTuple.TClassEBO; [==========] Running 9 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 9 tests from RColumnElementEndian; [ RUN ] RColumnElementEndian.Float; [ OK ] RColumnElementEndian.Float (6 ms); [ RUN ] RColumnElementEndian.Double; [ OK ] RColumnElementEndian.Double (3 ms); [ RUN ] RColumnElementEndian.Int16; [ OK ] RColumnElementEndian.Int16 (0 ms); [ RUN ] RColumnElementEndian.UInt16; [ OK ] RColumnElementEndian.UInt16 (0 ms); [ RUN ] RColumnElementEndian.Int32; [ OK ] RColumnElementEndian.Int32 (0 ms); [ RUN ] RColumnElementEndian.UInt32; [ OK ] RColumnElementEndian.UInt32 (0 ms); [ RUN ] RColumnElementEndian.Int64; [ OK ] RColumnElementEndian.Int64 (0 ms); [ RUN ] RColumnElementEndian.UInt64; [ OK ] RColumnElementEndian.UInt64 (0 ms); [ RUN ] RColumnElementEndian.Int64Int32; /builddir/build/BUILD/root-6.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12426:3320,Test,Test,3320,https://root.cern,https://github.com/root-project/root/issues/12426,1,['Test'],['Test']
Testability,"::RDF::RResultPtr<double>::TriggerRun (this=0x7fffd51c8a38) at /builddir/build/BUILD/root-6.28.00/tree/dataframe/inc/ROOT/RResultPtr.hxx:360; #25 ROOT::RDF::RResultPtr<double>::Get (this=0x7fffd51c8a38) at /builddir/build/BUILD/root-6.28.00/tree/dataframe/inc/ROOT/RResultPtr.hxx:154; #26 ROOT::RDF::RResultPtr<double>::GetValue (this=0x7fffd51c8a38) at /builddir/build/BUILD/root-6.28.00/tree/dataframe/inc/ROOT/RResultPtr.hxx:196; #27 RooAbsDataHelper_MTConstruction_Test::TestBody (this=<optimized out>) at /builddir/build/BUILD/root-6.28.00/roofit/RDataFrameHelpers/test/testActionHelpers.cxx:66; #28 0x00007fffa3390cbc in void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) () from /lib64/libgtest.so.1.8.0; #29 0x00007fffa3381374 in testing::Test::Run() () from /lib64/libgtest.so.1.8.0; #30 0x00007fffa3381578 in testing::TestInfo::Run() () from /lib64/libgtest.so.1.8.0; #31 0x00007fffa33816b4 in testing::TestCase::Run() () from /lib64/libgtest.so.1.8.0; #32 0x00007fffa3381da8 in testing::internal::UnitTestImpl::RunAllTests() () from /lib64/libgtest.so.1.8.0; #33 0x00007fffa3382004 in testing::UnitTest::Run() () from /lib64/libgtest.so.1.8.0; #34 0x00007fffa3310988 in main () from /lib64/libgtest_main.so.1.8.0; #35 0x00007fffa0829f5c in generic_start_main.isra () from /lib64/glibc-hwcaps/power9/libc-2.28.so; #36 0x00007fffa082a0f4 in __libc_start_main () from /lib64/glibc-hwcaps/power9/libc-2.28.so; #37 0x0000000000000000 in ?? (); ===========================================================; pure virtual method called; terminate called without an active exception; ~~~. There are failures running from Python:. ~~~; 427/1192 Test #397: pyunittests-dataframe-histograms ....................................***Failed 191.35 sec; test_histo1D (dataframe_histograms.HistogramsFromRDF) ... *** Break *** segmentation violation; ===========================================================; There was ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12372:25534,test,testing,25534,https://root.cern,https://github.com/root-project/root/issues/12372,2,"['Test', 'test']","['TestCase', 'testing']"
Testability,"::RDataFrame(""Events"", ""DYJetsToLL.root"").Histo1D(""Muon_tightId"").GetValue();; ```. The stack trace is as follows:. ```; In module 'ROOTDataFrame':; /home/stefan/src/miniconda3/envs/test-jupyroot/include/ROOT/RDF/ActionHelpers.hxx:303:18: error: non-const lvalue reference to type 'bool' cannot bind to a temporary of type 'std::_Bit_const_iterator::const_reference' (aka 'bool'); for (auto &x0 : x0s) {; ^ ~; /home/stefan/src/miniconda3/envs/test-jupyroot/include/ROOT/RDF/RAction.hxx:237:33: note: in instantiation of function template specialization 'ROOT::Internal::RDF::FillParHelper<TH1D>::Exec<ROOT::VecOps::RVec<bool>, 0>' requested here; ActionCRTP_t::GetHelper().Exec(slot, std::get<S>(fValues[slot]).Get(entry)...);; ^; /home/stefan/src/miniconda3/envs/test-jupyroot/include/ROOT/RDF/RAction.hxx:149:41: note: in instantiation of function template specialization 'ROOT::Internal::RDF::RAction<ROOT::Internal::RDF::FillParHelper<TH1D>, ROOT::Detail::RDF::RNodeBase, ROOT::TypeTraits::TypeList<ROOT::VecOps::RVec<bool> > >::Exec<0>' requested here; static_cast<Action_t *>(this)->Exec(slot, entry, TypeInd_t());; ^; /home/stefan/src/miniconda3/envs/test-jupyroot/include/ROOT/RDF/RAction.hxx:223:4: note: in instantiation of member function 'ROOT::Internal::RDF::RActionCRTP<ROOT::Internal::RDF::RAction<ROOT::Internal::RDF::FillParHelper<TH1D>, ROOT::Detail::RDF::RNodeBase, ROOT::TypeTraits::TypeList<ROOT::VecOps::RVec<bool> > > >::Run' requested here; RAction(Helper &&h, const ColumnNames_t &bl, std::shared_ptr<PrevDataFrame> pd,; ^; /home/stefan/src/miniconda3/envs/test-jupyroot/bin/../lib/gcc/x86_64-conda-linux-gnu/7.5.0/../../../../x86_64-conda-linux-gnu/include/c++/7.5.0/bits/unique_ptr.h:821:34: note: in instantiation of member function 'ROOT::Internal::RDF::RAction<ROOT::Internal::RDF::FillParHelper<TH1D>, ROOT::Detail::RDF::RNodeBase, ROOT::TypeTraits::TypeList<ROOT::VecOps::RVec<bool> > >::RAction' requested here; { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6675:1228,test,test-jupyroot,1228,https://root.cern,https://github.com/root-project/root/issues/6675,1,['test'],['test-jupyroot']
Testability,"::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]; C:\Users\bellenot\git\master\tree\dataframe\test\datasource_sqlite.cxx(41): message : see reference to function template instantiation 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]; C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]; C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]; C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]; C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]; C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,1): error C3861: 'GetTopLevelBranchNames': identifier not found [C:\Users\bellenot\build\x86\rele",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11153:1824,test,test,1824,https://root.cern,https://github.com/root-project/root/pull/11153,1,['test'],['test']
Testability,"::Value*) (in /home/vpadulan/Programs/rootproject/rootbuild/fix-tutorial-tmva-cnn-classification-testing/lib/libCling.so); ==290973== by 0x6E4F13C: cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) (in /home/vpadulan/Programs/rootproject/rootbuild/fix-tutorial-tmva-cnn-classification-testing/lib/libCling.so); ==290973== by 0x6F36428: cling::MetaSema::actOnxCommand(llvm::StringRef, llvm::StringRef, cling::Value*) (in /home/vpadulan/Programs/rootproject/rootbuild/fix-tutorial-tmva-cnn-classification-testing/lib/libCling.so); ==290973== by 0x6F45003: cling::MetaParser::isXCommand(cling::MetaSema::ActionResult&, cling::Value*) (in /home/vpadulan/Programs/rootproject/rootbuild/fix-tutorial-tmva-cnn-classification-testing/lib/libCling.so); ==290973== by 0x6F468D4: cling::MetaParser::isCommand(cling::MetaSema::ActionResult&, cling::Value*) (in /home/vpadulan/Programs/rootproject/rootbuild/fix-tutorial-tmva-cnn-classification-testing/lib/libCling.so); ==290973== by 0x6F2EF9F: cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) (in /home/vpadulan/Programs/rootproject/rootbuild/fix-tutorial-tmva-cnn-classification-testing/lib/libCling.so); ==290973== by 0x6C20B67: HandleInterpreterException(cling::MetaProcessor*, char const*, cling::Interpreter::CompilationResult&, cling::Value*) (TCling.cxx:2438); ==290973== by 0x6C215B6: TCling::ProcessLine(char const*, TInterpreter::EErrorCode*) (TCling.cxx:2582); ==290973== by 0x6C24E6E: TCling::ProcessLineSynch(char const*, TInterpreter::EErrorCode*) (TCling.cxx:3545); ==290973== by 0x4C06042: TApplication::ExecuteFile(char const*, int*, bool) (TApplication.cxx:1865); ==290973== by 0x4C0586B: TApplication::ProcessFile(char const*, int*, bool) (TApplication.cxx:1737); ==290973== by 0x4C05680: TApplication::ProcessLine(char const*, b",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14433:2739,test,testing,2739,https://root.cern,https://github.com/root-project/root/issues/14433,1,['test'],['testing']
Testability,"::Value*) (in /home/vpadulan/Programs/rootproject/rootbuild/fix-tutorial-tmva-cnn-classification-testing/lib/libCling.so); ==292588== by 0x6E4F13C: cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) (in /home/vpadulan/Programs/rootproject/rootbuild/fix-tutorial-tmva-cnn-classification-testing/lib/libCling.so); ==292588== by 0x6F36428: cling::MetaSema::actOnxCommand(llvm::StringRef, llvm::StringRef, cling::Value*) (in /home/vpadulan/Programs/rootproject/rootbuild/fix-tutorial-tmva-cnn-classification-testing/lib/libCling.so); ==292588== by 0x6F45003: cling::MetaParser::isXCommand(cling::MetaSema::ActionResult&, cling::Value*) (in /home/vpadulan/Programs/rootproject/rootbuild/fix-tutorial-tmva-cnn-classification-testing/lib/libCling.so); ==292588== by 0x6F468D4: cling::MetaParser::isCommand(cling::MetaSema::ActionResult&, cling::Value*) (in /home/vpadulan/Programs/rootproject/rootbuild/fix-tutorial-tmva-cnn-classification-testing/lib/libCling.so); ==292588== by 0x6F2EF9F: cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) (in /home/vpadulan/Programs/rootproject/rootbuild/fix-tutorial-tmva-cnn-classification-testing/lib/libCling.so); ==292588== by 0x6C20B67: HandleInterpreterException(cling::MetaProcessor*, char const*, cling::Interpreter::CompilationResult&, cling::Value*) (TCling.cxx:2438); ==292588== by 0x6C215B6: TCling::ProcessLine(char const*, TInterpreter::EErrorCode*) (TCling.cxx:2582); ==292588== by 0x6C24E6E: TCling::ProcessLineSynch(char const*, TInterpreter::EErrorCode*) (TCling.cxx:3545); ==292588== by 0x4C06042: TApplication::ExecuteFile(char const*, int*, bool) (TApplication.cxx:1865); ==292588== by 0x4C0586B: TApplication::ProcessFile(char const*, int*, bool) (TApplication.cxx:1737); ==292588== by 0x4C05680: TApplication::ProcessLine(char const*, b",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14438:2931,test,testing,2931,https://root.cern,https://github.com/root-project/root/issues/14438,1,['test'],['testing']
Testability,"::__type = RooTemplateProxy; typename std::__strip_reference_wrapper::type>::__type = std::shared_ptr]':; /data/cmsbld/jenkins/workspace/ib-run-pr-tests/CMSSW_12_5_ROOT6_X_2022-08-14-2300/src/PhysicsTools/Utilities/interface/RooFitFunction.h:56:37: required from 'root::RooFitFunction::RooFitFunction(const char*, const char*, const Expr&, RooAbsReal&, RooAbsReal&, funct::Parameter&, RooAbsReal&, funct::Parameter&, RooAbsReal&, funct::Parameter&) [with X = funct::X; Expr = funct::Expression]'; /data/cmsbld/jenkins/workspace/ib-run-pr-tests/CMSSW_12_5_ROOT6_X_2022-08-14-2300/src/PhysicsTools/Utilities/test/testRooFitFunction.cpp:30:77: required from here; /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc10/external/gcc/10.3.0-84898dea653199466402e67d73657f10/include/c++/10.3.0/bits/stl_pair.h:572:14: error: no matching function for call to 'std::pair, RooTemplateProxy >::pair(std::shared_ptr, RooTemplateProxy)'; 572 | return __pair_type(std::forward<_T1>(__x), std::forward<_T2>(__y));; | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~; /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc10/external/gcc/10.3.0-84898dea653199466402e67d73657f10/include/c++/10.3.0/bits/stl_pair.h:452:9: note: candidate: 'template std::pair<_T1, _T2>::pair(std::tuple<_Args1 ...>&, std::tuple<_Args2 ...>&, std::_Index_tuple<_Indexes1 ...>, std::_Index_tuple<_Indexes2 ...>) [with _Args1 = {_Args1 ...}; long unsigned int ..._Indexes1 = {_Indexes1 ...}; _Args2 = {_Args2 ...}; long unsigned int ..._Indexes2 = {_Indexes2 ...}; _T1 = std::shared_ptr; _T2 = RooTemplateProxy]'; 452 | pair(tuple<_Args1...>&, tuple<_Args2...>&,; | ^~~~; ```. Note that root master commit https://github.com/root-project/root/commit/cd992545ae works fine. ### Expected behavior; Build should not fail. ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forg",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11188:2091,test,tests,2091,https://root.cern,https://github.com/root-project/root/issues/11188,2,['test'],"['testBuildDir', 'tests']"
Testability,":; error code: 1; ~~~. #### pyunittests-pyroot-pyz-stl-vector; ~~~; 61/1272 Test #18: pyunittests-pyroot-pyz-stl-vector ...................................***Failed 0.84 sec; test_vec_char_data (stl_vector.STL_vector.test_vec_char_data); Test that calling std::vector<char>::data() returns a Python string ... FAIL; test_vec_const_char_p (stl_vector.STL_vector.test_vec_const_char_p); Test that creating a std::vector<const char*> does not raise any ... ok; ======================================================================; FAIL: test_vec_char_data (stl_vector.STL_vector.test_vec_char_data); Test that calling std::vector<char>::data() returns a Python string; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""/builddir/build/BUILD/root-6.28.00/bindings/pyroot/pythonizations/test/stl_vector.py"", line 19, in test_vec_char_data; self.assertEqual(v.data(), ''.join(elems)); AssertionError: '' != 'abc'; + abc; ----------------------------------------------------------------------; Ran 2 tests in 0.174s; FAILED (failures=1); CMake Error at /builddir/build/BUILD/root-6.28.00/cmake/modules/RootTestDriver.cmake:232 (message):; error code: 1; ~~~. #### tutorial-dataframe-df006_ranges-py. TypeError: none of the 2 overloaded methods succeeded.; ~~~; 1096/1272 Test #1098: tutorial-dataframe-df006_ranges-py ..................................***Failed 7.50 sec; Traceback (most recent call last):; File ""/builddir/build/BUILD/root-6.28.00/tutorials/dataframe/df006_ranges.py"", line 44, in <module>; d_15_end_3 = d.Range(15, 0, 3); ^^^^^^^^^^^^^^^^^; TypeError: none of the 2 overloaded methods succeeded. Full details:; ROOT::RDF::RInterface<ROOT::Detail::RDF::RRange<ROOT::Detail::RDF::RLoopManager>,void> ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Range(unsigned int end) =>; TypeError: takes at most 1 arguments (3 given); ROOT::RDF::RInterface<ROOT::Detail::RDF::RRange<ROOT::Detail::RDF::RLoopManager>,void> R",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12429:4352,Assert,AssertionError,4352,https://root.cern,https://github.com/root-project/root/issues/12429,2,"['Assert', 'test']","['AssertionError', 'tests']"
Testability,":RLoopManager::Run (this=0x173fa4a90, jit=<optimized out>) at /builddir/build/BUILD/root-6.28.00/tree/dataframe/src/RLoopManager.cxx:826; #24 0x000000013a4e034c in ROOT::RDF::RResultPtr<double>::TriggerRun (this=0x7fffd51c8a38) at /builddir/build/BUILD/root-6.28.00/tree/dataframe/inc/ROOT/RResultPtr.hxx:360; #25 ROOT::RDF::RResultPtr<double>::Get (this=0x7fffd51c8a38) at /builddir/build/BUILD/root-6.28.00/tree/dataframe/inc/ROOT/RResultPtr.hxx:154; #26 ROOT::RDF::RResultPtr<double>::GetValue (this=0x7fffd51c8a38) at /builddir/build/BUILD/root-6.28.00/tree/dataframe/inc/ROOT/RResultPtr.hxx:196; #27 RooAbsDataHelper_MTConstruction_Test::TestBody (this=<optimized out>) at /builddir/build/BUILD/root-6.28.00/roofit/RDataFrameHelpers/test/testActionHelpers.cxx:66; #28 0x00007fffa3390cbc in void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) () from /lib64/libgtest.so.1.8.0; #29 0x00007fffa3381374 in testing::Test::Run() () from /lib64/libgtest.so.1.8.0; #30 0x00007fffa3381578 in testing::TestInfo::Run() () from /lib64/libgtest.so.1.8.0; #31 0x00007fffa33816b4 in testing::TestCase::Run() () from /lib64/libgtest.so.1.8.0; #32 0x00007fffa3381da8 in testing::internal::UnitTestImpl::RunAllTests() () from /lib64/libgtest.so.1.8.0; #33 0x00007fffa3382004 in testing::UnitTest::Run() () from /lib64/libgtest.so.1.8.0; #34 0x00007fffa3310988 in main () from /lib64/libgtest_main.so.1.8.0; #35 0x00007fffa0829f5c in generic_start_main.isra () from /lib64/glibc-hwcaps/power9/libc-2.28.so; #36 0x00007fffa082a0f4 in __libc_start_main () from /lib64/glibc-hwcaps/power9/libc-2.28.so; #37 0x0000000000000000 in ?? (); ===========================================================; pure virtual method called; terminate called without an active exception; ~~~. There are failures running from Python:. ~~~; 427/1192 Test #397: pyunittests-dataframe-histograms ....................................***Failed 191.35 sec;",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12372:25368,test,testing,25368,https://root.cern,https://github.com/root-project/root/issues/12372,2,"['Test', 'test']","['Test', 'testing']"
Testability,":RNodeBase>*>(0x174b8a810), new const char*[1]{""x""}, 1, 4, reinte""..., context=""RLoopManager::Run"") at /builddir/build/BUILD/root-6.28.00/tree/dataframe/src/RDFUtils.cxx:357; #22 0x00007fffa326c338 in ROOT::Detail::RDF::RLoopManager::Jit (this=<optimized out>) at /usr/include/c++/8/ext/new_allocator.h:79; #23 0x00007fffa3276608 in ROOT::Detail::RDF::RLoopManager::Run (this=0x173fa4a90, jit=<optimized out>) at /builddir/build/BUILD/root-6.28.00/tree/dataframe/src/RLoopManager.cxx:826; #24 0x000000013a4e034c in ROOT::RDF::RResultPtr<double>::TriggerRun (this=0x7fffd51c8a38) at /builddir/build/BUILD/root-6.28.00/tree/dataframe/inc/ROOT/RResultPtr.hxx:360; #25 ROOT::RDF::RResultPtr<double>::Get (this=0x7fffd51c8a38) at /builddir/build/BUILD/root-6.28.00/tree/dataframe/inc/ROOT/RResultPtr.hxx:154; #26 ROOT::RDF::RResultPtr<double>::GetValue (this=0x7fffd51c8a38) at /builddir/build/BUILD/root-6.28.00/tree/dataframe/inc/ROOT/RResultPtr.hxx:196; #27 RooAbsDataHelper_MTConstruction_Test::TestBody (this=<optimized out>) at /builddir/build/BUILD/root-6.28.00/roofit/RDataFrameHelpers/test/testActionHelpers.cxx:66; #28 0x00007fffa3390cbc in void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) () from /lib64/libgtest.so.1.8.0; #29 0x00007fffa3381374 in testing::Test::Run() () from /lib64/libgtest.so.1.8.0; #30 0x00007fffa3381578 in testing::TestInfo::Run() () from /lib64/libgtest.so.1.8.0; #31 0x00007fffa33816b4 in testing::TestCase::Run() () from /lib64/libgtest.so.1.8.0; #32 0x00007fffa3381da8 in testing::internal::UnitTestImpl::RunAllTests() () from /lib64/libgtest.so.1.8.0; #33 0x00007fffa3382004 in testing::UnitTest::Run() () from /lib64/libgtest.so.1.8.0; #34 0x00007fffa3310988 in main () from /lib64/libgtest_main.so.1.8.0; #35 0x00007fffa0829f5c in generic_start_main.isra () from /lib64/glibc-hwcaps/power9/libc-2.28.so; #36 0x00007fffa082a0f4 in __libc_start_main () from /lib64/glibc-hwcaps/",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12372:25019,Test,TestBody,25019,https://root.cern,https://github.com/root-project/root/issues/12372,1,['Test'],['TestBody']
Testability,":TClassAlt*> >::~_Vector_base (this=0x152ecc011420 <guard variable for ROOT::GenerateInitInstanceLocal(std::vector<EncodedEventId, std::allocator<EncodedEventId> > const*)::instance>, __in_chrg=<optimized out>) at /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc11/external/gcc/11.2.1-f9b9dfdd886f71cd63f5538223d8f161/include/c++/11.2.1/bits/stl_vector.h:335; #13 0x0000152ece696efd in std::vector<ROOT::TClassAlt*, std::allocator<ROOT::TClassAlt*> >::~vector (this=0x152ecc011420 <guard variable for ROOT::GenerateInitInstanceLocal(std::vector<EncodedEventId, std::allocator<EncodedEventId> > const*)::instance>, __in_chrg=<optimized out>) at /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc11/external/gcc/11.2.1-f9b9dfdd886f71cd63f5538223d8f161/include/c++/11.2.1/bits/stl_vector.h:683; #14 0x0000152ece69536b in ROOT::TGenericClassInfo::~TGenericClassInfo (this=0x152ecc011320 <ROOT::GenerateInitInstanceLocal(std::vector<EncodedEventId, std::allocator<EncodedEventId> > const*)::instance>, __in_chrg=<optimized out>) at /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.05-e7deaecb5e40f02a68a0fd8a7c036f40/root-6.28.05/core/meta/src/TGenericClassInfo.cxx:227; #15 0x0000152eccfd926c in __run_exit_handlers () from /lib64/libc.so.6; #16 0x0000152eccfd93a0 in exit () from /lib64/libc.so.6; #17 0x0000152eccfc2d8c in __libc_start_main () from /lib64/libc.so.6; #18 0x0000000000406e5e in _start (); ===========================================================. /bin/sh: line 1: 1509407 Segmentation fault (core dumped) edmWriteConfigs -p /data/cmsbld/jenkins/workspace/ib-run-pr-tests/CMSSW_13_2_ROOT628_X_2023-06-04-2300/tmp/el8_amd64_gcc11/src/SimG4Core/SaveSimTrackAction/src/SimG4CoreSaveSimTrackAction/libSimG4CoreSaveSimTrackAction.so; gmake: *** [lib/el8_amd64_gcc11/SimG4CoreSaveSimTrackAction.edmplugin] Error 1; ```. ### What is the expected behaviour?. Not to crash. ### How to reproduce?. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12957:8370,test,tests,8370,https://root.cern,https://github.com/root-project/root/issues/12957,2,['test'],"['testBuildDir', 'tests']"
Testability,":TClassAlt*> >::~_Vector_base (this=0x152ecc011420 <guard variable for ROOT::GenerateInitInstanceLocal(std::vector<EncodedEventId, std::allocator<EncodedEventId> > const*)::instance>, __in_chrg=<optimized out>) at /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc11/external/gcc/11.2.1-f9b9dfdd886f71cd63f5538223d8f161/include/c++/11.2.1/bits/stl_vector.h:335; #13 0x0000152ece696efd in std::vector<ROOT::TClassAlt*, std::allocator<ROOT::TClassAlt*> >::~vector (this=0x152ecc011420 <guard variable for ROOT::GenerateInitInstanceLocal(std::vector<EncodedEventId, std::allocator<EncodedEventId> > const*)::instance>, __in_chrg=<optimized out>) at /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc11/external/gcc/11.2.1-f9b9dfdd886f71cd63f5538223d8f161/include/c++/11.2.1/bits/stl_vector.h:683; #14 0x0000152ece69536b in ROOT::TGenericClassInfo::~TGenericClassInfo (this=0x152ecc011320 <ROOT::GenerateInitInstanceLocal(std::vector<EncodedEventId, std::allocator<EncodedEventId> > const*)::instance>, __in_chrg=<optimized out>) at /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.05-e7deaecb5e40f02a68a0fd8a7c036f40/root-6.28.05/core/meta/src/TGenericClassInfo.cxx:227; #15 0x0000152eccfd926c in __run_exit_handlers () from /lib64/libc.so.6; #16 0x0000152eccfd93a0 in exit () from /lib64/libc.so.6; #17 0x0000152eccfc2d8c in __libc_start_main () from /lib64/libc.so.6; #18 0x0000000000406e5e in _start (); ===========================================================. The lines below might hint at the cause of the crash. If you see question; marks as part of the stack trace, try to recompile with debugging information; enabled and export CLING_DEBUG=1 environment variable before running.; You may get help by asking at the ROOT forum https://root.cern/forum; Only if you are really convinced it is a bug in ROOT then please submit a; report at https://root.cern/bugs Please post the ENTIRE stack trace; from",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12957:4841,test,tests,4841,https://root.cern,https://github.com/root-project/root/issues/12957,2,['test'],"['testBuildDir', 'tests']"
Testability,":lookup (this=0x1099d16e0, SearchOrder=std::vector of length 1, capacity 1 = {...}, Name=..., RequiredState=<optimized out>) at /builddir/build/BUILD/root-6.28.00/interpreter/llvm/src/lib/ExecutionEngine/Orc/Core.cpp:2040; ~~~. https://github.com/root-project/root/blob/db1e83871f8a34574c4980d94c5e5ab667fa8672/interpreter/llvm/src/lib/ExecutionEngine/Orc/Core.cpp#L2031-L2043. 187 tests fail with the error ""pure virtual method called"". Most of them are related to dataframe or roofit, but not exclusively. These errors do not happen on the other RHEL+EPEL 8 architecture (x86_64).; These errors do not happen on ppc64le on other systems: RHEL+EPEL 9, Fedora 36, 37, 38, 39. It is specific to ppc64le on RHEL+EPEL 8. ### Expected behaviour. Root should behave the same on RHEL+EPEL 8 ppc64le and RHEL+EPEL 8 x86_64. ### To Reproduce. Steps to reproduce the behavior:; 1. Build root 6.28.00 for RHEL+EPEL 8 on ppc64le using the default compiler -- g++ (GCC) 8.5.0 20210514 (Red Hat 8.5.0-16); 2. Run tests. ### Setup; 1. ROOT version 6.28.00; 2. Operating system RHEL+EPEL 8 ppc64le; 3. Built from source. ### Additional context. How the build crashes with the SOFIE parser option enabled:. ~~~; ===========================================================; There was a crash (#5 0x00007fffa8fac284 in SigHandler (sig=<optimized out>) at /builddir/build/BUILD/root-6.28.00/core/unix/src/TUnixSystem.cxx:395).; This is the entire stack trace of all threads:; ===========================================================; #0 0x00007fffa84f2f04 in waitpid () from /lib64/glibc-hwcaps/power9/libc-2.28.so; #1 0x00007fffa845a38c in do_system () from /lib64/glibc-hwcaps/power9/libc-2.28.so; #2 0x00007fffa8fa9044 in TUnixSystem::Exec (shellcmd=<optimized out>, this=<optimized out>) at /builddir/build/BUILD/root-6.28.00/core/unix/src/TUnixSystem.cxx:2104; #3 TUnixSystem::StackTrace (this=0x1098e5850) at /builddir/build/BUILD/root-6.28.00/core/unix/src/TUnixSystem.cxx:2395; #4 0x00007fffa8fac1c8 in TUnixS",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12372:1360,test,tests,1360,https://root.cern,https://github.com/root-project/root/issues/12372,1,['test'],['tests']
Testability,":string input_name = nodeproto.input(0);; if (parser.IsRegisteredTensorType(input_name)) {; input_type = parser.GetTensorType(input_name);; } else {; throw std::runtime_error(""TMVA::SOFIE ONNX Parser Sign op has input tensor "" + input_name +; "" but its type is not yet registered"");; }. const std::string output_name = nodeproto.output(0);; switch (input_type) {; case ETensorType::FLOAT: op.reset(new ROperator_Sign<float>(input_name, output_name)); break;; default:; throw std::runtime_error(""TMVA::SOFIE - Unsupported - Sign Operator does not support imput type "" +; std::to_string(static_cast<int>(input_type)));; }. if (!parser.IsRegisteredTensorType(output_name)) {; parser.RegisterTensorType(output_name, input_type);; }; return op;; };. void SofieSign() {. RModelParser_ONNX parser;. // Register the Sign operator; parser.RegisterOperator(""Sign"", ParseSign);. // Parse the model; RModel model = parser.Parse(""Sign.onnx"");; model.Generate();; model.OutputGenerated();; }; ```; the ``onnx_proto3.pb.h`` is generated from the ``onnx_proto3`` file by runing ``protoc --cpp_out=. onnx_proto3``. The generated code looks like this:; ```{c++}; //Code generated automatically by TMVA for Inference of Model file [Sign.onnx] at [Sat Oct 8 13:10:40 2022] . #ifndef TMVA_SOFIE_SIGN; #define TMVA_SOFIE_SIGN. #include<vector>; #include ""TMVA/SOFIE_common.hxx""; #include <fstream>. namespace TMVA_SOFIE_Sign{; struct Session {; std::vector<float> fTensor_Y = std::vector<float>(5);; float * tensor_Y = fTensor_Y.data();. Session(std::string filename ="""") {; if (filename.empty()) filename = ""Sign.dat"";; }. std::vector<float> infer(float* tensor_X){; ; //---- Operatorop_0; for (size_t i = 0; i < 5; i++) {; if (tensor_X[i] > 0.) {; tensor_Y[i] = 1.;; } else if (tensor_X[i] < 0.) {; tensor_Y[i] = -1.;; } else {; tensor_Y[i] = 0.;; }; }; std::vector<float> ret (tensor_Y, tensor_Y + 5);; return ret;; }; };; } //TMVA_SOFIE_Sign. #endif // TMVA_SOFIE_SIGN; ```. ## Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11518:4567,test,tested,4567,https://root.cern,https://github.com/root-project/root/pull/11518,1,['test'],['tested']
Testability,":vector<float>,std::vector<float>,std::vector<float>,std::vector<char>,std::vector<float>,std::vector<float>,std::vector<char>,std::vector<float>,std::vector<float>,std::vector<int>,std::vector<float>,std::vector<float>,std::vector<float>,std::vector<float>,std::vector<float>,std::vector<float>, Double_t, Double_t, Float_t, Float_t, Char_t, Char_t, Char_t, Char_t, Char_t, Double_t, Double_t, Double_t, Float_t, Int_t, Bool_t, Float_t, Int_t, Bool_t,std::vector<int>,std::vector<double>,std::vector<char>,std::vector<float>,std::vector<float>,std::vector<int>,std::vector<char>,std::vector<float>,std::vector<float>, Double_t, Float_t, Float_t, Float_t, Float_t, Float_t, Float_t, Float_t, Float_t, Float_t, Float_t, Float_t, Float_t, Float_t, Float_t, Float_t, Float_t, Float_t, Float_t, Float_t, Float_t, Float_t, Double_t, Double_t, Double_t, Double_t, Double_t,std::vector<float>,std::vector<float>,std::vector<float>,std::vector<char>,std::vector<float>,std::vector<float>,std::vector<char>, Int_t, Int_t, Int_t, Int_t, Int_t, Int_t, Int_t, Int_t, Int_t, Int_t, Int_t, Int_t, Int_t, Int_t, Int_t, Int_t, UInt_t, UInt_t, Int_t, Double_t, Double_t, Int_t, Bool_t, Bool_t, Int_t, Bool_t, Bool_t,std::vector<int>,std::vector<double>,std::vector<char>,std::vector<float>,std::vector<char>,std::vector<float>,std::vector<char>,std::vector<float>,std::vector<float>, Char_t, Char_t, Char_t, Char_t, Char_t, Char_t, Char_t, Char_t, Char_t, Char_t, Char_t, Char_t, Char_t, Char_t, Char_t, Char_t, Char_t, Char_t, Char_t, Char_t, Char_t, Char_t, Char_t, Char_t, Char_t, Char_t, Char_t, Char_t, Char_t, Char_t, Char_t, Char_t, Char_t, Char_t, Char_t, Char_t, Char_t, Char_t, Char_t, Char_t, Char_t, Char_t, Char_t, Char_t, Char_t, Char_t, Char_t, Char_t, Char_t, Float_t, Float_t, Float_t, Int_t, Float_t, Float_t, Float_t, Float_t, Float_t, UInt_t, Float_t, ULong64_t, Bool_t, UInt_t, Float_t, Float_t, Float_t, Float_t, Float_t, Float_t, Double_t, Float_t, Float_t, UInt_t, Float_t>; (""test"", ""test_out.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15079:7913,test,test,7913,https://root.cern,https://github.com/root-project/root/issues/15079,1,['test'],['test']
Testability,"; # Create a test file for processing; treename = ""myTree""; filename = ""2clusters.root""; nentries = 10000; opts = ROOT.RDF.RSnapshotOptions(); opts.fAutoFlush = 5000; ROOT.RDataFrame(nentries).Define(""b1"", ""42"")\; .Define(""b2"", ""42"")\; .Define(""b3"", ""42"")\; .Snapshot(treename, filename, [""b1"", ""b2"", ""b3""], opts). histoproxies_spark = [; SparkDF(treename, filename, sparkcontext=sparkconn, npartitions=2); .Histo1D((col, col, 1, 40, 45), col); for col in [""b1"", ""b2"", ""b3""]; ]. histoproxies_dask = [; DaskDF(treename, filename, daskclient=daskconn, npartitions=2); .Histo1D((col, col, 1, 40, 45), col); for col in [""b1"", ""b2"", ""b3""]; ]. histoproxies = histoproxies_spark + histoproxies_dask. # Before triggering the computation graphs values are None; for proxy in histoproxies:; assert proxy.proxied_node.value is None. RunGraphs(histoproxies). # After RunGraphs all histograms are correctly assigned to the; # node objects; for proxy in histoproxies:; histo = proxy.proxied_node.value; assert isinstance(histo, ROOT.TH1D); assert histo.GetEntries() == nentries; assert histo.GetMean() == 42. os.remove(filename). def main():; test_rungraphs_sparkanddask_3histos(*connection()). if __name__ == ""__main__"":; raise SystemExit(main()); ```. And here is a bash script that runs the previous Python script in a loop until it fails; ```; counter=0; while test $? -eq 0; do ; counter=$(($counter+1)); echo -e ""\nRunning test $counter\n""; CLING_DEBUG=1 python test.py; done. # Remove leftover file from the test when it fails; rm 2clusters.root; ```. ### Setup. ROOT [master@b13756d](https://github.com/root-project/root/commit/b13756d544d91803e31c7b6aa0c32ae05481e7f8); Python 3.10.7; Java 19; pyspark 3.3.0; dask/distributed 2022.7.1. ROOT built with:; ```; cmake -GNinja -Dccache=ON -Dminimal=ON -Dtesting=ON -Droottest=ON -Dpyroot=ON -Ddataframe=ON -Dxrootd=ON -Dtest_distrdf_pyspark=ON -Dtest_distrdf_dask=ON -DCMAKE_BUILD_TYPE=Debug -Dimt=ON; ```. ### Additional context. I am tentatively assigning th",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11515:14054,assert,assert,14054,https://root.cern,https://github.com/root-project/root/issues/11515,1,['assert'],['assert']
Testability,"; -excludePath=<string> - Do not store the <path> in the dictionary.; -f - Overwrite <file>s.; -failOnWarnings - Fail if there are warnings.; -inlineInputHeader - Does not generate #include <header> but expands the header content.; -interpreteronly - Generate minimal dictionary for interactivity (without IO information).; -m=<string> - The list of dependent modules of the dictionary.; -multiDict - If this library has multiple separate LinkDef files.; -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH.; -p - Deprecated, legacy flag which is ignored.; -rmf=<string> - Generate a rootmap file with the specified name.; -rml=<string> - Generate rootmap file.; -s=<string> - The path to the library of the built dictionary.; -selSyntaxOnly - Check the selection syntax only.; -split - Split the dictionary into two parts: one containing the IO (ClassDef)information and another the interactivity support.; Choose verbosity level:; -v - Show errors (default).; -v0 - Show only fatal errors.; -v1 - Show errors (the same as -v).; -v2 - Show warnings.; -v3 - Show notes.; -v4 - Show information.; ```; ; This patch deprecates:; 1) +P, +V, +STUB, -gccxml, -cint, -reflex -- they are old CINT legacy options which had no meaning in rootcling.; 2) -p, -c -- remove old options used by rootcling -generate-pch as now the build system does not export its lists of flags directly to roocling.; ; The implementation of 2) was quite permissive as it tried to send all possible unknown options directly to rootcling. As a side effect of reworking of 2) we can restrict the options being sent and unknown options are not sent to rootcling anymore, improving encapsulation.; ; If there is a need to do so please contact us or use the EXTRA_CLING_ARGS env option. PS: The end goal is fixing the incremental builds when -Druntime_cxxmodules=On. We will have something like `rootcling --bare-cling=""-fmodules -fno-implicit-module-maps -fmodule-map-file=... -emit-module=std`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4171:2351,STUB,STUB,2351,https://root.cern,https://github.com/root-project/root/pull/4171,1,['STUB'],['STUB']
Testability,"; // convert the TTrees inside such folder an RNTuple in the output file in the same folder. TFile* in = TFile::Open(inputFile.c_str(), ""READ"");; if (!in) {; error(""Cannot open input file"");; }; TFile* out = TFile::Open(outputFile.c_str(), ""RECREATE"");; if (!out) {; error(""Cannot open output file"");; }; // Iterate over the directories in the file; TIter next(in->GetListOfKeys());; TKey* key;; while ((key = (TKey*)next())) {; std::cout << key->GetClassName() << std::endl;; if (std::string(key->GetClassName()) == ""TDirectoryFile"") {; std::string name = key->GetName();; log(""Found TDirectoryFile: "" + name);; auto* dir = (TDirectoryFile*)key->ReadObj();; if (!out->GetDirectory(name.c_str())) {; out->mkdir(name.c_str());; }; out->cd(name.c_str());; // Iterate over the objects in the directory; TIter next2(dir->GetListOfKeys());; TKey* key2;; while ((key2 = (TKey*)next2())) {; if (std::string(key2->GetClassName()) == ""TTree"") {; std::string name2 = key2->GetName();; log(""Found TTree: "" + name2);; auto* tree = (TTree*)key2->ReadObj();; debug(""Converting to RNTuple"");; // Create the folder in the output file if it does not exist; using namespace ROOT::Experimental;; // Create a model from the input tree; auto model = RNTupleModel::CreateBare();. for (auto b : TRangeDynCast<TBranch>(*tree->GetListOfBranches())) {; // The dynamic cast to TBranch should never fail for GetListOfBranches(); assert(b);. // We assume every branch has a single leaf; auto* l = static_cast<TLeaf*>(b->GetListOfLeaves()->First());. // Create an ntuple field with the same name and type than the tree branch; auto field = Detail::RFieldBase::Create(l->GetName(), l->GetTypeName()).Unwrap();; std::cout << ""Convert leaf "" << l->GetName() << "" ["" << l->GetTypeName() << ""]""; << "" --> ""; << ""field "" << field->GetName() << "" ["" << field->GetType() << ""]"" << std::endl;. // Hand over ownership of the field to the ntuple model. This will also create a memory location attached; // to the model's default entry, that ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13996:11544,log,log,11544,https://root.cern,https://github.com/root-project/root/issues/13996,1,['log'],['log']
Testability,; // message logger; tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service; tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger; tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger; tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger; tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogge,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9792:2194,log,logger,2194,https://root.cern,https://github.com/root-project/root/issues/9792,1,['log'],['logger']
Testability,"; 17: Taking false branch in /opt/root_src/core/cont/src/TRefArray.cxx:342; 18: 'uid' declared without an initial value in /opt/root_src/core/cont/src/TRefArray.cxx:346; 19: Calling 'TRefArray::GetObjectUID' in /opt/root_src/core/cont/src/TRefArray.cxx:347; 20: Calling 'TObject::TestBit' in /opt/root_src/core/cont/src/TRefArray.cxx:211; 21: Assuming the condition is false in /opt/root_src/core/base/inc/TObject.h:187; 22: Returning zero, which participates in a condition later in /opt/root_src/core/base/inc/TObject.h:187; 23: Returning from 'TObject::TestBit' in /opt/root_src/core/cont/src/TRefArray.cxx:211; 24: Taking false branch in /opt/root_src/core/cont/src/TRefArray.cxx:211; 25: Calling 'TObject::TestBit' in /opt/root_src/core/cont/src/TRefArray.cxx:213; 26: Assuming the condition is true in /opt/root_src/core/base/inc/TObject.h:187; 27: Returning the value 1, which participates in a condition later in /opt/root_src/core/base/inc/TObject.h:187; 28: Returning from 'TObject::TestBit' in /opt/root_src/core/cont/src/TRefArray.cxx:213; 29: Taking true branch in /opt/root_src/core/cont/src/TRefArray.cxx:213; 30: Assuming the condition is false in /opt/root_src/core/cont/src/TRefArray.cxx:214; 31: 'valid' is false in /opt/root_src/core/cont/src/TRefArray.cxx:215; 32: Taking false branch in /opt/root_src/core/cont/src/TRefArray.cxx:215; 33: Assuming the condition is true in /opt/root_src/core/cont/src/TRefArray.cxx:218; 34: Taking true branch in /opt/root_src/core/cont/src/TRefArray.cxx:218; 35: Assuming 'gDebug' is <= 3 in /opt/root_src/core/cont/src/TRefArray.cxx:222; 36: Taking false branch in /opt/root_src/core/cont/src/TRefArray.cxx:222; 37: 'valid' is true in /opt/root_src/core/cont/src/TRefArray.cxx:254; 38: Taking false branch in /opt/root_src/core/cont/src/TRefArray.cxx:254; 39: Returning without writing to 'uid' in /opt/root_src/core/cont/src/TRefArray.cxx:258; 40: Returning the value 1 (loaded from 'valid'), which participates in a condition later in /opt/ro",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7424:18845,Test,TestBit,18845,https://root.cern,https://github.com/root-project/root/issues/7424,1,['Test'],['TestBit']
Testability,; 19: Taking false branch in /opt/root_src/tree/treeplayer/src/TTreeFormula.cxx:4302; 20: expanded from macro 'R__ASSERT' in /opt/root_src/core/foundation/inc/TError.h:120; 21: Loop condition is false. Exiting loop in /opt/root_src/tree/treeplayer/src/TTreeFormula.cxx:4302; 22: expanded from macro 'R__ASSERT' in /opt/root_src/core/foundation/inc/TError.h:119; 23: Execution continues on line 4022 in /opt/root_src/tree/treeplayer/src/TTreeFormula.cxx:4307; 24: 'i' is < field 'fNoper' in /opt/root_src/tree/treeplayer/src/TTreeFormula.cxx:4022; 25: Loop condition is true. Entering loop body in /opt/root_src/tree/treeplayer/src/TTreeFormula.cxx:4022; 26: Assuming 'newaction' is < kDefinedVariable in /opt/root_src/tree/treeplayer/src/TTreeFormula.cxx:4027; 27: Taking true branch in /opt/root_src/tree/treeplayer/src/TTreeFormula.cxx:4027; 28: Assuming 'newaction' is not equal to kConstant in /opt/root_src/tree/treeplayer/src/TTreeFormula.cxx:4031; 29: Taking false branch in /opt/root_src/tree/treeplayer/src/TTreeFormula.cxx:4031; 30: Control jumps to 'case kStringNotEqual:' at line 4125 in /opt/root_src/tree/treeplayer/src/TTreeFormula.cxx:4033; 31: The value -1 is assigned to 'pos2' in /opt/root_src/tree/treeplayer/src/TTreeFormula.cxx:4125; 32: 2nd function call argument is an uninitialized value in /opt/root_src/tree/treeplayer/src/TTreeFormula.cxx:4125; /opt/root_src/tree/treeplayer/src/TTreeFormula.cxx:5700:13: warning: Value stored to 'last' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'last' is never read in /opt/root_src/tree/treeplayer/src/TTreeFormula.cxx:5700; /opt/root_src/tree/treeplayer/src/TTreeFormula.cxx:5728:13: warning: Value stored to 'last' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'last' is never read in /opt/root_src/tree/treeplayer/src/TTreeFormula.cxx:5728; /opt/root_src/tree/treeplayer/src/TTreeFormula.cxx; ```. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15300:17455,test,tested,17455,https://root.cern,https://github.com/root-project/root/pull/15300,1,['test'],['tested']
Testability,"; 27-Apr-2021 13:36:43 CEST Initiating request to open file root://eoscms.cern.ch//eos/cms/store/data/Run2018A/ZeroBias/ALCARECO/SiStripCalMinBias-12Nov2019_UL2018-v1/260000/0F90F012-3C97-344E-8E2F-F459A798FA74.root. Thread 1 ""cmsRun"" received signal SIGSEGV, Segmentation fault.; 0x00007ffff74a42b1 in TMutex::UnLock (this=0x7fffb0c95750); at /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/slc7_amd64_gcc900/lcg/root/6.22.08-1fec05f50351c1988c4bf604c7ec21c3/root-6.22.08/core/thread/src/TMutex.cxx:70. (gdb) where; #0 0x00007ffff74a42b1 in TMutex::UnLock (this=0x7fffb0c95750); at /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/slc7_amd64_gcc900/lcg/root/6.22.08-1fec05f50351c1988c4bf604c7ec21c3/root-6.22.08/core/thread/src/TMutex.cxx:70; #1 0x00007ffff76c8b97 in TLockGuard::~TLockGuard (this=0x7fffffff0b90, __in_chrg=<optimized out>) at include/TVirtualMutex.h:86; #2 0x00007ffff67266df in TPluginHandler::CheckForExecPlugin (this=0x7fffd04c19c0, nargs=2); at /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/slc7_amd64_gcc900/lcg/root/6.22.08-1fec05f50351c1988c4bf604c7ec21c3/root-6.22.08/core/base/src/TPluginManager.cxx:284; #3 0x00007ffff6765285 in TPluginHandler::ExecPluginImpl<char const*, bool> (this=0x7fffd04c19c0); at /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/slc7_amd64_gcc900/lcg/root/6.22.08-1fec05f50351c1988c4bf604c7ec21c3/root-6.22.08/core/base/inc/TPluginManager.h:151; #4 0x00007ffff6764dee in TPluginHandler::ExecPlugin<char const*, bool> (this=0x7fffd04c19c0, nargs=2); at /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/slc7_amd64_gcc900/lcg/root/6.22.08-1fec05f50351c1988c4bf604c7ec21c3/root-6.22.08/core/base/inc/TPluginManager.h:173; #5 0x00007ffff6756a72 in TSystem::FindHelper (this=0x7ffff2c38000, ; path=0x7fffb0d42060 ""root://eoscms.cern.ch//eos/cms/store/data/Run2018A/ZeroBias/ALCARECO/SiStripCalMinBias-12Nov2019_UL2018-v1/260000/0F90F012-3C97-344E-8E2F-F459A798FA7",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8008:1594,test,tests,1594,https://root.cern,https://github.com/root-project/root/issues/8008,2,['test'],"['testBuildDir', 'tests']"
Testability,"; 348:PyMVA-Keras-Regression ; 349:PyMVA-Keras-Multiclass ; 985:tutorial-tmva-TMVA_SOFIE_Keras; 1238:tutorial-tmva-RBatchGenerator_PyTorch-py ; 1239:tutorial-tmva-RBatchGenerator_TensorFlow-py ; 1247:tutorial-tmva-TMVA_SOFIE_RDataFrame-py ; 1252:tutorial-tmva-keras-GenerateModel-py ; 1253:tutorial-tmva-keras-MulticlassKeras-py ; 1584:roottest-root-io-evolution-make ; 1641:roottest-root-io-newstl-make; ```. those (and possibly `tutorial-tmva-keras-MulticlassKeras-py` which did not run because it requires the previous test). ### Reproducer. ```; 347/2278 Testing: PyMVA-Keras-Classification; 347/2278 Test: PyMVA-Keras-Classification; Command: ""/usr/bin/cmake"" ""-DCMD=/home/pcanal/root_working/build/quick-devel/tmva/pymva/test/testPyKerasClassification"" ""-DSYS=/home/pcanal/root_working/build/quick-devel"" ""-P"" ""/home/pcanal/root_working/code/quick-devel/cmake/modules/RootTestDriver.cmake""; Directory: /home/pcanal/root_working/build/quick-devel/tmva/pymva/test; ""PyMVA-Keras-Classification"" start time: Sep 24 20:01 UTC; Output:; ----------------------------------------------------------; Get test data...; Generate keras model...; 2024-09-24 20:01:12.572604: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered; 2024-09-24 20:01:12.572668: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered; 2024-09-24 20:01:12.573914: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered; 2024-09-24 20:01:12.581129: I tensorflow/core/platform/cpu_feature_guard.cc:182] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.; To enable the following instructio",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16552:1270,test,test,1270,https://root.cern,https://github.com/root-project/root/issues/16552,2,['test'],['test']
Testability,"; 382: #3 0x7f0554a2f5ac in ROOT::Detail::RDF::RLoopManager::RunAndCheckFilters(unsigned int, long long) /home/jhahnfel/ROOT/src/tree/dataframe/src/RLoopManager.cxx:660:10; 382: #4 0x7f0554a30ca8 in ROOT::Detail::RDF::RLoopManager::RunTreeReader() /home/jhahnfel/ROOT/src/tree/dataframe/src/RLoopManager.cxx:568:10; 382: #5 0x7f0554a3ace0 in ROOT::Detail::RDF::RLoopManager::Run() /home/jhahnfel/ROOT/src/tree/dataframe/src/RLoopManager.cxx:846:32; 382: #6 0x5ecb22 in ROOT::RDF::RResultPtr<ROOT::RDataFrame>::TriggerRun() /home/jhahnfel/ROOT/src/tree/dataframe/inc/ROOT/RResultPtr.hxx:383:18; 382: #7 0x5ecb22 in ROOT::RDF::RResultPtr<ROOT::RDataFrame>::Get() /home/jhahnfel/ROOT/src/tree/dataframe/inc/ROOT/RResultPtr.hxx:169:10; 382: #8 0x5ecb22 in ROOT::RDF::RResultPtr<ROOT::RDataFrame>::operator*() /home/jhahnfel/ROOT/src/tree/dataframe/inc/ROOT/RResultPtr.hxx:229:15; 382: #9 0x5ecb22 in ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager, void>::Snapshot(std::basic_string_view<char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, ROOT::RDF::RSnapshotOptions const&) /home/jhahnfel/ROOT/src/tree/dataframe/inc/ROOT/RDF/RInterface.hxx:1140:10; 382: #10 0x5be335 in ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager, void>::Snapshot(std::basic_string_view<char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::initializer_list<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, ROOT::RDF::RSnapshotOptions const&) /home/jhahnfel/ROOT/src/tree/dataframe/inc/ROOT/RDF/RInterface.hxx:1202:14; 382: #11 0x512932 in RDFSnapshotMore_MissingSizeBranch_Test::TestBody() /home/jhahnfel/ROOT/src/tree/dataframe/test/dataframe_snapshot.cxx:903:18; ```. (already discussed and work-in-progress)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11222:3211,Test,TestBody,3211,https://root.cern,https://github.com/root-project/root/issues/11222,2,"['Test', 'test']","['TestBody', 'test']"
Testability,; 392/1231 Test #369: gtest-tree-dataframe-test-dataframe-nodes ........................... Passed 2.13 sec; Start 370: gtest-tree-dataframe-test-dataframe-regression; 393/1231 Test #367: gtest-tree-dataframe-test-dataframe-histomodels ..................... Passed 19.30 sec; Start 371: gtest-tree-dataframe-test-dataframe-utils; 394/1231 Test #371: gtest-tree-dataframe-test-dataframe-utils ........................... Passed 1.38 sec; Start 372: gtest-tree-dataframe-test-dataframe-report; 395/1231 Test #370: gtest-tree-dataframe-test-dataframe-regression ...................... Passed 12.11 sec; Start 373: gtest-tree-dataframe-test-dataframe-splitcoll-arrayview; 396/1231 Test #372: gtest-tree-dataframe-test-dataframe-report .......................... Passed 0.79 sec; Start 374: gtest-tree-dataframe-test-dataframe-redefine; 397/1231 Test #373: gtest-tree-dataframe-test-dataframe-splitcoll-arrayview ............. Passed 1.07 sec; Start 375: gtest-tree-dataframe-test-dataframe-definepersample; 398/1231 Test #374: gtest-tree-dataframe-test-dataframe-redefine ........................ Passed 3.63 sec; Start 376: gtest-tree-dataframe-test-dataframe-simple; 399/1231 Test #375: gtest-tree-dataframe-test-dataframe-definepersample ................. Passed 3.06 sec; Start 377: gtest-tree-dataframe-test-dataframe-helpers; 400/1231 Test #368: gtest-tree-dataframe-test-dataframe-interface ....................... Passed 21.83 sec; Start 378: gtest-tree-dataframe-test-dataframe-vecops; 401/1231 Test #378: gtest-tree-dataframe-test-dataframe-vecops .......................... Passed 3.95 sec; Start 379: gtest-tree-dataframe-test-dataframe-snapshot; 402/1231 Test #377: gtest-tree-dataframe-test-dataframe-helpers ......................... Passed 8.48 sec; Start 380: gtest-tree-dataframe-test-dataframe-display; 403/1231 Test #365: gtest-tree-dataframe-test-dataframe-cache ........................... Passed 44.39 sec; Start 381: gtest-tree-dataframe-test-dataframe-ranges; Start 382: gtest-tr,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10300:2286,test,test-dataframe-definepersample,2286,https://root.cern,https://github.com/root-project/root/pull/10300,3,"['Test', 'test']","['Test', 'test-dataframe-definepersample', 'test-dataframe-redefine']"
Testability,"; Events | Column 0 | Column 1 | Column 2; -------+----------+----------+----------; 1-10 p0(40kB) p1(80kB) p2(80kB); 11-20 p3(40kB) p4(80kB) p5(80kB); ... ... ... ...; ```. Before this change, page allocations were performed every time a page; is flushed from a column:. ```; Events | Column 0 | Column 1 | Column 2; -------+----------+----------+----------; [alloc] [alloc] [alloc]; 1-10 p0(40kB) p1(80kB) p2(80kB); [dealloc] [dealloc] [dealloc]; [alloc] [alloc] [alloc]; 11-20 p3(40kB) p4(80kB) p5(80kB); ... ... ... ...; [dealloc] [dealloc] [dealloc]; ```. After this change, allocations are held onto and reused if possible; (up to a certain limit, which for now is hard-coded to be 32 pages). ```; Events | Column 0 | Column 1 | Column 2; -------+----------+----------+----------; [alloc] [alloc] [alloc]; 1-10 p0(40kB) p1(80kB) p2(80kB); 11-20 p3(40kB) p4(80kB) p5(80kB); ... ... ... ...; [dealloc] [dealloc] [dealloc]; ```. On SSD, the following serial results were obtained for the lhcb and cms; benchmarks (average of ten cold runs, 95% confidence interval):. ```; cms. Before: 105145us +- 1338us; After: 93669us +- 2077us; %diff: 10.9%. lhcb. Before: 2111977us +- 8371us; After: 1770781us +- 11185us; %diff: 16.2%; ```. Todo: ; - [x] Handle non-mappable case in `PopulatePage`; - [x] Investigate multi-threaded case. For multithreading, the current implementation just uses the existing `UnsealPage` mechanism and is unaffected by these changes -- deleted pages are returned to the cache which deallocates them properly. . I tried adding an internal mutex to `RPageCache` and bumping the number of cached pages to 128 on the benchmark machine but the runtime was about the same as the existing cache-less implementation. Further cache size increases did not show improvements, but as expected only having 32 cached pages for 128 threads was much slower. ```; ./lhcb -m (64-cores, 10 cold runs, 95% confidence interval); no cache: 776188us +- 9918us; cache (128): 780214us +- 11888us; %diff",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8634:1280,benchmark,benchmarks,1280,https://root.cern,https://github.com/root-project/root/pull/8634,1,['benchmark'],['benchmarks']
Testability,"; File ""c:\python39-32\lib\runpy.py"", line 197, in _run_module_as_main; return _run_code(code, main_globals, None,; File ""c:\python39-32\lib\runpy.py"", line 87, in _run_code; exec(code, run_globals); File ""C:\Users\bellenot\build\x86\release\bin\JupyROOT\kernel\rootkernel.py"", line 137, in <module>; main(); File ""C:\Users\bellenot\build\x86\release\bin\JupyROOT\kernel\rootkernel.py"", line 134, in main; IPKernelApp.launch_instance(kernel_class=ROOTKernel); File ""c:\python39-32\lib\site-packages\traitlets\config\application.py"", line 844, in launch_instance; app.initialize(argv); File ""c:\python39-32\lib\site-packages\traitlets\config\application.py"", line 87, in inner; return method(app, *args, **kwargs); File ""c:\python39-32\lib\site-packages\ipykernel\kernelapp.py"", line 637, in initialize; self.init_kernel(); File ""c:\python39-32\lib\site-packages\ipykernel\kernelapp.py"", line 489, in init_kernel; kernel = kernel_factory(parent=self, session=self.session,; File ""c:\python39-32\lib\site-packages\traitlets\config\configurable.py"", line 537, in instance; inst = cls(*args, **kwargs); File ""C:\Users\bellenot\build\x86\release\bin\JupyROOT\kernel\rootkernel.py"", line 67, in __init__; self.magicloader = MagicLoader(self); File ""C:\Users\bellenot\build\x86\release\bin\JupyROOT\kernel\utils.py"", line 73, in __init__; raise Exception(""Error importing Magic: %s""%module_path); Exception: Error importing Magic: JupyROOT.kernel.magics.magics\cppmagic; ```; And these ones in `bindings/jupyroot/python/JupyROOT/helpers/cppcompleter.py`:; ```; input_line_37:1:10: fatal error: 'dlfcn.h' file not found; ^~~~~~~~~; input_line_41:2:24: error: use of undeclared identifier 'RTLD_NOW'; (dlopen(""libRint.so"", RTLD_NOW)); ^; ```. * Update bindings/jupyroot/python/JupyROOT/kernel/utils.py. * Apply suggestion from Vincenzo + fix indentation. ---------. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12951:2827,test,tested,2827,https://root.cern,https://github.com/root-project/root/pull/12951,1,['test'],['tested']
Testability,"; In file included from <module-includes>:1:; /home/root-build/etc/cling/Interpreter/RuntimeUniverse.h:27:10: fatal error: could not build module 'Cling_Runtime_Extra'; #include ""cling/Interpreter/Visibility.h""; ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~; input_line_2:1:10: fatal error: could not build module 'Cling_Runtime'; #include <cling/Interpreter/RuntimeUniverse.h>; ~~~~~~~~^; ../../../etc/cling//plugins/lib/libcladDifferentiator.a: member ../../../etc/cling//plugins/lib/libcladDifferentiator.a(MultiplexExternalRMVSource.cpp.o) in archive is not an object; collect2: error: ld returned 1 exit status; make[2]: *** [lib/libCling.so] Error 1; make[1]: *** [core/metacling/src/CMakeFiles/Cling.dir/all] Error 2; make[1]: *** Waiting for unfinished jobs....; In file included from input_line_3:1:; In file included from /home/root-build/etc/cling/lib/clang/13.0.0/include/assert.h:8:; In file included from /usr/include/assert.h:36:; In file included from /usr/include/features.h:399:; /usr/include/gnu/stubs.h:7:11: fatal error: 'gnu/stubs-32.h' file not found; # include <gnu/stubs-32.h>; ^~~~~~~~~~~~~~~~; While building module 'Core':; While building module 'ROOT_Rtypes' imported from /home/root-build/include/Rtypes.h:23:; /home/root-build/etc/cling/std.modulemap:462:12: error: header 'bits/invoke.h' not found; header ""bits/invoke.h""; ^; /home/root-build/include/RtypesCore.h:28:10: note: submodule of top-level module 'std' implicitly imported here; #include <cstddef> // size_t, NULL; ^; /home/root-build/include/ThreadLocalStorage.h:60:10: fatal error: could not build module 'ROOT_Rtypes'; #include ""RtypesCore.h""; ~~~~~~~~^~~~~~~~~~~~~~; While building module 'Core':; While building module 'ROOT_Foundation_Stage1_NoRTTI' imported from /home/root-build/include/Rtypes.h:195:; /home/root-build/etc/cling/std.modulemap:462:12: error: header 'bits/invoke.h' not found; header ""bits/invoke.h""; ^; /home/root-build/include/ROOT/RStringView.hxx:30:12: note: submodule of top-level modul",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13453:6411,stub,stubs,6411,https://root.cern,https://github.com/root-project/root/issues/13453,1,['stub'],['stubs']
Testability,; In file included from D:/ROOT/root_v6.30.02.win64.vc17\include\TGeoExtension.h:15:; In file included from C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\cassert:9:; In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\assert.h:12:; C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt.h:610:16: error: redefinition of '__crt_locale_data_public'; typedef struct __crt_locale_data_public; ^; C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt.h:596:16: note: previous definition is here; typedef struct __crt_locale_data_public; ^; In file included from libGeom dictionary payload:17:; In file included from D:/ROOT/root_v6.30.02.win64.vc17\include\TGeoExtension.h:15:; In file included from C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\cassert:9:; In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\assert.h:12:; C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt.h:617:16: error: redefinition of '__crt_locale_pointers'; typedef struct __crt_locale_pointers; ^; C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt.h:603:16: note: previous definition is here; typedef struct __crt_locale_pointers; ^; In file included from libGeom dictionary payload:17:; In file included from D:/ROOT/root_v6.30.02.win64.vc17\include\TGeoExtension.h:15:; In file included from C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\cassert:9:; In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\assert.h:12:; C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt.h:625:16: error: redefinition of '_Mbstatet'; typedef struct _Mbstatet; ^; C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt.h:611:16: note: previous definition is here; typedef struct _Mbstatet; ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14302:2018,assert,assert,2018,https://root.cern,https://github.com/root-project/root/issues/14302,1,['assert'],['assert']
Testability,"; ModuleNotFoundError: No module named 'libcppyy3_9'. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""<string>"", line 1, in <module>; File ""/Users/christopherburr/miniconda3/conda-bld/root_base_1630311151559/_test_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/lib/python3.9/site-packages/ROOT/__init__.py"", line 22, in <module>; import cppyy; File ""/Users/christopherburr/miniconda3/conda-bld/root_base_1630311151559/_test_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/lib/python3.9/site-packages/cppyy/__init__.py"", line 62, in <module>; raise ImportError(; ImportError: Failed to import libcppyy3_9. Please check that ROOT has been built for Python 3.9; Tests failed for root_base-6.24.4-py39h04197d9_0.tar.bz2 - moving package to /Users/christopherburr/miniconda3/conda-bld/broken; ```. This issue was introduced in https://github.com/root-project/root/commit/aefe374411d9bfecaa4a9eb764aee05f7b76a8e6 as the patch uses `CMAKE_SHARED_LIBRARY_SUFFIX` despite the fact that the suffix is overridden by:. https://github.com/root-project/root/blob/c06ad10a69b6b173fd21692f38394700b635abb0/bindings/pyroot/cppyy/cppyy-backend/CMakeLists.txt#L36-L37. https://github.com/root-project/root/blob/4eab5042f748d08f62f224d44a4ac9c82b9a3a13/cmake/modules/RootMacros.cmake#L37-L48. https://github.com/root-project/root/blob/4eab5042f748d08f62f224d44a4ac9c82b9a3a13/cmake/modules/RootMacros.cmake#L21-L25. ### Expected behavior. `CMAKE_INSTALL_PYTHONDIR` creates the correctly named symlinks for the binaries it installed. ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Do",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8933:2404,Test,Tests,2404,https://root.cern,https://github.com/root-project/root/issues/8933,1,['Test'],['Tests']
Testability,"; While building module 'Cling_Runtime' imported from input_line_2:1:; In file included from <module-includes>:3:; /home/cburr/miniconda3/envs/test/etc//cling/Interpreter/DynamicLookupRuntimeUniverse.h:16:10: remark: building module 'Cling_Runtime_Extra' as '/home/cburr/miniconda3/envs/test/lib/Cling_Runtime_Extra.pcm' [-Rmodule-build]; #include ""cling/Interpreter/DynamicExprInfo.h""; ^; ```. I don't know if ROOT is supposed to be able to recover from this but I run in to three issues, the first is the known `tbb` dependency issue in 6.24.0 that is already fixed for the next patch release. The second issue is that `MathCore.pcm` fails to build with:. ```bash; <<< cling interactive line includer >>>: remark: building module 'MathCore' as '/home/cburr/miniconda3/envs/test/lib/MathCore.pcm' [-Rmodule-build]; While building module 'MathCore':; In file included from <module-includes>:3:; In file included from /home/cburr/miniconda3/envs/test/include/Fit/Chi2FCN.h:19:; /home/cburr/miniconda3/envs/test/include/Fit/FitUtil.h:404:23: error: no matching constructor for initialization of 'std::vector<double>'; std::vector<double> ones{1, 1, 1, 1};; ^ ~~~~~~~~~~~~~~~~; ```. I can workaround this by using four `ones.push_back(1.0);` lines instead of initialising it as ones though it doesn't explain why this fails. Finally after fixing this it, running `root.exe -b -l -q -e '1+1' -x` repeatedly continues to rebuild modules, e.g. on the second iteration:. ```; <<< cling interactive line includer >>>: remark: building module 'Minuit' as '/home/cburr/miniconda3/envs/test/lib/Minuit.pcm' [-Rmodule-build]; <<< cling interactive line includer >>>: remark: finished building module 'Minuit' [-Rmodule-build]; Module a����2V`^��2V`X��2V�N��2VPP��2V��x�2V@!`�k�2V@�:�2V` not found.; Module test__CLING__GNUC__ct_int81����2V���2V-in-extern-ce not found.; Module includeit.pcm not found.; Module lib not found.; Module P�w�P�w� ���2V��'�2V0b(�2V��:�2V���2V����2V�:�2V not found.; Module ���2V@)��",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8518:2230,test,test,2230,https://root.cern,https://github.com/root-project/root/issues/8518,1,['test'],['test']
Testability,"; [----------] Global test environment tear-down; [==========] 9 tests from 1 test suite ran. (13 ms total); [ PASSED ] 8 tests.; [ FAILED ] 1 test, listed below:; [ FAILED ] RColumnElementEndian.Int64Int32; 1 FAILED TEST; CMake Error at /builddir/build/BUILD/root-6.28.00/cmake/modules/RootTestDriver.cmake:232 (message):; error code: 1; ~~~. #### gtest-tree-ntuple-v7-test-ntuple-extended. This looks like an endian error:. $ printf '%x\n' 1677721600; 64000000. Header length shoud be 0x00000064 = 100; ~~~; 501/1272 Test #443: gtest-tree-ntuple-v7-test-ntuple-extended ...........................***Failed 81.93 sec; Running main() from /builddir/build/BUILD/googletest-1.13.0/googletest/src/gtest_main.cc; Note: Google Test filter = -RCsvDS.Remote:RRawFile.Remote:RSqliteDS.Davix:TFile.ReadWithoutGlobalRegistrationWeb:TFile.ReadWithoutGlobalRegistrationNet:RNTuple.TClassEBO; [==========] Running 4 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 4 tests from RNTuple; [ RUN ] RNTuple.RealWorld1; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RPageStorageFile.cxx:51 in ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(std::string_view, const ROOT::Experimental::RNTupleWriteOptions&)>: The RNTuple file format will change. Do not store real data with this version of RNTuple!; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RNTupleSerialize.cxx:1148 in static ROOT::Experimental::RResult<void> ROOT::Experimental::Internal::RNTupleSerializer::DeserializeHeaderV1(const void*, uint32_t, ROOT::Experimental::RNTupleDescriptorBuilder&)>: Pre-release format version: RC 1; [ OK ] RNTuple.RealWorld1 (5260 ms); [ RUN ] RNTuple.RandomAccess; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RPageStorageFile.cxx:51 in ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(std::string_view, const ROOT::Experimental::RNTupleWriteOpt",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12426:5805,test,tests,5805,https://root.cern,https://github.com/root-project/root/issues/12426,1,['test'],['tests']
Testability,"; filename = ""2clusters.root""; nentries = 10000; opts = ROOT.RDF.RSnapshotOptions(); opts.fAutoFlush = 5000; ROOT.RDataFrame(nentries).Define(""b1"", ""42"")\; .Define(""b2"", ""42"")\; .Define(""b3"", ""42"")\; .Snapshot(treename, filename, [""b1"", ""b2"", ""b3""], opts). histoproxies_spark = [; SparkDF(treename, filename, sparkcontext=sparkconn, npartitions=2); .Histo1D((col, col, 1, 40, 45), col); for col in [""b1"", ""b2"", ""b3""]; ]. histoproxies_dask = [; DaskDF(treename, filename, daskclient=daskconn, npartitions=2); .Histo1D((col, col, 1, 40, 45), col); for col in [""b1"", ""b2"", ""b3""]; ]. histoproxies = histoproxies_spark + histoproxies_dask. # Before triggering the computation graphs values are None; for proxy in histoproxies:; assert proxy.proxied_node.value is None. RunGraphs(histoproxies). # After RunGraphs all histograms are correctly assigned to the; # node objects; for proxy in histoproxies:; histo = proxy.proxied_node.value; assert isinstance(histo, ROOT.TH1D); assert histo.GetEntries() == nentries; assert histo.GetMean() == 42. os.remove(filename). def main():; test_rungraphs_sparkanddask_3histos(*connection()). if __name__ == ""__main__"":; raise SystemExit(main()); ```. And here is a bash script that runs the previous Python script in a loop until it fails; ```; counter=0; while test $? -eq 0; do ; counter=$(($counter+1)); echo -e ""\nRunning test $counter\n""; CLING_DEBUG=1 python test.py; done. # Remove leftover file from the test when it fails; rm 2clusters.root; ```. ### Setup. ROOT [master@b13756d](https://github.com/root-project/root/commit/b13756d544d91803e31c7b6aa0c32ae05481e7f8); Python 3.10.7; Java 19; pyspark 3.3.0; dask/distributed 2022.7.1. ROOT built with:; ```; cmake -GNinja -Dccache=ON -Dminimal=ON -Dtesting=ON -Droottest=ON -Dpyroot=ON -Ddataframe=ON -Dxrootd=ON -Dtest_distrdf_pyspark=ON -Dtest_distrdf_dask=ON -DCMAKE_BUILD_TYPE=Debug -Dimt=ON; ```. ### Additional context. I am tentatively assigning this also to @Axel-Naumann @vgvassilev @jalopezg-r00t who ma",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11515:14130,assert,assert,14130,https://root.cern,https://github.com/root-project/root/issues/11515,1,['assert'],['assert']
Testability,; tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service; tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger; tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger; tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9792:1432,log,logger,1432,https://root.cern,https://github.com/root-project/root/issues/9792,1,['log'],['logger']
Testability,"<!--; Please search in; * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue); * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT); for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"".; -->. ### Describe the bug; Verbose printout of RooProduct results in a segfault. ### Expected behavior; A printout occurs. ### To Reproduce; This script. ```; import ROOT. w = ROOT.RooWorkspace(); w.factory(""RooGaussian::a(x[-10,10],0.,1.)""); w.factory(""RooGaussian::b(y[-10,10],0.,1.)""); p = w.factory(""RooProduct::p2({x,y})""); p.Print(""v""); ```; . results in a segfault:. ```. --- RooAbsArg ---; Value State: DIRTY; Shape State: DIRTY; Attributes: ; Address: 0x558349efb310; Clients: ; Servers: ; (0x5583491baa20,V-) RooRealVar::x ""x""; (0x558349eb7d90,V-) RooRealVar::y ""y""; Proxies: ; !compRSet -> ; *** Break *** segmentation violation; Traceback (most recent call last):; File ""/home/cburgard/Physics/root/build/test.py"", line 7, in <module>; p.Print(""v""); cppyy.ll.SegmentationViolation: void RooAbsArg::Print(const char* options = 0) =>; SegmentationViolation: segfault in C++; program state was reset; ```. ### Setup. Current master.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9321:1043,test,test,1043,https://root.cern,https://github.com/root-project/root/issues/9321,1,['test'],['test']
Testability,"<T>::type**)nullptr); ^; While building module 'Core':; While building module 'Cling_Runtime' imported from input_line_2:1:; In file included from <module-includes>:1:; /home/root-build/etc/cling/Interpreter/RuntimeUniverse.h:27:10: fatal error: could not build module 'Cling_Runtime_Extra'; #include ""cling/Interpreter/Visibility.h""; ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~; input_line_2:1:10: fatal error: could not build module 'Cling_Runtime'; #include <cling/Interpreter/RuntimeUniverse.h>; ~~~~~~~~^; ../../../etc/cling//plugins/lib/libcladDifferentiator.a: member ../../../etc/cling//plugins/lib/libcladDifferentiator.a(MultiplexExternalRMVSource.cpp.o) in archive is not an object; collect2: error: ld returned 1 exit status; make[2]: *** [lib/libCling.so] Error 1; make[1]: *** [core/metacling/src/CMakeFiles/Cling.dir/all] Error 2; make[1]: *** Waiting for unfinished jobs....; In file included from input_line_3:1:; In file included from /home/root-build/etc/cling/lib/clang/13.0.0/include/assert.h:8:; In file included from /usr/include/assert.h:36:; In file included from /usr/include/features.h:399:; /usr/include/gnu/stubs.h:7:11: fatal error: 'gnu/stubs-32.h' file not found; # include <gnu/stubs-32.h>; ^~~~~~~~~~~~~~~~; While building module 'Core':; While building module 'ROOT_Rtypes' imported from /home/root-build/include/Rtypes.h:23:; /home/root-build/etc/cling/std.modulemap:462:12: error: header 'bits/invoke.h' not found; header ""bits/invoke.h""; ^; /home/root-build/include/RtypesCore.h:28:10: note: submodule of top-level module 'std' implicitly imported here; #include <cstddef> // size_t, NULL; ^; /home/root-build/include/ThreadLocalStorage.h:60:10: fatal error: could not build module 'ROOT_Rtypes'; #include ""RtypesCore.h""; ~~~~~~~~^~~~~~~~~~~~~~; While building module 'Core':; While building module 'ROOT_Foundation_Stage1_NoRTTI' imported from /home/root-build/include/Rtypes.h:195:; /home/root-build/etc/cling/std.modulemap:462:12: error: header 'bits/invoke.h' no",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13453:6280,assert,assert,6280,https://root.cern,https://github.com/root-project/root/issues/13453,1,['assert'],['assert']
Testability,"<char, int64_t, char>)); Which is: 4; otherField->GetAlignment(); Which is: 8; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RPageStorageFile.cxx:51 in ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(std::string_view, const ROOT::Experimental::RNTupleWriteOptions&)>: The RNTuple file format will change. Do not store real data with this version of RNTuple!; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RNTupleSerialize.cxx:1148 in static ROOT::Experimental::RResult<void> ROOT::Experimental::Internal::RNTupleSerializer::DeserializeHeaderV1(const void*, uint32_t, ROOT::Experimental::RNTupleDescriptorBuilder&)>: Pre-release format version: RC 1; [ FAILED ] RNTuple.StdTuple (317 ms); [ --- ]; [----------] 18 tests from RNTuple (7848 ms total); [----------] Global test environment tear-down; [==========] 18 tests from 1 test suite ran. (7848 ms total); [ PASSED ] 16 tests.; [ FAILED ] 2 tests, listed below:; [ FAILED ] RNTuple.StdPair; [ FAILED ] RNTuple.StdTuple; 2 FAILED TESTS. ~~~. gtest-tree-ntuple-v7-test-ntuple-extended fails with:; Fatal: fWritePage[otherIdx].IsEmpty() violated. ~~~; 520/1318 Test #454: gtest-tree-ntuple-v7-test-ntuple-extended ...........................***Failed 73.15 sec; Running main() from /builddir/build/BUILD/googletest-1.13.0/googletest/src/gtest_main.cc; Note: Google Test filter = -RCsvDS.Remote:RRawFile.Remote:RSqliteDS.Davix:TFile.ReadWithoutGlobalRegistrationWeb:TFile.ReadWithoutGlobalRegistrationNet; [==========] Running 4 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 4 tests from RNTuple; [ RUN ] RNTuple.RealWorld1; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RPageStorageFile.cxx:51 in ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(std::string_view, const ROOT::Experimental::RNTupleWriteOptions&)>: The RNTuple file format will change. Do not store real",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12427:3132,test,tests,3132,https://root.cern,https://github.com/root-project/root/issues/12427,1,['test'],['tests']
Testability,"<double> &inpars, std::vector<double> &outpars);. std::string smoothFunctionName_ = ""cheb3"";; TH3D *covhist_;; TH2D *parhist_;; int ndim_ = 4;; double ptmin_ = 0.0;; double ptmax_ = 100.0;; double eigenShift_ = 1.0;; TF1* function_ = nullptr;; // list of predefined functions; TF1* tf1_pol3_ = new TF1(""tf1_pol3_"", ""pol3"", ptmin_, ptmax_);; TF1* tf1_pol2_ = new TF1(""tf1_pol2_"", ""pol2"", ptmin_, ptmax_);; TF1* tf1_erf_ = new TF1(""tf1_erf_"", ""[0] * (1.0 + TMath::Erf((x-[1])/[2]))"", ptmin_, ptmax_);; pol3_custom pol3_tf_;; TF1* tf1_pol3_tf_ = nullptr;; pol4_custom pol4_tf_;; TF1* tf1_pol4_tf_ = nullptr;; // erfPol2_custom erfPol2_tf_;; // TF1* tf1_erfPol2_tf_ = nullptr;; };. EtaPtCorrelatedEfficiency::EtaPtCorrelatedEfficiency(TH3D* histocov, TH2D* histoerf, double ptmin, double ptmax):; pol3_tf_(ptmin, ptmax),; pol4_tf_(ptmin, ptmax); // erfPol2_tf_(ptmin, ptmax); {; covhist_ = histocov;; int ny = covhist_->GetNbinsY();; int nz = covhist_->GetNbinsZ();; assert(ny==nz);; ndim_ = ny;; parhist_ = histoerf;; ptmin_ = ptmin;; ptmax_ = ptmax;; setSmoothingFunction(""pol3_tf"");; }; // EtaPtCorrelatedEfficiency::~EtaPtCorrelatedEfficiency() {; // function_ = nullptr;; // delete tf1_pol3_;; // delete tf1_pol2_;; // delete tf1_erf_;; // delete tf1_pol3_tf_;; // delete tf1_pol4_tf_;; // // delete tf1_erfPol2_tf_;; // }. void EtaPtCorrelatedEfficiency::setSmoothingFunction(const std::string& name) {; // TODO: if case I add more functions, find a smarte way to find the good one; smoothFunctionName_ = name;; if (name.find(""pol3_tf"") != std::string::npos) { ; tf1_pol3_tf_ = new TF1(""tf1_pol3_tf_"", pol3_tf_, ptmin_, ptmax_, pol3_tf_.getNparams());; function_ = tf1_pol3_tf_;; ndim_ = tf1_pol3_tf_->GetNpar();; } else if (name.find(""pol4_tf"") != std::string::npos) {; tf1_pol4_tf_ = new TF1(""tf1_pol4_tf_"", pol4_tf_, ptmin_, ptmax_, pol4_tf_.getNparams());; function_ = tf1_pol4_tf_;; ndim_ = tf1_pol4_tf_->GetNpar();; // } else if (name.find(""erfPol2_tf"") != std::string::npos) {; // tf1_erfPol2",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16578:5131,assert,assert,5131,https://root.cern,https://github.com/root-project/root/issues/16578,1,['assert'],['assert']
Testability,"= 5000; ROOT.RDataFrame(nentries).Define(""b1"", ""42"")\; .Define(""b2"", ""42"")\; .Define(""b3"", ""42"")\; .Snapshot(treename, filename, [""b1"", ""b2"", ""b3""], opts). histoproxies_spark = [; SparkDF(treename, filename, sparkcontext=sparkconn, npartitions=2); .Histo1D((col, col, 1, 40, 45), col); for col in [""b1"", ""b2"", ""b3""]; ]. histoproxies_dask = [; DaskDF(treename, filename, daskclient=daskconn, npartitions=2); .Histo1D((col, col, 1, 40, 45), col); for col in [""b1"", ""b2"", ""b3""]; ]. histoproxies = histoproxies_spark + histoproxies_dask. # Before triggering the computation graphs values are None; for proxy in histoproxies:; assert proxy.proxied_node.value is None. RunGraphs(histoproxies). # After RunGraphs all histograms are correctly assigned to the; # node objects; for proxy in histoproxies:; histo = proxy.proxied_node.value; assert isinstance(histo, ROOT.TH1D); assert histo.GetEntries() == nentries; assert histo.GetMean() == 42. os.remove(filename). def main():; test_rungraphs_sparkanddask_3histos(*connection()). if __name__ == ""__main__"":; raise SystemExit(main()); ```. And here is a bash script that runs the previous Python script in a loop until it fails; ```; counter=0; while test $? -eq 0; do ; counter=$(($counter+1)); echo -e ""\nRunning test $counter\n""; CLING_DEBUG=1 python test.py; done. # Remove leftover file from the test when it fails; rm 2clusters.root; ```. ### Setup. ROOT [master@b13756d](https://github.com/root-project/root/commit/b13756d544d91803e31c7b6aa0c32ae05481e7f8); Python 3.10.7; Java 19; pyspark 3.3.0; dask/distributed 2022.7.1. ROOT built with:; ```; cmake -GNinja -Dccache=ON -Dminimal=ON -Dtesting=ON -Droottest=ON -Dpyroot=ON -Ddataframe=ON -Dxrootd=ON -Dtest_distrdf_pyspark=ON -Dtest_distrdf_dask=ON -DCMAKE_BUILD_TYPE=Debug -Dimt=ON; ```. ### Additional context. I am tentatively assigning this also to @Axel-Naumann @vgvassilev @jalopezg-r00t who may have an easier time at understanding the output from gdb and help in creating a simpler reproducer",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11515:14416,test,test,14416,https://root.cern,https://github.com/root-project/root/issues/11515,4,['test'],['test']
Testability,"= nbytes violated at line 1083 of `/builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RMiniFile.cxx'; aborting; [ --- ]; CMake Error at /builddir/build/BUILD/root-6.28.00/cmake/modules/RootTestDriver.cmake:232 (message):; error code: Subprocess aborted; ~~~. #### gtest-tree-ntuple-v7-test-ntuple-endian. Here the bytes are in the right order, but shifted 4 bytes. $ printf '%016x\n%016x\n' 1234605615003729920 287454020; 1122334400000000; 0000000011223344; $ printf '%016x\n%016x\n' 6153737371142586367 1432778632; 55667788ffffffff; 0000000055667788; ~~~; 449/1272 Test #424: gtest-tree-ntuple-v7-test-ntuple-endian .............................***Failed 0.04 sec; Running main() from /builddir/build/BUILD/googletest-1.13.0/googletest/src/gtest_main.cc; Note: Google Test filter = -RCsvDS.Remote:RRawFile.Remote:RSqliteDS.Davix:TFile.ReadWithoutGlobalRegistrationWeb:TFile.ReadWithoutGlobalRegistrationNet:RNTuple.TClassEBO; [==========] Running 9 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 9 tests from RColumnElementEndian; [ RUN ] RColumnElementEndian.Float; [ OK ] RColumnElementEndian.Float (6 ms); [ RUN ] RColumnElementEndian.Double; [ OK ] RColumnElementEndian.Double (3 ms); [ RUN ] RColumnElementEndian.Int16; [ OK ] RColumnElementEndian.Int16 (0 ms); [ RUN ] RColumnElementEndian.UInt16; [ OK ] RColumnElementEndian.UInt16 (0 ms); [ RUN ] RColumnElementEndian.Int32; [ OK ] RColumnElementEndian.Int32 (0 ms); [ RUN ] RColumnElementEndian.UInt32; [ OK ] RColumnElementEndian.UInt32 (0 ms); [ RUN ] RColumnElementEndian.Int64; [ OK ] RColumnElementEndian.Int64 (0 ms); [ RUN ] RColumnElementEndian.UInt64; [ OK ] RColumnElementEndian.UInt64 (0 ms); [ RUN ] RColumnElementEndian.Int64Int32; /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/test/ntuple_endian.cxx:286: Failure; Expected equality of these values:; ints[0]; Which is: 1234605615003729920; 0x0000000011223344; Which is: 287454020; /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12426:3547,test,test,3547,https://root.cern,https://github.com/root-project/root/issues/12426,1,['test'],['test']
Testability,"=0x55ed262bfe60 ""/scratch2/root-debug2/./test_cpp.so"", entry=0x7f54c912f665 """", system=false) at /usr/local/src/conda/root_base-6.25.2/root-source/core/base/src/TSystem.cxx:1942; #56 0x00007f54c8fc7a69 in TSystem::<lambda(const TString&)>::operator() (__closure=<synthetic pointer>, __closure=<synthetic pointer>, lib=...) at /usr/local/src/conda/root_base-6.25.2/root-source/core/base/src/TSystem.cxx:3364; #57 TSystem::CompileMacro (this=<optimized out>, filename=<optimized out>, opt=<optimized out>, library_specified=<optimized out>, build_dir=<optimized out>, dirmode=<optimized out>) at /usr/local/src/conda/root_base-6.25.2/root-source/core/base/src/TSystem.cxx:3813; #58 0x00007f54c1a3320a in TCling::ProcessLine (this=0x55ed24bb1eb0, line=<optimized out>, error=0x7fffe1b0c04c) at /usr/local/src/conda/root_base-6.25.2/root-source/core/metacling/src/TCling.cxx:2542; #59 0x00007f54c1a33942 in TCling::ProcessLineSynch (this=0x55ed24bb1eb0, line=0x55ed262c0650 "".X /scratch2/root-debug2/./test.cpp++"", error=0x7fffe1b0c04c) at /usr/local/src/conda/root_base-6.25.2/root-source/core/metacling/src/TCling.cxx:3520; #60 0x00007f54c8f55d48 in TApplication::ExecuteFile (file=<optimized out>, error=0x7fffe1b0c04c, keep=<optimized out>) at /usr/local/src/conda/root_base-6.25.2/root-source/core/base/src/TApplication.cxx:1591; #61 0x00007f54c8f56a7d in TApplication::ProcessFile (keep=<optimized out>, error=0x7fffe1b0c04c, file=0x7fffe1b0c053 ""test.cpp++"", this=0x55ed24b82e70) at /usr/local/src/conda/root_base-6.25.2/root-source/core/base/src/TApplication.cxx:1463; #62 TApplication::ProcessLine (this=0x55ed24b82e70, line=<optimized out>, sync=<optimized out>, err=0x7fffe1b0c04c) at /usr/local/src/conda/root_base-6.25.2/root-source/core/base/src/TApplication.cxx:1436; #63 0x00007f54c943d752 in TRint::ProcessLineNr (this=0x55ed24b82e70, filestem=<optimized out>, line=0x7fffe1b0c050 "".x test.cpp++"", error=0x7fffe1b0c04c) at /usr/local/src/conda/root_base-6.25.2/root-source/core/rint/src/",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9595:14437,test,test,14437,https://root.cern,https://github.com/root-project/root/issues/9595,1,['test'],['test']
Testability,"=874661. The stacktrace of the threads when the test was hanging was the following:. ```; Thread 2 (Thread 0xa2784b40 (LWP 4590)):; #0 0xb7fa1d61 in __kernel_vsyscall (); #1 0xb6ab9462 in futex_wait_cancelable (private=0, expected=0, futex_word=0xbf9af3e4) at ../sysdeps/unix/sysv/linux/futex-internal.h:88; #2 __pthread_cond_wait_common (abstime=0x0, mutex=0xbf9af424, cond=0xbf9af3bc) at pthread_cond_wait.c:502; #3 __pthread_cond_wait (cond=0xbf9af3bc, mutex=0xbf9af424) at pthread_cond_wait.c:655; #4 0xb69c905e in std::condition_variable::wait(std::unique_lock<std::mutex>&) () from /lib/i386-linux-gnu/libstdc++.so.6; #5 0x0047e8d7 in std::condition_variable::wait<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()>::<lambda()> >(std::unique_lock<std::mutex> &, TThreadedObject_GetNSlots_Test::<lambda()>::<lambda()>) (this=0xbf9af3bc, __lock=..., __p=...) at /usr/include/c++/8/condition_variable:99; #6 0x0047e11a in TThreadedObject_GetNSlots_Test::<lambda()>::operator()(void) const (__closure=0xa1e00674); at /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:167; #7 0x0047f5fc in std::__invoke_impl<void, TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(std::__invoke_other, TThreadedObject_GetNSlots_Test::<lambda()> &&) (; __f=...) at /usr/include/c++/8/bits/invoke.h:60; #8 0x0047f2b8 in std::__invoke<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(TThreadedObject_GetNSlots_Test::<lambda()> &&) (__fn=...); at /usr/include/c++/8/bits/invoke.h:95; #9 0x00480966 in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::_M_invoke<0>(std::_Index_tuple<0>) (this=0xa1e00674); at /usr/include/c++/8/thread:244; #10 0x0048090b in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::operator()(void) (this=0xa1e00674); at /usr/include/c++/8/thread:253; #11 0x004808c1 in std::thread::_State_impl<std::thread::_Invoker<std::t",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5596:1351,test,test,1351,https://root.cern,https://github.com/root-project/root/pull/5596,2,['test'],"['test', 'testTThreadedObject']"
Testability,"====. The lines below might hint at the cause of the crash.; You may get help by asking at the ROOT forum http://root.cern.ch/forum; Only if you are really convinced it is a bug in ROOT then please submit a; report at http://root.cern.ch/bugs Please post the ENTIRE stack trace; from above as an attachment in addition to anything else; that might help us fixing this issue.; ===========================================================; #5 0x00007fe98b1ddee9 in TPad::FillCollideGrid(TObject*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so; #6 0x00007fe98b1de2eb in TPad::PlaceBox(TObject*, double, double, double&, double&) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so; #7 0x0000000000401293 in main (argc=<optimized out>, argv=<optimized out>) at /afs/cern.ch/user/a/averbyts/Projects/zevis/test/pad2.cxx:84; ===========================================================. [averbyts@lxplus701 test]$ . ```; ## Expected behavior; No FPE. ## To Reproduce; Code:. ```; #include <TCanvas.h>; #include <TPad.h>; #include <TH1D.h>; #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT; #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X; // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts); {; static fenv_t fenv;; unsigned int new_excepts = excepts & FE_ALL_EXCEPT;; // previous masks; unsigned int old_excepts;. if (fegetenv(&fenv)) {; return -1;; }; old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask; fenv.__control &= ~new_excepts;; fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;; }. inline int fedisableexcept(unsigned int excepts); {; static fenv_t fenv;; unsigned int new_excepts = excepts & FE_ALL_EXCEPT;; // all previous masks; unsigned int old_excepts;. if (fegetenv(&fenv)) {; return -1;; }; old_excepts = fenv.__cont",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6428:2412,test,test,2412,https://root.cern,https://github.com/root-project/root/issues/6428,1,['test'],['test']
Testability,"============; #5 0x00007f9ec9b38d5b in TClingCallFunc::SetArg(long) () from /home/root-6.26.04/builddir/lib/libCling.so; #6 0x00007f9ecff6d683 in TApplication::LoadGraphicsLibs() () from /home/root-6.26.04/builddir/lib/libCore.so; #7 0x00007f9ecff6ca2a in TApplication::InitializeGraphics() () from /home/root-6.26.04/builddir/lib/libCore.so; #8 0x00007f9ecff70d89 in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/root-6.26.04/builddir/lib/libCore.so; #9 0x00000000004011fc in main (); ===========================================================; ```. **Expected behavior**. The output messages should be:. ```; Memory mapped file: hsimple.map; Title: Memory Mapped Hist; Option: CREATE; Mapped Memory region: 0xb46a5000 - 0xb46be000 (0.10 MB); Current breakval: 0xb46b0000; Object Class Size ; hpx TH1F 1024; ```. **To Reproduce:**. The source code test.cpp I am using follows:; ```cpp; // test.cpp; #include ""TROOT.h""; #include ""TApplication.h""; #include ""TH1F.h""; #include ""TH2F.h""; #include ""TMapFile.h""; #include ""TRandom.h"". void hprod();. #ifndef __CINT__ ; int main(int argc, char **argv); {; TApplication* theApp = new TApplication(""Shared Mem - Producer"", &argc, argv);; hprod();; theApp->Run();; }; #endif . void hprod(); {; TH1F *hpx;; TH2F *hpxpy;; TProfile *hprof;; TMapFile::SetMapAddress(0xb46a5000);; TMapFile *mfile = TMapFile::Create(""hsimple.map"",""RECREATE"", 100000,""Memory Mapped Hist"");; hpx = new TH1F(""hpx"",""This is the px distribution"",100,-4,4);; ; // Print status of mapped file; mfile->Print();; ; // Endless loop filling histograms with random numbers; Float_t px, py, pz;; int ii = 0;; while(1); {; gRandom->Rannor(px,py);; pz = px*px + py*py;; hpx->Fill(px);; if (!(ii % 10)); { ; 	 mfile->Update();; 	 if (!ii) mfile->ls(); // print contents of mapped file after }; 	 ii++;; }; }; }; ```. To run mu code: ./test. **My setup**; 1. ROOT version: ROOT 6.26/04; 2. Operating system: Fedora 31; 3. How you obtained ROOT: I built it myself.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11353:3783,test,test,3783,https://root.cern,https://github.com/root-project/root/issues/11353,1,['test'],['test']
Testability,"=============================; #0 0x00007fc0d7d5e46c in waitpid () from /lib64/libc.so.6; #1 0x00007fc0d7cdbf62 in do_system () from /lib64/libc.so.6; #2 0x00007fc0d99070bc in TUnixSystem::StackTrace() () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libCore.so; #3 0x00007fc0d99046d5 in TUnixSystem::DispatchSignals(ESignals) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libCore.so; #4 <signal handler called>; #5 0x00007fc0d9056288 in TPad::Close(char const*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so; #6 0x00007fc0d905f746 in TPad::~TPad() [clone .part.0] () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so; #7 0x00007fc0d905f919 in TPad::~TPad() () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so; #8 0x000000000040124b in main (argc=<optimized out>, argv=<optimized out>) at test/pad6.cxx:9; ===========================================================. The lines below might hint at the cause of the crash.; You may get help by asking at the ROOT forum http://root.cern.ch/forum; Only if you are really convinced it is a bug in ROOT then please submit a; report at http://root.cern.ch/bugs Please post the ENTIRE stack trace; from above as an attachment in addition to anything else; that might help us fixing this issue.; ===========================================================; #5 0x00007fc0d9056288 in TPad::Close(char const*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so; #6 0x00007fc0d905f746 in TPad::~TPad() [clone .part.0] () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so; #7 0x00007fc0d905f919 in TPad::~TPad() () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so;",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6453:1370,test,test,1370,https://root.cern,https://github.com/root-project/root/issues/6453,1,['test'],['test']
Testability,"================================; #10 0x00002b4bd102eaff in raise () from /lib64/libc.so.6; #11 0x00002b4bd1001ea5 in abort () from /lib64/libc.so.6; #12 0x00002b4bd1001d79 in __assert_fail_base.cold.0 () from /lib64/libc.so.6; #13 0x00002b4bd1027456 in __assert_fail () from /lib64/libc.so.6; #14 0x00002b4bd679065b in getLambdaCallOperatorHelper(clang::CXXRecordDecl const&) [clone .part.0] () from /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/CMSSW_13_2_ROOT628_X_2023-05-04-2300/external/el8_amd64_gcc11/lib/libCling.so; #15 0x00002b4bd67915cb in clang::CXXRecordDecl::getLambdaCallOperator() const () from /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/CMSSW_13_2_ROOT628_X_2023-05-04-2300/external/el8_amd64_gcc11/lib/libCling.so; #16 0x00002b4bd39f6a20 in clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseLambdaExpr(clang::LambdaExpr*, llvm::SmallVectorImpl<llvm::PointerIntPair<clang::Stmt*, 1u, bool, llvm::PointerLikeTypeTraits<clang::Stmt*>, llvm::PointerIntPairInfo<clang::Stmt*, 1u, llvm::PointerLikeTypeTraits<clang::Stmt*> > > >*) () from /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/CMSSW_13_2_ROOT628_X_2023-05-04-2300/external/el8_amd64_gcc11/lib/libCling.so; #17 0x00002b4bd39ef4d5 in clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseStmt(clang::Stmt*, llvm::SmallVectorImpl<llvm::PointerIntPair<clang::Stmt*, 1u, bool, llvm::PointerLikeTypeTraits<clang::Stmt*>, llvm::PointerIntPairInfo<clang::Stmt*, 1u, llvm::PointerLikeTypeTraits<clang::Stmt*> > > >*) [clone .constprop.0] () from /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/CMSSW_13_2_ROOT628_X_2023-05-04-2300/external/el8_amd64_gcc11/lib/libCling.so; #18 0x00002b4bd39ea96d in clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*) [clone .part.0] () from /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/CMSSW_13_2_ROOT628_X_2023-05-04-2300/ext",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12771:16799,test,tests,16799,https://root.cern,https://github.com/root-project/root/issues/12771,1,['test'],['tests']
Testability,"===========================================; There was a crash.; This is the entire stack trace of all threads:; ===========================================================; gdb.printing.register_pretty_printer(gdb.current_objfile(),; #0 0x00007fc2c245846c in __libc_waitpid (pid=25123, stat_loc=stat_loc; entry=0x7ffefaecb520, options=options; entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31; #1 0x00007fc2c23d5f62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148; #2 0x00007fc2c55d95dc in TUnixSystem::StackTrace (this=0xcf6980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408; #3 0x00007fc2c55dc06a in TUnixSystem::DispatchSignals (this=0xcf6980, sig=kSigSegmentationViolation) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646; #4 <signal handler called>; #5 0x00007fc2c54dd41d in TObject::AppendPad (this=0x190c210, option=0x400c96 """") at /usr/src/debug/root-6.22.02/core/base/src/TObject.cxx:112; #6 0x0000000000400b76 in main (argc=<optimized out>, argv=<optimized out>) at test/pad4.cxx:13; ===========================================================. The lines below might hint at the cause of the crash.; You may get help by asking at the ROOT forum http://root.cern.ch/forum; Only if you are really convinced it is a bug in ROOT then please submit a; report at http://root.cern.ch/bugs Please post the ENTIRE stack trace; from above as an attachment in addition to anything else; that might help us fixing this issue.; ===========================================================; #5 0x00007fc2c54dd41d in TObject::AppendPad (this=0x190c210, option=0x400c96 """") at /usr/src/debug/root-6.22.02/core/base/src/TObject.cxx:112; #6 0x0000000000400b76 in main (argc=<optimized out>, argv=<optimized out>) at test/pad4.cxx:13; ===========================================================. ```. ## Expected behavior; No crash. ## To Reproduce; Code:. ```; #include <TCanvas.h>; #include <TText.h>; #include <TPad.h>; #include <fenv.h>. int ma",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6447:1235,test,test,1235,https://root.cern,https://github.com/root-project/root/issues/6447,1,['test'],['test']
Testability,"==================================================== FAILURES =============================================================================; _______________________________________________________________ test_data_frame_vec_of_vec_of_real ________________________________________________________________; RuntimeWarning: awkward::ListArray_63uTHafmYE: base class awkward::ArrayView has no streamer or dictionary it will not be saved. The above exception was the direct cause of the following exception:. tmp_path = PosixPath('/private/var/folders/wr/rfy5xgb56ls2dygmfnhx35lc0000gn/T/pytest-of-yana/pytest-15/test_data_frame_vec_of_vec_of_0'). def test_data_frame_vec_of_vec_of_real(tmp_path):; filename = os.path.join(tmp_path, ""test-listarray.root""); ; ak_array_in = ak.Array([[[1.1], [2.2]], [[3.3], [4.4, 5.5]]]); ; data_frame = ak.to_rdataframe({""x"": ak_array_in}); ; assert data_frame.GetColumnType(""x"").startswith(""awkward::ListArray_""); ; ak_array_out = ak.from_rdataframe(; data_frame,; columns=(""x"",),; ); assert ak_array_in.to_list() == ak_array_out[""x""].to_list(); ; #with pytest.raises(SystemError):; > data_frame.Snapshot(""ListArray"", filename, (""x"",)); E SystemError: ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Snapshot(basic_string_view<char,char_traits<char> > treename, basic_string_view<char,char_traits<char> > filename, initializer_list<string> columnList, const ROOT::RDF::RSnapshotOptions& options = ROOT::RDF::RSnapshotOptions()); E ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Snapshot(basic_string_view<char,char_traits<char> > treename, basic_string_view<char,char_traits<char> > filename, const vector<string>& columnList, const ROOT::RDF::RSnapshotOptions& options = ROOT::RDF::RSnapshotOptions()); E ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoop",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11602:1568,assert,assert,1568,https://root.cern,https://github.com/root-project/root/issues/11602,1,['assert'],['assert']
Testability,"==ABORTING; [1] 5670 abort ./a.out AO2D.root; ```. Besides the crash, i would appreciate if one could show me how to create RNTuples in a given folder (which is probably something trivial I am missing). ### Reproducer. ```C++; #include <iostream>; #include <getopt.h>; #include <TFile.h>; #include <TTree.h>; #include <TKey.h>; #include <TLeaf.h>; #include <ROOT/RNTuple.hxx>; #include <ROOT/RNTupleModel.hxx>; #include <ROOT/RField.hxx>. void print_help(); {; std::cout << ""Usage: ao2dToAO2NT [options] input_file"" << std::endl;; std::cout << ""Options:"" << std::endl;; std::cout << "" -o, --output-file <file> Output file name"" << std::endl;; std::cout << "" -h, --help Print this help message"" << std::endl;; std::cout << "" -v, --verbose Verbose output"" << std::endl;; }. bool verbose = false;; std::string outputFile = ""ntuple.root"";; std::string inputFile;. void debug(const std::string& message); {; if (verbose) {; std::cout << message << std::endl;; }; }. void log(const std::string& message); {; std::cout << message << std::endl;; }. void error(const std::string& message); {; std::cerr << message << std::endl;; exit(1);; }. int main(int argc, char* argv[]); {; // Use getopt_long to parse the command line; // the first positional argument is the input file.; // -o is the output file; // -h is the help message; // -v is the verbose flag; static struct option long_options[] = {; {""output-file"", required_argument, nullptr, 'o'},; {""help"", no_argument, nullptr, 'h'},; {""verbose"", no_argument, nullptr, 'v'},; {nullptr, 0, nullptr, 0}};; int option_index = 0;; while (true) {; int c = getopt_long(argc, argv, ""o:hv"", long_options, &option_index);; // If the help flag is set, print the help message and exit; if (c == 'h') {; print_help();; return 0;; }; // If the verbose flag is set, print the verbose message; else if (c == 'v') {; verbose = true;; }; // If the output file is set, print the output file name; else if (c == 'o') {; outputFile = optarg;. } else if (c == -1) {; break;; } ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13996:9174,log,log,9174,https://root.cern,https://github.com/root-project/root/issues/13996,1,['log'],['log']
Testability,"> 1261 - tutorial-rcanvas-df104-py (Failed). This failure seems to be linked to memory limitation. On my node there is 48 cores but the `ulimit` is set to 16Gb. When reducing the number of cores down to 35 cores then the test starts to sometimes complete sometimes fails.; The error output sometimes contains:; ```; RDataFrame::Run: event loop was interrupted; RDataFrame::Run: event loop was interrupted; RDataFrame::Run: event loop was interrupted; RDataFrame::Run: event loop was interrupted; RDataFrame::Run: event loop was interrupted; ```; and always contains:; ```; Traceback (most recent call last):; File ""/github/home/ROOT-CI/build/tutorials/rcanvas/df104.py"", line 89, in <module>; ROOT.RDF.RunGraphs([hists[s] for s in [""ggH"", ""VBF"", ""data""]]); cppyy.gbl.std.bad_alloc: unsigned int ROOT::RDF::RunGraphs(vector<ROOT::RDF::RResultHandle>) =>; bad_alloc: std::bad_alloc; ```. **And indeed, the process easily reaches 16Gb. With 32 cores, the peak is 15Gb.**",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16252:221,test,test,221,https://root.cern,https://github.com/root-project/root/issues/16252,1,['test'],['test']
Testability,"> const&) () from /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/CMSSW_13_2_ROOT628_X_2023-05-04-2300/external/el8_amd64_gcc11/lib/libCling.so; #28 0x00002b4bd37824e9 in ExecAutoParse (what=0x2b4bf4038162 ""n#line 1 ""DataFormatsBTauReco_xr dictionary payload""nn#ifndef CMS_DICT_IMPLn #define CMS_DICT_IMPL 1n#endifn#ifndef _REENTRANTn #define _REENTRANT 1n#endifn#ifndef GNUSOURCEn #define GNUSOURCE 1n#e""..., header=false, interpreter=0x681b00) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/core/metacling/src/TCling.cxx:6318; #29 0x00002b4bd3782d71 in TCling::AutoParseImplRecurse (this=0x5628c0, cls=0xc1cf750 ""reco::TemplatedSecondaryVertexTagInfo<reco::IPTagInfo<edm::RefVector<vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<vector<reco::Track>,reco::Track> >,reco::JTATagInfo>,reco::Vertex>""..., topLevel=true) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/core/metacling/src/TCling.cxx:6423; #30 0x00002b4bd37833f1 in TCling::AutoParse (this=0x5628c0, cls=0xc1cf750 ""reco::TemplatedSecondaryVertexTagInfo<reco::IPTagInfo<edm::RefVector<vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<vector<reco::Track>,reco::Track> >,reco::JTATagInfo>,reco::Vertex>""...) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/core/metacling/src/TCling.cxx:6508; #31 0x00002b4bd376ab6b in TClingLookupHelper__AutoParse (cname=0xc1cf750 ""reco::TemplatedSecondaryVertexTagInfo<reco::IPTagInfo<edm::RefVector<vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<vector<reco::Track>,reco::Track> >,reco::JTATagInfo>,reco::Vertex>""...) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/l",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12771:21478,test,tests,21478,https://root.cern,https://github.com/root-project/root/issues/12771,2,['test'],"['testBuildDir', 'tests']"
Testability,">. # This Pull request:. ## Changes or fixes:. Fix for #12152. Requires #12153. The idea is the following:. - add `libbsd` option & `find_packge` module defining `LIBBSD::libbsd` target; - define `R__USE_LIBBSD` in `RConfigure.h` if `libbsd` enabled; - adjust `strlcpy` to include `bsd/string.h` if `R__USE_LIBBSD` defined; - add `LIBBSD::libbsd` to the public linking interface of `Clib`. Unfortunately, this does not work. The reason here is that (for some reason beyond me) `rootcling_stage1`, `libCling.so`, `bin/root` and probably more don't link to `Clib` as *target* but instead fetch the *target object* directly. Relevant CMake documentation:; - [`$<TARGET_OBJECTS:tgt`](https://cmake.org/cmake/help/latest/manual/cmake-generator-expressions.7.html#genex:TARGET_OBJECTS); - [Object Libraries](https://cmake.org/cmake/help/latest/manual/cmake-buildsystem.7.html#object-libraries); - [Linking Object Libraries](https://cmake.org/cmake/help/v3.13/command/target_link_libraries.html#linking-object-libraries). Example using `rootcling_stage1`:. Currently in CMake:; ```cmake; ROOT_EXECUTABLE(rootcling_stage1 src/rootcling_stage1.cxx; $<TARGET_OBJECTS:Clib>; $<TARGET_OBJECTS:ClingUtils>; $<TARGET_OBJECTS:Dictgen>; $<TARGET_OBJECTS:Foundation_Stage1>; LIBRARIES ${CLING_LIBRARIES} ${CMAKE_DL_LIBS} ${CMAKE_THREAD_LIBS_INIT} ${ROOT_ATOMIC_LIBS}; NOINSTALL); ```; I link against the `Clib` object library, but ignores any target properties like for example this line:; ```cmake; # alternative for strlcpy on linux, see https://github.com/root-project/root/issues/12152; if(libbsd); target_link_libraries(Clib PUBLIC LIBBSD::libbsd); endif(); ```. I don't see why using the `Clib` target directly should break anything? It's linked also directly, the only difference is that target properties are ignored which shouldn't be the case. I added a commit with this approach and it seems to work. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #12152.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12154:1973,test,tested,1973,https://root.cern,https://github.com/root-project/root/pull/12154,1,['test'],['tested']
Testability,">SetMarkerStyle(20);; 	g->Draw(""AP"");; 	// h->Draw(""HIST"");; 	c->Print(""test.png"");. return 0;; }; ```; compiling:; * g++ -std=c++11 -fPIC --shared -o inc.so inc.cxx; * g++ -std=c++11 -o test test.cxx inc.so `root-config --libs --glibs --cflags` && ./test; ; result:; ```; ======= Backtrace: =========; /lib64/libc.so.6(+0x80f87)[0x7fd6589a6f87]; /lib64/libc.so.6(+0x8155e)[0x7fd6589a755e]; /lib64/libfreetype.so.6(+0x3ea1c)[0x7fd65771ea1c]; /lib64/libfreetype.so.6(+0x3fa02)[0x7fd65771fa02]; /lib64/libfreetype.so.6(+0x1fd4c)[0x7fd6576ffd4c]; /lib64/libfreetype.so.6(FT_Done_Face+0xa1)[0x7fd6576ffe51]; /root/6.08.00/lib/libGraf.so.6.08(_ZN3TTF7CleanupEv+0x5e)[0x7fd65bb62a7e]; /lib64/libc.so.6(__cxa_finalize+0x9a)[0x7fd65896000a]; /root/6.08.00/lib/libGraf.so.6.08(+0x638a3)[0x7fd65baef8a3]; ======= Memory map: ========; 00400000-0040b000 r-xp 00000000 00:2e 3242707291 /work/test/test; 0060a000-0060b000 r--p 0000a000 00:2e 3242707291 /work/test/test; 0060b000-0060c000 rw-p 0000b000 00:2e 3242707291 /work/test/test; 01644000-02e78000 rw-p 00000000 00:00 0 [heap]; 7fd638000000-7fd638021000 rw-p 00000000 00:00 0 ; 7fd638021000-7fd63c000000 ---p 00000000 00:00 0 ; 7fd63ffc8000-7fd6400c3000 r--p 00000000 00:32 432514122 /root/6.08.00/fonts/FreeSans.otf; 7fd6400c3000-7fd640142000 r-xp 00000000 00:32 432291140 /root/6.08.00/lib/libHistPainter.so.6.08.00; 7fd640142000-7fd640342000 ---p 0007f000 00:32 432291140 /root/6.08.00/lib/libHistPainter.so.6.08.00; 7fd640342000-7fd640344000 r--p 0007f000 00:32 432291140 /root/6.08.00/lib/libHistPainter.so.6.08.00; 7fd640344000-7fd640346000 rw-p 00081000 00:32 432291140 /root/6.08.00/lib/libHistPainter.so.6.08.00; 7fd640346000-7fd640347000 rw-p 00000000 00:00 0 ; 7fd640742000-7fd640744000 r-xp 00000000 08:02 80985 /usr/lib64/libXau.so.6.0.0; 7fd640744000-7fd640944000 ---p 00002000 08:02 80985 /usr/lib64/libXau.so.6.0.0; 7fd640944000-7fd640945000 r--p 00002000 08:02 80985 /usr/lib64/libXau.so.6.0.0; 7fd640945000-7fd640946000 rw-p 00003000 08:02",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8256:1799,test,test,1799,https://root.cern,https://github.com/root-project/root/issues/8256,6,['test'],['test']
Testability,"@bbockelm ; 1. I move signal handling from TSystem to a new class called TSigHandling and use gSigHandling as a global signal handling object in ROOT.; 2. To comply with some function calls like ""gSystem->ResetSignals()"". I move old ResetSignals() to the new class so TUnixSystem::ResetSignals() just call gSigHandling->ResetSignals(). I could also go over all such function calls and replace them with gSigHandling->(functions) if necessary.; 2. I replace old unsafe functions in signal handlers with thread-safe ones.; 3. I only implement StackTrace functions for SIGBUS, SIGSEGV, SIGILL. Other signals are still using default StackTrace functions. kSigAlarm and kSigChild are ignored for my current implementation. Do we need to change other signal handlers?; 4. @pcanal I have some problem with running roottest. I asked a question here:; https://github.com/root-mirror/root/pull/84; Could you take a look at it and I will write test case this patch also.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/133:933,test,test,933,https://root.cern,https://github.com/root-project/root/pull/133,1,['test'],['test']
Testability,"@bbockelm @pcanal This patch copies the code of signal handling in CMSSW. It avoids async-unsafe functions in signal handler functions. . For reference, see the link https://github.com/bbockelm/cmssw/blob/stacktrace_handler_revisit/FWCore/Services/src/InitRootHandlers.cc. I tried this patch with some simple multi-thread test cases and it worked fine. Is there any complicated test cases I can run? I think this patch is not very ready to merge, but it achieved basic functions. Any criticisms are welcome.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/97:322,test,test,322,https://root.cern,https://github.com/root-project/root/pull/97,2,['test'],['test']
Testability,"@bbockelm I am submitting a new pull request for signal handling:; 1. I move signal handling from TSystem to a new class called TSigHandling and use gSigHandling as a global signal handling object in ROOT.; 2. To comply with some function calls like ""gSystem->ResetSignals()"". I move old ResetSignals() to the new class so TUnixSystem::ResetSignals() just call gSigHandling->ResetSignals(). I could also go over all gSystem->(functions) and replace them with gSigHandling->(functions) if necessary.; 3. I replace old unsafe functions in signal handlers with thread-safe ones.; 4. I only implement StackTrace functions for SIGBUS, SIGSEGV, SIGILL. Other signals are still using default StackTrace functions. kSigAlarm and kSigChild are ignored for my current implementation. Do we need to change other signal handlers?; 5. @pcanal I have some problem with running roottest. I asked a question here:; #84; Could you take a look at it and I will write test case this patch also.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/134:949,test,test,949,https://root.cern,https://github.com/root-project/root/pull/134,1,['test'],['test']
Testability,"@dpiparo @bluehood Do we need such a thing? It would be super convenient in the analysis workflow because often a bunch of files are laying around in a directory, which you need to put all together into RDF:. ```bash; $ ls -l testdir/; a.root; b.root; c.root; ```. ```cpp; RDataFrame df(""tree"", CreateFilelist(""testdir""));; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2523:226,test,testdir,226,https://root.cern,https://github.com/root-project/root/pull/2523,2,['test'],['testdir']
Testability,@etejedor This seems to fix the problem with attaching a property to the class definition. I do not understand why we get an `bad argument to internal function` if we skip the proxy function ... Edit: These are the test failures: http://cdash.cern.ch/viewTest.php?onlyfailed&buildid=604404,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3170:215,test,test,215,https://root.cern,https://github.com/root-project/root/pull/3170,1,['test'],['test']
Testability,"@gganis Do we have somewhere tests for the name parsing? I couldn't find them. Also, we probably want to add tests for the parsing with options or queries.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4949:29,test,tests,29,https://root.cern,https://github.com/root-project/root/pull/4949,2,['test'],['tests']
Testability,@guitargeek PR for pythonization and test for RooAbsReal::plotOn() Pythonization,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7723:37,test,test,37,https://root.cern,https://github.com/root-project/root/pull/7723,1,['test'],['test']
Testability,"@jblomer, I thought I'd see if you had any comments about the approach before going ahead and splitting the rest. The idea is for tests to include the new convenience header `ntuple_test.hxx` and then we add a new line in the CMake file. I am not super experienced with CMake, so if there's an issue with including possibly extraneous libraries for each test file I can change it. . The tests are nicely structured, so I think I'll be able to script something for the grunt work.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5619:130,test,tests,130,https://root.cern,https://github.com/root-project/root/pull/5619,3,['test'],"['test', 'tests']"
Testability,"@lmoneta as discussed yesterday this is just the dump of our tanh approximation. I leave it up to you to decide how to do vectorisation. As seen between the ifndef statements, the vector unit is already used for a single evaluation of tanh (it is implemented as a fraction and numerator and denominator are calculated in parallel in the vector unit). I recon if one needs to do multiple tanh evaluations at the same time, one might want to swap between horizontal and vertical vectorisation. In the original, the if( x is large) tests were kept in UNLIKELY statements, I didn't follow up if this was because typical inputs in our use case are known, or because tanh is generally evaluated for small inputs …",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1044:529,test,tests,529,https://root.cern,https://github.com/root-project/root/pull/1044,1,['test'],['tests']
Testability,"@mkrzewic @eamjensen could you maybe give this a short test on FreeBSD? I hope that a ""vanilla"" configuration of ROOT should now succeed, without specifying any `LLVM_TARGETS_TO_BUILD`. Closes #14075",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14115:55,test,test,55,https://root.cern,https://github.com/root-project/root/pull/14115,1,['test'],['test']
Testability,"@oshadura @Axel-Naumann ; Dear Mentors,; Here's my pull request for the issue https://github.com/root-project/root/issues/6635.; Can you please review this. Please excuse any instances where the timeout parameter has been added unnecessarily as it wasn't clear to me how to test this. Since the desired interval for `TIMEOUT` hadn't been mentioned, I have added it as 600 s.; I'll fix any incorrect changes as soon as review comments and suggestions are added. I will squash the commits after the review. Thanks in advance !",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7136:274,test,test,274,https://root.cern,https://github.com/root-project/root/pull/7136,1,['test'],['test']
Testability,"@pcanal @bbockelm . This pull request fix the bug here https://sft.its.cern.ch/jira/browse/ROOT-8468. The fist error is due to the dangling pointer. ""buffer"" never gets to be allocated in the function GetUnzipBuffer. The second error is deallocating the memory ""ptr"" point to. Therefore, fUnzipChunks[idxtounzip] becomes null pointer. It should work now. To test the parallel unzipping, simply random generate events and read them. /PATH/TO/TEST/eventexe 1000 6 99 1 1000 (generate 1000 events with zlib); /PATH/TO/TEST/eventexe 1000 6 99 20 1000 (unzip and read 1000 events in sequential manner); /PATH/TO/TEST/eventexe 1000 6 99 21 1000 (unzip and read 1000 events in parallel)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/319:358,test,test,358,https://root.cern,https://github.com/root-project/root/pull/319,4,"['TEST', 'test']","['TEST', 'test']"
Testability,@pcanal IIRC you suggest a while ago that we should add a test for this.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15722:58,test,test,58,https://root.cern,https://github.com/root-project/root/pull/15722,1,['test'],['test']
Testability,@vepadulano . This PR departs from using RDFInternal::TypeID2TypeName and obtains the Demangled name. Fixes https://github.com/root-project/root/issues/14577. ### Checklist:. - [x] tested changes locally. gtest-root-dataframe-test-norootextension fails but seems like it does not have anything to do with this change.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14676:181,test,tested,181,https://root.cern,https://github.com/root-project/root/pull/14676,2,['test'],"['test-norootextension', 'tested']"
Testability,"@vepadulano @dpiparo . This PR fixes. - https://github.com/root-project/root/issues/7196. This issue is very case-dependent.; When trying to calculate memory usage, normally the actual free memory on the system is `free + buffer + cached `. If shared memory usage is high (e.g mmaping a big cache) the calculation is slightly different:; `(free + buffer/cache) - shared`. The author of **htop** mentions on [this](https://stackoverflow.com/questions/55090900/how-can-i-calculate-memory-utilisation-of-a-linux-server-using-sar-report) question that htop uses this convention(in 2016):. - Total used memory = MemTotal - MemFree; - Non cache/buffer memory = Total used memory - (Buffers + Cached memory). Now htop (managed by htop-dev) uses this (on https://github.com/htop-dev/htop/blob/main/linux/LinuxMachine.c#L210):. ```; const memory_t usedDiff = freeMem + cachedMem + sreclaimableMem + buffersMem;; host->usedMem = (totalMem >= usedDiff) ? totalMem - usedDiff : totalMem - freeMem;; ```. This issue intends to merge the total used memory to include cached instead of just free which isn't strictly a correct solution. This PR implements the current approach utilised by **htop** which includes the following fields to calculate `MemUsed`, `MemAvailable` and `SwapUsed`:. ```; Int_t fMemAvailable; // available RAM in MB; Int_t fMemCached; // cached RAM in MB; Int_t fMemBuffer; // buffer RAM in MB; Int_t fMemShared; // shared RAM in MB; Int_t fSwapCached; // cached swap in MB; Int_t fSReclaimable // slab that might be reclaimed; ```. Results:. ```; ➜ ROOT free -h; total used free shared buff/cache available; Mem: 23Gi 3.4Gi 7.4Gi 214Mi 12Gi 19Gi; Swap: 7.6Gi 2.1Gi 5.5Gi; ```. ```; ➜ ROOT root -l; root [0] MemInfo_t memInfo; gSystem->GetMemInfo(&memInfo);; root [1] cout << memInfo.fMemTotal << "" "" << memInfo.fMemUsed << "" "" << memInfo.fMemFree << endl;; 23877 2786 7562; root [2] ; ```; Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14695:1917,test,tested,1917,https://root.cern,https://github.com/root-project/root/pull/14695,1,['test'],['tested']
Testability,"@vgvassilev, here is the PR so solve the LLVM library conflicts when interfacing ROOT with Julia. I've limited the change to the interpreter package. I have 25 out of the 2140 tests that fail. It's likely to be due to my local environment. If it can easily be tested with the jenkins system, it will be faster that me trying to investigate the test failures. . Note. The parallel compilation is not working properly, independently of my changes: it fails many times and need to be restarted or build some package in single process mode. Is it a know problem ?. # This Pull request:. ## Changes or fixes:. Adds -Bsymbolic linker option for libCling.so in order get the symbols resolved internally; ; This is expected to solve conflicts when interfacing with other software using LLVM, like Julia. See https://github.com/JuliaHEP/ROOT.jl/issues/17#issuecomment-882719292. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8717:176,test,tests,176,https://root.cern,https://github.com/root-project/root/pull/8717,4,['test'],"['test', 'tested', 'tests']"
Testability,A [related PR](https://github.com/root-project/roottest/pull/74) in roottest adds a test for this case.; The fix will be backported to v6.10.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/919:84,test,test,84,https://root.cern,https://github.com/root-project/root/pull/919,1,['test'],['test']
Testability,A bunch of improvements to distributed module:; 1. Add all sources to the `py_compile` command in cmake; 2. Use postponed evaluation for type hints and avoid implicit import ROOT; 3. Test that `import DistRDF` has no side-effects: no implicit importing of ROOT and no implicit change of environment variables,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11241:183,Test,Test,183,https://root.cern,https://github.com/root-project/root/pull/11241,1,['Test'],['Test']
Testability,"A few fixes concerning the AsNumpy functionality, related to the iteration of a `vector<string>` and the use of stl strings as keys of Python dictionaries. This should fix the AsNumpy test failure here:; https://github.com/root-project/root/pull/5036#issuecomment-588256573",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5048:184,test,test,184,https://root.cern,https://github.com/root-project/root/pull/5048,1,['test'],['test']
Testability,"A follow-up from the [discussion on #12664](https://github.com/root-project/root/pull/12664#discussion_r1175726403). The main questions are:. 1. Is a ""dense representation"" (bit vector + default constructed elements for non-available items) really needed; 2. Where is the break-even for the dense representation vs. the sparse representation; 3. Does a ""modified dense"" representation make sense? The modified dense representation would skip creating unavailable items. In order to avoid counting all the 1-bits from the start of the cluster, this representation would need to additionally store the cumulative number of 1 bits per page, e.g. in the page meta-data or in a separate column. To help answer the question, we should fill a table with size figures for the following tests with a few MB of data:. - Nullable field of `bool`, `char`, `float`, `double`, `struct` of a few tens of bytes; - Fill levels 0%, 10%, 50%, 90%, 100%; - Using sparse, dense, modified dense representation; - zstd compressed and uncompressed. For typical compression ratios, the data should follow a typical distribution, e.g. Gauss.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12842:778,test,tests,778,https://root.cern,https://github.com/root-project/root/issues/12842,1,['test'],['tests']
Testability,"A lot of code but mainly due to the tests and pythonizations. Main place to focus on is `TMVA/RTensor.hxx`. In the following examples of the implemented features:. C++ example:. ```cpp; using namespace TMVA::Experimental;; RTensor<float> x({2, 3}); // container with shape (2, 3); x(0,0) = 1; // set element (0,0) to 1; cout << x(0, 0) << endl; // read element (0,0); // Returns:; // 1; cout << x << endl;; // Returns:; // { { 1, 0, 0 } { 0, 0, 0 } }; ```. Python example:. ```python; import ROOT; x = ROOT.TMVA.Experimental.RTensor(""float"")((2, 3)) # container with shape (2, 3); x[0,0] = 1 # set element (0,0); print(x[0,0]) # read element (0,0); # Returns:; # 1; print(x); # Returns:; # { { 1, 0, 0 } { 0, 0, 0 } }; ```. Memory adoption capability:. ```cpp; using namespace TMVA::Experimental;; float data[6] = {1, 2, 3, 4, 5, 6};; RTensor<float> x(data, {2, 3}); // adopt memory with given shape; cout << x << endl;; // Returns:; // { { 1, 2, 3 } { 4, 5, 6 } }; ```. Column-major and row-major memory ordering:. ```cpp; using namespace TMVA::Experimental;; float data[6] = {1, 2, 3, 4, 5, 6};; RTensor<float> x(data, {2, 3}, MemoryOrder::RowMajor);; cout << x << endl;; // Returns:; // { { 1, 2, 3 } { 4, 5, 6 } }; RTensor<float> x(data, {2, 3}, MemoryOrder::ColumnMajor);; cout << x << endl;; // Returns:; // { { 1, 3, 5 } { 2, 4, 6 } }; ```. RTensor to numpy conversion:. ```python; import ROOT; data = ROOT.std.vector(""float"")((1, 2, 3, 4, 5, 6)); x = ROOT.TMVA.Experimental.RTensor(""float"")(data.data(), (2, 3)); print(x); # Returns:; # { { 1, 2, 3 } { 4, 5, 6 } }. import numpy; y = numpy.asarray(x); print(y); # Returns:; # [[1, 2, 3],; # [4, 5, 6]]; ```. Missing features:. - [ ] STL iterator interface; - [ ] `ExpandDim` and `Squeeze` methods (shape manipulation); - [ ] `Apply` method (element manipulation, similar to STL iterator); - [ ] `ROOT.AsTensor` method (`numpy.array` to `RTensor` conversion)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2593:36,test,tests,36,https://root.cern,https://github.com/root-project/root/pull/2593,1,['test'],['tests']
Testability,"A minor detail was missing from the merged PR #4337, the training history plots automatically saved by TMVA-Gui were missing a filename. I recommend this fix to be merged into v6-20-00 soon since the 'Training History' feature is now in that branch. Test:. ```; . bin/thisroot.sh; cd tutorials/tmva/; make; ./TMVAClassification; root -l; TMVA::TMVAGui(""TMVA.root""); //Click on Training History... See the DNN_CPU_valError and trainingError plotted, not that data points are only added for every epoch printed in MethodDNN.cxx ; ```; Result excerpt:. > Info in TCanvas::Print: eps file dataset/plots/TrainingHistory.eps has been created; > Info in TCanvas::Print: file dataset/plots/TrainingHistory.png has been created; . Previously read:. > Info in TCanvas::Print: eps file dataset/plots/.eps has been created; > Info in TCanvas::Print: file dataset/plots/.png has been created. Any questions please ask",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4934:250,Test,Test,250,https://root.cern,https://github.com/root-project/root/pull/4934,1,['Test'],['Test']
Testability,"A minor detail was missing the merged PR #4337, the training history plots automatically saved by TMVA-Gui were missing a filename. I recommend this fix to be merged into v6-20-00 soon since the 'Training History' feature is now in that branch. Test:. ```; . bin/thisroot.sh; cd tutorials/tmva/; make; ./TMVAClassification; root -l; TMVA::TMVAGui(""TMVA.root""); //Click on Training History... See the DNN_CPU_valError and trainingError plotted, not that data points are only added for every epoch printed in MethodDNN.cxx ; ```. Result excerpt:. > Info in <TCanvas::Print>: eps file dataset/plots/TrainingHistory.eps has been created; > Info in <TCanvas::Print>: file dataset/plots/TrainingHistory.png has been created. Previously read:; > Info in <TCanvas::Print>: eps file dataset/plots/.eps has been created; > Info in <TCanvas::Print>: file dataset/plots/.png has been created. Any questions please ask",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4932:245,Test,Test,245,https://root.cern,https://github.com/root-project/root/pull/4932,1,['Test'],['Test']
Testability,"A new class DFDescription is introduced.; It has 2 member strings, corresponding to the brief and the full description.; It allows more interactive output of these strings. RInterface::Describe now returns a DFDescription object.; As brief description is the output from RInterface::DescribeDataset.; As full description is the remaining code from RInterface::Describe.; Moreover, RInterface::DescribeDataset is now a private method. RDFDescription has the following methods:; * AsString(bool) -> returning brief/full description as a string; * Print(bool) -> printing the content of AsString(bool); * overloaded<< -> returns ostream corresponding to AsString(shortFormat=false); * printValue -> returns string corresponding to AsString(shortFomat=false); * __repr__ pythonization -> assigning __repr__ to AsString(shortFormat=false). Tests and Tutorials were adapted correspondingly. This PR fixes #8893",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9597:835,Test,Tests,835,https://root.cern,https://github.com/root-project/root/pull/9597,2,['Test'],['Tests']
Testability,"A new mechanism is suggested to enable function signatures that accept both references to RooFit arguments, or `double`s that will be implicitly converted to `RooConst&`. The only thing that you need to do is to replace for example `RooAbsReal&` with `RooAbsReal::Ref` (or `RooAbsArg::Ref` if you want to use the RooAbsArg base class). To test this mechanism, it is now supported for the `RooGaussian` and `RooExtendedPdf` and tested in the rf311 tutorial and corresponding `stressRooFit` unit test.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12036:339,test,test,339,https://root.cern,https://github.com/root-project/root/pull/12036,3,['test'],"['test', 'tested']"
Testability,"A number of test failures have to be fixed in the experimental PyROOT builds:. https://epsft-jenkins.cern.ch/job/root-exp-pyroot/8/. This PR temporarily disables those failing tests for the experimental PyROOT builds, and they will be re-enabled progressively as they are fixed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3255:12,test,test,12,https://root.cern,https://github.com/root-project/root/pull/3255,2,['test'],"['test', 'tests']"
Testability,"A number of test failures have to be fixed in the experimental PyROOT builds:. https://epsft-jenkins.cern.ch/job/root-exp-pyroot/9/. This PR temporarily flags those tests as ""will fail"" for the experimental PyROOT builds, and they will be restored progressively as they are fixed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3260:12,test,test,12,https://root.cern,https://github.com/root-project/root/pull/3260,2,['test'],"['test', 'tests']"
Testability,"A previous commit dropped the use of PyROOT_PyUnicode_AsStringChecked, which in Py2 corresponds to PyString_AsString, which accepts unicode objects. This PR should fix this test failure seen in the nightlies:; http://cdash.cern.ch/testSummary.php?project=1&name=roottest-python-JupyROOT-simpleCppMagic_notebook&date=2019-09-10",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4372:173,test,test,173,https://root.cern,https://github.com/root-project/root/pull/4372,2,['test'],"['test', 'testSummary']"
Testability,"A recent refactoring in RDF introduced an incompatibility with gcc; 7.5.0: clang and that gcc version disagree on the address of the; std::map argument passed to InitColumnReaders.; RCustomColumn<...>::InitSlot, the _jitted_ caller, sees the correct; address, but InitColumnReaders<...>, the _compiled_ callee, sees a; different address. For reasons known only to gcc 7.5.0, ~~moving the first function; argument to the last position~~ reducing the number of function; arguments (by aggregating some of them in a helper struct) resolves; the ABI incompatibility.; Valgrind could see an access to invalid memory before, and it does; not anymore. This should fix [this crash](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/94/testReport/junit/projectroot.root/dataframe/roottest_root_dataframe_test_snapshot/) in the conda nightly builds and [these test failures](https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu18.04,SPEC=nortcxxmod,V=master/2614/) in ROOT's nightlies on ubuntu 18.04.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6231:753,test,testReport,753,https://root.cern,https://github.com/root-project/root/pull/6231,2,['test'],"['test', 'testReport']"
Testability,"A steady memory increase when iteratively calling RooAbsPdf::fitTo was reported in the forum:; https://root-forum.cern.ch/t/roofit-memory-increase-per-fitto-iteration/44726. It can be reproduced with this C++ code:. ```C++; #include ""RooFitResult.h""; #include ""RooDataSet.h""; #include ""RooRealVar.h""; #include ""RooGaussian.h""; #include ""RooPlot.h""; #include ""RooMsgService.h"". #include ""TRandom3.h""; #include ""TSystem.h"". void test() {. using namespace std;. RooRealVar x(""x"",""x"",-10,10);; RooDataSet d(""d"",""d"",RooArgSet(x));; RooRealVar s(""s"",""s"",1,1,10);; RooRealVar m(""m"",""m"",0,-10,10);; RooGaussian g(""gauss"",""gauss(x,m,s)"",x,m,s);; RooPlot *f=x.frame();. for (Int_t j=0; j<300; ++j){; x.setVal(gRandom->Gaus(0,1));; d.add(x);; }. RooMsgService::instance().getStream(1).removeTopic(RooFit::Minimization);. ProcInfo_t pinfo;; int startMemResident;; int endMemResident;; int niters=1000000;; RooArgSet input=RooArgSet(x);; for (Int_t i=0; i<niters; i++) {; std::unique_ptr<RooFitResult> roo_result{; g.fitTo(d,RooFit::PrintLevel(-1),RooFit::Save(),; RooFit::Minos(true),RooFit::BatchMode(true),RooFit::Save()); };; x.setVal(0);; g.getVal(input);. gSystem->GetProcInfo(&pinfo);; if(i % 100 == 0) {; std::cout << i << "" memory usage "" << pinfo.fMemResident; << "" "" << pinfo.fMemVirtual << std::endl;; }; if (i==0); startMemResident=pinfo.fMemResident;; if (i==(niters-1)); endMemResident=pinfo.fMemResident;; }. int deltaMem=endMemResident-startMemResident;; double avgMem=(double)deltaMem/niters;; cout << endl << ""Memory increase = "" << deltaMem << endl;; cout << ""Avg increase per iteration = "" << avgMem << endl;; }; ```. The increase can be completely eliminated by not using the memory pool for RooDataSet. It is remarkable that the memory pool itself doesn't seem to be the problem. In fact, one can replace `RooDataSet::operator new` and `RooDataSet::operator delete` such that the memory pool is still active, but we don't use the addresses it gives us and pretend to deallocate immediately a",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8323:427,test,test,427,https://root.cern,https://github.com/root-project/root/issues/8323,1,['test'],['test']
Testability,"A test is still missing, I'll add it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3683:2,test,test,2,https://root.cern,https://github.com/root-project/root/pull/3683,1,['test'],['test']
Testability,A unit test based to check that this is done correctly was also; implemented. Closes #10473.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10495:7,test,test,7,https://root.cern,https://github.com/root-project/root/pull/10495,1,['test'],['test']
Testability,"ABEL/slc6-physical/build/projects/ROOT-6.06.02/src/ROOT/6.06.02/core/unix/src/TUnixSystem.cxx:2301; #4 0x00007f2a62a79d6b in TUnixSystem::DispatchSignals (this=0x1225750, sig=kSigSegmentationViolation) at /var/build/jenkins/workspace/lcg_release/BUILDTYPE/Debug/COMPILER/gcc49/LABEL/slc6-physical/build/projects/ROOT-6.06.02/src/ROOT/6.06.02/core/unix/src/TUnixSystem.cxx:3539; #5 0x00007f2a62a721e9 in SigHandler (sig=kSigSegmentationViolation) at /var/build/jenkins/workspace/lcg_release/BUILDTYPE/Debug/COMPILER/gcc49/LABEL/slc6-physical/build/projects/ROOT-6.06.02/src/ROOT/6.06.02/core/unix/src/TUnixSystem.cxx:395; #6 0x00007f2a62a79cb9 in sighandler (sig=11) at /var/build/jenkins/workspace/lcg_release/BUILDTYPE/Debug/COMPILER/gcc49/LABEL/slc6-physical/build/projects/ROOT-6.06.02/src/ROOT/6.06.02/core/unix/src/TUnixSystem.cxx:3516; #7 <signal handler called>; #8 0x00007f2a622f1846 in TMVA::DecisionTreeNode::GetSeparationGain (this=0x12cc2a0) at /var/build/jenkins/workspace/lcg_release/BUILDTYPE/Debug/COMPILER/gcc49/LABEL/slc6-physical/build/projects/ROOT-6.06.02/src/ROOT-6.06.02-build/include/TMVA/DecisionTreeNode.h:268; #9 0x00007f2a622ef5d8 in TMVA::DecisionTreeNode::Print (this=0x12cc2a0, os=...) at /var/build/jenkins/workspace/lcg_release/BUILDTYPE/Debug/COMPILER/gcc49/LABEL/slc6-physical/build/projects/ROOT-6.06.02/src/ROOT/6.06.02/tmva/tmva/src/DecisionTreeNode.cxx:217; #10 0x00007f2a62116d89 in TMVA::operator<< (os=..., node=0x12cc2a0) at /var/build/jenkins/workspace/lcg_release/BUILDTYPE/Debug/COMPILER/gcc49/LABEL/slc6-physical/build/projects/ROOT-6.06.02/src/ROOT/6.06.02/tmva/tmva/src/Node.cxx:142; #11 0x000000000040955f in main (argc=3, argv=0x7ffd9f1b3de8) at /home/jmitrevs/work/AtlasOffline-rel_5/source/simpleStudy/util/TestExe.cxx:112; ===========================================================; ```. ### Reproducer. As per the description. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14569:2891,Test,TestExe,2891,https://root.cern,https://github.com/root-project/root/issues/14569,1,['Test'],['TestExe']
Testability,"According to https://github.com/root-project/root/issues/9137, we get bogus data if a friend is shorter than the main tree. The `datasetspec` test acknowledges this, but still checks the results in the MT case. This miraculously seems to work most of the time, but we sometimes see failures in the nightlies, especially on macOS, so remove it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12025:142,test,test,142,https://root.cern,https://github.com/root-project/root/pull/12025,1,['test'],['test']
Testability,"According to my benchmarks with gcc 8.1, it brings ~3% performance improvement in the serialization of floats.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2089:16,benchmark,benchmarks,16,https://root.cern,https://github.com/root-project/root/pull/2089,1,['benchmark'],['benchmarks']
Testability,"According to my benchmarks, speeds up filling into a ramdisk without compression by 5% - 10%.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2134:16,benchmark,benchmarks,16,https://root.cern,https://github.com/root-project/root/pull/2134,1,['benchmark'],['benchmarks']
Testability,"According to the [documentation](https://en.cppreference.com/w/cpp/container/list/merge), the lists need to be sorted before merging them. This fixes a `Debug Assertion Failed! Expression sequence not ordered` error on Windows.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13262:159,Assert,Assertion,159,https://root.cern,https://github.com/root-project/root/pull/13262,1,['Assert'],['Assertion']
Testability,"According to the console logs the tests did not execute successfully, partly because of dynamic linking errors with libAsan. . Moreover, a lot of these tests seem to be old and abandonned due to the deprecation of `cint`. Any suggestions about what to do next? @bellenot @pcanal",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8921:25,log,logs,25,https://root.cern,https://github.com/root-project/root/issues/8921,3,"['log', 'test']","['logs', 'tests']"
Testability,"According to the console logs the tests did not execute successfully, probably because of a badly setup dependency on libEvent. ### How it could be improved; Tests should be remade using CMake with a proper Event generation library and then tested for correctness against libasan.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8909:25,log,logs,25,https://root.cern,https://github.com/root-project/root/issues/8909,4,"['Test', 'log', 'test']","['Tests', 'logs', 'tested', 'tests']"
Testability,"According to the console logs, the test crashed on execute due to bad linkage to asan functions. . ### How it could be improved; The large number of tests present should be translated to CMake and then their correctness tested.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8920:25,log,logs,25,https://root.cern,https://github.com/root-project/root/issues/8920,4,"['log', 'test']","['logs', 'test', 'tested', 'tests']"
Testability,"According to the console logs, the test crashed on execute due to bad linkage to asan functions. . ### How it could be improved; The tests should be implemented in CMake rather than calling `make cleantest`. After that their corectness can be verified.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8906:25,log,logs,25,https://root.cern,https://github.com/root-project/root/issues/8906,3,"['log', 'test']","['logs', 'test', 'tests']"
Testability,"According to the console logs, the test crashed on execute due to bad linkage to asan functions. . ### How it could be improved; The tests should be implemented in CMake then have their corectness verified.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8911:25,log,logs,25,https://root.cern,https://github.com/root-project/root/issues/8911,3,"['log', 'test']","['logs', 'test', 'tests']"
Testability,"According to the console logs, the test crashed on execute due to bad linkage to asan functions. . ### How it could be improved; The tests should be translated into CMake code and their corectness then verified.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8905:25,log,logs,25,https://root.cern,https://github.com/root-project/root/issues/8905,30,"['log', 'test']","['logs', 'test', 'tests']"
Testability,"According to the console logs, the test crashed on execute due to bad linkage to asan functions. . Also, perf contains a lot of old tests than seemingly never got run. There is a discussion about this ongoing at https://github.com/root-project/roottest/pull/732 ; any idea @bellenot @pcanal ?",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8910:25,log,logs,25,https://root.cern,https://github.com/root-project/root/issues/8910,3,"['log', 'test']","['logs', 'test', 'tests']"
Testability,"According to the console logs, this looks like a real failure. . `AddressSanitizer: heap-buffer-overflow`. libAsan seems to have detected a real error in the code. ### How it could be improved; The tests should be translated into CMake code and then the error(s) should be adressed",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8917:25,log,logs,25,https://root.cern,https://github.com/root-project/root/issues/8917,2,"['log', 'test']","['logs', 'tests']"
Testability,"According to the console logs, this looks like a real failure. However the tests should first be translated into CMake so that they work with ASAN enabled and then tested for corectness.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8922:25,log,logs,25,https://root.cern,https://github.com/root-project/root/issues/8922,3,"['log', 'test']","['logs', 'tested', 'tests']"
Testability,Activate DS in MT mode and test its basic functionalites,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1041:27,test,test,27,https://root.cern,https://github.com/root-project/root/pull/1041,1,['test'],['test']
Testability,Adapt tests to work with zlib-ng,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14295:6,test,tests,6,https://root.cern,https://github.com/root-project/root/pull/14295,1,['test'],['tests']
Testability,Add 'MSVCCompat' flag and set 'ThreadsafeStatics = 0' (this fixes crash when running line.cxx and text.cxx root7 tests in interpreted mode),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4503:113,test,tests,113,https://root.cern,https://github.com/root-project/root/pull/4503,1,['test'],['tests']
Testability,Add IO benchmarks,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1062:7,benchmark,benchmarks,7,https://root.cern,https://github.com/root-project/root/pull/1062,1,['benchmark'],['benchmarks']
Testability,Add PyMVA method PyKeras and enable PyMVA specific unit-tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/280:56,test,tests,56,https://root.cern,https://github.com/root-project/root/pull/280,1,['test'],['tests']
Testability,Add RooFit::MultiProcess and TestStatistics to release notes.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9375:29,Test,TestStatistics,29,https://root.cern,https://github.com/root-project/root/pull/9375,1,['Test'],['TestStatistics']
Testability,Add TH2Poly::Copy function and implement also using Copy the copy ctor and assignment operator. ## Checklist:. - [ x] tested changes locally; - [x ] updated the docs (if necessary). This PR fixes #13075,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14732:118,test,tested,118,https://root.cern,https://github.com/root-project/root/pull/14732,1,['test'],['tested']
Testability,Add a better test coverage (together with infrastructure) testing Bearer tokens for ROOT,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8216:13,test,test,13,https://root.cern,https://github.com/root-project/root/issues/8216,2,['test'],"['test', 'testing']"
Testability,"Add a couple of unit tests for two pythonizations:; - Access a TTree branch as an attribute; - Make a TTree iterable. Both of them test different types of branches, which is especially relevant in the first test. The fact that the pythonization of `SetBranchAddress` is still not present in PyROOT experimental prevents the second test from testing more branch types (i.e. those that require a reference to a pointer); this is not an issue anyway since the code of the TTree-iterable pythonization is tested in its entirety by the current cases.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2449:21,test,tests,21,https://root.cern,https://github.com/root-project/root/pull/2449,6,['test'],"['test', 'tested', 'testing', 'tests']"
Testability,Add a diagnostics if the pch/pcm is out of date before asserting.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4466:55,assert,asserting,55,https://root.cern,https://github.com/root-project/root/pull/4466,1,['assert'],['asserting']
Testability,Add a dummy Travis-CI build file that does nothing but excludes this branch from Travis-CI tests. @vgvassilev,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/641:91,test,tests,91,https://root.cern,https://github.com/root-project/root/pull/641,1,['test'],['tests']
Testability,"Add a new interface to RooFit, which uses a `RunContext` object to store data. This allows for passing data around between nodes of the computation graph without having to alter class members.; Some residual altering of class members remains, so the interface is not thread safe. It, however, solves the problem of not being able to compute an integral, the likelihoods of entries in a dataset + possibly some other set of x-values while another computation is running. This is the key to solving things like ROOT-3874 or faster integrators. In this PR, the interface is never used. Uses + tests will come in later PRs, but I couldn't dump 30 commits in one PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6615:590,test,tests,590,https://root.cern,https://github.com/root-project/root/pull/6615,1,['test'],['tests']
Testability,"Add a new page source and sink that use S3 as the backing store. Davix; is used as the S3 interface. The implementation is nearly identical; to the DAOS backend and there is a lot of duplicated code. ```cpp; std::string s3Uri(""s3://$(S3_BUCKET).$(S3_HOST)"");; {; auto model = RNTupleModel::Create();; auto pt = model->MakeField<float>(""pt"");; auto vec = model->MakeField<std::vector<int>>(""vec"");; // create a new RNTuple named `my_ntuple`; // -- objects are written to /bucket/my_ntuple/; auto writer = RNTupleWriter::Recreate(std::move(model), ""my_ntuple"", s3Uri);; for (int i = 0; i < 100; i++) {; *pt = 42.0;; *vec = {1, 2, 3};; writer->Fill();; }; }. // opens the RNTuple at the path /bucket/my_ntuple/; auto ntuple = RNTupleReader::Open(""my_ntuple"", s3Uri);; ```; results in the following objects stored in the bucket:; ```shell; my_ntuple/0 # page 0, 1, ... ; my_ntuple/1; my_ntuple/18446744073709551613 # footer; my_ntuple/18446744073709551614 # header; my_ntuple/18446744073709551615 # anchor; my_ntuple/2; ```; Like the current DAOS backend, one object is allocated for every page,; plus three for the header, footer, and anchor. Performance will not be; very good yet as only a single request at a time is issued. Pages are issued keys sequentially from 0, like the DAOS backend. There; are three reserved keys:; * anchor: u64(-1); * header: u64(-2); * footer: u64(-3). S3 access is controlled using the (ROOT & Davix-compatible) envvars:; * S3_REGION; * S3_SECRET_KEY; * S3_ACCESS_KEY. Perhaps these should be changed to the official AWS envvars. Todo:; - [ ] re-add cluster caching functionality to `PopulatePageFromCluster`; - [ ] implement `LoadCluster`; - [ ] test mocks; - [ ] test with real RNTuples; - [ ] issue concurrent requests to S3",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8525:1676,test,test,1676,https://root.cern,https://github.com/root-project/root/pull/8525,3,"['mock', 'test']","['mocks', 'test']"
Testability,"Add a number of functions that could replace the way user interacts with the C++ elements of the distributed, fully pythonic RDF analysis, so that this is more natural and clear as well as less error prone compared to the previous method. ; The new functions are: ; - DeclareHeaders; - DeclareSharedLibs ; - DeclareFiles ; - DeclareCppCode. The functions work with both Spark and Dask backends. . The tests are introduced in roottest PR: https://github.com/root-project/roottest/pull/1177",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16309:401,test,tests,401,https://root.cern,https://github.com/root-project/root/pull/16309,1,['test'],['tests']
Testability,Add a test for TH2Poly:Add,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4252:6,test,test,6,https://root.cern,https://github.com/root-project/root/pull/4252,1,['test'],['test']
Testability,Add a test for v7/TText,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1703:6,test,test,6,https://root.cern,https://github.com/root-project/root/pull/1703,1,['test'],['test']
Testability,Add a test to reproduce the issue described in [ROOT-10508](https://sft.its.cern.ch/jira/browse/ROOT-10508?jql=project%20%3D%20ROOT%20AND%20issuetype%20%3D%20Bug%20AND%20status%20%3D%20Open%20AND%20resolution%20%3D%20Unresolved%20AND%20text%20~%20%22RDataFrame%22%20ORDER%20BY%20priority%20DESC%2C%20updated%20DESC). Fixed the issue for the case if the friend chain is unnamed since then the current logic does not retrieve the name of the underlying tree correctly. See the jira ticket for the full discussion.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4879:6,test,test,6,https://root.cern,https://github.com/root-project/root/pull/4879,2,"['log', 'test']","['logic', 'test']"
Testability,Add a unit test that checks RNTuple serialization/deserialization of classes using empty base optimization. ## Checklist:; - [X] tested changes locally. This PR fixes #10323.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10481:11,test,test,11,https://root.cern,https://github.com/root-project/root/pull/10481,2,['test'],"['test', 'tested']"
Testability,Add all STL vector pythonizations to RVec. ~Possibly needs further unit-tests.~ Added further unit-tests. This ~should fix~ fixes the failing iterating over RVecs in Python on mac machines. Made selection of appropriate pythonizations more fool proof (`RVec<RVec<T>>` was treated similar to `RVec<T>` due to lazy string magic). Thanks @amadio!,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2495:72,test,tests,72,https://root.cern,https://github.com/root-project/root/pull/2495,2,['test'],['tests']
Testability,"Add an extra multi-value keyword to the ROOT_ADD_TEST function which; will just be passed as-is to the cmake set_tests_properties function.; This can be used to pass any of the properties described at; https://cmake.org/cmake/help/latest/manual/cmake-properties.7.html#test-properties .; In the future, some of the properties which are now manually added (e.g.; ENVIRONMENT) could be removed from this function and just passed through; the standard PROPERTIES parameter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10194:269,test,test-properties,269,https://root.cern,https://github.com/root-project/root/pull/10194,1,['test'],['test-properties']
Testability,Add assertion to ensure that page_size is a power of two,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4165:4,assert,assertion,4,https://root.cern,https://github.com/root-project/root/pull/4165,1,['assert'],['assertion']
Testability,Add back excluded tests for C++ modules,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5268:18,test,tests,18,https://root.cern,https://github.com/root-project/root/pull/5268,1,['test'],['tests']
Testability,"Add bold header to TrainAllmethods, TestAllMethods and EvaluateAllMethods",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/273:36,Test,TestAllMethods,36,https://root.cern,https://github.com/root-project/root/pull/273,1,['Test'],['TestAllMethods']
Testability,Add change with no effect to test infrastructure (not meant for merging),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1535:29,test,test,29,https://root.cern,https://github.com/root-project/root/pull/1535,4,['test'],['test']
Testability,"Add diagnostic counts, suuuper nice for tests!",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1662:40,test,tests,40,https://root.cern,https://github.com/root-project/root/pull/1662,1,['test'],['tests']
Testability,"Add error message for overflow in converting double to ULong64_t. ## Changes or fixes:; This routine returns now an unsigned 64 bit integer; For large values, larger than 1.84e+19, we print an error message; advising to use the Trandom::PoissonD for such large values,; and return the max value UINT64_MAX. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #6927",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14668:328,test,tested,328,https://root.cern,https://github.com/root-project/root/pull/14668,1,['test'],['tested']
Testability,Add google benchmark,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/688:11,benchmark,benchmark,11,https://root.cern,https://github.com/root-project/root/pull/688,1,['benchmark'],['benchmark']
Testability,"Add methods TBufferMerger::GetQueueSize() and TBufferMerger::RegisterCallback() to alow user; to control the rate at which data is pushed into the merging queue. In our test, we use the callback; function to launch tasks asynchronously whenever a buffer is done processing.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1001:169,test,test,169,https://root.cern,https://github.com/root-project/root/pull/1001,1,['test'],['test']
Testability,Add missing call to `ReleasePage()` to free memory used for all the buffered pages after the vector write case (call to `CommitSealedPageV()`).; This fixes an unfortunate memory leak we introduced in https://github.com/root-project/root/pull/10775. Thanks @glmiotto!. ## Checklist:; - [X] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12298:289,test,tested,289,https://root.cern,https://github.com/root-project/root/pull/12298,1,['test'],['tested']
Testability,Add missing include to metacling test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12216:33,test,test,33,https://root.cern,https://github.com/root-project/root/pull/12216,1,['test'],['test']
Testability,Add missing includes in RootShower test v6.22,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5746:35,test,test,35,https://root.cern,https://github.com/root-project/root/pull/5746,1,['test'],['test']
Testability,"Add more functionality to new batch interface, notably; - The direct retrieval of spans from datasets / data histograms.; - Code that uses the new interface in RooNLLVar for testing. For the moment protected by an `#ifdef ROOFIT_NEW_BATCH_INTEFACE`.; - An implementation of a batch computation for the RooProdPdf. @phsft-bot build with flags -DCMAKE_CXX_FLAGS=-DROOFIT_NEW_BATCH_INTERFACE",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6650:174,test,testing,174,https://root.cern,https://github.com/root-project/root/pull/6650,1,['test'],['testing']
Testability,"Add null checks to some important high-level RNTuple APIs. In general, they are not the most complicated errors but it would be nice to be completely segfault free. e.g.; ```cpp; auto model = RNTupleModel::Create();; model->AddField(nullptr);; ```. Before: ; ```; *** Break *** segmentation violation; ```; After: ; ```; C++ exception with description ""null field; At:; void ROOT::Experimental::RNTupleModel::AddField(std::unique_ptr<ROOT::Experimental::Detail::RFieldBase>) [/home/max/projects/rootdev/root/tree/ntuple/v7/src/RNTupleModel.cxx:56]; "" thrown in the test body.; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7751:565,test,test,565,https://root.cern,https://github.com/root-project/root/pull/7751,1,['test'],['test']
Testability,"Add possibility to execute ROOT gtest tests number of times, stopping…",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6354:38,test,tests,38,https://root.cern,https://github.com/root-project/root/pull/6354,1,['test'],['tests']
Testability,"Add range checks to `RNTupleView`'s indexing operators. Before this change out of bounds accesses were being caught by an internal assert (in `RPageStorageFile::PopulatePage`); ```cpp; auto model = RNTupleModel::Create();; auto fieldPt = model->MakeField<float>(""pt"", 42.0);; {; auto ntuple = RNTupleWriter::Recreate(std::move(model), ""myNTuple"", path);; ntuple->Fill();; ntuple->Fill();; // ntuple has 2 entries; }; auto ntuple = RNTupleReader::Open(""myNTuple"", path);; auto viewPt = ntuple->GetView<float>(""pt"");; std::cout << viewPt(2); // attempt to access the pt field at offset 2 ; ```. Before:; ```; Fatal: clusterId != kInvalidDescriptorId violated at line 400 of `/home/max/projects/rootdev/root/tree/ntuple/v7/src/RPageStorageFile.cxx'; aborting; ```. The assert location:; https://github.com/root-project/root/blob/a4b812bad84be0986ee416bbd65cf44527b92404/tree/ntuple/v7/src/RPageStorageFile.cxx#L391-L400. After this change we throw an exception like:; ```; index 2 out of bounds for field 'pt' with 2 elements; ```. This also required a change to `RFieldBase::GetNElements` to handle a few field corner cases: ; * before columns are generated; * class fields (which do not have a principal column)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7784:131,assert,assert,131,https://root.cern,https://github.com/root-project/root/pull/7784,2,['assert'],['assert']
Testability,Add regression test for ROOT-10574.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5031:15,test,test,15,https://root.cern,https://github.com/root-project/root/pull/5031,1,['test'],['test']
Testability,"Add support for a new `Offset(""bin"")` command argument to create NLL.; With this new offset mode, the NLL is offsetted by the likelihood for a; template histogram model based on the obersved data. This can; drastically improve numeric stability, because the offsetting is done; for each bin. This results in per-bin values that are all in the same; order of magnitude, which reduces precision loss in the sum. So far, it is only supported in the old test statistics when do do the; fit with a `RooDataHist` with the old test statistics.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11939:450,test,test,450,https://root.cern,https://github.com/root-project/root/pull/11939,2,['test'],['test']
Testability,Add support for gtest if testing is enabled.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/451:25,test,testing,25,https://root.cern,https://github.com/root-project/root/pull/451,1,['test'],['testing']
Testability,Add tabcompletion test similar to the one in JupyROOT/helpers/cppcompleter.py,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6011:18,test,test,18,https://root.cern,https://github.com/root-project/root/pull/6011,1,['test'],['test']
Testability,Add test coverage to codecov,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13390:4,test,test,4,https://root.cern,https://github.com/root-project/root/pull/13390,1,['test'],['test']
Testability,Add test coverage using codecov,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13391:4,test,test,4,https://root.cern,https://github.com/root-project/root/pull/13391,1,['test'],['test']
Testability,Add test for MixMax random generators,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1594:4,test,test,4,https://root.cern,https://github.com/root-project/root/pull/1594,1,['test'],['test']
Testability,Add testing for TNetXNGFile,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13562:4,test,testing,4,https://root.cern,https://github.com/root-project/root/pull/13562,1,['test'],['testing']
Testability,Add the RooFit related libraries if RooFit feature is installed.; Tested and tested with a cmake build and a main that creates RooRealVar.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/978:66,Test,Tested,66,https://root.cern,https://github.com/root-project/root/pull/978,2,"['Test', 'test']","['Tested', 'tested']"
Testability,Add the new operator developed by Aaradhya Saxena. This PR extends #8882 and updates to the new Session class of Sofie. ; It includes also the test for Batch normalization operator,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9307:143,test,test,143,https://root.cern,https://github.com/root-project/root/pull/9307,1,['test'],['test']
Testability,Add the possibility to get the parameter values for each function; evaluation during the minimization. This is useful to get a consistent; minimization path for benchmarking.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10609:161,benchmark,benchmarking,161,https://root.cern,https://github.com/root-project/root/pull/10609,1,['benchmark'],['benchmarking']
Testability,"Add the possibility to use ratios as yield parameters in SPlot.; Also update the documentation of SPlot, and add a test.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5592:115,test,test,115,https://root.cern,https://github.com/root-project/root/pull/5592,1,['test'],['test']
Testability,"Add tree inference backend using jitted evaluation of the forest. Preliminary benchmarks look promising and show a clear improvement due to the jitting (100 trees, depth 3, 100k events):. ```; XGB: 2.30692 microsec/event; BranchlessForest: 0.962279 microsec/event; BranchlessJittedForest: 0.67292 microsec/event; ```. WIP: Still needs some error-handling and doxygen markup.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4476:78,benchmark,benchmarks,78,https://root.cern,https://github.com/root-project/root/pull/4476,1,['benchmark'],['benchmarks']
Testability,Add unit tests for TQObject as an example for further reference.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/451:9,test,tests,9,https://root.cern,https://github.com/root-project/root/pull/451,1,['test'],['tests']
Testability,"Add yet another fence in TClass::GetClass to avoid lookups and memory consumption. This PR aims to fix #9029. Give the sophisticated implementation of TClass::GetClass, perhaps it would be good to collect some feedback, especially by @pcanal . # This Pull request:; This PR avoids lookups and parsing in some cases.; One of the principles of the TClass::GetClass method implementation is to avoid as much as possible. . ## Changes or fixes:; This commit adds yet another fence in TClass::GetClass, checking if the name in input is the name of a known fundamental type or typedef to it.; In order to avoid code duplication, a routine previously available within the implementation of TClassEdit has been made available with a public API. ## Checklist:. - [v ] tested changes locally; - [v ] updated the docs (if necessary). This PR fixes #9029",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13341:759,test,tested,759,https://root.cern,https://github.com/root-project/root/pull/13341,1,['test'],['tested']
Testability,Added 'test-periodic-build' test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1495:7,test,test-periodic-build,7,https://root.cern,https://github.com/root-project/root/pull/1495,2,['test'],"['test', 'test-periodic-build']"
Testability,"Added a function in TROOT to retrieve the correct number of logical cores, taking into account (in linux) CPU affinity and CFS bandwith control.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4684:60,log,logical,60,https://root.cern,https://github.com/root-project/root/pull/4684,1,['log'],['logical']
Testability,"Added an initial integration and test on how Automatic Differentiation (AD) can be implemented in RooFit. Currently, one can print the code of simple RF models they make with already supported classes. These simple models can also be evaluated through the generated code. This commit does not implement gradient calculation through clad. This pull request defines the necessary interfaces to support AD for RooFit classes; it also defines the functions that build the code required for AD and a wrapper class that wraps the JIT-ed function. . Also moved some of the `BatchModeHelpers` functions and classes to the header so that the `ADModeHelpers` can use them.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11773:33,test,test,33,https://root.cern,https://github.com/root-project/root/pull/11773,1,['test'],['test']
Testability,Added methods GetInfo and GetClassName to TestStatistics likelihood classes,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10043:42,Test,TestStatistics,42,https://root.cern,https://github.com/root-project/root/pull/10043,1,['Test'],['TestStatistics']
Testability,Added missing `#include <string>` that was causing the CodeUnloading/DeclShadowing.C test to fail.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6958:85,test,test,85,https://root.cern,https://github.com/root-project/root/pull/6958,1,['test'],['test']
Testability,"Added numpy array interface for; - `TVec`; - `TVector`; - `TMatrix`; - `std::vector`. and data types; - `float`; - `double`; - `int` (only `TVec` and `std::vector`); - `long` (only `TVec` and `std::vector`); - `unsigned int` (only `TVec` and `std::vector`); - `unsigned long` (only `TVec` and `std::vector`). WIP:; - ~~Which classes to be added?~~; - ~~Which data types?~~; - ~~What about the `numpy` dependence of the unittest?~~ I asked for numpy to activate the test.; - ~~Segfault for `TMatrixT(""int"")` and `TVectorT(""int"")`?~~ Not a problem of this PR.; - ~~Check endianess during compile-time?~~ Checked for `R__BYTESWAP` with pre-compiler.; - ~~What about histogram classes?~~ Not possible to maintain same return structure than `numpy.hist` solely by tweaking the array interface (that was the actual idea); - ~~What about the unsigned types?~~ Done for `std::vector` and `TVec`",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1753:465,test,test,465,https://root.cern,https://github.com/root-project/root/pull/1753,1,['test'],['test']
Testability,"Added resetting state logic in the TColor class that uses a flag to check for changes in the palette such that the Jupyter notebook cells will cause the list of TColors to be streamed independently of other cells, only if they are needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/868:22,log,logic,22,https://root.cern,https://github.com/root-project/root/pull/868,1,['log'],['logic']
Testability,Added some brief information about the function of GetUxmax etc. This helps clarify its return value when the axis is set to log. Some of this was mentioned on the [ROOT forum](https://root-forum.cern.ch/t/tpolyline3d-with-log-scale/26115/9) with @couet.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/960:125,log,log,125,https://root.cern,https://github.com/root-project/root/pull/960,2,['log'],"['log', 'log-scale']"
Testability,"Added support for tesselated, ellipsoid, hyperboloid and cut tube in the ROOT to VecGeom converter. Added the macro tutorials/geom/tessellatedNav.C importing and raytracing a tessellated solid. # This Pull request:; Completes solid conversion to VecGeom support. ## Changes or fixes:; Adding the macro tutorials/geom/tessellatedNav.C. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #11271",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12315:356,test,tested,356,https://root.cern,https://github.com/root-project/root/pull/12315,1,['test'],['tested']
Testability,"Added support for the VecGeom library as external package (-Dvecgeom). Creating new library libConverterVG within geom module. This contains the conversion interface for ROOT shapes into vecgeom ones, activated using the plugin mechanism from ROOT. Included also the class TGeoVGShape bridging TGeoShape methods to either VecGeom solid (navigation) or existing ROOT shape (visualisation and the rest). The conversion can be done once a ROOT geometry is in memory using:; TVirtualGeoConverter::Instance()->ConvertGeometry(); Once this is done, all TGeo functionality and tests can be accessed as for a standard TGeo geometry.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/156:570,test,tests,570,https://root.cern,https://github.com/root-project/root/pull/156,2,['test'],['tests']
Testability,Added test coverage badge,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/548:6,test,test,6,https://root.cern,https://github.com/root-project/root/pull/548,1,['test'],['test']
Testability,Added the Test for the compression algorithm for RNTuple as a GSoC evaluation task.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5179:10,Test,Test,10,https://root.cern,https://github.com/root-project/root/pull/5179,1,['Test'],['Test']
Testability,Added the pythia[6|8] tutorials as tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/886:35,test,tests,35,https://root.cern,https://github.com/root-project/root/pull/886,1,['test'],['tests']
Testability,Added whitespace for testing Jenkins,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/339:21,test,testing,21,https://root.cern,https://github.com/root-project/root/pull/339,1,['test'],['testing']
Testability,Adding code generation and AD support for the final class in upstream RooFit that is used in the CMS Higgs discovery workspace: the RooBernstein. Also:. * fix missing variable warning in `RooCBShape.cxx`. * fix AD support for RooLandau by using code that clad can digest. * implement test for RooLandau fits with AD,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15491:284,test,test,284,https://root.cern,https://github.com/root-project/root/pull/15491,1,['test'],['test']
Testability,"Adding support for generation of multiclass 1 vs. all ROC curve plots. I also have two files for testing the binary and multiclass code paths, but am unsure of where to put these if anywhere. They are 2 standalone cxx files to generate data, train classifiers, draw the roc curves and succeeds if they do not crash.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/380:97,test,testing,97,https://root.cern,https://github.com/root-project/root/pull/380,1,['test'],['testing']
Testability,"Adding the bin width in the TH1::ComputeIntegral method, to handle histograms with non-uniform binning. # This Pull request:. ## Changes or fixes:. Modified the TH1::ComputeIntegral method, used in the TH1::GetRandom method, by multiplying the ""y"" variable (bin content) by the bin width. ## Checklist:. - [X] tested changes locally; - [ ] updated the docs (if necessary). Not yet, since this has to be discussed with the ROOT developers. It has to be understood what a ""random extraction from a histogram"" should represent. This PR fixes 9530",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9538:310,test,tested,310,https://root.cern,https://github.com/root-project/root/pull/9538,1,['test'],['tested']
Testability,Additional fixes/test following #1144,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1169:17,test,test,17,https://root.cern,https://github.com/root-project/root/pull/1169,1,['test'],['test']
Testability,"Address a number of AddressSanitizer failures with Python tests, due to the way we need to preload the ASan runtime and our configuration. If I count correctly (there were a number of failures introduced last night, so I don't have a proper baseline), this fixes 7 tests:; * `pyunittests-pyroot-import-load-libs`; * `tutorial-roofit-rf104_classfactory-py`; * `roottest-python-JupyROOT-simpleCppMagic_notebook`; * `roottest-python-JupyROOT-thread_local_notebook`; * `roottest-python-JupyROOT-ROOT_kernel_notebook`; * `roottest-python-basic-basic`; * `roottest-python-regression-regression`. Moreover, `tutorial-rcanvas-df104-py` will show a proper AdressSanitizer failure.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11621:58,test,tests,58,https://root.cern,https://github.com/root-project/root/pull/11621,2,['test'],['tests']
Testability,"Address: https://github.com/root-project/root/pull/12650#issuecomment-1517450219. From @hahnjo:. Hi @pcanal, our AddressSanitizer build reports a heap-buffer-overflow: https://lcgapp-services.cern.ch/root-jenkins/job/root-asan/LABEL=ROOT-centos8,SPEC=asan,V=master/lastCompletedBuild/testReport/projectroot.roottest.root.tree/stl/roottest_root_tree_stl_make/. I bisected this to commit https://github.com/root-project/root/commit/2fa93de2a51e248a56418d8c6488b043746d0925; the error message says ""0x60700022d458 is located 8 bytes to the left of 80-byte region"". However, the stack trace points to the loop immediately after the added condition to perform the binary search. Could you take a look, please? What does TMath::BinarySearch return in case the element is not found?. Answer: yep it was missing the error handling (return value of -1)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12695:284,test,testReport,284,https://root.cern,https://github.com/root-project/root/pull/12695,1,['test'],['testReport']
Testability,"Addresses https://github.com/root-project/root/issues/13848 Thanks, Eddy!. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13956:140,test,tested,140,https://root.cern,https://github.com/root-project/root/pull/13956,1,['test'],['tested']
Testability,"Addresses several bugs on big-endian architecture, some in the testing code only, some in the actual code. Tested manually on Power8/EL7. Also tested that RNTuple data written on little-endian can be read on big-endian and vice versa. Fixes #12426",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15651:63,test,testing,63,https://root.cern,https://github.com/root-project/root/pull/15651,3,"['Test', 'test']","['Tested', 'tested', 'testing']"
Testability,Adds TBB-based counter types for global read-write locks and use one by default when TBB is available. This gives a 7% speedup in a medium sized test filling histograms from CMS NanoAOD with RDF and 256 threads. This implements the last part of the improvements originally discussed in https://github.com/root-project/root/pull/6919,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7260:145,test,test,145,https://root.cern,https://github.com/root-project/root/pull/7260,1,['test'],['test']
Testability,Adds a test for https://github.com/root-project/root/issues/7159,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14678:7,test,test,7,https://root.cern,https://github.com/root-project/root/pull/14678,1,['test'],['test']
Testability,"Adds an exhaustive table of the possible column representations of fundamental types to the specification. The PR also adds the `double` --> `Real16` representation. For integers, we need to decide which representations we allow. We currently only support reading/writing integers to columns of the same width. Read-only support for the column of the other signedness. Except for `std::int64_t`, which can also read from 32 bit columns. This was meant as a test for such conversions. Completing the integer column representation is for a follow-up PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15805:457,test,test,457,https://root.cern,https://github.com/root-project/root/pull/15805,1,['test'],['test']
Testability,"Adds some `RNTupleReader` usage examples. I think a nice goal is that every method has at least one example. Each example should be self-contained and easily copy-pastable for users to tweak as required. Doc example structure:; ```cpp; ~~~ {.cpp}; #include <ROOT/RNTuple.hxx> // all required ROOT headers are included; using ROOT::Experimental::RNTupleReader; // using decls to make the code more readable. #include <iostream> // any other headers. // int main () { implied; auto ntuple = RNTupleReader::Open(""myNTuple"", ""some/file.root"");; std::cout << ""myNTuple has "" << ntuple->GetNEntries() << "" entries\n"";; // } implied; ~~~; ```. To make sure the examples compile and work, I have been writing each in a test repo: https://github.com/mxxo/rntuple-doctests before adding them to the right location. Rendered examples: ; ![image](https://user-images.githubusercontent.com/40000585/121554761-6c31ea80-c9e0-11eb-8540-ab35724d9de3.png); ![image](https://user-images.githubusercontent.com/40000585/121554975-9683a800-c9e0-11eb-8e9a-5320b814bbde.png)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8404:711,test,test,711,https://root.cern,https://github.com/root-project/root/pull/8404,1,['test'],['test']
Testability,"Adds support for sending RDataFrame computations to a distributed Dask cluster. This looks like. ```python; import ROOT; from dask.distributed import Client; RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. # In a Python script the Dask client needs to be initalized in a context; # Jupyter notebooks / Python session don't need this; if __name__ == ""__main__"":; client = Client(""SCHEDULER_ADDRESS""); df = RDataFrame(""mytree"",""myfile.root"", daskclient=client); # Proceed as usual; df.Define(""x"",""someoperation"").Histo1D(""x""); ```. Missing pieces:; - [ ] The current way to release the GIL in the mapper function of the `Base` backend assumes the first result of the list is a `RResultPtr` in order to be able to set the `__release_gil__` attribute on its `GetValue` function. I.e. this doesn't work for all operations, such as `AsNumpy` or `Snapshot` that do not return a `RResultPtr`; - [ ] Tutorial; - [ ] Tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9086:923,Test,Tests,923,https://root.cern,https://github.com/root-project/root/pull/9086,1,['Test'],['Tests']
Testability,"Adds the `RClusterCache` I/O scheduler that, similar to `TTreeCache`, preloads upcoming data ranges based on the current request. The RClusterCache synchronously provides a certain cluster and, upon that request, asynchronously preloads the next cluster(s) in an I/O thread. The actual logic of populating a cluster for a particular set of active columns is handled by the page storage. The file page storage linearizes and coalesces requests and requests the corresponding byte range requests in bulks (using `RRawFile::ReadV`). Currently the cluster cache of packed and compressed pages is on the heap. In the future, another descendant of `RCluster` can implement mmap() memory management instead. Also left for future work is the use of concurrent streams in `LoadCluster()`. - [x] Add I/O metrics and show how to print them in a tutorial; - [x] Support changing active columns during the lifetime of an ntuple reader; - [x] Gracefully handle a change of active columns when cluster where already loaded",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5377:286,log,logic,286,https://root.cern,https://github.com/root-project/root/pull/5377,1,['log'],['logic']
Testability,Adjust allowed test difference for 32-bit ix86,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2273:15,test,test,15,https://root.cern,https://github.com/root-project/root/pull/2273,1,['test'],['test']
Testability,Adjust asserts.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5569:7,assert,asserts,7,https://root.cern,https://github.com/root-project/root/pull/5569,1,['assert'],['asserts']
Testability,"Adjust test for failures on aarch64, ppc64le and s390x",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14164:7,test,test,7,https://root.cern,https://github.com/root-project/root/pull/14164,1,['test'],['test']
Testability,Adjust tests for s390x,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8826:7,test,tests,7,https://root.cern,https://github.com/root-project/root/pull/8826,1,['test'],['tests']
Testability,"Adjust the spec.json file used for the test accordingly. Note that RDataFrame does not error out if a number beyond the last entry available is specified, it just interrupts the event loop early. This issue is; tracked at #13800.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13801:39,test,test,39,https://root.cern,https://github.com/root-project/root/pull/13801,1,['test'],['test']
Testability,Adresses most issues from #7426. * Check nullptr in proposed places; * Mark `// NOLINT` when return static members ; * Use references in several loops like `for (auto &entry : arr)`; * Fix potential logic error in `TStreamerElement::GetSequenceType`; * Use std::vector<std::string> for tokens in `TDataMember::ExtractOptionsFromComment`; * Use static std::string in `TCling::TypeName` instead of self-maintained char buffer; * Fix potential leak when calling `TClass::AdoptMemberStreamer`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7444:199,log,logic,199,https://root.cern,https://github.com/root-project/root/pull/7444,1,['log'],['logic']
Testability,"After #10005 is merged, a couple of tests will fail due to a `heap-buffer-overflow`:; * `gtest-tree-ntuple-v7-test-ntuple-basics`; * `gtest-tree-ntuple-v7-test-ntuple-rdf`; * `gtest-tree-ntuple-v7-test-ntuple-view`; * `gtest-tree-ntuple-v7-test-ntuple-show`. Stack trace (for the first test) is:; ```; 393: WRITE of size 4 at 0x6020000d2a50 thread T0 ; 393: #0 0x7efdd569f028 in ROOT::Experimental::RClusterSize::RClusterSize() /home/jhahnfel/ROOT/src/tree/ntuple/v7/inc/ROOT/RNTupleUtil.hxx:61:21; 393: #1 0x7efdd4d41a7f in ROOT::Experimental::Detail::RFieldValue::RFieldValue<ROOT::Experimental::RClusterSize>(ROOT::Experimental::Detail::RColumnElementBase const&, ROOT::Experimental::Detail::RFieldBase*, ROOT::Experimental::RClusterSize*) /home/jhahnfel/ROOT/src/tree/ntuple/v7/inc/ROOT/RFieldValue.hxx:75:19; 393: #2 0x7efdd4d259d1 in ROOT::Experimental::RCollectionField::GenerateValue(void*) /home/jhahnfel/ROOT/src/tree/ntuple/v7/inc/ROOT/RField.hxx:519:14; 393: #3 0x7efdd4cec7d8 in ROOT::Experimental::Detail::RFieldBase::GenerateValue() /home/jhahnfel/ROOT/src/tree/ntuple/v7/src/RField.cxx:268:11; 393: #4 0x7efdd4e101b2 in ROOT::Experimental::RNTupleModel::Clone() const /home/jhahnfel/ROOT/src/tree/ntuple/v7/src/RNTupleModel.cxx:74:49. [...]. 393: 0x6020000d2a51 is located 0 bytes to the right of 1-byte region [0x6020000d2a50,0x6020000d2a51); 393: allocated by thread T0 here:; 393: #0 0x557ff8 in malloc (/home/jhahnfel/ROOT/build-clang-asan-debug/tree/ntuple/v7/test/ntuple_basics+0x557ff8); 393: #1 0x7efdd4cec70b in ROOT::Experimental::Detail::RFieldBase::GenerateValue() /home/jhahnfel/ROOT/src/tree/ntuple/v7/src/RField.cxx:266:18; 393: #2 0x7efdd4e101b2 in ROOT::Experimental::RNTupleModel::Clone() const /home/jhahnfel/ROOT/src/tree/ntuple/v7/src/RNTupleModel.cxx:74:49; ```. Note: There may be other problems in the tests after this issue is fixed. Please check locally with an instrumented build that the tests pass afterwards!",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10011:36,test,tests,36,https://root.cern,https://github.com/root-project/root/issues/10011,9,['test'],"['test', 'test-ntuple-basics', 'test-ntuple-rdf', 'test-ntuple-show', 'test-ntuple-view', 'tests']"
Testability,"After #10005 is merged, a couple of tests will fail due to a `heap-use-after-free` or `stack-use-after-return`:; * `gtest-roofit-roofitcore-test-testRooFitDriver` (`heap-use-after-free`); * `gtest-roofit-roofitcore-test-testRooAbsPdf` (`heap-use-after-free`); * `gtest-roofit-roofitcore-test-testTestStatistics` (`heap-use-after-free`); * `gtest-roofit-roofitcore-test-testLikelihoodSerial` (`heap-use-after-free`); * ~`gtest-roofit-roofit-test-testRooPoisson` (`stack-use-after-return`)~; * `gtest-roofit-roofitcore-test-testSumW2Error` (`heap-use-after-free`); * `gtest-roofit-roostats-test-testSPlot` (`heap-use-after-free`); * ~`test-stressroofit` (`heap-use-after-free`)~; * ~`test-stressroofit-interpreted` (`heap-use-after-free`)~; * `tutorial-roofit-rf611_weightedfits` (`heap-use-after-free`); * ~`tutorial-roofit-rf705_linearmorph` (`stack-use-after-return`)~; * ~`tutorial-roofit-rf705_linearmorph-py` (`stack-use-after-return`)~; * `gtest-roottest-root-roofitstats-vectorisedPDFs-*` (`heap-use-after-free`). The top of the stack trace (for the first failing test) is:; ```; 229: WRITE of size 8 at 0x61d000a37370 thread T0; 229: #0 0x7f5aa5163db3 in RooAbsArg::setDataToken(unsigned long) /home/jhahnfel/ROOT/src/roofit/roofitcore/inc/RooAbsArg.h:720:53; 229: #1 0x7f5aa5163db3 in ROOT::Experimental::NodeInfo::~NodeInfo() /home/jhahnfel/ROOT/src/roofit/roofitcore/src/RooFitDriver.cxx:100:15; 229: #2 0x7f5aa515d8f7 in void std::_Destroy<ROOT::Experimental::NodeInfo>(ROOT::Experimental::NodeInfo*) /usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/stl_construct.h:98:19 ; 229: #3 0x7f5aa515d8f7 in void std::_Destroy_aux<false>::__destroy<ROOT::Experimental::NodeInfo*>(ROOT::Experimental::NodeInfo*, ROOT::Experimental::NodeInfo*) /usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/stl_construct.h:108:6 ; 229: #4 0x7f5aa515d8f7 in void std::_Destroy<ROOT::Experimental::NodeInfo*>(ROOT::Experimental::NodeInfo*, ROOT::Experimental::NodeInfo",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10009:36,test,tests,36,https://root.cern,https://github.com/root-project/root/issues/10009,10,['test'],"['test-', 'test-stressroofit', 'test-stressroofit-interpreted', 'test-testLikelihoodSerial', 'test-testRooAbsPdf', 'test-testRooFitDriver', 'test-testRooPoisson', 'test-testSPlot', 'test-testTestStatistics', 'tests']"
Testability,"After #10005 is merged, a couple of tests will fail due to a `heap-use-after-free`:; * `gtest-tree-tree-test-testBulkApiMultiple`; * `gtest-tree-tree-test-testBulkApiVarLength`; * `gtest-tree-tree-test-testBulkApiSillyStruct`. Stack trace (for the first test) is:; ```; 418: READ of size 8 at 0x61700002eec8 thread T0; 418: #0 0x7f1c674bd713 in TTree::GetNotify() const /home/jhahnfel/ROOT/src/tree/tree/inc/TTree.h:499:55; 418: #1 0x7f1c674bac5d in void TNotifyLinkBase::RemoveLink<TTree>(TTree&) /home/jhahnfel/ROOT/src/core/base/inc/TNotifyLink.h:69:20; 418: #2 0x7f1c6765ac7d in TTreeReader::~TTreeReader() /home/jhahnfel/ROOT/src/tree/treeplayer/src/TTreeReader.cxx:252:15; 418: #3 0x535611 in BulkApiMultipleTest_stdRead_Test::TestBody() /home/jhahnfel/ROOT/src/tree/tree/test/BulkApiMultiple.cxx:309:1. [...]. 418: 0x61700002eec8 is located 328 bytes inside of 712-byte region [0x61700002ed80,0x61700002f048); 418: freed by thread T0 here:; 418: #0 0x531948 in operator delete(void*) (/home/jhahnfel/ROOT/build-clang-asan-debug/tree/tree/test/testBulkApiMultiple+0x531948); 418: #1 0x7f1c61f3a364 in TStorage::ObjectDealloc(void*) /home/jhahnfel/ROOT/src/core/base/src/TStorage.cxx:362:4; 418: #2 0x7f1c61ede2e8 in TObject::operator delete(void*) /home/jhahnfel/ROOT/src/core/base/src/TObject.cxx:1001:7; 418: #3 0x7f1c66f99411 in TTree::~TTree() /home/jhahnfel/ROOT/src/tree/tree/src/TTree.cxx:921:1; 418: #4 0x7f1c6202bb62 in TCollection::GarbageCollect(TObject*) /home/jhahnfel/ROOT/src/core/cont/src/TCollection.cxx:736:4; 418: #5 0x7f1c620480aa in TList::Delete(char const*) /home/jhahnfel/ROOT/src/core/cont/src/TList.cxx:537:13; 418: #6 0x7f1c6203423b in THashList::Delete(char const*) /home/jhahnfel/ROOT/src/core/cont/src/THashList.cxx:215:14; 418: #7 0x7f1c6312616e in TDirectoryFile::Close(char const*) /home/jhahnfel/ROOT/src/io/io/src/TDirectoryFile.cxx:572:27; 418: #8 0x7f1c6317a52b in TFile::Close(char const*) /home/jhahnfel/ROOT/src/io/io/src/TFile.cxx:942:20; 418: #9 0x7f1c6",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10012:36,test,tests,36,https://root.cern,https://github.com/root-project/root/issues/10012,9,"['Test', 'test']","['TestBody', 'test', 'test-testBulkApiMultiple', 'test-testBulkApiSillyStruct', 'test-testBulkApiVarLength', 'testBulkApiMultiple', 'tests']"
Testability,"After #10005 is merged, a couple of tests will fail due to a `heap-use-after-free`:; * `pyunittests-pyroot-pyz-rdataframe-makenumpy`; * `pyunittests-pyroot-numbadeclare`; * `gtest-tree-dataframe-test-dataframe-friends`; * `gtest-tree-dataframe-test-dataframe-cache`; * `gtest-tree-dataframe-test-dataframe-simple`; * `gtest-tree-dataframe-test-dataframe-snapshot`; * `gtest-tree-dataframe-test-datasource-more`; * `gtest-tree-dataframe-test-datasource-trivial`; * `gtest-tree-dataframe-test-dataframe-concurrency` (`RJittedDefine`); * `pyunittests-dataframe-misc` (`RJittedDefine`); * `pyunittests-dataframe-histograms` (`RJittedDefine`); * `pyunittests-dataframe-cache`; * `pyunittests-dataframe-merge-results`; * `tutorial-dataframe-df019_Cache`; * `tutorial-tmva-tmva003_RReader`; * `tutorial-dataframe-df000_simple-py` (`RJittedDefine`); * `tutorial-dataframe-df002_dataModel-py` (`RJittedDefine`); * `tutorial-dataframe-df003_profiles-py`; * `tutorial-dataframe-df007_snapshot-py` (`RJittedDefine`); * `tutorial-dataframe-df010_trivialDataSource-py` (`RJittedDefine`); * `tutorial-dataframe-df014_CSVDataSource-py` (`RJittedDefine`); * `tutorial-dataframe-df016_vecOps-py` (`RJittedDefine`); * `tutorial-dataframe-df017_vecOpsHEP-py` (`RJittedDefine`); * `tutorial-dataframe-df019_Cache-py`; * `tutorial-dataframe-df021_createTGraph-py` (`RJittedDefine`); * `tutorial-dataframe-df024_Display-py`; * `tutorial-dataframe-df031_Stats-py` (`RJittedDefine`); * `tutorial-dataframe-df103_NanoAODHiggsAnalysis-py` (`RJittedDefine`); * `tutorial-dataframe-df105_WBosonAnalysis-py` (`RJittedDefine`); * `tutorial-dataframe-df106_HiggsToFourLeptons-py` (`RJittedDefine`); * `tutorial-dataframe-df107_SingleTopAnalysis-py` (`RJittedDefine`); * `tutorial-pyroot-pyroot004_NumbaDeclare-py` (`RJittedDefine`); * `tutorial-rcanvas-df105-py` (`RJittedDefine`); ; According to the stack traces, `~RDefineBase` / `~RJittedDefine` calls `RLoopManager::Deregister` on an already freed `RLoopManager`. Note: There may",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10007:36,test,tests,36,https://root.cern,https://github.com/root-project/root/issues/10007,8,['test'],"['test-dataframe-cache', 'test-dataframe-concurrency', 'test-dataframe-friends', 'test-dataframe-simple', 'test-dataframe-snapshot', 'test-datasource-more', 'test-datasource-trivial', 'tests']"
Testability,"After #10005 is merged, a couple of tests will fail due to a `heap-use-after-free`:; * `pyunittests-pyroot-roofit-roodatahist-ploton`; * `pyunittests-pyroot-roofit-roodataset-numpy`; * `tutorial-roofit-rf402_datahandling-py`; * `tutorial-roofit-rf403_weightedevts-py`; * `tutorial-roofit-rf712_lagrangianmorphfit-py`. The top of the stack trace (for the first test) is:; ```; 53: READ of size 5 at 0x6030003a2f70 thread T0; 53: #0 0x7f6595352d5c (/usr/lib64/clang/13.0.0/lib/linux/libclang_rt.asan-x86_64.so+0x71d5c); 53: #1 0x7f658fe16f2b in TString::TString(char const*) /home/jhahnfel/ROOT/src/core/base/src/TString.cxx:107:18; 53: #2 0x7f658d958fd9 in TNamed::TNamed(char const*, char const*) /home/jhahnfel/ROOT/src/core/base/inc/TNamed.h:37:50; 53: #3 0x7f656e97dc82 in RooAbsData::RooAbsData(RooStringView, RooStringView, RooArgSet const&, RooAbsDataStore*) /home/jhahnfel/ROOT/src/roofit/roofitcore/src/RooAbsData.cxx:187:3; 53: #4 0x7f656ebe3990 in RooDataHist::RooDataHist(RooStringView, RooStringView, RooArgSet const&, RooAbsData const&, double) /home/jhahnfel/ROOT/src/roofit/roofitcore/src/RooDataHist.cxx:147:3; ```. Note: There may be other problems in the tests after this issue is fixed. Please check locally with an instrumented build that the tests pass afterwards!",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10008:36,test,tests,36,https://root.cern,https://github.com/root-project/root/issues/10008,4,['test'],"['test', 'tests']"
Testability,"After #10005 is merged, a couple of tests will fail with `Your application is linked against incompatible ASan runtimes.`:; * `roottest-python-cmdLineUtils-NameCyclesRootmvPrepareInput`; * `roottest-root-meta-genreflex-XMLParsing-*`; * `roottest-root-rint-BackslashNewline`. Note: There may be other problems in the tests after this issue is fixed. Please check locally with an instrumented build that the tests pass afterwards!",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10017:36,test,tests,36,https://root.cern,https://github.com/root-project/root/issues/10017,3,['test'],['tests']
Testability,"After #10005 is merged, the test `TMVA-CrossValidation-Serialise` will fail due to a `stack-use-after-return`:; ```; 352: WRITE of size 4 at 0x7f7ff4e1b880 thread T0; 352: #0 0x7f800120c3b9 in frombuf(char*&, unsigned int*) /home/jhahnfel/ROOT/src/core/base/inc/Bytes.h:310:7; 352: #1 0x7f800120c2bc in frombuf(char*&, int*) /home/jhahnfel/ROOT/src/core/base/inc/Bytes.h:442:48; 352: #2 0x7f7ffe26e9d0 in TBufferFile::ReadInt(int&) /home/jhahnfel/ROOT/src/io/io/inc/TBufferFile.h:401:4; 352: #3 0x7f80011965fc in TLeafI::ReadBasket(TBuffer&) /home/jhahnfel/ROOT/src/tree/tree/src/TLeafI.cxx:165:9; 352: #4 0x7f8001055b29 in TBranch::ReadLeavesImpl(TBuffer&) /home/jhahnfel/ROOT/src/tree/tree/src/TBranch.cxx:2382:13; 352: #5 0x7f800106b4a9 in TBranch::GetEntry(long long, int) /home/jhahnfel/ROOT/src/tree/tree/src/TBranch.cxx:1691:4; 352: #6 0x7f800125eea0 in TTree::GetEntry(long long, int)::$_3::operator()() const /home/jhahnfel/ROOT/src/tree/tree/src/TTree.cxx:5628:23; 352: #7 0x7f800125d3c8 in TTree::GetEntry(long long, int) /home/jhahnfel/ROOT/src/tree/tree/src/TTree.cxx:5703:7; 352: #8 0x50a984 in TestContex::runApplicationPhase(TString) /home/jhahnfel/ROOT/src/tmva/tmva/test/crossvalidation/TestCrossValidationSerialise.cxx:188:13; 352: #9 0x50b2a3 in TestCvSerialise(TMVA::Types::EMVA, TString, TString) /home/jhahnfel/ROOT/src/tmva/tmva/test/crossvalidation/TestCrossValidationSerialise.cxx:231:7; 352: #10 0x50b6e2 in TestCrossValidationSerialise() /home/jhahnfel/ROOT/src/tmva/tmva/test/crossvalidation/TestCrossValidationSerialise.cxx:240:7; 352: #11 0x50b8b3 in main /home/jhahnfel/ROOT/src/tmva/tmva/test/crossvalidation/TestCrossValidationSerialise.cxx:255:4; 352: #12 0x7f7ffad0aca2 in __libc_start_main (/lib64/libc.so.6+0x3aca2); 352: #13 0x42361d in _start (/home/jhahnfel/ROOT/build-clang-asan-debug/tmva/tmva/test/crossvalidation/testCrossValidationSerialise+0x42361d); 352:; 352: Address 0x7f7ff4e1b880 is located in stack of thread T0 at offset 128 in frame; 352: #0 0x7f",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10010:28,test,test,28,https://root.cern,https://github.com/root-project/root/issues/10010,1,['test'],['test']
Testability,"After #10005 is merged, the test `gtest-tree-treeplayer-test-treetreeplayertestUnit` will fail due to a `stack-use-after-scope`:; ```; 434: READ of size 4 at 0x7f17de5323ac thread T0; 434: #0 0x7f17e571e7e6 in TObject::TestBit(unsigned int) const /home/jhahnfel/ROOT/src/core/base/inc/TObject.h:187:72; 434: #1 0x7f17e571e7e6 in TTree::~TTree() /home/jhahnfel/ROOT/src/tree/tree/src/TTree.cxx:1011:23; 434: #2 0x5a626a in TTreeReaderBasic_EntryListAndEntryRange_Test::TestBody() /home/jhahnfel/ROOT/src/tree/treeplayer/test/basic.cxx:407:1. [...]. 434: Address 0x7f17de5323ac is located in stack of thread T0 at offset 940 in frame; 434: #0 0x5a4b3f in TTreeReaderBasic_EntryListAndEntryRange_Test::TestBody() /home/jhahnfel/ROOT/src/tree/treeplayer/test/basic.cxx:385; ```. Note: There may be other problems in the test after this issue is fixed. Please check locally with an instrumented build that the test passes afterwards!",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10013:28,test,test,28,https://root.cern,https://github.com/root-project/root/issues/10013,9,"['Test', 'test']","['TestBit', 'TestBody', 'test', 'test-treetreeplayertestUnit']"
Testability,"After #10005 is merged, the test `tutorial-fit-minuit2GausFit` will fail due to a `stack-use-after-scope`:; ```; 505: READ of size 8 at 0x7fa73033ca68 thread T0; 505: #0 0x7fa71035ba11 in ROOT::Minuit2::MnFcn::ErrorDef() const /home/jhahnfel/ROOT/src/math/minuit2/src/MnFcn.cxx:36:11; 505: #1 0x7fa71031298f in ROOT::Minuit2::InitialGradientCalculator::operator()(ROOT::Minuit2::MinimumParameters const&) const /home/jhahnfel/ROOT/src/math/minuit2/src/InitialGradientCalculator.cxx:63:30; 505: #2 0x7fa7103e185a in ROOT::Minuit2::Numerical2PGradientCalculator::operator()(ROOT::Minuit2::MinimumParameters const&) const /home/jhahnfel/ROOT/src/math/minuit2/src/Numerical2PGradientCalculator.cxx:39:27; 505: #3 0x7fa710305d22 in ROOT::Minuit2::FumiliGradientCalculator::operator()(ROOT::Minuit2::MinimumParameters const&) const::$_0::operator()(std::ostream&) const /home/jhahnfel/ROOT/src/math/minuit2/src/FumiliGradientCalculator.cxx:98:29; 505: #4 0x7fa7103059ff in decltype((fp0(fp)) , ((void)())) ROOT::Minuit2::MnPrint::HandleLambda<ROOT::Minuit2::FumiliGradientCalculator::operator()(ROOT::Minuit2::MinimumParameters const&) const::$_0>(std::ostream&, ROOT::Minuit2::FumiliGradientCalculator::operator()(ROOT::Minuit2::MinimumParameters const&) const::$_0 const&, int) /home/jhahnfel/ROOT/src/math/minuit2/inc/Minuit2/MnPrint.h:171:7; 505: #5 0x7fa7103059ce in void ROOT::Minuit2::MnPrint::StreamArgs<ROOT::Minuit2::FumiliGradientCalculator::operator()(ROOT::Minuit2::MinimumParameters const&) const::$_0>(std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >&, ROOT::Minuit2::FumiliGradientCalculator::operator()(ROOT::Minuit2::MinimumParameters const&) const::$_0 const&) /home/jhahnfel/ROOT/src/math/minuit2/inc/Minuit2/MnPrint.h:187:7; 505: #6 0x7fa71030576b in void ROOT::Minuit2::MnPrint::Log<ROOT::Minuit2::FumiliGradientCalculator::operator()(ROOT::Minuit2::MinimumParameters const&) const::$_0>(ROOT::Minuit2::MnPrint::Verbosity, ROOT::Minuit2::FumiliGra",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10014:28,test,test,28,https://root.cern,https://github.com/root-project/root/issues/10014,1,['test'],['test']
Testability,"After #10005 is merged, the test `tutorial-legacy-thread-threadsh1` will fail due to a `heap-use-after-free`:; ```; 714: READ of size 4 at 0x6120000ce19c thread T0; 714: #0 0x7f6ac2652903 in TThread::Kill() /home/jhahnfel/ROOT/src/core/thread/src/TThread.cxx:597:8. [...]. 714: 0x6120000ce19c is located 92 bytes inside of 264-byte region [0x6120000ce140,0x6120000ce248); 714: freed by thread T0 here:; 714: #0 0x501778 in operator delete(void*) (/home/jhahnfel/ROOT/build-clang-asan-debug/bin/root.exe+0x501778); 714: #1 0x7f6ac8046364 in TStorage::ObjectDealloc(void*) /home/jhahnfel/ROOT/src/core/base/src/TStorage.cxx:362:4; 714: #2 0x7f6ac7fea2e8 in TObject::operator delete(void*) /home/jhahnfel/ROOT/src/core/base/src/TObject.cxx:1001:7; 714: #3 0x7f6ac26525c1 in TThread::~TThread() /home/jhahnfel/ROOT/src/core/thread/src/TThread.cxx:396:1; ```. Note: There may be other problems in the test after this issue is fixed. Please check locally with an instrumented build that the test passes afterwards!",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10015:28,test,test,28,https://root.cern,https://github.com/root-project/root/issues/10015,3,['test'],['test']
Testability,"After #10005 is merged, the test `tutorial-roofit-rf408_RDataFrameToRooFit-py` will fail due to a `heap-buffer-overflow`:; ```; 1177: READ of size 4 at 0x61e0000d0690 thread T15; 1177: #0 0x7f83a02588ec in TRandom3::Rndm() /home/jhahnfel/ROOT/src/math/mathcore/src/TRandom3.cxx:129:8; 1177: #1 0x7f83a024c8db in TRandom::Gaus(double, double) /home/jhahnfel/ROOT/src/math/mathcore/src/TRandom.cxx:306:11; ```. Note: There may be other problems in the test after this issue is fixed. Please check locally with an instrumented build that the test passes afterwards!",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10016:28,test,test,28,https://root.cern,https://github.com/root-project/root/issues/10016,3,['test'],['test']
Testability,"After [those changes](https://github.com/root-project/root/commit/060e8d7afd8c47f61eee9f72004388b1a60d77f2), related to C++ modules on Windows, the following tests:. roottest-root-dataframe-writeFcc (Failed); roottest-root-dataframe-test_readFcc (Failed); roottest-root-dataframe-regression_snapshot (Failed); roottest-root-dataframe-test_glob (Failed); roottest-root-dataframe-test_reduce (Failed); roottest-root-dataframe-ctors (Failed). Are failing with the following errors:. ```; 1306: Processing C:/Users/sftnight/git/roottest/root/dataframe/test_ctors.C+...; 1306: Info in <TWinNTSystem::ACLiC>: creating shared library C:/Users/sftnight/build/release/roottest/root/dataframe/test_ctors_C.dll; 1306: In file included from input_line_9:9:; 1306: In file included from C:/Users/sftnight/git/roottest/root/dataframe/test_ctors.C:4:; 1306: In file included from C:/Users/sftnight/build/release/include\ROOT/RDataFrame.hxx:20:; 1306: In file included from C:/Users/sftnight/build/release/include\ROOT/RDF/RInterface.hxx:15:; 1306: In file included from C:/Users/sftnight/build/release/include\ROOT/RDF/ActionHelpers.hxx:25:; 1306: C:/Users/sftnight/build/release/include\ROOT/RVec.hxx:1434:36: error: use of undeclared identifier 'M_PI'; 1306: T DeltaPhi(T v1, T v2, const T c = M_PI); 1306: ^; 1306: C:/Users/sftnight/build/release/include\ROOT/RVec.hxx:1455:68: error: use of undeclared identifier 'M_PI'; 1306: RVec<T> DeltaPhi(const RVec<T>& v1, const RVec<T>& v2, const T c = M_PI); 1306: ^; 1306: C:/Users/sftnight/build/release/include\ROOT/RVec.hxx:1473:55: error: use of undeclared identifier 'M_PI'; 1306: RVec<T> DeltaPhi(const RVec<T>& v1, T v2, const T c = M_PI); 1306: ^; 1306: C:/Users/sftnight/build/release/include\ROOT/RVec.hxx:1491:55: error: use of undeclared identifier 'M_PI'; 1306: RVec<T> DeltaPhi(T v1, const RVec<T>& v2, const T c = M_PI); 1306: ^; 1306: C:/Users/sftnight/build/release/include\ROOT/RVec.hxx:1510:113: error: use of undeclared identifier 'M_PI'; 1306: RVec",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6727:158,test,tests,158,https://root.cern,https://github.com/root-project/root/pull/6727,1,['test'],['tests']
Testability,"After changes to RDF's internal logic, some of the classes used; during the event loop were triggering unnecessary, slow cling nullptr; checks. This patch turns these checks off. This resolves a performance regression in v6.23 w.r.t. v6.22 for RDF; macros run via the interpreter (`root dfMacro.C`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7004:32,log,logic,32,https://root.cern,https://github.com/root-project/root/pull/7004,1,['log'],['logic']
Testability,"After giving RooFit's categories a new interface, a lot of legacy code was left in place - the new categories support both the old and new interface.; The PR was split in two parts partly for testing that old code would still work, partly to make #5502 smaller.; Here, the big cleanup happens:; - Most uses of the legacy interface are replaced with the new interface; - Now-unused classes are removed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5514:192,test,testing,192,https://root.cern,https://github.com/root-project/root/pull/5514,1,['test'],['testing']
Testability,"After https://github.com/root-project/root/pull/15900, there should be four failing tests due to Clad:; ```; The following tests FAILED:; 206 - gtest-math-mathcore-test-CladDerivatorTests (Failed); 232 - gtest-roofit-histfactory-test-testHistFactory (Failed); 235 - gtest-roofit-hs3-test-testRooFitHS3 (Failed); 267 - gtest-roofit-roofitcore-test-testRooFuncWrapper (Failed); ```. They seem somehow related to `__builtin_pow`. For this reason, to keep green builds, clad was disabled for mac-beta in https://github.com/root-project/root/pull/15910. ### Reproducer. Install `MacOSX15.0.sdk`, build ROOT and try to run all tests. ### ROOT version. `master`. ### Installation method. build from source. ### Operating system. macOS",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15912:84,test,tests,84,https://root.cern,https://github.com/root-project/root/issues/15912,7,['test'],"['test-', 'test-CladDerivatorTests', 'test-testHistFactory', 'test-testRooFuncWrapper', 'tests']"
Testability,"After https://sft.its.cern.ch/jira/browse/ROOT-10849 is fixed, we are now left with three test failures:. * projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleWriteRead; * projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleRead; * projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6331:90,test,test,90,https://root.cern,https://github.com/root-project/root/issues/6331,1,['test'],['test']
Testability,"After merging #10030 to fix #10012, the following two tests still fail with `heap-use-after-free`:; * `gtest-tree-tree-test-testBulkApiVarLength`; * `gtest-tree-tree-test-testBulkApiSillyStruct`. Stack trace (for the first test) is:; ```; 418: READ of size 8 at 0x617000086a48 thread T0; 418: #0 0x7f4f110c9e74 in TTreeReader::~TTreeReader() (/home/jhahnfel/ROOT/build-clang-asan/lib/libTreePlayer.so+0x213e74); 418: #1 0x522fcf in BulkApiVariableTest_stdRead_Test::TestBody() (/home/jhahnfel/ROOT/build-clang-asan/tree/tree/test/testBulkApiVarLength+0x522fcf). [...]. 418: 0x617000086a48 is located 328 bytes inside of 712-byte region [0x617000086900,0x617000086bc8); 418: freed by thread T0 here:; 418: #0 0x51f5a8 in operator delete(void*) (/home/jhahnfel/ROOT/build-clang-asan/tree/tree/test/testBulkApiVarLength+0x51f5a8); 418: #1 0x7f4f0c6ce44f in TObject::operator delete(void*) (/home/jhahnfel/ROOT/build-clang-asan/lib/libCore.so+0x2f544f); 418: #2 0x7f4f0c8251a6 in TList::Delete(char const*) (/home/jhahnfel/ROOT/build-clang-asan/lib/libCore.so+0x44c1a6); 418: #3 0x7f4f0c80cb9f in THashList::Delete(char const*) (/home/jhahnfel/ROOT/build-clang-asan/lib/libCore.so+0x433b9f); 418: #4 0x7f4f0d640e30 in TDirectoryFile::Close(char const*) (/home/jhahnfel/ROOT/build-clang-asan/lib/libRIO.so+0x285e30); 418: #5 0x7f4f0d678f08 in TFile::Close(char const*) (/home/jhahnfel/ROOT/build-clang-asan/lib/libRIO.so+0x2bdf08); 418: #6 0x7f4f0d678050 in TFile::~TFile() (/home/jhahnfel/ROOT/build-clang-asan/lib/libRIO.so+0x2bd050); 418: #7 0x7f4f0d67898d in TFile::~TFile() (/home/jhahnfel/ROOT/build-clang-asan/lib/libRIO.so+0x2bd98d); 418: #8 0x52289f in BulkApiVariableTest_stdRead_Test::TestBody() (/home/jhahnfel/ROOT/build-clang-asan/tree/tree/test/testBulkApiVarLength+0x52289f). [...]. 418: previously allocated by thread T0 here:; 418: #0 0x51ea88 in operator new(unsigned long) (/home/jhahnfel/ROOT/build-clang-asan/tree/tree/test/testBulkApiVarLength+0x51ea88); 418: #1 0x7f4f0c71e9ce in TS",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10096:54,test,tests,54,https://root.cern,https://github.com/root-project/root/issues/10096,9,"['Test', 'test']","['TestBody', 'test', 'test-testBulkApiSillyStruct', 'test-testBulkApiVarLength', 'testBulkApiVarLength', 'tests']"
Testability,"After merging #12380, @Nowakus noticed issues when trying to fill entries for a model that includes the ATLAS' `DataVector<T>` type.; This is because a proxied collection, notably those deriving from `TGenCollectionProxy`, apparently rely on an active object also for using iterators. This PR should fix the error below.; ```; TGenCollectionProxy FATAL Size> Logic error - no proxy object set.; ```. ## Checklist:; - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12466:359,Log,Logic,359,https://root.cern,https://github.com/root-project/root/pull/12466,2,"['Log', 'test']","['Logic', 'tested']"
Testability,"After messing up my git repository, I closed pull request 796 and re-created this one with the same changes. This pull request is the result of work done by David Clark as a summer intern at Argonne:; To prepare for multi-threaded workflows, a preloading and retaining clusters feature is introduced. This change will prevent additional reads from occurring when reading events out of sequence.; By setting TTree::SetClusterPrefetch(), an entire clusters will be loaded into memory, rather than single baskets.; By setting the MaxVirtualSize of the tree to a negative value, previous clusters will be retained - the absolute value of MaxVirtualSize indicates how many additional clusters will be kept in memory. If TTree CacheDoClusterPrefetch is set to true, GetEntry() will load the entire cluster into memory, not just the first basket. For this, GetBasket() is modified to call a new function GetFreshCluster(). This function is responsible for returning a new basket and clearing out clusters from memory. Because clusters can have varying numbers of baskets, GetFreshCluster() reuses the first basket and clear the rest of the baskets. Reusing all baskets may be more efficient, but adds significant complexity and would not affect the typical case where each cluster only contains a single basket (all the baskets will be reused here). To test the performance of the change, I read 1000 entries (about 1 GB) from a tree of randomly generated data consisting of 2000 branches. Every read had a 2.5% chance of reading 10 entries back or a 2.5% chance of reading 10 entries forward from the current entry.; Without the change enables there were 1.5 GB read in 31102 read calls.; With MaxVirtualSize set to -1 and CacheDoClusterPrefetch true, there were 1.1 GB read in 90 read calls.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1065:1346,test,test,1346,https://root.cern,https://github.com/root-project/root/pull/1065,1,['test'],['test']
Testability,"After reviewing the implementation of `RPageSinkBuf` and starting to prototype parallel RNTuple writing, I would like to propose moving the code related to descriptor building and serialization into a new class. The main observation here is that ""wrapping"" `RPageSink`s do not need that functionality, only the ""final"" sink that actually writes to files or DAOS. For now, I named the class `RPagePersistentSink`, but that's of course up for debate. Other options include ""final"" (even though that is ambiguous in the context of a class hierarchy) and ""serializing"". The first two commits may be useful independent of the rest of the series; the one to ""Avoid calling `PageSink::UpdateSchema` from `RPageSinkBuf`"" depends on moving the `Commit` implementations first (which access `fOpenColumnRanges` and `fOpenPageRanges`. *If* we decide that we want to introduce an intermediate class, we need to carefully benchmark with buffered writes disabled (ie without `RPageSinkBuf`) because there will now be two `virtual` function calls for every `Commit`; with `RPageSinkBuf` we avoid the duplicate serialization. I would expect negligible impact, but better to be sure.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14142:908,benchmark,benchmark,908,https://root.cern,https://github.com/root-project/root/pull/14142,1,['benchmark'],['benchmark']
Testability,After some discussion with Axel we decided that there is no point to; assert here. This feature here is not related to C++ modules.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1017:70,assert,assert,70,https://root.cern,https://github.com/root-project/root/pull/1017,1,['assert'],['assert']
Testability,"After testing it, the IS_SYMLINK part is no longer necessary.; It's also better to just move the check as early as possible,; and not try to remove anything, as that doesn't work anyway,; since CMake creates the files and directories only at the end.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4132:6,test,testing,6,https://root.cern,https://github.com/root-project/root/pull/4132,1,['test'],['testing']
Testability,"After the commits of 14.10.2020, several roofit tutorials fail with this kind of error:; ```; Info in <TWinNTSystem::ACLiC>: creating shared library C:/build/night/LABEL/windows10/SPEC/default/V/master/build/runtutorials/MyPdfV3_cxx.dll; Assertion failed: !CurTokenLexer && ""Cannot #include a file inside a macro!"", file C:\build\night\LABEL\windows10\SPEC\default\V\master\root\interpreter\llvm\src\tools\clang\lib\Lex\PPLexerChange.cpp, line 73; ```; So let's disable them until the problem is understood and fixed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6647:238,Assert,Assertion,238,https://root.cern,https://github.com/root-project/root/pull/6647,1,['Assert'],['Assertion']
Testability,"After the latest LLVM upgrade, changes in cling's symbol resolution; logic cause some unresolved symbol failures in RDF jitting. Adding RJittedAction to the rootmap should help cling autoloading; and work around the problem.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7586:69,log,logic,69,https://root.cern,https://github.com/root-project/root/pull/7586,2,['log'],['logic']
Testability,"After the new batch interface was merged, one can rewrite the Romberg integrator to use batch evaluations. It turned out that the old integrator has a bug: It sometimes stops too early. Here's the performance of different integrators as extracted from tests that come via this PR. The numbers are the relative deviation from the analytic solution:; ```; Integrating log(a*x), relEps = 0.001; 	 	mean 	median 	q95 	q99 	max; 	old:	0.0016594	0.00161012	0.00193414	0.00225071	0.0168282	t=0.04; 	new:	0.000505525	0.00049051	0.000589222	0.000685661	0.0168282	t=0.03; 	ROOT:	3.45732e-08	3.36752e-08	4.03318e-08	4.62674e-08	0.0168282	t=0.14; Integrating log(a*x), relEps = 1e-06; 	 	mean 	median 	q95 	q99 	max; 	old:	2.45769e-05	2.45769e-05	2.4577e-05	2.4577e-05	2.4577e-05	t=0.19; 	new:	3.25114e-07	3.25114e-07	3.25115e-07	3.25115e-07	2.4577e-05	t=0.41; 	ROOT:	7.94638e-14	7.95337e-14	7.9692e-14	7.98497e-14	2.4577e-05	t=0.3; Old integrator reached poor precision: 2.45769e-05 +/- 4.91464e-11 instead of 1e-06; Integrating log(a*x), relEps = 1e-08; 	 	mean 	median 	q95 	q99 	max; 	old:	1.62946e-08	1.62946e-08	1.62946e-08	1.62946e-08	1.62946e-08	t=1.26; 	new:	3.98296e-10	3.98296e-10	3.98297e-10	3.98297e-10	1.62946e-08	t=1.48; 	ROOT:	7.94604e-14	7.95337e-14	7.96915e-14	7.98493e-14	1.62946e-08	t=0.38; [ OK ] Roo1DIntegrator.ConvergenceSettings_log (4402 ms); [ RUN ] Roo1DIntegrator.ConvergenceSettings_pol4; Integrating Polynomial 4th order, relEps = 0.001; 	 	mean 	median 	q95 	q99 	max; 	old:	3.01835e-16	1.45346e-16	5.65891e-16	2.22915e-15	1.15949e-13	t=0.04; 	new:	3.3408e-16	1.84038e-16	6.31068e-16	2.24297e-15	1.15949e-13	t=0.05; 	ROOT:	3.09356e-16	1.56283e-16	5.63307e-16	2.02418e-15	1.15949e-13	t=0.05; Integrating Polynomial 4th order, relEps = 1e-06; 	 	mean 	median 	q95 	q99 	max; 	old:	1.40432e-16	2.12767e-16	4.25546e-16	4.25569e-16	6.38354e-16	t=0.05; 	new:	1.77284e-16	2.12771e-16	4.25564e-16	6.38325e-16	6.38354e-16	t=0.04; 	ROOT:	1.44538e-16	2.12768e-16	4.25551e-16	4.25569e-16	6.383",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6632:252,test,tests,252,https://root.cern,https://github.com/root-project/root/pull/6632,3,"['log', 'test']","['log', 'tests']"
Testability,"After the update to Visual Studio v16.4.0, the /O2 optimization flag in the interpreter make many (25%) of the tests failing.; Try to re-enable /O2 after the upgrade of llvm & clang, or after updating Visual Studio (v16.5.0-pre.2.0 still doesn't work)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4948:111,test,tests,111,https://root.cern,https://github.com/root-project/root/pull/4948,1,['test'],['tests']
Testability,"After the upgrade to LLVM 13, the test `roottest-root-meta-tclass-execInitOrder` will *crash* with AddressSanitizer instrumentation:; ```; 2187: Processing /home/jhahnfel/ROOT/src/roottest/root/meta/tclass/execInitOrder.cxx+...; 2187: Error in <TClass::LoadClassInfo>: no interpreter information for class Derived is available even though it has a TClass initialization routine.; 2187: Error in <TClass::LoadClassInfo>: no interpreter information for class Derived is available even though it has a TClass initialization routine.; 2187: Error in <TClass::LoadClassInfo>: no interpreter information for class Derived is available even though it has a TClass initialization routine.; 2187: Error in <TClass::LoadClassInfo>: no interpreter information for class Derived is available even though it has a TClass initialization routine.; 2187: Derived is found to inherit from TObject; 2187:; 2187: *** Break *** segmentation violation; 2187:; 2187:; 2187:; 2187: ===========================================================; 2187: There was a crash.; 2187: This is the entire stack trace of all threads:; 2187: ===========================================================; 2187: #0 0x00007f2a616e15db in waitpid () from /lib64/libc.so.6; 2187: #1 0x00007f2a61643ce7 in do_system () from /lib64/libc.so.6; 2187: #2 0x00007f2a630125cb in TUnixSystem::StackTrace (this=<optimized out>) at /home/jhahnfel/ROOT/src/core/unix/src/TUnixSystem.cxx:2395; 2187: #3 0x00007f2a6301c2df in TUnixSystem::DispatchSignals (this=0x617000000080, sig=kSigSegmentationViolation) at /home/jhahnfel/ROOT/src/core/unix/src/TUnixSystem.cxx:3615; 2187: #4 <signal handler called>; 2187: #5 0x00000000002d353e in __interceptor_strcmp.part.325 (); 2187: #6 0x00007f2a62e33daf in TClassTable::AddAlternate (normName=0x7f2a6007c780 <.str> ""UserClassViaTypedef"", alternate=0x7f2a6007c7c0 <.str> ""UserClass_t"") at /home/jhahnfel/ROOT/src/core/cont/src/TClassTable.cxx:447; 2187: #7 0x00007f2a62e382ed in ROOT::AddClassAlternate (normName=",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11867:34,test,test,34,https://root.cern,https://github.com/root-project/root/issues/11867,1,['test'],['test']
Testability,"After updating to `clang-14.0.6-1.module_el8.7.0+1198+0c3eb6e2.x86_64`, many tests started failing when compiling ROOT with Clang (134 tests in my configuration). The reason seems to be that Clang is now built with [`GCC_INSTALL_PREFIX=/opt/rh/gcc-toolset-12/root/usr`](https://git.centos.org/rpms/clang/c/4e0495208f843a286dc0d06d9abdc3433a66983a) to detect and use `libstdc++` from GCC 12. Even if that was not the case, https://github.com/llvm/llvm-project/commit/35aaf548237a4f213ba9d95de53b33c5ce1eadce in Clang 15 will have a similar effect for people building the compiler from source. According to our own documentation, ROOT does not guarantee [""compatibility with compilers shipped with `devtoolsets` on CentOS or Red Hat""](https://root.cern/install/build_from_source/#caveats) which right now only leaves building with the system-default GCC 8.5 to get a fully working installation of ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11601:77,test,tests,77,https://root.cern,https://github.com/root-project/root/issues/11601,2,['test'],['tests']
Testability,"All columns created during late model extension need to have their page and column ranges synthesized during reading. However, only *deferred* columns (i.e., principal columns of top-level fields) also require zero pages. This change aims to make this distinction more clear. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15786:282,test,tested,282,https://root.cern,https://github.com/root-project/root/pull/15786,1,['test'],['tested']
Testability,"All kinds of classes, supported for writing, now also can be read from JSON.; Also compressed arrays are supported. Use https://github.com/nlohmann/json parser for extract data from JSON.; For the moment it made private, later one can put it in ROOT include directories.; Does not work with gcc 4.8.x - replaced by dummy class. With the reading capability now is much easier to test JSON I/O. ; New testcases will be submitted to roottest soon.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1462:378,test,test,378,https://root.cern,https://github.com/root-project/root/pull/1462,2,['test'],"['test', 'testcases']"
Testability,"All the RooFit tutorials were replicated in the `root/roofitcore/test` directory to be used as tests, which are never run as part of the unit tests. Actually, the RooFit tutorials made their way into a unit test in the `stressRooFit` test suite, which is run by `ctest` also in the CI. That means the tutorial files in `root/roofitcore/test` are redundant, and also badly out of sync with the actual tutorials and stressRooFit because they are never tested automatically.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11361:65,test,test,65,https://root.cern,https://github.com/root-project/root/pull/11361,7,['test'],"['test', 'tested', 'tests']"
Testability,"Allocate unique pointer pointees with `new`, so that it matches the default deleter. This appears actually already in our unit tests when ran under valgrind. In general, it would be useful to regularly run the unit tests under valgrind. @Dr15Jones FYI.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16737:127,test,tests,127,https://root.cern,https://github.com/root-project/root/pull/16737,2,['test'],['tests']
Testability,Allow for globbing on Google Test sources,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/633:29,Test,Test,29,https://root.cern,https://github.com/root-project/root/pull/633,1,['Test'],['Test']
Testability,Allow parallel build of tests from roottest on Windows,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10247:24,test,tests,24,https://root.cern,https://github.com/root-project/root/pull/10247,1,['test'],['tests']
Testability,"Allow users to adjust the number of entries per cluster and the number of elements per page using `RNTupleWriteOptions`. ; I also took the opportunity to fix some whitespace errors in `RNTupleOptions.hxx`. Fixes #7853. Usage (see tests as well): ; ```cpp; RNTupleWriteOptions opt;; opt.SetNClusterEntries(100000);; opt.SetNElementsPerPage(40000);; auto ntuple = RNTupleWriter::Recreate(; std::move(model), ""ntuple"", fileGuard.GetPath(), opt; );; ```. As was pointed out in https://github.com/root-project/root/pull/7112#issue-564081466, there are some `NElementsPerPage` inputs that could cause compression problems (i.e. those where the total page memory is larger than `0xffffff`). Should we have some error checking at the `RNTupleWriteOptions` level? Or maybe this should be considered a bug on the compression side of things. cc @jalopezg-r00t",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8113:230,test,tests,230,https://root.cern,https://github.com/root-project/root/pull/8113,1,['test'],['tests']
Testability,Allowed `RVec` shorthand aliases in Numba.Declare.; Aliases are applied in `tutorials/pyroot/pyroot004_NumbaDeclare.py`. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #9898,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9950:127,test,tested,127,https://root.cern,https://github.com/root-project/root/pull/9950,1,['test'],['tested']
Testability,"Allows for direct processing of sqlite files under HTTP(S) URLs provided that Davix is available. Replaces #2578. I think it would be nice to have a unit test for reading of remote files. Unfortunately, Davix does not understand the `http:///path/to/file` trick to use a URL on local paths. Can we upload tree/dataframe/test/RSqliteDS_test.sqlite to https://root.cern.ch/... for testing?",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2608:154,test,test,154,https://root.cern,https://github.com/root-project/root/pull/2608,3,['test'],"['test', 'testing']"
Testability,Allows for reading integers from other integer types. Includes bounds checking where necessary. The tests are a little mechanical but I'm not sure if the code would improve with more templates.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16607:100,test,tests,100,https://root.cern,https://github.com/root-project/root/pull/16607,1,['test'],['tests']
Testability,Allows to configure CUDA sm level for Cling CUDA tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7190:49,test,tests,49,https://root.cern,https://github.com/root-project/root/pull/7190,1,['test'],['tests']
Testability,"Also apply clang-format to the involved files in the process. ## Changes or fixes:; `RNTupleFileWriter::Recreate` and `RNTupleFileWriter::Append ` now return a `unique_ptr` rather than a raw pointer, to make it obvious that the caller gets ownership of that pointer. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15580:288,test,tested,288,https://root.cern,https://github.com/root-project/root/pull/15580,1,['test'],['tested']
Testability,Also make isBinnedDistribution depend on the vars rather than always return true. ## Changes or fixes:. Makes ParamHistFunc more flexible/powerful. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10516:169,test,tested,169,https://root.cern,https://github.com/root-project/root/pull/10516,1,['test'],['tested']
Testability,Also reduce log output when processing too many executions. Update JSROOT with eslint formating,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13758:12,log,log,12,https://root.cern,https://github.com/root-project/root/pull/13758,1,['log'],['log']
Testability,"Also support the `Offset(""bin"")` feature in simultaneous fits with the; legacy evaluation backend (e.g., the old test statistic classes). In this case, The top-level `RooNLLVar` actually doesn't do anything; but contains pointers to the NLLs for the individual channels. The; function call to enable the offsetting must be delegated to those. A unit test that covers this is also implemented. Note that for the new CPU evaluation backend, this is working already. A second commit in this PR is fixing a copy-paste error in the functions that define the evaluation backend.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13890:113,test,test,113,https://root.cern,https://github.com/root-project/root/pull/13890,2,['test'],['test']
Testability,Also test 6.32 CI,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16032:5,test,test,5,https://root.cern,https://github.com/root-project/root/pull/16032,1,['test'],['test']
Testability,"Alternatively we could enlarge the buffer for `snprintf`. However, this would change the print-out since the truncation feature of `snprintf` is a feature. @lmoneta What do you think?. Edit: The truncation warnings can be found here: https://sft.its.cern.ch/jira/secure/attachment/22139/build.log",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3869:293,log,log,293,https://root.cern,https://github.com/root-project/root/pull/3869,1,['log'],['log']
Testability,"Although padding is implementation-dependent, most add enough padding at the end to comply with the requirements of the type with strictest alignment.; Given that `GetValueSize()` is used to allocate memory for the described type, not accouting trailing padding may cause issues. `ROOT::Experimental::RFieldDescriptor::CreateField()` has a direct use of RRecordField. Despite it seems to be working in all tested platforms, be on the safe side and add this padding. This, does not affect derived classes `RPairField` and `RTupleField`, that override determination of the size of the type. ## Checklist:; - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10790:406,test,tested,406,https://root.cern,https://github.com/root-project/root/pull/10790,2,['test'],['tested']
Testability,Always use ROOT_ADD_TEST_SUBDIRECTORY when adding test directories,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1515:50,test,test,50,https://root.cern,https://github.com/root-project/root/pull/1515,1,['test'],['test']
Testability,"An attempt to build ROOT against the system Python3 on MacOS11/12 results in a build with no errors, but with some test failures:. https://lcgapp-services.cern.ch/root-jenkins/job/root-nightly-master/LABEL=mac12,SPEC=soversion,V=master/3084/. The following is the relevant error:. ```; cling::DynamicLibraryManager::loadLibrary(): dlopen(/Users/sftnight/build/jenkins/night/LABEL/mac12/SPEC/soversion/V/master/build/lib/libROOTTPython.6.25.02.so, 0x0009): Library not loaded: @rpath/Python3.framework/Versions/3.8/Python3; ```. According to:. ```; $ otool -l lib/libROOTTPython.so | grep -C2 Python3; cmd LC_LOAD_DYLIB; cmdsize 72; name @rpath/Python3.framework/Versions/3.8/Python3 (offset 24); time stamp 2 Thu Jan 1 01:00:02 1970; current version 3.8.0; --; cmd LC_RPATH; cmdsize 104; path /Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib (offset 12); Load command 20; cmd LC_FUNCTION_STARTS; ```. RPATH is set, but the dylib load directive doesn't match.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9793:115,test,test,115,https://root.cern,https://github.com/root-project/root/issues/9793,1,['test'],['test']
Testability,And add tests. This fixes #8465.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8468:8,test,tests,8,https://root.cern,https://github.com/root-project/root/pull/8468,1,['test'],['tests']
Testability,"Apologies for making this an annoying bug report :cry:, ; but I unfortunately, so far, wasn't able to create a small self-contained reproducer that triggers the bug. . But with LCG_99 and the following snippet I can at least show the problem. ; ```py; import cppyy; cppyy.cppdef(r""""""; using vec = SmartRefVector<DataObject>;; using ref = SmartRef<DataObject>;; """"""). vec = cppyy.gbl.vec(); ref = cppyy.gbl.ref(); vec.push_back(ref); vec.size(); print(vec[0]); print(vec.at(0)); ```. Running:; ```shell; source /cvmfs/sft.cern.ch/lcg/views/LCG_99/x86_64-centos7-gcc10-opt/setup.sh; python test.py; ```; will print: ; ```; <cppyy.gbl.SmartRefVector<DataObject> object at 0x83e0f00>; <cppyy.gbl.SmartRef<DataObject> object at 0xcf6b7c0>; ```. If you try the same on an older ROOT version e.g. with LCG_97a (`source /cvmfs/sft.cern.ch/lcg/views/LCG_97a/x86_64-centos7-gcc9-opt/setup.sh`), this will print:; ```; <ROOT.SmartRef<DataObject> object at 0xaac7ac0>; <ROOT.SmartRef<DataObject> object at 0xaac7ac0>; ```. So in ROOT 6.22 the `operator[]` in python somehow doesn't work correctly for this class.; Now as I said, I wish I could have provided an easier reproducer, and I'll have another go at it tomorrow, but for now this is the best I could come up with. ; The `SmartRefVector` is part of the `Gaudi` project and can be found [here](https://gitlab.cern.ch/gaudi/Gaudi/-/blob/master/GaudiKernel/include/GaudiKernel/SmartRefVector.h). ; I've tried creating a simplified version of the `SmartRefVector`, but that didn't exhibit the same problem so it's apparently not as simple as blaming it on the inheritance on `std::vector` which of course isn't ideal... :see_no_evil:",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7179:588,test,test,588,https://root.cern,https://github.com/root-project/root/issues/7179,1,['test'],['test']
Testability,"Apparently xrootd 5.3.1 have a different sha256 hash (not clear how it could happened or if maybe in PR I was using old). Failure was detected on centos8 rootbench machine (https://lcgapp-services.cern.ch/root-jenkins/job/root-benchmark/):; ```; -- verifying file...; file='/data/sftnight/workspace/root-benchmark/BUILDTYPE/Release/COMPILER/default/LABEL/performance-cc8/SPEC/nortcxxmod/build/builtins/xrootd/XROOTD-prefix/src/v5.3.1.tar.gz'; -- SHA256 hash of; /data/sftnight/workspace/root-benchmark/BUILDTYPE/Release/COMPILER/default/LABEL/performance-cc8/SPEC/nortcxxmod/build/builtins/xrootd/XROOTD-prefix/src/v5.3.1.tar.gz; does not match expected value; expected: '1194ba435dc1e243f3cdb8273f6385407183799faf7622a582a828f4aff6807d'; actual: '0800b4c6444591a6514c5b81b2c4c79439875136ab2267ce4bed99cb94ead6e6'; -- Hash mismatch, removing...; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9103:227,benchmark,benchmark,227,https://root.cern,https://github.com/root-project/root/pull/9103,3,['benchmark'],['benchmark']
Testability,"Apparently, `TClassEdit::ResolveTypedef()` is unable to resolve a typedef that aliases a fundamental data type if the `typedef` declaration is not known to cling. In non-C++-modules builds, making it known typically involves parsing the corresponding header. In addition, `TDataMember::GetTrueTypeName()`, however, correctly provides the information, which seems to be inconsistent behavior in ROOT meta. This pull request is twofold: _(i)_ it cleans up the code for type name normalization, and _(ii)_ circumvents this issue by directly using the resolved type name provided by `TDataMember::GetTrueTypeName()`. ## Changes or fixes:; - Separate the internal `GetNormalizedType()` function in `GetCanonicalTypeName()` (which returns the canonical name of a type, resolving typedefs where needed) and `GetNormalizedTypeName()` (which returns the RNTuple normalized name for a type, e.g. `const vector<T>` -> `std::vector<T>`.; - Add a protected `RFieldBase::Create()` overload that takes an already normalized type name + type alias.; - Use the aforementioned overload in `RClassField` to create fields associated to data members. ## Checklist:; - [x] tested changes locally; - [x] updated the docs (if necessary). (FYI, @Nowakus; this PR should solve the typedef issues that you were encountering)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13255:1151,test,tested,1151,https://root.cern,https://github.com/root-project/root/pull/13255,1,['test'],['tested']
Testability,"Apparently, this test continues to be broken for some CI configs, which needs to be investigated carefully; thus disable temporarily. Related PRs fixing issues found while investigating this test: #13021, #13022.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13023:17,test,test,17,https://root.cern,https://github.com/root-project/root/pull/13023,2,['test'],['test']
Testability,"Apply changes suggested in the `Notes` section of the `isspace` [C++ standard](https://en.cppreference.com/w/cpp/string/byte/isspace) This fixes the following error when reading the character `'ò' (-14 )` in stressgraphics:; ```; Debug Assertion Failed!; Program:; C:\root-dev\build\x86\debug_test\test\Debug\stressGraphics.exe; File: minkernel\crts\ucrt\src\appcrt\convert\isctype.cpp; Line 36; Expression c > = -1 && c < = 255; ```. From `isspace((Int_t)c)`, in `core\base\src\Stringio.cxx`, in `std::istream& TString::ReadToken(std::istream& strm)`:; ```; while ((wid == 0 || Length() < (Int_t)wid) &&; strm.get(c).good() && (hitSpace = isspace((Int_t)c)) == 0) {; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13584:236,Assert,Assertion,236,https://root.cern,https://github.com/root-project/root/pull/13584,2,"['Assert', 'test']","['Assertion', 'test']"
Testability,Apply clang-tidy changes to the vectorized fitting tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2724:51,test,tests,51,https://root.cern,https://github.com/root-project/root/pull/2724,1,['test'],['tests']
Testability,"Apply new naming convention in JSROOT; - all methods names starts with small letter; - all settings moved to `JSROOT.settings`; - remove several deprecated methods; - provide documentation for all ""public"" JSROOT classes. All http, webgui, v7 tutorials are tested and still working.; Also `iPython` is tested. If there are no other objections, major JSROOT release v6 will be done in next days",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6996:257,test,tested,257,https://root.cern,https://github.com/root-project/root/pull/6996,2,['test'],['tested']
Testability,"Apply several improvements and fixes in MethodDL , mainly: . - Use now Float instead of Double. This makes the network 2 times faster without loosing performances in quality of results; - Compute now the regularisation term in the loss once/epoch when evaluating ; - Optimise the MultiThread execution on CPU by setting a minimum number of elements to execute per task ; - Optimise evaluation of the networks, by implementing GetMvaValues in MethodDL. This reduces significantly the time spent for network testing and evaluating in a TMVA session",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2219:506,test,testing,506,https://root.cern,https://github.com/root-project/root/pull/2219,1,['test'],['testing']
Testability,"As ROOT cannot catch JITted exceptions on Apple Silicon (see the bug report https://github.com/root-project/root/issues/7541 for context), some tests are currently failing there due to the use of exceptions in the compatibility code for `RDataSource`. Implement this with a boolean flag and a pattern inspired by `errno`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9731:144,test,tests,144,https://root.cern,https://github.com/root-project/root/pull/9731,1,['test'],['tests']
Testability,"As RVec is a class template, even if ROOT is compiled with -DNDEBUG; these asserts might be compiled in user code depending on whether or; not they remember to include `-DNDEBUG` in their debug flags.; I think the performance penalty is too high w.r.t. the benefit.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9376:75,assert,asserts,75,https://root.cern,https://github.com/root-project/root/pull/9376,1,['assert'],['asserts']
Testability,"As a follow-up from PR #12975, this pull request enables fetching up-to-date content for the given branch of a related repository. Before this patch, a related repository (roottest, etc.), was cloned if not found. It is, however, useful to be able to also checkout an up-to-date branch in an existing repository, e.g. for the new CI. This behavior is controlled by defining the `xxx_force_checkout=ON` CMake variable. Therefore, this PR also adds `roottest_force_checkout=ON` for the new CI. For rootbench, the upstream `master` branch is fetched in any case, but for the sake of code reuse this PR also allows the local clone to be _optionally_ updated. ## Checklist:; - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13003:676,test,tested,676,https://root.cern,https://github.com/root-project/root/pull/13003,1,['test'],['tested']
Testability,"As a normalization set within `evaluate()`, the RooGenericPdf used the; `RooAbsPdf::_normSet` member, and the RooFormulaVar used the; `RooAbsReal::_lastNSet` member. Both of them are not supposed to be used; outside the implementation of `RooAbsPdf::getValV()` and; `RooAbsReal::getValV()` and they are unreliable in any other context. Actually, in `evaluate()`, one should always use the normalization set; from the proxy, which is in this case a RooArgList (see for example how; the RooAddition does it). This commit suggests to do that for the; RooGenericPdf and RooFormulaVar. This change fixes the following Jira issue:; [ROOT-5101](https://sft.its.cern.ch/jira/browse/ROOT-5101). A new unit test is implemented in `testGenericPdf` to cover the problem; reported in that issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10873:697,test,test,697,https://root.cern,https://github.com/root-project/root/pull/10873,2,['test'],"['test', 'testGenericPdf']"
Testability,"As all libraries, executabls have to use source directories for build. ; In this case only includes from linked libraries are allowed to be used. Affects all executables and all tests. Should improve building with `-Dcxxmodules=ON`. Several generated includes moved to ""ginclude/"" path while used only in ROOT:; * `hist2workspaceCommandLineOptionsHelp.h`; * `haddCommandLineOptionsHelp.h`; * `rootCommandLineOptionsHelp.h`. Several adjustments in tests are required. . Also in several places replace `include_directories` by `target_include_directories`",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5459:178,test,tests,178,https://root.cern,https://github.com/root-project/root/pull/5459,2,['test'],['tests']
Testability,"As discussed at https://github.com/root-project/root/pull/10753#issuecomment-1155514143 , the current way we run `TROOT::EndOfProcessCleanups` twice when using PyROOT is necessary, but we don't understand why. The change in the PR removed the double use of the function and the original reproducer still works. It would be nice to have test coverage for this particular pattern used in PyROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11279:336,test,test,336,https://root.cern,https://github.com/root-project/root/issues/11279,1,['test'],['test']
Testability,"As discussed in #12376, the release candidate tag was to be bumped to RC2 after late model extension + split encoding is available. In principle, it's safe to do it now. ## Checklist:; - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13566:191,test,tested,191,https://root.cern,https://github.com/root-project/root/pull/13566,1,['test'],['tested']
Testability,"As explained in #15405, the documentation for the `ExternalConstraints` option in RooMCStudy is misleading. People should just pass this to the `FitOptions`, so it actually needs no own docs. The logic to forward the `ExternalConstraints` to the FitOptions is kept for backwards compatibility. Closes #15405.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15682:196,log,logic,196,https://root.cern,https://github.com/root-project/root/pull/15682,1,['log'],['logic']
Testability,"As explained in https://github.com/root-project/root/issues/8745, if we look up the `Detail` namespace first and then define something else in it, there is an assertion failure. That crash does not happen if there is no prior lookup. Example:. ```; root [0] auto c = TClass::GetClass(""Detail""); (TClass *) @0x7fffd0908fc0; root [1] namespace Detail { int i; }; root.exe: /home/etejedor/root/fork/root/interpreter/llvm/src/include/llvm/Support/Casting.h:105: static bool llvm::isa_impl_cl<To, const From*>::doit(const From*) [with To = clang::TagType; From = clang::Type]: Assertion `Val && ""isa<> used on a null pointer""' failed.; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8828:159,assert,assertion,159,https://root.cern,https://github.com/root-project/root/issues/8828,2,"['Assert', 'assert']","['Assertion', 'assertion']"
Testability,"As far as I can tell support for TEntryLists in TTreeProcessorMT is broken, and I'm not sure how to fix it.; I have disabled the MT tests for now.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3245:132,test,tests,132,https://root.cern,https://github.com/root-project/root/pull/3245,1,['test'],['tests']
Testability,"As it is now, cling is not capable to load library for outlined; functions. As long as modules not enabled by default - add; R__LOAD_LIBRARY macro to all test scripts",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4517:154,test,test,154,https://root.cern,https://github.com/root-project/root/pull/4517,1,['test'],['test']
Testability,"As measured, there is an improvement if the expansion of `R__ASSERT()` is out of the inlined code path due to slighly more compact code.; Additionally, the `R__ASSERT(count > 0)` has been removed, given that `ClusterSize_t::ValueType` is an unsigned integral type. This was seen during the evaluation of the relative overhead of RField's post-read callbacks, which for reference I provide below. Two different tests were carried out: _(i)_ 4 fields of type `std::uint32_t`; and _(ii)_ 2 fields of type `std::uint32_t` + 2 fields of a user-defined struct, where:; - BASE refers to the current `master` with `RFieldBase::Read()` slightly changed to not support read callbacks.; - [1] refers to the current `master` + the changes in this PR; - [2] refers to the current `master` where `RFieldBase::InvokeReadCallbacks()` is also outlined by moving it to RField.cxx. All tests used a Release `-O3` build, 40M entries and 505 compression; results in $us$, averaged over 10 executions. _(i)_ 4 fields of type `std::uint32_t`:; ```; | Average | Rel. increase; ---------------------------+-----------+--------------; BASE | 871502.4 |; No callbacks [1] | 867523.1 | 0.9954; No callbacks [1][2] | 878027.7 | 1.0075; 1 callback | 1068704.3 | 1.2263; 2 callbacks | 1233821.7 | 1.4157; ```; _(ii)_ 2 fields of type `std::uint32_t` + 2 user-defined structs:; ```; | Average | Rel. increase; ---------------------------+-----------+--------------; BASE | 2500244.7 |; No callbacks [1] | 2688342.6 | 1.0752; No callbacks [1][2] | 2746363.6 | 1.0984; 1 callback | 2883271.0 | 1.1532; 2 callbacks | 3016407.0 | 1.2064; ```. As noted in test _(ii)_ for 'No callbacks [1]', non-simple fields have an overhead due to the additional branch. Still, the change in this PR is beneficial. ## Checklist:; - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13487:410,test,tests,410,https://root.cern,https://github.com/root-project/root/pull/13487,4,['test'],"['test', 'tested', 'tests']"
Testability,"As noted in GitHub issue #7103, the interpolation code 3 is the same as code 2 in the `FlexibleInterpVar` and the `PiecewiseInterpolation` classes. According to some comments in the source code, interpolation code 3 was meant to be ""a parabolic version of log-normal"". There were two options to fix this:. 1) Actually implement this parabolic interpolation with linear; extrapolation, analogous to code 2 but in log space. 2) Clearly mark interpolation code 3 as non-existing. This commit implements solution 2, because the interpolation code 3 is not mentioned anywhere outside the ROOT source code. Especially not is the HistFactory paper:; https://cds.cern.ch/record/1456844/files/CERN-OPEN-2012-016.pdf. Implementing a new interpolation scheme that apparently was not needed in the last 10 years anyway would increase the burden on the user to understand all these different settings unnecessarily. Closes #7103.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13809:256,log,log-normal,256,https://root.cern,https://github.com/root-project/root/pull/13809,2,['log'],"['log', 'log-normal']"
Testability,"As per a request by @mnowakgit, it would be useful if `RNTupleWriter::Fill()` returns the number of (uncompressed) bytes written - IIRC, TTree does a similar thing. As `RFieldBase::Append()` already provides the count of written bytes, the changes included in this PR are minimal. ## Checklist:; - [X] tested changes locally; - [X] updated the docs (if necessary). This PR fixes #11672.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11674:302,test,tested,302,https://root.cern,https://github.com/root-project/root/pull/11674,1,['test'],['tested']
Testability,"As proposed in https://root-forum.cern.ch/t/chord-diagram/48785,; implement chord diagram and circular graphs for TH2; For chord diagram reuse d3.chord component of d3.js. Many other improvements - see jsroot log",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9893:209,log,log,209,https://root.cern,https://github.com/root-project/root/pull/9893,1,['log'],['log']
Testability,"As reported at https://github.com/root-project/roottest/pull/946#issuecomment-1519645135 and can be seen in the test; `roottest-root-meta-race-12552-exec_dlopenrace-auto`. The relevant output is below and the problem is a (real) quirk of the test. It linked to the repeated unload and loading of the same library in parallel. During the unloading and loading cycle the TClass object representing the user classes (from that library) are created and deleted and it seems that the pointer value is captured and used outside the main lock (and this is done concurrently we the deletion). This needs to be fixed but is unlikely to happen in the wild. ```; ==1544443==ERROR: AddressSanitizer: heap-use-after-free on address 0x616000617c20 at pc 0x7f8857c557ae bp 0x7f88265b3e60 sp 0x7f88265b3e50; READ of size 4 at 0x616000617c20 thread T1; #0 0x7f8857c557ad in TClass::Size() const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5706:8; #1 0x7f8851923388 in TBufferFile::ReadFastArray(void*, TClass const*, int, TMemberStreamer*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:1605:25; #2 0x7f8851cc28c1 in TStreamerInfoActions::ReadSTLObjectWiseFastArray(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short, unsigned int) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TStreamerInfoActions.cxx:1364:11; #3 0x7f8851cc28c1 in int TStreamerInfoActions::ReadSTL<&(TStreamerInfoActions::ReadSTLMemberWiseSameClass(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short)), &(TStreamerInfoActions::ReadSTLObjectWiseFastArray(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short, unsigned int))>(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TStreamerInfoActions.cxx:1407:10; #4 0x7f8851931ee7 in TStreamerInfoActions::TConfigu",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12715:112,test,test,112,https://root.cern,https://github.com/root-project/root/issues/12715,2,['test'],['test']
Testability,"As reported by @behrenhoff MethodDL did not have so far an implementation for the dropout. ; (see https://root-forum.cern.ch/t/method-kdl-in-tmva/32863); This PR fixes the dropout for dense layers, implementing what has been done for the previous MethodDNN. . The implementation removes (by setting to zero) randomly input nodes and re-scale the surviving ones by a factor 1/(1.- dropout_probability). In this way no changes are needed for testing and evaluating a trained network with dropout. . The PR applies also some other small improvements such as print out of optimizer names and some fixes in the cross-evaluation function to avoid NaN outputs.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3516:440,test,testing,440,https://root.cern,https://github.com/root-project/root/pull/3516,1,['test'],['testing']
Testability,"As reported by CMSSW tests (for example: https://github.com/cms-sw/cmsdist/pull/6314#issuecomment-713547097) where the data appear odd/corrupted, there is an issue in TStreamerInfo::GenerateInfoForPair (which is almost always used for std::pair in the tip of v6.22 and master). The problem is when calculating the offset of the second data member, TStreamerInfo::GenerateInfoForPair uses (unwittingly, of course :) ), the value zero for the size of the enums. In addition (see https://github.com/root-project/root/issues/6725), the TEnum size information is no yet available in rootpcm files. (i.e. a fix to this bug will work only for default size enums until #6725 is fixed).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6726:21,test,tests,21,https://root.cern,https://github.com/root-project/root/issues/6726,1,['test'],['tests']
Testability,"As reported in ROOT-9463, the result of GetColumnNames is redundant. A simple reproducer:; ```; TFile f(""f.root"", ""recreate"");; TTree t(""t"", ""t"");; int a;; t.Branch(""a"", &a);; a = 42;; t.Fill();; t.Write();; f.Close();; ROOT::RDataFrame df(""t"", ""f.root"");. for (auto x : df.GetColumnNames()); std::cout <<x <<std::endl;; ```. This redundancy is now not exposed to the user. **It would be nice** to have more tests on real use cases.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2443:408,test,tests,408,https://root.cern,https://github.com/root-project/root/pull/2443,1,['test'],['tests']
Testability,"As reported in https://root-forum.cern.ch/t/th3-covariance-computation-issue/43724; sumw should be used instead of sumw2 in the computation of the diagonal elements of the covariance. ; ```; if (axis1 == 1 && axis2 == 1) {; return TMath::Abs(sumwx2/sumw - sumwx*sumwx/sumw2);; }; ```; should be : ; ```; if (axis1 == 1 && axis2 == 1) {; return TMath::Abs(sumwx2/sumw - sumwx*sumwx/(sumw*sumw));; }; ```; The computation of the off-diagonal element is correct!. To reproduce just do: ; ```; {; TH3D h1(""h1"",""h1"",10,0,10,10,0,10,10,0,10);; h1.Fill(1,1,1,2);; h1.Fill(3,3,3,4);; R__ASSERT( h1.GetCovariance(1,1) == h1.GetCovariance(1,2));; R__ASSERT ( TMath::AreEqualAbs( h1.GetCovariance(1,1), h1.GetStdDev(1)*h1.GetStdDev(1), 1.E-10) ); ; cout << ""test passed"" << endl;; }",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7319:747,test,test,747,https://root.cern,https://github.com/root-project/root/issues/7319,1,['test'],['test']
Testability,"As reported in https://root-forum.cern.ch/t/unexpected-additional-bins-appear-in-histogram-projection-when-using-bin-labels/41828/. projection of histogram with labels created additional bins.; This is due to scaling TH1::FindBin instead of TH1::FindFixBin and TH1::SetBinContent that internally extends also the axis if extendable. . Also as shown in test below, projection of TH2 and TH3 to Profille's do not preserve labels. . ```; void dinko() {; gStyle->SetLabelSize(0.1);; ; auto hist = new TH2F(""hist"", """", 2, 0, 2, 2, 0, 2);; printf( ""2D x-axis N bins: %d \n"", hist->GetXaxis()->GetNbins());; TH1D* hist_px = hist->ProjectionX();. printf( ""1D N bins: %d \n"",hist_px->GetXaxis()->GetNbins());. hist->GetXaxis()->SetBinLabel(1, ""A"");; hist->GetXaxis()->SetBinLabel(2, ""B"");; printf( ""2D x-axis N bins: %d \n"", hist->GetXaxis()->GetNbins());. hist_px = hist->ProjectionX();; auto c1 = new TCanvas();; c1->Divide(1,4);; c1->cd(1);; hist_px->DrawCopy();. printf( ""1D N bins: %d \n"", hist_px->GetXaxis()->GetNbins() );; hist_px->LabelsDeflate();; printf( ""1D N bins: %d \n"", hist_px->GetXaxis()->GetNbins() );. // test profile projection. auto prof_px = hist->ProfileX();; c1->cd(2);; prof_px->Draw();; printf( ""PROFILE N bins: %d \n"", prof_px->GetXaxis()->GetNbins() );; ; ; //// Test 3D; printf(""\nTEST 3D case \n"");; auto hist3 = new TH3F(""hist3"", """", 2, 0, 2, 2, 0, 3, 2, 0, 4);; hist3->GetXaxis()->SetBinLabel(1, ""A"");; hist3->GetXaxis()->SetBinLabel(2, ""B"");; hist_px = hist3->ProjectionX(""x"");; printf( ""1D N bins: %d \n"", hist_px->GetXaxis()->GetNbins() );; c1->cd(3);; hist_px->DrawCopy();. auto prof2_px = hist3->Project3DProfile(""yx"");; printf( ""PROFILE N bins: %d \n"", prof2_px->GetXaxis()->GetNbins() );; c1->cd(4);; prof2_px->Draw();; }; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6658:352,test,test,352,https://root.cern,https://github.com/root-project/root/issues/6658,3,"['Test', 'test']","['Test', 'test']"
Testability,"As seen in https://lcgapp-services.cern.ch/root-jenkins/job/root-nightly-master/3440/LABEL=ROOT-centos9,SPEC=noimt,V=master/testReport/junit/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simple_lz4_compr_level1 : ; ```; hadd Target file: hsimple401.root; hadd compression setting for all output: 401; hadd Source file 1: hsimple.root; hadd Target path: hsimple401.root:/; -- TEST COMMAND -- ; cd /home/sftnight/build/night/LABEL/ROOT-centos9/SPEC/noimt/V/master/build/roottest/root/io/filemerger; /usr/bin/timeout -s USR2 270s /home/sftnight/build/night/LABEL/ROOT-centos9/SPEC/noimt/V/master/build/bin/root.exe -q -l -b /home/sftnight/build/night/LABEL/ROOT-centos9/SPEC/noimt/V/master/roottest/root/io/filemerger/testSimpleFile.C(""hsimple401.root"",25000,401,418980,7); -- BEGIN TEST OUTPUT --. Processing /home/sftnight/build/night/LABEL/ROOT-centos9/SPEC/noimt/V/master/roottest/root/io/filemerger/testSimpleFile.C(""hsimple401.root"",25000,401,418980,7)...; Checking hsimple401.root; (int) 1000. -- END TEST OUTPUT --; -- BEGIN TEST ERROR --; Error in <testSimpleFile>: Disk size of hsimple401.root should have been 418980 but is 418988 (tolerance 7 bytes). -- END TEST ERROR --; CMake Error at /home/sftnight/build/night/LABEL/ROOT-centos9/SPEC/noimt/V/master/build/RootTestDriver.cmake:186 (message):; got exit code 255 but expected 0; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12438:124,test,testReport,124,https://root.cern,https://github.com/root-project/root/issues/12438,9,"['TEST', 'test']","['TEST', 'testReport', 'testSimpleFile']"
Testability,As seen in https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/157773/console which the result of; ```; @phsft-bot build just on ROOT-performance-centos8-multicore/default with flags -DCTEST_TEST_EXCLUDE_NONE=On -Droofit=OFF; ```. Several tutorials fails because they can load the intentionally non existent roofit libraries. ```; 15:15:19 The following tests FAILED:; 15:15:19 	909 - tutorial-roostats-FourBinInstructional-py (Failed); 15:15:19 	910 - tutorial-roostats-IntervalExamples-py (Failed); 15:15:19 	911 - tutorial-roostats-MultivariateGaussianTest-py (Failed); 15:15:19 	912 - tutorial-roostats-Zbi_Zgamma-py (Failed); 15:15:19 	913 - tutorial-roostats-rs101_limitexample-py (Failed); 15:15:19 	914 - tutorial-roostats-rs401c_FeldmanCousins-py (Failed); 15:15:19 	915 - tutorial-roostats-rs601_HLFactoryexample-py (Failed); 15:15:19 	916 - tutorial-roostats-rs701_BayesianCalculator-py (Failed); 15:15:19 	917 - tutorial-roostats-rs_bernsteinCorrection-py (Failed); 15:15:19 	918 - tutorial-roostats-rs_numbercountingutils-py (Failed); 15:15:19 	1193 - roottest-python-pickle-write (Failed); 15:15:19 	1194 - roottest-python-pickle-read (Failed); 15:15:19 	1195 - roottest-python-pythonizations-pythonizations (Failed); 15:15:19 	1197 - roottest-python-regression-regression (Failed); ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11605:375,test,tests,375,https://root.cern,https://github.com/root-project/root/issues/11605,1,['test'],['tests']
Testability,"As suggested by @pcanal in #12220, adds unit tests to verify the on-disk encoding of split encoded columns",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12393:45,test,tests,45,https://root.cern,https://github.com/root-project/root/pull/12393,1,['test'],['tests']
Testability,"As there is one RLoopManager per computation graph, when aliases; were managed by RLoopManager they were computation-graph-wide.; It is desirable to make Alias definitions behave coherently with; Defines instead, i.e. have Aliases be only accessible in the branch; of the computation graph in which they were defined, and only in; nodes that are downstream of the one where the alias is added. This resolves #7381, ""[DF] Let Aliases be defined per computation graph; branch, not globally"". In particular, in this commit:; - move alias management from RLoopManager to RBookedColumns; - remove alias-managing logic from RLoopManager; - refactor several functions so they only take RBookedColumns as input; rather than a list of defined names plus a map of aliases; (CheckForDefinition, CheckForRedefinition, FindUnknownColumns,; GetValidatedColumnNames, BookFilterJit, FindUsedColumns,; ParseRDFExpression); - use RBookedColumns::ResolveAlias instead of ResolveAlias helper function; - adapt dataframe_utils test to the new signature of FindUnknownColumns. Note that this is a backward-incompatible change for user code that; relied on this global definition of Aliases. We expect this to be an; exceedingly rare usecase, and if such code exists it will produce a; clear error message.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9496:607,log,logic,607,https://root.cern,https://github.com/root-project/root/pull/9496,2,"['log', 'test']","['logic', 'test']"
Testability,"As we cannot even know whether the other TDirectory has been deleted in the meantime, we have to; skip the optimization of erasing globalptr from the list of the oldvalue. This is expected to fix MT crashes observed by Alice. (cherry picked from commit 79a669bb1cd0ccd8bcaeb6c8f6b09c5ced761ac7). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8929:361,test,tested,361,https://root.cern,https://github.com/root-project/root/pull/8929,1,['test'],['tested']
Testability,"As we discovered in a CMSSW ROOT `master` sync PR, the new RooFit CPU; backend treats empty datasets differently from the legacy NLL evaluation; backend:; https://github.com/cms-sw/cmsdist/pull/9025. This commit is fixing this, in particular removing the assumption that; datasets used for fits with the new CPU backend are never empty. A unit test that validates the behavior for empty data objects is also; added. I set the priority to ""high"" because this is a blocker for CMSSW to use ROOT master.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14817:344,test,test,344,https://root.cern,https://github.com/root-project/root/pull/14817,1,['test'],['test']
Testability,"As we discussed in #2644, the nicest interface for printing is; printValue, and we should support people using this rather than going; through cling::Value::print(). This patch contains:; - Implementation of declarePrintValue; - Re-Implementation of ClingPrintValue because I changed to use Evaluate; some time ago; - removing of RVec version of printValue which wasn't used at all; - Fix test/vecops_rvec.cxx, printValue is never supposed to be called by; a normal user.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2664:389,test,test,389,https://root.cern,https://github.com/root-project/root/pull/2664,1,['test'],['test']
Testability,Asked the originator to test. See https://sft.its.cern.ch/jira/browse/ROOT-9032,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1080:24,test,test,24,https://root.cern,https://github.com/root-project/root/pull/1080,1,['test'],['test']
Testability,Assert does not work on Linux?,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1248:0,Assert,Assert,0,https://root.cern,https://github.com/root-project/root/pull/1248,1,['Assert'],['Assert']
Testability,Assert isn't included from the STL/libc module as it's a textual; header which needs to be textually parsed. Let's add it to the; TCling `declare` call to cheaply get assert with modules into; the lookup.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1387:0,Assert,Assert,0,https://root.cern,https://github.com/root-project/root/pull/1387,2,"['Assert', 'assert']","['Assert', 'assert']"
Testability,Assert when trying to write RNTuple to full disk,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14487:0,Assert,Assert,0,https://root.cern,https://github.com/root-project/root/issues/14487,1,['Assert'],['Assert']
Testability,Assertion Declaration context must already be complete!,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14186:0,Assert,Assertion,0,https://root.cern,https://github.com/root-project/root/issues/14186,1,['Assert'],['Assertion']
Testability,Assertion exception including header file with GaudiPython module,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7950:0,Assert,Assertion,0,https://root.cern,https://github.com/root-project/root/issues/7950,1,['Assert'],['Assertion']
Testability,Assertion failure in TMVA `can't dereference value-initialized vector iterator`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13498:0,Assert,Assertion,0,https://root.cern,https://github.com/root-project/root/issues/13498,1,['Assert'],['Assertion']
Testability,Assertion failure in TMVA with `vector iterators incompatible` error on Windows,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13497:0,Assert,Assertion,0,https://root.cern,https://github.com/root-project/root/issues/13497,1,['Assert'],['Assertion']
Testability,"Assume to have a TH1D object, with non-uniform binning, representing some kind of differential quantity (for example, a particle flux as a function of the particle energy, dN/dE). The `TH1D::GetRandom` method will return random numbers distributed according to the histogram bins height, rather than the histogram bins area. The code attached here (a ROOT macro) reproduces this behavior (I attach it as a .txt file, since .C files are not supported); [test.txt](https://github.com/root-project/root/files/7845002/test.txt)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9530:453,test,test,453,https://root.cern,https://github.com/root-project/root/issues/9530,2,['test'],['test']
Testability,"Assuming that `page_size` is a power of 2, the calculation of the base address of the page can be simplified and avoid a division. According to POSIX, either `MS_SYNC` or `MS_ASYNC` must be specified when calling `msync()`. Failure to include one of these flags will cause `msync()` to fail on some systems. When `msync()` returns -1, the pointer is only considered invalid when errno is set to `ENOMEM`. In principle, the other possible values for errno won't happen, but if they do, that should be considered an error, hence the assert condition needed an update. `EBUSY` shouldn't happen since we do not add `MS_INVALIDATE` to flags, and `EINVAL` shouldn't happen because we always pass a multiple of the page size to msync(). `EFAULT` is only used in Linux 2.4.18 and earlier instead of `ENOMEM`. See #4136 for more information.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4159:531,assert,assert,531,https://root.cern,https://github.com/root-project/root/pull/4159,1,['assert'],['assert']
Testability,"At least according to my limited tests, removing the queuing mechanism from TBufferMerger is equally fast because it avoids the overhead of preparing a TBufferFile for queuing, and uses less memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14034:33,test,tests,33,https://root.cern,https://github.com/root-project/root/pull/14034,1,['test'],['tests']
Testability,"At least with the [llvm13 branch](https://github.com/vgvassilev/root/tree/llvm13) on macOS, `cling::DynamicLibraryManager::searchLibrariesForSymbol` sometimes finds non-exported symbols and confuses the rest of the autoloading infrastructure because the symbol is not available after loading that library. ### Reproducer. Slightly modify the new `AutoloadLibraryGenerator`:; ```diff; diff --git a/core/metacling/src/TClingCallbacks.cxx b/core/metacling/src/TClingCallbacks.cxx; index 1401f04ee6..b538695533 100644; --- a/core/metacling/src/TClingCallbacks.cxx; +++ b/core/metacling/src/TClingCallbacks.cxx; @@ -188,6 +188,8 @@ public:; continue;; }. + printf(""found symbol '%s' in '%s'\n"", (*name).str().c_str(), libName.c_str());; +; found[libName].push_back(name);; }. ```. Then execute the following Python file:; ```py; import ROOT; print(ROOT.kTRUE); ```. The output (on `macitois22`) is:; ```; found symbol '__ZN5cling7runtime8internal15setValueNoAllocEPvS2_S2_cy' in '/Users/sftnight/jhahnfel/root.build.asserts/lib/libCling.so' ; found symbol '__ZL5kTRUE' in '/Users/sftnight/jhahnfel/root.build.asserts/lib/libRIO.so'; 1; ```; where `kTRUE` should not be found. Or at least the symbols is still not available after loading `libRIO`, and:; ```; $ nm /Users/sftnight/jhahnfel/root.build.asserts/lib/libRIO.so | grep kTRUE; 0000000000272988 s __ZL5kTRUE; ```; From the `man`-page of `nm`:; > If the symbol is local (non-external), the symbol's type is instead represented by the corresponding lowercase letter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10970:1011,assert,asserts,1011,https://root.cern,https://github.com/root-project/root/issues/10970,3,['assert'],['asserts']
Testability,"At the moment, `push` workflows pass `--base_ref master` to `build_root.py`. This means that they may actually pick up a later commit (= the current commit on the branch) at the time the job actually starts to run. In order to be usable as indications when a certain configuration broke, it would be more useful to test exactly the pushed commit, identified by its hash. Unfortunately, fixing this isn't as easy as replacing; https://github.com/root-project/root/blob/db6ff452b032b23251970046fd1febe066e4fa4d/.github/workflows/root-ci.yml#L456-L465; to pass `--base_ref ${{ github.sha }}` because `build_root.py` calls `git clone --branch {branch} --single-branch {repository}`. Passing a hash here doesn't work (in local tests), and would otherwise probably result in a detached `HEAD`. Another complication is that the sources are included in the build artifacts used by PR builds, so they have to look like an ordinary clone for the rebase operation to work.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14061:315,test,test,315,https://root.cern,https://github.com/root-project/root/issues/14061,2,['test'],"['test', 'tests']"
Testability,Attempt to solve race conditions on roostats tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/362:45,test,tests,45,https://root.cern,https://github.com/root-project/root/pull/362,1,['test'],['tests']
Testability,"Attribute lookup of the `RDF` property of the `ROOTFacade` class can; potentially lead to issues with the facade not being initialised yet at; that moment. This can happen since creation of the distributed RDataFrame; module is also part of the logic of the `RDF` property. An example of such issues can be reproduced by adding the line; `from DistRDF import CppWorkflow` to the `__init__.py` file. Without; this commit, it would trigger this error:. ```python; >>> import DistRDF; Traceback (most recent call last):; File "".../lib/ROOT/_facade.py"", line 326, in RDF; ns.Experimental.Distributed = _create_rdf_experimental_distributed_module(ns.Experimental); File "".../lib/ROOT/_facade.py"", line 65, in _create_rdf_experimental_distributed_module; return DistRDF.create_distributed_module(parent); AttributeError: partially initialized module 'DistRDF' has no attribute 'create_distributed_module' (most likely due to a circular import). During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; File "".../lib/DistRDF/__init__.py"", line 20, in <module>; from DistRDF import CppWorkflow; File "".../lib/DistRDF/CppWorkflow.py"", line 16, in <module>; RunGraphs = ROOT.RDF.RunGraphs; File "".../lib/ROOT/_facade.py"", line 328, in RDF; raise Exception('Failed to pythonize the namespace RDF'); Exception: Failed to pythonize the namespace RDF; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10069:245,log,logic,245,https://root.cern,https://github.com/root-project/root/pull/10069,1,['log'],['logic']
Testability,Automated documentation test for new PR,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9953:24,test,test,24,https://root.cern,https://github.com/root-project/root/issues/9953,1,['test'],['test']
Testability,Automatically adjust C++ version of PCH in Cling's test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13283:51,test,test,51,https://root.cern,https://github.com/root-project/root/pull/13283,1,['test'],['test']
Testability,"Avoid connecting the DNS and avoid using getaddrinfo and instead scan the list of network interface. In many cases those 2 operations were taking a significant amount of time during startup (in few cases; more than 5s). In some cases (e.g. MacOS and possibly other WiFi use) the hostname is actually not registered and; consequently the search failed anyway .... One drawback of the scan is that there is no cheap way to tell which of the IP4 addresses listed is; the 'public' address since only information are IP, port and name ... and the name is more or so; arbitrary (different on BSD and linux, depends on VPN or bridge, etc) ... so for now we just (try; to) skip the loopback interface. A better technique (which would lead again to a 'spurrious' startup delay) is to open a socket to; a known server (eg google's DNS 8.8.8.8) and then interogate the socket to find out the IP seen; by the server.; For example with (https://stackoverflow.com/questions/212528/get-the-ip-address-of-the-machine); ```; void GetPrimaryIp(char* buffer, size_t buflen); {; assert(buflen >= 16);. int sock = socket(AF_INET, SOCK_DGRAM, 0);; assert(sock != -1);. const char* kGoogleDnsIp = 8.8.8.8;; uint16_t kDnsPort = 53;; struct sockaddr_in serv;; memset(&serv, 0, sizeof(serv));; serv.sin_family = AF_INET;; serv.sin_addr.s_addr = inet_addr(kGoogleDnsIp);; serv.sin_port = htons(kDnsPort);. int err = connect(sock, (const sockaddr*) &serv, sizeof(serv));; assert(err != -1);. sockaddr_in name;; socklen_t namelen = sizeof(name);; err = getsockname(sock, (sockaddr*) &name, &namelen);; assert(err != -1);. const char* p = inet_ntop(AF_INET, &name.sin_addr, buffer, buflen);; assert(p);. close(sock);; }; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4310:1059,assert,assert,1059,https://root.cern,https://github.com/root-project/root/pull/4310,5,['assert'],['assert']
Testability,Avoid inclusion of arrow testing stuff,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13523:25,test,testing,25,https://root.cern,https://github.com/root-project/root/pull/13523,1,['test'],['testing']
Testability,Avoid testing that an exception is thrown by cling on Apple M1,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9544:6,test,testing,6,https://root.cern,https://github.com/root-project/root/pull/9544,2,['test'],['testing']
Testability,"Avoid using forward-declared class as default template arguments in; `RooMinimizer` and `MinuitFcnGrad`. This is the fix for the following test failures in the nightlies:. ```; projectroot.roottest.python.cling.roottest_python_cling_class; projectroot.roottest.python.cling.roottest_python_cling_api; projectroot.roottest.root.meta.tclass.regression.roottest_root_meta_tclass_regression_execNormalizationInfPy; projectroot.roottest.python.cling.roottest_python_cling_cling; projectroot.roottest.root.meta.enumPayloadManipulation.roottest_root_meta_enumPayloadManipulation_checkEnumFwdDecl; ```. For sure we know that these failures got introduced by; root-project#8700. The failures that we see since [root-project#8700](root-project#8700), here are the comments where the bot reported them first:; First Ubuntu 16 fail:; [root-project#8700 (comment)](root-project#8700 (comment)). First Windows 10 fail:; [root-project#8700 (comment)](root-project#8700 (comment)). I narrowed down the origin of this regression to a small part of the; diff of the full PR. The bad guy is some change in one of these files:. * roofit/roofitcore/inc/RooMinimizer.h; * roofit/roofitcore/test/CMakeLists.txt; * roofit/roofitcore/test/TestStatistics/testLikelihoodSerial.cxx. What was fishy in `RooMinimizer.h` was the usage of a forward-declared; class as default template argument. The default template arguments are; commented out now, because these will only become relevant in later; developments by @egpbos.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8997:139,test,test,139,https://root.cern,https://github.com/root-project/root/pull/8997,5,"['Test', 'test']","['TestStatistics', 'test', 'testLikelihoodSerial']"
Testability,"Avoids some memory allocations when the internal unzip buffer is never used throughout the decompressor's lifetime (since RNTupleDecompressor allocates a Buffer_t when default constructed).; With this change, RPageStorageDaos doesn't need to allocate a decompressor anymore. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15982:296,test,tested,296,https://root.cern,https://github.com/root-project/root/pull/15982,1,['test'],['tested']
Testability,"Axel has observed a flaky test on fedora30, which collects too late objects being already out of scope and the fails the test of the refcounts. I've put invokations of the GC now always before we test refcounts to prevent such failures.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6127:26,test,test,26,https://root.cern,https://github.com/root-project/root/pull/6127,3,['test'],['test']
Testability,BANNER -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-semantic-interposition -fPIC -fvisibility-inlines-hidden -Werror=date-time -std=c++1z -w -fdiagnostics-color -ffunction-sections -fdata-sections -fno-common -Woverloaded-virtual -fno-strict-aliasing -O3 -DNDEBUG -fvisibility=hidden -fvisibility-inlines-hidden -fno-exceptions -fno-rtti -std=c++17 -MD -MT interpreter/llvm/src/tools/clang/lib/Lex/CMakeFiles/obj.clangLex.dir/PPCaching.cpp.o -MF interpreter/llvm/src/tools/clang/lib/Lex/CMakeFiles/obj.clangLex.dir/PPCaching.cpp.o.d -o interpreter/llvm/src/tools/clang/lib/Lex/CMakeFiles/obj.clangLex.dir/PPCaching.cpp.o -c /scratch/cmsbuild/jenkins_b/workspace/ib-run-pr-tests/testBuildDir/BUILD/slc7_ppc64le_gcc10/lcg/root/6.24.07-12a11ac5dbf21d7c2a6a8cef92c99bc0/root-6.24.07/interpreter/llvm/src/tools/clang/lib/Lex/PPCaching.cpp; [6494/9540] /scratch/cmsbuild/jenkins_b/workspace/ib-run-pr-tests/testBuildDir/slc7_ppc64le_gcc10/external/gcc/10.3.0-84898dea653199466402e67d73657f10/bin/g++ -DGTEST_HAS_RTTI=0 -D_GNU_SOURCE -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS -Iinterpreter/llvm/src/tools/clang/lib/Lex -I/scratch/cmsbuild/jenkins_b/workspace/ib-run-pr-tests/testBuildDir/BUILD/slc7_ppc64le_gcc10/lcg/root/6.24.07-12a11ac5dbf21d7c2a6a8cef92c99bc0/root-6.24.07/interpreter/llvm/src/tools/clang/lib/Lex -I/scratch/cmsbuild/jenkins_b/workspace/ib-run-pr-tests/testBuildDir/BUILD/slc7_ppc64le_gcc10/lcg/root/6.24.07-12a11ac5dbf21d7c2a6a8cef92c99bc0/root-6.24.07/interpreter/llvm/src/tools/clang/include -Iinterpreter/llvm/src/tools/clang/include -I/scratch/cmsbuild/jenkins_b/workspace/ib-run-pr-tests/testBuildDir/slc7_ppc64le_gcc10/external/libxml2/2.9.10-32fb6ccc7a5c1482269c150e9287ec24/include/libxml2 -Iinterpreter/llvm/src/include -I/scratch/cmsbuild/jenkins_b/workspace/ib-run-pr-tests/testBuildDir/BUILD/slc7_ppc64le_gcc10/lcg/root/6.24.07-12a11ac5,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9424:2620,test,tests,2620,https://root.cern,https://github.com/root-project/root/issues/9424,2,['test'],"['testBuildDir', 'tests']"
Testability,"BShape.cxx""); ```; should be sufficient. ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->; The `.cxx` and `.h` files can be found on the [forum](https://root-forum.cern.ch/t/import-custom-pdf-in-rooworkspace/43478?u=mwilkins).; ```python; import os. import ROOT as r. # declare PDF; r.gROOT.ProcessLine("".x RooSDSCBShape.cxx""). # manually set Decl and Impl files; cls = r.TClass.GetClass(""RooSDSCBShape""); cls.SetDeclFile(f""{os.getcwd()}/RooSDSCBShape.h"", 0); cls.SetImplFileName(f""{os.getcwd()}/RooSDSCBShape.cxx""). # store the class in a workspace; ws = r.RooWorkspace(""ws""); ws.addClassDeclImportDir(os.getcwd()); ws.addClassImplImportDir(os.getcwd()); ws.importClassCode(cls); ws.writeToFile(""test.root""). # extract the class from the workspace; f = r.TFile.Open(""test.root""); inws = f.Get(""ws""); ```. Output:; ```; RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby ; Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University; All rights reserved, please read http://roofit.sourceforge.net/license.txt. (RooSDSCBShape) An instance of RooSDSCBShape.; [#1] INFO:ObjectHandling -- RooWorkspace::autoImportClass(ws) importing code of class RooSDSCBShape from /<path/to>/RooSDSCBShape.cxx and /<path/to>/RooSDSCBShape.h; [#1] INFO:ObjectHandling -- RooWorkspace::CodeRepo::compileClasses() creating code export directory .wscode.305a6bb0-6f9d-11eb-9678-a001a8c0beef.ws to extract coded embedded in workspace; [#1] INFO:ObjectHandling -- RooWorkspace::CodeRepo::compileClasses() Extracting declaration code of class RooSDSCBShape, file .wscode.305a6bb0-6f9d-11eb-9678-a001a8c0beef.ws/RooSDSCBShape.h; [#1] INFO:ObjectHandling -- RooWorkspace::CodeRepo::compileClasses() Extracting implementation code of class RooSDSCBShape, file .wscode",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7249:1803,test,test,1803,https://root.cern,https://github.com/root-project/root/issues/7249,1,['test'],['test']
Testability,BUILD TESTING - no change,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2846:6,TEST,TESTING,6,https://root.cern,https://github.com/root-project/root/pull/2846,1,['TEST'],['TESTING']
Testability,Backport #16819. On the MacOS same unix sockets cannot be opened twice for listening -; when using with netcat or socat; Therefore start nc -k -l -U $socketfile > $socketfile.log to redirect; socket output into the plain file permanently.; And then monitor this file content - line by line. Use trap command to cleanup all temporary files afterwards. And from ROOT side need to send \n to ensure new lines in produced log file. This changes required to be able use rootssh from the MacOS,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16820:175,log,log,175,https://root.cern,https://github.com/root-project/root/pull/16820,2,['log'],['log']
Testability,Backport fixes for Cling tests [v6.28],MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13318:25,test,tests,25,https://root.cern,https://github.com/root-project/root/pull/13318,1,['test'],['tests']
Testability,Backport in 6.26 fix for KolmogorovSmirnov test in GoFTest,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9855:43,test,test,43,https://root.cern,https://github.com/root-project/root/pull/9855,1,['test'],['test']
Testability,Backport in 6.28 fixes in pymva to avoid timeout in keras tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13807:58,test,tests,58,https://root.cern,https://github.com/root-project/root/pull/13807,1,['test'],['tests']
Testability,"Backport of commit 1b5404aff3. Original commit message:; ```; We would previously pick between calling an initializer list constructor; and calling a default constructor unstably in this situation, depending; on whether the inherited default constructor had already been used; elsewhere in the program.; ```. This commit first appeared in LLVM 10 and fixes some problems with modules when building with GCC 12, for example ODRHash asserts in `roottest-root-io-uniquePointer`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11359:431,assert,asserts,431,https://root.cern,https://github.com/root-project/root/pull/11359,1,['assert'],['asserts']
Testability,"Backport of commit 1b5404aff3. Original commit message:; ```; We would previously pick between calling an initializer list constructor; and calling a default constructor unstably in this situation, depending; on whether the inherited default constructor had already been used; elsewhere in the program.; ```. This commit first appeared in LLVM 10 and fixes some problems with modules when building with GCC 12, for example ODRHash asserts in `roottest-root-io-uniquePointer`. (cherry picked from commit cf32d2bc738367fe0d5c8ccbc0856d345f824228). Backport of PR https://github.com/root-project/root/pull/11359",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11362:431,assert,asserts,431,https://root.cern,https://github.com/root-project/root/pull/11362,1,['assert'],['asserts']
Testability,"Backport of https://github.com/root-project/root/pull/9802 without the fix for pymva tests, since the corresponding tests were not there yet in 6.24.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10206:85,test,tests,85,https://root.cern,https://github.com/root-project/root/pull/10206,2,['test'],['tests']
Testability,"Backport of; * https://github.com/root-project/root/pull/16258 (partial, the change in `CIFactory.cpp` is not needed); * https://github.com/root-project/root/pull/16268 (which fixes two Cling tests on macOS and is not exercised by ROOT). The reason I propose these is that `v6-32-00-patches` is the current release with LLVM 16, which would be good to have in a fully working state before merging the upgrade to LLVM 18.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16297:192,test,tests,192,https://root.cern,https://github.com/root-project/root/pull/16297,1,['test'],['tests']
Testability,Backport some PRs related to CI testing:; * https://github.com/root-project/root/pull/14685; * https://github.com/root-project/root/pull/15286; * https://github.com/root-project/root/pull/15290,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15291:32,test,testing,32,https://root.cern,https://github.com/root-project/root/pull/15291,2,['test'],['testing']
Testability,Backport some PRs related to CI testing:; * https://github.com/root-project/root/pull/15278; * https://github.com/root-project/root/pull/15276; * https://github.com/root-project/root/pull/15275; * https://github.com/root-project/root/pull/14685; * https://github.com/root-project/root/pull/15286; * https://github.com/root-project/root/pull/15290,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15289:32,test,testing,32,https://root.cern,https://github.com/root-project/root/pull/15289,1,['test'],['testing']
Testability,Backport some PRs related to TMVA CI testing:; * https://github.com/root-project/root/pull/15278; * https://github.com/root-project/root/pull/15276; * https://github.com/root-project/root/pull/15258; * https://github.com/root-project/root/pull/15275,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15281:37,test,testing,37,https://root.cern,https://github.com/root-project/root/pull/15281,2,['test'],['testing']
Testability,"Backport the fix of four memory leaks when reading from files, #5466. A read test with a v6.20 file is backported as well.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5564:77,test,test,77,https://root.cern,https://github.com/root-project/root/pull/5564,1,['test'],['test']
Testability,Backport two PRs to fix the usage of the `ROOT_ADD_GTEST` macro in builds with `testing=OFF`. * https://github.com/root-project/root/pull/16243; * https://github.com/root-project/root/pull/16255,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16279:80,test,testing,80,https://root.cern,https://github.com/root-project/root/pull/16279,1,['test'],['testing']
Testability,Backport: correct for Logx when drawing histogram errors,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5358:22,Log,Logx,22,https://root.cern,https://github.com/root-project/root/pull/5358,1,['Log'],['Logx']
Testability,Backporting parts of 363373bb987 to make the tests green.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15193:45,test,tests,45,https://root.cern,https://github.com/root-project/root/pull/15193,1,['test'],['tests']
Testability,"Backporting some PRs to avoid test failures in the nightlies:; * https://github.com/root-project/root/pull/12693; * https://github.com/root-project/root/pull/13712; * https://github.com/root-project/root/pull/13718; * https://github.com/root-project/root/pull/13765; * https://github.com/root-project/root/pull/13524; * https://github.com/root-project/root/pull/13525; * https://github.com/root-project/root/pull/13613. After these trivial backports, the only PR that needs to be backported to fix the remaining failures is this one:; * https://github.com/root-project/root/pull/13533. However, this would not be a simple conflict-less backport because the changes interact with new feature development for ROOT 6.30. It's maybe better if @lmoneta takes care of this.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13777:30,test,test,30,https://root.cern,https://github.com/root-project/root/pull/13777,1,['test'],['test']
Testability,"Based on PR #858. Implements only parts relevant for CV. Rudimentary performance benchmark with ~60000 events with 2-fold CV; ```; Multiproc: root -l -b -q TMVACrossValidation.C 15.82s user 0.46s system 152% cpu 10.679 total; Standard: root -l -b -q TMVACrossValidation.C 14.31s user 0.25s system 99% cpu 14.652 total; ```; Which translates into a 4 second speed up. A different example, with a deeper bdt forest and 10-fold CV, almost halves the required time on my machine :); ```; Single : root -l -b -q TMVACrossValidation.C 33.66s user 1.99s system 98% cpu 36.369 total; Multiproc 2: root -l -b -q TMVACrossValidation.C 39.14s user 2.68s system 167% cpu 25.016 total; Multiproc 4: root -l -b -q TMVACrossValidation.C 46.52s user 3.50s system 233% cpu 21.420 total; ```. For the second example, these changes to `TMVACrossValidation.C` were used.; ```; /* ...snip... */; TString cvOptions = Form(""!V:NumWorkerProcs=4""; /* ...snip... */; cv.BookMethod(TMVA::Types::kBDT, ""BDTG"",; ""!H:!V:NTrees=1000:MinNodeSize=2.5%:BoostType=Grad""; "":NegWeightTreatment=Pray:Shrinkage=0.10:nCuts=20""; "":MaxDepth=6"");; /* ...snip... */; // cv.BookMethod(TMVA::Types::kFisher, ""Fisher"",; // ""!H:!V:Fisher:VarTransform=None"");; /* ...snip... */; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1869:81,benchmark,benchmark,81,https://root.cern,https://github.com/root-project/root/pull/1869,1,['benchmark'],['benchmark']
Testability,"Basic refactoring of test/stressMathCore.cxx to be smaller, more manageable files, and to use Google Test. The functionality is the same, but is now using Google Test for assertions instead of doing logical operations on an integer as the test result. Ping @lmoneta",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/594:21,test,test,21,https://root.cern,https://github.com/root-project/root/pull/594,6,"['Test', 'assert', 'log', 'test']","['Test', 'assertions', 'logical', 'test']"
Testability,"Batch mode, which is now only supported by Chrome, allows to run; JS code loaded from file and dump result to output file - no any; communication with host application required. Now extra headless mode is introduced, which allows to run client; code in the headless browser and communicate with it. It was original; way to produce batch images, therefore need to rename some methods; to clearly separate from old functionality. Adjust `tutorials/webgui/ping` tutorial to let it run in ""headless"" mode when -b specified.; In such case macro waits until 200 round-trip packets arrived and automatically ends.; Can be used in PR/Nightly testings. Testes on Windows/Mac/Linux",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7839:634,test,testings,634,https://root.cern,https://github.com/root-project/root/pull/7839,2,"['Test', 'test']","['Testes', 'testings']"
Testability,"Because of ROOT-10144, the unit test for RooJohnson crashes occasionally.; Unless TFormula v5 is fixed or RooFit is updated to use TFormula v6 (ROOT-10164),; the test needs to stay disabled.; This is ROOT-10173.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3950:32,test,test,32,https://root.cern,https://github.com/root-project/root/pull/3950,2,['test'],['test']
Testability,"Before I code too far away . This is first showcase, how new attributes will be introduced to `RFrame`. First important change. `RFrame` is normal drawable and will be inserted into list of primitives. ; In the future we could enforce `RFrame` have to be always on the first place (to be discuss). `RFrame` is not required to draw histogram. All defaults can be obtained via `RStyle`, therefore object can be created on the client side and all necessary attributes can be obtained. As first members of `RFrame` I introduce `RAttrMargin` and `RAttrAxis` attributes.; `RAttrMargin` contains margins from pad borders and can be defined as `RPadLength` without user components. In the CSS one could use syntax like: `frame { margin_left: 0.1 + 10px; }` ; As Idea: one also can allow something like: `frame { margin: 0; }` to set all sides at same time. `RAttrAxis` are graphical axis attributes plus min/max range, lin/log scale, invert flag, ...; For now only line attributes are really used. . Idea for next steps with `RAttrAxis`.; When min/max values not specified, axis ranges defined by first drawable like histogram or graph.; One should be able to set only min or only max value. Also visible range should be able to specify same way. . You can see how code will look like in new macro: `draw_frame.cxx`. It drawing in two sub-pads. On first sub-pad RFrame configured programatically, on second sub-pad - via CSS file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5044:915,log,log,915,https://root.cern,https://github.com/root-project/root/pull/5044,1,['log'],['log']
Testability,"Before the passmanager update, the function `populateModulePassManager` was called instead of `buildPerModuleDefaultPipeline` to set the default passes. But the former did not have `RelLookupTableConverterPass` turned on by default. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #14598",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14622:298,test,tested,298,https://root.cern,https://github.com/root-project/root/pull/14622,1,['test'],['tested']
Testability,"Before this PR, the lambda passed to VecOps::Map could not; take arguments by non-const reference as the implementation was; adding a const qualifier to the RVec arguments. We now instead forward RVecs from Map to MapImpl keeping their; cv qualifiers. A test has been added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11108:254,test,test,254,https://root.cern,https://github.com/root-project/root/pull/11108,1,['test'],['test']
Testability,"Before this commit, RDataSource columns were treated like a special; kind of Defined columns: they were registered in RBookedCustomColumn; and their contents were accessed via RCustomColumn::Get. This commit removes the logic that was Define'ing ad-hoc columns; corresponding to the RDS columns. Instead, we store the RDS column value; pointers in a dedicated std::map and teach RDSColumnReader to directly; use that. Logic is simpler, we avoid an extra function call and an extra; copy upon data-source value accesses, and we move closer to implementing; column readers specialized for a given RDS implementation. Sorry for the large commit, unfortunately changing how datasource columns _work_ requires touching a lot of different places and I am not sure it makes sense to split the commit in smaller pieces.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6208:220,log,logic,220,https://root.cern,https://github.com/root-project/root/pull/6208,2,"['Log', 'log']","['Logic', 'logic']"
Testability,"Before this commit, RVec<T> objects were written to file as a normal; object with a single data member of type `std::vector<T, RAdoptAllocator<T>>`.; However, we want to:; - make use of the more generic ""collection proxy"" I/O mechanism that; reads/writes STL-like collections in a generic way making use of their; begin()/end()/size() API. This makes it possible to implicitly convert; RVec to any other collection at the I/O level, and it also makes it possible to...; - evolve RVec internals to implement a small-buffer optimization and; remove the `std::vector<T, RAdoptAllocator<T>>` data member without; breaking I/O. The most important changes performed:; - added ROOT::ESSTLType::kROOTRVec; - added special case for RVec in dictionary generation:; - RVecs are setup to use CollectionProxy; - RVecs are treated as an STL container (even if not in namespace std); - added special treatment of RVec<bool> (reusing the VectorLooper; specialized for std::vector<bool>). Philippe, Axel: what tests would you like to see?",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6960:993,test,tests,993,https://root.cern,https://github.com/root-project/root/pull/6960,1,['test'],['tests']
Testability,"Before this commit, the logic in SnapshotHelper did not take into; account the case of RVecs that are being read from an input TTree; (that was not possible until v6.26). Because of how the logic was; structured, that meant that Snapshot was trying to write out those; RVecs as C-style arrays instead, obviously badly failing at it. This patch tries to make the flow of this logic a bit more readable; and fixes the problem mentioned above by treating input branches; of RVec type the same way we already treat std::vectors. This fixes https://github.com/root-project/root/issues/10225.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10288:24,log,logic,24,https://root.cern,https://github.com/root-project/root/pull/10288,3,['log'],['logic']
Testability,"Before this commit, the logic in SnapshotHelper did not take into; account the case of RVecs that are being read from an input TTree; (that was not possible until v6.26). Because of how the logic was; structured, that meant that Snapshot was trying to write out those; RVecs as C-style arrays instead, obviously badly failing at it. This patch tries to make the flow of this logic a bit more readable; and fixes the problem mentioned above by treating input branches; of RVec type the same way we already treat std::vectors. This fixes https://github.com/root-project/root/issues/10225. @pcanal the logic in this commit could be simplified if instead of ""if it's not every other case, it must be a C-style array"" I could do instead ""if it's not a C-style array, then it must be one of the other cases"". But I'm not sure how to check for ""branch is a C-style array"", see https://mattermost.web.cern.ch/root/pl/4n1qbh363tdfjc1hs3khe6y84o",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10268:24,log,logic,24,https://root.cern,https://github.com/root-project/root/pull/10268,4,['log'],['logic']
Testability,"Before this commit, we had a generic RAction and two template; specializations for `RAction<SnapshotHelper>` and; `RAction<SnapshotHelperMT>`. Common logic between the three was kept; in the common base class `RActionCRTP<RAction<...>>`. This is unnecessarily complex. Instead, we now have a single RAction; class and a helper ActionImpl type that contains the parts of the; logic that needs to differ for `RAction<SnapshotHelper>` and; `RAction<SnapshotHelperMT>`. A single specialization of ActionImpl is; used for both helpers to reduce code duplication.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6220:150,log,logic,150,https://root.cern,https://github.com/root-project/root/pull/6220,2,['log'],['logic']
Testability,"Before this commit, whenever a function was constructing a node; of the computation graph it had to ""remember"" to also register; that node with the RLoopManager, which needs to know which nodes; are around so it can tell them e.g. to execute task initialization; and task finalization logic.; Deregistration happened in the node's destructors. With this patch, registration happen in the constructor and; deregistration in the destructor of a node, i.e. this logic is; where a reader might expect it to be and new code does not have; to ""remember"" to register objects with the RLoopManager. Jitted nodes of the computation graph (e.g. RJittedAction,; RJittedDefine) don't need to register themselves with the; RLoopManager: the _concrete_ nodes will be registered right; before the event loop, at jitting time, and that is good enough.; RJittedFilter is an exception: RLoopManager needs to know what; filters have been booked even before the event loop (i.e. before; concrete filters are instantiated by jitted code) in order to; return a correct list from RLoopManager::GetFiltersNames().; So RJittedFilters register themselves with RLoopManager at; construction time and deregister themselves in; RJittedFilter::SetFilter, i.e. when they can be sure that the; concrete filter has been instantiated in jitted code and it has; been registered with RLoopManager, making the RJittedFilter; registration redundant. To the reviewers: I'll make the naming more uniform (Register/Deregister instead of Book/Deregister) in a subsequent PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10653:285,log,logic,285,https://root.cern,https://github.com/root-project/root/pull/10653,2,['log'],['logic']
Testability,"Before this patch RDF would first, eagerly, declare a dummy lambda; that contained the user-defined expression to check verify the cling; could understand it; then, lazily, the actual lambda variable used; by the nodes of the computation graph was jitted, together with all; other declarations required by RDF, just before the event loop. With this patch, the first declaration serves both purposes: it checks; that the expression is just-in-time compilable _and_ jits precisely the; definition that will be required during the event loop. This removes; redundant logic and results in strictly less work required of the; interpreter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5487:564,log,logic,564,https://root.cern,https://github.com/root-project/root/pull/5487,1,['log'],['logic']
Testability,"Before this patch, RCustomColumnBase's destructor could access; RLoopManager after deletion in some cases, e.g. when jitting code after; the computation graph was already out of scope or when the RLoopManager; was kept alive only by another node's shared_ptr to it. I think we never; saw a crash due to this bug because the use is _right after_ deletion,; and there is never an allocation between deletion and use. Valgrind; still sees it though. Thanks to the previous commit, all the logic that entangled RLoopManager; and RCustomColumns can actually be removed, and in particular; RCustomColumnBase's destructor does not need to access RLoopManager; anymore, fixing the use after delete. A minimal reproducer for the use after delete:. ```cpp; auto f = ROOT::RDataFrame(1).Filter([] { return true; });; ```. Before RFilter is destructed, it deletes its fPrevNode (shared_ptr to; the previous node), which triggers destruction of RLoopManager. Later,; RFilterBase is destructed, which triggers destruction of its registered; custom columns (in this case, the default ""rdfentry_"" or ""rdfslot_""; columns) and ~RCustomColumnBase tries to access RLoopManager.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5544:486,log,logic,486,https://root.cern,https://github.com/root-project/root/pull/5544,1,['log'],['logic']
Testability,"Before this patch, friend branches or leaves were listed in the output of `GetColumnNames` twice, as `friendname.bname` and as `bname`. Now we only list the longer version. This fixes #8450 as a side-effect. This PR also adds a test and improves the related docs. Rationale for the change in behavior of `GetColumnNames`: currently, in RDataFrame we have (fairly convoluted) logic to retrieve 3 different lists of branch names given a TTree/TChain:. 1. a user-readable of list of available column names returned by `df.GetColumnNames()`; 2. a larger list of all valid spellings for all column names, used to validate user inputs (this includes all names returned by `df.GetColumnNames()` plus alternative spellings such as `branchname.leafname` when `branchname == leafname`, shorthands for `friendname.branchname` as just `branchname`, etc.; 3. a list of only top-level branches that we use as the list of branches to `Snapshot` by default. Before this patch `df.GetColumnNames()` returned multiple valid spellings for the same friend branch. That can be confusing, so I'd rather (try to) return only one valid spelling for each available branch/leaf. For consistency with `Display` and to not withhold information from users, among the two valid spellings we always show the ""fully qualified friendname.branchname"". Users can still use the shorthand ""branchname"" if it's not ambiguous, as the relevant documentation now points out.; I think this solution is the sweet spot between not being surprising (to users and to RDF developers), being easy to implement without further complicating or completely refactoring the branch-retrieval logic and being somewhat backward-compatible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8529:228,test,test,228,https://root.cern,https://github.com/root-project/root/pull/8529,3,"['log', 'test']","['logic', 'test']"
Testability,"Before this patch, in cases in which t.GetBranch(""a.b"") and; t.GetBranch(""b"") both returned a valid address, RDataFrame was adding; only ""a.b"" to the list of valid TTree columns.; With this patch, both ""a.b"" and ""b"" are recognized as valid column names. We need this change in behavior to avoid a _worse_ change in behavior,; described in detail in ROOT-10942: since ROOT-10702 was fixed,; TTree::GetBranch became more powerful and started returning non-null; addresses for branch names with form ""a.b"" while it was returning a; nullptr until v6.20/06. With RDataFrame's previous logic, this in turn; meant that valid code that was using ""a"" as a column broke as RDataFrame; was now adding the ""a.b"" spelling to the list of valid columns instead. This fixes the RDF-related part of ROOT-10942: ""a"" is recognized as a; valid spelling again, and ""a.b"" is kept as a new valid spelling.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6072:580,log,logic,580,https://root.cern,https://github.com/root-project/root/pull/6072,1,['log'],['logic']
Testability,"Before this patch, in order to assert that the column type; returned by a Vary expression matched the type of the column we; always asked cling to provide a type id for the existing column; via TypeName2TypeID(GetColumnType(colName)). That failed if the; column had a type not known to the interpreter, e.g. because it; was Define'd and the expression returned a user-defined type. With this patch we use the typeid information coming from the; RDefine node if it is available, otherwise we try with cling. A corresponding test is coming soon in another PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10602:31,assert,assert,31,https://root.cern,https://github.com/root-project/root/pull/10602,2,"['assert', 'test']","['assert', 'test']"
Testability,"Before this patch, we were iterating until the end of the map; rather than until the end of the equal_range (this was not a; problem in practice because program logic guaranteed that we would; find what we were looking for and break out of the loop early).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10847:161,log,logic,161,https://root.cern,https://github.com/root-project/root/pull/10847,1,['log'],['logic']
Testability,"Before, the leaf count was assumed to exist at the same level as the leaf to be read,; e.g. a.b.x[n] would look for a.b.n. That fails if n is coming from a ""higher level"".; Now, TUIntOrIntReader also looks for a.n and n, if a.b.n is not found. And add the repro test for this.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5436:262,test,test,262,https://root.cern,https://github.com/root-project/root/pull/5436,1,['test'],['test']
Testability,"Binary data has to be transferred as separate data packet; This makes logic complicated especially when many small raw packets should be used; Using `JSON_base64` marker in class info, one can insert raw data in ROOT JSON and ; use such binary at the place. This significantly simplifies data handling. ; Same approach can be later used for eve7",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4146:70,log,logic,70,https://root.cern,https://github.com/root-project/root/pull/4146,1,['log'],['logic']
Testability,"Both on CentOS 8 Stream and Arch Linux, when compiling with Clang 13.0.0, there are a number of RooFit test failures due to crashes. Example crash when running `tutorials/roofit/rf201_composite.C`:; ```; root.exe: /home/jhahnfel/ROOT/src/roofit/roofitcore/inc/RooSTLRefCountList.h:113: std::size_t RooSTLRefCountList<RooAbsArg>::size() const [T = RooAbsArg]: Assertion `_storage.size() == _refCount.size()' failed.; ```. ### Backtrace; ```; #0 0x00007ffff66c2a4f in raise () from /lib64/libc.so.6; #1 0x00007ffff6695db5 in abort () from /lib64/libc.so.6; #2 0x00007ffff6695c89 in __assert_fail_base.cold.0 () from /lib64/libc.so.6; #3 0x00007ffff66bb3a6 in __assert_fail () from /lib64/libc.so.6; #4 0x00007fffe0dea553 in RooSTLRefCountList<RooAbsArg>::size (this=0x1aa32f8); at /home/jhahnfel/ROOT/src/roofit/roofitcore/inc/RooSTLRefCountList.h:113; #5 RooSTLRefCountList<RooAbsArg>::findByNamePointer (this=this@entry=0x1aa32f8, item=item@entry=0x7fffffff72d0); at /home/jhahnfel/ROOT/src/roofit/roofitcore/inc/RooSTLRefCountList.h:153; #6 0x00007fffe0de1848 in RooAbsArg::findServer (this=0x1aa32b0, arg=...); at /home/jhahnfel/ROOT/src/roofit/roofitcore/inc/RooAbsArg.h:211; #7 RooAbsArg::dependsOn (this=this@entry=0x1aa32b0, testArg=..., ignoreArg=ignoreArg@entry=0x0, valueOnly=false); at /home/jhahnfel/ROOT/src/roofit/roofitcore/src/RooAbsArg.cxx:870; #8 0x00007fffe0de1a80 in RooAbsArg::dependsOn (this=0x1aa32b0, serverList=..., ignoreArg=0x0, valueOnly=false); at /home/jhahnfel/ROOT/src/roofit/roofitcore/src/RooAbsArg.cxx:847; #9 RooAbsArg::observableOverlaps (this=<optimized out>, nset=<optimized out>, testArg=...); at /home/jhahnfel/ROOT/src/roofit/roofitcore/src/RooAbsArg.cxx:923; #10 0x00007fffe0e6d04d in RooAddPdf::checkObservables (this=<optimized out>, nset=<optimized out>); at /home/jhahnfel/ROOT/src/roofit/roofitcore/src/RooAddPdf.cxx:832; #11 0x00007fffe0de178d in RooAbsArg::recursiveCheckObservables (this=0x7fffffff6bc8, nset=0x7fffffff6360); at /home/jhahnfel/ROOT/sr",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9547:103,test,test,103,https://root.cern,https://github.com/root-project/root/issues/9547,2,"['Assert', 'test']","['Assertion', 'test']"
Testability,"Boundary/FindNode implementations. * The use of a 3D voxel grid (TGeoVoxelGrid) structure, able to store properties ""local"" or in the vicinity of a cartesian coordinate P. This structure allows to reduce the (typical) algorithmic complexity for ""Safety"" queries to ~O(1) (with a constant factor determined by the voxel size). Filling of the 3D voxel grid cache for Safety is done on-the-fly (using the BVH once). * (Optional) Additional caching of ""last-call"" safety values for really quick return when the value is still valid at the next call. Ideas for these improvements come from prior work in related libraries such as VecGeom. -----. Implementation details:. * The implementation is, for now (until fully tested), provided in a backward compatible manner:. - By default, nothing changes; - Users have to activate the BVH mode by setting an environment variable TGEO_PW_USEBVH; - Users may hence compare the 2 modes. * Functions for Safety, FindNode, FindBoundary dispatch to some internal implementation. This causes an extra lookup/jump, which can be removed once BVH is fully validated. * For the BVH, a well known open source implementation is included in header-only form. The headers are copied from https://github.com/madmann91/bvh commit 66e445b92f68801a6dd8ef943fe3038976ecb4ff. * A new class, TGeoVoxelGrid is provided for the cartesian VoxelGrid container. ----. Performance examples:. In a test with the ALICE simulation framework including the ITS + TPC detectors with 48240 volumes on the parallel world, we see. * initialization time goes from TGeoVoxelFinder: 10s ---> BVH: 40ms; * Geant simulation time: 10s --> 2s; * memory usage: 3GB --> 1GB. Hence, this PR will make a big difference for the ALICE simulation program. It was verified, that identical results (number of hits, steps, etc) are obtained when going from TGeoVoxelFinder --> BVH+GRID. ----. Outlook:. Similar techniques could be applied to ordinary TGeoNavigator routines. Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16442:2412,test,test,2412,https://root.cern,https://github.com/root-project/root/pull/16442,2,['test'],"['test', 'tested']"
Testability,Build also the guitest executable (but don't add it in the tests),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5169:59,test,tests,59,https://root.cern,https://github.com/root-project/root/pull/5169,1,['test'],['tests']
Testability,Build and test failures on RHEL+EPEL 8 ppc64le,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12372:10,test,test,10,https://root.cern,https://github.com/root-project/root/issues/12372,1,['test'],['test']
Testability,"Build error with ""nlohmann/json.hpp: No such file or directory"" in spack (unit tests build, with --test=root option)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14769:79,test,tests,79,https://root.cern,https://github.com/root-project/root/issues/14769,2,['test'],"['test', 'tests']"
Testability,"Build fails on Fedora 27 (gcc 7.3.1):; ```; /builddir/build/BUILD/root-6.14.00/tmva/tmva/test/TestRandomGenerator.cxx: In function 'void test_example()':; /builddir/build/BUILD/root-6.14.00/tmva/tmva/test/TestRandomGenerator.cxx:88:9: error: 'shuffle' is not a member of 'std'; std::shuffle(v.begin(), v.end(), rng);; ^~~~~~~; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2267:89,test,test,89,https://root.cern,https://github.com/root-project/root/pull/2267,4,"['Test', 'test']","['TestRandomGenerator', 'test']"
Testability,Build option for distributed RDF tests that use pyspark,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7413:33,test,tests,33,https://root.cern,https://github.com/root-project/root/pull/7413,1,['test'],['tests']
Testability,"Building ROOT with gcc 11.2.0 on a centos7 system with the following configuration:. cmake -DCMAKE_CXX_STANDARD=17 -DCMAKE_CXX_EXTENSIONS=Off -DCMAKE_INSTALL_PREFIX=/opt/root/v6-26-02_gc112_c17 -GNinja ../src. fails with the following error:; ```; [2542/9705] Performing download step (download, verify and extract) for 'XROOTD'; FAILED: builtins/xrootd/XROOTD-prefix/src/XROOTD-stamp/XROOTD-download /bld6/root/bld/builtins/xrootd/XROOTD-prefix/src/XROOTD-stamp/XROOTD-download ; cd /bld6/root/bld/builtins/xrootd/XROOTD-prefix/src && /bld4/opt/cmake/3.22.2/bin/cmake -P /bld6/root/bld/builtins/xrootd/XROOTD-prefix/src/XROOTD-stamp/XROOTD-download-Release.cmake && /bld4/opt/cmake/3.22.2/bin/cmake -E touch /bld6/root/bld/builtins/xrootd/XROOTD-prefix/src/XROOTD-stamp/XROOTD-download; CMake Error at XROOTD-stamp/XROOTD-download-Release.cmake:49 (message):; Command failed: 1. '/bld4/opt/cmake/3.22.2/bin/cmake' '-Dmake=' '-Dconfig=' '-P' '/bld6/root/bld/builtins/xrootd/XROOTD-prefix/src/XROOTD-stamp/XROOTD-download-Release-impl.cmake'. ```. attached are the XROOTD-download-err.log and XROOTD-download-out.log; [XROOTD-download-err.log](https://github.com/root-project/root/files/8624870/XROOTD-download-err.log); [XROOTD-download-out.log](https://github.com/root-project/root/files/8624872/XROOTD-download-out.log)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10527:1084,log,log,1084,https://root.cern,https://github.com/root-project/root/issues/10527,6,['log'],['log']
Testability,"Building external applications that use ROOT oftentimes fail if there is a mismatch in the C++ standard between ROOT and the application. To make this visible, diagnose if there is a mismatch in the value of the `__cplusplus` macro w.r.t. when ROOT was configured.; The check is performed in `RConfigure.h`, a common header also included in backports, e.g. RStringView.hxx. ## Changes or fixes:; - Generated `RConfigure.h` during build defines `ROOT__cplusplus`, which contains the value of the `__cplusplus` macro at the time ROOT was configured.; - Because `RConfigure.h` is included from many ROOT headers (e.g., backports), it seems a viable candidate to also add the mismatch check.; On mismatch, emit a warning (should it be an `#error` instead?). ## Checklist:; - [X] tested changes locally. This PR fixes #8063.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10517:775,test,tested,775,https://root.cern,https://github.com/root-project/root/pull/10517,1,['test'],['tested']
Testability,Builds of the new CI do not actually run latest changes in (some) tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13249:66,test,tests,66,https://root.cern,https://github.com/root-project/root/issues/13249,1,['test'],['tests']
Testability,BulkApi test: TFile used by TTreeReader needs to be delete last.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10030:8,test,test,8,https://root.cern,https://github.com/root-project/root/pull/10030,1,['test'],['test']
Testability,"By defining `TString::kNPOS` out of class, the symbol is materialized properly also with LLVM>=13. Related to https://github.com/cms-sw/cmssw/issues/43077. Using the snippet at https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225 , these are the numbers reported by different ROOT versions:. ```; $: for n in `ls *.log`; do echo $n; grep openat $n | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l; done; master-2023-12-18-knpos-constexpr-run.log; 2579; master-2023-12-18-knpos-out-of-class-run.log; 307; master-2023-12-18-run.log; 2577; v6-26-14-run.log; 293; v6-28-00-knpos-constexpr-run.log; 2578; v6-28-00-knpos-out-of-class-run.log; 304; v6-28-00-run.log; 2798; ```. Note specifically `v6-28-00-knpos-out-of-class-run.log` and `master-2023-12-18-knpos-out-of-class-run.log` which correspond to respectively a 6.28 and a master build **with** this patch applied. In those cases, the number of `openat` calls falls back down to 6.26 levels. For completennes, @Axel-Naumann suggested to try defining `TString::kNPOS` as `static constexpr Ssiz_t kNPOS{::kNPOS};` inside the class body directly. The numbers are slightly better than the reference, but still quite worse than the case of defining the member variable out of class. See specifically `v6-28-00-knpos-constexpr-run.log` and `master-2023-12-18-knpos-out-of-class-run.log`. . Also, note that after this patch:; ```; $: nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l; 52; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14261:331,log,log,331,https://root.cern,https://github.com/root-project/root/pull/14261,12,['log'],['log']
Testability,"By leveraging std::max_align_t, insure that the return addressed (offset-ed; compared to the address allocated by TStorage::ObjectAlloc) is still well; aligned. In https://root-forum.cern.ch/t/libnew-so-and-tcanvas/51039/8, executing; in rootn.exe:. TMapFile *mf=TMapFile::Create(""test.map"",""recreate""); TH1 *h=new TH1F(""test"",""test"",100,-5,5); h->Fill (0); h->Draw(). led to a segmentation fault in. during the execution of:. => 0x00007ffff2a62a12 <+162>:	movaps %xmm0,0x10(%r12). with an address that was ending in '8'. When allocating; the TMethodCall, the address returned was aligned on a 16 bit; boundary but the memory counting over-allocating was shifting; the address by 'only' 8 bits, leading to a mis-aligned access; by this vector memcpy.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11172:281,test,test,281,https://root.cern,https://github.com/root-project/root/pull/11172,3,['test'],['test']
Testability,"By using std::apply, now available after moving to C++17, the implementation can be greatly simplified. # This Pull request:. ## Changes or fixes:; The way the value of a std::ntuple is printed. ## Checklist:. - [v] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes # ; Nothing, it reduces the overall maintenance cost of the root codebase by simplifying it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13619:216,test,tested,216,https://root.cern,https://github.com/root-project/root/pull/13619,1,['test'],['tested']
Testability,"By using std::apply, now available after moving to C++17, the implementation can be greatly simplified. # This Pull request:. This is a BP of https://github.com/root-project/root/pull/13619. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13887:234,test,tested,234,https://root.cern,https://github.com/root-project/root/pull/13887,1,['test'],['tested']
Testability,"C775BCE: TMVA::Factory::TrainAllMethods() (Factory.cxx:1173); ==292588== by 0x4F963FE: ???; ==292588== by 0x4F9107E: ???; ==292588== by 0x6EC8BCD: cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const (in /home/vpadulan/Programs/rootproject/rootbuild/fix-tutorial-tmva-cnn-classification-testing/lib/libCling.so); ==292588== by 0x6E4EA4E: cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) (in /home/vpadulan/Programs/rootproject/rootbuild/fix-tutorial-tmva-cnn-classification-testing/lib/libCling.so); ==292588== by 0x6E4F13C: cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) (in /home/vpadulan/Programs/rootproject/rootbuild/fix-tutorial-tmva-cnn-classification-testing/lib/libCling.so); ==292588== by 0x6F36428: cling::MetaSema::actOnxCommand(llvm::StringRef, llvm::StringRef, cling::Value*) (in /home/vpadulan/Programs/rootproject/rootbuild/fix-tutorial-tmva-cnn-classification-testing/lib/libCling.so); ==292588== by 0x6F45003: cling::MetaParser::isXCommand(cling::MetaSema::ActionResult&, cling::Value*) (in /home/vpadulan/Programs/rootproject/rootbuild/fix-tutorial-tmva-cnn-classification-testing/lib/libCling.so); ==292588== by 0x6F468D4: cling::MetaParser::isCommand(cling::MetaSema::ActionResult&, cling::Value*) (in /home/vpadulan/Programs/rootproject/rootbuild/fix-tutorial-tmva-cnn-classification-testing/lib/libCling.so); ==292588== by 0x6F2EF9F: cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) (in /home/vpadulan/Programs/rootproject/rootbuild/fix-tutorial-tmva-cnn-classification-testing/lib/libCling.so); ==292588== by 0x6C20B67: HandleInterpreterException(cling::MetaProcessor*, char const*, cling::Interpreter::CompilationResult&, cling::Value*) (TCling.cxx:2438); ==292588== by 0x6C215B6: TCling::ProcessLine(char",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14438:2502,test,testing,2502,https://root.cern,https://github.com/root-project/root/issues/14438,1,['test'],['testing']
Testability,CEF tested with 4692 branch (Chromium 97). This version allows correct embeding of WebGL canvas into SVG; This solves long-standing problem with Chrome-based browsers; Starting from version 96 Chrome works as good as Firefox; in that respect. Checked that latest CEF works as well,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9647:4,test,tested,4,https://root.cern,https://github.com/root-project/root/pull/9647,1,['test'],['tested']
Testability,"CHEP19](https://doi.org/10.1051/epjconf/202024506027) (and [preliminary results at the 2018 ROOT Users workshop in Sarajevo](https://indico.cern.ch/event/697389/contributions/3062028/)). That version was redesigned starting from 2019 to better integrate with the rest of the code and at the same time untangle the test statistics classes to conceptually bring them closer to the math, instead of the more implementation-detail oriented existing design (RooAbsTestStatistic et al.). The new packages include the following tests, which should probably still be added to the testing infrastructure somehow:. 1. MultiProcess:; 1. test_RooFitMultiProcess_Messenger; 2. test_RooFitMultiProcess_ProcessManager; 3. test_RooFitMultiProcess_Job; 2. TestStatistics:; 1. testLikelihoodGradientJob; 2. testLikelihoodSerial; 3. testRooRealL; 3. RooFitZMQ:; 1. test_RooFitZMQ; 2. test_RooFitZMQ_polling; 3. test_RooFitZMQ_HWM; 4. test_RooFitZMQ_load_balancing; 4. RooFitCore:; 1. testRooGradMinimizer; 2. testBidirMMapPipe; 3. testMPFEnll. From my side (and that of the NL eScience Center), the project has ended and time has run out to make any further major contributions to it, except, of course finishing this PR and providing help to get it working and to possibly hand over further development :). Here are some notes for possible future work:; - RooFitZMQ includes an extension of ZeroMQ itself: a ppoll function. This function should ideally be contributed to ZeroMQ, but I have had no time for this. The motivation behind ppoll is given in this [blog post](https://blog.esciencecenter.nl/combining-zeromq-posix-signals-b754f6f29cd6).; - At the last moment, I decided to reimplement part of the Queue functionality. The task distribution and parameter updating functionalities are now done directly using appropriate ZeroMQ sockets instead of indirectly through the Queue. The old-style Queue functionality, however, has not been cleaned up yet. Doing so will clean up the ""plumbing"" of the MultiProcess fun",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8294:4449,test,testBidirMMapPipe,4449,https://root.cern,https://github.com/root-project/root/pull/8294,1,['test'],['testBidirMMapPipe']
Testability,CI: group build logs,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12184:16,log,logs,16,https://root.cern,https://github.com/root-project/root/issues/12184,1,['log'],['logs']
Testability,CI: log parsing,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12185:4,log,log,4,https://root.cern,https://github.com/root-project/root/issues/12185,1,['log'],['log']
Testability,CI: test summary,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12186:4,test,test,4,https://root.cern,https://github.com/root-project/root/issues/12186,1,['test'],['test']
Testability,"CMake based build for Windows compatibility.). [self-reference.zip](https://github.com/root-project/root/files/10786205/self-reference.zip). It should be able to reproduce the issue with:. ```; [bash][atspot01]:self-reference > make; genreflex SelfReferenceDict.hpp -o SelfReferenceDict.cpp --rootmap=libSelfReferenceDict.rootmap \; --rootmap-lib=libSelfReferenceDict.so --library=libSelfReferenceDict.so --select=selection.xml; c++ -pthread -std=c++17 -m64 -I/software/root/6.26.06/x86_64-ubuntu2004-gcc9-opt/include -fPIC -c -o SelfReferenceDict.o SelfReferenceDict.cpp; c++ -o libSelfReferenceDict.so -shared -m64 -L/software/root/6.26.06/x86_64-ubuntu2004-gcc9-opt/lib -lCore -lImt -lRIO -lNet -lHist -lGraf -lGraf3d -lGpad -lROOTVecOps -lTree -lTreePlayer -lRint -lPostscript -lMatrix -lPhysics -lMathCore -lThread -lMultiProc -lROOTDataFrame -Wl,-rpath,/software/root/6.26.06/x86_64-ubuntu2004-gcc9-opt/lib -pthread -lm -ldl -rdynamic SelfReferenceDict.o; [bash][atspot01]:self-reference > ./test.py ; hadd Target file: output.root; hadd compression setting for all output: 1; hadd Source file 1: input1.root; hadd Source file 2: input2.root; hadd Target path: output.root:/; input_line_32:7:15: error: field has incomplete type 'ConfigType'; ConfigType _0;; ^; libSelfReferenceDict dictionary forward declarations' payload:5:68: note: forward declaration of 'ConfigType'; struct __attribute__((annotate(""$clingAutoload$ConfigType.hpp""))) ConfigType;; ^; Error in <Load>: Could not declare TEmulatedTuple<ConfigType,string>. *** Break *** segmentation violation. ===========================================================; There was a crash.; This is the entire stack trace of all threads:; ===========================================================; #0 0x00007f052580ec3a in __GI___wait4 (pid=34047, stat_loc=stat_loc; entry=0x7ffc6b5a07e8, options=options; entry=0, usage=usage; entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27; #1 0x00007f052580ebfb in __GI___waitpid (pid=<optimized ou",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12358:6901,test,test,6901,https://root.cern,https://github.com/root-project/root/issues/12358,1,['test'],['test']
Testability,CSVDataSource .............................. Passed 6.87 sec; Start 466: tutorial-dataframe-df021_createTGraph; 487/1231 Test #460: tutorial-dataframe-df015_LazyDataSource ............................. Passed 6.11 sec; Start 467: tutorial-dataframe-df022_useKahan; 488/1231 Test #463: tutorial-dataframe-df018_customActions .............................. Passed 3.66 sec; Start 468: tutorial-dataframe-df023_aggregate; 489/1231 Test #466: tutorial-dataframe-df021_createTGraph ............................... Passed 2.94 sec; Start 469: tutorial-dataframe-df024_Display; 490/1231 Test #467: tutorial-dataframe-df022_useKahan ................................... Passed 3.26 sec; Start 470: tutorial-dataframe-df025_RNode; 491/1231 Test #465: tutorial-dataframe-df020_helpers .................................... Passed 3.82 sec; Start 471: tutorial-dataframe-df031_Stats; 492/1231 Test #468: tutorial-dataframe-df023_aggregate .................................. Passed 2.25 sec; 498/1231 Test #470: tutorial-dataframe-df025_RNode ...................................... Passed 2.80 sec; 502/1231 Test #464: tutorial-dataframe-df019_Cache ...................................... Passed 7.71 sec; 506/1231 Test #471: tutorial-dataframe-df031_Stats ...................................... Passed 3.82 sec; 507/1231 Test #469: tutorial-dataframe-df024_Display .................................... Passed 4.58 sec; Start 1071: tutorial-dataframe-df000_simple-py; Start 1072: tutorial-dataframe-df001_introduction-py; Start 1073: tutorial-dataframe-df002_dataModel-py; Start 1074: tutorial-dataframe-df003_profiles-py; 1072/1231 Test #1071: tutorial-dataframe-df000_simple-py .................................. Passed 2.85 sec; Start 1075: tutorial-dataframe-df004_cutFlowReport-py; 1073/1231 Test #1074: tutorial-dataframe-df003_profiles-py ................................ Passed 5.32 sec; Start 1076: tutorial-dataframe-df006_ranges-py; 1074/1231 Test #1072: tutorial-dataframe-df001_introduction-py .......,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10300:10257,Test,Test,10257,https://root.cern,https://github.com/root-project/root/pull/10300,1,['Test'],['Test']
Testability,CTest fixtures which have previously been added to Rootbench have been useful in defining better dependencies for tests. Since we currently cannot have dependencies between tests fixtures should be added into both root and roottest.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8707:114,test,tests,114,https://root.cern,https://github.com/root-project/root/issues/8707,2,['test'],['tests']
Testability,"CXX__`. The visible consequence is:; ```; ... rootcling_stage1 ... G__Core.cxx ... ; Warning in cling::IncrementalParser::CheckABICompatibility():; Failed to extract C++ standard library version.; In file included from input_line_2:1:; /scratch/pcanal/spack-root-badter/tmp/spack-stage/spack-stage-root-develop-4gn6o5fpka65i75lxkr6h63al2u2hkmg/spack-build-4gn6o5f/etc/cling/Interpreter/RuntimeUniverse.h:175:47: error: use of undeclared identifier 'std'; void copyArray(T* src, void* placement, std::size_t size) {; ^; /scratch/pcanal/spack-root-badter/tmp/spack-stage/spack-stage-root-develop-4gn6o5fpka65i75lxkr6h63al2u2hkmg/spack-build-4gn6o5f/etc/cling/Interpreter/RuntimeUniverse.h:176:14: error: use of undeclared identifier 'std'; for (std::size_t i = 0; i < size; ++i); ^; In file included from input_line_3:1:; In file included from /usr/include/assert.h:35:; In file included from /usr/include/features.h:514:; /usr/include/gnu/stubs.h:7:11: fatal error: 'gnu/stubs-32.h' file not found; # include <gnu/stubs-32.h>; ^~~~~~~~~~~~~~~~; Error: Error loading the default rootcling header files.; ninja: build stopped: subcommand failed.; ```. ### Reproducer. ```; cat /var/tmp/a.cxx ; void a(); {; fprintf(stdout, ""Running the script a.cxx\n"");; }. touch -m a -d '1969-12-31 18:00:00.000000000' /var/tmp/a.cxx . ls -l /var/tmp/a.cxx ; -rw-r--r-- 1 pcanal us_cms 63 Dec 31 1969 /var/tmp/a.cxx. root.exe -b -l -q /var/tmp/a.cxx . Processing /var/tmp/a.cxx...; input_line_8:1:10: fatal error: file '/var/tmp/a.cxx' modified since it was first processed; #include ""/var/tmp/a.cxx""; ^; ```. ### ROOT version. | Welcome to ROOT 6.31/01 https://root.cern |; | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on Jan 12 2024, 21:36:24 |; | From heads/master@9645b3aa |; | With g++ (Spack GCC) 13.1.0 |. ### Installation method. SPACK with build Cache (but technically any). ### Operating system. Linux but likely any. ### Additional context. The problem was ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14372:1490,stub,stubs-,1490,https://root.cern,https://github.com/root-project/root/issues/14372,1,['stub'],['stubs-']
Testability,Call `Modified()` method for the canvas itself - there are no logical reasons why `gPad->Modified()` was called. Instead calling `SetName(name)` directly set `fName` member in all TCanvas constructors. ; This avoids triggering of `Modified()` signal from the constructor itself. Fix logic around empty canvas name in `TCanvas::SaveSource`. ; There also use direct assignment of `fName` member.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15518:62,log,logical,62,https://root.cern,https://github.com/root-project/root/pull/15518,2,['log'],"['logic', 'logical']"
Testability,"Call typed overload of `SetBranchAddress` for array types like `np.ndarray` or `array.array`. The correct C++ template parameter is inferred from the array interface type information. This is an improvement for two reasons:. 1. We don't need to cast the arrays to a `void *` to avoid template resolution problems anymore. 2. More importantly: ROOT will do a runtime check for type compatibility, which was requested in the JIRA ticked linked below. To see the benefit of the added type check, take for example this code, where the branch address is set to an array address with a mismatched type:. ```python; import array; import ROOT. def create():; f = ROOT.TFile(""dummy.root"", 'RECREATE'); t = ROOT.TTree(""tree"", 'A tree'); a = array.array('f', [42]); br = t.Branch('a', a, 'a/F'). for x in (21, 42, 1337):; a[0] = x; t.Fill(). t.Write(); f.Close(). def test(typecode='f'):; f = ROOT.TFile(""dummy.root"", 'READ'); t = f.Get('tree'); a = array.array(typecode, [0]); status = t.SetBranchAddress('a', a); print(""Status = %s"" % (status, )). for i in range(t.GetEntries()):; t.GetEntry(i); print(""a = %s"" % (a[0], )). create(); test(""f""); test(""d""); ```. Before this commit, the output would be like this:; ```txt; Status = 4; a = 21.0; a = 42.0; a = 1337.0; Status = 4; a = 5.442276803e-315; a = 5.483722033e-315; a = 5.690664868e-315; ```. With this commit, you get a clear error:; ```txt; Status = 0; a = 21.0; a = 42.0; a = 1337.0; Error in <TTree::SetBranchAddress>: The pointer type given ""Double_t"" (8) does not correspond to the type needed ""Float_t"" (5) by the branch: a; Status = -2; a = 0.0; a = 0.0; a = 0.0; ```. Closes the following JIRA ticket:; https://its.cern.ch/jira/browse/ROOT-8213",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16171:857,test,test,857,https://root.cern,https://github.com/root-project/root/pull/16171,3,['test'],['test']
Testability,"CallFunc.FunctionWrapperIncompleteReturnType (1 ms); [ RUN ] TClingCallFunc.MemberMethodWrapper; [ OK ] TClingCallFunc.MemberMethodWrapper (0 ms); [ RUN ] TClingCallFunc.FunctionWrapperNodiscard; [ OK ] TClingCallFunc.FunctionWrapperNodiscard (0 ms); [ RUN ] TClingCallFunc.FunctionWrapperSharedPtr; [ OK ] TClingCallFunc.FunctionWrapperSharedPtr (33 ms); [ RUN ] TClingCallFunc.ROOT_6523; [ OK ] TClingCallFunc.ROOT_6523 (7 ms); [----------] 15 tests from TClingCallFunc (56 ms total); [----------] 4 tests from TClingDataMemberInfo; [ RUN ] TClingDataMemberInfo.UsingDecls; [ OK ] TClingDataMemberInfo.UsingDecls (1 ms); [ RUN ] TClingDataMemberInfo.Lookup; [ OK ] TClingDataMemberInfo.Lookup (0 ms); [ RUN ] TClingDataMemberInfo.Offset; /builddir/build/BUILD/root-6.30.04/core/metacling/test/TClingDataMemberInfoTests.cxx:230: Failure; Value of: 1 == *(int*)(ROOT::GetROOT())->GetGlobal(""var1"")->GetAddress(); Actual: false; Expected: true; /builddir/build/BUILD/root-6.30.04/core/metacling/test/TClingDataMemberInfoTests.cxx:233: Failure; Value of: -2 == *(int*)(ROOT::GetROOT())->GetGlobal(""var2"")->GetAddress(); Actual: false; Expected: true; /builddir/build/BUILD/root-6.30.04/core/metacling/test/TClingDataMemberInfoTests.cxx:242: Failure; Expected equality of these values:; 3000; *(int*)(ROOT::GetROOT())->GetGlobal(""kError"")->GetAddress(); Which is: 0; [ FAILED ] TClingDataMemberInfo.Offset (7 ms); [ RUN ] TClingDataMemberInfo.issue8553; [ OK ] TClingDataMemberInfo.issue8553 (4 ms); [----------] 4 tests from TClingDataMemberInfo (14 ms total); [----------] 5 tests from TClingMethodInfo; [ RUN ] TClingMethodInfo.Prototype; [ OK ] TClingMethodInfo.Prototype (0 ms); [ RUN ] TClingMethodInfo.ROOT10789; [ OK ] TClingMethodInfo.ROOT10789 (2 ms); [ RUN ] TClingMethodInfo.DerivedCtorROOT11010; [ OK ] TClingMethodInfo.DerivedCtorROOT11010 (81 ms); [ RUN ] TClingMethodInfo.TemplateFun; [ OK ] TClingMethodInfo.TemplateFun (1 ms); [ RUN ] TClingMethodInfo.Ctors; [ OK ] TClingMethodInfo.Cto",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14512:3661,test,test,3661,https://root.cern,https://github.com/root-project/root/issues/14512,1,['test'],['test']
Testability,"Calling `RooCmdArg::take` in `RooGlobalFunc.h` header can cause linker; errors, because it accesses a static data member. That's unsupported; across DLL boundaries on Windows. This should fix the Windows 10 test errors that appeard after #8416.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8437:207,test,test,207,https://root.cern,https://github.com/root-project/root/pull/8437,1,['test'],['test']
Testability,Calling `file->SetBit(TFile::k630forwardCompatibility);` will request to file to store the current; value of the bit kIsOnHeap and kNotDeleted for reading in older version that were not setting; their value based on the actual state of the read into object# This Pull request:. The rootrc TFile.v630forwardCompatibility can be used to change the default to have the bit set for all `TFile`. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15055:434,test,tested,434,https://root.cern,https://github.com/root-project/root/pull/15055,1,['test'],['tested']
Testability,"Can one of the threading people cross-check that this does what it's supposed to do? I don't have a good, simple test case.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/892:113,test,test,113,https://root.cern,https://github.com/root-project/root/pull/892,1,['test'],['test']
Testability,"Can we [group the build logs](https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#grouping-log-lines) into the different sections: setup, cmake, build, install?",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12184:24,log,logs,24,https://root.cern,https://github.com/root-project/root/issues/12184,2,['log'],"['log-lines', 'logs']"
Testability,"Can we add a test summary comment to the PRs, e.g. based on https://github.com/marketplace/actions/publish-test-results#use-with-matrix-strategy ?",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12186:13,test,test,13,https://root.cern,https://github.com/root-project/root/issues/12186,2,['test'],"['test', 'test-results']"
Testability,"Can we add log parsing + PR commenting for the CI, e.g. using https://github.com/marketplace/actions/gcc-problem-matcher ?",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12185:11,log,log,11,https://root.cern,https://github.com/root-project/root/issues/12185,1,['log'],['log']
Testability,"Casting the matrices from double to float create small rounding; errors of the order of 1e-06 in the reference matrices themselves,; so when they are multiplied the sum over long rows/columns accumulates; many rounding errors and make the test fail. Using TMatrixT of float; as the reference to begin with eliminates this problem. **Note:** _This is a backport of the same fix to master, but with 3 commits combined into a single one._. Reference: http://cdash.cern.ch/testSummary.php?project=1&name=TMVA-DNN-Arithmetic-Cpu&date=2017-04-21",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/518:239,test,test,239,https://root.cern,https://github.com/root-project/root/pull/518,2,['test'],"['test', 'testSummary']"
Testability,"Catch-all printValue implementation changed to enable correct invocation if only parent type overload exists (ex. if there is no overload for TF1*, compiler invokes the overload to its best parent overload match, in the worst case void*). Argument changed from reference to pointer to support this.; isEnumType Coverity bug changed from if to assert (coding, not runtime error); Changed the way printValue is invoked in order to correctly cast Value to the needed value (e.g. LL -> short). Extracted value stays in scope while we execute printValue, because we use the address.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/78:343,assert,assert,343,https://root.cern,https://github.com/root-project/root/pull/78,1,['assert'],['assert']
Testability,Change Log:; - Enable RFileDialog through REveManager; - Add checks for validity of table and filter expressions; - Clear unnecessary REveManager printouts,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8333:7,Log,Log,7,https://root.cern,https://github.com/root-project/root/pull/8333,1,['Log'],['Log']
Testability,Change just to trigger the new CI that can test the roottest suit. This PR is linked to https://github.com/root-project/roottest/pull/1046 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14393:43,test,test,43,https://root.cern,https://github.com/root-project/root/pull/14393,1,['test'],['test']
Testability,Change just to trigger the new CI that can test the roottest suit. This PR is linked to https://github.com/root-project/roottest/pull/1046. It is just a way to trigger the new CI on the changes of the roottest PR.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14394:43,test,test,43,https://root.cern,https://github.com/root-project/root/pull/14394,1,['test'],['test']
Testability,"Change logic how sub-elements in classes like `THStack` or `TMultiGraph` are handled.; Before was tried to disentangle them already on server side - to get direct access to object id (hashed object pointer).; But this made difficult to correctly work with such composed objects on client side. . Therefore now such objects remain as is and one provides special referencing methods to get access to such objects ; via suffixes in object id. Like if THStack has id `123456`, then first histogram in stack will have id `123456#hist_1`.; And X axis of such histogram will be referenced as `123456#hist_1#x`. Such logic used on client side to get context menus; for the objects and execute some methods. Correspondent update in JSROOT with several other fixes. Adjust two tutorials",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14040:7,log,logic,7,https://root.cern,https://github.com/root-project/root/pull/14040,2,['log'],['logic']
Testability,"Change the buffer management in the new RooFit BatchMode such that; queues get cleared when the RooFitDriver gets destructed. Like this one avoids the steady increase in memory that one would get; when doing different fits in one go with different numbers of events,; such as in test suites or MC studies with extended models.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10736:279,test,test,279,https://root.cern,https://github.com/root-project/root/pull/10736,1,['test'],['test']
Testability,"Change the cv qualification of the const vector passed to `span`. Previously, the constructor `span(std::vector<typename; std::remove_cv<T>::type> const& v) noexcept` was producing an error for invalid conversion from `const long int*` to `std::__ROOT::span<long int>::pointer` {aka `long int*`} [-fpermissive]. Corresponding test added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9818:326,test,test,326,https://root.cern,https://github.com/root-project/root/pull/9818,1,['test'],['test']
Testability,"Change the logic in `RClusterPool` such that it will prefetch the next _bunch_ of clusters while the current bunch of clusters is being processed. The bunch size is configurable on construction of `RClusterPool`. At the moment, it needs to be explicitly set (if different from 1) via `RNTupleReadOptions`. Eventually, there should be some mechanism to figure out a sensible default, given the source of data (e.g., remote or local) and the set of active columns. Compared to the current cluster prefetching, the combined set of pages of a bunch of clusters can now be given to a single vector read requests. That increases the size of vector reads and leads to significant throughput increases in certain cases. In particular for remote I/O but also, within limits, for SSDs. This PR is based on the fixes of #9096",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9100:11,log,logic,11,https://root.cern,https://github.com/root-project/root/pull/9100,1,['log'],['logic']
Testability,"Changes are not yet functional. I did my best at finishing all I could, but there are still some errors I couldn't correct in time. Because of these errors, I also wasn't able to test the changes with the fit.cxx file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6103:179,test,test,179,https://root.cern,https://github.com/root-project/root/pull/6103,1,['test'],['test']
Testability,"Changes the enable_if pattern in the Vc Genvector test application, to match the changes made in #394 during review.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/427:50,test,test,50,https://root.cern,https://github.com/root-project/root/pull/427,1,['test'],['test']
Testability,"Changing the definition of infinity in RooFit from `1e30` to `std::numeric_limits<double>::infinity()`, and making some other changes that ensure no evaluation errors are logged with this new definition. * Code-format RooNumber.h and RooNumber.cxx; * Inline infinity constant and checks in `RooNumber`; * Make `TMath::AreEqualAbs()` return `true` when comparing `inf`; * Define infinity as `std::numeric_limits<double>::infinity()`; * RooTruthModel: local `xmin` and `xmax` to make code more readable; * Avoid `sin` or `cos` of infinity in RooTruthModel integral code; * Note change of infinity definition in RooFit. More details in the commit descriptions. With the increased use of inlined code and simpler comparisons in `RooNumber`, this is also speeding up RooFit.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12016:171,log,logged,171,https://root.cern,https://github.com/root-project/root/pull/12016,1,['log'],['logged']
Testability,"Check duplicate issues. - [x] Checked for duplicates. ### Description. Following from wlav/cppyy#201, it seems there is an issue with (ROOT's) cppyy's handling of SFINAE functions with variadic template arguments. . ### Reproducer. ```py; import ROOT; import cppyy. cppyy.cppdef('''; template <typename T> struct TestSfinae {; template <typename U, typename V = T,; std::enable_if_t<std::is_arithmetic_v<V>, bool> = false>; auto test_single(U arg) {; std::cout << ""good"" << std::endl;; return 0;; }; template <typename... Args, typename V = T,; std::enable_if_t<std::is_arithmetic_v<V>, bool> = false>; auto test_pack(Args... args) {; std::cout << ""good"" << std::endl;; return 0;; }; };; '''). # call from cling; cppyy.cppdef('''auto testing = TestSfinae<float>();'''); cppyy.cppdef('''auto single_call = testing.test_single(1);''') # good; cppyy.cppdef('''auto pack_call = testing.test_pack(1,2,3);''') # good. # call from bindings; testing = cppyy.gbl.TestSfinae['float'](); testing.test_single(1) # good; testing.test_pack(1,2,3) # fails; ```. ### ROOT version. ```; ------------------------------------------------------------------; | Welcome to ROOT 6.28/06 https://root.cern |; | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for macosx64 on Sep 17 2023, 12:38:14 |; | From heads/latest-stable@7745d36d |; | With Apple clang version 14.0.3 (clang-1403.0.22.14.1) |; | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------; ```. ### Installation method. build from source. ### Operating system. MacOS. ### Additional context. ```; input_line_24:6:70: error: no matching member function for call to 'test_pack'; new (ret) (int) (((TestSfinae<float>*)obj)->TestSfinae<float>::test_pack<int, int, int, float, false>(*(int*)args[0], *(int*)args[1],; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~; input_line_18:11:8: note: candidate template ignored:",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14016:1012,test,testing,1012,https://root.cern,https://github.com/root-project/root/issues/14016,1,['test'],['testing']
Testability,Check which unit tests are actually failing to understand the problem with the string converters in CPyCppyy master.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16212:17,test,tests,17,https://root.cern,https://github.com/root-project/root/pull/16212,1,['test'],['tests']
Testability,"Checked for duplicates: not found. Discussion started here:; https://root-forum.cern.ch/t/validity-health-checking-for-a-tfile-content-tfile-ok-but-ttree-corrupted-and-no-error/47304. ### Describe the bug; Using from python:; A TFile not isZombie() and not TestBit(ROOT.TFile.kRecovered) throw these error when parsing a TTree:; ```; Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596; Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608; Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:0, badread=1, nerrors=1, basketnumber=0; Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596; Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608; Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:1905651, badread=1, nerrors=2, basketnumber=0; Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596; Error in <TBasket::ReadBasketBuffers>: fNbytes = 5760784, fKeylen = 74, fObjlen = 7615836, noutot = 0, nout=0, nin=5760710, nbuf=7615836; Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:460579199, branch:fSnp, entry:0, badread=1, nerrors=3, basketnumber=0; ```. ### Expected behavior; Any catch-able error either at TFile opening or at least when parsing and error is encounter ...; At this point i cannot check and asses the health of the file from within python. ### To Reproduce; https://gist.github.com/adriansev/5274de723333cd0afff774cb4d48d202; a test file can be provided through private communication. ### Setup; fedora 34/ ROOT git v6-24-00-patches @5af1fa4d3d; manual build",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9154:257,Test,TestBit,257,https://root.cern,https://github.com/root-project/root/issues/9154,2,"['Test', 'test']","['TestBit', 'test']"
Testability,"Checksum is now excluded from the on-disk representation and it's not; stored in the anchor. This allows to leverage the ROOT I/O machinery for; schema evolution rather than having to rely entirely on custom code in; RNTuple::Streamer(). The RNTuple class version gets bumped from 4 to 5. This is a breaking change, but backwards compatibility with version 4; will be preserved for a while for easing the transition. Support for; version 4 will be dropped before stabilization. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15553:499,test,tested,499,https://root.cern,https://github.com/root-project/root/pull/15553,1,['test'],['tested']
Testability,Clad is an optional module but TFormula (and tests of) fails without it.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15091:45,test,tests,45,https://root.cern,https://github.com/root-project/root/issues/15091,1,['test'],['tests']
Testability,Cling fix abi test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1864:14,test,test,14,https://root.cern,https://github.com/root-project/root/pull/1864,1,['test'],['test']
Testability,Cling test fixes,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1292:6,test,test,6,https://root.cern,https://github.com/root-project/root/pull/1292,1,['test'],['test']
Testability,Cling warns about missing PCMs on windows. 1. Revert e3f2ed26b7903ff540a37e77f6c026b8502db747; 2. Fix the warnings in the failing tests.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9354:130,test,tests,130,https://root.cern,https://github.com/root-project/root/issues/9354,1,['test'],['tests']
Testability,Closes #12832. There is also a commit that reduces code duplication in the unit tests by adding one single header where the gtest backwards compatibility changes are made.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13261:80,test,tests,80,https://root.cern,https://github.com/root-project/root/pull/13261,1,['test'],['tests']
Testability,"Closes https://github.com/root-project/root/issues/14553. This PR adds the dependencies for the TMVA GNN unit tests to the; docker images via the `requirements.txt`. However, this will only have a; delayed effect until the images are re-built. Therefore, we can't; validate for now that the tests actually work. Once the missing packages make it into the CI images, a PR should be; opened to revert this commit. For the JsMVA dependency, we don't have to worry about anything.; The JsMVA tests have already been temporarily disabled by @dpiparo 7 years ago:; https://github.com/root-project/roottest/blame/master/python/JsMVA/CMakeLists.txt. Note: adding the new dependencies only grows the environment by 20 MB, which is less then 1 % of a size increase (the size of the environment is currently 2.3 GB).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15512:110,test,tests,110,https://root.cern,https://github.com/root-project/root/pull/15512,3,['test'],['tests']
Testability,Co-authored-by: Bertrand Bellenot <bellenot@users.noreply.github.com>. Backport of https://github.com/root-project/root/pull/13856. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13948:197,test,tested,197,https://root.cern,https://github.com/root-project/root/pull/13948,1,['test'],['tested']
Testability,Co-authored-by: sa35. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #10062,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12327:87,test,tested,87,https://root.cern,https://github.com/root-project/root/pull/12327,1,['test'],['tested']
Testability,"Code here: https://github.com/root-project/root/blob/master/roofit/roofitcore/src/RooSimPdfBuilder.cxx#L850-L854 has logical problem.; ```; std::string remainderState;; if (const auto pos = paramName.find('[') != std::string::npos) {; const auto posEnd = paramName.find(']');; remainderState = paramName.substr(pos+1, posEnd - pos - 1);; }; ```; Here variable `pos` will be boolean and not position of `[` symbol. ; Should be fixed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7481:117,log,logical,117,https://root.cern,https://github.com/root-project/root/issues/7481,1,['log'],['logical']
Testability,"Code unloading fails assert: ""Can not revert previous transactions""",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9187:21,assert,assert,21,https://root.cern,https://github.com/root-project/root/issues/9187,1,['assert'],['assert']
Testability,"Collector>::dataTraverseNode(clang::Stmt*, llvm::SmallVectorImpl<llvm::PointerIntPair<clang::Stmt*, 1u, bool, llvm::PointerLikeTypeTraits<clang::Stmt*>, llvm::PointerIntPairInfo<clang::Stmt*, 1u, llvm::PointerLikeTypeTraits<clang::Stmt*> > > >*) () from /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/CMSSW_13_2_ROOT628_X_2023-05-04-2300/external/el8_amd64_gcc11/lib/libCling.so; #20 0x00002b4bd39ef4d5 in clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseStmt(clang::Stmt*, llvm::SmallVectorImpl<llvm::PointerIntPair<clang::Stmt*, 1u, bool, llvm::PointerLikeTypeTraits<clang::Stmt*>, llvm::PointerIntPairInfo<clang::Stmt*, 1u, llvm::PointerLikeTypeTraits<clang::Stmt*> > > >*) [clone .constprop.0] () from /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/CMSSW_13_2_ROOT628_X_2023-05-04-2300/external/el8_amd64_gcc11/lib/libCling.so; #21 0x00002b4bd39ef9be in cling::DeclUnloader::VisitFunctionDecl(clang::FunctionDecl*) () from /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/CMSSW_13_2_ROOT628_X_2023-05-04-2300/external/el8_amd64_gcc11/lib/libCling.so; #22 0x00002b4bd39bf764 in cling::TransactionUnloader::unloadDeserializedDeclarations(cling::Transaction*, cling::DeclUnloader&) () from /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/CMSSW_13_2_ROOT628_X_2023-05-04-2300/external/el8_amd64_gcc11/lib/libCling.so; #23 0x00002b4bd39bfc86 in cling::TransactionUnloader::RevertTransaction(cling::Transaction*) () from /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/CMSSW_13_2_ROOT628_X_2023-05-04-2300/external/el8_amd64_gcc11/lib/libCling.so; #24 0x00002b4bd39a4afe in cling::Interpreter::unload(cling::Transaction&) () from /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/CMSSW_13_2_ROOT628_X_2023-05-04-2300/external/el8_amd64_gcc11/lib/libCling.so; #25 0x00002b4bd3a28bcf in cling::IncrementalParser::commitTransaction(llvm::PointerIntPair<cling::Transaction*, 2u, cling::IncrementalParser::EParseResult",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12771:6875,test,tests,6875,https://root.cern,https://github.com/root-project/root/issues/12771,2,['test'],['tests']
Testability,"Columns defined via DefinePerSample cannot ever have a dependency; on the systematic variation (they don't depend on any dataset; column), so when a RDefinePerSample is asked to `MakeVariations`; it just does nothing, and program logic should never end up; requesting a varied value for a RDefinePerSample. The commit also adds a test for this case.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9935:230,log,logic,230,https://root.cern,https://github.com/root-project/root/pull/9935,2,"['log', 'test']","['logic', 'test']"
Testability,"Columns in Pandas dataframes are *not* guaranteed to be contiguous; arrays, so we need the same workaround as in the `MakeNumpyDataFrame`; method, first copying the array to contiguous memory if it was not; contiguous. Also, veto the tutorial test if `pandas` is not available. This should fixes test failures on Windows. Pinging @dpiparo, since this follows up on your PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14997:243,test,test,243,https://root.cern,https://github.com/root-project/root/pull/14997,2,['test'],['test']
Testability,"Command set variable in parent scope which is identical with variable in local scope. I suspect, that sometime `cmake` makes failure. In principle, it is the only place in roottest - we could just avoid usage of that variable at all. . Trying to fix sporadic problem like [here](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/81406/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tclass_methods_libgen_build/). Output is:; ```; Generating tclass_methods.cxx, tclass_methods.rootmap; Building CXX object roottest/root/multicore/CMakeFiles/roottest-root-multicore-tclass_methods-libgen.dir/tclass_methods.cxx.o; clang: error: no such file or directory: '/Users/sftnight/build/workspace/root-pullrequests-build/build/roottest/root/multicore/tclass_methods.cxx'; clang: error: no input files; make[1]: *** [roottest/root/multicore/CMakeFiles/roottest-root-multicore-tclass_methods-libgen.dir/tclass_methods.cxx.o] Error 1; make: *** [roottest-root-multicore-tclass_methods-libgen/fast] Error 2; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5585:358,test,testReport,358,https://root.cern,https://github.com/root-project/root/pull/5585,1,['test'],['testReport']
Testability,Commented multithreaded execution policy test.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/627:41,test,test,41,https://root.cern,https://github.com/root-project/root/pull/627,1,['test'],['test']
Testability,"Commit 2b54b792fc (added by PR #13388) changed the type of the third argument to `std::function`. However, the correct type should be; ```; std::function<void(DescriptorId_t, NTupleSize_t,; const RClusterDescriptor::RPageRange::RPageInfo &)> perPageFunc); ```; Otherwise, passing by value incurs in an extra copy in `std::function<...>::operator()`. ## Checklist:; - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13456:371,test,tested,371,https://root.cern,https://github.com/root-project/root/pull/13456,1,['test'],['tested']
Testability,"Commit 6abb8e90d9 reverts to the `std::span` pointer/pointer constructor. Unfortunately, per https://en.cppreference.com/w/cpp/container/vector/end, dereferencing the end iterator of a vector results in undefined behavior. This actually triggers an assertion on MSVC:; ```; Assertion failed: can't dereference out of range vector iterator; ```; Change the constructor to use pointer/size instead, which is also compatible with the original fix for libc++ in commit 6abb8e90d9. This should fix the aforementioned assertion on Windows. ## Checklist:; - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13452:249,assert,assertion,249,https://root.cern,https://github.com/root-project/root/pull/13452,4,"['Assert', 'assert', 'test']","['Assertion', 'assertion', 'tested']"
Testability,"Commit 785c9df34d (""Restore symbol lookup in child interpreters"") added a `DefinitionGenerator` to allow symbol lookup in the parent `IncrementalJIT` after the upgrade to LLVM 13. It appears that instead of the unmangled name, we need to lookup already linker mangled names. This fixes the tests `CodeUnloading/AtExit.C` and `MultipleInterpreters/MultipleInterpreters.C` on macOS, which adds an underscore during linker mangling. No change on Linux because there is no additional linker name mangling.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16268:290,test,tests,290,https://root.cern,https://github.com/root-project/root/pull/16268,1,['test'],['tests']
Testability,"Commit 88665b9cde introduced a Python version of fitConvolution.C, but did not add it to the list of vetoed tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9635:108,test,tests,108,https://root.cern,https://github.com/root-project/root/pull/9635,1,['test'],['tests']
Testability,Commit ac0de75b8 introduced this typo which breaks some tests.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/822:56,test,tests,56,https://root.cern,https://github.com/root-project/root/pull/822,1,['test'],['tests']
Testability,Commit c8c0ea7c59 made the step and job fail in case of a test error. We still want the results to be uploaded to show them on GitHub.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12822:58,test,test,58,https://root.cern,https://github.com/root-project/root/pull/12822,1,['test'],['test']
Testability,Commit e97f74d67e changed the tutorials `fit/graph2dfit.C` and `hist/hstack.C` to not return a pointer to `TCanvas`. Remove the special case and expect the test to exit code 0.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11830:156,test,test,156,https://root.cern,https://github.com/root-project/root/pull/11830,1,['test'],['test']
Testability,Commit fb2e642952c2163e7f1c0cf0f4c18de53d9877b5 disabled testRooGradMinimizerFcn; this needs to be reenabled. (This is just a reminder.),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8697:57,test,testRooGradMinimizerFcn,57,https://root.cern,https://github.com/root-project/root/issues/8697,1,['test'],['testRooGradMinimizerFcn']
Testability,CompareBinLabels(RAxisLabels(changed_one_label)); 77: Which is: 1; 77: To be equal to: RAxisLabels::kLabelsCmpSubset | RAxisLabels::kLabelsCmpSuperset; 77: Which is: 3; 77: Google Test trace:; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(531): Labeled axis w/o title; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(484): error: Expected: caxis.CompareBinLabels(RAxisLabels(swapped_labels)); 77: Which is: 4; 77: To be equal to: RAxisLabels::kLabelsCmpSuperset | RAxisLabels::kLabelsCmpDisordered; 77: Which is: 6; 77: Google Test trace:; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(531): Labeled axis w/o title; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(469): error: Expected: caxis.CompareBinLabels(RAxisLabels(one_extra_label)); 77: Which is: 0; 77: To be equal to: RAxisLabels::kLabelsCmpSuperset; 77: Which is: 2; 77: Google Test trace:; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(537): Labeled axis with title; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(477): error: Expected: caxis.CompareBinLabels(RAxisLabels(changed_one_label)); 77: Which is: 1; 77: To be equal to: RAxisLabels::kLabelsCmpSubset | RAxisLabels::kLabelsCmpSuperset; 77: Which is: 3; 77: Google Test trace:; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(537): Labeled axis with title; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(484): error: Expected: caxis.CompareBinLabels(RAxisLabels(swapped_labels)); 77: Which is: 4; 77: To be equal to: RAxisLabels::kLabelsCmpSuperset | RAxisLabels::kLabelsCmpDisordered; 77: Which is: 6; 77: Google Test trace:; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(537): Labeled axis with title; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(469): error: Expected: caxis.CompareBinLabels(RAxisLabels(one_extra_label)); 77: Which is: 0; 77: To be equal to: RAxisLabels::kLabelsCmpSuperset; 77: Which is: 2; 77: Google Test trace:; 77: C:\Users\belleno,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5054:7003,test,test,7003,https://root.cern,https://github.com/root-project/root/pull/5054,1,['test'],['test']
Testability,"Compared to `GetAtSlotUnchecked`, `GetAtSlotRaw` trades some more; safety for some more performance: not only it avoids checking for; slot initialization (as `GetAtSlotUnchecked` does) but it also avoids; (copy-)construction of a `shared_ptr`. I can add a test, just tell me where :)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/934:256,test,test,256,https://root.cern,https://github.com/root-project/root/pull/934,1,['test'],['test']
Testability,Compilation of `dataframe/test/datasource_arrow.cxx` fails on standard linux distribution,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13516:26,test,test,26,https://root.cern,https://github.com/root-project/root/issues/13516,1,['test'],['test']
Testability,Compilers (at least clang) configure this internally; at least with the current efforts on compiler and CMake sides to put this into action our build system should keep away from interfering with this configuration. Oh and it also does not work with macOS and builtin_glew. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12746:339,test,tested,339,https://root.cern,https://github.com/root-project/root/pull/12746,1,['test'],['tested']
Testability,"Completes the support for fields with multiple column representations. For the moment, only the unit tests can change the column representation between clusters on writing. Eventually, we may add a proper interface. Merging will also lead to this situation. In all cases but the nullable field, we can exploit the fact that the number of columns of multiple representations is the same and the corresponding columns have the same number of elements and cluster boundaries. Therefore, when reading we team up the corresponding columns of multiple representations. When we map another page, the column teams can then figure out amongst each other the column that is not suppressed for the given page / element index and forward the call. Follow-up of #16054",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16143:101,test,tests,101,https://root.cern,https://github.com/root-project/root/pull/16143,1,['test'],['tests']
Testability,Comply with TVirtualMCStack::PopNextTrack logic,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6080:42,log,logic,42,https://root.cern,https://github.com/root-project/root/pull/6080,1,['log'],['logic']
Testability,"Configure with `cmake -DBUILD_SHARED_LIBS=OFF -Dminimal=ON -Dshared=OFF ...`. Note that the changes here are not meant to be merged, this is only for testing.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5921:150,test,testing,150,https://root.cern,https://github.com/root-project/root/pull/5921,1,['test'],['testing']
Testability,"Consider the following code; ```python; from dask.distributed import LocalCluster, Client; import ROOT; RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. def create_connection():; cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=False); client = Client(cluster); return client. if __name__ == ""__main__"":; connection = create_connection(); df = RDataFrame(100, daskclient=connection); df = df.Define(""x"", ""1"").Define(""y"", ""ROOT::RVecF{1., 2., 3.}""); g = df.Graph(""x"", ""y""); gv = g.GetValue(); ```. Before this PR, the output would be:; ```; $: python test.py; RDataFrame::Run: event loop was interrupted; Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor; 	which can be called without argument, objects of this class; 	can not be read with the current library. You will need to; 	add a default constructor before attempting to read it.; Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved; Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved; Error in <TClass::New>: cannot create object of class runtime_error; Error in <TBufferFile::ReadObject>: could not create object of class runtime_error; *** Break *** bus error; ```. After this PR:; ```; $: python test.py; [...]; File ""/home/vpadulan/programs/rootproject/rootbuild/fix-tentrylist-int-overflow-distrdf-debug/lib/DistRDF/Backends/Dask/Backend.py"", line 155, in dask_mapper; return mapper(current_range); File ""/home/vpadulan/programs/rootproject/rootbuild/fix-tentrylist-int-overflow-distrdf-debug/lib/DistRDF/Backends/Base.py"", line 116, in distrdf_mapper; raise RuntimeError(f""C++ exception thrown:\n\t{type(e).__name__}: {e.what()}""); RuntimeError: C++ exception thrown:; 	runtime_error: Graph was applied to a mix of scalar values and collections. This is not supported.; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11047:584,test,test,584,https://root.cern,https://github.com/root-project/root/pull/11047,2,['test'],['test']
Testability,"Consider the following test case:. test.c; ```cpp; #include ""TInterpreter.h""; #include ""TClass.h""; #include ""TMethod.h""; #include ""TROOT.h""; #include <iostream>. struct Dummy {; double x;; };. struct Dummy2{; };. template<typename... Args, typename Extra = Dummy2>; double sumT(Args... args) {; return (args.x + ...);; }. int test() {; auto meth_explicit = gROOT->GetGlobalFunctionWithPrototype(""sumT"", ""Dummy, Dummy, Dummy"");; TMethodCall call_explicit(meth_explicit);. double res;; const Dummy arg{5.};; const void *args[3] = {&arg, &arg, &arg};; call_explicit.Execute(nullptr, args, 3, &res);; std::cout << ""res = "" << res << std::endl;. return 0;; }; ```. The attempted call fails, because the ""extra"" template argument is explicitly appended to the list of template arguments when the call wrapper is compiled. (This issue prevents templated functions with this feature being called from PyROOT). ```; In file included from input_line_8:1:; /home/b/bendavid/pyrootdebug7/test.c:16:16: error: no member named 'x' in 'Dummy2'; return (args.x + ...);; ~~~~ ^; input_line_10:8:17: note: in instantiation of function template specialization 'sumT<Dummy, Dummy, Dummy, Dummy2, Dummy2>' requested here; Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],; ^; Error in <TClingCallFunc::make_wrapper>: Failed to compile; ==== SOURCE BEGIN ====; #pragma clang diagnostic push; #pragma clang diagnostic ignored ""-Wformat-security""; __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))); extern ""C"" void __cf_0(void* obj, int nargs, void** args, void* ret); {; if (ret) {; new (ret) (double) (((double (&)(Dummy, Dummy,; Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],; *(Dummy*)args[2]));; return;; }; else {; (void)(((double (&)(Dummy, Dummy,; Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],; *(Dummy*)args[2]));; return;; }; }; #pragma clang diagnostic pop; ==== SOURCE END ====; Error in <TClingCal",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12549:23,test,test,23,https://root.cern,https://github.com/root-project/root/issues/12549,4,['test'],['test']
Testability,"Consolidate RBDT as specified in the ROOT plan of work 2024. The backends of RBDT are replaced with a single new backend:; the logic from the FastForest library:; https://github.com/guitargeek/XGBoost-FastForest. The logic in that library was originally taken from the GBRForest in; CMSSW:; https://github.com/cms-sw/cmssw/blob/master/CommonTools/MVAUtils/interface/GBRForestTools.h. The interface remains the same, only that the template parameter; specifying the backend is gone. This change adds support for unbalanced trees. To see the fixed logic, as one run a modified version of the `tmva101_Training.py` tutorial (remember to run `tutorials/tmva/tmva100_DataPreparation.py` first):; ```python; import ROOT; import numpy as np. from tmva100_DataPreparation import variables. def load_data(signal_filename, background_filename):; # Read data from ROOT files; data_sig = ROOT.RDataFrame(""Events"", signal_filename).AsNumpy(); data_bkg = ROOT.RDataFrame(""Events"", background_filename).AsNumpy(). # Convert inputs to format readable by machine learning tools; x_sig = np.vstack([data_sig[var] for var in variables]).T; x_bkg = np.vstack([data_bkg[var] for var in variables]).T; x = np.vstack([x_sig, x_bkg]). # Create labels; num_sig = x_sig.shape[0]; num_bkg = x_bkg.shape[0]; y = np.hstack([np.ones(num_sig), np.zeros(num_bkg)]). # Compute weights balancing both classes; num_all = num_sig + num_bkg; w = np.hstack([np.ones(num_sig) * num_all / num_sig, np.ones(num_bkg) * num_all / num_bkg]). return x, y, w. # Load data; x, y, w = load_data(""train_signal.root"", ""train_background.root""). # Fit xgboost model; from xgboost import XGBClassifier; xbdt = XGBClassifier(max_depth=3, n_estimators=500); xbdt.fit(x, y, sample_weight=w). # Save model in TMVA format; ROOT.TMVA.Experimental.SaveXGBoost(xbdt, ""myBDT"", ""tmva101.root"", num_inputs=x.shape[1]). # Load data; x, y_true, w = load_data(""test_signal.root"", ""test_background.root""). # Load trained model; File = ""tmva101.root"". bdt = ROOT.TMVA.Ex",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15173:127,log,logic,127,https://root.cern,https://github.com/root-project/root/pull/15173,3,['log'],['logic']
Testability,Constant operator implemented along with the onnx model and test; ReduceSum was also added in the `tmva/sofie_parsers/src/ParseReduce.cxx`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15811:60,test,test,60,https://root.cern,https://github.com/root-project/root/pull/15811,1,['test'],['test']
Testability,"Continuation of #9260, closes #9253. Successfully compiles and launches with both musl and glibc, however the affected features were **not** specifically tested so please make sure to review carefully. With musl, compilation only succeeds without builtin XRootD and TBB and without SSL support - the former need to be fixed in the respective projects, the latter would probably require a little more effort as the `ruserok` function used by `net/rpdutils/src/rpdutils.cxx` is not available in musl - this implies `-Dxrootd=OFF -Dimt=OFF -Dssl=OFF` `cmake` options.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9288:154,test,tested,154,https://root.cern,https://github.com/root-project/root/pull/9288,1,['test'],['tested']
Testability,"Convert the backslashes into forward slashes in the include path for rootcling on Windows. This fixes the following errors:; input_line_12(12,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]; ""C:\Users\bellenot\libs\GSL\2.5\include"",; ^~; input_line_12(13,4): error G954FC62D: \U used with no following hex digits [C:\Users\bellenot\build\release\onepcm.vcxproj]; ""C:\Users\bellenot\libs\libxml2\2.7.8\include"",; ^~; CUSTOMBUILD : error : .\bin\rootcling: compilation failure (./allDictd5c5124b81_dictContent.h) [C:\Users\bellenot\build\release\onepcm.vcxproj]. And (when using ACLiC):; Info in <TWinNTSystem::ACLiC>: creating shared library C:/Users/bellenot/build/debug/core/dictgen/test/myextramacro_C.dll; input_line_12:7:4: error: \U used with no following hex digits; ""C:\Users\bellenot\build\debug\include"",; ^~; Error in <ACLiC>: Dictionary generation failed!",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4381:743,test,test,743,https://root.cern,https://github.com/root-project/root/pull/4381,1,['test'],['test']
Testability,"Converttonotebook tests, ratioplot notebooks",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/233:18,test,tests,18,https://root.cern,https://github.com/root-project/root/pull/233,1,['test'],['tests']
Testability,"Copy of subdirectories with configure_file is not working correctly,; therefore use file(COPY ...) signature cmake command. Test that batch mode works on mac, no need for special ozone (headless) builds",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6282:124,Test,Test,124,https://root.cern,https://github.com/root-project/root/pull/6282,1,['Test'],['Test']
Testability,Correct broken assert statements,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5159:15,assert,assert,15,https://root.cern,https://github.com/root-project/root/pull/5159,1,['assert'],['assert']
Testability,Correctly write number of bins; Add testing,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13979:36,test,testing,36,https://root.cern,https://github.com/root-project/root/pull/13979,1,['test'],['testing']
Testability,"Corresponding tests have not been backported, let me know if you want them too.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5274:14,test,tests,14,https://root.cern,https://github.com/root-project/root/pull/5274,2,['test'],['tests']
Testability,Covery fixes in TBufferMerger test and add missing include in TMVA,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2720:30,test,test,30,https://root.cern,https://github.com/root-project/root/pull/2720,1,['test'],['test']
Testability,Create a log in and sign up option for users,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16646:9,log,log,9,https://root.cern,https://github.com/root-project/root/issues/16646,1,['log'],['log']
Testability,"Create a new type of merging, a special case when the histogram has an axis with label and the other axis is numeric and different but compatible. . A new test is added also in stressHIstogram for this new case. This fixes #10828",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11045:155,test,test,155,https://root.cern,https://github.com/root-project/root/pull/11045,1,['test'],['test']
Testability,"Create a struct holding the flag, `HANDLE`, and `WIN32_FIND_DATA` used by `OpenDirectory`, `GetDirEntry`, and `FreeDirectory`, so each thread creates its own instance of it. This fixes randome failures in mutithreaded applications on Windows, like for example in the `R__USE_IMT` part of the `datasource-root` test:; ```; [ RUN ] TRootTDS.DefineSlotMT; Error in <TFile::TFile>: file C:/root-dev/build/x64/debug/tree/dataframe/test/G__NTupleStruct.vcx does not exist; [ OK ] TRootTDS.DefineSlotMT (191 ms); [ RUN ] TRootTDS.FromARDFMT; Error in <TFile::Init>: C:/root-dev/build/x64/debug/tree/dataframe/test/INSTALL.vcxproj not a ROOT file; C:\root-dev\git\master\tree\dataframe\test\datasource_root.cxx(175): error: Expected equality of these values:; 29.; Which is: 29; *max; Which is: 23; [ FAILED ] TRootTDS.FromARDFMT (6 ms); ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13472:310,test,test,310,https://root.cern,https://github.com/root-project/root/pull/13472,4,['test'],['test']
Testability,"CreatePrimitives.cxx:276; 2: Loop condition is false. Execution continues on line 290 in /opt/root_src/graf2d/gpad/src/TCreatePrimitives.cxx:284; 3: Control jumps to 'case kButton1Up:' at line 327 in /opt/root_src/graf2d/gpad/src/TCreatePrimitives.cxx:290; 4: Assuming 'xup' is > 'xlow' in /opt/root_src/graf2d/gpad/src/TCreatePrimitives.cxx:336; 5: Left side of '||' is false in /opt/root_src/graf2d/gpad/src/TCreatePrimitives.cxx:336; 6: Assuming 'yup' is > 'ylow' in /opt/root_src/graf2d/gpad/src/TCreatePrimitives.cxx:336; 7: Taking false branch in /opt/root_src/graf2d/gpad/src/TCreatePrimitives.cxx:336; 8: Calling 'TObject::IsZombie' in /opt/root_src/graf2d/gpad/src/TCreatePrimitives.cxx:338; 9: Calling 'TObject::TestBit' in /opt/root_src/core/base/inc/TObject.h:149; 10: Assuming the condition is false in /opt/root_src/core/base/inc/TObject.h:187; 11: Returning zero, which participates in a condition later in /opt/root_src/core/base/inc/TObject.h:187; 12: Returning from 'TObject::TestBit' in /opt/root_src/core/base/inc/TObject.h:149; 13: Returning zero, which participates in a condition later in /opt/root_src/core/base/inc/TObject.h:149; 14: Returning from 'TObject::IsZombie' in /opt/root_src/graf2d/gpad/src/TCreatePrimitives.cxx:338; 15: Taking false branch in /opt/root_src/graf2d/gpad/src/TCreatePrimitives.cxx:338; 16: Assuming 'canvas' is null in /opt/root_src/graf2d/gpad/src/TCreatePrimitives.cxx:342; 17: Taking false branch in /opt/root_src/graf2d/gpad/src/TCreatePrimitives.cxx:342; 18: Called C++ object pointer is null in /opt/root_src/graf2d/gpad/src/TCreatePrimitives.cxx:343; /opt/root_src/graf2d/gpad/src/TGroupButton.cxx:156:7: warning: Maybe you meant to call TButton::ExecuteEvent() instead [clazy-skipped-base-method]; /opt/root_src/graf2d/gpad/src/TGroupButton.cxx:254:13: warning: Value stored to 'obj' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'obj' during its initialization is never read in /opt/root_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7432:52676,Test,TestBit,52676,https://root.cern,https://github.com/root-project/root/issues/7432,1,['Test'],['TestBit']
Testability,"Created a new class in _function_utils to obtain function signature and jit the function. This will be further reused for Defines, which can may make _numbadeclare more modular. # This Pull request:. ## Changes or fixes:; 1. Added Filter pythonizations to RDF.; Filter now directly works with python functions.; 2. Resolved comments: 1,2 on repeated imports.; 3. Resolved comment: 3 on lazy imports; 4. Resolved comment: 4 on comments.; 5. Resolved comment: 5 on using a single pythonizer.; 6. Resolving comment: 7 on using multiple commits. Future commits will include test cases, Defines, and Tutorial changes.; 7. Resolved comment: 8 added docs for internal functions.; 8. Resolving comment: 9 on Pydefine. NOt implemented in this branch.; 9. The remaining comments are on the organisation of the test cases and tutorials which will be done in the different branches and will be addressed there. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10896:570,test,test,570,https://root.cern,https://github.com/root-project/root/pull/10896,3,['test'],"['test', 'tested']"
Testability,Creating symlinks of headers in build directory instead of copies. This allows better navigation from compile output logs in IDEs and better editing of headers. So far I do not know if there are any side effects.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6010:117,log,logs,117,https://root.cern,https://github.com/root-project/root/pull/6010,1,['log'],['logs']
Testability,"Current behavior:. ```; root [0] TFile f(""root://eospublic.cern.ch//eos/root-eos/benchmark/Run2012B_SingleMu.root""); Error in <TFile::TFile>: file /eos/root-eos/benchmark/Run2012B_SingleMu.root does not exist; (TFile &) Name: /eos/root-eos/benchmark/Run2012B_SingleMu.root Title:; ```. Desirable behavior:. ```; root [0] TFile f(""root://eospublic.cern.ch//eos/root-eos/benchmark/Run2012B_SingleMu.root""); Error in <TFile::TFile>: please use TFile::Open to access remote files:; auto f = std::unique_ptr<TFile>{TFile::Open(""root://eospublic.cern.ch//eos/root-eos/benchmark/Run2012B_SingleMu.root"")} ; (TFile &) Name: /eos/root-eos/benchmark/Run2012B_SingleMu.root Title:; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10039:81,benchmark,benchmark,81,https://root.cern,https://github.com/root-project/root/issues/10039,6,['benchmark'],['benchmark']
Testability,Current histfactory is optional (it requires xml is to enable/available) but the test depending on it are run nonetheless. So with; ```; $ grep xml CMakeCache.txt ; ...; //Enable support for XML (requires libxml2); xml:BOOL=OFF; ...; ```; In particular tutorial-roostats-CreateExampleFile is ran but fails:; ```; Output:; ----------------------------------------------------------. Processing /home/pcanal/root_working/code/root/tutorials/roostats/CreateExampleFile.C...; sh: 1: prepareHistFactory: not found; sh: 1: hist2workspace: not found; <end of output>; ```; The following tutorial then fails; ```; 702:tutorial-roostats-OneSidedFrequentistUpperLimitWithBands; 703:tutorial-roostats-StandardBayesianMCMCDemo; 704:tutorial-roostats-StandardBayesianNumericalDemo; 705:tutorial-roostats-StandardFeldmanCousinsDemo; 706:tutorial-roostats-StandardFrequentistDiscovery; 707:tutorial-roostats-StandardHistFactoryPlotsWithCategories; 708:tutorial-roostats-StandardHypoTestDemo; 709:tutorial-roostats-StandardHypoTestInvDemo; 710:tutorial-roostats-StandardProfileInspectorDemo; 711:tutorial-roostats-StandardProfileLikelihoodDemo; 712:tutorial-roostats-StandardTestStatDistributionDemo; 713:tutorial-roostats-TwoSidedFrequentistUpperLimitWithBands; ```; most (if not all) due to the missing root file.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6911:81,test,test,81,https://root.cern,https://github.com/root-project/root/issues/6911,1,['test'],['test']
Testability,"Current state:; - the normalized name continues to remove `std::`; - it injects using declarations for the ""most common"" stdlib identifiers; - this PR adds `std::` where ""needed"", to the normalized name, to make identifiers ""compilable"" (in dictionary source). The last point requires to have an authoritative list of ""things in the std namespace"", to prepend `std::` to them. This does not scale - any stdlib implementation might have any non-public identifier that might be needed also for public types, e.g. some libstdc++ have `std::thread::id` as type alias to `std::__thread_id`. Alternatively, this PR could implement a ""if lookup fails, try again with prepending `std::`"". This is an issue for types such as `foo<bar, baz<boo,boz>>` where either any type must be tested for std-ization separately or all possible permutations (`std::foo<bar, baz<boo,boz>>`, `foo<std::bar, baz<boo,boz>>`,`std::foo<std::bar, baz<boo,boz>>`...) must be tried.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11027:771,test,tested,771,https://root.cern,https://github.com/root-project/root/pull/11027,1,['test'],['tested']
Testability,"Currently RColumnDescriptorIterable's ctor wants a RFieldDescriptor even though it only uses the field's id internally. One of the overloads of GetColumnIterable accepts a fieldId but it is forced to retrieve back the field descriptor before constructing an Iterable object, only for the object itself to extract back the id, wasting work. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16096:361,test,tested,361,https://root.cern,https://github.com/root-project/root/pull/16096,1,['test'],['tested']
Testability,"Currently RDF reads all column values via a single RColumnValue type,; which knows how to deal with TTreeReaderValues, TTreeReaderArrays,; datasource columns and defined columns. Not only that's too many hats; for a single type, but this design requires some runtime logical branching; to decide which path to take that can be simplified.; Finally and most importantly, going forward we want smarter integration; with RDataSource, and we will require RDataSource-specialized column readers.; In order to allow this latter use-case and simplify some logical; branching, instead of a single RColumnValue type we add specialized; column reader types. RDefineReader reads values of Defined columns, RTreeColumnReader reads values; via TTreeReaderValues or TTreeReaderArrays depending on the class specialization,; and RDSColumnReader reads values from a datasource.; A given computation graph will only make use of one between; RTreeColumnReader and RDSColumnReader. The new column readers bring two main advantages:; - logical branching has been reduced (for now, at the cost of introducing a; virtual call); - the new design makes it simpler to insert datasource-specific column; readers",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6170:267,log,logical,267,https://root.cern,https://github.com/root-project/root/pull/6170,3,['log'],['logical']
Testability,"Currently hadd is only checking the compression levels to determine whether fast merging should be used or not. This is wrong, as it will incorrectly skip compression change when a file is changed from e.g. 101 to 201. With this commit, hadd (actually, TFileMerger) will check for equality of compression settings instead. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #11245",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16082:344,test,tested,344,https://root.cern,https://github.com/root-project/root/pull/16082,1,['test'],['tested']
Testability,"Currently http/webgui/eve7 tutorials are vetoed because of many reasons; But main reason - such tutorials designed so that `THttpServer` should runs forever ; that user can test them in the web browsers. This can be changed.; All tutorials used in ROOT testing started with arguments `root -b -l -q tutorial_name.C`; In tutorials itself one could detect that using something like:; ```; bool test_mode = gApplication->Argn() > 3 &&; !strcmp(gApplication->Argv(1),""-b"") && ; !strcmp(gApplication->Argv(2),""-l"") && ; !strcmp(gApplication->Argv(3),""-q"");; ```; Especially `-q` argument is clear sign that macro should not be running forever. Alternatively, one can set special environment variable and test it inside tutorials with:; ```; bool test_mode = gSystem->Getenv(""ROOT_TESTING"") != nullptr;; ```; But this requires that ROOT_TESTING environment variable should be set before. In any case - if such `test_mode` detected, macro should behaves differently:; 1. Do not start real http server while it most probably will conflict with other tutorials running in parallel.; 2. Run macro for only limited number of loops for ~3 seconds.; 3. Check production of png images - for most of these tutorials `THttpServer` or `RCanvas` or `REve` can generate image",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6651:173,test,test,173,https://root.cern,https://github.com/root-project/root/issues/6651,3,['test'],"['test', 'testing']"
Testability,"Currently if we compile this test we get ld warning messages like this:. ```; ld: direct access in function ... to global weak symbol. This was likely; caused by different translation units being compiled with different; visibility settings.; ```. This seems to be caused by the fact that visibility=hidden is spreading; from the parent directory to the test directory, even though it should; only land in the src/ directory. As CMAKE_CXX_FLAGS is working on a; per subdirectory basis, we just move the code for handling the source; code to the src/ folder, which should contain the visibility=hidden.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/644:29,test,test,29,https://root.cern,https://github.com/root-project/root/pull/644,2,['test'],['test']
Testability,Currently is not backward-compatible (will fail if we read an old RNTuple version with a newer one which adds new members from version 4). Was unnoticed so far because RTFNTuple v4 and v6 (current) happen to have the same size. ## Checklist:. - [x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15975:249,test,tested,249,https://root.cern,https://github.com/root-project/root/pull/15975,1,['test'],['tested']
Testability,Currently it displays like this:. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [] tested changes locally; - [] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8433:98,test,tested,98,https://root.cern,https://github.com/root-project/root/pull/8433,1,['test'],['tested']
Testability,"Currently we are using ROOT 6.22 for CMS offline SW (CMSSW). It works great on all our supported archs e.g. **amd64, ppc64le, aarch64, slc7/cc8** using **gcc 9.3 10.3, 11.2**. Now we are trying to move to ROOT 6.24 for CMS Offline Software ( CMSSW) but for . **OS: slc7; Compiler: GCC 9.3; ARCH: ppc64le**. when we try to load CMSSW dictionaries then pyROOT fails with error [see full log](https://cmssdt.cern.ch/SDT/cgi-bin/buildlogs/slc7_ppc64le_gcc9/CMSSW_12_2_ROOT624_X_2021-11-14-2300/DataFormats/Math); ```; #8 <signal handler called>; #9 0x000010081a5b0038 in ?? (); #10 0x00001000026e2df4 in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const () from /scratch/cmsbuild/jenkins_b/workspace/build-any-ib/w/tmp/BUILDROOT/6b889b481d3981a81f0cdda02720a661/opt/cmssw/slc7_ppc64le_gcc9/cms/cmssw/CMSSW_12_2_ROOT624_X_2021-11-14-2300/external/slc7_ppc64le_gcc9/lib/libCling.so; #11 0x000001000c853a50 in ?? (); ```. In order to debug this issue when I tried to build root in debug mode `-DCMAKE_BUILD_TYPE=Debug -DLLVM_BUILD_TYPE=Debug` then root failed to build with error [see full log](https://cmssdt.cern.ch/SDT/jenkins-artifacts/build-any-ib/CMSSW_12_2_ROOT624_X_2021-11-15-1100/slc7_ppc64le_gcc9/118878/lcg/root/6.24.07-e593e28202aa32887e370aba99847071/log); ```; root.exe: /scratch/cmsbuild/jenkins_a/workspace/build-any-ib/w/BUILD/slc7_ppc64le_gcc9/lcg/root/6.24.07-e593e28202aa32887e370aba99847071/root-6.24.07/interpreter/cling/lib/Interpreter/IncrementalExecutor.cpp:81: std::unique_ptr<llvm::TargetMachine> cling::{anonymous}::CreateHostTargetMachine(const clang::CompilerInstance&): Assertion `TM->getCodeModel() >= CodeModel::Large' failed.; ```. Any idea what could be wrong here ?",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9297:385,log,log,385,https://root.cern,https://github.com/root-project/root/issues/9297,4,"['Assert', 'log']","['Assertion', 'log']"
Testability,"Currently when installed with `-Dgnuinstall=ON` ROOT ends up exporting relative paths from the `${CMAKE_INSTALL_CMAKEDIR}` to the relevant binary, include and library directories. This can be a problem, especially when these paths may be evaluated from a different system folder assumed by CMake (e.g. when `CMAKE_INTSTALL_CMAKEDIR` is not the same for ROOT and CMake) as well as in other cases, when relative paths are not appropriate. Thus, it is safer in the general case to have these relative paths resolved to absolute system paths immediately before being passed to a caller. This merge request tries to accomplish just that with complete transparency and zero side-effects. It has been tested and deployed in Arch Linux x86_64, CMake 3.16.4, GCC 9.2.1:; - resulting relevant CMake config:; ```cmake; #----------------------------------------------------------------------------; # Configure the path to the ROOT headers, using a relative path if possible.; # This is only known at CMake time, so we expand a CMake supplied variable.; #. # ROOT configured for the install with relative paths, so use these; get_filename_component(_ROOT_INCLUDE_DIRS ""${_thisdir}/../../../include"" REALPATH). # resolve relative paths to absolute system paths; get_filename_component(ROOT_INCLUDE_DIRS ""${_ROOT_INCLUDE_DIRS}"" REALPATH). # ROOT configured for the install with relative paths, so use these; get_filename_component(_ROOT_LIBRARY_DIR ""${_thisdir}/../../root"" REALPATH). # resolve relative paths to absolute system paths; get_filename_component(ROOT_LIBRARY_DIR ""${_ROOT_LIBRARY_DIR}"" REALPATH). # ROOT configured for the install with relative paths, so use these; get_filename_component(_ROOT_BINDIR ""${_thisdir}/../../../bin"" REALPATH). # resolve relative paths to absolute system paths; get_filename_component(ROOT_BINDIR ""${_ROOT_BINDIR}"" REALPATH). # Deprecated value, please don't use it and use ROOT_BINDIR instead.; get_filename_component(ROOT_BINARY_DIR ""${ROOT_BINDIR}"" REALPATH); ```; - CMa",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5084:694,test,tested,694,https://root.cern,https://github.com/root-project/root/pull/5084,1,['test'],['tested']
Testability,"Currently, 36 tests are failing for runtime modules:; https://epsft-jenkins.cern.ch/view/ROOT/job/root-nightly-runtime-cxxmodules/; We want to make these test pass so that we can say that the runtime modules is; finally working. This patch enables ROOT to preload all modules at startup time. In my; environment, this patch fixes 14 tests for runtime cxxmodules. Preloading all the modules has several advantages. 1. We do not have to; rely on rootmap files which don't support some features (namespaces and; templates) 2. Lookup would be faster because we don't have to do; trampoline via rootmap files. The only disadvantage of preloading all the modules is the startup time performance.; `root.exe -q -l memory.C`; This is a release build without modules:; ```; cpu time = 0.091694 seconds; sys time = 0.026187 seconds; res memory = 133.008 Mbytes; vir memory = 217.742 Mbytes; ```; This is a release build with modules, with this patch:; ```; cpu time = 0.234134 seconds; sys time = 0.066774 seconds; res memory = 275.301 Mbytes; vir memory = 491.832 Mbytes; ```; As you can see, preloading all the modules makes both time and memory 2; to 3 times worse **at a startup time**. **Edit** : With hsimple.C; `root.exe -l -b tutorials/hsimple.C -q ~/CERN/ROOT/memory.C`; Release build without modules:; ```; Processing tutorials/hsimple.C... ; hsimple : Real Time = 0.04 seconds Cpu Time = 0.05 seconds ; (TFile *) 0x555ae2a9d560 ; Processing /home/yuka/CERN/ROOT/memory.C... ; cpu time = 0.173591 seconds ; sys time = 0.011835 seconds ; res memory = 135.32 Mbytes ; vir memory = 209.664 Mbytes ; ```; Release build with modules, with this patch:; ```; Processing tutorials/hsimple.C...; hsimple : Real Time = 0.04 seconds Cpu Time = 0.04 seconds; (TFile *) 0x55d1b036d230; Processing /home/yuka/CERN/ROOT/memory.C...; cpu time = 0.290742 seconds; sys time = 0.043851 seconds; res memory = 256.844 Mbytes; vir memory = 438.484 Mbytes; ```. However, it is a matter of course that we get slower startup t",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1814:14,test,tests,14,https://root.cern,https://github.com/root-project/root/pull/1814,3,['test'],"['test', 'tests']"
Testability,"Currently, `gSystem->GetHomeDirectory()` will prefer to use the value from `etc/passwd` on Linux systems. In the Snap packaging, this causes issues due to the sandboxing permissions and is currently worked around by using LD_PRELOAD to hijack `getpwuid()` and force it to respect $HOME. From what I see, every other instance in the ROOT repository already prefers the $HOME variable, apart from this one instance here. I wouldn't expect most users to notice this patch, but I would expect users who might have a need to change this value to assume simply changing $HOME is sufficient and expect this behaviour, which can be done without any real complexities; rather than changing /etc/passwd which is a much more involved task and relies upon legacy knowledge of Unix systems.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7083:159,sandbox,sandboxing,159,https://root.cern,https://github.com/root-project/root/pull/7083,1,['sandbox'],['sandboxing']
Testability,"Currently, if ::Name() interface is called we pretty print the Decl name. This is suboptimal because it causes many memory allocations for something which is essentially immutable. This PR introduces step-by-step working cache if ::Name() was called. It reduces the temporary memory allocations by 12 Mb in standard ROOT and 130Mb in -Druntime_cxxmodules=On cache. The benchmarking test was provided by @pcanal in #3012. It is important to reduce the temporary allocations because they can contribute to increasing of the peak memory usage of ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3616:369,benchmark,benchmarking,369,https://root.cern,https://github.com/root-project/root/pull/3616,2,"['benchmark', 'test']","['benchmarking', 'test']"
Testability,"Currently, jitted actions spawn into existence right before the event; loop (at jitting time). This makes it impossible or unnecessarily complex to:; 1) let RResultPtrs own actions; 2) let actions own their previous node; 3) detect that an action has been booked before the event loop has run. Points 1 and 2 are required by ROOT-9416.; Point 3 is required by several graph-traversing features, e.g. ROOT-9458. The solution is to align the jitted action logic with jitted filters and; defines, and use a placeholder RJittedAction object that sits into the; computation graph and forwards all relevant calls to the concrete, jitted; action which will be created at a later time. RResultPtr logic is also greatly simplified since its action pointer can now always be set at construction time and is always guaranteed to be valid (it points to the RJittedAction owned by the RLoopManager).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2398:454,log,logic,454,https://root.cern,https://github.com/root-project/root/pull/2398,2,['log'],['logic']
Testability,"Currently, with the new CI, warnings are only visible in the diff or action view. We don't want `-Werror` as that would prevent tests from being run. Maybe add a new action that fails if there is a problem matcher match?",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12505:128,test,tests,128,https://root.cern,https://github.com/root-project/root/issues/12505,1,['test'],['tests']
Testability,"Curve::shiftCurveToZero()`; cf98956266 [RF] Add exceptions to setter methods for non-existing objects; 1cc5ec46c8 [RF] Forbid resetting RooFormula; b483747192 [RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`; b537cbb93d [RF] Add the CHEP'23 AD results as a RooFit test; 40ab6a4d89 [RF] Fix code generation issues with RooAdd* classes; 3dcea7036a [RF] Support simultaneous fits in NLL code generation; a470a3d85e [RF] Remove internal `RooFormula` from public RooFit interface; 3d01cd2e8f [RF] Remove deprecated RooAbsString; 059af6d55a [RF] Remove RooAbsRootFinder; bdc19e090e [RF] Get rid of RooScaledFunc; 88dbb6ad17 [RF] Make RooGenProdProj private; 94ee158ddc [RF] Remove deprecated RooCatType; d46e5fc087 [RF] Remove some unused class rules in roofitcore LinkDef.h; f78558eb0a [RF] Mark template specialization as inline; ca29ccf161 [RF] Some cleanup of public `roofitcore` classes; 9357c9842a [RF] Unify RooAbsSelfCachedPdf and RooAbsSelfCachedReal code; 2e2309327e [RF] Fix ambiguity errors in `CodeSquashContext::buildArg()` overloads; 05e993cf92 [RF] Avoid code duplication in `testRooFuncWrapper`; 47a5c001ea [RF] Add AD support for Roo[RealSumPdf, RealSumFunc, ConstraintSum].; 13479ab9cd [RF] Remove the old BatchMode code path inside RooNLLVar; 16497ee8c4 [RF] Add code generation support for RooLandau and RooGamma; f3d9863ef8 [RF] Use RooWorkspace in `testRooFuncWrapper`; b5e7f383ac [RF] Use variable names based on `RooAbsArg` names in code generation; 4f7c3b0a6c [RF] Add AD support for RooChebychev and RooAddPdf.; 6438fdb78a [RF] Format RooPolyVar.(h/cxx) and RooPolynomial.(h/cxx) files.; 75d5e3d4b7 [RF] Add code-squash support for RooPolyVar and RooPolynomial.; e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions; 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code; 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing; 7a12837f66 [RF] Split up CodeSquashContext in `.h",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12971:2631,test,testRooFuncWrapper,2631,https://root.cern,https://github.com/root-project/root/pull/12971,3,['test'],['testRooFuncWrapper']
Testability,"Custom ranges seemed to be supported for analytical integration in; RooNDKeysPdf, but the code was not activated. Numerical integration was; always used for custom ranges. Unfortunately, using the existing code for analytical integration with; custom ranges gives the wrong result. This commit suggests how this can; be done with new and simpler code that has a logic similar to; RooNDKeysPdf::evaluate() to get the correct result. This is a draft PR for now. I still need to study the problem a bit more, because when you have many data points for the KDE the new analytical integration gives a result different from numerical integration at the percent level. I need to figure out if this is a mistake in the analytical integration, or if the numerical integration is unstable.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8019:362,log,logic,362,https://root.cern,https://github.com/root-project/root/pull/8019,1,['log'],['logic']
Testability,"D. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details.; 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars; fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet; 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar; bf4990c5d4 [RF] Exclude RooHistError from IO; 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface; f355c3ced4 [RF] Code-format `testRooDataHist.cxx`; 3fd99f7679 [RF] Enable AD code-gen test for RooFit.; a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext; 1367091202 [RF] Code modernization of RooAbsReal; 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper.; cf88615b6e [RF] Improve code in `MinuitFcnGrad`; 17bac5528b [RF] Code improvements in tests for new TestStatistics; afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations; 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method; 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252); 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`; 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'.; 5964158260 [RF] Add observables as another parameter in RooFuncWrapper.; cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`; 333e857cc6 Add AD based derivatives for RooFuncWrapper.; 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C.; 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit.; f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`; cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&; 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8; a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenF",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13295:8794,test,tests,8794,https://root.cern,https://github.com/root-project/root/pull/13295,2,"['Test', 'test']","['TestStatistics', 'tests']"
Testability,"D. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details.; 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars; fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet; 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar; bf4990c5d4 [RF] Exclude RooHistError from IO; 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface; f355c3ced4 [RF] Code-format `testRooDataHist.cxx`; 3fd99f7679 [RF] Enable AD code-gen test for RooFit.; a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext; 1367091202 [RF] Code modernization of RooAbsReal; 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper.; cf88615b6e [RF] Improve code in `MinuitFcnGrad`; 17bac5528b [RF] Code improvements in tests for new TestStatistics; afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations; 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method; 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252); 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`; 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'.; 5964158260 [RF] Add observables as another parameter in RooFuncWrapper.; cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`; 333e857cc6 Add AD based derivatives for RooFuncWrapper.; 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C.; fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT; 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit.; f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`; cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&; 8798fca2a3 [RF] Remove RooForm",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12681:3504,test,tests,3504,https://root.cern,https://github.com/root-project/root/pull/12681,16,"['Test', 'test']","['TestStatistics', 'tests']"
Testability,"DE_DIRS=/home/mkrzewic/src/root/interpreter/llvm-project/clang/include' '/home/mkrzewic/build/root/interpreter/llvm-project/llvm/tools/clang//include' '-DCMAKE_CXX_STANDARD=17' '-DClang_DIR=/home/mkrzewic/build/root/interpreter/llvm-project/llvm/tools/clang/' '-DClang_CONFIG_EXTRA_PATH_HINTS=' '-DLLVM_FORCE_USE_OLD_TOOLCHAIN=ON' '-DCLAD_BUILD_STATIC_ONLY=ON' '-GUnix Makefiles' '-S' '/home/mkrzewic/build/root/interpreter/cling/tools/plugins/clad/clad-prefix/src/clad' '-B' '/home/mkrzewic/build/root/interpreter/cling/tools/plugins/clad/clad-prefix/src/clad-build'. See also. /home/mkrzewic/build/root/interpreter/cling/tools/plugins/clad/clad-prefix/src/clad-stamp/clad-configure-*.log. -- stdout output is:; -- Configuring incomplete, errors occurred!. -- stderr output is:; CMake Warning:; Ignoring extra path from command line:. ""/home/mkrzewic/build/root/interpreter/llvm-project/llvm/tools/clang/include"". CMake Warning:; Ignoring extra path from command line:. ""/home/mkrzewic/build/root/interpreter/llvm-project/llvm/tools/clang//include"". CMake Error at CMakeLists.txt:86 (message):; Found unsupported version: LLVM 2.13.2;. Please set LLVM_DIR pointing to the llvm version 5.0 to 16.0.x build or; installation folder. CMake Error at /home/mkrzewic/build/root/interpreter/cling/tools/plugins/clad/clad-prefix/src/clad-stamp/clad-configure-Release.cmake:47 (message):; Stopping after outputting logs. gmake[2]: *** [interpreter/cling/tools/plugins/clad/CMakeFiles/clad.dir/build.make:92: interpreter/cling/tools/plugins/clad/clad-prefix/src/clad-stamp/clad-configure] Error 1; gmake[1]: *** [CMakeFiles/Makefile2:44491: interpreter/cling/tools/plugins/clad/CMakeFiles/clad.dir/all] Error 2; gmake: *** [Makefile:166: all] Error 2; ```. ### Reproducer. cmake ../../src/root -Droottest=ON -DCMAKE_BUILD_TYPE=RelWithDebInfo; cmake --build . ### ROOT version. master@0afffc6fc9. ### Installation method. source. ### Operating system. FreeBSD 14.0-RELEASE. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14492:2842,log,logs,2842,https://root.cern,https://github.com/root-project/root/issues/14492,1,['log'],['logs']
Testability,DO NOT MERGE - introduce a terrible bug to test static analysis. [skip-ci],MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12753:43,test,test,43,https://root.cern,https://github.com/root-project/root/pull/12753,1,['test'],['test']
Testability,"DO NOT MERGE! Test PR builds for root7, this should trigger a warning.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4585:14,Test,Test,14,https://root.cern,https://github.com/root-project/root/pull/4585,1,['Test'],['Test']
Testability,"Data sources such as RNTuple that have efficient ways to get the; size of a collection can recognize the `__rdf_sizeof_` prefix and; connect that variable to the column representing the size of `var`. To do:; - [x] test interaction of `#var` and `Alias`; - [x] nicer error handling in case of column name that is just `""#""` (Jakob's comment); - [x] do not expand `#define`, `#pragma` and other preprocessor directives; - [x] do not return `__rdf_sizeof_XXX` columns from `GetColumnNames` (RNTupleDS can, but RDF should filter them out); - [x] ignore `__rdf_sizeof_XXX` columns in `Snapshot` (~~printing a warning~~ throwing if passed explicitly by the user); - [x] same for `Cache`; - [x] document interaction of `Snapshot` and `Cache` with the `#var` columns; - [x] test interaction of `Cache` and `#var`; - [x] RNTuple's `#var` columns should probably be `std::size_t` instead of `unsigned int`s? that would be the less surprising. Also I got _some_ numbers out rather than an exception when I used the wrong type",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7354:215,test,test,215,https://root.cern,https://github.com/root-project/root/pull/7354,2,['test'],['test']
Testability,"Dear ROOT developers,. this Pull Request tries to address [this issue](https://root-forum.cern.ch/t/using-tfitshdu-to-read-a-table-with-arrays-as-column-elements/37867) I have opened in the ROOT forum. A limitation of the `TFITSHDU` class was its impossibility to read within columns of a FITS table containing a variable-length array. My patch adds such a possibility. I have modified the `Column` and `Cell` `struct`s adding objects necessary to read a variable-length arrays embedded in a cell. The`LoadHDU` function (fundamentally the initialiser of the `TFITSHDU` class) was modified accordingly such that this objects could be assigned. I have modified the functions dealing with printing and reading values from a table such that the occurrence of a column with variable-length arrays embedded can be properly signalled. In order not to interfere with the previous development of data handling I created a function to read within a cell for this specific case: it is called `GetTabVarLengthVectorCell`. I believe it does not make sense to read the entire column in this case (returning an array of variable-length arrays). The user is allowed to access the single cell, when attempting to use any other function (e.g. `GetTabRealVectorColumn`) to read the entire column, a warning is issued pointing him to this specific function. Last I added a tutorial in `tutorials/fitsio/FITS_tutorial8.C` with a test file illustrating the application of this case. I would kindly ask for a review,. Best. Cosimo",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5099:1408,test,test,1408,https://root.cern,https://github.com/root-project/root/pull/5099,1,['test'],['test']
Testability,"Dear ROOT developers,. we have met with a problem reading more than 2-dimensional arrays in TTrees using MakeClass. The problem appears only on the **Windows ROOT 6 version** (same code works on ROOT 6 on Linux, as well as on ROOT 5 in Windows). The code to reproduce is simple:. A tree is created by:; ```; TFile f(""newtree.root"", ""NEW"");; TTree t(""MyTree"", ""Test tree"");; double x[5][5][5];; t.Branch(""x"", x, ""x[5][5][5]"");; t.Fill();; t.Write();; f.Close();; ```; Then produce MakeClass from the tree: ```MyTree->MakeClass()```. Finally, try to read that tree via the class MyTree:; ```; .L MyTree.C; MyTree t;; t.Loop(); // crashes with bad-memory-allocation message (or silently); t.b_x->GetAddress(); // also crashes; ```. No problem is seen when using 2D or 1D arrays, nor simple numbers. Thanks, Pavel",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8833:360,Test,Test,360,https://root.cern,https://github.com/root-project/root/issues/8833,1,['Test'],['Test']
Testability,"Dear ROOTers,. I suspect there is a bug in ROOT while I read trees created with an old version (let say 5.34.36) using a new one (6.22.06). I bet that wasn't spotted because nobody really uses `int8_t` (maybe one needs to use internal ROOT types instead). But interestingly enough, that if I use the same old version of ROOT, everything looks fine. So I write a value in a tree like that:; ```; int j;; TFile f (file_name.c_str (), ""RECREATE"", ""test uint8_t"",; ROOT::CompressionSettings (ROOT::kLZMA, 7));; TTree t (""tree"", ""test int8_t"");; t.Branch (""i"", &i, ""i/B"");; ```; and read like that:; ```; int8_t i;; TFile f (file_name.c_str ());; TTree *t = (TTree*)f.Get (""tree"");; t->SetBranchAddress (""i"", &i);; ```; and it works perfectly fine with 5.34.36, but fails to read if I compile the last code with 6.22.06 with error; ```; The pointer type given ""SignedChar_t"" (22) does not correspond to the type needed ""Char_t"" (1) by the branch: i; ```. If you want to try to reproduce the possible bug, please download my example here: [br.tar.gz](https://github.com/root-project/root/files/6157333/br.tar.gz). You need to have two versions of ROOT: 5, and 6, and set up your Makefile accordingly. My compiler is gcc version 4.9.2 20150212 (Red Hat 4.9.2-6) (GCC) running on CentOS 7 (Linux kernel 3.10.0-1160.15.2.el7.x86_64). When I run the test on my host I see the following (I removed make output):; ```; Test with the same ROOT version: /root/x86-64/5.34.36/system/root; Test Ok. Test with different ROOT versions: /root/x86-64/5.34.36/system/root /root/x86-64/6.22.06/system/root. Error in <TTree::SetBranchAddress>: The pointer type given ""SignedChar_t"" (22) does not correspond to the type needed ""Char_t"" (1) by the branch: i; Read is corrupt: 0!=0 ; Read is corrupt: 0!=1 ; Read is corrupt: 0!=2 ; Read is corrupt: 0!=3 ; Read is corrupt: 0!=4 ; ...; Test failed.; ```. Best regards; Andrei",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7565:445,test,test,445,https://root.cern,https://github.com/root-project/root/issues/7565,7,"['Test', 'test']","['Test', 'test']"
Testability,"Dear all,. I have found the Kolmogorov-Smirnov test between a distribution function and a dataset implemented in ROOT::Math::GoFTest::KolmogorovSmirnovTest(Double_t& pvalue, Double_t& testStat) behaving incorrectly at low statistics (n~10). In those cases, the calculated Kolmogorov distance D acummulates at value 1/n. After investigation, I suspect the line . https://github.com/root-project/root/blob/master/math/mathcore/src/GoFTest.cxx#L937. calculates D as EITHER the distance between the distribution function and the ""top of the step"" in the empirical distribution constructed from data OR the height of that step, whichever is greater. The correct way - also given in the reference (Numerical recipes, page 737) - would be to calculate it as EITHER the distance between the distribution function and the top of the step OR between the function and the bottom of the step, whichever is greater. Additionally, this method later calculates the KS p-value using TMath::KolmogorovProb(), adopting a correction on the effective number of entries from the reference book, i.e. sqrt(n) --> (sqrt(n) + 0.12 + 0.11/sqrt(n)). This correction is however not used in other appearances of TMath::KolmogorovProb(), such as in the 2-sample KS test:; https://github.com/root-project/root/blob/master/math/mathcore/src/TMath.cxx#L839; or in the TH1 version of KS test:; https://github.com/root-project/root/blob/master/hist/hist/src/TH1.cxx#L8175. Is it therefore possible that the implementation of the KS distribution in ROOT is different from that in the reference book (Numerical recipes), and therefore the correction may not be relevant here?. Thank you,; Best wishes,. Ondrej Kovanda",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9636:47,test,test,47,https://root.cern,https://github.com/root-project/root/issues/9636,4,['test'],"['test', 'testStat']"
Testability,"Debug assertion failure ""cannot seek vector iterator after end"" in RTensor.hxx",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13325:6,assert,assertion,6,https://root.cern,https://github.com/root-project/root/issues/13325,1,['assert'],['assertion']
Testability,"Declarations extracted by DeclExtractor, regardless of their type, should be moved to the parent declaration context (be it the `TranslationUnitDecl` or a `NamespaceDecl` if DefinitionShadower is enabled). This prevents the following situation (i.e., the CXXRecordDecl becomes a child of the TranslationUnitDecl instead of the internal namespace used by the definition shadower):; ```c++; root [] struct X {} foo; (struct X &) @0x7f545a5ff018; root [] .stats asttree; |-NamespaceDecl 0x5647ecc93780 <<invalid sloc>> <invalid sloc> __cling_N50 inline; | |-VarDecl 0x5647ecc89f10 <ROOT_prompt_0:1:1, col:13> col:13 used foo 'struct X':'X' callinit; | | `-CXXConstructExpr 0x5647ecc8a420 <col:13> 'struct X':'X' 'void () noexcept'; | `-FunctionDecl 0x5647ecc89bc8 <input_line_8:1:1, ROOT_prompt_0:3:1> input_line_8:1:6 __cling_Un1Qu30 'void (void *)'; ...; |-CXXRecordDecl 0x5647ecc89c98 <line:1:1, col:11> col:8 struct X definition; ```. Sibling PR in roottest: https://github.com/root-project/roottest/pull/819. ## Checklist:; - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9782:1032,test,tested,1032,https://root.cern,https://github.com/root-project/root/pull/9782,1,['test'],['tested']
Testability,"Declarations without the auto keyword are not part of standard C++. Even though it is a nice feature to have, it requires a patch on top of clang and is one of the hurdles preventing us from using the upstream clang. Implicit auto injection is currently only supported at the prompt (and only in the top-most function-level scope). So it should ideally not break other features. There are a few GitHub and JIRA issues related to this feature that can also be closed if we completely remove it. For the warning messages, I'm reusing one of the existing clang warning message (to not introduce more patches on top of the clang with custom error messages). EDIT:; Glancing through JIRA issues, these are the issues that can be closed (list might not be exhaustive):. https://its.cern.ch/jira/browse/ROOT-10309; https://its.cern.ch/jira/browse/ROOT-10593; https://its.cern.ch/jira/browse/ROOT-10284; https://its.cern.ch/jira/browse/ROOT-8828; https://its.cern.ch/jira/browse/ROOT-8538; https://its.cern.ch/jira/browse/ROOT-7970. # This Pull request:; Requires https://github.com/root-project/roottest/pull/1056 to be merged for tests to pass. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14645:1124,test,tests,1124,https://root.cern,https://github.com/root-project/root/pull/14645,2,['test'],"['tested', 'tests']"
Testability,"Declare an install target for a mini library for unit test support, so roottest can be built standalone",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9528:54,test,test,54,https://root.cern,https://github.com/root-project/root/pull/9528,1,['test'],['test']
Testability,"Default value is on in C++ code,; but was remained off in system.rootrc and over-rulling C++. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14080:159,test,tested,159,https://root.cern,https://github.com/root-project/root/pull/14080,2,['test'],['tested']
Testability,Delete only objects which are created by TRatioPlot and not drawn in the canvas. All other objects like TGaxis and TGraph handled by the canvas and therefore not touched in the destructor. Add special handling for histogram which created from THStack but may not be drawn. ; One need extra flag to handle this. Therefore increase class version. Provide test which writes and read ratio plot from the file. Fixes #14855,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14881:353,test,test,353,https://root.cern,https://github.com/root-project/root/pull/14881,1,['test'],['test']
Testability,"Describe the bug; <!--; A clear and concise description of what the wrong behavior is.; -->; When plotting a RooFit function the `RooCurve` will try to use the `plotSamplingHint` method to get a list of optimal point locations. When using a `RooHistPdf` or `RooHistFunc` the list contains points a little (~1e-8*range) before and after each bin boundary. ; If the bins are aligned to the range (as they often are), one point per side falls outside the range.; However, there is no guarantee that the function is safe to execute there, so this may cause a NaN to be inserted in the plot.; Furthermore, when this happens the `RooCurve` seems to stop collecting points and just uses the current list, which in case of an histogram only contains the bin boundaries, meaning that the curve is not smooth between bins. ### Expected behavior; <!--; A clear and concise description of what you expected to happen.; -->; The function is evaluated only in range, no NaN in frame, smooth function between bin boundaries. ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->; ```C++; void testRooHistPdfBinning() {; RooRealVar x(""x"", """", 0., 1);; ; RooGenericPdf sqrtPdf(""sqrtPdf"", ""sqrt(x)"", x);; ; TH1F h(""h"", """", 2, 0., 1);; h.Fill(0.2, 2);; h.Fill(0.8, 1);; RooDataHist dh(""dh"", """", x, RooFit::Import(h));; RooHistPdf hpdf(""hpdf"", """", x, dh);; ; RooRealVar frac(""frac"", """", 0.5, 0, 1);; RooAddPdf p(""p"", """", RooArgSet(sqrtPdf, hpdf), frac);; ; auto frame = x.frame();; p.plotOn(frame);; frame->Draw();; }; ```. ### Setup; <!--; 1. ROOT version; 2. Operating system; 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself.; -->; Centos7, ROOT master from LCG dev3. ### Additional context; <!--; Add any other context about the problem here.; -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11482:1671,test,testRooHistPdfBinning,1671,https://root.cern,https://github.com/root-project/root/issues/11482,1,['test'],['testRooHistPdfBinning']
Testability,"Describe the bug; When starting ROOT on an arm64 machine a symbol-not-found message appears for about 10 times before getting to the prompt.; The message is related to SOFIE:. ```; IncrementalExecutor::executeFunction: symbol '_ZN4TMVA12Experimental5SOFIE8INTERNAL22make_ROperator_ReshapeERKN4onnx9NodeProtoERKNS3_10GraphProtoERSt13unordered_mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS1_11ETensorTypeESt4hashISG_ESt8equal_toISG_ESaISt4pairIKSG_SH_EEE' unresolved while linking function '_GLOBAL__sub_I_cling_module_0'!; You are probably missing the definition of TMVA::Experimental::SOFIE::INTERNAL::make_ROperator_Reshape(onnx::NodeProto const&, onnx::GraphProto const&, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, TMVA::Experimental::SOFIE::ETensorType, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, TMVA::Experimental::SOFIE::ETensorType> > >&); Maybe you need to load the corresponding shared library?; Symbol found in '/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.26.04-22463/aarch64-centos7-gcc11-opt/lib/libROOTTMVASofieParser.so'; did you mean to load it with '.L /cvmfs/sft.cern.ch/lcg/releases/ROOT/6.26.04-22463/aarch64-centos7-gcc11-opt/lib/libROOTTMVASofieParser.so'?; ```. ROOT 6.24/06 works fine. ### Expected behavior; No warning message. ### To Reproduce; Steps to reproduce the behavior:; 1. Login on an ARM amchine with cvmfs, e.g. techlab-arm64-thunderx2-01 ; 2. Source dev4arm; `source /cvmfs/sft.cern.ch/lcg/views/dev4/Wed/aarch64-centos7-gcc11-opt/setup.sh`; 3. Start ROOT, e.g. `root -b -q`. ### Setup; 1. ROOT version: 6.26/04; 2. Operating system: aarch64, centos7; 3. LCG stack. ### Additional context; Affecting ATLAS (first noticed by Asoka Da Silva)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10877:1665,Log,Login,1665,https://root.cern,https://github.com/root-project/root/issues/10877,1,['Log'],['Login']
Testability,Develop and test enum,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2:12,test,test,12,https://root.cern,https://github.com/root-project/root/pull/2,1,['test'],['test']
Testability,"Dir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/core/unix/src/TUnixSystem.cxx:395; #8 0x00002b4bd1d2763b in sighandler (sig=6) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/core/unix/src/TUnixSystem.cxx:3586; #9 <signal handler called>; #10 0x00002b4bd102eaff in raise () from /lib64/libc.so.6; #11 0x00002b4bd1001ea5 in abort () from /lib64/libc.so.6; #12 0x00002b4bd1001d79 in __assert_fail_base.cold.0 () from /lib64/libc.so.6; #13 0x00002b4bd1027456 in __assert_fail () from /lib64/libc.so.6; #14 0x00002b4bd679065b in getLambdaCallOperatorHelper(clang::CXXRecordDecl const&) [clone .part.0] () from /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/CMSSW_13_2_ROOT628_X_2023-05-04-2300/external/el8_amd64_gcc11/lib/libCling.so; #15 0x00002b4bd67915cb in clang::CXXRecordDecl::getLambdaCallOperator() const () from /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/CMSSW_13_2_ROOT628_X_2023-05-04-2300/external/el8_amd64_gcc11/lib/libCling.so; #16 0x00002b4bd39f6a20 in clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseLambdaExpr(clang::LambdaExpr*, llvm::SmallVectorImpl<llvm::PointerIntPair<clang::Stmt*, 1u, bool, llvm::PointerLikeTypeTraits<clang::Stmt*>, llvm::PointerIntPairInfo<clang::Stmt*, 1u, llvm::PointerLikeTypeTraits<clang::Stmt*> > > >*) () from /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/CMSSW_13_2_ROOT628_X_2023-05-04-2300/external/el8_amd64_gcc11/lib/libCling.so; #17 0x00002b4bd39ef4d5 in clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseStmt(clang::Stmt*, llvm::SmallVectorImpl<llvm::PointerIntPair<clang::Stmt*, 1u, bool, llvm::PointerLikeTypeTraits<clang::Stmt*>, llvm::PointerIntPairInfo<clang::Stmt*, 1u, llvm::PointerLikeTypeTraits<clang::Stmt*> > > >*) [clone .constprop.0] () from /pool/condor/dir_43945/jenkins/w",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12771:4383,test,tests,4383,https://root.cern,https://github.com/root-project/root/issues/12771,1,['test'],['tests']
Testability,"Dirty flag propagation appeared to be unnecessary in the batch mode; because the RooFitDriver manages the evaluation of nodes, but some nodes; have internal computation graphs that rely on the dirty flag; propagation, notably the integrals of a RooAbsAnaConvPdf. This fixes some stressRooFit tests wit the RooFit batchmode:; ```; Test 21 : Conditional use of per-event error p.d.f. F(t|dt)......OK; Test 28 : P.d.f. marginalization through integration.............OK; ```. The only tests that still needs to be fixed now is:; ```; Test 22 : Full per-event error p.d.f. F(t|dt)G(dt)...............FAILED; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9458:292,test,tests,292,https://root.cern,https://github.com/root-project/root/pull/9458,5,"['Test', 'test']","['Test', 'tests']"
Testability,Disable ROOT history when running tests via ctest,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3943:34,test,tests,34,https://root.cern,https://github.com/root-project/root/pull/3943,1,['test'],['tests']
Testability,Disable TBufferMerger test using TTaskGroup when IMT is disabled,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1013:22,test,test,22,https://root.cern,https://github.com/root-project/root/pull/1013,1,['test'],['test']
Testability,Disable `df035_RDFFromPandas.py` test until a proper fix is found,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15012:33,test,test,33,https://root.cern,https://github.com/root-project/root/pull/15012,1,['test'],['test']
Testability,Disable `test-stressgraphics-firefox` on Mac,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16641:9,test,test-stressgraphics-firefox,9,https://root.cern,https://github.com/root-project/root/pull/16641,1,['test'],['test-stressgraphics-firefox']
Testability,Disable a couple of tests using EOS (not supported on Windows),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9019:20,test,tests,20,https://root.cern,https://github.com/root-project/root/pull/9019,1,['test'],['tests']
Testability,Disable both features when running modules to prevent that those mess with our modules tests.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/543:87,test,tests,87,https://root.cern,https://github.com/root-project/root/pull/543,1,['test'],['tests']
Testability,Disable failing exception test on Windows (32 bit only),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13004:26,test,test,26,https://root.cern,https://github.com/root-project/root/pull/13004,1,['test'],['test']
Testability,Disable failing pyroot and dataframe (Python) tests on Windows,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6083:46,test,tests,46,https://root.cern,https://github.com/root-project/root/pull/6083,1,['test'],['tests']
Testability,Disable one more failing test on Windows,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5257:25,test,test,25,https://root.cern,https://github.com/root-project/root/pull/5257,1,['test'],['test']
Testability,Disable several failing tests on Windows,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5064:24,test,tests,24,https://root.cern,https://github.com/root-project/root/pull/5064,1,['test'],['tests']
Testability,Disable several tests failing on Windows x64,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10038:16,test,tests,16,https://root.cern,https://github.com/root-project/root/pull/10038,1,['test'],['tests']
Testability,Disable several tests who are using `hist2workspace` (which requires xml) when `ROOT_xml_FOUND` is not set,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12002:16,test,tests,16,https://root.cern,https://github.com/root-project/root/pull/12002,1,['test'],['tests']
Testability,Disable tests depending on xml when xml is not found,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12002:8,test,tests,8,https://root.cern,https://github.com/root-project/root/pull/12002,1,['test'],['tests']
Testability,Disable the `pyroot_roofit_rooabscollection` test which is failing on Windows 64:; ```; 45: test_iterator_rooarglist (rooabscollection.TestRooAbsCollection) ... *** Break *** segmentation violation; ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10081:45,test,test,45,https://root.cern,https://github.com/root-project/root/pull/10081,2,"['Test', 'test']","['TestRooAbsCollection', 'test']"
Testability,Disable the failing `rf408_RDataFrameToRooFit.py` and `rf708_bphysics.py` tests on Windows,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8812:74,test,tests,74,https://root.cern,https://github.com/root-project/root/pull/8812,1,['test'],['tests']
Testability,Disable the failing df017_vecOpsHEP.py test on Windows,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10721:39,test,test,39,https://root.cern,https://github.com/root-project/root/pull/10721,1,['test'],['test']
Testability,Disable the failing rcanvas/rbox.py test on Windows,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9035:36,test,test,36,https://root.cern,https://github.com/root-project/root/pull/9035,1,['test'],['test']
Testability,"Disable the rcanvas/rbox.py test which is failing with the following errors:; ```; Start 993: tutorial-rcanvas-rbox-py. 993: Test command: ""C:\Program Files\CMake\bin\cmake.exe"" ""-DCMD=C:/Python39-32/python.exe^C:/Users/bellenot/git/master/tutorials/launcher.py^C:/Users/bellenot/git/master/tutorials/rcanvas/rbox.py"" ""-DSYS=C:/Users/bellenot/build/release"" ""-DENV=ROOTSYS=C:/Users/bellenot/build/release#PYTHONPATH=C:/Users/bellenot/build/release/bin#PYTHIA8DATA=C:/Users/bellenot/libs/pythia8/8.3.03/share/Pythia8/xmldoc"" ""-P"" ""C:/Users/bellenot/build/release/RootTestDriver.cmake""; 993: Environment variables:; 993: ROOT_HIST=0; 993: Test timeout computed to be: 1500; 993: input_line_35:10:7: warning: ignoring return value of function declared with 'nodiscard' attribute [-Wunused-result]; 993: ((const shared_ptr<ROOT::Experimental::RCanvas>*)obj)->operator-><ROOT::Experimental::RCanvas, 0>();; 993: ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~; 993: input_line_39:10:7: warning: ignoring return value of function declared with 'nodiscard' attribute [-Wunused-result]; 993: ((const shared_ptr<ROOT::Experimental::RBox>*)obj)->operator-><ROOT::Experimental::RBox, 0>();; 993: ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~; 993: Traceback (most recent call last):; 993: File ""C:\Users\bellenot\git\master\tutorials\launcher.py"", line 34, in <module>; 993: spec.loader.exec_module(module); 993: File ""<frozen importlib._bootstrap_external>"", line 850, in exec_module; 993: File ""<frozen importlib._bootstrap>"", line 228, in _call_with_frames_removed; 993: File ""C:/Users/bellenot/git/master/tutorials/rcanvas/rbox.py"", line 24, in <module>; 993: box1.border.color = RColor.kBlue; 993: AttributeError: <class cppyy.gbl.ROOT.Experimental.RColor at 0x12092B98> has no attribute 'kBlue'. Full details:; 993: attribute access requires an instance; 993: 'ROOT::Experimental::RColor::kBlue' is not a known",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9035:28,test,test,28,https://root.cern,https://github.com/root-project/root/pull/9035,2,"['Test', 'test']","['Test', 'test']"
Testability,Disabled LogLExecPolicy multithreading testing while bugfixing,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/809:9,Log,LogLExecPolicy,9,https://root.cern,https://github.com/root-project/root/pull/809,2,"['Log', 'test']","['LogLExecPolicy', 'testing']"
Testability,"Disabled because RBDT doesn't support the imbalanced tree structure of XGBoost models. We need to disable this test right now, because we have now installed XGBoost on the GitHub action runners, and this test will be red. This test never worked, we just never noticed because XGBoost was not installed on any CI platform. Backport of a commit from #15183.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15187:111,test,test,111,https://root.cern,https://github.com/root-project/root/pull/15187,9,['test'],['test']
Testability,Discovered when running PyCool/PyCoral tests. The fix is already in master of CPyCppyy (1.9.7).,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4623:39,test,tests,39,https://root.cern,https://github.com/root-project/root/pull/4623,1,['test'],['tests']
Testability,"Discovered when running `stressGUI`:; - Fix a couple of PATHs in `stressGUI.cxx`; - Fix the compilation of `Aclock`, `Hello`, and `Tetris` and add support for `Win64` in `test/Makefile.win32`; - Fix the following error with `tutorials/gui/Slider3Demo.C`:; ```; tutorials\gui\Slider3Demo.C:198:21: error: call to member function 'SetPosition' is ambiguous; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8388:171,test,test,171,https://root.cern,https://github.com/root-project/root/pull/8388,1,['test'],['test']
Testability,Distributed RDataFrame test failures on Mac/ARM,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10061:23,test,test,23,https://root.cern,https://github.com/root-project/root/issues/10061,1,['test'],['test']
Testability,"Do not allow to start sandbox or zygote processes, disable extensions.; Reduce from 9 to 4 number of required processes with chromium 90. May help to solve sporadic errors with `webgui_ping` test on ` pcepsft11`",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8420:22,sandbox,sandbox,22,https://root.cern,https://github.com/root-project/root/pull/8420,2,"['sandbox', 'test']","['sandbox', 'test']"
Testability,"Do not draw TFrame for TASImage if not used; Provide gridx/y, logx/y, tickx/y for graphs; Use proper methods to identify Array; Fixing several lgtm.com warnings",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7648:62,log,logx,62,https://root.cern,https://github.com/root-project/root/pull/7648,1,['log'],['logx']
Testability,Documentation updates and sometimes also code changes that e.g. format warning messages or replace ineffective `assert`s by `throw`s.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5315:112,assert,assert,112,https://root.cern,https://github.com/root-project/root/pull/5315,1,['assert'],['assert']
Testability,Does this make sense? Could increase our test coverage.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4029:41,test,test,41,https://root.cern,https://github.com/root-project/root/pull/4029,1,['test'],['test']
Testability,"Doing:; ```; ctest -R tmva -j 32; ```; will result in an arbitrary result (sometimes pass sometime fail) for; ```; gtest-tmva-pymva-TestRModelParserKeras; gtest-tmva-pymva-TestRModelParserPyTorch ; ```; re-running just those tests (whether they succeeded or not) will lead to both of them failing.; The failure report is indicate that they 'now' need the BLAS library (which is not available on the system). As a possible clue (or not), the following 3 test fails systemically on the system due to the missing BLAS library:; ```; 996 - tutorial-tmva-TMVA_SOFIE_GNN_Application (Failed); 1000 - tutorial-tmva-TMVA_SOFIE_RDataFrame (Failed); 1002 - tutorial-tmva-TMVA_SOFIE_RSofieReader (Failed); ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16719:132,Test,TestRModelParserKeras,132,https://root.cern,https://github.com/root-project/root/issues/16719,4,"['Test', 'test']","['TestRModelParserKeras', 'TestRModelParserPyTorch', 'test', 'tests']"
Testability,"Don't check the Minos output code, because if the Minos errors are; at the limit, Minuit2 will return nonzero, unlike Minuit 1.; This case where the errors are at limit should not cause a failure; though. The `stressRooStats` test suite actively provokes it, by fitting; a dataset with a single observed value that corresponds to a best-fit; parameter value at the limit. With these changes, the `stressRooStats` suite will also pass with; Minuit2 and BatchMode, which is now added as a unit test.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13925:226,test,test,226,https://root.cern,https://github.com/root-project/root/pull/13925,2,['test'],['test']
Testability,Done! I think I've integrated all changes. **TODO:**. - [x] Make commit message more expressive; - [x] Try to make the counters in `RDefineBase` and `GraphNode` atomics; - [x] Look for another solution for the static `TRegex` members; - [x] Add a random sleep to the test cases to stir things up; - [x] Add tests for `Cache` and `Snapshot`; - [x] Point out in the docs that `SaveGraph` is not thread safe,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6266:267,test,test,267,https://root.cern,https://github.com/root-project/root/pull/6266,2,['test'],"['test', 'tests']"
Testability,"Drawbacks:; - needs TBranchElement to list TTree as a friend; - only covers the case of TBranchElement/TBranch mismatches (the one; reported in #8295), there might be others; - does not fix other issues with RDF and warnings from CopyAddresses, e.g. #7727. This is an alternative to #8375 that is much more ad-hoc but it fixes the reported problem and should not break other tests, differently from #8375 which introduces an issue in case of clashing branch names.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8376:375,test,tests,375,https://root.cern,https://github.com/root-project/root/pull/8376,1,['test'],['tests']
Testability,"Due to a failing test and the resulting investigation, we decide to change the pythonization of Get() and __getattr__ in the classes TDirectory, TDirectoryFile and TFile.; The situation is now the following:; . - __getattr__ : TDirectory --> TDirectoryFile --> TFile; - caches the returned object for future attempts; - raises AttributeError if object not found; ; - Get() : TDirectoryFile --> TFile; - does not cache the returned object; - returns nullptr if object not found. A new test to check the caching functionality has been added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4156:17,test,test,17,https://root.cern,https://github.com/root-project/root/pull/4156,2,['test'],['test']
Testability,"Due to a previous change in the gradient boosted DT the parameters used in the stressTMVA test case resulted in a ROC score (0.87) that was just below threshold (0.88). This change modifies the shrinkage to be 0.1 instead of 0.3. Both choices are reasoable ""black-box"" parameters meaning it's a very limited tuning.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/836:90,test,test,90,https://root.cern,https://github.com/root-project/root/pull/836,1,['test'],['test']
Testability,"Due to a pythonization not yet carried from old to experimental PyROOT, multiple calls of the same object from a TFile done e.g in the usual way `file.object` used to retrieve copies of the same object, leading to the failure of a test.; The pythonization of the TDirectoryFile:Get() method was thus added; in this way, also the TFile class inherits it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4148:231,test,test,231,https://root.cern,https://github.com/root-project/root/pull/4148,1,['test'],['test']
Testability,"Due to an aggressive test threshold, the RF RDF action helpers test was; failing. Here, the RNG is removed, making it fully deterministic. Well, not fully. The *generation* is fully deterministic in the sense that the same numbers are generated, but the order of events is unspecified.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7583:21,test,test,21,https://root.cern,https://github.com/root-project/root/pull/7583,2,['test'],['test']
Testability,"Due to faulty logic, we were using different RDefine objects for; each systematic variation even if the define itself did not depend; on the systematic variation under consideration.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10622:14,log,logic,14,https://root.cern,https://github.com/root-project/root/pull/10622,1,['log'],['logic']
Testability,Due to pymva being automatically built with tmva and depending on numpy it was possible to configuration due to missing the package (and fail-on-missing being enabled). This patch introduces a switch in the cmake configuration to allow independently disabling pymva. Warning: Did _not_ try building yet (hoping the CI system will take care of that). Relevant output for `cmake ../root-src -DPYTHON_EXECUTABLE=$(which python) -Dtmva-pymva=on -Dfail-on-missing=off`:; ```; -- Looking for python; -- Looking for numpy (python package); -- TMVA: numpy not found for python /Users/ashlaban/.local/share/virtualenvs/root-conf-test-qZnOX_ZL/bin/python. Switching off tmva-pymva option; ```. Relevant output for `cmake ../root-src -DPYTHON_EXECUTABLE=$(which python) -Dtmva-pymva=on -Dfail-on-missing=on`:; ```; -- Looking for python; -- Looking for numpy (python package); CMake Error at cmake/modules/SearchInstalledSoftware.cmake:467 (message):; TMVA: numpy python package not found and tmva-pymva component required; (python executable:; /Users/ashlaban/.local/share/virtualenvs/root-conf-test-qZnOX_ZL/bin/python); ```. Relevant output for `cmake ../root-src -DPYTHON_EXECUTABLE=$(which python) -Dtmva-pymva=off -Dfail-on-missing=on` and `cmake ../root-src -DPYTHON_EXECUTABLE=$(which python) -Dtmva-pymva=off -Dfail-on-missing=off`:; ```; ```. Meaning in these cases it configures without issue.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2972:620,test,test-,620,https://root.cern,https://github.com/root-project/root/pull/2972,2,['test'],['test-']
Testability,"Dummy test PR to check if we can reproduce the same test failures in https://github.com/root-project/root/pull/4592 , which seem unrelated to the PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4595:6,test,test,6,https://root.cern,https://github.com/root-project/root/pull/4595,2,['test'],['test']
Testability,"During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```; [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm; Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:; strlcpy.h (already part of top-level module ""ROOT_Foundation_C""); snprintf.h (already part of top-level module ""ROOT_Foundation_C""); ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""); TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""); ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""); ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""); TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""); TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""); ```. (cherry picked from commit a12ef5cf047445a952108763adc66908a17649ba). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12097:1380,test,tested,1380,https://root.cern,https://github.com/root-project/root/pull/12097,1,['test'],['tested']
Testability,"During ROOT's build of Core.pcm, byproduct modules are built.; rootcling was complaining about some headers not appearing in Core.pcm,; despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers; are actually in a byproduct. In the same vein, do not forcefully include; them in teh pcm, as they are already included in the byproduct which should; be sufficient. This circumvents the warnings:. ```; [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm; Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:; strlcpy.h (already part of top-level module ""ROOT_Foundation_C""); snprintf.h (already part of top-level module ""ROOT_Foundation_C""); ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""); TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""); ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""); ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""); TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""); TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""); ```. (cherry picked from commit a12ef5c)# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12098:1350,test,tested,1350,https://root.cern,https://github.com/root-project/root/pull/12098,1,['test'],['tested']
Testability,"During reading C++ definition data for lambda we can access; CXXRecordDecl representing lambda before we finished reading the; definition data. This can happen by reading a captured variable which is; VarDecl, then reading its decl context which is CXXMethodDecl `operator()`,; then trying to merge redeclarable methods and accessing; enclosing CXXRecordDecl. The call stack looks roughly like. VisitCXXRecordDecl; ReadCXXRecordDefinition; VisitVarDecl; VisitCXXMethodDecl; mergeRedeclarable; getPrimaryContextForMerging. If we add fake definition data at this point, later we'll hit the assertion. Assertion failed: (!DD.IsLambda && !MergeDD.IsLambda && ""faked up lambda definition?""), function MergeDefinitionData, file clang/lib/Serialization/ASTReaderDecl.cpp, line 1675. The fix is to assign definition data before reading it. Fixes PR32556. rdar://problem/37461072. Reviewers: rsmith, bruno. Reviewed By: rsmith. Subscribers: cfe-commits, jkorous-apple, aprantl. Differential Revision: https://reviews.llvm.org/D43494. llvm-svn: 328153. cc: @davidlange6",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6212:588,assert,assertion,588,https://root.cern,https://github.com/root-project/root/pull/6212,2,"['Assert', 'assert']","['Assertion', 'assertion']"
Testability,"E.g. useful for testing whether we have a ""using namespace std"" in our headers!",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1995:16,test,testing,16,https://root.cern,https://github.com/root-project/root/pull/1995,1,['test'],['testing']
Testability,"Each RDrawable can get assigned RStyle object via `weak_ptr`; At the moment when display items are created, all RStyle object are temporary locked and streamed to the client. On the client side one can use three kinds of selectors:; - by id, which can be assigned to any RDrawable ; - by class, which is again arbitrary value for each RDrawable ; - by type, which is simple text like ""box"" for RBox, ""line"" for RLine and so on; For the moment very simple CSS evaluation is supported. test and tutorials macros for RStyle are provided. Also adjust other tutorials/v7/ macros. To be done: creating RStyle from parsing text CSS files and storing RStyle as text",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4481:484,test,test,484,https://root.cern,https://github.com/root-project/root/pull/4481,1,['test'],['test']
Testability,"Each module has a set of identifier tables which aid lookup. Based on this information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same identifier lookup tables across multiple modules. Since lookup is a heavily used operation in compilers clang tries to optimize it as much as possible. In case it sees more than 4 such lookup tables it merges them together into a single table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:; * The progam will use only a small superset of the modules it needs;; * The program will be compiled in multiple TUs and merging of tables will not be called often;. In the interpreter context where we make all module available the merging of such tables becomes CPU intense operation at runtime which produces a lot of temporary reallocations. Moreover, we have seen a lot of profiles where the merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4761:528,log,logic,528,https://root.cern,https://github.com/root-project/root/pull/4761,2,"['benchmark', 'log']","['benchmarks', 'logic']"
Testability,"Each module has a set of identifier tables which aid lookup. Based on this; information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same; identifier lookup tables across multiple modules. Since lookup is a heavily used; operation in compilers clang tries to optimize it as much as possible. In case; it sees more than 4 such lookup tables it merges them together into a single; table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:; * The progam will use only a small superset of the modules it needs;; * The program will be compiled in multiple TUs and merging of tables will not; be called often;. In the interpreter context where we make all module available the merging of; such tables becomes CPU intense operation at runtime which produces a lot of; temporary reallocations. Moreover, we have seen a lot of profiles where the; merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran; locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4774:533,log,logic,533,https://root.cern,https://github.com/root-project/root/pull/4774,2,"['benchmark', 'log']","['benchmarks', 'logic']"
Testability,"Either the interpreter knows them, or we alias them to `void`.; Just as before, the end result is that if users return a type; that is unknown to the interpreter from a Define, and then try; to read that Define'd column from jitted RDF nodes, the interpreter; (and consequently RDF) errors out. This is missing a test.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3542:313,test,test,313,https://root.cern,https://github.com/root-project/root/pull/3542,1,['test'],['test']
Testability,"Enable ROOT's builtin_llvm=Off. This patch allows ROOT to be built against compatible external llvm (5.0 or 5.0.1). Note that we still need to build clang (eg. we require builtin_clang=On) due to the ROOT-specific patches which are not yet upstream. Since we have externally installed llvm, we configure and build clang as a standalone project. The configuration relies on finding llvm-config-5.0 and uses an adapted version of the standard clang standalone build procedure. Clang provides dependencies such as FileCheck and not which are used by cling's testsuite and are not being installed with the standard llvm package. Cling (which depends on llvm and clang) is built as a clang tool to avoid unresolved dependencies to clang and complicating further the already complicated cmake setup.; ; This patch intends a minimal change and follows the initial (suboptimal) design to configure and build llvm, clang and cling as part of ROOT. An ultimate solution would be to have llvm, clang and cling built as separate standalone projects (following the recommended way by the LLVM cmake developers). This should reduce the compile times by approx 20% (if we have llvm-5.0-dev installed) and make cross compilation of ROOT a little easier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1632:555,test,testsuite,555,https://root.cern,https://github.com/root-project/root/pull/1632,1,['test'],['testsuite']
Testability,"Enable `cling-test` for nightly, PR builds",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6957:14,test,test,14,https://root.cern,https://github.com/root-project/root/issues/6957,1,['test'],['test']
Testability,Enable a couple of tests on Windows,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6936:19,test,tests,19,https://root.cern,https://github.com/root-project/root/pull/6936,1,['test'],['tests']
Testability,Enable a previously disabled test to fix it if it still fails.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12451:29,test,test,29,https://root.cern,https://github.com/root-project/root/pull/12451,1,['test'],['test']
Testability,Enable dataframe-vecops tests on Windows,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10482:24,test,tests,24,https://root.cern,https://github.com/root-project/root/pull/10482,1,['test'],['tests']
Testability,Enable http/webgui/eve7 tutorials as tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6651:37,test,tests,37,https://root.cern,https://github.com/root-project/root/issues/6651,1,['test'],['tests']
Testability,Enable the NullDeref Cling test for MethodCalls.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/111:27,test,test,27,https://root.cern,https://github.com/root-project/root/pull/111,1,['test'],['test']
Testability,End axis value passed as attribute in Shape is included. So a +1 was missing when computing the output tensor length. This PR should fix the failure observed in the TestCustomModelFromONNX,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11389:165,Test,TestCustomModelFromONNX,165,https://root.cern,https://github.com/root-project/root/pull/11389,1,['Test'],['TestCustomModelFromONNX']
Testability,Error in `TInterpreter::Calc` with no output stack in seemingly random distributed rdf test execution,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11515:87,test,test,87,https://root.cern,https://github.com/root-project/root/issues/11515,1,['test'],['test']
Testability,Eve-7 Add simple window management and improve message log,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9515:55,log,log,55,https://root.cern,https://github.com/root-project/root/pull/9515,2,['log'],['log']
Testability,Eve-7 The first implementation of log view,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7270:34,log,log,34,https://root.cern,https://github.com/root-project/root/pull/7270,1,['log'],['log']
Testability,Eve-7 Use RLogger for logging,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8161:22,log,logging,22,https://root.cern,https://github.com/root-project/root/pull/8161,1,['log'],['logging']
Testability,Eve7 Correction in logging,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8191:19,log,logging,19,https://root.cern,https://github.com/root-project/root/pull/8191,1,['log'],['logging']
Testability,"Even for the ErrorOut case the Transaction should be flagged as beyond; kCompleted, to prevent it from being asserted on as ""we have transaction; without errors that was not committed"" in ~IncrementalParser().",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5732:109,assert,asserted,109,https://root.cern,https://github.com/root-project/root/pull/5732,1,['assert'],['asserted']
Testability,"Even if the test collection comment is conveying it, it's important to make those platforms fail that have failing tests, for visibility reasons. This fixes https://github.com/root-project/root/issues/12307. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12812:12,test,test,12,https://root.cern,https://github.com/root-project/root/pull/12812,3,['test'],"['test', 'tested', 'tests']"
Testability,"Even if this only happens via the interpreter, it can cause trouble. This is also why the test was disable on Windows. The point of the unit test is to cover the case of a Gaussian constraint, so we can just constrain another parameter and don't do the interpolation with the `PiecewiseInterpolation` class from HistFactory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16596:90,test,test,90,https://root.cern,https://github.com/root-project/root/pull/16596,2,['test'],['test']
Testability,"Events handling was not correct with log axes.; `x0,y0` values where not converted and interpreted wrong during mouse moving. Also simplify pad name handling in TPad::SavePrimitive. And apply few other clang-tidy warnings from #7432",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7535:37,log,log,37,https://root.cern,https://github.com/root-project/root/pull/7535,1,['log'],['log']
Testability,"Every RooFit pdf is evaluated with a set of variables to normalize over; (normalization set). A pointer to the last used normalization set is; stored in the pdf class. sometimes, pdfs are evaluated without a; normalization set in RooFit if the normalization doesn't matter. But for; a specific class the normalization always matters: the RooAddPdf Because; if the components are unnormalized, you get the wrong shape of the sum. That's why commit f6d1543 added some lines to use the last-used; normalization set if you evaluate a RooAddPdf without a normalization; set. But since the pdf only has a *pointer* to the last-used; normalization set, it will have an invalid pointer if the actual; previous normalization set gets destroyed. Because of RooFits memory pool for the RooArgSets that only recycles; memory every 6000 RooArgSets, the invalid `_normSet` problem only gets; visible in large models, but if the model is large enough it causes; reproducible crashes, as reported by the ATLAS Higgs combination group. This commit fixes the issue by copying the last-used normalization set; into the RooAddPdf, instead of only storing a pointer. Furthermore, the; logic to override the empty normalization set with the last-stored; normalization set is moved to `RooAbsPdf::getNormAndCache()`, avoiding; the overload of `RooAbsPdf::getValV()`. Initially, the check where the copied normalization set needs to be updated was done based on the address of the normalization set. However, comparisons by address should be avoided because they can lead to false positives if memory is recycled. That's why this PR also contains the UniqueId mechanism already proposed and reviewed in https://github.com/root-project/root/pull/8324. The backport of this PR to v624 is the PR https://github.com/root-project/root/pull/8579, which doesn't use the safer uniqueId mechanism, which is probably too big of a change for a patch release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8580:1164,log,logic,1164,https://root.cern,https://github.com/root-project/root/pull/8580,1,['log'],['logic']
Testability,"Every RooFit pdf is evaluated with a set of variables to normalize over; (normalization set). A pointer to the last used normalization set is; stored in the pdf class. sometimes, pdfs are evaluated without a; normalization set in RooFit if the normalization doesn't matter. But for; a specific class the normalization always matters: the RooAddPdf Because; if the components are unnormalized, you get the wrong shape of the sum. That's why commit f6d1543 added some lines to use the last-used; normalization set if you evaluate a RooAddPdf without a normalization; set. But since the pdf only has a *pointer* to the last-used; normalization set, it will have an invalid pointer if the actual; previous normalization set gets destroyed. Because of RooFits memory pool for the RooArgSets that only recycles; memory every 6000 RooArgSets, the invalid `_normSet` problem only gets; visible in large models, but if the model is large enough it causes; reproducible crashes, as reported by the ATLAS Higgs combination group. This commit fixes the issue by copying the last-used normalization set; into the RooAddPdf, instead of only storing a pointer. Furthermore, the; logic to override the empty normalization set with the last-stored; normalization set is moved to `RooAbsPdf::getNormAndCache()`, avoiding; the overload of `RooAbsPdf::getValV()`. This is a backport of https://github.com/root-project/root/pull/8580, minus the safer uniqueId mechanism, which is probably too big of a change for a patch release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8579:1164,log,logic,1164,https://root.cern,https://github.com/root-project/root/pull/8579,1,['log'],['logic']
Testability,Example failure:. 562/1224 Test #541: tutorial-gl-gltf3 ...................................................***Failed Error regular expression found in output. Regex=[Error in <] 1.36 sec; Processing /builddir/build/BUILD/root-6.26.00/tutorials/gl/gltf3.C...; Error in <TList::Delete>: A list is accessing an object (0x7fffd1c959a0) already deleted (list name = Functions); Error in <TList::Delete>: A list is accessing an object (0x7fffd1c95750) already deleted (list name = Functions). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10310:27,Test,Test,27,https://root.cern,https://github.com/root-project/root/pull/10310,2,"['Test', 'test']","['Test', 'tested']"
Testability,"Example usage:. ```c++; // generate random numbers and fill a histogram in parallel; constexpr auto nSlots = 4u;; ROOT::EnableImplicitMT(nSlots);; std::array<TRandom, nSlots> r;; TDataFrame d(1e8);; d.DefineSlot(""x"", [&r](unsigned int slot) { return r[slot].Gaus(); }, {}); .Histo1D(""x"");; ```. More unit tests are needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/982:305,test,tests,305,https://root.cern,https://github.com/root-project/root/pull/982,1,['test'],['tests']
Testability,"Except for Windows, but doing these new tests on some platforms is; better than on no platform. Otherwise we have no test coverage for using; TPython from different threads.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16454:40,test,tests,40,https://root.cern,https://github.com/root-project/root/pull/16454,2,['test'],"['test', 'tests']"
Testability,Exceptions thrown in an event loop are caught to print a message. This catch block is leveraged to finalize all scheduled actions in order to properly deallocate memory where needed and save the partial results which are obtained. # This Pull request:; Is work in progress and lacks a test battery; ## Changes or fixes:; Allows to finalize actions scheduled in a RDF analysis in case an exception is thrown during the event loop. ## Checklist:. - [V] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #10484,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13546:285,test,test,285,https://root.cern,https://github.com/root-project/root/pull/13546,2,['test'],"['test', 'tested']"
Testability,"Experimental::RNTupleDescriptorBuilder&)>: Pre-release format version: RC 1; [ OK ] RNTuple.RandomAccess (229 ms); [ RUN ] RNTuple.LargeFile1; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RPageStorageFile.cxx:51 in ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(std::string_view, const ROOT::Experimental::RNTupleWriteOptions&)>: The RNTuple file format will change. Do not store real data with this version of RNTuple!; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RNTupleSerialize.cxx:1148 in static ROOT::Experimental::RResult<void> ROOT::Experimental::Internal::RNTupleSerializer::DeserializeHeaderV1(const void*, uint32_t, ROOT::Experimental::RNTupleDescriptorBuilder&)>: Pre-release format version: RC 1; Error in <TFile::Init>: file test_large_file1.root has an incorrect header length (1677721600) or incorrect end of file length (-1760683648); /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/test/ntuple_extended.cxx:159: Failure; Value of: f; Actual: false; Expected: true; *** Break *** segmentation violation; [ --- ]; CMake Error at /builddir/build/BUILD/root-6.28.00/cmake/modules/RootTestDriver.cmake:232 (message):; error code: 139; ~~~. #### gtest-tree-ntuple-v7-test-ntuple-minifile. $ printf '%x\n' 1677721600; 64000000. Header length shoud be 0x00000064 = 100. Fatal: nread == nbytes violated; ~~~; 478/1272 Test #440: gtest-tree-ntuple-v7-test-ntuple-minifile ...........................***Failed 65.92 sec; Running main() from /builddir/build/BUILD/googletest-1.13.0/googletest/src/gtest_main.cc; Note: Google Test filter = -RCsvDS.Remote:RRawFile.Remote:RSqliteDS.Davix:TFile.ReadWithoutGlobalRegistrationWeb:TFile.ReadWithoutGlobalRegistrationNet:RNTuple.TClassEBO; [==========] Running 8 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 8 tests from MiniFile; [ RUN ] MiniFile.Raw; [ OK ] MiniFile.Raw (0 ms); [ RUN ] MiniFile.Stream; Error i",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12426:8170,test,test,8170,https://root.cern,https://github.com/root-project/root/issues/12426,1,['test'],['test']
Testability,Explicitly include `arrow/testing/builder.h` to make sure ArrayFromVector is available. Probably it was being included implicitly before.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11575:26,test,testing,26,https://root.cern,https://github.com/root-project/root/pull/11575,2,['test'],['testing']
Testability,Explicitly specify that integers in the RNTuple anchor are encoded in big-endian. ## Checklist:. - [ ] tested changes locally; - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15700:103,test,tested,103,https://root.cern,https://github.com/root-project/root/pull/15700,1,['test'],['tested']
Testability,"Extend the RooDataHist tests to also validate the schema evolution; from version 5 and version 6. Version 6 is the current version, so the `dataHistv6_ref.root` reference; file was produced with ROOT master. Version 5 was used in ROOT 6.24,; which was used to produce the `dataHistv5_ref.root` reference file. The version 6 reference file is a little bit smaller than the version 5 file, as the `_realVars` member was removed with version 6. A nice aspect of the version 6 update is also that it's backwards compatible. The `initialize()` function is called in the [custom streamer](https://github.com/root-project/root/blob/v6-24-00-patches/roofit/roofitcore/src/RooDataHist.cxx#L1995) of RooDataHist, so if the `_realVars` member is missing in the ROOT file it will still be initialized. This fixes issue https://github.com/root-project/root/issues/8037.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8090:23,test,tests,23,https://root.cern,https://github.com/root-project/root/pull/8090,1,['test'],['tests']
Testability,"Extension of the DNN implementation with weighting of training samples according to event weights for all backends (Reference, CPU, Cuda). Adapted and extended tests to cover new functionality. . Also removes one previously unused file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/738:160,test,tests,160,https://root.cern,https://github.com/root-project/root/pull/738,1,['test'],['tests']
Testability,"F1(const char* name, double xmin, double xmax, int npar, int ndim = 1, TF1::EAddToList addToGlobList = EAddToList::kDefault) =>; TypeError: could not convert argument 2 (a float is required); TF1::TF1(const char* name, const char* formula, double xmin = 0, double xmax = 1, TF1::EAddToList addToGlobList = EAddToList::kDefault, bool vectorize = false) =>; TypeError: could not convert argument 2 (expected string or Unicode object, function found); TF1::TF1(const char* name, ROOT::Math::ParamFunctorTempl<double> f, double xmin = 0, double xmax = 1, int npar = 0, int ndim = 1, TF1::EAddToList addToGlobList = EAddToList::kDefault) =>; TypeError: could not convert argument 2; TF1::TF1(const char* name, Double_t(*)(Double_t*,Double_t*) fcn, double xmin = 0, double xmax = 1, int npar = 0, int ndim = 1, TF1::EAddToList addToGlobList = EAddToList::kDefault) =>; TypeError: could not convert argument 2; TF1::TF1(const char* name, Double_t(*)(const Double_t*,const Double_t*) fcn, double xmin = 0, double xmax = 1, int npar = 0, int ndim = 1, TF1::EAddToList addToGlobList = EAddToList::kDefault) =>; TypeError: could not convert argument 2; Failed to instantiate ""TF1(std::string,function,int,double)""; ``` . <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->. ### Setup; <!--; 1. ROOT version; 2. Operating system; 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself.; -->. 1. dev3ptython2 LCG slot (ROOT v6.25/01) ; 2. lxplus.cern.ch ; 3. ; ```; ( source /cvmfs/sft.cern.ch/lcg/views/LCG_100/${CMTCONFIG}/setup.sh ; python test.py ); ```. ### Additional context; <!--; Add any other context about the problem here.; -->. It worked for all previous versions of ROOT in all released LCG slots; and it works also for dev3 and decv3python39 LCG slots",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8152:3412,test,test,3412,https://root.cern,https://github.com/root-project/root/issues/8152,1,['test'],['test']
Testability,"F::RInterface<ROOT::Detail::RDF::RLoopManager,void> > ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Snapshot(basic_string_view<char,char_traits<char> > treename, basic_string_view<char,char_traits<char> > filename, basic_string_view<char,char_traits<char> > columnNameRegexp = """", const ROOT::RDF::RSnapshotOptions& options = ROOT::RDF::RSnapshotOptions()) returned a result with an exception set. ak_array_in = <Array [[[1.1], [2.2]], [[3.3], ...]] type='2 * var * var * float64'>; ak_array_out = <Array [{x: [[1.1], [2.2]]}, {...}] type='2 * {x: var * var * float64}'>; data_frame = <cppyy.gbl.ROOT.RDF.RInterface<ROOT::Detail::RDF::RLoopManager,void> object at 0x7f857a496dc0>; filename = '/private/var/folders/wr/rfy5xgb56ls2dygmfnhx35lc0000gn/T/pytest-of-yana/pytest-15/test_data_frame_vec_of_vec_of_0/test-listarray.root'; tmp_path = PosixPath('/private/var/folders/wr/rfy5xgb56ls2dygmfnhx35lc0000gn/T/pytest-of-yana/pytest-15/test_data_frame_vec_of_vec_of_0'). tests/test_1781-rdataframe-snapshot.py:53: SystemError; ```; while running the same code line by line in `Python` or in `lldb`:; ```python; >>> data_frame.Snapshot(""ListArray"", ""listarray.root"", (""x"",)); Error in <TStreamerInfo::Build>: awkward::ArrayView, discarding: long* ptrs_, no [dimension]. TStreamerInfo::Build:0: RuntimeWarning: awkward::ListArray_zKlKkVLNo: base class awkward::ArrayView has no streamer or dictionary it will not be saved; <cppyy.gbl.ROOT.RDF.RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > object at 0x1dc7b5090>; ```; ### Expected behavior; <!--; A clear and concise description of what you expected to happen.; -->; The first `TStreamerInfo::Build` error can be avoided by appending a comment `//!` to `long* ptrs_` line.; Would it be possible to propagate the `TStreamerInfo::Build:0: RuntimeWarning` message to the user?. ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can r",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11602:3497,test,tests,3497,https://root.cern,https://github.com/root-project/root/issues/11602,1,['test'],['tests']
Testability,"FAILURE);; }; std::vector<double> inpars(ndim_);; std::vector<double> outpars(ndim_);; ; for (int jpar = 0; jpar < ndim_; ++jpar) {; inpars[jpar] = parhist_->GetBinContent(etabin, jpar+1);; }; DoHessianShifts(etabin, ipar, inpars, outpars);; std::vector<double> ret(ndim_, 0.0);; for (int jpar = 0; jpar < ndim_; ++jpar) {; ret[jpar] = outpars[jpar];; }; return ret;; }. // method to return all parameters in a single vector; std::vector<double> EtaPtCorrelatedEfficiency::DoEffSyst(int etabin) {. std::vector<double> inpars(ndim_);; std::vector<double> outpars(ndim_);; ; for (int jpar = 0; jpar < ndim_; ++jpar) {; inpars[jpar] = parhist_->GetBinContent(etabin, jpar+1);; }. std::vector<double> ret(ndim_*ndim_, 0.0);; for (int ipar = 0; ipar < ndim_; ++ipar) {; DoHessianShifts(etabin, ipar, inpars, outpars);; for (int jpar = 0; jpar < ndim_; ++jpar) {; ret[ipar * ndim_ + jpar] = outpars[jpar];; }; }; return ret;; }; ; }; ; #endif; ```. test.py; ```; import ROOT. ROOT.gInterpreter.Declare('#include ""test.h""'). ```. output:; ```; In module 'Hist':; /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Wed/ROOT/HEAD/x86_64-el9-gcc14-opt/include/TF1.h:764:73: error: no matching function for call to 'GetTheRightOp'; using Fnc_t = typename ROOT::Internal::GetFunctorType<decltype(ROOT::Internal::GetTheRightOp(&Func::operator()))>::type;; ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~; /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Wed/ROOT/HEAD/x86_64-el9-gcc14-opt/include/TF1.h:401:41: note: in instantiation of member function 'ROOT::Internal::TF1Builder<wrem::pol3_custom>::Build' requested here; ROOT::Internal::TF1Builder<Func>::Build(this, f);; ^; ./test.h:173:32: note: in instantiation of function template specialization 'TF1::TF1<wrem::pol3_custom>' requested here; tf1_pol3_tf_ = new TF1(""tf1_pol3_tf_"", pol3_tf_, ptmin_, ptmax_, pol3_tf_.getNparams());; ^; /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Wed/ROOT/HEAD/x86_64-el9-gcc14-opt/include/TF1.h:207:12: note: candidate template ignored: cou",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16578:10652,test,test,10652,https://root.cern,https://github.com/root-project/root/issues/16578,1,['test'],['test']
Testability,"FE parallelization framework already made use of forks as well, so we had something to build on and B) it was at the time deemed infeasible to check the entire RooFit code for thread-safety. Moreover, we use MultiProcess to parallelize gradients -- i.e. the tasks to be executed in parallel are partial derivatives -- and these are sufficiently large tasks that communication in between tasks is not a big concern in the big fits that we aimed to parallelize.; > ; > The communication between processes is done using ZeroMQ. The ZeroMQ dependency is wrapped in convenience classes contributed by @roelaaij which here are packaged as RooFitZMQ. Will un-draft the PR once the following is done (based on previous review comments by @guitargeek @hageboeck @amadio @lmoneta and also some other things from myself):; - [x] includes: correct order (matching header, RooFit, ROOT, std) and ROOT includes in quotation marks; - [x] fix ZMQ deprecation warnings; - [x] refactor member names: underscore suffix; - [x] document important things with doxygen; - [x] remove commented out code and TODOs and other junk; - [x] fix copyright headers + author lists (RooFitZMQ: me, Roel; MP: me, Inti, Vince); - [ ] rebase in 2-3 neat commits that all compile and pass tests; - [x] clang-tidy up; - [x] change libzmq builtin back to master after PR is merged: https://github.com/zeromq/libzmq/pull/4266; - [ ] ~use `enum class` instead of template parameters for minimizer function implementation choice~ -> next PR. _Edit 18 Nov 2021:_ the following list is to keep track of unaddressed (at time of writing) comments made in this thread (because the thread is so long that it is very inconvenient to navigate on GitHub which doesn't load it all at once):; - [x] https://github.com/root-project/root/pull/9078#pullrequestreview-773656413: only need to rebase, but that is already listed above. ; - [x] https://github.com/root-project/root/pull/9078#pullrequestreview-790026907: we have to double check whether the buil",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9078:2388,test,tests,2388,https://root.cern,https://github.com/root-project/root/pull/9078,1,['test'],['tests']
Testability,Failing Cling test for unloading Lambda in template instantiation,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12457:14,test,test,14,https://root.cern,https://github.com/root-project/root/issues/12457,1,['test'],['test']
Testability,Failing Cling tests with multiple interpreters,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12455:14,test,tests,14,https://root.cern,https://github.com/root-project/root/issues/12455,1,['test'],['tests']
Testability,Failing tests in the master branch,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9436:8,test,tests,8,https://root.cern,https://github.com/root-project/root/issues/9436,1,['test'],['tests']
Testability,Failing tests with numpy 1.24,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12148:8,test,tests,8,https://root.cern,https://github.com/root-project/root/issues/12148,1,['test'],['tests']
Testability,Faulty logic in TMVA::DataLoader::AddDataset,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14433:7,log,logic,7,https://root.cern,https://github.com/root-project/root/issues/14433,1,['log'],['logic']
Testability,Feature + tests!,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7554:10,test,tests,10,https://root.cern,https://github.com/root-project/root/pull/7554,1,['test'],['tests']
Testability,"Feature: Save training progress to root file, present it in TMVAGui. Add training history object for TMVA, here I incorporate usage to log DNN epoch performance with DNN_CPU and PyKeras. The tool is intended to be general enough that it can be used by any ML algorithm. For example, XGBoost could also record its progress per iteration with this object. A request for this functionality can be found on the root forums; https://root-forum.cern.ch/t/how-to-get-training-history-using-tmva-keras-interface/28799. My solution does not require tensorboard and records are stored within the root file. Test:; ```; . bin/thisroot.sh; cd tutorials/tmva/; make; ./TMVAClassification; root -l; TMVA::TMVAGui(""TMVA.root""); //Click on Training History... See the DNN_CPU_valError and trainingError plotted, not that data points are only added for every epoch printed in MethodDNN.cxx ; .q. cd keras; python ClassificationKeras.py; root -l; TMVA::TMVAGui(""TMVA.root""); //Click on Training History... See Keras training history for PyKeras_val_acc, PyKeras_acc, PyKeras_loss and PyKeras_val_loss; ```. Feedback welcomed",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4337:135,log,log,135,https://root.cern,https://github.com/root-project/root/pull/4337,2,"['Test', 'log']","['Test', 'log']"
Testability,Fedora 32 test failures,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6331:10,test,test,10,https://root.cern,https://github.com/root-project/root/issues/6331,1,['test'],['test']
Testability,"File ""test2.py"", line 8, in <module>; test(); File ""test2.py"", line 7, in test; return inner(); File ""test2.py"", line 5, in inner; exec('print(a); b = 456') in glob, locals(); File ""<string>"", line 1, in <module>; NameError: name 'a' is not defined; ```; However, despite both syntax versions are supposed to be valid Python 2, this version succeeds with Python 2 even though the previous version did not:; ```; $ python2 test2.py ; 123; 456; ```; That the first version fails with Python 2 is a Python 2 bug, the two versions are supposed to be equivalent in Python 2. See https://bugs.python.org/issue21591. This issue has been fixed in later Python 2 versions, but is still present in Python 2.7.5, which is the Python2 version in RHEL/CentOS 7. ### test3.py. OK, we have identified one version that works for Python 3 and one version that works for Python 2. Can we combine them with an if statement to get something that works for both versions:. ```python; import sys; def test():; def inner():; glob = dict(globals()); glob['a'] = 123; if sys.version_info[0] >= 3:; exec('print(a); b = 456', glob, locals()); else:; exec('print(a); b = 456') in glob, locals(); print(locals()['b']); return inner(); test(); ```; This works for Python 3:; ```; $ python3 test3.py ; 123; 456; ```; Sadly it fails for Python 2:; ```; $ python2 test3.py ; File ""test3.py"", line 7; exec('print(a); b = 456', glob, locals()); SyntaxError: function 'inner' uses import * and bare exec, which are illegal because it is a nested function; ```; Even though the Python 3 code path it not executed by Python 2, it must still be parsable by the Python 2 interpreter. ### test4.py. We now try to modify the Python 3 code path so that it is both valid Python 2 and valid Python 3, and still does the right thing when run as Python 3:; ```python; import sys; def test():; def inner():; glob = dict(globals()); glob['a'] = 123; if sys.version_info[0] >= 3:; exec('print(a); b = 456', glob, locals()) in {}; else:; exec('print(a)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5960:2729,test,test,2729,https://root.cern,https://github.com/root-project/root/pull/5960,1,['test'],['test']
Testability,Filemerger test fix: fixing compilation flags for interpreter,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1039:11,test,test,11,https://root.cern,https://github.com/root-project/root/pull/1039,1,['test'],['test']
Testability,"FindBranch might find ""exotic"" branch names that GetBranch does not. This also makes the branch-searching logic of Snapshot more consistent; with what we do in other places.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7097:106,log,logic,106,https://root.cern,https://github.com/root-project/root/pull/7097,1,['log'],['logic']
Testability,"First attempt at moving the globbing logic in `TChain::Add` out of the method. The main remaining question is where will this new free function actually live. It depends on `TRegexp`, `TString` and `TSystem`, so I guess somewhere in `core/base`. Any ideas here?. I removed usage of `TList` in the function, with C++17 support I could use `std::filesystem` instead of `gSystem` which could be another small improvement in the logic.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13160:37,log,logic,37,https://root.cern,https://github.com/root-project/root/pull/13160,2,['log'],['logic']
Testability,First draft of a distributed layer for ROOT RDataFrame. Direct port of the PyRDF sources into ROOT bindings. Still need to include all the tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7080:139,test,tests,139,https://root.cern,https://github.com/root-project/root/pull/7080,1,['test'],['tests']
Testability,"First implementation of the caching mechanism and minimal testing. ; This is here to start the testing in the CI, the development is not finished yet.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1056:58,test,testing,58,https://root.cern,https://github.com/root-project/root/pull/1056,2,['test'],['testing']
Testability,"First reported at https://root-forum.cern.ch/t/question-about-aliases-in-rdataframe/51155 . Reproducer:. ```cpp; #include <ROOT/RDataFrame.hxx>; #include <TTree.h>. int main() {; TTree t(""t"", ""t"");; auto x = std::make_pair(42, 84);; // This is a weird way to build a tree, but for the purposes of this test; // we we just need to mock a TTree with branches ""topbranch"" and; // ""topbranch.something"" where `something` must not be a data member of the type of ""topbranch""; // (otherwise things ""happen"" to work due to the order in which we do substitutions in RDF, see below).; t.Branch(""topbranch"", &x);; t.Branch(""topbranch"", &x, ""a/I:b/I"");; t.Fill();. auto df = ROOT::RDataFrame(t).Alias(""alias"", ""topbranch"");; // Here we transform `""alias.a == 42""` into `[](std::pair<int, int> &var0) { return var0.a == 42; }`,; // which is not valid C++.; return df.Filter(""alias.a == 42"").Count().GetValue();; }; ```; which yields:. ```; input_line_8:2:45: error: no member named 'a' in 'std::pair<int, int>'; auto func0(pair<int,int>& var0){return var0.a == 42; ~~~~ ^; terminate called after throwing an instance of 'std::runtime_error'; what():; RDataFrame: An error occurred during just-in-time compilation. The lines above might indicate the cause of the crash; All RDF objects that have not run an event loop yet should be considered in an invalid state. fish: Job 1, './repro2' terminated by signal SIGABRT (Abort); ```. The solution is to perform alias substitution in the expression first and then, in a second pass, substitute branch names with dummy variable names (`var0`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11207:302,test,test,302,https://root.cern,https://github.com/root-project/root/issues/11207,2,"['mock', 'test']","['mock', 'test']"
Testability,"First reported at https://root-forum.cern.ch/t/rdataframe-unexpected-behavior-with-define/54329 . Reproducer:. ```cpp; #include <ROOT/RDataFrame.hxx>; #include <ROOT/RVec.hxx>. int main() {; ROOT::RDataFrame df(100);; auto df2 = df.Define(""test"", [] { return ROOT::RVec<bool>(1u, true); });. auto disp = df2.Display({""test""}, 3);; disp->Print();; }; ```; should print. ```; +-----+------+; | Row | test |; +-----+------+; | 0 | true |; +-----+------+; | 1 | true |; +-----+------+; | 2 | true |; +-----+------+; ```; but instead prints. ```; +-----+------+; | Row | test |; +-----+------+; | 0 | true |; +-----+------+; | 1 | true |; | | true |; +-----+------+; | 2 | true |; | | true |; | | true |; +-----+------+; ```. (the value of each entry is appended to the collection representation instead of substituting it).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12597:240,test,test,240,https://root.cern,https://github.com/root-project/root/issues/12597,4,['test'],['test']
Testability,"FitUtil.cxx:1327; 21: Taking false branch in /opt/root_src/math/mathcore/src/FitUtil.cxx:1327; 22: Passing null pointer value via 3rd parameter 'x2' in /opt/root_src/math/mathcore/src/FitUtil.cxx:1331; 23: Calling 'CalculateGradientIntegral<ROOT::Math::IParametricGradFunctionMultiDimTempl<double>>' in /opt/root_src/math/mathcore/src/FitUtil.cxx:1331; 24: Calling constructor for 'IntegralEvaluator<ROOT::Fit::FitUtil::ParamDerivFunc<ROOT::Math::IParametricGradFunctionMultiDimTempl<double>>>' in /opt/root_src/math/mathcore/src/FitUtil.cxx:207; 25: 'useIntegral' is true in /opt/root_src/math/mathcore/inc/Fit/FitUtil.h:135; 26: Taking true branch in /opt/root_src/math/mathcore/inc/Fit/FitUtil.h:135; 27: Calling 'IntegralEvaluator::SetFunction' in /opt/root_src/math/mathcore/inc/Fit/FitUtil.h:136; 28: Field 'fFunc' is not equal to null in /opt/root_src/math/mathcore/inc/Fit/FitUtil.h:150; 29: '?' condition is true in /opt/root_src/math/mathcore/inc/Fit/FitUtil.h:150; 30: expanded from macro 'assert' in /usr/include/assert.h:93; 31: Assuming field 'fDim' is equal to 1 in /opt/root_src/math/mathcore/inc/Fit/FitUtil.h:153; 32: Taking true branch in /opt/root_src/math/mathcore/inc/Fit/FitUtil.h:153; 33: Calling constructor for 'WrappedMemFunction<ROOT::Fit::FitUtil::IntegralEvaluator<ROOT::Fit::FitUtil::ParamDerivFunc<ROOT::Math::IParametricGradFunctionMultiDimTempl<double>>>, double (ROOT::Fit::FitUtil::IntegralEvaluator<ROOT::Fit::FitUtil::ParamDerivFunc<ROOT::Math::IParametricGradFunctionMultiDimTempl<double>>>::*)(double) const>' in /opt/root_src/math/mathcore/inc/Fit/FitUtil.h:155; 34: Returning from constructor for 'WrappedMemFunction<ROOT::Fit::FitUtil::IntegralEvaluator<ROOT::Fit::FitUtil::ParamDerivFunc<ROOT::Math::IParametricGradFunctionMultiDimTempl<double>>>, double (ROOT::Fit::FitUtil::IntegralEvaluator<ROOT::Fit::FitUtil::ParamDerivFunc<ROOT::Math::IParametricGradFunctionMultiDimTempl<double>>>::*)(double) const>' in /opt/root_src/math/mathcore/inc/Fit/FitUtil.h:",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7458:6552,assert,assert,6552,https://root.cern,https://github.com/root-project/root/issues/7458,4,['assert'],['assert']
Testability,"Fitter class can now receive vectorized gradient functions; i.e., `IParamMultiGradFunctionTempl<ROOT::Double_v>` objects. TODO:; - [ ] Fix the failing test.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/890:151,test,test,151,https://root.cern,https://github.com/root-project/root/pull/890,1,['test'],['test']
Testability,Fix #10041 - Teach `GraphAsymmErrors` to accept systematic variations.; This is tested against the test [here](https://github.com/eguiraud/root/blob/e5dd150ac29bb2d6439c2138891cd65fab61a2f5/tree/dataframe/test/dataframe_vary.cxx#L941) (yet to be pushed to master).,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10486:80,test,tested,80,https://root.cern,https://github.com/root-project/root/pull/10486,3,['test'],"['test', 'tested']"
Testability,Fix (disable) roofit tests failing on Windows,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5617:21,test,tests,21,https://root.cern,https://github.com/root-project/root/pull/5617,1,['test'],['tests']
Testability,"Fix Delaunay 2D interpolation when the interpolated points are on at tringle's edges.; ; This is often the case when interpolating points laying in a grid, see https://root-forum.cern.ch/t/tgraph2d-interpolate-returns-0/54172 (linked also from the issue report). . Before a crude hack was present, which could not work if the edge is horizontal. ; ; Clean up also the class code and improve comments. Add also a test for the interpolation on points on the edges. This PR fixes #12535",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12545:412,test,test,412,https://root.cern,https://github.com/root-project/root/pull/12545,1,['test'],['test']
Testability,Fix GCC 6 compilation (tested on ArchLinux),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/188:23,test,tested,23,https://root.cern,https://github.com/root-project/root/pull/188,1,['test'],['tested']
Testability,Fix GetZaxis - may fail while dimension was checked before checking histogram. Simplify code - avoid gPad testing,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14892:106,test,testing,106,https://root.cern,https://github.com/root-project/root/pull/14892,1,['test'],['testing']
Testability,Fix LOGICAL type suport in TFITSIO,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1590:4,LOG,LOGICAL,4,https://root.cern,https://github.com/root-project/root/pull/1590,1,['LOG'],['LOGICAL']
Testability,Fix NO_CXXMODULE handling logic for dependencies,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5903:26,log,logic,26,https://root.cern,https://github.com/root-project/root/pull/5903,1,['log'],['logic']
Testability,Fix Python related variables for tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5625:33,test,tests,33,https://root.cern,https://github.com/root-project/root/pull/5625,1,['test'],['tests']
Testability,"Fix RDF and TTreeReader part of ROOT-10702, add tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5603:48,test,tests,48,https://root.cern,https://github.com/root-project/root/pull/5603,1,['test'],['tests']
Testability,"Fix ROOT-9232, add regression test",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1574:30,test,test,30,https://root.cern,https://github.com/root-project/root/pull/1574,1,['test'],['test']
Testability,"Fix ROOT-9801, by correctly copying the members for lazy initialization in TFormula::Copy. Add also a test for reproducing ROOT-9801",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3003:102,test,test,102,https://root.cern,https://github.com/root-project/root/pull/3003,1,['test'],['test']
Testability,Fix ROOT7 bin coordinate queries (and axis growth logic while I'm at it),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4688:50,log,logic,50,https://root.cern,https://github.com/root-project/root/pull/4688,1,['log'],['logic']
Testability,"Fix RootShower includes, removed unused includes from other tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5745:60,test,tests,60,https://root.cern,https://github.com/root-project/root/pull/5745,1,['test'],['tests']
Testability,Fix TClingUtils tests warnings,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4336:16,test,tests,16,https://root.cern,https://github.com/root-project/root/pull/4336,1,['test'],['tests']
Testability,Fix TCreatePrimitives::Ellipse for logarithmic axes,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7535:35,log,logarithmic,35,https://root.cern,https://github.com/root-project/root/pull/7535,1,['log'],['logarithmic']
Testability,Fix TMVA PyTorch tests on Windows. Resolves #9487,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9541:17,test,tests,17,https://root.cern,https://github.com/root-project/root/pull/9541,1,['test'],['tests']
Testability,Fix TMVA compilation & test on Windows,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4431:23,test,test,23,https://root.cern,https://github.com/root-project/root/pull/4431,1,['test'],['test']
Testability,Fix TMVA tests: #elif without expression and typo,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6148:9,test,tests,9,https://root.cern,https://github.com/root-project/root/pull/6148,1,['test'],['tests']
Testability,"Fix [this](http://cdash.cern.ch/viewBuildError.php?type=1&buildid=362417) warning:. ```; Scanning dependencies of target testRootFinder; [ 96%] Building CXX object math/mathcore/test/CMakeFiles/testRootFinder.dir/testRootFinder.cxx.o; /.../root/graf3d/gl/src/gl2ps.cxx: In function ‘void gl2psBuildBspTree(GL2PSbsptree*, GL2PSlist*)’:; /.../root/graf3d/gl/src/gl2ps.cxx:1540:19: warning: ‘prim’ may be used uninitialized in this function [-Wmaybe-uninitialized]; GL2PSprimitive *prim, *frontprim = NULL, *backprim = NULL;; ^~~~; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/618:121,test,testRootFinder,121,https://root.cern,https://github.com/root-project/root/pull/618,4,['test'],"['test', 'testRootFinder']"
Testability,"Fix a crash with `test-stressmathmore-interpreted` and fix the following `gtest-tree-ntuple-v7-test-ntuple-types` error on Windows with VS 2022:; ```; 361: [ RUN ] RNTuple.UnsupportedStdTypes; 361: C:\Users\sftnight\git\master\tree\ntuple\v7\test\ntuple_types.cxx(68): error: Value of: err.what(); 361: Expected: has substring ""std::pair<int,float> is not supported""; 361: Actual: 0E870D50 pointing to ""pair<int,float> is not supported\nAt:\n __thiscall ROOT::Experimental::RClassField::RClassField(class std::basic_string_view<char,struct std::char_traits<char> >,class std::basic_string_view<char,struct std::char_traits<char> >,class TClass *) [C:\\Users\\sftnight\\git\\master\\tree\\ntuple\\v7\\src\\RField.cxx:773]\n"" (of type char const *); 361: [ FAILED ] RNTuple.UnsupportedStdTypes (3 ms); ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9813:18,test,test-stressmathmore-interpreted,18,https://root.cern,https://github.com/root-project/root/pull/9813,3,['test'],"['test', 'test-ntuple-types', 'test-stressmathmore-interpreted']"
Testability,"Fix a debug assertion failure ""can't decrement vector iterator before begin""",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13324:12,assert,assertion,12,https://root.cern,https://github.com/root-project/root/pull/13324,1,['assert'],['assertion']
Testability,"Fix a debug assertion failure `can't dereference value-initialized vector iterator` ; With and empty vector, `vector::begin() == vector::end()` and one cannot dereference end(), [as explained in the standard](https://en.cppreference.com/w/cpp/container/vector/end):; > end() returns an iterator to the element following the last element of the vector. This element acts as a placeholder; attempting to access it results in undefined behavior.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13322:12,assert,assertion,12,https://root.cern,https://github.com/root-project/root/pull/13322,1,['assert'],['assertion']
Testability,Fix a debug assertion failure on Windows when running stressgraphics,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13584:12,assert,assertion,12,https://root.cern,https://github.com/root-project/root/pull/13584,1,['assert'],['assertion']
Testability,"Fix a debug assertion failure with `vector iterators incompatible` error on Windows in debug mode.; In `std::vector<Float_t>::const_iterator it = ev->GetValues().begin()`, `it` is initialised to `GetValues().begin()` and is then compared by `!=` to `GetValues().end()`. But `getValue()` returns a vector by value, not by reference, so it returns a copy, which means that every time we call `getValue()`, we get a different vector, so we get incompatible iterators. For the compiler, this does not make any difference. Type safety does not help, two iterators which belong to different container instances have the same type, so the code compiles. At run time, however, additional checks are made to ensure that two iterators that are being compared really belong to the same container object. (As explained [here](https://stackoverflow.com/questions/32978410/debug-assertion-vector-iterators-incompatible-c))",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13321:12,assert,assertion,12,https://root.cern,https://github.com/root-project/root/pull/13321,2,['assert'],"['assertion', 'assertion-vector-iterators-incompatible-c']"
Testability,"Fix a long-standing problem in RooFit's faster batch computations. [ROOT-10987] When a PDF doesn't implement the faster batch interface,; RooFit's old, single-value computations have to be used as a fallback.; If RooFit, however, tries to precalculate those values, the nodes of; the computation graph will always yield the same wrong value, since; they are switched to ""always clean"".; This happens e.g. when a node of the graph doesn't depend on parameters,; but only on observables. To fix this, the global static that inihibits ""always clean"" has to be; set while the computation is running. **NB**:; The test for this exists since ages, but was marked `WILLFAIL`. I will switching it back to normal in a roottest PR (to come).; Automatic checkout of the corresponding roottest branch will run the test in normal mode already in this build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6178:609,test,test,609,https://root.cern,https://github.com/root-project/root/pull/6178,2,['test'],['test']
Testability,"Fix a rounding problem in FndFixBin. the attached code show the problem. This was mentioned in the issue: https://github.com/root-project/root/issues/11212. ### Reproducer; ```; void testProblem(){; int nb = 4;; float x2 = 0.005;; float x1 = 0.0;. auto h1 = new TH1F(""h1"" ,""h1"" ,nb ,x1 ,x2);; auto h2 = new TH1F(""h2"" ,""h2"" ,nb ,x1 ,x2);. double xr1 = h1->GetXaxis()->GetBinLowEdge(2);. h1->GetXaxis()->SetRangeUser(xr1, x2);. h2->SetBinContent(1 ,1000);; h2->SetBinContent(2 ,500);; h2->SetBinContent(3 ,300);; h2->SetBinContent(4 ,50);. h1->SetBinContent(1 ,1000);; h1->SetBinContent(2 ,500);; h1->SetBinContent(3 ,300);; h1->SetBinContent(4 ,50);; h1->SetLineColor(kRed);. auto c = new TCanvas;; c->SetLogx();; h1->Draw();; h2->Draw(""same""); //only 3 bins should be visible, the 2 histograms should overlap.; }; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12401:183,test,testProblem,183,https://root.cern,https://github.com/root-project/root/pull/12401,1,['test'],['testProblem']
Testability,Fix a warning in RNTupleSerializer. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16709:57,test,tested,57,https://root.cern,https://github.com/root-project/root/pull/16709,1,['test'],['tested']
Testability,Fix an access violation error when using `fscanf` on Windows 64 bit:; ```; 243: Processing C:/Users/sftnight/git/master/test/stressGraphics.cxx...; 243: **********************************************************************; 243: * Starting Graphics - S T R E S S suite *; 243: **********************************************************************; 243: * Starting Basic Graphics - S T R E S S *; 243: **********************************************************************; 243: CMake Error at C:/Users/sftnight/build/release/RootTestDriver.cmake:227 (message):; 243: error code: Access violation; 243:; 243:; 1/1 Test #243: test-stressgraphics-interpreted ...***Failed 4.33 sec; ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9959:120,test,test,120,https://root.cern,https://github.com/root-project/root/pull/9959,3,"['Test', 'test']","['Test', 'test', 'test-stressgraphics-interpreted']"
Testability,Fix an assertion failure on Windows,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13321:7,assert,assertion,7,https://root.cern,https://github.com/root-project/root/pull/13321,1,['assert'],['assertion']
Testability,Fix another assertion failure on Windows,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13322:12,assert,assertion,12,https://root.cern,https://github.com/root-project/root/pull/13322,1,['assert'],['assertion']
Testability,Fix assertion failure on Windows,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7326:4,assert,assertion,4,https://root.cern,https://github.com/root-project/root/pull/7326,1,['assert'],['assertion']
Testability,Fix asserts for vectorization with padding,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1338:4,assert,asserts,4,https://root.cern,https://github.com/root-project/root/pull/1338,1,['assert'],['asserts']
Testability,Fix building of clad and related test on Windows,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2466:33,test,test,33,https://root.cern,https://github.com/root-project/root/pull/2466,1,['test'],['test']
Testability,Fix cling test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3550:10,test,test,10,https://root.cern,https://github.com/root-project/root/pull/3550,1,['test'],['test']
Testability,Fix cling tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9904:10,test,tests,10,https://root.cern,https://github.com/root-project/root/pull/9904,1,['test'],['tests']
Testability,"Fix compilation of dataframe-resptr test on RHEL/EPEL 7 using the default compiler (gcc 4.8.5) and the gtest library provided by the system (gtest 1.6.0) instead of the bundled one. Error message with the original sources:; ````; In file included from /usr/include/gtest/gtest.h:57:0,; from /builddir/build/BUILD/root-6.14.00/tree/dataframe/test/dataframe_resptr.cxx:2:; /builddir/build/BUILD/root-6.14.00/tree/dataframe/test/dataframe_resptr.cxx: In member function 'virtual void RResultPtr_ImplConv_Test::TestBody()':; /builddir/build/BUILD/root-6.14.00/tree/dataframe/test/dataframe_resptr.cxx:48:4: error: no matching function for call to 'testing::AssertionResult::AssertionResult(ROOT::RDF::RResultPtr<TH1D>&)'; EXPECT_TRUE(m);; ^; /builddir/build/BUILD/root-6.14.00/tree/dataframe/test/dataframe_resptr.cxx:48:4: note: candidates are:; In file included from /builddir/build/BUILD/root-6.14.00/tree/dataframe/test/dataframe_resptr.cxx:2:0:; /usr/include/gtest/gtest.h:271:12: note: testing::AssertionResult::AssertionResult(bool); explicit AssertionResult(bool success) : success_(success) {}; ^; /usr/include/gtest/gtest.h:271:12: note: no known conversion for argument 1 from 'ROOT::RDF::RResultPtr<TH1D>' to 'bool'; /usr/include/gtest/gtest.h:269:3: note: testing::AssertionResult::AssertionResult(const testing::AssertionResult&); AssertionResult(const AssertionResult& other);; ^; /usr/include/gtest/gtest.h:269:3: note: no known conversion for argument 1 from 'ROOT::RDF::RResultPtr<TH1D>' to 'const testing::AssertionResult&'; ````",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2263:36,test,test,36,https://root.cern,https://github.com/root-project/root/pull/2263,23,"['Assert', 'Test', 'test']","['AssertionResult', 'TestBody', 'test', 'testing']"
Testability,Fix dataframe_interface test on Windows,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5612:24,test,test,24,https://root.cern,https://github.com/root-project/root/pull/5612,1,['test'],['test']
Testability,Fix dataframe_snapshot test on Windows,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2416:23,test,test,23,https://root.cern,https://github.com/root-project/root/pull/2416,1,['test'],['test']
Testability,Fix datasource_arrow.cxx test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11575:25,test,test,25,https://root.cern,https://github.com/root-project/root/pull/11575,1,['test'],['test']
Testability,Fix deprecation warnings when compiling cling standalone. # This Pull request:. Fix warnings in a standalone Cling build. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16408:165,test,tested,165,https://root.cern,https://github.com/root-project/root/pull/16408,1,['test'],['tested']
Testability,"Fix detected bugs, add separate function for chunk loading with filters, add tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15510:77,test,tests,77,https://root.cern,https://github.com/root-project/root/pull/15510,1,['test'],['tests']
Testability,Fix execStatusBitsCheck test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13257:24,test,test,24,https://root.cern,https://github.com/root-project/root/pull/13257,1,['test'],['test']
Testability,Fix execUnloading test which sometimes fails with centos7/gcc7,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2162:18,test,test,18,https://root.cern,https://github.com/root-project/root/pull/2162,1,['test'],['test']
Testability,Fix failing test Pymva Keras Regression,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15403:12,test,test,12,https://root.cern,https://github.com/root-project/root/pull/15403,1,['test'],['test']
Testability,Fix failing test with GCC 7.3.0 and C++17,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1704:12,test,test,12,https://root.cern,https://github.com/root-project/root/pull/1704,1,['test'],['test']
Testability,Fix for failing test (too strict tolerances for floating point values),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/511:16,test,test,16,https://root.cern,https://github.com/root-project/root/pull/511,1,['test'],['test']
Testability,Fix for https://sft.its.cern.ch/jira/browse/ROOT-10654 and https://sft.its.cern.ch/jira/browse/ROOT-10599. I tested locally for a failing rootmv command i had and it works.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5272:109,test,tested,109,https://root.cern,https://github.com/root-project/root/pull/5272,1,['test'],['tested']
Testability,"Fix for stressGraphics.ref. On RHEL/EPEL 7:; ```; Test 10: TLatex 4 (Greek letters).................................. OK; PDF output................................................ OK; GIF output......................................... 10 FAILED; Result = 13517; Reference = 14622; Error = 1105 (was 1100); JPG output................................................ OK; PNG output................................................ OK; C file result............................................. OK; ```; On Fedora 24:; ```; Test 10: TLatex 4 (Greek letters).................................. OK; PDF output................................................ OK; GIF output......................................... 10 FAILED; Result = 13509; Reference = 14622; Error = 1113 (was 1100); JPG output................................................ OK; PNG output................................................ OK; C file result............................................. OK; ```; The results were off by just 5 and 13 bytes more, respectively, than the current allowed limit. For Fedora 25, 26 and 27 no error was triggered.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/659:50,Test,Test,50,https://root.cern,https://github.com/root-project/root/pull/659,2,['Test'],['Test']
Testability,Fix for test if i686,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/400:8,test,test,8,https://root.cern,https://github.com/root-project/root/pull/400,2,['test'],['test']
Testability,Fix for test suite on Fedora 26 i686,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/359:8,test,test,8,https://root.cern,https://github.com/root-project/root/pull/359,1,['test'],['test']
Testability,Fix for testArithmeticCpu from TMVA,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/512:8,test,testArithmeticCpu,8,https://root.cern,https://github.com/root-project/root/pull/512,1,['test'],['testArithmeticCpu']
Testability,"Fix for these warnings: http://cdash.cern.ch/viewBuildError.php?type=1&buildid=454389. No functional change otherwise. I still need to test that with external libAfterImage this is not a problem, so please let me merge this myself.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1566:135,test,test,135,https://root.cern,https://github.com/root-project/root/pull/1566,1,['test'],['test']
Testability,Fix format warnings visible in BulkApiVarLength tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3663:48,test,tests,48,https://root.cern,https://github.com/root-project/root/pull/3663,1,['test'],['tests']
Testability,Fix google test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1277:11,test,test,11,https://root.cern,https://github.com/root-project/root/pull/1277,1,['test'],['test']
Testability,"Fix https://github.com/root-project/root/issues/11212. The fix proposed in this PR was not correct: https://github.com/root-project/root/pull/12401. ### Reproducer; ```; void testProblem(){; int nb = 4;; float x2 = 0.005;; float x1 = 0.0;. auto h1 = new TH1F(""h1"" ,""h1"" ,nb ,x1 ,x2);; auto h2 = new TH1F(""h2"" ,""h2"" ,nb ,x1 ,x2);. double xr1 = h1->GetXaxis()->GetBinLowEdge(2);. h1->GetXaxis()->SetRangeUser(xr1, x2);. h2->SetBinContent(1 ,1000);; h2->SetBinContent(2 ,500);; h2->SetBinContent(3 ,300);; h2->SetBinContent(4 ,50);. h1->SetBinContent(1 ,1000);; h1->SetBinContent(2 ,500);; h1->SetBinContent(3 ,300);; h1->SetBinContent(4 ,50);; h1->SetLineColor(kRed);. auto c = new TCanvas;; c->SetLogx();; h1->Draw();; h2->Draw(""same""); //only 3 bins should be visible, the 2 histograms should overlap.; }; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12415:175,test,testProblem,175,https://root.cern,https://github.com/root-project/root/pull/12415,1,['test'],['testProblem']
Testability,Fix implementation for the case where a std::string goes over the page limit. A small test is also added to test it.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4422:86,test,test,86,https://root.cern,https://github.com/root-project/root/pull/4422,2,['test'],['test']
Testability,Fix in complex_quartic problem reported in issue #6900 and add test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6908:63,test,test,63,https://root.cern,https://github.com/root-project/root/pull/6908,1,['test'],['test']
Testability,Fix inf loop in test on arm,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/450:16,test,test,16,https://root.cern,https://github.com/root-project/root/pull/450,1,['test'],['test']
Testability,"Fix intermittent nightly test failures such as:. https://epsft-jenkins.cern.ch/job/root-exp-pyroot/264/LABEL=ROOT-ubuntu18.04,SPEC=python3/testReport/junit/projectroot.bindings.pyroot_experimental.PyROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4442:25,test,test,25,https://root.cern,https://github.com/root-project/root/pull/4442,3,['test'],"['test', 'testReport']"
Testability,"Fix issue with Redefine, expand test coverage",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8859:32,test,test,32,https://root.cern,https://github.com/root-project/root/pull/8859,1,['test'],['test']
Testability,Fix linking warnings due to visibility=hidden being set for the tests.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/644:64,test,tests,64,https://root.cern,https://github.com/root-project/root/pull/644,1,['test'],['tests']
Testability,Fix logic of enabling builtin Glew,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5526:4,log,logic,4,https://root.cern,https://github.com/root-project/root/pull/5526,1,['log'],['logic']
Testability,Fix logic of handling dependencies when NO_CXXMODULE is specified,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5798:4,log,logic,4,https://root.cern,https://github.com/root-project/root/pull/5798,1,['log'],['logic']
Testability,Fix multicore tests when running on machines with few cores,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8068:14,test,tests,14,https://root.cern,https://github.com/root-project/root/pull/8068,1,['test'],['tests']
Testability,Fix multiple hist drawing in log scale.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12448:29,log,log,29,https://root.cern,https://github.com/root-project/root/pull/12448,1,['log'],['log']
Testability,Fix ntuple_types test on Windows,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5689:17,test,test,17,https://root.cern,https://github.com/root-project/root/pull/5689,1,['test'],['test']
Testability,Fix or disable last failing tests on Windows,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6215:28,test,tests,28,https://root.cern,https://github.com/root-project/root/pull/6215,1,['test'],['tests']
Testability,Fix parallel build of tests from roottest on Windows,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10451:22,test,tests,22,https://root.cern,https://github.com/root-project/root/pull/10451,1,['test'],['tests']
Testability,Fix potential crash of the rreader test on Windows,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13782:35,test,test,35,https://root.cern,https://github.com/root-project/root/pull/13782,1,['test'],['test']
Testability,Fix printing test in Cling,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2773:13,test,test,13,https://root.cern,https://github.com/root-project/root/pull/2773,1,['test'],['test']
Testability,Fix race condition in SnapshotHelper.; After this fix I am not able to reproduce crashes on this test in master anymore.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/783:97,test,test,97,https://root.cern,https://github.com/root-project/root/pull/783,1,['test'],['test']
Testability,Fix rdatasetspec test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13263:17,test,test,17,https://root.cern,https://github.com/root-project/root/pull/13263,1,['test'],['test']
Testability,Fix remaining CI test failures [skip-ci],MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12544:17,test,test,17,https://root.cern,https://github.com/root-project/root/pull/12544,1,['test'],['test']
Testability,Fix rint testing when Browsable::TObjectElement compiled,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7034:9,test,testing,9,https://root.cern,https://github.com/root-project/root/pull/7034,1,['test'],['testing']
Testability,Fix setting axis limits for TGraph when log scale,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10815:40,log,log,40,https://root.cern,https://github.com/root-project/root/pull/10815,1,['log'],['log']
Testability,Fix several tests (CTest) on Windows,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4805:12,test,tests,12,https://root.cern,https://github.com/root-project/root/pull/4805,1,['test'],['tests']
Testability,Fix some dependency issues in the tests of TMVA-sofie,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8799:34,test,tests,34,https://root.cern,https://github.com/root-project/root/pull/8799,1,['test'],['tests']
Testability,Fix statements at global scope in TCling test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14435:41,test,test,41,https://root.cern,https://github.com/root-project/root/pull/14435,1,['test'],['test']
Testability,Fix stress histogram test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/505:21,test,test,21,https://root.cern,https://github.com/root-project/root/pull/505,1,['test'],['test']
Testability,"Fix stressRooFit test #4, a fit of a beta pdf, avoiding the x=0 point where the pdf diverges for some parameter values. This fixes ROOT-10834. This PR fixes also a dependency issue in building test with make in both stressRooFit and StressRooStats",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5860:17,test,test,17,https://root.cern,https://github.com/root-project/root/pull/5860,2,['test'],['test']
Testability,Fix test compilation on RHEL 7,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2263:4,test,test,4,https://root.cern,https://github.com/root-project/root/pull/2263,1,['test'],['test']
Testability,"Fix test error:; https://epsft-jenkins.cern.ch/job/root-exp-pyroot/62/LABEL=mac1014,SPEC=default/testReport/junit/projectroot.bindings.pyroot_experimental.PyROOT/test/pyunittests_pyroot_pyz_roodatahist_ploton/",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3517:4,test,test,4,https://root.cern,https://github.com/root-project/root/pull/3517,3,['test'],"['test', 'testReport']"
Testability,Fix test failure on ppc64le and aarch64 with gcc 12,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9601:4,test,test,4,https://root.cern,https://github.com/root-project/root/pull/9601,1,['test'],['test']
Testability,Fix test failure on ppc64le and s390x,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15734:4,test,test,4,https://root.cern,https://github.com/root-project/root/pull/15734,1,['test'],['test']
Testability,Fix test failures observed in TMVA for DNN/GRU,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5327:4,test,test,4,https://root.cern,https://github.com/root-project/root/pull/5327,1,['test'],['test']
Testability,Fix test for `.exe` suffix on Windows,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5453:4,test,test,4,https://root.cern,https://github.com/root-project/root/pull/5453,1,['test'],['test']
Testability,Fix test tolerance to avoid some failures observed in the last nightly builds ; Do not build cudnn full test for simple RNN when cudnn is not available,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5380:4,test,test,4,https://root.cern,https://github.com/root-project/root/pull/5380,2,['test'],['test']
Testability,Fix test when long is 32 bits,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10302:4,test,test,4,https://root.cern,https://github.com/root-project/root/pull/10302,1,['test'],['test']
Testability,Fix tests RArrowDS tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5406:4,test,tests,4,https://root.cern,https://github.com/root-project/root/pull/5406,2,['test'],['tests']
Testability,Fix tests on mac13arm [v6.28],MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13491:4,test,tests,4,https://root.cern,https://github.com/root-project/root/pull/13491,1,['test'],['tests']
Testability,Fix the GSLRngROOTWrapper class. Include also in testRandom the new engine based on MixMax (uses now Mixmax 17) and fix a compiler warning found in Ubuntu 18,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4419:49,test,testRandom,49,https://root.cern,https://github.com/root-project/root/pull/4419,1,['test'],['testRandom']
Testability,Fix the RNTuple.LargeFile test on 32bit Linux (i386 and armv7hf),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5977:26,test,test,26,https://root.cern,https://github.com/root-project/root/pull/5977,1,['test'],['test']
Testability,Fix the `gtest-tree-ntuple-v7-test-ntuple-cluster` test on Windows,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5972:30,test,test-ntuple-cluster,30,https://root.cern,https://github.com/root-project/root/pull/5972,2,['test'],"['test', 'test-ntuple-cluster']"
Testability,"Fix the case of using KS test when one of the histogram has zero errors (i.e is a function). Improve KS test adding possibility to specify number of toys by using option ""X=number"" for example ""X=1000"". This PR fixes the issue #13697",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13822:25,test,test,25,https://root.cern,https://github.com/root-project/root/pull/13822,2,['test'],['test']
Testability,"Fix the following compilation error of `ntuple_types` on Windows:; ```; ntuple_types.obj : error LNK2019: unresolved external symbol ""const ROOT::Experimental::RRecordField::`vftable'"" (??_7RRecordField@Experimental@ROOT@@6B@) referenced in function ""private: virtual void __thiscall RNTuple_CreateField_Test::TestBody(void)"" (?TestBody@RNTuple_CreateField_Test@@EAEXXZ) [C:\Users\bellenot\build\release\tree\ntuple\v7\test\ntuple_types.vcxproj]; C:\Users\bellenot\build\release\tree\ntuple\v7\test\Release\ntuple_types.exe : fatal error LNK1120: 1 unresolved externals [C:\Users\bellenot\build\release\tree\ntuple\v7\test\ntuple_types.vcxproj]; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10839:310,Test,TestBody,310,https://root.cern,https://github.com/root-project/root/pull/10839,5,"['Test', 'test']","['TestBody', 'test']"
Testability,Fix the following compilation error on Windows 64 bit:; ```; hist\histv7\test\constructors.cxx : fatal error C1128: number of sections exceeded object file format limit: compile with /bigobj; ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9255:73,test,test,73,https://root.cern,https://github.com/root-project/root/pull/9255,1,['test'],['test']
Testability,"Fix the following compilation error on Windows:; ```; testHistFactory.obj : error LNK2019: unresolved external symbol ""class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & __cdecl RooFit::tmpPath(void)"" (?tmpPath@RooFit@@YAAEBV?$basic_string@DU?$char_traits@D@std@@V$allocator@D@2@@std@@XZ) referenced in function ""public: virtual void __cdecl HFFixture_ModelProperties_Test::TestBody(void)"" (?TestBody@HFFixture_ModelProperties_Test@@UEAAXXZ); testHistFactory.exe : fatal error LNK1120: 1 unresolved externals; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9640:54,test,testHistFactory,54,https://root.cern,https://github.com/root-project/root/pull/9640,4,"['Test', 'test']","['TestBody', 'testHistFactory']"
Testability,"Fix the following compilation errors on Windows:; ```; rfield_vector.obj : error LNK2019: unresolved external symbol ""public: static int ComplexStruct::gNCallConstructor"" (?gNCallConstructor@ComplexStruct@@2HA) referenced in function ""private: virtual void __thiscall RNTuple_ComplexVector_Test::TestBody(void)"" (?TestBody@RNTuple_ComplexVector_Test@@EAEXXZ); rfield_vector.obj : error LNK2019: unresolved external symbol ""public: static int ComplexStruct::gNCallDestructor"" (?gNCallDestructor@ComplexStruct@@2HA) referenced in function ""private: virtual void __thiscall RNTuple_ComplexVector_Test::TestBody(void)"" (?TestBody@RNTuple_ComplexVector_Test@@EAEXXZ); ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9155:296,Test,TestBody,296,https://root.cern,https://github.com/root-project/root/pull/9155,4,['Test'],['TestBody']
Testability,"Fix the following error messages displayed when starting ROOT compiled with a different version of Visual Studio than the one installed on the system:; ```; In file included from input_line_3:38:; In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:; In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:; C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: error: redefinition of '_CrtEnableIf<true, _Ty>'; struct _CrtEnableIf<true, _Ty>; ^~~~~~~~~~~~~~~~~~~~~~~; C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: note: previous definition is here; struct _CrtEnableIf<true, _Ty>; ^; In file included from input_line_3:38:; In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:; In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:; C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'; typedef struct __crt_locale_data_public; ^; C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include; site here; ^; C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include; site here; ^; In file included from input_line_3:38:; In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:; In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:; C:\Program Files (x86)\Window",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5627:415,assert,assert,415,https://root.cern,https://github.com/root-project/root/pull/5627,2,['assert'],['assert']
Testability,Fix the following errors on Windows:; ```; 362: Error in <TCling::LoadPCM>: ROOT PCM C:\Users\bellenot\build\release\tree\tree\test\Release\libElementStructDict_rdict.pcm file does not exist; 362: [ OK ] TOffsetGeneration.offsetArrayValues (3014 ms); 362: [ RUN ] TOffsetGeneration.primitiveTest; 362: SysError in <TFile::TFile>: could not delete C:\Users\bellenot\build\release\tree\tree\test\TOffsetGeneration2.root (errno: 13) Permission denied; 362: Warning in <TFile::Write>: file TOffsetGeneration2.root not opened in write mode; 362: [ OK ] TOffsetGeneration.primitiveTest (142 ms); 362: [ RUN ] TOffsetGeneration.elementsTest; 362: SysError in <TFile::TFile>: could not delete C:\Users\bellenot\build\release\tree\tree\test\TOffsetGeneration2.root (errno: 13) Permission denied; 362: Warning in <TFile::Write>: file TOffsetGeneration2.root not opened in write mode; 362: [ OK ] TOffsetGeneration.elementsTest (136 ms); 362: [----------] 3 tests from TOffsetGeneration (3293 ms total); ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9320:127,test,test,127,https://root.cern,https://github.com/root-project/root/pull/9320,4,['test'],"['test', 'tests']"
Testability,"Fix the following kind of error when building tests (and using rootcling) in parallel on Windows:; ```; C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VC\v170\Microsoft.CppCommon.targets(205,5): error MSB4018: The ""GetOutOfDateItems"" task failed unexpectedly. [C:\Users\sftnight\build\release\interpreter\llvm\src\lib\Target\X86\X86CommonTableGen.vcxproj]; C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VC\v170\Microsoft.CppCommon.targets(205,5): error MSB4018: System.IO.IOException: The process cannot access the file 'C:\Users\sftnight\build\release\interpreter\llvm\src\lib\Target\X86\x64\Release\X86CommonTableGen\X86Commo.12E1F1A7.tlog\CustomBuild.command.1.tlog' because it is being used by another process. [C:\Users\sftnight\build\release\interpreter\llvm\src\lib\Target\X86\X86CommonTableGen.vcxproj]; C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VC\v170\Microsoft.CppCommon.targets(205,5): error MSB4018: at System.IO.__Error.WinIOError(Int32 errorCode, String maybeFullPath) [C:\Users\sftnight\build\release\interpreter\llvm\src\lib\Target\X86\X86CommonTableGen.vcxproj]; C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VC\v170\Microsoft.CppCommon.targets(205,5): error MSB4018: at System.IO.FileStream.Init(String path, FileMode mode, FileAccess access, Int32 rights, Boolean useRights, FileShare share, Int32 bufferSize, FileOptions options, SECURITY_ATTRIBUTES secAttrs, String msgPath, Boolean bFromProxy, Boolean useLongPath, Boolean checkHost) [C:\Users\sftnight\build\release\interpreter\llvm\src\lib\Target\X86\X86CommonTableGen.vcxproj]; C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VC\v170\Microsoft.CppCommon.targets(205,5): error MSB4018: at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options, String msgPath, Boolean bFromProxy, Boolean useLongPath, Boolean c",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10247:46,test,tests,46,https://root.cern,https://github.com/root-project/root/pull/10247,1,['test'],['tests']
Testability,Fix the full training recurrent tests in TMVA/DNN/RNN,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5380:32,test,tests,32,https://root.cern,https://github.com/root-project/root/pull/5380,1,['test'],['tests']
Testability,Fix the logic when using TMVA::gConfig().EnableMT/DIsableMT(),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3625:8,log,logic,8,https://root.cern,https://github.com/root-project/root/pull/3625,1,['log'],['logic']
Testability,Fix the output of `root-config.bat` that makes several TMVA tests failing due to extra spaces,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11488:60,test,tests,60,https://root.cern,https://github.com/root-project/root/pull/11488,1,['test'],['tests']
Testability,"Fix the reference file for the v6.22 read test of RooCategory now that; v6.22 has been tagged. The previous file was using an outdated class; structure, and was therefore triggering warnings. (Warnings are not detected yet by CI, but can be seen here: #5591.)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5658:42,test,test,42,https://root.cern,https://github.com/root-project/root/pull/5658,1,['test'],['test']
Testability,Fix the support for 3d input tensors when performing 1d convolution.; Add also a test for 1D convolution in TestSofieModels,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9442:81,test,test,81,https://root.cern,https://github.com/root-project/root/pull/9442,2,"['Test', 'test']","['TestSofieModels', 'test']"
Testability,Fix the tree/tree/test/testTOffsetGeneration on Windows,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9320:18,test,test,18,https://root.cern,https://github.com/root-project/root/pull/9320,2,['test'],"['test', 'testTOffsetGeneration']"
Testability,Fix to avoid redefinition of injected value of macro in test stressTMVA. Visible for C++ module build for Clang 8.0.0:. In file included from <module-includes>:26: ../build/include/TMVA/MethodDNN.h:56:9: warning: 'DNNCPU' macro redefined [-Wmacro-redefined]. #define DNNCPU. While building module 'TMVA' imported from /.../root/test/stressTMVA.cxx:70: In file included from <built-in>:379:; #define DNNCPU 1,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2598:56,test,test,56,https://root.cern,https://github.com/root-project/root/pull/2598,2,['test'],['test']
Testability,Fix to avoid redefinition of injected value of macro in test stressTMVA. Visible for C++ module build for Clang 8.0.0:; ```; In file included from <module-includes>:26: ../build/include/TMVA/MethodDNN.h:56:9: warning: 'DNNCPU' macro redefined [-Wmacro-redefined]. #define DNNCPU. While building module 'TMVA' imported from /.../root/test/stressTMVA.cxx:70: In file included from <built-in>:379:; #define DNNCPU 1; ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2582:56,test,test,56,https://root.cern,https://github.com/root-project/root/pull/2582,2,['test'],['test']
Testability,Fix two heap-use-after-free found in tree tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15817:42,test,tests,42,https://root.cern,https://github.com/root-project/root/pull/15817,1,['test'],['tests']
Testability,"Fix typo in `CompressionSettings()` function declaration to match definition in `Compression.cxx`. Many thanks for reporting @mnowakgit!. This typo caused the following to fail:; ```; root [0] auto c = ROOT::RCompressionSetting::EAlgorithm::kZSTD;; root [1] CompressionSettings(c, 5);; input_line_10:2:3: error: no matching function for call to 'CompressionSettings'; (CompressionSettings(((*(enum ROOT::RCompressionSetting::EAlgorithm::EValues*)0x7f02285f4010)), 5)); ^~~~~~~~~~~~~~~~~~~; /home/jalopezg/_build/include/Compression.h:124:5: note: candidate function not viable: no known conversion from 'enum ROOT::RCompressionSetting::EAlgorithm::EValues' to 'RCompressionSetting::EAlgorithm' for 1st argument; int CompressionSettings(RCompressionSetting::EAlgorithm algorithm, int compressionLevel);; ^; /home/jalopezg/_build/include/Compression.h:126:5: note: candidate function not viable: no known conversion from 'enum ROOT::RCompressionSetting::EAlgorithm::EValues' to 'ROOT::ECompressionAlgorithm' for 1st argument; int CompressionSettings(ROOT::ECompressionAlgorithm algorithm, int compressionLevel);; ^; ```. ## Checklist:; - [X] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11054:1140,test,tested,1140,https://root.cern,https://github.com/root-project/root/pull/11054,1,['test'],['tested']
Testability,Fix typo in test.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2485:12,test,test,12,https://root.cern,https://github.com/root-project/root/pull/2485,1,['test'],['test']
Testability,"Fix using correct minimizer when computing the profiled nuisance parameters in the FrequentistCalculator. The Frequentist calculator needs to compute , before generating the toys, the profiled values of the nuisances for the nukll and alt case. RooProfileLL is used but the default (Minuit) minimizer was used.; Change now to use the static default value, which can be changed and also give possibility to control printlevel.; With this change we can now consistently use stressRooStats with Minuit2 minimizer. - Increase also tolerance of stressRooStats tests when using toys. This is needed in case a different minimizer is used",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6195:555,test,tests,555,https://root.cern,https://github.com/root-project/root/pull/6195,1,['test'],['tests']
Testability,Fix wrong (inverted) logic in `REveVector.hxx` (was already fixed in `TEveVector.h`),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6092:21,log,logic,21,https://root.cern,https://github.com/root-project/root/pull/6092,1,['log'],['logic']
Testability,Fix yet another assertion failure on Windows,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13324:16,assert,assertion,16,https://root.cern,https://github.com/root-project/root/pull/13324,1,['assert'],['assertion']
Testability,"Fix: https://github.com/root-project/root/issues/11124; This tutorial is not tested by the CI, hence CI is skipped.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11131:77,test,tested,77,https://root.cern,https://github.com/root-project/root/pull/11131,1,['test'],['tested']
Testability,Fixed dependencies between tests on roostats,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/365:27,test,tests,27,https://root.cern,https://github.com/root-project/root/pull/365,1,['test'],['tests']
Testability,"Fixed three leaks here:; - TSystem; - Metacling; - RooStats. Leaks before fixes (using `ASAN_OPTIONS=detect_leaks=1 LSAN_OPTIONS=max_leaks=-1 root.exe ...`):; [lsan_before.log](https://github.com/root-project/root/files/6326991/lsan_before.log). After fixes:; [Don't have it yet, because after rebasing, #7903 and #6577 broke my asan build. There are leaks in cling, though]. . @Axel-Naumann:; Please check the first two commits. One needed a shared_ptr or you need a proper copy constructor. I leave it to you to decide if the shared_ptr is the best choice here. @guitargeek @lmoneta :; Since I waved the magic `unique_ptr` wand on ToyMCSampler anyway, I added a second commit to take it all the way.; I think it would be nice if you backported at least the fix of the leak (the smaller commit), and the larger one can just go in master for a better future. See #7890 regarding the ToyMCSampler leak and where backports are needed. I will leave it open. Finding those leaks was a bit trickier, because RooFit uses a memory pool. To find those RooArgSet leaks,; - you switch off the mempool; - track down the leak; - switch it on again. I added two commits mostly for @guitargeek with documentation for you to understand why things are a bit complicated here.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7904:172,log,log,172,https://root.cern,https://github.com/root-project/root/pull/7904,2,['log'],['log']
Testability,"Fixes #10449 . Avoids serialisation of the head node which triggered recursive serialisation of all nodes in the graph. The graph is now represented with a flat list with node information. Each element has the operation of the current node and a (integer id) reference to the parent , which the operation should be called upon. In turn, also recreating the graph on each task is not done recursively anymore. Update:. Tests added, code reviewed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10459:418,Test,Tests,418,https://root.cern,https://github.com/root-project/root/pull/10459,1,['Test'],['Tests']
Testability,"Fixes #11784. # This Pull request:; Fixes a bug in overlap checking. ## Changes or fixes:; Tessellated shapes cannot be used for overlap checking, because they do not provide navigation functionality. This PR skips checks when one of the two shapes potentially overlapping is a tesselation. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #11784",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11788:312,test,tested,312,https://root.cern,https://github.com/root-project/root/pull/11788,1,['test'],['tested']
Testability,"Fixes #14132. # This Pull request:. ## Changes or fixes:; Also check if `fOutputFiles` is empty before giving warning ""A lazy Snapshot action was booked but never triggered"". ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #14132 (the other issue with broken `gDirectory` seems to have gone in latest ROOT (6.32.06), so can consider as this bug is fixed)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16550:196,test,tested,196,https://root.cern,https://github.com/root-project/root/pull/16550,1,['test'],['tested']
Testability,"Fixes #14157. When building minuit2 standalone with root 6.30/02 (-Dminuit2_standalone=ON), cmake errors out when looking for the version file 'RVersion.hxx' in 'core/foundation/inc/ROOT/RVersion.hxx' whereas it is copied to the top-level dir (i.e. 'math/minuit2/'). This is because the variable VERSION_FILE is incorrectly set to the file path matching the full path of the file. Fixed by setting the parent dir path of 'RVersion.hxx' as the `SOURCE` in `copy_standalone()` so that `VERSION_FILE` is set to just the base file name. # This Pull request:. ## Changes or fixes: commit 27082fb. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #14157",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14160:613,test,tested,613,https://root.cern,https://github.com/root-project/root/pull/14160,1,['test'],['tested']
Testability,Fixes #15703. The second commit adds a test to check that there is no memory increase using the reproducer from the linked issue. @guitargeek let me know how I should generate a patch to keep track of this change w.r.t. CPyCPPyy,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15777:39,test,test,39,https://root.cern,https://github.com/root-project/root/pull/15777,1,['test'],['test']
Testability,"Fixes #6523 . As per comments by Philippe and Guilherme, the behaviour triggered by `TTree::Fill` to change the associated TFile when reaching a size greater than `fgMaxTreeSize` doesn't fit within the scope of TBufferMerger. Avoid calling `TTree::ChangeFile` doesn't change anything from the user perspective and doesn't interfere with the I/O mechanism of TBufferMerger (and thus of the multithreaded RDF Snapshot as well). . While fixing the above issue I found another one that may be related to this. Meanwhile the draft can be discussed. TODO; - [x] Update docs in TTree::Fill, TTree::ChangeFile and TBufferMerger. Tell the users that TBufferMergerFile doesn't trigger this behaviour; - [x] Include the reproducer as test",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6570:723,test,test,723,https://root.cern,https://github.com/root-project/root/pull/6570,1,['test'],['test']
Testability,"Fixes #7053 . It prints cycle number next to the key name and mimics the logic for printing ""[current cycle]"" and ""[backup cycle]"" found in [TDirectoryFile.cxx](https://github.com/root-project/root/blob/bb10667053131dbf3575fa2eb98522fdc6c57abc/io/io/src/TDirectoryFile.cxx#L1169-L1182)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7878:73,log,logic,73,https://root.cern,https://github.com/root-project/root/pull/7878,1,['log'],['logic']
Testability,"Fixes #7584 . WIP, still need to adjust the tests to the new elements of the `Range` object.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8382:44,test,tests,44,https://root.cern,https://github.com/root-project/root/pull/8382,1,['test'],['tests']
Testability,Fixes Cling's nightly releases sync test.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4713:36,test,test,36,https://root.cern,https://github.com/root-project/root/pull/4713,1,['test'],['test']
Testability,"Fixes ROOT-10856 by keeping track of field names and throwing an exception if there's a name conflict. . Edit: expanded PR scope to ensure field names are valid as well as unique (e.g. no empty string). . ~~**todo**~~ **done:** add unit test per method to ensure technique works:; - [x] `std::shared_ptr<T> MakeField(std::string_view fieldName, ArgsT&&... args)`; - [x] `void AddField(std::string_view fieldName, T* fromWhere)`; - [x] `void AddField(std::unique_ptr<Detail::RFieldBase> field)`; - [x] `std::shared_ptr<RCollectionNTuple> MakeCollection(std::string_view fieldName, std::unique_ptr<RNTupleModel> collectionModel)`",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5879:237,test,test,237,https://root.cern,https://github.com/root-project/root/pull/5879,1,['test'],['test']
Testability,"Fixes [these](http://cdash.cern.ch/testDetails.php?test=51845718&build=557493) kind of build errors due to missing file. @Axel-Naumann Are the tutorial as well run in the CI/ nightlies? Since the file has 1.5GB, this could create some traffic to http://root.cern.ch/.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2562:35,test,testDetails,35,https://root.cern,https://github.com/root-project/root/pull/2562,2,['test'],"['test', 'testDetails']"
Testability,"Fixes a ""buffer overflow"" in `G__defineMacro` of `cint`, where `snprintf` is given buffer length that is 1 byte longer that the actual buffer. It is seems like this never caused any actual buffer overflows - at least while building ROOT, where `cint` or rather `rootcint_tmp` is already used. However, this causes issues in certain scenarios, where GCC's (?) fortify mechanism causes `cint` (or rather `rootcint_tmp`) to abort during `G__DEFINE_MACRO(__linux__);`. Notes on my encounter with this issue:; - using GCC 13.2.0 on Ubuntu 24.04; - does not occur in `Debug` build mode, but was debuggable when using `RelWithDebInfo`; - the ROOT version is some legacy patched tarball apparently based on v5.34.00. I did not reproduce this issue using this branch, nor do I plan to, since I encountered other issues earlier during such a build attempt. Consequently, I also didn't run any tests.; If this makes this PR ineligible to merge, I'm fine with having it closed. This way, at least the potential error scenario and a solution are effectively ""documented"".",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16141:883,test,tests,883,https://root.cern,https://github.com/root-project/root/pull/16141,1,['test'],['tests']
Testability,"Fixes an assertion ""can't dereference invalidated vector iterator""",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13328:9,assert,assertion,9,https://root.cern,https://github.com/root-project/root/pull/13328,1,['assert'],['assertion']
Testability,Fixes and adds a test for #7181.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7394:17,test,test,17,https://root.cern,https://github.com/root-project/root/pull/7394,1,['test'],['test']
Testability,"Fixes and improvements for the recurrent layers (RNN, LSTM and GRU) and their tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5367:78,test,tests,78,https://root.cern,https://github.com/root-project/root/pull/5367,1,['test'],['tests']
Testability,"Fixes assert in roottest/root/meta/MakeProject/runcms310.C; ```; /builddir/build/BUILD/gcc-8.3.1-20190223/obj-x86_64-redhat-linux/x86_64-redhat-linux/libstdc++-v3/include/bits/basic_string.h:1067: std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::reference std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator[](std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::reference = char&; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int]: Assertion '__pos <= size()' failed.; #3 0x00007ffff78c7c11 in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator[](unsigned long) () from /lib64/libstdc++.so.6; #4 0x00007ffff67fb9c3 in R__WriteDestructorBody (file=0x1e01c10, next=...); at /mnt/build/wsincrmaster/LABEL/ROOT-fedora29/SPEC/python3/root/io/io/src/TStreamerInfo.cxx:3531; #5 0x00007ffff67fcfcf in TStreamerInfo::GenerateDeclaration (this=0x2b1e950, fp=0x1d7ddc0, sfp=0x1e01c10,; subClasses=0x7fffffff8db0, top=true); at /mnt/build/wsincrmaster/LABEL/ROOT-fedora29/SPEC/python3/root/io/io/src/TStreamerInfo.cxx:3772; #6 0x00007ffff67fe2bf in TStreamerInfo::GenerateHeaderFile (this=0x2b1e950, dirname=0x7fffffff92d9 ""cms310"",; subClasses=0x7fffffff8db0, extrainfos=0x7fffffff9210); at /mnt/build/wsincrmaster/LABEL/ROOT-fedora29/SPEC/python3/root/io/io/src/TStreamerInfo.cxx:3976; #7 0x00007ffff67a99bf in TFile::MakeProject (this=0x158e280, dirname=0x7ffff793204c ""cms310"", option=0x7ffff7932055 ""RECREATE+""); at /mnt/build/wsincrmaster/LABEL/ROOT-fedora29/SPEC/python3/root/io/io/src/TFile.cxx:2843; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5642:6,assert,assert,6,https://root.cern,https://github.com/root-project/root/pull/5642,2,"['Assert', 'assert']","['Assertion', 'assert']"
Testability,Fixes following failing nightlies: http://cdash.cern.ch/testSummary.php?project=1&name=tutorial-dataframe-df103_NanoAODHiggsAnalysis-py&date=2019-07-30,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4130:56,test,testSummary,56,https://root.cern,https://github.com/root-project/root/pull/4130,1,['test'],['testSummary']
Testability,"Fixes for bug ROOT-1036 (FitResult::Scan); When fitting histograms a shared_pointer of FitData must be passed to the Fitter class, in Fitter::Fit( data,...) functions instead of a row pointer !; This fixes the shared ownership of the fitting data between the Fitter and the FitResult classes and avoid that the data are deleted when exiting TH1::Fit. ; One can then use FitResult::Scan , FitResult::Contour or FitResult::GetConfidenceIntervals.; Before the data were accidentally not deleted, when multi-thread wad not enabled, because in that case a reference for the data was kept in the global TVirtualFitter class, available only in non-mt mode/. This PR also fixes the case of bin integral fit in multithreading. The problem was caused by using the GSL integrator from Mathmore. . testFit has been improved by adding test for FitResult::Scan and tests for multi-threading fitting",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4557:786,test,testFit,786,https://root.cern,https://github.com/root-project/root/pull/4557,3,['test'],"['test', 'testFit', 'tests']"
Testability,Fixes for the following test failures:; https://github.com/root-project/root/pull/4766#issuecomment-573859694,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4795:24,test,test,24,https://root.cern,https://github.com/root-project/root/pull/4795,1,['test'],['test']
Testability,Fixes for tmva-sofie test compilation,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10117:21,test,test,21,https://root.cern,https://github.com/root-project/root/pull/10117,1,['test'],['test']
Testability,"Fixes https://github.com/root-project/root/issues/11971. leftover from https://github.com/root-project/root/commit/b1257ba27a7139e0c927693fded3b243b3f94b33. # This Pull request:. ## Changes or fixes:. Unused variable, found by HenryDayHall. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11972:262,test,tested,262,https://root.cern,https://github.com/root-project/root/pull/11972,1,['test'],['tested']
Testability,Fixes https://github.com/root-project/root/issues/15315. - [X] tested changes locally. This enables the failing example in the manual with `ROOT.Math.IMultiGenFunction` that failed due to an invalid zero initialization of an `unsigned int`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16197:63,test,tested,63,https://root.cern,https://github.com/root-project/root/pull/16197,2,['test'],['tested']
Testability,"Fixes https://github.com/root-project/root/issues/15610. As reported on the forum:; https://root-forum.cern.ch/t/memory-leak-in-pyroot-when-using-user-defined-c-macros-from-python-and-ttree-friends/59432. According to that post, the problem is present at least since 6.26/04, but I suspect it has been there forever (at least 6.22 with with cppyy upgrade in 2019). . I fixed the memory leak in the Pythonization is in the usual way how I fix problems with the PyROOT CPython extension: re-implementing the offending parts in Python and hoping that the problem is gone. Which it is!. Note that the code also had no obvious memory leak before. where it was; using the `CPyCppyy::Instance_FromVoidPtr` function from the CPyCppyy; API. If similar problems appear, this function might have to be; investigated in more detail. But for this commit it is not relevant: moving more Pythonization logic; into the Python layer is better anyway. The problem can be reproduced with a variation of the forum reproducer:; ```python; import ROOT; import numpy as np. ROOT.gInterpreter.Declare(; """"""; template<class T>; void * MyGetAddress(T * b) {; return *(void**)b->GetAddress();; }; """"""; ). def macro(tree, *args, **kwargs):. import cppyy.ll. # manually; v1 = cppyy.ll.cast[tree.GetBranch(""value1"").GetClassName() + ""*""](ROOT.MyGetAddress(tree.GetBranch(""value1""))); # using the Pythonization; v2 = getattr(tree, ""value2""); return None. pinfo = ROOT.ProcInfo_t(). def print_memory(i):; ROOT.gSystem.GetProcInfo(pinfo); print(i, ""memory usage"", pinfo.fMemResident, pinfo.fMemVirtual). class reTupler:; def __init__(self, tree_name, new_file, src_file):; self.src_file = ROOT.TFile.Open(src_file); self.src_tree = self.src_file.Get(tree_name). self.new_file = ROOT.TFile.Open(new_file, ""recreate""); self.new_tree = ROOT.TTree(tree_name, tree_name). # To access branches in 'src_tree' from 'new_tree':; self.new_tree.AddFriend(self.src_tree). # To keep track of new branches and store values:; self.new_branches = {}.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15608:887,log,logic,887,https://root.cern,https://github.com/root-project/root/pull/15608,1,['log'],['logic']
Testability,"Fixes https://github.com/root-project/root/issues/6467. It needs https://github.com/root-project/root/pull/6377 for Python <= 3.6, otherwise an error of the type `KeyError: 'fProofChain'` (for TChain) happens first and we don't even get to the issue that this PR fixes (UPDATE: #6377 has been merged). Also, before merging, this fix needs to be tested for `TGMainFrame`, where the problem described in https://github.com/root-project/root/issues/6578 has been identified.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6582:345,test,tested,345,https://root.cern,https://github.com/root-project/root/pull/6582,1,['test'],['tested']
Testability,"Fixes https://github.com/root-project/root/issues/6616. While looking into this, I noticed that the `newcomp` variable is passed down the line to `TFileMerger::OutputFile`, which is declared at https://github.com/root-project/root/blob/master/io/io/inc/TFileMerger.h#L115 with a wrongly named parameter `compressionLevel`. That is in fact the full compression setting integer. Maybe the logic in `hadd` was misguided by the parameter name, I can take care of that in a separate PR. Sibling roottest PR at https://github.com/root-project/roottest/pull/1074",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14873:387,log,logic,387,https://root.cern,https://github.com/root-project/root/pull/14873,1,['log'],['logic']
Testability,Fixes https://github.com/root-project/root/issues/7740. # This Pull request:. ## Changes or fixes:; Add tutorial about multi dimensional integrator. ## Checklist:. - [x ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes # ; https://github.com/root-project/root/issues/7740,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14730:171,test,tested,171,https://root.cern,https://github.com/root-project/root/pull/14730,1,['test'],['tested']
Testability,"Fixes https://github.com/root-project/root/issues/8850. May still need polishing, will add test if logic is approved. With this commit, when `root` receives an unrecognized options it prints an error (similar to other linux commands errors) and exits before showing the prompt. ```; $ root --nonexistingoption; Error in <TApplication::GetOptions>: unrecognized option '--nonexistingoption'; Try 'root --help' for more information.; $ cp --nonexistingoption; cp: unrecognized option '--nonexistingoption'; Try 'cp --help' for more information.; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8868:91,test,test,91,https://root.cern,https://github.com/root-project/root/pull/8868,2,"['log', 'test']","['logic', 'test']"
Testability,Fixes https://its.cern.ch/jira/browse/ROOT-5760. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15280:114,test,tested,114,https://root.cern,https://github.com/root-project/root/pull/15280,1,['test'],['tested']
Testability,"Fixes https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-v6-24-00-patches/30/LABEL=mac11arm,SPEC=noimt,V=6-24/testReport/junit/projectroot.roottest.python/cpp/roottest_python_cpp_cpp/. (to be backported to 6.24)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8020:141,test,testReport,141,https://root.cern,https://github.com/root-project/root/pull/8020,1,['test'],['testReport']
Testability,Fixes importing `JupyROOT` when `CMAKE_INSTALL_PYTHONDIR` is set to the standard site-packages directory. Fixes the failure seen in this build of the conda nightly:. https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/99/console. The builds after 100 include this patch and work as expected. (The new failure in [`roottest_python_JupyROOT_ROOT_kernel_notebook`](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/101/testReport/projectroot.python/JupyROOT/roottest_python_JupyROOT_ROOT_kernel_notebook/) is a bug in `metakernel` that is fixed by https://github.com/Calysto/metakernel/pull/214.),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6248:466,test,testReport,466,https://root.cern,https://github.com/root-project/root/pull/6248,1,['test'],['testReport']
Testability,"Fixes issue #8284 where TKeys with the same name as the requested RNTuple; would be attempted to be parsed as an RNTuple, leading to internal; parser assert failures later on. e.g.; ```cpp; // actually holds a TTree named ""Events""; auto reader = RNTupleReader::Open(""Events"", ""test80X_NANO.root"");; ```. Internal error before: ; ```; Fatal: nread == nbytes violated at line 1011 of `~/root/tree/ntuple/v7/src/RMiniFile.cxx'; aborting; ```. Exception thrown after: ; ```; C++ exception with description ""no RNTuple named 'Events' in file 'test80X_NANO.root' (unchecked RResult access!); ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8285:150,assert,assert,150,https://root.cern,https://github.com/root-project/root/pull/8285,1,['assert'],['assert']
Testability,"Fixes macOS 12 builds (no ""python"", only ""python3"").; Davix now uses curl instead of neon. (cherry picked from commit 4fb53c7adfb4df5fb2652b234c609af951a98edc). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10375:226,test,tested,226,https://root.cern,https://github.com/root-project/root/pull/10375,1,['test'],['tested']
Testability,Fixes macOS 12 builds. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10275:88,test,tested,88,https://root.cern,https://github.com/root-project/root/pull/10275,1,['test'],['tested']
Testability,Fixes numerical instabilities of DNN tests.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/798:37,test,tests,37,https://root.cern,https://github.com/root-project/root/pull/798,1,['test'],['tests']
Testability,Fixes regression and corresponding tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/758:35,test,tests,35,https://root.cern,https://github.com/root-project/root/pull/758,1,['test'],['tests']
Testability,Fixes roottest/cling/reflex/classVersion_rflx.log.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2346:46,log,log,46,https://root.cern,https://github.com/root-project/root/pull/2346,1,['log'],['log']
Testability,Fixes some of the test failures of the nightlies.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2885:18,test,test,18,https://root.cern,https://github.com/root-project/root/pull/2885,1,['test'],['test']
Testability,Fixes the failing test [here](http://cdash.cern.ch/testDetails.php?test=42349361&build=497461). Treats `long` types on 32bit as `int`s.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1950:18,test,test,18,https://root.cern,https://github.com/root-project/root/pull/1950,3,['test'],"['test', 'testDetails']"
Testability,"Fixes the following error on Windows with macros containing Windows line endings (CR/LF):; ```; Assertion failed: content[posOpenCurly] == '{' && ""No curly at claimed position of opening curly!"",; file C:\Users\bellenot\git\master\interpreter\cling\lib\MetaProcessor\MetaProcessor.cpp, line 431; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7326:96,Assert,Assertion,96,https://root.cern,https://github.com/root-project/root/pull/7326,1,['Assert'],['Assertion']
Testability,Fixes the following test failures. The following tests FAILED:; 	 71 - mathcore-SparseDataComparer (Failed); 	 72 - mathcore-SparseFit4 (Failed); 	 73 - mathcore-SparseFit3 (Failed); 	149 - test-stresshistogram (Failed); 	150 - test-stresshistogram-interpreted (Failed); 	169 - test-stresshistofit (Failed); 	170 - test-stresshistofit-interpreted (Failed); Errors while running CTest,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5159:20,test,test,20,https://root.cern,https://github.com/root-project/root/pull/5159,6,['test'],"['test', 'test-stresshistofit', 'test-stresshistofit-interpreted', 'test-stresshistogram', 'test-stresshistogram-interpreted', 'tests']"
Testability,Fixes the following warning:; ```; CMake Warning (dev) in interpreter/cling/tools/plugins/clad/CMakeLists.txt:; A logical block opening on the line. /root/root_src/interpreter/cling/tools/plugins/clad/CMakeLists.txt:17 (if). closes on the line. /root/root_src/interpreter/cling/tools/plugins/clad/CMakeLists.txt:27 (endif). with mis-matching arguments.; This warning is for project developers. Use -Wno-dev to suppress it.; ```. @bellenot,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16701:114,log,logical,114,https://root.cern,https://github.com/root-project/root/pull/16701,1,['log'],['logical']
Testability,Fixes the issue raised in the [forum](https://root-forum.cern.ch/t/error-bars-drawn-in-wrong-place-if-setlogx/37507?u=mwilkins) where error bars were drawn in the wrong place if using a log scale in x.; Resolves the [JIRA task](https://sft.its.cern.ch/jira/browse/ROOT-10505).,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4755:186,log,log,186,https://root.cern,https://github.com/root-project/root/pull/4755,1,['log'],['log']
Testability,"Fixes the nightly failure. I could not have anticipated this, because the PR tests of the PR that caused the regression were just fine:; https://github.com/root-project/root/actions/runs/8426692299. It seems the build configuration of the scheduled builds in inconsistent with the PR builds: it misses `mathmore=ON`. Follows up on https://github.com/root-project/root/pull/14743.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15058:77,test,tests,77,https://root.cern,https://github.com/root-project/root/pull/15058,1,['test'],['tests']
Testability,Fixes this issue: http://cdash.cern.ch/testSummary.php?project=1&name=tutorial-hist-candlehisto&date=2017-02-24,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/368:39,test,testSummary,39,https://root.cern,https://github.com/root-project/root/pull/368,1,['test'],['testSummary']
Testability,Fixing failures in stress-test:; `; Error in <TCling::RegisterModule>: cannot find dictionary module libEvent_rdict.pcm; `,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3733:26,test,test,26,https://root.cern,https://github.com/root-project/root/pull/3733,1,['test'],['test']
Testability,Fixing filemerger test and usage of __FAST_MATH__ with gcc for Optimized builds,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/971:18,test,test,18,https://root.cern,https://github.com/root-project/root/pull/971,1,['test'],['test']
Testability,"Follow up to https://github.com/root-project/root/pull/14535 , apply the same rule in the rest of the test since it may still fail as seen e.g. in this PR https://github.com/root-project/root/pull/14666",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14738:102,test,test,102,https://root.cern,https://github.com/root-project/root/pull/14738,1,['test'],['test']
Testability,"Follow-up from PR #8897. It seems that system headers for Clang 10.0.1 in EL 8.3 x86_64 do not provide an overload for `abs(std::uint64_t)`, triggering the diagnostic below. Using `(f < 0) ? -f : f` instead. ```; RNTupleSerialize.cxx:734:26: warning: absolute value function 'abs' given an argument of type 'std::int64_t' (aka 'long') but has parameter of type 'int' which may cause truncation of value [-Wabsolute-value]; flags.emplace_back(abs(f));; ```. ## Checklist:; - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9413:478,test,tested,478,https://root.cern,https://github.com/root-project/root/pull/9413,1,['test'],['tested']
Testability,"Follow-up on https://github.com/root-project/root/pull/7198 as promised in https://github.com/root-project/root/pull/7198#issuecomment-782401337. A new testRooParamHistFunc was introduced. The analytic integration of a; RooParamHistFunc is tested both for trivial and non-trivial parameters,; since the integration over subranges was problematic (as reported in; issue #7182).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7322:152,test,testRooParamHistFunc,152,https://root.cern,https://github.com/root-project/root/pull/7322,2,['test'],"['testRooParamHistFunc', 'tested']"
Testability,"Following #12389, we should also change the `EXPECT_EQ`s in the two `EventSections` test cases in `testRooAbsL` to `EXPECT_DOUBLE_EQ`. The same explanation as for that case applies to them and should be added as a comment to the tests:. ```; // We cannot EXPECT_EQ in this test, because we compare actually different; // calculations. The multiple additions and FMA operations involved in the; // calculation of the multiple parts introduces different rounding errors; // on the CPU level than the single calculation over all events at once.; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12832:84,test,test,84,https://root.cern,https://github.com/root-project/root/issues/12832,4,['test'],"['test', 'testRooAbsL', 'tests']"
Testability,"Following objects can be interactively moved now:; `RFrame`, `RHistStatBox`, `RFrameTitle`, RPaletteDrawable`; All position/size changes applied automatically to server side; Introduce moving constrains for `RFrameTitle` and `RPaletteDrawable` - ; they only can be moved/resize in one direction; Main part is in JavaScript code; Can be tested with `tutorials/v7/draw_rh2_colz.cxx` macro",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5744:336,test,tested,336,https://root.cern,https://github.com/root-project/root/pull/5744,1,['test'],['tested']
Testability,"Following the experience with AGC testing, double the default compressed cluster size to 100 MB and also double the maximum uncompressed cluster size to 1 GiB.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16778:34,test,testing,34,https://root.cern,https://github.com/root-project/root/pull/16778,1,['test'],['testing']
Testability,"Following widgets will be web-based by default:; 1. `TCanvas`; 2. `TBrowser`; 3. `TTreeViewer`; 4. `TGeomPainter`. Type of all these widgets can be configured via rootrc file:. ```; # As options for Canvas.Name, ROOT provides TWebCanvas and the legacy TRootCanvas.; Canvas.Name: TWebCanvas. # Type of Browser: TRootBrowser or TRootBrowserLite or ROOT::RWebBrowserImp; Browser.Name: ROOT::RWebBrowserImp. # Type of geometry painter: root or web; GeomPainter.Name: web. # Type of tree viewer: TTreeViewer or RTreeViewer; TreeViewer.Name: RTreeViewer; ```. Any of these settings can be adjusted in local `.rootrc` file. One can provide special config for web-based fit panel.; For the moment `TH1::FitPanel()` always starts classical GUI and there is no configurable plugin for that. ; The only problem - web-based fit panel was not tested for long time.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15913:830,test,tested,830,https://root.cern,https://github.com/root-project/root/pull/15913,1,['test'],['tested']
Testability,Follows the changes introduced in https://reviews.llvm.org/D136030 to be more compatible with std::string and std::string_view. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14785:193,test,tested,193,https://root.cern,https://github.com/root-project/root/pull/14785,1,['test'],['tested']
Testability,"For GDML files without arithmetic expressions in them this should be just as fast and give the same behaviour as before. Parsing is implemented by TFormula, including a pre-processing step to mark constant names with ""[]"" so that TFormula recognizes them as variables. Tested by importing and re-exporting a GDML file used by the NOvA experiment in root5 and root6 and checking that the results were identical, except for the naming of the volumes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/239:269,Test,Tested,269,https://root.cern,https://github.com/root-project/root/pull/239,1,['Test'],['Tested']
Testability,"For RH1 objects one can enable `SecondX()` or/and `SecondY()` draw option. ; In this case histogram painter will draw extra axes on the frame - fully interactive with zooming, independent log scale, ...; Provide extra attributes for secondary axes in RFrame; Provide example in tutorials: https://jsroot.gsi.de/dev/examples.htm?more#v7_rh1_twoaxes. Now works only with RH1, can be extend for basic objects like RLine, RText, ...",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8184:188,log,log,188,https://root.cern,https://github.com/root-project/root/pull/8184,1,['log'],['log']
Testability,For Ubuntu 22.04 we will otherwise get a build error.; See https://github.com/xrootd/xrootd/issues/1666. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10322:170,test,tested,170,https://root.cern,https://github.com/root-project/root/pull/10322,1,['test'],['tested']
Testability,For Ubuntu 22.04 we will otherwise get a build error.; See https://github.com/xrootd/xrootd/issues/1666. (cherry picked from commit f4bd8e740a99828d1232494b9d92a25fe2c39f65). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10374:240,test,tested,240,https://root.cern,https://github.com/root-project/root/pull/10374,1,['test'],['tested']
Testability,"For all fields but the nullable field, all the column representations of a given field have the same in-memory type. This is used to create a central helper in `RFieldBase` that implements the column creation logic, given the list of in-memory types.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16116:209,log,logic,209,https://root.cern,https://github.com/root-project/root/pull/16116,1,['log'],['logic']
Testability,"For call chains where an inner function returns an `RResult` of a different template than the outer `RResult` return type, we cannot use `R__FORWARD_RESULT`. Instead we need to test the inner type for an error state and can, in case of an error, use `return R__FORWARD_ERROR`. Discussed in #5934. The PR also comes with a minor simplification for `RResult<T>::Forward()`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6039:177,test,test,177,https://root.cern,https://github.com/root-project/root/pull/6039,1,['test'],['test']
Testability,"For clang, this facilitates auto vectorisation by disabling the side effects of `std::` math functions. This was recommended by @hageboeck in this issue thread:; https://github.com/root-project/root/issues/7032#issuecomment-773951513. In particular, this will benefit the [computation of the log-likelihood](https://github.com/root-project/root/blob/master/roofit/roofitcore/src/RooAbsPdf.cxx#L736) if `vdt` is not used. One can try this little example to see that it works:; ```C++; // compile with:; // clang++ -march=native -o test test.cc -Rpass-analysis=loop-vectorize -Rpass=loop-vectorize -Rpass-missed=loop-vectorize -O3; // or with no-math-errno to disable the side effects of std:: math functions:; // clang++ -march=native -o test test.cc -Rpass-analysis=loop-vectorize -Rpass=loop-vectorize -Rpass-missed=loop-vectorize -O3 -fno-math-errno. #include <vector>; #include <iostream>; #include <cmath>. int main() {. std::vector<double> vals(1000, 1.1);. for(std::size_t i = 0; i < vals.size(); ++i) {; vals[i] = std::log(vals[i]);; }. std::cout << vals[0] << std::endl;. return 0;; }; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7140:292,log,log-likelihood,292,https://root.cern,https://github.com/root-project/root/pull/7140,6,"['log', 'test']","['log', 'log-likelihood', 'test']"
Testability,"For deferred columns (i.e. columns created during late model extension) for subfields that have been created after one or more clusters have already been written, their (synthetic) column ranges were not properly initialized upon read back. This resulted in incorrect metadata and problems reading back the data in the subfields only (so not the complete field they are part of). This PR partly addresses #15661. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15699:434,test,tested,434,https://root.cern,https://github.com/root-project/root/pull/15699,1,['test'],['tested']
Testability,"For example when a user defines a function with the name ""f1gaus"" and then reuses that name it could cause in same case an error parsing the expression.; Example :; ```; TF1 f1(""f1gaus"",""gaus"");; TF1 f2(""f2gaus"",""f1gaus+gaus(3)"");; ```; If the function name is for example ""fgaus"" it was working before, but not if a character number is used before the pre-defined function name such as ""f1gaus"". Add also a test for parsing these cases in TFormulaParsingTest. This commit fixes ROOT-10815",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5872:408,test,test,408,https://root.cern,https://github.com/root-project/root/pull/5872,1,['test'],['test']
Testability,"For my project (based on PyROOT) I regularly test it against decv LCG nightly builds.; For last days I see a significant degradation in the CPU performance ; e.g. for the very simple simple [script](https://gist.github.com/VanyaBelyaev/66b08ae5b974ae3a279e67ddd0ae33e8); I see a huge factor, almost an order of magnitude, degradation CPU performance with respect to ROOT 6.24 or 6.26.; I've checked the exiting dev3 builds and I see tat while even the earliest (laet week Tue) build is much slower than 6.24&6.26, ; but a factor of 2 in the performance comes from the last Friday build. ; Something bad happens between Thu and Fri slots... . You can find some numbers in the comment; to [this gist](https://gist.github.com/VanyaBelyaev/66b08ae5b974ae3a279e67ddd0ae33e8)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11927:45,test,test,45,https://root.cern,https://github.com/root-project/root/issues/11927,1,['test'],['test']
Testability,"For now just add a test for the specific scenario, see description in the commit message. The test will likely fail on many platforms, for reference I leave a log with the RDataFrame verbosity turned up. [many_threads.log](https://github.com/root-project/root/files/15387003/many_threads.log). Look for the lines with `Jitting and executing the following code`, there will be (at least) one like; ```; Info in <[ROOT.RDF] Debug /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RDFUtils.cxx:329 in Long64_t ROOT::Internal::RDF::InterpreterCalc(const std::string &, const std::string &)>: Jitting and executing the following code:. Info in <[ROOT.RDF] Info /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RLoopManager.cxx:917 in void ROOT::Detail::RDF::RLoopManager::Run(bool)>: Finished event loop number 0 (0s CPU, 0.000169039s elapsed).; ```. Note that after the line there is an empty space. This means that the thread is trying to JIT an empty string, which will trigger an exception, as it boils down to doing; ```; root [0] TInterpreter::EErrorCode errorCode(TInterpreter::kNoError);; root [1] gInterpreter->Calc("""", &errorCode);; root [2] errorCode; (TInterpreter::EErrorCode) (TInterpreter::kDangerous) : (unsigned int) 2; ```; And RDF throws always unless the return code is `kNoError`. **Note**: I will introduce the commit with the fix after a first round of failing tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15578:19,test,test,19,https://root.cern,https://github.com/root-project/root/pull/15578,6,"['log', 'test']","['log', 'test', 'tests']"
Testability,"For simplicity and code reusability, this PR suggests to merge the `EvaluateFuncs.h` header and the `AnalyticalIntegrals.h` header into a single header. Also, use `ROOT::Math::inc_gamma_(c)` directly in RooPoisson implementation. This saves us a few function calls and will also make it easier to implement custom pullbacks for the gradient, since the callstack is not as deep. Also, slightly refactor the code for evaluating the interpolations and improve the AD tests for the RooLandau to get more coverage. This is a part of #15502, factored out because these are already meaningful changes without the update to Clad 1.5.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15557:464,test,tests,464,https://root.cern,https://github.com/root-project/root/pull/15557,1,['test'],['tests']
Testability,"For some ROOT files, RDF and TTreeReader failed to retrieve branch `""i.x""`. Fixed by using `FindBranch` instead of `GetBranch` in the relevant routines. ~~Unfortunately, this seems to be a noticeable performance pessimization, but I'm out of ideas.~~ Fixed, see Axel's suggestion. Relevant tests are added, but will fail as long as `GetBranch(""x"")` returns `i.x` instead of the top-level `x` branch. **About test failures**. * the failures in `dataframe_snapshot`, `testTTreeRegressions` and `treetreeplayertestUnit` are those I mention above, and are expected; * if I understand correctly the failures in `roottest_root_tree_selectorreader_make` and `roottest_root_tree_reader_make` show that, surprisingly, `FindBranch` is not strictly more powerful than `GetBranch`: there are nested branches that could be found before and cannot be found now (EDIT: fixed by Axel's suggestion to default to `GetBranch` and go to `FindBranch` only if it returns a nullptr); * I don't understand the failures in `roottest_root_tree_entrylist_make` and `roottest_root_tree_chain_make`, my PR does not touch anything related to TTree/TChain/TEntryList",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5603:290,test,tests,290,https://root.cern,https://github.com/root-project/root/pull/5603,3,['test'],"['test', 'testTTreeRegressions', 'tests']"
Testability,"For some reason, `UNAME` was tested instead of `OS`",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11670:29,test,tested,29,https://root.cern,https://github.com/root-project/root/pull/11670,1,['test'],['tested']
Testability,"For static libraries, the linker can decide to skip it and not include the contained object files. This defeats the purpose of `TestSupport` which registers a global `ForbidDiagnostics noDiagCheckerInstance` to call `SetErrorHandler` and fail the test if there is an unexpected diagnostic. Object libraries, on the other hand, propagate their files directly and are guaranteed to be included. Fixes https://github.com/root-project/root/issues/12828",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13460:128,Test,TestSupport,128,https://root.cern,https://github.com/root-project/root/pull/13460,2,"['Test', 'test']","['TestSupport', 'test']"
Testability,"For the minimization, the RooMinimizer sets the error logging mode; temporarily to `CollectErrors`, which collects all error messages in; strings. This results in a HUGE overhead, which is completely; unnecessary if evaluation error printing is disabled. In that case, the; error evaluation mode should be set to counting only, which is what this; commit implements. This speeds up fits with frequent evaluation errors a lot, for example; the `testNaNPacker` tests are sped up by 25x.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12328:54,log,logging,54,https://root.cern,https://github.com/root-project/root/pull/12328,3,"['log', 'test']","['logging', 'testNaNPacker', 'tests']"
Testability,"For the moment, there is a test for 10k fields, which is dominated by `RContext::MapSchema()` iterating over columns during the writing, and tests for 100k clusters as well as one for 100k cluster groups, which are spending most of their time to find the next cluster during reading.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14365:27,test,test,27,https://root.cern,https://github.com/root-project/root/pull/14365,2,['test'],"['test', 'tests']"
Testability,"Force deserialization also for unevaluated ESTs.; Deserializing the decl chain (as part of the linkage spec calculation); will update the EST between Start and End EH emission, causing an; asymmetry and triggering the assert. This forces the decl chain to be; loaded. Fixes roottest/root/treeformula/stl/assertSparseSelection.C on MacOS.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5534:218,assert,assert,218,https://root.cern,https://github.com/root-project/root/pull/5534,2,['assert'],"['assert', 'assertSparseSelection']"
Testability,"Formerly the children count of each node was not reset after the first event loop,; with the consequence that the event loop would never be quit early, even if all ranges had been exhausted. Some changes to the children count logic were necessary to correctly handle all cases.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/713:226,log,logic,226,https://root.cern,https://github.com/root-project/root/pull/713,1,['log'],['logic']
Testability,Found by the conda nightly . ```; 2024-07-17T04:49:33.5552609Z /home/conda/feedstock_root/build_artifacts/root_base_1721190805440/work/root-source/math/mathcore/test/testGradient.cxx:467:36: error: 'setprecision' is not a member of 'std'; 2024-07-17T04:49:33.5632853Z 467 | std::cout << std::fixed << std::setprecision(4);; ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16043:161,test,test,161,https://root.cern,https://github.com/root-project/root/pull/16043,2,['test'],"['test', 'testGradient']"
Testability,"Frame). gr = ROOT.TGraphAsymmErrors(nPoints, data_x, data_y, unc_x_lo, unc_x_hi, unc_y_lo, unc_y_hi); gr.SetMarkerColor(2); gr.SetLineColor(ROOT.kRed); gr.SetMarkerStyle(20); gr.SetMarkerColor(ROOT.kBlue); gr.SetMarkerSize(1.5); gr.SetLineWidth(3); gr.Draw(""same PE0""). canv.Print(""testErrorGraph_v1.pdf""); ```. **testErrorGraph_v2**; ```Python; import ROOT ; from array import array. ROOT.gROOT.SetBatch(True); ROOT.gStyle.SetEndErrorSize(10). nPoints = 10; # Set ymin and ymax on purpose so that some error bars should be go beyon this range ; ymax = 4; # Set ymin > 0 since here we use log scale ; ymin = 0.1. # Data x, y; data_x = array('d', list(range(nPoints))); data_y = array('d', [2.]*nPoints). # x and y up/down errors ; # Increasing y-error for each points; unc_y_lo = array('d', [0.5*(i+1) for i in range(nPoints)]); unc_y_hi = array('d', [0.5*(i+1) for i in range(nPoints)]); unc_x_lo = array('d', [0]*nPoints); unc_x_hi = array('d', [0]*nPoints). # Make last point negative ; data_y[-1] = -1. canv = ROOT.TCanvas(""c"",""c""). canv.cd(); pad = ROOT.TPad(""pad"", ""pad"", 0.1, 0.1, 0.9, 0.9); pad.Draw(); pad.cd(). # Make the plot with bottom margin = 0 and something different than 0 ; # observe the difference for the last point ; pad.SetBottomMargin(0.); #pad.SetBottomMargin(0.1); pad.SetLogy(). xminFrame = min(data_x) - 0.5 ; xmaxFrame = max(data_x) + 0.5 ; yminFrame = ymin; ymaxFrame = ymax . drawframe = pad.DrawFrame(xminFrame, yminFrame, xmaxFrame, ymaxFrame). gr = ROOT.TGraphAsymmErrors(nPoints, data_x, data_y, unc_x_lo, unc_x_hi, unc_y_lo, unc_y_hi); gr.SetMarkerColor(2); gr.SetLineColor(ROOT.kRed); gr.SetMarkerStyle(20); gr.SetMarkerColor(ROOT.kBlue); gr.SetMarkerSize(3); gr.SetLineWidth(3); gr.Draw(""same PE0""). canv.Print(""testErrorGraph_v2.pdf""); ```. ### ROOT version. I think all versions are affected but I tested it with ROOT `6.30/02` and `6.30/00`. ### Installation method. Build from source. ### Operating system. Linux, MacOs. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16070:5266,test,tested,5266,https://root.cern,https://github.com/root-project/root/issues/16070,1,['test'],['tested']
Testability,"From SemaDeclCXX.cpp:; ```; C++ [namespace.unnamed]p1. An unnamed-namespace-definition behaves as if it; were replaced by; namespace unique { /* empty body */ }; using namespace unique;; namespace unique { namespace-body }; where all occurrences of 'unique' in a translation unit are replaced by the same; identifier and this identifier differs from all other identifiers in the entire; program.; ```; Thus, the first declaration of an unnamed namespace creates an implicit UsingDirectiveDecl that makes the names available in the parent DC. This pull request resets the anonymous namespace for the parent DeclContext when such first declaration is unloaded, so that the implicit UsingDirectiveDecl is created again when parsing the next anonymous namespace. ## Changes or fixes:; - Reset the anonymous namespace for the parent DeclContext for the case described above. ## Checklist:; - [X] tested changes locally. This PR fixes #7483.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9998:891,test,tested,891,https://root.cern,https://github.com/root-project/root/pull/9998,1,['test'],['tested']
Testability,From Timur! Fixes black area on top of canvas region in non-batch (i.e. interactive) GUI save-as. I.e. fixes issue #13964. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13970:188,test,tested,188,https://root.cern,https://github.com/root-project/root/pull/13970,1,['test'],['tested']
Testability,"From this simple reproducer:. ```cpp; #include <TCanvas.h>; #include <TFile.h>; #include <TTree.h>. #include <ROOT/RDataFrame.hxx>; #include <iostream>; #include <string>; #include <vector>. void generateData(const char *filename, int n, double value); {; TFile f{filename, ""RECREATE"", ""file for testing""};. double var1;. TTree tree{""AnalysisTree"", ""AnalysisTree""};; tree.Branch(""column1"", &var1, ""column1/D"");. for (unsigned int i = 0; i < n; i++) {; var1 = value;; tree.Fill();; }. tree.Write();; f.Write();; f.Close();; }. int main(); {; std::vector<std::string> fileNames{""test1.root"", ""test2.root""};; std::vector<double> weights{2, 0.5};. // Create two files with trees for testing; // 10 entries of 0.5; generateData(""test1.root"", 10, 0.5);; // 10 entries of 2; generateData(""test2.root"", 10, 2);. // Create Dataframe from files; ROOT::RDataFrame df(""AnalysisTree"", fileNames);. // Define weights depending on input file; auto df2 =; df.DefinePerSample(""weightbysample"", [&fileNames, &weights](unsigned int, const ROOT::RDF::RSampleInfo &id) {; for (unsigned int i = 0; i < fileNames.size(); i++); if (id.Contains(fileNames[i])); return weights[i];; return -1.;; });. auto s0 = df2.Sum<double>(""weightbysample"");; auto d0 = df2.Display({""weightbysample""}, 20);; std::cout << ""sum of weights: "" << *s0 << ""\n"";; d0->Print();. auto s1 = df2.Sum<double>(""weightbysample"");; auto d1 = df2.Display({""weightbysample""}, 20);; std::cout << ""sum of weights: "" << *s1 << ""\n"";; d1->Print();. }; ```. The `DefinePerSample` operation defines a column of 20 entries, 10 should have value `2`, the following 10 should have value `0.5`. The first set of `Sum` and `Display` operations show the correct behaviour, then the second set of operations reports a wrong result. All the 20 entries of the column are `0.5`:. ```; sum of weights: 25; +-----+----------------+; | Row | weightbysample | ; +-----+----------------+; | 0 | 2.0000000 | ; +-----+----------------+; | 1 | 2.0000000 | ; +-----+----------------+",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12043:296,test,testing,296,https://root.cern,https://github.com/root-project/root/issues/12043,2,['test'],['testing']
Testability,Full Chain Graphic Testing with Headless Chrome Browser,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16322:19,Test,Testing,19,https://root.cern,https://github.com/root-project/root/pull/16322,1,['Test'],['Testing']
Testability,"Full bug report is at https://bugs.gentoo.org/879323. Important part of the build log is below.; ```. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/jets.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/jets.C; /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/zebra.f:767:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]; 767 | + ISTAT); | ^; /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:107:6: note: ‘cfget_’ was previously declared here; 107 | void cfget_(int *lundes, int *medium, int *nwrec, int *nwtak, char *mbuf,; | ^; /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:107:6: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used; /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:398:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]; 398 | CFSTAT = CFSTATI (NAME, INFO, LGN); | ^; /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: type mismatch in parameter 4; 171 | int cfstati_(char *fname, int *info, int *lgname); | ^; /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: type ‘void’ should match type ‘long int’; /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: ‘cfstati_’ was previously declared here; /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:386:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]; 386 | CALL CFOPEI (LUNDES,MEDIUM,NWREC,NVMODE,NBUF,NAME,ISTAT,LGN); | ^; /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:225:6: note: type mismatch in parameter 9; 225 | void cfopei_(int *lundes, int *medium, int *nwrec, int *mode, int *nbuf,; | ^; /var/tmp/portage/s",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11657:82,log,log,82,https://root.cern,https://github.com/root-project/root/issues/11657,1,['log'],['log']
Testability,"Fully exclude source directory from include paths - for dictionary generation and for objects compilation. Significantly reduce list of dirs in CXX flags.; Makes dependency files very clear - `${CMAKE_BINARY_DIR}/include` used in 99%, rest are special includes from `res/` subfolders.; Tested with and without cxx modules",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5170:286,Test,Tested,286,https://root.cern,https://github.com/root-project/root/pull/5170,1,['Test'],['Tested']
Testability,"Fully implement and test the new `Offset(""bin"")` feature over the test matrix that is the tensor product of `BatchMode()`, doing and extended fit, RooDataSet vs. RooDataHist, and SumW2 correction. The test should compute the likelihood for a template PDF created from the data, and it should be numerically compatible with zero. ```C++; void testOffsetBin(); {; using namespace RooFit;; using RealPtr = std::unique_ptr<RooAbsReal>;. // Create extended PDF model; RooRealVar x(""x"", ""x"", -10, 10);; RooRealVar mean(""mean"", ""mean"", 0, -10, 10);; RooRealVar sigma(""sigma"", ""width"", 4, 0.1, 10);; RooRealVar nEvents{""n_events"", ""n_events"", 10000, 100, 100000};. RooGaussian gauss(""gauss"", ""gauss"", x, mean, sigma);; RooAddPdf extGauss(""extGauss"", ""extGauss"", gauss, nEvents);. std::unique_ptr<RooDataSet> data{extGauss.generate(x)};. {; // Create weighted dataset and hist to test SumW2 feature; RooRealVar weight(""weight"", ""weight"", 0.5, 0.0, 1.0);; auto dataW = std::make_unique<RooDataSet>(""dataW"", ""dataW"", RooArgSet{x, weight}, ""weight"");; for (std::size_t i = 0; i < data->numEntries(); ++i) {; dataW->add(*data->get(i), 0.5); // try weights that are different from unity; }; std::swap(dataW, data); // try to replace the original dataset with weighted dataset; }. std::unique_ptr<RooDataHist> hist{data->binnedClone()};. data->Print();; hist->Print();. // Create template PDF based on data; RooHistPdf histPdf{""histPdf"", ""histPdf"", x, *hist};; RooAddPdf extHistPdf(""extHistPdf"", ""extHistPdf"", histPdf, nEvents);. auto& pdf = extHistPdf;. auto const bm = ""off""; // it should also work work BatchMode(""cpu""). double nllVal01 = RealPtr{pdf.createNLL(*data, BatchMode(bm), Extended(false))}->getVal();; double nllVal02 = RealPtr{pdf.createNLL(*data, BatchMode(bm), Extended(true)) }->getVal();; double nllVal03 = RealPtr{pdf.createNLL(*hist, BatchMode(bm), Extended(false))}->getVal();; double nllVal04 = RealPtr{pdf.createNLL(*hist, BatchMode(bm), Extended(true)) }->getVal();. double nllVal1 = RealPtr",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11965:20,test,test,20,https://root.cern,https://github.com/root-project/root/issues/11965,5,['test'],"['test', 'testOffsetBin']"
Testability,"Fully implement the `Offset(""bin"")` feature also for RooDataSet, both; with CPU/CUDA BatchMode and the legacy tests statistics. This is done now by introducing a new element in the computation graph:; an ""offset pdf"" that is created as a RooHistPdf from the observed data,; and it is used to get the counterterm in each bin. It was validated with the `rf614` tutorial that this binwise offsetting; is inteed fixing the convergense problems that the simple offsetting by; the initial NLL value can't fix. Closes https://github.com/root-project/root/issues/11965.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13665:110,test,tests,110,https://root.cern,https://github.com/root-project/root/pull/13665,1,['test'],['tests']
Testability,"Function `sqlite3_prepare` in `sql/sqlite/src/TSQLiteServer.cxx` with info about [tail](https://sqlite.org/c3ref/prepare.html). `sqlite3_prepare` only compile the first statement in ""sql"", so ""tail"" is left pointing to what remains uncompiled. ```; void test(); {; TSQLServer *db = TSQLServer::Connect(""sqlite://test.sqlite"", """", """");; TSQLResult *res = db->Query(""CREATE TABLE test(name TEXT)"");; if (res) { res->Next(); delete res; }; res = db->Query(""INSERT INTO test VALUES('1st');""; ""INSERT INTO test VALUES('2nd');"");; if (res) { res->Next(); delete res; }; }; ```; ```; $ root test.C; root [0]; Processing test.C...; Warning in <TSQLiteServer::Query>: Don't use multiple queries, 'INSERT INTO test VALUES('2nd');' query was ignored; root [1]; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14087:254,test,test,254,https://root.cern,https://github.com/root-project/root/pull/14087,8,['test'],['test']
Testability,Functionality not backported to 614 was showcased.; This fixes all these failures: http://cdash.cern.ch/testDetails.php?test=45078185&build=514176,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2101:104,test,testDetails,104,https://root.cern,https://github.com/root-project/root/pull/2101,2,['test'],"['test', 'testDetails']"
Testability,"Further reduction in lock contention when using RDataFrame with a large number of threads and/or files, by migrating one hot spot in TBufferFile to use read-write locks instead of only write locks. On a small test with 256 threads the reduced lock contention reduces wall time from 25 minutes to 19 seconds, and increases CPU usage from 400% to 4000%. This PR also fixes an uninitialised variable potentially affecting the global read-write lock.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7105:209,test,test,209,https://root.cern,https://github.com/root-project/root/pull/7105,1,['test'],['test']
Testability,"GH currently puts this under seemingly arbitrary jobs, such as the unrelated SonarCloud. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13151:154,test,tested,154,https://root.cern,https://github.com/root-project/root/pull/13151,1,['test'],['tested']
Testability,"Generalize the tests in `testGradient.cxx` to include the case of multidimensional functions. With these changes, there are 18 use cases covered, from all the possible combinations of. * Type of gradient: Chi2, LogL or PoissonLogL; * Number of dimensions: 1 or 2; * Data type: scalar or vectorial; * Execution policy: serial or multithread. excluding the scalar serial case, which is the base case whose solution is assumed to be correct. Also, a bug in the memory management of the data coordinates in the gradient evaluation has been fixed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/887:15,test,tests,15,https://root.cern,https://github.com/root-project/root/pull/887,3,"['Log', 'test']","['LogL', 'testGradient', 'tests']"
Testability,"Get rid of the remaining memory leaks, avoid code duplication for simultaneous binned fit test, etc. There is also an additional commit that continues the campaign of making the `roofitcore` tests depend less on `roofit`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11793:90,test,test,90,https://root.cern,https://github.com/root-project/root/pull/11793,2,['test'],"['test', 'tests']"
Testability,GetCollectionProxy during the setting of fCollProxy calls; TBranchElement::GetInfoImp that in some cases sets fCollProxy; and ends up recording it (sometimes) in the action sequence.; When GetCollectionProxy sets it too (i.e. change it) there is; now a disconnect between the branch and the action sequences that; lead to the action sequence to used an unset collection proxy:. Fatal in <TGenCollectionProxy>: Size> Logic error - no proxy object set.; aborting,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2834:416,Log,Logic,416,https://root.cern,https://github.com/root-project/root/pull/2834,2,['Log'],['Logic']
Testability,"GetTreeFullPaths assumed that the first occurrence of "":/"" was; the separator between filename and tree name in strings such as; ""file.root:/dir/tree"". However, the separator is the _last_; occurrence of "":/"" -- e.g. if the file is read via a remote; protocol, its name starts with ""protocol://"". This logic is of course still broken in case the name of the tree; or the one of the directory that contains it contains "":/"", we; do not support that case. This fixes #10216.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10217:302,log,logic,302,https://root.cern,https://github.com/root-project/root/pull/10217,2,['log'],['logic']
Testability,"GitHub repacks archives from time to time, which changes the hash. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12175:132,test,tested,132,https://root.cern,https://github.com/root-project/root/pull/12175,1,['test'],['tested']
Testability,Give more unique filenames in entrylist tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9415:40,test,tests,40,https://root.cern,https://github.com/root-project/root/pull/9415,1,['test'],['tests']
Testability,"Given a string expression such as ""alias.subbranch"" (where; `subbranch` is _not_ also the name of a valid data member of; the type of the ""alias"" top-level branch), we used to transform; the expression to `[](T &var0) { return var0.subbranch; }`,; which does not compile. Now aliases in jitted expressions are resolved in a first step; and only then we try to match the expression against known branch; names, fixing the problem. This PR fixes https://github.com/root-project/root/issues/11207 (and adds a test). - [x] add a less weird test, e.g. based on `std::vector<XYZVector>`, for which we should have dictionaries",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11216:506,test,test,506,https://root.cern,https://github.com/root-project/root/pull/11216,2,['test'],['test']
Testability,"Given the name, the expectation seems to be that `R__ASSERT(e)` will not; evaluate `e` if NDEBUG is defined, just like `assert()`. Use `(void)0` such that `R__ASSERT` can be followed by a semicolon, yet; the compiler knows that there is no instruction to be emitted. Even with this, `R__ASSERT` and `assert` provide different functionality,; with the former calling `::Fatal()`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8587:120,assert,assert,120,https://root.cern,https://github.com/root-project/root/pull/8587,2,['assert'],['assert']
Testability,Given the very small statistics used (especially on MAcoS) due to th eslow time in evaluating we disable the check on the regression error obtained. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16002:214,test,tested,214,https://root.cern,https://github.com/root-project/root/pull/16002,1,['test'],['tested']
Testability,"Given two consecutive identifiers, the first token is necessarily a type name, e.g. in `foo bar`, `foo` is a type. This pull-request disables runtime resolution for this case. Previously, the lookup was returning a VarDecl of type `DependentTy` regardless of the identifier being probably a mistyped type. This caused clang to start parsing an expression, which ended up in misleading diagnostic messages. More details here: https://sft.its.cern.ch/jira/browse/ROOT-5268. Sibling PR in roottest: https://github.com/root-project/roottest/pull/786. ## Changes or fixes:; - Disable runtime resolution for identifiers that are followed by an identifier token. ## Checklist:; - [X] tested changes locally. This PR fixes JIRA issue ROOT-5268.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9160:677,test,tested,677,https://root.cern,https://github.com/root-project/root/pull/9160,1,['test'],['tested']
Testability,GoogleTest (and hence ROOT with testing on) fails to build on GCC 4.8.5,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9370:32,test,testing,32,https://root.cern,https://github.com/root-project/root/issues/9370,1,['test'],['testing']
Testability,Gtest requires to have one TEST() invocation declared while to be reg…,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5523:27,TEST,TEST,27,https://root.cern,https://github.com/root-project/root/pull/5523,1,['TEST'],['TEST']
Testability,HAS_fno_rtti - Success; -- Performing Test C_HAS_Wno_strict_overflow; -- Performing Test C_HAS_Wno_strict_overflow - Success; -- Performing Test C_HAS_Wno_maybe_uninitialized; -- Performing Test C_HAS_Wno_maybe_uninitialized - Success; -- Performing Test C_HAS_Wno_parentheses_equality; -- Performing Test C_HAS_Wno_parentheses_equality - Success; -- Looking for m; -- Looking for m - not found; -- Use SSL API VERSION 1.1 for civetweb; -- Performing Test GCC_HAS_BIDI_CHARS_FLAG; -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Failed; -- Performing Test found_setresuid; -- Performing Test found_setresuid - Success; -- Performing Test found_stdstringview; -- Performing Test found_stdstringview - Success; -- Performing Test found_stod_stringview; -- Performing Test found_stod_stringview - Failed; -- Performing Test found_opplusequal_stringview; -- Performing Test found_opplusequal_stringview - Success; -- Performing Test found_stdapply; -- Performing Test found_stdapply - Success; -- Performing Test found_stdinvoke; -- Performing Test found_stdinvoke - Success; -- Performing Test found_stdindexsequence; -- Performing Test found_stdindexsequence - Success; -- Performing Test found_attribute_always_inline; -- Performing Test found_attribute_always_inline - Success; -- Performing Test has_found_attribute_noinline; -- Performing Test has_found_attribute_noinline - Success; -- Performing Test found_hardware_interference_size; -- Performing Test found_hardware_interference_size - Failed; Running /home/razorr/Softwares/Installed/HEP/Root/gitclone/build/unix/compiledata.sh; Making /home/razorr/Softwares/Installed/HEP/Root/build/ginclude/compiledata.h; -- ROOT Configuration. System Linux-5.15.37-1-lts; Processor 2 core Intel(R) Core(TM) i3-5010U CPU @ 2.10GHz (x86_64); Build type Release; Install path /home/razorr/Softwares/Installed/HEP/Root/install; Compiler GNU 11.2.0; Compiler flags:; C -Wno-implicit-fallthrough -pipe -Wall -W -pthread -O3 -DNDEBUG; C++ -std=c++17 -Wno-implicit-fa,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10528:10170,Test,Test,10170,https://root.cern,https://github.com/root-project/root/issues/10528,22,['Test'],['Test']
Testability,"Handle unknown feature and/or option, addressing the issue #7662 on Windows. Gives something like:; ```; C:\Users\sftnight>root-config --flags; --flags: Unknown option or argument!. Usage: root-config [options]. --arch Print the architecture (compiler/OS); --platform Print the platform (OS); --libs Print regular ROOT libraries; --glibs Print regular + GUI ROOT libraries; --evelibs Print regular + GUI + Eve libraries; --cflags Print compiler flags and header path; --bindir Print the executable directory; --libdir Print the library directory; --incdir Print the header directory; --etcdir Print the configuration directory; --tutdir Print the tutorials directory; --srcdir Print the top of the original source directory; --auxlibs Print auxiliary libraries; --config Print arguments used for configuration with CMake; --features Print list of all supported features; --has-<feature> Test if <feature> is compiled in; --version Print the ROOT version; --git-revision Print the ROOT git revision number; --python-version Print the Python version used by ROOT; --python2-version Print the Python2 version used by PyROOT; --python3-version Print the Python3 version used by PyROOT; --ncpu Print number of available (hyperthreaded) cores; --cc Print alternative C compiler specified when ROOT was built; --cxx Print alternative C++ compiler specified when ROOT was built; --f77 Print alternative Fortran compiler specified when ROOT was built; --ld Print alternative Linker specified when ROOT was built; --help Print this message. C:\Users\sftnight>root-config --has-feet; --has-feet: unknown feature!. C:\Users\sftnight>root-config --has-feet --has-pyroot; --has-feet: unknown feature! yes; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7663:887,Test,Test,887,https://root.cern,https://github.com/root-project/root/pull/7663,1,['Test'],['Test']
Testability,Handling modulemap files may issue parsing errors or not found errors and our diagnostics client should be prepared for it. This patch fixes an assertion in clang when we see duplicate modulemap files.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5176:144,assert,assertion,144,https://root.cern,https://github.com/root-project/root/pull/5176,1,['assert'],['assertion']
Testability,"Having tests in the `test/` directory is quite fragile for configuration reasons, because this is separate CMake project. Therefore, it doesn't share the same configuration variables, which is easy to forget. The RooFit stress tests have been moved already, and this commit moves the remaining RooFit tests. The code is reformatted with the ROOT `clang-format` style on this occasion. Also, the `longtest` label is removed form one of the tests because it doesn't actually take a long time to run (only a few seconds).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15490:7,test,tests,7,https://root.cern,https://github.com/root-project/root/pull/15490,5,['test'],"['test', 'tests']"
Testability,"Hello everyone!; This is Akshay Vashistha, a GSOC student working on AutoEncoders. Currently I have implemented the Denoise Layer and working on stacking up the layers. After this, I will write some tests for same.; My next patch will have a properly implemented stacked layer architecture and some tests for verifying the correctness.; Thanks",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/686:199,test,tests,199,https://root.cern,https://github.com/root-project/root/pull/686,2,['test'],['tests']
Testability,"Hello everyone,; This is Akshay Vashistha, a GSOC student working on AutoEncoder implementation. Here is my first patch. It has a base class layer for autoencoders, a denoise layer and StackedNets. The denoise layer can corrupt, encode and reconstruct the input. The stacked layer has both Pretraining and finetuning steps. ; Currently working on writing tests to check the correctness of code. In my next patch I will add some verified tests with required changes. Thank You.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/708:355,test,tests,355,https://root.cern,https://github.com/root-project/root/pull/708,2,['test'],['tests']
Testability,"Hello everyone,; This is Akshay Vashistha, a GSOC student working on Autoencoder implementation. Here is my first patch. Currently it has a denoise layer and finetune layer for stacking.; In my next patch I will add verified tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/696:225,test,tests,225,https://root.cern,https://github.com/root-project/root/pull/696,1,['test'],['tests']
Testability,"Hello, . I would like to report that the `hadd` command is consuming a large amount of RAM when hadding input files that have several TDirectories. ; The memory is increasing linearly as the directories are processed by the hadd command. . I think (I did not tested it fully), by looking at the `TFileMerger` class it seems the `target` directory is not deleted after having called ; ```c++; target->SaveSelf(kTRUE);; ```; I guess the issue is coming from that . **This becomes a real issue as if you have a lot of histograms stored in different directories (which is the case of our analysis) then the hadding command is killed on lxplus. I have seen a hadd reaching 21 GB of memory used...**. **Here is a way to reproduce the issue and that shows the RAM consumption can be strongly reduced.**. I attach a `tar.gz` file which contains 2 scripts: ; [haddIssue.tar.gz](https://github.com/root-project/root/files/12429530/haddIssue.tar.gz). * `createFile.cxx` for creating the input file which will be used to illustrate the issue ; Compilation and execution (it takes ~10 min to create the file) ; ```bash; g++ createFile.cxx -o createFile.exe -Wall $(root-config --cflags --glibs); ./createFile.exe; ``` ; --> this will create the file `myFile.root` which contains 1000 directories, each directory containing `10k` histograms ; ; * `fasterCustomHadd.cxx` script which **allows doing a hadd but without a huge RAM consumption**; Compilation and execution ; ```bash; g++ fasterCustomHadd.cxx -o fasterCustomHadd.exe -Wall $(root-config --cflags --glibs); ./fasterCustomHadd.exe -j 1 -f myOtherFile2.root myFile.root ; ```; NB: please use the `-j 1` to request one thread as otherwise the script is creating partial hadded files ; ; A comparison with ; ```; hadd -f myOtherFile.root myFile.root ; ``` . Gives (see screen shots below): ; * `hadd`: at the very end the RAM used is **`4.4 GB`** (memory increasing during the whole processing of directories) ; * `fasterCustomHadd` the RAM used is only **`~",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13531:259,test,tested,259,https://root.cern,https://github.com/root-project/root/issues/13531,1,['test'],['tested']
Testability,"Hello,. First of all sorry for all the mess I made with these pull requests. This is my first try and I did not really understood how GitHub works therefore my previous pull request was this messy and I decided to withdraw it and clean everything up before I request it again. And here we are, I ran some additional bugfixing and the ROOT tests which succeeded. Furthermore I tested my new class and everything I tried worked so I think now it's time to request the pull again. **Explanation**; My implementation is named TGraphMultiErrors and is basically a TGraphAsymmErrors with the possibility to include an unlimited amount of different types of y-Errors.; The whole functionality and naming convention of my class is strongly based on the TGraphAsymmErrors class. All functionalities of the TGraphAsymmErrors have been reimplemented. Furthermore like any other TGraph class it inherits from TGraph and has therefore all of it’s functionalities. I attached an example plot as a png picture. It's macro to be produced is included in the description part of the TGraphPainter class. **Differences to TGraphAsymmErrors**; Everywhere TGraphAsymmErrors uses arrays for the y-Errors, my class uses two dimensional arrays (Double_t**) of which the first dimension represents the index of the error dimension and the second one the point. It is assumed that the first y-Error is the statistical one and all following are systematical ones. Therefore when the statistical errors are being computed by a function everything applies to only the first error dimension.; In case a single error on y is required (Like for fitting) the errors are being summed according to the value of fSumErrorsMode which can be at the moment TGraphMultiErrors::kOnlyFirst for only returning the error of the first error type (usally the statistic one), TGraphMultiErrors::kSquareSum for returning the squared sum of the errors of all types (Gaussian propagation) or TGraphMultiErrors::kSum for just returning the sum of the e",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3452:339,test,tests,339,https://root.cern,https://github.com/root-project/root/pull/3452,2,['test'],"['tested', 'tests']"
Testability,"Hello,. I implemented the classes TLeafF16 and TLeafD32 which allow to store floating point values using the truncation methods from TBuffer. As the names imply one is meant for the Float16_t type and the other one for the Double32_t type. The letters to be used in the leaflist are the small letters f and d which sounds reasonable to me since the capital letters F and D are being used for the regular Float_t and Double_t datatypes. Furthermore a range for the datatypes can be specified using the syntax from the TStreamerElement::GetRange() function. To avaid conflicts with the declaration of array branches the range specifier has to be attached to the data type letter instead of the variable name. I tested the implementation locally and it is working very well. The file size is being significantly reduced using the Float16_t or Double32_t implementation instead of the usual ones. I think this is quite useful since even the precision of Float_t sometimes overshoots the requirements and occupies an unnecessarily large amount of memory. All the best,; Simon Spies",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3463:709,test,tested,709,https://root.cern,https://github.com/root-project/root/pull/3463,1,['test'],['tested']
Testability,"Hello,. I observe a constant (16MB) memory increase when writing to ``TFile`` or ``TMemFile`` with ``WriteObjectAny`` a ``std::vector`` of chars (also have seen this with TArrayC). Strangely, this does not happen when writing ``vector<float>``. ; This is with ROOT 6.20/08.; Attached [demoMem.C.gz](https://github.com/root-project/root/files/5999433/demoMem.C.gz) reproduces the problem:; ````; root -b -q demoMem.C+; Memory at start of memory-based file test : write vector<unsigned char>(100000000); RSS: 429.33(delta = 429.33) VMEM: 481.59(delta = 481.59) MB; Iter: 0 Memory after writing vector<unsigned char>(100000000) : RSS: 445.76(delta = 16.43) VMEM: 577.27(delta = 95.68) MB; Iter: 1 Memory after writing vector<unsigned char>(100000000) : RSS: 461.64(delta = 15.88) VMEM: 672.46(delta = 95.18) MB; Iter: 2 Memory after writing vector<unsigned char>(100000000) : RSS: 477.64(delta = 16.00) VMEM: 767.83(delta = 95.37) MB; Iter: 3 Memory after writing vector<unsigned char>(100000000) : RSS: 493.64(delta = 16.00) VMEM: 863.20(delta = 95.37) MB; Iter: 4 Memory after writing vector<unsigned char>(100000000) : RSS: 509.65(delta = 16.00) VMEM: 958.57(delta = 95.37) MB; Iter: 5 Memory after writing vector<unsigned char>(100000000) : RSS: 525.65(delta = 16.00) VMEM: 1053.94(delta = 95.37) MB; Iter: 6 Memory after writing vector<unsigned char>(100000000) : RSS: 541.66(delta = 16.00) VMEM: 1149.31(delta = 95.37) MB; Iter: 7 Memory after writing vector<unsigned char>(100000000) : RSS: 557.66(delta = 16.00) VMEM: 1244.68(delta = 95.37) MB; Iter: 8 Memory after writing vector<unsigned char>(100000000) : RSS: 573.66(delta = 16.00) VMEM: 1340.05(delta = 95.37) MB; Iter: 9 Memory after writing vector<unsigned char>(100000000) : RSS: 589.67(delta = 16.00) VMEM: 1435.43(delta = 95.37) MB; Memory at start of memory-based file test : write vector<float>(25000000); RSS: 684.80(delta = 95.13) VMEM: 1530.80(delta = 95.37) MB; Iter: 0 Memory after writing vector<float>(25000000) : RSS: 685.59(d",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7236:455,test,test,455,https://root.cern,https://github.com/root-project/root/issues/7236,1,['test'],['test']
Testability,"Hello,. We are trying to build root branch [v6-26-00-patches](https://github.com/root-project/root/compare/v6-26-00-patches), but it does not compile after commit 80c1ab6b6dab02c46d8cc66262686fd718b57ece. Here the stacktrace:; ```; /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:184:16: error: 'std::string TDirectoryLevelIter::GetContent(const string&)' marked 'override', but does not override; 184 | std::string GetContent(const std::string &kind) override; | ^~~~~~~~~~; /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx: In member function 'std::string TDirectoryLevelIter::GetContent(const string&)':; /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:11: error: 'GetContentKind' was not declared in this scope; did you mean 'GetContent'?; 186 | if (GetContentKind(kind) == kFileName); | ^~~~~~~~~~~~~~; | GetContent; /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:35: error: 'kFileName' was not declared in this scope; 186 | if (GetContentKind(kind) == kFileName); | ^~~~~~~~~; /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:187:17: error: 'fFileName' was not declared in this scope; 187 | return fFileName;; | ^~~~~~~~~; ```; It successfully build up to commit https://github.com/root-project/root/commit/58c6a86fbe840a0f7fdd95d710755e925300120f. We are targeting `el8`, `amd64` and `gcc11`. Could you",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12110:273,test,tests,273,https://root.cern,https://github.com/root-project/root/issues/12110,6,['test'],"['testBuildDir', 'tests']"
Testability,"Hello,. by default I use a display depth of 30 set e.g. via `/etc/X11/xorg.conf.d/90-monitor.conf`; ```; Section ""Monitor""; 	Identifier	""Internal Display""; 	[…]; EndSection. Section ""Screen""; 	Identifier	""Screen0""; 	Device		""…""; 	Monitor		""Internal Display""; 	DefaultDepth	30; EndSection; ```; Then, doing the following:; ```; $ root; root [0] TH1 *t = new TH1I(""test"", ""test"", 2, -.5, 1.5); (TH1 *) 0x…; root [1] t->Fill(1); (int) 2; root [2] t->Draw(); Info in <TCanvas::MakeDefCanvas>: created default TCanvas with name c1; ```; In the window, that opens, I would expect to see axis labels, a stat box etc. This is not the case. If I save the histogram, the labels are visible. The labels are also visible, if I do not set the display depth to 30 (but instead X11 uses a default depth of 24). Could ROOT be fixed, to also handle different display depths then 24 gracefully?. Best regards.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8086:363,test,test,363,https://root.cern,https://github.com/root-project/root/issues/8086,2,['test'],['test']
Testability,"Hello,. it is Vladimir working on the Convolutional Neural Networks in TMVA,; as a part of the Google Summer of Code 2017. This is my first patch for now,; where I have created the entire CNN structure and implemented and tested; the reference architecture. I had some problems with the backpropagation,; so I was not able to test that. For everything else there are tests. In the next patch which I plan to be before the first evaluation starts, I will include a CPU; architecture implementation, and a correct backporpagation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/664:222,test,tested,222,https://root.cern,https://github.com/root-project/root/pull/664,3,['test'],"['test', 'tested', 'tests']"
Testability,"Hello,. the bug this PR is adressing could be seen by random failures of the test gtest-hist-hist-test-TGraphMultiErrorsTests:; - https://epsft-jenkins.cern.ch/job/root-pullrequests-build/74654/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_TGraphMultiErrorsTests/; - https://epsft-jenkins.cern.ch/job/root-pullrequests-build/74449/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_TGraphMultiErrorsTests/; - https://epsft-jenkins.cern.ch/job/root-pullrequests-build/73886/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_TGraphMultiErrorsTests/. I have to apologize for this bug. It was caused by using an attribute to allocate an array before its value had been updated. All the best,; Simon",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4780:77,test,test,77,https://root.cern,https://github.com/root-project/root/pull/4780,8,['test'],"['test', 'test-TGraphMultiErrorsTests', 'testReport']"
Testability,"Hello,. this patch adds the possibility to specify a line width to be used when markers are drawn. Recently I stumbled upon this and searched for an already existing solution, but I could only find other people looking for something like this, so I decided to implement it. Before I start to describe the changes, let me mention the most important point first: I only tested the feature under Linux, since I have neigther a ROOT installation under Windows nor a Mac. Since the feature also changes files associated with drawing under Windows and MacOS, I consider it absolutly mandatory to test the feature under those systems before merging this pull request. Now back to the actual feature. Since an image says more than 1000 words here an image of the outcome using the implemented feature which is also part of the feature description in the class TAttMarker:; ![c](https://user-images.githubusercontent.com/5320187/71742710-ee6cc580-2e62-11ea-900d-ba546e27f474.png). **The attribute fMarkerLineWidth**; The storing of the parameter is done by the attribute fMarkerLineWidth of the TAttMarker class. I checked all daughter classes of TAttMarker for the need of changes due to this addition. Furthermore, I added a line width dropdown field to the TAttMarkerEditor which works the same way as in the TAttLineEditor. Obviosly the line width only makes sense for marker styles that consist of lines and not areas. To check whether the currently set marker style is influenced by the marker line width I added the function HasMarkerLineWidth to TAttMarker. **Marker size and draw method**; Since the calculation of the size of the marker assumed ultimatly thin lines up to now, the bounding box of the marker would have increased when setting a larger marker line width. To counter that, I decreased the marker size by the amount it would have increased due to the line width. However, note that this only works with round line caps and round line joins, since for example with miter joins the boundin",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4721:368,test,tested,368,https://root.cern,https://github.com/root-project/root/pull/4721,2,['test'],"['test', 'tested']"
Testability,"Hello,; This is the Implementation of DataLoader for TMVA according to new design.; - Tutorials updated; - Variable Importance implemented and tested.; - New ROC algorithm implemented; - PyMVA now support python 3. Cheers,; Omar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/119:143,test,tested,143,https://root.cern,https://github.com/root-project/root/pull/119,1,['test'],['tested']
Testability,"Hello: . I came across a problem with ROOT recently, though the program gives the expected result, it ends with the 'corrupted size vs. prev_size' error. Here I show the minimum code that can reproduce the code. Running conditions:; * OS: Linux_CentOS7.7.1908-x86_64-gcc5.2.0; * ROOT: 6.08.00; * GCC: 5.2.0; ; code: ; file1: inc.cxx; ```cpp; #include <map>. // extern std::map<std::string, const double> UNITS;; std::map<std::string, const double> UNITS;; ```; file2: test.cxx; ```cpp; #include <map>. #include ""TGraphErrors.h""; #include ""TH1F.h""; #include ""TCanvas.h"". std::map<std::string, const double> UNITS = {; {"""",	1},; {""mm"", 1e-3},; };. int main() {; 	double value[] = {1, 2, 3, 4, 5};; TCanvas *c = new TCanvas(""c"", ""c"", 1200, 900);; 	TH1F *h = new TH1F(""h"", ""h"", 5, 0.5, 5.5);; 	TGraphErrors *g = new TGraphErrors();; 	for(int i=0; i<5; i++) {; 		g->SetPoint(i, i+1, value[i]);; 		h->Fill(value[i]);; 	}. 	g->SetMarkerStyle(20);; 	g->Draw(""AP"");; 	// h->Draw(""HIST"");; 	c->Print(""test.png"");. return 0;; }; ```; compiling:; * g++ -std=c++11 -fPIC --shared -o inc.so inc.cxx; * g++ -std=c++11 -o test test.cxx inc.so `root-config --libs --glibs --cflags` && ./test; ; result:; ```; ======= Backtrace: =========; /lib64/libc.so.6(+0x80f87)[0x7fd6589a6f87]; /lib64/libc.so.6(+0x8155e)[0x7fd6589a755e]; /lib64/libfreetype.so.6(+0x3ea1c)[0x7fd65771ea1c]; /lib64/libfreetype.so.6(+0x3fa02)[0x7fd65771fa02]; /lib64/libfreetype.so.6(+0x1fd4c)[0x7fd6576ffd4c]; /lib64/libfreetype.so.6(FT_Done_Face+0xa1)[0x7fd6576ffe51]; /root/6.08.00/lib/libGraf.so.6.08(_ZN3TTF7CleanupEv+0x5e)[0x7fd65bb62a7e]; /lib64/libc.so.6(__cxa_finalize+0x9a)[0x7fd65896000a]; /root/6.08.00/lib/libGraf.so.6.08(+0x638a3)[0x7fd65baef8a3]; ======= Memory map: ========; 00400000-0040b000 r-xp 00000000 00:2e 3242707291 /work/test/test; 0060a000-0060b000 r--p 0000a000 00:2e 3242707291 /work/test/test; 0060b000-0060c000 rw-p 0000b000 00:2e 3242707291 /work/test/test; 01644000-02e78000 rw-p 00000000 00:00 0 [heap]; 7fd63800000",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8256:468,test,test,468,https://root.cern,https://github.com/root-project/root/issues/8256,2,['test'],['test']
Testability,Here are some fixes for failing tests.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1638:32,test,tests,32,https://root.cern,https://github.com/root-project/root/pull/1638,1,['test'],['tests']
Testability,Here are some fixes to the tests.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/155:27,test,tests,27,https://root.cern,https://github.com/root-project/root/pull/155,1,['test'],['tests']
Testability,"Here is an example of setting custom openui5 client GUI:. auto eveMng = REX::REveManager::Create();; eveMng->AddLocation(""mydir/"", ""/home/alja/root-dev/EveWebApp/ui5"");; eveMng->SetDefaultHtmlPage(""file:mydir/xxx.html"");; ; Here is test repository:; https://github.com/alja/EveWebApp",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4103:232,test,test,232,https://root.cern,https://github.com/root-project/root/pull/4103,1,['test'],['test']
Testability,"Here, HistFactory is streamlined a bit. The models are restructured from this:; [HFTest4_old.pdf](https://github.com/root-project/root/files/6466419/HFTest4_old.pdf). To this:; [HFTest4.pdf](https://github.com/root-project/root/files/6466420/HFTest4.pdf). The main difference is that first, all binned parts of the calculation are executed (in batches), and then all scale factors are applied to the fully interpolated binned distributions. This reduces the number of function calls and allows for non-uniform binning (ROOT-4958), since the bin width correction is not applied as the last step, but during the binned calculations. Further, prototypes of batch evaluations functions were added for all objects in HistFactory calculations. There are some possibilities for optimisations:; - [ ] ParamHistFunc::evaluateSpan always recalculates all indices; - [ ] RooBinIntegrator doesn't support multi-dimensional batch evaluations; - [ ] Auto-vectorisation should be checked, especially for performance-critical things like the piecewise interpolation; - [ ] Profiling with an example like in `testHistfactory` but with more bins should be done.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8167:1092,test,testHistfactory,1092,https://root.cern,https://github.com/root-project/root/pull/8167,1,['test'],['testHistfactory']
Testability,"Hi @guitargeek , this pull request add the tutorials for the lagrangian morphing class and also; add an example for the factory interface. The are some accompanying fixes as listed below.; Please take a look and let me know if this looks good !. ## This Pull request:. - Add two tutorials `rf711_lagrangianmorph` and `rf712_lagrangianmorphfit` to demonstrate ; the usage of the `RooLagrangianMorphFunc` class; - The PR also includes an update to `rf512_wsfactory_oper` showing an example for the new; options of `taylorexpand` and `lagrangianmorph`; ; ## Changes or fixes:; - formatting of `tutorials/roofit/rf710_roopoly.py`; - The attribute for new physics couplings in the `RooLagrangianMorphFunc` class is changed ; from `NP` to `NewPhysics` to avoid confusion with other abbreviations; - The `lagrangianmorph` factory interface is update to accept arguments in any order. ## Checklist:. - [ ] tested changes locally. Cheers,; Rahul",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9665:898,test,tested,898,https://root.cern,https://github.com/root-project/root/pull/9665,1,['test'],['tested']
Testability,"Hi Enric,. The next 3 items was applied.; - DefaultDataSetInfo: Omar will add a public method to DataLoader for getting a const reference to the DataSetInfo. This is needed by both Attila and Georgios.; - Configurable::Log: Omar will make it public. Attila needs this.; - MethodBase::CreateVariableTransforms: make it public. Attila needs this. The last one is an static method in the class MethodBase, then may you can call it in python; from ROOT import TMVA; TMVA.MethodBase.CreateVariableTransforms. Best ; Omar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/180:219,Log,Log,219,https://root.cern,https://github.com/root-project/root/pull/180,1,['Log'],['Log']
Testability,"Hi Guys,. * Added support to check if R interface is running in the thread of event loop, to avoid segfault in scientific linux running tests.; * Fixed some datatypes according to coding conventions. Cheers,; Omar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/446:136,test,tests,136,https://root.cern,https://github.com/root-project/root/pull/446,1,['test'],['tests']
Testability,"Hi all! This is my first PR, please be gentle 🙂 . The PR is meant to trigger a discussion on the feature described in the title, rather than being a request that it should go in as-is. ### Description ; Add `-l` and `-e` command line options for passing a list of objects to `TFileMerger::AddObjectNames` and setting the `TFileMerger::kSkipListed` or `TFileMerger::kOnlyListed` flags. ### Purpose ; Allows to merge only certain objects from the list of input files. ### Use case; Merging single directories/trees into separate root files. More concrete: when producing nTuples (on the WLCG) with common LHCb tools, one sometimes wants to run different selections on the same input stream and write out a tree for each of the selections. All these trees end up in the same root file. ### Shortcomings; - All directories will be copied in allowlist mode, but the ones not on the allowlist will be empty. I didn't look further into this, but it could be that this would have to be changed in `TFileMerger` rather than `hadd`.; - The code is not rigorously tested. If the feature should be added, I am available to do that.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5995:1053,test,tested,1053,https://root.cern,https://github.com/root-project/root/pull/5995,1,['test'],['tested']
Testability,"Hi everybody,. I am using root on Win64:; ```; ------------------------------------------------------------------; | Welcome to ROOT 6.26/06 |; | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for win64 on Jul 28 2022, 18:08:51 |; | From tags/v6-26-06@v6-26-06 |; | With MSVC 19.32.31332.0 |; | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------; ```; and I have the following function:; ```; void test() {; FILE *fid = fopen(""testfile.txt"", ""wt"");; if (fid != NULL) {; fprintf(fid, ""text\n"");; //fprintf(fid, "" %d \n"", 1);; fclose(fid);; } else {; printf(""File is not created.\n"");; }; }; ```; This function is working correctly. But if I remove the comment mark // with the intention to write a decimal number in the file (in this case, the decimal number is just 1), root terminates and the file is empty. This happens in all cases when I am trying to write any variable to the file. Do you have some idea where the problem is?; ([See also the forum](https://root-forum.cern.ch/t/problem-with-fprintf-in-root/51924)); Vladimir",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11533:505,test,test,505,https://root.cern,https://github.com/root-project/root/issues/11533,2,['test'],"['test', 'testfile']"
Testability,"Hi everyone!. I am a GSoC student working on introducing Recurrent Neural Networks in TMVA. This is the first part of commits which introduces the `RNNLayer` class as well as `RecurrentNet` wrapper along with their respective methods (Forward, Backward etc). I will soon add tests for different functions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/685:275,test,tests,275,https://root.cern,https://github.com/root-project/root/pull/685,2,['test'],['tests']
Testability,"Hi everyone,. We came across this issue in ATLAS recently. There were similar reports in the past, such as [ROOT-7254](https://sft.its.cern.ch/jira/browse/ROOT-7254), but there is none that's still open as far as I could see. . ### Describe the bug; Repeatedly calling `TClass::GetClass`/`TClassEdit::ResolveTypedef` w/ an input such as `std::vector<int>::value_size` seems to create memory hoarding. ### To Reproduce; Either of these python scripts should reproduce the issue:. ```python; import ROOT. while True:; ROOT.TClass.GetClass(""std::vector<int>::value_size""); ```. ```python; import ROOT. while True:; ROOT.TClassEdit.ResolveTypedef(""std::vector<int>::value_size""); ```. ### Setup; Tested with both ROOT versions 6.24/00 and 6.24/06 in the ATLAS production environment. Please let us know, many thanks. Best,; Serhan",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9029:692,Test,Tested,692,https://root.cern,https://github.com/root-project/root/issues/9029,1,['Test'],['Tested']
Testability,"Hi there,. Running root-based reading analysis jobs in ATLAS, we are having problems trying to understand why some jobs fail on certain sites at file open when reading remote files with xrootd. We are using ROOT version 6.18/04. (I don't think that we have problems with 6.16/00, and a few tests indicate that 6.20/06 also had this problem.) . What we see is that for a file open:. std::unique_ptr< TFile > ifile( TFile::Open( file.c_str(), ""READ"" ) );. on a grid site node, the job exits with status code 139, which I believe is SIGURG - Urgent condition on socket (4.2BSD). ; The status code from TApplication::HandleException is 128 + root enum, and 11 is kSigUrgent. ; See:; https://root.cern.ch/doc/master/TApplication_8cxx_source.html#l00602; https://root.cern.ch/doc/master/TSysEvtHandler_8h_source.html#l00107. Running the same program interactively on the same file works fine. And it seems that only some sites with remote reading are failing. So we would like to ask for help in trying to track this down. Currently, there is no stack trace to help understand things, and a simple 'print' just after TFile::Open is not printed. . I tried to add:. gApplication->ExitOnException( TApplication::kDontExit );. thinking that https://root.cern.ch/doc/master/TApplication_8cxx_source.html#l00602. void TApplication::HandleException might throw an exception, but this does not work. So suggestions would be welcome. Is there a way to get a stack trace or more information on what is going on in the I/O part of this file open?. I don't know how to add in watchers for people in ATLAS, or a mailing list. But I did find @krasznaa. thanks much, RD",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6948:290,test,tests,290,https://root.cern,https://github.com/root-project/root/issues/6948,1,['test'],['tests']
Testability,"Hi, . A regression was introduced in TMutiGraph with a log scale; I found a commit that seems to be linked to my problem [https://github.com/osschar/root/commit/d087f000322c7958f02c8e9ddce2a302502c8604](https://github.com/osschar/root/commit/d087f000322c7958f02c8e9ddce2a302502c8604). my OS is debian10 x86_64 with gcc8.3. here is sample script to reproduce the bug :. ```; void multigraph(); {; auto c1 = new TCanvas(""c1"",""multigraph"",700,500);; c1->SetGrid();; c1->SetLogx();; c1->SetLogy();; auto *mg = new TMultiGraph();; std::vector<double> x1;; std::vector<double> sig1;; std::vector<double> sig2;; for (double E=1e-4;E<2e7;E*=1.1); {; 		x1.push_back(E);; 		sig1.push_back(10*pow(E,-0.1));; 		sig2.push_back(15*pow(E,-0.15));; 		}; auto g1 = new TGraph(x1.size(), x1.data(), sig1.data());; mg->Add(g1);; auto g2 = new TGraph(x1.size(), x1.data(), sig2.data());; mg->Add(g2);; mg->SetTitle(""; E (eV);#sigma (b)"");; mg->GetXaxis()->CenterTitle(true);; mg->GetYaxis()->CenterTitle(true);; mg->Draw(""AL"");; c1->SaveAs(""multigraph.pdf"");; }; ```. It works fine on versions 6.14.08, 6.18.04 and 6.20.06; TMultiGraph scale is wrong with versions 6.22.08, 6.24.06.; There is also an error message at the console (negative value for log scale). ```; Processing multigraph.C...; Error in <THistPainter::PaintInit>: log scale requested with a negative argument (-1.720339); Info in <TCanvas::Print>: pdf file multigraph.pdf has been created; ```. I remove the patch [https://github.com/osschar/root/commit/d087f000322c7958f02c8e9ddce2a302502c8604](https://github.com/osschar/root/commit/d087f000322c7958f02c8e9ddce2a302502c8604) on version 6.24.06 and it works again. thanks in advance",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9011:55,log,log,55,https://root.cern,https://github.com/root-project/root/issues/9011,3,['log'],['log']
Testability,"Hi, I am one of the iminuit developers (https://github.com/iminuit/iminuit). We are glad that Minuit2 is still usable as a package separate from ROOT and thank the ROOT developers for that. It makes our life much easier. The iminuit package is build by copying the Minuit2 code in ROOT and building a Cython wrapper around it. Because we compile and use the Minuit2 code outside of the ROOT build environment, we found and fixed some bugs, which we would like to merge upstream in ROOT as well. Each of the two commits in this PR fixes one issue. The first is rather trivial, `MnPrint` is used unconditionally, even though the corresponding header `MnPrint.h` is only included if certain compiler flags are set. The second one is a change in the interface of the `MinimumBuilder` base class. We run Minuit using the `MnMigrad` class. Without this change, there is no way to change the print level in a particular instance of MnMigrad. The change does not violate the logical constness of MinimumBuilder.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1677:967,log,logical,967,https://root.cern,https://github.com/root-project/root/pull/1677,1,['log'],['logical']
Testability,"Hi, I am running nightly tests of COOL which is built using PyROOT, and since the 10th September, one test is failing when using ROOT master branch on all the platforms we test (slc6 with gcc8 and centos7 with gcc8-10 and clang10).; I suspect one commit from Sep 9, 2020 to be responsible for this change of behaviour. Here is the error and backtrace:; ```; python: /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:106: static bool llvm::isa_impl_cl<To, const From*>::doit(const From*) [with To = clang::UsingDecl; From = clang::Decl]: Assertion `Val && ""isa<> used on a null pointer""' failed.; *** Break *** abort; ===========================================================; There was a crash (#7 0x00007facdfe876c8 in SigHandler(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:407).; This is the entire stack trace of all threads:; ===========================================================; #0 0x00007facdeaa889e in waitpid () from /lib64/libc.so.6; #1 0x00007facdea3a4e9 in do_system () from /lib64/libc.so.6; #2 0x00007facdfe8b434 in TUnixSystem::Exec(char const*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2120; #3 0x00007facdfe8bc6a in TUnixSystem::StackTrace() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2411; #4 0x00007facdc599248 in (anonymous namespace)::do_trace(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:182; #5 0x00007facdc5992c1 in (anonymous namespace)::TExceptionHandlerImp::HandleException(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:195; #6 0x00007facdfe8f519 in TUnixSystem::DispatchSignals(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:3644; #7 0x00007facdfe876c8 ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6359:25,test,tests,25,https://root.cern,https://github.com/root-project/root/issues/6359,4,"['Assert', 'test']","['Assertion', 'test', 'tests']"
Testability,"Hi, I love the new `.gh` command (thank you very much @ferdymercury !). Just a couple of minor improvement suggestions:; - remove extra newline from auto-filled GH issue; - log to terminal that a new browser tab should have been opened",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13065:173,log,log,173,https://root.cern,https://github.com/root-project/root/pull/13065,1,['log'],['log']
Testability,"Hi,. # This Pull request: . This PR comes from this [forum thread](https://root-forum.cern.ch/t/use-root-io-as-library-in-a-c-stand-alone-project/55539/5). This tutorial is a minimal working example about how to create a ROOT dictionary for a custom class, and its use for writing and reading a TTree. Further changes may be needed before full integration into ROOT project. ## Changes or fixes:. New folder added, `tutorials/tree/dictionary`. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13205:465,test,tested,465,https://root.cern,https://github.com/root-project/root/pull/13205,1,['test'],['tested']
Testability,"Hi,. I need to install ROOT 6.16 in my laptop (macOS Monterey M1 chip), but it's becoming so difficult due to the installation of TBB, and it also cannot detect the arm architecture (so when I configure the cmake building, I get ```Targeting X86```). . Regarding the TBB issue, this is the output; ```cmake; -- TBB download command succeeded. See also /Users/apereiro/root-histfact-test/new_build/TBB-prefix/src/TBB-stamp/TBB-download-*.log; [ 0%] No update step for 'TBB'; [ 0%] No patch step for 'TBB'; [ 0%] No configure step for 'TBB'; [ 0%] Performing build step for 'TBB'; CMake Error at /Users/apereiro/root-histfact-test/new_build/TBB-prefix/src/TBB-stamp/TBB-build-RelWithDebInfo.cmake:49 (message):; Command failed: 2. 'make' 'compiler=clang' 'CXXFLAGS= -mno-rtm -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX12.1.sdk' 'CPLUS=/Library/Developer/CommandLineTools/usr/bin/c++' 'CONLY=/Library/Developer/CommandLineTools/usr/bin/cc'. See also. /Users/apereiro/root-histfact-test/new_build/TBB-prefix/src/TBB-stamp/TBB-build-*.log; ```. I have been following [this](https://github.com/root-project/root/pull/6120/commits) pull request made by Axel and I made the same changes from the commits, but it's not sufficient to fix the whole problem. . Also I tried to configure with ```-Dbuiltin_tbb=OFF``` since I have the latest tbb from homebrew, but I get; ```cmake; -- Found TBB: /opt/homebrew; CMake Error at cmake/modules/SearchInstalledSoftware.cmake:1159 (if):; if given arguments:. ""VERSION_LESS"" ""2018""; ```. Can you point me to a solution, or propagate the patches you have been developing to older versions like this one?. Thanks",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10370:382,test,test,382,https://root.cern,https://github.com/root-project/root/issues/10370,5,"['log', 'test']","['log', 'test']"
Testability,"Hi,. I was testing LCG_100_ATLAS_1 for root and found an issue with webdav access that is failing. I can reproduce it for LCG_100. Here is the recipe:. First, this is the code to test file access:; $ cat read_file.C ; ```; void read_file(){; const char *filename = gSystem->Getenv(""ALRB_TESTING_FILENAME"");; cout << filename << endl; . TFile *tfile = TFile::Open(filename); ; if (tfile == 0 ) {; exit(1);; };; exit(0);; }; ```. test 1: LCG_99 works:; (login to lxplus); ```; mkdir test; cd test; cp /afs/cern.ch/user/d/desilva/public/rootTest/read_file.C ./. ; source /cvmfs/sft.cern.ch/lcg/views/setupViews.sh LCG_99 x86_64-centos7-gcc8-opt; voms-proxy-init -voms atlas; (or export X509_USER_PROXY=/tmp/x509up_u`id -u` if you have a proxy set); export ALRB_TESTING_FILENAME=""davs://webdav.lcg.triumf.ca:2880/atlas/atlaslocalgroupdisk/rucio/user/desilva/a1/a8/myFile.1.root""; root -b './read_file.C'; echo $?; ```. test2: LCG_100 fails:; (login to lxplus); ```; mkdir test; cd test; cp /afs/cern.ch/user/d/desilva/public/rootTest/read_file.C ./. ; source /cvmfs/sft.cern.ch/lcg/views/setupViews.sh LCG_100 x86_64-centos7-gcc8-opt; voms-proxy-init -voms atlas; (or export X509_USER_PROXY=/tmp/x509up_u`id -u` if you have a proxy set); export ALRB_TESTING_FILENAME=""davs://webdav.lcg.triumf.ca:2880/atlas/atlaslocalgroupdisk/rucio/user/desilva/a1/a8/myFile.1.root""; root -b './read_file.C'; echo $?; ```. failing stdout from test2; ```; [desilva@lxplus7107 rootTest]$ source /cvmfs/sft.cern.ch/lcg/views/setupViews.sh LCG_100 x86_64-centos7-gcc8-opt; [desilva@lxplus7107 rootTest]$ export X509_USER_PROXY=/tmp/x509up_u`id -u`; [desilva@lxplus7107 rootTest]$ which root; /cvmfs/sft.cern.ch/lcg/views/LCG_100/x86_64-centos7-gcc8-opt/bin/root; [desilva@lxplus7107 rootTest]$ export ALRB_TESTING_FILENAME=""davs://webdav.lcg.triumf.ca:2880/atlas/atlaslocalgroupdisk/rucio/user/desilva/a1/a8/myFile.1.root""; [desilva@lxplus7107 rootTest]$ root -b './read_file.C'; ---------------------------------------------",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092:11,test,testing,11,https://root.cern,https://github.com/root-project/root/issues/8092,9,"['log', 'test']","['login', 'test', 'testing']"
Testability,"Hi,. This has been bugging me for a while now. 😛. ROOT has been exporting a CMake configuration for downstream projects (using ROOT) for a while now. But the exported/imported library targets at the moment can't be used with code like:. ```cmake; find_package( ROOT 6.10 REQUIRED ); add_executable( MyExecutable test.cxx ); target_link_libraries( MyExecutable ROOT::Core ); ```. In this case the build would complain that it can't find the ROOT headers that `test.cxx` may want to use. Even though the expectation against imported targets **is** that they would carry all information with them to compile any client code correctly. While the latter sentiment can take us quite far, as one could even argue that imported libraries should carry whatever compiler definitions/options the client may need with themselves, unfortunately this is not super easy to do with CMake at the moment. (For instance I don't know of a good way in which the imported library could impose the same C++ standard on the client project that ROOT was built with. While allowing the client project to use an even newer standard if needed.). So for now I'll just be satisfied making sure that at least the include directory needed by the ROOT libraries would be automatically propagated to clients wanting to link against them. This update takes care of that. Cheers,; Attila",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1466:312,test,test,312,https://root.cern,https://github.com/root-project/root/pull/1466,2,['test'],['test']
Testability,"Hi,. when doing some more testing on the OptimizeBaskets() changes made last year, I found that getting the numbers of entries in the basket causes a disc read for each branch. This could be expensive and it is better to use the numbers of entries in the tree instead, as OptimizeBaskets() is called only on the first flush and most branches will have only one basket. Larger branches, may have more baskets, but overestimating their size by a few bytes is still a good approximation (and much better than an additional 4,000 disc reads (e.g. for ATLAS xAOD)). Thanks, Peter",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/369:26,test,testing,26,https://root.cern,https://github.com/root-project/root/pull/369,1,['test'],['testing']
Testability,"Hi,; I noticed the TDataFrame entries for the code owners were a bit weird. I'm not sure how to test I did not screw up the syntax (the `**` pattern was explained [here](https://git-scm.com/docs/gitignore) and codeowners should allow the same pattern matching syntax).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/933:96,test,test,96,https://root.cern,https://github.com/root-project/root/pull/933,1,['test'],['test']
Testability,"Hi,; I'm trying to use lambda expressions to define TF1 objects.; Inside python I run the following code:; `from ROOT import TF1`; `f = TF1('f', lambda x: x[0], 0, 1)`; `f.Draw()`. but I get a blank canvas and this error:; ```; Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; File ""/home/daniel/alice/sw/ubuntu2004_x86-64/ROOT/v6-24-06-13/lib/ROOT/_application.py"", line 68, in displayhook; gInterpreter.EndOfLineAction(); TypeError: void TInterpreter::EndOfLineAction() =>; TypeError: callable was deleted; ```. I'm using pyroot inside the AliPhysics environment. I tested these lines on 4 different machines that use different versions of python: 3.6, 3.7, 3.8 and 3.9. Only with the two older versions it runs as expected. For python 3.8 and 3.9 the error message is the same. Do you know what might be the cause of this behavior with newer versions of python?",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9465:592,test,tested,592,https://root.cern,https://github.com/root-project/root/issues/9465,1,['test'],['tested']
Testability,"Hi,; One unit test in CMSSW is failing on `aarch64` ( https://github.com/cms-sw/cmssw/issues/31194 ) . We noticed that root is treating `char` as `unsigned` while root is build with `-fsigned-char` e.g. in root interactive shell we get this; 1. aarch64; ```; root [0] static_cast<int>(static_cast<char>(-1)); (int) 255; ``` . 2. amd64; ```; root [0] static_cast<int>(static_cast<char>(-1)); (int) -1; ```. https://github.com/cms-sw/cmsdist/blob/IB/CMSSW_11_2_X/master/root.spec#L40 is how we configure and build root for both amd64 and aarch64. . Is it a known issue? Any suggestion how to fix/avoid this. Thanks",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6465:14,test,test,14,https://root.cern,https://github.com/root-project/root/issues/6465,1,['test'],['test']
Testability,"Hi,; We are trying to test latest ROOT 6.28 patches (commit 36349764e9) and ROOT master (commit 84d6328434) branch changes in cmssw. Though root itself builds fine in both cases but we get CMSSW build errors [a]. Note that we did not see such errors with ROOT 6.28-patches commit b684439239. Looks like rootcling and `c++20` issue. Is it a known issue?. [a] ; https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-394617/32404/build.log; ```; >> Checking EDM Class Version for src/DataFormats/L1GlobalCaloTrigger/src/classes_def.xml in libDataFormatsL1GlobalCaloTrigger.so; /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/etc/cling/std.modulemap:554:10: error: module 'std.bits/uses_allocator_args.h' requires feature 'cplusplus20'; module ""bits/uses_allocator_args.h"" [optional] {; ^; /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc11/external/gcc/11.2.1-f9b9dfdd886f71cd63f5538223d8f161/include/c++/11.2.1/memory_resource:42:10: note: submodule of top-level module 'std' implicitly imported here; #include <bits/uses_allocator_args.h> // uninitialized_construct_using_alloc; ^; ```. this is the stack trace we see when this error occurs; ```; ===========================================================; There was a crash (kSigAbort).; This is the entire stack trace of all threads:; ===========================================================; #0 0x00002b4bd10da72b in waitpid () from /lib64/libc.so.6; #1 0x00002b4bd103bcf7 in do_system () from /lib64/libc.so.6; #2 0x00002b4bd1d2345c in TUnixSystem::Exec (this=0x7472d0, shellcmd=0xc1f5720 ""/pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/etc/gdb-backtrace.sh 43811 1>&2"") at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12771:22,test,test,22,https://root.cern,https://github.com/root-project/root/issues/12771,6,"['log', 'test']","['log', 'test', 'testBuildDir', 'tests']"
Testability,"Hi,; the following code is crashing when Branching more than 10 arrays to the tree:. ```; int testvec() {; 	TTree *t = new TTree(""tree"",""tree"");; 	const int n = 92000;; 	unsigned int myN = n;; 	float arr1[n];; 	float arr2[n];; 	float arr3[n];; 	float arr4[n];; 	float arr5[n];; 	float arr6[n];; 	float arr7[n];; 	float arr8[n];; 	float arr9[n];; 	float arr10[n];; 	float arr11[n];; 	; 	t->Branch(""n"",&myN);; 	; 	t->Branch(""arr1"",arr1,""arr1[n]"");; 	t->Branch(""arr2"",arr2,""arr2[n]"");; 	t->Branch(""arr3"",arr3,""arr3[n]"");; 	t->Branch(""arr4"",arr4,""arr4[n]"");; 	t->Branch(""arr5"",arr5,""arr5[n]"");; 	t->Branch(""arr6"",arr6,""arr6[n]"");; 	t->Branch(""arr7"",arr7,""arr7[n]"");; 	t->Branch(""arr8"",arr8,""arr8[n]"");; 	t->Branch(""arr9"",arr9,""arr9[n]"");; 	t->Branch(""arr10"",arr10,""arr10[n]"");; 	t->Branch(""arr11"",arr11,""arr11[n]""); // Removing this line and the code will work. 	return 0;; }; ```. using a smaller ""n"" works, too. Using less than ten arrays works. Makes no difference to use arr[n] or arr[100000]. ; Is there a maximum number of allowed references by a tree??. I'm using 6.22/02 on windows64 bit. Georg",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8721:94,test,testvec,94,https://root.cern,https://github.com/root-project/root/issues/8721,1,['test'],['testvec']
Testability,"Hi,; while testing root master ( commit a0d62ca8ad ) in to CMSSW we noticed that `RooAddPdf::fitTo()` now very slow. The [test](https://cmssdt.cern.ch/SDT/cgi-bin/logreader/el8_amd64_gcc10/CMSSW_12_6_ROOT626_X_2022-10-25-2300/unitTestLogs/DQMOffline/Alignment#/) takes 6 mins for root 6.24 and 6.26 but for root master it takes over an hour ( and still does not finish). Running under GDB shows [this stacktrace](https://muzaffar.web.cern.ch/master-RooAddPdf-fitTo.txt) . Any idea what has changed in root master which is causing this slowness?. https://github.com/cms-sw/cmssw/blob/master/DQMOffline/Alignment/src/DiMuonMassBiasClient.cc#L189 is call which is very slow now as compare to root 6.24/6.26. Thanks",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11637:11,test,testing,11,https://root.cern,https://github.com/root-project/root/issues/11637,3,"['log', 'test']","['logreader', 'test', 'testing']"
Testability,"Hi. I took all of your tips and advice and put it all into this one, clean pull request. I followed the indentation rules and tests. . The solved [this](https://github.com/root-project/root/issues/6748) issue. (I hope). Please let me know if everything is fine. I'm very happy to contribute to this project. Kind Regards,. Advait Dhingra",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7042:126,test,tests,126,https://root.cern,https://github.com/root-project/root/pull/7042,1,['test'],['tests']
Testability,"How to compile code see Readme in gui/canvaspainter. Code is not yet used - I will provide another patch after this PR and #717 are merged. CEF-related makefile should be improved. ; One can use **cefsimple** cmake files as an example. https://bitbucket.org/chromiumembedded/cef/src/8e69e3dcea8b/tests/cefsimple/?at=master. **cefsimple** has some specialization for linux, mac and windows. ; I used only linux till now. One could try mac - for that one should include simple_handler_mac.mm into compilation instead of simple_handler_linux.cxx. Same is for cef_main.cxx. Formally one need to create separate versions for mac, linux and windows.; You can see example also in **cefsimple**. These are different platform-specific error handlers. Building of Qt5 part is not called from makefile. I hope, one can add it into makefile when qt5-webengine is discovered. Also rootqt5 executable should be moved into $ROOTSYS/bin directory",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/721:296,test,tests,296,https://root.cern,https://github.com/root-project/root/pull/721,1,['test'],['tests']
Testability,"I added the minimal infrastructure for performing end-to-end test of the correctness of the header files generated by SOFIE.; There are 3 ONNX models as an example. # How it works; In order to create the Google Test, CMake scans a given directory (i.e. input_models) looking for `.onnx` files then generates a target called `SofieCompileModels_ONNX` with the only purpose of generating the `.hxx` headers (output of SOFIE compilation). A file called `Emit.cxx` acts like a command line SOFIE compiler, called by the test target before building the final comprehensive GTest `TestCustomModels`. - [x] tested changes locally; - [x] added example models (Linear16, Linear32, Linear64)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8782:61,test,test,61,https://root.cern,https://github.com/root-project/root/pull/8782,5,"['Test', 'test']","['Test', 'TestCustomModels', 'test', 'tested']"
Testability,I added unit test `TTree.cxx` which checks default compression settings used for TFile.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5081:13,test,test,13,https://root.cern,https://github.com/root-project/root/pull/5081,1,['test'],['test']
Testability,"I am a GSoC student working on introducing Recurrent Neural Networks in TMVA. This is the rectified commits using suggestions from #693 . It introduces basic `RNNLayer`, `RecurrentNet` with tests for forward pass. It does not require immediate merge and I'll keep adding commits to it according to feedbacks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/778:190,test,tests,190,https://root.cern,https://github.com/root-project/root/pull/778,1,['test'],['tests']
Testability,"I am in the process of updating ROOT from 6.22/08 to 6.24/00 on Gentoo, and I see several test failures which may need to be looked into before I can commit the new version. I am using ROOT master at f7adfb5c78168d5eba657afa171fa1a9d0938c54, GCC 8.4.0 in Gentoo, compiling for C++17, and enabling everything that I can in the build, except for a few annoying things like Oracle DB, etc. The command line for CMake was; ```; $ cmake -DCMAKE_INSTALL_RPATH=""$ORIGIN"" -DPYTHON_EXECUTABLE=""/usr/bin/python"" -Dalien=""OFF"" -Dall=""ON"" -Darrow=""OFF"" -Dcuda=""OFF"" -Dcudnn=""OFF"" -Ddcache=""OFF"" -Dfail-on-missing=""ON"" -Dgfal=""OFF"" -Dmemstat=""OFF"" -Dmonalisa=""OFF"" -Doracle=""OFF"" -Dpyroot=""ON"" -Drpath=""ON"" -Dtest_distrdf_pyspark=""OFF"" -Dtmva-gpu=""OFF"" -Dvc=""OFF"" -Dvdt=""OFF"" -Dveccore=""OFF"" -Dvecgeom=""OFF"" -Dvmc=""OFF"" -Dtesting=""ON"" -Droottest=""ON"" /srv/root/src/root; ```; and the following features were enabled:; ```; -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_openui5 cefweb clad dataframe davix exceptions fftw3 fitsio fortran gdml gviz http fcgi imt mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia6 pythia8 qt5web r roofit webgui root7 rpath runtime_cxxmodules shadowpw shared sqlite ssl tmva tmva-cpu tmva-pymva tmva-rmva spectrum unuran uring x11 xml xrootd; ```; The [CMakeCache.txt](https://github.com/root-project/root/files/6343170/CMakeCache.txt) file is attached. The test failures are as follows:. ```sh; The following tests FAILED:; 	 10 - pyunittests-pyroot-import-load-libs (Failed); 	 85 - gtest-core-metacling-test-TClingTest (Failed); 	994 - tutorial-v7-ntuple-ntpl005_introspection (Failed); 	1335 - roottest-python-JupyROOT-importROOT_notebook (Failed); 	1336 - roottest-python-JupyROOT-simpleCppMagic_notebook (Failed); 	1437 - roottest-python-pickle-read (Failed); 	1496 - roottest-root-dataframe-regression_snapshot (Failed); 	1499 - roottest-root-dataframe-test_snapshot (Failed); 	1500 - roottest-root-dataframe-test_stringfiltercolumn",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7936:90,test,test,90,https://root.cern,https://github.com/root-project/root/issues/7936,1,['test'],['test']
Testability,"I chose to put this issue in a separate PR since there might be a better fix than the one proposed here. The loops that fills the ci1 and c12 vectors are defined as:. for (Int_t i=1; i<=fH1->GetNbinsX();++i) {. while the loop that reads the values back is defined as:. for (Int_t i=0; i<=fH1->GetNbinsX();++i) {. i.e. it has one more iteration (since it starts at 0 instead of 1). So on the last iteration it accesses the vector beyond its last element. This PR just adds a protection and makes sure the out-of-bounds element is not read and replaces it with a zero. While this makes the tests not crash, I am not sure there isn't some other bug here, and that the proper fix is something else. That the code tries to read one more value from the vector than it writes is suspicious.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1639:588,test,tests,588,https://root.cern,https://github.com/root-project/root/pull/1639,1,['test'],['tests']
Testability,"I discovered that RooDataSets that contain RooStringVar aren't cloneable, because the SetBranchAddress method of TTree expects the address of a string pointer, not the address of the string. I added a test that would crash before I implemented the fix in RooStringVar. Should be backported to 6.28",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12809:201,test,test,201,https://root.cern,https://github.com/root-project/root/pull/12809,1,['test'],['test']
Testability,I guess these tests were not enabled by mistake?,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6536:14,test,tests,14,https://root.cern,https://github.com/root-project/root/pull/6536,1,['test'],['tests']
Testability,I had apparently overlooked that in 5455bbc3b5210bb73fffd0c6a3ab8833bf1dbfec. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13484:143,test,tested,143,https://root.cern,https://github.com/root-project/root/pull/13484,1,['test'],['tested']
Testability,"I had to run the tests to check the fix for the `-fPIE` issue, and decided it may be useful to report on the other test failures that I observe. The full command line I used for the configuration is below; ```; $ cmake -DCMAKE_CXX_FLAGS=""-O2 -march=native -pipe"" -DPYTHON_EXECUTABLE=""/usr/bin/python3.9"" -Dalien=""OFF"" -Dall=""ON"" -Darrow=""OFF"" -Dclad=""OFF"" -Dclingtest=""ON"" -Dcuda=""OFF"" -Dcudnn=""OFF"" -Ddaos=""OFF"" -Ddcache=""OFF"" -Dfail-on-missing=""ON"" -Dgfal=""OFF"" -Dmonalisa=""OFF"" -Dr=""OFF"" -Droofit_multiprocess=""OFF"" -Droottest=""ON"" -Dtest_distrdf_dask=""OFF"" -Dtest_distrdf_pyspark=""OFF"" -Dtmva-gpu=""OFF"" -Dvecgeom=""OFF"" /srv/root/src/root; ```; I am attaching here the [CMake configuration output](https://github.com/root-project/root/files/7709954/cmake.log), [CMakeCache.txt](https://github.com/root-project/root/files/7709963/CMakeCache.txt), the full [build log](https://github.com/root-project/root/files/7709957/build.log), and the [log for failed tests](https://github.com/root-project/root/files/7710157/ctest-failed.log). To save you some time looking over these files, here is the full list of tests that fail:. ```; The following tests FAILED:; 	 1 - clingtest-check-cling (Failed); 	 13 - pyunittests-pyroot-dependency-versions (Failed); 	 68 - pyunittests-pyroot-numbadeclare (Not Run); 	 69 - test-import-numba (Failed); 	160 - gtest-math-mathcore-test-stressMathCoreUnit (Failed); 	282 - test-stressmathcore (Failed); 	307 - test-TFormulaTests (Failed); 	800 - tutorial-pythia-pythiaExample (Failed); 	1142 - tutorial-pyroot-pyroot004_NumbaDeclare-py (Not Run); 	1143 - test-import-numba (Failed); 	1358 - roottest-cling-stl-dicts-build (Failed); 	1611 - roottest-root-dataframe-test_snapshot_copyaddresses (Failed); 	1753 - roottest-root-io-transient-base-WriteFile (Failed); 	1754 - roottest-root-io-transient-base-hadd_autoload (Failed); 	1799 - roottest-root-meta-countIncludePaths (Failed); 	1841 - roottest-root-meta-MakeProject-runaliceesd (Failed); 	1852 - roottest-root-meta",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9436:17,test,tests,17,https://root.cern,https://github.com/root-project/root/issues/9436,7,"['log', 'test']","['log', 'test', 'tests']"
Testability,"I have question. Does `roottest` runs `cmake --build . --target cling-test` when the cling interpreter code is changed? From time to time I see, that commits are merged regardless of whether the CI fails.; If I understand Cling's workflow correctly, changes are integrated and tested in ROOT and automatically streamed down to Cling after the merge in ROOT. So, if `roottest` does not run the integrated tests in cling, it is possible that the Cling CI is bypassed, or I'm wrong?",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6957:70,test,test,70,https://root.cern,https://github.com/root-project/root/issues/6957,3,['test'],"['test', 'tested', 'tests']"
Testability,"I haven't restored the coefficient caching at this time, however. The new interpolation is put in interpCode=5. Added option to use PiecewiseInterpolation with interpCode=5 which correspondings to FIV InterpCode=4 (confusing, I know!). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13427:302,test,tested,302,https://root.cern,https://github.com/root-project/root/pull/13427,1,['test'],['tested']
Testability,"I know there's ""add debug output"" - but this is something we'll want to have available anyway, without having to re-run. I'm not dumping `env` because that can trigger the log grepper (not too concerned by tokens - GH is doing a good job at hiding those).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12581:172,log,log,172,https://root.cern,https://github.com/root-project/root/pull/12581,1,['log'],['log']
Testability,"I noticed that `roofit_legacy_eval_backend` variable in CMake was not; cached, and therefore it didn't propagate to the RooFit test; subdirectories. This meant several unit tests were not executed. This commit is fixing that. Furthermore, another commit in this PR reduces the time of the tutorial tests by reducing the number of toys in the RooStats tutorials.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14919:127,test,test,127,https://root.cern,https://github.com/root-project/root/pull/14919,3,['test'],"['test', 'tests']"
Testability,"I ported the changes from [pseyfert/tmva-mlp](https://github.com/pseyfert/tmva-mlp) to the code generation. As a test I just ran the class.C network resulting from tutorials/tmva/TMVAClassification.C (with ""MLP"") and evaluated it similar to tutorials/tmva/TMVAClassificationApplication.C. According to callgrind the network evaluation is ~17% cpu cycles faster.; NB: i did not port all changes from pseyfert/tmva-mlp - I did not import the SSE/AVX intrinsics and avoided what seemed too difficult (optimising the putIndices and getIndices out)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/121:113,test,test,113,https://root.cern,https://github.com/root-project/root/pull/121,1,['test'],['test']
Testability,"I ran into the issue that a RooAddPdf cannot generate pdfs with a negative coefficient for one component (also when the total pdf is positive defined). This caused a severe bias in my pseudo experiments, where one of the coefficients of my Pdf is needed to be negative (outcome of a fit with a RooAddPdf to data). That caused me a lot of head scratching because it never mentioned any warning. In my opinion this is bug.; With this behaviour I cannot test my model, because it handles generation and fitting differently.; One solution to circumvent this problem I found was the RooRealSumPdf. But in the end it is not really handy/useful, since it is not properly normalised and cannot be automatically normalised (AFAIK). ; A minimal python example is given below. You will see that the RooRealSumPdf can generate the negative dip in the function, while the RooAddPdf can't.; I hope someone can look into this and fix it, because the RooAddPdf is a very useful and widely used class.; Thank you!. ```python; import ROOT as R. mass = R.RooRealVar(""mass"",""mass"",4900,6000). Nbkg = R.RooRealVar(""Nbkg"",""Nbkg"",1000,0,1e7); linear = R.RooPolynomial(""linear"",""linear"",mass,R.RooArgList()). Nsig = R.RooRealVar(""Nsig"",""Nsig"",-50, -1e7,-1e-4); mean = R.RooRealVar(""mean"",""mean"",5230, 5200, 5300); width = R.RooRealVar(""width"",""width"",50, 20, 80); gauss = R.RooGaussian(""gauss"", ""gauss"", mass, mean, width). integralSig = gauss.getNorm(R.RooArgSet(mass)); integralBkg = linear.getNorm(R.RooArgSet(mass)); print(""Unnormalised PDFs yield:"", integralSig, integralBkg) ; normaliserSig = R.RooConstVar(""normaliserSig"", ""normaliserSig"", 1./integralSig); normaliserBkg = R.RooConstVar(""normaliserBkg"", ""normaliserBkg"", 1./integralBkg); sigNormScaled = R.RooProduct(""scaledSigNorm"", ""bkgNorm/Int[bkg]"",R.RooArgList(Nsig, normaliserSig)); bkgNormScaled = R.RooProduct(""scaledBkgNorm"", ""bkgNorm/Int[bkg]"",R.RooArgList(Nbkg, normaliserBkg)); pdf_RRS = R.RooRealSumPdf(""pdf_RRS"",""pdf_RRS"",R.RooArgList(linear,gauss),R.Roo",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7252:451,test,test,451,https://root.cern,https://github.com/root-project/root/issues/7252,1,['test'],['test']
Testability,"I realized we were missing a test for accessing a view out of bounds, so I added one.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16789:29,test,test,29,https://root.cern,https://github.com/root-project/root/pull/16789,1,['test'],['test']
Testability,I removed last traces of possible usage of system libpng when build with external libpng. Tested with flags: ` -DCMAKE_PREFIX_PATH=/home/oksana/CERN/libpng/`. Output of making grep of `png` in build directory and ldd output for libAsimage*.so:; https://gist.github.com/oshadura/02284042676515002dbd7383ef5f75c7,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5717:90,Test,Tested,90,https://root.cern,https://github.com/root-project/root/pull/5717,1,['Test'],['Tested']
Testability,"I see some import failures from `ROOT.RVec` in #5310, added a test here.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5361:62,test,test,62,https://root.cern,https://github.com/root-project/root/pull/5361,1,['test'],['test']
Testability,"I tested this in a private repository, but unfortunately I can only check the final integration after merging...",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8654:2,test,tested,2,https://root.cern,https://github.com/root-project/root/pull/8654,1,['test'],['tested']
Testability,"I think it would be really nice to be compliant with other Python packages and provide a `__version__` magic for the ROOT module. ~~But be careful: This comes at the cost of a direct use of ROOT at startup time (non-lazy! Am I right?). I don't see how we could do this besides doing some template/macro magic and copying the version number to the sources at configure time.~~. Since the ROOT module is actually a class instance, we can add a `property`, which is evaluated lazily. Nice! :). And added tests for the ROOT module!",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4048:501,test,tests,501,https://root.cern,https://github.com/root-project/root/pull/4048,1,['test'],['tests']
Testability,"I think there's a potentially nasty backward incompatibility issue arising from this commit: https://github.com/root-project/root/commit/90ba866a65bd44e74a995aa330e0a950114443d6#diff-896028fd27621f8bfe9d0774c5529e27df523e5bd7fcfe2ac54f6fd1ced316f9. Details of how the problem appeared to me are below, but I will say that the problem went away when I compiled 6.22 branch with the `_value` data member removed (since it masks the RooAbsReal one). I am guessing here that a RooConstVar version 2 written to disk isn't properly loaded as a RooConstVar version 1. But what is odd is that under some circumstances it seems that the const var value is correctly loaded -- it seems connected to if the arg is ""dirty"" or not. Sorry for being a bit vague, I dont fully understand why it is sometimes a problem and sometimes not but the problem goes away when the above commit is effectively ported back into 6.22. The issue first appeared for me when I opened a workspace (I wanted to attach to this issue but it wont let me attach a root file) created in 6.23.01 in 6.22.00 ... the only warning I get is: . ```; Warning in <TStreamerInfo::BuildOld>: Cannot convert RooRealVarSharedProperties::_altBinning from type: unordered_map<string,RooAbsBinning*> to type: RooLinkedList, skip element; ```. But when I tried to evaluate the pdf in the workspace like this:. ```; RooWorkspace* w = f1.Get<RooWorkspace>(""Test"");; auto func = w->pdf(""SR_model"");; auto obs = w->var(""obs_x_SR"");; func->getVal(*obs);; ```. I got this:. ```; message : p.d.f normalization integral is zero or negative: 0; server values: !funcList=(L_x_bkg_SR_overallSyst_x_StatUncert = 47.1,L_x_sig_SR_overallSyst_x_StatUncert = 3.82), !coefList=(binWidth_obs_x_SR_0 = 5.5,binWidth_obs_x_SR_1 = 5.5); ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7646:1400,Test,Test,1400,https://root.cern,https://github.com/root-project/root/issues/7646,1,['Test'],['Test']
Testability,I tried to rebuild epel8 testing version of root and it failed one test case (three times so this is not just random failure). 150/1107 Test #109: gtest-io-io-test-RIoUring ...........................................***Failed 0.58 sec; Running main() from gtest_main.cc; Note: Google Test filter = -RCsvDS.Remote:RRawFile.Remote:RSqliteDS.Davix. Looks like this test is not proper. No problem with previous versions so this is new failure.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8895:25,test,testing,25,https://root.cern,https://github.com/root-project/root/issues/8895,6,"['Test', 'test']","['Test', 'test', 'test-RIoUring', 'testing']"
Testability,I'd like to start testing again the case highlighted by https://github.com/root-project/root/issues/13361. Note at the beginning: the issue arose with `runtime_cxxmodules=OFF` and I'm not sure we have that in the CI so we might not see errors right away,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15749:18,test,testing,18,https://root.cern,https://github.com/root-project/root/pull/15749,1,['test'],['testing']
Testability,"I'd like to test that issue #9020 is triggered also on our Fedora34 node, to validate #9065",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9066:12,test,test,12,https://root.cern,https://github.com/root-project/root/pull/9066,1,['test'],['test']
Testability,"I'm creating a TTree with a class that inherits from a base class, without a problem. However, in the same program a couple lines later,; ```; TClass branchClass(c->GetBranch(""event"")->GetClassName());; if (branchClass.InheritsFrom(""dicttest::EventDis"") {....}; ```; fails with; ```; Warning in <TClass::TClass>: no dictionary for class dicttest::EventPythia is available; Error in <TObjArray::At>: index 0 out of bounds (size: 1, this: 0x127faed70); Error in <TObjArray::At>: index 0 out of bounds (size: 1, this: 0x127faed70); ```. It works fine interactively but not when compiled. I have a demonstrator that's pretty minimal here:; https://github.com/kkauder/rootbreaker. This behavior is new to root 6.24, tested on Apple M1 and Ubuntu. The same code worked fine in root 6.20.04; I haven't been able to test other versions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8250:711,test,tested,711,https://root.cern,https://github.com/root-project/root/issues/8250,2,['test'],"['test', 'tested']"
Testability,"I'm looking into the facade to fix [ROOT-10629](https://sft.its.cern.ch/jira/browse/ROOT-10629). However, we can improve in the lookup logic. Especially to throw more meaningful error messages. In short: Imho, stacking `try` blocks is not a good idea. The behaviour now:. ```bash; >>> import ROOT; >>> ROOT.foo; Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; File ""/home/stefan/builds/root-dev/lib/python3.8/ROOT/_facade.py"", line 171, in _getattr; return getattr(self, name); File ""/home/stefan/builds/root-dev/lib/python3.8/ROOT/_facade.py"", line 144, in _fallback_getattr; raise AttributeError(""Failed to import {} from ROOT"".format(name)); AttributeError: Failed to import foo from ROOT; ```. The behaviour before:. ```bash; >>> import ROOT; >>> ROOT.foo; Traceback (most recent call last):; File ""/home/stefan/builds/root-dev/lib/python3.8/ROOT/_facade.py"", line 137, in _fallback_getattr; return getattr(gbl_namespace, name); AttributeError: <namespace cppyy.gbl at 0x5641444c41f0> has no attribute 'foo'. Full details:; type object '' has no attribute 'foo'; 'foo' is not a known C++ class; 'foo' is not a known C++ template; 'foo' is not a known C++ enum. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""/home/stefan/builds/root-dev/lib/python3.8/ROOT/_facade.py"", line 140, in _fallback_getattr; return getattr(gbl_namespace.ROOT, name); AttributeError: <namespace cppyy.gbl.ROOT at 0x564145da5680> has no attribute 'foo'. Full details:; type object 'ROOT' has no attribute 'foo'; 'ROOT::foo' is not a known C++ class; 'foo' is not a known C++ template; 'foo' is not a known C++ enum. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; File ""/home/stefan/builds/root-dev/lib/python3.8/ROOT/_facade.py"", line 173, in _getattr; return getattr(self, name); File ""/home/stefan/builds/root-dev/lib/python3.8/ROOT/_fac",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5187:135,log,logic,135,https://root.cern,https://github.com/root-project/root/pull/5187,1,['log'],['logic']
Testability,"I've discovered that some workspaces that worked fine before are broken by https://github.com/root-project/root/commit/466f3f689c578cb53d75ddeeb04472ec4d82e3ed - I am getting NaN back!. I'm concerned that there's some subtle numerical effects that the old code (in fillPolyCoef) handles that the new code does not. But at least in my specific case I think the issue is one of the variations is 0, and there's no protection in the new code for a variation being 0 or negative, unlike in the old code. . This suggests a fix for this although I've not tested it yet ...",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13294:549,test,tested,549,https://root.cern,https://github.com/root-project/root/pull/13294,1,['test'],['tested']
Testability,"I've preskimmed the files for df103, which is now reduced from 12GB to 51MB. The fast mode is enabled by default for the tutorials, though we can still run the full version in the benchmarks. The difference is simply the postfix `_skimmed` in the filepath.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5950:180,benchmark,benchmarks,180,https://root.cern,https://github.com/root-project/root/pull/5950,1,['benchmark'],['benchmarks']
Testability,"ILER/default/LABEL/performance-cc8/SPEC/default/root/tutorials/math/multivarGaus.C:12:15: error: no type named 'GSLRandomEngine' in namespace 'ROOT::Math'; ROOT::Math::GSLRandomEngine rnd;; ~~~~~~~~~~~~^; CMake Error at /data/sftnight/workspace/root-benchmark/BUILDTYPE/Release/COMPILER/default/LABEL/performance-cc8/SPEC/default/build/RootTestDriver.cmake:237 (message):; error code: 1; ```. ```; Directory: /data/sftnight/workspace/root-benchmark/BUILDTYPE/Release/COMPILER/default/LABEL/performance-cc8/SPEC/default/build/runtutorials; ""tutorial-math-exampleFunction-py"" start time: May 11 01:28 CEST; Output:; ----------------------------------------------------------. ****************************************; Minimizer is Minuit / Migrad; MinFCN = 1.687e-08; NDf = 0; Edm = 3.37793e-08; NCalls = 146; Par_0 = 0.999952 +/- 1.00372 ; Par_1 = 0.999892 +/- 2.00986 ; Error in <TUnixSystem::FindDynamicLibrary>: libMathMore[.so | .dll | .dylib | .sl | .dl | .a] does not exist in /data/sftnight/workspace/root-benchmark/BUILDTYPE/Release/COMPILER/default/LABEL/performance-cc8/SPEC/default/build/lib:/data/sftnight/workspace/root-benchmark/BUILDTYPE/Release/COMPILER/default/LABEL/performance-cc8/SPEC/default/build/lib:.:/data/sftnight/workspace/root-benchmark/BUILDTYPE/Release/COMPILER/default/LABEL/performance-cc8/SPEC/default/build/lib:/lib64/tls/haswell/x86_64:/lib64/tls/haswell:/lib64/tls/x86_64:/lib64/tls:/lib64/haswell/x86_64:/lib64/haswell:/lib64/x86_64:/lib64:/usr/lib64/tls/haswell/x86_64:/usr/lib64/tls/haswell:/usr/lib64/tls/x86_64:/usr/lib64/tls:/usr/lib64/haswell/x86_64:/usr/lib64/haswell:/usr/lib64/x86_64:/usr/lib64:/data/sftnight/workspace/root-benchmark/BUILDTYPE/Release/COMPILER/default/LABEL/performance-cc8/SPEC/default; ```. ### Expected behavior. no libMathMore ==> tutorials disabled for ctest. ### To Reproduce; https://lcgapp-services.cern.ch/root-jenkins/job/root-benchmark/2577/BUILDTYPE=Release,COMPILER=default,LABEL=performance-cc8,SPEC=default/parsed_console/",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8145:1301,benchmark,benchmark,1301,https://root.cern,https://github.com/root-project/root/issues/8145,5,['benchmark'],['benchmark']
Testability,"IMPORTANT! It is not yet enabling web canvas as default. 1. By default enable all `TWebCanvas` interactive features. Now zooming, log scale change, pad clicking, tooltip is reflected on C++ back. See `hlHisto[1/2/3/4].C` tutorials; 2. Testing all tutorials in `tutorials/hist/` subfolder. Basic display works for all of them, some interactive features (especially with `TExec`) not yet.; 3. Update JSROOT with correspondent changes plus many other improvements,",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11688:130,log,log,130,https://root.cern,https://github.com/root-project/root/pull/11688,2,"['Test', 'log']","['Testing', 'log']"
Testability,"Idea to create separate actions list, which will be used only for text-based streaming.; Most actions functions can be reused from normal I/O, ; only several cases should be implemented slightly different. On the long run one could create complimentary actions list for reading data with TBufferXML or TBufferSQL2 and fully isolate text-based and binary I/O. That is in PR:; - creating separate list **fWriteText,** now used only with JSON; - provide new method TStreamerInfo::AddWriteTextAction() to fill actions list; - actions build from the full list of class members (avoid compressed members); - provide specialized actions for kTNamed, kTObject, kSTLp and kStreamLoop; - make actions for kSTLp and kStreamLoop with template parameter isText, potentially can be reused in binary I/O. PR solves several existing problem with JSON:; - TNamed and TObject as direct data members; - correct store of kSTLp members with arrays; - kStreamLoop member with fCounter==0; - kStreamLoop member with fCounter==1; - rudimentary support for TRef; - store dummy TObject instance. With provided code all my test classes working. I can provide patch for roottest. P.S. Most probably, Travis-CI check will be unhappy about source-code formatting.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/578:1096,test,test,1096,https://root.cern,https://github.com/root-project/root/pull/578,1,['test'],['test']
Testability,Ideally test that are stopped by a time-out would record a stack trace of where they were.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15144:8,test,test,8,https://root.cern,https://github.com/root-project/root/issues/15144,1,['test'],['test']
Testability,"If IMT is disabled, force the execution policy to be `ROOT::Fit::ExecutionPolicy::kSerial`, warning the user that a change in the execution policy has been made. This should fix the errors in the tests built without IMT. When the support for `kMultitProcess` is finished, maybe we should change this and force the execution policy to be `kMultitProcess`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/871:196,test,tests,196,https://root.cern,https://github.com/root-project/root/pull/871,1,['test'],['tests']
Testability,"If `xml=OFF`, the test can still be compiled, which is always good for coverage. But it can't be run: the `hist2workspace` executable is missing. This was discovered in this PR:; * https://github.com/root-project/root/pull/16674",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16675:18,test,test,18,https://root.cern,https://github.com/root-project/root/pull/16675,1,['test'],['test']
Testability,"If a RooAbsTestStatistic is evaluated with nCPU > 1, the ""Slave"" test; statistic objects don't apply the global normalization factor. It is therefore the responsability of the ""MPMaster"" test statistic; object to apply the global normalization in the end. However, this was; not done before this commit. Fixes Jira issue [ROOT-5557](https://sft.its.cern.ch/jira/browse/ROOT-5557).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7984:65,test,test,65,https://root.cern,https://github.com/root-project/root/pull/7984,2,['test'],['test']
Testability,"If a RooProdPdf is created with the `Conditional` command argument to do; a conditional fit, there is a flag `depsAreCond` to the command argument; that specifies if the passed variable set corresponds to the; normalization set of the conditional PDF (default), or the conditional; observables. In the new BatchMode, this flag was not considered, which; is fixed by this PR. A new unit test that checks that the `depsAreCond` parameter is; correctly considered in both the BatchMode and the old RooFit is also; implemented, based on the issue reproducer code that was kindly provided; by @elusian in https://github.com/root-project/root/issues/11332. This PR also merges the `testRooProductPdf` and `testRooProdPdf`; files, because they are both testing the RooProdPdf. Closes https://github.com/root-project/root/issues/11332. A secondary commit with some code improvements to the RooProdPdf class is also included in this PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11343:386,test,test,386,https://root.cern,https://github.com/root-project/root/pull/11343,4,['test'],"['test', 'testRooProdPdf', 'testRooProductPdf', 'testing']"
Testability,"If a TClass is in fClassesToUpdate, we must run the dictionary; function to replace it (move it from kInterpreted/kEmulated/kForwardDeclared; to kHasTClassInit). Whether the classes on the list need to be processed is not related to whether; parsing on demand or module are turned on (even if those can affect the likely; hood that the list is populated or not). This fixes the problem see in the test 'pyunittests-pyroot-ttree_asmatrix':; ```; Fatal in <TClass::SetUnloaded>: The TClass for __gnu_cxx::__normal_iterator<double*,vector<double> > is being unloaded when in state 3; ```; seen in the builds with cxxruntime_module turned on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4416:397,test,test,397,https://root.cern,https://github.com/root-project/root/pull/4416,1,['test'],['test']
Testability,"If a fit fails, it might produce non-finite confidence levels. This can; be a problem for the hypothesis test inversion.; Here, all non-finite numbers are skipped, in the hope that this can; stabilise a limit calculation in cases where the failed fits are; irrelevant for finding the 95% CL.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6166:105,test,test,105,https://root.cern,https://github.com/root-project/root/pull/6166,1,['test'],['test']
Testability,"If a server is redirected, the cached normalization sets in `RooAbsPdf`; and `RooAddPdf` might not point to the right observables anymore. We; need to reset them. A unit test based on the code that originally unveiled this issue is; also implemented. This is a backport of https://github.com/root-project/root/pull/9552.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9560:170,test,test,170,https://root.cern,https://github.com/root-project/root/pull/9560,1,['test'],['test']
Testability,"If browser executable were detected by cmake,; add `test-stressgraphics-chrome` and `test-stressgraphics-firefox` test. Analyze produced images by blocks - first run N tests and then check image sizes.; In web mode this allows to really use batch mode when up to 80 images produced with single browser call.; This reduce test execution time from 110 to 52 seconds, or even 43 seconds with firefox. Calculate web rootmark based on realtime - while most time spent in the browser execution.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16610:52,test,test-stressgraphics-chrome,52,https://root.cern,https://github.com/root-project/root/pull/16610,10,['test'],"['test', 'test-stressgraphics-chrome', 'test-stressgraphics-firefox', 'tests']"
Testability,"If external nlohmann/json.hpp used in ROOT,; it also has to be used in the tests. Backport of #14784",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14805:75,test,tests,75,https://root.cern,https://github.com/root-project/root/pull/14805,1,['test'],['tests']
Testability,"If external nlohmann/json.hpp used in ROOT,; it also has to be used in the tests. Should fix #14769",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14784:75,test,tests,75,https://root.cern,https://github.com/root-project/root/pull/14784,1,['test'],['tests']
Testability,"If external version of `nlohmann/json.hpp` is provided,; always test if json_fwd.hpp is there. If not, one only; can use versions 3.9 .. 3.10, for which forward declaration; match to included into `REveElement.hxx`. After LLVM upgrade one can fully skip usage of `json_fwd.hpp` header",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11268:64,test,test,64,https://root.cern,https://github.com/root-project/root/pull/11268,1,['test'],['test']
Testability,"If local web display configured,; only build variants will be tested. Fixes issue #15340",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15345:62,test,tested,62,https://root.cern,https://github.com/root-project/root/pull/15345,1,['test'],['tested']
Testability,"If local web display configured,; only build variants will be tested. Fixes issue #15340. Backport of #15345",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15347:62,test,tested,62,https://root.cern,https://github.com/root-project/root/pull/15347,1,['test'],['tested']
Testability,"If macro changes `gPad`, TWebCanvas was able to interfere and brake logic.; Now gPad will be changed only after active actions of the user. Improve X/Y range selection when drawing TH1/TGraph/TF1. Now produced range is; very close to native ROOT. Both effects causes problems in `tutorials/hist/transpad.C` which will work now.; Also several other tutorials will work better now.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14944:68,log,logic,68,https://root.cern,https://github.com/root-project/root/pull/14944,1,['log'],['logic']
Testability,"If not built with the same compiler, CMAKE_CXX_FLAGS may contain flags not known by the default compiler, which will make the test fail. In particular using Ninja + Clang on Linux makes this test fail with the error below without this patch.; ```; c++: error: unrecognized command line option ‘-fcolor-diagnostics’; ninja: build stopped: subcommand failed.; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3389:126,test,test,126,https://root.cern,https://github.com/root-project/root/pull/3389,2,['test'],['test']
Testability,"If one builds a model where two variables have the same name, everything go un-noticed and result can be not correct. ; An example is in the test program attached to ROOT-3555, where a simultaneous pdf is built with two Gaussian, defined with different mean and sigma parameters, having the same name.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7417:141,test,test,141,https://root.cern,https://github.com/root-project/root/issues/7417,1,['test'],['test']
Testability,"If one overloads `RooAbsArg::redirectServersHook()`, one also needs to; call the `redirectServersHook()` of the base class. Otherwise, important; things that must be done when redirecting the servers of a `RooAbsReal`; or `RooAbsPdf` for example are not done. In particular, this fixes some ASAN build test failures where the; `RooAbsPdf::_normSet` member was not reset when redirecting servers; because `RooAbsPdf::redirectServersHook()` was not called. A second, minor commit in this PR cleans the includes in `stressRooFit_tests.h`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11194:302,test,test,302,https://root.cern,https://github.com/root-project/root/pull/11194,1,['test'],['test']
Testability,"If specified, enforce unique key every time client connect to; web window. Once key used, it is not possible to use it again for reconnect.; If one wants to connect to window again, one should; call RWebWindow::Show() method again. Now parameter is off, but once tested - will be enabled by default.; This should significantly increase security for web applications. Fix problem with random seed for key generation . Add warning when browser on remote node is started - by checking DISPLAY variable",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11213:263,test,tested,263,https://root.cern,https://github.com/root-project/root/pull/11213,1,['test'],['tested']
Testability,"If subBranchName is already in bNamesReg, then we don't need to try to reinsert it.; This patch shaves off ~10% from the runtime of an exploration of a large test TTree.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11538:158,test,test,158,https://root.cern,https://github.com/root-project/root/pull/11538,1,['test'],['test']
Testability,"If the proxy normSet changed, we also have to set the value dirty flag; of the proxy owner. Otherwise, value for the new normalization set might; not get recomputed, which causes bugs!. The issue can be reproduced with this small code snippet:. ```C++; using namespace RooFit;. RooRealVar x(""x"", ""x"", 0, -10, 10);; RooGaussian gauss(""gauss"", ""gauss"", x, RooConst(0), RooConst(2));; RooAddition add(""add"", ""add"", {gauss});. std::cout << add.getVal() << std::endl;; std::cout << add.getVal(x) << std::endl;; ```. Without this commit, the value will be the same with and without; normalization set, because changing only the normalization set didn't; trigger a recomputation. This code snippet has also been implemented as a unit test now, where it; is tested that the values are different.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10857:727,test,test,727,https://root.cern,https://github.com/root-project/root/pull/10857,2,['test'],"['test', 'tested']"
Testability,"If the user doesn't provide a histogram model in distributed mode, the; merging of different histograms coming from different distributed tasks; would not work since the histograms would most probably have; incompatible bins. Rather than wait for failures like. `Error in <Merge>: Cannot merge histograms - limits are inconsistent`. that happen only when the distributed execution has already started and; may be hidden inside worker logs, raise an error in the local user; machine. An example of the error raised with this change: running this snippet; ```python; import ROOT; RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame; from dask.distributed import Client, LocalCluster. def create_connection():; cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=True); client = Client(cluster); return client. if __name__ == ""__main__"":; df = RDataFrame(10, daskclient = create_connection()).Define(""x"",""rdfentry_""); m = ROOT.RDF.TH1DModel(""name"",""title"",10,0,10); df.Histo1D(m, ""x""); print(""After first Histo1D""); df.Histo1D((""name"",""title"",10,0,10), ""x""); print(""After second Histo1D""); df.Histo1D(""x""); print(""After third Histo1D""); ```; results in; ```; After first Histo1D; After second Histo1D; Traceback (most recent call last):; File ""/home/vpadulan/projects/rootcode/distrdf-histo-nomodel/test.py"", line 17, in <module>; df.Histo1D(""x""); File ""/home/vpadulan/programs/rootproject/rootbuild/master-default/lib/DistRDF/Proxy.py"", line 240, in _create_new_op; op = Operation.create_op(self.proxied_node._new_op_name, *args, **kwargs); File ""/home/vpadulan/programs/rootproject/rootbuild/master-default/lib/DistRDF/Operation.py"", line 118, in create_op; return SUPPORTED_OPERATIONS[name](name, *args, **kwargs); File ""/home/vpadulan/programs/rootproject/rootbuild/master-default/lib/DistRDF/Operation.py"", line 60, in __init__; raise TypeError(textwrap.fill(message)); TypeError: A histogram was created without a model. This cannot work in; distributed mode because hist",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10368:434,log,logs,434,https://root.cern,https://github.com/root-project/root/pull/10368,1,['log'],['logs']
Testability,"If users have not explicitly set the RNTuple's compression settings through `RNTupleWriteOptions` and are added to a TFile, use the TFile's compression. Before: ; ```cpp; {; // set file compression algo to 101 (zlib); auto file = std::make_unique<TFile>(fileGuard.GetPath().c_str(), ""RECREATE"", """", 101);; auto model = RNTupleModel::Create();; auto field = model->MakeField<float>(""field"");; auto ntuple = RNTupleWriter::Append(std::move(model), ""Events"", *file);; ntuple->Fill();; }. // ntuple uses default compression level 404 (lz4); std::ostringstream oss;; auto ntuple = RNTupleReader::Open(""Events"", fileGuard.GetPath());; ntuple->PrintInfo(ROOT::Experimental::ENTupleInfo::kStorageDetails, oss);; EXPECT_THAT(oss.str(), testing::HasSubstr(""Compression: 404""));; ```. After:; ```cpp; {; // set file compression algo to 101 (zlib); auto file = std::make_unique<TFile>(fileGuard.GetPath().c_str(), ""RECREATE"", """", 101);; auto model = RNTupleModel::Create();; auto field = model->MakeField<float>(""field"");; auto ntuple = RNTupleWriter::Append(std::move(model), ""Events"", *file);; ntuple->Fill();; }. // ntuple uses TFile's compression level; std::ostringstream oss;; auto ntuple = RNTupleReader::Open(""Events"", fileGuard.GetPath());; ntuple->PrintInfo(ROOT::Experimental::ENTupleInfo::kStorageDetails, oss);; EXPECT_THAT(oss.str(), testing::HasSubstr(""Compression: 101""));; ```. Specify we want compression level 404: ; ```cpp; {; // set file compression algo to 101 (zlib); auto file = std::make_unique<TFile>(fileGuard.GetPath().c_str(), ""RECREATE"", """", 101);; auto model = RNTupleModel::Create();; auto field = model->MakeField<float>(""field"");; RNTupleWriteOptions opt;; opt.SetCompression(404);; auto ntuple = RNTupleWriter::Append(std::move(model), ""Events"", *file, opt);; ntuple->Fill();; }. // ntuple uses explicitly set compression level; std::ostringstream oss;; auto ntuple = RNTupleReader::Open(""Events"", fileGuard.GetPath());; ntuple->PrintInfo(ROOT::Experimental::ENTupleInfo::kStora",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7749:727,test,testing,727,https://root.cern,https://github.com/root-project/root/pull/7749,1,['test'],['testing']
Testability,"If we call TCling::Load on an already loaded library we dlclose and dlopen the library. However, currently we do not have a facility to 'reload'/undo the effect of TCling::LoadPCM. This patch adds a section in the dictionary for de-registration which is reverse to TCling::RegisterModule -- TCling::UnRegisterModule. It tracks down which library is being reloaded and does not trigger a re-read of the rdict pcm. The current stub is can be further expanded to undo the effects caused by TCling::RegisterModule and/or improve the TCling shutdown by running the interpreter-dependent shutdown of the dictionary. The intent of this patch is to fix the failing OSX tests with. Error in <TCling::LoadPCM>: ROOT PCM /.../libTree_rdict.pcm file does not exist; Info in <TCling::LoadPCM>: In-memory ROOT PCM candidate /.../libASImageGui_rdict.pcm; Info in <TCling::LoadPCM>: In-memory ROOT PCM candidate /.../libASImage_rdict.pcm",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5420:425,stub,stub,425,https://root.cern,https://github.com/root-project/root/pull/5420,2,"['stub', 'test']","['stub', 'tests']"
Testability,"If we use more than 2 GB of memory on a 32bit Windows machine, the test; will break because of the memory limit. This happens if we run the tests; with a high concurrency, e.g., with 32 threads. Fix the concurrency to 8; threads to prevent this issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6842:67,test,test,67,https://root.cern,https://github.com/root-project/root/pull/6842,2,['test'],"['test', 'tests']"
Testability,"If you add components where each component only depends on a subset of the union set of the observables, the RooAddPdf should understand that the component is uniform in the missing observables. This is validated in a new unit test for both the getVal() interface and evaluation with the RooFit::Evaluator. To make this work, the projection integrals are evaluated for no specific normalization set in `RooAddPdf::computeBatch()` the supplementary normalization terms are already included in `RooAddPdf::compileForNormSet()` and they should not be double counted. This commit also makes the RooAddPdf tests less verbose by using more the RooWorkspace.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13538:227,test,test,227,https://root.cern,https://github.com/root-project/root/pull/13538,2,['test'],"['test', 'tests']"
Testability,Implement RX option in case of Log Scale.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11938:31,Log,Log,31,https://root.cern,https://github.com/root-project/root/issues/11938,1,['Log'],['Log']
Testability,"Implement proper handling of canvas window size and canvas drawing area size. By default web browser with given window size/position will be started. Depending from context menu,; status line, other layout components drawing area will be reduced to some value and always adjust to that area. With the call `TCanvas::SetCanvasSize(width,height)` one can fix drawing area to exact value, which does not change with web browser resize. One can toggle state either with context menu or by calling ``c1->SetCanvasSize(0,0)`. All browser window position/size changes are reflected in the TCanvas members. Provide JSROOT with new resize logic, also includes support of TLatex in 3D plots",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13268:630,log,logic,630,https://root.cern,https://github.com/root-project/root/pull/13268,1,['log'],['logic']
Testability,Implement reversed graphs for error bars and log scale.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12235:45,log,log,45,https://root.cern,https://github.com/root-project/root/pull/12235,1,['log'],['log']
Testability,"Implement the possibility to save TGraph* as .csv, .tsv and .txt; as requested here https://github.com/root-project/root/issues/9491. Test example:. ```; {; auto c = new TCanvas(""c"",""A Simple Graph without axis"",700,500);. const Int_t n = 10;; auto gr = new TGraph(n);; gr->SetTitle(""A Simple Graph"");; gr->GetXaxis()->SetTitle(""X axis"");; gr->GetYaxis()->SetTitle(""Y axis"");. auto gre = new TGraphErrors(n);; gre->GetXaxis()->SetTitle(""X axis"");; gre->GetYaxis()->SetTitle(""Y axis"");; gre->SetTitle(""A Simple Graph with errors"");. auto gra = new TGraphAsymmErrors(n);; gra->GetXaxis()->SetTitle(""X axis"");; gra->GetYaxis()->SetTitle(""Y axis"");; gra->SetTitle(""A Simple Graph with asymmetric errors"");. auto grb = new TGraphBentErrors(n);; grb->GetXaxis()->SetTitle(""X axis"");; grb->GetYaxis()->SetTitle(""Y axis"");; grb->SetTitle(""A Simple Graph with bent errors"");. Double_t x, y, exl, exh, eyl, eyh;; for (Int_t i=0;i<n;i++) {; x = i*0.123;; y = 10*sin(x+0.2);; exl = x*0.01;; exh = x*0.1;; eyl = y*0.01;; eyh = y*0.1;; gr->SetPoint(i,x,y);; gre->SetPoint(i,x,y);; gre->SetPointError(i,exl,eyl);; gra->SetPoint(i,x,y);; gra->SetPointError(i,exl,exh, eyl, eyh);; grb->SetPoint(i,x,y);; grb->SetPointError(i,exl,exh, eyl, eyh);; }. gr->Draw(""A*L"");; gr->SaveAs(""graph.csv"", ""title"");; gr->SaveAs(""graph.tsv"", ""title"");; gr->SaveAs(""graph.txt"", ""title"");; gr->SaveAs(""graph.C"");; gre->SaveAs(""grapherror.csv"", ""title"");; gre->SaveAs(""grapherror.tsv"", ""title"");; gre->SaveAs(""grapherror.txt"", ""title"");; gra->SaveAs(""graphaerror.csv"", ""title"");; gra->SaveAs(""graphaerror.tsv"", ""title"");; gra->SaveAs(""graphaerror.txt"", ""title"");; grb->SaveAs(""graphberror.csv"", ""title"");; grb->SaveAs(""graphberror.tsv"", ""title"");; grb->SaveAs(""graphberror.txt"", ""title"");. }; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10365:134,Test,Test,134,https://root.cern,https://github.com/root-project/root/pull/10365,1,['Test'],['Test']
Testability,"Implementation and behavior is the same as `TGraph::GetPoint`.; PR was motivated by a friend from ATLAS who asked why `TGraph` had a `GetPoint` method but `TGraph2D` didn't. If this feature is undesired feel free to close the PR. I could not find tests for `TGraph2D`'s methods anywhere, so I attach a minimal test for this method here:; ```cpp; #include <TGraph2D.h>; #include <TError.h>. int main(); {; TGraph2D g;; g.SetPoint(0, 1., 2., 3.);; double x, y, z;; R__ASSERT(-1 == g.GetPoint(-3, x, y, z));; R__ASSERT(-1 == g.GetPoint(1, x, y, z));; R__ASSERT(0 == g.GetPoint(0, x, y, z));; R__ASSERT(1. == x);; R__ASSERT(2. == y);; R__ASSERT(3. == z);; return 0;; }; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2400:247,test,tests,247,https://root.cern,https://github.com/root-project/root/pull/2400,2,['test'],"['test', 'tests']"
Testability,Implementation of a Variable Plotter for RNode and RTensor inputs.; See [PR 4211](https://github.com/root-project/root/pull/4211) for a first attempt / inspiration. . ## Changes or fixes:. Created main class: ; * /tmva/tmvagui/src/RVariablePlotter.cxx; * /tmva/tmvagui/inc/RVariablePlotter.hxx. Created six tutorials: ; * /tutorials/tmva/tmva005_RVariablePlotter.C ; * /tutorials/tmva/tmva006_RVariablePlotter_RTensor.C ; * /tutorials/tmva/tmva007_RVariablePlotter_Higgs_Output.C; * /tutorials/tmva/tmva008_RVariablePlotter_RTensor_Output.C; * /tutorials/tmva/tmva009_RVariablePlotter_Higgs_ROC.C; * /tutorials/tmva/tmva010_RVariablePlotter_Higgs_MultiROC.C. ## Checklist:. - [ ✅] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8723:681,test,tested,681,https://root.cern,https://github.com/root-project/root/pull/8723,1,['test'],['tested']
Testability,Implementation of a Variable Plotter for RNode and RTensor inputs.; See [PR 4211](https://github.com/root-project/root/pull/4211) for a first attempt / inspiration. . ## Changes or fixes:; Created main class: ; * /tmva/tmvagui/src/RVariablePlotter.cxx; * /tmva/tmvagui/inc/RVariablePlotter.hxx. Created two tutorials: ; * /tutorials/tmva/tmva005_RVariablePlotter.C ; * /tutorials/tmva/tmva005_RVariablePlotter_RTensor.C . ## Checklist:. - [ ✅] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8690:444,test,tested,444,https://root.cern,https://github.com/root-project/root/pull/8690,3,['test'],['tested']
Testability,Implemented pythonization to RDF Define.; Define can now directly accept a python callable.; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11078:158,test,tested,158,https://root.cern,https://github.com/root-project/root/pull/11078,1,['test'],['tested']
Testability,"Implements `RooLinkedList::begin()`, `end()`, `rbegin()`, `rend()` and; extends the `RooLinkedListIterImpl` interface to support range-based; loops for the `RooLinkedList`. Range-based loops on `RooLinkedList` are also used in some places in; RooFit to test this new feature. In particular the function; `RooCmdConfig::process` is used in basically every RooFit script. This commit also adds `RooLinkedList::size()` and `empty()` for better compatibility with STL containers and automatic pythonizations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8842:253,test,test,253,https://root.cern,https://github.com/root-project/root/pull/8842,1,['test'],['test']
Testability,"Implements a basic `RRawFileUnix::ReadV` implementation using the `io_uring` async backend. ; Note: `ReadV` performs many disjoint reads on one file, not scatter IO using `readv`. Basic means: ; * simple error-handling ; * no interrupt considerations; * ~~no submission queue event batching (large `nReq` may exhaust memory resources)~~ implemented in 8c8a841 . The idea is to benchmark whether io_uring allows us to take advantage of modern IO devices, e.g. SSD queue depth etc. . I also factored out a common test header `io_test.hxx` from `test/RRawFile.cxx` for use in `test/RIoUring.cxx`",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6162:377,benchmark,benchmark,377,https://root.cern,https://github.com/root-project/root/pull/6162,4,"['benchmark', 'test']","['benchmark', 'test']"
Testability,"Implements the class `RNTupleImporter` from the ntuple utility package. The class reads a ROOT tree and writes the data out as RNTuple. Most branch types map directly to RNTuple field types, with some exceptions:. - C strings are converted to `std::string`; - C fixed-size arrays are converted to `std::array`; - Leaf lists are converted to untyped records; - Count leaf arrays are converted to untyped collections with generic names (`_collection0`, `_collection1`, etc.). In a follow up PR, RNTuple should receive functionality for ""stored projections"". That will allow storing virtual fields whose data comes from physical columns. In this way, the data from the untyped collections can be presented with their original TTree names (e.g., `njets`, `jet_pt`, etc.). At this point, the importer can process all the RNTuple benchmark files (LHCb ntuples, H1, ATLAS OpenData, CMS nanoAOD). The work is partially based on a [GSoC project](https://hepsoftwarefoundation.org/gsoc/blogs/2022/blog_ROOT_ZifengLuo.html). Todo for this PR:. - [x] Improve code comments; - [x] Add tutorial. In a follow-up PR, importing for leaf count arrays should be improved with vector writes. Use of bulk I/O in general should speed up the import.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11825:824,benchmark,benchmark,824,https://root.cern,https://github.com/root-project/root/pull/11825,1,['benchmark'],['benchmark']
Testability,"Implicit instantiation of a function template calls `DeclCollector::HandleCXXImplicitFunctionInstantiation()`, which appends the; FunctionDecl to the transaction. According to clang documentation [here](https://clang.llvm.org/doxygen/classclang_1_1ASTConsumer.html#a880e9a2fd04c8abd5cd218e0a4ed2e56), the body of the function has not yet been instantiated. `HandleTopLevelDecl()` will be called again for this decl at the end of the TU, which will append it again to the transaction - same `Decl *`, different ConsumerCallInfo. This is by design. However, unloading of decls in the transaction should not process the same `Decl *` twice. In particular, entries with `ConsumerCallInfo == kCCIHandleCXXImplicitFunctionInstantiation` will omitted. ## Changes or fixes:; - Do not call `UnloadDecl()` if the declaration came through `HandleCXXImplicitFunctionInstantiation()`. ## Checklist:; - [X] tested changes locally. This PR fixes #9850.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10037:893,test,tested,893,https://root.cern,https://github.com/root-project/root/pull/10037,1,['test'],['tested']
Testability,Improve BinnedFit test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1068:18,test,test,18,https://root.cern,https://github.com/root-project/root/pull/1068,1,['test'],['test']
Testability,Improve also TF1::GetRandom to control log(linear) scale when computing the tabulated CDF; used for generating the random numbers. This fixes ROOT-9583,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6257:39,log,log,39,https://root.cern,https://github.com/root-project/root/pull/6257,1,['log'],['log']
Testability,Improve and fix rnn forward tests for simple RNN cells and GRU. This commit fixes a failure observed in incremental builds with debug mode,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5327:28,test,tests,28,https://root.cern,https://github.com/root-project/root/pull/5327,1,['test'],['tests']
Testability,Improve compare() function in testGenVectorVc,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2832:30,test,testGenVectorVc,30,https://root.cern,https://github.com/root-project/root/pull/2832,1,['test'],['testGenVectorVc']
Testability,"Improve logging:; * Add button in menu bar to show the highest severity message; * Show client log message in Dialog instead of popover. Add simple window management: in view menu add items to switch sides, make single, and hide/show views",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9515:8,log,logging,8,https://root.cern,https://github.com/root-project/root/pull/9515,2,['log'],"['log', 'logging']"
Testability,Improve the calculation for the binary cross entropy loss when the inputs are very large (and also very large negative). Use correct log approximation to avoid loss of precisions and returning infinity values. Fix both the CPU and GPU calculations. This has been initiated by this post https://root-forum.cern.ch/t/when-tmva-comput-loss-some-eopchs-loss-is-inf/57018/ where `inf` loss values were obtained during training,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14092:133,log,log,133,https://root.cern,https://github.com/root-project/root/pull/14092,1,['log'],['log']
Testability,"Improve the workaround for the deletion of fInterpreter in the TROOT destructor, which is needed in rootcling for c++ modules, and fix (or disable) the last failing tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6215:165,test,tests,165,https://root.cern,https://github.com/root-project/root/pull/6215,1,['test'],['tests']
Testability,Improved error message on wrong exit code in test driver,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/904:45,test,test,45,https://root.cern,https://github.com/root-project/root/pull/904,1,['test'],['test']
Testability,Improved support of TChain construction on the distributed executors with information; of the input TTree and its friends. Steps:; 1. Bring utility functions from TTreeProcessorMT in their own inline namespace; 2. Call them in HeadNode.get_treeinfo to retrieve information about the full path to the tree and the information about its friends; 3. Create a new namedtuple `TreeInfo` and use that to pass information around; 4. In particular construct `Range` objects starting from the information contained in `TreeInfo` objects; 5. The mapper function will in turn use `Range`s. This improved logic allows also support for friend trees with aliases. DistRDF tests have been adjusted according to the new functions. TODO:; - [x] Add doxygen in TreePlayerUtils; - [ ] Add c++ only specific test for GetFriendInfo and GetTreeFullPaths functions,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7730:593,log,logic,593,https://root.cern,https://github.com/root-project/root/pull/7730,3,"['log', 'test']","['logic', 'test', 'tests']"
Testability,"Improved variant of PR #578 . Idea to create separate actions list, which will be used only for text-based streaming.; Most actions functions can be reused from normal I/O,; only several cases should be implemented slightly different. On the long run one could create complimentary actions list for reading data with TBufferXML or TBufferSQL2 and fully isolate text-based and binary I/O. That is in PR:. creating separate list fWriteText, now used only with JSON; provide new method TStreamerInfo::AddWriteTextAction() to fill actions list; actions build from the full list of class members (avoid compressed members); provide specialized actions for kTNamed, kTObject, kSTLp and kStreamLoop; make actions for kSTLp and kStreamLoop with template parameter isText, potentially can be reused in binary I/O. PR solves several existing problem with JSON:. TNamed and TObject as direct data members; correct store of kSTLp members with arrays; kStreamLoop member with fCounter==0; kStreamLoop member with fCounter==1; rudimentary support for TRef; store dummy TObject instance. With provided code all my test classes working. I can provide patch for roottest. P.S. Most probably, Travis-CI check will be unhappy about source-code formatting.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/580:1099,test,test,1099,https://root.cern,https://github.com/root-project/root/pull/580,1,['test'],['test']
Testability,Improvements on resource restrictions for distributed tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11439:54,test,tests,54,https://root.cern,https://github.com/root-project/root/pull/11439,1,['test'],['tests']
Testability,"Improves the test coverage, which we need for #7502",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7687:13,test,test,13,https://root.cern,https://github.com/root-project/root/pull/7687,1,['test'],['test']
Testability,"In GCC9, operator== and operator!= are no longer member functions of STL iterators (seen in _Rb_tree_iterator). This means they cannot be obtained anymore with GetListOfMethods of the iterator class. Such change broke the iteration of STL classes from Python when using (old) cppyy alone in GCC9. The addition of the operators to the iterator class still happened when importing ROOT because; in that case gApplication is initialized to TPyROOTApplication, which is required in Utility::AddBinaryOperator to add the operators. This PR adds the necessary logic so that operator== and operator!= are also added to the iterator proxy class when using cppyy alone in GCC9. The addition is done lazily as a last attempt before throwing an error in the comparison.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4678:554,log,logic,554,https://root.cern,https://github.com/root-project/root/pull/4678,1,['log'],['logic']
Testability,"In HistFactory, normalization uncertainties and shape uncertainties were; treated differently when setting the constraint type to uniform, e.g.:. ```xml; <ConstraintTerm Type=""Uniform"" RelativeUncertainty=""1"">NP_shape</ConstraintTerm>; <ConstraintTerm Type=""Uniform"" RelativeUncertainty=""1"">NP_norm</ConstraintTerm>; ```. See #9070 for a very good explanation of the problem. For non-shape uncertainties, the uniform constraint was treated as a; special case of the Gaussian constraint with ""infinite"" sigma. For shape; uncertainties, the `Uniform` type was ignored. This commit suggests to refactor the creation of Gaussian constraints; such that the logic that considers the ""Uniform"" tag is also used for; shape uncertainties. Closes #9070.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10525:652,log,logic,652,https://root.cern,https://github.com/root-project/root/pull/10525,1,['log'],['logic']
Testability,"In Jira issue [ROOT-10457](https://sft.its.cern.ch/jira/browse/ROOT-10457), it was reported that creating an iterator form; a RooArgList in Python does not work. In ROOT master it seems to work, and this commit suggests to put the; issue in a unit test so that we are sure that is works on all platforms.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8042:248,test,test,248,https://root.cern,https://github.com/root-project/root/pull/8042,1,['test'],['test']
Testability,"In ROOT 6.24/06 we see that merging produces unexpected results for the following situation:. - 2D histogram, Y axis has labels, X axis does not, SetCanExtend is set for the X axis; - h2 has more bins in X; - h1.Merge is called with a TList containing h2. The result has only the bins from h1 and is not extended to match h2. If the Y axis does not have labels, the X axis is correctly extended by the merge. A Python test case follows:. ```; from ROOT import TH2F, TList. NBINSX = 5; NBINSY = 1. horig = TH2F('horig', 'histogram', NBINSX, 0, NBINSX, NBINSY, 0, NBINSY); yax = horig.GetYaxis(); # if labels are not set for the y axis, the output is what is expected; for i in range(NBINSY):; yax.SetBinLabel(i+1, f'{i+1}'); horig.GetXaxis().SetCanExtend(True). hclone = horig.Clone(); hclone.LabelsInflate('X'); hclone.Fill(NBINSX-1, 0). l = TList(); l.Add(hclone); horig.Merge(l). print(f'Number of X bins in merged histogram: {horig.GetNbinsX()} (expected {hclone.GetNbinsX()})'); ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10828:418,test,test,418,https://root.cern,https://github.com/root-project/root/issues/10828,1,['test'],['test']
Testability,"In RPageStorageFile we're currently either writing all pages in a single vector write or, if their total size exceeds `maxKeySize`, we commit one at a time.; With this change we try to commit as many consecutive pages as possible and split the vector write as soon as the next page would exceed `maxKeySize`. If a single page is bigger than `maxKeySize` we take care to write it in the non-vectorized fashion, since splitting a key is only supported through `WriteBlob()`. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15974:494,test,tested,494,https://root.cern,https://github.com/root-project/root/pull/15974,1,['test'],['tested']
Testability,"In RooFit, there are many functions that return pointers that are owned; by the caller. We can't change this interface anymore, but we can wrap; the return values transparently in a raw pointer wrapper that is called; a `RooFit::Owner`. On the C++ side, this helps to analyze your code and detect potential; memory leaks. On the Python side, we can tell cppyy to take ownership; of the object if the pointer is wrapped in a owning pointer such as the; `RooFit::Owner`. This is more flexible and convenient than the existing; cppyy way of flagging the CPPOverloads on the Python side with the; `__creates__ = True` attribute for at least two reasons:. 1. This flag can't be applied at the granularity of indivirual C++; overloads; 2. It's only on the Python side, so if you want to flag these functions; in C++ as well as in Python you have to do some bookkeeping. A unit test was implemented to check that the `RooFit::Owner` behaves in; Python as expected, and that there is no memory leaking when using; functions that return them. As a first example, the `RooFit::Owner` is used in the highly used; function `RooAbsPdf::generate`, so we also get quite some test coverage; from the tutorials. In the future after this initial effort, the remaining RooFit functions; should be migrated to fix many memory leaks in PyROOT user code.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9392:871,test,test,871,https://root.cern,https://github.com/root-project/root/pull/9392,2,['test'],['test']
Testability,"In TBufferFile::WriteFastArrayString, we had. ```; if (n < 255) {; *this << (UChar_t)n;; } else {; *this << (UChar_t)255;; *this << n;; }; ```. A recent commit changed the type of the n parameter from Int_t to Long64_t. This is effectively an incompatible change in the on-disk format, but only for strings which are at least 255 characters long. Further, ReadFastArrayString is still reading an Int_t, so this version of ROOT cannot read files that it writes. Resolve by changing WriteFastArrayString to explicitly write an Int_t. Also move the bounds check on the length to before writing anything into the buffer. Fixes a failure seen in the unit tests of the ATLAS EventInfo package in the dev3LCG build. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [x ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14887:650,test,tests,650,https://root.cern,https://github.com/root-project/root/pull/14887,2,['test'],"['tested', 'tests']"
Testability,"In TMVA code the `fLogger` data member appears in several classes. Sometimes it is persistant ( a `! ` in the online comment) and sometimes it is not. Making a ""log message"" persistant sounds a bit weird ... But may be it should be ? ... at least the current code is not consistent: ; ```; tmva/inc/TMVA/ClassInfo.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service; tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger; tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger; tmva/inc/TMVA/Ra",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9792:161,log,log,161,https://root.cern,https://github.com/root-project/root/issues/9792,10,['log'],"['log', 'logger']"
Testability,"In `testSumW2Error`, a weighted clone of an unweighted dataset is; created, where each event gets the weight `0.5`. However, in the loop over the original dataset used to fill the new; dataset, `get(i)` is never called, meaning the new weighted dataset is; only filled with the same values. This resulted in an unstable fit,; necessitating careful tweaking of the initial parameters to even get; convergence. That's why it's better to copy the dataset correctly, even; if this is just the test case. I noticed this problem when I was; copy-pasting code to create another new unit test. Also, the binned dataset is now a binned clone of the unbinned dataset; in the test, reducing the degree of randomness. Furthermore, some general code improvements are applied to the source; file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11966:489,test,test,489,https://root.cern,https://github.com/root-project/root/pull/11966,3,['test'],['test']
Testability,"In a C++20 build (in this case using GCC 13):; ```; $ touch test.cpp; $ ./bin/root; ------------------------------------------------------------------; | Welcome to ROOT 6.29/01 https://root.cern |; | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on May 02 2023, 08:25:11 |; | From heads/master@v6-29-01-1276-g12cf386128 |; | With g++ (GCC) 13.1.0 |; | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------. root [0] .L test.cpp++; Info in <TUnixSystem::ACLiC>: creating shared library /home/jhahnfel/ROOT/build-asserts-gcc13-cxx20/./test_cpp.so; In file included from /home/jhahnfel/ROOT/build-asserts-gcc13-cxx20/include/ROOT/RConfig.hxx:23,; from /home/jhahnfel/ROOT/build-asserts-gcc13-cxx20/test_cpp_ACLiC_dict.cxx:13:; /home/jhahnfel/ROOT/build-asserts-gcc13-cxx20/include/RConfigure.h:30:4: warning: #warning ""The C++ standard in this build does not match ROOT configuration (202002L); this might cause unexpected issues"" [-Wcpp]; # warning ""The C++ standard in this build does not match ROOT configuration (202002L); this might cause unexpected issues""; ^~~~~~~; In file included from /home/jhahnfel/ROOT/build-asserts-gcc13-cxx20/include/ROOT/RConfig.hxx:23,; from /home/jhahnfel/ROOT/build-asserts-gcc13-cxx20/test_cpp_ACLiC_dict.cxx:13:; /home/jhahnfel/ROOT/build-asserts-gcc13-cxx20/include/RConfigure.h:30:4: warning: #warning ""The C++ standard in this build does not match ROOT configuration (202002L); this might cause unexpected issues"" [-Wcpp]; # warning ""The C++ standard in this build does not match ROOT configuration (202002L); this might cause unexpected issues""; ^~~~~~~; ```. This leads to many test failures because of the additional warning not expected in the reference output. All seems to work fine with C++17 for a compiler that defaults to C++14.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12747:60,test,test,60,https://root.cern,https://github.com/root-project/root/issues/12747,10,"['assert', 'test']","['asserts-', 'test']"
Testability,"In a binned likelihood fit, it is possible to skip the PDF normalization; when the unnormalized binned PDF can be interpreted directly in terms of; event yields. This is now done by default for models HistFactory models,; which results in great speedups for binned fits with many channels. Some; RooFit users like ATLAS were already using this for a long time, so this; feature is battle-tested. To disable this optimization when using the `hist2workspace` executable,; add the `-disable_binned_fit_optimization` command line argument.; Directly in C++, you can also set the `binnedFitOptimization` to `false`; in the HistFactory configuration as follows:; ```C++; RooStats::HistFactory::MakeModelAndMeasurementFast(measurement, {.binnedFitOptimization=false});; ```; If your compiler doesn't support aggregate initialization with designators, you; need to create and edit the configuration struct explicitely:; ```C++; RooStats::HistFactory::HistoToWorkspaceFactoryFast::Configuration hfCfg;; hfCfg.binnedFitOptimization = false;; RooStats::HistFactory::MakeModelAndMeasurementFast(measurement, hfCfg);; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10562:388,test,tested,388,https://root.cern,https://github.com/root-project/root/pull/10562,1,['test'],['tested']
Testability,"In a synthetic benchmark that only fills a single histogram for; which no binning was provided (i.e. the case in which; BufferedFillHelper gets used), these are sample runtimes on my; laptop before this patch:. ```; 0 3735; 1 3742; 2 3534; 4 3191; 8 2733; 16 1725; ```. and after:; ```; 0 3552; 1 3876; 2 2466; 4 1696; 8 1202; 16 1038; ```. where over 8 threads hyper-threading kicks in and 0 threads means; no `EnableImplicitMT()` at all.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11089:15,benchmark,benchmark,15,https://root.cern,https://github.com/root-project/root/pull/11089,1,['benchmark'],['benchmark']
Testability,"In case TGeoManager is set to work with default ROOT units [cm,deg] and the GDML parser reads entities missing explicit units, it issues now a warning. This is due to the fact that the default unit in this case will not match the unit types defined in the GDML schema [mm,rad]. An automatic fix cannot be done because it would introduce backward incompatibilities. This closes #11781. # This Pull request:; Produces warnings for GDML files with entities missing explicit unit declaration. ## Changes or fixes:; The number of entities missing declaration of units is reported. The warning proposes the alternative fix of using Geant4 units supported by TGeo. . ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR addresses #11781",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11801:681,test,tested,681,https://root.cern,https://github.com/root-project/root/pull/11801,1,['test'],['tested']
Testability,In case of exception in JavaScript painting code show warning sign and let easily see associated log message. Before some printout was done in browser console which is not easily accessible by users.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16424:97,log,log,97,https://root.cern,https://github.com/root-project/root/pull/16424,1,['log'],['log']
Testability,"In case of named arguments, the RooFormula will replace the argument; names with `x[0]` to `x[n]`. There are two things that can go wrong if; RooFormula is not implemented right. First, if there is a variable named; ""x"" it should only be substituted if the matching substring is not; followed by ""["", to not replace existing x[i]. Second, variables with; integer names like ""0"" should only be substituted if the match is not; followed by a ""]"", again to avoid replacing x[i]. This test checks that; these cases are handled correctly. The second case was so far not dealt with correctly, but with this; commit it is. A corresponding unit test was also implemented. The preprocessor commands in `RooFormula` were also reorganized; slightly, such that one can test the `TPRegexp` backend simply by; commenting out the `define ROOFORMULA_HAVE_STD_REGEX`. This pull request fixes an issue reported in the forum:; https://root-forum.cern.ch/t/a-strange-bug-in-rf708-bphysics-c/49152/2",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10105:481,test,test,481,https://root.cern,https://github.com/root-project/root/pull/10105,3,['test'],['test']
Testability,"In certain cases `TTreeReader::GetEntries` gives an inappropriate warning. Here is a minimal example:; ```C++; // test.C. #include <iostream>; #include <string>. #include <TChain.h>; #include <TFile.h>; #include <TTreeReader.h>; #include <TTreeReaderValue.h>. void WriteTestFiles() {; for (int i = 0; i < 2; ++i) {; TFile file((""test"" + std::to_string(i + 1) + "".root"").c_str(), ""recreate"");; TTree tree(""tree"", """");. int n = 1;; TBranch *branch = tree.Branch(""n"", &n);; branch->SetTitle(""Title"");; tree.Fill();. tree.Write();; file.Close();; }; }. void test() {; WriteTestFiles();. TChain chain(""tree"");; chain.Add(""test*.root"");; TTreeReader reader;; reader.SetTree(&chain);. TTreeReaderValue<int> n{reader, ""n""};; std::cout << reader.GetTree()->GetBranch(""n"")->GetTitle() << std::endl;; std::cout << reader.GetEntries(true) << std::endl; // Gives warning; }; ```; Running this as `root -q -b -l test.C` in ROOT 6.20/04 or 6.22/02 gives the following warning:; ```; Warning in <TTreeReader::SetEntryBase()>: The current tree in the TChain tree has changed (e.g. by TTree::Process) even though TTreeReader::SetEntry() was called, which switched the tree again. Did you mean to call TTreeReader::SetLocalEntry()?; ```; I believe the code in the snippet is valid and hence the warning should not be printed. The warning disappears if the calls to `reader.GetTree` and `reader.GetEntries` are swapped or if another call to `reader.GetEntries` is inserted before `reader.GetTree`. This might be related to the issue reported [here](https://root-forum.cern.ch/t/warning-in-ttreereader-with-tchain/34484), which has since been fixed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6641:114,test,test,114,https://root.cern,https://github.com/root-project/root/issues/6641,5,['test'],['test']
Testability,"In checking old bug reports, tests for two bugs were written. Although; the bugs had been fixed as side effects of modernisations or other bug; fixes, having those tests in place won't do harm.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5599:29,test,tests,29,https://root.cern,https://github.com/root-project/root/pull/5599,2,['test'],['tests']
Testability,"In clang a transient file is a header file which is stored in the pch/pcm file. If this file does not exist, clang creates a virtual file of the unzipped stored file. However, if the file exists it compares the size of the file on disk and the size of the transent file. If the two sizes are different it does not complain (as validation is off) but it triggers an assert in when constructing and outdated clang::InputFile. The implementation disallows a overridden or transient file to be out of date. This patch extends the DisableValidation abilities to span not only for timestamps but we avoid checking the file sizes if the file is on the disk. And, instead we just create a virtual file of the file that we already have. This patch should fix a relocation issue for cmssw and some of the reported LCG issues. cc: @oshadura, @davidlange6, @smuzaffar, @emanca, @zygoloid",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4480:365,assert,assert,365,https://root.cern,https://github.com/root-project/root/pull/4480,1,['assert'],['assert']
Testability,"In most cases there is no need to generate raw data (vertices and triangles) for TGeoShape on the server side. JSROOT has complete logic to support all kind of TGeoShape classes. Therefore just TGeoShape instance send to client in JSON format. Only for TGeoCompositeShape plain ROOT code is better, therefore enabled by default. . Provide control when server-side or client-side code is used. ; Optimize JSON size - exclude typeinfo for most classes. ; Fix JSROOT code for TGeoArb8 class",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4173:131,log,logic,131,https://root.cern,https://github.com/root-project/root/pull/4173,1,['log'],['logic']
Testability,"In most drawables and aggregations provide public access to the attributes.; One can directly assign value to such member like:; ```cpp; line->line.style = 12;; text->text.font.face = ""Arial"";; ```; And one always can check if attribute `Has()` value or `Clear()` it like:; ```cpp; if (!line->line.style.Has()) // do somthing;; text->text.font.face.Clear();; ```; Introduce several new aggregations like `RAttrAxisTitle`, `RAttrAxisLabels`, `RAttrAxisTicks`, `RAttrFont` to let provide syntax:; ```; frame->x.labels.font.size = 12;; frame->y.ticks.color = RColor::kRed;; ```; Sometime assign operator defined in aggregation to let assign value to whole aggregation like:; ```; frame->x.labels.font = 11;; ```; This will assign ROOT font type 11 to `RAttrFont` which is `face = ""Courier New""; style = ""oblique""; weight = ""bold"";`. Adjust all tests and tutorials. Waiting for fixing cling error https://github.com/root-project/root/issues/8547 - all python tests should fail now",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8566:841,test,tests,841,https://root.cern,https://github.com/root-project/root/pull/8566,2,['test'],['tests']
Testability,"In one of the RNTuple tests that exercises user-defined types, `SG::sgkey_t` is a typedef for a fundamental type, which causes rootcling to print a warning:; ```; Warning: Unused class rule: SG::sgkey_t; ```. This is because `#pragma link C++ typedef foo` is only used by rootcling to generate a dictionary for `foo` if it is a typedef for a class/struct.; For other typedefs, either _(1)_ cxxmodules have to be enabled, or _(2)_ cling has to parse the header. ## Changes or fixes:; - Remove the no-op `#pragma link C++ typedef ...`; - We do not rely on cxxmodules to be enabled for this test; make cling parse `CustomStruct.hxx` instead. ## Checklist:; - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9439:22,test,tests,22,https://root.cern,https://github.com/root-project/root/pull/9439,3,['test'],"['test', 'tested', 'tests']"
Testability,"In order to avoid {namespace std} interfering with following include files,; when generating a dictionary file add the {using namespace std;} only after; GenerateNecessaryIncludes method is called. Since many legacy root header files do require this global {using namespace std;}; to complete the tests, old behaviour is kept by default and the global; {using namespace std} can be avoided by adding -noGlobalUsingStd to rootcling invocation. Allow passing ACLiC RootCling flags via .rootrc (Vassil). This is a special patch tailored for v6-20-02",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5510:297,test,tests,297,https://root.cern,https://github.com/root-project/root/pull/5510,1,['test'],['tests']
Testability,"In order to be able to build unit test support also outside of a ROOT; build (e.g. for standalone roottest or for user tests), the unit test; support library needs to be visible outside of ROOT. Therefore, it is; moved to `core/testsupport`, and now installed and exported under the; name `ROOT::TestSupport` when testing is enabled. A warning message was added to `ROOT_ADD_GTEST` in case this library isn't; found when a new gtest is defined. Fix #9507. ## For reviewers; - [x] I'm not happy with the naming. The folder is `core/test_support`, the library `ROOT::ROOTTestSupport`, but the namespace and the header are historically named `ROOTUnitTestSupport`. Which one?",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9528:34,test,test,34,https://root.cern,https://github.com/root-project/root/pull/9528,6,"['Test', 'test']","['TestSupport', 'test', 'testing', 'tests', 'testsupport']"
Testability,In order to debug not understood test failures that we could; not reproduce outside of the CI.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10892:33,test,test,33,https://root.cern,https://github.com/root-project/root/pull/10892,1,['test'],['test']
Testability,"In order to enable RNTuple DAOS unit tests, RNTuple is built with libdaos_mock; if `testing` is set and the user did not enable explicit DAOS support, i.e.; `-Ddaos=ON`. Closes issue #8074.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8094:37,test,tests,37,https://root.cern,https://github.com/root-project/root/pull/8094,2,['test'],"['testing', 'tests']"
Testability,"In order to solve ROOT-10109, and until #3640 is completed and merged, we temporarily add a pythonisation both in PyROOT and experimental PyROOT to get the overloads for GetBinErrorUp; and GetBinErrorLow of TH1 obtained via using declarations from TH2. On the other hand (and unrelated to the change above), we eliminate the use of `TInterpreter::EnableAutoLoading` from cppyy in experimental PyROOT, given the tests failures seen last night:; https://epsft-jenkins.cern.ch/job/root-exp-pyroot/393/; due to the deprecation introduced by https://github.com/root-project/root/pull/4868",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4895:411,test,tests,411,https://root.cern,https://github.com/root-project/root/pull/4895,1,['test'],['tests']
Testability,"In order to specialize cling's value-printing logic for collections; we perform some SFINAE checks. Among other things, the checks; asserts that `++(obj.begin())` is well-formed. That compiles for; `std::vector` and other collections with ""fat"" iterators, but does; not compile for collections that use raw pointers as iterators:. ```cpp; auto beg(std::vector<int> &v) {; return v.begin();; }. int *beg2(std::vector<int> &v) {; return &v[0];; }. int main() {; std::vector<int> v{1,2,3};; beg(v) += 1;; //beg2(v) += 1; // does not compile - beg2(v) is not an lvalue. return 0;; }; ```. Requiring instead `std::begin(obj)` to be well-formed should be; backward compatible and it should allow collections that use raw; pointers as iterators to also be pretty-printed by cling. This fixes pretty-printing of RVec 2.0, i.e. the implementation based on LLVM's SmallVector, which uses raw pointers as iterators.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7800:46,log,logic,46,https://root.cern,https://github.com/root-project/root/pull/7800,2,"['assert', 'log']","['asserts', 'logic']"
Testability,"In order to test the stability of a model in RooFit, I need to generate independent pseudo-datasets and fit the model back to them. I use the TRandom class to make sure that the system starts in a different state each time in the following way:. RooRandom::randomGenerator()->SetSeed(0);. I need to be able to reproduce these fits, so I save the seed associated with each pseudo-dataset:. UInt_t my_seed = RooRandom::randomGenerator()->GetSeed();. However, if I then set the seed to the number that GetSeed() returns and and re-run the fit:. RooRandom::randomGenerator()->SetSeed(my_seed);. The same state is not reproduced. I have checked the documentation, and SetSeed accepts the type ULong_T as an argument, where as GetSeed returns the type UInt_t. There is therefore no way for me to extract the actual seed the RooRandom object is using to generate the pseudo-datasets as the number is truncated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6624:12,test,test,12,https://root.cern,https://github.com/root-project/root/issues/6624,1,['test'],['test']
Testability,"In our analysis package we obtain a segfault without traceback when calling InheritsFrom() on an object derived from a TObject. The awkward issue is dependent on the ordering of the objects and dictionaries in the shared library. ; Note: important is the fact, that another class has a static member of that TClass(). The compiled object of the other class can then not be linked before the Dictionary-object of the first class. Maybe it's just my ignorance of a deeper understanding of the whole concept, or maybe it is a bug somewhere. A rather minimum example is attached would look like:; int main() { ; TMyDerivedClass::Class()->InheritsFrom(TObject::Class());; }. Please run `make all`, then `test1` (works) and `test2` does not work, while the difference is only in the order of the objects in the shared library.; I have included into that example another class that works well (as it is not a static member elsewhere.); I have included a Dump() call, and one recognizes the differences for identical objects in the two shared libraries (e.g. fTitle="""", *fData=0, ...). [root_issue.tar.gz](https://github.com/root-project/root/files/5405256/root_issue.tar.gz). We tested with root 6.20 and gcc9.2 (from lcg) and 6.22 and gcc4.8, both on EL7.; The code previously worked well with ROOT 5.34.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6670:1172,test,tested,1172,https://root.cern,https://github.com/root-project/root/issues/6670,1,['test'],['tested']
Testability,"In particular, all creations and deletions of `shared_ptr`s have been removed from the event loop. This is a long due optimization that required several changes in the internal behaviour of TDataFrame{Impl,Action,Branch,Filter}. Unfortunately all changes are entangled, so the third commit is quite fat. The main change to the internal logic is that `TDataFrame{Action,Branch,Filter}` now store a tuple of `TDataFrameValue`s rather than (possibly null) shared pointers to `TTreeReaderValueBase`.; `TDataFrameValue` offers a transparent, unified interface to the different kinds of values that the nodes must handle: temporary columns, to be evaluated on-the-fly, `TTreeReaderArray`s that must be converted to `array_view`s and `TTreeReaderValue`s.; `TDataFrameValue` also incorporates validity checks on the value types, e.g. that arrays read via `TTreeReaderArray` are actually contiguous in memory and that the type of a temporary column is the same as the type expected by the node that makes use of it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/442:336,log,logic,336,https://root.cern,https://github.com/root-project/root/pull/442,1,['log'],['logic']
Testability,"In particular, don't exclude tests that are now running fine on Windows.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13508:29,test,tests,29,https://root.cern,https://github.com/root-project/root/pull/13508,1,['test'],['tests']
Testability,"In preparation for a future removal of Python 2 support, add the `pyroot-python2` cmake build option (OFF by default). Users who really need Python 2 support can still get it, but warn them that it will be removed in a future ROOT release. This leads to . ```; $: cmake -Dpyroot-python2=ON; [...]; CMake Warning at cmake/modules/SearchRootCoreDeps.cmake:153 (message):; Building ROOT with Python 2 support is deprecated. The support for Python 2; will be removed in ROOT version 6.32.; Call Stack (most recent call first):; CMakeLists.txt:169 (include); ```. ```; $: python -c ""import ROOT""; /home/vpadulan/Programs/rootproject/rootbuild/py2-cmake-test-conda-py2/lib/ROOT/__init__.py:36: DeprecationWarning: The support for Python 2 in ROOT is deprecated. It will be removed in ROOT version 6.32.; ""ROOT version 6.32."", category=DeprecationWarning); ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13606:648,test,test-conda-,648,https://root.cern,https://github.com/root-project/root/pull/13606,1,['test'],['test-conda-']
Testability,"In preparation for the switch of experimental PyROOT to default in master, this PR updates the cppyy packages to their latest version:; - cppyy-1.6.1 (until [here](https://bitbucket.org/wlav/cppyy/commits/d7802d6e6e74c5359acfaf09443b9a1fc87baf6b)); - CPyCppyy-1.10.1 (until [here](https://bitbucket.org/wlav/cpycppyy/commits/c780f284d0cd0ff81f06007b620797cb18b0e269)) ; - clingwrapper-1.10.7 (until [here](https://bitbucket.org/wlav/cppyy-backend/commits/8200a3709d76b56cf06be89d26a4682a2c9c59cd)). Moreover, the PR also introduces a few fixes and disables one test until the following TCling issue is fixed:; https://sft.its.cern.ch/jira/browse/ROOT-10488",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4957:561,test,test,561,https://root.cern,https://github.com/root-project/root/pull/4957,1,['test'],['test']
Testability,"In preparation of adding page checksums, it makes sense to enable `LoadSealedPage()` support with DAOS and the caging option (caging: storage of multiple pages in a single object). Even though the implementation is not very performant, it will later allow to streamline the test for checksum verification.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15892:274,test,test,274,https://root.cern,https://github.com/root-project/root/pull/15892,1,['test'],['test']
Testability,"In previous ROOT versions, if you set the value of a variable with; `RooRealVar::setVal()`, the value was silently clippend when it was; outside the variable range. This silent mutation of data can be; dangerous. With ROOT 6.28, an exception will be thrown instead. If you; know what you are doing and want to restore the old clipping behavior,; you can do so with `RooRealVar::enableSilentClipping()`, but this is not; recommended. This change caught a logic error in `stressRooFit` where a background; fraction was randomized to be outside the `[0,1]` interval. That part of; the test was therefore removed (it was already removed from the; corresponding tutorial). Closes https://github.com/root-project/root/issues/6937.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10470:454,log,logic,454,https://root.cern,https://github.com/root-project/root/pull/10470,2,"['log', 'test']","['logic', 'test']"
Testability,"In response to @dpiparo pointing out this failure http://cdash.cern.ch/testDetails.php?test=25539356&build=359962. The DNN with architecture=Standard is to phased out. In this case it would make sense to disable the corresponding test, since the failure is not to be fixed. If this is acceptable, feel free to merge.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/605:71,test,testDetails,71,https://root.cern,https://github.com/root-project/root/pull/605,3,['test'],"['test', 'testDetails']"
Testability,"In roottest (sorry, that repo has issues disabled), test dependencies specified as shown below do not work:. ```cmake; if(NOT MSVC OR win_broken_tests); ROOTTEST_GENERATE_REFLEX_DICTIONARY(One One.h SELECTION One_selection.xml NO_ROOTMAP); set(depends ${GENERATE_REFLEX_TEST}). ROOTTEST_GENERATE_REFLEX_DICTIONARY(Two Two.h SELECTION Two_selection.xml NO_ROOTMAP); set(depends ${depends} ${GENERATE_REFLEX_TEST}). ROOTTEST_ADD_TEST(execLoadLibs; MACRO execLoadLibs.C; OUTREF execLoadLibs.oref; ERRREF execLoadLibs.eref; DEPENDS ${depends}); endif(); ```; I had the `execLoadLibs` test failing for me until I ran all three tests by hand. That's from `roottest/root/meta/ROOT-5694/CMakeLists.txt`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7978:52,test,test,52,https://root.cern,https://github.com/root-project/root/issues/7978,3,['test'],"['test', 'tests']"
Testability,"In several places in the code of DistRDF, Python loggers are used (`logging` module). Instead, logging mechanisms should be made uniform with the rest of ROOT (gDebug/RLogger).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8982:49,log,loggers,49,https://root.cern,https://github.com/root-project/root/issues/8982,3,['log'],"['loggers', 'logging']"
Testability,"In some case when calling `RooAddPdf::generate` an evaluation of the RooAddPdf happens without the normalisation set defined, causing the priting of a Warning message. Since in this case the evaluation result is not used we can suppress this message. ; Here is the example code reproducing this:; ```; void testRooAddPdfGenerate() {. RooWorkspace w(""w"");. w.factory(""Gaussian::f1(x[0,10],m1[3,0,10],s1[1,0,10])"");; w.factory(""Gaussian::f2(x,m2[7,0,10],s2[0.5,0,10])"");; w.factory(""SUM::sigPdf(n1[1000,0,100000]*f1, n2[1000,0,100000]*f2)"");; w.factory(""Gaussian::bkgPdf(x,mb[5,0,10],sb[7,0,10])"");; w.factory(""sum::ns(n1,n2)"");; w.factory(""SUM::model(ns*sigPdf,nb[2000,0,100000]*bkgPdf)"");; ; auto x = w.var(""x"");; auto pdf = w.pdf(""model"");. auto data = pdf->generate(*x);. ; }; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10235:307,test,testRooAddPdfGenerate,307,https://root.cern,https://github.com/root-project/root/pull/10235,1,['test'],['testRooAddPdfGenerate']
Testability,"In some cases gPad can be set to tmpGuideLinePad, which is deleted any time ShowGuidelines method is called. In that case pointer on this temporary pad should be removed from TContext object. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12773:257,test,tested,257,https://root.cern,https://github.com/root-project/root/pull/12773,1,['test'],['tested']
Testability,In some cases when the polygons are just a few points some of the internal arrays indices got negative values. For instance this was the case with the example $ROOTSYS/test/delaunayTriangulation.cxx,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3955:168,test,test,168,https://root.cern,https://github.com/root-project/root/pull/3955,1,['test'],['test']
Testability,"In some cases when trying to persist classes from ACLIC or the interpreter, there are warnings about missing dictionaries, which apparently don't prevent correctly persisting the class. Real use case is persisting boost histogram templates instantiated with PyROOT, but a standalone example is included below. ```; #include ""TFile.h""; #include <atomic>; #include <iostream>. class Test {; public:; std::atomic<double> &data() { return data_; }; const std::atomic<double> &data() const { return data_; }. private:; std::atomic<double> data_;; };. class Test2 : public std::atomic<double> {; };. int testio() {. Test t;; t.data() = 5.;. Test2 t2;; t2.store(5.);. TFile *fout = TFile::Open(""test.root"", ""RECREATE"");. fout->WriteObject(&t, ""t"");; fout->WriteObject(&t2, ""t2"");. fout->Close();. TFile *fin = TFile::Open(""test.root"");. auto &tread = *fin->Get<Test>(""t"");; auto &tread2 = *fin->Get<Test2>(""t2"");. std::cout << tread.data() << std::endl;; std::cout << tread2 << std::endl;. return 0;; }; ```. The output is:; ```; [bendavid@docker@lxplus8s10 boostiotest]$ root -l testio.cpp+; root [0] ; Processing testio.cpp+...; Info in <TUnixSystem::ACLiC>: creating shared library /home/b/bendavid/boostiotest/./testio_cpp.so; Warning in <TStreamerInfo::Build>: Test: atomic<double> has no streamer or dictionary, data member ""data_"" will not be saved; Warning in <TStreamerInfo::Build>: Test2: base class atomic<double> has no streamer or dictionary it will not be saved; 5; 5; (int) 0; ```. So apparently both classes (and the std::atomic<double> data member and/or base class) are persisted just fine.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9371:381,Test,Test,381,https://root.cern,https://github.com/root-project/root/issues/9371,9,"['Test', 'test']","['Test', 'test', 'testio']"
Testability,"In some cases with template instantiation from pyroot together with RDF code which should fail to compile with clear error messages leads instead to cryptic output. Even worse, execution continues and gives undefined results. Example. ```python; import ROOT. ret = ROOT.gInterpreter.Declare('#include ""test.h""'). print(""declare ret"", ret). print(""creating helper""); helper = ROOT.helper[ROOT.std.vector[""double""]](). d = ROOT.ROOT.RDataFrame(1000). print(""Define with helper""); d = d.Define(""fx"", helper, []); print(""done define""). res = d.Sum(""fx""). print(res.GetValue()); ```. ```cpp; template <typename T>; class helper {. public:. helper() {}. std::size_t operator() () {; const double res = 0.;; res = T{0, 0}.size();; return res;; }. };; ```. Note the assignment to ```const double``` which should fail to compile. output (centos stream 8, root 6.26/10); ```; declare ret True; creating helper; Define with helper; IncrementalExecutor::executeFunction: symbol '_ZN6helperISt6vectorIdSaIdEEEclEv' unresolved while linking symbol '__cf_13'!; You are probably missing the definition of helper<std::vector<double, std::allocator<double> > >::operator()(); Maybe you need to load the corresponding shared library?; done define; 9.408421539373414e+16; ```. (if the spurious const is removed then instead one gets the correct output of 2000 and no error message)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11854:302,test,test,302,https://root.cern,https://github.com/root-project/root/issues/11854,1,['test'],['test']
Testability,"In some circumstance, the Translation Unit can devoid of any decl; useable by ClassInfo (i.e. it has only forward declaration and typedefs). This can happen at the beginning of the process when none of the; rootmap files declares a namespace. When this happens there is no ""valid"" iterator for TClingClassInfo; to use as the 'first' iterator and thus the existing invariant test,; 'first' iterator must not point to nullptr, is incorrect. To solve the problem use an explicit way of telling whether the; TClingClassInfo was setup for iteration (rather than deducing from; the value of the iterator pointee) and void memory growth by; using bit field for the bool data members.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1300:374,test,test,374,https://root.cern,https://github.com/root-project/root/pull/1300,1,['test'],['test']
Testability,"In standalone builds, it could otherwise happen that the variable is not set during the first CMake invocation and tests fail because they are unable to locate the LLVM headers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14182:115,test,tests,115,https://root.cern,https://github.com/root-project/root/pull/14182,1,['test'],['tests']
Testability,"In tests on an Apple M1 after the upgrade to LLVM 9, this new instruction selection framework emits branches / calls that expect all code to be reachable in +/- 128 MB. This cannot be guaranteed during JIT, which generates code into allocated pages on the heap and could span the entire address space of the process.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7419:3,test,tests,3,https://root.cern,https://github.com/root-project/root/pull/7419,1,['test'],['tests']
Testability,"In that test, using `f->SetParameters(par)` gives a compiler warning, becaues internally, this does `std::copy(par, par + npars, ...)`. The `par + npars` gives an out-of-bounds warning, because par is a C-style array with compile-time size.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12763:8,test,test,8,https://root.cern,https://github.com/root-project/root/pull/12763,1,['test'],['test']
Testability,"In the Belle2 Software the libraries are linked with `--as-needed`; linker arguments and in conjunction with the weird loading order (binary; depends on ROOT, load python, load library depending on ROOT) we seem to; run into problems that libCling is unloaded earlier than expected. Since the `TCling_UnloadMarker` was introduced for Belle2 and removal; doesn't seem to cause any problems we discussed in [ROOT-10659](https://sft.its.cern.ch/jira/browse/ROOT-10659) to remove; this again and it so far all tests on our software stack didn't show any; problems with that.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5548:506,test,tests,506,https://root.cern,https://github.com/root-project/root/pull/5548,1,['test'],['tests']
Testability,"In the CPU case in `RooBatchCompute`, we can use `std::vector` instead; of fixed-size stack arrays to pass data around, and the `Batches` object; can be passed to the compute functions by reference. This fixes crashes with models where the numer of inputs for a RooAbsArg; exceeds the maximum number of parameters supported by the fixed-size; array buffer, at least in the CPU case. In the GPU case, we now throw a nicer error if the buffers are to small,; instead of just crashing. The `stressRooFit` tests for the CPU or GPU batch mode still pass after; this commit.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10362:502,test,tests,502,https://root.cern,https://github.com/root-project/root/pull/10362,1,['test'],['tests']
Testability,"In the FitFCN/SetFCN functions use a flag for the fit type instead of passing a boolean for the chi2 fit.; The flag is by default 0 (undefined type), but can be 1 (for chi2 fit), so compatible as passing a boolean as before, 2 for unbinned likelihood and 3 for binned likelihood (FCN is defined to be the Baker-Cousins log-likelihood ratio). By passing the correct flag the function FitResult::Chi2() returns the corresponding Chi2() and the Baker-Cousins chi2 equivalent in case a binned likelihood fits. This PR fixes #11143",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14763:319,log,log-likelihood,319,https://root.cern,https://github.com/root-project/root/pull/14763,1,['log'],['log-likelihood']
Testability,"In the ROOT 6.26 development cycle, the RooProdPdf was partially rewritten in moden C++ with less manual memory allocation to improve performance (PR #7907). In that PR, a unit test that verifies the RooProdPdf can correctly deal with factorizing PDFs was implemented. However, that test used an arbitrary PDF where the correct factorization was checked in a rather crude way: check by hashing the content of the RooProdPdf cache element for a given normalization set that said PR doesn't change any behavior (the reference hash was hardcoded in the unit test). This commit suggests a better alternative for the unit test, checking for a multidimensional product pdf of factorizing uniform pdfs that the pdf values for differenc normalization sets is as expected. This should cover the same functionality and is less fragile and implementation dependend than hashing the cache elements. This closes GitHub issue #12430, as the rewritten test is not affected anymore by the problem reported in that issue. The commit also removed the `RooProdPdf::writeCacheToStream()` function that was an implementation detail of the old unit test.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12447:177,test,test,177,https://root.cern,https://github.com/root-project/root/pull/12447,6,['test'],['test']
Testability,"In the RooBatchCompute CPU library, all scalar inputs have to be copied; n times into a buffer that is as long as the SIMD registers, to allow; for vectorization in all cases. To avoid frequent memory allocations, this buffer was made a `static`; variable in the original implementation of the batchcompute library,; which of course made it non-threadsafe. This is now hitting us, because RooFit needs to be able to do multiple; fits concurrently. This is a requirement for CMSSW, and a blocker for; ROOT master adoption in CMSSW since the new CPU backend is the default:; https://github.com/cms-sw/cmsdist/pull/9034. This commit fixes the concurrency problem by doing the buffering in the; DataMaps that are used in the `RooFit::Evaluator`. Like this, multiple; computation graphs can be concurrently evaluated. It was tested with the ATLAS benchmarks in `rootbench` that the fitting; performance remains the same. This PR also makes some code style and memory management improvements documented in the commit messages. It also updates the documentation to make clear the new CPU backend is now the default, which was not done in this PR:; https://github.com/root-project/root/pull/14742",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14877:820,test,tested,820,https://root.cern,https://github.com/root-project/root/pull/14877,2,"['benchmark', 'test']","['benchmarks', 'tested']"
Testability,"In the RooChi2Var, there was another case of inconsistency between; constructors that seemingly do the same but actually don't. A RooChi2Var should be created with the constructors that take RooFit; command arguments. However, there were also other constructors used by; the RooFit test statistic implementation details (i.e. in; `RooAbsOptTestStatistic::create`) that when used with default aruments; behave inconsistently with the command arg constructors: the default; error type is different, and errors will be estimated from the pdf and; not from the data. This lead to the confusing situation that when creates a `RooChi2Var`; without any command arguments, the default error mode is suddenly; different. This inconsistency should be removed by having only the; command argument constructors part of the public interface. Making these constructors private should not be a problem. There were; already considered implementaiton details before, and their interface; was already changed anyway to use the configuration structs in 6.26.; Nobody has complained about that so far. Closes #10557.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10566:282,test,test,282,https://root.cern,https://github.com/root-project/root/pull/10566,1,['test'],['test']
Testability,"In the RooDecay case, the evalCerf function called internally in; RooGaussModel passes a purely imaginary argument to; `RooMath::faddeeva_fast`. In this case, the Faddeeva function is equal; to a scaled complementary error function, which can be evaluated more; efficiently using `std::erfc`. The speedup can be seen in the stressRooFit tests that involve the; RooDecay, for example:; `Test 22 : Full per-event error p.d.f. F(t|dt)G(dt)`; The test can be run individually to verify this speedup:. ```; `./stressRooFit -n 22`; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9925:337,test,tests,337,https://root.cern,https://github.com/root-project/root/pull/9925,3,"['Test', 'test']","['Test', 'test', 'tests']"
Testability,"In the RooRealIntegral and RooGenProdProj classes, the normalization sets were so far not forwarded to the servers, which resulted in undefined normalization sets for integrated PDFs as reported in #11476. A unit test that covers #11476 and the related JIRA issue ROOT-9436 is also implemented. Closes #11476.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11696:213,test,test,213,https://root.cern,https://github.com/root-project/root/pull/11696,1,['test'],['test']
Testability,"In the `RPageStorage` destructor: wait for unterminated tasks, if any, as they may still hold a reference to `this`. This is known to happen, e.g. in `RPageSinkBuf` if `CommitClusterImpl()` is not called after committing some pages via `CommitPageImpl()` and the `RPageSinkBuf` is immediately destructed. This fixes the ntuple_extended:`RNTuple.SmallClusters` test. ## Checklist:; - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12824:360,test,test,360,https://root.cern,https://github.com/root-project/root/pull/12824,2,['test'],"['test', 'tested']"
Testability,"In the `rf205` tutorial and the associated stressRooFit test, the `bkg` RooAddPdf was created using the `sig1frac`, while it is clearly the idea to use the `bkg1frac` parameter. This is fixed in this commit, also fixing the name of the `bkg1frac` parameter, which was accidentally set to `sig1frac` (probably a copy-paste error). However, to not change the output of the tutorial and the stressRooFit test, the value of `bkg1frac` was set to the same value as `sig1frac`, such that this commit only fixes the model but doesn't change the tutorial and test output.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11985:56,test,test,56,https://root.cern,https://github.com/root-project/root/pull/11985,3,['test'],['test']
Testability,"In the case of the storage location, this change turns an assert; failure into an exception:. Before:; ```; Fatal: fileStream violated at line 1145 of `ntuple/v7/src/RMiniFile.cxx'; ```. After:; ```; C++ exception with description ""empty storage location""; ```. For the RNTuple name, the empty string only caused issues when added to; a TFile (but that's enough to ban it):. ```cpp; std::string path = ""some_file.root""; auto file = TFile::Open(path.c_str(), ""RECREATE"");; {; auto model = RNTupleModel::Create();; auto fieldPt = model->MakeField<float>(""pt"", 42.0);; auto ntuple = RNTupleWriter::Append(std::move(model), """", *file);; ntuple->Fill();; }; file->Close();; delete file;. // throws; auto ntuple = RNTupleReader::Open("""", path);; ```; ```; C++ exception with description ""no RNTuple named '' in file 'test_ntuple_empty_filename.root' (unchecked RResult access!); ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8511:58,assert,assert,58,https://root.cern,https://github.com/root-project/root/pull/8511,1,['assert'],['assert']
Testability,"In the current development cycle leading up to ROOT 6.28, there was some performance regression in RooStats tutorials like `HybridInstructional.C`, which can be seen for example in this CI bot comment:. https://github.com/root-project/root/pull/11740#issuecomment-1333720963. For some reason, there are now numeric integrals in the log that don't pop up in ROOT 6.26:; ```; [#1] INFO:NumericIntegration -- RooRealIntegral::init(py_Int[b]) using numeric integrator RooIntegrator1D to calculate Int(b); [#1] INFO:NumericIntegration -- RooRealIntegral::init(px_Int[b]) using numeric integrator RooIntegrator1D to calculate Int(b); [#1] INFO:NumericIntegration -- RooRealIntegral::init([py_X_prior_b_X_px]_Norm[b]_denominator_Int[b]) using numeric integrator RooIntegrator1D to calculate Int(b); [#1] INFO:NumericIntegration -- RooRealIntegral::init(py_Int[b]) using numeric integrator RooIntegrator1D to calculate Int(b); [#1] INFO:NumericIntegration -- RooRealIntegral::init(px_Int[b]) using numeric integrator RooIntegrator1D to calculate Int(b); ```. RooFit in ROOT master needs to be fixed again such that these integrals don't happen. Since this is a performance regression, the priority to fix this is high. A simpler script to reproduce the performance regression outside of RooStats is this one:; ```C++; void repro(); {; RooWorkspace w;; w.factory(""Poisson::px(x[150,0,500],b[100,0,300])"");; w.factory(""Poisson::py(y[100,0,500],prod::taub(tau[1.],b))"");; w.factory(""Uniform::prior_b(b)"");; w.factory(""PROD::foo(px|b,py,prior_b)"");. RooRealVar& x = *w.var(""x"");; RooRealVar& b = *w.var(""b"");; RooAbsPdf& foo = *w.pdf(""foo"");. std::unique_ptr<RooAbsReal> integ{foo.createIntegral({b}, {b, x})};. for(int i = 0; i < 10; ++i) {; x.setVal(i % 500);. std::cout << integ->getVal() << std::endl;; }; }; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11814:332,log,log,332,https://root.cern,https://github.com/root-project/root/issues/11814,1,['log'],['log']
Testability,"In the current implementation of `RooDataSet::reduceEng`, the dataset; itself was queried to get the weight variable used in the reduced; dataset. This didn't work with the `RooCompositeDataStore`, because a; dataset with this data store doesn't have a weight variable, as these; are encapsulated in the components of the composite store. Hence,; reducing a weighted dataset with a RooCompositeDataStore yields an; unweighted dataset, which is a bug. To fix this problem, this commit implements a separate reduction logic; for the RooCompositeDataStore: the components are now reduced; individually, instead of naively creating a RooCompositeDataStore from a; RooVectorDataStore/RooTreeDataStore. To avoid further code branches in; RooDataSet, a new virtual function `RooAbsDataStore::reduce` is; introduced. The first two commits update the data reduction implementation details such the bugfix is easier to implement (see commit messages for more details). This closes https://github.com/root-project/root/issues/6951.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10397:516,log,logic,516,https://root.cern,https://github.com/root-project/root/pull/10397,1,['log'],['logic']
Testability,"In the following code (from `TFormula.cxx`):; ```; map< std::pair<TString,Int_t>, pair<TString,TString> > functions;; pair<TString, Int_t> key = make_pair(funName, dim);; if (functions.find(key) == functions.end()) {; ```; `functions.find(key)` always returns `functions.end()`. Adding the spaceship operator `<=>` in TString fixes the issue. This fixes also many failing tests with `std:c++20`",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12525:372,test,tests,372,https://root.cern,https://github.com/root-project/root/pull/12525,1,['test'],['tests']
Testability,"In the following platform:. olhswep22.cern.ch. the two following tests:. pyunittests-pyroot-pyz-ttree-setbranchaddress; pyunittests-pyroot-pyz-ttree-branch-attr. were failing because a string was not properly created with the ""<<""; operator. With the definition of a std::string object the problem is; solved.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4672:65,test,tests,65,https://root.cern,https://github.com/root-project/root/pull/4672,1,['test'],['tests']
Testability,"In the jitted version of the `Vary` transformation a node is allocated on the heap and its address is passed down to the function `JitVariationHelper`, which is also responsible for deleting the allocated memory. In case a mismatch in the return type of the jitted function given to the Vary call is detected, we throw an error to inform the user they should return an RVec for the Vary to properly work. This means that the call to JitVariationHelper does not happen, thus the memory of the node is not deallocated. This commit corrects that behaviour by properly deleting the pointer before throwing the exception. Thanks to the address sanitizer:; ```; Direct leak of 16 byte(s) in 1 object(s) allocated from:; #0 0x7f28c78d9e28 in operator new(unsigned long) (/lib64/libasan.so.8+0xd9e28) (BuildId: 2b657470ea196ba4342e3bd8a3cc138b1e200599); #1 0xb711e0 in std::shared_ptr<ROOT::Detail::RDF::RNodeBase>* ROOT::Internal::RDF::MakeSharedOnHeap<ROOT::Detail::RDF::RNodeBase>(std::shared_ptr<ROOT::Detail::RDF::RNodeBase> const&) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/InterfaceUtils.hxx:370; #2 0xb843a8 in ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager, void>::JittedVaryImpl(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, bool) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/RInterface.hxx:3108; ```. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15477:1094,test,testing-asan,1094,https://root.cern,https://github.com/root-project/root/pull/15477,1,['test'],['testing-asan']
Testability,"In the non-uniform binning case, the `RooHist` that you get from; plotting a RooDataHist doesn't contain the number of events, but the; number of events normalized by the bin width. This means that `RooHist::getFitRangeNEvt()` was returning wrong; results. To fix this, a new data member is added to the `RooHist`, which; tracks the original number of events in each bin before the scaling. A unit test that covers this is also implemented. Closes JIRA ticket ROOT-9649:; https://sft.its.cern.ch/jira/browse/ROOT-9649. A second commit in this PR also does some code modernization of the `RooHist`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11813:398,test,test,398,https://root.cern,https://github.com/root-project/root/pull/11813,1,['test'],['test']
Testability,"In the past, it was possible to build the [roottest suite](https://github.com/root-project/roottest) standalone, just having ROOT sourced in your environment. This possibility is also advertised in the README.md of roottest. After https://github.com/root-project/root/commit/56c6ace5340003a9135d565f4d5fa68be67aa0d5, it is not possible anymore to do that, because the unit tests depend on the `ROOTUnitTestSupport` library which is only available at ROOT compile time. Maybe a possible solution is to install the `ROOTUnitTestSupport` library as part of ROOT? I don't know what's the best solution here, so I'm only opening an issue for now. But I think this need to be fixed before the next ROOT release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9507:373,test,tests,373,https://root.cern,https://github.com/root-project/root/issues/9507,1,['test'],['tests']
Testability,"In the previous PR https://github.com/root-project/root/pull/7344, the biggest challenge has been to make `RooAbsOptTestStatistic` aware if batch mode is enabled to skip the cache optimization. The cleanest way of disabling the cache optimization is to do so directly in the `RooAbsOptTestStatistic` constructor so it is skipped. Unfortunately, the constructor of `RooAbsOptTestStatistic` and its base class `RooAbsTestStatistic` has already a very long signature, and it is already challenging to correctly align all parameters correctly with the position they should have. That's why I propose in this PR to use a struct to group all `RooAbsTestStatistic` parameters. This has several advantages:; * the struct can be initialized with tagged initialization, so alignment errors can be easily avoided; * if a new parameter is added (such as the `batchMode` flag in this PR), only the configuration struct declaration struct needs to be changed; * the default values are defined in a central place and not redundantly in all the relevant constructor declarations/`RooAbsTestStatistic::create` overrides. To make the review easier, this PR only includes the configuration refactor and disabling the cache optimization is batch mode is used. The `RunContextTracker`-related commits would follow in a separate PR, but I already tested that everything together does work and the unit test I created for the `RunContextTracker` succeeds. Two open questions are still:; * the `RooNLLVar::_batchEvaluations` flag is now redundant, but I still kept it to not have to change class versions too often. Is this acceptable?; * the new `RooAbsTestStatistic::_batchMode` takes part in the IO, entailing an increment of the class version. I that acceptable? The advantage here is that if one reads back a serialized RooFit workspace, it can remember if batch mode is used",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7616:1325,test,tested,1325,https://root.cern,https://github.com/root-project/root/pull/7616,2,['test'],"['test', 'tested']"
Testability,In the same way that you can retrieve peak value. For logging purposes in parallel to the GUI.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7251:54,log,logging,54,https://root.cern,https://github.com/root-project/root/pull/7251,1,['log'],['logging']
Testability,"In this PR, we introduce two new classes: `LikelihoodJob` and `LikelihoodGradientJob`. These are `RooFit::MultiProcess` based test-statistic calculators that parallelize likelihood and likelihood gradient calculation respectively over multiple processes. These classes can be used internally by `RooMinimizer` to speed up fitting with `migrad`. The way to use them is to use the new `RooMinimizer` constructor that takes a (pointer to a) `RooAbsL` likelihood class that was introduced in previous PR #8700. This PR is the seventh and final part of a split and clean-up of #8294. ## Changes or fixes:; - Adds `LikelihoodJob` and `LikelihoodGradientJob` under the `RooFit::TestStatistics` namespace.; - Adds the `LikelihoodGradientJob` test case, which also covers the rest of the `TestStatistics` framework, as promised in https://github.com/root-project/root/pull/8700#issue-947741252.; - Adds two `KahanSum` constructors that allow for initialization of the full internal state. This is necessary for serializing and rematerializing `KahanSum`s so they can be sent over ZeroMQ sockets.; - `RooMinimizer` templated constructors and create factory functions were removed. These are replaced with enum class flags that allow the user to choose the type of `RooAbsMinimizerFcn` (this was already in place) and the `Likelihood(Gradient)Wrapper` implementations to use, i.e. the classes introduced in this PR. Similar changes were made in `MinuitFcnGrad`, which is now also template-free.; - `RooMinimizer`'s (now) two constructors use two helper functions now to avoid code duplication.; - There were some mistakes in the build setup of `RooFitZMQ` and `RooFit::MultiProcess` that only came to light now when building these classes that depend on `RooFit::MultiProcess`. These are fixed.; - A few functions had to be added to `LikelihoodGradientWrapper` and `MinuitFcnGrad` for passing along previous gradient, second derivative and step size information from Minuit2 to RooFit and back, i.e. using the fu",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9349:126,test,test-statistic,126,https://root.cern,https://github.com/root-project/root/pull/9349,4,"['Test', 'test']","['TestStatistics', 'test', 'test-statistic']"
Testability,"In this PR:. - fix duplicates in autogenerated list of columns to Snapshot: when a tree/data-source column was Redefine'd, Snapshot was tripping itself up by adding it to the list of columns to write out _twice_, then complaining about a duplicated column name; - fix type deduction for re-defined data-source columns: for column coming from datasources other than TTrees, the column type advertised from the data-source had higher precedence than the type of the redefinition, which is of course wrong; - fix Snapshot of RVec in case of multiple input files: the logic that was supposed to reset the address of the output branch of a Snapshot that was writing out an RVec was wrong. we need `SetObject`, not `SetAddress`; - fix writing out RVecs when they re-define an input C-array: because of some wrong C-array-handling logic in Snapshot, if a C-array input branch was re-defined as a column of RVec type, Snapshot disregarded the Redefine'd value and wrote out the values in the original input branch; - ...and add related tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10319:564,log,logic,564,https://root.cern,https://github.com/root-project/root/pull/10319,3,"['log', 'test']","['logic', 'tests']"
Testability,Include Vc without going through VecCore in testGenvectorVc,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1988:44,test,testGenvectorVc,44,https://root.cern,https://github.com/root-project/root/pull/1988,1,['test'],['testGenvectorVc']
Testability,Include test directory using ROOT_ADD_TEST_SUBDIRECTORY,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2247:8,test,test,8,https://root.cern,https://github.com/root-project/root/pull/2247,1,['test'],['test']
Testability,Increase test timeout,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10886:9,test,test,9,https://root.cern,https://github.com/root-project/root/pull/10886,1,['test'],['test']
Testability,Increase test tolerence,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4025:9,test,test,9,https://root.cern,https://github.com/root-project/root/pull/4025,1,['test'],['test']
Testability,"Increase the speed of BDT training. For regression analysis with Grad boosting, the speed gain is almost 2x.; For multiclass the gain depends on the number of multiclasses.; For classification: haven't done the test. Non BDT algorithms will also be faster (assuming the progress bar is enabled).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/100:211,test,test,211,https://root.cern,https://github.com/root-project/root/pull/100,1,['test'],['test']
Testability,Increase tolerance in stressHistogram buffer tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2138:45,test,tests,45,https://root.cern,https://github.com/root-project/root/pull/2138,1,['test'],['tests']
Testability,"Initial Commit for TMVA SOFIE under TMVA::Experimental::SOFIE. including support for transpose, relu and gemm operators. including cmake configurations for building sofie when protobuf is found. this PR is experimental only and made to accommodate timeline for GSoC selection tests related to TMVA SOFIE",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7544:276,test,tests,276,https://root.cern,https://github.com/root-project/root/pull/7544,1,['test'],['tests']
Testability,"Initializing RooBatchCompute takes over a second when CUDA is also; available on the system. It is unreasonable to do this everytime the; RooFit library is loaded. For example, the time of small unit tests was; completely dominated by the RooBatchCompute initialization time before; this commit. This change entailed another change in `Buffers.cxx` to avoid static; initialization problems. If possible, I'll still try to backport this to the release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9915:200,test,tests,200,https://root.cern,https://github.com/root-project/root/pull/9915,1,['test'],['tests']
Testability,"Initially reported here:. https://root-forum.cern.ch/t/pyroot-and-std-vector-dramatic-ram-usage/49711. when a user was getting a `vector<int>` branch from a tree in a loop in PyROOT. After a bit of digging, it seems the culprit is a call that is made from cppyy to `TInterpreter::ClassInfo_IsEnum`. The following is a C++ reproducer (tested with current master):. ```python; float getMem() {; auto info = ProcInfo_t();; gSystem->GetProcInfo(&info);; float mem = (float)info.fMemResident;; return mem*1e-3;; }. void test(); {; for (int i=0; i < 100000; ++i) {; gInterpreter->ClassInfo_IsEnum(""vector<int>"");; if (i%1000 == 0); printf(""RSS at iteration %d is %f\n"", i, getMem());; }; }; ```. When running the macro above, it can be seen how the memory usage increases after each iteration.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10454:334,test,tested,334,https://root.cern,https://github.com/root-project/root/issues/10454,2,['test'],"['test', 'tested']"
Testability,"Initially, this was to try out the suggestion [in #7151](https://github.com/root-project/root/issues/7151#issuecomment-1047822177), to enable code like; ```c++; TGraph gr({1, 2, 3}, {1, 2, 3});; ```. This doesn't work, unfortunately, because overload resolution cannot disambiguate between the `TVectorF` and `TVectorD` constructors of TGraph. What this enables, however, is this:; ```c++; TVectorD{1., 2., 3.}; ```; or for the TGraph case:; ```c++; TGraph gr(TVectorD{1., 2., 3.}, {1., 2., 3.});; ```. I think it's a nice shortcut to have. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9968:562,test,tested,562,https://root.cern,https://github.com/root-project/root/pull/9968,1,['test'],['tested']
Testability,Installing missing header MnMatrixfwd.h when building standalone Minuit2. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13522:95,test,tested,95,https://root.cern,https://github.com/root-project/root/pull/13522,1,['test'],['tested']
Testability,"Instantiate.cpp:2538. #7 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff53a0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #8 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #9 0x00007fffe3e0b5cb in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., DiagID=2479) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7398. #10 0x00007fffe363cdc7 in clang::Sema::CheckFieldDecl (this=0x7da020, Name=..., T=..., TInfo=0x7e913e0, Record=0x7e8ed10, Loc=..., Mutable=false, BitWidth=0x0, InitStyle=clang::ICIS_ListInit, TSSL=..., AS=clang::AS_private,. PrevDecl=0x0, D=0x0) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaDecl.cpp:14482. #11 0x00007fffe3d8c4de in clang::TemplateDeclInstantiator::VisitFieldDecl (this=0x7fffffff59f0, D=0x51e8548). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp:810. #12 0x00007fffe3d807a6 in clang::declvisitor::Base<clang::declvisitor::make_ptr, clang::TemplateDeclInstantiator, clang::Decl*>::Visit (this=0x7fffffff59f0, D=0x51e8548). at /scratch/greenc/test-products/root/v6_20_04/build/Linux64bit+3.10-2.17-e20-p382-debug/interpreter/llvm/src/tools/clang/include/clang/AST/DeclNodes.inc:369. #13 0x00007fffe3d4796c in clang::Sema::InstantiateClass (this=0x7da020, PointOfInstantiation=..., Instantiation=0x7e8ed10, Pattern=0x51e4900, TemplateArgs=..., TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/too",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5462:3657,test,test-products,3657,https://root.cern,https://github.com/root-project/root/pull/5462,1,['test'],['test-products']
Testability,"Instead of aborting after `R__ASSERT` fails, a proper exception is now thrown when the `RNTupleInspector` detects inconsistent compression across columns or clusters. Additionally, this PR improves the documentation related to this. N.B. Because at this point there is no way to have different compression across columns or clusters, no tests for checking this assumption have been added yet. When at one point this becomes possible, this should obviously be added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13401:337,test,tests,337,https://root.cern,https://github.com/root-project/root/pull/13401,1,['test'],['tests']
Testability,Instead of erroring out with an assert. (cherry picked from commit fb3367fa03e1c8b639e9591b93f6ac5226a80fed). Fixes #9297,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9407:32,assert,assert,32,https://root.cern,https://github.com/root-project/root/pull/9407,1,['assert'],['assert']
Testability,"Instead of hard-coding 'lib' as the path to which minuit2 is installed as a standalone library, use the user configurable CMAKE_INSTALL_LIBDIR. As a particularly common example, this allows a user to specify the library installation path to '${_prefix}/lib64' for 64-bit machines from the cmake command line. This is part of upstreaming patches that I use to build packages for root on openSUSE [1]. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). [1] https://build.opensuse.org/package/show/science/root6",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14176:421,test,tested,421,https://root.cern,https://github.com/root-project/root/pull/14176,1,['test'],['tested']
Testability,"Instead of throwing when deserializing a field with an unknown structural role, we assign to it structure == ENTupleStructure::kUnknown. ; FieldDescriptors with Unknown structural role will generate RInvalidFields upon calling CreateField(). ; This allows getting the descriptor for a future RNTuple from an old ROOT version. A `fForwardCompatible` option is added to RCreateModelOptions to tell RNTuple to not throw when reconstructing the model for an RNTuple containing fields with an unknown structural role. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16602:534,test,tested,534,https://root.cern,https://github.com/root-project/root/pull/16602,1,['test'],['tested']
Testability,"Instead, split the code RDataFrame jits every 1k newlines and jit; in chunks. This avoids an explosion in the time required by; optimizer passes, which seem to not deal well with very large; function bodies. See https://github.com/root-project/root/issues/9312 and; https://github.com/root-project/root/issues/7604 for more discussion. @hahnjo can you confirm this helps? It brings jitting times down to reasonable (<1m times) for the cases I tested.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9328:443,test,tested,443,https://root.cern,https://github.com/root-project/root/pull/9328,1,['test'],['tested']
Testability,"Instead, test for libC++ and language version.; This fixes MacOS builds with >=C++14 and tests enabled.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3659:9,test,test,9,https://root.cern,https://github.com/root-project/root/pull/3659,2,['test'],"['test', 'tests']"
Testability,"Int32; [ OK ] RColumnElementEndian.UInt32 (0 ms); [ RUN ] RColumnElementEndian.Int64; [ OK ] RColumnElementEndian.Int64 (0 ms); [ RUN ] RColumnElementEndian.UInt64; [ OK ] RColumnElementEndian.UInt64 (0 ms); [ RUN ] RColumnElementEndian.Int64Int32; /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/test/ntuple_endian.cxx:286: Failure; Expected equality of these values:; ints[0]; Which is: 1234605615003729920; 0x0000000011223344; Which is: 287454020; /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/test/ntuple_endian.cxx:287: Failure; Expected equality of these values:; ints[1]; Which is: 6153737371142586367; 0x0000000055667788; Which is: 1432778632; [ FAILED ] RColumnElementEndian.Int64Int32 (0 ms); [----------] 9 tests from RColumnElementEndian (13 ms total); [----------] Global test environment tear-down; [==========] 9 tests from 1 test suite ran. (13 ms total); [ PASSED ] 8 tests.; [ FAILED ] 1 test, listed below:; [ FAILED ] RColumnElementEndian.Int64Int32; 1 FAILED TEST; CMake Error at /builddir/build/BUILD/root-6.28.00/cmake/modules/RootTestDriver.cmake:232 (message):; error code: 1; ~~~. #### gtest-tree-ntuple-v7-test-ntuple-extended. This looks like an endian error:. $ printf '%x\n' 1677721600; 64000000. Header length shoud be 0x00000064 = 100; ~~~; 501/1272 Test #443: gtest-tree-ntuple-v7-test-ntuple-extended ...........................***Failed 81.93 sec; Running main() from /builddir/build/BUILD/googletest-1.13.0/googletest/src/gtest_main.cc; Note: Google Test filter = -RCsvDS.Remote:RRawFile.Remote:RSqliteDS.Davix:TFile.ReadWithoutGlobalRegistrationWeb:TFile.ReadWithoutGlobalRegistrationNet:RNTuple.TClassEBO; [==========] Running 4 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 4 tests from RNTuple; [ RUN ] RNTuple.RealWorld1; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RPageStorageFile.cxx:51 in ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(std::string_view, con",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12426:5031,TEST,TEST,5031,https://root.cern,https://github.com/root-project/root/issues/12426,1,['TEST'],['TEST']
Testability,"Integrating a RooAbsRealLValue like a RooRealVar doesn't work in RooFit,; which one can check with this code:. ```C++; RooRealVar x{""x"", ""x"", 2.0, -5.0, 5.0};; std::unique_ptr<RooAbsReal> xint{x.createIntegral(x)};; xint->Print();; ```. The integral of x from -5 to 5 should be zero, but the integral object; only returns the current value of the variable. Some users expect the integral to work, and give the same result as; this, which correctly prints out zero:. ```C++; RooRealVar x{""x"", ""x"", 2.0, -5.0, 5.0};; RooProduct xId{""xId"", ""xId"", RooArgList{x}};; std::unique_ptr<RooAbsReal> xint{xId.createIntegral(x)};; xint->Print();; ```. This is assumed in two RooFit unit tests:. * [testRooWrapperPdf](https://github.com/root-project/root/blob/master/roofit/roofitcore/test/testRooWrapperPdf.cxx#L27); * [testNestedPDFs](https://github.com/guitargeek/roottest/blob/master/root/roofitstats/vectorisedPDFs/testNestedPDFs.cxx#L45) in roottest. Both tests **work only by chance** because the stored x value is the; same as its integral! As soon as the x value or limits would change, the; results don't make sense anymore. As the integration of RooAbsRealLValues never worked correctly and was; not used anywhere outside artificial unit tests, this commit suggests so; prohibit the integration of RooAbsRealLValues by throwing an exception; if `RooAbsRealLValue::createIntegral()` is called. Related to https://github.com/root-project/roottest/pull/894.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11162:675,test,tests,675,https://root.cern,https://github.com/root-project/root/pull/11162,8,['test'],"['test', 'testNestedPDFs', 'testRooWrapperPdf', 'tests']"
Testability,"Internal logic has been adapted to support the case in which TTreeProcessorMT; is acting on a TChain and the trees in the TChain do not all have the same name.; Importantly, the fTreeName data-member changed name to fTreeNames and is now a; vector of strings rather than a single string. This fixes ROOT-10178.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5270:9,log,logic,9,https://root.cern,https://github.com/root-project/root/pull/5270,1,['log'],['logic']
Testability,Introduce MT testing for the TDataFrame with friends scenario.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1310:13,test,testing,13,https://root.cern,https://github.com/root-project/root/pull/1310,1,['test'],['testing']
Testability,"Introduce a new helper returning the number of logical CPUs available to the current process. In case of having an affinity mask, it will return in accordance to it (IMT & tbb required for this). Function naming can be improved. I wanted to keep tbb away from ImplicitMT and that's why the core function is defined in TPoolManager.hxx. Should it be a member of the class?. Also delete useless return.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/754:47,log,logical,47,https://root.cern,https://github.com/root-project/root/pull/754,1,['log'],['logical']
Testability,"Introduce an internal elper class to build a map object that only uses `std::vector`, which can be implicitly converted to `std::map` in C++. This avoids using `std::map` in pythonizations, which can cause assertion failures in Windows debug builds.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16156:206,assert,assertion,206,https://root.cern,https://github.com/root-project/root/pull/16156,1,['assert'],['assertion']
Testability,Introduced by https://github.com/root-project/root/commit/617f5fb4fab9b92b2a95e506b4801364473672bc. The change to a variable length size was not properly propagated to the rest of the `TBranch::Init` function. Fixes the recent ubuntu24 failures of the type; ```; 2400/2509 Test #2432: roottest-root-tree-branches-make ..................................................................***Failed 1.79 sec; -- TEST COMMAND -- ; cd /github/home/ROOT-CI/roottest/root/tree/branches; /usr/bin/timeout -s USR2 1770s /usr/bin/gmake cleantest; -- BEGIN TEST OUTPUT --; /usr/bin/gmake -f Makefile test; gmake[1]: Entering directory '/github/home/ROOT-CI/roottest/root/tree/branches'; ; Processing runnoname.C...; Warning in <TBranch::TBranch>: No name was given to the leaf number '1' in the leaflist of the branch 'nhitshcal'.; *** buffer overflow detected ***: terminated; Aborted (core dumped); gmake[1]: Leaving directory '/github/home/ROOT-CI/roottest/root/tree/branches'; ```. as seen for example [here](https://github.com/root-project/root/actions/runs/9201038116/job/25308591312#step:11:26510),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15620:273,Test,Test,273,https://root.cern,https://github.com/root-project/root/pull/15620,4,"['TEST', 'Test', 'test']","['TEST', 'Test', 'test']"
Testability,"Introduces a couple of fixes for Define and Filter pythonizations, namely:; - Fixes #10092 so that Python lists can be passed in `Filter` operations to specify column names.; - Restores support for C++ functors and `std::function`s passed as callable arguments of `Define` and `Filter`. and adds the corresponding tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11393:314,test,tests,314,https://root.cern,https://github.com/root-project/root/pull/11393,1,['test'],['tests']
Testability,"Introduces the ""trivially constructible"" and ""trivially destructible"" traits for the types wrapped by an RField. Maintaining these traits allows for optimizations when reading collections: for collections of simple types (e.g., `int`s, `float`s), we don't need to call the element constructors and destructors when the collection changes size from event to event. For the vector-heavy ATLAS OpenData benchmark, this results in a 5-10% performance improvement both with RDF and with RNTuple views (hot disk cache, zstd compressed input). Fixes #10520",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11628:400,benchmark,benchmark,400,https://root.cern,https://github.com/root-project/root/pull/11628,1,['benchmark'],['benchmark']
Testability,"Introducing a class acting as a heterogenuous container to store; metadata. Since the intended use case would be obtaining metadata from; json files, the nlohmann::json is used as the underlying container.; This required an extra dependency in tree/dataframe. The RDatasetSpec now only has attributes (treenames, fileglobs, friendinfo,; entryrange, groupinfo), getters and only a single ctor taking a RSpecBuilder.; The user is no longer supposed to build a RDatasetSpec directly.; Therefore all corresponding tests are now removed. The RSpecBuilder has exactly the same attributes as RDatasetSpec, and writable; methods only - e.g. AddGroup, WithFriends, WithRange, Build (but no getters). The RLoopManager now has an extra attribute storing the group; information. It could be set only by the ctor taking a RDatasetSpec. The RDatasetSpec was holding the number of fileglobs in each group.; In the RLoopManager ctor (accepting a RDatasetSpec) the globs are; expanded and the group sizes are updated. However, group positioning; remains relevant to the global TChain in RLoopManager and hence; currently accesing groups/metadata requires global TTreeProcessorMT; chain creation. RSampleInfo now holds RMetadata and thus, could be accessed from DefinePerSample. ---; Example of a valid json file to be parsed:; ```json; {; 	""groups"": [{; 			""tag"": ""SIMULATED"",; 			""trees"": [""tree"", ""subTree"", ""subTree""],; 			""files"": [""test_dir/specTestFile00*.root"", ""specTestFile1.root"", ""specTestFile2.root""],; 			""metadata"": {; 				""year"": 2040,; 				""lumi"": 3.14,; 				""edeposit"": 19.0,; 				""datatype"": ""MC""; 			}; 		},; 		{; 			""tag"": ""REAL"",; 			""trees"": [""subTreeA""],; 			""files"": [""specTestFile4.root"", ""specTestFile4.root""],; 			""metadata"": {; 				""year"": 2012,; 				""century"": 20,; 				""experiment"": ""CMS""; 			}; 		},; 		{; 			""tag"": ""BLABLA"",; 			""trees"": [""subTreeA""],; 			""files"": [""specTestFile4.root"", ""specTestFile4.root""],; 			""metadata"": {; 				""year"": 2030,; 				""century"": 20,; 				""experiment"":",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11526:510,test,tests,510,https://root.cern,https://github.com/root-project/root/pull/11526,1,['test'],['tests']
Testability,Introducing cmake for unuran tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5828:29,test,tests,29,https://root.cern,https://github.com/root-project/root/pull/5828,1,['test'],['tests']
Testability,"Introducing the intermediate class RFloatField<T> that is inherited by RField<float> and RField<double> which exposes the SetHalfPrecision(), SetTruncated() and SetQuantized() methods for both classes. This also adds the previously-missing but advertised `double -> Real16` mapping and the `double -> Real32Trunc` mapping. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16546:344,test,tested,344,https://root.cern,https://github.com/root-project/root/pull/16546,1,['test'],['tested']
Testability,"Iron out some inconsistencies in the treatment of global observables with the new CPU evaluation backend. To check that everything works now, all the tests in `testGlobalObservables` are now done with both the old legacy backend and the new CPU evaluation backend. More detail in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12233:150,test,tests,150,https://root.cern,https://github.com/root-project/root/pull/12233,2,['test'],"['testGlobalObservables', 'tests']"
Testability,Issue with Kolmogorov - Smirnov test in ROOT::Math::GoFTest,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9636:32,test,test,32,https://root.cern,https://github.com/root-project/root/issues/9636,1,['test'],['test']
Testability,"It appears ROOT already depends on at least GTest 1.10.0, by using the following in some places without compatibility code:; * `GTEST_SKIP`; * `TestWithParam` with non-default constructible type; * The new ""test suite"" naming instead of the old ""test case"" (I found at least `TYPED_TEST_SUITE` and `SetUpTestSuite` + `TearDownTestSuite`). Given that an older version is only found on EL8, where we have been using `builtin_gtest` since a while, I propose to drop the remaining compatibility code.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15355:144,Test,TestWithParam,144,https://root.cern,https://github.com/root-project/root/pull/15355,3,"['Test', 'test']","['TestWithParam', 'test']"
Testability,It causes a clash of a macro defined in stdatomic with an identifier in boost.; Fixes https://github.com/root-project/root/issues/6454. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8541:201,test,tested,201,https://root.cern,https://github.com/root-project/root/pull/8541,1,['test'],['tested']
Testability,"It causes build failures on GCC 12.2.1 / c++17 with. ```; [ 70%] Generating G__Core.cxx, ../lib/Core.pcm; In file included from input_line_7:111:; /home/linev/build/webgui/include/ROOT/RDirectoryEntry.hxx:31:33: error: missing '#include <bits/chrono.h>'; 'system_clock' must be declared before it is used; using clock_t = std::chrono::system_clock;; ^; /usr/include/c++/12/bits/chrono.h:1110:12: note: declaration here is not visible; struct system_clock; ^; In module 'std' imported from input_line_1:1:; /usr/include/c++/12/bits/move.h:204:11: error: missing '#include <bits/chrono.h>'; 'time_point' must be defined before it is used; _Tp __tmp = _GLIBCXX_MOVE(__a);; ^; /home/linev/build/webgui/include/ROOT/RDirectoryEntry.hxx:89:4: note: in instantiation of function template specialization 'std::swap<std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long, std::ratio<1, 1000000000>>>>' requested here; swap(fDate, other.fDate);; ^; /usr/include/c++/12/bits/chrono.h:856:14: note: definition here is not reachable; struct time_point; ```# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12516:1131,test,tested,1131,https://root.cern,https://github.com/root-project/root/pull/12516,1,['test'],['tested']
Testability,"It fails on the `macOS ARM` platforms, until this is fixed, the test should be disabled. Also, some general code improvements in the test:. * use complex literals for brevity. * don't use test fixture (fixtures make sense if you need to re-use data, but here the members were reset in every test anyway). * disable verbose output by default",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14290:64,test,test,64,https://root.cern,https://github.com/root-project/root/pull/14290,4,['test'],['test']
Testability,"It fixes the failures in projectroot.math.vecops.test.gtest_math_vecops_test_vecops_rvec that are cropping up all over the place. Sorry, did not realize that the PR that introduced the change was not tested by jenkins because the title said `[N-F-C]` :disappointed:",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9046:49,test,test,49,https://root.cern,https://github.com/root-project/root/pull/9046,2,['test'],"['test', 'tested']"
Testability,"It is a first step to move to generic settings for compression algorithms. I managed to clean all places where was not properly used ""magic numbers"".; Next step will be to introduce a new class CompressionSetting that will provide more general switch for compression algorithms. ( preview concept https://github.com/bbockelm/root/commit/4c856f9408d9184cfaf4dc4727b7e32e5e4e3433 ). In this PR we already using ZLIB as default (for test correctness we need to land https://github.com/root-project/root/pull/2889 and https://github.com/root-project/roottest/pull/247 before this pr).; ```; $ root hsimple.root ; --------------------------------------------------------------------; | Welcome to ROOT 6.15/01 https://root.cern |; | (c) 1995-2018, The ROOT Team |; | Built for linuxx8664gcc on Nov 01 2018, 17:35:38 |; | From heads/default-compression-switcher@v6-13-04-1973-gb4ccd4f330 |; | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |; --------------------------------------------------------------------. root [0] ; Attaching file hsimple.root as _file0...; (TFile *) 0x55f79b0e6360; root [1] _file0->GetCompressionAlgorithm(); (int) 1; root [2] _file0->GetCompressionLevel(); (int) 1; root [3] _file0->GetCompressionSettings(); (int) 101; root [4]; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2902:430,test,test,430,https://root.cern,https://github.com/root-project/root/pull/2902,1,['test'],['test']
Testability,It is adjusting chrome on top of #16685. Testing chrome and firefox stressgraphics.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16691:41,Test,Testing,41,https://root.cern,https://github.com/root-project/root/pull/16691,1,['Test'],['Testing']
Testability,"It is axis drawing, which is configured with `RAttrAxis` class; Many different settings for ticks, labels and title; Supported axes kinds:; - regular; - time scale; - labels; - log with arbitrary base log2, log10, ln, ... Fully refactor JS code for axis drawing - both v6 and v7 using Promises to draw text for axes labels and titles. Provide draw_axes.cxx macro to demonstrate different options:; ![Canvas](https://user-images.githubusercontent.com/4936580/98940655-9b848580-24eb-11eb-99ff-8293254f1869.png)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6801:177,log,log,177,https://root.cern,https://github.com/root-project/root/pull/6801,1,['log'],['log']
Testability,"It is broken by design, there is no way that this interface can; be used in a safe way. Just get rid of it.# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12166:172,test,tested,172,https://root.cern,https://github.com/root-project/root/pull/12166,1,['test'],['tested']
Testability,"It is fixing explicit C++ modules failing with:. `In file included from /data/sftnight/workspace/root-benchmark-compile-cxxmodule/BUILDTYPE/Release/COMPILER/clang_gcc62/LABEL/performance-cc7/root/core/imt/src/TThreadExecutor.cxx:8:; In file included from /data/sftnight/workspace/root-benchmark-compile-cxxmodule/BUILDTYPE/Release/COMPILER/clang_gcc62/LABEL/performance-cc7/build/include/tbb/tbb.h:76:; /data/sftnight/workspace/root-benchmark-compile-cxxmodule/BUILDTYPE/Release/COMPILER/clang_gcc62/LABEL/performance-cc7/build/include/tbb/recursive_mutex.h:54:47: error: declaration of 'PTHREAD_MUTEX_RECURSIVE' must be imported from module 'Imt.ROOT/TTaskGroup.hxx' before it is required; pthread_mutexattr_settype( &mtx_attr, PTHREAD_MUTEX_RECURSIVE );; ^; In module 'Imt' imported from /data/sftnight/workspace/root-benchmark-compile-cxxmodule/BUILDTYPE/Release/COMPILER/clang_gcc62/LABEL/performance-cc7/root/core/imt/src/TThreadExecutor.cxx:1:; /usr/include/pthread.h:51:3: note: previous declaration is here; PTHREAD_MUTEX_RECURSIVE = PTHREAD_MUTEX_RECURSIVE_NP,; ^; 1 error generated.`",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3374:102,benchmark,benchmark-compile-cxxmodule,102,https://root.cern,https://github.com/root-project/root/pull/3374,4,['benchmark'],['benchmark-compile-cxxmodule']
Testability,"It is fully bound to RFrame and only margin and height can be specified.; In the code one does:. auto title = subpads[1][0]->Draw<RTitle>(""Frame2 title"");; title->SetMargin(0.01_normal).SetHeight(0.05_normal);. Provide preliminary JSROOT code. Also first try to provide context menu - for `RAttrAxis` ; Now only lin/log scale switch there - only prove of principle. Also introduce `kNone` attribute kind in RAttrMap. ; Allows to suppress values which is configured in RStyle or in the parent classes. Introduce `zoommin`/`zoommax` values for `RAttrAxis`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5063:316,log,log,316,https://root.cern,https://github.com/root-project/root/pull/5063,1,['log'],['log']
Testability,It is not good style to keep mem leak in test macro,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4999:41,test,test,41,https://root.cern,https://github.com/root-project/root/pull/4999,1,['test'],['test']
Testability,"It is possible to set ranges for a `RooCategory`, suggesting that this; is a possible way to select only a subset of channels in a simultaneous; fit. However, this was not working so far, and this commit implements; that. This commit implements that feature for both the old test statistic; classes and the new BatchMode. As now it also makes sense to fit to a range that is not defined for the; observables but for the categories only, the message that is printed; when your observables don't define the range is demoted from a warning; to an info message. The debug message that was printed when channels are not selected also; got removed, because it had some overhead from `sumEntries`, the; debugging prints are rarely used, and the message is not true anymore; because chanels might also be skipped now becauese the are not selected; in the category range. Also, a new unit test is implemented that verifies the `RooFit::Range()`; command argument for fitTo can be used to select specific components; from a RooSimultaneous. Closes issue https://github.com/root-project/root/issues/8231. Two additional commits in this PR make some improvements to the `RooAbsTestStatistic` code, as described in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11785:275,test,test,275,https://root.cern,https://github.com/root-project/root/pull/11785,2,['test'],['test']
Testability,"It looks we don't need this workaround anymore, it works on our; allmoduels branch and we want to test if this works on nightly as well.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1981:98,test,test,98,https://root.cern,https://github.com/root-project/root/pull/1981,1,['test'],['test']
Testability,It makes the test code more readable.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9041:13,test,test,13,https://root.cern,https://github.com/root-project/root/pull/9041,1,['test'],['test']
Testability,"It modifies the interpreter state, thus needs locking. UPDATE:. As suggested by @hahnjo I tried to write a small unit test to see the data race in action. In fact it was pretty easy, and it also highlighted another data race in `TCling::LoadFile`. In the latest commits I take care both of adding the lock to the other method and adding the test.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13348:118,test,test,118,https://root.cern,https://github.com/root-project/root/pull/13348,2,['test'],['test']
Testability,"It performs asynchronous canvas update. In case of web-based canvas triggers update of the canvas; on the client side, but does not wait that real update is completed.; Avoids blocking of caller thread.; Have to be used if called from other web-based widget to avoid logical; dead-locks. In case of normal canvas just canvas->Update() is performed. Use it in `RFitPanel` and `RBrowser`",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13552:267,log,logical,267,https://root.cern,https://github.com/root-project/root/pull/13552,1,['log'],['logical']
Testability,"It produces false positives on memcpy ""out of bounds"". ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16386:76,test,tested,76,https://root.cern,https://github.com/root-project/root/pull/16386,1,['test'],['tested']
Testability,"It seems ROOT is not able to resolve ADL properly. The following snippet fails to run with ROOT:; ```cpp; #include <iostream>; #include <any>. namespace ns {; struct X {; friend bool any(X) {; return true;; }; };; }; ; void test() {; std::cout << any(ns::X{}) << std::endl;; }. int main() {; test();; return 0;; }; ```; It compiles fine with `g++ -o test test.cpp` but leads to the following error if run with `root -l -q test.cpp`:; ```; In file included from input_line_117:1:; test.cpp:13:13: error: invalid operands to binary expression ('std::ostream' (aka 'basic_ostream<char>') and 'std::any'); std::cout << any(ns::X{}) << std::endl;; ```; If the header `<any>` is not included, then it is executed correctly. To reproduce the error use `Centos 7`, ROOT version `6.24` (taken from `cvmfs`). This error is currently causing some developments for the LHCb experiment to be on stand-by.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8370:224,test,test,224,https://root.cern,https://github.com/root-project/root/issues/8370,6,['test'],['test']
Testability,"It seems independent Cling builds have been broken on Windows for a while (or am making an error when setting up the build in Cling's Github Actions CI?). Looking at Cling commits - https://github.com/root-project/cling/commits/master it looks like Cling's appveyor hasn't even triggered in a long time, so it is difficult to say when was the last time that an independent Cling built worked on Windows. I made some attempt to fix it via - https://github.com/root-project/root/pull/6750/commits/db80e8c0038ab830b1cc4e7d2d42ad640c1ec232 but that is clearly not enough. One can look at the build error logs on Windows in the corresponding Github Action workflow - https://github.com/reikdas/cling-1/runs/1348031890?check_suite_focus=true. @vgvassilev @bellenot Do you have any idea what could be going wrong?. If Cling can be built successfully on Windows, we can merge this in :D",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6750:600,log,logs,600,https://root.cern,https://github.com/root-project/root/pull/6750,1,['log'],['logs']
Testability,"It seems that the exported targets in ROOT 6.26 changed. Some software ([corryvreckan](https://gitlab.cern.ch/corryvreckan/corryvreckan)) that was compiling without issues in older root versions encounters issues when running cmake (3.22.3). . I believe that this is related to missing exported CMake targets. ### Describe the bug. CMake Error at src/core/CMakeLists.txt:73 (ADD_LIBRARY):; Target ""CorryvreckanCore"" links to target ""Threads::Threads"" but the target; was not found. Perhaps a find_package() call is missing for an IMPORTED; target, or an ALIAS target is missing?; ; ; CMake Error at src/core/CMakeLists.txt:73 (ADD_LIBRARY):; Target ""CorryvreckanCore"" links to target ""OpenMP::OpenMP_CXX"" but the; target was not found. Perhaps a find_package() call is missing for an; IMPORTED target, or an ALIAS target is missing?; ; ; CMake Error at src/core/CMakeLists.txt:73 (ADD_LIBRARY):; Target ""CorryvreckanCore"" links to target ""MPI::MPI_CXX"" but the target was; not found. Perhaps a find_package() call is missing for an IMPORTED; target, or an ALIAS target is missing?. The dependency seems to be pulled in via Minuit2. . The following additions to the CMakeLists of the project fix the issue:. ```; if(NOT TARGET Threads::Threads); find_package(Threads); endif(); if(NOT TARGET MPI::MPI_CXX); find_package(MPI); endif(); if(NOT TARGET OpenMP::OpenMP_CXX); find_package(OpenMP); endif(); ```. ### Setup. Compiling from source. Tested in master and using 6.26/00. Using archlinux, using CMake 3.22.3. The issue seems to only be present on archlinux, probably because for other OSs, the dependencies are handled internally rather than being imported (?).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10283:1439,Test,Tested,1439,https://root.cern,https://github.com/root-project/root/issues/10283,1,['Test'],['Tested']
Testability,"It should be defined if C++14 variable templates are available, but it doesn't seem to work -- it's always undefined in my tests. Help? :sweat_smile:",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2293:123,test,tests,123,https://root.cern,https://github.com/root-project/root/pull/2293,1,['test'],['tests']
Testability,"It was tested that this works by building openssl on Arch Linux in a random directory and setting this as the `OPENSSL_ROOT_DIR`. Then, I checked in the cache for the xrootd builtin external project if openssl was found in the desired location:; ```; builtins/xrootd/BUILTIN_XROOTD-prefix/src/BUILTIN_XROOTD-build/CMakeCache.txt; ```. This was the case indeed. Closes #10075.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15697:7,test,tested,7,https://root.cern,https://github.com/root-project/root/pull/15697,1,['test'],['tested']
Testability,"It was there to test whether the user wants to connect to a batch system with Dask and consequently get the number of cores requested. Now this is done lazily, and if the module is not found it means that there is no connection to a batch system involved. Thus we can just get the number of cores through the more generic Client API.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11374:16,test,test,16,https://root.cern,https://github.com/root-project/root/pull/11374,1,['test'],['test']
Testability,It was validated with the unbinned benchmarks in `rootbench` that the; implementation is correct.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12161:35,benchmark,benchmarks,35,https://root.cern,https://github.com/root-project/root/pull/12161,1,['benchmark'],['benchmarks']
Testability,It will be next major JSROOT release; Many changes (see jsroot log).; Main - upgrade of all used packages and moving to ES6 syntax.; Also trying to cleanup API,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6708:63,log,log,63,https://root.cern,https://github.com/root-project/root/pull/6708,1,['log'],['log']
Testability,"It would be amazing if one could code against TThreadExecutor even if IMT is off. Otherwise, one would have to `ifdef` the hell out of all code where IMT should be used.; To make TTEx usable for e.g. RooFit, I `ifdef`ed a bit in the TThreadExecutor implementation:; - I replaced `parallel_for` by `for`, and `parallel_reduce` by `std::accumulate`.; - I enabled the tests in `core/imt` irrespective of whether IMT is available.; - Things that just cannot work in those tests were anyway protected by `ifdef`, but I had to move some `#include`s around.; - `TThreadExecutor::ForEach` works, but I wonder if we need more tests that run *both* with and without IMT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6298:365,test,tests,365,https://root.cern,https://github.com/root-project/root/pull/6298,3,['test'],['tests']
Testability,"It would be great if the `F.ModuleName` could be printed out when this assert fires. https://github.com/root-project/root/blob/dfbe5ae4f74a197182feb28b2b9052b73e7a3f45/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L4018. Would make it much easier to understand that one has to for example `export ROOT_INCLUDE_PATH=${VC_HOME}/include` because the Vc module was not found, instead of guessing about what is happening from this. ```; genconf: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:4018: clang::ASTReader::ASTReadResult clang::ASTReader::ReadModuleMapFileBlock(clang::ASTReader::RecordData&, clang::ASTReader::ModuleFile&, const ModuleFile*, unsigned int): Assertion `M && M->Name == F.ModuleName && ""found module with different name""' failed.; --; /bin/sh: line 1: 158369 Aborted                 (core dumped) ../run /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/genconf --configurable-module=GaudiKernel.Proxy --configurable-default-name=Configurable.DefaultName --configurable-algorithm=ConfigurableAlgorithm --configurable-algtool=ConfigurableAlgTool --configurable-auditor=ConfigurableAuditor --configurable-service=ConfigurableService -o genConfDir/GaudiKernel -p GaudiKernel -i /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/libtest_CustomFactory.so. ```. Root version: This is ROOT master",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12138:71,assert,assert,71,https://root.cern,https://github.com/root-project/root/issues/12138,2,"['Assert', 'assert']","['Assertion', 'assert']"
Testability,"It's important the the AD code path performance that the analytic integrals in the generated RooFit code don't end up in the NLL loop bodies. This PR generalizes some implementation details of the BatchMode to figure out which observables are scalar, and if they are, write them outside of the loop body. Furthermore, some code from the BatchMode is reused to fill also the vector observables for the generated code. When benchmarking the minimization of the model in `testRooFuncWrapper`, the situation looks now very good for RooFit code-gen that is as fast as the BatchMode here, even if it has not caching and no vectorization. Also, the AD mode is faster than vanilla RooFit, even if the number of parameters is not very high. ```txt; ------------------------------------------------------------------------------------------; Benchmark Time CPU Iterations; ------------------------------------------------------------------------------------------; NllReferenceMinimization/0/10/iterations:100 0.488 ms 0.487 ms 100; NllReferenceMinimization/0/100/iterations:100 0.382 ms 0.381 ms 100; NllReferenceMinimization/0/1000/iterations:100 3.63 ms 3.62 ms 100; NllReferenceMinimization/0/10000/iterations:100 39.6 ms 39.6 ms 100; NllBatchModeMinimization/1/10/iterations:100 0.090 ms 0.090 ms 100; NllBatchModeMinimization/1/100/iterations:100 0.163 ms 0.163 ms 100; NllBatchModeMinimization/1/1000/iterations:100 0.882 ms 0.881 ms 100; NllBatchModeMinimization/1/10000/iterations:100 8.64 ms 8.64 ms 100; NllCodeSquash_NumDiff/2/10/iterations:100 0.053 ms 0.053 ms 100; NllCodeSquash_NumDiff/2/100/iterations:100 0.124 ms 0.124 ms 100; NllCodeSquash_NumDiff/2/1000/iterations:100 0.887 ms 0.886 ms 100; NllCodeSquash_NumDiff/2/10000/iterations:100 10.1 ms 10.1 ms 100; NllCodeSquash_AD/3/10/iterations:100 0.057 ms 0.057 ms 100; NllCodeSquash_AD/3/100/iterations:100 0.186 ms 0.186 ms 100; NllCodeSquash_AD/3/1000/iterations:100 1.44 ms 1.44 ms 100; NllCodeSquash_AD/3/10000/iterations:100 17.4 ms 17.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12656:422,benchmark,benchmarking,422,https://root.cern,https://github.com/root-project/root/pull/12656,3,"['Benchmark', 'benchmark', 'test']","['Benchmark', 'benchmarking', 'testRooFuncWrapper']"
Testability,"It's important to also remember and reset the server dirty flags correctly in `RooAbsReal::computeBatch`. This was already done for the operation mode, but for this mechanism of not changing the arg state in the BatchMode fallback computation function to work, one also needs to consider the dirty state itself. This fixes the `stressRooStats` unit tests with the new BatchMode. Since it works now, the `stressRooStats` test suite is now also run with the different BatchMode backend as unit tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11807:349,test,tests,349,https://root.cern,https://github.com/root-project/root/pull/11807,3,['test'],"['test', 'tests']"
Testability,"It's not easy to make the unit tests in `test_ProcessTimer.cxx` always; pass because they compare times spent in different processes that are; not deterministic. Therefore, the unit test is disabled for now. This was suggested by @Zeff020, the author of the test. Here is an example of a random failure:; https://github.com/root-project/root/pull/12000#issuecomment-1377703232. To be backported to v6.28",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12916:31,test,tests,31,https://root.cern,https://github.com/root-project/root/pull/12916,3,['test'],"['test', 'tests']"
Testability,"It's not important, but I discovered by chance that `InterpreterStress::stressSTLDict()` was doing one iteration less than expected. Fix that. ## Checklist:; - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13567:164,test,tested,164,https://root.cern,https://github.com/root-project/root/pull/13567,1,['test'],['tested']
Testability,It's not needed anymore since we can now just take the column ids from the field descriptor. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16105:114,test,tested,114,https://root.cern,https://github.com/root-project/root/pull/16105,1,['test'],['tested']
Testability,"It's not your fault, but you opened Pandora's box 🙂; - No c-style casts in any code that gets touched after 2018; - `assert(0)` is useless in production code. Please throw `std::invalid_argument`.; - Don't use legacy iterators and don't define variables outside of the loop.; - Instead, use something like this:; ```c++; for (unsigned int i = 0; i < inFuncList.size(); ++i) {; auto func = static_cast<RooAbsArg*>(inFuncList[i]);; auto coef = static_cast<RooAbsArg*>(inCoefList[i]);; ...; ```; or directly `dynamic_cast` to the required types. If one of those doesn't exist or has the wrong type, issue an error message and throw. _Originally posted by @hageboeck in https://github.com/root-project/root/pull/8368#discussion_r647458786_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8374:117,assert,assert,117,https://root.cern,https://github.com/root-project/root/issues/8374,1,['assert'],['assert']
Testability,"Jira: https://sft.its.cern.ch/jira/browse/ROOT-10491. We miss the test for reading boolean branches with `RDataFrame.AsNumpy`! Added the test and start investigating when it breaks - such as reported in the Jira ticket. Following the discussion on the forum [here](https://root-forum.cern.ch/t/asnumpy-fails-with-boolean-branches/37282), we see that the error shows a missing `data` member for the `std::vector<bool>`:. ```; df.AsNumpy(); ---------------------------------------------------------------------------; AttributeError Traceback (most recent call last); <ipython-input-10-e856f5516a02> in <module>(); ----> 1 df.AsNumpy(). /Applications/root_build/lib/ROOT.pyc in _RDataFrameAsNumpy(df, columns, exclude); 429 else:; 430 tmp = numpy.empty(len(cpp_reference), dtype=numpy.object); --> 431 for i, x in enumerate(cpp_reference):; 432 tmp[i] = x # This creates only the wrapping of the objects and does not copy.; 433 py_arrays[column] = ndarray(tmp, result_ptrs[column]). AttributeError: 'vector<bool>' object has no attribute 'data'; ```. The error seems to be triggered when iterating over `std::vector<bool>` in python. My guess is some weirdness in the given std version of macOS 10.15. @etejedor We should add a test for this at the right place not only for `AsNumpy`. Edit: Added a fix for current PyROOT by protecting the tp_iter field for `vector<bool>`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4718:66,test,test,66,https://root.cern,https://github.com/root-project/root/pull/4718,3,['test'],['test']
Testability,"Just a proposal :); Feel free to close if not interesting. The `TString::Form` calls in `TTree::FindLeaf` are by far the most expensive calls in the function and show up as a significant part of the runtime of `TTreeReaderArray::CreateProxy`.; If I'm not mistaken all that logic can be skipped in case `searchname` does not contain a dot, with significant speed-ups for such a `FindLeaf` call.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2437:273,log,logic,273,https://root.cern,https://github.com/root-project/root/pull/2437,1,['log'],['logic']
Testability,"Just add the new library name so that it can be found. This can probably even skip CI, as I tested locally and it won't be tested by our builds against a new enough Oracle client.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2967:92,test,tested,92,https://root.cern,https://github.com/root-project/root/pull/2967,2,['test'],['tested']
Testability,Just re-ordering. And making a test that should have been MT MT.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13192:31,test,test,31,https://root.cern,https://github.com/root-project/root/pull/13192,1,['test'],['test']
Testability,"Just testing for now, please do not merge as there are LLVM patches in the mix.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1393:5,test,testing,5,https://root.cern,https://github.com/root-project/root/pull/1393,1,['test'],['testing']
Testability,"Just testing for now, still need to define how CMake options will be updated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1595:5,test,testing,5,https://root.cern,https://github.com/root-project/root/pull/1595,1,['test'],['testing']
Testability,Just to test in jenkins,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/767:8,test,test,8,https://root.cern,https://github.com/root-project/root/pull/767,1,['test'],['test']
Testability,"K ] RColumnElementEndian.Int32 (0 ms); [ RUN ] RColumnElementEndian.UInt32; [ OK ] RColumnElementEndian.UInt32 (0 ms); [ RUN ] RColumnElementEndian.Int64; [ OK ] RColumnElementEndian.Int64 (0 ms); [ RUN ] RColumnElementEndian.UInt64; [ OK ] RColumnElementEndian.UInt64 (0 ms); [ RUN ] RColumnElementEndian.Int64Int32; /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/test/ntuple_endian.cxx:286: Failure; Expected equality of these values:; ints[0]; Which is: 1234605615003729920; 0x0000000011223344; Which is: 287454020; /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/test/ntuple_endian.cxx:287: Failure; Expected equality of these values:; ints[1]; Which is: 6153737371142586367; 0x0000000055667788; Which is: 1432778632; [ FAILED ] RColumnElementEndian.Int64Int32 (0 ms); [----------] 9 tests from RColumnElementEndian (13 ms total); [----------] Global test environment tear-down; [==========] 9 tests from 1 test suite ran. (13 ms total); [ PASSED ] 8 tests.; [ FAILED ] 1 test, listed below:; [ FAILED ] RColumnElementEndian.Int64Int32; 1 FAILED TEST; CMake Error at /builddir/build/BUILD/root-6.28.00/cmake/modules/RootTestDriver.cmake:232 (message):; error code: 1; ~~~. #### gtest-tree-ntuple-v7-test-ntuple-extended. This looks like an endian error:. $ printf '%x\n' 1677721600; 64000000. Header length shoud be 0x00000064 = 100; ~~~; 501/1272 Test #443: gtest-tree-ntuple-v7-test-ntuple-extended ...........................***Failed 81.93 sec; Running main() from /builddir/build/BUILD/googletest-1.13.0/googletest/src/gtest_main.cc; Note: Google Test filter = -RCsvDS.Remote:RRawFile.Remote:RSqliteDS.Davix:TFile.ReadWithoutGlobalRegistrationWeb:TFile.ReadWithoutGlobalRegistrationNet:RNTuple.TClassEBO; [==========] Running 4 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 4 tests from RNTuple; [ RUN ] RNTuple.RealWorld1; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RPageStorageFile.cxx:51 in ROOT::Ex",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12426:4957,test,test,4957,https://root.cern,https://github.com/root-project/root/issues/12426,1,['test'],['test']
Testability,"LD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/core/foundation/src/TClassEdit.cxx:1477; #34 0x00002b4bd1c8e68e in ResolveTypedefImpl (tname=0x438fe30 ""reco::SecondaryVertexTagInfo::TrackData"", len=39, cursor=; 0x7ffd951b5fec: 39, modified=; 0x7ffd951b5feb: true, result=...) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/core/foundation/src/TClassEdit.cxx:1741; #35 0x00002b4bd1c8ec12 in TClassEdit::ResolveTypedef[abi:cxx11](char const*, bool) (tname=0x438fe30 ""reco::SecondaryVertexTagInfo::TrackData"") at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/core/foundation/src/TClassEdit.cxx:1775; #36 0x00002b4bd1c885f9 in TClassEdit::TSplitType::ShortType (this=0x7ffd951b61c0, answ=..., mode=3618) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/core/foundation/src/TClassEdit.cxx:442; #37 0x00002b4bd1c89e1b in TClassEdit::GetNormalizedName (norm_name=..., name=...) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/core/foundation/src/TClassEdit.cxx:871; #38 0x00002b4bd1cedb74 in ROOT::TSchemaRule::SetSourceClass (this=0xc24c900, classname=...) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/core/meta/src/TSchemaRule.cxx:459; #39 0x00002b4bd1cd28b8 in ROOT::TGenericClassInfo::CreateRuleSet (this=0x2b4bf40eb840 <ROOT::GenerateInitInstanceLocal(reco::btag::TrackData const*)::instance>, vect=..., ProcessReadRules=true) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_g",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12771:12338,test,tests,12338,https://root.cern,https://github.com/root-project/root/issues/12771,4,['test'],"['testBuildDir', 'tests']"
Testability,"LD/root-6.28.00/tutorials/dataframe/df006_ranges.py"", line 44, in <module>; d_15_end_3 = d.Range(15, 0, 3); ^^^^^^^^^^^^^^^^^; TypeError: none of the 2 overloaded methods succeeded. Full details:; ROOT::RDF::RInterface<ROOT::Detail::RDF::RRange<ROOT::Detail::RDF::RLoopManager>,void> ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Range(unsigned int end) =>; TypeError: takes at most 1 arguments (3 given); ROOT::RDF::RInterface<ROOT::Detail::RDF::RRange<ROOT::Detail::RDF::RLoopManager>,void> ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Range(unsigned int begin, unsigned int end, unsigned int stride = 1) =>; runtime_error: Range: stride must be strictly greater than 0 and end must be greater than begin.; CMake Error at /builddir/build/BUILD/root-6.28.00/redhat-linux-build/RootTestDriver.cmake:232 (message):; error code: 1; ~~~. #### tutorial-fit-combinedFit-py. cppyy.gbl.std.out_of_range: none of the 2 overloaded methods succeeded.; ~~~; 1110/1272 Test #1115: tutorial-fit-combinedFit-py .........................................***Failed 1.71 sec; Traceback (most recent call last):; File ""/builddir/build/BUILD/root-6.28.00/tutorials/fit/combinedFit.py"", line 98, in <module>; fitter.Config().ParSettings(4).Fix(); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; cppyy.gbl.std.out_of_range: none of the 2 overloaded methods succeeded. Full details:; const ROOT::Fit::ParameterSettings& ROOT::Fit::FitConfig::ParSettings(unsigned int i) =>; out_of_range: vector::_M_range_check: __n (which is 0) >= this->size() (which is 0); ROOT::Fit::ParameterSettings& ROOT::Fit::FitConfig::ParSettings(unsigned int i) =>; out_of_range: vector::_M_range_check: __n (which is 0) >= this->size() (which is 0); CMake Error at /builddir/build/BUILD/root-6.28.00/redhat-linux-build/RootTestDriver.cmake:232 (message):; error code: 1; ~~~. #### tutorial-math-exampleFunction-py. ReferenceError: attempt to access a null-pointer; ~~~; 1132/1272 Test #1132: tutorial-math-exampleFunction-py .....",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12429:5887,Test,Test,5887,https://root.cern,https://github.com/root-project/root/issues/12429,1,['Test'],['Test']
Testability,LLVM assertion failure in HandleUnionActiveMemberChange,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13019:5,assert,assertion,5,https://root.cern,https://github.com/root-project/root/issues/13019,1,['assert'],['assertion']
Testability,"LLVM has dropped it's svn instance, so cpt was unable to retrieve LLVM from svn (and Cling CI was failing). Also, lit is not being installed as an independent package on MacOS when being installed using Python2's pip (used to work earlier). Therefore we decided to drop Python 2 (also Python 2 has reached end of life). @Axel-Naumann This should also solve the sudo issue when running tests, that you mentioned to me around a year ago ;). Linked issue - https://github.com/root-project/cling/issues/385",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7229:385,test,tests,385,https://root.cern,https://github.com/root-project/root/pull/7229,1,['test'],['tests']
Testability,"LZMA by default creates very large hash tables for its dictionaries, e.g., at compression level 4, the hash table is 4Mi 4 byte entries, 16 MiB total. The hash table has to be zeroed before use so it is allocated via calloc(), which means all the pages have to be allocated, mapped and written. ROOT baskets are often much smaller than the default LZMA dictionaries; for small baskets, the large dictionary has very little compression benefit, while zeroing the hash table can be more expensive than the actual compression operation. Since R__zipLZMA() is actually being used to compress a buffer of known size, not a stream, we can use the size of the buffer to estimate an appropriate size for the dictionary. This PR uses a slightly more advanced part of the LZMA API to set the dictionary size to 1/4 the size of the input buffer, if that is smaller than the default size from the selected preset compression level. In tests with CMS data, this results in less than 1% increase in the output size and (in one test job) a 25% reduction in job total run time, with LZMA compression time reduced by 80% (all of that time that was being spent in memset() zeroing the hash table). I also tested this with the ""Event"" test program with Brian's changes from #59. With the same test parameters as Brian (""./Event 4000 6 99 1 1000 2""), I get. ZLIB level-6: 14.4 MB/s; Original LZMA level-6: 2.3 MB/s; Modified LZMA level-6: 3.0 MB/s. With 100 tracks per event (and hence smaller baskets) the improvement is from 2.2 MB/s to 3.9 MB/s. This change should be fully transparent and backwards compatible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/194:923,test,tests,923,https://root.cern,https://github.com/root-project/root/pull/194,5,['test'],"['test', 'tested', 'tests']"
Testability,Label longtest for tests running over 1 minute,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/408:19,test,tests,19,https://root.cern,https://github.com/root-project/root/pull/408,1,['test'],['tests']
Testability,"Last year, with commit 3657e7c, the parameter index calculation was; changed to be on the fly instead of using a look-up map, which is much; faster. However, the implemented formula was not correct for two or three; dimensions, which is fixed by this commit. To make sure that the index computation is correct this time, the new; code was tested in this code snippet with various inputs:. ```C++; void runTest(int nx = 42, int ny = 42, int nz = 42) {; const int nxy = nx * ny;; const int nyz = ny * nz;. for (int i = 0; i < nx; ++i) {; for (int j = 0; j < ny; ++j) {; for (int k = 0; k < nz; ++k) {; const int index = k + j * nz + i * ny * nz;; const int gammaIndex = i + j * nx + k * nx * ny;. const int i2 = index / nyz;; const int tmp = index % nyz;; const int j2 = tmp / nz;; const int k2 = tmp % nz;. const int gammaIndex2 = i2 + j2 * nx + k2 * nxy;. if (gammaIndex2 != gammaIndex) {; std::cout << ""The unraveled indices were not correct!""; << std::endl;; return;; }; }; }; }; }; ```. Needs to be backported to the 6.26 branch to get into the 6.26.06 patch; release. This commit the following problem reported on the forum:; https://root-forum.cern.ch/t/cpycppyy-segfault-on-mac-m1/50822",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10989:339,test,tested,339,https://root.cern,https://github.com/root-project/root/pull/10989,1,['test'],['tested']
Testability,Latest binary of Apache Arrow actually has test-utils.h in arrow/compute/. [ 94%] Building CXX object tree/dataframe/test/CMakeFiles/dataframe_interface.dir/dataframe_interface.cxx.o; /.../root/tree/dataframe/test/datasource_arrow.cxx:14:10: fatal error: arrow/test-util.h: No such file or directory; #include <arrow/test-util.h>; ^~~~~~~~~~~~~~~~~~~; compilation terminated.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3703:43,test,test-utils,43,https://root.cern,https://github.com/root-project/root/pull/3703,5,['test'],"['test', 'test-util', 'test-utils']"
Testability,Latest binary of Apache Arrow actually has test-utils.h in arrow/comp…,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3725:43,test,test-utils,43,https://root.cern,https://github.com/root-project/root/pull/3725,1,['test'],['test-utils']
Testability,Leaf name with dot was not properly tested,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7557:36,test,tested,36,https://root.cern,https://github.com/root-project/root/pull/7557,3,['test'],['tested']
Testability,"Let configure different parameter in the THttpServer and in the threads layout to minimize as much as possible; round-trip packet time. After all tunings round-trip time can be reduced from 30ms to 1.4ms. . Introduce `tutorials/webgui/ping/` example, which demonstrate and let test all possible tuning parameters independently. Once code adjusted to headless mode, one potentially can include it into stress tests during ROOT nightly/PR builds.; It is very simple, but powerful test of JSROOT/THttpServer/RWebWindow code integrity. Thanks to @osschar and @alja for initial idea.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7777:277,test,test,277,https://root.cern,https://github.com/root-project/root/pull/7777,3,['test'],"['test', 'tests']"
Testability,Let test webgui integrity; - if THttpServer work properly; - if JSROOT loads on client side; - if communication runs between server and clients,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7901:4,test,test,4,https://root.cern,https://github.com/root-project/root/pull/7901,1,['test'],['test']
Testability,Let use browser `import()` function to control proper loading of JSROOT modules. ; No need to use older `JSRoot.core.js`. To be tested,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16023:128,test,tested,128,https://root.cern,https://github.com/root-project/root/pull/16023,1,['test'],['tested']
Testability,Let's see if this new configuration of the test still shows issues on some CI runs,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16030:43,test,test,43,https://root.cern,https://github.com/root-project/root/pull/16030,1,['test'],['test']
Testability,"Like `qt5web`, it provides web-based display but for Qt6 WebEngine component.; Qt6 WebEngine available now in Qt 6.3 developer branch, can be tested with OpenSUSE Tumbleweed. Both `qt5web` and `qt6web` can be build at the same time and used independently.; Just when starting ROOT, specify `root --web=qt6`",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9182:142,test,tested,142,https://root.cern,https://github.com/root-project/root/pull/9182,1,['test'],['tested']
Testability,"Like for RooFit previously, this commit applies the `clang-tidy` suggestions from the battle-tested CMSSW config file: https://github.com/cms-sw/cmssw/blob/master/.clang-tidy. I scrolled over the changes, and they look unintrusive. It's mostly replacing `0` and `1` literals with `false` and `true`, replaces the included headers, and uses more `empty()`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13892:93,test,tested,93,https://root.cern,https://github.com/root-project/root/pull/13892,1,['test'],['tested']
Testability,"Like the tests added in https://github.com/root-project/root/pull/15499/commits/e00aded416c4d8b0c364035353dfb529602fd0e1, these are also sanity checks meant in part as code-as-documentation for users to see how things work. It turns out in this case that GCC on the one hand and Clang and MSVC on the other hand have two different solutions for binary arithmetic operations on two NaNs. In both cases, one of the two NaNs is returned, but in one case it's the first, in the other is it's the second. The tests added in this commit will hopefully warn RooNaNPacker users of this behavior.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15908:9,test,tests,9,https://root.cern,https://github.com/root-project/root/pull/15908,2,['test'],['tests']
Testability,"Like this, people can get the test support library for using `ROOT_ADD_GTEST` with the automatic ROOT output checking, without having to build all of ROOTs tests itself (`testing=ON`). Off by default to not force a build dependency on gtest. Closes #16612. Important to fix the LCG and CMSSW nightlies.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16625:30,test,test,30,https://root.cern,https://github.com/root-project/root/pull/16625,3,['test'],"['test', 'testing', 'tests']"
Testability,"Like this, we should get a nice test summary also for the nightlies.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14961:32,test,test,32,https://root.cern,https://github.com/root-project/root/pull/14961,1,['test'],['test']
Testability,Limit the number of threads in TMVA CNN/DNN test to save memory,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10312:44,test,test,44,https://root.cern,https://github.com/root-project/root/pull/10312,1,['test'],['test']
Testability,"List of relevant PR missing in the release notes for 6.24. - XROOTD #7380 ; - TMVA : optimizer options : #7318; - ChangeLabel: #7294; - Buffer Merger improvements : #7286; - Eve7: The first implementation of log view #7270; - TMVA: Update Keras tutorials using tensorflow.keras #7255; - builtins: Zstd 1.4.8 #7214; - RooFit: warning message for RooAddPdf without norm set: #7129 ; - RooFit: Improve plotting of RooBinSamplingPdf. #7110; - Hist: Fixes and improvements for the TKDE class #7096; - Fix a memory leak in TF1::Copy #7035; - Fix for new version of cudnn version 8 #7003; - Minuit2: Use Numerical gradient as input to the seed generator when using external gradients in Minuit2 #7001; - TF1: Enable using Automatic differentiation for computing Parameter Gradient in TF1 #6956; - Math: Fix correction factor for Confidence level in ROOT::Fit::FitResult #6902; - TMVA: Implement MethodCategory::GetMulticlassValues() #6886; - Hist: Add THistRange class defining a generic histogram range and its iterator #6795; - TMVA: Support for Keras 2.4 (tf.keras) #6793; - Eve-7: Add example of calorimeter representation of REveDataCollection #6783; - Math: Fix BinData copy constructor #6776; - [tmva] Add possibility to make ROC curve for the training dataset from TMVA::Factory #6724; - Math: Changes in TRandom3::GetSeed #6723; - Minuit2: new Minuit2 logging #6705; - ntuple] Several interface improvements (unique pointer, const) #6655; - Optimize TPrincipal::AddRow function #6630",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7858:208,log,log,208,https://root.cern,https://github.com/root-project/root/issues/7858,2,['log'],"['log', 'logging']"
Testability,"Logger: emit through TError by default, mention MT behavior.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1746:0,Log,Logger,0,https://root.cern,https://github.com/root-project/root/pull/1746,1,['Log'],['Logger']
Testability,Logical backport of #10391,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10429:0,Log,Logical,0,https://root.cern,https://github.com/root-project/root/pull/10429,1,['Log'],['Logical']
Testability,Logical backport of #9995 . In the 6.26 sources the new implementation that dispatches proxy creation by the operation type is not present. Porting this to 6.26 should still be worth it since it fixes a bug,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10027:0,Log,Logical,0,https://root.cern,https://github.com/root-project/root/pull/10027,1,['Log'],['Logical']
Testability,Logical backport of https://github.com/root-project/root/pull/9811 but adjusted to the status of the tests in 6.24,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9880:0,Log,Logical,0,https://root.cern,https://github.com/root-project/root/pull/9880,2,"['Log', 'test']","['Logical', 'tests']"
Testability,"Looking e.g. at https://github.com/root-project/root/blob/master/tree/ntuple/v7/src/RField.cxx there are some places where a `R__ASSERT` is desirable (validation of input parameters, erroring out in certain edge cases), but in others I think we use it for ensuring that no bugs are present, in which case `assert` would be more appropriate. I did not see places where the checks are so expensive that the difference might matter in terms of performance, but it might be better to establish clear usage patterns before that happens :)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10618:306,assert,assert,306,https://root.cern,https://github.com/root-project/root/issues/10618,1,['assert'],['assert']
Testability,MIsbehaviour of ROOT with ASAN enabled: some tests are failing,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14682:45,test,tests,45,https://root.cern,https://github.com/root-project/root/issues/14682,1,['test'],['tests']
Testability,"Made the `RIO` library's dependence on `libatomic` public. Unfortunately the previous incantation was not transitive. The clients were not set up to link against libatomic themselves as well. And with [TFile.h](https://github.com/root-project/root/blob/master/io/io/inc/TFile.h#L129-L132) publicly exposing a dependence on `std::atomic`, and multiple classes implemented in the project that inherit from `TFile` (and are built into other libraries), this really is a must. This ties to both #4561 (where I described ARM's explicit dependence on `libatomic` ""in certain situations""), and also to #6432 (ROOT's CMake configuration could really do with a significant cleanup/rewrite). Unfortunately such errors will keep coming back if we can not set up a centralised test for this. Any chance that that could be done?",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6609:765,test,test,765,https://root.cern,https://github.com/root-project/root/pull/6609,1,['test'],['test']
Testability,"Main (argc=<optimized out>, argv=<optimized out>) at Modules/main.c:734; #21 0x000000000040112f in main (argc=<optimized out>, argv=<optimized out>) at ./Programs/python.c:15; ```. Adding a `del f` at the end doesn't trigger this. . Attaching gdb, the failed assertion is: . ```; 1209	 if (type->tp_flags & Py_TPFLAGS_MANAGED_DICT) {; 1210	 assert(type->tp_dictoffset);; 1211	 int err = _PyObject_VisitInstanceAttributes(self, visit, arg);; 1212	 if (err) {; 1213	 return err;; 1214	 }; ```. So it seems to likely have something to do with #12857. Oddly, it does not seem to affect my system ROOT version (packaged by Fedora) which is also ROOT 6.28.06 and presumably built with Python 3.11, suggesting that there may be something complicated going on (I was only building my own ROOT in hopes of reproducing @clark2668's problem). None of the patches Fedora applies seem to be relevant, but probably there are differences in compilation flags. . Looking at the documentation for Py_TPLAGS_MANAGED_DICT at https://docs.python.org/dev/c-api/typeobj.html#c.Py_TPFLAGS_MANAGED_DICT (which wrongly implies it's new in Python 3.12...), it seems like perhaps we want something like the following in MemoryRegulator.cxx ; ```; 139 if (!Py_TYPE(pyobj)->tp_dictoffset); 140 {; 141 CPyCppyy_NoneType.tp_flags |= (Py_TYPE(pyobj)->tp_flags & Py_TPFLAGS_MANAGED_DICT);; 142 }; ```. This does indeed fix this immediate issue on my system, but I have no idea if it's the right thing or not. (Just commenting out that line also fixes the issue, but presumably causes other issues). . ### Reproducer. A python script with. ```; import ROOT; f = ROOT.TFile(""test.root"",""CREATE""); ; ```. or typing those two into an interactive python session and then quitting. ### ROOT version. I used ROOT 6.28.06 with Python3.11 and gcc 13. @clark2668 likely may have a different reproducing compiler version. ### Installation method. build from source. ### Operating system. Fedora 38, Ubuntu. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13694:3745,test,test,3745,https://root.cern,https://github.com/root-project/root/issues/13694,1,['test'],['test']
Testability,"Main problem of current approach is incremental builds.; Currently command is used: `cmake -E copy_if_different <source> <dest>`; It set current time when file is copied.; Fine if changing done locally - new file modification will trigger; file copy. But problem appears when changes checkout from repository.; Git preserves time of last modification and this conflicts with logic; of incremental build. Example: . If one builds ROOT today, all files stamp will be from today in build directory.; If somebody commit changes already yesterday, all timestamps for that; changes will be from yesterday. If one checkout these commits, checked out ; files will get time stamps from yesterday. And when running cmake - it will do nothing. This is typical case with `js/` and `ui5/` folders with many files inside.; Very often changes in JSROOT and openui5 are missed by incremental builds. The only way to preserve timestamp in cmake - use `file(COPY ...)` command.; This PR does exactly this. . BUT!!! Drawback - cmake always run rule if source and target file stamps; matches. Incremental builds will be always filled with messages (even when nothing is changed). I did not found way to convince cmake do nothing if time stamp matches.; Probably, there is somewhere the option. Maybe one can apply such brutal-force; approach for `ui5/` and `js/` folders, where main problems appears for me. ```; [ 56%] Generating tutorials/fit/graph2dfit.C; [ 56%] Generating tutorials/fit/langaus.C; [ 56%] Generating tutorials/fit/line3Dfit.C; [ 56%] Generating tutorials/fit/minuit2FitBench.C; [ 56%] Generating tutorials/fit/minuit2GausFit.C; [ 56%] Generating tutorials/fit/minuit2FitBench2D.C; [ 56%] Generating tutorials/fit/multifit.py; [ 56%] Generating tutorials/fit/myfit.C; [ 56%] Generating tutorials/fit/multifit.C; [ 56%] Generating tutorials/fit/multidimfit.C; [ 56%] Generating tutorials/fit/qa2.C; [ 56%] Generating tutorials/fitsio/FITS_tutorial3.C; [ 56%] Generating tutorials/fit/vectorizedFit.C; [ ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9804:375,log,logic,375,https://root.cern,https://github.com/root-project/root/pull/9804,1,['log'],['logic']
Testability,"Make `FilteringDiagConsumer` also ignore -Wunused-result. Whether or not such diagnostic is filtered depends on `CompilationOptions::IgnorePromptDiags`. In particular, `IgnorePromptDiags` should _only_ be enabled for code parsed via `Interpreter::EvaluateInternal()`. Thus, as of this commit `IgnorePromptDiags` defaults to 0 in `makeDefaultCompilationOpts()`. The observable effect of this change is ignoring `-Wunused-result` for wrapped code, e.g.; ```c++; [[nodiscard]] int f() { return 0; }. // This yields `warning: ignoring return value of function declared with 'nodiscard' attribute [-Wunused-result]`; void g() { f(); }. f(); // but this should not; ```. Alternatively, as discussed with @Axel-Naumann, we could insert `#pragma clang diagnositc ...` directives in [`Interpreter::WrapInput()`](https://github.com/root-project/root/blob/master/interpreter/cling/lib/Interpreter/Interpreter.cpp#L1130), but I see that as much less elegant. ## Checklist:; - [X] tested changes locally; - [X] the patch passes cling tests. This PR fixes #11562.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12654:968,test,tested,968,https://root.cern,https://github.com/root-project/root/pull/12654,2,['test'],"['tested', 'tests']"
Testability,Make `ROOT::TestSupport` an `OBJECT` library,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13460:12,Test,TestSupport,12,https://root.cern,https://github.com/root-project/root/pull/13460,1,['Test'],['TestSupport']
Testability,Make component plots also work with HistFactory models and include a unit test. More detail on the fixes in the commit descriptions. There were in fact two separate bugs that resulted in this not working:. 1. Wrong component (sample) selection because the same RooBinWidthFunction is used for all samples; 2. Wrong normalization integrals for plots with component selection of pdfs with numeric normalization integrals. The bug affects for example the user in this forum post: https://root-forum.cern.ch/t/problems-plotting-individual-components-with-roofit-histfactory. Thanks a lot to Veronica for reporting this issue!,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13464:74,test,test,74,https://root.cern,https://github.com/root-project/root/pull/13464,1,['test'],['test']
Testability,Make it possible to run tests when configuring with -Dgnuinstall:BOOL=ON,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/130:24,test,tests,24,https://root.cern,https://github.com/root-project/root/pull/130,1,['test'],['tests']
Testability,"Make sure roottest tests ROOT being build, not ROOT in env",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7937:19,test,tests,19,https://root.cern,https://github.com/root-project/root/pull/7937,1,['test'],['tests']
Testability,Make tests fail if ASan finds an errors,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10005:5,test,tests,5,https://root.cern,https://github.com/root-project/root/pull/10005,1,['test'],['tests']
Testability,"Many RooFit tests are failing when built with AddressSanitizer:; * `gtest-roofit-roofit-test-testRooPoisson` (`stack-use-after-return`); * `gtest-roofit-roofitcore-test-testRooBinSamplingPdf` (`heap-use-after-free`); * `gtest-roofit-roofitcore-test-testNaNPacker` (`stack-use-after-scope`); * `gtest-roofit-roofitcore-test-testRooSimultaneous` (`heap-use-after-free`); * `test-stressroofit` (`heap-use-after-free`); * `test-stressroofit-interpreted` (`heap-use-after-free`); * `tutorial-roofit-rf107_plotstyles` (`heap-use-after-free`); * `tutorial-roofit-rf203_ranges` (`heap-use-after-free`); * `tutorial-roofit-rf204a_extendedLikelihood` (`heap-use-after-free`); * `tutorial-roofit-rf204b_extendedLikelihood_rangedFit` (`heap-use-after-free`); * `tutorial-roofit-rf212_plottingInRanges_blinding` (`heap-use-after-free`); * `tutorial-roofit-rf705_linearmorph` (`stack-use-after-return`); * `tutorial-roofit-rf107_plotstyles-py` (`heap-use-after-free`); * `tutorial-roofit-rf203_ranges-py` (`heap-use-after-free`); * `tutorial-roofit-rf204a_extendedLikelihood-py` (`heap-use-after-free`); * `tutorial-roofit-rf212_plottingInRanges_blinding-py` (`heap-use-after-free`); * `tutorial-roofit-rf705_linearmorph-py` (`stack-use-after-return`). The top of the stack trace (for the first test) is:; ```; READ of size 8 at 0x7ff2148150b8 thread T0; #0 0x7ff21d16bd79 in RooFit::UniqueId<RooArgSet>::operator unsigned long() const /home/jhahnfel/ROOT/src/roofit/roofitcore/inc/RooFit/UniqueId.h:52:38; #1 0x7ff21d16bd79 in RooAbsPdf::getValV(RooArgSet const*) const /home/jhahnfel/ROOT/src/roofit/roofitcore/src/RooAbsPdf.cxx:369:36; #2 0x37edc6 in RooAbsReal::getVal(RooArgSet const&) const /home/jhahnfel/ROOT/src/roofit/roofitcore/inc/RooAbsReal.h:119:29; #3 0x37edc6 in RooPoisson_Bare_Test::TestBody()::$_0::operator()(int, double, double) const /home/jhahnfel/ROOT/src/roofit/roofit/test/testRooPoisson.cxx:21:5; #4 0x37e8e9 in RooPoisson_Bare_Test::TestBody() /home/jhahnfel/ROOT/src/roofit/roofit/test/",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11186:12,test,tests,12,https://root.cern,https://github.com/root-project/root/issues/11186,7,['test'],"['test-stressroofit', 'test-stressroofit-interpreted', 'test-testNaNPacker', 'test-testRooBinSamplingPdf', 'test-testRooPoisson', 'test-testRooSimultaneous', 'tests']"
Testability,Many broken tests after recent Clang update on CentOS 8 Stream,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11601:12,test,tests,12,https://root.cern,https://github.com/root-project/root/issues/11601,1,['test'],['tests']
Testability,"Many new test directories have been added using add_subdirectory instead of using ROOT_ADD_TEST_SUBDIRECTORY. This causes problems, since when the directory is added using add_subdirectory the test binaries are treated as normal binaries and get installed when running make install, polluting the build. This pull request changes to using ROOT_ADD_TEST_SUBDIRECTORY where appropriate.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1515:9,test,test,9,https://root.cern,https://github.com/root-project/root/pull/1515,2,['test'],['test']
Testability,"Marking the `CloneData()` argument for createNLL explicitly as deprecated and noting in the docs that it is ignored. There is no reason to support it now. The new BatchMode doesn't clone the data anyway, the new test statistics with multiprocessing need to clone the data for each process anyway, and the old test statistics classes will be deprecated at some point. Closes the following Jira ticket:; https://sft.its.cern.ch/jira/browse/ROOT-10372",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12330:212,test,test,212,https://root.cern,https://github.com/root-project/root/pull/12330,2,['test'],['test']
Testability,"Math::DisplacementVector3D<ROOT::Math::Cartesian3D<Double32_t>,ROOT::Math::DefaultCoordinateSystemTag>& var0){return getArrZ(var0); ^~~~~~~; input_line_42:10:15: note: candidate function not viable: no known conversion from 'ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<Double32_t>,; ROOT::Math::DefaultCoordinateSystemTag>' (aka 'DisplacementVector3D<Cartesian3D<double>, ROOT::Math::DefaultCoordinateSystemTag>') to; 'const RVec<ROOT::Math::XYZTVector>' (aka 'const RVec<LorentzVector<PxPyPzE4D<double> > >') for 1st argument; RVec <double> getArrZ(const RVec<XYZTVector>& vec){; ^; input_line_104:2:142: error: no matching function for call to 'getArrZ'; ...= [](ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<Double32_t>,ROOT::Math::DefaultCoordinateSystemTag>& var0){return getArrZ(var0); ^~~~~~~; input_line_42:10:15: note: candidate function not viable: no known conversion from 'ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<Double32_t>,; ROOT::Math::DefaultCoordinateSystemTag>' (aka 'DisplacementVector3D<Cartesian3D<double>, ROOT::Math::DefaultCoordinateSystemTag>') to; 'const RVec<ROOT::Math::XYZTVector>' (aka 'const RVec<LorentzVector<PxPyPzE4D<double> > >') for 1st argument; RVec <double> getArrZ(const RVec<XYZTVector>& vec){; ^; Traceback (most recent call last):; File ""test.py"", line 39, in <module>; print(df.Define(""vertex_z"", ""getArrZ(vertex.vec)"").Histo1D(""vertex_z"").GetMean()); cppyy.gbl.std.runtime_error: Template method resolution failed:; ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Define(basic_string_view<char,char_traits<char> > name, basic_string_view<char,char_traits<char> > expression) =>; runtime_error: ; RDataFrame: An error occurred during just-in-time compilation. The lines above might indicate the cause of the crash; All RDF objects that have not run an event loop yet should be considered in an invalid state. ROOT::RDF::RInterface<ROOT::Detai",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6944:4059,test,test,4059,https://root.cern,https://github.com/root-project/root/issues/6944,1,['test'],['test']
Testability,"Measurements by @sciaba show that, at high thread counts, RDF multi-thread event loops on remote data suffer a scaling breakdown because of some throttling mechanisms in xrootd. Working around the throttling is possible, but it's unclear whether it's the right thing:tm: to do in all cases. Namely: ; - setting XRD_PARALLELEVTLOOP as in https://github.com/root-project/root/issues/7709; - faking different clients for each thread or each file, e.g. by using URLs like `root://client1@eoscms.cern.ch//eos/myfile.root`, works around connection multiplexing. The degradation is severe enough that I labeled it a bug (preliminary benchmarks showed a speed-up of more than one order of magnitude for high thread counts in the same application with/without the workarounds above).; Multi-process event loops such as those of distributed RDF should not be affected. A link to the exact findings can be added to this issue when they are public, for now this is a reminder that there is a problem to be looked at. EDIT:; For completeness, [this other PR](https://github.com/root-project/root/pull/11631) by @bendavid addresses orthogonal thread contention issues in remote file access with ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12621:626,benchmark,benchmarks,626,https://root.cern,https://github.com/root-project/root/issues/12621,1,['benchmark'],['benchmarks']
Testability,"MemberInfo.UsingDecls; [ OK ] TClingDataMemberInfo.UsingDecls (1 ms); [ RUN ] TClingDataMemberInfo.Lookup; [ OK ] TClingDataMemberInfo.Lookup (0 ms); [ RUN ] TClingDataMemberInfo.Offset; /builddir/build/BUILD/root-6.30.04/core/metacling/test/TClingDataMemberInfoTests.cxx:230: Failure; Value of: 1 == *(int*)(ROOT::GetROOT())->GetGlobal(""var1"")->GetAddress(); Actual: false; Expected: true; /builddir/build/BUILD/root-6.30.04/core/metacling/test/TClingDataMemberInfoTests.cxx:233: Failure; Value of: -2 == *(int*)(ROOT::GetROOT())->GetGlobal(""var2"")->GetAddress(); Actual: false; Expected: true; /builddir/build/BUILD/root-6.30.04/core/metacling/test/TClingDataMemberInfoTests.cxx:242: Failure; Expected equality of these values:; 3000; *(int*)(ROOT::GetROOT())->GetGlobal(""kError"")->GetAddress(); Which is: 0; [ FAILED ] TClingDataMemberInfo.Offset (7 ms); [ RUN ] TClingDataMemberInfo.issue8553; [ OK ] TClingDataMemberInfo.issue8553 (4 ms); [----------] 4 tests from TClingDataMemberInfo (14 ms total); [----------] 5 tests from TClingMethodInfo; [ RUN ] TClingMethodInfo.Prototype; [ OK ] TClingMethodInfo.Prototype (0 ms); [ RUN ] TClingMethodInfo.ROOT10789; [ OK ] TClingMethodInfo.ROOT10789 (2 ms); [ RUN ] TClingMethodInfo.DerivedCtorROOT11010; [ OK ] TClingMethodInfo.DerivedCtorROOT11010 (81 ms); [ RUN ] TClingMethodInfo.TemplateFun; [ OK ] TClingMethodInfo.TemplateFun (1 ms); [ RUN ] TClingMethodInfo.Ctors; [ OK ] TClingMethodInfo.Ctors (4 ms); [----------] 5 tests from TClingMethodInfo (90 ms total); [----------] Global test environment tear-down; [==========] 33 tests from 4 test suites ran. (7341 ms total); [ PASSED ] 32 tests.; [ FAILED ] 1 test, listed below:; [ FAILED ] TClingDataMemberInfo.Offset; 1 FAILED TEST; YOU HAVE 1 DISABLED TEST; CMake Error at /builddir/build/BUILD/root-6.30.04/cmake/modules/RootTestDriver.cmake:232 (message):; error code: 1; ```. ### Reproducer. Build root 6.30.02 for s390x; Run tests. ### ROOT version. root 6.30.04. ### Installation method. b",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14512:4179,test,tests,4179,https://root.cern,https://github.com/root-project/root/issues/14512,2,['test'],['tests']
Testability,"Merge the `RooIntegrator1D` class with its slight variations: `RooIntegrator2D`, `RooSegmentedIntegrator1D`, and `RooSegmentedIntegrator2D`. To reflect the fact that it can now be used for the n-dimenstional case, it is renamed to `RooRombergIntegrator`. This greatly reduces boilerplate code to implement the different numeric integration methods (more detail in the PR description).; It will also make porting the numerical integration with the Romberg method to the GPU much easier. The changes were validated with the following script:; ```c++; // runNumIntValidation.C. #include <RooFormulaVar.h>; #include <RooNumIntConfig.h>; #include <RooRealVar.h>. void testIntegrationMethod(int ndim, std::string const &label); {; RooRealVar x{""x"", ""x"", 0, 10};; RooRealVar y{""y"", ""y"", 0, 10};. std::string funcName = std::string(""func"") + label;; RooFormulaVar func{funcName.c_str(), ""x*std::sqrt(x) + y*std::sqrt(y) + x*y"", {x, y}};. std::cout << label << "":"" << std::endl;. RooNumIntConfig cfg(*func.getIntegratorConfig());. if (ndim == 2) {; cfg.method2D().setLabel(label.c_str());; }; if (ndim == 1) {; cfg.method1D().setLabel(label.c_str());; }. RooArgSet iset{x};; if (ndim > 1); iset.add(y);; std::unique_ptr<RooAbsReal> integ{func.createIntegral(iset, RooFit::NumIntConfig(cfg))};; double val = integ->getVal();; std::cout << std::setprecision(15) << val << std::endl;. std::cout << std::endl;; }. void runNumIntValidation(); {; RooHelpers::LocalChangeMsgLevel changeMsgLvl(RooFit::WARNING);. std::vector<std::string> methods1d{""RooIntegrator1D"", ""RooSegmentedIntegrator1D""};; std::vector<std::string> methods2d{""RooAdaptiveIntegratorND"", ""RooIntegrator2D"", ""RooSegmentedIntegrator2D""};. for (auto const &label : methods1d) {; testIntegrationMethod(1, label);; }. for (auto const &label : methods2d) {; testIntegrationMethod(2, label);; }; }; ```. The output with this PR is the same as with ROOT master:; ```; RooIntegrator1D:; 488.294986988088. RooSegmentedIntegrator1D:; 488.294680086881. RooAda",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13384:663,test,testIntegrationMethod,663,https://root.cern,https://github.com/root-project/root/pull/13384,1,['test'],['testIntegrationMethod']
Testability,Minor aesthetic fix: add a missing new-line after `.q` if quitting a ROOT session via the Ctrl+D keybinding (EOF). ## Checklist:; - [X] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #10135.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10143:136,test,tested,136,https://root.cern,https://github.com/root-project/root/pull/10143,1,['test'],['tested']
Testability,Minor fix: include <functional> in testTypeTraits.cxx,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/704:35,test,testTypeTraits,35,https://root.cern,https://github.com/root-project/root/pull/704,1,['test'],['testTypeTraits']
Testability,"Minuit migrad minimization: 1. the setup phase where the initial gradient is calculated and 2. the line search phases. To make the above possible, a few bugs had to be fixed:; - `RooAbsL` classes have `evaluatePartition` which allows you to specify the range of events and components over which to evaluate the likelihood. This had some bugs: the extended term and possible subsidiary components were added for each partition, leading to N duplicates (for N partitions). Commits 3db2e0dd36478813cfb534451f459348e8d90da9 and c2a8bc9df029f65ee575e140825af6c509860538.; - As a result of this fix, which reorders some terms in the sum, the LikelihoodGradientJob test was failing for a specific case due to increased floating point differences. We would like to add back in an option for retaining bit-wise exact same results in the future, but since the minimization still converges to the same value within the desired precision, for now we leave it like this, since the user can still pick the old ways if they prefer their exact old results. Commit b7f7fa7b705e2dfb767187dce3f6a32275f30d9e.; - `LikelihoodJob` had a bug where it didn't reset its `result` sum variable to zero before doing a new sum. Commits 042e1577d8c303d532016537e7467d6e2fbfcd9c and 44197a2a64f77b47587e5ee200d360c4514b8098. Finally, I made a mini optimization in `LikelihoodJob` by using `publish_from_master_to_workers` more efficiently, which reduces communication overhead slightly (and makes the code a bit cleaner). Also in commit 567b7988d56b6c1db6102d857b523fc2da607dbc. Note that although this is a bit of a big PR, the commits are factored out into the above list of changes, so I hope this makes it easy to review. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). Documentation not yet updated, I will check if this is necessary (I didn't think so, because it doesn't actually add much to the user interface, all the classes were already there, they just didn't work before like this).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10966:2059,test,tested,2059,https://root.cern,https://github.com/root-project/root/pull/10966,1,['test'],['tested']
Testability,Minuit2 logging,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6705:8,log,logging,8,https://root.cern,https://github.com/root-project/root/pull/6705,1,['log'],['logging']
Testability,Minuit2 remove unnecessary assert,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6762:27,assert,assert,27,https://root.cern,https://github.com/root-project/root/pull/6762,1,['assert'],['assert']
Testability,"Minuit2's MnHesse sometimes returns success, but the matrix contains only NaN values (this should be fixed, but that is a bigger issue not addressed here). In this case, IsAboveMaxEdm() returns false, since NaN < threshold is false, irregardless of the threshold. This leads to Minuit2 wrongly reporting that the minimum is ""valid"". This fix makes sure that IsAboveMaxEdm() returns true if the Edm value is NaN and the fit is reported as **invalid**, which is not perfect but better than the current confusing behavior. ## Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11159:541,test,tested,541,https://root.cern,https://github.com/root-project/root/pull/11159,1,['test'],['tested']
Testability,Minuit2Minimizer's GetVariableSettings method doesn't correctly report parameter limits.; This PR corrects its logic to report them correctly. In the old code then a variable with lower+upper limits only has the lower limit reported.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/455:111,log,logic,111,https://root.cern,https://github.com/root-project/root/pull/455,1,['log'],['logic']
Testability,Miscellaneous fixes for the build system and some tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7980:50,test,tests,50,https://root.cern,https://github.com/root-project/root/pull/7980,1,['test'],['tests']
Testability,Missing `test` installation folder in $ROOTSYS,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13548:9,test,test,9,https://root.cern,https://github.com/root-project/root/issues/13548,1,['test'],['test']
Testability,Missing dependency or clean up in TMVA test/tutorials,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16553:39,test,test,39,https://root.cern,https://github.com/root-project/root/issues/16553,1,['test'],['test']
Testability,Model; 470/1231 Test #447: tutorial-dataframe-df000_simple ..................................... Passed 2.85 sec; Start 450: tutorial-dataframe-df003_profiles; Start 451: tutorial-dataframe-df004_cutFlowReport; 472/1231 Test #450: tutorial-dataframe-df003_profiles ................................... Passed 5.31 sec; Start 452: tutorial-dataframe-df005_fillAnyObject; 473/1231 Test #449: tutorial-dataframe-df002_dataModel .................................. Passed 9.46 sec; Start 453: tutorial-dataframe-df006_ranges; 474/1231 Test #451: tutorial-dataframe-df004_cutFlowReport .............................. Passed 6.28 sec; Start 454: tutorial-dataframe-df007_snapshot; 475/1231 Test #448: tutorial-dataframe-df001_introduction ............................... Passed 13.89 sec; Start 455: tutorial-dataframe-df008_createDataSetFromScratch; 476/1231 Test #452: tutorial-dataframe-df005_fillAnyObject .............................. Passed 6.60 sec; Start 456: tutorial-dataframe-df009_FromScratchVSTTree; 477/1231 Test #453: tutorial-dataframe-df006_ranges ..................................... Passed 7.33 sec; Start 457: tutorial-dataframe-df010_trivialDataSource; 478/1231 Test #455: tutorial-dataframe-df008_createDataSetFromScratch ................... Passed 3.90 sec; Start 458: tutorial-dataframe-df012_DefinesAndFiltersAsStrings; 479/1231 Test #394: gtest-tree-dataframe-test-dataframe-concurrency ..................... Passed 44.21 sec; Start 459: tutorial-dataframe-df014_CSVDataSource; 480/1231 Test #456: tutorial-dataframe-df009_FromScratchVSTTree ......................... Passed 4.16 sec; Start 460: tutorial-dataframe-df015_LazyDataSource; 481/1231 Test #454: tutorial-dataframe-df007_snapshot ................................... Passed 9.31 sec; Start 461: tutorial-dataframe-df016_vecOps; 482/1231 Test #457: tutorial-dataframe-df010_trivialDataSource .......................... Passed 3.32 sec; Start 462: tutorial-dataframe-df017_vecOpsHEP; 483/1231 Test #458: tutorial-dataframe-,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10300:7818,Test,Test,7818,https://root.cern,https://github.com/root-project/root/pull/10300,1,['Test'],['Test']
Testability,"Models trained with RMVA are saved in .Rdata files.; For all of the models in ; MethodC50.cxx ; MethodRSNNS.cxx ; MethodRSVM.cxx ; MethodRXGB.cxx . name of the file is hardcoded e.g:. TString path = GetWeightFileDir() + ""/RXGBModel.RData"";. so when one books multiple variations of the same model with. factory->BookMethod(dataloader, TMVA::Types::kRXGB, ""kRXGB"", ""!V:NRounds=80:MaxDepth=2:Eta=1"");. TMVA keeps overwriting the same file and at the end reports the same results for all variants (for example, on all plots there is only one curve for different model versions). An easy fix which I tested to be working is to replace the lines like. TString path = GetWeightFileDir() + ""/RXGBModel.RData. with. TString path = GetWeightFileDir() + ""/"" + GetName() + "".RData"";. everywhere in *.cxx files above. This will use a file name based on the method title the same way it is done for the default TMVA methods as long as a user uses unique titles when booking using the line above. Another fix are changes to the example code in /test since the current example uses outdated code which fails to run. Also, that code failed to run because ""Probability"" option for RSVM model was not declared with DeclareOptionRef method inside the source file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1615:596,test,tested,596,https://root.cern,https://github.com/root-project/root/pull/1615,2,['test'],"['test', 'tested']"
Testability,"Modify the behaviour of SetBranchAddress so that proxy references can be passed as arguments from the Python side, more precisely in cases where the C++ implementation of the method expects the address of a pointer. For example:; ```python; v = ROOT.std.vector('int')(); t.SetBranchAddress(""my_vector_branch"", v); ```. Pending items:; - Check failure in Python 3; - Test other overloads; - Any other case to support? E.g. SetBranchAddress of individual elements in a struct?; - Use helper method `GetClass` that was factored out",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2476:366,Test,Test,366,https://root.cern,https://github.com/root-project/root/pull/2476,1,['Test'],['Test']
Testability,Modules test pr,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1340:8,test,test,8,https://root.cern,https://github.com/root-project/root/pull/1340,1,['test'],['test']
Testability,More details in the commit descriptions. These changes speed up the stressRooFit test suite by about 5 %.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10714:81,test,test,81,https://root.cern,https://github.com/root-project/root/pull/10714,1,['test'],['test']
Testability,"Most ROOT developers and users seem to agree that autonomously toggling features at configuration time based on the environment is not good. The feature set that ROOT is built with is then not deterministic. In past cases, this already resulted in accidentally missing test coverage because features were switched off after environment changes. That's why for the CI, we are always building with the `fail-on-missing-option`. However, this is not only a problem in testing, but everytime ROOT is built. That's why this commit suggests to make `fail-on-missing` the default, and warn the users of potential future deprecation of this flag in the release notes. An interesting point is also that the `fail-on-missing` code path in `SearchInstalledSoftware.cmake` is much simpler, which also helps to reduce the margin for error. See also:; https://github.com/root-project/root/issues/14188#issuecomment-1844965943",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14311:269,test,test,269,https://root.cern,https://github.com/root-project/root/pull/14311,2,['test'],"['test', 'testing']"
Testability,"Most people prefer Minuit2 nowadays, especially RooFit users, as some of; the more complicated fits don't converge with the old Minuit; implementation. Some RooFit tests are adapted to pass also when using Minuit2 as the minimizer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13661:164,test,tests,164,https://root.cern,https://github.com/root-project/root/pull/13661,1,['test'],['tests']
Testability,"Motivation: `std::pair` is used by one of the NanoAOD auxiliary trees (`ParameterSets`). The `std::pair` implementation largely follows `RRecordField`. There is a; question about whether `RField<std::pair<T1,T2>>::GetValueSize()` should; equal `sizeof(std::pair<T1,T2>)`, since currently the former does not add; trailing padding bytes, which are implementation defined. . E.g the following test fails on a 64-bit machine (but would pass on 32bit):. ```cpp; auto field = RField<std::pair<int64_t, float>>(""pairField"");; // sizeof check fails, RPairField does not take into account 4 trailing padding bytes; EXPECT_EQ((sizeof(std::pair<int64_t, float>)), field.GetValueSize());; ```; ```; Expected equality of these values:; (sizeof(std::pair<int64_t, float>)); Which is: 16; field.GetValueSize(); Which is: 12; ```. (EDIT: this has been fixed in the relevant commit and the PR should be ready for review and merge.)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8103:391,test,test,391,https://root.cern,https://github.com/root-project/root/pull/8103,1,['test'],['test']
Testability,Move globbing logic out of TChain::Add,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13160:14,log,logic,14,https://root.cern,https://github.com/root-project/root/pull/13160,1,['log'],['logic']
Testability,Move test file that was added to pyroot-experimental after it was ren…,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5799:5,test,test,5,https://root.cern,https://github.com/root-project/root/pull/5799,1,['test'],['test']
Testability,Move the TSeq iterators test to google test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/486:24,test,test,24,https://root.cern,https://github.com/root-project/root/pull/486,2,['test'],['test']
Testability,"Moved from https://github.com/root-project/root/pull/6385 as there are too many bot comments in that PR. cc @vgvassilev. When testing the LLVM 9 PR for conda-forge and had a few issues with external LLVM/Clang/Cling so I temporarily switched to the builtins. This works from the build directory but it then has issues once `make install` is ran. More details are in the comment copied at the end of this issue. I think this is an issue with root's install commands rather than the conda-recipe, but you can reproduce what I'm doing it docker by running:. ```bash; git clone https://github.com/chrisburr/root-feedstock.git; cd root-feedstock; git checkout llvm90-install-error; # Adjust CPU_COUNT as required; CPU_COUNT=192 ./build-locally.py --debug --output-id '*root_base*' linux_64_numpy1.16python3.8.____cpython; # When the container launches, look at the output and run the suggested command; # which will be of the form:; cd xxxxx && source xxxxx/build_env_setup.sh; source $RECIPE_DIR/build_root-base.sh; # Anything with ROOT will now fail, e.g.; root; # Rather than waiting to build again, you can roll back to before; # ""make install"" was ran by running; cd ../..; rm -rf $PWD/*; cp -rp $PWD.bak/* $PWD/; cd -; ```. >The command I'm running was simply `root` to get the interactive prompt. The full output of trying to run `1+2` is below:; >```log; >$ root -b -q -x -e 1+2; >input_line_1:1:2: fatal error: module 'libc' imported by AST file '/home/cburr/mambaforge/conda-bld/root_1609268594446/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placeh/lib/std.pcm' found in a different module map file (/home/cburr/mambaforge/conda-bld/root_1609268594446/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_plac",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7055:126,test,testing,126,https://root.cern,https://github.com/root-project/root/issues/7055,1,['test'],['testing']
Testability,Moved testing of `Snapshot` to its own gtest.; Added a test with many tasks per worker thread. This test is expected to fail until #1085 is merged.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1086:6,test,testing,6,https://root.cern,https://github.com/root-project/root/pull/1086,3,['test'],"['test', 'testing']"
Testability,"Moves from fixed page sizes on write to adaptive page sizes, following the original idea of @hahnjo . The new mechanism is explained in the tuning.md document in the PR. The PR also bumps the target compressed cluster size to 150MB. We may want to reduce that still. Evaluation of the new method is currently ongoing and the PR description will be amended with the results. EDIT: [Comparison](https://docs.google.com/spreadsheets/d/1maJhgvgVU8RkX7QXd7B3QiTBfKuYbTbvgkoHzBUOurY/edit?usp=sharing) of current write performance vs adaptive page sizes with 50MB, 100MB, 150MB target cluster size. To me it seems that there is not a good argument to go to 150 MB clusters. There may be an argument for 100 MB clusters. For the moment, I'll remove the commit that changes the default settings from the PR. An additional flavor, `adaptive / exp`, is included in the table to test the effect of flushing _foreign columns_. In the experimental mode, columns only flush themselves, which simplifies the `RWritePageMemoryManager` and avoids the upcall from the sink to the column. There is a small positive effect of foreign flushes on the file size in the nanoAOD sample. The effect is more visible for the number of pages. The memory consumption is slightly smaller without foreign column flushes. I'll see if I can construct an example that shows better the advantage of foreign column flushes (or not). As expected, the memory savings become visible for large EDMs (e.g., nanoAOD in this set of samples).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16311:867,test,test,867,https://root.cern,https://github.com/root-project/root/pull/16311,1,['test'],['test']
Testability,Muhammad Alhroob (using ChatGPT) demonstrated that this can considerably reduce the runtime cost for TRandom3. Marking the class `final` seems a good compromise between performance and backward incompatibility: the compiler will diagnose if people inherit from TRandom3. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/12547.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12964:336,test,tested,336,https://root.cern,https://github.com/root-project/root/pull/12964,1,['test'],['tested']
Testability,Must call TFile::SetCacheFileDir in order for CACHEREAD option to work. Makes the test work in offline mode with pre-cached file.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2246:82,test,test,82,https://root.cern,https://github.com/root-project/root/pull/2246,1,['test'],['test']
Testability,"My try to add some pythonization to `fitTo`. For reference see [#7217](https://github.com/root-project/root/issues/7217#issuecomment-785392761). Instead of passing, for example, ; ```; pdf.fitTo(data, ROOT.RooFit.Range(""sideband"")); ```; one could now also do ; ```; pdf.fitTo(data, Range=""sideband""); ```; etc. The code takes the kwargs and turns them into `RooFit` `CmdArg`s. Currently this requires the keyword to be equal to the `CmdArg` (cf. [here](https://root.cern.ch/doc/master/classRooAbsPdf.html#a8f802a3a93467d5b7b089e3ccaec0fa8)). ; However, the `__cast` function in `_rooabspdf.py` can be adapted such that other variants may be accepted, like e.g. `range` instead of `Range`. I am not sure about some details of the implementation:; - Should the `__cast` function be kept although it is not doing anything for the moment?; - Are the test appropriate?; - I tested the features locally with a different version.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7314:847,test,test,847,https://root.cern,https://github.com/root-project/root/pull/7314,2,['test'],"['test', 'tested']"
Testability,Necessary to make cling pickup the VFS from root which fixes all the merging; problems that we have in STL/libc. Original description:. Title: Use the VFS from the CompilerInvocation by default. The CompilerInstance should create its default VFS from its CompilerInvocation. Right now the; user has to manually create the VFS before creating the FileManager even though; `-ivfsoverlay file.yaml` was passed via the CompilerInvocation (which is exactly how we worked; around this issue in `FrontendAction.cpp` so far). This patch uses the invocation's VFS by default and also tests this behavior now from the; point of view of a program that uses the clang API.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/994:575,test,tests,575,https://root.cern,https://github.com/root-project/root/pull/994,1,['test'],['tests']
Testability,New functionality and fixes in experimental PyROOT and Cppyy to make `roottest-python-cpp-cpp` and `roottest-python-cpp-cpp11` pass. The changes in the tests themselves coming in another PR for roottest:; https://github.com/root-project/roottest/pull/326,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3832:152,test,tests,152,https://root.cern,https://github.com/root-project/root/pull/3832,1,['test'],['tests']
Testability,New google test for TH2Poly::Add (against ROOT-10280),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4252:11,test,test,11,https://root.cern,https://github.com/root-project/root/pull/4252,1,['test'],['test']
Testability,"New member functions of RooFit classes were introduced exclusively to PyROOT for better interoperability between RooFit and Numpy and Pandas:. 1. `RooDataSet.from_numpy`: Import a RooDataSet from a dictionary of numpy arrays (static method); 2. `RooDataSet.to_numpy`: Export a RooDataSet to a dictionary of numpy arrays; 3. `RooDataSet.from_pandas`: Import a RooDataSet from a Pandas dataframe (static method); 4. `RooDataSet.to_pandas`: Export a RooDataSet to a Pandas dataframe; 5. `RooRealVar.bins`: Get bin boundaries for a `RooRealVar` as a NumPy array. - Unit tests were implemented that make closure tests for weighted and unweighted datasets, and also test if the support for `RooAbsCategory` works; - Besides implementing these functions as pythonizations, this PR makes some changes to the `RooVectorDataStore` interface to enable this data import/export functionality; - Some changes were made to the RooFit pythonization infrastructure to support static methods in the Python mirror classes; - A new tutorial was written to showcase these features; - Release notes were added; - Windows tests are disabled for now because they fail for reasons that I don't understand (see draft PR #8784). This is part of the feature set presented at ACAT 2021 and promised for the next ROOT release. The equivalent import/export functions for `RooDataHist` will follow later.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9346:566,test,tests,566,https://root.cern,https://github.com/root-project/root/pull/9346,4,['test'],"['test', 'tests']"
Testability,"New version v2.7.0 of EnricoMi/publish-unit-test-result-action was just released ([change log](https://github.com/EnricoMi/publish-unit-test-result-action/releases/tag/v2.7.0)), it adds test times to case annotations:; https://github.com/EnricoMi/publish-unit-test-result-action/issues/431. Thanks @EnricoMi!",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12688:44,test,test-result-action,44,https://root.cern,https://github.com/root-project/root/pull/12688,5,"['log', 'test']","['log', 'test', 'test-result-action']"
Testability,"Newer CMake uses extraction timestamps for extracted files, instead of the timestamp as stored in the tar file, see; https://cmake.org/cmake/help/latest/policy/CMP0135.html#policy:CMP0135 This causes (massive) problems with configure/Makefile tar files, where the configure/Makefile dependencies (e.g. autoconf input files) might be newer than configure/Makefile, causing configure/Makefile to wanting to regenerate themselves because they are supposedly out of date.; This is https://gitlab.kitware.com/cmake/cmake/-/issues/24003. For anything with ""./configure"", force the timestamp as stored in the tar file. (cherry picked from commit e79ef2e76ea8e20c9e4edc28844b97f82122033f). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11752:747,test,tested,747,https://root.cern,https://github.com/root-project/root/pull/11752,1,['test'],['tested']
Testability,Ninja shows dependency issues in our build system; fix those first before switching to Ninja. This reverts commit fcfca4ccdaf97099a180e154c60bc3c621abfafe. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13591:221,test,tested,221,https://root.cern,https://github.com/root-project/root/pull/13591,1,['test'],['tested']
Testability,"No actual behavior change is expected. CollectionProxy's `next wrapper/implementation` for Bitset is seemingly currently unused (hence the problem was not seen), however it will be used start in the next set of PRs introducing more Writing StreamerInfoActions (hence the existing bitset test will serve as tests). Related roottest PR: https://github.com/root-project/roottest/pull/1189",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16495:287,test,test,287,https://root.cern,https://github.com/root-project/root/pull/16495,2,['test'],"['test', 'tests']"
Testability,"No globbing in html/, do not install tests, fix FindOracle.cmake to not change bindir",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3520:37,test,tests,37,https://root.cern,https://github.com/root-project/root/pull/3520,1,['test'],['tests']
Testability,No longer supported by (future) C standards. Currently just emits warnings (eg. MacOS 14). Currently not tested in CI.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15472:105,test,tested,105,https://root.cern,https://github.com/root-project/root/pull/15472,1,['test'],['tested']
Testability,"Not a major issue, but saving to a PDF can result in shifted text. Here is an example where the generated PDF has two printed texts offset from each other a little, while the in-ROOT graphics show the two texts well-aligned with each other. This is in ROOT 6.25/01 and appears to be independent of whether TTF are used or not . `; void test() {; gStyle->SetGridColor(1);; TH2I* h1 = new TH2I(""hh"",""test"",1,-1,1,1,-1,1);; TText* t1 = new TText();. TCanvas* c1 = new TCanvas(""c1"",""c1"",1000,1000);; h1->Draw();; gPad->SetGrid();; t1->SetTextColor(1);; t1->SetTextAlign(32);; t1->SetTextAngle(0);; t1->DrawText(-0.6,-0.6,""100"");; t1->SetTextColor(2);; t1->SetTextAlign(12);; t1->SetTextAngle(180);; t1->DrawText(-0.6,-0.6,""100"");; c1->SaveAs(""test1.pdf"");; }; `. -Gene",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12749:336,test,test,336,https://root.cern,https://github.com/root-project/root/issues/12749,2,['test'],['test']
Testability,Note the separate commits are intended to simplify bisecting if necessary as this is very fragile logic in ROOT.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3769:98,log,logic,98,https://root.cern,https://github.com/root-project/root/pull/3769,1,['log'],['logic']
Testability,Notice: I did not test Oracle functionality with 21.x,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8096:18,test,test,18,https://root.cern,https://github.com/root-project/root/pull/8096,1,['test'],['test']
Testability,Now RCanvas can correctly update/redraw ROOT6 objects - which is main test-case for RBrowser now,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4500:70,test,test-case,70,https://root.cern,https://github.com/root-project/root/pull/4500,1,['test'],['test-case']
Testability,"Now for each attribute three methods should be used:; 1. const Getter; 2. non-const Setter; 3. Access by reference. ```; const RAttrText &GetAttrText() const { return fAttrText; }; CustomAttrs &SetAttrText(const RAttrText &txt) { fAttrText = txt; return *this; }; RAttrText &AttrText() { return fAttrText; }; ```. Such set of methods allow to clearly separate const and non-const; access. And when setter is used, chain of methods can be called. Add several new tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4523:462,test,tests,462,https://root.cern,https://github.com/root-project/root/pull/4523,1,['test'],['tests']
Testability,"Now one can run root in different web modes:. root --web cef tutorials/v7/draw.cxx; root --web qt5 tutorials/v7/draw.cxx; root --web chromium tutorials/v7/draw.cxx. If in draw.cxx one replaces `canv->Show()` with `canvas->SaveAs(""draw.png"");`, one can test ; batch mode like:. root -b --web cef tutorials/v7/draw.cxx; root -b --web chromium tutorials/v7/draw.cxx. Now one can check Qt5 on Mac, using normal ROOT macros from tutorials/v7",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1690:252,test,test,252,https://root.cern,https://github.com/root-project/root/pull/1690,1,['test'],['test']
Testability,"Now that we're using a system-compatible version of NumPy on the CI images for these platforms, the TMVA tests should all pass again.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15439:105,test,tests,105,https://root.cern,https://github.com/root-project/root/pull/15439,1,['test'],['tests']
Testability,"Numba 0.59 with Python 3.12 was already released:; https://github.com/numba/numba/releases. With this change, we make sure the numba features in ROOT are still tested in environments with Python 3.12 (like for example Ubuntu 24.04 or Arch Linux as of today).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15367:160,test,tested,160,https://root.cern,https://github.com/root-project/root/pull/15367,1,['test'],['tested']
Testability,"OOT with `runtime_cxxmodules=ON` but passes when `runtime_cxxmodules=OFF`. Verified with 6.24/06 and 6.25/02. ### Expected behavior; <!--; A clear and concise description of what you expected to happen.; -->. Tests ""good,"" and ""bad"" should both pass. ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->. 1. Ensure you are using ROOT >= 6.24/00; 1. Ensure you are using CMake >= 3.22.0; 1. Execute the provided `runit` script to configure, build, and execute the tests. ### Setup; <!--; 1. ROOT version; 2. Operating system; 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself.; -->. 1. Problem verified on 6.24/06 and 6.25/02.; 2. SLF7.; 3. ROOT was compiled for UPS, configured using FNAL/art standard options. See attached ROOT build logs for details. ### Additional context; <!--; Add any other context about the problem here.; -->. The showstopper issue appears to be that when looking for information about `gallery::Event` (defined in an ""old-style"" dictionary rather than a C++ module), it mistakenly identifies the TMVA module as providing `Event` and never loads the dictionary containing the definition for `gallery::Event`. This issue does not occur if we look for the aliased `gallery::GalleryEvent` instead, nor if `runtime_cxxmodules=OFF`. In addition, when `runtime_cxxmodules=ON`—even for the ""good"" case—I get many messages of the form:; ```Console; Error in <TCling::RegisterRdictForLoadPCM>: Rdict '/scratch/greenc/products/root/v6_25_02/Linux64bit+3.10-2.17-e20-p399-debug/lib/libNet_rdict.pcm' is both in Module extension and in File system.; ```. This may be due to the presence of `dev=ON`, `asserts=ON`, `CMAKE_BUILD_TYPE=Debug`, `LLVM_BUILD_TYPE=Debug` or `LLVM_ENABLE_ASSERTIONS=ON`, but regardless: is thi",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9583:1545,log,logs,1545,https://root.cern,https://github.com/root-project/root/issues/9583,1,['log'],['logs']
Testability,OSX and homebrew in particular creates many symlinks for its libraries. We should resolve to the realpath before scanning for symbols. This patch should reduce the test failues on the experimental runtime_modules support on Mac. Patch by Alexander Penev(@alexander-penev)!,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4696:164,test,test,164,https://root.cern,https://github.com/root-project/root/pull/4696,1,['test'],['test']
Testability,"OT::Minuit2::FunctionGradient const&) const /home/jhahnfel/ROOT/src/math/minuit2/src/FumiliGradientCalculator.cxx:112:17; 505: #10 0x7fa7102ed3d9 in ROOT::Minuit2::FumiliBuilder::Minimum(ROOT::Minuit2::MnFcn const&, ROOT::Minuit2::GradientCalculator const&, ROOT::Minuit2::MinimumSeed const&, std::vector<ROOT::Minuit2::MinimumState, std::allocator<ROOT::Minuit2::MinimumState> >&, unsigned int, double) const /home/jhahnfel/ROOT/src/math/minuit2/src/FumiliBuilder.cxx:270:28; 505: #11 0x7fa7102ea9c7 in ROOT::Minuit2::FumiliBuilder::Minimum(ROOT::Minuit2::MnFcn const&, ROOT::Minuit2::GradientCalculator const&, ROOT::Minuit2::MinimumSeed const&, ROOT::Minuit2::MnStrategy const&, unsigned int, double) const /home/jhahnfel/ROOT/src/math/minuit2/src/FumiliBuilder.cxx:84:13; 505: #12 0x7fa7103dbf6f in ROOT::Minuit2::ModularFunctionMinimizer::Minimize(ROOT::Minuit2::MnFcn const&, ROOT::Minuit2::GradientCalculator const&, ROOT::Minuit2::MinimumSeed const&, ROOT::Minuit2::MnStrategy const&, unsigned int, double) const /home/jhahnfel/ROOT/src/math/minuit2/src/ModularFunctionMinimizer.cxx:202:14; 505: #13 0x7fa7103073dc in ROOT::Minuit2::FumiliMinimizer::Minimize(ROOT::Minuit2::FCNBase const&, ROOT::Minuit2::MnUserParameterState const&, ROOT::Minuit2::MnStrategy const&, unsigned int, double) const /home/jhahnfel/ROOT/src/math/minuit2/src/FumiliMinimizer.cxx:66:37; 505: #14 0x7fa71031cdcb in ROOT::Minuit2::Minuit2Minimizer::Minimize() /home/jhahnfel/ROOT/src/math/minuit2/src/Minuit2Minimizer.cxx:547:60. [...]. 505: Address 0x7fa73033ca68 is located in stack of thread T0 at offset 104 in frame; 505: #0 0x7fa710305a1f in ROOT::Minuit2::FumiliGradientCalculator::operator()(ROOT::Minuit2::MinimumParameters const&) const::$_0::operator()(std::ostream&) const /home/jhahnfel/ROOT/src/math/minuit2/src/FumiliGradientCalculator.cxx:94; ```. Note: There may be other problems in the test after this issue is fixed. Please check locally with an instrumented build that the test passes afterwards!",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10014:4710,test,test,4710,https://root.cern,https://github.com/root-project/root/issues/10014,2,['test'],['test']
Testability,"OT::TGenericClassInfo::CreateRuleSet (this=0x2b4bf40eb840 <ROOT::GenerateInitInstanceLocal(reco::btag::TrackData const*)::instance>, vect=..., ProcessReadRules=true) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/core/meta/src/TGenericClassInfo.cxx:319; #40 0x00002b4bd1cd26bd in ROOT::TGenericClassInfo::GetClass (this=0x2b4bf40eb840 <ROOT::GenerateInitInstanceLocal(reco::btag::TrackData const*)::instance>) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/core/meta/src/TGenericClassInfo.cxx:286; #41 0x00002b4bd1cac20b in TClass::GetClass (name=0xc24d320 ""reco::btag::TrackData"", load=true, silent=false, hint_pair_offset=0, hint_pair_size=0) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/core/meta/src/TClass.cxx:3039; #42 0x00002b4bd1cabf33 in TClass::GetClass (name=0xc24d320 ""reco::btag::TrackData"", load=true, silent=false) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/core/meta/src/TClass.cxx:2970; #43 0x00002b4bf68090a5 in ?? (); #44 0x0000000000000001 in ?? (); #45 0x00000001951b6c50 in ?? (); #46 0x00007ffd951b6840 in ?? (); #47 0x00007ffd951b6948 in ?? (); #48 0x00007ffd951b6910 in ?? (); #49 0x00002b4bd18990fd in WrapperCall (method=47604637311029, nargs=140727105054640, args_=0x7ffd951b6760, self=0x7ffd951b6750, result=0x7ffd951b6748) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:774; ===========================================================; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12771:26207,test,tests,26207,https://root.cern,https://github.com/root-project/root/issues/12771,4,['test'],"['testBuildDir', 'tests']"
Testability,"Obviously the `Link` pythonization should call the original `_Link`; function. Also, the constructor that takes a map of categories to PDFs should be able to; accept a Python dictionary directly. The RooFit Python tutorials are covering this constructor, acting as a; unit test. Closes https://github.com/root-project/root/issues/11496.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11500:273,test,test,273,https://root.cern,https://github.com/root-project/root/pull/11500,1,['test'],['test']
Testability,"Old test said:. > one of the reason of the failure is the fact that the first	; > clones array is empty!. https://github.com/root-project/roottest/blob/v6-24-02/root/treeformula/clones/runNestedClones.C and https://github.com/root-project/roottest/blob/v6-24-02/root/treeformula/clones/nestedclones.root are reproducing this (before it was removed, because roottest isn't a place to keep reproducers)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8744:4,test,test,4,https://root.cern,https://github.com/root-project/root/issues/8744,1,['test'],['test']
Testability,"On 64-bit latest Tumbleweed release (20210515) there is one roottest failing; 597 - roottest-root-meta-ROOT-7462-make. It seems the issue isn't new; c.f https://github.com/root-project/root/issues/6331 and https://github.com/nicknagi/root/commit/707152a3af656a985ec3a14ad385b534c7f30062. <details>; <summary>Test output</summary>. ```; Name of real 'variable' seen as: 'fContent.'; Info: ClassInfo is not valid; Warning in <TStreamerInfo::Build>: Outer: pair<string,Inner<int> > has no streamer or dictionary, data member ""fContent"" will not be saved; -string=not set; -value=-1; -Info: Decl for instantation is valid; In module 'std' imported from input_line_1:1:; /usr/bin/../lib64/gcc/x86_64-suse-linux/10/../../../../include/c++/10/bits/stl_pair.h:392:36: error: no member named 'value' in 'std::__and_<std::is_copy_assignable<std::__cxx11::basic_strin; g<char> >, std::is_copy_assignable<Inner<int> > >'; is_copy_assignable<_T2>>::value,; ~~~~~~~~~~~~~~~~~~~~~~~~~~^; ./instGood.cxx:10:33: note: in instantiation of template class 'std::pair<std::__cxx11::basic_string<char>, Inner<int> >' requested here; std::pair<string,Inner<int>> p;; ^; In module 'std' imported from input_line_1:1:; /usr/bin/../lib64/gcc/x86_64-suse-linux/10/../../../../include/c++/10/bits/stl_pair.h:403:36: error: no member named 'value' in 'std::__and_<std::is_move_assignable<std::__cxx11::basic_strin; g<char> >, std::is_move_assignable<Inner<int> > >'; is_move_assignable<_T2>>::value,; ~~~~~~~~~~~~~~~~~~~~~~~~~~^; Error in <TInterpreter::AutoParse>: Error parsing payload code for class Outer with content:. #line 1 ""instlib dictionary payload"". #define _BACKWARD_BACKWARD_WARNING_H; // Inline headers; #include ""instGood.cxx"". #undef _BACKWARD_BACKWARD_WARNING_H. input_line_55:2:34: error: member access into incomplete type 'Outer'; {Outer *o = (Outer*)0x2e6d470; o->Print();}; ^; instlib dictionary forward declarations' payload:5:65: note: forward declaration of 'Outer'; class __attribute__((annotate(""$cling",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8187:308,Test,Test,308,https://root.cern,https://github.com/root-project/root/issues/8187,1,['Test'],['Test']
Testability,"On Windows, the `TMVA_Higgs_Classification.C` tutorial gives the; following error:. ```; Processing C:/build/night/LABEL/windows10/SPEC/default/V/master/root/tutorials/tmva/TMVA_Higgs_Classification.C...; In file included from input_line_10:1:; C:\build\night\LABEL\windows10\SPEC\default\V\master\root\tutorials\tmva\TMVA_Higgs_Classification.C:322:27: error: no member named 'Python_Executable' in namespace 'TMVA'; gSystem->Exec(TMVA::Python_Executable() + "" make_higgs_model.py"");; ~~~~~~^; CMake Error at C:/build/night/LABEL/windows10/SPEC/default/V/master/build/RootTestDriver.cmake:227 (message):; error code: 1; ```. Using the same trick to get the Python executable name via; `gROOT->ProcessLine` that is also used in the other TMVA tutorials like; `TMVA_CNN_Classification.C` should fix the problem. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=windows10,SPEC=default,V=master/lastBuild/testReport/projectroot/runtutorials/tutorial_tmva_TMVA_Higgs_Classification/",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10379:948,test,testReport,948,https://root.cern,https://github.com/root-project/root/pull/10379,1,['test'],['testReport']
Testability,"On Windows, the type `ROOT::Experimental::ClusterSize_t` is resolved to the underlying type `ROOT::Experimental::RClusterSize`. `ROOT::Experimental::ClusterSize_t` is already in its canonical form and `typedef` resolution should not be attempted. TL;DR, if the type is resolved to `ROOT::Experimental::RClusterSize`, the logic in `RFieldBase::Create()` falls back to creating a `RClassField` instance, which is obviously not intended. This fixes the `ntuple_packing` test on Windows. ## Checklist:; - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12657:321,log,logic,321,https://root.cern,https://github.com/root-project/root/pull/12657,3,"['log', 'test']","['logic', 'test', 'tested']"
Testability,"On Windows, we currently cannot generate all modules due to crashes, so some dictionaries are generated with the option `NO_CXXMODULE`. This information needs to be propagated and taken into account when those dictionaries are, in turn, specified as dependencies. This re-implements the logic reverted in commit 2d7373d47e (see the message for details) and closes #12591.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12602:287,log,logic,287,https://root.cern,https://github.com/root-project/root/pull/12602,1,['log'],['logic']
Testability,"On apple M2 chips, LLVM assertion slow down the execution of the test suite (>2k tests) by some 20%. This PR aims to check whether this is the case on the Core i7 mac, too.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14650:24,assert,assertion,24,https://root.cern,https://github.com/root-project/root/pull/14650,3,"['assert', 'test']","['assertion', 'test', 'tests']"
Testability,On el9 with the following config (and package from uscms cvmfs for non-builtin dependencies):; ```; cxx17 asimage builtin_clang builtin_cling builtin_gl2ps builtin_gtest builtin_llvm builtin_lz4 ; builtin_lzma builtin_nlohmannjson builtin_openui5 builtin_xxhash builtin_zlib builtin_zstd clad; dataframe davix fitsio gdml http imt mysql opengl pyroot roofit root7 rpath runtime_cxxmodules; shared sqlite ssl tmva tmva-cpu tmva-pymva tpython spectrum vdt x11 xml xrootd; ```; In particular the following for compressions:; ```; builtin_lz4 builtin_lzma builtin_zlib builtin_zstd; ```; ```; cmslpc-el9-heavy01:src (master) pcanal$ uname -a; Linux cmslpc-el9-heavy01.fnal.gov 5.14.0-427.28.1.el9_4.x86_64 #1 SMP; PREEMPT_DYNAMIC Fri Aug 2 03:44:10 EDT 2024 x86_64 x86_64 x86_64; GNU/Linux; ```; The test 18 and 43 produced a PNG file that slight smaller that expected:; ```; Test 18: TGaxis 2.................................................. OK; PDF output................................................ OK; JPG output................................................ OK; PNG output......................................... 18 FAILED; Result = 15655; Reference = 16076; Error = 421 (was 350); C file result............................................. OK; ```; ```; Test 43: Divided pads and TLatex................................... OK; PDF output................................................ OK; JPG output................................................ OK; PNG output......................................... 43 FAILED; Result = 24855; Reference = 25421; Error = 566 (was 300); C file result............................................. OK; ```. Visual inspection of the png files showed no differences.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16492:796,test,test,796,https://root.cern,https://github.com/root-project/root/pull/16492,3,"['Test', 'test']","['Test', 'test']"
Testability,"On my system I get; ```; The following tests FAILED:; 1061 - tutorial-roofit-rf208_convolution-py (Failed); 1063 - tutorial-roofit-rf210_angularconv-py (Failed); 1064 - tutorial-roofit-rf211_paramconv-py (Failed); 1095 - tutorial-roofit-rf512_wsfactory_oper-py (Failed); ```. The reason seems to be that I'm building without FFTW, and while the macro versions of those tests are correctly vetoed:; https://github.com/root-project/root/blob/098dfcf94a3939597488fef9ee128b3d2e1e591f/tutorials/CMakeLists.txt#L191-L198; similar action is missing for the versions written in Python.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8245:39,test,tests,39,https://root.cern,https://github.com/root-project/root/issues/8245,2,['test'],['tests']
Testability,On some platforms first start of web browser takes longer than 15 s.; Make it now 70 s. Most often happens on `mac1015` platform like this one:. https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/147815/testReport/projectroot.gui.webdisplay/test/test_webgui_ping/,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10800:225,test,testReport,225,https://root.cern,https://github.com/root-project/root/pull/10800,2,['test'],"['test', 'testReport']"
Testability,On some platforms there is a HZ macro defined that makes the test fail. This pull request undefines the HZ macro if it is defined allowing the test to succeed.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/309:61,test,test,61,https://root.cern,https://github.com/root-project/root/pull/309,2,['test'],['test']
Testability,"On some platforms, there are streamer info warnings due to schema evolution without increments of the class version.; One should check if it's possible to make root recognise that it's the same class, or increment the class version. 1. Revert d91509e24fe00844bf102fd7d20c22decda8f3ff; 2. Fix all warnings in google tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9353:315,test,tests,315,https://root.cern,https://github.com/root-project/root/issues/9353,1,['test'],['tests']
Testability,"On some systems (CentOS 8) latest chrome not allows to run HTML files,; which are situated in /tmp directory. Only if such situation detected,; try to place HTML files into home directory and run headless chrome from such file. Fixes problem like this:; https://lcgapp-services.cern.ch/root-jenkins/job/root-nightly-master/LABEL=ROOT-ubuntu2004,SPEC=cxx17,V=master/2435/testReport/projectroot/runtutorials/tutorial_v7_line_cxx/",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5403:370,test,testReport,370,https://root.cern,https://github.com/root-project/root/pull/5403,1,['test'],['testReport']
Testability,On the MacOS same unix sockets cannot be opened twice for listening - ; when using with `netcat` or `socat`; Therefore start `nc -k -l -U $socketfile > $socketfile.log` to redirect; socket output into the plain file permanently. ; And then monitor this file content - line by line. Use `trap` command to cleanup all temporary files afterwards. And from ROOT side need to send `\n` to ensure new lines in produced log file. This changes required to be able use `rootssh` from the MacOS,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16819:164,log,log,164,https://root.cern,https://github.com/root-project/root/pull/16819,2,['log'],['log']
Testability,"On the Snap build of ROOT, the parameters were assumed to be int, double. Errors from build log, running Ubuntu 20.04 GCC9 C++17. ```; /root/parts/root/src/roofit/xroofit/src/xRooNode.cxx:5778:105: note: deduced conflicting types for parameter ‘const _Tp’ (‘int’ and ‘double’); 5778 | : (h->GetBinContent(1) + std::max(abs(h->GetBinContent(1) * 0.1), 50.)));; ```; ; This doesn't appear to occur in normal builds, but the guard code seems trivial enough to include and this may prevent compilation errors in other scenarios. ## Checklist:. - [Y] tested changes locally; - [Y] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11984:92,log,log,92,https://root.cern,https://github.com/root-project/root/pull/11984,2,"['log', 'test']","['log', 'tested']"
Testability,"On weak GPUs, tests might take very long when they all run in parallel.; This can be avoided with a resource lock.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16803:14,test,tests,14,https://root.cern,https://github.com/root-project/root/pull/16803,1,['test'],['tests']
Testability,"On x86_64, for zlib 101, 106 is ~30% - ~40% and for 109 it is 4 times better, making it very close to 106!; For aarch64 and aarch64+crc32 we have significant improvement ~ arriving close to lz4 rates. Replacement or PR #956 (tested on x86_64, Aarch64, Aarch64+crc32)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1527:225,test,tested,225,https://root.cern,https://github.com/root-project/root/pull/1527,1,['test'],['tested']
Testability,"Once tested with the previous push to master, this backports the fix for ROOT-9025: a memory leak when accessing a branch of a TTree in Python, that branch being of type array.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1555:5,test,tested,5,https://root.cern,https://github.com/root-project/root/pull/1555,1,['test'],['tested']
Testability,One extra newline was missing from the test. Follow-up of https://github.com/root-project/root/pull/13165,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13263:39,test,test,39,https://root.cern,https://github.com/root-project/root/pull/13263,1,['test'],['test']
Testability,"One of the RBatchGenerator possible implementations. From the eye test should be faster, but needs measuring",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15647:66,test,test,66,https://root.cern,https://github.com/root-project/root/pull/15647,2,['test'],['test']
Testability,Only add dataframe python tests if pyroot is ON,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5088:26,test,tests,26,https://root.cern,https://github.com/root-project/root/pull/5088,1,['test'],['tests']
Testability,Only builds using LLVM 9 source works right now (using `--with-binary-llvm` and `--with-llvm-tar` flags will cause a build error). A single test fails. Reproducer - `cat <path to cling source dir>/test/Lookup/template.C | cling --nologo -I<path to build dir>/tools/clang/include -Xclang -verify -fno-rtti 2>&1`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7760:140,test,test,140,https://root.cern,https://github.com/root-project/root/pull/7760,2,['test'],['test']
Testability,Only download test data if running the test that needs them,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/402:14,test,test,14,https://root.cern,https://github.com/root-project/root/pull/402,2,['test'],['test']
Testability,"Only register actual observables as value servers in the `RooEvaluatorWrapper` this avoids that spurious variables appear in user code, which were only meant to be used internally by the new CPU evaluation backend. To make the management of the parameter easier, impose the new reasonable constraint that when resetting the data via `setData()`, the new dataset needs to have the same structure as the old one. It was confirmed with an ATLAS model provided by Will that this commit is fixing the problem of spurious variables. A unit test is also implemented. FYI @will-cern",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15061:534,test,test,534,https://root.cern,https://github.com/root-project/root/pull/15061,1,['test'],['test']
Testability,"Original commit message:; ""; The current logic of pseudo-automatic modulemap discovery is a little fragile; as it mounts a virtual file named module.modulemap in the location where the; a give system library header is found (cuda.h, etc). However, if the libraries; are squashed into a single folder then we end up mounting a file over another; virtual file. This should be a hard error, however, on systems such as OSX some; libraries already come with modulemap files and we should just not mount our; predefined ones. This makes it very difficult to distinguish when to issue the; hard error. While this patch is not a solution for the general when the modulemaps are; automatically discovered (-fimplicit-module-maps), we can use the real file; stems in cases where we are called with -fno-implicit-module-maps. As a side effect this fixes the *non-recommended* squashing of library header; files into a single folder.; """,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5178:41,log,logic,41,https://root.cern,https://github.com/root-project/root/pull/5178,1,['log'],['logic']
Testability,"Original message of upstream commit by Richard Smith, https://github.com/llvm/llvm-project/commit/61c7a9140b:; ```; Commit to a primary definition for a class when we load its first; member. Previously, we wouldn't do this if the first member loaded is within a; definition that's added to a class via an update record, which happens; when template instantiation adds a class definition to a declaration; that was imported from an AST file. This would lead to classes having member functions whose getParent; returned a class declaration that wasn't the primary definition, which; in turn caused the vtable builder to build broken vtables. I don't yet have a reduced testcase for the wrong-code bug here, because; the setup required to get us into the broken state is very subtle, but; have confirmed that this fixes it.; ```. This fixes an assertion in `CodeGenFunction::EmitCXXDestructorCall()`:; ```; Assertion `ThisTy->getAsCXXRecordDecl() == DtorDecl->getParent() && ""Pointer/Object mixup""' failed.; ```; which was already seen during the upgrade to LLVM 13 in one tutorial on CentOS 8 and ""solved"" by commit ffe867985b (""Relax assertion on generating destructor call""). Due to the nature of this problem, the assertion failure went away with unrelated changes so I reverted the change in 2b997add1d. Now the problem comes back with the upgrade to LLVM 16 and also in master when trying to enable the RBatchGenerator tutorials in https://github.com/root-project/root/pull/13302, both on macOS this time. Luckily, the underlying cause was properly fixed in upstream LLVM just last week, so backport that commit. FYI @vepadulano",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13370:667,test,testcase,667,https://root.cern,https://github.com/root-project/root/pull/13370,5,"['Assert', 'assert', 'test']","['Assertion', 'assertion', 'testcase']"
Testability,"Original report, it also contains a test: https://root-forum.cern.ch/t/nan-values-in-one-column-break-histogram-of-another-column/37091 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9561:36,test,test,36,https://root.cern,https://github.com/root-project/root/issues/9561,1,['test'],['test']
Testability,Otherwise tests run concurrently can write on each other's feet.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6121:10,test,tests,10,https://root.cern,https://github.com/root-project/root/pull/6121,3,['test'],['tests']
Testability,"Otherwise they are emitted as internal and we get double-construction and -destruction on the same memory address due to the way we promote internal declarations in KeepLocalGVPass. According to upstream tests, the de-duplication doesn't work on Windows (yet), but I think this problem is severe enough to fix it on the other platforms sooner rather than later. Fixes #13429",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13614:204,test,tests,204,https://root.cern,https://github.com/root-project/root/pull/13614,1,['test'],['tests']
Testability,"Otherwise they are emitted as internal and we get double-construction and -destruction on the same memory address due to the way we promote internal declarations in KeepLocalGVPass. According to upstream tests, the de-duplication doesn't work on Windows (yet), but I think this problem is severe enough to fix it on the other platforms sooner rather than later. Fixes #13429, backport of https://github.com/root-project/root/pull/13614",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13795:204,test,tests,204,https://root.cern,https://github.com/root-project/root/pull/13795,1,['test'],['tests']
Testability,Out-of-bounds vector access in roofit test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15730:38,test,test,38,https://root.cern,https://github.com/root-project/root/issues/15730,1,['test'],['test']
Testability,"Output lines are in wrong order when running CTest on Windows x64, as shown below:; ```; 1397: -- BEGIN TEST OUTPUT --; 1397:; 1397: Processing C:/Users/bellenot/git/roottest/root/meta/runInterpreterValue.C...; 1397: WithDtor(): 1; 1397: Ident: IAmWithDtor!; 1397: Now deleting TInterpreterValue; 1397: ~WithDtor() 0; 1397: Now all WithDor should be gone; we have 0 left; 1397: About to return a WithDtor; 1397:; 1397: -- END TEST OUTPUT --; 1397: -- BEGIN OUTDIFF OUTPUT --; 1397: --- C:/Users/bellenot/git/roottest/root/meta/InterpreterValue.ref Tue Jul 13 10:19:19 2021; 1397: +++ C:/Users/bellenot/build/x64/release/roottest/root/meta/roottest-root-meta-runInterpreterValue-auto.log Mon Feb 21 15:23:36 2022; 1397: @@ -1,7 +1,7 @@; 1397:; 1397: WithDtor():1; 1397: -AbouttoreturnaWithDtor; 1397: Ident:IAmWithDtor!; 1397: NowdeletingTInterpreterValue; 1397: ~WithDtor()0; 1397: NowallWithDorshouldbegone;wehave0left; 1397: +AbouttoreturnaWithDtor; 1397:; 1397: -- END OUTDIFF OUTPUT --; 1397: CMake Error at C:/Users/bellenot/build/x64/release/RootTestDriver.cmake:254 (message):; 1397: compare 'stdout' error: 1; 1397:; 1397:; 1/1 Test #1397: roottest-root-meta-runInterpreterValue-auto ...***Failed 0.56 sec; ```; The output is correct, but the line order is wrong (i.e. `AbouttoreturnaWithDtor` is at the wrong position).; This is related to the issue #9809, and is due to the `-O1` optimization flag in Cling (`clingArgsStorage.push_back(""-O1"");` in `TCling.cxx`)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9944:104,TEST,TEST,104,https://root.cern,https://github.com/root-project/root/issues/9944,4,"['TEST', 'Test', 'log']","['TEST', 'Test', 'log']"
Testability,"Over the years we have a pathological issue with cling when it calls directly; compiler API. Most of the API assume they are called from code residing in a; text file. This code has valid source locations which can be used for; comparisons and things like point of instantiation for template instantiations. This means that whenever a clang API requires a valid source location, cling; should have an interface which gives a pseudo-valid, commonly-rooted unique; source location. We are bitten by this fact when preloading modules as if we have diagnostics; they cannot be ordered due to the fact that the compared decls from two; different modules do not have a common includer. This patch avoids using an API and relies on a textual form which does not have; this problem at the cost of synthesizing an extra string. This should fix the roottest python stl-stl test failure in the incremental builds.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4339:863,test,test,863,https://root.cern,https://github.com/root-project/root/pull/4339,1,['test'],['test']
Testability,PR #75 in roottest adds a test for this case.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/920:26,test,test,26,https://root.cern,https://github.com/root-project/root/pull/920,1,['test'],['test']
Testability,"PR https://github.com/root-project/root/pull/8944 was a good first step to get the RooWorkspace to JSON converter work for typical histfactory models, but this simple example code showcases that are are still significant bugs. These bugs need to be fixed in the release, such that we can promote the JSON converter as a new feature. ```C++; #include ""RooRealVar.h""; #include ""RooSimultaneous.h""; #include ""RooCategory.h""; #include ""RooFitHS3/RooJSONFactoryWSTool.h"". void mySim(); {; using namespace RooFit;. // Import keys and factory expressions files for the RooJSONFactoryWSTool.; std::string rootetcPath = gSystem->Getenv(""ROOTSYS"");; RooJSONFactoryWSTool::loadExportKeys(; rootetcPath + ""/etc/root/RooFitHS3_wsexportkeys.json"");; RooJSONFactoryWSTool::loadFactoryExpressions(; rootetcPath + ""/etc/root/RooFitHS3_wsfactoryexpressions.json""; );. // Create a test model: RooSimultaneous with Gaussian in one component, and; // product of two Gaussians in the other.; RooRealVar x(""x"", ""x"", -8, 8);; RooRealVar mean(""mean"", ""mean"", 0, -8, 8);; RooRealVar sigma(""sigma"", ""sigma"", 0.3, 0.1, 10);; RooGaussian g1(""g1"", ""g1"", x, mean, sigma);; RooGaussian g2(""g2"", ""g2"", x, mean, RooConst(0.3));; RooProdPdf model(""model"", ""model"", RooArgList{g1, g2});; RooGaussian model_ctl(""model_ctl"", ""model_ctl"", x, mean, sigma);; RooCategory sample(""sample"", ""sample"", {{""physics"", 0}, {""control"", 1}});; RooSimultaneous simPdf(""simPdf"", ""simultaneous pdf"", sample);; simPdf.addPdf(model, ""physics"");; simPdf.addPdf(model_ctl, ""control"");. // Export to JSON; {; RooWorkspace ws{""workspace""};; ws.import(simPdf);; RooJSONFactoryWSTool tool{ws};; tool.exportJSON(""simPdf.json"");; // Output can be pretty-printed with `python -m json.tool simPdf.json`; }. // Import JSON; RooWorkspace ws{""workspace""};; RooJSONFactoryWSTool tool{ws};; tool.importJSON(""simPdf.json"");; // At the moment this will fail, because the Gaussians in the product are; // missing in the JSON dump!; }; ```. The JSON dump will look like this:.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9372:862,test,test,862,https://root.cern,https://github.com/root-project/root/issues/9372,1,['test'],['test']
Testability,"PageSinkFile::RPageSinkFile(std::string_view, const ROOT::Experimental::RNTupleWriteOptions&)>: The RNTuple file format will change. Do not store real data with this version of RNTuple!; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RNTupleSerialize.cxx:1148 in static ROOT::Experimental::RResult<void> ROOT::Experimental::Internal::RNTupleSerializer::DeserializeHeaderV1(const void*, uint32_t, ROOT::Experimental::RNTupleDescriptorBuilder&)>: Pre-release format version: RC 1; [ FAILED ] RNTuple.StdTuple (317 ms); [ --- ]; [----------] 18 tests from RNTuple (7848 ms total); [----------] Global test environment tear-down; [==========] 18 tests from 1 test suite ran. (7848 ms total); [ PASSED ] 16 tests.; [ FAILED ] 2 tests, listed below:; [ FAILED ] RNTuple.StdPair; [ FAILED ] RNTuple.StdTuple; 2 FAILED TESTS. ~~~. gtest-tree-ntuple-v7-test-ntuple-extended fails with:; Fatal: fWritePage[otherIdx].IsEmpty() violated. ~~~; 520/1318 Test #454: gtest-tree-ntuple-v7-test-ntuple-extended ...........................***Failed 73.15 sec; Running main() from /builddir/build/BUILD/googletest-1.13.0/googletest/src/gtest_main.cc; Note: Google Test filter = -RCsvDS.Remote:RRawFile.Remote:RSqliteDS.Davix:TFile.ReadWithoutGlobalRegistrationWeb:TFile.ReadWithoutGlobalRegistrationNet; [==========] Running 4 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 4 tests from RNTuple; [ RUN ] RNTuple.RealWorld1; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RPageStorageFile.cxx:51 in ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(std::string_view, const ROOT::Experimental::RNTupleWriteOptions&)>: The RNTuple file format will change. Do not store real data with this version of RNTuple!; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RNTupleSerialize.cxx:1148 in static ROOT::Experimental::RResult<void> ROOT::Experimental::Internal:",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12427:3349,Test,Test,3349,https://root.cern,https://github.com/root-project/root/issues/12427,2,"['Test', 'test']","['Test', 'test-ntuple-extended']"
Testability,"Part of the RooFit code modernization, avoiding the use of unnecessary; wrapper classes and using a simple templated struct instead. The change in this PR is thoroughly tested by `stressRooFit`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10115:169,test,tested,169,https://root.cern,https://github.com/root-project/root/pull/10115,1,['test'],['tested']
Testability,"Part of the RooProdPdf modernization with the intention of eventually; deprecating the RooLinkedList. This change reduces the size of a RooProdPdf from 1600 to 1496 bytes. A manual schema evolution rule to test the reading of older RooProdPdfs; is implemented in the `LinkDef.h`. The schma evolution is tested by; the stressRooFit tests, which are reading some RooProdPdfs from the; reference files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8595:206,test,test,206,https://root.cern,https://github.com/root-project/root/pull/8595,3,['test'],"['test', 'tested', 'tests']"
Testability,Part of the plan of work 2024. The first two commits are final bugfixes to get all-green tests.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14742:89,test,tests,89,https://root.cern,https://github.com/root-project/root/pull/14742,1,['test'],['tests']
Testability,"Partial backport of, mostly to get the compatibility with the newest `sklearn`:. * https://github.com/root-project/root/pull/13634. With all the backports I made in the last days, the difference between the `tmva/` subdirectory in ROOT 6.28 and ROOT master is a relatively short list of commits, which might help us in tracking remaining problems (if there should be any):. ```txt; 5473c5c1b0 Fixed how VDT would be used.; 352c35395a [tmva][sofie] Add in RSofieReader specialization for single output; ead7963b5b [tmva][sofie] Add in RSofieReader support for multiple inputs and custom operators; 8b005a0659 [tmva][pymva] Do not disable tensorflow eager execution on MacoS; 7793c2038e [tmva][pymva] Use .h5 file instead of .keras; 4c9e26ca58 Log ONNX Operator implemented and the merge conflicts are resolved; d016febdb6 Update ROperator_Slice.hxx; 6b2bef2aab Fixed bugs in Slice SOFIE Operator, added slice gtests; f0cb4e9ceb [tmva][sofie-gnn] Tutorial for SOFIE-GNN; 3c17793839 [tmva][sofie-gnn] Fix on loading required packages (sonnet, graph_nets) and restricting numpy version; 2f2b9c62ad [tmva][sofie-gnn] Docstrings for SOFIE-GNN implementations and vectorization in node aggregate and GraphIndependent; 1968e25b63 [tmva][sofie-gnn] Make Edge_update in core using a single infer call for all edges; e4555770c7 [tmva][sofie-gnn] Add support for LayerNormalization and registering additional functions; b6ac312508 [tmva][sofie-gnn] Test LHCb toy model with SOFIE-GNN; 5455f90c3a [tmva][sofie-gnn] Python in-memory parse function and tests; d925d6a805 [tmva][sofie-gnn] Introducing RModel_GraphIndependent; 2df806aa32 [tmva][sofie-gnn] Introducing RFunctions for SOFIE-GNN; 1ca9b4c240 [tmva][sofie-gnn] Introducing SOFIE-GNN; 6cb0d0a957 [TMVA] Don't use the same file name (`TMVA.root`) everywhere (#13576); 4fe2f6ef61 [pymva] Refactor TestRModelParserPyTorch to use RSofieReader; e53fcb7b6a [tmva][sofie] Fix formattting in RModel; f93775a9dc [tmva][sofie] Add options to append generated C++ cod",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13783:742,Log,Log,742,https://root.cern,https://github.com/root-project/root/pull/13783,1,['Log'],['Log']
Testability,"PartialSpecializationDecl*, const clang::TemplateArgumentList*): Assertion `!SpecializedTemplate.is<SpecializedPartialSpecialization*>() && ""Already set to a class template partial specialization!""' failed. . Program received signal SIGABRT, Aborted. 0x00007ffff089a377 in raise () from /lib64/libc.so.6. . #1 0x00007ffff089ba68 in abort () from /lib64/libc.so.6. #2 0x00007ffff0893196 in __assert_fail_base () from /lib64/libc.so.6. #3 0x00007ffff0893242 in __assert_fail () from /lib64/libc.so.6. #4 0x00007fffe33d590f in clang::ClassTemplateSpecializationDecl::setInstantiationOf (this=0x7e8b810, PartialSpec=0x3b75340, TemplateArgs=0x7e91418). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/AST/DeclTemplate.h:1837. #5 0x00007fffe3d4911d in getPatternForClassTemplateSpecialization (S=..., PointOfInstantiation=..., ClassTemplateSpec=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2500. #6 0x00007fffe3d492c6 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2538. #7 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff53a0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #8 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #9 0x00007fffe3e0b5cb in clang::Sema::RequireCompleteType (t",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5462:2210,test,test-products,2210,https://root.cern,https://github.com/root-project/root/pull/5462,1,['test'],['test-products']
Testability,Passed 6.93 sec; Start 394: gtest-tree-dataframe-test-dataframe-concurrency; 417/1231 Test #379: gtest-tree-dataframe-test-dataframe-snapshot ........................ Passed 20.68 sec; Start 395: gtest-tree-dataframe-test-datasource-ntuple; 418/1231 Test #389: gtest-tree-dataframe-test-datasource-more ........................... Passed 7.48 sec; Start 396: gtest-tree-dataframe-test-datasource-sqlite; 419/1231 Test #395: gtest-tree-dataframe-test-datasource-ntuple ......................... Passed 1.80 sec; Start 397: pyunittests-dataframe-misc; 420/1231 Test #393: gtest-tree-dataframe-test-datasource-csv ............................ Passed 3.56 sec; Start 398: pyunittests-dataframe-histograms; 421/1231 Test #391: gtest-tree-dataframe-test-datasource-trivial ........................ Passed 6.48 sec; Start 399: pyunittests-dataframe-cache; 422/1231 Test #396: gtest-tree-dataframe-test-datasource-sqlite ......................... Passed 4.60 sec; Start 400: pyunittests-dataframe-merge-results; 423/1231 Test #397: pyunittests-dataframe-misc .......................................... Passed 3.66 sec; 424/1231 Test #398: pyunittests-dataframe-histograms .................................... Passed 3.40 sec; 444/1231 Test #400: pyunittests-dataframe-merge-results ................................. Passed 4.48 sec; 446/1231 Test #376: gtest-tree-dataframe-test-dataframe-simple .......................... Passed 38.57 sec; 447/1231 Test #399: pyunittests-dataframe-cache ......................................... Passed 10.50 sec; Start 447: tutorial-dataframe-df000_simple; Start 448: tutorial-dataframe-df001_introduction; Start 449: tutorial-dataframe-df002_dataModel; 470/1231 Test #447: tutorial-dataframe-df000_simple ..................................... Passed 2.85 sec; Start 450: tutorial-dataframe-df003_profiles; Start 451: tutorial-dataframe-df004_cutFlowReport; 472/1231 Test #450: tutorial-dataframe-df003_profiles ................................... Passed 5.31 sec; Start 4,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10300:6141,Test,Test,6141,https://root.cern,https://github.com/root-project/root/pull/10300,1,['Test'],['Test']
Testability,"Passes `test_snapshot.C` on my computer. However, I believe there are problems elsewhere when more than one cluster exists in the generated trees (i.e. when ForeachSlot actually has more than one slot). We need to make sure to test TDataFrame with trees with multiple slots in the future.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/562:227,test,test,227,https://root.cern,https://github.com/root-project/root/pull/562,1,['test'],['test']
Testability,Passes cling test and roottest.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/82:13,test,test,13,https://root.cern,https://github.com/root-project/root/pull/82,1,['test'],['test']
Testability,"Passing an out-of-range bin to `TH1::AddBinContent` leads to undefined behavior. # This Pull request:. ## Changes or fixes:; Comment added to documentation: `TH1::AddBinContent` do not check bin boundaries, passing an out-of-range bin leads to undefined behavior. The boundary check is not needed because this method should be used only internally, despite being public. ## Checklist:. - [ ] tested changes locally; - [x ] updated the docs (if necessary). This PR fixes # ; https://github.com/root-project/root/issues/14575",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14674:392,test,tested,392,https://root.cern,https://github.com/root-project/root/pull/14674,1,['test'],['tested']
Testability,"Patches for compile on Debian 12 with Python 3.11 libraries. # This Pull request:. ## Changes or fixes:; Permit to compile with Python's libraries 3.11, too; I've tested locally on Debian 12 (bookworm). ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13974:163,test,tested,163,https://root.cern,https://github.com/root-project/root/pull/13974,2,['test'],['tested']
Testability,"Per #12676, all storage backends should be able to populate the page zero from `kTypePageZero` locators. This pull request adds the missing pieces in the DAOS backend. ## Changes or fixes:; - Add the `RPageStorage::PrepareLoadCluster()` helper which can be used in the implementation of `LoadClusters()` in derived classes to prepare the read of page ranges. This function takes care of filling zero pages in the given `ROnDiskPageMap`.; - Add the missing pieces in `RPageSourceDaos`. ## Checklist:; - [x] tested changes locally. This PR fixes #12960.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13388:506,test,tested,506,https://root.cern,https://github.com/root-project/root/pull/13388,1,['test'],['tested']
Testability,"Per the last ROOT I/O meeting (where the correct use of iterators to array-backed collections, e.g. `std::vector<T>`): an iterator on an array-backed container is just a pointer; thus, it can be directly stored in `*xyz_arena`, saving one dereference (see [here](https://github.com/root-project/root/blob/master/io/io/inc/TVirtualCollectionIterators.h#L34)). This pull request, fixes both the implementation of `RCollectionIterableOnce` and the unit test. As a result, this PR should fix the use case in PR #12948. Given that this behavior was not documented at all, a follow-up PR will update the documentation for `TVirtualCollectionProxy`. ## Checklist:; - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13306:450,test,test,450,https://root.cern,https://github.com/root-project/root/pull/13306,2,['test'],"['test', 'tested']"
Testability,"Performance visualization in the RNtupleMetrics can allow the encapsulation of more complex type of metrics, which can allow the extraction of more usefull information, as oposssed to previous, simple, agreggate counter. This PR currently encapsulates 4 fully tested variants of histogram metrics and deploys it's most sophisticated variant onto the analysis of the volume of read requests when loading a page or cluster, by default. The following 4 variants are available, mainly referred to by their key usage:. - `RNTupleHistoInterval` : User-provided set of intervals.; - `RNTupleHistoCounterLog` : Histogram on a log scale.; - `RNTupleHistoActiveLearn` : Active learning phase to adjust to data distribution.; - `RNTupleFixedWidthHistogram` : Fixed width bins with constant time filling. Developed under a summer student project by Rui Reis and supervised by Javier Lopez Gomes and Jakob Blomer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8880:260,test,tested,260,https://root.cern,https://github.com/root-project/root/pull/8880,2,"['log', 'test']","['log', 'tested']"
Testability,"Please have a look at this simplification commit. . I am not 100% happy with the new names I have introduced. A similiar commit should be made for Classification as well. The EvaluateAllMethods functions is still a monster. As for the modification in the AdaBoost: that is the only untested change in this commit (please test the change). For easier reviewing, I have separated this pull in 4 commits. The clang-format just changes whitespace. The main commit is ""[TMVA] Simplify code for regression summary"". Why this commit?; ##############; Reason was the wrong order of results. There were not ordered by RMS. Looking at the code revealed the mess :-)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3694:321,test,test,321,https://root.cern,https://github.com/root-project/root/pull/3694,1,['test'],['test']
Testability,Please see commit messages for full explanation of the changes. Failing test: http://cdash.cern.ch/testDetails.php?test=24129853&build=345069,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/512:72,test,test,72,https://root.cern,https://github.com/root-project/root/pull/512,3,['test'],"['test', 'testDetails']"
Testability,"Please take a look. Although the tests pass, this is not supposed to be merged yet, as I have yet to understand why it's so slow when we pass a positive auto-flush value to snapshot the tree.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/595:33,test,tests,33,https://root.cern,https://github.com/root-project/root/pull/595,1,['test'],['tests']
Testability,Plus fix two leaks in tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4935:22,test,tests,22,https://root.cern,https://github.com/root-project/root/pull/4935,1,['test'],['tests']
Testability,Port a couple of tests and tutorials to Win64 (replace Long_t by Long…,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9239:17,test,tests,17,https://root.cern,https://github.com/root-project/root/pull/9239,1,['test'],['tests']
Testability,"Port from old PyROOT. Prevent issues seen here:; http://cdash.cern.ch/viewTest.php?onlyfailed&buildid=772393. where two JupyROOT tests that use ""%%cpp -a"" seem to step on; each other and generate the same library name. The change in behaviour also requires the corresponding; modifications to the doctests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4681:129,test,tests,129,https://root.cern,https://github.com/root-project/root/pull/4681,1,['test'],['tests']
Testability,"Ported from Cppyy patch by @wlav :`; https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/using_decls.diff. Adds an iterator for using declarations to `TClingMethodInfo`. it should make redundant the pythonisations that add the method overloads from a base class to the derived class that uses them:; https://github.com/root-project/root/blob/master/bindings/pyroot_experimental/PyROOT/src/PyzPythonHelpers.cxx#L113. Instead of relying on pythonisations for specific classes, this PR adds the necessary logic to have this functionality solved in a generic way in the bindings.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3640:516,log,logic,516,https://root.cern,https://github.com/root-project/root/pull/3640,1,['log'],['logic']
Testability,Possible fix to error and warning when using ROOT in pytest tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3595:60,test,tests,60,https://root.cern,https://github.com/root-project/root/pull/3595,1,['test'],['tests']
Testability,"Preloading ""GenVector"", ""MultiProc"", ""TreePlayer"", ""Hist"", ""TreePlayer"" and excluding TFormula test",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2010:95,test,test,95,https://root.cern,https://github.com/root-project/root/pull/2010,1,['test'],['test']
Testability,Prevent functions from crashing due to Python 3.12 assert,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13903:51,assert,assert,51,https://root.cern,https://github.com/root-project/root/pull/13903,1,['assert'],['assert']
Testability,"Prevent issues seen here:; http://cdash.cern.ch/viewTest.php?onlyfailed&buildid=772393. where two JupyROOT tests that use ""%%cpp -a"" seem to step on; each other and generate the same library name.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4666:107,test,tests,107,https://root.cern,https://github.com/root-project/root/pull/4666,1,['test'],['tests']
Testability,Prevent roottest_python_JupyROOT_cppcompleter_doctest from failing when OpenGL is disabled. . Suggestions for TProfile should be constant in all builds and they will serve the same purpose: test the tab completion mechanism.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1583:190,test,test,190,https://root.cern,https://github.com/root-project/root/pull/1583,1,['test'],['test']
Testability,"Prevent running xml tests when xml is disabled, suppressing the following test failures:; ```; TEST FAILURES:; 971:tutorial-xml-DOMParsePerson; 972:tutorial-xml-DOMRecursive; 973:tutorial-xml-SAXHandler; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13742:20,test,tests,20,https://root.cern,https://github.com/root-project/root/pull/13742,3,"['TEST', 'test']","['TEST', 'test', 'tests']"
Testability,"Prevent the following error when running the test with VS 2022 v17.9.0:; ```; 779: Processing C:/root-dev/git/master/tutorials/multicore/mt201_parallelHistoFill.C...; 779: [runStaticInitializersOnce]: Failed to materialize symbols: { (main, { ?_Swap@?$_Ptr_base@VTH1F@@@std@@IEAAXAEAV12@@Z,; [...]; 779: [runStaticInitializersOnce]: Failed to materialize symbols: { (main, { __orc_init_func.cling-module-9 }) }; 779: cling JIT session error: Failed to materialize symbols: { (main, { ?mt201_parallelHistoFill@@YAHXZ }) }; 779: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):; 779: error code: 1; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14783:45,test,test,45,https://root.cern,https://github.com/root-project/root/pull/14783,1,['test'],['test']
Testability,Prevent the parallel builds of tests from roottest to trigger rebuilding of rootcling_stage1.exe on Windows,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10451:31,test,tests,31,https://root.cern,https://github.com/root-project/root/pull/10451,1,['test'],['tests']
Testability,"Previous changes were tested with Qt 5.12, which is very new and very rare up to now.; Plus there are new functions, which were not exists before",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3795:22,test,tested,22,https://root.cern,https://github.com/root-project/root/pull/3795,1,['test'],['tested']
Testability,Previously it was reused it just 'happened' to have the expected size. (This applies only for the treatment of the TClass for an std::pair) and help fix the tests on 32 bits platforms. See test: https://github.com/root-project/roottest/pull/869. backport of https://github.com/root-project/root/pull/10416,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10475:157,test,tests,157,https://root.cern,https://github.com/root-project/root/pull/10475,4,['test'],"['test', 'tests']"
Testability,Previously it was reused it just 'happened' to have the expected size. (This applies only for the treatment of the `TClass` for an std::pair) and help fix the tests on 32 bits platforms. See test: https://github.com/root-project/roottest/pull/869,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10416:159,test,tests,159,https://root.cern,https://github.com/root-project/root/pull/10416,2,['test'],"['test', 'tests']"
Testability,Previously these build options where hidden behind a define and the; only way to test them is to manually add this to the CXX/CC flags; by hand. This patch turns this into a proper (but experimental) build setting; to better document the effort to have proper memory deallocation in; ROOT. It also fixes some of the broken code that was hidden behind; this define.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/794:81,test,test,81,https://root.cern,https://github.com/root-project/root/pull/794,1,['test'],['test']
Testability,"Previously, CMake would ignore the path on Mac nodes since Mac enables the flag macos_native which ignores paths under `/sw`, `/opt/local`, and `/usr/local` when calling `find_program`. Providing the path as a hint makes it find ccache. ; Tested on macitois13.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/428:239,Test,Tested,239,https://root.cern,https://github.com/root-project/root/pull/428,1,['Test'],['Tested']
Testability,"Previously, ROOT7 histograms used different local bin coordinate conventions for GetBinIndex and GetBin(From|Center|To), as discussed in https://sft.its.cern.ch/jira/browse/ROOT-10445 . This PR brings order to that chaos, following the resolution proposed in https://sft.its.cern.ch/jira/browse/ROOT-10446 , and adds some tests which assert that the two binning conventions will remain in sync in the future. While I was looking through the RHistImpl code, investigating further binning logic inconsistencies, I also spotted a few mistakes in the (currently unused) axis growth logic of GetBinIndex. So I corrected those along the way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4688:322,test,tests,322,https://root.cern,https://github.com/root-project/root/pull/4688,4,"['assert', 'log', 'test']","['assert', 'logic', 'tests']"
Testability,"Previously, it tried to use the clear method which does not exist. Corresponding unit tests are available on this branch:. https://github.com/bbockelm/roottest/tree/makeproject_bitset. @pcanal",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/61:86,test,tests,86,https://root.cern,https://github.com/root-project/root/pull/61,1,['test'],['tests']
Testability,"Previously, the Exec method of the FillTGraphHelper was ambiguous.; Currently, Exec properly handles container and non-container types.; Corresponding tests added.; Small adjustments of the variable names of Graph in RInterface.hxx. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9790:151,test,tests,151,https://root.cern,https://github.com/root-project/root/pull/9790,2,['test'],"['tested', 'tests']"
Testability,"Print info before inserting a value in the vector (therefore invalidating the iterator). This fixes a debug assertion failure ""can't dereference invalidated vector iterator"", as explained [in the standard](https://en.cppreference.com/w/cpp/container/vector/insert):; > Causes reallocation if the new size() is greater than the old capacity(). If the new size() is greater than capacity(), all iterators and references are invalidated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13328:108,assert,assertion,108,https://root.cern,https://github.com/root-project/root/pull/13328,1,['assert'],['assertion']
Testability,"Print warning if eve element does not have a dictionary. The commit 264404b also fixes the crash on streaming to client when element's dictionary is not existing and does not need non-REveElement remote method invocation. . The other 3 commits contains minor corrections to the problems located in testing of CMS event display (table view layout, debug prints, background color setting at connect time).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15092:298,test,testing,298,https://root.cern,https://github.com/root-project/root/pull/15092,1,['test'],['testing']
Testability,"Problem is visible only on CERN VM infrastructure and currently is under investigation, for 32b Docker container tests are passing.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3704:113,test,tests,113,https://root.cern,https://github.com/root-project/root/pull/3704,1,['test'],['tests']
Testability,"Problem: When creating the separate factory for per-fold output, the silent flag was given. This suppresses all TMVA logging output (touches global state). Solution: The silent flag is not passed to the per-fold factory automatically anymore.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4224:117,log,logging,117,https://root.cern,https://github.com/root-project/root/pull/4224,1,['log'],['logging']
Testability,"Profiles of RNTuple benchmarks (`iotools/cms, lhcb`) showed ~10-20% of; total runtime is due to allocations in `RPageSource::UnsealPage`. One typical RNTuple use case is an event loop over a fixed number of; columns. Columns are divided into pages with a fixed size, e.g. ```; Events | Column 0 | Column 1 | Column 2; -------+----------+----------+----------; 1-10 p0(40kB) p1(80kB) p2(80kB); 11-20 p3(40kB) p4(80kB) p5(80kB); ... ... ... ...; ```. Before this change, page allocations were performed every time a page; is flushed from a column:. ```; Events | Column 0 | Column 1 | Column 2; -------+----------+----------+----------; [alloc] [alloc] [alloc]; 1-10 p0(40kB) p1(80kB) p2(80kB); [dealloc] [dealloc] [dealloc]; [alloc] [alloc] [alloc]; 11-20 p3(40kB) p4(80kB) p5(80kB); ... ... ... ...; [dealloc] [dealloc] [dealloc]; ```. After this change, allocations are held onto and reused if possible; (up to a certain limit, which for now is hard-coded to be 32 pages). ```; Events | Column 0 | Column 1 | Column 2; -------+----------+----------+----------; [alloc] [alloc] [alloc]; 1-10 p0(40kB) p1(80kB) p2(80kB); 11-20 p3(40kB) p4(80kB) p5(80kB); ... ... ... ...; [dealloc] [dealloc] [dealloc]; ```. On SSD, the following serial results were obtained for the lhcb and cms; benchmarks (average of ten cold runs, 95% confidence interval):. ```; cms. Before: 105145us +- 1338us; After: 93669us +- 2077us; %diff: 10.9%. lhcb. Before: 2111977us +- 8371us; After: 1770781us +- 11185us; %diff: 16.2%; ```. Todo: ; - [x] Handle non-mappable case in `PopulatePage`; - [x] Investigate multi-threaded case. For multithreading, the current implementation just uses the existing `UnsealPage` mechanism and is unaffected by these changes -- deleted pages are returned to the cache which deallocates them properly. . I tried adding an internal mutex to `RPageCache` and bumping the number of cached pages to 128 on the benchmark machine but the runtime was about the same as the existing cache-less implementa",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8634:20,benchmark,benchmarks,20,https://root.cern,https://github.com/root-project/root/pull/8634,1,['benchmark'],['benchmarks']
Testability,"Projected fields are fields that use existing columns to create alternative type representations of the data. Projected fields are linked to alias columns. We currently support a limited set of projections, namely only for leafs, collections, and records with a matching structure. The first application is for importing leaf count branches. The branches are physically stored in untyped collections and the projected as RVecs to their original names. E.g., _collection0.jet_pt [`float`] --> jet_pt [`RVec<float>`]. On the descriptor level, the PR introduces the separation between physical and logical column IDs. A follow-up PR will take care of projecting a collection offset column to the the count leaf branch (e.g., `njets`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11973:595,log,logical,595,https://root.cern,https://github.com/root-project/root/pull/11973,1,['log'],['logical']
Testability,"Proof of concept of ROOT working with HPX as a backend. Includes one commit for the build system and another one that applies the necessary changes in the code, specifically to TThreadExecutor, and proposes an interface to specify the backend to run with when calling EnableImplicitMT. As suggested, making the choice of using hpx (instead of tbb) at runtime allows for an easier integration of the hpx library in ROOT. Drawbacks at this point: . - Can't choose the size of the threadpool. HPX always proceeds with as many as physical cores.; - Breaks all RDataFrame tests that run with a specified number of cores/slots.; - Requires `#include <hpx/hpx_main.hpp>` in the script with the main.; - Compilation becomes more cumbersome, ending up with something like: ``g++ myProgram.cpp `root-config --cflags --libs` `pkg-config --cflags --libs hpx_application` - DHPX_APPLICATION_NAME=myProgram -o myProgram.out``; - Performance (benchmarking at the moment). This PR requires HPX to be installed. If someone wants to give it a try, @amadio was so kind to build HPX into the Gentoo prefix.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5364:567,test,tests,567,https://root.cern,https://github.com/root-project/root/pull/5364,2,"['benchmark', 'test']","['benchmarking', 'tests']"
Testability,"Proposal to add a `requirements.txt` file and a corresponding test checking the dependencies also by the version requirement. The test throws an error for each dependency seperately due to the `SubTest`. A single exception looks like this:. ```; 3: pkg_resources.VersionConflict: (xgboost 0.80 (/home/stefan/.local/lib/python3.8/site-packages), Requirement.parse('xgboost>=0.81')); ```. @eguiraud @Axel-Naumann @etejedor @oshadura Ping :)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5408:62,test,test,62,https://root.cern,https://github.com/root-project/root/pull/5408,2,['test'],['test']
Testability,Proposal to unify logging in Minuit2,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6421:18,log,logging,18,https://root.cern,https://github.com/root-project/root/issues/6421,1,['log'],['logging']
Testability,"Provide cmake for tutorials/webgui/qt5web, test it on Windows [skip-ci]",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7811:43,test,test,43,https://root.cern,https://github.com/root-project/root/pull/7811,1,['test'],['test']
Testability,"Provides an implentation for the `DefinitionShadowed()` interpreter callback, that invalidates TCling cached information about a former declaration (that has been shadowed). This PR also includes a minor fix for test 'cling/test/CodeUnloading/DeclShadowing.C'.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4446:212,test,test,212,https://root.cern,https://github.com/root-project/root/pull/4446,2,['test'],['test']
Testability,"Public interface creating an interpreter transaction, needs locking. I attach a stack trace from a condor job running with the latest nightly build a Python script (AGC benchmark), which led to the change in this PR. I'm not sure how to create a simple reproducer/test yet unfortunately. [htcondor-worker-trace.txt](https://github.com/root-project/root/files/12642962/htcondor-worker-trace.txt)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13657:169,benchmark,benchmark,169,https://root.cern,https://github.com/root-project/root/pull/13657,2,"['benchmark', 'test']","['benchmark', 'test']"
Testability,"Pull request #11731 introduced internal support for per field post-read callbacks. This follow-up pull request registers a callback for each `#pragma read` rule on user-defined classes.; Currently, `#pragma read` rules referencing non-transient members as a `target` are intentionally disallowed -- a warning is logged in that case. Only target class version is checked, i.e. checksum is ignored. Raw read rules are not (and will likely not be) supported, as they take a `TBuffer &`. ## Changes or fixes:; - Introduce `RFieldBase::AddReadCallbacksFromIORules()`. This function registers a post-read callback for each of the given `ROOT::TSchemaRule`s.; - `RFieldBase::ConnectPageSource()`: cache C++ type version as stored in the RNTupleDescriptor. This information can be accessed via `GetOnDiskTypeVersion()`.; `RFieldBase::RegisterReadCallbacks()` is called as part of `ConnectPageSource()`. This function can be overridden; in particular, derived classes can make use of the on-disk type version to enable/disable read rules.; - RClassField: register a post-read callback for each of the custom I/O rules associated with the target class version.; - I/O customization rules referencing non-transient members are ignored for now. Such rules shall trigger a warning, e.g.; ```; 210: Warning in <[ROOT.NTuple] Warning /home/jalopezg/CERN/repos/root/tree/ntuple/v7/src/RField.cxx:931 in ; ROOT::Experimental::RClassField::RClassField(std::string_view, std::string_view, TClass*)::<lambda(const ; ROOT::TSchemaRule*)>>: ignoring I/O customization rule with non-transient member: a; ```. ## Checklist:; - [X] tested changes locally; - [X] updated the docs (if necessary). This PR partially takes care of #10019.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11944:312,log,logged,312,https://root.cern,https://github.com/root-project/root/pull/11944,2,"['log', 'test']","['logged', 'tested']"
Testability,PyTorch test/tutorials are (likely) using the same model files.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16719:8,test,test,8,https://root.cern,https://github.com/root-project/root/issues/16719,1,['test'],['test']
Testability,"Quality-of-life improvement for getting typed objects from a TDirectoryFile. Essentially `GetObject` but with return value. Allows; ```; root -l tutorials/tmva/data/toy_sigbkg_categ_offset.root; root [0] _file0->Get(""TreeS""); (TObject *) 0x7f86f7d078f0; root [1] _file0->Get<TTree>(""TreeS""); (TTree *) 0x7f86f7d078f0; root [2] _file0->Get<TBranch>(""TreeS""); (TBranch *) nullptr; root [3] _file0->Get<TObject>(""TreeS""); (TObject *) 0x7f86f7d078f0; ```. Question for tests, how should these be added? I found no examples for testing GetObject. For the documentation maybe the suggested usage should be changed to `MyClass * obj = file->Get<MyClass>(""key"");` to be explicit that a pointer is returned. It currently is `auto obj = file->Get<MyClass>(""key"");`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3501:465,test,tests,465,https://root.cern,https://github.com/root-project/root/pull/3501,2,['test'],"['testing', 'tests']"
Testability,Quiet mode is not working on DoFitSlices because options in `TH2::DoFitSlices` are changed to lowercase on line 811 of TH2.cxx and comparisons are case sensitive. This was not tested locally and (AFAIK) not reported elsewhere .,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9481:176,test,tested,176,https://root.cern,https://github.com/root-project/root/pull/9481,1,['test'],['tested']
Testability,RBox TCling tests vs ROOT7,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8620:12,test,tests,12,https://root.cern,https://github.com/root-project/root/pull/8620,1,['test'],['tests']
Testability,RBrowser - change logic with top and current element,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4635:18,log,logic,18,https://root.cern,https://github.com/root-project/root/pull/4635,1,['log'],['logic']
Testability,"RColumnElementEndian.UInt64; [ OK ] RColumnElementEndian.UInt64 (0 ms); [ RUN ] RColumnElementEndian.Int64Int32; /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/test/ntuple_endian.cxx:286: Failure; Expected equality of these values:; ints[0]; Which is: 1234605615003729920; 0x0000000011223344; Which is: 287454020; /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/test/ntuple_endian.cxx:287: Failure; Expected equality of these values:; ints[1]; Which is: 6153737371142586367; 0x0000000055667788; Which is: 1432778632; [ FAILED ] RColumnElementEndian.Int64Int32 (0 ms); [----------] 9 tests from RColumnElementEndian (13 ms total); [----------] Global test environment tear-down; [==========] 9 tests from 1 test suite ran. (13 ms total); [ PASSED ] 8 tests.; [ FAILED ] 1 test, listed below:; [ FAILED ] RColumnElementEndian.Int64Int32; 1 FAILED TEST; CMake Error at /builddir/build/BUILD/root-6.28.00/cmake/modules/RootTestDriver.cmake:232 (message):; error code: 1; ~~~. #### gtest-tree-ntuple-v7-test-ntuple-extended. This looks like an endian error:. $ printf '%x\n' 1677721600; 64000000. Header length shoud be 0x00000064 = 100; ~~~; 501/1272 Test #443: gtest-tree-ntuple-v7-test-ntuple-extended ...........................***Failed 81.93 sec; Running main() from /builddir/build/BUILD/googletest-1.13.0/googletest/src/gtest_main.cc; Note: Google Test filter = -RCsvDS.Remote:RRawFile.Remote:RSqliteDS.Davix:TFile.ReadWithoutGlobalRegistrationWeb:TFile.ReadWithoutGlobalRegistrationNet:RNTuple.TClassEBO; [==========] Running 4 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 4 tests from RNTuple; [ RUN ] RNTuple.RealWorld1; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RPageStorageFile.cxx:51 in ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(std::string_view, const ROOT::Experimental::RNTupleWriteOptions&)>: The RNTuple file format will change. Do not store real data with this version of RNTuple",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12426:5184,test,test-ntuple-extended,5184,https://root.cern,https://github.com/root-project/root/issues/12426,1,['test'],['test-ntuple-extended']
Testability,"RMiniFile only knows how to write into proper ROOT files. ; I went with the blacklist approach because there are a bunch of valid cases that are not just TFiles that we want to support (e.g. TMemFile, TBufferMergerFile, ...). ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16825:247,test,tested,247,https://root.cern,https://github.com/root-project/root/pull/16825,1,['test'],['tested']
Testability,"RNTupleWriter::CommitCluster (this=0xd7486120, commitClusterGroup=true) at /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RNTuple.cxx:370; #12 0xf7e2c674 in ROOT::Experimental::RNTupleWriter::~RNTupleWriter (this=0xd7486120, __in_chrg=<optimized out>) at /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RNTuple.cxx:327; #13 0x56560f58 in std::default_delete<ROOT::Experimental::RNTupleWriter>::operator() (__ptr=0xd7486120, this=<optimized out>) at /usr/include/c++/13/bits/unique_ptr.h:100; #14 0x565606cf in std::default_delete<ROOT::Experimental::RNTupleWriter>::operator() (__ptr=<optimized out>, this=<optimized out>) at /usr/include/c++/13/bits/unique_ptr.h:94; #15 std::unique_ptr<ROOT::Experimental::RNTupleWriter, std::default_delete<ROOT::Experimental::RNTupleWriter> >::~unique_ptr (this=0xffde8b50, __in_chrg=<optimized out>) at /usr/include/c++/13/bits/unique_ptr.h:405; #16 RNTuple_LargeFile2_Test::TestBody (this=0x57246b80) at /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/test/ntuple_extended.cxx:260; #17 0xf7d7159c in void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) [clone .constprop.0] () from /lib/libgtest.so.1.13.0; #18 0xf7d5cf46 in testing::Test::Run() () from /lib/libgtest.so.1.13.0; #19 0xf7d5d17a in testing::TestInfo::Run() () from /lib/libgtest.so.1.13.0; #20 0xf7d5d327 in testing::TestSuite::Run() () from /lib/libgtest.so.1.13.0; #21 0xf7d6a95b in testing::internal::UnitTestImpl::RunAllTests() () from /lib/libgtest.so.1.13.0; #22 0xf7d695cb in testing::UnitTest::Run() () from /lib/libgtest.so.1.13.0; #23 0xf7d1e137 in main () from /lib/libgtest_main.so.1.13.0; #24 0xf6837969 in __libc_start_call_main () from /lib/libc.so.6; #25 0xf6837a2c in __libc_start_main_impl () from /lib/libc.so.6; #26 0x56560e0b in _start (); CMake Error at /builddir/build/BUILD/root-6.28.00/cmake/modules/RootTestDriver.cmake:232 (message):; error code: Subprocess aborted; ~~~",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12427:11440,test,test,11440,https://root.cern,https://github.com/root-project/root/issues/12427,16,"['Test', 'test']","['Test', 'TestInfo', 'TestSuite', 'test', 'testing']"
Testability,"ROOT ""swallows"" `std::`, and we need to figure out how to handle the namespaces; `std::foo` vs `::foo`. Until we do that, avoid the issue by renaming the only; known ""clash"", using `std::__ROOT` as in several other backport cases. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9093:296,test,tested,296,https://root.cern,https://github.com/root-project/root/pull/9093,1,['test'],['tested']
Testability,ROOT Assertion During Dictionary Loading (2021.06.30.),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8578:5,Assert,Assertion,5,https://root.cern,https://github.com/root-project/root/issues/8578,1,['Assert'],['Assertion']
Testability,"ROOT can't autoparse classes inside namespaces with the rootmap; system (as the loading callbacks don't correctly land where; they are supposed to land with our injected namespaces). As this; turns out to be a feature of some kind, let's preload TMVA/TreePlayer; to fix all failing tests that are related to this feature/bug with; modules enabled.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1355:282,test,tests,282,https://root.cern,https://github.com/root-project/root/pull/1355,1,['test'],['tests']
Testability,"ROOT can't autoparse classes inside namespaces with the rootmap; system (as the loading callbacks don't correctly land where; they are supposed to land with our injected namespaces). As this; turns out to be a feature of some kind, let's preload; TMVA/TreePlayer/Graf to fix all failing tests that are related; to this feature/bug with modules enabled. This commit can be dropped if we solve on of those problems:. 1. figure out how to fix this bug in the rootmap-based loading; without regressin in performance. 2. replace the rootmap system with something else like attaching; all C++ modules on startup. Note that we already do something like this in normal ROOT by; including these packages into the PCH which also makes those; decls available in the normal clang lookup. This PR depends on #1394",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1396:287,test,tests,287,https://root.cern,https://github.com/root-project/root/pull/1396,1,['test'],['tests']
Testability,"ROOT introduced a build flag in 6.26.00 that allowed you to build it using the `ryml` library instead of nlohmann-json as the backend for the JSON IO. But that was not particularly great. The `ryml` backend code is at risk of rotting, because to try and test it one needs a special ROOT build. It would be much better to just build both backends if `ryml` is installed on the system, and have a mechanism for developers to try this other backend. This is implemented in this commit.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12221:254,test,test,254,https://root.cern,https://github.com/root-project/root/pull/12221,1,['test'],['test']
Testability,"ROOT's backport of std::index_sequence has O(logN) instantiation; depth, versus StaticSeq's O(N). This guarantees that very large; sequences can be instantiated without exceeding default template; instantiation depths (900 for gcc, 1024 for clang).; std::index_sequence has also noticeably faster compile times. To be merged after #1823",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1825:45,log,logN,45,https://root.cern,https://github.com/root-project/root/pull/1825,1,['log'],['logN']
Testability,ROOT-10254: FoldFileOutput breaks output log,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4224:41,log,log,41,https://root.cern,https://github.com/root-project/root/pull/4224,1,['log'],['log']
Testability,ROOT-9216: Move mathcore tests that depend on RooFit into test/roofit,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2016:25,test,tests,25,https://root.cern,https://github.com/root-project/root/pull/2016,2,['test'],"['test', 'tests']"
Testability,"ROOT/RVec.hxx(2062,16):. warning C4805: '==': unsafe mix of type 'const T' and type 'bool'; in operation [C:\Soft\root_64\math\vecops\test\vecops_rvec.vcxproj]; with; [; T=int; ]",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9812:134,test,test,134,https://root.cern,https://github.com/root-project/root/pull/9812,1,['test'],['test']
Testability,"ROOT/build-clang-asan/lib/libCore.so+0x44c1a6); 418: #3 0x7f4f0c80cb9f in THashList::Delete(char const*) (/home/jhahnfel/ROOT/build-clang-asan/lib/libCore.so+0x433b9f); 418: #4 0x7f4f0d640e30 in TDirectoryFile::Close(char const*) (/home/jhahnfel/ROOT/build-clang-asan/lib/libRIO.so+0x285e30); 418: #5 0x7f4f0d678f08 in TFile::Close(char const*) (/home/jhahnfel/ROOT/build-clang-asan/lib/libRIO.so+0x2bdf08); 418: #6 0x7f4f0d678050 in TFile::~TFile() (/home/jhahnfel/ROOT/build-clang-asan/lib/libRIO.so+0x2bd050); 418: #7 0x7f4f0d67898d in TFile::~TFile() (/home/jhahnfel/ROOT/build-clang-asan/lib/libRIO.so+0x2bd98d); 418: #8 0x52289f in BulkApiVariableTest_stdRead_Test::TestBody() (/home/jhahnfel/ROOT/build-clang-asan/tree/tree/test/testBulkApiVarLength+0x52289f). [...]. 418: previously allocated by thread T0 here:; 418: #0 0x51ea88 in operator new(unsigned long) (/home/jhahnfel/ROOT/build-clang-asan/tree/tree/test/testBulkApiVarLength+0x51ea88); 418: #1 0x7f4f0c71e9ce in TStorage::ObjectAlloc(unsigned long) (/home/jhahnfel/ROOT/build-clang-asan/lib/libCore.so+0x3459ce); 418: #2 0x7f4f10a65df5 in ROOT::new_TTree(void*) G__Tree.cxx; 418: #3 0x7f4f0c9094d2 in TClass::NewObject(TClass::ENewType, bool) const (/home/jhahnfel/ROOT/build-clang-asan/lib/libCore.so+0x5304d2); 418: #4 0x7f4f0c90943e in TClass::New(TClass::ENewType, bool) const (/home/jhahnfel/ROOT/build-clang-asan/lib/libCore.so+0x53043e); 418: #5 0x7f4f0d765626 in TKey::ReadObjectAny(TClass const*) (/home/jhahnfel/ROOT/build-clang-asan/lib/libRIO.so+0x3aa626); 418: #6 0x7f4f0d645eb0 in TDirectoryFile::GetObjectChecked(char const*, TClass const*) (/home/jhahnfel/ROOT/build-clang-asan/lib/libRIO.so+0x28aeb0); 418: #7 0x7f4f110c884e in TTreeReader::TTreeReader(char const*, TDirectory*, TEntryList*) (/home/jhahnfel/ROOT/build-clang-asan/lib/libTreePlayer.so+0x21284e); 418: #8 0x521e1d in BulkApiVariableTest_stdRead_Test::TestBody() (/home/jhahnfel/ROOT/build-clang-asan/tree/tree/test/testBulkApiVarLength+0x521e1d); ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10096:2920,Test,TestBody,2920,https://root.cern,https://github.com/root-project/root/issues/10096,3,"['Test', 'test']","['TestBody', 'test', 'testBulkApiVarLength']"
Testability,"ROOT::Experimental::Internal::RNTupleSerializer::DeserializeHeaderV1(const void*, uint32_t, ROOT::Experimental::RNTupleDescriptorBuilder&)>: Pre-release format version: RC 1; Error in <TFile::Init>: file test_large_file1.root has an incorrect header length (1677721600) or incorrect end of file length (-1760683648); /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/test/ntuple_extended.cxx:159: Failure; Value of: f; Actual: false; Expected: true; *** Break *** segmentation violation; [ --- ]; CMake Error at /builddir/build/BUILD/root-6.28.00/cmake/modules/RootTestDriver.cmake:232 (message):; error code: 139; ~~~. #### gtest-tree-ntuple-v7-test-ntuple-minifile. $ printf '%x\n' 1677721600; 64000000. Header length shoud be 0x00000064 = 100. Fatal: nread == nbytes violated; ~~~; 478/1272 Test #440: gtest-tree-ntuple-v7-test-ntuple-minifile ...........................***Failed 65.92 sec; Running main() from /builddir/build/BUILD/googletest-1.13.0/googletest/src/gtest_main.cc; Note: Google Test filter = -RCsvDS.Remote:RRawFile.Remote:RSqliteDS.Davix:TFile.ReadWithoutGlobalRegistrationWeb:TFile.ReadWithoutGlobalRegistrationNet:RNTuple.TClassEBO; [==========] Running 8 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 8 tests from MiniFile; [ RUN ] MiniFile.Raw; [ OK ] MiniFile.Raw (0 ms); [ RUN ] MiniFile.Stream; Error in <TFile::ReadBuffer>: error reading all requested bytes from file test_ntuple_minifile_stream.root, got 0 of 6816316; Error in <TFile::Init>: test_ntuple_minifile_stream.root failed to read the file header information at 1677721600 (size=6816316); /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/test/ntuple_minifile.cxx:84: Failure; Value of: file; Actual: false; Expected: true; [ FAILED ] MiniFile.Stream (191 ms); [ RUN ] MiniFile.Proper; Fatal: nread == nbytes violated at line 1083 of `/builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RMiniFile.cxx'; aborting; [ --- ]; CMake Error at /builddir/build/BUILD/root-6.28.0",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12426:8801,Test,Test,8801,https://root.cern,https://github.com/root-project/root/issues/12426,1,['Test'],['Test']
Testability,"ROOT::Experimental::RNTupleWriteOptions&)>: The RNTuple file format will change. Do not store real data with this version of RNTuple!; Error in <TFile::Init>: file test_ntuple_rdf.root has an incorrect header length (1677721600) or incorrect end of file length (-4176807177076801536); *** Break *** segmentation violation; [ --- ]; CMake Error at /builddir/build/BUILD/root-6.28.00/cmake/modules/RootTestDriver.cmake:232 (message):; error code: 139; ~~~; #### gtest-tree-ntuple-v7-test-ntuple-serialize. Endian issue: 256 = 0x0100, expected 0x0001 = 1.; ~~~; 457/1272 Test #432: gtest-tree-ntuple-v7-test-ntuple-serialize ..........................***Failed 0.24 sec; Running main() from /builddir/build/BUILD/googletest-1.13.0/googletest/src/gtest_main.cc; Note: Google Test filter = -RCsvDS.Remote:RRawFile.Remote:RSqliteDS.Davix:TFile.ReadWithoutGlobalRegistrationWeb:TFile.ReadWithoutGlobalRegistrationNet:RNTuple.TClassEBO; [==========] Running 14 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 14 tests from RNTuple; [ RUN ] RNTuple.SerializeInt; [ OK ] RNTuple.SerializeInt (0 ms); [ RUN ] RNTuple.SerializeString; [ OK ] RNTuple.SerializeString (0 ms); [ RUN ] RNTuple.SerializeColumnType; [ OK ] RNTuple.SerializeColumnType (0 ms); [ RUN ] RNTuple.SerializeFieldStructure; [ OK ] RNTuple.SerializeFieldStructure (0 ms); [ RUN ] RNTuple.SerializeEnvelope; /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/test/ntuple_serialize.cxx:121: Failure; Value of: err.what(); Expected: has substring ""CRC32""; Actual: 0x2aa065e7348 pointing to ""The RNTuple format is too new (version 256) (unchecked RResult access!)\nAt:\n static RResult<unsigned int> ROOT::Experimental::Internal::RNTupleSerializer::DeserializeEnvelope(const void*, uint32_t, uint32_t&) [/builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RNTupleSerialize.cxx:629]\n static RResult<unsigned int> ROOT::Experimental::Internal::RNTupleSerializer::DeserializeEnvelope(const void*, uint32_t) [/b",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12426:11736,test,test,11736,https://root.cern,https://github.com/root-project/root/issues/12426,1,['test'],['test']
Testability,"ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]; C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]; C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]; C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]; C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,1): error C3861: 'GetTopLevelBranchNames': identifier not found [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]; C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,18): error C2737: 'treeBranchNames': const object must be initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]; C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1130,1): error C3536: 'treeBranchNames': cannot be used before it is initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]; C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1132,1): error C2661: 'std::vector<std::string,std::allocator<std::string>>::insert': no overloaded function takes 1 arguments [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]; Done Building Project ""C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj"" (default targets) -- FAILED.; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11153:2746,test,test,2746,https://root.cern,https://github.com/root-project/root/pull/11153,5,['test'],['test']
Testability,"ROOT::TestSupport checks info/warning/error messages during unit tests. Previously, it would generate one global failure irrespective of how many messages have been received, or how many were missing. It would then list all messages that are being checked, irrespective of whether they were received or not. Now, each missing or unexpected message generates a dedicated test failure. ## Before; ```; ../../../root-src/core/testsupport/src/TestSupport.cxx:93: Failure; Failed; ROOT::TestSupport::CheckDiagsRAII: Unexpected diagnostic messages received.; ../../../root-src/core/testsupport/src/TestSupport.cxx:96: Failure; Failed; ROOT::TestSupport::CheckDiagsRAII: Diagnostic message missing.; -------------------------; Pre-registered messages:; kError	1x received	(required, subMatch)	'prepareMethod' msg='Can't compile function TFormula'; kError	0x received	(required, fullMatch)	'TFormula::InputFormulaIntoCling' msg='Error compiling formula expression in Cling____'; kError	1x received	(required, subMatch)	'TFormula::ProcessFormula' msg=' is invalid'; kError	1x received	(required, subMatch)	'TFormula::ProcessFormula' msg='has not been matched in the formula expression'; kError	2x received	(required, subMatch)	'cling' msg='undeclared identifier'; Unexpected messages received:; kError	'TFormula::InputFormulaIntoCling' msg='Error compiling formula expression in Cling'; -------------------------; ```. ## After; ```; ../../../root-src/core/testsupport/src/TestSupport.cxx:96: Failure; Failed; ROOT::TestSupport::CheckDiagsRAII: Expected diagnostic message missing:; severity: kError; received: 0 times (required, fullMatch)	; origin: ""TFormula::InputFormulaIntoCling""; message: Error compiling formula expression in Cling____. ../../../root-src/core/testsupport/src/TestSupport.cxx:101: Failure; Failed; ROOT::TestSupport::CheckDiagsRAII: Unexpected diagnostic message:; severity: kError; origin: ""TFormula::InputFormulaIntoCling""; message: Error compiling formula expression in Cling; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12469:6,Test,TestSupport,6,https://root.cern,https://github.com/root-project/root/pull/12469,15,"['Test', 'test']","['TestSupport', 'test', 'tests', 'testsupport']"
Testability,ROOT_ADD_PYUNITTEST and ROOT_ADD_GTEST are naming test inconsitently.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16647:50,test,test,50,https://root.cern,https://github.com/root-project/root/issues/16647,1,['test'],['test']
Testability,"RPageSinkBuf calls `ReservePage()` as part of a `CommitPageImpl()` call. This memory is release in `CommitClusterImpl()` by calling `ReleasePage()` accordingly. However, if `CommitClusterImpl()` is never invoked (e.g., because the 'small cluster' check failed in RNTuple.cxx:336), this memory is leaked.; This patch fixes that by making `RColumnBuf` adopt the pages. `DrainBufferedPages()` gives back the ownership to the caller, who is then responsible of calling `ReleasePage()`. FWIW, this bug was found while hunting the issues seen in the CI for the `RNTuple.SmallClusters` test. ## Checklist:; - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13022:579,test,test,579,https://root.cern,https://github.com/root-project/root/pull/13022,2,['test'],"['test', 'tested']"
Testability,"RPageSinkFile::RPageSinkFile(std::string_view, const ROOT::Experimental::RNTupleWriteOptions&)>: The RNTuple file format will change. Do not store real data with this version of RNTuple!; Error in <TFile::Init>: file test_ntuple_rdf.root has an incorrect header length (1677721600) or incorrect end of file length (-4176807177076801536); *** Break *** segmentation violation; [ --- ]; CMake Error at /builddir/build/BUILD/root-6.28.00/cmake/modules/RootTestDriver.cmake:232 (message):; error code: 139; ~~~; #### gtest-tree-ntuple-v7-test-ntuple-serialize. Endian issue: 256 = 0x0100, expected 0x0001 = 1.; ~~~; 457/1272 Test #432: gtest-tree-ntuple-v7-test-ntuple-serialize ..........................***Failed 0.24 sec; Running main() from /builddir/build/BUILD/googletest-1.13.0/googletest/src/gtest_main.cc; Note: Google Test filter = -RCsvDS.Remote:RRawFile.Remote:RSqliteDS.Davix:TFile.ReadWithoutGlobalRegistrationWeb:TFile.ReadWithoutGlobalRegistrationNet:RNTuple.TClassEBO; [==========] Running 14 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 14 tests from RNTuple; [ RUN ] RNTuple.SerializeInt; [ OK ] RNTuple.SerializeInt (0 ms); [ RUN ] RNTuple.SerializeString; [ OK ] RNTuple.SerializeString (0 ms); [ RUN ] RNTuple.SerializeColumnType; [ OK ] RNTuple.SerializeColumnType (0 ms); [ RUN ] RNTuple.SerializeFieldStructure; [ OK ] RNTuple.SerializeFieldStructure (0 ms); [ RUN ] RNTuple.SerializeEnvelope; /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/test/ntuple_serialize.cxx:121: Failure; Value of: err.what(); Expected: has substring ""CRC32""; Actual: 0x2aa065e7348 pointing to ""The RNTuple format is too new (version 256) (unchecked RResult access!)\nAt:\n static RResult<unsigned int> ROOT::Experimental::Internal::RNTupleSerializer::DeserializeEnvelope(const void*, uint32_t, uint32_t&) [/builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RNTupleSerialize.cxx:629]\n static RResult<unsigned int> ROOT::Experimental::Internal::RNTupleSerial",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12426:11690,test,tests,11690,https://root.cern,https://github.com/root-project/root/issues/12426,2,['test'],"['test', 'tests']"
Testability,"RPageSource and all its children are using exclusively the static version of RNTupleDecompressor::Unzip, so there's no need to keep it there for now. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16037:171,test,tested,171,https://root.cern,https://github.com/root-project/root/pull/16037,1,['test'],['tested']
Testability,"RResult<void> ROOT::Experimental::Internal::RNTupleSerializer::DeserializeHeaderV1(const void*, uint32_t, ROOT::Experimental::RNTupleDescriptorBuilder&)>: Pre-release format version: RC 1; [ FAILED ] RNTuple.StdTuple (317 ms); [ --- ]; [----------] 18 tests from RNTuple (7848 ms total); [----------] Global test environment tear-down; [==========] 18 tests from 1 test suite ran. (7848 ms total); [ PASSED ] 16 tests.; [ FAILED ] 2 tests, listed below:; [ FAILED ] RNTuple.StdPair; [ FAILED ] RNTuple.StdTuple; 2 FAILED TESTS. ~~~. gtest-tree-ntuple-v7-test-ntuple-extended fails with:; Fatal: fWritePage[otherIdx].IsEmpty() violated. ~~~; 520/1318 Test #454: gtest-tree-ntuple-v7-test-ntuple-extended ...........................***Failed 73.15 sec; Running main() from /builddir/build/BUILD/googletest-1.13.0/googletest/src/gtest_main.cc; Note: Google Test filter = -RCsvDS.Remote:RRawFile.Remote:RSqliteDS.Davix:TFile.ReadWithoutGlobalRegistrationWeb:TFile.ReadWithoutGlobalRegistrationNet; [==========] Running 4 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 4 tests from RNTuple; [ RUN ] RNTuple.RealWorld1; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RPageStorageFile.cxx:51 in ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(std::string_view, const ROOT::Experimental::RNTupleWriteOptions&)>: The RNTuple file format will change. Do not store real data with this version of RNTuple!; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RNTupleSerialize.cxx:1148 in static ROOT::Experimental::RResult<void> ROOT::Experimental::Internal::RNTupleSerializer::DeserializeHeaderV1(const void*, uint32_t, ROOT::Experimental::RNTupleDescriptorBuilder&)>: Pre-release format version: RC 1; [ OK ] RNTuple.RealWorld1 (9118 ms); [ RUN ] RNTuple.RandomAccess; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RPageStorageFile.cxx:51 in ROO",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12427:3716,test,tests,3716,https://root.cern,https://github.com/root-project/root/issues/12427,2,['test'],"['test', 'tests']"
Testability,"RSION]; [--notebook NOTEBOOK]; [--web WEB]; [--web=<browser> WEB=<BROWSER>]; [dir]; [file:data.root]; [file1.C...fileN.C]. OPTIONS:; -b Run in batch mode without graphics; -x Exit on exceptions; -e Execute the command passed between single quotes; -n Do not execute logon and logoff macros as specified in .rootrc; -t Enable thread-safety and implicit multi-threading (IMT); -q Exit after processing command line macro files; -l Do not show the ROOT banner; -a Show the ROOT splash screen; -config print ./configure options; -h, -?, --help Show summary of options; --version Show the ROOT version; --notebook Execute ROOT notebook; --web Display graphics in a default web browser; --web=<browser> Display graphics in specified web browser; [dir] if dir is a valid directory cd to it before executing; [file:data.root] Open the ROOT file data.root; [file1.C...fileN.C] Execute the the ROOT macro file1.C ... fileN.C; Exit status: 1; ```. ### Setup; This issue is reproducible on my laptop (x86_64 NixOS), LXPLUS7 LXPLUS8 and LXPLUS9. My laptop:; ```; $ root --version; ROOT Version: 6.26/08; Built for linuxx8664gcc on Jan 01 1980, 00:00:00; From @; $ nix-info -m; - system: `""x86_64-linux""`; - host os: `Linux 5.15.80, NixOS, 22.11 (Raccoon), 22.11.20221130.596a8e8`; - multi-user?: `yes`; - sandbox: `yes`; - version: `nix-env (Nix) 2.11.0`; - nixpkgs: `/nix/store/qwgw2b19ga8dr7c6wfpd6p87bdjyrnha-source`; ```. LXPLUS7:; ```; ROOT Version: 6.24/08; Built for linuxx8664gcc on Sep 29 2022, 13:04:57; From tags/v6-24-08@v6-24-08; ```. LXPLUS8:; ```; ROOT Version: 6.26/10; Built for linuxx8664gcc on Nov 16 2022, 10:42:54; From tags/v6-26-10@v6-26-10; ```. LXPLUS9:; ```; ROOT Version: 6.26/10; Built for linuxx8664gcc on Nov 16 2022, 10:42:54; From tags/v6-26-10@v6-26-10; ```. <!--; 1. ROOT version; 2. Operating system; 4. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself.; -->. ### Additional context; <!--; Add any other context about the problem here.; -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11977:2613,sandbox,sandbox,2613,https://root.cern,https://github.com/root-project/root/issues/11977,1,['sandbox'],['sandbox']
Testability,"RStringView.hxx:26,; from /srv/root/src/root/core/foundation/inc/TClassEdit.h:65,; from /srv/root/src/root/core/foundation/src/RConversionRuleParser.cxx:18:; /srv/root/src/root/core/foundation/inc/ROOT/libcpp_string_view.h: In member function ‘constexpr std::experimental::__ROOT::basic_string_view<_CharT, _Traits>::size_type std::experimental::__ROOT::basic_string_view<_CharT, _Traits>::max_size() const’:; /srv/root/src/root/core/foundation/inc/ROOT/libcpp_string_view.h:275:63: error: ‘numeric_limits’ is not a member of ‘std’; 275 | size_type max_size() const _NOEXCEPT { return (_VSTD::numeric_limits<size_type>::max)(); }; | ^~~~~~~~~~~~~~; /srv/root/src/root/core/foundation/inc/ROOT/libcpp_string_view.h:275:87: error: expected primary-expression before ‘>’ token; 275 | size_type max_size() const _NOEXCEPT { return (_VSTD::numeric_limits<size_type>::max)(); }; | ^; /srv/root/src/root/core/foundation/inc/ROOT/libcpp_string_view.h:275:90: error: ‘::max’ has not been declared; did you mean ‘std::max’?; 275 | size_type max_size() const _NOEXCEPT { return (_VSTD::numeric_limits<size_type>::max)(); }; | ^~~; | std::max; In file included from /usr/lib/gcc/x86_64-pc-linux-gnu/11.1.0/include/g++-v11/algorithm:62,; from /srv/root/src/root/core/foundation/res/TSchemaRuleProcessor.h:15,; from /srv/root/src/root/core/foundation/src/RConversionRuleParser.cxx:17:; /usr/lib/gcc/x86_64-pc-linux-gnu/11.1.0/include/g++-v11/bits/stl_algo.h:3467:5: note: ‘std::max’ declared here; 3467 | max(initializer_list<_Tp> __l, _Compare __comp); | ^~~; make[2]: *** [core/foundation/CMakeFiles/Foundation_Stage1.dir/build.make:90: core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RConversionRuleParser.cxx.o] Error 1; make[1]: *** [CMakeFiles/Makefile2:23284: core/foundation/CMakeFiles/Foundation_Stage1.dir/all] Error 2; make: *** [Makefile:156: all] Error 2; ```. The master branch seems to go past this point, so probably something needs to be backported (I tested with the tip of the 6.24 branch).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8281:2552,test,tested,2552,https://root.cern,https://github.com/root-project/root/issues/8281,1,['test'],['tested']
Testability,"RY_PATH=/home/sftnight/swunsch/build/lib:/home/sftnight/swunsch/python/lib:"" ""-DCOPY=/home/sftnight/swunsch/root/roottest/python/basic/ArgumentPassingCompiled.C^/home/sftnight/swunsch/root/roottest/python/basic/ReturnValues.C^/home/sftnight/swunsch/root/roottest/python/basic/SimpleClass.C^/home/sftnight/swunsch/root/roottest/python/basic/ArgumentPassingInterpreted.C"" ""-P"" ""/home/sftnight/swunsch/build/RootTestDriver.cmake""; 1312: Environment variables: ; 1312: ROOT_HIST=0; 1312: Test timeout computed to be: 300; 1312: Info in <TUnixSystem::ACLiC>: creating shared library /home/sftnight/swunsch/build/roottest/python/basic/./ArgumentPassingCompiled_C.so; 1312: ; 1312: -- TEST COMMAND -- ; 1312: cd /home/sftnight/swunsch/build/roottest/python/basic; 1312: /usr/bin/timeout -s USR2 270s /home/sftnight/swunsch/python/bin/python3 /home/sftnight/swunsch/root/roottest/python/basic/PyROOT_basictests.py --fixcling; 1312: -- BEGIN TEST OUTPUT --; 1312: INTERNALERROR> Traceback (most recent call last):; 1312: INTERNALERROR> File ""/home/sftnight/swunsch/root/roottest/python/pytest/_pytest/main.py"", line 77, in wrap_session; 1312: INTERNALERROR> config.do_configure(); 1312: INTERNALERROR> File ""/home/sftnight/swunsch/root/roottest/python/pytest/_pytest/config.py"", line 608, in do_configure; 1312: INTERNALERROR> self.hook.pytest_configure(config=self); 1312: INTERNALERROR> File ""/home/sftnight/swunsch/root/roottest/python/pytest/_pytest/core.py"", line 377, in __call__; 1312: INTERNALERROR> return self._docall(methods, kwargs); 1312: INTERNALERROR> File ""/home/sftnight/swunsch/root/roottest/python/pytest/_pytest/core.py"", line 388, in _docall; 1312: INTERNALERROR> res = mc.execute(); 1312: INTERNALERROR> File ""/home/sftnight/swunsch/root/roottest/python/pytest/_pytest/core.py"", line 289, in execute; 1312: INTERNALERROR> res = method(**kwargs); 1312: INTERNALERROR> File ""/home/sftnight/swunsch/root/roottest/python/pytest/_pytest/assertion/__init__.py"", line 56, in pytest_configure; 1",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6597:2328,TEST,TEST,2328,https://root.cern,https://github.com/root-project/root/issues/6597,1,['TEST'],['TEST']
Testability,"Ran every time by the CI and testing TThread, without reducing coverage. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [v] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13762:29,test,testing,29,https://root.cern,https://github.com/root-project/root/pull/13762,2,['test'],"['tested', 'testing']"
Testability,"Rather than non-const reference. This has two advantages:; - passing fundamental types by value is slightly more efficient; - passing by const value helps avoiding typos such as `if (x = 0)`. This fixes ROOT-11009. Reviewers, what do you think? Can this break any currently valid code?. - [x] add test",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6526:297,test,test,297,https://root.cern,https://github.com/root-project/root/pull/6526,1,['test'],['test']
Testability,"Rather than reading from the file the value of kIsOnHeap, preserve the value that was calculated at object creation time (i.e. in the current execution). For example, for an embedded object (inside an object created on the heap or stack), the bit always need to be off (i.e. it can never be explicitly deleted). Fix #15964 ?. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15968:391,test,tested,391,https://root.cern,https://github.com/root-project/root/pull/15968,1,['test'],['tested']
Testability,"Rather than reading from the file the value of kIsOnHeap, preserve the value that was calculated at object creation time (i.e. in the current execution). For example, for an embedded object (inside an object created on the heap or stack), the bit always need to be off (i.e. it can never be explicitly deleted). Fix #15964 ?; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15969:391,test,tested,391,https://root.cern,https://github.com/root-project/root/pull/15969,1,['test'],['tested']
Testability,Re-add tmva DNN tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4522:16,test,tests,16,https://root.cern,https://github.com/root-project/root/pull/4522,1,['test'],['tests']
Testability,Re-add tmva test directories were removed by mistake in a previous commit,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4522:12,test,test,12,https://root.cern,https://github.com/root-project/root/pull/4522,1,['test'],['test']
Testability,Re-enable `testRooFuncWrapper` with recent versions of Visual Studio,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15026:11,test,testRooFuncWrapper,11,https://root.cern,https://github.com/root-project/root/pull/15026,1,['test'],['testRooFuncWrapper']
Testability,"Re-enable many tests on Windows, depending on the c++ standard (14/17) and the architecture (x86/x64)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10406:15,test,tests,15,https://root.cern,https://github.com/root-project/root/pull/10406,1,['test'],['tests']
Testability,Re-enable several tests and tutorials on Windows,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10406:18,test,tests,18,https://root.cern,https://github.com/root-project/root/pull/10406,1,['test'],['tests']
Testability,Re-enable the `SmallClusters` test.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14312:30,test,test,30,https://root.cern,https://github.com/root-project/root/pull/14312,1,['test'],['test']
Testability,"Reached milestone in improving the thread scaling in Chris’ threaded-io benchmark. As it stands, the runtime is 30% better in single thread (this is because the writing part of ROOT I/O is exercised by this example but it has not yet been as optimized as the reading part of the ROOT I/O library) and is 5.4 times better with 32 threads. Previously the 32 threads case was running at only 20% of the theoretical maximum (i.e. assuming complete linearity), it now runs at 70% (“fun” fact before the improvement that gave most of the boost to the scalar performance, that number had reached 80%).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6559:72,benchmark,benchmark,72,https://root.cern,https://github.com/root-project/root/pull/6559,1,['benchmark'],['benchmark']
Testability,Read only one column from the remote file to speed up the test.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16307:58,test,test,58,https://root.cern,https://github.com/root-project/root/pull/16307,1,['test'],['test']
Testability,"ReadWithoutGlobalRegistrationWeb:TFile.ReadWithoutGlobalRegistrationNet:RNTuple.TClassEBO; [==========] Running 8 tests from 2 test suites.; [----------] Global test environment set-up.; [----------] 2 tests from RooProdPdf; [ RUN ] RooProdPdf.TestGetPartIntList; /builddir/build/BUILD/root-6.28.00/roofit/roofitcore/test/testRooProdPdf.cxx:146: Failure; Expected equality of these values:; hashRooProduct(prod); Which is: 3649468902; 2448666198; [ FAILED ] RooProdPdf.TestGetPartIntList (229 ms); [ RUN ] RooProdPdf.TestDepsAreCond; Warning in <RooNaNPacker>: Fast recovery from undefined function values only implemented for little-endian machines. If necessary, request an extension of functionality on https://root.cern; [ OK ] RooProdPdf.TestDepsAreCond (644 ms); [ DISABLED ] RooProdPdf.DISABLED_ChangeServerNormSetForProdPdfInAddPdf; [----------] 2 tests from RooProdPdf (873 ms total); [----------] 6 tests from RooProdPdf/TestProdPdf; [ RUN ] RooProdPdf/TestProdPdf.CachingOpt/opt0off; [ OK ] RooProdPdf/TestProdPdf.CachingOpt/opt0off (17 ms); [ RUN ] RooProdPdf/TestProdPdf.CachingOpt/opt0cpu; [ OK ] RooProdPdf/TestProdPdf.CachingOpt/opt0cpu (9 ms); [ RUN ] RooProdPdf/TestProdPdf.CachingOpt/opt1off; [ OK ] RooProdPdf/TestProdPdf.CachingOpt/opt1off (13 ms); [ RUN ] RooProdPdf/TestProdPdf.CachingOpt/opt1cpu; [ OK ] RooProdPdf/TestProdPdf.CachingOpt/opt1cpu (9 ms); [ RUN ] RooProdPdf/TestProdPdf.CachingOpt/opt2off; [ OK ] RooProdPdf/TestProdPdf.CachingOpt/opt2off (16 ms); [ RUN ] RooProdPdf/TestProdPdf.CachingOpt/opt2cpu; [ OK ] RooProdPdf/TestProdPdf.CachingOpt/opt2cpu (9 ms); [----------] 6 tests from RooProdPdf/TestProdPdf (75 ms total); [----------] Global test environment tear-down; [==========] 8 tests from 2 test suites ran. (949 ms total); [ PASSED ] 7 tests.; [ FAILED ] 1 test, listed below:; [ FAILED ] RooProdPdf.TestGetPartIntList; 1 FAILED TEST; YOU HAVE 1 DISABLED TEST; CMake Error at /builddir/build/BUILD/root-6.28.00/cmake/modules/RootTestDriver.cmake:232 (mess",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12430:1965,Test,TestProdPdf,1965,https://root.cern,https://github.com/root-project/root/issues/12430,1,['Test'],['TestProdPdf']
Testability,"Reading `RVecs` with `RNTuple` incurs in an off-by-one-byte error, because all `RVec<T>` are deserialized as `std::vector<char>`, but the position of the data buffer is different for `RVecs`:. ```; >>> p ((ROOT::VecOps::RVec<int>*)0x5555596c72a0)->data(); $983 = (int *) 0x5555581b2918; >>> p ((std::vector<char, std::allocator<char> > *)0x5555596c72a0)->data(); $984 = 0x5555581b2910; ```. I think the problematic logic is [here](https://github.com/root-project/root/blob/8d5b55f51ad8449d83fc0db8f49217e556c34036/tree/ntuple/v7/src/RField.cxx#L660). A second issue related to RVecs is that at RField.cxx:638 we use RVectorField for reading RVecs, but this means that the parent RField will have type name `std::vector<...>` even if it should (probably?) be `RVec<...>`. #6336 contains a reproducer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6347:415,log,logic,415,https://root.cern,https://github.com/root-project/root/issues/6347,1,['log'],['logic']
Testability,"Rebase PR #1396. Original PR comment:; ""ROOT can't autoparse classes inside namespaces with the rootmap; system (as the loading callbacks don't correctly land where; they are supposed to land with our injected namespaces). As this; turns out to be a feature of some kind, let's preload; TMVA/TreePlayer/Graf to fix all failing tests that are related; to this feature/bug with modules enabled. This commit can be dropped if we solve on of those problems:. figure out how to fix this bug in the rootmap-based loading; without regressin in performance. replace the rootmap system with something else like attaching; all C++ modules on startup. Note that we already do something like this in normal ROOT by; including these packages into the PCH which also makes those; decls available in the normal clang lookup.""",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1697:327,test,tests,327,https://root.cern,https://github.com/root-project/root/pull/1697,1,['test'],['tests']
Testability,"Recent change to master fixed some tests which were excluded previously, so I reverted ""excluding tests"" patches and excluded three tests which were failing in current master.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2040:35,test,tests,35,https://root.cern,https://github.com/root-project/root/pull/2040,3,['test'],['tests']
Testability,"Recent changes in Snapshot broke the edge case of a compiled Snapshot; call with no selected columns, i.e. `Snapshot<>(""tree"", ""f.root"", {})`.; This commit adds support for this case in the CreateAction machinery; that Snapshot now makes use of, re-enabling this usecase. We have a ""test"" for this usecase in rootbench.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6620:283,test,test,283,https://root.cern,https://github.com/root-project/root/pull/6620,1,['test'],['test']
Testability,"Recent commits have introduced the ability to read TBranchObjects into TTreeReader and RDF.; Writing of TBranchObjects, however, was still not working correctly. This PR fixes the writing part of ROOT-10022 and adds the corresponding tests. @pcanal can you think of other cases we should be testing? Should we also propagate the value of `TBranch::GetMakeClass` from input branch to output branch? Do `TBranchElements` require similar special-casing (it doesn't seem so from our tests)?. EDIT: I also ran these tests through valgrind, all is well",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6094:234,test,tests,234,https://root.cern,https://github.com/root-project/root/pull/6094,4,['test'],"['testing', 'tests']"
Testability,"Recently, I am seeing test failures in local builds depending on the build directory, or rather the length of its name / path. I bisected this to commit https://github.com/root-project/root/commit/46ba2eefd00371b024ae239626c7600cd3259885 (""Enable a few modules for Windows"") which introduced a check to filter dependencies without cxxmodule. There are (at least) two problems with this check: First, we add the `cpp_module` which is equal to the `library_target_name` and not the pcm file name. This results in currently no module dependencies being passed to `rootcling` at all because the condition is never true!. This could be fixed by checking `dep IN_LIST local_modules_idx_deps`. However, that still doesn't work because `local_modules_idx_deps` does not contain all modules from the start but is constructed on-the-fly. This is particularly a problem for `libCore` whose dictionary is only created after the other libraries located below `core/` are processed, for example `Imt`. The problem is that `libImt` depends on `Core`, but at the time `ROOT_GENERATE_DICTIONARY` is called for `Imt`, it doesn't know yet about the dictionary of `Core`. Finally, I'm not sure if completely omitting the dependency for a target with `NO_CXXMODULE` in case of `runtime_cxxmodules` is correct. Based on the code around, I would expect to fall back to `*_rdict.pcm` in that case. Note: This change will probably break the (partial) support for modules on Windows, but for the the reasons spelled out above, I don't see an easy fix given the current situation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12561:22,test,test,22,https://root.cern,https://github.com/root-project/root/pull/12561,1,['test'],['test']
Testability,"Recently, I have seen some use of the `RooBifurGauss` in the wild, so this commit is completing its implementation for the newest RooFit features:. 1. Support code generation of evaluation and analytical integral; 2. Unit test for fitting with AD; 3. Unit test for analytical integral, cross-checking with RooGaussian; 4. Code formatting",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14243:222,test,test,222,https://root.cern,https://github.com/root-project/root/pull/14243,2,['test'],['test']
Testability,"Recently, in commit https://github.com/root-project/root/commit/47c250898f3d3a1bb1718c73b84014a70809ffdf, the algorithm to figure out the value; and shape servers of integrals was rewritten. However, the new; implementation analyzed the computation graph by pointer, which caused a; wrong list of servers if one passed clones of the integration variables; to the integral constructor. This commit fixes that, and also implements a unit test for this case. Closes https://github.com/root-project/root/issues/11637, as the issue was caused by the integration variable; wrongly being registered as a value server of the integral. This made; the reproducer code in the issue thread very slow, because the integral; was reevaluated for each event.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11662:436,test,test,436,https://root.cern,https://github.com/root-project/root/pull/11662,1,['test'],['test']
Testability,"Reduce duration of DF unit tests, eliminating jitting in favor of compilation where possible and optimizing obvious parameters, all without loosing any coverage. # This Pull request:. ## Changes or fixes:; The df battery of unit tests now runs a few minutes faster than before. ## Checklist:. - [v] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13621:27,test,tests,27,https://root.cern,https://github.com/root-project/root/pull/13621,3,['test'],"['tested', 'tests']"
Testability,Ref: https://reviews.llvm.org/D128319. # This Pull request:. This reverts commit 71e133dd0391deac1cf3761d2c5c253b3cb247ff. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10826:166,test,tested,166,https://root.cern,https://github.com/root-project/root/pull/10826,1,['test'],['tested']
Testability,Refactor common testing code out to a new header file,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5297:16,test,testing,16,https://root.cern,https://github.com/root-project/root/pull/5297,1,['test'],['testing']
Testability,Refactor of test/stressMathCore.cxx to use Google Test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/594:12,test,test,12,https://root.cern,https://github.com/root-project/root/pull/594,2,"['Test', 'test']","['Test', 'test']"
Testability,Reference guide version changer. first try. Needs more test and tuning.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5863:55,test,test,55,https://root.cern,https://github.com/root-project/root/pull/5863,1,['test'],['test']
Testability,Reloading sparsehist.C triggers an assert in LLVM,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14012:35,assert,assert,35,https://root.cern,https://github.com/root-project/root/issues/14012,1,['assert'],['assert']
Testability,"Remaining printouts cannot easily be tested/checked, see also [this discussion](https://github.com/root-project/root/pull/5591#issuecomment-641453675). #### dataframe_simple. * `RLoopManager::Run prints to stderr rather than using Warning/Error, because it does so from a catch clause, and Warning/Error could be made throw exceptions by experiments frameworks, and we don't want to `std::terminate`. There is no `ROOT_EXPECT_*` macro for stderr printouts that do not come from `Warning`, `Error` or `Info`. #### datasource_sqlite. A constructor that warns is invoked by a factory function. Obviously, switching from. ```c++; auto rdf = MakeSqliteDataFrame(fileName0, query0);; ```; to . ```c++; ROOT_EXPECT_WARNING(auto rdf = MakeSqliteDataFrame(fileName0, query0), ..., ...);; ```; makes it impossible to use `rdf` after this line. To make things worse, `rdf` is not default-constructible, so I cannot do. ```c++; RDFType rdf;; ROOT_EXPECT_WARNING(rdf = MakeSqliteDataFrame(....), ...., ...);; ```. ...so I don't know how to catch that warning.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5845:37,test,tested,37,https://root.cern,https://github.com/root-project/root/pull/5845,1,['test'],['tested']
Testability,Remove --single-process which may fail on some special platforms. Trying to resolve `webgui-ping` problem on some platforms while this should be basic test for batch / headless functionality of; web-based gui,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8586:151,test,test,151,https://root.cern,https://github.com/root-project/root/pull/8586,1,['test'],['test']
Testability,Remove a obsolete Win32 specific code (whose logic was wrong anyway),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6088:45,log,logic,45,https://root.cern,https://github.com/root-project/root/pull/6088,1,['log'],['logic']
Testability,Remove an assert in TMVA/DNN that is not needed.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5468:10,assert,assert,10,https://root.cern,https://github.com/root-project/root/pull/5468,1,['assert'],['assert']
Testability,Remove concurrent usage of TClass::TestBit,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15113:35,Test,TestBit,35,https://root.cern,https://github.com/root-project/root/pull/15113,1,['Test'],['TestBit']
Testability,Remove extra `class` and `struct` prefixes in demangled name and fix related tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5703:77,test,tests,77,https://root.cern,https://github.com/root-project/root/pull/5703,1,['test'],['tests']
Testability,Remove not used test files and makefiles,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3270:16,test,test,16,https://root.cern,https://github.com/root-project/root/pull/3270,1,['test'],['test']
Testability,"Remove some headers from `std_darwin.modulemap` and backport https://github.com/llvm/llvm-project/commit/09ec0004eee2d9929d25cf519956cc470ffb33dd to fix the build of `std.pcm`. ---. This fixes the build but still has five failing tests:; ```; The following tests FAILED:; 206 - gtest-math-mathcore-test-CladDerivatorTests (Failed); 232 - gtest-roofit-histfactory-test-testHistFactory (Failed); 235 - gtest-roofit-hs3-test-testRooFitHS3 (Failed); 267 - gtest-roofit-roofitcore-test-testRooFuncWrapper (Failed); 1729 - roottest-root-io-compression-make (Failed); ```. There seem to be at least two problems: an `UNREACHABLE executed`; ```; builtin functions are handled elsewhere; UNREACHABLE executed at /Users/sftnight/jonas/root.src/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:2036!; ```. and Clad not being able to differentiate `__builtin_pow`:; ```; [ RUN ] CladDerivator.power; In module 'std' imported from input_line_1:1:; /Library/Developer/CommandLineTools/SDKs/MacOSX15.0.sdk/usr/include/c++/v1/__math/exponential_functions.h:162:55: warning: Unsupported declaration; using __result_type = typename __promote<_A1, _A2>::type;; ^; /Library/Developer/CommandLineTools/SDKs/MacOSX15.0.sdk/usr/include/c++/v1/__math/exponential_functions.h:153:10: warning: function '__builtin_pow' was not differentiated because clad failed to d; ifferentiate it and no suitable overload was found in namespace 'custom_derivatives', and function may not be eligible for numerical differentiation.; return __builtin_pow(__x, __y);; ^; /Users/sftnight/jonas/root.src/math/mathcore/test/CladDerivatorTests.cxx:43: Failure; Expected equality of these values:; 48; value->GetAsDouble(); Which is: 0; [ FAILED ] CladDerivator.power (6 ms); ```. I'm still investigating, starting with the first.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15900:230,test,tests,230,https://root.cern,https://github.com/root-project/root/pull/15900,7,['test'],"['test', 'test-', 'test-CladDerivatorTests', 'test-testHistFactory', 'test-testRooFuncWrapper', 'tests']"
Testability,Remove sysroot arg when writing modules to fix assertion failure.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/519:47,assert,assertion,47,https://root.cern,https://github.com/root-project/root/pull/519,1,['assert'],['assertion']
Testability,Remove unused Python modules from PyROOT/cppyy tests by backporting commit from cppyy,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14293:47,test,tests,47,https://root.cern,https://github.com/root-project/root/pull/14293,1,['test'],['tests']
Testability,Remove unused includes in math sources and tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5751:43,test,tests,43,https://root.cern,https://github.com/root-project/root/pull/5751,1,['test'],['tests']
Testability,"Removed explicitly loading pythia8 in pythia8 tutorials. On e.g. Docker, this test fails since the path to pythia8 is not under $PYTHIA8/lib/: http://cdash.cern.ch/testDetails.php?test=28516933&build=390221",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/903:78,test,test,78,https://root.cern,https://github.com/root-project/root/pull/903,3,['test'],"['test', 'testDetails']"
Testability,"Replace the RooLinkedList in the central collections of RooFit (RooArgSet, RooArgList, RooRefCountList) with a std::vector. This speeds up the tutorials of RooFit/RooStats by 10 to 20 %.; The interface with respect to iterators and size() now resembles an STL container. When iterating on the updated collections, only begin(), end() and range-based for loops should be used. The legacy RooFit iterators are still supported, but should not be used, since they are slower. They were flagged with the R__SUGGEST_ALTERNATIVE macro. This PR is identical to #3345, but more improvements were added on top of the branch used there. This is to test if the test failures on centos7 persist.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3380:637,test,test,637,https://root.cern,https://github.com/root-project/root/pull/3380,2,['test'],['test']
Testability,"Reproduce #5069 again - something went wrong when I want to merge it. Simple search for following includes were done:. * `TSystem.h`; * `TStyle.h`; * `TClass.h`; * `TEnv.h`; * `TObjString.h`; * `TObjArray.h`; * `TList.h`. These are relative ""big"" includes, therefore can improve compilation and dependencies. Let see which tests are affected",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5071:323,test,tests,323,https://root.cern,https://github.com/root-project/root/pull/5071,1,['test'],['tests']
Testability,"Reproducer:. ```cpp; #include <ROOT/RDataFrame.hxx>; #include <iostream>. int main() {; ROOT::RDataFrame(10); .Define(""x"", [] { return 42; }); .Snapshot<int>(""t"", ""thefile"", {""x""});; std::cout << ""done writing\n"";. ROOT::EnableImplicitMT();; ROOT::RDataFrame(""t"", ""thefile"").Max<int>(""x"").GetValue();. return 0;; }. ```. prints. ```; done writing; Error in <TFile::TFile>: file /tmp/thefile/t does not exist; Warning in <TTreeReader::SetEntryBase()>: There was an issue opening the last file associated to the TChain being processed.; ```. This is likely due to logic in `TChain::AddFile` that expects a `.root` extension to be present in order to distinguish `/path/to/file.root/treename` from just `/path/to/file.root` (over the network or via xrootd it's difficult/expensive to figure out which case we are in otherwise). ### Additional context; <!--; Add any other context about the problem here.; -->. First reported at https://root-forum.cern.ch/t/getting-value-from-tbranch-is-extremely-slow/45950",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8739:562,log,logic,562,https://root.cern,https://github.com/root-project/root/issues/8739,1,['log'],['logic']
Testability,"Reproducer:. ```cpp; #include <ROOT/RDataFrame.hxx>; #include <iostream>. int main(); {; ROOT::EnableImplicitMT();. const auto fpath = ""root://eosuser.cern.ch//eos/user/e/eguiraud/scratch/test.root"";; ROOT::RDataFrame(10).Define(""e"", ""rdfentry_"").Snapshot(""testd/testt"", fpath);. auto *f = TFile::Open(fpath);; auto *td = f->Get<TTree>(""testd/testt"");; auto rdftd = ROOT::RDataFrame(*td);; auto htd = rdftd.Histo1D<ULong64_t>(""e"");; std::cout << htd->GetMean() << '\n';; }; ```; yields:. ```; terminate called after throwing an instance of 'std::runtime_error'; what(): TTreeProcessorMT::Process: an error occurred while getting tree ""//eosuser.cern.ch//eos/user/e/eguiraud/scratch/test.root:/testd/testt"" from file ""root://eosuser.cern.ch//eos/user/e/eguiraud/scratch/test.root""; ```; i.e. `TTreeProcessorMT` gets the name of the TTree wrong. All 3 ingredients are needed (multi-threading, xrootd, and the sub-directory) for the problem to occur. First reported at https://root-forum.cern.ch/t/enableimplicitmt-prevents-reading-nested-ttree-from-xrootd-file-with-rdataframe/49327 , it's a similar problem to https://sft.its.cern.ch/jira/browse/ROOT-9948 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10216:188,test,test,188,https://root.cern,https://github.com/root-project/root/issues/10216,9,['test'],"['test', 'testd', 'testt']"
Testability,Required for tutorials like `triangle.cxx` where dictionary must be generated for the class. `skip-ci` while doxygen is not tested by CI.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16758:124,test,tested,124,https://root.cern,https://github.com/root-project/root/pull/16758,1,['test'],['tested']
Testability,"Reserves the ""sharded cluster"" flag in the cluster summary but removes any additional s11n logic. Extends the cluster summary flags field to 8bits so that it can be handled with a standard C++ type.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16511:91,log,logic,91,https://root.cern,https://github.com/root-project/root/pull/16511,1,['log'],['logic']
Testability,Resolve oustanding roottest issues (with full testing),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7274:46,test,testing,46,https://root.cern,https://github.com/root-project/root/pull/7274,1,['test'],['testing']
Testability,"Respawn genvector tests because they accidentally dropped out from the building and testing process during the migration to CMake.; Minimal changes to the code were applied to let them run, respecting the original coding style. # This Pull request:. ## Changes or fixes:; It does not fix an existing issue, but rather it increases the test coverage recovering some tests. ## Checklist:. - [v] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13633:18,test,tests,18,https://root.cern,https://github.com/root-project/root/pull/13633,5,['test'],"['test', 'tested', 'testing', 'tests']"
Testability,"Retreiving weights from a RooDataHist can be sped up signifcantly if it; is assumed that parameters passed to `RooDataHist::weight` are aligned; with the histogram variables. This commit introduces a `RooDataHist::weightFast` function that makes; this assumption. It is used by RooHistFunc and RooHistPdf. This was benchmarked with the same hist factory example as in https://github.com/root-project/root/pull/7838:. * [without this PR, but with #7838](https://rembserj.web.cern.ch/rembserj/cgi-bin/igprof-navigator/hf_ParamHistFunc_1_new_2); * [also with this PR](https://rembserj.web.cern.ch/rembserj/cgi-bin/igprof-navigator/hf_ParamHistFunc_1_new_3). The effect is a 15 % speedup of the HistFactory example.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7859:315,benchmark,benchmarked,315,https://root.cern,https://github.com/root-project/root/pull/7859,1,['benchmark'],['benchmarked']
Testability,Reversed graphs were not working in log scale. As explained here:; https://github.com/root-project/root/issues/11938,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12235:36,log,log,36,https://root.cern,https://github.com/root-project/root/pull/12235,1,['log'],['log']
Testability,"Revert ""Add google benchmark""",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1064:19,benchmark,benchmark,19,https://root.cern,https://github.com/root-project/root/pull/1064,1,['benchmark'],['benchmark']
Testability,"Revert ""Commented multithreaded execution policy test.""",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/628:49,test,test,49,https://root.cern,https://github.com/root-project/root/pull/628,1,['test'],['test']
Testability,"Revert ""Fix NO_CXXMODULE handling logic for dependencies""",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6153:34,log,logic,34,https://root.cern,https://github.com/root-project/root/pull/6153,1,['log'],['logic']
Testability,"Revert ""Fix logic of handling dependencies when NO_CXXMODULE is specified""",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5883:12,log,logic,12,https://root.cern,https://github.com/root-project/root/pull/5883,1,['log'],['logic']
Testability,"Revert ""[RDF] Fix a dependency issue for an RDF test.""",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5730:48,test,test,48,https://root.cern,https://github.com/root-project/root/pull/5730,1,['test'],['test']
Testability,"Revert ""[TO REVERT] Never run TMVA GNN tests and tutorials as unit tests""",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15596:39,test,tests,39,https://root.cern,https://github.com/root-project/root/pull/15596,2,['test'],['tests']
Testability,"Revert ""[clang] Relax assertion on generating destructor call""",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13099:22,assert,assertion,22,https://root.cern,https://github.com/root-project/root/pull/13099,1,['assert'],['assertion']
Testability,"Revert ""[cmake] Make test building serial on Windows""",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16306:21,test,test,21,https://root.cern,https://github.com/root-project/root/pull/16306,1,['test'],['test']
Testability,"Revert ""[cxxmodules] Fix R.M by displacing TEmulatedTuple only withou…t cxxmodules"". This reverts commit a74297ac32fbe9f1aec0be246d0bef1c430b9bc6. This repairs the support for I/O of std::tuple. The previous code leads to; the actual std::tuple implementation to be attempted (and failing) to be used; for I/O:. See https://epsft-jenkins.cern.ch/job/root-pullrequests-build/59119/testReport/projectroot.roottest.root.io/tuple/roottest_root_io_tuple_make/",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3982:380,test,testReport,380,https://root.cern,https://github.com/root-project/root/pull/3982,1,['test'],['testReport']
Testability,Revert assertion check in Declbase.cpp,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10644:7,assert,assertion,7,https://root.cern,https://github.com/root-project/root/pull/10644,1,['assert'],['assertion']
Testability,"Revert the changes to `build_root.py` from commit 542b98b2cc (""[ci] Add alma9 clang build"") since they were not reflected when uploading the artifacts which could consequently not be found. The extra logic of appending the image doesn't seem needed, the compiler is part of the options.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15926:200,log,logic,200,https://root.cern,https://github.com/root-project/root/pull/15926,1,['log'],['logic']
Testability,"Reverts root-project/root#627. Note: do not merge it until the failing 'projectroot.math.mathcore.test.mathcore_testLogLExecPolicy' on some platforms is resolved. @xvallspl, @lmoneta.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/628:98,test,test,98,https://root.cern,https://github.com/root-project/root/pull/628,1,['test'],['test']
Testability,Revise Long Running Tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3426:20,Test,Tests,20,https://root.cern,https://github.com/root-project/root/pull/3426,1,['Test'],['Tests']
Testability,Rewrite the RDataFrame JIT logic to avoid controlled leaks,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15520:27,log,logic,27,https://root.cern,https://github.com/root-project/root/issues/15520,1,['log'],['logic']
Testability,"Right now we only generate modulemaps for the ROOT libraries which; are exposed to the user. But we also have generate dictionary; calls for dictionaries that are not exposed to the user and should; only be private (such as TBench, TMathCoreUnitDict etc.). Right now we fail when compiling root on those dictionaries as we; don't have a modulemap for those dictionaries and we don't generate; one. This will also break tests that use the generate dictionary; call as those also don't have a modulemap now. This patch reuses the existing CMake code for generating modulemaps; and also uses it in those cases to provide a dictionary that; rootcling can use to generate a C++ module.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1091:419,test,tests,419,https://root.cern,https://github.com/root-project/root/pull/1091,1,['test'],['tests']
Testability,"RooArgSet allows to create a file with the information from the arguments stored in the set with the method RooArgSet::writeToFile(...).; Unfortunately, when using the corresponding RooArgSet::readFromFile function, there is a parsing problems for numbers in the form Xe+YZ, and the information gets lost in the import. The following error is produced:. ```; [#0] ERROR:InputArguments -- RooRealVar::readFromStream(x): parse error, cannot convert '1e' to double precision; ```; You can test yourself with this script: [root-prob.py](https://root.cern.ch/phpBB3/download/file.php?id=13191&sid=a39a5dc5dc04a4c2be38081286650206). I’ve tracked the problem down to a forgotten case in RooStreamParser::readToken(). And after fixing it I made the script work as expected ([after.txt](https://root.cern.ch/phpBB3/download/file.php?id=13192&sid=a39a5dc5dc04a4c2be38081286650206)). Apologies for the trailing whitespace removed. Only real change at line 230.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/352:486,test,test,486,https://root.cern,https://github.com/root-project/root/pull/352,1,['test'],['test']
Testability,"RooDataSets can be written to ASCII files. However, the output stream is not exposed to the user, i.e., the user cannot modify e.g. the precision. By exposing the stream to the user, the data set can be written to any ostream with user-defined stream modifiers. The rf102 tutorial has been updated accordingly, input/output tests have been added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3083:324,test,tests,324,https://root.cern,https://github.com/root-project/root/pull/3083,1,['test'],['tests']
Testability,RooFit MultiProcess and TestStatistics,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8294:24,Test,TestStatistics,24,https://root.cern,https://github.com/root-project/root/pull/8294,1,['Test'],['TestStatistics']
Testability,"RooFit currently includes the `RooCBShape` and `RooDSCBShape` to; represent the family of crystal ball distributions. The `RooCBShape`; only has a left tail, and `RooDSCBShape` has two independently; parametrized tails. Some users also want a crystal ball where the width of the Gaussian; core is different on the left and the right side (see e.g. Jira ticket; [ROOT-10388](https://sft.its.cern.ch/jira/browse/ROOT-10388)). To make the RooFit code more maintainable and also cover the use case; of an asymmetric Gaussian core, this commit implements a new; `RooCrystalBall` class that should cover all classes of crystal ball; shapes, such that `RooCBShape` and `RooDSCBShape` are in principle not; necessary anymore. The new features of the `RooCrystalBall` class that make it different; from `RooDSCBShape` are:. - possibility to set sigma of left side and right side of Gaussian; core separately. - code modernization and using `std::` math functions. - three constructors: fully parametrized, symmetric Gaussian core; (to replace `RooDSCBShape`), only left tail (to replace; `RooCBShape`). - useage of inlined helper functions to avoid code duplication. It is also carefully tested in `testRooCrystalBal`:. - test the fully parameterized case. - test the constructor for left-tail only case and compare values; with `RooCBShape`. - test the constructor with symmetric Gaussian core and compare; values with `RooDSCBShape`. - test the constructor for right-tail only and symmetric tails. - test integration with many possible combinations integration; ranges to cover all branches of integration code",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7257:1179,test,tested,1179,https://root.cern,https://github.com/root-project/root/pull/7257,7,['test'],"['test', 'testRooCrystalBal', 'tested']"
Testability,RooFit::MultiProcess & TestStatistics part 1: mathcore & Minuit2 changes,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8369:23,Test,TestStatistics,23,https://root.cern,https://github.com/root-project/root/pull/8369,1,['Test'],['TestStatistics']
Testability,RooFit::MultiProcess & TestStatistics part 2 redo: RooFitZMQ & MultiProcess,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9078:23,Test,TestStatistics,23,https://root.cern,https://github.com/root-project/root/pull/9078,1,['Test'],['TestStatistics']
Testability,RooFit::MultiProcess & TestStatistics part 2: ZeroMQ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8385:23,Test,TestStatistics,23,https://root.cern,https://github.com/root-project/root/pull/8385,1,['Test'],['TestStatistics']
Testability,RooFit::MultiProcess & TestStatistics part 2b: MultiProcess,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8412:23,Test,TestStatistics,23,https://root.cern,https://github.com/root-project/root/pull/8412,1,['Test'],['TestStatistics']
Testability,RooFit::MultiProcess & TestStatistics part 3: Minuit2::NumericalDerivator,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8567:23,Test,TestStatistics,23,https://root.cern,https://github.com/root-project/root/pull/8567,1,['Test'],['TestStatistics']
Testability,RooFit::MultiProcess & TestStatistics part 4: RooMinimizerFcn refactoring,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8569:23,Test,TestStatistics,23,https://root.cern,https://github.com/root-project/root/pull/8569,1,['Test'],['TestStatistics']
Testability,RooFit::MultiProcess & TestStatistics part 5: RooGradMinimizerFcn,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8596:23,Test,TestStatistics,23,https://root.cern,https://github.com/root-project/root/pull/8596,1,['Test'],['TestStatistics']
