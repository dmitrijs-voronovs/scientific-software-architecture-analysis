quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,wiki,url,total_similar,target_keywords,target_matched_words
Availability,"> @stwunsch your ""fix"" #6574 broke cmake conventions. If you break it, I think you should take care that it gets fixed in time.; > . 💥 . > When my builds didn't do what they should, I didn't really expect that it's _again_ the cache variables, which Guilherme and me had fixed before in order to customise builds.; > You should be nicer towards users who want to customise their builds to report bugs to you guys with exact code locations etc (#7903). :-); > ; > @Axel-Naumann @oshadura ping?. So the approach lined out in this issue is correct, we want the `*_INIT` thingy, right? The violation of the cmake conventions is using `FORCE`, do I understand this correctly?. I don't remember why it hasn't been done like that in the first place, because we were definitely aware of this (because this issue exists).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6577#issuecomment-821808128:487,ping,ping,487,https://root.cern,https://github.com/root-project/root/issues/6577#issuecomment-821808128,1,['ping'],['ping']
Availability,"> @vgvassilev , `-DLLVM_BUILD_TYPE=Debug` did not help much. It failed again with the same error ( see https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-6342e6/25499/external/py3-hepdata-lib/0.8.1-23017aefcaec1f6e033b49c0652b0cd2/log ). @smuzaffar, but this great :) Now if you tell me the recipe to debug it would be awesome.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1155124994:91,error,error,91,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1155124994,1,['error'],['error']
Availability,"> @vgvassilev , as @makortel mentioned above , you can do something like the following on lxplus to reproduce this build failure; > ; > ```; > #Login to lxplus and start cmssw-el8 container; > > ssh lxplus; > > cd cd /tmp/$(whoami); > > source /cvmfs/cms.cern.ch/cmsset_default.sh; > > cmssw-el8; > # Create CMSSW area using PR artefacts; > > /cvmfs/cms-ci.cern.ch/week1/cms-sw/root/208/41293/install.sh; > > cd CMSSW_14_2_ROOT6_X_2024-09-03-2300/; > > cmsenv; > #Build root dict; > > scram b -v -j 10 tmp/el8_amd64_gcc12/src/DataFormats/Histograms/src/DataFormatsHistograms/a/DataFormatsHistograms_xr.cc; > ```. I just got autowarned:. ```; The LxPlus service is now monitoring CPU and Memory Pressure Stall; Informaton (PSI) on each node. The LxPlus node lxplus974.cern.ch has been identified as under io pressure.; Your processes are currently the highest contributor to that pressure. In particular, the some_avg300 value for io is 57.04% which; is over the threshold of 50%. This is the percentage of time that; resources are being wasted due to cpu context switching or thrashing memory.; This impacts all users of the service, including yourself, as your; own processes fight with one another.; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16232#issuecomment-2332302392:121,failure,failure,121,https://root.cern,https://github.com/root-project/root/pull/16232#issuecomment-2332302392,1,['failure'],['failure']
Availability,"> @vgvassilev , cms tests failed. Looks like hepdata-lib package, see the build error [here](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-57f21d/29184/external/py3-hepdata-lib/0.10.1-d5a65a50fc66bb6ceb2097b9bc30c480/log); > ; > ```; > Processing ./v0.10.1.tar.gz; > Preparing metadata (setup.py): started; > Running command python setup.py egg_info; > input_line_1:1:2: fatal error: module 'libc' in AST file '/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc11/lcg/root/6.27.01-36c89006db8bc49d9c575f40a5e4973c/lib/std.pcm' found in a different module map file (/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc11/lcg/root/6.27.01-36c89006db8bc49d9c575f40a5e4973c/etc/cling/libc.modulemap) than when the importing AST file was built (/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.27.01-36c89006db8bc49d9c575f40a5e4973c/build/etc/cling/libc.modulemap); > #include <new>; > ^; > input_line_1:1:2: note: imported by module 'std' in '/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc11/lcg/root/6.27.01-36c89006db8bc49d9c575f40a5e4973c/lib/std.pcm'; > Warning in cling::IncrementalParser::CheckABICompatibility():; > Failed to extract C++ standard library version.; > Replaced symbol atexit cannot be found in JIT!; > Replaced symbol at_quick_exit cannot be found in JIT!; > <<< cling interactive line includer >>>: fatal error: module file '/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc11/lcg/root/6.27.01-36c89006db8bc49d9c575f40a5e4973c/lib/libc.pcm' is out of date and needs to be rebuilt; > Failed to load module libc; > Failed to load module std; > Failed to load module _Builtin_intrinsics; > Failed to load module _Builtin_intrinsics; > Failed to load module std; > Failed to load module libc; > python3: /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.27.01-36c89006db8bc49d9",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1326879491:80,error,error,80,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1326879491,2,['error'],['error']
Availability,"> @vgvassilev Do we actually have any tests that checks that things still work if the files used to produce the pcm (or the pch) are gone and/or not longer accessible? (i.e. the test framework would have to explicitly hides/move/removes some files to achieve this). We seem to have builders that use the PCH (nortcxxmod). Then, we have cmssw that has the hybrid model, forward declarations and modules, including relocating the ROOT build - I doubt we would not catch the failure of this patch. I suspect what saves us here is several optimizations we did over the years where rootcling does not produce a lot of virtual file entries and basically pch/pcm files have less (but not 0) virtual files. @Axel-Naumann, I think you should know better - you created the patch long time ago ;) My memory is that we were trying to fix something with cms/atlas and PCH?. > * for this PR to be correctly validated we need to have tested a setup where the build directory is not available anymore at runtime. Does CMS test this, @smuzaffar @vgvassilev ?. Oh, yes, they do :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10633#issuecomment-1139459615:472,failure,failure,472,https://root.cern,https://github.com/root-project/root/pull/10633#issuecomment-1139459615,2,"['avail', 'failure']","['available', 'failure']"
Availability,"> @vgvassilev It is working for me, but seems to be there are problems on other platforms. Great to hear! I believe I have fixed the other failures but let's see...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12519#issuecomment-1484654348:139,failure,failures,139,https://root.cern,https://github.com/root-project/root/pull/12519#issuecomment-1484654348,1,['failure'],['failures']
Availability,"> @vgvassilev as I wrote on Mattermost, this change was particularly written to address Jun's problem. `roottest-root-html-runMakeIndex` is a separate thing that needs addressing anyhow; it's only now visible because all the other failures are gone.; > ; > FWIW I don't agree that the workarounds (hacks) introduced in #10910 are a good way to go, as shown by the many failing tests. The scope of the changes is too big and there are valid reasons to do something with `Decl`s currently being defined, as evidenced by the many failing tests. Adding more conditions will eventually only lead to internally inconsistent states... The ""workaround"" introduced in #10910 is not only intended to address my problem but also serves as a more generic fix. It makes more sense right? disable the callback when we're instantiating templates. > as shown by the many failing tests. Ahh... yes and no, actually we're almost getting there. Currently, it is just some strange failures in some specific build bots (`ROOT-debian10-i386` and mac builders) We also haven't tested that separately so who knows what triggered the failure. I'm not really sure which way is the best to go, we still need time to discover, can you check if that patch fixes your issue? Also, I would appreciate it if you can take a look at the failures to see if you have a clue or not :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11514#issuecomment-1273015498:231,failure,failures,231,https://root.cern,https://github.com/root-project/root/pull/11514#issuecomment-1273015498,4,['failure'],"['failure', 'failures']"
Availability,"> @vgvassilev the failure is in a `nortcxxmod`, that's why I wondered about this case. The previous implementation looking at the `SourceLocation`s worked, so there must be _some_ differences... I suspect that `std::pair<edm::Value>` returned `true` which we can classify more accurately now. Template instantiations are a weird beast that can contain both content from a system header and non-system headers. I suspect that `hasOwningModule` is false. For the PCH usually it is enough to use `isFromASTFile`. . PS: On a second thought that would probably fail elsewhere..",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11514#issuecomment-1273315702:18,failure,failure,18,https://root.cern,https://github.com/root-project/root/pull/11514#issuecomment-1273315702,1,['failure'],['failure']
Availability,"> @vgvassilev yes the bulk of the code is from LLVM SmallVector but see my comment above: we patch it to add a feature, and it does not work with (our version of) cppyy as-is. So exposing LLVM's SmallVectore as a core library would not help here, we'd still need to roll our own SmallVector-based RVec.; > ; > > I thought we have a way to do that with TMemFile already.; > ; > It's a different ""level"" of adoption: this is after deserialization, TMemFile might make an on-disk blob available as a memory buffer but that would be before deserialization. Another thing to keep in mind is that the performance of the llvm::SmallVector comes from the fact it is not exception safe as llvm does not compile with exceptions. I suspect that may not apply for many parts of ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7502#issuecomment-817094299:482,avail,available,482,https://root.cern,https://github.com/root-project/root/pull/7502#issuecomment-817094299,1,['avail'],['available']
Availability,"> @wmyyy so I can't build with ASAN on Windows (see errors above). But it's weird that you don't have the same errors. And about the ""The items cannot be built in parallel."", it's fine, it's only an informative message. Hi @bellenot,; Very sorry for the late response, could you please check if you install ""C++ Address Sanitizer"" components in Visual studio?; ![image](https://user-images.githubusercontent.com/17844901/150507061-705a7a2a-5092-4fe4-83c2-efde6fd0fa79.png). Thanks",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9445#issuecomment-1018356508:52,error,errors,52,https://root.cern,https://github.com/root-project/root/issues/9445#issuecomment-1018356508,2,['error'],['errors']
Availability,"> AFAIK the new autoloading is not available for COFF?; > ; > Do we understand (as in reproduced and debugged) where the original issue is coming from? Let's _first_ do that and _then_ try to repair, please. We do have coff support in symbol resolution and it is default already: https://github.com/vgvassilev/cling/blob/329af99e47a39526df49c27abd10d3306fbc7c9b/lib/Interpreter/DynamicLibraryManagerSymbol.cpp#L933. I think there is a pretty clear explanation where this comes from in the commit history. We could not load `gRandom`. That was with the very old dyld-based approach to loading symbols. This PR checks if the new approach has the same problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10330#issuecomment-1089868124:35,avail,available,35,https://root.cern,https://github.com/root-project/root/pull/10330#issuecomment-1089868124,4,"['avail', 'repair']","['available', 'repair']"
Availability,"> Actually with the date we have so far, we do not know whether the problem is pre-exiting or not. To know we would need to use (in the same code pattern as the test) a class that triggers the same time of side effect (template instantiation) as is done by LLVM 16 with the pair. Yes, valid point. The following should replicate the sequence of events and already fails in ROOT v6.20 with LLVM 5:; ```; root [0] namespace NS { template <typename T> struct A; }; root [1] template <typename T> struct B { static_assert(std::is_default_constructible_v<T>); };; root [2] TClass::GetClass(""B<NS::A<int>>""); (TClass *) nullptr; root [3] namespace NS { template <> struct A<int> { int v; }; }; root [4] B<NS::A<int>> b;; error: static_assert failed; fatal error: cannot open file 'input_line_114': No such file or directory; ROOT_prompt_4:1:15: note: in instantiation of template class '__cling_N50::B<NS::A<int> >' requested here; B<NS::A<int>> b;; ^; ```; whereas the instantiation works fine without the call to `TClass::GetClass`. (note that the `namespace NS` is needed to avoid bogus `'A' does not name a template but is followed by template arguments` in v6.22 and older)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13815#issuecomment-1759250811:715,error,error,715,https://root.cern,https://github.com/root-project/root/issues/13815#issuecomment-1759250811,2,['error'],['error']
Availability,"> Actually, I still don't know why adding `algorithm` fixes a problem with `range_base.h`, so I can't add that to the commit ... maybe it is something like ""... by avoiding to use the module maps provided by the standard library in those case""?. Now that’s something I was looking for! Thank you! I think that’s a mistake in this PR. I failed to update the relevant header as well. The problem is more subtle probably as since some update of gcc it started picking up experimental/string_view which in turn somehow uses the headers only available in c++14 onwards. So perhaps we should re-export string_view… I can look at that tomorrow.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12276#issuecomment-1430440791:537,avail,available,537,https://root.cern,https://github.com/root-project/root/pull/12276#issuecomment-1430440791,1,['avail'],['available']
Availability,"> After the discussion at #8828 I have the impression that this shouldn't get merged. We might want to have an `Error()` call or similar instead. @hahnjo what's your opinion?. Yes, I wasn't sure either. I think Cling shouldn't crash (fixed for now with #9093), but because of the ambiguity of `std::ns` and `::ns`, I agree it would be more ""user-friendly"" to directly error out if a user tries to define a namespace that exists below `std::`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9089#issuecomment-950711308:112,Error,Error,112,https://root.cern,https://github.com/root-project/root/pull/9089#issuecomment-950711308,3,"['Error', 'error']","['Error', 'error']"
Availability,"> After updating ROOT to [026a1a7](https://github.com/root-project/root/commit/026a1a701b246b495fda3054719a2a224e4299f8), the first error is gone. But dictionary generation still fails due to ""Missing lambda call operator"". Build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30616/build.log). Correction: the first error is still there",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12240#issuecomment-1430101217:132,error,error,132,https://root.cern,https://github.com/root-project/root/issues/12240#issuecomment-1430101217,2,['error'],['error']
Availability,"> Agreed today at I/O meeting that we need to remind ourselves and investigate these questions. I'm okay with merging this PR if e.g. @hahnjo could create a new issue with the above questions - this seems to indicate a bug, whether it's a missing error message or an ignored linkdef entry or whatever it is. https://github.com/root-project/root/issues/13303",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13238#issuecomment-1647548705:247,error,error,247,https://root.cern,https://github.com/root-project/root/pull/13238#issuecomment-1647548705,1,['error'],['error']
Availability,"> Agreed, we need to return 'error'. This is what was happening before; I'd hope that it's still an option. @hahnjo do you think you can have a look or should I?. If it's as easy as ""commenting out"" the `throw`, I can have a look. Hopefully I don't have to introduce a new scheme for returning / propagating the error in the absence of exceptions...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10548#issuecomment-1123260188:29,error,error,29,https://root.cern,https://github.com/root-project/root/issues/10548#issuecomment-1123260188,2,['error'],['error']
Availability,"> Ah yes, I turned 0 to 1 while testing the other changes. Reverting back to 0 and keeping the rest of the diff as it is, I get again the usual error and no extra errors. I think those are a bug. I am seeing it in a completely different setting.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13134#issuecomment-1638493780:144,error,error,144,https://root.cern,https://github.com/root-project/root/pull/13134#issuecomment-1638493780,2,['error'],"['error', 'errors']"
Availability,"> Almost 10/10, only denied by the a spurious failure on `Windows 10 x64 Release`... Thanks for approving. The error is only a test failure (`tutorial-v7-concurrentfill.cxx`)...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14314#issuecomment-1882988047:46,failure,failure,46,https://root.cern,https://github.com/root-project/root/pull/14314#issuecomment-1882988047,3,"['error', 'failure']","['error', 'failure']"
Availability,"> Alright, I think I managed to hunt down and fix the underlying issues that required removing the `assert` and disabling the IR verifier: https://reviews.llvm.org/D142352 and https://reviews.llvm.org/D142443 Assuming these go through upstream, we could either revert the ""hacky"" LLVM patch (and replace it by two backports for LLVM 13), or just wait for the next LLVM upgrade (and close this PR). What do you think @Axel-Naumann @vgvassilev?. I'd prefer to replace the hacky patch with the backports as they are now. This way we have at least one more source to track what happened to the particular issue. If they end up closed there will be a reason or an alternative which will make it easier to get rid of the non-merged backport patch.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12074#issuecomment-1402001581:37,down,down,37,https://root.cern,https://github.com/root-project/root/pull/12074#issuecomment-1402001581,1,['down'],['down']
Availability,"> Also it is just contrary to TPad::Add(). Not enough reason for me to make a new public method just to provide some vague simmetry. > TObject::Pop() and TPad::Pop() used them. Exactly! So `TPad::Remove` is internal to ROOT classes only. It can be a protected method of `TVirtualPad` and then the `Pop` methods can access it (`TPad::Pop` will be able to access it because it inherits from `TVirtualPad`, `TObject` can easily access the method with an `Internal` helper such as `ROOT::Internal::GraphicsUtils::CallTVirtualPadRemove`). We should strive imho to minimize the public surface of our APIs so we do not increase the maintenance burden. > Drawable is ""reserved"" word for the ROOT7 classes :). Fine, not too big of an issue I guess, still `Register` or `Adopt` sound better but that is probably just my own opinion. I would still very much encourage the addition of a memory-safe API with smart pointers anyway. > TPad::AddFirst is not used by this PR, but can appear later.; For instance TFrame object always must be first in list of primitives.; Or one can add as first primitive histogram drawing axis - after all other objects already created. Again from this description everything sounds internal to ROOT only and not something the user should care about. So I insist also `AddFirst` is removed from this PR or at least made private",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15822#issuecomment-2162863196:625,mainten,maintenance,625,https://root.cern,https://github.com/root-project/root/pull/15822#issuecomment-2162863196,1,['mainten'],['maintenance']
Availability,> An alternative place might be: https://github.com/mathjax/MathJax/releases/. The file provided there for download does not work. It is not the equivalent of the `mathjax.tar.gz` file we have in the root repository. Formulae are not interpreted if I replace the original file but this one. I will now try the URL way.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10067#issuecomment-1061831059:107,down,download,107,https://root.cern,https://github.com/root-project/root/issues/10067#issuecomment-1061831059,1,['down'],['download']
Availability,"> And 6410 warnings come from llvm/clang. Since we don't know whether they still exist in newer releases, I agree that it is likely pointless to look into them (I.e. we could pass the warning suppression flag to the llvm build). > e.g. int len = strlen(data); ... . it is a little bit odd we don't get a warning on any other platforms .... > why a string would be longer on 64 bit than on 32 bit . In an error case?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9197#issuecomment-963505797:404,error,error,404,https://root.cern,https://github.com/root-project/root/pull/9197#issuecomment-963505797,1,['error'],['error']
Availability,"> And that about clang-tidy analyzer errors?. They are not related to this PR of course but it looks like (in first approx) they need to be fixed/looked-at. > It complains that virtual methods like SysOpen called in constructor - how it could works at all?. It works because it calls what the virtual table shows 'so-far' and essentially it is equivalent to a call to TFile::SysOpen, we probably ought to make it clear and do the substitution explicitly in the code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4253#issuecomment-523471856:37,error,errors,37,https://root.cern,https://github.com/root-project/root/pull/4253#issuecomment-523471856,2,['error'],['errors']
Availability,"> And we prefer static libs, because that allows us to hide symbols more effectively, and e.g. some NVidia driver famously exposed all LLVM symbols - of its own LLVM libraries! - to the process, causing conflicts, so we do want to hide those LLVM symbols. Some quick tests with `bin/root` show me that I don't have any llvm symbols available. I haven't done a proper check by reading the symbols though / CMake transitive link libraries though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12156#issuecomment-1662518682:332,avail,available,332,https://root.cern,https://github.com/root-project/root/issues/12156#issuecomment-1662518682,1,['avail'],['available']
Availability,> And when does the error appear? . When I try to run the generated root.exe file.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10656#issuecomment-1148779007:20,error,error,20,https://root.cern,https://github.com/root-project/root/pull/10656#issuecomment-1148779007,1,['error'],['error']
Availability,"> And yes TTree::Draw should return a TH1D. @pcanal, can this be changed ?. This is straightforward to change (in TSelectorDraw), it is the obvious solution to the problem (albeit it actually just delay the problem per se .. but by a lot I guess :) ) but is not without visible consequences:. * Increase memory usage (would be visible by users that use a lot of Draws).; * Potential type error for those that call Draw and then retrieve the htmp histogram (lucky users would have provided their own .. .likely also a TH1F though !? ... the unlikely one would have C-style casted it to TH1F (which actually might still appears to work depending which routines they call on that pointer) ... and the most unlucky would have use dynamic_cast but forgot to test the result .... and the weird ones would rely on the saturation to detect some type of results (see [xkcd space bar heating](https://xkcd.com/1172/))",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6671#issuecomment-791556472:388,error,error,388,https://root.cern,https://github.com/root-project/root/issues/6671#issuecomment-791556472,1,['error'],['error']
Availability,"> Another problem with candle plot drawing is so-called `kMedianNotched`. For low_stat histograms they make output:; > ; > ![candle_bad2](https://user-images.githubusercontent.com/4936580/144408739-c4f9f694-c674-4b36-95dc-c9b6b43646b0.png); > ; > Additional fix will be provided to the PR to get:; > ; > ![candle4_good](https://user-images.githubusercontent.com/4936580/144409065-a64ec073-f342-4a15-b931-fd7042d0853b.png). @linev ; Dear Sergey, thanks for patching...; The low statistics stuff at the notched candles were actually meant seriously!. I used the definition of the candle-charts (except the default candle1, because it was there before) from a definition made by cornerstone. Here the candles (here they are called box-plots) show this crazy shape to indicate the user: ""you should use more statistics"". I would highly recommend to keep this crazy look (otherwise the error is not drawn correctly). @couet ; 1. Some years ago I wrote a fully working patch for the editor, so that one can change candle-settings very well. Can't we put it in?; 2. There was an open bug when using zoom, did someone had the time to fix it?. Thanks; Georg",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9362#issuecomment-985632761:881,error,error,881,https://root.cern,https://github.com/root-project/root/issues/9362#issuecomment-985632761,1,['error'],['error']
Availability,"> Another reproducer:; > ; > ```; > ~ root -l; > root [0] Long32_t ba;; > ROOT_prompt_0:1:9: error: expected ';' after expression; > Long32_t ba;; > ^; > ;; > ROOT_prompt_0:1:10: error: use of undeclared identifier 'ba'; > Long32_t ba;; > ^; > root [1] Long64_t ba;; > root.exe: ../../../../../../../../root_dbg/interpreter/llvm/src/tools/clang/lib/Sema/SemaDecl.cpp:12576: clang::; > ```. As suspected, these were two different issues. The quoted issue was fixed in https://github.com/root-project/root/pull/9160. The original reported issue is to be investigated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6439#issuecomment-1058341615:93,error,error,93,https://root.cern,https://github.com/root-project/root/issues/6439#issuecomment-1058341615,2,['error'],['error']
Availability,"> Any chance to run the failing process in valgrind?. I don't have any power on the process that fail itself, it's a task run inside of the `dask` worker and its scheduling is out of my control. On other news, I made a few more tests focusing on the version of dask `distributed` module. In the description of the issue above I stated `distributed==2022.7.1`, this was my starting version for the tests I will describe in the following. First, I noticed this type of error, happening between a test and another; ```; 2022-10-08 02:33:36,474 - tornado.application - ERROR - Exception in callback functools.partial(<bound method IOLoop._discard_future_result of <tornado.platform.asyncio.AsyncIOLoop object at 0x7f946cbb8340>>, <Task finished name='Task-245' coro=<SpecCluster._correct_state_internal() done, defined at /home/vpadulan/.local/lib/python3.10/site-packages/distributed/deploy/spec.py:330> exception=RuntimeError('cannot schedule new futures after shutdown')>); Traceback (most recent call last):; File ""/home/vpadulan/.local/lib/python3.10/site-packages/tornado/ioloop.py"", line 741, in _run_callback; ret = callback(); File ""/home/vpadulan/.local/lib/python3.10/site-packages/tornado/ioloop.py"", line 765, in _discard_future_result; future.result(); RuntimeError: cannot schedule new futures after shutdown; ```. Initially I thought these errors were just a by-product of the errors coming from `TInterpreter` that were leaving the dask worker in a bad state and thus breaking the scheduler too. But then, I updated to `distributed==2022.8.1` and they were not present. So I went on and I used `git bisect` starting from `2022.8.0` going onwards. . I was able to identify the following scenarios, depending on a combination of the status of ROOT and the version of dask `distributed` module:. * ROOT current master, with `distributed==2022.8.0`: errors like shown shown above, both those coming from `TInterepreter::Calc` from RDF and those coming from dask about `cannot schedule new fut",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11515#issuecomment-1272186236:467,error,error,467,https://root.cern,https://github.com/root-project/root/issues/11515#issuecomment-1272186236,2,"['ERROR', 'error']","['ERROR', 'error']"
Availability,"> Apparently ROOT's llvm-project is not up-to-date. https://github.com/root-project/llvm-project/ matches what is currently in `master`. In this PR, you are modifying files in `interpreter/llvm-project/`, so *of course* these changes cannot be reflected in https://github.com/root-project/llvm-project/. This needs to be synchronized eventually, but first the test failures need to be addressed (across all platforms).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13808#issuecomment-1755369266:365,failure,failures,365,https://root.cern,https://github.com/root-project/root/pull/13808#issuecomment-1755369266,1,['failure'],['failures']
Availability,"> Are the errors my fault?. I don't think so. Let's get master clean before rerunning here. Maybe we need just `-Darrow=ON` on the right node instead of `-Dall=ON`, which might be showing some of the errors above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3236#issuecomment-454288940:10,error,errors,10,https://root.cern,https://github.com/root-project/root/pull/3236#issuecomment-454288940,3,"['error', 'fault']","['errors', 'fault']"
Availability,"> Are there plans/work in progress for ROOT to move to a newer cppyy anytime soon?. Hi @taehyounpark! We have recently upgraded the cppyy frontend in ROOT, which will be part of ROOT 6.32:; https://github.com/root-project/root/pull/14507. However, it doesn't fix this reproducer. I suspect that this also requires to synchronize the [cppyy-backend](https://github.com/wlav/cppyy-backend/tree). The problem is that this backend is a fork of ROOT itself, including cling. And then, cppyy made patches to this fork of cling/ROOT for e.g. better lambda support and other advanced C++ features and details of the type system. The problem is that we can't take these patches 1 to 1 back to ROOT, because ROOT also used Cling for other things like IO, and the patches in cppyy did not have to consider compatibility with that. We try to make cppyy independent of cling on the long term to solve this conundrum. In the meantime, I can see what we are exactly missing in upstream ROOT or Cling to make the reproducer in this issue work. Maybe it is an uncontroversial patch. This will also take some time though. I worked a lot on PyROOT in the last weeks and have to work on other responsibilities in the next weeks before coming back to this. Or maybe @wlav has a hint?. > In the meantime, might there be anything I could try to ""persuade"" similar quirks, from either C++ or Python to make them work?. Unfortunately not. In ROOT, we don't use complicated template code with type traits in user interfaces. That's maybe my recommendation to you: can you simplify the user-facing interface and hide the templated stuff maybe behind some type-erased types or simplify it a bit? IMHO, templates are great for efficient implementations, but for user interfaces it can be a nightmare (think only about the error messages...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15062#issuecomment-2022342966:1793,error,error,1793,https://root.cern,https://github.com/root-project/root/issues/15062#issuecomment-2022342966,2,['error'],['error']
Availability,"> Are you trying to test the failure mode or should we just not run the test if the build does not support it?. The test should not run in inappropriate builds, @Axel-Naumann told me how to veto out the test if vecgeom is not enabled, and it seems to work, so we can merge this",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12315#issuecomment-1431915283:29,failure,failure,29,https://root.cern,https://github.com/root-project/root/pull/12315#issuecomment-1431915283,1,['failure'],['failure']
Availability,"> As a logical extension, the same happens for any additional branch that later files have, for example:. Thanks for the example. I simplified it further down to:. ```; #include ""TTree.h""; #include ""TFileMerger.h""; #include ""TFile.h""; #include ""TFileMergeInfo.h"". void printBranches(TTree *const tree) {; printf(""PrintBranches:\n"");; for (auto *branch : TRangeDynCast<TBranch>(tree->GetListOfBranches())) {; printf("" %s\n"", branch->GetName());; }; }. void ROOT_4716() {; TTree atree(""tree"", ""title"");; int value;; atree.Branch(""a"", &value);; printBranches(&atree);. TTree abtree(""tree"", ""title"");; abtree.Branch(""a"", &value);; abtree.Branch(""b"", &value);; value = 42;; abtree.Fill();; printBranches(&abtree);. TTree dummy;; TList treelist;; treelist.Add(&atree);; treelist.Add(&abtree);; std::unique_ptr<TFile> file(TFile::Open(""c.root"", ""RECREATE""));; TFileMergeInfo info(file.get());; dummy.Merge(&treelist, &info);; printBranches(&dummy);. treelist.Clear();; treelist.Add(&abtree);; std::unique_ptr<TFile> file2(TFile::Open(""d.root"", ""RECREATE""));; TFileMergeInfo info2(file2.get());; atree.Merge(&treelist, &info2);; printBranches(&atree);; }; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14558#issuecomment-2022610545:154,down,down,154,https://root.cern,https://github.com/root-project/root/issues/14558#issuecomment-2022610545,2,['down'],['down']
Availability,> As a side note did you ever think about using doxygen tag files? . ROOT documentation is included in many experiments' documentations. We provide the tag files for them . The page files can be downloaded (for various versions of the documentation)[ from this page](https://root.cern/reference/).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8742#issuecomment-888339683:195,down,downloaded,195,https://root.cern,https://github.com/root-project/root/issues/8742#issuecomment-888339683,1,['down'],['downloaded']
Availability,"> As a side remark, it sounds expensive to recreate all managers and passes for every module. Is this also what upstream does if it runs on multiple input files?. I agree that it might not be very efficient to recreate all managers/passes for every module. I've been looking upstream and couldn't find any instance where populating pass/analysis managers and running passes are separated (unlike the legacy pass manager). . I used this as a reference for this PR: https://reviews.llvm.org/D123425. [This issue](https://discourse.llvm.org/t/segmentation-faults-running-the-new-llvm-modulepassmanager-with-default-pipeline/59105) is what I think happened with the failing tests for us. From the thread, they recommend using a new instance every time we perform codegen as the analyses might not be cleared. I could also try using the clear() method instead,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14267#issuecomment-1864281326:553,fault,faults-running-the-new-llvm-modulepassmanager-with-default-pipeline,553,https://root.cern,https://github.com/root-project/root/pull/14267#issuecomment-1864281326,2,['fault'],['faults-running-the-new-llvm-modulepassmanager-with-default-pipeline']
Availability,"> As far as I understood, this only happens after some other libraries have been loaded? I tested .L libceleritas_root.so as the first action in a fresh root REPL, what else did you execute before that to make the error appear?. Nothing else :). The 'more' libraries comes from the fact that `libceleritas_root.so` is explicitly linked to many library and we tested that loading any and all those dependent libraries by themselves does not introduce any (noticeable) problems.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10162#issuecomment-1090214128:214,error,error,214,https://root.cern,https://github.com/root-project/root/issues/10162#issuecomment-1090214128,1,['error'],['error']
Availability,"> As to where these come from, my primary suspect would be fused-multiply-add instructions or other optimized floating point instructions that are not fully IEEE-754 compliant. I don't know exactly where, but I also don't think that you want to disable them globally and pay the performance penalty... Yep: At least for the first difference in `testRooAbsL` that I hunted down, mac13arm has a fused instruction in `RooAbsPdf::extendedTerm`. If instead of; https://github.com/root-project/root/blob/b7b8646c53724503b3c603de4cf633bc78270b5f/roofit/roofitcore/src/RooAbsPdf.cxx#L820-L822; I put; ```c++; printf("" expected = %.17g, log = %.17g\n"", expected, std::log(expected));; double test = sumEntries * std::log(expected);; printf("" test = %.17g\n"", test);; test = expected - test;; printf("" test = %.17g\n"", test);; #if 0; double extra = doOffset; ? (expected - sumEntries) - sumEntries * (std::log(expected) - std::log(sumEntries)); : expected - sumEntries * std::log(expected);; #endif; double extra = expected - sumEntries * std::log(expected);; printf("" extra = %.17g\n"", extra);; ```; I get the following output:; ```; test = 2390.5943542960845; test = -1990.5943542960845; extra = -1990.5943542960847; ```; with the corresponding assembly code being (with some annotations; the `fmsub` is at `ca518`); ```; ca4d0: 00 41 60 1e fmov d0, d8; ca4d4: c9 1c 07 94 bl 0x2917f8 <_write+0x2917f8> # likely the call to std::log; ca4d8: 0b 40 60 1e fmov d11, d0; ca4dc: e0 07 00 fd str d0, [sp, #8]; ca4e0: e8 03 00 fd str d8, [sp]; ca4e4: 20 10 00 f0 adrp x0, 0x2d1000 <RooAbsPdf::createNLL(RooAbsData&, RooLinkedList const&)+0x6e8>; ca4e8: 00 78 36 91 add x0, x0, #3486; ca4ec: ff 1c 07 94 bl 0x2918e8 <_write+0x2918e8> # print ""expected = %.17g, log = %.17g""; ca4f0: 6c 09 6a 1e fmul d12, d11, d10 # test = sumEntries * std::log(expected); ca4f4: ec 03 00 fd str d12, [sp]; ca4f8: 33 10 00 f0 adrp x19, 0x2d1000 <RooAbsPdf::createNLL(RooAbsData&, RooLinkedList const&)+0x6fc>; ca4fc: 73 16 37 91 add x1",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12389#issuecomment-1540239366:372,down,down,372,https://root.cern,https://github.com/root-project/root/pull/12389#issuecomment-1540239366,1,['down'],['down']
Availability,"> Aside, while discussing #7201 and constructing an example, I ran into that same `is_equal` redefinition mentioned above. All you need to do is this (from a ROOT build, not master):; > ; > ```; > >>> import cppyy; > >>> cppyy.gbl.TPython.Eval(""1+1""); > ```; > ; > and you get that error, which in turn tells me it's a pure ROOT issue, not a cppyy one, which doesn't have `TPython`. (You're certainly off the mark above in thinking it's ""jitted on the fly"" in Utilitiy.cxx, even in the ROOT fork of cppyy: what you point to is only the instantiation, not the declaration.). Thanks for pointing that out! Indeed, the redefinition is a red herring and not connected to the issues with accessing the new `RVec` impl from Python. I push this discussion in another thread.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7502#issuecomment-806076456:282,error,error,282,https://root.cern,https://github.com/root-project/root/pull/7502#issuecomment-806076456,1,['error'],['error']
Availability,"> At least on my machine substituting `Declare` with `ProcessLine` fixed the test failure, let's see what the CI has to say. We need to land that change in the master for consistency reasons.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14358#issuecomment-1894233627:82,failure,failure,82,https://root.cern,https://github.com/root-project/root/pull/14358#issuecomment-1894233627,1,['failure'],['failure']
Availability,"> BTW I guess a downside of this patch is that checking out a different branch/ROOT version in the source directory might break your build, which wouldn't happen now, right?. This happens also now. If you check out a branch that removed a header (and it's not in a directory where Vassil managed to switch to the ""use headers from source directory"" mode), you have to wipe.; Also, the deleted headers will just remain in your include directory, so you don't see cling errors until you run the CI (unless you are using modules, I assume).; I *assume* that we could make this smarter, i.e., to remove symlinks to non-existing headers. That would need an extra cmake command that checks for broken links.; I'll admit, though, that we would need something like this even now, where it should delete outdated headers. Oh, and now I realise that you probably mean the binaries. Building is probably possible, but previously built binaries might not work, because cling searches through an include directory with broken links. Unless the modules save you because cling doesn't actually search ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6010#issuecomment-656550549:16,down,downside,16,https://root.cern,https://github.com/root-project/root/pull/6010#issuecomment-656550549,2,"['down', 'error']","['downside', 'errors']"
Availability,"> Before I review and out of curiosity, did you consider `interpreter/llvm`, `interpreter/clang`, `interpreter/cling`, `interpreter/cmake`, etc? Is that worse because the top-most directory doesn't correspond to upstream anymore?. Yes, and two consequences thereof: (a) I want to avoid a conflict further down the line if LLVM ever puts a `CMakeLists.txt` in their top-level directory, and (b) we had the proposal at some point to replace our copy in `interpreter/llvm/` by a submodule, which requires a directory on its own. > If so, would `interpreter/llvm-project/llvm` be better than `interpreter/llvm/llvm`, because it's signalling that this is from upstream?. Yes, I'm open to that - I thought about it, but it requires changing a few more paths to `interpreter/llvm/ROOT/` and I was lazy. Btw do we still need those headers with C++ modules? `core/clingutils/CMakeLists.txt` even copies some headers from the build system...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13049#issuecomment-1598984214:305,down,down,305,https://root.cern,https://github.com/root-project/root/pull/13049#issuecomment-1598984214,1,['down'],['down']
Availability,"> Before we can merge (or even test) this, the version needs to be uploaded at https://lcgpackages.web.cern.ch/tarFiles/sources/. I assume that @simonmichal or @abh3 can do this?. > The checksum of the github files are not stable (somehow the files are 'routinely' regenerated sometimes with different version of tar or gzip), so we can not rely on downloading it directly from github. Ah that's interesting. Good to know for the future.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10725#issuecomment-1151363501:349,down,downloading,349,https://root.cern,https://github.com/root-project/root/pull/10725#issuecomment-1151363501,1,['down'],['downloading']
Availability,"> Beside reinstating the lock, this is a long PR review and we ought to revisit all the comments and finalize them (@Axel-Naumann also need to look at some of the answers) by marking them as ""resolved"" once there is a satisfactory conclusion (for each individually). @pcanal, @Axel-Naumann ping…",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11252#issuecomment-1272231923:290,ping,ping,290,https://root.cern,https://github.com/root-project/root/pull/11252#issuecomment-1272231923,1,['ping'],['ping']
Availability,"> Build failed on ROOT-fedora29/python3.; > Running on root-fedora29-3.cern.ch:/build/workspace/root-pullrequests-build; > [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5496-ROOT-fedora29-python3&date=2020-04-29).; > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/79377/console).; > ; > ### Errors:; > * [2020-04-29T15:50:23.917Z] CMake Error at cmake/modules/SearchInstalledSoftware.cmake:1498 (message):; > * [2020-04-29T15:50:23.917Z] CMake Error at /mnt/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:941 (message):. This is understood, waiting for Axel's PR about fail-on-missing to adapt on top on it",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5496#issuecomment-621306656:408,Error,Errors,408,https://root.cern,https://github.com/root-project/root/pull/5496#issuecomment-621306656,3,['Error'],"['Error', 'Errors']"
Availability,> Build failed on ROOT-fedora30/cxx14.; > Running on root-fedora30-1.cern.ch:/build/workspace/root-pullrequests-build; > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/106458/console).; > ; > ### Errors:; > * [2021-02-11T17:52:31.264Z] FAILED: core/base/test/CMakeFiles/CoreBaseTests.dir/TStringTest.cxx.o; > * [2021-02-11T17:52:31.570Z] /build/workspace/root-pullrequests-build/root/core/base/test/TStringTest.cxx:10:21: error: ‘n’ was not declared in this scope; did you mean ‘yn’?. Fixed this.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7132#issuecomment-777677750:243,Error,Errors,243,https://root.cern,https://github.com/root-project/root/pull/7132#issuecomment-777677750,2,"['Error', 'error']","['Errors', 'error']"
Availability,"> Build failed on ROOT-fedora30/cxx14.; > Running on root-fedora30-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115053/console).; > ; > ### Errors:; > * [2021-04-20T13:41:37.174Z] FAILED: interpreter/llvm/src/lib/Demangle/CMakeFiles/LLVMDemangle.dir/Demangle.cpp.o; > * [2021-04-20T13:41:37.174Z] c++: error: brokenFlag: No such file or directory. I guess that settles it @stwunsch. 🙂 ; - CI builds are `RELEASE`; - Setting the flags from the outside works.; - When you don't set anything, the CI passes.; - The assert build that we have in the nightlies can be activated using either; - `cmake -Dasserts=On ...` or; - `cmake -DCMAKE_CXX_FLAGS_RELEASE=""-O3""`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7932#issuecomment-823307275:257,Error,Errors,257,https://root.cern,https://github.com/root-project/root/pull/7932#issuecomment-823307275,2,"['Error', 'error']","['Errors', 'error']"
Availability,> Build failed on ROOT-fedora31/noimt.; > Running on root-fedora-31-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; > [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5919-ROOT-fedora31-noimt&date=2020-07-15).; > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/89877/console).; > ### Errors:; > ; > * [2020-07-15T17:08:37.106Z] CMake Error at cmake/modules/SearchInstalledSoftware.cmake:1128 (message):. https://github.com/root-project/root/blob/e47774fc9887a4dedfaeeef42ed379c0a5a8ddb2/cmake/modules/SearchInstalledSoftware.cmake#L1126-L1128. @oshadura I think we maybe need to install `liburing` on the `fedora31` machine? :),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5919#issuecomment-658922862:415,Error,Errors,415,https://root.cern,https://github.com/root-project/root/pull/5919#issuecomment-658922862,2,['Error'],"['Error', 'Errors']"
Availability,"> Build failed on ROOT-performance-centos8-multicore/cxx17. These failure are pre-existing, I opened https://github.com/root-project/root/issues/13058. I briefly discussed with Axel, and we decided to merge this for now. In the worst case, somebody building their own ROOT binaries without C++ runtime modules will complain when installing on a system with non-matching headers, in which case we'll investigate (hopefully all experiments enable C++ runtime modules by now).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13054#issuecomment-1600977888:66,failure,failure,66,https://root.cern,https://github.com/root-project/root/pull/13054#issuecomment-1600977888,1,['failure'],['failure']
Availability,"> Build failed on ROOT-ubuntu16/nortcxxmod. Running on sft-ubuntu-1604-4.cern.ch:/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/139908/console).; > ### Errors:; > ; > * [2022-03-21T17:21:12.635Z] stderr: error: Failed to merge in the changes.; > ; > * [2022-03-21T17:21:19.919Z] CMake Error at /mnt/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:1082 (message):. I just rebased to prevent the build from failing, in case you could restart the build now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9655#issuecomment-1074224117:240,Error,Errors,240,https://root.cern,https://github.com/root-project/root/pull/9655#issuecomment-1074224117,3,"['Error', 'error']","['Error', 'Errors', 'error']"
Availability,> Build failed on ROOT-ubuntu16/nortcxxmod.; > Running on sft-ubuntu-1604-1.cern.ch:/build/workspace/root-pullrequests-build; > [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-6212-ROOT-ubuntu16-nortcxxmod&date=2020-08-19).; > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/93129/console).; > ### Errors:; > ; > * [2020-08-19T09:18:13.430Z] CMake Error at cmake/modules/SearchInstalledSoftware.cmake:721 (message):; > ; > * [2020-08-19T09:18:13.430Z] CMake Error at /mnt/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:1048 (message):. ```; 12:18:13 CMake Error at cmake/modules/SearchInstalledSoftware.cmake:721 (message):; 12:18:13 Pythia8 libraries not found and they are required (pythia8 option enabled); 12:18:13 Call Stack (most recent call first):; 12:18:13 CMakeLists.txt:213 (include); ```. @Axel-Naumann can you install what's needed on that node?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6212#issuecomment-676209492:412,Error,Errors,412,https://root.cern,https://github.com/root-project/root/pull/6212#issuecomment-676209492,4,['Error'],"['Error', 'Errors']"
Availability,> Build failed on ROOT-ubuntu16/nortcxxmod.; > Running on sft-ubuntu-1604-3.cern.ch:/build/workspace/root-pullrequests-build; > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/108296/console).; > ; > ### Errors:; > * [2021-03-01T16:00:58.827Z] FAILED: /usr/bin/ccache /usr/bin/c++ -DVECCORE_ENABLE_VC -I/mnt/build/workspace/root-pullrequests-build/root/math/mathmore/inc -I/mnt/build/workspace/root-pullrequests-build/root/core/unix/inc -I/mnt/build/workspace/root-pullrequests-build/root/core/clingutils/inc -I/mnt/build/workspace/root-pullrequests-build/root/core/textinput/inc -I/mnt/build/workspace/root-pullrequests-build/root/core/thread/inc -I/mnt/build/workspace/root-pullrequests-build/root/core/zip/inc -I/mnt/build/workspace/root-pullrequests-build/root/core/rint/inc -I/mnt/build/workspace/root-pullrequests-build/root/core/clib/inc -I/mnt/build/workspace/root-pullrequests-build/root/core/meta/inc -I/mnt/build/workspace/root-pullrequests-build/root/core/gui/inc -I/mnt/build/workspace/root-pullrequests-build/root/core/cont/inc -I/mnt/build/workspace/root-pullrequests-build/root/core/foundation/inc -I/mnt/build/workspace/root-pullrequests-build/root/core/base/inc -Iginclude -I/mnt/build/workspace/root-pullrequests-build/root/math/mathcore/inc -I/mnt/build/workspace/root-pullrequests-build/root/math/mathcore/v7/inc -I/mnt/build/workspace/root-pullrequests-build/root/core/imt/inc -I/mnt/build/workspace/root-pullrequests-build/root/core/multiproc/inc -Iexternals/mnt/build/workspace/root-pullrequests-build/install/include -I/mnt/build/workspace/root-pullrequests-build/root/net/net/inc -I/mnt/build/workspace/root-pullrequests-build/root/io/io/inc -fdiagnostics-color=always -std=c++11 -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -fPIC -std=c++11 -MD -MT math/mathmore/CMakeFiles/MathMore.dir/src/GSLRndmEngines.cxx.o -MF math/mathmore/CMakeFiles/MathMore.dir/src/GSLRndmEngines.cxx.o.d -o math/mathmore/CMa,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7186#issuecomment-801496369:250,Error,Errors,250,https://root.cern,https://github.com/root-project/root/pull/7186#issuecomment-801496369,1,['Error'],['Errors']
Availability,> Build failed on ROOT-ubuntu16/nortcxxmod.; > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/72624/console).; > ; > ### Errors:; > * FAILED: cd /mnt/build/workspace/root-pullrequests-build/build && /usr/bin/python /mnt/build/workspace/root-pullrequests-build/root/build/unix/makepchinput.py /mnt/build/workspace/root-pullrequests-build/root . ON etc/cling/Interpreter/DynamicExprInfo.h etc/cling/Interpreter/DynamicLookupRuntimeUniverse.h etc/cling/Interpreter/DynamicLookupLifetimeHandler.h etc/cling/Interpreter/Exception.h etc/cling/Interpreter/RuntimePrintValue.h etc/cling/Interpreter/RuntimeUniverse.h etc/cling/Interpreter/Value.h && /usr/local/bin/cmake -E env ROOTIGNOREPREFIX=1 /usr/bin/python /mnt/build/workspace/root-pullrequests-build/root/etc/dictpch/makepch.py etc/allDict.cxx.pch -I/mnt/build/workspace/root-pullrequests-build/build/include. Build and tests were tried separately in this machine.; Everything is fine.; The build directory is:. /home/sftnight/gallim_multipython/build. Don't know why it does not work with Jenkins.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4647#issuecomment-561624257:153,Error,Errors,153,https://root.cern,https://github.com/root-project/root/pull/4647#issuecomment-561624257,1,['Error'],['Errors']
Availability,"> Build failed on ROOT-ubuntu2004/python3. Running on root-ubuntu-2004-1.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/176637/console).; > ### Errors:; > ; > * [2023-06-09T14:16:59.045Z] FAILED: tree/dataframe/G__ROOTDataFrame.cxx lib/ROOTDataFrame.pcm. A docker container with ubuntu20 and GCC 9.4 can't reproduce this failure, what fun :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12981#issuecomment-1584661380:254,Error,Errors,254,https://root.cern,https://github.com/root-project/root/pull/12981#issuecomment-1584661380,2,"['Error', 'failure']","['Errors', 'failure']"
Availability,> Build failed on ROOT-ubuntu2004/soversion. Running on root-ubuntu-2004-3.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/134230/console).; > ### Failing tests:; > ; > * [projectroot.roottest.root.hist.operator.roottest_root_hist_operator_runsparse](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/134230/testReport/projectroot.roottest.root.hist/operator/roottest_root_hist_operator_runsparse/); > ; > * [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_execFileMerger](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/134230/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_execFileMerger/). These failures are totally unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9580#issuecomment-1014438815:808,failure,failures,808,https://root.cern,https://github.com/root-project/root/pull/9580#issuecomment-1014438815,1,['failure'],['failures']
Availability,> Build failed on mac1014/cxx17.; > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71275/console).; > ; > ### Errors:; > * CMake Error at cmake/modules/RootBuildOptions.cmake:396 (message):; > * CMake Error at /build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:941 (message):; > ; > ### Warnings:; > * CMake Warning at /build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):. Fails because it configures more than once (don't know why) and if the python executable changes we need to specify also the other two flags PYTHON_LIBRARY and PYTHON_INCLUDE_DIR. Manual build needed on this machine.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4279#issuecomment-547601898:142,Error,Errors,142,https://root.cern,https://github.com/root-project/root/pull/4279#issuecomment-547601898,3,['Error'],"['Error', 'Errors']"
Availability,> Build failed on mac1014/python3.; > Running on macitois21.cern.ch:/build/jenkins/workspace/root-pullrequests-build; > [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5845-mac1014-python3&date=2020-06-10).; > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86291/console). Please ignore that failure. It was from a experimental feature which I work on.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5845#issuecomment-642147882:407,failure,failure,407,https://root.cern,https://github.com/root-project/root/pull/5845#issuecomment-642147882,1,['failure'],['failure']
Availability,"> Build failed on mac11/cxx14.; > Running on macphsft20.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build; > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/171051/console). @guitargeek Are the RooFit errors above known, or might this be caused by this PR?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12536#issuecomment-1482468039:268,error,errors,268,https://root.cern,https://github.com/root-project/root/pull/12536#issuecomment-1482468039,1,['error'],['errors']
Availability,> Build failed on mac11/cxx17. Running on macphsft23.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/139454/console).; > ### Failing tests:; > ; > * [projectroot.runtutorials.tutorial_tmva_TMVA_CNN_Classification](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/139454/testReport/projectroot/runtutorials/tutorial_tmva_TMVA_CNN_Classification/); > ; > * [projectroot.runtutorials.tutorial_tmva_TMVA_RNN_Classification](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/139454/testReport/projectroot/runtutorials/tutorial_tmva_TMVA_RNN_Classification/); > ; > * [projectroot.roottest.python.basic.roottest_python_basic_basic](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/139454/testReport/projectroot.roottest.python/basic/roottest_python_basic_basic/); > ; > * [projectroot.roottest.python.cling.roottest_python_cling_class](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/139454/testReport/projectroot.roottest.python/cling/roottest_python_cling_class/); > ; > * [projectroot.roottest.python.cling.roottest_python_cling_api](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/139454/testReport/projectroot.roottest.python/cling/roottest_python_cling_api/); > ; > * [projectroot.roottest.python.regression.roottest_python_regression_regression](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/139454/testReport/projectroot.roottest.python/regression/roottest_python_regression_regression/). These failures seem totally unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10123#issuecomment-1068033264:1662,failure,failures,1662,https://root.cern,https://github.com/root-project/root/pull/10123#issuecomment-1068033264,1,['failure'],['failures']
Availability,> Build failed on mac12arm/cxx20. Running on 194.12.161.128:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/191362/console).; > ### Errors:; > ; > * [2023-12-13T16:51:50.723Z] FAILED: interpreter/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/ValuePrinter.cpp.o; > ; > * [2023-12-13T16:51:50.723Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/interpreter/cling/lib/Interpreter/ValuePrinter.cpp:44:10: fatal error: 'source_location' file not found. This needs to be understood as well; maybe the SDK doesn't have all C++20 headers yet? Maybe we have to use the feature macro [`__cpp_lib_source_location`](https://en.cppreference.com/w/cpp/feature_test#cpp_lib_source_location) instead...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14218#issuecomment-1855368988:234,Error,Errors,234,https://root.cern,https://github.com/root-project/root/pull/14218#issuecomment-1855368988,2,"['Error', 'error']","['Errors', 'error']"
Availability,> Build failed on mac12arm/cxx20. Running on macphsft26.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179637/console).; > ### Errors:; > ; > * [2023-07-13T08:50:12.176Z] FAILED: roofit/roofitcore/G__RooFitCore.cxx lib/RooFitCore.pcm /Users/sftnight/build/workspace/root-pullrequests-build/build/roofit/roofitcore/G__RooFitCore.cxx /Users/sftnight/build/workspace/root-pullrequests-build/build/lib/RooFitCore.pcm; > ; > * [2023-07-13T08:50:13.545Z] /Users/sftnight/build/workspace/root-pullrequests-build/build/include/RooSpan.h:64:3: error: no matching constructor for initialization of 'std::span<const int>'. This will be addressed by https://github.com/root-project/root/pull/13242.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13240#issuecomment-1633949246:245,Error,Errors,245,https://root.cern,https://github.com/root-project/root/pull/13240#issuecomment-1633949246,2,"['Error', 'error']","['Errors', 'error']"
Availability,"> Build failed on windows10/cxx14. Running on null:C:\build\workspace\root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/139399/console).; > ### Errors:; > ; > * [2022-03-15T09:41:07.706Z] ghprbPullLongDescription=`\r\nIn file included from /builddir/build/BUILD/root-6.26.00/tmva/sofie/inc/TMVA/RModel.hxx:14,\r\n from /builddir/build/BUILD/root-6.26.00/tmva/sofie/src/RModel.cxx:3:\r\n/builddir/build/BUILD/root-6.26.00/tmva/sofie/inc/TMVA/SOFIE_common.hxx: In member function 'void TMVA::Experimental::SOFIE::InitializedTensor::CastPersistentToShared()':\r\n/builddir/build/BUILD/root-6.26.00/tmva/sofie/inc/TMVA/SOFIE_common.hxx:75:12: error: 'memcpy' is not a member of 'std'; did you mean 'wmemcpy'?\r\n 75 | std::memcpy(tData.get(), fPersistentData,fSize * sizeof(float));\r\n | ^~~~~~\r\n | wmemcpy\r\ngmake[2]: *** [tmva/sofie/CMakeFiles/ROOTTMVASofie.dir/build.make:79: tmva/sofie/CMakeFiles/ROOTTMVASofie.dir/src/RModel.cxx.o] Error 1\r\n`\r\n\r\n# This Pull request:\r\n\r\n## Changes or fixes:\r\n\r\nAdd #include &lt;cstring&gt; for std::memcpy\r\n\r\n## Checklist:\r\n\r\n- [x] tested changes locally\r\n- [ ] updated the docs (if necessary)\r\n\r\n. The build reports an error because it quotes the git commit message in the log and then detects the quoted error message in the commit message as a failure when it parses the log.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10116#issuecomment-1068139049:212,Error,Errors,212,https://root.cern,https://github.com/root-project/root/pull/10116#issuecomment-1068139049,6,"['Error', 'error', 'failure']","['Error', 'Errors', 'error', 'failure']"
Availability,"> Build failed on windows10/cxx14. Running on null:C:\build\workspace\root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/149183/console).; > ; > ### Errors:; > * [2022-07-05T13:46:09.199Z] CMake Error at C:/build/workspace/root-pullrequests-build/build/TBB-prefix/src/TBB-stamp/TBB-install-Release.cmake:49 (message):; > * [2022-07-05T13:46:39.257Z] CMake Error at C:/build/workspace/root-pullrequests-build/build/AFTERIMAGE-prefix/src/AFTERIMAGE-stamp/AFTERIMAGE-install-Release.cmake:49 (message):. If you want to work-around these errors, applying this diff should fix it:; ``` ; diff --git a/CMakeLists.txt b/CMakeLists.txt; index 93034be00d..66bceeba04 100644; --- a/CMakeLists.txt; +++ b/CMakeLists.txt; @@ -41,6 +41,7 @@ project(ROOT); set(ENV{LANG} C). #---Set paths where to put the libraries, executables and headers------------------------------; +file(MAKE_DIRECTORY ${CMAKE_BINARY_DIR}/lib); set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib); set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib); set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin); ```; And I'll investigate later why it has this strange behavior",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1175107252:216,Error,Errors,216,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1175107252,4,"['Error', 'error']","['Error', 'Errors', 'errors']"
Availability,"> Build failed on windows10/cxx14. Running on null:C:\build\workspace\root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151667/console).; > ### Errors:; > ; > * [2022-08-10T11:41:30.438Z] C:\build\workspace\root-pullrequests-build\build\bin\libCling.dll : fatal error LNK1120: 3 unresolved externals [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. ```; 14:41:28 RIO.vcxproj -> C:\build\workspace\root-pullrequests-build\build\bin\libRIO.dll; 14:41:28 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/metacling/src/CMakeLists.txt; 14:41:28 Auto build dll exports; 14:41:30 Creating library C:/build/workspace/root-pullrequests-build/build/lib/libCling.lib and object C:/build/workspace/root-pullrequests-build/build/lib/libCling.exp; 14:41:30 cladPlugin.lib(ClangPlugin.obj) : error LNK2019: unresolved external symbol ""public: struct clad::DerivativeAndOverload __thiscall clad::DerivativeBuilder::Derive(class clad::DiffRequest const &)"" (?Derive@DerivativeBuilder@clad@@QAE?AUDerivativeAndOverload@2@ABVDiffRequest@2@@Z) referenced in function ""public: class clang::FunctionDecl * __thiscall clad::plugin::CladPlugin::ProcessDiffRequest(struct clad::DiffRequest &)"" (?ProcessDiffRequest@CladPlugin@plugin@clad@@QAEPAVFunctionDecl@clang@@AAUDiffRequest@3@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]; 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActAfterParsingDiffArgs(struct clad::DiffRequest const &,class llvm::SmallVector<class clang::ValueDecl const *,16> &)"" (?ActAfterParsingDiffArgs@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@AAV?$SmallVector@PBVValueDecl@clang@@$0BA@@llvm@@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]; 14:41:30 cladDifferen",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11166#issuecomment-1210567865:212,Error,Errors,212,https://root.cern,https://github.com/root-project/root/pull/11166#issuecomment-1210567865,2,"['Error', 'error']","['Errors', 'error']"
Availability,"> Build failed on windows10/cxx14. Running on null:C:\build\workspace\root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/164724/console).; > ### Failing tests:; > ; > * [projectroot.math.mathcore.test.gtest_math_mathcore_test_CladDerivatorTests](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/164724/testReport/projectroot.math.mathcore/test/gtest_math_mathcore_test_CladDerivatorTests/). @arora-vidushi, the test fails on windows with:. ```; [ RUN ] CladDerivator.logx6; C:\build\workspace\root-pullrequests-build\root\math\mathcore\test\CladDerivatorTests.cxx(208): error: Expected equality of these values:; -0.43429448190325176; value->GetAsDouble(); Which is: 4.4274168156280442e+20; [ FAILED ] CladDerivator.logx6 (13 ms); [ RUN ] CladDerivator.minimum; [ OK ] CladDerivator.minimum (24 ms); [ RUN ] CladDerivator.erf1; [ OK ] CladDerivator.erf1 (31 ms); [ RUN ] CladDerivator.erf2; C:\build\workspace\root-pullrequests-build\root\math\mathcore\test\CladDerivatorTests.cxx(245): error: Expected equality of these values:; -0.83021499484118955; value->GetAsDouble(); Which is: -1.9812626051377354e-49; [ FAILED ] CladDerivator.erf2 (18 ms); [ RUN ] CladDerivator.erfc1; [ OK ] CladDerivator.erfc1 (10 ms); [ RUN ] CladDerivator.erfc2; C:\build\workspace\root-pullrequests-build\root\math\mathcore\test\CladDerivatorTests.cxx(269): error: Expected equality of these values:; 0.83021499484118955; value->GetAsDouble(); Which is: 1.9812626051377354e-49; [ FAILED ] CladDerivator.erfc2 (13 ms); ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12021#issuecomment-1398190065:661,error,error,661,https://root.cern,https://github.com/root-project/root/pull/12021#issuecomment-1398190065,3,['error'],['error']
Availability,> Build failed on windows10/cxx14. Running on null:C:\build\workspace\root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/174986/console). Failure is not related; seen in other PRs (and I think @bellenot is also aware).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12855#issuecomment-1555252113:205,Failure,Failure,205,https://root.cern,https://github.com/root-project/root/pull/12855#issuecomment-1555252113,1,['Failure'],['Failure']
Availability,"> Build failed on windows10/cxx14.; > Running on null:C:\build\workspace\root-pullrequests-build; > [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5552-windows10-cxx14&date=2020-06-06).; > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/85621/console).; > ; > ### Errors:; > * [2020-06-06T10:06:37.755Z] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring(3019,1): fatal error C1088: Cannot flush compiler intermediate file: 'C:\Users\sftnight\AppData\Local\Temp_CL_60f507d3sy': No space left on device [C:\build\workspace\root-pullrequests-build\build\test\TBench.vcxproj]; > * [2020-06-06T10:06:37.755Z] C:\Program Files (x86)\Microsoft Visual > ; > And 50 more. Sorry, my bad, I had to free disk space on the Windows nodes...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5552#issuecomment-640035031:379,Error,Errors,379,https://root.cern,https://github.com/root-project/root/pull/5552#issuecomment-640035031,2,"['Error', 'error']","['Errors', 'error']"
Availability,> Build failed on windows10/cxx14.; > Running on null:C:\build\workspace\root-pullrequests-build; > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/106671/console). @pcanal I can't check the error log (no permission). Let me know if I can fix the error somehow. Thanks!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7200#issuecomment-871412157:237,error,error,237,https://root.cern,https://github.com/root-project/root/pull/7200#issuecomment-871412157,2,['error'],['error']
Availability,"> Build failed on windows10/cxx14.; > Running on null:C:\build\workspace\root-pullrequests-build; > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/112283/console).; > ### Failing tests:; > ; > * [projectroot.roottest.cling.other.roottest_cling_other_checkMissingSymbolExitCode](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/112283/testReport/projectroot.roottest.cling/other/roottest_cling_other_checkMissingSymbolExitCode/). @bellenot, could you help here. This patch, when seeing an unknown symbol, iterates over all libraries available in ROOT's current library paths; scans for the symbol; and proposes which library to load. The diagnostics seems to be coming from something opening and not releasing the file lock (which frankly makes no sense as we should have seen that before on different occasions). . The only place I can find `CreateFile` is [here](https://github.com/root-project/root/blob/master/core/winnt/src/TWinNTSystem.cxx#L4127) -- is that the one triggers the original issue?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6606#issuecomment-808856045:603,avail,available,603,https://root.cern,https://github.com/root-project/root/pull/6606#issuecomment-808856045,1,['avail'],['available']
Availability,"> Build failed on windows10/cxx14.; > Running on null:C:\build\workspace\root-pullrequests-build; > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/116839/console).; > ### Errors:; > ; > * [2021-05-05T15:12:47.599Z] CMake Error at C:/Program Files/CMake/share/cmake-3.18/Modules/FindPackageHandleStandardArgs.cmake:165 (message):; > ; > * [2021-05-05T15:12:47.599Z] CMake Error at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:1107 (message):. @oshadura I think that we should also disable `daos_mock` on Windows, as it depends on `libuuid`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8094#issuecomment-832797544:218,Error,Errors,218,https://root.cern,https://github.com/root-project/root/pull/8094#issuecomment-832797544,3,['Error'],"['Error', 'Errors']"
Availability,> Build failed on windows10/cxx14.; > Running on null:C:\build\workspace\root-pullrequests-build; > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/164530/console). These failures are totally unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12049#issuecomment-1386202607:217,failure,failures,217,https://root.cern,https://github.com/root-project/root/pull/12049#issuecomment-1386202607,1,['failure'],['failures']
Availability,> Build failed on windows10/cxx14.; > Running on null:C:\build\workspace\root-pullrequests-build; > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169198/console). Failure is totally unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12377#issuecomment-1446219754:211,Failure,Failure,211,https://root.cern,https://github.com/root-project/root/pull/12377#issuecomment-1446219754,1,['Failure'],['Failure']
Availability,"> Build failed on windows10/default. Running on null:C:\build\workspace\root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/195088/console).; > ; > ### Failing tests:; > * [projectroot.roofit.roofitcore.test.gtest_roofit_roofitcore_test_testRooFuncWrapper](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/195088/testReport/projectroot.roofit.roofitcore/test/gtest_roofit_roofitcore_test_testRooFuncWrapper/). @guitargeek, could you take a look at the failure and maybe suggest what needs suppressing on windows?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14654#issuecomment-1938425658:542,failure,failure,542,https://root.cern,https://github.com/root-project/root/pull/14654#issuecomment-1938425658,1,['failure'],['failure']
Availability,"> Build failed on windows10/default. Running on null:C:\build\workspace\root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/196397/console). Hi @bellenot, do you have a clue if that failure is related to this particular PR?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14794#issuecomment-1959729341:248,failure,failure,248,https://root.cern,https://github.com/root-project/root/pull/14794#issuecomment-1959729341,1,['failure'],['failure']
Availability,"> Build failed on windows10/default.; > Running on null:C:\build\workspace\root-pullrequests-build; > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/182470/console).; > ### Failing tests:; > ; > * [projectroot.tree.dataframe.test.gtest_tree_dataframe_test_datasource_root](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/182470/testReport/projectroot.tree.dataframe/test/gtest_tree_dataframe_test_datasource_root/). Ok, this test failure is pretty interesting:; ```; [ RUN ] TRootTDS.FromARDFMT; C:\build\workspace\root-pullrequests-build\root\core\testsupport\src\TestSupport.cxx(77): error: Failed; Received unexpected diagnostic of severity 3000 at 'TFile::TFile' reading 'file C:/build/workspace/root-pullrequests-build/build/tree/dataframe/test/RCsvDS_test_headers.cs does not exist'.; Suppress those using ROOT/TestSupport.hxx; C:\build\workspace\root-pullrequests-build\root\core\testsupport\src\TestSupport.cxx(77): error: Failed; Received unexpected diagnostic of severity 3000 at 'TChain::SetBranchAddress' reading 'unknown branch -> i'.; Suppress those using ROOT/TestSupport.hxx; C:\build\workspace\root-pullrequests-build\root\core\testsupport\src\TestSupport.cxx(77): error: Failed; Received unexpected diagnostic of severity 3000 at 'TChain::SetBranchAddress' reading 'unknown branch -> g'.; Suppress those using ROOT/TestSupport.hxx; C:\build\workspace\root-pullrequests-build\root\tree\dataframe\test\datasource_root.cxx(175): error: Expected equality of these values:; 29.; Which is: 29; *max; Which is: 13; [ FAILED ] TRootTDS.FromARDFMT (9 ms); [ RUN ] TRootTDS.FromARDFWithJittingMT; C:\build\workspace\root-pullrequests-build\root\core\testsupport\src\TestSupport.cxx(77): error: Failed; Received unexpected diagnostic of severity 3000 at 'TChain::LoadTree' reading 'Cannot find tree with name t in file C:/build/workspace/root-pullrequests-build/build/tree/dataframe/test/specTestDescribe3.root'.; Suppress",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13460#issuecomment-1681726222:502,failure,failure,502,https://root.cern,https://github.com/root-project/root/pull/13460#issuecomment-1681726222,2,"['error', 'failure']","['error', 'failure']"
Availability,> Build failed on windows10/default.; > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/53471/console). Could someone show me the error logs when building on Windows? (I do not have the relevant permission),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3405#issuecomment-462216565:161,error,error,161,https://root.cern,https://github.com/root-project/root/pull/3405#issuecomment-462216565,1,['error'],['error']
Availability,"> But anyway furthermore, if we put stuff that is 'needed' (i.e. handling genuine difference not bugs in the compiler) then we will be ready when they are. I fully agree here. Just because nvc++ cannot compile ROOT now does not mean we should make it even harder to get there. Especially, since I already invested the time to find out what's needed in cmake. And they are actually fairly small, so I am also not proposing a maintenance nightmare.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14370#issuecomment-1899376235:424,mainten,maintenance,424,https://root.cern,https://github.com/root-project/root/pull/14370#issuecomment-1899376235,1,['mainten'],['maintenance']
Availability,"> But how do you solve the modules.idx creation, can you link to a patch?. The build is actually cross-compiling as requested in the `conda-forge.yml` file (e.g. [here](https://github.com/conda-forge/root-feedstock/blob/1987df5fb087fb149f114dab14f6dd5f99e3156d/conda-forge.yml#L4)). Then the conda forge CI is able to automatically detect that an executable e.g. `rootcling_stage1` that is being invoked during the build was built for a different target platform than the build one. In such cases, it runs that executable via `qemu` (which in turn is enabled by `binfmt_misc`). There's some hint of it in the CI files such as https://github.com/conda-forge/root-feedstock/blob/1987df5fb087fb149f114dab14f6dd5f99e3156d/.azure-pipelines/azure-pipelines-linux.yml#L90-L96 (these are generated automatically by conda-forge). This does not explain alone the fact that there is also a patch to disable `hsimple.root` generation in the conda forge ROOT feedstock. At some point in the past that was generating some other problem at build time (unclear whether that was only fault of ROOT or also a bug in qemu itself, see [this bug report](https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=999421)), so that patch was added. IMHO clearly the better approach is to have less patches and walk towards a fully cross-compilable ROOT build, albeit this PR might be just a very small step.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15930#issuecomment-2205465973:1067,fault,fault,1067,https://root.cern,https://github.com/root-project/root/pull/15930#issuecomment-2205465973,2,['fault'],['fault']
Availability,> But how it not recognize such simple error?. Likely because the includes happen to be ordered such that `vector` etc are included before that header gets included.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4380#issuecomment-530800769:39,error,error,39,https://root.cern,https://github.com/root-project/root/pull/4380#issuecomment-530800769,2,['error'],['error']
Availability,"> But the builtin -I should always have higher ""priority"" (come first) - that seems like a bug?. It would be nice to reproduce such error, but I do not have such configuration.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12492#issuecomment-1478008919:132,error,error,132,https://root.cern,https://github.com/root-project/root/issues/12492#issuecomment-1478008919,1,['error'],['error']
Availability,"> By chance do you know where to download it from ? it does not seem obvious. I think from Git: https://docs.mathjax.org/en/latest/web/hosting.html#getting-mathjax-via-git. The other way is to put directly an URL in the Doxyfile, this way it is automatic:; `MATHJAX_RELPATH = https://cdn.jsdelivr.net/npm/mathjax@3`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10067#issuecomment-1061658340:33,down,download,33,https://root.cern,https://github.com/root-project/root/issues/10067#issuecomment-1061658340,1,['down'],['download']
Availability,"> By the way, where did you take root from ? did you built it yourself ?. I downloaded the source code from the official website, https://root.cern/releases/release-62806/. I made no changes to the source code and subsequently compiled and installed root. I think it's the macos upgrade that's causing this bug, because everything was fine before the upgrade.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13834#issuecomment-1756823183:76,down,downloaded,76,https://root.cern,https://github.com/root-project/root/issues/13834#issuecomment-1756823183,1,['down'],['downloaded']
Availability,"> Can I just run the test macros and take the results as new reference values or do they need to be calculated on a specific system with specific configurations?. You should be able to run it on almost any system. If the results changed across systems, we would constantly see a lot of failures.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4721#issuecomment-572457405:286,failure,failures,286,https://root.cern,https://github.com/root-project/root/pull/4721#issuecomment-572457405,1,['failure'],['failures']
Availability,"> Can we first try with joining? We only see multiproc failures on Macs since very recently - before disabling it altogether I'd prefer to give your fix a try. Ok, I'll prepare a PR for `roottest`. However, joining will only help for `tExecutor` which also fails on Linux (esp. `i386`, due to resource contention I suppose). `processExecutor` is failing since a longer time, https://github.com/root-project/root/pull/6800#issuecomment-726714882 is also on Mac.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7075#issuecomment-766846669:55,failure,failures,55,https://root.cern,https://github.com/root-project/root/pull/7075#issuecomment-766846669,1,['failure'],['failures']
Availability,"> Can you also instrument IncrementalExecutor::diagnoseUnresolvedSymbols to print its error to std::cout so we get more details?. I converted instances of `cling::errs` to `cling::outs`, no output is shown from that function when the error appears. > Most likely the problem is that TClingClassInfo::IsEnum is missing a R__LOCKGUARD(gInterpreterMutex); before the creation of the stack TClingClassInfo. This did something actually, now I quite consistently always get a segfault, seemingly triggered by Python, with this stacktrace. ```; Thread 1 (Thread 0x7f4d67fcc740 (LWP 53296) ""python""):; #0 0x00007f4d68189bdf in wait4 () from /lib64/libc.so.6; #1 0x00007f4d680f8a1b in do_system () from /lib64/libc.so.6; #2 0x00007f4d2f521370 in TUnixSystem::Exec (this=0x55bd15241770, shellcmd=0x55bd2b060400 ""/home/vpadulan/programs/rootproject/rootbuild/master-distrdf-debug/etc/gdb-backtrace.sh 53296 1>&2"") at /home/vpadulan/programs/rootproject/rootsrc/core/unix/src/TUnixSystem.cxx:2104; #3 0x00007f4d2f521c11 in TUnixSystem::StackTrace (this=0x55bd15241770) at /home/vpadulan/programs/rootproject/rootsrc/core/unix/src/TUnixSystem.cxx:2395; #4 0x00007f4d2f8665b4 in (anonymous namespace)::do_trace (sig=5) at /home/vpadulan/programs/rootproject/rootsrc/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:182; #5 0x00007f4d2f866644 in (anonymous namespace)::TExceptionHandlerImp::HandleException (this=0x55bd15d7d000, sig=5) at /home/vpadulan/programs/rootproject/rootsrc/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:201; #6 0x00007f4d2f5255f9 in TUnixSystem::DispatchSignals (this=0x55bd15241770, sig=kSigAbort) at /home/vpadulan/programs/rootproject/rootsrc/core/unix/src/TUnixSystem.cxx:3610; #7 0x00007f4d2f51d544 in SigHandler (sig=kSigAbort) at /home/vpadulan/programs/rootproject/rootsrc/core/unix/src/TUnixSystem.cxx:395; #8 0x00007f4d2f52554f in sighandler (sig=6) at /home/vpadulan/programs/rootproject/rootsrc/core/unix/src/TUnixSystem.cxx:3586; #9",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11515#issuecomment-1271819714:86,error,error,86,https://root.cern,https://github.com/root-project/root/issues/11515#issuecomment-1271819714,2,['error'],['error']
Availability,> Can you also update the release and include there a summary of the specification?. @oshadura ping?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7068#issuecomment-771178304:95,ping,ping,95,https://root.cern,https://github.com/root-project/root/pull/7068#issuecomment-771178304,1,['ping'],['ping']
Availability,"> Can you come up with a reproducer for what you see?. @Axel-Naumann : The following simple test case; ```; #include <TROOT.h>; int main(int argc, char** argv) {; gROOT->GetInterpreter();; return 0;; }; ```; compiled via; `c++ -o test -O0 -ggdb `root-config --libs` -I`root-config --incdir` -std=c++17 test.cpp /usr/lib64/libgandiva.so`; yields the error for me. I have a system installation of arrow with gandiva. If I remove the libgandiva.so from the command line, it works fine.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4689#issuecomment-566586924:349,error,error,349,https://root.cern,https://github.com/root-project/root/pull/4689#issuecomment-566586924,2,['error'],['error']
Availability,"> Can you remind us of the output of ROOT v6.16's `root-config --libs`?. Sure. 6.16:; ```; -L/opt/software/linux-scientific7-x86_64/gcc-4.8.5/root-6.16.00-zmcilzuttugwi3pxlrrp5r3ztoh544sn/lib -lCore -lImt -lRIO -lNet -lHist -lGraf -lGraf3d -lGpad -lROOTVecOps -lTree -lTreePlayer -lRint -lPostscript -lMatrix -lPhysics -lMathCore -lThread -lMultiProc -lROOTDataFrame -pthread -Wl,-rpath,/opt/software/linux-scientific7-x86_64/gcc-4.8.5/root-6.16.00-zmcilzuttugwi3pxlrrp5r3ztoh544sn/lib -lm -ldl -rdynamic; ```; 6.24/06:; ```; root-config --libs; -L/path/to/root/lib -lCore -lImt -lRIO -lNet -lHist -lGraf -lGraf3d -lGpad -lROOTVecOps -lTree -lTreePlayer -lRint -lPostscript -lMatrix -lPhysics -lMathCore -lThread -lMultiProc -pthread -lm -ldl -rdynamic; ```. > Are you building against ROOT v6.16 in the above example?. In my previous message it was against 6.24/06 built with the same gcc:; ```; cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX=/path/to/root .. -Dx11=OFF -Dsqlite=OFF -Dtmva=OFF -Dxrootd=OFF -Dpyroot=OFF -Dmlp=OFF -Dssl=OFF -Dhttp=OFF -Dclad=OFF -Ddataframe=OFF -Dpythia6=ON -Dbuiltin_tbb=OFF -Dbuiltin_xrootd=OFF -Dbuiltin_freetype=OFF; ```. > ROOT's master does not support GCC 4.8 anymore. At godbolt link above you can reproduce the same error with GCC 11.2 and clang 13.0.0.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9422#issuecomment-992342989:1266,error,error,1266,https://root.cern,https://github.com/root-project/root/issues/9422#issuecomment-992342989,1,['error'],['error']
Availability,"> Can you; > ; > * invoke `make VERBNOSE=1` and see what the failing invocation is? should be something like `cd core; rootcling_stage1 ...`; > ; > * take that invocation and add `gdb --args ` in front and run that, and share the backtrace of the point where the LLVM error is emitted?; > ; > ; > I'm especially curious to see whether there are multiple llvm libraries involved, and what those are. The building itself works fine:; ```; [1/2] /usr/bin/c++ -I/home/stephan/Projects/ROOT/core/dictgen/res -I/home/stephan/Projects/ROOT/core/cont/inc -I/home/stephan/Projects/ROOT/core/clingutils/res -I/home/stephan/Projects/ROOT/core/clingutils/inc -I/home/stephan/Projects/ROOT/core/clib/inc -I/home/stephan/Projects/ROOT/core/base/v7/inc -I/home/stephan/Projects/ROOT/core/base/inc -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/stephan/Projects/ROOT/core/dictgen/src -I/home/stephan/Projects/ROOT/core/foundation/res -I/home/stephan/Projects/ROOT/core/meta/inc -I/home/stephan/Projects/ROOT/core/foundation/inc -I/home/stephan/Projects/ROOT/interpreter/cling/include -isystem /home/stephan/Projects/ROOT/interpreter/llvm-project/clang/include -isystem /home/stephan/Projects/ROOT/builddir/interpreter/llvm-project/llvm/tools/clang/include -isystem /usr/lib/llvm-16/include -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -std=c++17 -fPIC -fvisibility-inlines-hidden -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12156#issuecomment-1658967214:268,error,error,268,https://root.cern,https://github.com/root-project/root/issues/12156#issuecomment-1658967214,1,['error'],['error']
Availability,"> Certainly - but the perf impact we're concerned about is the `if` in the case where no diagnostic is emitted, not the subsequent warning. Ok, I see. Probably it doesn't make a difference performance-wise, but there are functions to calculate what the next available float value is:; `https://en.cppreference.com/w/cpp/numeric/math/nextafter`. Side note: we are already losing some performance in TH1I by checking for overflow, but not for TH1F. See:; ```; void TH1I::AddBinContent(Int_t bin, Double_t w); {; Long64_t newval = fArray[bin] + Long64_t(w);; if (newval > -INT_MAX && newval < INT_MAX) {fArray[bin] = Int_t(newval); return;}; if (newval < -INT_MAX) fArray[bin] = -INT_MAX;; if (newval > INT_MAX) fArray[bin] = INT_MAX;; }; ```. vs. ```; void TH1F::AddBinContent(Int_t bin, Double_t w); {fArray[bin] += Float_t (w);}; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6671#issuecomment-800451031:258,avail,available,258,https://root.cern,https://github.com/root-project/root/issues/6671#issuecomment-800451031,1,['avail'],['available']
Availability,> Comment out inline TString operator==() to fix the compiler error C2593: 'operator ==' is ambiguous (!!!). What is the set of ambiguity?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1132#issuecomment-334196899:62,error,error,62,https://root.cern,https://github.com/root-project/root/pull/1132#issuecomment-334196899,1,['error'],['error']
Availability,"> Could `gSystem->Load(""..."")` be used... Could libPyROOT be the unlinked one you load from Python, and libPyROOT37, etc. be ones you load from ROOT and are linked to a particular Python? Then the ""hacky"" part would just be replacing a request to load libPyROOT with the largest available libPyROOTXX.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3396#issuecomment-462755612:279,avail,available,279,https://root.cern,https://github.com/root-project/root/pull/3396#issuecomment-462755612,1,['avail'],['available']
Availability,> Could you add the error message we get to the commit log?. @Axel-Naumann Done,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3312#issuecomment-457488367:20,error,error,20,https://root.cern,https://github.com/root-project/root/pull/3312#issuecomment-457488367,1,['error'],['error']
Availability,"> Could you paste the error for `roottest-python-pickle-read`?. That one no longer fails for me. I guess it may only fail sporadically or only with GCC 8.4, which is what I was using before.; If I see it fail again, I will paste the output here. However, I attached the output for all tests in the issue description, so it should be there already.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7936#issuecomment-823921721:22,error,error,22,https://root.cern,https://github.com/root-project/root/issues/7936#issuecomment-823921721,1,['error'],['error']
Availability,"> Could you provide an example of how this can happen? AFAIU, it is not possible to read an entry from a branch of type say std::vector<int> where some entries of the vector are available and some not (how would that even make sense?). It is happening when combining 2 columns from 2 distincts collection:; ```; tree->Draw(""vec_1.px + Alt$(vec_2.delta_px, 0)"");; ```; where `vec_1.size()` happens to be different from `vec_2.sizeI()` but we still want to plot the data for all element of `vec_1`. A completely related recent post on the forum: https://root-forum.cern.ch/t/dealing-with-columns-of-different-lengths-in-rdf/61642/2",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15641#issuecomment-2346864031:178,avail,available,178,https://root.cern,https://github.com/root-project/root/pull/15641#issuecomment-2346864031,1,['avail'],['available']
Availability,"> DO not understand clang-format failure. My 2 cents: `clang-format` is unhappy about some old code, but I think it's not a good idea to fix it in the same commit that also introduces functional changes. On the contrary, it makes reviewing the diff quite difficult...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12410#issuecomment-1460064739:33,failure,failure,33,https://root.cern,https://github.com/root-project/root/pull/12410#issuecomment-1460064739,1,['failure'],['failure']
Availability,"> Did you make sure it works for -Dcxxmodules=On?. How I can check it? I cannot compile current master when specifying `-Dcxxmodules=On`.; Same will be after I merge this PR. There is simple error which can be fixed in graf2s/mathtext/inc/mathrenderer.h, but it does not solve general compilation errors with cxxmodules. I test both on mac and linux platforms",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5791#issuecomment-640223995:191,error,error,191,https://root.cern,https://github.com/root-project/root/pull/5791#issuecomment-640223995,4,['error'],"['error', 'errors']"
Availability,> Do we have to patch LLVM. I getting error when compiling with gcc13:; ```; interpreter/llvm/src/include/llvm/Support/Signals.h:119:24: error: ‘uintptr_t’ was not declared in this scope; 119 | void CleanupOnSignal(uintptr_t Context);; ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12086#issuecomment-1399944777:38,error,error,38,https://root.cern,https://github.com/root-project/root/pull/12086#issuecomment-1399944777,2,['error'],['error']
Availability,"> Do we need to keep the credential file around during the time that the build happens? Or can we delay the creation of this file until after the build? Or remove it before the build starts? I understand that the CI workflow can be maliciously changed - but a change to the CI workflow is a very visible change, more than a simple addition of `print some credential file` as part of the build system... You're saying that having the file available at certain steps such as in the workflow definition and right before uploading is managable but that that it should be unavailable while e.g. cmake is running?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12201#issuecomment-1412402025:438,avail,available,438,https://root.cern,https://github.com/root-project/root/pull/12201#issuecomment-1412402025,2,['avail'],['available']
Availability,"> Do you have the asan report available?. I can re-generate it :smile: ; ```; =================================================================; ==4081163==ERROR: AddressSanitizer: use-after-poison on address 0x62100013a218 at pc 0x7fa3a1d48622 bp 0x7ffc1d2cc110 sp 0x7ffc1d2cc100; READ of size 8 at 0x62100013a218 thread T0; #0 0x7fa3a1d48621 in clang::LookupResult::configure() (/home/jhahnfel/ROOT/build-asan/lib/libCling.so+0xae72621); #1 0x7fa39cedfa0c in clad::plugin::CladPlugin::ShouldProcessDecl(clang::DeclGroupRef) (/home/jhahnfel/ROOT/build-asan/lib/libCling.so+0x6009a0c). 0x62100013a218 is located 1304 bytes inside of 4096-byte region [0x621000139d00,0x62100013ad00); allocated by thread T0 here:; #0 0x7fa3b6ba0ba8 in __interceptor_malloc (/lib64/libasan.so.5+0xefba8); #1 0x7fa39cfca34e in llvm::safe_malloc(unsigned long) (/home/jhahnfel/ROOT/build-asan/lib/libCling.so+0x60f434e); #2 0x7fa39f9c1d4e in llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator, 4096ul, 4096ul>::Allocate(unsigned long, unsigned long) [clone .constprop.3114] (/home/jhahnfel/ROOT/build-asan/lib/libCling.so+0x8aebd4e); #3 0x7fa39fbd2245 in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) (/home/jhahnfel/ROOT/build-asan/lib/libCling.so+0x8cfc245); #4 0x7fa39e60ef42 in clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) (/home/jhahnfel/ROOT/build-asan/lib/libCling.so+0x7738f42); #5 0x7fa3acfbd1fb in clang::Preprocessor::HandleHeaderIncludeOrImport(clang::SourceLocation, clang::Token&, clang::Token&, clang::SourceLocation, clang::DirectoryLookup const*, clang::FileEntry const*) (/home/jhahnfel/ROOT/build-asan/lib/libCling.so+0x160e71fb); #6 0x7fa3acfc5f6b in clang::Preprocessor::HandleIncludeDirective(clang::SourceLocation, clang::Token&, clang::Direc",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7968#issuecomment-829238105:30,avail,available,30,https://root.cern,https://github.com/root-project/root/issues/7968#issuecomment-829238105,2,"['ERROR', 'avail']","['ERROR', 'available']"
Availability,"> Do you mean 6.30 or 6.32?. 6.30. I hope we can still make it :-) @bellenot might you be able to fix this while I'm gone? We can remove the actual code of the modules in a second, unrelated step - what's needed now is the CMake build option part. I.e. what's left is the error in [pyunittests_dataframe_cache](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/187156/testReport/projectroot.tree.dataframe/test/pyunittests_dataframe_cache/).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13856#issuecomment-1762850189:272,error,error,272,https://root.cern,https://github.com/root-project/root/pull/13856#issuecomment-1762850189,1,['error'],['error']
Availability,"> Do you mean short term while we fix the issue or do you mean just ignore the issue?; > In this case, unless the tutorial (!) are showing something that the user are very unlikely to do, I think we need to go further and make sure that this same crash/problem won't happen to the user. If the feature does not work, and it is advertised as a public tutorial, then it should be either fixed soon (i.e. before next release imho) or we need to back down on the feature and inject some sort of warning mechanism that the feature is not really working. Same as we had to recently do for https://github.com/root-project/root/issues/15197 via https://github.com/root-project/root/pull/15198. We cannot provide tutorials that just do not work, so I don't see a third way",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15211#issuecomment-2051101896:447,down,down,447,https://root.cern,https://github.com/root-project/root/issues/15211#issuecomment-2051101896,1,['down'],['down']
Availability,"> Do you see any potential downsides of returning strings by const reference? Dangling references? Issues should we need to turn it back to an `std::string` at a later point?. Returning `const` references here should be fine, I cannot think of a situation where a `std::string` outlives the `RField` or `RNTupleMetrics` and is not copied explicitly anyway, e.g. storing it by value in another struct / class. also @enirolf",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15890#issuecomment-2186477547:27,down,downsides,27,https://root.cern,https://github.com/root-project/root/pull/15890#issuecomment-2186477547,1,['down'],['downsides']
Availability,> Does actually VERSION_GREATER_EQUAL is available there? Can you try to change to VERSION_GREATER?. I checked the documentation and VERSION_GREATER_EQUAL was introduced in 3.7. Since we require 3.9 it should always be available,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5271#issuecomment-607693395:41,avail,available,41,https://root.cern,https://github.com/root-project/root/pull/5271#issuecomment-607693395,2,['avail'],['available']
Availability,> Does that catch the error issued by dlopen itself?. Yes but just by parsing error messages,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2148#issuecomment-394742752:22,error,error,22,https://root.cern,https://github.com/root-project/root/pull/2148#issuecomment-394742752,2,['error'],['error']
Availability,"> Does that mean we should also remove this check (which is redundant with the MSVC check two lines before that)?; https://github.com/root-project/root/blob/master/builtins/zstd/cmake/AddZstdCompilationFlags.cmake#L43. You probably want to check `CMAKE_CXX_COMPILER_ID` there instead of the generator since the /MP flag only works with cl and clang-cl will throw a warning. `/MP + ninja` is probably oversubscribing but ok. For me that code seems to come from upstream zstd so i would advise against patching that. Also why even vendor zstd, use conan or vcpkg to obtain it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12705#issuecomment-1817674066:60,redundant,redundant,60,https://root.cern,https://github.com/root-project/root/pull/12705#issuecomment-1817674066,1,['redundant'],['redundant']
Availability,"> Don't worry @AdvaitDhingra , not your fault and work in progress :). Okay, thanks for the reassurance 😄",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7132#issuecomment-783236796:40,fault,fault,40,https://root.cern,https://github.com/root-project/root/pull/7132#issuecomment-783236796,1,['fault'],['fault']
Availability,"> Edit: I was wrong, we're currently not specifying the behavior in the specifications.md but only in the code. Should we also explicitly say the behavior is undefined in the specs? I'm not sure it makes sense because the specs in principle only refer to the binary format; should they also say how a writer should behave when receiving wrong input from the user? @jblomer thoughts about this?. I think that the specification is not the ideal place for that sort of error behavior documentation. I'd suggest a brief section in the architecture.md that summarizes the low-precision float options in RNTuple and highlights the differences and similarities to the already existing `Double32_t` and `Float16_t`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16390#issuecomment-2363691852:466,error,error,466,https://root.cern,https://github.com/root-project/root/pull/16390#issuecomment-2363691852,1,['error'],['error']
Availability,> Error in <TCling::RegisterRdictForLoadPCM>: Rdict '/scratch/greenc/products/root/v6_25_02/Linux64bit+3.10-2.17-e20-p399-debug/lib/libNet_rdict.pcm' is both in Module extension and in File system. This is indicative of a real 'problem'. The file `libNet_rdict.pcm` should not be present at all in a build with `runtime_cxxmodules=ON`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9583#issuecomment-1013402662:2,Error,Error,2,https://root.cern,https://github.com/root-project/root/issues/9583#issuecomment-1013402662,1,['Error'],['Error']
Availability,"> Errors:; > * [2022-11-14T15:50:44.494Z] C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\lib\CodeGen\RegisterPressure.cpp(1378,1): fatal error C1060: compiler is out of heap space [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\lib\CodeGen\LLVMCodeGen.vcxproj]; > ; > * [2022-11-14T15:50:44.494Z] C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\tuple(718,1): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\lib\Transforms\IPO\Inliner.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\lib\Transforms\IPO\LLVMipo.vcxproj]; > ; > * [2022-11-14T15:50:44.994Z] C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector(821,1): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\lib\Transforms\IPO\LowerTypeTests.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\lib\Transforms\IPO\LLVMipo.vcxproj]; > ; > * [2022-11-14T15:50:47.146Z] C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory(1372,1): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\lib\CodeGen\SelectionDAG\DAGCombiner.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\lib\CodeGen\SelectionDAG\LLVMSelectionDAG.vcxproj]. These failures are totally unrelated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11480#issuecomment-1314187046:2,Error,Errors,2,https://root.cern,https://github.com/root-project/root/pull/11480#issuecomment-1314187046,6,"['Error', 'error', 'failure']","['Errors', 'error', 'failures']"
Availability,"> Especially those https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/108798/testReport/projectroot.tree.treeplayer/test/gtest_tree_treeplayer_test_treeprocessormt_remotefiles/ and friends seem relevant. These look similar to something that I addressed in the past, that currently is taken care of with https://github.com/root-project/root/blob/master/cmake/modules/XROOTDApplePostInstall.cmake . I tried to look for the messages from that script in the logs of the build (e.g. ""Adjusting LC_RPATH variable of XRootD libraries in ${install_libdir}"" ) but there was none so maybe that's weird. That being said, in this particular case the error is that `libNetxNG.6.25.01.so` doesn't find the reference of `@rpath/libXrdUtils.3.dylib` to load, whereas in the past the issue was that all `libXrD*` libraries couldn't load other xrootd libs in the same install folder. So, possibly, it's the RPATH of `libNetxNG` that should be changed in this case",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7335#issuecomment-790698646:660,error,error,660,https://root.cern,https://github.com/root-project/root/pull/7335#issuecomment-790698646,1,['error'],['error']
Availability,"> Eventhough it is already working, I am willing to try and build it from source if that can help you somehow figuring out some kind of challanges you would like to improve in further versions! Please let me know if I can be of any use!. Yes, in that case if you want to help with testing, please build from source, but do not download the source as .tar.gz, but clone instead the github repository and checkout the 6.30.00-patches branch, or the master branch. This one will include the fixes I mentioned.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14479#issuecomment-1916952606:327,down,download,327,https://root.cern,https://github.com/root-project/root/issues/14479#issuecomment-1916952606,1,['down'],['download']
Availability,"> Example:; > ; > ```; > #include <TROOT.h>; > int main(int argc, char** argv) {; > gROOT->GetInterpreter();; > return 0;; > }; > ```; > ; > with the following command (using a system-installation of apache-arrow width gandiva):; > ; > ```; > c++ -o test -O0 -ggdb `root-config --libs` -I`root-config --incdir` -std=c++17 test.cpp /usr/lib64/libgandiva.so.14.1.0 && ./test; > ```; > ; > will show the `...please hide them or dlopen() them after the call to TROOT::InitInterpreter()` error.; > ; > The problem with the opencl runtime is analogous. So, would the error still be there if you change the example to something like:; ```; #include <TROOT.h>; static auto force_init = gROOT->GetInterpreter();; int main(int argc, char** argv) {; return 0;; }; ```; why is `/usr/lib64/libgandiva.so.14.1.0 ` initialized/dlopened first?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4668#issuecomment-564004143:483,error,error,483,https://root.cern,https://github.com/root-project/root/pull/4668#issuecomment-564004143,2,['error'],['error']
Availability,"> FWIW Axel's PR #12833 has this change plus another patch, and still claims not to be complete. As I expressed in [#12833 (comment)](https://github.com/root-project/root/pull/12833#issuecomment-1551636684), I think the best solution is to just re-download all three patches... Right, I see that, but the only difference I can see on my local machine is that one white space. Anyway, I'll try to investigate...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12882#issuecomment-1562408674:248,down,download,248,https://root.cern,https://github.com/root-project/root/pull/12882#issuecomment-1562408674,1,['down'],['download']
Availability,"> FWIW I think this ""only"" fixes the test on Windows, this is no explanation on the random failures on various Linux platforms... indeed",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13473#issuecomment-1682239197:91,failure,failures,91,https://root.cern,https://github.com/root-project/root/pull/13473#issuecomment-1682239197,1,['failure'],['failures']
Availability,"> Failure to meet that signature leads to an explosion of template instantiation failures with gcc. We should have better SFINAE code that provides clearer errors. > Show how to do a parallel for using Map()?. I think `Foreach` should be used for that, see my comment at #7872",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7871#issuecomment-819540665:2,Failure,Failure,2,https://root.cern,https://github.com/root-project/root/issues/7871#issuecomment-819540665,5,"['Failure', 'error', 'failure']","['Failure', 'errors', 'failures']"
Availability,"> Fantastic, thanks, @jalopezg-git ! Is the mac11 failure in stressInterpreter caused by this PR?. Apparently, yes. Ugghh, that wasn't expected; all the other platforms seem to be happy now. Any chance that I can still access one of these machines to debug the issue?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13565#issuecomment-1708698177:50,failure,failure,50,https://root.cern,https://github.com/root-project/root/pull/13565#issuecomment-1708698177,1,['failure'],['failure']
Availability,"> File is working locally. Yes, `curl` and `wget` are able to download the file. ; But davix library used in `TDavixFile` is not working with it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14429#issuecomment-1914150449:62,down,download,62,https://root.cern,https://github.com/root-project/root/issues/14429#issuecomment-1914150449,1,['down'],['download']
Availability,"> Fix the cmssw reported issue - I believe it is due to not properly rebased patch in clang. Just pointing out that this is likely easy to reproduce by renaming the build dir - i.e. the error message basically says ""run-time dir is different from build-time dir"". Will you have a stab at it, @vgvassilev ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1326797994:186,error,error,186,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1326797994,1,['error'],['error']
Availability,"> For bench-marking the change can you run and compare with and without the PR:; > ; > ```; > #include ""TChain.h""; > ; > void callfuncbench(int repeat = 1000) ; > {; > TChain ch(""ntuple""); ; > for(int i = 0 ; i < repeat; ++i); > ch.Draw(""TMath::TanH(px)"", """", ""goff""););; > }; > ```; > ; > This demonstrates a simple common (indirect) usage of CallFunc.; > ; > Thanks, Philippe.; > ; > They are also usage of CallFunc in Signal/Slot mechanism and QT. I used `ctest --output-on-failure -R .*treefor.*` and `ctest -j12 --output-on-failure -R .*callfunc.*` to benchmark. I noticed around 20% slowdown and I decided to go with the enum implementation which I just pushed. Now with it we seem to be consistent with what we used to have but I am still looking how to make it faster. That benchmark runs more or less for the same time (0.16 +-2):. ```; root-callfunc-master/release $ /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)...; 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)""; 	User time (seconds): 0.16; 	System time (seconds): 0.06; 	Percent of CPU this job got: 100%; 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22; 	Average shared text size (kbytes): 0; 	Average unshared data size (kbytes): 0; 	Average stack size (kbytes): 0; 	Average total size (kbytes): 0; 	Maximum resident set size (kbytes): 195476; 	Average resident set size (kbytes): 0; 	Major (requiring I/O) page faults: 0; 	Minor (reclaiming a frame) page faults: 25164; 	Voluntary context switches: 218; 	Involuntary context switches: 6; 	Swaps: 0; 	File system inputs: 0; 	File system outputs: 0; 	Socket messages sent: 0; 	Socket messages received: 0; 	Signals delivered: 0; 	Page size (bytes): 4096; 	Exit status: 0; ```; and this PR on my machine:; ```; /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11252#issuecomment-1251821611:477,failure,failure,477,https://root.cern,https://github.com/root-project/root/pull/11252#issuecomment-1251821611,4,['failure'],['failure']
Availability,"> For lifetime issues, try `valgrind --suppressions=$ROOTSYS/etc/valgrind-root.supp .... `. Thanks @pcanal -- valgrind immediately spotted `./tst: symbol lookup error: ./tst: undefined symbol: _ZN4ROOT10RDataFrameC1ERKNS_3RDF12Experimental12RDatasetSpecE`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11465#issuecomment-1262609718:161,error,error,161,https://root.cern,https://github.com/root-project/root/pull/11465#issuecomment-1262609718,1,['error'],['error']
Availability,"> For me, on Mac, it is protected. It seems to me that it is undefined behavior. Sometimes, I get a normal error message, sometimes I get the crash. See here below consecutive runs:; ```. /tmp$ root -l main.cpp ; root [0] ; Processing main.cpp...; Error in <TApplication::TApplication>: only one instance of TApplication allowed; ------------------------------------------------------------------; | Welcome to ROOT 6.27/01 https://root.cern |; | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on Aug 30 2022, 13:52:01 |; | From heads/master@v6-25-01-4921-gdfd0f52391 |; | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |; | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------. root [0] .q; /tmp$ root -l main.cpp ; root [0] ; Processing main.cpp...; Error in <TApplication::TApplication>: only one instance of TApplication allowed; ------------------------------------------------------------------; | Welcome to ROOT 6.27/01 https://root.cern |; | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on Aug 30 2022, 13:52:01 |; | From heads/master@v6-25-01-4921-gdfd0f52391 |; | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |; | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------. root [0] .q; /tmp$ root -l main.cpp ; root [0] ; Processing main.cpp... *** Break *** segmentation violation. ===========================================================; There was a crash (kSigSegmentationViolation).; This is the entire stack trace of all threads:; ===========================================================; #0 0x00007f7b9f49845a in __GI___wait4 (pid=95642, stat_loc=stat_loc; entry=0x7ffd4f13a298, options=options; entry=0, usage=usage; entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30; #1 0x00007f7b9f49841b in __GI___waitpid (pid=<optimized",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11707#issuecomment-1315454187:107,error,error,107,https://root.cern,https://github.com/root-project/root/issues/11707#issuecomment-1315454187,3,"['Error', 'error']","['Error', 'error']"
Availability,"> For more details on these failures, see [this check](https://github.com/root-project/root/runs/19839583812). Thanks! And sure, sorry, I forgot in my previous PR...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14284#issuecomment-1865811170:28,failure,failures,28,https://root.cern,https://github.com/root-project/root/pull/14284#issuecomment-1865811170,1,['failure'],['failures']
Availability,> For the __file__ error you can use this patch:. Yes thanks. It works.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10430#issuecomment-1106215262:19,error,error,19,https://root.cern,https://github.com/root-project/root/issues/10430#issuecomment-1106215262,1,['error'],['error']
Availability,"> For the warning messages, I'm reusing one of the existing clang warning message (to not introduce more patches on top of the clang with custom error messages). Can you be more explicit of what it looks like? (I.e. clarifying whether this result is an ambiguous message or not).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14645#issuecomment-1936201275:145,error,error,145,https://root.cern,https://github.com/root-project/root/pull/14645#issuecomment-1936201275,1,['error'],['error']
Availability,"> For windows, I have no idea why there are so much errors. Try to add `#include <stdint.h>`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6221#issuecomment-684842132:52,error,errors,52,https://root.cern,https://github.com/root-project/root/pull/6221#issuecomment-684842132,1,['error'],['errors']
Availability,"> From the CI, it seems the code generation does not work on 32 bit platforms like `windows10` and `debian10-i386`. Why is that? I think it would be good to understand this, and I don't think this is related to RooFit specifics. Maybe some overflows in the generated code on 32 bit? Maybe we can also use the help of @vgvassilev here. Is there a compilation error? If not then we can run valgrind on the test case and maybe get a hint of what goes wrong.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11773#issuecomment-1344015532:358,error,error,358,https://root.cern,https://github.com/root-project/root/pull/11773#issuecomment-1344015532,1,['error'],['error']
Availability,"> Hah, sorry for that. I was convinced it terminated as well. The looging routine that terminates is 'Fatal' rather than 'Error'",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2723#issuecomment-504664046:122,Error,Error,122,https://root.cern,https://github.com/root-project/root/pull/2723#issuecomment-504664046,1,['Error'],['Error']
Availability,"> Harmless change to circumvent errors like these when building RooFit standalone:. Can you remind me how to reproduce this (as you saw it, no need to reduce)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15733#issuecomment-2147972853:32,error,errors,32,https://root.cern,https://github.com/root-project/root/pull/15733#issuecomment-2147972853,1,['error'],['errors']
Availability,"> Having them there with the wrong signature and returning nullptr is actually worse than not having them, though. . Not having them leads to hard to track memory allocation/deletion mismatch in some cases. The best is indeed to have an implementation but a clear error (maybe throwing would be even better) is 'better' :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1393#issuecomment-347858369:264,error,error,264,https://root.cern,https://github.com/root-project/root/pull/1393#issuecomment-347858369,2,['error'],['error']
Availability,"> Hello Rahul,; > ; > I had a look over the changes. and added some comments.; > Next time, please don't mix different topics such as graphics and Bernstein ranges, as the continuous integration should test them one by one. The ""mixing of topics"" is my fault here - this is our development branch for the RooFit implementation of RooUnfold, and so far we only needed to change graphics. We encountered problems with RooBernstein and needed to fix them to get our examples running. We hope that not so many further changes are needed, but we will try to keep topics more separate in the future. If you want, I can split this into two different branches before merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3922#issuecomment-525306032:253,fault,fault,253,https://root.cern,https://github.com/root-project/root/pull/3922#issuecomment-525306032,1,['fault'],['fault']
Availability,"> Here are more details from my local builds:. They feel like the opaque typedef (`Double32_t`) are (at the very least partially) no longer opaque (See in particular the ""new"" duplicate definitions complaint from the linker). In https://github.com/root-project/root/commit/45c0f48f3c3c631d291e0a7a32fd1ba292e79160, I see:; ```; TemplateDecl *TD = T->getTemplateName().getAsTemplateDecl();; ...; printTemplateArgumentList(OS, T->template_arguments(), Policy,; TD->getTemplateParameters());; ```; From the text in the long discussion, I am guessing that `TD` is now used to inform the printer on how to spell the template argument. I would bet that `TD` has neither the opaque typedef kept nor the default argument being made explicit (all done by `Utils/AST.cpp` and part of T (if I read correctly)). This would explain both the sudden need to request the default template argument and the error related to `Double32_t`. One solution might be to remove those 2 patches and instead to deal with the suffixes in `Utils/AST.cpp`. [Reminder the spelling of the normalized name is essential for backward compatibility; if the name must change to be more accurate, we might need to extend TClass/TStreamerInfo to smooth out the conversion. Testing this is ""easy"", create a file with v6.28/00 contains just an object with the name-that-will-changed and try to read it with a ROOT with the new name]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1136445744:889,error,error,889,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1136445744,1,['error'],['error']
Availability,"> Here is an example from my code. This is the snippet I use to retrieve the workspace (download here: [example workspace](https://www.physik.uzh.ch/~davide/exampleWorkspace.root)) after the fit and plot the pdf components stacked onto each other.; > ; > ```; > fw=r.TFile(""exampleWorkspace.root""); > ws=fw.Get(""workspaceDataFitForPlotTrig0""); > ; > ; > #retrieve model and dataset ; > B_plus_M=ws.var(""B_plus_DTFM_M_zero""); > data=ws.data(""dataTrig0""); > modelTot = ws.pdf(""modelTot0""); > ; > ; > B_plus_M.setBins(80); ; > frame = B_plus_M.frame(); > data.plotOn(frame); > modelTot.plotOn(frame, r.RooFit.LineColor(r.kRed)); > ; > #retrieve model variables; > modelTot.getVariables(); > ; > # here is the list of variables I want to plot; > for i, v in enumerate(modelTot.getVariables()): ; > if not v.isConstant() and v.GetName() != B_plus_M.GetName():; > print(v.GetTitle()); > v.SetName(v.GetTitle()); > ```; > ; > This will output the var titles I gave to the variables when I defined them, in LaTeX formatting and set them as var names for plotting:; > ; > ```; > N_{comb.}; > f_{0#gamma}; > f_{1#gamma}; > N_{charm}/N_{strange}; > N_{#pi}/N_{K}; > #lambda; > #Delta_{#mu}; > N_{prc}; > N_{sig}; > s_{#sigma}; > ```; > ; > Now if I continue with:; > ; > ```; > ; > trigCatPrc = ""Trig0Phot-1"";; > trigCatS = ""Trig0"";; > ; > modelTot.plotOn(frame, r.RooFit.Name(""Piee""), r.RooFit.Components(""modelBkgTot""+trigCatS+"",templateRarePrc""+trigCatPrc+"",templateCharmPrc""+trigCatPrc+"",modelPieeTot""+trigCatS), ; > r.RooFit.FillColor(93), r.RooFit.LineColor(93), r.RooFit.DrawOption(""F""));; > modelTot.plotOn(frame, r.RooFit.Name(""RarePrc""), r.RooFit.Components(""modelBkgTot""+trigCatS+"",templateCharmPrc""+trigCatPrc+"",templateRarePrc""+trigCatPrc), ; > r.RooFit.FillColor(95), r.RooFit.LineColor(95), r.RooFit.DrawOption(""F""));; > modelTot.plotOn(frame, r.RooFit.Name(""CharmPrc""), r.RooFit.Components(""modelBkgTot""+trigCatS+"",templateCharmPrc""+trigCatPrc), ; > r.RooFit.FillColor(94), r.RooFit.LineColor(94)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7115#issuecomment-787116795:88,down,download,88,https://root.cern,https://github.com/root-project/root/issues/7115#issuecomment-787116795,1,['down'],['download']
Availability,"> Here it seems that you would like to have this behavior changed?. It seems more complicated than that ... The underlying problem needs to be investigated. Once this PR is merged, an issue will be open with words along the line of 'revert this commit, run this and see these errors messages`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13134#issuecomment-1656187821:276,error,errors,276,https://root.cern,https://github.com/root-project/root/pull/13134#issuecomment-1656187821,1,['error'],['errors']
Availability,"> Hi @AaronBallman !; > ; > > it isn't reliably maintained and bit rots nearly continually. If that wasn't the case, I'd have no concerns about continuing to carry the functionality in the compiler.; > ; > I understand that perception, but given this, do you prefer to improve the AST printing, remove it, or keep it ""rotten"" as you put it? We have significant coverage of it, and we can witness that it's doing a good job. I have two answers (sorry!). My preference is for someone to step up and maintain it because, as you point out, it can perform useful work that people are already using today and so it should be actively maintained. However, I don't have the time to commit to it myself, and code reviewers have never traditionally required patch authors to spend much effort on -ast-print support, so this maintenance isn't likely to happen without someone dedicating effort to it. If nobody steps up to maintain it, my personal preference would be to remove the feature, but it'd definitely require a community RFC to do so -- that gives everyone an opportunity to speak up about why it's critical to keep it (and hopefully drums up a volunteer to maintain it with more regularity). It's not at all clear to me how the community would react to such an RFC, and it's also not clear to me whether we'd need to do OTHER work to prep for removing the functionality (e.g., if ObjC modernization rewriting relies on -ast-print being ""good enough"", we might want to also rip out ObjC moderanization rewriting at the same time, which is another RFC, and so on). FWIW, I'd be happy to be a reviewer for any reviews maintaining or improving `-ast-print` behavior in community (not trying to apply pressure!). > We'd be happy to keep this change minimal, e.g. escape only what needs to be escaped rather than going all in on showing the original spelling of the source code. I think for something that minimal, the cost / benefit ration would be about right. That's just my opinion; your opinion is what",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10830#issuecomment-1171474521:39,reliab,reliably,39,https://root.cern,https://github.com/root-project/root/pull/10830#issuecomment-1171474521,4,"['mainten', 'reliab']","['maintenance', 'reliably']"
Availability,"> Hi @AaronBallman,; > ; > Sorry for summoning you on a random PR but we seem to have local patch in Clang fixing a valid usecase where we want to use raw string literals in attributes that take strings. Do you see a way forward to make this patch upstreamable?. I'm not certain I understand the goal of the patch (or the changes its applied over the top of). `writeValue()` and `writeDump()` are used for AST printing and AST dumping, so it doesn't seem correct to me to convert what the user wrote to be a raw string literal. Not only will that not round trip to what the user wrote in code (that's fine, it happens), but it can cause behavioral differences that might be relevant to consumers of the attribute information: https://godbolt.org/z/sb3o1oTYo. The AST printing behavior is wonderfully broken, but the AST dump behavior is somewhat more worrying; there's a difference between \n and an actual newline (for example, on Windows, the actual newline would be `\r\n` and not `\n`). That said, the test failures you're seeing are ones I would expect. For example, the failure in `AST/ast-print-attr.c` is specifically because we were checking that we round-tripped the user-provided argument, and now we're round-tripping it differently. What problem(s) are you trying to solve by printing/dumping raw string literals?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10830#issuecomment-1169019275:1011,failure,failures,1011,https://root.cern,https://github.com/root-project/root/pull/10830#issuecomment-1169019275,2,['failure'],"['failure', 'failures']"
Availability,"> Hi @ShirinGolpayeganiCern , can you please provide a minimal reproducer for the issue?. Hi again and happy holidays,. I unfortunately have never used root to create ttrees, i only use the provided data for analysis.; One easy way to reproduce this error, is to use tchain to read from various events and ttrees of root files, and the importance is that some contain some branches while others dont.; And then take snapshot from the whole thing.; I now know for sure it is a bug, because as soon as i saved some columns only , the error disappeared and the results were back to normal",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9366#issuecomment-1005624710:250,error,error,250,https://root.cern,https://github.com/root-project/root/issues/9366#issuecomment-1005624710,2,['error'],['error']
Availability,"> Hi @VanyaBelyaev!; > ; > I guess you can't share all the data and scripts to reproduce the problem, but could you please post the full stack trace of the segmentation fault? I would also be helpful to see your code around the call to `plotOn`. With which command arguments are you calling `plotOn`?; > ; > And as @eguiraud said, please indicate if this problem also happens with the C++ interface, if you can easily check this.; > Thanks a lot, I hope we can fix this issue quickly!; > ; > Cheers,; > Jonas. Dear Jonas @guitargeek . See a relevant part of stack in my reply to Enrico. Unfortunately there is no way to prepare C++ reproducer; The options are rather trivial; ```; MarkerStyle(20), DrawOptions('zp'), MarkerSize (0.75), Invisible(); ```; for data, then I have next call for the model component with options ; ```; Components( 'BBB_fitSym_compnsbghY' ), Precision(0.0001), LineColor(600), LineStyle(14), LineWidth(1); ```; and I get sef fault.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8474#issuecomment-864067440:169,fault,fault,169,https://root.cern,https://github.com/root-project/root/issues/8474#issuecomment-864067440,2,['fault'],['fault']
Availability,"> Hi @couet , @bellenot ,; > ; > how can I help to merge this and other requests into the master faster?; > This one, #6740 , #6547 and #6716 are quite trivial. Is there a tag that would mark the requsts as ""easy for review/merge""?; > ; > Best regards,; > ; > Andrii. Hi @andriish, sorry, I'm not sure there is a fast way of doing it... And Olivier will be unavailable for a while. I'll try to take care of them, or ping the relevant people",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6714#issuecomment-726043945:416,ping,ping,416,https://root.cern,https://github.com/root-project/root/pull/6714#issuecomment-726043945,1,['ping'],['ping']
Availability,"> Hi @ellert, thanks for updating this PR!; > ; > My preferred solution would be to detect in the build system if the machine in big endian, and only build/execute the NaN - packer test if this is not the case. Would this be possible? Then we don't need to hack into the ROOT test system. There is one explicit test for specifically checking the NaN feature:. gtest-roofit-roofitcore-test-testNaNPacker. This PR is not about this test. This test still correctly fails with this PR applied. The PR is so that tests that are testing other things don't fail because they trigger this warning about the NaN feature not having been implemented. The warning says: fast recovery not implemented. As far as I can tell the tests fall back to some slower recovery method and succeed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10303#issuecomment-1826767382:663,recover,recovery,663,https://root.cern,https://github.com/root-project/root/pull/10303#issuecomment-1826767382,2,['recover'],['recovery']
Availability,"> Hi @ferdymercury! You have to _rebase your commits on master_ to fix conflicts. Merging master into your development branch is the last thing you should do, because then your PR becomes unmergable because it's not a fast-forward PR.; > ; > I took the liberty to cherry-pick your commits ontop of master and force-push this to your branch so we can proceed here without having technical git discussions :) Next time your PR in in conflict with master, just do `git rebase master`. Thanks, I will write that down. (It's a pity that Github web interface does not give you that option...)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9657#issuecomment-1034944095:508,down,down,508,https://root.cern,https://github.com/root-project/root/pull/9657#issuecomment-1034944095,1,['down'],['down']
Availability,"> Hi @pcanal, this is a quite big pull request, it may make sense to break it down in a few separate pull requests to make it easier to test/review. Also, I see revert commits included, and whitespace changes bundled together here, the reverts you should probably drop and rebase, and whitespace creates unnecessary noise for reviewing, so better split in another pull request or make all such changes in a single commit upfront before other commits. For white, github's `Hide whitespace changes` usually works well :). I had kept the ""revert"" commit intentionally to remember (for posterity) that this avenue was looked into. I have no remove it. Technically this could indeed be split in several (4 or 5) PRs ... which the consequent delay in merging (time to do and locally test the split, time to run the PRs through the build) ... given that we are branching soon .. this would also either delay the branching or require the PRs to be tested twice each ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7286#issuecomment-786785312:78,down,down,78,https://root.cern,https://github.com/root-project/root/pull/7286#issuecomment-786785312,1,['down'],['down']
Availability,"> Hi @vgvassilev , thanks once again for this great development, which was delivered and tested on such a short timescale, basically during the end of the year break. On January 23rd, the last open pre-release of CMSSW_14_0_0 will close: after that date, no ROOT version updates will be possible (see [cms-sw/cmssw#43077 (comment)](https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1858057605)). Currently, the CMS issue has been worked around, therefore ROOT 6.30 _can_ be picked up by CMS. However, it would be much better to have your fix in master and the 6.30 branch for CMS to pick up. That leaves us with a short window of opportunity, which is basically this week.; > ; > Do you think you can factor and succinctly document the changes in the way @hahnjo proposed in order to be able to merge the PR to make your fixes available to CMS? We see LHCb experiencing similar problems - they would also likely benefit from your code. @dpiparo, I have made the changes that I agree with and responded to the rest of the comments. This PR seems to be ready to go from what concerns me.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14287#issuecomment-1882860199:835,avail,available,835,https://root.cern,https://github.com/root-project/root/pull/14287#issuecomment-1882860199,1,['avail'],['available']
Availability,"> Hi Bertrand, what's the stacktrace for df017_vecOpsHEP.py? it's a very simple tutorial, so if that doesn't work i'm thinking no RDF program should work. `error code: Exit code 0xc0000374`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10721#issuecomment-1151028323:156,error,error,156,https://root.cern,https://github.com/root-project/root/pull/10721#issuecomment-1151028323,2,['error'],['error']
Availability,"> Hi Hanna, thank you very much for the PR!; > ; > Code changes look fine, but can you please change the commit message to explain why it was possible to use `setValFast` in `setBin`? That it's redundant to do the range, check in `getVal`, because the value you pass to `setBin` is a bin center which is in the variable range by definition anyway. Thank you for the comment, I hope the new commit message is clearer!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11090#issuecomment-1202401228:194,redundant,redundant,194,https://root.cern,https://github.com/root-project/root/pull/11090#issuecomment-1202401228,2,['redundant'],['redundant']
Availability,"> Hi folks. Is this PR at a point where I could try it with cling on Linux? I'd be happy to report any issues; for some compatibility issues, I can't use the stable cling's llvm so I've been eager watching the progress here.; > ; > If it's workable now, any tips for getting this hooked up to cling would be much appreciated. Either way, thanks so much for the huge effort to get llvm 13 in here. Hi @jeaye, we seem to be mostly converging. We know that some tests from cling's test suite still fail. If you cannot wait another month maybe it is now a good time to try it. . You can build cling against llvm13 using the llvm13 branches from clang.git and llvm.git available in my GitHub profile.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1186184492:664,avail,available,664,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1186184492,1,['avail'],['available']
Availability,"> Hi, I have no warning at all on Windows. Can you provide the full log (all warnings and errors related to wchar_t), so we can try to fix them all at once? Thanks in advance!. ~~@bellenot: That is because you don't specify a warning flag (At least I don't see any in the nightly CI) which means MSVC will default to an unuseful `W1` according to `cl -?` (`/W<n> set warning level (default n=1)`). A reasonable warning level for MSVC is `/W3`. Setting that should make C4066 visible (and probably a lot more relevant ones.).~~. Hmm I see https://github.com/root-project/root/blob/416f75c9914f1ca35fdbad7d004f5c78cadf95a4/cmake/modules/SetUpWindows.cmake#L40C4-L40C4 I'll get a log when I get time to rebuild root with msvc.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13091#issuecomment-1611289628:90,error,errors,90,https://root.cern,https://github.com/root-project/root/issues/13091#issuecomment-1611289628,1,['error'],['errors']
Availability,"> Hi, most of cmssw tests passed but for few relvals we get runtime errors [...]. Thanks for testing! This needs debugging (likely after CHEP)...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16401#issuecomment-2410181489:68,error,errors,68,https://root.cern,https://github.com/root-project/root/pull/16401#issuecomment-2410181489,1,['error'],['errors']
Availability,"> Hi,; > ; > This PR cannot be merged since the test is failing. Could you please have a look @will-cern ?; > ; > ```; > Running main() from /googletest-release-1.11.0/googletest/src/gtest_main.cc; > [==========] Running 3 tests from 1 test suite.; > [----------] Global test environment set-up.; > [----------] 3 tests from Projections; > [ RUN ] Projections.Issue_6658_2D; > [ OK ] Projections.Issue_6658_2D (175 ms); > [ RUN ] Projections.Issue_6658_3D; > [ OK ] Projections.Issue_6658_3D (0 ms); > [ RUN ] Projections.Issue_6658_Profile2D; > /root/src/core/testsupport/src/TestSupport.cxx:89: Failure; > Failed; > Received unexpected diagnostic of severity 2000 at 'TROOT::Append' reading 'Replacing existing TH1: x (Potential memory leak).'.; > Suppress those using ROOT/TestSupport.hxx; > [ FAILED ] Projections.Issue_6658_Profile2D (1 ms); > [----------] 3 tests from Projections (176 ms total); > ; > [----------] Global test environment tear-down; > [==========] 3 tests from 1 test suite ran. (176 ms total); > [ PASSED ] 2 tests.; > [ FAILED ] 1 test, listed below:; > [ FAILED ] Projections.Issue_6658_Profile2D; > ; > 1 FAILED TEST; > CMake Error at /root/src/cmake/modules/RootTestDriver.cmake:232 (message):; > error code: 1; > ; > ```. ok I just renamed the projection histogram to avoid the clash, I hope.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16194#issuecomment-2285931106:597,Failure,Failure,597,https://root.cern,https://github.com/root-project/root/pull/16194#issuecomment-2285931106,4,"['Error', 'Failure', 'down', 'error']","['Error', 'Failure', 'down', 'error']"
Availability,"> How confident are you @hahnjo that things are fine on 32bit? I can try to resurrect the box, but that will only happen on Wednesday morning... Maybe you ask for someone to reboot it on Mattermost?. I'm somewhat confident that it's not completely broken since there were only two test failures in July: https://github.com/root-project/root/pull/13273#issuecomment-1657200906 hard to say if these two got fixed as well...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13273#issuecomment-1838674587:174,reboot,reboot,174,https://root.cern,https://github.com/root-project/root/pull/13273#issuecomment-1838674587,2,"['failure', 'reboot']","['failures', 'reboot']"
Availability,"> How difficult is adding the support for them ? They are just an extra column in the Tree. It's intermediate difficulty, because the interfaces are inconsistent.; - Weights in `RooDataSet` have to be activated explicitly by users, in `RooDataHist`, they are on by default.; - Weight errors are even less consistent.; - The `add` functions are overloaded multiple times, but *only* in the derived classes. So you have to pick the right one for the right job.; - Sometimes the `add` functions ignore the weight, sometimes not, depending on how you called the constructor.; - In RooDataSet, you can make the weight part of the entry, and it's going to be registered. In RooDataHist, you have to pass the weight explicitly. Therefore, the helper will need to know what's a weight and what's not. All in all, it's totally solvable, but it's not for me to work on that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7317#issuecomment-790843601:284,error,errors,284,https://root.cern,https://github.com/root-project/root/pull/7317#issuecomment-790843601,1,['error'],['errors']
Availability,"> How should I proceed, just rollback or open a new PR again ?. You always can rebase your branch and do `git push --force`. For the future - it is better not to use `master` branch to create your PRs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13212#issuecomment-1628504795:29,rollback,rollback,29,https://root.cern,https://github.com/root-project/root/pull/13212#issuecomment-1628504795,1,['rollback'],['rollback']
Availability,"> However I am not seeing quickly the reason for it but if it happened here, it will still happen after merging, so we do not need to get to the bottom of it (i.e. fix/work-around it). I will check this with Bertrand, but meanwhile we can go ahead with the review irrespective of the Windows failure",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15641#issuecomment-2352203324:292,failure,failure,292,https://root.cern,https://github.com/root-project/root/pull/15641#issuecomment-2352203324,1,['failure'],['failure']
Availability,"> However, I think both clipping and skipping can be very dangerous. I'm about to change the behavior to simply erroring out when the values are not in the range, with the possibility to manually change that behavior to skipping or clipping if desired. Like that, there are no bad surprises. Any thoughts on that?. That sounds very reasonable. I would have intuitively assumed that the values are skipped, but if the clipping behavior also exists in the interface others might have assume that. Then it's probably best to force the users to decide.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10447#issuecomment-1110909383:112,error,erroring,112,https://root.cern,https://github.com/root-project/root/issues/10447#issuecomment-1110909383,2,['error'],['erroring']
Availability,"> However, ROOT accepts the code without complaint.; > That actually is the issue. In your original post, you mention that the behaviour you expect to see is that both parameters should be usable. Implementing this would mean openly violating C++ standard (even further than CINT already did at the time of ROOT 5.34). On the other hand, a proper fix would be raising a compiler error. I am unsure whether providing such a fix for CINT is what we want, cling already works properly and it's just a matter of updating the ROOT version. I will leave to @Axel-Naumann the final say on this. In any case, isn't it possible for you to declare functions on your application side that do not have a trailing comma?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12840#issuecomment-1570855626:379,error,error,379,https://root.cern,https://github.com/root-project/root/issues/12840#issuecomment-1570855626,2,['error'],['error']
Availability,"> However, then another error occured:; > ; > ```; > [19/1526] Generating G__ROOTVecOps.cxx, ../../lib/ROOTVecOps.pcm; > FAILED: math/vecops/G__ROOTVecOps.cxx lib/ROOTVecOps.pcm /home/jun/dev/root/Build/math/vecops/G__ROOTVecOps.cxx /home/jun/dev/root/Build/lib/ROOTVecOps.pcm; > cd /home/jun/dev/root/Build/math/vecops && /usr/bin/cmake -E env LD_LIBRARY_PATH=/home/jun/dev/root/Build/lib: ROOTIGNOREPREFIX=1 /home/jun/dev/root/Build/bin/rootcling -rootbuild -v2 -f G__ROOTVecOps.cxx -cxxmodule -s /home/jun/dev/root/Build/lib/libROOTVecOps.so -m Core.pcm -excludePath /home/jun/dev/root -excludePath /home/jun/dev/root/Build/ginclude -excludePath /home/jun/dev/root/Build/externals -excludePath /home/jun/dev/root/Build/builtins -writeEmptyRootPCM -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/jun/dev/root/Build/include -I/home/jun/dev/root/math/vecops/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h; > In file included from input_line_10:3:; > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 's",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11148#issuecomment-1209049241:24,error,error,24,https://root.cern,https://github.com/root-project/root/pull/11148#issuecomment-1209049241,1,['error'],['error']
Availability,"> However, you should consider in the build system to use system available installation of nlohmann instead of using built-in copy. ; > You really don't want different versions of the same code floating around on a given machine. It is already possible now, but disable by default. ; Use of external `nlohmann/json.hpp` has some side effects on build system, therefore should only be enabled when really needed. > Also, for TJSON I tried to do a bit of ROOT integration. For example, one can get arrays as TArrayD or TArrayI if possible. Support of special ROOT classes provided with `TBufferJSON`, including support of all ROOT containers. ; Concerning `TArrayD` or `TArrayI` - these are old-fashion ROOT arrays; for new classes one should better use standard containers like `std::vector`, which are supported by `nlohmann/json.hpp` anyway. Size is important, but nlohmann already parsed by cling and can be used from interpreter without extra costs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6889#issuecomment-736364867:65,avail,available,65,https://root.cern,https://github.com/root-project/root/issues/6889#issuecomment-736364867,1,['avail'],['available']
Availability,> I _think_ the failure on `windows10` is due to how the commits are rebased after I change the `eol` normalization in the first commit. @bellenot could I ask you to manually check this PR on Windows? Subsequent runs should hopefully be fine once the updated `.gitattributes` are in `master` (alternatively we would need to merge this commit via a separate PR). I'll try your branch and let you know,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12117#issuecomment-1404893974:16,failure,failure,16,https://root.cern,https://github.com/root-project/root/pull/12117#issuecomment-1404893974,1,['failure'],['failure']
Availability,"> I agree that the test should probably not use `echo` for that but we should probably fix the interface, too. Agreed. > Is `Value::isVoid` not being checked in the `echo` interface? I am not sure I understand how it worked before and how the PR you mentioned broke it.. It's an issue related to multiple `Interpreter`s that have different `ASTContext`s. I fixed it by calling `isVoidType()`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13282#issuecomment-1642273551:49,echo,echo,49,https://root.cern,https://github.com/root-project/root/pull/13282#issuecomment-1642273551,2,['echo'],['echo']
Availability,"> I am a bit confused. I believe here we should not change the code but the rules of cmake when it comes to linking llvm. I believe the problem is when we link in two copies of llvm instead of one. Here that would fix the problem with the asserts but we will still have two copies of llvm leading to much more subtle issues. I don't think this is problem of linking two copies of llvm. For example, if I remove; ```; // Hide options from llvm which we got from static initialization of libCling.; llvm::cl::HideUnrelatedOptions(/*keep*/gRootclingOptions);; ```; and run; ```; core/rootcling_stage1/src/rootcling_stage1 --help-hidden; ```; I get many unrelated options - these are the predefined by LLVM. I think that in the default builtin LLVM build the part of the LLVM library that defines the `-W` option is just not enabled. A coincidence, but the current way of building the CLI is not the most robust anyway, so I don't see a problem with changing the code. It's worth doing even if I link LLVM twice. Btw, `clangd` also uses `llvm::cl::ResetCommandLineParser()` since they have a similar problem. > Why is this linking both specific LLVM static libraries and /usr/lib/llvm-16/lib/libLLVM-16.so.1? I suspect that to be the cause. I checked the linking command again, the static libraries are clang libraries, not LLVM. Which is to be expected, since it's not possible to build with upstream clang yet.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12156#issuecomment-1661726763:901,robust,robust,901,https://root.cern,https://github.com/root-project/root/issues/12156#issuecomment-1661726763,1,['robust'],['robust']
Availability,"> I am a little confused on how that affects path length. As I said, I don't understand it either, but the failures are persistent and reproducibly fixed with this change. > The idea of that patch was that if we specify no_cxxmodule we should not expect targets that depend on it to have modules as the “dependee” would include the other headers making a mess. We should be fine reverting this change, if indeed is broken. We should be able to propagate the NO_CXXMODULE option through the dependency chain by hand. I understand, but it needs to be implemented differently so that it doesn't omit dependencies to `libCore`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12561#issuecomment-1491410806:107,failure,failures,107,https://root.cern,https://github.com/root-project/root/pull/12561#issuecomment-1491410806,1,['failure'],['failures']
Availability,> I am facing problem to build xrootd on my platform - latest OpenSUSE Tumblweed.; > Maybe latest 4.x XROOTD can solve the problem - I will try. @linev can you post please what do you see as an error?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7335#issuecomment-789875732:194,error,error,194,https://root.cern,https://github.com/root-project/root/pull/7335#issuecomment-789875732,1,['error'],['error']
Availability,"> I am not in favour of this solution.; I don't think is bringing any advantages, we were using a plugin manager that was based on the interpreter and there were no direct dependency on fftw3.; Now you require people to directly install fftw3 and they would need to set also the include path. It is an over complication for the users. You are right, when building ROOT with `fftw3=ON`, it brings zero advantages but only makes if more fragile because `fftw3.h` needs to be in the path. *Edit*: it just came to my mind that this might actually be a rare case. Right now, `builtin_fftw3*` is always `OFF` by default, also on cfmfs. So the `fftw3.h` header was already found in the include path at build time, which means it's probably found when running ROOT too. However, in case where ROOT is built with `fftw3=OFF`, this makes the difference between the `RooFFTConvPdf` even working or not. And this case is relevant because we release the ROOT binaries like this. Since we need to make sure that FFTs work in RooFit when people install ROOT on their laptops with the binaries, I think a fix like this is necessary. Maybe as a compromise, I could apply the these changes only in case where `fftw3=OFF` by using preprocessor macros? The downside of this would be two different code branches thought.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14174#issuecomment-1838939107:1237,down,downside,1237,https://root.cern,https://github.com/root-project/root/pull/14174#issuecomment-1838939107,1,['down'],['downside']
Availability,"> I am not sure how but the failure in Ubuntu2310: https://github.com/root-project/root/actions/runs/7971661830/job/21783650878?pr=14627 seems limited to this PR .... Weird. No clue.; I just see:; ```; grep -r WriteFast * -n; bindings/pyroot/pythonizations/src/CPPInstancePyz.cxx:50: buf->WriteFastArray(PyBytes_AS_STRING(pybuf), PyBytes_GET_SIZE(pybuf));; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14627#issuecomment-1955051092:28,failure,failure,28,https://root.cern,https://github.com/root-project/root/pull/14627#issuecomment-1955051092,1,['failure'],['failure']
Availability,"> I am not sure how but the failure in Ubuntu2310: https://github.com/root-project/root/actions/runs/7971661830/job/21783650878?pr=14627 seems limites to this PR .... This test sporadically fails on that platform, not the first time I see it. I doubt it is related to this PR. Let me rerun just that platform",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14627#issuecomment-1956088929:28,failure,failure,28,https://root.cern,https://github.com/root-project/root/pull/14627#issuecomment-1956088929,1,['failure'],['failure']
Availability,"> I am not sure how they used outside, we were installing them before so lets restore working state of ROOT installation. But then it will be difference between installed and ""compiled-at-place"" version. Without installation these includes no longer available for the users.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5450#issuecomment-618890153:250,avail,available,250,https://root.cern,https://github.com/root-project/root/pull/5450#issuecomment-618890153,1,['avail'],['available']
Availability,"> I am not sure this can be fixed. If it works with 24 why not using 24; > ?. I use 30 bit (10 bit per colour) as default display depth with my; display, since the display supports it and hence I have less problems; with e.g. colour banding in photo/video applications, after all, why; should I dither down to 8 bits and not use the full potential of the; display, when the display supports more? Other applications work fine; with that and xdpyinfo also still shows visuals with 8 bits per colour; in addition to the 10 bit ones, so I guess it should be possible to use; one of those visuals and get a correct output. To have to restart the; X11 server with a different colour depth to get text visible text in; ROOT is a bit unpractical. Since everything except text is; drawn/displayed fine, I guess, somewhere in [1], there is a fundamental; difference, on how things get picked up and drawn, compared to; graf2d/x11/... [1]; https://github.com/root-project/root/blob/master/graf2d/x11ttf/src/TGX11TTF.cxx#L464. --; () ascii ribbon campaign - against html e-mail; /\ - against proprietary attachments",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8086#issuecomment-838299284:302,down,down,302,https://root.cern,https://github.com/root-project/root/issues/8086#issuecomment-838299284,1,['down'],['down']
Availability,> I am not sure though that the unresolved while linking is due to the high thread count. I think you might be right. The best way forward is to track down where those missing symbol are suppose to come from.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16553#issuecomment-2383235299:151,down,down,151,https://root.cern,https://github.com/root-project/root/issues/16553#issuecomment-2383235299,1,['down'],['down']
Availability,"> I believe the current failures are related to the roottest branch not being up-to-date with the latest master. Close but not quite. What is happening in the reverse. Once the CI test are started they pin the `ROOT master` commit that will be use to test. If one simply ""re-run"" the tests they will (this is intentional) use that same commit. To take in consideration new commits in the new CI build we need to do either of these 3 actions:; * Rebase the master onto the new PR branch.; * Add a new commit to the PR branch.; * Close and re-open the PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14967#issuecomment-2046265770:24,failure,failures,24,https://root.cern,https://github.com/root-project/root/pull/14967#issuecomment-2046265770,2,['failure'],['failures']
Availability,"> I boiled down the failures to a variation of the issue with the double loop that I already reported: [vgvassilev/clad#681 (comment)](https://github.com/vgvassilev/clad/issues/681#issuecomment-1917122065). Thank you, @guitargeek!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14165#issuecomment-1917738981:11,down,down,11,https://root.cern,https://github.com/root-project/root/pull/14165#issuecomment-1917738981,2,"['down', 'failure']","['down', 'failures']"
Availability,> I can't see the exact reason for clang-format error which is reported above. It simply fails for all PRs. No idea why,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9643#issuecomment-1017950333:48,error,error,48,https://root.cern,https://github.com/root-project/root/pull/9643#issuecomment-1017950333,2,['error'],['error']
Availability,> I cannot reproduce the failure of roottest-root-core-execStatusBitsCheck; it's possible the fact I switched to an enum class avoids the underlying bug in that test?. It is indeed possible. It could also be a platform dependent thing or it could be depend on the library actually build as part of ROOT ....,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/959#issuecomment-327901090:25,failure,failure,25,https://root.cern,https://github.com/root-project/root/pull/959#issuecomment-327901090,1,['failure'],['failure']
Availability,"> I didn't see this fail before, but from a first look:; > ; > > It looks like we have a problem with re-entrant JITing; > ; > Yes, `OL_applyQueryPhase1()` is reentered here and it waits for the JITDylib's `GeneratorsMutex` that was locked in the very same place in the previous invocation. While the `SessionMutex` in `ExecusionSession` is recursive, the `GeneratorsMutex` is not. I assume it's not supposed to be recursive. Instead, I guess the process of querying symbols should not be re-entrant.; > ; > The interesting frame in the callstack is:; > ; > ```; > #26 0x00007fffebd32f70 in _GLOBAL__sub_I_clingwrapper.cxx; > ```; > ; > This initializes the `llvm::orc::Platform`, which eventually calls back into the `ExecutionSession` and triggers the suspicious lookups. Is it necessary to do this in a static constructor? Maybe move it into an explicit init function and call it after the outer lookup finished? If it fixes the bug, maybe that's a way forward.; > ; > Otherwise, if this initialization must run in a static ctor, you may try and remove the JITDylib that initiates the `ld_open` from the `JITDylibSearchOrder` used in the lookup. Its symbols won't be available to cppyy then. (Never tried this in practice.). We cannot control what's in the static init of user libraries. They can use interpreter services. This approach used to work, why locking is necessary? Aren't we 'just' reading?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1103526477:1170,avail,available,1170,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1103526477,1,['avail'],['available']
Availability,"> I don't know if I'm misinterpreting something, but I noticed something very interesting: For this compilation error, clang gives a note message:; > ; > ```; > /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:392:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type; > ```; > ; > Is this enum type `EProperty` really only range from 0 - 63? clangd told me that the definition of first case `kIsClass` is from https://github.com/root-project/root/blob/master/core/meta/inc/TDictionary.h#L64 , but if I try the below cases, it told me that _this enum type `EProperty`_ from https://github.com/root-project/root/blob/master/core/cont/inc/TVirtualCollectionProxy.h#L49 ???; > ; > That may said, the compiler got confused about these two types that have same name?. That's interesting: `TGenCollectionStreamer` inherits from `TVirtualCollectionProxy` (via `TGenCollectionProxy`), so that `EProperty` is indeed ""closer"" than `::EProperty`. > > ""case value is not a constant expression"".; > ; > Humm ... either I don't understand the meaning or Clang is 'wrong' on this part. Both; > ; > ```; > EProperty(kIsPointer | kBIT_ISSTRING); > and; > kIsPointer | kBIT_ISSTRING; > ```; > ; > are ""constant"" (i.e calculatable at compile time). As discussed post-commit in https://reviews.llvm.org/D130058, the check is indeed questionable in a few corner cases. But that shouldn't stop us from finding a portable solution that avoids the problems altogether. > > ""note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type""; > > That may said, the compiler got confused about these two types that have same name?; > ; > That is likely the cause of the complaints albeit it is the developer (and possibly Coverity too) that got confused here as it was meant to be written as:; > ; > ```; > case ::EProperty(kBIT_ISSTRING):; > ```. The range checks of that new warning are also known bad for some cases, not sure if t",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11148#issuecomment-1208992073:112,error,error,112,https://root.cern,https://github.com/root-project/root/pull/11148#issuecomment-1208992073,1,['error'],['error']
Availability,"> I don't remember how the first commit fixes errors, it seems to throw errors in more cases. Can you remind me?. By removing the error-unchecked assertions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13296#issuecomment-1839042417:46,error,errors,46,https://root.cern,https://github.com/root-project/root/pull/13296#issuecomment-1839042417,3,['error'],"['error-unchecked', 'errors']"
Availability,"> I don't think ROOT is at fault here for relying on this feature of CMake. As described in the blob post by a CMake maintainer (emphasis is mine):. > Even if find_package() were only redefined once though, it would still be relying on **undocumented** CMake behavior which may be modified or removed completely in a future version. Reliance on such behavior should be discouraged and as the above discussion shows, the technique is not safe to use in general. It's mostly sad that vcpkg did the same trick, making ROOT incompatible with it. Given the circumstances I think this cannot be fixed at the moment, since neither ROOT nor vcpkg can easily change and I also don't expect CMake to make such behavior defined and allow overriding build-ins multiple times. So I guess we need to close this is won't-fix?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8633#issuecomment-898355331:27,fault,fault,27,https://root.cern,https://github.com/root-project/root/issues/8633#issuecomment-898355331,2,['fault'],['fault']
Availability,"> I don't understand the failures in roottest_root_tree_entrylist_make and roottest_root_tree_chain_make, my PR does not touch anything related to TTree/TChain/TEntryList. They appears to be bug in cmake/ctest/jenkins. Something that can't possibly not be there is not found (or vice et versa, asking for something that is not supposed to be there).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5603#issuecomment-627474797:25,failure,failures,25,https://root.cern,https://github.com/root-project/root/pull/5603#issuecomment-627474797,1,['failure'],['failures']
Availability,"> I don't understand those errors on Windows... I have seen similar timeouts in other PRs, e.g. https://github.com/root-project/root/pull/10231.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10281#issuecomment-1084732131:27,error,errors,27,https://root.cern,https://github.com/root-project/root/pull/10281#issuecomment-1084732131,1,['error'],['errors']
Availability,"> I don't understand why to keep backwards compatibility we need to silence warnings that were previously not silenced..?. The warning is raised at the first `TFile::Open`. Previously, that happened whenever a `Filter`,`Define` or any operation needed to access a branch of the TTree, i.e. after construction time. With this PR, it happens at construction time. In order to keep backwards compatibility, we discussed that the call to `TFile::Open`, at least for the purposes of this PR, should not let the user know that their file cannot be opened (yet), and that it is deferred to the first `Define` as it currently happens. Thus, we both do not raise an exception and we also have to hide the `Error: TFile cannot be opened` print statements to std::err that `TFile::Open` will trigger. So that's why I used the `RIgnoreErrorLevelRAII`. The fact that the warnings of the `readTotem` test are also silenced is merely a side-effect of having to implement the function in the way we discussed. At this point though, I am quite convinced that this is bringing more confusion than anything else, especially for a temporary quirk that I would have corrected in the next PR anyway. So I think I will just go with the final solution that we decided, i.e. throwing an exception right away at construction time. . Note that I will still need to modify the `.ref` file of the `readTotem` test because the warnings about the missing dictionaries will happen at construction time rather than during the first `Foreach` call.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13090#issuecomment-1661649786:697,Error,Error,697,https://root.cern,https://github.com/root-project/root/pull/13090#issuecomment-1661649786,1,['Error'],['Error']
Availability,"> I find the (relative path) filename and line number entirely redundant. The information is already contained in the ouput message and function name (just open the file, get to the routine and search for the message). *The* file - which file should I open?. > Ambiguous messages (same text for different lines) are rare. Define ""rare"". ```; io/io/src/TFileMerger.cxx: Info(""MergeRecursive"", ""could not read object for key {%s, %s}; skipping file %s"",; io/io/src/TFileMerger.cxx: Info(""MergeRecursive"", ""could not read object for key {%s, %s}; skipping file %s"",; ```; ```; io/io/src/TStreamerInfo.cxx: Info(""BuildOld"", ""element: %s %s::%s has new type: %s/%d"", element->GetTypeName(), GetName(; ), element->GetName(), dm ? dm->GetFullTypeName() : TDataType::GetTypeName((EDataType)newType), newType);; io/io/src/TStreamerInfo.cxx: Info(""BuildOld"", ""element: %s %s::%s has new type: %s/%d"", element->GetTypeName(), GetName(; ), element->GetName(), dm ? dm->GetFullTypeName() : TDataType::GetTypeName((EDataType)newType), newType);; ```; to name just those I immediately found in io/io :-). I'd argue we should keep the file name:; - for debug output, be verbose because someone wanted debug output.; - for error messages, be verbose because it's an exceptional, an error case, and more information is strictly better.; So indeed, maybe for `Info` we could go with your ""super-short"" version. But I dislike having the same interface behave completely differently. So what should the interface be? Maybe a new CPP macro, `R__LOG_TERSE_INFO`, that does not show the file and line and function?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7008#issuecomment-756903363:63,redundant,redundant,63,https://root.cern,https://github.com/root-project/root/issues/7008#issuecomment-756903363,3,"['error', 'redundant']","['error', 'redundant']"
Availability,> I forgot to include to include ROOT/RDF/RDatasetSpec ... . This is confusing. Adding an include should not solve a link error. How is your 'tst' made?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11465#issuecomment-1263888896:122,error,error,122,https://root.cern,https://github.com/root-project/root/pull/11465#issuecomment-1263888896,1,['error'],['error']
Availability,"> I get many things like that:; > ; > ```; > Processing libs.C+(""_t_application"",)...; > input_line_10:2:55: error: expected expression; > libs(""_r_o_o_t_1_1_internal_1_1_t_r_o_o_t_allocator"",); > ^; > input_line_10:2:41: error: expected expression; > libs(""_r_o_o_t_1_1_t_write_lock_guard"",); > ^; > input_line_10:2:35: error: expected expression; > libs(""_r_q___o_b_j_e_c_t_tester"",); > ```. This might be because you are using `zsh` instead of `bash`. Can you try a bash shell instead of zsh ?. Or alternatively, can you modify this line in makelibs to get the ZSH process id?; ```; pid=$BASHPID # Find the libraries for the class $1, use process id $BASHPID; $ROOT_CMD -l -b -q ""libs.C+(\""$1\"",$pid)""; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9966#issuecomment-1077389236:109,error,error,109,https://root.cern,https://github.com/root-project/root/pull/9966#issuecomment-1077389236,3,['error'],['error']
Availability,"> I getting error when compiling with gcc13:. Okay, because the PR title says ""warning"". This is not a warning...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12086#issuecomment-1399950125:12,error,error,12,https://root.cern,https://github.com/root-project/root/pull/12086#issuecomment-1399950125,1,['error'],['error']
Availability,> I have removed the PCH dependency since. The error above seems to show that the dependency was needed... My changes do not affect at all allDict.pch or how it's generated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10690#issuecomment-1402009056:47,error,error,47,https://root.cern,https://github.com/root-project/root/pull/10690#issuecomment-1402009056,1,['error'],['error']
Availability,> I just meant to apply the semi-broken patches locally and get fresh patches by running `diff`... ... or just download https://github.com/vgvassilev/clad/commit/4baee3583b36259809b361935df8b7d414a88898.patch and https://github.com/vgvassilev/clad/commit/262025e0dc6485700ea938dd3ee873e34a9ebe62.patch (GitHub is nice),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12833#issuecomment-1551636684:111,down,download,111,https://root.cern,https://github.com/root-project/root/pull/12833#issuecomment-1551636684,1,['down'],['download']
Availability,> I just tried to repair code and make it working as it was designed. The design of moving from CINT to cling was to expose to cling what was hidden for CINT.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5255#issuecomment-606528671:18,repair,repair,18,https://root.cern,https://github.com/root-project/root/pull/5255#issuecomment-606528671,1,['repair'],['repair']
Availability,"> I just tried with a local build using ""master"" on my Intel MacOS machine 14.0 23A344 and it works: <img alt=""Screenshot 2023-10-11 at 09 19 37"" width=""839"" src=""https://user-images.githubusercontent.com/4697738/274177192-60d1f530-dd59-4a2c-91b9-4e059aeef962.png"">. I downloaded the master on github and ran root successfully after cmake.; TBrowser still doesn't work though, luckily the web version works.; <img width=""1126"" alt=""截屏2023-10-11 16 01 39"" src=""https://github.com/root-project/root/assets/61787337/1481909e-57ea-4c48-84cf-6c64129ab7f2"">",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13834#issuecomment-1757072039:269,down,downloaded,269,https://root.cern,https://github.com/root-project/root/issues/13834#issuecomment-1757072039,1,['down'],['downloaded']
Availability,"> I know this is totally not relevant for you, but I am still wondering: does this allow me to use system clang or are there still downstream patches required?. Hi Stephan, no we still require downstream patches. Their number gets reduced on every upgrade, you can track the status for LLVM 18 here: https://github.com/root-project/llvm-project/commits/ROOT-llvm18. More importantly, and not yet reflected in `ROOT-llvm18`, we will now also require a patch to the core LLVM JIT infrastructure (until upgrading past LLVM 19): https://github.com/llvm/llvm-project/pull/95532",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15696#issuecomment-2238378233:131,down,downstream,131,https://root.cern,https://github.com/root-project/root/pull/15696#issuecomment-2238378233,2,['down'],['downstream']
Availability,"> I managed a reproducer:; > ; > First run this tutorial. https://root.cern/doc/master/tree4_8C.html; > ; > Then run:; > ; > ```; > root -l 'openTree.C(0)' -b -q; > Processing openTree.C(0)...; > 7.31217e-322ºC; > ; > root -l 'openTree.C(1)' -b -q; > Processing openTree.C(1)...; > 20.2826ºC; > ```; > ; > File openTree.C:; > ; > ```; > #include <iostream>; > #include ""TFile.h""; > #include ""TTree.h""; > ; > void openTree(bool setMakeClass = false) {; > auto f = TFile::Open(""tree4.root"");; > TTree *t4 = (TTree*)f->Get(""t4"");; > t4->SetMakeClass(setMakeClass);; > Double32_t temp;; > TBranch *br = t4->GetBranch(""fTemperature"");; > br->SetAddress(&temp);; > br->GetEntry(0);; > std::cout << temp << ""ºC"" << std::endl;; > }; > ```. Hi,. I suspect about an issue in the tree4.C file that is leading to this subsequent error: when writing the branches, each branch name should end with a dot to avoid degeneracy (objects of the same class are used for 2 different branches). . Please see this tutorial and particularly this comment by @pcanal during the review: ; https://github.com/root-project/root/pull/13205#discussion_r1265655686. Can you try generating the ROOT files with that modification and checking if the error persist? . @vepadulano would it be worth to add P. Canal comment about the dot at the end of the branch name into the TTree web documentation?. Best,; Alvaro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14583#issuecomment-2047309718:817,error,error,817,https://root.cern,https://github.com/root-project/root/issues/14583#issuecomment-2047309718,2,['error'],['error']
Availability,"> I see, we can add that, thank you for the explanation. Why can't one add this environment variable to the invocation in the ROOT build in ROOT's cmake?. The build failure is a just a symptom of the issue. In fact, ROOT was already built and in its final step it runs a sanity check something like `root.exe -l -b -q tutorials/hsimple.C` to catch such basic issues early. I'd be happy if we could solve this in a nicer way, however I do not think ROOT has enough information about its build process (and I think it should not). For example, even if we detect where Vc (or other relevant information) was at build time, this does not mean a lot. We cannot be sure that it stays at the same place on the deployment node. For instance, CMSSW-like setups then, at install time, reshuffle things around quite a bit. That environment variable is there because of that - essentially provides a way for ""devops"" (to use a modern word here) to express extra knowledge which is (nearly) impossible to deduce at build time. In addition, I think it'd be pretty bad if ROOT modified users' environment unknowingly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9594#issuecomment-1025536441:165,failure,failure,165,https://root.cern,https://github.com/root-project/root/issues/9594#issuecomment-1025536441,1,['failure'],['failure']
Availability,"> I suppose just using PATH rather then REALPATH in the place linked . One of the intentional side-effect of using REALPATH was to document which compiler had been used to generated 'these' binaries version of ROOT. (This could technically be solved by storing the REALPATH in an additional variable). One negative side-effect of switching from REALPATH to PATH is that it no longer points to the 'actual' compiler that had been used and in practice we get a failure if:. * ROOT is build version g++ ""new"" version found in the path; * ROOT is run with a much older g++ in the path. (and yes, it sound like damned if we do, damned if we don't)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10556#issuecomment-1128881960:459,failure,failure,459,https://root.cern,https://github.com/root-project/root/issues/10556#issuecomment-1128881960,1,['failure'],['failure']
Availability,"> I suppose we still wanna enable it on all our main tested platforms, at least for the CI nodes. I tend to agree. > I tried adding appending `-Wno-error` to the CMakeLists of some directories (like `interpreter`), but it didn't really work (I guess `-Werror` gets added after it so it suppresses the other flag) and even if it did it looks sketchy. Not sure what's the best way to approach this. As mentioned before, I think nothing is needed for `interpreter/` because we already disable all warnings for LLVM libraries. For `core/clingutils` and `core/metacling`, I think the flags must be set before `ROOT_OBJECT_LIBRARY`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15853#issuecomment-2173773554:148,error,error,148,https://root.cern,https://github.com/root-project/root/pull/15853#issuecomment-2173773554,1,['error'],['error']
Availability,"> I suspect about an issue in the tree4.C file that is leading to this subsequent error: when writing the branches, each branch name should end with a dot to avoid degeneracy (objects of the same class are used for 2 different branches). You mean setting the branch name as ""event_split."" and ""event_not_split."" ? But are there any subelements with the same name there?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14583#issuecomment-2048156746:82,error,error,82,https://root.cern,https://github.com/root-project/root/issues/14583#issuecomment-2048156746,1,['error'],['error']
Availability,"> I tested a bit on my end, I guess the `llvm::StringRef` conversion errors are the following:; > ; > ```; > /home/jhahnfel/ROOT/llvm13/src/core/metacling/src/TCling.cxx: In function ‘std::__cxx11::string GetSharedLibImmediateDepsSlow(std::__cxx11::string, cling::Interpreter*, bool)’:; > /home/jhahnfel/ROOT/llvm13/src/core/metacling/src/TCling.cxx:7119:25: error: ambiguous overload for ‘operator==’ (operand types are ‘llvm::StringRef’ and ‘const char [20]’); > if (SymName == ""_Jv_RegisterClasses"" ||; > ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~; > In file included from /home/jhahnfel/ROOT/llvm13/src/core/base/inc/TNamed.h:26,; > from /home/jhahnfel/ROOT/llvm13/src/core/meta/inc/TDictionary.h:44,; > from /home/jhahnfel/ROOT/llvm13/src/core/meta/inc/TDataType.h:25,; > from /home/jhahnfel/ROOT/llvm13/src/core/meta/inc/TInterpreter.h:25,; > from /home/jhahnfel/ROOT/llvm13/src/core/metacling/src/TCling.h:27,; > from /home/jhahnfel/ROOT/llvm13/src/core/metacling/src/TCling.cxx:20:; > /home/jhahnfel/ROOT/llvm13/src/core/base/inc/TString.h:844:15: note: candidate: ‘Bool_t operator==(const string_view&, const char*)’; > inline Bool_t operator==(const std::string_view &s1, const char *s2); > ^~~~~~~~; > In file included from /home/jhahnfel/ROOT/llvm13/src/interpreter/llvm/src/tools/clang/include/clang/Basic/DiagnosticIDs.h:19,; > from /home/jhahnfel/ROOT/llvm13/src/interpreter/llvm/src/tools/clang/include/clang/Basic/Diagnostic.h:17,; > from /home/jhahnfel/ROOT/llvm13/src/interpreter/llvm/src/tools/clang/include/clang/AST/NestedNameSpecifier.h:18,; > from /home/jhahnfel/ROOT/llvm13/src/interpreter/llvm/src/tools/clang/include/clang/AST/Type.h:21,; > from /home/jhahnfel/ROOT/llvm13/src/core/metacling/src/TClingDeclInfo.h:20,; > from /home/jhahnfel/ROOT/llvm13/src/core/metacling/src/TClingClassInfo.h:28,; > from /home/jhahnfel/ROOT/llvm13/src/core/metacling/src/TClingBaseClassInfo.h:29,; > from /home/jhahnfel/ROOT/llvm13/src/core/metacling/src/TCling.cxx:24:; > /home/jhahnfel/ROOT/llvm13/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1088544588:69,error,errors,69,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1088544588,2,['error'],"['error', 'errors']"
Availability,"> I think a malformed ROOT_MAX_THREADS is an error as setting this specific variable is very unlikely to have been done 'casually/just-because' and hence the program is mis-behaving (using too many threads) compared to the user's expectations. In that case `Error()` is certainly appropriate, but then that's an argument for aborting execution rather than continuing with the wrong amount of threads.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13057#issuecomment-1601270856:45,error,error,45,https://root.cern,https://github.com/root-project/root/pull/13057#issuecomment-1601270856,2,"['Error', 'error']","['Error', 'error']"
Availability,> I think it makes more sense to me to evaluate and save the function values on the bin centres and not on the edges. It depends that one wants to do with these saved values. ; To use with `TF1::GetSave()` - then current approach is better. One covers complete range.; If values at bin centers will be save - than calculating of function at xmin/xmax will not be possible while extrapolation is not implemented in `GetSave()`. For function painting bin centers is better. ; But this one can handle in TWebCanvas. ; There `f1->Save()` method called directly and one can shrink range by half of the bin. Therefore I prefer to have reliable function which saves points exactly at the range which was specified.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13949#issuecomment-1782482379:629,reliab,reliable,629,https://root.cern,https://github.com/root-project/root/pull/13949#issuecomment-1782482379,1,['reliab'],['reliable']
Availability,"> I think it might be hard to come up with a proper heuristic. For example is the threshold ""per dictionary"" (in which case it might be achiveable) or is it an accumulative cost, i.e. per whole set of library (in which case it is impossible) and is it lightly or highly dependent of the fraction of the generated dicitonary entries and/or header that are actually used?; > ; > > Users do not use make project; > ; > MakeProject is irrelevant here. It is ""only"" just to quickly produce an emulation of the ""Experiment Framework"" type of problem size. The relevant part is (as you noted) the amount of classes needed for I/O. One part that example does not emulate is the (high) number of libraries and dictionary. So _yes_ this type of problem is extremely relevant and no it is actually not directly represented in roottest. (and it is unknown which fraction of the roottests are exercising this code path (i.e. not only loading but also using the rootpcms). In principle the new implementation due to modules should allow us to easily turn off rootpcms and test in the cmssw context. Then I guess the results should be more reliable. > ; > Also I suppose there are ways to reduce the up-front cost of the rootpcms (for example delaying their loading until needed). That's what I am after. Do you have something in particular in mind?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3012#issuecomment-659503189:1125,reliab,reliable,1125,https://root.cern,https://github.com/root-project/root/pull/3012#issuecomment-659503189,1,['reliab'],['reliable']
Availability,"> I think it should live in InternalTreeUtils?. I was thinking this is generic enough that we may want to use it in places that do not strictly depend from `libTree`, but maybe I'm just overthinking. > How can we be sure that this function returns the same files in the same order as the previous one in all cases?. I hope we already get a (very good?) degree of certainty by not breaking existing test cases. I can come up with a few more just to add extra safety. Irrespective of this, the function is taken verbatim from the logic in `TChain::Add`. Do you see any part of the function that intuitively might lead to different results? I was thinking about this and the only place that remotely gives me a slight doubt is using `std::sort` instead of `TList::Sort`, but I really hope that doesn't introduce a different behaviour. > the new one throws if a directory cannot be opened. Yes indeed that's a different behaviour. The existing logic never throws. In case `dir == nullptr`, which I guess happens if the expanded directory cannot be found/opened (?), then it will just fall to the end of the `TChain::Add` method and `return nf`, where `nf` will be zero since no files have been added. In this regard I see two options:. 1. The new function throws (because subjectively is the correct behaviour). Then in `TChain::Add` we can keep the old behaviour, by catching the error and not re-raising it.; 2. The new function can return an empty vector, in case `dir == nullptr`. This is more similar in spirit with the old behaviour.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13160#issuecomment-1619057225:1377,error,error,1377,https://root.cern,https://github.com/root-project/root/pull/13160#issuecomment-1619057225,2,['error'],['error']
Availability,"> I think my fix is actually could be right, can you check it please again?. Your fix simply removes usage of semi-standard pthread_setname_np function on linux.; It is not right solution in my mind. Unfortunately, I cannot test with clang8. ; With clang-6.0.1 I see no problems. That you always can do - try to compile following simple program:. #include ""civetweb.h"". int main(int argc, char **argv); {; return 0;; }. Just copy it into net/http/civetweb directory and call:. clang -pthread civetweb.c main.c -ldl -o test . Can you reproduce your error message?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2581#issuecomment-418737656:548,error,error,548,https://root.cern,https://github.com/root-project/root/pull/2581#issuecomment-418737656,2,['error'],['error']
Availability,"> I think the error is due to the fact that there is no VDT on Windows. Did you try without VDT on other platforms?. I don't think it's that. :thinking: `ROOTConfig.cmake` will not look for VDT in this PR's setup if VDT was not used in the build. I instead believe that I was just trying to set the `CMAKE_PREFIX_PATH` environment variable incorrectly in the Windows shell. Since Windows provides a few different shells, each of which comes with a slightly different formalism, in the end I reverted back to passing `CMAKE_PREFIX_PATH` as a cache variable to that test. On Linux that works. Hopefully it will work on Windows too. I tried to set up a build on Windows on my laptop, but when after about 20 minutes it was still failing in one of the externals, I just gave up. :frowning:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11844#issuecomment-1342794108:14,error,error,14,https://root.cern,https://github.com/root-project/root/pull/11844#issuecomment-1342794108,1,['error'],['error']
Availability,"> I think the failures are real, we're missing a number of patch to make macOS 11 work with v6.20. It's a combination of missing support and the broken macphsft20. But we don't *need* to make v6.20 work on macOS11. But I guess we currently have a version independent set of PR platforms... That'll auto-fix with root.git having the CI pipeline ""inside"", in the future... For now we will likely have to ignore macOS11 for v6.20 :-/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7635#issuecomment-804055946:14,failure,failures,14,https://root.cern,https://github.com/root-project/root/pull/7635#issuecomment-804055946,1,['failure'],['failures']
Availability,"> I think the failures are real. Unfortunately, they indeed are. I realized where the problem is coming from. I still need to figure out how to solve it though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10420#issuecomment-1104097504:14,failure,failures,14,https://root.cern,https://github.com/root-project/root/pull/10420#issuecomment-1104097504,1,['failure'],['failures']
Availability,"> I think the problem is that Cling is removing ""Names"" of SiStripCluster when unloading AutoParse (which is kind of expected) but then it complains that it doesn't know SiStripCluster even if libStrip.so is loaded. Actually it does say it knows it:; ```; ROOT_prompt_6:1:16: error: variable has incomplete type 'SiStripCluster'; SiStripCluster obj;; ^; libStrip dictionary forward declarations' payload:5:132: note: forward declaration of 'SiStripCluster'; ...__attribute__((annotate(""$clingAutoload$SiStripCluster.h""))) SiStripCluster;; ```; it even points to the expected rootmap-based forward declaration. What no longer works is the (redo of the) autoloading. . What is weird is that it does works without the ""moving function definition of IPruneTool"". I recommend that we start by understanding this behavior. First, when it works, does it work because the AutoLoading is redone or does it work because the unloading is not effective enough?. thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2852#issuecomment-435078550:276,error,error,276,https://root.cern,https://github.com/root-project/root/pull/2852#issuecomment-435078550,1,['error'],['error']
Availability,"> I think there is a pretty clear explanation where this comes from in the commit history. We could not load `gRandom`. That was with the very old dyld-based approach to loading symbols. This PR checks if the new approach has the same problem. Note that:; - We can still not reproduce the issue; - With this change, I got the following test failure on Windows (not tested in our CI):; ```; 988: Processing C:/Users/sftnight/git/master/tutorials/rcanvas/symlog.cxx...; 988: IncrementalExecutor::executeFunction: symbol '_imp_?gRandom@@3PAVTRandom@@A' unresolved while linking function '_GLOBAL__sub_I_cling_module_5'!; 988: You are probably missing the definition of _imp_?gRandom@@3PAVTRandom@@A; 988: Maybe you need to load the corresponding shared library?; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10330#issuecomment-1091405727:341,failure,failure,341,https://root.cern,https://github.com/root-project/root/pull/10330#issuecomment-1091405727,2,['failure'],['failure']
Availability,"> I think there should be little failures since we switch already long ago to the ""just fail the test"" mode. But you never know :). There is a ton of tutorials that would fail that currently do not run, see #5938 . But I don't think this PR interferes with that, right @hageboeck ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5408#issuecomment-654898523:33,failure,failures,33,https://root.cern,https://github.com/root-project/root/pull/5408#issuecomment-654898523,1,['failure'],['failures']
Availability,"> I think this was fixed in more recent version of clang,. What was fixed by clang?. > without this flag we got run-time undefined symbols errors. I understand, but those errors are certainly telling you something is wrong.; It seems this just ignores the underlying issue to not show errors, but then **threadlocal**, **std::thread** (and others) will not work as expected.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1607#issuecomment-364185651:139,error,errors,139,https://root.cern,https://github.com/root-project/root/pull/1607#issuecomment-364185651,3,['error'],['errors']
Availability,"> I think we need to think about mapping and the view interface, which uses `RField<T>::Map()` where available. I'd be in favor of ignoring read callbacks for mapping. Mapping should be the interface to get the fastest possible performance. Of course, that would break views on simple types with read callback. One way to deal with it is to simply not allow creating a view on a field with a mappable type and a read callback. Good point; I agree on that :+1:. However, given that any `RField<T>` instance that has an on-disk field ID set (such as the one internally kept by `RNTupleView`) can be connected to a page source, additional bookkeeping is required somewhere else. (**EDIT:** see the pull request description - everything discussed there)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11731#issuecomment-1334547546:101,avail,available,101,https://root.cern,https://github.com/root-project/root/pull/11731#issuecomment-1334547546,2,['avail'],['available']
Availability,> I thought (in theory) using fixed width integer would be more reliable . Yes and and it correct for most type of code. However the implementation the standard choose (intX_t for a given X is a typedef to different C++ types on different platform) means that when using meta-programming or typeids the user intent is gone (ROOT only sees the target of the typedef not its spelling) and conflict with design choice made before those typedef where even though of :). In order to handle this we would to add support for schema evolution for the leaflist case. Note that this problem should not appear if you are using objects to create the branches; this code path support automatic schema evolution.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7565#issuecomment-802394071:64,reliab,reliable,64,https://root.cern,https://github.com/root-project/root/issues/7565#issuecomment-802394071,1,['reliab'],['reliable']
Availability,"> I thought we got rid of the implicit using namespace std?. I don't know, but that's not good enough anyway (Cling fails too, but with another error); And:; ```; root [1] cout << ""hello"" << endl;; hello; root [2]; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14602#issuecomment-1934238900:144,error,error,144,https://root.cern,https://github.com/root-project/root/issues/14602#issuecomment-1934238900,1,['error'],['error']
Availability,"> I thought you wanted to support non-explicit linking, too. . Yes, true. But the explicit linking case is seemingly broken now. > we should just get all loaded libraries and append them. That is where we started a long time and ago and led to spurrious failures. For example:; ```; root; root [] .L A.C+; root [] .L B.C+; root [] .q; rm A.C A_C*; # User give up on A.C; root; root [] .L B.C+; // linking error complaining about A_C.so not found.; ```; > By symbol you mean clang::Decl?. Not sure. I meant that during parsing, 'missing' symbols provoke call to 'auto-parsing' mechanism that get info from the rootmap file (humm I realize that this is not necessary quite an accurate description :( ). > That is the power of the new dynamic loader. . It works solely if it is loaded though :). We do have users that use ACLiC to generate libraries (from a Makefile) to be used to link to a main executable.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5235#issuecomment-606092136:254,failure,failures,254,https://root.cern,https://github.com/root-project/root/pull/5235#issuecomment-606092136,2,"['error', 'failure']","['error', 'failures']"
Availability,"> I took macphsft20 offline; macphsft23 should jump in. @Axel-Naumann hmm, `macphsft23` is even worse: `xcrun: error: invalid active developer path (/Library/Developer/CommandLineTools), missing xcrun at: /Library/Developer/CommandLineTools/usr/bin/xcrun` What do I have to do to get `macphsft20` back? :sweat_smile: I think I found enough commits to get (most of) the tests pass",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7635#issuecomment-804875300:111,error,error,111,https://root.cern,https://github.com/root-project/root/pull/7635#issuecomment-804875300,1,['error'],['error']
Availability,"> I trust you 😄; > ; > The commit message or the code comments could use some more information to help posterity out, e.g. why changing those flags fixes those errors, whether this is expected to be fixed in future versions of MSVC, whether the problem is known upstream, etc.. I'm currently working on it, just want to have the nightlies green",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10141#issuecomment-1069208047:160,error,errors,160,https://root.cern,https://github.com/root-project/root/pull/10141#issuecomment-1069208047,1,['error'],['errors']
Availability,"> I understand this will be simplified when we can pass a configuration object to RDataFrame where we specify the range. When reading trees/chains, I'm not sure the configuration object will allow anything more than what we can already do with TEntryLists?. IIUC the redundant info is that `globalend = globalstart + (localends - localstarts).sum()` (i.e. we could avoid passing `globalend`). However: do you still need `globalstart` and `globalend` at all when using TEntryLists?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8646#issuecomment-895318380:267,redundant,redundant,267,https://root.cern,https://github.com/root-project/root/pull/8646#issuecomment-895318380,2,['redundant'],['redundant']
Availability,"> I was thinking this is generic enough that we may want to use it in places that do not strictly depend from libTree. I guess if the need ever comes up we can (carefully!) consider making this particular globbing implementation available outside of `tree/`, but I'd be very conservative. How does RNTuple do globbing?. > I hope we already get a (very good?) degree of certainty by not breaking existing test cases. Do we have tests for edge cases in globbing or rarely-used features of the globbing syntax?. > the only place that remotely gives me a slight doubt is using std::sort instead of TList::Sort. I would keep `TList::Sort` to avoid unintended shuffling of things with weird characters or stuff like that. Otherwise you'd have to make sure that stuff like `01.root`, `001.root` and `0.root` get ordered the same way between the two. But why risking that?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13160#issuecomment-1619095994:229,avail,available,229,https://root.cern,https://github.com/root-project/root/pull/13160#issuecomment-1619095994,1,['avail'],['available']
Availability,"> I will look at it. I prefer to have a self consistent doc. Having it with the doc reduces the dependencies in case the remote website is down. I see. In that case, I would suggest to use a [git submodule](https://www.atlassian.com/git/tutorials/git-submodule). This way it is self-consistent and it would work without Internet.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10067#issuecomment-1061659813:139,down,down,139,https://root.cern,https://github.com/root-project/root/issues/10067#issuecomment-1061659813,1,['down'],['down']
Availability,"> I will provide you the output for ROOTDEBUG=7.; > ; > Could you elaborate a bit on the mmap?. The pcm files are ""mmapped"" when being opened. That practically uses some virtual memory with the promise it won't increase your rss, unless something is needed from that file. Here is how this is achieved: https://github.com/root-project/root/blob/6eb7f64bd7d93c492226b1a5ea5048a149814278/interpreter/llvm/src/tools/clang/lib/Serialization/ModuleManager.cpp#L216. I believe your issue is that due to some identifier lookup we start loading pcm files which have sections that require eager deserialization where the mmap manifests into a real rss increase. > I would expect that using MAP_SHARED would be enough of a workaround for our (ALICE) use case, because what is really killing us is the fact the memory is not shared among the many processes we have. Any reason why that cannot be done? Did I misunderstand something?. The reason is that the serialization in Clang has deficiencies and reads from disk when a pcm file is loaded. I've been hunting down these cases and sometimes we could avoid them. That's why I was looking for some output that could help us do that. That being said, we could make some effort to split the startup phase of ROOT into loading and initialization. Then we could move the registration of pcm files and setting up the ROOT's runtime as part of the initialization process but realistically, if you use ROOT for anything you'd probably need these both...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13000#issuecomment-1591024599:1051,down,down,1051,https://root.cern,https://github.com/root-project/root/issues/13000#issuecomment-1591024599,1,['down'],['down']
Availability,"> I worked around it with using the custom compile command. Yes, when I used VS code I also set the build command to something along the lines of `cd build; cmake --build .`. But if it was just to avoid that, I'd say this patch is overkill..I assume Bernhard's IDE does more. BTW I guess a downside of this patch is that checking out a different branch/ROOT version in the source directory might break your build, which wouldn't happen now, right?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6010#issuecomment-656318874:290,down,downside,290,https://root.cern,https://github.com/root-project/root/pull/6010#issuecomment-656318874,1,['down'],['downside']
Availability,"> I would still think we need to address: https://github.com/root-project/root/pull/16465/files#r1767367204. I think that's done. It now configures with:; ```diff; -- 191/247 python tutorials have been activated.; - error: No such remote 'origin'; + -- Searching for ""origin"" repo of roottest: error: No such remote 'origin'; -- Found roottest: /Users/shageboeck/code/root-src/../roottest; ```; What do you think @pcanal ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16465#issuecomment-2418725599:216,error,error,216,https://root.cern,https://github.com/root-project/root/pull/16465#issuecomment-2418725599,2,['error'],['error']
Availability,"> I'd like to move forward with this in the current master as soon as possible. This is a general improvement in terms of stability and maintenance and we probably should not wait until bugs start showing up to justify getting this in. Is there anything else that's required before merging it?. Okay, that's a totally different motivation. The previous argument was that this is ""changing the world"" for CMS, which is not the case in my current understanding and we should therefore stop claiming. > @hahnjo, @smuzaffar let me know if you have any objections in moving forward here. I have mixed feelings about backporting that many commits for an architecture where we don't have immediate bug reports at the moment that would be solved by the changes. ROOT currently relies on LLVM 16 and that has a certain number of features and supported platforms; in my understanding these changes come in anyway with the next upgrade, right?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13850#issuecomment-1940612642:136,mainten,maintenance,136,https://root.cern,https://github.com/root-project/root/pull/13850#issuecomment-1940612642,1,['mainten'],['maintenance']
Availability,"> I'd prefer to put the message last, because the message might be multi-line. That's a good argument. Thinking about [what I'm using RLogger for in RDF](https://github.com/root-project/root/pull/6828) I tend to agree with @pcanal, users won't care about what source code line the `Info` messages come from (and if they really do, they are one grep away) but devs would hate to have to grep for a given Error/Fatal/Warning every time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7008#issuecomment-756902921:403,Error,Error,403,https://root.cern,https://github.com/root-project/root/issues/7008#issuecomment-756902921,1,['Error'],['Error']
Availability,"> I'll have another look at the order; I expected user vs system to have a different order now than before. This "".L"" printout is not available in ROOT as we do some preprocessing -- you could use `gInterpreter->ProcessLine("".L"")` to get around it. The order of libraries should be similar to the order from `ldconfig -v`... > ; > Independently, was `.L` not used for loading libraries?. Yes? "".L"" followed by nothing should also print the loaded libraries as per some fixme in this patch.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6606#issuecomment-808855465:134,avail,available,134,https://root.cern,https://github.com/root-project/root/pull/6606#issuecomment-808855465,1,['avail'],['available']
Availability,"> I'm a little confused as the same tests seems to have been quoted as `passed` and `failed` in the same log. I struggle to find the exact definition of each test as well. I looked through the relevant files, but the structure is not clear to me. Which one exactly? I see from the logs that the interpreted stress test exits with code 1, so there's something going on. The node that has the high number of failures is probably a nullptr deref or similar. > Also, last time when I spoke with @amadio about the future of ROOT, he said you guys discussed making sure people outside of CERN can contribute. Unfortunately, I had to use my CERN login to see the test logs. I also don't know how to replicate the tests in my environment. Do they depend on files hosted somewhere? Could you give me some docs to read so I can find my way around?. Yes, I agree that it's not great to have jenkins behind a CERN login, but I guess this has to be done to secure the instance. The tests should be self-consistent, i.e. bring their own files. Try `ctest -R stressHistFactory -V` to see what's going on locally on your machine (i.e. see invocation and which files are used etc). If the test isn't there, you might have to activate `-Dtesting=ON` or `-Dhistfactory=ON` (which requires `-Dxml=ON`) in cmake.; Does the test pass locally?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9271#issuecomment-968052222:406,failure,failures,406,https://root.cern,https://github.com/root-project/root/pull/9271#issuecomment-968052222,2,['failure'],['failures']
Availability,"> I'm not 100% sure, but may be related to the general issue with jitted code and errors at https://github.com/root-project/root/issues/15076 ?. Ah thanks for pointing this out! It skipped my attention and I recently created exactly the [same bug report](; https://github.com/root-project/root/issues/15399) which is already closed with a fix by https://github.com/root-project/root/pull/15400 so I guess we can close that one and open a new issue to remind ourselves to investigate a better approach for the JIT code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15477#issuecomment-2112622478:82,error,errors,82,https://root.cern,https://github.com/root-project/root/pull/15477#issuecomment-2112622478,1,['error'],['errors']
Availability,"> I'm not familiar with root's llvm merging strategy, how to fix above llvm-diff errors?. We need to have a tag in https://github.com/root-project/llvm-project/. I will take care of this, that's why I asked for the commit hashes :wink: . In the mean time, it would be great to get CMS testing on `ppc64le`. @smuzaffar can you help with that? Now that the LLVM upgrade is merged, I guess this should be a bit easier...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13850#issuecomment-1864372469:81,error,errors,81,https://root.cern,https://github.com/root-project/root/pull/13850#issuecomment-1864372469,1,['error'],['errors']
Availability,"> I'm still investigating why this doesn't happen in `master` with LLVM 13... Oh well, this can be summarized as ""sheer luck"". Let me explain: In `master`, LLVM 13 only checks the `explicit` clause when trying to construct the `std::pair`:; ```; root [0] template <typename T> class Inner;; root [1] template <> class Inner<int>;; root [2] std::pair<int, Inner<int>> p1;; In module 'std' imported from input_line_1:1:; /opt/gcc/13.2.0/include/c++/13.2.0/bits/stl_pair.h:194:11: error: field has incomplete type 'Inner<int>'; _T2 second; ///< The second member; ^; ROOT_prompt_2:1:28: note: in instantiation of template class 'std::pair<int, Inner<int> >' requested here; std::pair<int, Inner<int>> p1;; ^; ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'; template <> class Inner<int>;; ^; In module 'std' imported from input_line_1:1:; /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:1040:25: error: incomplete type 'Inner<int>' used in type trait expression; = __bool_constant<__is_constructible(_Tp, _Args...)>;; ^; /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:1265:21: note: in instantiation of template type alias '__is_constructible_impl' requested here; : public __and_<__is_constructible_impl<_Tp>,; ^; /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:161:30: note: in instantiation of template class 'std::__is_implicitly_default_constructible<Inner<int> >' requested here; __enable_if_t<bool(_Bn::value)>...>;; ^; /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:177:16: note: while substituting explicitly-specified template arguments into function template '__and_fn' ; : decltype(__detail::__and_fn<_Bn...>(0)); ^; /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:182:29: note: in instantiation of template class 'std::__and_<std::__is_implicitly_default_constructible<int>, std::__is_implicitly_default_constructible<Inner<int> > >' requested here; : __bool_constant<!bool(_Pp::value)>; ^; /opt/gcc/13.2.0/include/c++/13.2.0/bits/stl_pair.h:247:16: note: in instantiation of temp",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13815#issuecomment-1750375424:478,error,error,478,https://root.cern,https://github.com/root-project/root/issues/13815#issuecomment-1750375424,2,['error'],['error']
Availability,"> IIUC a NullStmt would mean `if (true) {1;;}`.; > ; > I'd prefer to keep value printing simple and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks I'm not yet convinced that it's worth the effort (and yes, that's an additional counter argument). And I'm not just talking dev time but also long-term maintenance: more code, more clang interfaces used. I agree with Axel. A smarter value printer is nice to have but we have enough more important issues.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6644#issuecomment-713643650:489,mainten,maintenance,489,https://root.cern,https://github.com/root-project/root/issues/6644#issuecomment-713643650,2,['mainten'],['maintenance']
Availability,"> IMHO it sends the wrong signal that nvc++ would be supported. I'm still not seeing the point of having build system support for a ""broken"" compiler (for our purposes). A fair point but I fail to see how it has an consequence for this PR. As is the master does not reject `nvc++` is just fails in some weird ways (that are fixed by this PR) and some weirder ways (bug in the compiler). . ie. *Not* merging this PR would *not* send the signal that `nvc++` is not supported, it would only make it harder to support it in the future and make it more annoying than it should be to try the next version (because then this PR needs to then be hand applied (if by some miracle the tester remembers or knows about this PR) or re-discovererd-and-re-implemented). The 'right' way to express the point you make is:; (a) merge the best possible version of this PR ; (b) explicitly warn or error out upon seeing a known broken version of `nvc++`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14370#issuecomment-1900419680:878,error,error,878,https://root.cern,https://github.com/root-project/root/pull/14370#issuecomment-1900419680,1,['error'],['error']
Availability,"> Ideally you would backport the fix for root.git now. The change of roottest can stay in master and you can merge that once it's fixed / disabled on windows. Thanks!. Done, also directly pushed to `v6-26-00-patches` given that no test detected the failure anyhow. I'll wait for Jenkins to complete https://github.com/root-project/roottest/pull/808 before I merge that, though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9691#issuecomment-1022213045:249,failure,failure,249,https://root.cern,https://github.com/root-project/root/pull/9691#issuecomment-1022213045,1,['failure'],['failure']
Availability,"> If I compile this branch with gcc12 and then try to construct a `std::unique_ptr<TH1> p` on the ROOT prompt, I get; > ; > ```; > In module 'std' imported from input_line_1:1: ; > /opt/gcc/12.1.0/include/c++/12.1.0/type_traits:1032:12: error: 'std::is_move_constructible<std::default_delete<TH1> >' has different definitions in different modules; defined here ; > struct is_move_constructible ; > ^ ; > /opt/gcc/12.1.0/include/c++/12.1.0/type_traits:1032:12: note: definition in module 'std.type_traits' is here ; > In module 'std' imported from input_line_1:1: ; > /opt/gcc/12.1.0/include/c++/12.1.0/bits/unique_ptr.h:467:7: error: 'std::unique_ptr<TH1, std::default_delete<TH1> >::get_deleter' from module 'std.memory' is not present in definition of 'std::unique_; > ptr<TH1, std::default_delete<TH1> >' provided earlier ; > get_deleter() noexcept ; > ^ ; > /opt/gcc/12.1.0/include/c++/12.1.0/bits/unique_ptr.h:269:11: note: definition has no member 'get_deleter' ; > class unique_ptr ; > ^ ; > In module 'std' imported from input_line_1:1: ; > /opt/gcc/12.1.0/include/c++/12.1.0/bits/unique_ptr.h:432:7: error: 'std::unique_ptr<TH1, std::default_delete<TH1> >::operator=' from module 'std.memory' is not present in definition of 'std::unique_pt; > r<TH1, std::default_delete<TH1> >' provided earlier ; > operator=(nullptr_t) noexcept ; > ^ ; > /opt/gcc/12.1.0/include/c++/12.1.0/bits/unique_ptr.h:269:11: note: definition has no member 'operator=' ; > class unique_ptr ; > ^ ; > In module 'std' imported from input_line_1:1: ; > /opt/gcc/12.1.0/include/c++/12.1.0/bits/unique_ptr.h:422:2: error: 'std::unique_ptr<TH1, std::default_delete<TH1> >::operator=' from module 'std.memory' is not present in definition of 'std::unique_pt; > r<TH1, std::default_delete<TH1> >' provided earlier ; > operator=(unique_ptr<_Up, _Ep>&& __u) noexcept ; > ^ ; > /opt/gcc/12.1.0/include/c++/12.1.0/bits/unique_ptr.h:269:11: note: definition has no member 'operator='; > class unique_ptr; > ^; > [...]; > ```; > ; ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1216464117:237,error,error,237,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1216464117,2,['error'],['error']
Availability,"> If the incremental build downloaded from S3 is up to date the build purely relies on it. It then behaves as if it's just downloading, rebasing the PR and building.; > ; > If the existing artifact is not up to date, or it doesn't exist, the job first builds the target branch to populate S3 with the newer version, and then continues as usual. This only adds a few minutes to that run and then proceeding runs will behave like usual as the artifacts are now up to date again. We should always have an up-to-date build from `master`, so this shouldn't be a problem in practice. Plus it generates a race condition between the build on `master` and any PR build. > Consider a CI where PR builds don't upload, and you have a PR where the CMake options are changed. An existing build artifact for the new options doesn't exist so the first run will be from scratch and take ~40 minutes. An issue arises and the PR is gets a new commit, and a new job starts. This job will then also take ~40 minutes to complete because the previous commit didn't upload any clean artifacts to use. I'm probably missing the place where it downloads a previous PR build, I only see `download_latest`. And in any case, I would argue it is ok for a PR changing CMake options to take ~40 minutes on subsequent pushes (the initial push will take that long anyway, and even spend time on first building the base, see above). You really want that to build cleanly, ROOT's build system is not always the greatest on incremental builds...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12201#issuecomment-1415734845:27,down,downloaded,27,https://root.cern,https://github.com/root-project/root/pull/12201#issuecomment-1415734845,3,['down'],"['downloaded', 'downloading', 'downloads']"
Availability,"> If this was mostly for unloading, then the test failures are telling us we might need this for something else. Maybe, maybe not: lookup performs unloading, and these tests' missing symbols are typical examples for templates instantiated during lookups.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10696#issuecomment-1146253227:50,failure,failures,50,https://root.cern,https://github.com/root-project/root/pull/10696#issuecomment-1146253227,1,['failure'],['failures']
Availability,> If we cannot parse a header at runtime then ROOT is in a broken state (think ACLiC). Hiding this from the interpreter isn't a fix. Then solution - fully remove such ifdefs where possible. ; But then it will be absolutely different PR.; I just tried to repair code and make it working as it was designed.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5255#issuecomment-606485307:254,repair,repair,254,https://root.cern,https://github.com/root-project/root/pull/5255#issuecomment-606485307,1,['repair'],['repair']
Availability,"> If windows compiler does not complain - one can remove this special section; > ; > But is it not exactly the same code in `graf3d/eve/inc/TEveVector.h`?; > I guess, one also should change there. So it looks like the dictionary generation might still create issues: `error G34C21FBE: static_assert expression is not an integral constant expression`. but it is fixed with more recent version of Visual Studio...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6088#issuecomment-665083613:268,error,error,268,https://root.cern,https://github.com/root-project/root/pull/6088#issuecomment-665083613,1,['error'],['error']
Availability,"> If you are not carefully, this might lead to the case where at start up for n-core/n-tasks, we might issue (n(n+1) / 2) files opens (eg. at the very least the first file being requested to be open n times). Mmmh that's right...we'll have to be careful. > the global number is needed to load the proper friend. What I'm saying only applies when there are no friends. In case there are friend trees (or a TEntryList) currently TTreeProcessorMT opens all files once at the beginning to recover all tree entry numbers, and each task builds the full chain (and then processes a certain range of global entry numbers).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12190#issuecomment-1412173371:485,recover,recover,485,https://root.cern,https://github.com/root-project/root/issues/12190#issuecomment-1412173371,1,['recover'],['recover']
Availability,"> Iiuc https://maskray.me/blog/2021-05-16-elf-interposition-and-bsymbolic argues that -Bsymbolic should be fine for libCling and is superior to no symbolic interposition. Thanks, Axel, for the link to this interesting article. By ""accidental"", I meant that, if we assume the gcc manpage description of the flag correct and complete (*), then we rely on a side-effect of compiler optimizations. The article you quoted mention another optimization that should make it work for all calls to functions defined in the same compilation unit (**), while I wrote it will be limited to inline functions. The -Bsymbolic, which is an option of the linker, instead of compiler, addresses directly what we target. The ld manpage description reads as ""When creating a shared library, bind references to global symbols to the definition within the shared library, if any. "". Philippe. (*) ""with -fno-semantic-interposition the compiler assumes that if interposition happens for functions the overwriting function will have precisely the same semantics (and side effects). "". (**) Although the statement on LD_PRELOAD confuses me.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8717#issuecomment-885451125:15,mask,maskray,15,https://root.cern,https://github.com/root-project/root/pull/8717#issuecomment-885451125,1,['mask'],['maskray']
Availability,"> In [#10004 (review)](https://github.com/root-project/root/pull/10004#pullrequestreview-916874733) I mean the other .C macros in the doxygen/folder, this used to make the doc. Not all the tutorials. Oh, I see. But those macros in the doxygen folder call themselves another macros, so I was just updating the ones that are being called (not all tutorials explicitly) because otherwise it gives an error when trying to compile them. Should I revert those changes? Is there a downside of adding the headers?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10195#issuecomment-1075126102:397,error,error,397,https://root.cern,https://github.com/root-project/root/pull/10195#issuecomment-1075126102,2,"['down', 'error']","['downside', 'error']"
Availability,"> In my opinion, it does not matter too much where it is stored, as you have to go to QtCreator and add it to the ""help database"" by hand using a file dialog. Maybe including it in the binaries inside a documentation folder would be enough, so that one does not need to reupdate the webpage too often?; > ; > In any case, I think it would be great if it is automatically generated when building from source, always in the same position, so that one does not need to update the qtcreator database path pointer. I would say it would be handier if the QCH is generated directly and is downloadable via the CERN website. (At least for stable releases 6.24, 6.26, ...). For this to work, GENERATE_QHP should be set to True in the Doxyfiles of the ROOT repo, and then QHG_LOCATION set to a path where qhelpgenerator is installed in the ROOT build-servers (if not in the default path).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8781#issuecomment-1008857366:582,down,downloadable,582,https://root.cern,https://github.com/root-project/root/issues/8781#issuecomment-1008857366,1,['down'],['downloadable']
Availability,"> In the currently generated code, I don't see a reinterpret_cast... Is the error message in the commit message maybe copied from an intermediate try?. Indeed it was! I update the description and git log.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11556#issuecomment-1329810173:76,error,error,76,https://root.cern,https://github.com/root-project/root/pull/11556#issuecomment-1329810173,1,['error'],['error']
Availability,"> In the original reproducer, the __getitem__ attribute check is done for the instance, so this wouldn't help there right?. Right, I know no way around that. Also, it'd be fine for those cases where a pointer is known to be an array, but like the example above, would fail cases where it's simply *likely* to be an array, as a `__getitem__` would be returned. > https://gitlab.cern.ch/atlas/athena/-/merge_requests/70435/diffs. That will give you different answers depending on whether the sequence has 0 or N elements, though. But there are plenty more worrisome things in that code. :). I'm looking at the implementation of `PySequence_Check`, which is:. ```; int; PySequence_Check(PyObject *s); { ; if (PyDict_Check(s)); return 0; ; return Py_TYPE(s)->tp_as_sequence &&; Py_TYPE(s)->tp_as_sequence->sq_item != NULL;; }; ```. The default `__getitem__` is added to the class as part of the `tp_methods` set and I guess it ends up there. A bit strange, though, as `sq_item` is limited to indexing with Py_ssize_t and that's not specified in the method list (only `METH_O`). But it may give us something to work with as `mp_subscript` is also available. Would have to see whether C++-side `operator[]` properly overrides that and still makes `PySequence_Check` work. It's not directly clear to me that it would, but can give it a try.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15161#issuecomment-2057955720:1142,avail,available,1142,https://root.cern,https://github.com/root-project/root/issues/15161#issuecomment-2057955720,2,['avail'],['available']
Availability,"> In this case, without the inline keyword, the compiler is ask (and has to) generate this function in every .o files that correspond to a source file that includes (directly or indirectly) this header file. I.e. it was only a matter of time until something complained about duplicated symbols. Ok, but that's not what the error is saying: it's complaining about a (different) unresolved symbol. Moreover there is a definition of `TThreadExecutor::GetPoolSize()` in `core/imt/src/TThreadExecutor.cxx` which is compiled into `libImt.so`. I also don't see how it can be a missing dependency because there is no include of `TExecutor.hxx` in ROOT right now, except for the dict generation. The removal of `TExecutorCRTP::GetPoolSize()` is just a cleanup, unrelated to actually fixing the problem. I don't think the function is needed because nothing directly receives an object of type `TExecutorCRTP` and the CRT pattern is exactly about avoiding `virtual` functions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7033#issuecomment-759690888:323,error,error,323,https://root.cern,https://github.com/root-project/root/pull/7033#issuecomment-759690888,1,['error'],['error']
Availability,"> In what situation is `R__HAS_STD_SPAN` not sufficient? If `ROOT` has been configured to build in C++20 mode and properly installed, it must be set in `RConfigure.h`. If it is not set, this means that the `ROOT` code will use an alternative to `std::span` (because at configure and build time, it detected it was not available). In fact, I have a project that uses C++20, and uses ROOT compiled with C++17, and I encountered compilation errors in the ROOT header file RSpan.hxx as mentioned (redefinition of std::span). However, once the restriction of this preprocessor macro is resolved, the compilation could pass, and no related problems have been encountered for the time being. I also checked RStringView.hxx, this header file also uses a similar technique, so I submitted this patch. I believe that I may not be considerate about this in depth, but I hope that the issues of ""mixing standards"", which seems not to be issues, can be solved. If there are indeed many restrictions/issues on this issue, I admit that this is not such simple...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11311#issuecomment-1252761771:318,avail,available,318,https://root.cern,https://github.com/root-project/root/pull/11311#issuecomment-1252761771,4,"['avail', 'error']","['available', 'errors']"
Availability,"> Indeed I already tried this command before. But it does not work:; > ; > ```; > bash-3.2$ read -r this_pid < /proc/self/stat;; > bash: /proc/self/stat: No such file or directory; > ```. What about:; pid=$(exec sh -c 'echo ""$PPID""')",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9966#issuecomment-1081770303:219,echo,echo,219,https://root.cern,https://github.com/root-project/root/pull/9966#issuecomment-1081770303,1,['echo'],['echo']
Availability,"> Indeed, placing #include <nlohmann/json.hpp> into one of the existing io/ headers seems to work. Not really. One can generate dictionary and compile code.; But if one tries to load such include in ROOT session, it terminates with error.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11130#issuecomment-1217537659:232,error,error,232,https://root.cern,https://github.com/root-project/root/issues/11130#issuecomment-1217537659,1,['error'],['error']
Availability,> Is it clear what ratioplot1->Close() is supposed to mean?. It is just method which is called when canvas closed in interactive mode.; I put it here to demonstrate problem. ; Calling canvas destructor will cause the same seg fault. I tried to fix the problem in #14861 but facing much more problems. ; `RecursiveRemove` is not a solution.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14855#issuecomment-1976051222:226,fault,fault,226,https://root.cern,https://github.com/root-project/root/issues/14855#issuecomment-1976051222,2,['fault'],['fault']
Availability,"> Is that something related to Cling? . No this is C++ and this is a real issue. . > and also the implicit inline by having the method in the class definition). Indeed there is an implicit inline keyword *if and only if* the implementation is inside the class definition (i.e. the result of this PR for example). In the original code we have a header with:; ```; class SomeName {; public:; void somefunction();; };; void SomeName::somefunction() { ... };; ```; In this case, without the inline keyword, the compiler is ask (and has to) generate this function in every .o files that correspond to a source file that includes (directly or indirectly) this header file. I.e. it was only a matter of time until something complained about duplicated symbols. As far as the original error is concerned:; ```; IncrementalExecutor::executeFunction: symbol '_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv' unresolved while linking symbol 'atexit'!; You are probably missing the definition of ROOT::TThreadExecutor::GetPoolSize() const; ```; It was indeed an accurate report (TThreadExecutor inherits from TExecutorCRTP and the `= delete` meant to require GetPoolSize implementation in the derived class ... but it was implement only in TExecutor and not in TThreadExecutor). If GetPoolSize is not part of the TExecutorCRTP interface then this PR's commit removing it from there is correct, if it is part then it probably should have been declared with:; ```; virtual unsigned GetPoolSize() const = 0;; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7033#issuecomment-759664054:777,error,error,777,https://root.cern,https://github.com/root-project/root/pull/7033#issuecomment-759664054,1,['error'],['error']
Availability,> Is the failure in `roottest-root-hist-h2root` at https://github.com/root-project/root/pull/16773/checks?check_run_id=32223807661 understood?. Is it related to https://github.com/root-project/root/pull/15915 ?; pinging @couet and @hahnjo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16773#issuecomment-2444711590:9,failure,failure,9,https://root.cern,https://github.com/root-project/root/pull/16773#issuecomment-2444711590,2,"['failure', 'ping']","['failure', 'pinging']"
Availability,"> Is this still seen?. Hi, I still see this same error on Ubuntu 16.04.7 LTS with the master branch as of commit f8b8277627f08cb79d71cec1006b219a82ae273c (earlier today). However the instructions given by awedisean on root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/9 to compile with -j6 makes it work . Cheers,; Jack",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10271#issuecomment-1155708315:49,error,error,49,https://root.cern,https://github.com/root-project/root/issues/10271#issuecomment-1155708315,2,['error'],"['error', 'error-rint-pcm-is-out-of-date-cannot-read-module-signature']"
Availability,> Isn't EnableThreadSafety() enough?. It is not necessary here and probably slow-down other ROOT components. ; The only intention here - initialize `TThread::fgMainId` before this will be done in some random thread started by `RWebWindowsManager` or `THttpServer`. . `fgMainId` used when gPad returned depending from current thread id.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15825#issuecomment-2163237186:81,down,down,81,https://root.cern,https://github.com/root-project/root/pull/15825#issuecomment-2163237186,1,['down'],['down']
Availability,"> It looks good ! Thank you Stephan for this nice update.; > ; > Only a minor comment:; > ; > * remove the mention of RMS , just say it is the standard deviation; > * mention that option """", standard error on the mean is the default case. Done, thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5649#issuecomment-630786669:200,error,error,200,https://root.cern,https://github.com/root-project/root/pull/5649#issuecomment-630786669,1,['error'],['error']
Availability,> It looks like a bug in clan-cl. What do you expect from the ROOT team? we cannot fix a bug in clang-cl. Even though clang-cl is not behaving like MSVC here the problem is that even if MSVC compiles the code it won't behave like ROOT plans it to behave (that is why https://github.com/llvm/llvm-project/issues/63494#issuecomment-1608917289 considers closing the issue I raised in llvm). . > What do you expect from the ROOT team?. Fix the bug using MSVC. `wchar_t` is too small on MSVC but compiles the code masking a bug. ; `_glyph = L'\U0001d538' + (_code[0] - 'A');` will never give the expected glyph with MSVC. . Linux: wchar_t == char32_t; Windows: wchar_t == char16_t. The code needs to be changed to consistently use `char32_t` to be correct across platforms.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13091#issuecomment-1609483330:509,mask,masking,509,https://root.cern,https://github.com/root-project/root/issues/13091#issuecomment-1609483330,1,['mask'],['masking']
Availability,"> It removes the requirement for version 3.9. Technically code works with all 3.x versions of `nlohmann/json.hpp`. I add requirement for 3.9 recently just because we were not using and not testing for `json_fwd.hpp`. Now version restriction is not necessary. > It worsens the error message in case json_fwd.h when it is required for recent versions. They were written based on feedback from upstream, so I would like to keep the detailed messages. `json_fwd.hpp` now always required - not only for 3.11. Just as workaround for time been we allow to use [3.10 .. 3.11] versions without it. After LLVM upgrade we could completely skip usage of `json_fwd.h`. I hope it will happen before 6.28 release.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11268#issuecomment-1230200939:276,error,error,276,https://root.cern,https://github.com/root-project/root/pull/11268#issuecomment-1230200939,2,['error'],['error']
Availability,"> It says: `Jenkins CI build — Build failed ` but I cannot access the details concerning build error. You can click on the link in the comment by @phsft-bot (see quoted below). > Build failed on windows10/cxx14. Running on null:C:\build\workspace\root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/157660/console). Otherwise, we could just start a new build.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11588#issuecomment-1305655005:95,error,error,95,https://root.cern,https://github.com/root-project/root/pull/11588#issuecomment-1305655005,1,['error'],['error']
Availability,> It will be my honor to squash that last test failure tomorrow.; > ; > @vgvassilev do we need anything else before we merge? Should we have a pass over this PR's history to clean it?. We need to:; - [ ] Review the commit history;; - [ ] Update back the clang.git and llvm.git forks with the right set of changes we applied after we imported the code in ROOT; - [x] Fix the cmssw reported issue - I believe it is due to not properly rebased patch in clang.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1326773688:47,failure,failure,47,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1326773688,1,['failure'],['failure']
Availability,"> It works because it calls what the virtual table shows 'so-far' and essentially it is equivalent to a call to > TFile::SysOpen, we probably ought to make it clear and do the substitution explicitly in the code. Probably, one should clearly use `TFile::SysOpen()` calls here and check that none of subclasses tries to use that TFile constructor. . > They are not related to this PR . Yes, error message has nothing to do with PR. ; Changes are minimal and looking very promissing. ; Probably, one should check if BIT(9) was used in older ROOT versions with TFile.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4253#issuecomment-523486256:390,error,error,390,https://root.cern,https://github.com/root-project/root/pull/4253#issuecomment-523486256,2,['error'],['error']
Availability,"> It would be enough to add a generic `ROOT_EXPECT_STDERR` to the other macros to make these kind of printouts easily checkable. That's an option. But if that's the only place where we ever use `cerr`, we could also just ignore the specific diagnostic by either tweaking the FAILREGEX to something like; `Warning|Error|Info in <...> [^Whatever comes here]`, or disabling it altogether.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5591#issuecomment-641456412:313,Error,Error,313,https://root.cern,https://github.com/root-project/root/pull/5591#issuecomment-641456412,1,['Error'],['Error']
Availability,"> It would be good to have a test for this. May need a bit of work to only run with C++20 available... `// UNSUPPORTED: c++03, c++11, c++14, c++17` already works out of the box for the lit test. We will still need to check for the feature macro __cpp_lib_source_location to ensure the feature exist. EDIT: I was wrong about it working out of the box. The feature already exist for libcxx in llvm and we might have to duplicate the same. For now, a conditional check prevents the test from failing if the feature doesn't exist.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14218#issuecomment-1865931261:90,avail,available,90,https://root.cern,https://github.com/root-project/root/pull/14218#issuecomment-1865931261,1,['avail'],['available']
Availability,"> It's at the end of the `testRooFuncWrapper` file where you can exclude specific tests: https://github.com/root-project/root/blob/master/roofit/roofitcore/test/testRooFuncWrapper.cxx; > ; > In the case of Windows, it's the `AddPdf` fit that fails, which is encoded in `param3`. So wee need:; > ; > ```c++; > INSTANTIATE_TEST_SUITE_P(RooFuncWrapper, FactoryTest,; > testing::Values(param1, param2,; > #if !defined(_MSC_VER) || defined(R__ENABLE_BROKEN_WIN_TESTS); > param3,; > #endif; > param4, param5, param6, param7, param8, param8p1, param9, param10, param11,; > param12, param13),; > [](testing::TestParamInfo<FactoryTest::ParamType> const &paramInfo) {; > return paramInfo.param._name;; > });; > ```; > ; > By the way, this failure is maybe not even related to Clad, but could be because of different random numbers. I will follow up on this later after this PR. I do not understand the change but I've added it. Let's see what happens.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14654#issuecomment-1939006181:729,failure,failure,729,https://root.cern,https://github.com/root-project/root/pull/14654#issuecomment-1939006181,1,['failure'],['failure']
Availability,"> It's implementation is odd looking :(, so yeah I think this is the issue ... let me do a quick checks. and it actually seems to be working ... so now I'll try to reproduce the failure.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15469#issuecomment-2147949596:178,failure,failure,178,https://root.cern,https://github.com/root-project/root/pull/15469#issuecomment-2147949596,1,['failure'],['failure']
Availability,"> It's off intentionally because of what I wrote previously.; > ; > https://github.com/root-project/root/blob/498ac1dca5c1c30bc9fa3bc2ec722c33ebbd93a8/core/sanitizer/SanitizerSetup.cxx#L19-L23. Ah yes, I only checked `__lsan_options`... Regarding the test failures, I'm currently going through them one-by-one to create issues on GitHub.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10005#issuecomment-1056659717:256,failure,failures,256,https://root.cern,https://github.com/root-project/root/pull/10005#issuecomment-1056659717,1,['failure'],['failures']
Availability,"> Just for reference and to ping @will-cern, this PR fixes the same issue that #13294 already identified earlier. Right, but the functionality of https://github.com/root-project/root/pull/13427 definitely needs to go in. The change in this PR is really just fixing something that we don't want sticking around anyway.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13804#issuecomment-1747118823:28,ping,ping,28,https://root.cern,https://github.com/root-project/root/pull/13804#issuecomment-1747118823,1,['ping'],['ping']
Availability,"> LGTM for the RDF part.; > ; > Out of curiosity, can you share a link to the kind of errors you see?. ```; Start 878: tutorial-dataframe-df001_introduction-py. 878: Test command: ""C:\Program Files\CMake\bin\cmake.exe"" ""-DCMD=C:/Python38-32/python.exe^C:/Users/sftnight/git/master/tutorials/launcher.py^C:/Users/sftnight/git/master/tutorials/dataframe/df001_introduction.py"" ""-DSYS=C:/Users/sftnight/build/release"" ""-DENV=ROOTSYS=C:/Users/sftnight/build/release#PYTHONPATH=C:/Users/sftnight/build/release/bin"" ""-P"" ""C:/Users/sftnight/build/release/RootTestDriver.cmake""; 878: Environment variables:; 878: ROOT_HIST=0; 878: Test timeout computed to be: 1500; 878: CMake Error at C:/Users/sftnight/build/release/RootTestDriver.cmake:237 (message):; 878: error code: -529697949; 878:; 878:; 1/16 Test #878: tutorial-dataframe-df001_introduction-py .................***Failed 5.63 sec; test 879; Start 879: tutorial-dataframe-df002_dataModel-py. 879: Test command: ""C:\Program Files\CMake\bin\cmake.exe"" ""-DCMD=C:/Python38-32/python.exe^C:/Users/sftnight/git/master/tutorials/launcher.py^C:/Users/sftnight/git/master/tutorials/dataframe/df002_dataModel.py"" ""-DSYS=C:/Users/sftnight/build/release"" ""-DENV=ROOTSYS=C:/Users/sftnight/build/release#PYTHONPATH=C:/Users/sftnight/build/release/bin"" ""-P"" ""C:/Users/sftnight/build/release/RootTestDriver.cmake""; 879: Environment variables:; 879: ROOT_HIST=0; 879: Test timeout computed to be: 1500; 879: Error in <TChain::LoadTree>: Cannot find tree with name in file df002_dataModel_py.root; 879: CMake Error at C:/Users/sftnight/build/release/RootTestDriver.cmake:237 (message):; 879: error code: -529697949; 879:; 879:; 2/16 Test #879: tutorial-dataframe-df002_dataModel-py ....................***Failed Error regular expression found in output. Regex=[Error in] 8.04 sec; test 880; Start 880: tutorial-dataframe-df003_profiles-py. 880: Test command: ""C:\Program Files\CMake\bin\cmake.exe"" ""-DCMD=C:/Python38-32/python.exe^C:/Users/sftnight/git/master/tutorials",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6083#issuecomment-665456331:86,error,errors,86,https://root.cern,https://github.com/root-project/root/pull/6083#issuecomment-665456331,3,"['Error', 'error']","['Error', 'error', 'errors']"
Availability,"> LGTM! Is not this offset just a constant term? It should not matter, apart for numerical precision issues. Yes, exactly! And reducing numerical errors is the motivation for all this offsetting. I don't think it matters in this particular case, but it is weird for the users when they fit an Asimov dataset with bin-by-bin offsetting, where they expect the NLL to be zero by construction, and then it's not.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13986#issuecomment-1787201021:146,error,errors,146,https://root.cern,https://github.com/root-project/root/pull/13986#issuecomment-1787201021,1,['error'],['errors']
Availability,"> LGTM, although I'd have hoped to get a test making sure we do not break it again... It runs fine on Ubuntu 18.04 and 20.04 with root 6.22 (I also tested it with root 6.20, both downloaded as binary tar-ball). The problem did not exist in earlier versions (the latest that I tested was, I think, 6.18). One of our students pointed out that it does not work anymore in newer versions. That was the best fix that I found, but I admit that the root-build system is a mystery to me.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6306#issuecomment-688316481:179,down,downloaded,179,https://root.cern,https://github.com/root-project/root/pull/6306#issuecomment-688316481,1,['down'],['downloaded']
Availability,"> LGTM, if JupyROOT works... Good point, I just checked and find failure. I will submit small commit soon",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6907#issuecomment-737901899:65,failure,failure,65,https://root.cern,https://github.com/root-project/root/pull/6907#issuecomment-737901899,1,['failure'],['failure']
Availability,> LGTM. The related error message and disabling is done (correctly in regard to this fix) on `CMakeLists.txt` line 99 to 106. That is correct! I should have maybe explained it in the PR description. Thank you very much for double-checking.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15416#issuecomment-2096735457:20,error,error,20,https://root.cern,https://github.com/root-project/root/pull/15416#issuecomment-2096735457,1,['error'],['error']
Availability,"> LGTM. The remaining clang-format errors should probably be fixed. Ok, it seems to be a difference between my local `clang-format` version and what we have in the GitHub action... > Do we want to leave the left-over stuff in RField.hxx or eventually move it do a different header, too?. I'm not sure yet. Ideally it would be cool if `RField.hxx` only only had a base `template <typename T> RField` and then a couple of `#include`. However that will be difficult because of the base case of `RClassField`... To be seen in the future. > One thing I overlooked: the new headers need to become part of the CMakeLists.txt, I think. I tried this initially, but it didn't work: I think all headers listed in `CMakeLists.txt` are treated as top-level header for the module. We don't want this for the split `RField` headers...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16103#issuecomment-2265458619:35,error,errors,35,https://root.cern,https://github.com/root-project/root/pull/16103#issuecomment-2265458619,1,['error'],['errors']
Availability,"> Let's just take care of the CI issues before merging. @jblomer I think I fixed the `pyroot_import_load_libs` issue with 297a25b. That last build instead failed with a ""Cannot allocate memory"" failure, which I think comes from opening too many `urings` on the test node. I will see what the CI thinks about the changes in 0c49514. I'd like to avoid `test/RIoUring.cxx` becoming an unstable test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6162#issuecomment-679273847:194,failure,failure,194,https://root.cern,https://github.com/root-project/root/pull/6162#issuecomment-679273847,1,['failure'],['failure']
Availability,"> Linking on mac is not working,. Can you share the linker error? I only see compilation errors (that I know how to take care of).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11861#issuecomment-1348038967:59,error,error,59,https://root.cern,https://github.com/root-project/root/pull/11861#issuecomment-1348038967,2,['error'],"['error', 'errors']"
Availability,"> Llvm9 is in master. Can someone check whether it helps?. With master (@ 5b06edd12572938cd83e45e07067c827cc0fc615) I get the same error it seems:. ```; $ export ROOT_INCLUDE_PATH=$(brew --prefix boost)/include; $ cat test.C; #include <boost/smart_ptr/shared_ptr.hpp>. void test() {}; $ root -q test.C; ------------------------------------------------------------------; | Welcome to ROOT 6.23/01 https://root.cern |; | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for macosx64 on Mar 03 2021, 00:17:00 |; | From heads/master@v6-23-01-RF-binSampling-1035-g5b06edd125 |; | With Apple clang version 12.0.0 (clang-1200.0.32.29) |; | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------. Processing test.C...; In file included from input_line_8:1:; In file included from /Users/alfaci/dklein/root/test.C:1:; In file included from /usr/local/opt/boost/include/boost/smart_ptr/shared_ptr.hpp:17:; In file included from /usr/local/opt/boost/include/boost/smart_ptr/detail/shared_count.hpp:26:; In file included from /usr/local/opt/boost/include/boost/smart_ptr/detail/sp_counted_base.hpp:40:; /usr/local/opt/boost/include/boost/smart_ptr/detail/sp_counted_base_gcc_atomic.hpp:65:30: error: expected parameter declarator; inline boost::uint_least32_t atomic_load( boost::uint_least32_t const * pw ); ^; /Users/alfaci/dklein/root/build_/etc/cling/lib/clang/9.0.1/include/stdatomic.h:120:55: note: expanded from macro 'atomic_load'; #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST); ^; <built-in>:16:26: note: expanded from here; #define __ATOMIC_SEQ_CST 5; ^; In file included from input_line_8:1:; In file included from /Users/alfaci/dklein/root/test.C:1:; In file included from /usr/local/opt/boost/include/boost/smart_ptr/shared_ptr.hpp:17:; In file included from /usr/local/opt/boost/include/boost/smart_ptr/detail/shared_count.hpp:26:; In file included from /usr/local/opt/bo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6454#issuecomment-789316508:131,error,error,131,https://root.cern,https://github.com/root-project/root/issues/6454#issuecomment-789316508,1,['error'],['error']
Availability,> Maybe defining a gTimersMutex would do the job. Adding case specific mutex requires to make '100% sure' that the code in the critical section can *\*never\** take/request the ROOT global lock [An example innocuous looking case is the calls to TObject::Error which will interrogate the related TClass object and thus sometimes request the global lock]. Failure to insure this lack of global lock taking will (inevitably) lead to dead locks.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8379#issuecomment-857769480:254,Error,Error,254,https://root.cern,https://github.com/root-project/root/pull/8379#issuecomment-857769480,2,"['Error', 'Failure']","['Error', 'Failure']"
Availability,"> Merging the PR, the test failures are unrelated (the ones regarding the tutorials seem to be triggered by some not-well-understood issue in TClass & friends, possibly regarding thread-safety, to be investigated). Unrelated or not, these will now fail in every PR. That's not good, it is still your responsibility to keep the builds green...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12485#issuecomment-1642095175:27,failure,failures,27,https://root.cern,https://github.com/root-project/root/pull/12485#issuecomment-1642095175,1,['failure'],['failures']
Availability,"> My guess: ClassDef needs to be changed to become ClassDefOverride for all classes that use override, or else warnings (you hinted at that already). AFAIK I tried to apply this already in many places. > In general I'm not sure how much we actually benefit from dressing this old code with some new clothes, also given the extensiveness of this change, which will create conflicts when backporting changes across this commit. Could we have a discussion on the benefit/cost ratio?. Well, that raises an even more general question: if there is little commitment to touch/refactor/maintain old code, what is your long term strategy for these parts of ROOT then? Will these old codes be deprecated/removed then? Code rot is a fact and it gets only worse over time. And so far I have the feeling ROOT will still be there in the next decade or the one after. And if these codes stay around than they should be maintained and improved occasionally. Of course maintenance takes resources. And I know that nobody ever has time to do it. But leaving everything as is in the face of possible improvements also has a cost that we pay be doing nothing. For this particular PR, if I jump into a header file, I do not know which methods are overriding something from a base class. But this knowledge helps me when reading new code. Now I pay the cost for having to look this information up in the inheritance hierarchy. In recent years we are lucky enough to even have automatic refactoring tools. They are far from perfect. But they are good. And applying them has very little cost for a moderate benefit. So I think at least those automatic refactorings should be applied to old code. Regular manual refactoring of production code would be even better, but I know I live in a dream world here ;). There is also the broken window theory, stating that code with bad quality encourages people working on it to also tolerate new code to be bad. I just started here in ROOT and I already heard from a few people that RO",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6007#issuecomment-669905387:952,mainten,maintenance,952,https://root.cern,https://github.com/root-project/root/pull/6007#issuecomment-669905387,2,['mainten'],['maintenance']
Availability,"> My suspicion is that the for the non-modules case we somehow fail to unload the definition of SiStripCluster. That is very likely (or more likely because 'moving memory around change the behavior), the unloading is only partially done. > PS: How the deserialization of the vtables of TMVA::IPruneTool makes the test succeeds is a complete mystery to me at the moment. I recommend that it is actually investigated and understood as this 'seeming random behavior' is likely to be 'use of undefined behavior in the code (somewhere)' or (less likely) the correct behavior but we are completely misunderstanding what's going on under the hood. > It seems to me that failure is the right behavior. It is not :) . I am sure we can agree that an 'undo X' should return the state to a point as if the last X cling related actions had not happened. I.e. the simplified example:. ```; struct Marker { ~Marker() { fprintf(stdout,""dest\n""); } };; .L lib/libStrip.so ; Marker m2;; gInterpreter->AutoParse(""SiStripCluster"");; .undo 2; SiStripCluster obj;; ```. should actually have the same result (assuming no side effect for Marker::Marker) as. ```; struct Marker { ~Marker() { fprintf(stdout,""dest\n""); } };; .L lib/libStrip.so ; SiStripCluster obj;; ```. and it does not (when modules are turned on) ... possibly because the implicit AutoParse (that is triggered by the use of the symbol SiStripCluster) is no longer possible, in the module case, after the first execution (for example because the first execution of the AutoParse is switching some flag, like I already read this part of the pcm file, that is not 'reset'/'reverted' by the undo. > @pcanal, can you remember what exactly we were testing there?. It is testing both that in this setup the undo is not running into an infinite loop and that we correctly support an (implicit or explicit) AutoParse followed by undo followed by an implicit AutoParse. See the related commit:; ```; commit b6296198c2735101051daa33af89fe8ae641991e (fix_cms); Author: ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2852#issuecomment-434478365:663,failure,failure,663,https://root.cern,https://github.com/root-project/root/pull/2852#issuecomment-434478365,2,['failure'],['failure']
Availability,"> My version of os/compiler/valgrind seems to work better and I got some useful information.; > ; > For `root.exe -b -l -q callfuncbench.cxx+(1000)`.; > ; > The new code is a big faster: `42,696,463,692` instead of `45,892,859,389`; > ; > Some of the calculation are shifted to `Value::Value`: `5,000,000,988` vs `3,100,001,703` (it grows by 2 billions when the overall goes down by 3 billions).; > ; > The gains comes from the disappearance of `TClingCallFunc::InitRefAndExec` (minus 3.8 billions) and the simplifications of `std::function_handler (removed) and TClingCallFunc::exec` (minus 1.2 billions).; > ; > So it is getting better and `Value::Value` is a potential source of further optimization (see related comment).; > ; > [callgrind-callfund.tar.gz](https://github.com/root-project/root/files/9665974/callgrind-callfund.tar.gz). Thanks for the details. I've pushed the further optimization of `Value::Value`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11252#issuecomment-1262680556:375,down,down,375,https://root.cern,https://github.com/root-project/root/pull/11252#issuecomment-1262680556,2,['down'],['down']
Availability,"> Nice! How long does it take to run this form outside the CERN network on an average ADSL connection? And if it's more than a few seconds, could you please add a couple of printouts that tell users that something is going on, e.g. ""setting up computation graph"", ""starting analysis"", ""done. results are in file..."". We use approximately 3GB, so from Australia it takes probably ages ;) For me it's locally about 1m30 and from the open data EOS server currently 7 minutes. But we are still affected by the broken files there and download much more than required, so most likely it's less at the end and you can make it < 5min. I would love to have it run faster, but also I think it's not the nature of this analysis to use little resources ;)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6107#issuecomment-667121994:529,down,download,529,https://root.cern,https://github.com/root-project/root/pull/6107#issuecomment-667121994,1,['down'],['download']
Availability,"> No luck. Are you able to reproduce the failure locally? If not, you can use something like:; ```; //check if element is a TRef or TRefArray; const bool originalTest = (strncmp(fTypeName.Data(),""TRef"",4) != 0);; TClass* const type = GetClassPointer();; const bool newTest = (!type || !(type->InheritsFrom(TRef::Class()) || type->InheritsFrom(TRefArray::Class()) || type->InheritsFrom(""TVirtualRefProxy"")); if (originalTest != newTest); 		Fatal(""GetExecID"", ""Problem with type %s original test %d, new test %d\n"", ; fTypeName.Data(), originalTest, newTest);; if (originalTest) return 0;; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14930#issuecomment-1989251733:41,failure,failure,41,https://root.cern,https://github.com/root-project/root/pull/14930#issuecomment-1989251733,1,['failure'],['failure']
Availability,"> No, we don't see this in other RooFit PRs.; > ; > From the log, it seems that there is a problem when using RooFit from Python now:; > ; > And in the final test the whole run crashes, that's why in the comment on GitHub we don't see these test failures. I'm rerunning the build right now, and logged in into the mac node where it runs. It's a different node, and the tests seem to pass. Let's wait for the build to finish, but I would assume it's a problem with the node where it ran.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12536#issuecomment-1482615382:246,failure,failures,246,https://root.cern,https://github.com/root-project/root/pull/12536#issuecomment-1482615382,1,['failure'],['failures']
Availability,"> Note that this PR (?) seems to cause new errors in the new CI - we were at 0 test failures before, thanks to all your work!. I don't think that's my PR, you can also see it here: https://github.com/root-project/root/pull/13070#issuecomment-1603661635. Looking at the failures, it looks like the CI picks up an old version of `roottest` on Windows. At least the `return 0;` in `test_ROOT9975` was fixed months ago by https://github.com/root-project/roottest/commit/a905ea54cecbe1bb98c2350d06949ba6b8060af1",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13072#issuecomment-1603964951:43,error,errors,43,https://root.cern,https://github.com/root-project/root/pull/13072#issuecomment-1603964951,3,"['error', 'failure']","['errors', 'failures']"
Availability,"> Note that with this implementation I now have this warning on Windows:; > ; > ```; > C:\root-dev\git\master\core\base\inc\TString.h(175,16): warning C5232: in C++20 this comparison calls 'std::strong_ordering operator <=>(const TString &,const TString &)' recursively; > ```. And MSVC is right here. This is because `operator<(TString, TString)` is only declared further down in the file. Try this:; ```c++; const int cmp = s1.CompareTo(s2);; if (cmp == 0) return std::strong_ordering::equal;; if (cmp < 0) return std::strong_ordering::less;; return std::strong_ordering::greater;; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12525#issuecomment-1490111228:373,down,down,373,https://root.cern,https://github.com/root-project/root/pull/12525#issuecomment-1490111228,1,['down'],['down']
Availability,"> Now I remembered our chat, and we get the errors because pyspark is always injected in sys.modules in SWAN. So then this PR is not necessary?. Yes indeed, after further digging we discovered that opening a notebook in a SWAN session (with no modifications on the environment from our side) already shows `""pyspark"" in sys.modules == True`. No extra dependency is injected by ROOT, so this PR can be closed",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9972#issuecomment-1055433984:44,error,errors,44,https://root.cern,https://github.com/root-project/root/pull/9972#issuecomment-1055433984,1,['error'],['errors']
Availability,"> Now there are new failures associated with this change. Can you point me to one or two of those failures?. > https://github.com/root-project/root/commit/45c0f48f3c3c631d291e0a7a32fd1ba292e79160 fixed a bug in the template argument printing,. For up-streaming that, it probably would need to become a policy switch. If I understand correctly. 45c0f48f3c3c631d291e0a7a32fd1ba292e79160 : remove suffix in template parameter (However the fix seems counter-intuitive, I am not sure what that code change really does). https://github.com/root-project/root/commit/4417a2cd34effdc6ea59797c2d86b6ef8ca8717a : add default template parameter to the printing. Is `SuppressDefaultTemplateArgs` a new option? If it is not, is it new that it was set to true by default? (we always needed the default parameter to be printed ... and actually in most case, we 'worked' at making sure that all the component are explicitly included (with the right spelling, i.e. for 'opaque' typedef), (see Utils/AST.cpp and the partial desugaring). So, so far, my best guess (because I don't understand 'what' it really does) is that 45c0f48f3c3c631d291e0a7a32fd1ba292e79160 has the side effect of destroying/replacing the partial desugaring. I would have expected the change to be much closer to part that generate the (partial) output for this kind of type/value and/or to be an extension in the partial desugaring routines. (As a side note, I have a vague memory that we already solved a similar problem in the past but can not find (yet?) the solution (if any) in the repository)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1136396468:20,failure,failures,20,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1136396468,4,['failure'],['failures']
Availability,"> OK, there are errors already in LLVM/Clang, and as I said, there is no way I can test on ARM64, so there is not much I can do... Hi @bellenot, in fact, I am also using an amd64 machine, but I am doing cross-compilation, and the target architecture is arm64ec.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11787#issuecomment-2238714635:16,error,errors,16,https://root.cern,https://github.com/root-project/root/issues/11787#issuecomment-2238714635,1,['error'],['errors']
Availability,"> OK, what about; > ; > ```; > do 1 while (true)`; > ```; > ; > ? I.e. where do we stop? (Note that this isn't parsable, and appending a trailing ';' doesn't help.). I think you just said what's the rule -- appending trailing ; and making the code compile. > ; > For me, an inner block (even if the '{}' are omitted) is not considered by the value printer; changing that is likely not work it and will create many more inconsistencies than is warranted by ""repairing"" the seemingly inconsistent behavior of this ticket. To be more precise, why isn't; > ; > ```; > if (true) { 1 }; > ```. This should not print because the current implementation makes it hard to support as it is implicit. Eg, we omit certain syntax and rely on fixing it. If the implementation was explicit and we had a smarter marker what should or should not print we could leave that decision to the user. Eg -- `if (true) {1;;}` print then all would be solved :). > ; > considered to print? What is; > ; > ```; > switch (a) case 1: 42; > ```; > ; > supposed to print? I think the current mental model of the ""outer-most expression"" is compatible with the syntax (""add a ';' to make it valid C++"") and comprehensible for users; changing this is a design change that I am not convinced of as it might hurt more than it heals, and causes confusion on the user side plus lots of added complexity. I cannot agree with this. Fixing the particular bug is not a design change. Moving towards a generic explicit implementation based on a markers is. I think the current rule whether or not to print is ""the last expression without a trailing semicolon should print"". And I see no problem in supporting the switch case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6644#issuecomment-713462537:457,repair,repairing,457,https://root.cern,https://github.com/root-project/root/issues/6644#issuecomment-713462537,1,['repair'],['repairing']
Availability,"> OTOH I really don't understand the 10.14 failure - the node has numpy installed just fine at /Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/numpy. AFAICT it's not using the Frameworks Python, but `/usr/local/bin/python3`. Does this mean we need https://github.com/root-project/root/pull/6849/commits/6a7b54854118125258f0384c0478f1b4a4fb20a0? I'm going to test this directly on the node when I have time. Edit: Ah no, that goes the other way. So probably fine, we just need to install `numpy` for the right Python?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7635#issuecomment-804084669:43,failure,failure,43,https://root.cern,https://github.com/root-project/root/pull/7635#issuecomment-804084669,1,['failure'],['failure']
Availability,"> Often, the submodules are represented by C++ namespaces, so all these Python-module related dunder attributes are pretty meaningless. What exactly is your suggestion here?. The suggestion is to make sure that we are faking well enough that we won't incur in problems down the line with the Python interpreter machinery. I admit this might be a bit pedantic from me at this point in time",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14098#issuecomment-1886823474:269,down,down,269,https://root.cern,https://github.com/root-project/root/pull/14098#issuecomment-1886823474,1,['down'],['down']
Availability,"> Ok I understand. I would wait for @ACA4DFA4 to tell us more about their configuration, including why do they need to build with Python2. Yesterday I just found that root-v6.28/00 was released on the Releases page, then downloaded the tarball and built it with `cmake` (`-DCMAKE_CXX_STANDARD=17`), since the binary distributions don't have ROOT7 features. The OS was Ubuntu 18.04 on Windows 10 (WSL1), and there were `python3.8.0`, `python3.7.5`, `python3.6.9` and `python2.7.17` installed. The default `python3` was `python3.6.9`, with `numpy` installed. The other 2 versions of python3 didn't have `numpy` or any other packages. The output of `cmake` configuration about python was:; ```; -- Could NOT find Python3 (missing: Python3_INCLUDE_DIRS Python3_LIBRARIES Python3_NumPy_INCLUDE_DIRS Development NumPy Development.Module Development.Embed) (found version ""3.8.0""); -- Found Python2: /usr/bin/python2.7 (found version ""2.7.17"") found components: Interpreter Development NumPy Development.Module Development.Embed ; ...; -- Building with -fPIC; -- Found Python3: /usr/bin/python3.8 (found suitable version ""3.8.0"", minimum required is ""3.0"") found components: Interpreter ; ```; I don't know why `python3.6` was not chosen but `python3.8`, and why `python3` was not found at the first time. In fact, I have built root-v6.26/00 with `python3.6` successfully when `python3.7` and `python3.8` were not installed before.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12308#issuecomment-1429930567:221,down,downloaded,221,https://root.cern,https://github.com/root-project/root/pull/12308#issuecomment-1429930567,1,['down'],['downloaded']
Availability,> Ok now it compiles but we get the following error in the new test; > ; > ```c++; > input_line_49:1:21: error: unknown type name 'ROOT_7459'; > int ROOT_7459 = 42; ROOT_7459++;; > ^; > input_line_49:1:30: error: expected unqualified-id; > int ROOT_7459 = 42; ROOT_7459++;; > ```. Somehow the parsing seems broken. We should probably try using `ProcessLine` instead of `Declare`... still a mystery why this fails only for the PCH based builds... EDIT: Parsing is broken because `Declare` does not support statements on the global scope but `ProcessLine` does. In addition it works in master because clang already supports statements on the global scope (thanks to clang-repl)...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14358#issuecomment-1894094024:46,error,error,46,https://root.cern,https://github.com/root-project/root/pull/14358#issuecomment-1894094024,3,['error'],['error']
Availability,"> Ok, but that's not what the error is saying: ... I agree. The ""missing inline"" is a real error that is unlikely to be causing the missing symbol report. > . Moreover there is a definition of TThreadExecutor::GetPoolSize(). Indeed. I somehow missed it. > The removal of TExecutorCRTP::GetPoolSize() is just a cleanup, unrelated to actually fixing the problem. . humm ... I am slightly confused. Does this PR solve the missing symbol or not? If this change and the inline change are both unrelated, what is fixing it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7033#issuecomment-759707154:30,error,error,30,https://root.cern,https://github.com/root-project/root/pull/7033#issuecomment-759707154,2,['error'],['error']
Availability,"> Ok, for only running on 3G. Is it possible to cut this down even more by pre-filtering? Review coming soon. I would have to look in detail into the cuts, perhaps? At the end, I like that many filters we use since that's how you go from the generic samples to the results, meaning this is the content of the example :) Also it's very nice from the benchmarking point of view!. I tried to go down using even less events, but then the statistics are super bad and it does not look good anymore. Using the 5% of the initial 10fb^-1 is the bare minimum.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6107#issuecomment-667116797:57,down,down,57,https://root.cern,https://github.com/root-project/root/pull/6107#issuecomment-667116797,2,['down'],['down']
Availability,"> Ok, got it. I commented that out and have been proceeding to test things out. I've hit an issue when trying to embed cling into my project and I've boiled it down to the simplest test case I can here: https://github.com/jeaye/cling-linkage-error-test-case; > ; > Is this expected behavior? If so, how can I have cling be able to work with all of the (mangled) symbols which are in my program? I'm trying to use cling as an embedded JIT in my own language's compiler, so the goal is to be generating code on the fly which works with the existing runtime in the compiler. I can move this to a separate ticket if that's preferred. You probably have compiled your code base with -fno-rtti (or exceptions) and you should pass that flag to cling as well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1193060626:160,down,down,160,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1193060626,4,"['down', 'error']","['down', 'error-test-case']"
Availability,"> Ok, let me know if you have other tests which you would like me to do. I was a bit surprised to learn that:. > > Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT).; > ; > Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. ping. > One more question for my understanding. Are those big vectors actually needed at all when reading a file? If not why aren't they swapped out to disk either implicitly via some madvise or by simply caching to disk the results? The latter might even give some startup advantage, assuming they are offsets to the pcms and they do not change (not the basic root ones, at least). They are not needed upon module loads. We tried to implement some sparse vectors to mitigate this issue. However, I feel like we did not have the persistence to make it work. That is, we can implement a lazy vector structure that behaves just like vector but the reserve operation does not allocate. Instead, we allocate slabs around the access pattern (we override the subscript operator, etc). This would help us avoid eager allocations and hopefully, depending on whether there is a clear access pattern to optimize things. Our implementation seems to be still [here](https://github.com/Teemperor/llvm/commit/a06b21cbc55c6d2f1d2bf6f39771411ccc17342b). Another easier thing to try is reviving https://reviews.llvm.org/D89749",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13000#issuecomment-1629035353:466,ping,ping,466,https://root.cern,https://github.com/root-project/root/issues/13000#issuecomment-1629035353,2,['ping'],['ping']
Availability,"> Ok, the code is broken beyond repair, let's just kill it with fire. Yes, getting the code to work properly is 'hard' and thus the work has not been completely. If you have analyzed each of those lines and deemed that indeed it is not semantically possible to cleanups those things at the end of the process, then please replace the (unactivated) deletion code with a clear explanation of why it is impossible to delete (and saying 'it is hard' or 'broken beyond repair' is not quite enough of an explanation :) :) ). So unless, somebody actually investigate each of those lines, please leave them as a guide of what still needs to be investigated. Thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/794#issuecomment-317278853:32,repair,repair,32,https://root.cern,https://github.com/root-project/root/pull/794#issuecomment-317278853,8,['repair'],['repair']
Availability,"> On Jan 21, 2022, at 9:54 AM, Vassil Vassilev ***@***.***> wrote:; > ; > ; > @smuzaffar, indeed, now the failure looks very basic.; > ; > @davidlange6, I remember we've seen such a failure but did we manage ever to solve it?. No, we didn't... though the only dictionary not found errors we have now are of a different sort (lets see if they go away); > ; > —; > Reply to this email directly, view it on GitHub, or unsubscribe.; > Triage notifications on the go with GitHub Mobile for iOS or Android. ; > You are receiving this because you were mentioned.; >",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9592#issuecomment-1022483156:106,failure,failure,106,https://root.cern,https://github.com/root-project/root/pull/9592#issuecomment-1022483156,3,"['error', 'failure']","['errors', 'failure']"
Availability,"> On windows:; > ; > ```; > ; > 11:06:03 MSVCRT.lib(tncleanup.obj) : error LNK2005: ""struct __type_info_node __type_info_root_node"" (?__type_info_root_node@@3U__type_info_node@@A) already defined in libCling.lib(libCling.dll) [C:\build\workspace\root-pullrequests-build\build\core\base\test\CoreBaseTests.vcxproj]; > ; > 11:06:03 ParallelTest.cxx; > ; > 11:06:03 Creating library C:/build/workspace/root-pullrequests-build/build/core/base/test/Release/CoreBaseTests.lib and object C:/build/workspace/root-pullrequests-build/build/core/base/test/Release/CoreBaseTests.exp; > ; > 11:06:03 PaulTest.cxx; > ; > 11:06:03 REveTreeTools.cxx; > ; > 11:06:03 C:\build\workspace\root-pullrequests-build\build\core\base\test\Release\CoreBaseTests.exe : fatal error LNK1169: one or more multiply defined symbols found [C:\build\workspace\root-pullrequests-build\build\core\base\test\CoreBaseTests.vcxproj]; > ; > ```. I mean on debian",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7132#issuecomment-780829540:69,error,error,69,https://root.cern,https://github.com/root-project/root/pull/7132#issuecomment-780829540,2,['error'],['error']
Availability,"> One general point regarding the overall design. I wonder if the `RVecDS` data source can be made to have a map/vector of `RVec`s as data member instead of `void *` . Thanks for the review! I have changed the `RVecDS` to take a map to `RVecs`, and not pointers to it. > and those RVecs should be views on the numpy arrays. This would make the design intent clearer and possibly remove the need for a custom deleter that calls into a Python function. This is not possible right now, because RVecs are not true ""views on the numpy arrays"" in the sense that their existence keeps the numpy array alive. This is only hacked into the Python side by adding an `__adopted__` member to the RVec python proxy:; https://github.com/root-project/root/blob/master/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rvec.py#L135. As soon as the RVec gets passed to the C++ side we are losing this reference. So we can't work around a custom deleter in the `RVecDS`. Well, there would be a way, which is to implement a similar mechanism of implementing a deleter that calls to the Python side in RVec itself! But maybe that's not for this PR :slightly_smiling_face:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15031#issuecomment-2018028002:594,alive,alive,594,https://root.cern,https://github.com/root-project/root/pull/15031#issuecomment-2018028002,2,['alive'],['alive']
Availability,"> Our test suite is driven via `ctest`, so whatever `ctest` thinks is ""the truth"" for what concerns that test run. If it cannot find those packages, then they are not there for all intents and purposes. In all other `ctest`-run Python tests it works just fine, because the importing the packages with `import` always works. It's just that in this test, the packages are checked for availability with the deprecated `pkg_resources.require()`. So what `ctest` thinks is the truth is inconsistent, hence my conclusion that the test is broken. But that doesn't matter anymore, since you suggest to completely remove the test :smile: Thanks for that!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15272#issuecomment-2067660264:382,avail,availability,382,https://root.cern,https://github.com/root-project/root/pull/15272#issuecomment-2067660264,1,['avail'],['availability']
Availability,"> Out of curiosity, can you try with -DLLVM_BUILD_TYPE=Debug ?. Doesn't change anything. Same Error.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12738#issuecomment-1534586936:94,Error,Error,94,https://root.cern,https://github.com/root-project/root/issues/12738#issuecomment-1534586936,1,['Error'],['Error']
Availability,"> Out of curiosity, is the failure on Windows understood (at least to a certain extent)?. Well, I can't remember why I disabled it on Win64... I'll have to check",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12818#issuecomment-1547606297:27,failure,failure,27,https://root.cern,https://github.com/root-project/root/pull/12818#issuecomment-1547606297,1,['failure'],['failure']
Availability,"> Personally, I would go for `unique_ptr`, though. I guess, you are speaking about RooCacheManager. ; Yes, I fully agree. Question - how far we want to change public APIs here.; Actually, leak in RooCacheManager can happen only by accident - ; normally it always checked if object exists before creating new entry which could be lost.; But in many other places we could not easily change API; Or there are a plans to do it in incompatible way?. I guess, it is not bad idea to check clang-tidy warnings and try to understand them.; Here is typical example of error:; https://github.com/root-project/root/pull/7613/commits/520c9d2b891f470846369e4b6f3644d7645b3384#diff-74e34c9bdb3d39258928e6da6a03cceafb9607f6ba52ff1efc764a76b15735a4R376",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7613#issuecomment-802814877:558,error,error,558,https://root.cern,https://github.com/root-project/root/pull/7613#issuecomment-802814877,1,['error'],['error']
Availability,> Ping. What's the fate of this?. Are you pinging @sudo-panda or whom? This is still WIP according to the title; let me switch this to draft mode to make this more visible. I'd hope that the failing test can be addressed before this gets reviewed?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11096#issuecomment-1408170465:2,Ping,Ping,2,https://root.cern,https://github.com/root-project/root/pull/11096#issuecomment-1408170465,2,"['Ping', 'ping']","['Ping', 'pinging']"
Availability,> Please remove the `if (!entry)` test and associated warning.; > Please also change the signature of GetEvent. okay. But I did some internet research and couldn't find a way to check if no entry parameter was given by the user without also raising the error when the user enters 0 (since !entry == true if entry == 0),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8425#issuecomment-862535003:253,error,error,253,https://root.cern,https://github.com/root-project/root/pull/8425#issuecomment-862535003,1,['error'],['error']
Availability,"> Please think twice about your use-case before building as a shared library. You can get cling as a shared library through the [CppInterOp](https://github.com/compiler-research/CppInterOp) project. Is CppInterOp the future of Cling (that is, will it eventually obsolete it?). I remember reading about some effort integrating Cling or some clang-repl into the LLVM project itself, which would be simplest for users/distributors down the line. As for my use-case, I tried expounding on the rationale here: https://github.com/root-project/root/pull/15563#issuecomment-2125969791",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15563#issuecomment-2125981292:428,down,down,428,https://root.cern,https://github.com/root-project/root/pull/15563#issuecomment-2125981292,2,['down'],['down']
Availability,"> Possibly related: is there any reason that the pre-release source (and presumably master) apparently uses its own `std.modulemap` rather than looking for one provided with the external compiler's standard library first?. The modulemap is only available in libcxx and we use it. We ""mount"" a custom one for glibc++ which does not have any. If you invoke rootcling with `-v4` you will see more details.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10861#issuecomment-1401993789:245,avail,available,245,https://root.cern,https://github.com/root-project/root/issues/10861#issuecomment-1401993789,1,['avail'],['available']
Availability,"> Probably this is just a style preference, but given that we might want to implement similar approaches for other tests, wouldn't it be cleaner to specify the dependency on the xml target from the `ROOT_ADD_TEST` call? imho it looks more sustainable with the perspective of wanting to disable tests that need specific targets of the build system. Not in this case, there is no C++ dependency that can be expressed in CMake. The test doesn't link against the XML library, but it uses an executable via `gSystem` that is only available when building ROOT with `xml=ON`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16675#issuecomment-2411277606:525,avail,available,525,https://root.cern,https://github.com/root-project/root/pull/16675#issuecomment-2411277606,1,['avail'],['available']
Availability,> RDataFrames don't seem to be able to handle wildcards in directories. can you provide an example of what does not work? RDF forwards the globs directly to TChain so what works for TChain should work for RDF. > Perhaps it would be possible to throw up an error or warning when this type of issue is encountered?. a use-after-delete is undefined behavior in C++ which means (among other things) that _in general_ it cannot be detected. I'll try to discuss with a few people the options we have.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10965#issuecomment-1201705389:256,error,error,256,https://root.cern,https://github.com/root-project/root/issues/10965#issuecomment-1201705389,1,['error'],['error']
Availability,> Remove redundant declaration from TCling. Could you explicit where the other include are? Thanks.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2755#issuecomment-428254712:9,redundant,redundant,9,https://root.cern,https://github.com/root-project/root/pull/2755#issuecomment-428254712,1,['redundant'],['redundant']
Availability,"> Removing the function is fine with me, however, it defies the purpose of the deprecation macro. AFAIK the macro is supposed to generate a compilation warning (error in overdue versions) in the user code calling this function. This function is not called in ROOT itself, so it should not trigger any warning. It's all correct, the macro serves two purposes: 1) give a user warning and 2) give a warning to developers if they don't have yet deleted the code, even though the current version tag is the number where they commited themselves to deprecating it",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15135#issuecomment-2037348870:161,error,error,161,https://root.cern,https://github.com/root-project/root/pull/15135#issuecomment-2037348870,1,['error'],['error']
Availability,"> Running a ROOT build with its PCH should set up ROOT's clang in a way that's compatible with the PCH. That's contrary to standalone clang where if the PCH has different config than what's used through flags should cause an error.; > ; > I don't see this discussed here - what's the intent?. We have much more controlled way to set up the ROOT PCH within TCling and rootcling. The motivation for this patch is that cling should not adjust itself to the PCHs of the client, pretty much the same way as clang. I am happy to move that to TCling but I think it would be a nop in the end as the way we build thePCH nowadays is pretty well connected to the way we run cling anyway. . This patch will reduce the boilerplate we have in the CIFactory allowing us to eventually switch to clang-repl for bootstrap.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11922#issuecomment-1356793098:225,error,error,225,https://root.cern,https://github.com/root-project/root/pull/11922#issuecomment-1356793098,1,['error'],['error']
Availability,"> Say ksh, zsh, etc... In Ubuntu 18, bash and zsh worked before well, ksh did not (you get similar error as in https://root-forum.cern.ch/t/error-in-thisroot-sh/26231), neither did dash. With the current fix, ksh still not working, but dash does, and bash and zsh still work.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10332#issuecomment-1089407818:99,error,error,99,https://root.cern,https://github.com/root-project/root/pull/10332#issuecomment-1089407818,2,['error'],"['error', 'error-in-thisroot-sh']"
Availability,> See also [root-forum.cern.ch/t/error-in-treentrantrwlock-writeunlock-write-lock-already-released-tthread-member-function/43663/6](https://root-forum.cern.ch/t/error-in-treentrantrwlock-writeunlock-write-lock-already-released-tthread-member-function/43663/6) ROOT::EnableThreadSafety() could be added to the manual. I think it is already mentioned toward the end of https://root.cern/manual/multi_threading/,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7216#issuecomment-1057547218:33,error,error-in-treentrantrwlock-writeunlock-write-lock-already-released-tthread-member-function,33,https://root.cern,https://github.com/root-project/root/issues/7216#issuecomment-1057547218,2,['error'],['error-in-treentrantrwlock-writeunlock-write-lock-already-released-tthread-member-function']
Availability,"> See also https://github.com/root-project/root/commit/7a592f5d62dda6c76f230bfa6fd879e5fa80582a for some description of a challenging use case. It is unclear to me what is the weight of the behaviour described in the comment and in the commit message w.r.t. the logic of what we need to do at atexit time. From my understanding, the current behaviour (before this PR) is:; 1. Run TROOT::EndOfProcessCleanups; 2. Python gc destroys variables, thus triggering any destructors of the corresponding C++ objects; 3. Run *again* TROOT::EndOfProcessCleanups. This logic seems faulty to me. I ran the reproducer of the [original issue](https://sft.its.cern.ch/jira/browse/ROOT-10295) linked in the commit you linked and it runs smoothly after the changes of this PR. Copying here the reproducer for reference:; ```python; import ROOT. def create():; f = ROOT.TFile(""file.root"", ""RECREATE""); t = ROOT.TTree(""tree"", """"); return f, t; f, t = create(); ```. Admittedly, I have only tried with Python 3.10, I will see if I can also try with other Python 3 minor versions. But irrespective of this, I don't think `TROOT::EndOfProcessCleanups` should be called twice. I believe that if there is indeed a behaviour that requires some *Python atexit* handler, that should be written in another function, separate from EndOfProcessCleanups, and called accordingly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10753#issuecomment-1155514143:569,fault,faulty,569,https://root.cern,https://github.com/root-project/root/pull/10753#issuecomment-1155514143,1,['fault'],['faulty']
Availability,"> Seems to me the error is not cryptic at all. It makes it clear that `main()` already exists. Newbie users do not know what TApplication is, and how that should be related with main(). See https://stackoverflow.com/questions/74247557/warning-failed-to-call-main-to-execute-the-macro/74445395#74445395",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11707#issuecomment-1315414134:18,error,error,18,https://root.cern,https://github.com/root-project/root/issues/11707#issuecomment-1315414134,2,['error'],['error']
Availability,"> Seems to work except for `gtest_tree_dataframe_test_dataframe_vary` throwing exceptions. I think we'll have to keep this disabled for now. This was a communication failure on my side; what I meant is that we have to keep the test disabled, but the revert of disabling GlobalISel is probably fine / potentially even needed now to address failures in the nightlies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11946#issuecomment-1419351071:166,failure,failure,166,https://root.cern,https://github.com/root-project/root/pull/11946#issuecomment-1419351071,2,['failure'],"['failure', 'failures']"
Availability,"> Several systems (notably Macs) install curl without support for SSL. I can't speak beyond Macs here, but this hasn't been the case on macOS for quite a long time now. . It works just fine on macOS 10.10-10.13, and would be surprised if it didn't work down to at least 10.9. Some of the older versions of macOS struggle to handle newer ciphers/protocols/etc but any version of macOS released in the last 4 or 5 years should handle it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1499#issuecomment-359071726:253,down,down,253,https://root.cern,https://github.com/root-project/root/pull/1499#issuecomment-359071726,1,['down'],['down']
Availability,"> Should this be reverted once https://github.com/root-project/root/issues/9137 is fixed?. Not really, what we expect is an error in that scenario, and the test that makes sure we error out in that scenario should be put in TTree/TChain, not RDF. RDF should not test scenarios that TTree/TChain does (or should) not support.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12025#issuecomment-1382240153:124,error,error,124,https://root.cern,https://github.com/root-project/root/pull/12025#issuecomment-1382240153,2,['error'],['error']
Availability,"> Should we also propagate the value of TBranch::GetMakeClass from input branch to output branch?. That is a separate problem that indeed deserves testing (i.e. the memory layout is different, so yes the 2 branches needs to have the same mode and also it will introduce its own set of challenges/possible failures).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6094#issuecomment-665711574:305,failure,failures,305,https://root.cern,https://github.com/root-project/root/pull/6094#issuecomment-665711574,1,['failure'],['failures']
Availability,"> Side remark: for the string locator, did we decide on how we can reintroduce it with support for deduplicating URL prefixes at a later point, after fixing the 1.0 spec?. I don't think we wrote down anything. The way I imagine it is that the URL template information (base URL etc.) is stored in the yet-to-be-defined S3 anchor.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16332#issuecomment-2334058419:195,down,down,195,https://root.cern,https://github.com/root-project/root/pull/16332#issuecomment-2334058419,1,['down'],['down']
Availability,"> Since i understand that my case is special and i have alternative to use root:// to access same file, it think we can close it. It is very special case and need to be fixed in both `TWebFile` and `TDavixFile`. ; Also jsroot with standard `XMLHttpRequest` is not able to provide partial access to this file and only works after full download of the file into memory. Therefore if there are other way to access such files I prefer to keep ROOT code as is",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14429#issuecomment-1914178309:334,down,download,334,https://root.cern,https://github.com/root-project/root/issues/14429#issuecomment-1914178309,1,['down'],['download']
Availability,"> Since the errors are true and valid, shouldn't we keep them? Or make them more clear as in `you are trying to access a system-protected file"" or something similar?. The user complains about the error message, then I'm not sure changing the text of the message will help in this case. And the error is `ENOENT`, meaning the file doesn't exists, which is not necessarily true, so telling this is a system protected file is not even reflecting the reality on all OSes",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14865#issuecomment-1973063708:12,error,errors,12,https://root.cern,https://github.com/root-project/root/pull/14865#issuecomment-1973063708,6,['error'],"['error', 'errors']"
Availability,"> So it does not need to be in the pcm but it still need to be generated at some point .... Updated the patch as `if (!(useCxxModules && IsFromRootCling()) && strncmp(cl->GetName(),""tuple<"",strlen(""tuple<""))==0) {` so we won't put TEmulatedTuple in pcm but still generate when called from ROOT. Is that what you meant?. FYI, this was a stack trace of TEmulatedTuple re-definition error.; ```; (gdb) bt; #0 0x00007ffff57626d0 in cling::IncrementalParser::ParseInternal(llvm::StringRef) () from /home/yuka/module-release/lib/libCling.so ; #1 0x00007ffff5763ffb in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/yuka/module-release/lib/libCling.so ; #2 0x00007ffff56ff415 in cling::Interpreter::declare(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Transaction**) () ; from /home/yuka/module-release/lib/libCling.so; #3 0x00007ffff5698388 in TCling::LoadText(char const*) const () from /home/yuka/module-release/lib/libCling.so ; #4 0x00007ffff5687b7b in TCling::Declare(char const*) () from /home/yuka/module-release/lib/libCling.so; #5 0x00007ffff568a383 in AtlernateTuple[abi:cxx11](char const*) () from /home/yuka/module-release/lib/libCling.so ; #6 0x00007ffff568a99e in TCling::SetClassInfo(TClass*, bool) () from /home/yuka/module-release/lib/libCling.so ; #7 0x00007ffff47dbc58 in TClass::Init(char const*, short, std::type_info const*, TVirtualIsAProxy*, char const*, char const*, int, int, ClassInfo_t*, bool) () from /home/yuka/module-release/lib/libCore.so ; #8 0x00007ffff47db6ec in TClass::TClass(char const*, short, bool) () from /home/yuka/module-release/lib/libCore.so ; #9 0x00007ffff568bdde in TCling::GenerateTClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCling.so ; #10 0x00007ffff47d92bf in TClass::GetClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCore.so ; #11 0x00007ffff47d9884 in TBuildRealData::Inspect(TClass*, char const*,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2615#issuecomment-421939105:380,error,error,380,https://root.cern,https://github.com/root-project/root/pull/2615#issuecomment-421939105,1,['error'],['error']
Availability,"> So that's because `std::sqrt` doesn't have an overload for Vc types. The solution is the following:; > ; > ```c++; > T SomeFunc() {; > using std::sqrt;; > return sqrt(fX);; > }; > ```; > ; > i.e. keep `sqrt` unqualified such that ADL (argument-dependent lookup, fixing Vc) can happen, but make `std::sqrt` available through the local (!) `using namespace std::` or better yet `using std::sqrt` if that builds everywhere. Ah ok. And just in the function(s) where the error is occurníng?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7909#issuecomment-822585971:308,avail,available,308,https://root.cern,https://github.com/root-project/root/pull/7909#issuecomment-822585971,2,"['avail', 'error']","['available', 'error']"
Availability,"> So we do have a real problem but where I am confused is ""if our failure case is due to unlocked locks in the child process"" why is it seen only at tear down? I.e. would the very first use of the lock resources be already held back. Yes, any of the libraries might block if called. And my understanding is (see below) that it's only their `atexit` handlers that get us into trouble, at least for sane code. > If using `_exit` is the workaround (solution?) then this means that no cleanup can be executed (even-though it might be needed).; > ; > > However, I'm not sure if we need to close TFiles because the workers don't open them; > ; > Do we have complete control over what the child process executes (i.e. no user code whatsoever?). We are executing user code, but only what was passed in for `Map`, `MapReduce`, and `Reduce` (as far as I understand). Now they could do nasty things in there like opening more files... That said, I can give `gSystem->Exit(0, kFALSE)` a try to shutdown ROOT cleanly and then call `_exit(0)`, but I don't see a way to run `atexit` handlers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7075#issuecomment-764834650:66,failure,failure,66,https://root.cern,https://github.com/root-project/root/pull/7075#issuecomment-764834650,2,"['down', 'failure']","['down', 'failure']"
Availability,"> So we would have to create a GetIndex function to extract from the ""filename/treename"" the index?. Exactly!. The feature is now available in master and CVMFS has nightly ROOT builds: https://root.cern/install/nightlies . Unless there are further questions I'm going to close this as solved as you have a not-so-nice workaround with current ROOT versions and a better solution in master.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9030#issuecomment-933579143:130,avail,available,130,https://root.cern,https://github.com/root-project/root/issues/9030#issuecomment-933579143,1,['avail'],['available']
Availability,"> So, would the error still be there if you change the example to something like:; > ; > ```; > #include <TROOT.h>; > static auto force_init = gROOT->GetInterpreter();; > int main(int argc, char** argv) {; > return 0;; > }; > ```; Well, in that case it depends on what is loaded first, but there could be other static objects loading symbols from the other LLVM, so even if this would work, it would be only by chance. It just depends on the order.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4668#issuecomment-564005524:16,error,error,16,https://root.cern,https://github.com/root-project/root/pull/4668#issuecomment-564005524,1,['error'],['error']
Availability,"> Sorry for the slow response. What's the behavior / output when running `.x` without filename once this PR is applied? If there is absolutely no diagnostic, could you maybe add one as part of this PR? (If not then I will merge this as is - it's still better than crashing!). After this patch, the outputs are as follows:; ```; [cling]$ .x; input_line_3:2:2: error: expected expression; .x; ^; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11264#issuecomment-1581401813:359,error,error,359,https://root.cern,https://github.com/root-project/root/pull/11264#issuecomment-1581401813,1,['error'],['error']
Availability,"> Still. Since one _may_ use `ROOT_DIR`, this addition should still make things a bit more robust. But we'll still need to advise people to either request CMake 3.12 as a minimum in their own code, or to explicitly set `CMP0074` to `NEW`. 🤔. While ROOT already requires CMake >= 3.12, I guess as of 6.30 it requires that any projects depending on ROOT also need to require 3.12 as a minimum (or set the policy explicitly) (regardless of what the CMake version actually is). Not sure whether this is documented somewhere, at least to me it wasn't 100% obvious. A lot of packages don't seem to define a minimum version at all...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14178#issuecomment-1840774289:91,robust,robust,91,https://root.cern,https://github.com/root-project/root/pull/14178#issuecomment-1840774289,1,['robust'],['robust']
Availability,"> TList::NewLink vs TList::FindObject. Is this still an issue after making the collection 'thread-safe'?. > And then I see this error, that might be the reason of the freeze of my program. Does it say 'which' lock is still being held?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8365#issuecomment-875038255:128,error,error,128,https://root.cern,https://github.com/root-project/root/issues/8365#issuecomment-875038255,1,['error'],['error']
Availability,"> TStreamerInfoActions:255. This is the inner most part of the I/O and the most commonly uses code. Consequently this will (should) have a very severe impact on performance. Furthermore, that (inner) function contract is that it is being passed a valid address. The problem (to be solved) is that . ```; b->SetAddress(nullptr);; ```; seems to be ignored. It should lead to the internal of `TBranchElement` to now point to a newly created (as a result of this code) object (of the right type) owned by the branch. Similarly, we ought to detect (this time we can probably just error out) the case:; ```; f = nullptr;; t->Fill();; ```; early in the `FIll` stack, maybe as soon:; ```; #6 0x7fcd22016441 in TBranchElement::FillImpl(ROOT::Internal::TBranchIMTHelper*) root/tree/tree/src/TBranchElement.cxx:1290; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8027#issuecomment-2080082428:575,error,error,575,https://root.cern,https://github.com/root-project/root/issues/8027#issuecomment-2080082428,1,['error'],['error']
Availability,"> Technically code works with all 3.x versions of `nlohmann/json.hpp`. I add requirement for 3.9 recently just because we were not using and not testing for `json_fwd.hpp`. Now version restriction is not necessary. My point is: why would we want to go back? AFAICT we already released ROOT with the requirement for 3.9. Did anybody complain?. > `json_fwd.hpp` now always required - not only for 3.11. Just as workaround for time been we allow to use [3.10 .. 3.11] versions without it. For me, this isn't an argument for changing the error message for *the current version* and make it worse. > After LLVM upgrade we could completely skip usage of `json_fwd.h`. I still don't understand this. All discussions we had so far ended with agreeing that the LLVM upgrade will change nothing wrt the JSON library.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11268#issuecomment-1230208129:534,error,error,534,https://root.cern,https://github.com/root-project/root/pull/11268#issuecomment-1230208129,1,['error'],['error']
Availability,"> Test tutorial-v7-ntuple-ntpl005_introspection failure; > ` what(): Fatal Error: failed to allocate memory for the smallest possible io_uring instance. 'memlock' memory has been exhausted for this user`. In any case, it is a bug that we don't fall back to blocking IO, but this can occur if user limits for locked memory are too low. What is the output of `ulimit -l`? On machines I have tested, the default user limit has to be adjusted (e.g. 16MB). Just out of curiosity, which kernel are you running?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7936#issuecomment-823331170:48,failure,failure,48,https://root.cern,https://github.com/root-project/root/issues/7936#issuecomment-823331170,2,"['Error', 'failure']","['Error', 'failure']"
Availability,"> Thank you @amadio , indeed we need Axel or Vasil's approval to merge (ping :) ).; > ; > IIUC this PR does not solve the last item in 10870, ""investigate the runtime and memory cost of CLING_DEBUG=1, consider having it on by default in some cases, e.g. for interactive usage"". Again up to cling devs to decide if it's worth opening a separate issue for that or we are happy with the current situation for now. As discussed in Mattermost, there is a significant cost at runtime when enabling `CLING_PROFILE=1` and/or `CLING_DEBUG=1`, so it's best to enable it only when needed. For reference, times measured for `df102_NanoAODDimuonAnalysis.py` tutorial were about 30s with `CLING_PROFILE` disabled, and almost 50s with the feature enabled. Keeping the frame pointer is especially costly when short functions get called many times, and that's the case with most `RDataFrame` analyses. @Axel-Naumann, @vgvassilev I'd like to merge this when the build passes. Please add your stamp of approval at your earliest convenience. Thanks!. Note: I dropped a commit that used limited debugging info when only profiling, because that actually causes ROOT to crash. Full debug info must be used for things to work.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10890#issuecomment-1298795478:72,ping,ping,72,https://root.cern,https://github.com/root-project/root/pull/10890#issuecomment-1298795478,1,['ping'],['ping']
Availability,"> Thank you for the PR. I think however that is correct to return a NaN for skewness and kurtosis and not have a Fatal error which could crash the application. Fair enough. I can remove the Fatal error but I think that the division by zero is still something that needs to be addressed. Would this change be ok?. ``` C++; if (stddev == 0) {; Warning(""GetSkewness"", ""illegal value of stdev (division by zero)"");; }; ```. It would be up to the user to pay attention to the error messages. Alternatively we can conclude that the code is working as intended (returning Nan is ok as you stated) and close this PR and mark the bug report as solved.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14506#issuecomment-2072457326:119,error,error,119,https://root.cern,https://github.com/root-project/root/pull/14506#issuecomment-2072457326,3,['error'],['error']
Availability,"> Thank you for the improvements! Apart from the new comments here, please address [#6969 (comment)](https://github.com/root-project/root/pull/6969#discussion_r618406433); > ; > I'd still appreciate hearing your opinion on; > ; > > That's quite some code - much of that would be much better off being hosted by llvm :-/ Is it worth trying to move the RPath handling upstream?; > ; > Isn't there existing ""load that library"" code anywhere in llvm, that either already handles RPATH or would be better off having RPATH support?. Yes, that is further down the road, the idea for this is to become a high-performance, default`llvm::orc::DefinitionGenerator`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6969#issuecomment-845695225:548,down,down,548,https://root.cern,https://github.com/root-project/root/pull/6969#issuecomment-845695225,1,['down'],['down']
Availability,"> Thank you for your fast reply. Streaming stl container in ROOT of standard types is easly done as doing for native ROOT objects.; > But I understand you have this preference, and since you are the class author we accept this. I will try to figure out how the streaming of STL containers is done, then I don't feel bad about using them, since they also have some advantages. > For SetNErrorDimensions I understand the use case to reduce the dimensionality before storing, but then it would not be better to have the capability to delete a full error dimension with a dedicated function ?. I also think that might be an even better solution. I will look into it. > I think before merging this PR it would be nice to have also two additional things:; > ; > * one tutorial showing the usage of the class; > ; > * a test program testing the basic functionality. This could be written for example in gtest and included in the hist/hist/test directory where we have other tests of new histogram classes. I will also look into this. I will probaly need some time to implement and test all the requested changes, especially since I have also some work to do for my PhD, but I see no severe problems at the moment. Thanks and all the best,; Simon",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3452#issuecomment-558630837:545,error,error,545,https://root.cern,https://github.com/root-project/root/pull/3452#issuecomment-558630837,1,['error'],['error']
Availability,"> Thanks - I bet there are many other missing and outdated particle properties. Do you have a suggestion how to fix ""everything""?. Hi @Axel-Naumann , One can parse the file https://pdg.lbl.gov/2023/mcdata/mass_width_2023.txt to update masses of some particles in a more automated way, but it does not cover other particle properties nor all particle masses (e.g. Xi_cc++ is missing). The page https://pdg.lbl.gov/2023/html/computer_read.html also mentions available APIs and SQLite files for accessing the full database. This could be the best way to systematically compare the two databases and update everything. This kind of access is provided for testing only though so might require manual check of the found differences.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12968#issuecomment-1592966409:456,avail,available,456,https://root.cern,https://github.com/root-project/root/pull/12968#issuecomment-1592966409,1,['avail'],['available']
Availability,"> Thanks @Ask149 for your contribution, that's a good change! Out of curiosity, how did you detect this?. @Axel-Naumann I encountered a Travis clang build error specifying 'Call to a virtual function in destructor' in my previous pull request #4164, so, while resolving the same, I found the above issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4275#issuecomment-530518747:155,error,error,155,https://root.cern,https://github.com/root-project/root/pull/4275#issuecomment-530518747,1,['error'],['error']
Availability,"> Thanks a lot @ellert for this fix! This means that a new ZeroMQ version came out, and I can get rid of this hack entirely!; > ; > Can you please check if this alternative PR works for you? #14003. You can not rely only on the version number check. The zmq_ppoll is in the drafts API, and is only available if libzmq was compiled with ./configure --enable-drafts. As far as I can see there is no way to check this other than checking that the symbol is in the library. This check was broken in the old version of FindZeroMQ since in only defined CMAKE_REQUIRED_DEFINITIONS and not CMAKE_REQUIRED_LIBRARIES and CMAKE_REQUIRED_INCLUDES before calling check_cxx_symbol_exists. The check was also never triggered, because it only happens if (ZeroMQ_FOUND), but ZeroMQ_FOUND hasn't been defined yet when the variable is checked. According to the output of ./configure --help in libzmq, the --enable-drafts is default yes:; ```; --enable-drafts Build and install draft classes and methods; [default=yes]; ```; However, as reported here: https://github.com/zeromq/libzmq/issues/4613, this is only true if you build from a git checkout, but not if you are building from a release tarball, which is what packages in distribution do. I filed a request ta have the --with-drafts option added to the package build in Fedora: https://bugzilla.redhat.com/show_bug.cgi?id=2247171, which is why it is now available in Fedora rawhide. But you need the latest zeromq-4.3.5-14.fc40 where this is enabled. Earlier 4.3.5 builds will not work.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13995#issuecomment-1790144241:298,avail,available,298,https://root.cern,https://github.com/root-project/root/pull/13995#issuecomment-1790144241,2,['avail'],['available']
Availability,"> Thanks a lot! I hope this fixes the errors in the nightlies. Yes, it should fix them. Thanks for the review!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8812#issuecomment-894290000:38,error,errors,38,https://root.cern,https://github.com/root-project/root/pull/8812#issuecomment-894290000,1,['error'],['errors']
Availability,"> Thanks a lot, @krasznaa, for the quick fix.; > ; > > Note that this fix requires CMake 3.12+, with [CMP0074](https://cmake.org/cmake/help/latest/policy/CMP0074.html#policy:CMP0074) set to `NEW`.; > ; > Strangely enough, with that policy set it works for me with and without your fix, maybe because we already set $ROOT_ROOT in the build environment.; > ; > Do I understand it correctly that your fix covers the case where ROOT is discovered via $ROOT_DIR only?. This is a very good point. 🤔 Indeed, this update still requires `CMP0074` to be `NEW`. With that setting, just using `ROOT_ROOT` to point at the ROOT installation, is already enough to also find VDT. Still. Since one *may* use `ROOT_DIR`, this addition should still make things a bit more robust. But we'll still need to advise people to either request CMake 3.12 as a minimum in their own code, or to explicitly set `CMP0074` to `NEW`. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14178#issuecomment-1840758983:753,robust,robust,753,https://root.cern,https://github.com/root-project/root/pull/14178#issuecomment-1840758983,1,['robust'],['robust']
Availability,"> Thanks for hunting down solutions for these tests! For the first one, you could maybe mention that this is because of [8deb57c](https://github.com/root-project/root/commit/8deb57c04a5ceea96533d095092fcd4f71d1df94) (as far as I could find some time ago for #12454). Updated [commit](https://github.com/root-project/root/pull/12855/commits/cc4dcce381f19f3dd77133218920d2d6048842d8) message! Thanks for reviewing! :slightly_smiling_face:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12855#issuecomment-1554771507:21,down,down,21,https://root.cern,https://github.com/root-project/root/pull/12855#issuecomment-1554771507,1,['down'],['down']
Availability,"> Thanks for the PR. How will a user know if the histogram has reached its maximum bin content ? Should we add an error message the first time this happens or should we add a flag (e.g using one of the bit) in the histogram?. A flag sounds good to me. But we should add then this also for TH1I, TH1C, etc. What about ROOT7 new histogram interfaces, should this be added too, there?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14271#issuecomment-1864335488:114,error,error,114,https://root.cern,https://github.com/root-project/root/pull/14271#issuecomment-1864335488,1,['error'],['error']
Availability,"> Thanks for the tip! Adding `-fno-rtti` to cling works, but only in the case where the function is defined inline in the header. When the function is defined in a separate TU which is linked into the host application, cling fails to find the symbol.; > ; > I've updated the test case here: https://github.com/jeaye/cling-linkage-error-test-case; > ; > Basically just moved `test::integer::to_string` into its own cpp file, which then brings the linker errors back when trying to call it from cling. That's probably the wrong place to discuss these things but is `src/object.cpp` linked to `./a.out`? What does `nm ./a.out | grep _ZTVN4test7integerE` say?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1193179100:330,error,error-test-case,330,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1193179100,2,['error'],"['error-test-case', 'errors']"
Availability,"> Thanks for this nice update. Would it be perhaps possible to add a test?. Not easily I think, because passing a `void` mapping function will still fail to compile, just with a nicer error message now...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14694#issuecomment-1943313583:184,error,error,184,https://root.cern,https://github.com/root-project/root/pull/14694#issuecomment-1943313583,1,['error'],['error']
Availability,"> Thanks, I now realize I rendered `m_externalIncrementalExecutor` unused in commit [9b2041e](https://github.com/root-project/root/commit/9b2041e3000a1d86bbad0595b2bc8e2deb8e247a)...; > ; > Instead of our own `DelegateGenerator`, did you try using the available `ReexportsGenerator` with `Jit->getMainJITDylib()`?. Yes, indeed my first try at this was; ```c++; return std::make_unique<ReexportsGenerator>(Jit->getMainJITDylib(), JITDylibLookupFlags::MatchAllSymbols);; ```; but it didn't seem to work. I think this might be related to the issue described [here](https://stackoverflow.com/questions/74405679/cannot-resolve-symbols-by-reexportsgenerator-in-llvm-orc-jit), and as far as I could see without diving too deep, is that it may have something to do with linker-mangled name vs. IR symbol name. Thus, if `ReexportsGenerator` cannot be used _directly_, I propose this fix instead.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12900#issuecomment-1569839188:252,avail,available,252,https://root.cern,https://github.com/root-project/root/pull/12900#issuecomment-1569839188,1,['avail'],['available']
Availability,"> Thanks, I will see what's wrong then. This is a fresh build? Did you start up xcode once to allow it to download the macOS SDK?. Yes, I tried after you commented on this. I did start up xcode and allow the download and also update the command line tool to the same version before building.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12648#issuecomment-1506677804:106,down,download,106,https://root.cern,https://github.com/root-project/root/issues/12648#issuecomment-1506677804,2,['down'],['download']
Availability,"> Thanks. As a side note, since the input here are either nullptr or a void*, there is no practical difference beside the (potential) increased readability. The main reason I proposed this is that in my own applications, I use -Wold-style-cast, and I get hundreds of warnings of ROOT-related classes / dictionaries, that mask my 'own' mistakes. Even if there is no practical difference, indeed for readability of external compilations it would be quite helpful.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9761#issuecomment-1230260383:321,mask,mask,321,https://root.cern,https://github.com/root-project/root/pull/9761#issuecomment-1230260383,1,['mask'],['mask']
Availability,"> That will hide the underlying problem where static const class members are not materialized in the jit. It will help cms but make the issue more subtle to debug and properly solve. Indeed, the main goal is helping out the experiments' framework. The latest commit boils down the patch to a single line of code, after discussion with @hahnjo . We should open a issue in parallel to keep track of the situation and address it more properly as you suggest. For completeness, the current status of the PR, which only changes ; ```; --- a/core/base/src/TString.cxx; +++ b/core/base/src/TString.cxx; @@ -54,6 +54,7 @@ as a TString, construct a TString from it, eg:; #include ""TVirtualMutex.h""; #include ""ThreadLocalStorage.h""; ; +const Ssiz_t TString::kNPOS;; ```. Shows exactly the same numbers as the first attempt (out of class definition)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14261#issuecomment-1860405512:272,down,down,272,https://root.cern,https://github.com/root-project/root/pull/14261#issuecomment-1860405512,1,['down'],['down']
Availability,> That's great! Out of curiousity: How does the error message look like for `Filter('x = 0')`?; > And I don't think that this breaks any existing code. Writing back to the input arguments is clearly a super weird thing in RDF and would rely on implementation details that are not visible to the user. Very similar to this:; ```; root [0] auto func = [](const double doub) {; doub += 1.;; }; ROOT_prompt_1:1:6: error: cannot assign to variable 'doub' with const-qualified type 'const double'; doub += 1.;; ~~~~ ^; ROOT_prompt_0:1:29: note: variable 'doub' declared const here; auto func = [](const double doub) {; ~~~~~~~~~~~~~^~~~; ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6526#issuecomment-702104810:48,error,error,48,https://root.cern,https://github.com/root-project/root/pull/6526#issuecomment-702104810,4,['error'],['error']
Availability,"> That's less intrusive in many ways including that it does not introduce git history bloats.; > . I agree, it sounds good. It seems it's already in the Travis CI builds from ROOT (allowed failures), and it even suggest you the option of doing the 'upgrading' without bloating the history. ![image](https://user-images.githubusercontent.com/10653970/110776978-9b448e80-822e-11eb-8ffc-743e78dc909a.png). Another option is using a file `.git-blame-ignore-revs`, see https://www.moxio.com/blog/43/ignoring-bulk-change-commits-with-git-blame",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7407#issuecomment-796650978:189,failure,failures,189,https://root.cern,https://github.com/root-project/root/pull/7407#issuecomment-796650978,1,['failure'],['failures']
Availability,"> That's not related to the llvm9 upgrade. Here we want to print, and compare against the expected, the generated gradient function. Oh, OK, sorry I overlooked the PR. I'll take a look beginning of next year (ping me if I forget)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6970#issuecomment-749453376:209,ping,ping,209,https://root.cern,https://github.com/root-project/root/pull/6970#issuecomment-749453376,1,['ping'],['ping']
Availability,"> That's the user's guide... it is deprecated ... you should not use it. Hi, I am not using it, but forum users are doing, see https://root-forum.cern.ch/t/syntax-error-in-thisroot-csh-during-installation/50312/4?u=ferhue. So my suggestion is to put a big label on top informing anyone that it is deprecated. The results still appear when googling, so it seems useful to add some deprecated mark",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10722#issuecomment-1151136310:163,error,error-in-thisroot-csh-during-installation,163,https://root.cern,https://github.com/root-project/root/issues/10722#issuecomment-1151136310,2,['error'],['error-in-thisroot-csh-during-installation']
Availability,"> The CMake maintainers themselves state that the best workaround for ""cmake not working properly when build directories include special characters"" is ""do not use those special characters"". So probably we should not do anything about this. I think at this point we should explicitly reject if the directory name contains unsupported characters. Not doing anything is in my opinion not an option as it still result in error message but with 2 deadly flaws: it floods the screen with zillions of repetitions and requires to (after finding the ""right"" location) the line of CMake to figure out why it complains.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13731#issuecomment-1738529350:418,error,error,418,https://root.cern,https://github.com/root-project/root/issues/13731#issuecomment-1738529350,1,['error'],['error']
Availability,> The PR looks good. There is only one thing missing. The Shape operator is not using the optional attributes `end` and `start` which define the ending and initial position of the tensor from which one wants to have the shape. See the ONNX documentation: https://github.com/onnx/onnx/blob/main/docs/Operators.md#Shape. I think would be nice to add this functionality to be compliant with the ONNX standard. Sir i have implemented the Start and End Optional attributes but currently its giving a segmentation fault on build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11086#issuecomment-1229232169:508,fault,fault,508,https://root.cern,https://github.com/root-project/root/pull/11086#issuecomment-1229232169,1,['fault'],['fault']
Availability,"> The change is not a debug printout, it inserts a new line in the SVG file before the <\text> tag. This avoids the syntax error the user sees when inserting a very long text. Thanks for the explanation! Could you add this as a comment just before the change, and also link it to the github issue that triggered it for reference?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14590#issuecomment-1929969035:123,error,error,123,https://root.cern,https://github.com/root-project/root/pull/14590#issuecomment-1929969035,1,['error'],['error']
Availability,"> The change is on the cmake hotspot used by virtually everybody. The risk to make an error here is high due to the complexity of the routine. Taking such risk weeks before the release should be very well weighted with the actual gain. It seems to me that the gain is not big enough to justify taking this direction for the release branch. @vgvassilev ; As long as @etejedor agrees, for me it's fine reverting a couple of commits and go back to 4ce57e, even if empty directories are installed. ; But I don't think this can stay as it is forever. As I partially pointed out in the description, there are two main cons:; - 80 pcms out of 90 are installed twice;; - install(DIRECTORY ...) has the default behavior of copying empty skeletons of all the subdirectories found in the directory; it was only by chance that we found it with the introduction of multiple Python versions, but this doesn't mean that we're not going to be stuck in the same situation once again in the future.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4763#issuecomment-574172758:86,error,error,86,https://root.cern,https://github.com/root-project/root/pull/4763#issuecomment-574172758,1,['error'],['error']
Availability,"> The change looks good to me, if the CI failures are understood/unrelated. Just for clarification, is there a way to test this specifically? Or it is easily visible but we don't have a Python 3.8 runner in the CI?. Hi, @hahnjo was able to reproduce this on python3.8. It should be more visible if we had a python3.8 runner, but this does not error out on newer python versions. The stack trace points to TCling not handling `void init_tuple_string_unsigned_long_(tuple<string,unsigned long>*& self, const unsigned long& _1 = 0, const string& _0 = string{}` which is an incorrectly constructed aggregate initialization constructor. I would prefer if this could be tested before merging if @hahnjo can apply this commit on his platform and confirm that `roottest-python-basic-datatype` and `roottest-python-cpp-cpp11` start to pass",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16548#issuecomment-2381246738:41,failure,failures,41,https://root.cern,https://github.com/root-project/root/pull/16548#issuecomment-2381246738,2,"['error', 'failure']","['error', 'failures']"
Availability,> The crash depends on the input file. I landed with one file and here is the log file which came from running valgrind. . Does the crash with valgrind have the same symptoms as the original problem (i.e. seg fault in `TStreamerInfoActions::VectorLooper::ReadCollectionBool`)?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12370#issuecomment-1466612723:209,fault,fault,209,https://root.cern,https://github.com/root-project/root/issues/12370#issuecomment-1466612723,1,['fault'],['fault']
Availability,"> The error is ""real"":; > ; > ```; > Warning in <THnSparse::CreateHnAny>: Unknown Type of Histogram; > Error in <HandleInterpreterException>: Trying to dereference null pointer or trying to call routine taking non-null arguments.; > const int dim ( s->GetNdimensions() );; > ^; > ```; > ; > Could you have a look at `root -l -b test/stressHistogram.cxx`, please? That seems to fail after your change. It seems that THnSparse is not defined for Long64_t, only for Long_t. I'll create the L64_t version of it",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8546#issuecomment-875602523:6,error,error,6,https://root.cern,https://github.com/root-project/root/pull/8546#issuecomment-875602523,2,"['Error', 'error']","['Error', 'error']"
Availability,"> The error is concerning because it is in a test directly involving address calculation. The changes seems all very reasonable so it might actually be pre-existing (but have an 'arbitrary undefined' behavior). I'll take a look. OK, thanks @pcanal !",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8013#issuecomment-828544291:6,error,error,6,https://root.cern,https://github.com/root-project/root/pull/8013#issuecomment-828544291,1,['error'],['error']
Availability,> The error is induced by these changes. I am not sure why yet. I believe my last commit might fix it,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8144#issuecomment-841640389:6,error,error,6,https://root.cern,https://github.com/root-project/root/pull/8144#issuecomment-841640389,1,['error'],['error']
Availability,"> The error messages in `treetreeplayertestUnit2` are expected, but should be checked. I actually tried to whitelist this one, but CMake makes no difference between an unset variable and a set, but empty string. Now, it should do the right thing, and ROOT_ADD_GTEST has one argument less.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5591#issuecomment-642579925:6,error,error,6,https://root.cern,https://github.com/root-project/root/pull/5591#issuecomment-642579925,1,['error'],['error']
Availability,"> The errors seen in the CI such as; > ; > ```; > Error in <TFile::TFile>: file /Users/sftnight/build/jenkins/workspace/root-pullrequests-build/build/roottest/python/distrdf/dask/distrdf_check_friend_trees_alignment_dask_file_1.root/distrdf_check_friend_trees_alignment_dask_tree_1.root does not exist; > ```; > ; > Show that something is wrong with the file names. Notice the double file name above. Probably in the creation of the spec passed to the task-local RDF something is wrong. Hmm that is very strange. I grepped for `distrdf_check_friend_trees_alignment_dask_tree`. It is present only in `python/distrdf/dask/check_friend_trees_alignment.py`. I see that there the chain is created like:; ```py; def create_chain():. main = ROOT.TChain(); for i in range(3):; main.Add(f""{FILENAMES[i]}?#{TREENAMES[i]}""). friend = ROOT.TChain(); for i in range(3, 6):; friend.Add(f""{FILENAMES[i]}?#{TREENAMES[i]}""). main.AddFriend(friend, ""friend""). # import pdb; pdb.set_trace() --> a breakpoint I added. return main; ```; Then calling `df = Dask.RDataFrame(chain, daskclient=connection, npartitions=nparts)`. 1. Is it intentional not to use a spec instead?; 2. From the breakpoint I printed the contents of file and tree names and they looked all file:; ```py; (Pdb) p FILENAMES; ['distrdf_check_friend_trees_alignment_dask_file_1.root', 'distrdf_check_friend_trees_alignment_dask_file_2.root', 'distrdf_check_friend_trees_alignment_dask_file_3.root', 'distrdf_check_friend_trees_alignment_dask_file_4.root', 'distrdf_check_friend_trees_alignment_dask_file_5.root', 'distrdf_check_friend_trees_alignment_dask_file_6.root']; (Pdb) p TREENAMES; ['distrdf_check_friend_trees_alignment_dask_tree_1.root', 'distrdf_check_friend_trees_alignment_dask_tree_2.root', 'distrdf_check_friend_trees_alignment_dask_tree_3.root', 'distrdf_check_friend_trees_alignment_dask_tree_4.root', 'distrdf_check_friend_trees_alignment_dask_tree_5.root', 'distrdf_check_friend_trees_alignment_dask_tree_6.root']; ```; 3. Locally this",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11526#issuecomment-1340908063:6,error,errors,6,https://root.cern,https://github.com/root-project/root/pull/11526#issuecomment-1340908063,3,"['Error', 'error']","['Error', 'errors']"
Availability,"> The failing test seems to trigger some llvm bug:; > ; > ```; > valgrind --suppressions=/build/vvassilev/root-release-master/etc/valgrind-root.supp root.exe -e ""#define ClingWorkAroundPrintfIssues"" -e ""#define ClingWorkAroundLackOfModule"" -e ""#define ClingWorkAroundProxyConfusion"" -e ""#define ClingWorkAroundMissingDynamicScope"" -e ""#define ClingWorkAroundMultipleInclude"" -e ""#define ClingWorkAroundAutoParseUsingNamespace"" -e ""#define ClingWorkAroundExtraParensWithImplicitAuto"" -e ""#define ClingWorkAroundNoPrivateClassIO"" -e ""#define ClingWorkAroundBrokenUnnamedReturn"" -e ""#define ClingWorkAroundUnnamedDetection2"" -e ""#define ClingWorkAroundUnnamedInclude"" -e ""#define ClingWorkAroundJITfullSymbolResolution"" -e ""#define ClingWorkAroundNoDotNamespace"" -e ""#define ClingWorkAroundNoDotInclude"" -e ""#define ClingWorkAroundTClassUpdateDouble32"" -e ""#define ClingWorkAroundUnloadingVTABLES"" -q -l -b assertSparseSelection.C; > ==22765== Memcheck, a memory error detector; > ==22765== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.; > ==22765== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info; > ==22765== Command: root.exe -e #define\ ClingWorkAroundPrintfIssues -e #define\ ClingWorkAroundLackOfModule -e #define\ ClingWorkAroundProxyConfusion -e #define\ ClingWorkAroundMissingDynamicScope -e #define\ ClingWorkAroundMultipleInclude -e #define\ ClingWorkAroundAutoParseUsingNamespace -e #define\ ClingWorkAroundExtraParensWithImplicitAuto -e #define\ ClingWorkAroundNoPrivateClassIO -e #define\ ClingWorkAroundBrokenUnnamedReturn -e #define\ ClingWorkAroundUnnamedDetection2 -e #define\ ClingWorkAroundUnnamedInclude -e #define\ ClingWorkAroundJITfullSymbolResolution -e #define\ ClingWorkAroundNoDotNamespace -e #define\ ClingWorkAroundNoDotInclude -e #define\ ClingWorkAroundTClassUpdateDouble32 -e #define\ ClingWorkAroundUnloadingVTABLES -q -l -b assertSparseSelection.C; > ==22765== ; > ; > Processing assertSparseSelection.C...; > ==22765== Conditional ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11252#issuecomment-1250619567:960,error,error,960,https://root.cern,https://github.com/root-project/root/pull/11252#issuecomment-1250619567,1,['error'],['error']
Availability,> The fails begins with errors about glew. What are these errors?. Does [this PR](https://github.com/root-project/root/pull/12714) help?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12648#issuecomment-1522116368:24,error,errors,24,https://root.cern,https://github.com/root-project/root/issues/12648#issuecomment-1522116368,2,['error'],['errors']
Availability,"> The failure in `roottest_root_meta_runMemberComments` is expected and just a reference file update.; > ; > The failure in `issue-6840.roottest_root_meta_tclass_issue_6840_emulatePairsTest` is unexpected .. humm actually it is likely a consequence of changing to `%p` in the printf ... to be confirmed. Thanks for the review @pcanal , I'll check and fix them",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7778#issuecomment-813900817:6,failure,failure,6,https://root.cern,https://github.com/root-project/root/pull/7778#issuecomment-813900817,2,['failure'],['failure']
Availability,> The failure is [execCheckClusterRange](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/195807/testReport/projectroot.roottest.root.tree/fastcloning/roottest_root_tree_fastcloning_execCheckClusterRange/) is surprising. Shall we do a binary diff to investigate?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14747#issuecomment-1949904856:6,failure,failure,6,https://root.cern,https://github.com/root-project/root/pull/14747#issuecomment-1949904856,1,['failure'],['failure']
Availability,"> The failure seems unrelated, @sudo-panda can you mark this PR as ready to review?. Can you remove the '[WIP]' tag? And also include changes in the release notes?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11096#issuecomment-1436222846:6,failure,failure,6,https://root.cern,https://github.com/root-project/root/pull/11096#issuecomment-1436222846,1,['failure'],['failure']
Availability,"> The failure to unload broken declarations (@jalopezg-git FYI), does that still happen after this PR, or is this addressed by the PR? I'm not sure I understand how much of the PR description describes _this_ PR vs what's left to be done?. I don't know how this PR relates to the unloading issues in cling. What I saw in the past is that `DeclUnloader` is buggy; specifically, it always removes declarations from the AST when that's not always appropriate. One case in which this fails is for members of a templated class (which clang initially marks as ""pending instantiation"").; If those are instantiated implicitly as part of a transaction that fails, DeclUnloader removes the member declaration. This prevents the decl from being re-emitted when needed. Instead, it should be left in the previous state and marked as ""pending instantiation"" again.; I have some code that should fix this (which coincides with most if not all the reported unloading issues). I will clean it and open a PR as soon as I finish the current on-going RNTuple work. :slightly_smiling_face:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12449#issuecomment-1467860880:6,failure,failure,6,https://root.cern,https://github.com/root-project/root/pull/12449#issuecomment-1467860880,1,['failure'],['failure']
Availability,"> The file has arrived on lcgpackages, with the following name and unchanged hash:; > ; > ```; > $ sha256sum xrootd-5.4.3.tar.gz; > 56a29c88232f2f384e151b148fcaaa8d8db5c5fdc4615193978c8f4f3a99663c xrootd-5.4.3.tar.gz; > ```. Thanks for the update @Axel-Naumann &mdash; missed this while traveling so just seeing it now. @bellenot Are the test failures expected? Or is this something to be concerned about.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10725#issuecomment-1154669571:343,failure,failures,343,https://root.cern,https://github.com/root-project/root/pull/10725#issuecomment-1154669571,1,['failure'],['failures']
Availability,"> The header file `RLazyDSImpl.hxx` seems to use `TSeq`, removing the include doesn't seem to be an option. Duplicating the type / the code of `TSeq` certainly isn't a viable option either :-). Yeah, maybe it's not the right direction to fix the issue. BTW I found another case to trigger the similar error which may be worth looking into:; ```; ❯ cat Demo.C; void Demo() { ; std::vector<double*> vec; ; }; ```; ```; ❯ root.exe -l -b -q Demo.C. Processing Demo.C...; In module 'std' imported from input_line_1:1:; /usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_vector.h:1844:2: error: 'std::vector<double *, std::allocator<double *> >::_M_data_ptr' from module 'std.vector' is not present in definition of 'std::vector<double *, std::allocator<double *> >' provided earlier; _M_data_ptr(_Up* __ptr) const _GLIBCXX_NOEXCEPT; ^; /usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_vector.h:389:11: note: definition has no member '_M_data_ptr'; class vector : protected _Vector_base<_Tp, _Alloc>; ^; /usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_vector.h:1815:7: error: 'std::vector<double *, std::allocator<double *> >::_M_move_assign' from module 'std.vector' is not present in definition of 'std::vector<double *, std::allocator<double *> >' provided earlier; _M_move_assign(vector&& __x, true_type) noexcept; ^; /usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_vector.h:389:11: note: definition has no member '_M_move_assign'; class vector : protected _Vector_base<_Tp, _Alloc>; ^; /usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_vector.h:1804:7: error: 'std::vector<double *, std::allocator<double *> >::_M_erase' from module 'std.vector' is not present in definition of 'std::vector<double *, std::allocator<double *> >' provided earlier; _M_erase(iterator __position);; ^; /usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_vector.h:3",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10910#issuecomment-1268082516:301,error,error,301,https://root.cern,https://github.com/root-project/root/pull/10910#issuecomment-1268082516,2,['error'],['error']
Availability,"> The intent is the opposite. The RDirectory's internal representation and what it returns is a kind of shared_ptr. The user register the same name twice then if they hold a 'reference' to it, they keep and if they don't it is deleted. I do appreciate that as written it works and prevents a leak. New and delete have also worked for 20 years of root, and when written correctly do prevent leaks and get the job done, so there's no crisis of course. This offers a little more protection in some usages, but maybe new things to understand in others. I think stack-based lifetime management is simple, intuitive, encourages top-down code design and configuration, and avoids side effects. The smart pointer is interesting. It wasn't obvious to me that create would behave like shared_ptr::reset(), in the sense of allowing copies to persist (rather than redirecting some pointers they contain to the the new thing). . I kind of see a way now that it's possible to get the scalability (produce variable N plots at a time) without editing the PR routine. From my caller I'd need to call the subroutine, then do an RDirectory::Find() to get a shared pointer which will preserve the created thing, then call the routine again to get a new one. And if I still want to keep the first one for the interactive prompt, I have to make it global again with a new RDirectory::Add() of the contained thing, with a new name. So that cat can be skinned, but it's a bit comical compared to just passing the pointer, and certainly less obvious.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7305#issuecomment-795003958:626,down,down,626,https://root.cern,https://github.com/root-project/root/pull/7305#issuecomment-795003958,2,['down'],['down']
Availability,"> The last three commits are for Cling's CUDA support. It still doesn't fully work on my machine, but the errors are the same as `master` with LLVM 9 (complains about not finding symbols from `libcudart.so` even though that has been loaded; could be related to the CUDA version?) _without_ assertions that I see tripping on `master`. Do we know which setup used to work for these tests? Maybe I'll have to install older versions of CUDA... That sounds pretty good! I remember @SimeonEhrig mentioning some issues when loading the cuda library. . PS: if the cuda test state is the same as it is in the master maybe we can go off hunting the root test failures and eventually come back to cuda after?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1093338608:106,error,errors,106,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1093338608,2,"['error', 'failure']","['errors', 'failures']"
Availability,"> The linux version looks good. The MacOS and Windows (@bellenot might be able to help with that version) needs to be updated too. In particular in this PR `MemInfo_t::fMemAvailalble` is not initialized (as a random value) on those 2 platforms. @pcanal I think `MemInfo_t::fMemAvailalble` should be initialized in `TSystem.cxx`, since it is declared in `TSystem.h`. ~~My question is: Is it needed at all on Windows? We don't calculate the memory status the same in `TWinNTSystem`~~; I'll provide the code for `TWinNTSystem.cxx`. BTW, what is the difference between `fMemFree` and `fMemAvailable` ? On Windows we already set `fMemFree` equals to the amount of physical memory currently available...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7208#issuecomment-779321051:685,avail,available,685,https://root.cern,https://github.com/root-project/root/pull/7208#issuecomment-779321051,1,['avail'],['available']
Availability,"> The number of fixed-sized elements is returned by GetLen(). You meant GetLenStatic. GetLen is the 'effective' number of element and is including the leaf count information, it gives information about the entry last read (via GetEntry). So. ```; TLeaf *l = GetALeaf();; if (l->GetLeafCount() != nullptr) {; // this is a variable-sized array; } else if (l->GetLenStatic() > 1) {; // this is a fixed-sized array; } else {; // l->GetLen() == 1 and this is a single element; }; ```. > It's possible to have more than one leaf per branch. Very rare, however (I believe one has to do this fairly explicitly in the internals of ROOT?). It is not that rare. Any code not supporting must be instrumented to explicitly print a error and/or warning message when the case is encountered.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1532#issuecomment-359015662:718,error,error,718,https://root.cern,https://github.com/root-project/root/pull/1532#issuecomment-359015662,1,['error'],['error']
Availability,"> The point is, I don't think this logic is needed at all. ~RooAbsArg takes care of properly breaking all the client-server links, both uplinks and downlinks, for every object. I couldn't find a logical case where a crash would occur if the safeDeleteList logic were to be removed.; > ; > All RooFit tests pass after this patch. No problem for my heavy workspace manipulation worflows either. By now, I think that the breaking of the links came after this destructor magic. You might be right that this is not needed, any more. I suggest to put it in master and see if the address sanitizer build blows up.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9685#issuecomment-1021007687:148,down,downlinks,148,https://root.cern,https://github.com/root-project/root/pull/9685#issuecomment-1021007687,1,['down'],['downlinks']
Availability,"> The second one claims ""SillyStruct"" class does not have a fUniqueID. What should be the correct way to compile and create SillyStruct in order to make it generate fUniqueID automatically?. The error is spurrious. Indeed the code pattern is unusual and **intentionally** look at (sometime) uninitialized memory). You can ignore this error. > The first one says TTreeReaderFast calls Error (virtual function) in its constructor, which is what TTreeReader exactly did. This is also cumbersome but valid (because we don't overload Error here). You can also replace it with; ```; ::Error(""TTreeReaderFast::TTreeReaderFast"", ""TTree is NULL!"");; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3612#issuecomment-478088339:195,error,error,195,https://root.cern,https://github.com/root-project/root/pull/3612#issuecomment-478088339,5,"['Error', 'error']","['Error', 'error']"
Availability,"> The status bit check test seems a bit flaky as it also failed in the nightlies, albeit with a different problem (segfault, not error message). @amadio humm ... Odd ... I can't find any recent nightly showing the problem. Can you point me in the right direction? Also odd, *this* failure is a segfault and not an error message (aka I am confused by your message ;) ).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/959#issuecomment-327879837:129,error,error,129,https://root.cern,https://github.com/root-project/root/pull/959#issuecomment-327879837,3,"['error', 'failure']","['error', 'failure']"
Availability,"> The test failure on mac13 is not due to the changes of this PR. So some old svg tests (o) are failing because of a changed fill attribute:; - Original: fill=""#917f6e""; - Modified: fill=""#6f2da8"". The json tests (j) are failing because of differences in fOper. Do we need new reference files ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16348#issuecomment-2326408720:11,failure,failure,11,https://root.cern,https://github.com/root-project/root/pull/16348#issuecomment-2326408720,1,['failure'],['failure']
Availability,"> The tests that are added in this PR work with Cl, but there are still failures because of this:; > ; > * [Regression in support of functions with unknown definition vgvassilev/clad#890](https://github.com/vgvassilev/clad/issues/890); > ; > ; > It seems the numeric-diff fallback mode doesn't get that much test coverage in Clad, because many of the issues I opened there are related to it. Is it still supported? Should I try to absolutely avoid num diff fallback in the models?. This should work but we *should* avoid num diff fallback because it is slow and can introduce numerical instabilities.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15491#issuecomment-2107653275:72,failure,failures,72,https://root.cern,https://github.com/root-project/root/pull/15491#issuecomment-2107653275,1,['failure'],['failures']
Availability,"> The travis-ci/pr result (clang-tidy) seems relevant (point to potential pre-existing problem). @Axel-Naumann @pcanal . 80-90% of messages from clang-tidy are false positives or not very important (like unused variables). And in case of `travis-ci/pr` it only reports about lines which are changed in PRs. Therefore it useless now. Probably, one should enable only really important errors from clang-tidy (like memory leak or wrong delete operator), but make them more prominent in PRs - send message in the thread like Jenkins does.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7508#issuecomment-800009586:383,error,errors,383,https://root.cern,https://github.com/root-project/root/pull/7508#issuecomment-800009586,1,['error'],['errors']
Availability,"> The windows failure seems unrelated to the changes.; Yes Axel also mentioned is this PR, that is unrelated: https://github.com/root-project/root/pull/6707#issuecomment-773865371",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7190#issuecomment-781171688:14,failure,failure,14,https://root.cern,https://github.com/root-project/root/pull/7190#issuecomment-781171688,1,['failure'],['failure']
Availability,"> There are still some remaining problems with the transaction rollback, however template instantiation from cppyy now behaves the same as calling `TInterpreter::Declare` in this respect. This is likely related to the issues described by @jalopezg-git in [#12449 (comment)](https://github.com/root-project/root/pull/12449#issuecomment-1467860880) and can be fixed in a future PR. FYI, https://github.com/root-project/root/pull/13565 should fix the issues with unloading that I mentioned before in this PR! I still need to look at two test failures, but it's mostly there :slightly_smiling_face:!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12449#issuecomment-1700934823:63,rollback,rollback,63,https://root.cern,https://github.com/root-project/root/pull/12449#issuecomment-1700934823,2,"['failure', 'rollback']","['failures', 'rollback']"
Availability,> There are still test errors and clang-format errors to handle. All errors are not related to PR.; clang-errors I will check,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14908#issuecomment-1988607058:23,error,errors,23,https://root.cern,https://github.com/root-project/root/pull/14908#issuecomment-1988607058,4,['error'],['errors']
Availability,"> There is actually at least 2 branches with 'problems'. This command:; > ; > ```; > root.exe ~/Downloads/ship.conical.Pythia8-TGeant4_rec.root -b -l -q -e 'cbmsim->GetBranch(""FitTracks"")->GetIconName()' -e 'cbmsim->GetBranch(""Digi_UpstreamTaggerHits"")->GetIconName()'```; > ; > reproduces the problems.; > ```. I can confirm that this reproduces the error more succinctly. I will have a look at how those two branches are written. Is there any documentation on split/unsplit TClonesArrays?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12537#issuecomment-1482476807:96,Down,Downloads,96,https://root.cern,https://github.com/root-project/root/issues/12537#issuecomment-1482476807,2,"['Down', 'error']","['Downloads', 'error']"
Availability,"> There is no ""undefined"" value for an integer variable. The test failures are because with these changes we are printing errors that were not printed before. Ah ok",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8425#issuecomment-861746872:66,failure,failures,66,https://root.cern,https://github.com/root-project/root/pull/8425#issuecomment-861746872,2,"['error', 'failure']","['errors', 'failures']"
Availability,"> There is only one thing I couldn't figure out -- how to link against libpng ... so I just added -lpng into cmake file for graf3d/gl/. Please help me figure out how to do this correctly. Not so simple. Sometime ROOT uses system-wide `libpng`, sometime - builtin version included in `ASImage`.; And they can conflict with each other. Major problem - builtin with ASImage is not available from outside. You have to ensure that your code not linked with `ASImage`. And provide in your CMakeLists.txt file construct like; ```; find_Package(PNG); # handle include directories; ```; Because you may need to use custom include directories. See [here](https://github.com/root-project/root/blob/master/cmake/modules/SearchInstalledSoftware.cmake#L403-L410)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15812#issuecomment-2172410620:378,avail,available,378,https://root.cern,https://github.com/root-project/root/pull/15812#issuecomment-2172410620,2,['avail'],['available']
Availability,> There is still failures. Maybe rebasing to current master helps with those.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15232#issuecomment-2126859047:17,failure,failures,17,https://root.cern,https://github.com/root-project/root/pull/15232#issuecomment-2126859047,1,['failure'],['failures']
Availability,"> These dataframes are constructed from a `RRootDS` with `fileGlob = ""TRootTDS_input_*.root""` - _why_ do `RCsvDS_test_headers.cs` (note the missing `v`!), `specTestDescribe3.root` and `testDescribeDataset3.root` show up to the party?! Is this maybe causing the spurious dataframe test failures on Windows? @bellenot @eguiraud @pcanal. The fix is coming (thread safe `TWinNTSystem::OpenDirectory` and `TWinNTSystem::GetDirEntry`)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13460#issuecomment-1681738398:285,failure,failures,285,https://root.cern,https://github.com/root-project/root/pull/13460#issuecomment-1681738398,1,['failure'],['failures']
Availability,"> These failures are unrelated. Yes, I saw them yesterday. Merging this into `master` then. :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8555#issuecomment-877053142:8,failure,failures,8,https://root.cern,https://github.com/root-project/root/pull/8555#issuecomment-877053142,1,['failure'],['failures']
Availability,"> This PR still causes macOS 14 ARM test failures. I have [reverted](https://github.com/root-project/root/commit/ab6cdd5ddaf2294f55793d409508ec93dfcffc25) the commit that caused this; please feel free to come up with a ""good compromise""!. It should be fixed now. I was only missing the increased tolerance in the check of the overflow bin, which was not done in the loop where I have already increased the tolerance already",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14107#issuecomment-1825822442:41,failure,failures,41,https://root.cern,https://github.com/root-project/root/pull/14107#issuecomment-1825822442,3,"['failure', 'toler']","['failures', 'tolerance']"
Availability,"> This also broke the default build on Debian 10 (our only 32-bit platform), which only has Python 3.7.3. Damn, alright will update there too. But it's unfortunate this is untested in the PR CI :/ (When I merged there had been 3 rounds of CI without failures related to Python)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14340#issuecomment-1903447451:250,failure,failures,250,https://root.cern,https://github.com/root-project/root/pull/14340#issuecomment-1903447451,1,['failure'],['failures']
Availability,"> This error is currently causing some developments for the LHCb experiment to be on stand-by. I don't know what to suggest here, honestly. We cannot remove the interpreter's `using namespace std` - the only thing we *could* possibly do is to replace it with a generous set of `using std::foo`s. Even then, any might be part of that set. How attached are you to that function name? (Think of `ns::string` or `ns::cout` - most people would probably argue that these are ""dangerous"" names.) Changing it to anything else would work around the issue and allow some of LHCb's developments to progress.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8370#issuecomment-858397381:7,error,error,7,https://root.cern,https://github.com/root-project/root/issues/8370#issuecomment-858397381,1,['error'],['error']
Availability,"> This is (of course) the intent. Reading/writing to a variable across thread where there is no synchronization going on is C++ undefined behavior. A program with undefined behavior cannot be reasoned about as the compiler/CPU are not required to behave in a manner you expect. > Nonetheless, can you try the following patch to see if it helps:. Given the failure is 1 in 10^4-10^6 range, we have no good way to reproduce and therefore a patch to test isn't really likely to be conclusive.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15090#issuecomment-2027521011:356,failure,failure,356,https://root.cern,https://github.com/root-project/root/issues/15090#issuecomment-2027521011,1,['failure'],['failure']
Availability,"> This is an idiom widely used in C. I suspect that will have quite a big impact to people's dictionaries and in particular when they request dictionaries of idiomatic C codes... Ha, it's actually the other way around and it fails with LLVM 16 because that one makes a bigger effort to ""see through"" `typedef`s and finally finds `PDG_t`. The reason we don't notice so far is that non-existing `enums` referenced in `LinkDef.h` files don't trigger any error / warning - just try `#pragma link C++ enum DOES_NOT_EXIST;`. @pcanal do you want an issue for that?. tldr: this change actually *fixes* `PDG_t` to be included. Alternatively, we can also just remove it entirely as it's never been found so far...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13238#issuecomment-1634204436:451,error,error,451,https://root.cern,https://github.com/root-project/root/pull/13238#issuecomment-1634204436,1,['error'],['error']
Availability,"> This is something we can handle by batching submissions. If small ring sizes have a serious impact on performance then we might want to issue an error message, telling users to adjust their rlimit (and how) for much improved I/O performance.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6162#issuecomment-673314896:147,error,error,147,https://root.cern,https://github.com/root-project/root/pull/6162#issuecomment-673314896,1,['error'],['error']
Availability,"> This is the intended behavior for this macro, i.e. it cannot work as intended if the VecGeom converter cannot be instantiated. However, I can make it issue a warning instead, and do raytracing using the unconverted shape. Are you trying to test the failure mode or should we just not run the test if the build does not support it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12315#issuecomment-1431712470:251,failure,failure,251,https://root.cern,https://github.com/root-project/root/pull/12315#issuecomment-1431712470,1,['failure'],['failure']
Availability,"> This looks quite good already, but consider removing the helper class.; > ; > ```c++; > if (templateParameter); > ```; > ; > won't have any runtime overhead with any decent compiler, and both `dynamic_cast` and `static_cast` are syntactically correct code paths, so no `if constexpr` required. > This looks quite good already, but consider removing the helper class.; > ; > ```c++; > if (templateParameter); > ```; > ; > won't have any runtime overhead with any decent compiler, and both `dynamic_cast` and `static_cast` are syntactically correct code paths, so no `if constexpr` required. Thanks for the comments! Before I address the other comments: just one answer to this comment. No, it seems that `dynamic_cast<T*>` is not syntactically correct if T is not polymorphic, e.g. it has not virtual method. You can for example see that this code doesn't compile:. ```C++; struct A {; void foo() {}; };. struct B : public A {; void bar() {}; };. int main() {. A* ptr = new B;; dynamic_cast<B*>(ptr);; delete ptr;; }; ```; Here is the error:; ```; collection_cast.cc: In function ‘int main()’:; collection_cast.cc:95:5: error: cannot ‘dynamic_cast’ ‘ptr’ (of type ‘struct A*’) to type ‘struct B*’ (source type is not polymorphic); 95 | dynamic_cast<B*>(ptr);; | ; ```. So we have to find a way to make the decision static_cast/dynamic_cast at compile time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8769#issuecomment-890998817:1036,error,error,1036,https://root.cern,https://github.com/root-project/root/pull/8769#issuecomment-890998817,2,['error'],['error']
Availability,"> This reminds me ... what about the case where the column is a collection? (In particular $Alt was implemented to fill-in collection within an entry (missing 'instances' more than missing entries)). Could you provide an example of how this can happen? AFAIU, it is not possible to read an entry from a branch of type say `std::vector<int>` where some entries of the vector are available and some not (how would that even make sense?).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15641#issuecomment-2336453426:378,avail,available,378,https://root.cern,https://github.com/root-project/root/pull/15641#issuecomment-2336453426,1,['avail'],['available']
Availability,"> This should be ""upstreamable""; printing `int i [[deprecated(""reason\n"")]];` seems a valid test case. I doubt there's something I don't know, anyway by applying this patch, tests below in LLVM failed:; ```; Failed Tests (23): ; Clang :: AST/ast-dump-attr.cpp ; Clang :: AST/ast-dump-attr.m ; Clang :: AST/ast-dump-c-attr.c ; Clang :: AST/ast-dump-color.cpp ; Clang :: AST/ast-dump-wasm-attr-export.c ; Clang :: AST/ast-dump-wasm-attr-import.c ; Clang :: AST/ast-print-attr.c; Clang :: AST/attr-swift_attr.m; Clang :: AST/attr-swift_bridge.m; Clang :: AST/category-attribute.m; Clang :: AST/pragma-attribute-cxx-subject-match-rules.cpp; Clang :: AST/pragma-attribute-objc-subject-match-rules.m; Clang :: AST/pragma-multiple-attributes.cpp; Clang :: Misc/pragma-attribute-cxx.cpp; Clang :: Misc/pragma-attribute-objc.m; Clang :: Misc/pragma-attribute-strict-subjects.c; Clang :: OpenMP/assumes_codegen.cpp; Clang :: OpenMP/assumes_print.cpp; Clang :: OpenMP/assumes_template_print.cpp; Clang :: Sema/ast-print.c; Clang :: Sema/attr-availability-swift.c; Clang :: SemaCXX/cxx11-attr-print.cpp; Clang :: SemaTemplate/attributes.cpp; ```. A broken example like:; ```; /home/jun/dev/llvm-project/clang/test/AST/ast-print-attr.c:14:11: error: CHECK: expected string not found in input ; // CHECK: int fun_asm() asm(""test""); ; ^ ; <stdin>:3:46: note: scanning from here ; using C = int ((*))() __attribute__((cdecl)); ; ^ ; <stdin>:4:1: note: possible intended match here ; int fun_asm() asm(R""ATTRDUMP(test)ATTRDUMP""); ; ```. > You can use `R` or `ATTRDUMP`. I just like the freedom we have of using more telling raw string delimiters than `R`. It's also not clear whether such a chance (from `ATTRDUMP` to `R`) is worth the churn. So I guess if `R` is enough for ROOT, maybe we can drop `ATTRDUMP`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10830#issuecomment-1168753106:1031,avail,availability-swift,1031,https://root.cern,https://github.com/root-project/root/pull/10830#issuecomment-1168753106,4,"['avail', 'error']","['availability-swift', 'error']"
Availability,"> This should be tested - I compile llvm13 branch, replace forward declaration in eve7 and add TJSONFile with nlohmann/json in header. It works, but makes lot of warnings. Indeed, placing `#include <nlohmann/json.hpp>` into one of the existing `io/` headers seems to work; but already with `master` / LLVM9. Maybe it's because RIO is ""special"" and loaded during generation of other modules? Anyway, adding the include to `tree/dataframe/inc/ROOT/RDataFrame.hxx` leads to the same errors during generation of `lib/modules.idx` (which btw is not recognized by the build system as an error...)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11130#issuecomment-1217534028:480,error,errors,480,https://root.cern,https://github.com/root-project/root/issues/11130#issuecomment-1217534028,2,['error'],"['error', 'errors']"
Availability,> This unfortunately (sigh) fixes the error in the test. This indicates a bug in the code (that is supposed to make support for unique_ptr 'transparent').,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13134#issuecomment-1640536926:38,error,error,38,https://root.cern,https://github.com/root-project/root/pull/13134#issuecomment-1640536926,1,['error'],['error']
Availability,> This unfortunately (sigh) fixes the error in the test. This is expected. I using such design pattern often. Seems to be problem is when creating `TClass` instance. ; There is difference in handling for `T *` and `unique_ptr<T>` transient members.; I can imagine that `TClass` tries to get full dictionary for the class when seeing member `unique_ptr<T>`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13134#issuecomment-1639855962:38,error,error,38,https://root.cern,https://github.com/root-project/root/pull/13134#issuecomment-1639855962,1,['error'],['error']
Availability,> Those logs/failures are ancient. The bot is currently not triggering new runs of jenkins (and/or not showing it in the PRs). Just changed a bit the tolerance. The associated roottest PR jenkins now succeeds,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15021#issuecomment-2041158064:13,failure,failures,13,https://root.cern,https://github.com/root-project/root/pull/15021#issuecomment-2041158064,2,"['failure', 'toler']","['failures', 'tolerance']"
Availability,"> To be reconsidered if this problem would also get reported by users, or it becomes a bigger nuisance for us developers than it is now. The difference between my original snippet and yours is the function signature, specifically the fact that your function expects an r-value reference while mine expects the argument to be passed by-value. The following is valid C++ code; ```cpp; #include <iostream>; #include <memory>. struct C {; int m_i{42};; C() = default;; C(const C &) = delete;; C &operator=(const C &) = delete;; C(C &&) = default;; C &operator=(C &&) = default;; };. void foo(C c) { std::cout << ""C: "" << c.m_i << ""\n""; }. int main() { foo(C()); }; ```. And the following is an equivalent PyROOT example; ```python; import ROOT. ROOT.gInterpreter.Declare(r"""""". #include <iostream>; #include <memory>. struct C {; int m_i{42};; C() = default;; C(const C &) = delete;; C &operator=(const C &) = delete;; C(C &&) = default;; C &operator=(C &&) = default;; };. void foo(C c) { std::cout << ""C: "" << c.m_i << ""\n""; }. """"""). ROOT.foo(ROOT.C()). # Or the slightly more verbose version; c = ROOT.C(); ROOT.foo(ROOT.std.move(c)); ```. Which fails (in both function call cases) with:; ```; $: python t.py 1 ↵; input_line_38:6:23: error: call to deleted constructor of 'C'; ((void (&)(C))foo)(*(C*)args[0]);; ^~~~~~~~~~~~; input_line_35:9:5: note: 'C' has been explicitly marked deleted here; C(const C &) = delete;; ^; ```. Bottom line, the problem at its core is that we cannot make use of function signatures where the input parameter type is non-copyable and the parameter is taken by value. Neither in our APIs, neither in downstream user code which might want to write similar function signatures.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14425#issuecomment-2372576345:1232,error,error,1232,https://root.cern,https://github.com/root-project/root/issues/14425#issuecomment-2372576345,2,"['down', 'error']","['downstream', 'error']"
Availability,> Unfortunately that's not the case. Developments in cling are quite coupled to the tests -- for example PR #5884 is blocked due to such failures. My experience is that those stress tests are actually quite useful when making changes to core of ROOT. PS: If they are slow we can think how to make them run faster.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6019#issuecomment-656639961:137,failure,failures,137,https://root.cern,https://github.com/root-project/root/pull/6019#issuecomment-656639961,1,['failure'],['failures']
Availability,"> Upstream is taking a different route in [llvm/llvm-project#107638](https://github.com/llvm/llvm-project/pull/107638) Let's hope soon we can drop this huge and messy workaround we have... That hasn't landed yet and even if it did today, it's still multiple versions of SDK down the road. So why are we seeing problems *now* that nobody else has? And where do we see them at all, because our CI is green?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16494#issuecomment-2367293519:274,down,down,274,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2367293519,1,['down'],['down']
Availability,> Use a unique_ptr which guarantees the reference to stay valid for as long as the referencee is alive. But it changes the cardinality ... where there was a guarantee to have only one there is no one per SectionMemoryManager. ; Is that okay? If it is why wasn't that simpler pattern used (by llvm) in the first place?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7343#issuecomment-789911011:97,alive,alive,97,https://root.cern,https://github.com/root-project/root/pull/7343#issuecomment-789911011,2,['alive'],['alive']
Availability,"> Very likely you still want ClassDefInline(RBrowserDataCleanup, 0) to disable IO. I guess this is what requires the default constructor?. Ah yes, I turned `0` to `1` while testing the other changes. Reverting back to `0` and keeping the rest of the diff as it is, I get again the usual error and no extra errors; ```; 1548: -- BEGIN OUTDIFF OUTPUT --; 1548: --- /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021; 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:29:44 2023; 1548: @@ -14,5 +14,9 @@; 1548: Bit 13 declared in TObject as kInvalidObject; 1548: Bit 14 declared in TStreamerElement as kWholeObject; 1548: Bit 21 declared in TStreamerElement as kWarned; 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >; 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog!; 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >; 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog!; ```. So no actual improvement brought by this change it seems",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13134#issuecomment-1638479994:287,error,error,287,https://root.cern,https://github.com/root-project/root/pull/13134#issuecomment-1638479994,6,"['Error', 'error']","['Error', 'error', 'errors']"
Availability,"> Very unfortunate that CMake doesn't pass the build mode down - I'm really surprised it doesn't and I'd call that a bug. Thanks for fixing this!. Well, it's more complex than that, I'll explain when you're back",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12810#issuecomment-1544005030:58,down,down,58,https://root.cern,https://github.com/root-project/root/pull/12810#issuecomment-1544005030,1,['down'],['down']
Availability,"> We could disable the throw in CompilationException::throwingHandler as we already do for _MSC_VER, not sure what happens in that case... Agreed, we need to return 'error'. This is what was happening before; I'd hope that it's still an option. @hahnjo do you think you can have a look or should I?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10548#issuecomment-1122817537:166,error,error,166,https://root.cern,https://github.com/root-project/root/issues/10548#issuecomment-1122817537,1,['error'],['error']
Availability,> We have root7 enabled on mac1014/cxx17. What make you think we don't?. But how it not recognize such simple error?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4380#issuecomment-530800499:110,error,error,110,https://root.cern,https://github.com/root-project/root/pull/4380#issuecomment-530800499,2,['error'],['error']
Availability,"> We import an empty Python module every time, with a function that only when called would lazily import another Python module that contains the [pyspark, dask] module. But then the imports are already lazy, aren't they (i.e. the changes in this PR should not be necessary)? E.g. the import of pyspark is only triggered when I call [this function](https://github.com/root-project/root/blob/f61d5ef82a8851f488318be8eefe06a7d5311744/bindings/experimental/distrdf/python/DistRDF/Backends/Spark/__init__.py#L13), and that only happens when I am constructing a Spark RDataFrame, not when I'm constructing a Dask RDataFrame. So I still don't see how we get those errors. EDIT: Now I remembered our chat, and we get the errors because pyspark is always injected in sys.modules in SWAN. So then this PR is not necessary?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9972#issuecomment-1055413266:657,error,errors,657,https://root.cern,https://github.com/root-project/root/pull/9972#issuecomment-1055413266,2,['error'],['errors']
Availability,"> We saw builtin-xrootd as an internal library, not exposed to the users, and as ROOT doesn't need the Python bindings we have disabled them. I'd still prefer that if you need something from xrootd that ROOT doesn't use / need that you built xrootd yourself, and make that build available to ROOT. Thanks. XRootD is very easy to build so that's reasonable. Just seemed strange that it couldn't be a CMake flag.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9967#issuecomment-1055515524:279,avail,available,279,https://root.cern,https://github.com/root-project/root/issues/9967#issuecomment-1055515524,1,['avail'],['available']
Availability,"> We should deprecate this feature by issuing a warning if somebody uses it. Just to clarify, do you mean we should issue a warning saying `Declarations without the 'auto' keyword will be deprecated in the future` or something similar?. I can open a new PR for that, I had a quick chat with @dpiparo and maybe we should discuss this more. ping: @hahnjo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14451#issuecomment-1918673555:339,ping,ping,339,https://root.cern,https://github.com/root-project/root/pull/14451#issuecomment-1918673555,1,['ping'],['ping']
Availability,"> We should have a facility which detects when a new file is added and it is not present in the lists. In that case we should error out. I think we discuss this before and it was concluded that if a new file was missing from the list, the failure would be 'obvious' to the author (i.e. no being able to use the new content) and thus it was not necessary to add this complexity and it corollary that the source directory must stay as pristine as it is currently required by the wildcards). I suppose we can re-discuss this further but I think it would have to be a different PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2510#issuecomment-415729801:126,error,error,126,https://root.cern,https://github.com/root-project/root/pull/2510#issuecomment-415729801,2,"['error', 'failure']","['error', 'failure']"
Availability,"> We should probably be extra explicit and provide an empty `__all__` list attribute in our `__init__.py`. This is already done in in the ROOT facade constructor. Indeed, one can move it directly to `__init__.py`, but now that you raised that point: why do you think an explicit `__all__` is better than not having this attribute at all?. > In principle, we could also raise an exception every time a user tries `from ROOT import *`. That would be nice! Do you know how to do this? Google didn't give an easy solution :(. > (beware that we have this in our own test suite, so we _will_ see errors). I don't think we have it, or do we? I only see it in this test suite where it is deactivated for Python 3:; https://github.com/root-project/roottest/blob/master/python/regression/PyROOT_regressiontests.py#L188",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14588#issuecomment-1926944206:590,error,errors,590,https://root.cern,https://github.com/root-project/root/pull/14588#issuecomment-1926944206,1,['error'],['errors']
Availability,"> We should probably verify if deleters are required to be copyable, and why we don't see this on our Macs... Alright, since C++17 (https://cplusplus.github.io/LWG/issue2802 to be more precise), deleters are only required to be moveable. The problem is that libc++ only [implemented this](https://github.com/llvm/llvm-project/commit/6a328c66d35c71d5e92be80659186de567b86e38) in 2021 and the headers in macOS 11 probably don't have that change (judging by the error message in https://github.com/root-project/root/issues/14664#issuecomment-1940795175). I discussed with @jblomer and we lean towards not resolving this issue because the code complies with C++17, just it doesn't work with the old version of the STL. As a workaround, it's possible to disable RNTuple with `cmake -Droot7=OFF`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14662#issuecomment-1943587410:459,error,error,459,https://root.cern,https://github.com/root-project/root/pull/14662#issuecomment-1943587410,1,['error'],['error']
Availability,> We should really have a test for this... I absolutely agree! @scott-snyder how involved is the failing test in the ATLAS framework? If it's not too complicated to boil it down to a simple reproducer it would be really helpful here. Otherwise I can try to sketch one myself and then you can tell us how closely it represents your original case.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14887#issuecomment-1980364814:173,down,down,173,https://root.cern,https://github.com/root-project/root/pull/14887#issuecomment-1980364814,2,['down'],['down']
Availability,"> We're already adding `-fno-semantic-interposition` since commit [e564c8a](https://github.com/root-project/root/commit/e564c8a04feb2b6fa18a2f429d8fb5a103825a34) / PR #8204 which I _think_ should already set the visibility such that LLVM symbols are hidden from other libraries. Did you recently test a `master` build or 6.24/02?. Interesting. From my understanding of g++ document, this flag with accidentally solves the problem if the compiler optimize the code by in-lining it but it is not guarranted. In addition it can create confusing situations where the problem disappears as soon as you try to debug it using the debugged version of the code. That said, we are in a confusing situation, as I'm not able to reproduce the problem as soon as I recompile ROOT. Nevertheless, I recompiled many time ROOT last week, and then the problem was systematic. It could be that it is due to the ROOT code version I used. The problem is there for LCG100 which used ROOT 6.24/00, but not for `/cvmfs/sft.cern.ch/lcg/app/releases/ROOT/6.24.02/x86_64-centos7-gcc48-opt/`. So it would confirm that `-fno-semantic-interposition` has solved the problem if it has happened between the two versions. Nevertheless, as I wrote before, in my understanding, it's accidental and won't be as reliable as the -Bsymbolic option. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8717#issuecomment-885033654:1273,reliab,reliable,1273,https://root.cern,https://github.com/root-project/root/pull/8717#issuecomment-885033654,1,['reliab'],['reliable']
Availability,"> Well, `dataframe_simple` has a problem: `RLoopManager::Run` prints to stderr rather than using Warning/Error, because it does so from a catch clause, and Warning/Error could be made throw exceptions by experiments frameworks, and we don't want to std::terminate.; > ; > It would be enough to add a generic `ROOT_EXPECT_STDERR` to the other macros to make these kind of printouts easily checkable. @hageboeck @vgvassilev @reikdas what do you think?. I am kind of hesitant. `ROOT_EXPECT_ERROR` for example, enforces the error format coming from the error handler. If we want such a facility to capture stderr it should be something like `ROOT_CAPTURE_STDERR_BLOCK` but I guess that goes beyond the intentional scope of the feature. I think @Axel-Naumann would want to have this for broader discussion.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5591#issuecomment-641499308:105,Error,Error,105,https://root.cern,https://github.com/root-project/root/pull/5591#issuecomment-641499308,4,"['Error', 'error']","['Error', 'error']"
Availability,"> Well, no, you can simply unplug (or disable) the internet connection. Not really a good idea. I tried to run cmake for windows, but got some errors here as well, unfortunately stopping my attempts to build ROOT and especially to build the documentation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8742#issuecomment-887610171:143,error,errors,143,https://root.cern,https://github.com/root-project/root/issues/8742#issuecomment-887610171,2,['error'],['errors']
Availability,"> Well, wouldn't that issue a spurrious/wrong warning in the following case (i.e the normal usage):; > ; > ```; > for(Long64_t entry = 0; entry < tree->GetEntriesFast(); ++entry); > {; > tree->GetEntry(entry);; > }; > ```; > ; > [Slightly related question, did you run any of the test after successfully compiling?]. Actually I had some trouble compiling in my usual manor. But when I tried to compile upstream/master it also failed so the failure didn't seem to originate from my chnages. I wasnt sure what to do so I was hoping I could see what phsft-bot has to say before I do anything. This is how I build: (Ubuntu 20.04 LTS). ```; mkdir rootbuild rootinstall ; cd rootbuild; cmake -DCMAKE_INSTALL_PREFIX=../rootinstall/ ../root/; cmake --build . -- -j4; cd bin; source thisroot.sh; root; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8425#issuecomment-861658671:440,failure,failure,440,https://root.cern,https://github.com/root-project/root/pull/8425#issuecomment-861658671,1,['failure'],['failure']
Availability,"> What I can try is to remove; > ; > ```; > #ifdef WIN32; > #include ""Windows4Root.h""; > #endif; > ```; > ; > Maybe this code is redundant?. @Axel-Naumann @osschar ; I tried and actually it used/needed widely over graf3d, so I will leave it like this! Let me know if you have any ideas how to improve it, otherwise I think it is ready to go. Please note this PR resolves as well https://sft.its.cern.ch/jira/browse/ROOT-10302 issue",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4095#issuecomment-595848653:129,redundant,redundant,129,https://root.cern,https://github.com/root-project/root/pull/4095#issuecomment-595848653,1,['redundant'],['redundant']
Availability,"> What I can try is to remove; > ; > ```; > #ifdef WIN32; > #include ""Windows4Root.h""; > #endif; > ```; > ; > Maybe this code is redundant?. I'd have guessed it is needed (as we now know :) ) ... the windows part was maintained by Timur so I don't know what's real issue behind and if there was any change for windows 10. I do know however that there is pretty big difference in WGL and GLX implementation for RGL rendering contexts and render surfaces. Probably something for Cocoa as well, another thing that was done by Timur :(",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4095#issuecomment-596678741:129,redundant,redundant,129,https://root.cern,https://github.com/root-project/root/pull/4095#issuecomment-596678741,1,['redundant'],['redundant']
Availability,"> What about adding a //NOLINT comment to suppress error on T tab[maxFound] ?. While it is not array itself, but its usage. Mostly each of ~100 lines where it used should be provided with such comments - too ugly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7430#issuecomment-800075674:51,error,error,51,https://root.cern,https://github.com/root-project/root/issues/7430#issuecomment-800075674,1,['error'],['error']
Availability,"> What does the build error message say? I can't read it. ```; 12:53:51 MSVCRT.lib(tncleanup.obj) : error LNK2005: ""struct __type_info_node __type_info_root_node"" (?__type_info_root_node@@3U__type_info_node@@A) already defined in libCling.lib(libCling.dll) [C:\build\workspace\root-pullrequests-build\build\core\base\test\CoreBaseTests.vcxproj]; 12:53:51 Creating library C:/build/workspace/root-pullrequests-build/build/core/base/test/Release/CoreBaseTests.lib and object C:/build/workspace/root-pullrequests-build/build/core/base/test/Release/CoreBaseTests.exp; 12:53:51 C:\build\workspace\root-pullrequests-build\build\core\base\test\Release\CoreBaseTests.exe : fatal error LNK1169: one or more multiply defined symbols found [C:\build\workspace\root-pullrequests-build\build\core\base\test\CoreBaseTests.vcxproj]; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7132#issuecomment-779835777:22,error,error,22,https://root.cern,https://github.com/root-project/root/pull/7132#issuecomment-779835777,3,['error'],['error']
Availability,"> What is that `Rint` file, is it related to R (which isn't enabled)?. No, `Rint` is one of ROOT's `core/` libraries. I suppose it stands for ""interactive"" or ""interpreter"". > `module file [...] is out of date and needs to be rebuilt: could not read module signature`. This type of error is usually only seen in incremental builds that were previously aborted or corrupted in one way or another. Is that the case or are you building from a clean directory?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10777#issuecomment-1161407674:282,error,error,282,https://root.cern,https://github.com/root-project/root/issues/10777#issuecomment-1161407674,1,['error'],['error']
Availability,"> What is the current issue?. ```; Generating G__Core.cxx, ../bin/Core.pcm; While building module 'Core':; While building module 'std' imported from input_line_1:1:; In file included from <module-includes>:1:; In file included from C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\algorithm:11:; In file included from C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory:14:9>C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\new(112,55): error GAE4BF799: declaration of 'set_new_handler' has a different language linkage [C:\Users\bellenot\build\x64\cxxmodules\core\G__Core.vcxproj]; _EXPORT_STD extern ""C++"" _CRTIMP2 new_handler __cdecl set_new_handler(_In_opt_ new_handler) noexcept;; ^; C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\new.h:32:42: note: previous declaration is here; _CRTIMP2 new_handler __cdecl set_new_handler(_In_opt_ new_handler _NewHandler) throw();; ^; While building module 'Core':; While building module 'std' imported from input_line_1:1:; In file included from <module-includes>:66:; In file included from C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\random:12:9>C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\__msvc_int128.hpp(115,20): error G4BA35A91: call to '_addcarry_u64' is ambiguous [C:\Users\bellenot\build\x64\cxxmodules\core\G__Core.vcxproj]; return _addcarry_u64(_Carry, _Left, _Right, &_Result);; ^~~~~~~~~~~~~; C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\intrin0.inl.h:285:36: note: candidate function; __MACHINEX64(unsigned char __cdecl _addcarry_u64(unsigned char, unsigned __int64, unsigned __int64, unsigned __int64 *)); ^; C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\intrin0.inl.h:43:32: note: expanded from macro '__MACHINEX64'",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12602#issuecomment-1495712629:565,error,error,565,https://root.cern,https://github.com/root-project/root/pull/12602#issuecomment-1495712629,1,['error'],['error']
Availability,"> What is this error in readTotemNtuple? eyes. It's always been there, the file contains classes that are not known to ROOT and opening it triggers complaints from TClass. The test in roottest always expected them, but during the first execution https://github.com/root-project/roottest/pull/995 . In the sibling PR I am removing the warning from the `.ref` file because since for this PR I use `RIgnoreErrorLevelRAII` there shouldn't be any output to stderr. And in fact on my workstation the test passes correctly, but somehow jenkins doesn't agree with me... Btw, note that this kind of warning is very common, it's enough to have some dataset with classes coming from an external library (e.g. CMSSW) that is not loaded during the execution of the RDF program",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13090#issuecomment-1658748624:15,error,error,15,https://root.cern,https://github.com/root-project/root/pull/13090#issuecomment-1658748624,1,['error'],['error']
Availability,"> What kind of errors do you get?. @etejedor Thank you sir, both errors are resolved, Kindly review the PR if possible.; Regards.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11357#issuecomment-1259358855:15,error,errors,15,https://root.cern,https://github.com/root-project/root/pull/11357#issuecomment-1259358855,2,['error'],['errors']
Availability,"> What should we do for TChains? Override that calculation so that it errors out?. Humm .. i think it somehow get delegated to the underlying TTree. > But it's not super cheap, . it should be a one time (per TTree) cost in the case where the user did not specify the cache size and fAutoFlush is to zero (because after that the CacheSize is set). > add a TTree method that evaluates that thing and call it from TTree::GetCacheAutoSize. I would do that. Thanks",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8714#issuecomment-890428321:70,error,errors,70,https://root.cern,https://github.com/root-project/root/pull/8714#issuecomment-890428321,1,['error'],['errors']
Availability,"> What we (you, the ROOT team, the users) need to discuss is whether we can deprecate TPRegex altogether, given that std::regex is now (since C++17 is required, as a side effect of kicking out old compilers) guaranteed to be available. Or reimplement it using std:: regex.; > ; > Thoughts?. I wouldn't go into this direction yet. We have a couple of problems with `std::regexp`, like these symbol clashes with other Python libraries:; https://github.com/root-project/root/issues/15309. Therefore, provided that it's tested, I'm in favor of merging this PR. I'm adding pcre2 to the CI images, so that we can test it:; https://github.com/root-project/root-ci-images/pull/31",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13771#issuecomment-2121660162:225,avail,available,225,https://root.cern,https://github.com/root-project/root/pull/13771#issuecomment-2121660162,1,['avail'],['available']
Availability,> What's the issue that gets fixed by this commit? Can you add the error messages?. Done,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12912#issuecomment-1568626414:67,error,error,67,https://root.cern,https://github.com/root-project/root/pull/12912#issuecomment-1568626414,1,['error'],['error']
Availability,"> When reading trees/chains, I'm not sure the configuration object will allow anything more than what we can already do with TEntryLists?. But that's the thing, with the configuration object we won't need to construct TEntryLists, at least not at the DistRDF level. This means we won't need localstarts and localends. > IIUC the redundant info is that globalend = globalstart + (localends - localstarts).sum() (i.e. we could avoid passing globalend). You can avoid passing `localstarts` and `localends`, since you can calculate them from `globalstart, globalend, filelist, treesnentries`. The latter is what I expect we would need if we use RDF with a configuration object: globalstart and globalend would be included in the configuration object to represent a range in the dataset, and `filelist` and `treesnentries` would be used to construct the TChain with which we would construct the RDF.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8646#issuecomment-895336570:329,redundant,redundant,329,https://root.cern,https://github.com/root-project/root/pull/8646#issuecomment-895336570,1,['redundant'],['redundant']
Availability,"> Which PyTorch version are you using ? With 1.10 it still works for me, but I think looking at https://github.com/pytorch/pytorch/blob/master/torch/onnx/utils.py the master version has the _model_to_graph interface changed to not pass anymore example_outputs. @sanjibansg , can we remove example_outputs also for older PyTorch versions ?. ![image](https://user-images.githubusercontent.com/84740927/160382712-cbb6265d-682b-4260-b10e-cc5c1b5006d0.png); Hello, My Pytorch version is 1.11 and I think for 1.10 it works fine but for higher versions it gives the above error i will make the changes proposed by @sanjibansg and @lmoneta . Thankyou for reviewing my PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10223#issuecomment-1080499698:565,error,error,565,https://root.cern,https://github.com/root-project/root/pull/10223#issuecomment-1080499698,1,['error'],['error']
Availability,"> Which one exactly? I see from the logs that the interpreted stress test exits with code 1, so there's something going on. The node that has the high number of failures is probably a nullptr deref or similar. Sorry, I meant that I could not find the test definition in the source. Maybe I'm not looking in the right place. Also, the test in question is quoted two times in the log, once successful and one unsuccessful. In any case, I do know something is going on and wanted to have a look, but because of the above, I'm not sure where and how. > Yes, I agree that it's not great to have jenkins behind a CERN login, but I guess this has to be done to secure the instance. The tests should be self-consistent, i.e. bring their own files. Try `ctest -R stressHistFactory -V` to see what's going on locally on your machine (i.e. see invocation and which files are used etc). If the test isn't there, you might have to activate `-Dtesting=ON` or `-Dhistfactory=ON` (which requires `-Dxml=ON`) in cmake. Does the test pass locally?. Alright, I will have a look. > I wanted to have a look at where the crash happens, but all commits are now squashed into one. Do you have a version where the commits are separated as the first time when you put up the PR? (...); > ROOT's clang-format file will therefore introduce a lot of indentation changes, which makes the diffs hard to read. Unfortunately, not. I rebased and force-pushed. But for what it's worth, I think the function in question is rewritten to such an extent that old history before clang-format will not help much. But you can easily use a text editor to switch back to the original indentation. Bear in mind that the original code did not use a consistent indentation - some lines used spaces, others tabs, and the size was different in all places. On top of that, lots of the code was improperly spaced where statements belonging to loops or if's were indented shorter than the scope. In any case, I will try next week to see what's going on ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9271#issuecomment-968158801:161,failure,failures,161,https://root.cern,https://github.com/root-project/root/pull/9271#issuecomment-968158801,1,['failure'],['failures']
Availability,"> Why did the hash of the file in lcgpackage change even-though the xrootd version did not change? (i.e. Didn't we migrate away from downloading from github to avoid exactly this kind of problem?). That's a good question! I asked some people here, we'll see...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11106#issuecomment-1204870781:133,down,downloading,133,https://root.cern,https://github.com/root-project/root/pull/11106#issuecomment-1204870781,1,['down'],['downloading']
Availability,"> Why is the version with the non-pointer not supported as in std::lockguard?. Because ROOT traditionally passes pointers. You are welcome to propose a PR, I think this would be a fine and minimal addition. It might be more useful to make sure that the argument is a pointer to a `TVirtualMutex` even in the non-`_REENTRANT` case, though - for which I'd also welcome a PR!. > Why does one version need "";"" at the end, but not the other one?. Please just provide `;` after `R__LOCKGUARD(mutex)`. Alternatively, please submit a PR that adds `; {}` behind the current ""needs a semicolon"". But as this isn't really a user facing interface I don't think it really matters. > How can I force REENTRANT to be defined when including ROOT classes from external projects via CMake find_package?. You want to pass `-pthread` to compiler and linker - without that, no threading support can exist in your code, and thus locking cannot work. > Why do two Ubuntu computers behave differently, and why did the behaviour change (the error appear) recently only in of both?. That's an excellent question to which I do not have an authoritative answer. My assumption is that `_REENTRANT` was off and thus the conversion from `TMutex&` to `TVirtualMutex*` wasn't needed. Let me know if there is something left for us to do to fix this issue!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9294#issuecomment-971418353:1016,error,error,1016,https://root.cern,https://github.com/root-project/root/issues/9294#issuecomment-971418353,1,['error'],['error']
Availability,"> Why the change in roofitcore and bindings?; > ; > Also go to ""Files changed"" tab and revise the comments on testTMath.cxx, they are marked as resolved by mistake.; > ; > Thanks a lot!. Thank you for commenting. I am not sure what happened, but I think that the changes occured accidentally when merging from updated master branch. Those changes have been removed and I accepted the changes to the to testTMath.cxx. I noticed that there is one suggestion on TMath.h (https://github.com/root-project/root/pull/15100/files#r1563955528) and I am not whether it has been implemented to the code. I am having an issue trying to resolve this suggestion. For some reason it does not disappear from the files changed tab, and after trying to accept suggestion multiple times, it get added to the code multiple times. So I ended up with something like this. ```C++; template <typename T>; T *TMath::Gradient(Long64_t n, T *f, double h); {; if (!f) {; ::Error(""TMath::Gradient"", ""Input parameter f is empty."");; return nullptr;; } else if (n < 2) {; ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);; return nullptr;; }; if (!f) {; ::Error(""TMath::Gradient"", ""Input parameter f is empty."");; return nullptr;; } else if (n < 2) {; ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);; return nullptr;; }; if (!f) {; ::Error(""TMath::Gradient"", ""Input parameter f is empty."");; return nullptr;; } else if (n < 2) {; ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);; return nullptr;; }; if (!f) {; ::Error(""TMath::Gradient"", ""Input parameter f is empty."");; return nullptr;; } else if (n < 2) {; ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);; return nullptr;; }; Long64_t i = 1;; ```. I removed the redundant if statements and the suggestion still shows up in the files changed tab. I am not sure what to do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15100#issuecomment-2104598022:945,Error,Error,945,https://root.cern,https://github.com/root-project/root/pull/15100#issuecomment-2104598022,9,"['Error', 'redundant']","['Error', 'redundant']"
Availability,"> Why these TMVA tutorial failures come only now several weeks after the cppyy upgrade?. This is a problem in itself :(. From my record (it was nice to received failure report by emails, it seems we don't get that from the new CI), that this is the first failure: . https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-handler/30970/console. I.e on the nightly of April 3rd, 2024 (9 days ago). But rather than time it might also be `-DCTEST_TEST_EXCLUDE_NONE=On` that uncovered it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15211#issuecomment-2052189726:26,failure,failures,26,https://root.cern,https://github.com/root-project/root/issues/15211#issuecomment-2052189726,3,['failure'],"['failure', 'failures']"
Availability,"> Why this error doesn't happen in the single-threaded regime?. I could not figure out exactly the chain of events that caused that error, so the most correct answer is ""I don't know"". _But_ the error has to do with loading a new tree, which RDF worker threads do all the time (each thread processes many tasks, each task runs through a batch of events, and when a new task starts it loads the tree it needs) -- in the single-thread version there is no TTree-loading happening other than at the very beginning (when both main tree and friend tree are well-behaved).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9106#issuecomment-944334705:11,error,error,11,https://root.cern,https://github.com/root-project/root/issues/9106#issuecomment-944334705,3,['error'],['error']
Availability,"> Why would you remove that line?; > ; > * This lines hides ROOT's LLVM 5 symbols from other libraries, so this should be fine is certainly what we want.; > * What my patch should do is is kind of the other way around, if there are other libraries exposing LLVM symbols, ROOT should still take its own LLVM 5 symbols. In this way, other libraries do not need to hide their symbols. I’ve missed a bit where your intent is to lift the requirements on other llvm libraries being compiled with hidden visibility. Could you describe your setup in a bit more detail? dlopen-ing libCling is one side of the problem the other is the jit symbol resolution (https://github.com/root-project/root/blob/master/interpreter/cling/lib/Interpreter/IncrementalJIT.cpp#L299) I suspect the latter is the issue. . PS: Can you paste the issue you have and a particular code snippet and error message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4668#issuecomment-561816645:864,error,error,864,https://root.cern,https://github.com/root-project/root/pull/4668#issuecomment-561816645,1,['error'],['error']
Availability,"> With `clang` and `-Dasan=ON` I getting compilation problem when generating G__Core.cxx dictionary.; > ; > ```; > [ 44%] Generating G__Core.cxx, ../lib/Core.pcm; > While building module 'Core':; > While building module 'std' imported from input_line_1:1:; > In file included from <module-includes>:18:; > In file included from /usr/include/c++/13/condition_variable:40:; > /usr/include/c++/13/bits/chrono.h:251:29: error: redefinition of '__is_duration_v<duration<_Rep, _Period>>'; > inline constexpr bool __is_duration_v<duration<_Rep, _Period>> = true;; > ^; > /usr/include/c++/13/chrono:41:10: note: '/usr/include/c++/13/bits/chrono.h' included multiple times, additional include site in header from module 'std.chrono'; > #include <bits/chrono.h>; > ```; > ; > Full error output: [makelog.txt](https://github.com/root-project/root/files/10519180/makelog.txt); > ; > I using clang 15. I guess this is a general issue with Clang + GCC 13 headers (which is not even released yet), not only with `asan`? But anyway, unrelated to this issue",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11629#issuecomment-1406539470:416,error,error,416,https://root.cern,https://github.com/root-project/root/issues/11629#issuecomment-1406539470,2,['error'],['error']
Availability,"> With eclipse, for example, the problem is that you can set up your IDE to ""work"" in the build directory, but then it will only see the headers and not the source files. But you can compile.; > Or you set it up in the source directory. In this case, it sees everything, but you cannot necessarily compile (unless you make the compile command something like `cd ../build_dir; make` or similar.; > Or you set it up with both directories, but now you see every header twice. In VS you can just ""open the folder"" where ROOT is checked out and VS may even be smart enough to configure using CMake. Code navigation and intellisense (code completion and various kinds of assistance) usually work sufficiently. However, in this ""open folder"" mode, VS does not know all the compile options ROOT is configured with. Like compiler flags, preprocessor macros etc. Therefore it cannot run static code analysis from the IDE or while editing. You can only have these features if VS fully knows how the build works. Then you get these red squiggles for possible compile errors (before actually compiling) or the green squiggles for clang-tidy, clang static analyser or the Microsoft code analysis while typing, which is super useful.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6010#issuecomment-656564708:1055,error,errors,1055,https://root.cern,https://github.com/root-project/root/pull/6010#issuecomment-656564708,1,['error'],['errors']
Availability,"> With output variable you mean adding PARENT_SCOPE, or something else? This doesn't seem to require fixes in root test; > ... but; > So I make REFLEX_.. a function and then simply do ` set(gensrcdict ${dictionary}.cxx PARENT_SCOPE)` I get this error:; > ; > ```; > CMake Error at /home/sailer/software/buildroot/RootMacros.cmake:183 (add_custom_command):; > add_custom_command Wrong syntax. A TARGET or OUTPUT must be specified.; > Call Stack (most recent call first):; > /home/sailer/software/roottest/cmake/modules/RoottestMacros.cmake:349 (REFLEX_GENERATE_DICTIONARY); > /home/sailer/software/roottest/root/meta/dictSelection/CMakeLists.txt:1 (ROOTTEST_GENERATE_REFLEX_DICTIONARY); > ```; > ; > If I keep the first `set(gensrcdict...)` and add this ` set(gensrcdict ${dictionary}.cxx PARENT_SCOPE)` after the `add_custom_command` call I at least don't get any obvious cmake errors I can connect with these changes. I imagined that we will have the setting with PARENT_SCOPE and on the roottest side we will have an extra variable which we use onward. > ; > Could you trigger the CI, please? I would like to know if these changes are at least working. Done. > ; > To not have USES, one would check if `${dictionary}` is a target or not (I don't think this was a requirement before?) and then do what was done with the list given to USES before.; > This can potentially affect existing uses of REFLEX_GENERATE_DICTIONARY; > ; > ```cmake; > IF(TARGET ${dictionary}); > LIST(APPEND include_dirs $<TARGET_PROPERTY:${dictionary},INCLUDE_DIRECTORIES>); > LIST(APPEND definitions $<TARGET_PROPERTY:${dictionary},COMPILE_DEFINITIONS>); > ENDIF(); > ```; > ; > ```cmake; > IF(TARGET ${dictionary}); > target_sources(${dictionary} PRIVATE ${gensrcdict}); > ENDIF(); > ```. That seems to be the pattern used for the `ROOT_GENERATE_DICTIONARY` analog [here](https://github.com/root-project/root/blob/master/cmake/modules/RootMacros.cmake#L526). It would be great if we can reuse some code there...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5019#issuecomment-587581863:245,error,error,245,https://root.cern,https://github.com/root-project/root/pull/5019#issuecomment-587581863,5,"['Error', 'error']","['Error', 'error', 'errors']"
Availability,"> With this change, I hope to be able to reproduce the failures of `test_stressroofit_batchmode_cpu` on Windows 10 in the CI, such that I can test possible solutions. BTW, that is most probably happening only on 32 bit architectures. Or increase the `constexpr unsigned int nstats` to a much larger value than 5000",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10754#issuecomment-1155292684:55,failure,failures,55,https://root.cern,https://github.com/root-project/root/pull/10754#issuecomment-1155292684,1,['failure'],['failures']
Availability,"> With this patch (as is), we seem to no longer support an asynchronous merging. I.e. if the user would like to have TBufferMerger::Push (always) return 'immediately' and have the work done in parallel of the pushing thread continuing to work. Yes, now the merging is done by the worker threads/tasks themselves. This is necessary to avoid oversubscription, which happens if we launch the extra thread for merging. Only one worker will be ""blocked"" at a time, unless data production is faster than what the disk can take, in which case blocking the workers is good to keep memory consumption down instead of letting it growing it indefinitely. As is, this actually has improved slightly the performance for the same number of workers. I think that this is the best way to satisfy the requirement by CMS. I will measure performance again in several setups as a follow up to these changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1737#issuecomment-372715116:592,down,down,592,https://root.cern,https://github.com/root-project/root/pull/1737#issuecomment-372715116,1,['down'],['down']
Availability,> Workaround with ROOT::Detail::HasBeenDeleted(obj) was not really working here. Indeed. `HasBeenDeleted` by definition reads 'previously deleted' memory that may have been re-used for another purpose between the deletion and its execution and thus is not reliable at all. (The main use for it is to issue diagnostic that a problem was detected but it can not be rely upon to actually avoid double deletion).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14861#issuecomment-1971588187:256,reliab,reliable,256,https://root.cern,https://github.com/root-project/root/pull/14861#issuecomment-1971588187,1,['reliab'],['reliable']
Availability,"> Would be good to have a marker `-DENABLE_BROKEN_WINDOWS_TESTS=On` (with accompanying `CXXFLAGS+=-DENABLE_BROKEN_WINDOWS_TESTS=1` in GNU-make speak) to tag places we should revisit. Otherwise: LGTM, congrats!. Thanks! Done. But as explained in the last commit, I had to keep some part of the code commented out, to prevent compilation errors",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4805#issuecomment-577092670:336,error,errors,336,https://root.cern,https://github.com/root-project/root/pull/4805#issuecomment-577092670,1,['error'],['errors']
Availability,"> Would it be acceptable to follow this change for v6.30 and up?. From my point of view, that's perfectly fine (and I'm welcoming this change!) — in the long run, that will also get rid of things like:; https://github.com/Homebrew/homebrew-core/blob/45a7698ed083556248e6c813436719f507f80a5e/Formula/r/root.rb#L13; and likely many other such constructions :wink:. . Of course, it will need changes in the downstream tools which already showed up here (and likely more), and ideally, the change would be carried through all places in ROOT (i.e. the banner / logo, the website at https://root.cern/install/all_releases/ etc.), but that will probably take some iterations to catch everyting. . To increase visibility, I guess a warning / announcement in the release notes would be sufficient — `root-config` and the website (which is parsed by some package management tooling, as shown above) are the changes which are most likely to cause breakage in tools which are not prepared for the change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14068#issuecomment-1828463249:404,down,downstream,404,https://root.cern,https://github.com/root-project/root/issues/14068#issuecomment-1828463249,1,['down'],['downstream']
Availability,"> Wow, this looks worse than my original patch. But it shows these errors are build time errors instead of runtime errors. It is slightly odd to me. Yes, it fails during ROOT's build but already in a stage where we are running some built tools to build our modules. This involves loading modules of dependent libraries, so it will trigger the template specialization loading logic.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14495#issuecomment-1972843020:67,error,errors,67,https://root.cern,https://github.com/root-project/root/pull/14495#issuecomment-1972843020,3,['error'],['errors']
Availability,"> Yep, I guess that if you use minor> 2^23 with major = 0, then this patch would solve it. I guess we should warn or error out if `( minor> 2^32 and major != 0) || (major> 2^32)`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14967#issuecomment-1998556593:117,error,error,117,https://root.cern,https://github.com/root-project/root/pull/14967#issuecomment-1998556593,1,['error'],['error']
Availability,"> Yes, I agree that we should now focus on the remaining test failures, both in Cling and ROOT. For the ""file name too long"" when building with GCC, I've posted #10387 (we'll have to rebase this PR afterwards and change a number of the new `.str()` calls).; > ; > I also started looking into the slow JIT for RDF, and I noticed that it's completely hanging when ROOT is built with C++17. The stack trace of a stuck `./tree/dataframe/test/dataframe_interface --gtest_filter=RDataFrameInterface.GetFilterNamesFromNode` is; > ; > ```; > #0 0x00007ffff697681d in __lll_lock_wait () from /lib64/libpthread.so.0; > #1 0x00007ffff696fac9 in pthread_mutex_lock () from /lib64/libpthread.so.0; > #2 0x00007fffefd8e953 in __gthread_mutex_lock (__mutex=0x8eb600) at /usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux/bits/gthr-default.h:748; > #3 std::mutex::lock (this=0x8eb600) at /usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/std_mutex.h:103; > #4 std::unique_lock<std::mutex>::lock (this=<optimized out>) at /usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/std_mutex.h:267; > #5 std::unique_lock<std::mutex>::unique_lock (__m=..., this=<optimized out>) at /usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/std_mutex.h:197; > #6 llvm::orc::ExecutionSession::OL_applyQueryPhase1 (this=this@entry=0xbcb8b0, IPLS=std::unique_ptr<llvm::orc::InProgressLookupState> = {...}, Err=...) at /home/jhahnfel/ROOT/llvm13/src/interpreter/llvm/src/lib/ExecutionEngine/Orc/Core.cpp:2295; > #7 0x00007fffefd8c8ec in llvm::orc::ExecutionSession::lookup(llvm::orc::LookupKind, std::vector<std::pair<llvm::orc::JITDylib*, llvm::orc::JITDylibLookupFlags>, std::allocator<std::pair<llvm::orc::JITDylib*, llvm::orc::JITDylibLookupFlags> > > const&, llvm::orc::SymbolLookupSet, llvm::orc::SymbolState, llvm::unique_function<void (llvm::Expected<llvm::DenseMap<llvm::orc::SymbolStringPtr, llvm::JITEvaluatedSymbol, llvm::De",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1098026446:62,failure,failures,62,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1098026446,1,['failure'],['failures']
Availability,"> Yes, as expected many tests are failing now, so we have to decide on a strategy here: Do we want to fix all issues first or merge this one first to make it easier to debug things?. I'd merge it as well. The build will be red for weeks or months, but the shifter should have a look and ping people every once in a while.; Given that it only runs during the night, you could even log in to the node and play with the last nightly build if you cannot reproduce the error.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10005#issuecomment-1057799612:287,ping,ping,287,https://root.cern,https://github.com/root-project/root/pull/10005#issuecomment-1057799612,2,"['error', 'ping']","['error', 'ping']"
Availability,"> Yes, better than the ""That should fix a recent nightly failure with gcc11"" that Philippe commented on, thanks for improving it!; > ; > Compared to just including the actual diagnostic (something Philippe and I generally try to do these days, something that has proven super helpful several times), your current log:; > ; > ```; > That should fix a recent nightly failure with gcc11 avoiding to require; > module ""bits/ranges_base.h"" in C++20 context.; > ```; > ; > does not call out; > ; > * that it's during dictionary generation; > ; > * that the modulemap requires the module feature 'cplusplus20' (your log seems to suggest that the error surfaces when compiled in C++20 mode, while this error shows up when compiling in C++14 or 17); > ; > * that the issue is also with GCC12 headers (your message seems to suggest that it's only with GCC11 headers); > ; > * the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`; > ; > ; > In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?); > ; > But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me). This issue exists on gcc11 and gcc12 (and I guess any gcc that made changes to libstdc++ and the exp",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12276#issuecomment-1430019305:57,failure,failure,57,https://root.cern,https://github.com/root-project/root/pull/12276#issuecomment-1430019305,8,"['error', 'failure']","['error', 'failure']"
Availability,"> You know you can do a force push with `git push -f` to your original branch to update a PR without having to create a new one, right? :-). Of course, you can see how I force pushed in https://github.com/root-project/root/pull/3521 but for some reason at that moment github was keeping the three original commits instead of the final two and giving an error. So I just went for another PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3529#issuecomment-472086907:353,error,error,353,https://root.cern,https://github.com/root-project/root/pull/3529#issuecomment-472086907,1,['error'],['error']
Availability,"> You mean it makes silently illegal memory overwrite?. Yes, likely so. At least if doing exactly what the tutorial does. > But then one should check `TString::Append()` - I guess. I don't know, the error can be anywhere in the stack trace such as providing insufficient buffer etc. `TString::Append` is just the place that executes the illegal memory read. Also, please keep in mind that more illegal memory accesses may happen afterwards - AddressSanitizer only reports the first problem and then terminates the process. I think it is possible to keep going afterwards and see what else is going belly-up, but IIRC that is not guaranteed to work well due to internal state not being consistent...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11629#issuecomment-1308382786:199,error,error,199,https://root.cern,https://github.com/root-project/root/issues/11629#issuecomment-1308382786,1,['error'],['error']
Availability,"> You should have seen this already with 6.30 though. Is there an explanation why 6.30 did not trigger the error?. Just to comment about 6.30: we didn't look at this release apart from to do a compilation test, so indeed, most likely the issue is there as well as per your expectation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15964#issuecomment-2203170942:107,error,error,107,https://root.cern,https://github.com/root-project/root/issues/15964#issuecomment-2203170942,1,['error'],['error']
Availability,"> [01bb696](https://github.com/root-project/root/commit/01bb6965557fcc63d5d2e535b89f57e025922731) hints that the compression engine were seen as writing past the end ... it is plausible since the prior delta was `9*nbuffers + 8` with `nbuffers==0` is common case. (in hindsight, this commit was not investigated long enough and needed a test). I think `nbuffers >= 1` in all cases, so we should always have 9 additional bytes beyond what we tell `R__zipMultipleAlgorithm`. > This of course assume that the compression algorithm strictly respect the limit given (it would be a serious security risk if not). Yes, we have to operate under that assumption. > This patch needs to be backported to as many older releases as possible as it can lead to a memory over-write even in the case of TTree (the compression is being given a memory area smaller than it is and unless the compression algorithm stops before it has over-inflated the object by 28+9 bytes, it might still happens). Yes, I think the compression algorithms stop at the buffer sizes we give them. Unless I'm missing something, this means only RNTuple was affected by this and TTree was fine because of the slightly larger buffers? For now, I've opened backports for 6.30 (https://github.com/root-project/root/pull/14624), 6.28 (https://github.com/root-project/root/pull/14625), and 6.26 (https://github.com/root-project/root/pull/14626). If we find that TTree is also affected, we can (and have to) open more backports. > A a side note, the extra size given by TKey and TBaskets probably should be removed (delta understanding why there was a +8 ""in case object is placed in a deleted gap"". Ok, we can try (in `master`). We have to be careful though, I don't want to introduce more memory errors for writing TTrees...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14523#issuecomment-1933568756:1750,error,errors,1750,https://root.cern,https://github.com/root-project/root/pull/14523#issuecomment-1933568756,1,['error'],['errors']
Availability,> [100%] Built target hsimple; > filter.cxx:74:10: fatal error: 'unistd.h' file not found; > #include <unistd.h>; > ^~~~~~~~~~; > [100%] Built target PreparationPyz; > 1 error generated. @couet I tried building with mac12 and I cannot reproduce the error you see.; See the CI log: https://github.com/root-project/root/actions/runs/8877537165/job/24371327147?pr=15314; The documentation is built correctly (aside from the fact that 'graphviz-dot' is missing). Could it be something related to mac14 vs mac12 ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15160#issuecomment-2082617753:57,error,error,57,https://root.cern,https://github.com/root-project/root/pull/15160#issuecomment-2082617753,3,['error'],['error']
Availability,"> [2021-11-15T12:21:02.692Z] /Volumes/HDD2/build/workspace/root-pullrequests-build/root/math/vecops/inc/ROOT/RVec.hxx:926:17: error: type 'ROOT::Detail::VecOps::RVecImpl<int>' does not provide a subscript operator. That's quite strange.; I had thougt it were platform specific and #9261 related when seeing it on my machine.; Replacing `MyFunction` with `ROOT::VecOps::MyFunction` should solve the problem. Update: Just tried the current version (without `ROOT::VecOps::`) on LXPLUS, and it works without error.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9286#issuecomment-969275233:126,error,error,126,https://root.cern,https://github.com/root-project/root/pull/9286#issuecomment-969275233,2,['error'],['error']
Availability,> `!entry == true` if `entry == 0`: `0` is fals-y in C++. Ohh I didn't know that. Then maybe one could simply check if entry is undefined. Or does that cause the same error?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8425#issuecomment-861667463:167,error,error,167,https://root.cern,https://github.com/root-project/root/pull/8425#issuecomment-861667463,2,['error'],['error']
Availability,"> `-Dimt=OFF -Dbuiltin_tbb=OFF`. I tried to add the 2 options you said, you can check the below steps, it still failed. The result look the same as the original error of this issue.; 1. `cmake -G ""Visual Studio 17 2022"" -A ARM64EC -DCMAKE_SYSTEM_VERSION=10.0.22621.0 -Dtesting=ON -Droottest=ON -Droofit=off -Dimt=OFF -Dbuiltin_tbb=OFF ..` ; 2. `msbuild /m /p:Platform=ARM64EC /p:Configuration=Release ALL_BUILD.vcxproj /t:Rebuild`. error message:; `C:\Program Files\Microsoft Visual Studio\2022\Enterprise\MSBuild\Microsoft\VC\v170\Microsoft.CppCommon.targets(254,5): error MSB8066: Custom build for 'C:\gitP\root-project\root\build_arm64ec\CMakeFiles\c47203b562f7dfc78de28a6cb0d4e391\Options.inc.rule;C:\gitP\root-project\root\build_arm64ec\CMakeFiles\ef6b5551e87d9b29a1350db42d169b36\ClangDriverOptions.rule;C:\gitP\root-project\root\interpreter\llvm-project\clang\include\clang\Driver\CMakeLists.txt' exited with code -1073741819.`. detailed logs:; [ROOT_Setup_arm64ec.log](https://github.com/user-attachments/files/16309437/ROOT_Setup_arm64ec.log); [ROOT_build_arm64ec.log](https://github.com/user-attachments/files/16309436/ROOT_build_arm64ec.log)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11787#issuecomment-2238657100:161,error,error,161,https://root.cern,https://github.com/root-project/root/issues/11787#issuecomment-2238657100,3,['error'],['error']
Availability,"> `Error in <TObjArray::At>: index 100 out of bounds (size: 100, this: 0x179fb60)`. FWIW this is happening since commit b124f17f7a8da81415acd4bdb47a0fd6d4eef795 @pcanal",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10162#issuecomment-1079043324:3,Error,Error,3,https://root.cern,https://github.com/root-project/root/issues/10162#issuecomment-1079043324,1,['Error'],['Error']
Availability,"> ```; > +Warningin<TClassTable::Add>:classROOT::Detail::TTypedIter<TBaseClass>alreadyinTClassTable; > +Warningin<TClassTable::Add>:classROOT::Detail::TTypedIter<TEnumConstant>alreadyinTClassTable; > ```; > ; > The template ROOT::Detail::TTypedIter uses ClassDefInline and the registration of the class (i.e. the call to TClassTable::Add) is triggered by via a function static variable initialization. What these messages indicates (and we see that on Windows also) is that the ""function static variable"" are initialized multiple time.; > ; > Setting a breakpoint on TClassTable::Add with the condition `cname[0] == 'R' && cname[6] == 'D' && cname[24]=='<' && cname[32] == 'E'` will tell you exactly when/why this happens (on Windows, multiple library have identical copies of the functions and they are not ""de-duplicated"" by the linker (i.e. both copies are brought in independently). GDB did not stop there but I can see we have the same symbol in libCore.so and libTree.so (both are weak). These failures might have something to do with the 3 remaining failing tests in cling standalone (@Axel-Naumann is looking into them). Thanks for investigating!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6385#issuecomment-703223267:1000,failure,failures,1000,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-703223267,1,['failure'],['failures']
Availability,"> ```; > root [4] func(&a); > IncrementalExecutor::executeFunction: symbol '_ZN11__cling_N514funcEPN11__cling_N523ABCE' unresolved while linking [cling interface function]!; > You are probably missing the definition of __cling_N51::func(__cling_N52::ABC*); > Maybe you need to load the corresponding shared library?; > ```; This pull request improves the situation; cling now emits a diagnostic; ```c++; root [4] func(&a); ROOT_prompt_4:1:1: error: no matching function for call to 'func'; func(&a); ^~~~; ROOT_prompt_1:1:6: note: candidate function not viable: no known conversion from '__cling_N52::ABC *' to '__cling_N50::ABC *' for 1st argument; void func(ABC*) {}; ^; ```; meaning: function `func()` takes a different version of `class ABC` (for which you provided a different definition in a following step). Despite the sequence you described being valid C++, if definition shadowing is enabled (as per the current implementation), you need to also redefine the function so that the type of the first argument is that of the latest definition of `class ABC`:; ```c++; root [5] void func(ABC*) {}; root [6] func(&a); ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9782#issuecomment-1030227274:442,error,error,442,https://root.cern,https://github.com/root-project/root/pull/9782#issuecomment-1030227274,1,['error'],['error']
Availability,"> `arrows.C` is one of the faulty examples in this PR. I have generated the SVG files (using TSVG) with and without the changes proposed in this PR. The files are the same! no color overwriting whatsoever...... Can you please try this with hstack.C, archi.C, basic3d.C or greyscale.C. Arrows.C is only failing for jsons",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16348#issuecomment-2329289066:27,fault,faulty,27,https://root.cern,https://github.com/root-project/root/pull/16348#issuecomment-2329289066,1,['fault'],['faulty']
Availability,"> `clang-format` 14.0 in our check complains now:; > ; > ```; > /home/runner/work/root/root/.clang-format:5:3: error: unknown enumerated scalar; > Enabled: false; > ^; > ```. Sorry about that, It complied with my local schema:. ```; ""AlignConsecutiveAssignments"": {; ""title"": ""Style of aligning consecutive assignments."",; ""x-intellij-html-description"": ""\u003csub style\u003d\""color:gray\""\u003e(since clang-format 3.8)\u003c/sub\u003e\n \u003cp\u003e\u003cb\u003eConsecutive\u003c/b\u003e will result in formattings like:\u003c/p\u003e\n \u003cpre style\u003d\u0027background-color: 2b2b2b\u0027\u003e\u003cspan style\u003d\""color: #cc7832;\""\u003eint \u003c/span\u003e\u003cspan style\u003d\""color: #a9b7c6;\""\u003ea \u003d \u003c/span\u003e\u003cspan style\u003d\""color: #6897bb;\""\u003e1\u003c/span\u003e\u003cspan style\u003d\""color: #cc7832;\""\u003e;\u003c/span\u003e\n\u003cspan style\u003d\""color: #cc7832;\""\u003eint \u003c/span\u003e\u003cspan style\u003d\""color: #a9b7c6;\""\u003esomelongname \u003d \u003c/span\u003e\u003cspan style\u003d\""color: #6897bb;\""\u003e2\u003c/span\u003e\u003cspan style\u003d\""color: #cc7832;\""\u003e;\u003c/span\u003e\n\u003cspan style\u003d\""color: #cc7832;\""\u003edouble \u003c/span\u003e\u003cspan style\u003d\""color: #a9b7c6;\""\u003ec \u003d \u003c/span\u003e\u003cspan style\u003d\""color: #6897bb;\""\u003e3\u003c/span\u003e\u003cspan style\u003d\""color: #cc7832;\""\u003e;\u003c/span\u003e\u003c/pre\u003e\n \u003cp\u003eNested configuration flags:\u003c/p\u003e\n \u003cp\u003eAlignment options.\u003c/p\u003e\n \u003cp\u003eThey can also be read as a whole for compatibility. The choices are:\n - None\n - Consecutive\n - AcrossEmptyLines\n - AcrossComments\n - AcrossEmptyLinesAndComments\u003c/p\u003e\n \u003cp\u003eFor example, to align across empty lines and not across comments, either\n of these work.\u003c/p\u003e\n \u003cpre style\u003d\u0027background-color: 2b2b2b\u0027\u003e\u003cspan style\u003d\""color: #cc7832;\""\u003eAlignConsecutiveMac",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14690#issuecomment-1946111503:111,error,error,111,https://root.cern,https://github.com/root-project/root/pull/14690#issuecomment-1946111503,1,['error'],['error']
Availability,"> `explicit` will give a compile error. And really, if you're faced with a compile error, you'd better do the right thing: Use the normal default ctor. No it won't the cases where the TObject is explicitly passed to the constructor would still correctly compile (like in [gui/gui/src/TGTable.cxx](https://github.com/root-project/root/pull/15451/files#diff-b4d685b49ccf5a970cd4c04abfd67249ec82a844dbabc8ba5dfeefdcbf2b496a) touched in this PR). It's only the case in the PR description with the wrong left-hand side type that would not compile anymore with explicit. So by using `explicit` we would keep more compatibility with existing code. However, there are also other reasons why this constructor is dangerous, even if it's `explicit`. Take this code for example:; ```c++; auto n = new TNamed;; auto l1 = new TList;; auto l2 = new TList{l1}; // let's say the user intended a copy here, but forgot to dereference l1; // it will still compile and call this ""dangerous ctor""!; ```; The signature is extremely easy to confuse with a copy constructor too. So maybe removing it is indeed better. You can use the ROOT deprecation macro for this (at the end of the declaration before the semicolon) like in this PR for example:; https://github.com/root-project/root/pull/14954. And please add a bullet point here:; https://github.com/root-project/root/blob/master/README/ReleaseNotes/v632/index.md#deprecation-and-removal. Then we will remove it later when the 6.34 development cycle starts (that's what the `R__DEPRECATE` macro is for - there is a mechanism to remind us to remove what we promised to remove in the codebase)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15451#issuecomment-2100801763:33,error,error,33,https://root.cern,https://github.com/root-project/root/pull/15451#issuecomment-2100801763,2,['error'],['error']
Availability,"> `root [1] auto firstTwo2 = Take(v, 2);`. This resolves correctly to `ROOT::VecOps::Take()` after a `using namespace ROOT::VecOps;`, which is what appears in the example referenced above. Thus, the following works:; ```c++; root [0] ROOT::VecOps::RVec v{2., 3., 1.};; root [1] using namespace ROOT::VecOps;; root [2] auto firstTwo = Take(v, 2); (ROOT::VecOps::RVec<double> &) { 2.0000000, 3.0000000 }; ```. I cannot tell whether the names in `ROOT::VecOps` were directly available for unqualified lookup in the past. @Axel-Naumann? . Anyways, I agree that the interpreter should be more clear about unresolved names (instead of partially dumping the AST). I can dedicate some spare cycles in the first week of December for that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9261#issuecomment-966475070:472,avail,available,472,https://root.cern,https://github.com/root-project/root/issues/9261#issuecomment-966475070,2,['avail'],['available']
Availability,"> ad 2: Ok, I didn't know this setting existed. Sounds reasonable then (at least not worse than right now). ad 3: This sounds complicated, but I'm probably missing the rationale behind. Can you remind me why we need to first build the target branch and not entirely rely on the incremental build downloaded from S3?. If the incremental build downloaded from S3 is up to date the build purely relies on it. It then behaves as if it's just downloading, rebasing the PR and building. If the existing artifact is not up to date, or it doesn't exist, the job first builds the target branch to populate S3 with the newer version, and then continues as usual. This only adds a few minutes to that run and then proceeding runs will behave like usual as the artifacts are now up to date again. Consider a CI where PR builds don't upload, and you have a PR where the CMake options are changed. An existing build artifact for the new options doesn't exist so the first run will be from scratch and take ~40 minutes. An issue arises and the PR is gets a new commit, and a new job starts. This job will then also take ~40 minutes to complete because the previous commit didn't upload any clean artifacts to use.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12201#issuecomment-1413500083:296,down,downloaded,296,https://root.cern,https://github.com/root-project/root/pull/12201#issuecomment-1413500083,3,['down'],"['downloaded', 'downloading']"
Availability,"> and every source file has proper list of dependencies:. That's not true. There are files including headers not declared in their dependency list, so if that header is not copied to the build directory and found from there, compilation will fail. Just remove `${CMAKE_BINARY_DIR}/include` from the include list, add the generated headers to a special directory and add *that* to the include list, then try to compile ROOT. You will see many errors of headers that cannot be found.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5170#issuecomment-600641084:442,error,errors,442,https://root.cern,https://github.com/root-project/root/pull/5170#issuecomment-600641084,1,['error'],['errors']
Availability,"> and this might trigger failures?. yes, and not just here. i don't know how much of our code (and users') relies on the default being single-thread execution, but it's probably a fair amount. having to always think about thread-safety even when doing these sort of quick debugging printouts is not a 100% transparent change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8318#issuecomment-852871769:25,failure,failures,25,https://root.cern,https://github.com/root-project/root/pull/8318#issuecomment-852871769,1,['failure'],['failures']
Availability,"> apparently this revealed issues in a couple of tests [here](https://github.com/root-project/root/pull/13460#issuecomment-1679272277). Yes indeed, asking @bellenot for help, I assume it has to do with modules vs rootmap files: The failure in `histhistdrawv7testUnit` looks really scary, `Seq/NoROOTExtension.Read/0` could potentially be solved by renaming the class. I guess it's the first time that these (C++17) tests run on Windows in such fixed environment?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13460#issuecomment-1680053538:232,failure,failure,232,https://root.cern,https://github.com/root-project/root/pull/13460#issuecomment-1680053538,1,['failure'],['failure']
Availability,"> better:; > ; > ```; > bash-3.2$ pid=$(exec sh -c 'echo ""$PPID""'); > bash-3.2$ echo $pid; > 49244; > ```. Thanks for checking!. Can you retry with the latest commit ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9966#issuecomment-1081896774:52,echo,echo,52,https://root.cern,https://github.com/root-project/root/pull/9966#issuecomment-1081896774,2,['echo'],['echo']
Availability,> but Mac 12 and Mac 13 are still not happy!. Tests on macs failing due to network problems downloading ROOT files.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14800#issuecomment-1961086920:92,down,downloading,92,https://root.cern,https://github.com/root-project/root/pull/14800#issuecomment-1961086920,1,['down'],['downloading']
Availability,"> can you just try something like `new int`? If we're lucky, this also explains the Windows failures, which doesn't have modules either and was just failing to compile altogether 🤞. No luck :(",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14645#issuecomment-1985361983:92,failure,failures,92,https://root.cern,https://github.com/root-project/root/pull/14645#issuecomment-1985361983,1,['failure'],['failures']
Availability,"> can you post please what do you see as an error?. It is exactly same error as with 4.12.3, which is mentioned in https://github.com/root-project/root/issues/7292",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7335#issuecomment-789913039:44,error,error,44,https://root.cern,https://github.com/root-project/root/pull/7335#issuecomment-789913039,2,['error'],['error']
Availability,"> cling::DynamicLibraryManager::loadLibrary(): libAfterImage.so.0: cannot open shared object file: No such file or directory; > Error in <TInterpreter::TCling::AutoLoad>: failure loading library libASImage.so for TASImage; > cling::DynamicLibraryManager::loadLibrary(): libAfterImage.so.0: cannot open shared object file: No such file or directory. A workaround to solve this is to do sudo apt install libafterimage0-dev, then it should work with the precompiled binary. (In the meantime, this issue will be solved in the next release, see https://github.com/root-project/root/pull/14402). So for the moment, I would suggest to try to go download the precompiled binary from the website, and install that missing dependency.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14479#issuecomment-1916342665:128,Error,Error,128,https://root.cern,https://github.com/root-project/root/issues/14479#issuecomment-1916342665,3,"['Error', 'down', 'failure']","['Error', 'download', 'failure']"
Availability,"> code between these two points?; >; > see you, RD; >; > Successful RAL:; >; >; > https://bigpanda.cern.ch//media/filebrowser/667e8363-d9bb-4ebd-800f-79d3495d1b3a/panda/tarball_PandaJob_4925629005_RAL/payload.stdout; >; > [2020-12-18 14:20:13.919081 +0000][Debug ][XRootDTransport ] [; > xrootd.echo.stfc.ac.uk:1094 #0.0] kXR_protocol successful (type: server; > [], protocol version 400); > [2020-12-18 14:20:13.919352 +0000][Debug ][XRootDTransport ] [; > xrootd.echo.stfc.ac.uk:1094 #0.0] Sending out kXR_login request,; > username: tatls002, cgi: ?xrd.cc=uk&xrd.tz=0&xrd.appname=runH4lAnalRun2&; > xrd.info=&xrd.hostname=tatls002-2010227.0-lcg2237.gridpp.rl.ac.uk&xrd.rn=v4.10.0,; > dual-stack: false, private IPv4: true, private IPv6: false; >; > Successful UK WATERLOO:; >; >; > https://bigpanda.cern.ch//media/filebrowser/772fff72-3e22-499f-8a3f-aa8956ea5636/panda/tarball_PandaJob_4926186410_RAL/payload.stdout; >; > [2020-12-19 00:45:02.375203 +0000][Debug ][XRootDTransport ] [; > xrootd.echo.stfc.ac.uk:1094 #0.0] kXR_protocol successful (type: server; > [], protocol version 400); > [2020-12-19 00:45:02.375430 +0000][Debug ][XRootDTransport ] [; > xrootd.echo.stfc.ac.uk:1094 #0.0] Sending out kXR_login request,; > username: tatls002, cgi: ?xrd.cc=uk&xrd.tz=0&xrd.appname=runH4lAnalRun2&; > xrd.info=&xrd.hostname=tatls002-2013477.0-lcg2259.gridpp.rl.ac.uk&xrd.rn=v4.10.0,; > dual-stack: false, private IPv4: true, private IPv6: false; >; > Successful IN2P3 LAPP_LAKE; >; >; > https://bigpanda.cern.ch//media/filebrowser/f9695015-c110-4e2e-9c62-d56eade824f8/panda/tarball_PandaJob_4926136184_IN2P3-LAPP_LAKE/payload.stdout; >; > [2020-12-19 02:08:57.250908 +0100][Debug ][XRootDTransport ] [; > lapp-se01.in2p3.fr:1094 #0.0] kXR_protocol successful (type: manager [],; > protocol version 500); > [2020-12-19 02:08:57.251553 +0100][Debug ][XRootDTransport ] [; > lapp-se01.in2p3.fr:1094 #0.0] Sending out kXR_login request, username:; > atlaspil, cgi: ?xrd.cc=fr&xrd.tz=1&xrd.appname=runH",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6948#issuecomment-758074953:1710,echo,echo,1710,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-758074953,1,['echo'],['echo']
Availability,> do you have any intuition about what could have gone wrong that causes these failures in the execCheckClusterRange test because of different file sizes?. Not yet. It could be that some leaf type changed or a `StreamerInfo` changed (for that reverting just the `LinkDef` should be sufficient).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14268#issuecomment-1863174237:79,failure,failures,79,https://root.cern,https://github.com/root-project/root/pull/14268#issuecomment-1863174237,2,['failure'],['failures']
Availability,"> does this warrant a test?. Yes definitely, I already modified the available tests to check the filelist. I can also add a new one to check a filelist with more than one file in it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8637#issuecomment-877254446:68,avail,available,68,https://root.cern,https://github.com/root-project/root/pull/8637#issuecomment-877254446,1,['avail'],['available']
Availability,"> drop fail-on-missing or communicate this feature with LCG. Can we not use the usual approach? If daos is not turned off, look for daos, leave daos on if found. If not found, turn it off, unless fail-on-missing where we'd error out.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6825#issuecomment-821810235:223,error,error,223,https://root.cern,https://github.com/root-project/root/pull/6825#issuecomment-821810235,1,['error'],['error']
Availability,"> e.g. LHC experiments, of this change in case something behaves differently in that context. This move is necessary for the Python environments but there is a clear limitation in its current form, that is it breaks the usage of TPython from C++:. ```; root.exe -l -b -q -x -e 'TPython::Exec(""print(\""1 + 1 =\"", 1+1)"")'. cling::DynamicLibraryManager::loadLibrary(): dlopen(/Users/vpadulan/Programs/rootproject/rootbuild/master-4e3ca10195-pyroot-debug/lib/libROOTTPython.so, 0x0009): symbol not found in flat namespace '_PyBool_Type'; Error in <AutoloadLibraryMU>: Failed to load library /Users/vpadulan/Programs/rootproject/rootbuild/master-4e3ca10195-pyroot-debug/lib/libROOTTPython.socling JIT session error: Failed to materialize symbols: { (main, { __ZN7TPython4ExecEPKc }) }; ```. This is not surprising, we are purposely removing the linking against libPython so TPython cannot find the symbols. From within a Python interpreter, libpython is automatically injected and linked at the global scope, but that doesn't happen when a symbol from libpython is needed from an executable outside of Python itself. Bottom line, we will need to investigate how to properly manage both the requirements of Python packaging systems and embedding libpython in other cases.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15891#issuecomment-2180639835:534,Error,Error,534,https://root.cern,https://github.com/root-project/root/pull/15891#issuecomment-2180639835,3,"['Error', 'error']","['Error', 'error']"
Availability,> error: The last gc run reported the following. Please correct the root cause. is fixed.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4671#issuecomment-563151367:2,error,error,2,https://root.cern,https://github.com/root-project/root/pull/4671#issuecomment-563151367,1,['error'],['error']
Availability,> error: The last gc run reported the following. Please correct the root cause. should be fixed.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4553#issuecomment-543113644:2,error,error,2,https://root.cern,https://github.com/root-project/root/pull/4553#issuecomment-543113644,1,['error'],['error']
Availability,> failure looks 'real'?. Totally - debugging...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7937#issuecomment-824003146:2,failure,failure,2,https://root.cern,https://github.com/root-project/root/pull/7937#issuecomment-824003146,1,['failure'],['failure']
Availability,"> fname1 might be the right variable. However you code is misplaced.; > In your opinion, what does the code:; > ```; > if (!fname1 || !fname1[0]) {; > ....; > }; > ```; > given that `fname1` point to a `const char *` used as a C string?; > ; > > I havent been able to compile root locally as it throws me the error; > ; > We need to fix this first. PR should be uploaded/opened only once you have been able to verify their correctness locally (unless specifically requested by your mentor).; > ; > > ./root.exe: symbol lookup error: ./root.exe: undefined symbol: _ZN5TRintC1EPKcPiPPcPvibb ; > ; > This is very odd and might indicates a misconfigured build.; > ; > What was your cmake command line? What is your Operating System?. For cmake I just did ; ```; cd rootbuild; cmake ../root; make ; ```; I'm on WSL",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10656#issuecomment-1147818517:309,error,error,309,https://root.cern,https://github.com/root-project/root/pull/10656#issuecomment-1147818517,2,['error'],['error']
Availability,"> for CMS tests, build directory is not available at runtime. . Aren't the header files available? Aren't you setting ROOT_INCLUDE_PATH?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10633#issuecomment-1139560146:40,avail,available,40,https://root.cern,https://github.com/root-project/root/pull/10633#issuecomment-1139560146,2,['avail'],['available']
Availability,"> has to do with these issues?. Nothing. You are right. I completely misread the text when responding. TLDR: Read just the last paragraph. > Can you expand what a seemingly broken test design. Can you tell me what is broken in the test design?. It is testing a ""natural"" control flow for a REPL:; ```; First Load a bunch of stuff that, in this case, include a forward declaration. Second do:; if (some entity (directly or indirectly) that happens to have a forward declaration is not defined yet); load the definition for the entity.; ```; (here the entity is `std::pair<int, Inner<int>>` and the forward declared type is `Inner<int>`). The test is properly revealing that (as described by Jonas) this pattern is now broken because some intermediary template does not get recalculated or reinstantiated when the definition is loaded. One could be tempted to 'improve' the test with a less intrusive way of checking but this would likely render the test useless for its intended purpose. In the real use case those same test are buried deep in the Core/Meta and I/O and should then be changed there too (assuming it is 'possible' to do so). For more details on the original problem see: ; https://sft.its.cern.ch/jira/browse/ROOT-7462; and detailed analyis:; https://github.com/root-project/roottest/blob/master/root/meta/ROOT-7462/README; ; So most likely than not we need to find a way to solve this within Cling and/or Core/Meta. One hint is that the reproducer symptoms as described by Jonas seem familiar. For example, it shows a failure to instantiate the template `std::is_default_constructible_v`. When this is triggered by Core/Meta/Cling, eg `ClassInfo` the error is (supposed to be) supressed **AND** the failed template instantiation is supposed to be cleaned up and removed. It seems that the problem might be that with Clang16 some side-effects of the failed instantiation are no longer fully removed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13815#issuecomment-1756311089:1534,failure,failure,1534,https://root.cern,https://github.com/root-project/root/issues/13815#issuecomment-1756311089,2,"['error', 'failure']","['error', 'failure']"
Availability,"> how we can address this with `dash`. Maybe, a more meaningful error message could be printed in thisroot.sh.; For example, check if BASH_ARGV[0] does not exist, then print ""Please change to another shell"".",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10298#issuecomment-1088435461:64,error,error,64,https://root.cern,https://github.com/root-project/root/issues/10298#issuecomment-1088435461,1,['error'],['error']
Availability,> https://www.qt.io/download-open-source and when installing unselect all except for qtcreator. There are also offline installers that don't require login. I have done the procedure mentioned here. It create a Qt folder in my home directory with QtCreator inside. But `qhelpgenerator` does not show... seems not really straightforward,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8781#issuecomment-902720563:20,down,download-open-source,20,https://root.cern,https://github.com/root-project/root/issues/8781#issuecomment-902720563,1,['down'],['download-open-source']
Availability,"> humm ... I am slightly confused. Does this PR solve the missing symbol or not?. This PR fixes the error locally and `ROOT-ubuntu16/nortcxxmod` seems to be happy (had some 450 test failures before). > If this change and the inline change are both unrelated, what is fixing it?. I have no idea, really, I only observe that the error is gone with the second commit. Maybe @bellenot can provide some insights? I think he had some ideas, based on comments on Mattermost.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7033#issuecomment-759717852:100,error,error,100,https://root.cern,https://github.com/root-project/root/pull/7033#issuecomment-759717852,3,"['error', 'failure']","['error', 'failures']"
Availability,"> if I run with ctest --output-on-failure -R roottest-root-dataframe then tests pass. See my comment in the other issue: I did not manage to reproduce the problem outside of ctest and without running multiple tests concurrently -- it also seems that one of the tests ""has"" to be roottest-root-dataframe-test_snapshot_manytasks. > I guess some test dependencies may be missing?. why would a missing dependency make the test _pass_ if it's run alone and fail if it's run together with others?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7936#issuecomment-823937084:34,failure,failure,34,https://root.cern,https://github.com/root-project/root/issues/7936#issuecomment-823937084,1,['failure'],['failure']
Availability,"> if I use GetListOfRealData on a class hierarchy where I only have a dictionary for the derived class but not for the base class, I get a segmentation fault. Is it expected?. No it is not.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8901#issuecomment-1113669708:152,fault,fault,152,https://root.cern,https://github.com/root-project/root/issues/8901#issuecomment-1113669708,1,['fault'],['fault']
Availability,"> is a custom memory allocator used in ROOT to output more information about memory pressure. This is not the only purpose. The other purpose is to allow the use of shared memory for inter process communication. > the functionality of libNew is only available in rootn.exe and libNew is statically linked to the binary. This is not the only usage. > we should make it a static library. This is backward incompatible. Having it as a static library means that you must link libNew against every single library that will be using it (as opposed to allowing other possible way to use it, including LD_PRELOAD). Besides, having it as a static library does eliminate the broken case described above (it is just delayed until a library linked against libNew is loaded). That said, libNew should be excluded from any auto-loading mechanism and should only be loaded/linked explicitly by the user.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4722#issuecomment-571236827:250,avail,available,250,https://root.cern,https://github.com/root-project/root/pull/4722#issuecomment-571236827,1,['avail'],['available']
Availability,"> is that it doesn't really have a good use case. . I was thinking the case where indeed there is not enough 'memory' for IoURing (eg. the error message mentioned here) and where we want to 'stop' wasting time for the rest of the process by not even trying to use IoURing. > Client code can implement it themselves without access to RIoUring internals, because it's just a static bool checking whether the constructor threw. In this context, `RRawFile` is the only (likely) client code as RIoURing is in the internal namespace.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7942#issuecomment-824274467:139,error,error,139,https://root.cern,https://github.com/root-project/root/pull/7942#issuecomment-824274467,1,['error'],['error']
Availability,> it's not just spurious error messages:. Then I am misremembering/missing something. Let me check a few things.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14793#issuecomment-1999599352:25,error,error,25,https://root.cern,https://github.com/root-project/root/issues/14793#issuecomment-1999599352,1,['error'],['error']
Availability,"> keeping the status quo is also an option. I was initially under the impression that this would lead to crashes when using RDF + remote globbing with HTTPS, but it seems like there is no crash.; ```python; >>> import ROOT; >>> df = ROOT.RDataFrame(""Events"", ""https://root.cern/files/HiggsTauTauReduced/*.root""); Error in <TDavixSystem::DavixOpendir>: failed to opendir the directory: HTTP 405 : Method Not Allowed, Permission refused (17); >>> df.Sum(""run"").GetValue(); Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; cppyy.gbl.std.runtime_error: Template method resolution failed:; ROOT::RDF::RResultPtr<double> ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Sum(basic_string_view<char,char_traits<char> > columnName = """", double& initValue = RDFDetail::SumReturnType_t<RInferredType>{}) =>; runtime_error: GetBranchNames: error in opening the tree Events; ROOT::RDF::RResultPtr<double> ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Sum(basic_string_view<char,char_traits<char> > columnName = """", double& initValue = RDFDetail::SumReturnType_t<RInferredType>{}) =>; runtime_error: GetBranchNames: error in opening the tree Events; ```. So yes, we could just leave things as they are. I think it's still worth to just ask the developers of the respective projects their opinion about this kind of feature. If it turns out that for xrootd this is not wanted, we can just disable it there too easily",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13258#issuecomment-1638458779:313,Error,Error,313,https://root.cern,https://github.com/root-project/root/issues/13258#issuecomment-1638458779,3,"['Error', 'error']","['Error', 'error']"
Availability,"> looks like it is something wrong with nodes?. I think the failures are real, we're missing a number of patch to make macOS 11 work with v6.20. I had hoped that the few would do, but looks like I need to debug this on a node instead of spamming Jenkins...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7635#issuecomment-804040299:60,failure,failures,60,https://root.cern,https://github.com/root-project/root/pull/7635#issuecomment-804040299,1,['failure'],['failures']
Availability,"> ping @hageboeck, does this make sense?. Yes, if they call executables, you don't need preloading. 👍",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10097#issuecomment-1072235182:2,ping,ping,2,https://root.cern,https://github.com/root-project/root/pull/10097#issuecomment-1072235182,1,['ping'],['ping']
Availability,> projectroot.core.meta.test.gtest_core_meta_test_testStatusBitsChecker. The Error message are intentional and it would be an improvement to add a check that they are present.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5591#issuecomment-640717480:77,Error,Error,77,https://root.cern,https://github.com/root-project/root/pull/5591#issuecomment-640717480,1,['Error'],['Error']
Availability,"> projectroot.roofit.roofit.test.gtest_roofit_roofit_test_testRooExponential. ```; C:\build\workspace\root-pullrequests-build\root\test\unit_testing_support\ROOTUnitTestSupport.cxx(70): error: Failed; Received unexpected diagnostic of severity 2000 at 'TStreamerInfo::CompareContent' reading 'The following data member of; the on-file layout version 1 of class 'RooSTLRefCountList<RooAbsArg>' differs from ; the in-memory layout version 1:; vector<unsigned long> _refCount; //; vs; vector<unsigned int> _refCount; //'.; ```. The problem stems wrong:; ```; std::vector<std::size_t> _refCount;; ```; where ROOT does not (yet) make the std:*_t type opaque and thus sees different types on different platforms (and `long` is stored with 64 bits, `int` is stored with 32 bits, so here the 2 schema are indeed different). . Using `unsigned long` instead of `std::size_t` should solve the problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9374#issuecomment-985770700:186,error,error,186,https://root.cern,https://github.com/root-project/root/pull/9374#issuecomment-985770700,1,['error'],['error']
Availability,"> redundant, already in base class. Note that the reason clang-tidy is recommending to remove the explicit setting of fType in the constructor is because it is already set in the class own's declaration (it is inlined in the declaration of the fType data member).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8265#issuecomment-850833190:2,redundant,redundant,2,https://root.cern,https://github.com/root-project/root/pull/8265#issuecomment-850833190,1,['redundant'],['redundant']
Availability,"> report your tree's entries back, and I will then - at some point in the near future - let you know your global offset. Ah, good idea, this avoids the problem Philippe mentioned above with all tasks trying to recover the number of entries of the first file at the same time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12190#issuecomment-1412175768:210,recover,recover,210,https://root.cern,https://github.com/root-project/root/issues/12190#issuecomment-1412175768,1,['recover'],['recover']
Availability,"> require no locks and . For ROOT we can (try to) disable thread safety. > , require no locks and don't result in calls to an external library. . but that also technically (maybe) include malloc ... that one might be hard to avoid ... And it also preclude executing any user code in the workers .... > What we cannot guarantee .... Yes and because of that it can not reliably work (unless there is no active thread when we fork).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7075#issuecomment-764944378:367,reliab,reliably,367,https://root.cern,https://github.com/root-project/root/pull/7075#issuecomment-764944378,1,['reliab'],['reliably']
Availability,> set(LLVM_PACKAGE_VERSION 2.13.2). That makes no sense. Could that be a bug in cmake? Which version of cmake do you use? Could you upgrade/downgrade and see if we can still reproduce the problem?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14492#issuecomment-1944231959:140,down,downgrade,140,https://root.cern,https://github.com/root-project/root/issues/14492#issuecomment-1944231959,1,['down'],['downgrade']
Availability,> that we only include the missing headers . I do not see (from just the patch) this behavior. I see inclusion of all (and only) the input headers. I do not see the 'gather the set of missing header' part. > Some tests are failing with modules such with redefinition errors. Why is reincluding the same header twice leading to errors? Is there a missing code guard somewhere?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1335#issuecomment-344609847:267,error,errors,267,https://root.cern,https://github.com/root-project/root/pull/1335#issuecomment-344609847,2,['error'],['errors']
Availability,"> the 'size' variable is greater than 'maxsize'. . In principle, it is wrong set of arguments. `maxisze` is intend to be allocated memory size. ; But now I add check for such situation. > The old error-prone implementation worked at all my tests :). It was by chance. With old code if one call `SetNull(0)` and then `SetInt(0,0)` was causing segmentation violation. If I understand correct, all other tests fine for you.; If yes, I will merge changes in master. Do you need these fixes in older branches - like 6.22 or 6.20?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7127#issuecomment-774525353:196,error,error-prone,196,https://root.cern,https://github.com/root-project/root/issues/7127#issuecomment-774525353,1,['error'],['error-prone']
Availability,"> the ABI issue (and the need to do the alloc+dealloc outside the JIT) might have been fixed in llvm9, if we are lucky?. This shared_ptr-on-heap trick we use is not to work around ABI issues but to resolve a lifetime issue: we need objects created by compiled code to stay alive at least until jitting time (which in RDF happens lazily), so we keep them around in heap-allocated shared_ptrs and when both compiled code and jitted code is done with them they are destructed. It would be more elegant to guarantee that lifetimes are consistent ""by design"" if possible, but I could not think of a way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7550#issuecomment-801040986:273,alive,alive,273,https://root.cern,https://github.com/root-project/root/pull/7550#issuecomment-801040986,1,['alive'],['alive']
Availability,"> the APPLE system SDK has changed. @cxwx I agree. But I can't figure out why you can build successfully by turning off some options, but I can't. I also updated the command line tool to 14.3, did you?. > When using the non-homebrew cmake, make sure you removed the previous CMakeCache.txt. As a brutal measure you can temporarily rename/ops/homebrew; that should also move it out of the way... @Axel-Naumann Sure. I cleared all files when I built. It may work but I need to install the dependencies manually, which is also an annoying thing. ; And I do think there is something new happening for these building errors other than homebrew things. rootfit and glew errors are always there no matter if I use external dependencies or builtins. I have never encountered these errors before. >Can you explain why you don't want to use homebrew's build of ROOT? This seems much simpler than building ROOT yourself - unless you want to help develop ROOT, of course! ;-). It really isn't necessary, it's just a habit. In addition to macos, I also use root on various versions of linux servers. For the latter, in most cases, I can only compile it myself. And we have many codes that depend on root, so we hope that root's compilation options can be mastered by ourselves. As for contributing to the development of root, I hope that I can do it in the future, but at present more is to use root to complete physical analysis. Thank you for your invaluable contributions!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12648#issuecomment-1523586633:612,error,errors,612,https://root.cern,https://github.com/root-project/root/issues/12648#issuecomment-1523586633,6,['error'],['errors']
Availability,"> the RNTuple not actually being merged ... . That is 100% correct, the actual merger is not implemented yet. I should have marked the PR `WIP` and made the RNTuple merger fail with an ""unimplemented error message"", but I wanted to highlight during execution that the attempted merger no longer segfaults.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6016#issuecomment-657719041:200,error,error,200,https://root.cern,https://github.com/root-project/root/pull/6016#issuecomment-657719041,1,['error'],['error']
Availability,"> the TApplication works but the TMapFile got the error message. That is the 'correct' behavior, `libNew` is indeed required for `TMapFile`. > Once this works, the TApplication just doesn't work with error message of segmentation fault or violation. . Can you copy/paste the entire output in that case?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13511#issuecomment-1691941021:50,error,error,50,https://root.cern,https://github.com/root-project/root/issues/13511#issuecomment-1691941021,3,"['error', 'fault']","['error', 'fault']"
Availability,"> the mode or the median which ever cover more clusters and/or the largest fraction of the file. Alright, can do that. But it's not super cheap, so I have two questions. 1. Should I:; a. add a TTree method that evaluates that thing and call it from `TTree::GetCacheAutoSize`; b. add a TTree method that evaluates that thing and add a data member to TTree to cache its value after the first time I compute it; c. evaluate that thing in TTree's constructor and store it in a data member; d. add a free function that takes a TTree and evaluates that thing; e. none of the above, something else. 2. What should we do for TChains? Override that calculation so that it errors out?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8714#issuecomment-887647556:663,error,errors,663,https://root.cern,https://github.com/root-project/root/pull/8714#issuecomment-887647556,1,['error'],['errors']
Availability,"> the problem is likely to be either at; > https://github.com/root-project/root/blob/2b690ee44992d58fcea38271fe689699ca6ea176/core/meta/src/TGenericClassInfo.cxx#L29. Seriously, what kind of error handling is that!?. Here is what I get now:; ```; [ 67%] Generating G__MathCore.cxx, ../../lib/libMathCore_rdict.pcm, ../../lib/libMathCore.rootmap; Failed to deduce type for 'static std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> ROOT::Internal::TTypeNameExtraction<T>::Get() [with T = ROOT::Detail::TTypedIter<TBaseClass>]'; Child aborted; gmake[2]: *** [math/mathcore/CMakeFiles/G__MathCore.dir/build.make:213: math/mathcore/G__MathCore.cxx] Error 1; gmake[1]: *** [CMakeFiles/Makefile2:19283: math/mathcore/CMakeFiles/G__MathCore.dir/all] Error 2; gmake: *** [Makefile:163: all] Error 2; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1389#issuecomment-347631375:191,error,error,191,https://root.cern,https://github.com/root-project/root/pull/1389#issuecomment-347631375,4,"['Error', 'error']","['Error', 'error']"
Availability,> this is a command to download all pages. So we can consider this issue as resolved as you have the command doing what you are looking for ? can we close it ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7421#issuecomment-823490974:23,down,download,23,https://root.cern,https://github.com/root-project/root/issues/7421#issuecomment-823490974,1,['down'],['download']
Availability,"> this would lead to crashes when using RDF + remote globbing with HTTPS. with ""status quo"" I meant just leaving support for xrootd in (and not adding HTTPS+globbing support if that's not possible). if using HTTPS+globbing does not spit out an intelligible error, that should be fixed. > If it turns out that for xrootd this is not wanted, we can just disable it there too easily. that's a breaking change though",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13258#issuecomment-1638474330:257,error,error,257,https://root.cern,https://github.com/root-project/root/issues/13258#issuecomment-1638474330,1,['error'],['error']
Availability,> to figure out how to handle the case when $ROOTSYS is not writable . One can try to load fonts from current directory.; http server uses `http://server/currentdir/` alias for files from current directory.; One can use it to load fonts.; The only to be done - call `win.SetUseCurrentDir(true);` in REve initialization - because of security reasons option is by default off. Feature available only in master since 2 days - please rebase your code,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15812#issuecomment-2175645489:383,avail,available,383,https://root.cern,https://github.com/root-project/root/pull/15812#issuecomment-2175645489,1,['avail'],['available']
Availability,"> to make it explicit: this is causing failures of `stressInterpreter` on macOS and must not be merged for now. That's true; I'll have to check how to fix this... Currently, it seems non-trivial: we probably need to judge whether to unload a declaration or not by looking at the whole chain of (implicit) instantiations :man_shrugging:.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13618#issuecomment-1769206385:39,failure,failures,39,https://root.cern,https://github.com/root-project/root/pull/13618#issuecomment-1769206385,1,['failure'],['failures']
Availability,"> to only fix white space errors in lines that you touched. Sorry, this is my default settings. I also using eclipse - how I can remove spaces only on edited lines?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5069#issuecomment-592085360:26,error,errors,26,https://root.cern,https://github.com/root-project/root/pull/5069#issuecomment-592085360,1,['error'],['errors']
Availability,"> troubles and waste time of the experts who do not really care. You are indeed re-iterating your opinion without providing new arguments. Let me repeat:. We don't see an issue with exported symbols anymore. I thus don't see a reason to provide a check. And even if I were wrong (totally possible), the check I remove in this PR is independent of what you discuss, so please propose your new check in a separate PR, with an explanation of which failure it avoids. Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4736#issuecomment-572067162:445,failure,failure,445,https://root.cern,https://github.com/root-project/root/pull/4736#issuecomment-572067162,1,['failure'],['failure']
Availability,"> using SO_LoadedLast (which is somewhat counter-intuitive to our use case) seems to work. I agree `SO_LoadedLast` shouldn't be what your after especially if it works with `SO_LoadedFirst` here.; Diff-ing my PR1 vs your JITRTLD_LOCAL shows something went screwy, in particular:; DynamicLibrary.h@91 should be:; ```; enum SearchOrdering {; /// SO_Linker - Search as a call to dlsym(dlopen(NULL)) would when; /// DynamicLibrary::getPermanentLibrary(NULL) has been called or; /// search the list of explcitly loaded symbols if not.; SO_Linker,; /// SO_LoadedFirst - Search all loaded libraries, then as SO_Linker would.; SO_LoadedFirst,; /// SO_LoadedLast - Search as SO_Linker would, then loaded libraries.; /// Only useful to search if libraries with RTLD_LOCAL have been added.; SO_LoadedLast,; /// SO_LoadOrder - Or this in to search libraries in the ordered loaded.; /// The default bahaviour is to search loaded libraries in reverse.; SO_LoadOrder = 4; };; ```. > Thanks for helping me out to sort this out!. No problem, but lets sort if it can be accomplished with `SO_LoadedFirst`. > My personal opinion is that it should be the default, being close to the old behavior. I understand that but do my examples or the fact the old behavior completely breaks down on Windows give you no pause?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/744#issuecomment-313811536:1260,down,down,1260,https://root.cern,https://github.com/root-project/root/pull/744#issuecomment-313811536,1,['down'],['down']
Availability,"> we can always discuss separately whether we want to error out at construction time if an input file does not exist (I think we might want to). I discussed about this at the I/O meeting last week, other comments were in favor of changing the behaviour and erroring out at construction time if the file does not exist. I think I will still move that part to another PR so that we can better discuss it there",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13090#issuecomment-1657949562:54,error,error,54,https://root.cern,https://github.com/root-project/root/pull/13090#issuecomment-1657949562,2,['error'],"['error', 'erroring']"
Availability,"> we had only one (1) complaint on this, ever. There is also https://root-forum.cern.ch/t/problem-running-thisroot-sh/30682 and https://root-forum.cern.ch/t/error-in-thisroot-sh/26231 although I am not sure if it's a different problem",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10332#issuecomment-1089331072:157,error,error-in-thisroot-sh,157,https://root.cern,https://github.com/root-project/root/pull/10332#issuecomment-1089331072,1,['error'],['error-in-thisroot-sh']
Availability,> we introduce ROOT_CONFIGURE_LIBRARY_INCLUDES and then we use it in later commits. I always try to split large changes on smaller parts to be able search for errors. If we will made single commit and found error much later - it will be real challenge to fix it. `ROOT_CONFIGURE_LIBRARY_INCLUDES` is central part of this PR. I did all changes step by step and only at very end removed `${CMAKE_BUILD_DIR}/include` from list of includes. And by these steps I have to modify code which had many wrong (not mentioned in library dependencies) includes.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5181#issuecomment-603205175:159,error,errors,159,https://root.cern,https://github.com/root-project/root/pull/5181#issuecomment-603205175,2,['error'],"['error', 'errors']"
Availability,"> what I want to hear from you is whether the change in log channel name is okay for you:. Yes, one can change names as you propose. Up to now they was used for error messages, where source of problem can be seen anyway.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6875#issuecomment-738841251:161,error,error,161,https://root.cern,https://github.com/root-project/root/pull/6875#issuecomment-738841251,1,['error'],['error']
Availability,"> what is ODR-using kNPOS?. https://godbolt.org/z/4EYM6nrnn. > With C++17, they are automatically inline and should not need the definition out-of-line. You can make a variable inline which does not need a definition outside of the class but they do not become inline automatically, iiuc. I expect if you make it inline to pollute all .o files and .so files. However, we do not seem to have an odr-use of this anywhere so the symbol is elided. So when python asks for `TString::kNPOS` we cannot promise that somebody throughout a codebase would have odr-used it - instead, the JIT should be able to force codegen of its symbol and provide it. The problem with the current cppyy is that it would exhaustively enumerate all of the members of a class which triggers that error. It's probably not worth fixing this as it is already fixed by design with the rework of cppyy we are doing... . > nm $ROOTSYS/lib/*.so | grep _ZN7TString5kNPOSE | wc -l. Can you do: `nm $ROOTSYS/lib/*.so | grep TString | grep kNPOS | wc -l`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14261#issuecomment-1860657604:768,error,error,768,https://root.cern,https://github.com/root-project/root/pull/14261#issuecomment-1860657604,1,['error'],['error']
Availability,"> which gets called when DynamicLibraryManager fails with ""undefined error"". Does that catch the error issued by dlopen itself?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2148#issuecomment-394740906:69,error,error,69,https://root.cern,https://github.com/root-project/root/pull/2148#issuecomment-394740906,2,['error'],['error']
Availability,"> why are you silencing these warnings?. This is to implement the changes in the way we discussed. We keep backwards compatibility for this PR, i.e. we don't throw an exception and we delegate the errors regarding non-existing files to the first time a branch is accessed, like it is currently done in RDF. The actual improvement, i.e. early error out, is left for another PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13090#issuecomment-1659140221:197,error,errors,197,https://root.cern,https://github.com/root-project/root/pull/13090#issuecomment-1659140221,2,['error'],"['error', 'errors']"
Availability,"> why it doesn't appear in our CI. i don't know, but this is undefined behavior so it's fairly hard to say -- i see the error on my laptop",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8975#issuecomment-915012716:120,error,error,120,https://root.cern,https://github.com/root-project/root/pull/8975#issuecomment-915012716,1,['error'],['error']
Availability,"> why should the RVec cast of the ""jets"" column work if it is in fact an std::vector<float>. I understand why it currently doesn't, but I believe we agree that reading any collection as an RVecs via RNTupleDS _should_ work. I think we agreed to:; - [ ] throw an exception from RNTupleDS in case type on disk and type requested do not match -- this will make the bug noisy instead of silent and will possibly catch other issues in the future; - [x] wait for the RVec redesign that adds a small vector optimization and then provide a type-erased deserialization function for RVecs which RNTupleDS can take advantage of -- the redesign will make it simpler to implement such a function in a robust way",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6347#issuecomment-692682651:688,robust,robust,688,https://root.cern,https://github.com/root-project/root/issues/6347#issuecomment-692682651,2,['robust'],['robust']
Availability,"> why we don't see failures of these tutorials in the nightlies!. Does all these tutorials executed? ; Cannot be, while there were many wrong class names.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2324#issuecomment-405239233:19,failure,failures,19,https://root.cern,https://github.com/root-project/root/pull/2324#issuecomment-405239233,1,['failure'],['failures']
Availability,"> will try to report the repr issue separately. Thanks for investing your time here, much appreciated! I still want to debug this test failure here, so please leave this open independently of the progress you're making on the ATLAS side.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12406#issuecomment-1547262445:135,failure,failure,135,https://root.cern,https://github.com/root-project/root/issues/12406#issuecomment-1547262445,1,['failure'],['failure']
Availability,"> 😕 I have no idea where the; > ; > ```; > ...; > 09:16:19 -- Found BLAS: /usr/lib/i386-linux-gnu/libblas.so ; > 09:16:19 CMake Error at cmake/modules/SearchInstalledSoftware.cmake:1549 (message):; > 09:16:19 PyROOT2: Python2 development package not found and pyroot2 component; > 09:16:19 required (python2 executable: ); > 09:16:19 Call Stack (most recent call first):; > 09:16:19 CMakeLists.txt:205 (include); > ```; > ; > error is coming from. I really don't think that my changes had anything to do with that. 😕. No worries, it's something that was added yesterday evening. People are working on fixing it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5889#issuecomment-645850853:128,Error,Error,128,https://root.cern,https://github.com/root-project/root/pull/5889#issuecomment-645850853,2,"['Error', 'error']","['Error', 'error']"
Availability,">0.004), x,y=( 4.7875, 4.5633)	ref: y= 4.673. [Nearest point from ref: j=37	x,y=( 4.7875, 4.673) ]	range=12.699; RooCurve::isIdentical[ 38] Y tolerance exceeded ( 0.0092771>0.004), x,y=( 4.83, 5.1366)	ref: y= 5.2544. [Nearest point from ref: j=38	x,y=( 4.83, 5.2544) ]	range=12.699; RooCurve::isIdentical[ 39] Y tolerance exceeded ( 0.010568>0.004), x,y=( 4.915, 6.3583)	ref: y= 6.4925. [Nearest point from ref: j=39	x,y=( 4.915, 6.4925) ]	range=12.699; RooCurve::isIdentical[ 40] Y tolerance exceeded ( 0.011872>0.004), x,y=( 5, 7.6719)	ref: y= 7.8227. [Nearest point from ref: j=40	x,y=( 5, 7.8227) ]	range=12.699; RooCurve::isIdentical[ 41] Y tolerance exceeded ( 0.011872>0.004), x,y=( 5, 7.6719)	ref: y= 7.8227. [Nearest point from ref: j=40	x,y=( 5, 7.8227) ]	range=12.699; RooUnitTest ERROR: comparison of object RooCurve::nll_Norm[sigma_g2] fails comparison with counterpart in reference RooPlot rf605_plot2; Test 41 : Profile Likelihood operator............................FAILED; Test 42 : NLL error handling.....................................OK; Test 43 : Fit Result functionality...............................OK; Test 44 : Chi^2 fit to X-Y dataset...............................OK; Test 45 : Efficiency operator p.d.f. 1D..........................OK; Test 46 : Efficiency operator p.d.f. 2D..........................OK; Test 47 : Efficiency product operator p.d.f......................OK; Test 48 : Amplitude sum operator p.d.f...........................OK; Test 49 : Linear morph operator p.d.f............................OK; Test 50 : Histogram based p.d.f.s................................OK; Test 51 : Kernel estimation p.d.f.s..............................OK; Test 52 : B Physics p.d.f.s......................................OK; Test 53 : Automated MC studies...................................OK; Test 54 : MC Study with chi^2 calculator.........................OK; Test 55 : MC Study with param rand. and Z calc...................OK; Test 56 : MC Studies with aux. obs. constrain",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8596#issuecomment-881412597:11131,error,error,11131,https://root.cern,https://github.com/root-project/root/pull/8596#issuecomment-881412597,1,['error'],['error']
Availability,">: no dictionary for class MCInfo is available; (TFile *) 0x55f64bf49770; Error in <TBufferFile::ReadClassBuffer>: class: TVector3, attempting to access a wrong version: 1348, object skipped at offset 96; Error in <TBufferFile::ReadClassBuffer>: class: TVector3, attempting to access a wrong version: 3184, object skipped at offset 102; Error in <TBufferFile::CheckByteCount>: object of class TVector3 read too few bytes: 2 instead of 627270009; Error in <TBufferFile::CheckByteCount>: Byte count probably corrupted around buffer position 96:; 627270009 for a possible maximum of 35226; Error in <TBufferFile::CheckByteCount>: object of class TVector3 read too many bytes: 40 instead of -1073741825; Warning in <TBufferFile::CheckByteCount>: TVector3::Streamer() not in sync with data on file pluto_oldpers.root, fix Streamer(); Error in <TBufferFile::CheckByteCount>: Byte count probably corrupted around buffer position 35328:; -1073741825 for a possible maximum of -44; Error in <TBufferFile::CheckByteCount>: object of class TVector3 read too many bytes: 40 instead of -1073741825; Warning in <TBufferFile::CheckByteCount>: TVector3::Streamer() not in sync with data on file pluto_oldpers.root, fix Streamer(); Error in <TBufferFile::CheckByteCount>: Byte count probably corrupted around buffer position 35328:; -1073741825 for a possible maximum of -44; Error in <TBufferFile::CheckByteCount>: object of class TVector3 read too many bytes: 40 instead of -1073741825; Warning in <TBufferFile::CheckByteCount>: TVector3::Streamer() not in sync with data on file pluto_oldpers.root, fix Streamer(); Error in <TBufferFile::CheckByteCount>: Byte count probably corrupted around buffer position 35328:; -1073741825 for a possible maximum of -44; Error in <TBufferFile::CheckByteCount>: object of class TVector3 read too many bytes: 40 instead of -1073741825; Warning in <TBufferFile::CheckByteCount>: TVector3::Streamer() not in sync with data on file pluto_oldpers.root, fix Streamer(); Error in <TBu",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7754#issuecomment-965918817:2944,Error,Error,2944,https://root.cern,https://github.com/root-project/root/issues/7754#issuecomment-965918817,2,['Error'],['Error']
Availability,">::basic_string(const _CharT*, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>]’; basic_string(const _CharT* __s, const _Alloc& __a = _Alloc());; ^~~~~~~~~~~~; GCC-8.2.0-linux64/include/c++/8.2.0/bits/basic_string.h:3498:7: note: candidate: ‘std::basic_string<_CharT, _Traits, _Alloc>::basic_string(const std::basic_string<_CharT, _Traits, _Alloc>&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>]’; basic_string(const basic_string& __str);; ^~~~~~~~~~~~; root-6.24.00/tree/dataframe/src/RDFInterfaceUtils.cxx: In function ‘{anonymous}::ParsedExpression {anonymous}::ParseRDFExpression(const string&, const ColumnNames_t&, const ColumnNames_t&, const ColumnNames_t&, const std::map<std::basic_string<char>, std::basic_string<char> >&)’:; root-6.24.00/tree/dataframe/src/RDFInterfaceUtils.cxx:173:31: error: invalid operands of types ‘const char [3]’ and ‘void’ to binary ‘operator+’; TPRegexp replacer(""\\b"" + escapeDots(colOrAlias) + ""\\b""); // watch out: need to replace colOrAlias, not col; ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~; root-6.24.00/tree/dataframe/src/RDFInterfaceUtils.cxx:177:63: error: call of overloaded ‘basic_string(std::remove_reference<TString&>::type)’ is ambiguous; return ParsedExpression{std::string(std::move(exprWithVars)), std::move(usedCols), std::move(varNames)};; ^; In file included from GCC-8.2.0-linux64/include/c++/8.2.0/string:52,; from root-6.24.00/core/meta/inc/TSchemaHelper.h:17,; from root-6.24.00/core/meta/inc/TGenericClassInfo.h:21,; from root-6.24.00/core/base/inc/Rtypes.h:191,; from root-6.24.00/tree/dataframe/inc/ROOT/RDF/RColumnReaderBase.hxx:14,; from root-6.24.00/tree/dataframe/inc/ROOT/RDF/ColumnReaderUtils.hxx:14,; from root-6.24.00/tree/dataframe/inc/ROOT/RDF/RAction.hxx:14,; from root-6.24.00/tree/dataframe/inc/ROOT/RDF/InterfaceUtils.hxx:14,; from root-6.24.00/tree/dataframe/src/RDFInterfaceUtils.cxx:11:; GCC-8.2.0-linux64/include/c++/8.2.0/bits/basic_str",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8477#issuecomment-864130448:2278,error,error,2278,https://root.cern,https://github.com/root-project/root/pull/8477#issuecomment-864130448,1,['error'],['error']
Availability,">; > and XROOTD seems to have built successfully, but there seems to be some other errors. The configure step said that the ROOT version is 6-27-01. [build_out.log](https://github.com/root-project/root/files/8626646/build.log) [build_err.log](https://github.com/root-project/root/files/8626647/build_err.log). @eguiraud seems similar to https://root-forum.cern.ch/t/error-for-installing-root-source-in-ubuntu-22-04/49803/21",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10518#issuecomment-1117901009:83,error,errors,83,https://root.cern,https://github.com/root-project/root/issues/10518#issuecomment-1117901009,2,['error'],"['error-for-installing-root-source-in-ubuntu-', 'errors']"
Availability,">> Also I suppose there are ways to reduce the up-front cost of the rootpcms (for example delaying their loading until needed); > That's what I am after. Do you have something in particular in mind. Currently, the rootpcms file is loaded when the library is loaded. Instead it could be open whenever there is a call to TClassTable::GetProtoClass for one of its content. This would require:. (a) have a (persistent) data structure that list of the available content of the rootpcms.; (b) extend the TClassTable data structure to record that information; (c) in TClassTable::GetProtoClass if the TProtoClass is no there but there is rootpcms listed, then open the rootpcms and load. When opening the rootpcms one should load all the TProtoClasses since opening the file takes time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3012#issuecomment-659533156:447,avail,available,447,https://root.cern,https://github.com/root-project/root/pull/3012#issuecomment-659533156,1,['avail'],['available']
Availability,">> I thought we agreed not to make it a enum class in order to be backward compatible with old user code.; > it didn't work out, . @oshadura What was the downside?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3005#issuecomment-442486002:154,down,downside,154,https://root.cern,https://github.com/root-project/root/pull/3005#issuecomment-442486002,1,['down'],['downside']
Availability,>> Is that with or without opening the file? My expectation is that root.exe -l -b -q will take a lot less rss.; > ping. With the file.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13000#issuecomment-1630735193:115,ping,ping,115,https://root.cern,https://github.com/root-project/root/issues/13000#issuecomment-1630735193,1,['ping'],['ping']
Availability,">> root $ git grep 'not implemented' | wc -l. > Most of these are a C++98 implementation of '=delete' to prevent copy of object. (i.e. hide/delete the copy constructors). At least half of them are not comments, and at least 150 or so occurrences are for actual non-implemented stuff (i.e. inside a `Fatal` or `Error` call or something similar). I checked that afterwards.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1393#issuecomment-348512906:310,Error,Error,310,https://root.cern,https://github.com/root-project/root/pull/1393#issuecomment-348512906,1,['Error'],['Error']
Availability,">fTarget = """";; - rule->fVersion = ""[1-]"";; - rule = &readrules[1];; - rule->fSourceClass = ""ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> >"";; - rule->fTarget = """";; - rule->fVersion = ""[1-]"";; - rule = &readrules[2];; - rule->fSourceClass = ""ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<Float16_t> >"";; - rule->fTarget = """";; - rule->fVersion = ""[1-]"";; - instance.SetReadRules( readrules );; return &instance;; }; // Static variable to force the class initialization; @@ -2755,8 +2675,8 @@; nullptr; };; static const char* includePaths[] = {; -""/build/vvassilev/root-release-master/include"",; -""/build/vvassilev/root-release-master/include/"",; +""/build/vvassilev/root-release-llvm13/include"",; +""/build/vvassilev/root-release-llvm13/include/"",; nullptr; };; static const char* fwdDeclCode = nullptr;; (.venv) vvassilev@vv-nuc /build/vvassilev/root_build $ make. [ 77%] Built target G__GenVector; [ 77%] Linking CXX shared library ../../lib/libGenVector.so; /usr/local/bin/ld: error: CMakeFiles/G__GenVector32.dir/G__GenVector32.cxx.o: multiple definition of 'ROOT::GenerateInitInstance(ROOT::Math::Cartesian2D<double> const*)'; /usr/local/bin/ld: CMakeFiles/G__GenVector.dir/G__GenVector.cxx.o: previous definition here; /usr/local/bin/ld: error: CMakeFiles/G__GenVector32.dir/G__GenVector32.cxx.o: multiple definition of 'ROOT::GenerateInitInstance(ROOT::Math::DisplacementVector2D<ROOT::Math::Cartesian2D<double>, ROOT::Math::DefaultCoordinateSystemTag> const*)'; /usr/local/bin/ld: CMakeFiles/G__GenVector.dir/G__GenVector.cxx.o: previous definition here; /usr/local/bin/ld: error: CMakeFiles/G__GenVector32.dir/G__GenVector32.cxx.o: multiple definition of 'ROOT::GenerateInitInstance(ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>, ROOT::Math::DefaultCoordinateSystemTag> const*)'; /usr/local/bin/ld: CMakeFiles/G__GenVector.dir/G__GenVector.cxx.o: previous definition here; /usr/local/bin/ld: error: CMakeFiles/G__GenVector32.dir/G__GenVector32.cxx.o: multiple d",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1136423157:21918,error,error,21918,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1136423157,2,['error'],['error']
Availability,">simplify frame layout. seems like one step in the right direction in terms of trimming down number of ""speed bumps"" in reading things!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13779#issuecomment-1822922214:88,down,down,88,https://root.cern,https://github.com/root-project/root/pull/13779#issuecomment-1822922214,2,['down'],['down']
Availability,?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-6277-ROOT-fedora31-noimt&date=2020-08-28).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/94221/console).; ### Errors:; - [2020-08-28T16:37:54.691Z] /home/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TClingMemberIter.h:92:4: error: ‘lang’ does not name a type; did you mean ‘clang’? ; - [2020-08-28T16:37:54.691Z] /home/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TClingMemberIter.h:93:10: error: ‘lang’ does not name a type; did you mean ‘clang’? ; - [2020-08-28T16:37:54.691Z] /home/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TClingMemberIter.h:94:10: error: ‘lang’ does not name a type; did you mean ‘clang’? ; - [2020-08-28T16:37:54.691Z] /home/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TClingMemberIter.h:103:55: error: ‘Iter’ was not declared in this scope; did you mean ‘DCIter’? ; - [2020-08-28T16:37:54.691Z] /home/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TClingMemberIter.h:92:4: error: ‘lang’ does not name a type; did you mean ‘clang’? ; - [2020-08-28T16:37:54.691Z] /home/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TClingMemberIter.h:93:10: error: ‘lang’ does not name a type; did you mean ‘clang’? ; - [2020-08-28T16:37:54.691Z] /home/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TClingMemberIter.h:94:10: error: ‘lang’ does not name a type; did you mean ‘clang’? ; - [2020-08-28T16:37:54.691Z] /home/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TClingMemberIter.h:103:55: error: ‘Iter’ was not declared in this scope; did you mean ‘DCIter’? ; - [2020-08-28T16:37:55.495Z] /home/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TClingMemberIter.h:92:4: error: ‘lang’ does not name a type; did you mean ‘c,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6277#issuecomment-682849778:1130,error,error,1130,https://root.cern,https://github.com/root-project/root/pull/6277#issuecomment-682849778,1,['error'],['error']
Availability,"@; #include ""TBufferJSON.h""; #include ""TEnv.h""; ; +#include ""TObject.h""; +; #include <algorithm>; #include <regex>; ; @@ -42,15 +44,15 @@ namespace Experimental {; ; class RBrowserDataCleanup : public TObject {; ; - RBrowserData &fData;; + RBrowserData *fData{nullptr}; //!; ; public:; - RBrowserDataCleanup(RBrowserData &_data) : fData(_data) {}; + RBrowserDataCleanup(RBrowserData *_data) : fData(_data) {}; + RBrowserDataCleanup() {} // Needed by ClassDefInline; ; - void RecursiveRemove(TObject *obj) override; - {; - fData.RemoveFromCache(obj);; - }; + void RecursiveRemove(TObject *obj) override { fData->RemoveFromCache(obj); }; +; + ClassDefInline(RBrowserDataCleanup, 1);; };; }; }; @@ -67,7 +69,7 @@ public:; ; RBrowserData::RBrowserData(); {; - fCleanupHandle = std::make_unique<RBrowserDataCleanup>(*this);; + fCleanupHandle = std::make_unique<RBrowserDataCleanup>(this);; R__LOCKGUARD(gROOTMutex);; gROOT->GetListOfCleanups()->Add(fCleanupHandle.get());; }. ```. And the test gives even more errors then before:. ```; 1548: -- BEGIN OUTDIFF OUTPUT --; 1548: --- /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021; 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:19:46 2023; 1548: @@ -14,5 +14,29 @@; 1548: Bit 13 declared in TObject as kInvalidObject; 1548: Bit 14 declared in TStreamerElement as kWholeObject; 1548: Bit 21 declared in TStreamerElement as kWarned; 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine.; 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine.; 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataC",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13134#issuecomment-1638467226:1310,error,errors,1310,https://root.cern,https://github.com/root-project/root/pull/13134#issuecomment-1638467226,1,['error'],['errors']
Availability,"@ACA4DFA4 the Python executable chosen should be whatever `python3` points to, which probably will be `python3.8`. In the output you pasted, `python3.8` is actually found, what is not found is `missing: Python3_INCLUDE_DIRS Python3_LIBRARIES Python3_NumPy_INCLUDE_DIRS...`. It might be enough to just install `numpy` with `python3`, but that's beside the point of this PR. In your case PyROOT will build directly with Python2 since there are some missing components for 3, hence the error you found. Thanks for the fix! This PR can be merged.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12308#issuecomment-1430149373:483,error,error,483,https://root.cern,https://github.com/root-project/root/pull/12308#issuecomment-1430149373,1,['error'],['error']
Availability,"@AaronBallman, after looking some more, the question boils down to: Would it be acceptable if writing an implicitly created annotate attribute (via`AnnotateAttr::CreateImplicit`) contains the raw string literal in the form: `class __attribute__((annotate(R""(3D scaling ""projection"")""))) C;`. If that is the case, then @junaire I'd propose to modify the current patch to synthesize the raw string literal if it was marked as ""implicit"".",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10830#issuecomment-1169114935:59,down,down,59,https://root.cern,https://github.com/root-project/root/pull/10830#issuecomment-1169114935,1,['down'],['down']
Availability,"@AdvaitDhingra almost done, please run `git clang-format master` and commit the formatting fixes, there are some whitespace issues and similar and `git clang-format master` fixes them for you, taking care to only touch what your branch changed w.r.t. the `master` branch. @pcanal can you give us your ok please?. @bellenot I don't understand the windows build error, can you confirm that it's unrelated to this patch please?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7132#issuecomment-779775611:360,error,error,360,https://root.cern,https://github.com/root-project/root/pull/7132#issuecomment-779775611,1,['error'],['error']
Availability,"@AdvaitDhingra can you provide a complete reproducer? Here is what I get with your `CMakeLists.txt` alone:; ```; C:\Users\bellenot\rootdev\AdvaitDhingra>cmake .; -- Building for: Visual Studio 16 2019; -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.17763.; -- The C compiler identification is MSVC 19.24.28319.0; -- The CXX compiler identification is MSVC 19.24.28319.0; -- Check for working C compiler: C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.24.28314/bin/Hostx64/x64/cl.exe; -- Check for working C compiler: C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.24.28314/bin/Hostx64/x64/cl.exe -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.24.28314/bin/Hostx64/x64/cl.exe; -- Check for working CXX compiler: C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.24.28314/bin/Hostx64/x64/cl.exe -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; CMake Error at C:/Users/bellenot/build/release/RootMacros.cmake:442 (message):; Cannot find header Event.h to generate dictionary G__Event for. Did you; forget to set the INCLUDE_DIRECTORIES property for the current directory?; Call Stack (most recent call first):; CMakeLists.txt:7 (ROOT_GENERATE_DICTIONARY). -- Configuring incomplete, errors occurred!; See also ""C:/Users/bellenot/rootdev/AdvaitDhingra/CMakeFiles/CMakeOutput.log"".; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7982#issuecomment-825601966:1305,Error,Error,1305,https://root.cern,https://github.com/root-project/root/issues/7982#issuecomment-825601966,2,"['Error', 'error']","['Error', 'errors']"
Availability,@AdvaitDhingra please fork also [roottest](https://github.com/root-project/roottest) to prevent failures (timeout) on Windows nodes. Thanks,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7208#issuecomment-779281906:96,failure,failures,96,https://root.cern,https://github.com/root-project/root/pull/7208#issuecomment-779281906,1,['failure'],['failures']
Availability,@Andres-Briones please fork also [roottest](https://github.com/root-project/roottest) in order to fix the build error on Windows,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3647#issuecomment-573667513:112,error,error,112,https://root.cern,https://github.com/root-project/root/pull/3647#issuecomment-573667513,1,['error'],['error']
Availability,@Andres-Briones please fork also roottest to fix the build error on Windows,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3647#issuecomment-505842199:59,error,error,59,https://root.cern,https://github.com/root-project/root/pull/3647#issuecomment-505842199,1,['error'],['error']
Availability,"@ArifAhmed1995 The errors in Jenkins seem to be caused by your changes. Please take a look. Cheers,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2236#issuecomment-447831982:19,error,errors,19,https://root.cern,https://github.com/root-project/root/pull/2236#issuecomment-447831982,1,['error'],['errors']
Availability,"@Axel-Naumann , for CMS tests, build directory is not available at runtime. Most of the times build and runtime jenkins jobs run on different machines. Also at build time cmssw external packages ( including `root`) are built on local disk and deployed on /cvmfs for runtime tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10633#issuecomment-1139460820:54,avail,available,54,https://root.cern,https://github.com/root-project/root/pull/10633#issuecomment-1139460820,1,['avail'],['available']
Availability,"@Axel-Naumann , looks like some latest development in v6.24 branch has fixed the hanging issue. I have tested https://github.com/root-project/root/commit/126c9c8627560f1169d60634aaf4d733568c8ccc (without #7767) and this time cmssw build was successful. We get runtime errors now, see the details here https://github.com/cms-sw/cmsdist/pull/6777#issuecomment-811478743 . You can find the crash log https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-a7de73/13897/runTheMatrix-results/135.4_ZEE_13+ZEEFS_13+HARVESTUP15FS+MINIAODMCUP15FS/step3_ZEE_13+ZEEFS_13+HARVESTUP15FS+MINIAODMCUP15FS.log. With your changes in #7767 ( on top of https://github.com/root-project/root/commit/126c9c8627560f1169d60634aaf4d733568c8ccc ) , things look in much better state. PR tests ( https://github.com/cms-sw/root/pull/153#issuecomment-811570082 ) show no build or run time errors. But we do see some comparison differences for our reconstruction code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7718#issuecomment-811653152:268,error,errors,268,https://root.cern,https://github.com/root-project/root/issues/7718#issuecomment-811653152,2,['error'],['errors']
Availability,"@Axel-Naumann , root v.6.24 branch is still broken for us. Testing root commit 0ae9f99 ( which is tip of v6.24 patches branch) generated multiple runtime errors [a] for us. @makortel @Dr15Jones is it something CMSSW related or root is causing this ?; Testing eda45838695204139e372d712b1d72c9d5370160 + https://github.com/cms-sw/root/pull/155/files looks good though [b] . Only difference is the addition commit https://github.com/root-project/root/commit/3480394c02a6335d271f95fcf160274811091155 , do you think 3480394c02a6335d271f95fcf160274811091155 might be causing these crashes?. [a] https://github.com/cms-sw/cmsdist/pull/6787#issuecomment-814302828; https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-efd635/14020/addOnTests/pat1/cmsRun__data_cmsbld_jenkins_workspace_ib-run-pr-addon_CMSSW_11_3_ROOT624_X_2021-04-05-2300_src_PhysicsTools_PatAlgos_test_IntegrationTest_cfg.py.log. ```; cmsRun: /data/cmsbld/jenkins/workspace/ib-run-pr-tests/CMSSW_11_3_ROOT624_X_2021-04-05-2300/src/FWCore/Concurrency/src/WaitingTaskList.cc:57: void edm::WaitingTaskList::reset(): Assertion `m_head == nullptr' failed. ```. [b] https://github.com/cms-sw/root/pull/155#issuecomment-812869144",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7718#issuecomment-814343554:154,error,errors,154,https://root.cern,https://github.com/root-project/root/issues/7718#issuecomment-814343554,1,['error'],['errors']
Availability,"@Axel-Naumann , valgrind also hangs without printing nay usefull information. Under gdb I see this [a]. If I build `root` in Debug mode then I do not get this segmentation fault.; [a]; ```; (gdb) where; #0 0x00007ffff6f5d272 in _int_malloc () from /lib64/libc.so.6; #1 0x00007ffff6f6078c in malloc () from /lib64/libc.so.6; #2 0x00007ffff67ad7c5 in operator new (sz=127) at ../../../../libstdc++-v3/libsupc++/new_op.cc:50; #3 0x00007ffff683fc6d in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate (this=this@entry=0x7fffffff38c0, __pos=63, __len1=__len1@entry=0,; __s=0x7ffff471c3cb ""::"", __len2=2); at /data/cmsbld/jenkins/workspace/auto-builds/CMSSW_11_1_0_pre6-slc7_amd64_gcc900/build/CMSSW_11_1_0_pre6-build/BUILD/slc7_amd64_gcc900/external/gcc/9.3.0/gcc-9.3.0/obj/x86_64-unknown-linux-gnu/libstdc++-v3/include/bits/basic_string.h:993; #4 0x00007ffff684127b in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append (this=0x7fffffff38c0, __s=<optimized out>, __n=<optimized out>); at /data/cmsbld/jenkins/workspace/auto-builds/CMSSW_11_1_0_pre6-slc7_amd64_gcc900/build/CMSSW_11_1_0_pre6-build/BUILD/slc7_amd64_gcc900/external/gcc/9.3.0/gcc-9.3.0/obj/x86_64-unknown-linux-gnu/libstdc++-v3/include/bits/char_traits.h:300; #5 0x00007ffff199d41f in cling::LookupHelper::findScope(llvm::StringRef, cling::LookupHelper::DiagSetting, clang::Type const**, bool) const (); from /build/muz/r624/w/tmp/BUILDROOT/ea8220342d406ab7dbc2d210a1e9351b/opt/cmssw/slc7_amd64_gcc900/cms/cmssw/CMSSW_11_3_ROOT624_X_2021-03-25-1100/external/slc7_amd64_gcc900/lib/libCling.so; #6 0x00007ffff19237ef in TClingClassInfo::TClingClassInfo(cling::Interpreter*, char const*, bool) (); from /build/muz/r624/w/tmp/BUILDROOT/ea8220342d406ab7dbc2d210a1e9351b/opt/cmssw/slc7_amd64_gcc900/cms/cmssw/CMSSW_11_3_ROOT624_X_2021-03-25-1100/external/slc7_amd64_gcc900/lib/libCling.so; #7 0x00007ffff189c644 in TCling::GetInterpreterTypeName(char const*, std::_",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7718#issuecomment-809942210:172,fault,fault,172,https://root.cern,https://github.com/root-project/root/issues/7718#issuecomment-809942210,1,['fault'],['fault']
Availability,"@Axel-Naumann , which shell are you currently using, and **nproc** is a GNU core utility which is available default in every Linux distro and shell. If it's not running on your shell I assume you are using a non-Linux machine. ; In mac it's alternative is **sysctl -n hw.logicalcpu**, and in windows, it's **echo %NUMBER_OF_PROCESSORS%**",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5079#issuecomment-597554483:98,avail,available,98,https://root.cern,https://github.com/root-project/root/pull/5079#issuecomment-597554483,2,"['avail', 'echo']","['available', 'echo']"
Availability,"@Axel-Naumann , yes, for github actions, it makes sense to fail for every thing which should not happen either it is build or test failure.; My recommendation for not marking the job failed was for Jenkins type CI where a job failure should mean infrastructure issues which Jenkin's admins (or CI test developers) should look in to. Every other failure should be reported to the code developers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12307#issuecomment-1543409404:131,failure,failure,131,https://root.cern,https://github.com/root-project/root/issues/12307#issuecomment-1543409404,3,['failure'],['failure']
Availability,"@Axel-Naumann : I have rebuilt ROOT from scratch and attempted my above test case with; ```; LD_PRELOAD=/usr/lib64/libgandiva.so ./test; ```; which still gives me the same error:; ```; Error in <UnknownClass::InitInterpreter()>: LLVM SYMBOLS ARE EXPOSED TO CLING! This will cause problems; please hide them or dlopen() them after the call to TROOT::InitInterpreter()!; : CommandLine Error: Option 'version' registered more than once!; LLVM ERROR: inconsistency in registered CommandLine options; ```; Perhaps preloading individual LLVM libraries works, but with gandiva it certainly doesn't.; So unfortunately this patch is insufficient to solve my problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4689#issuecomment-570193874:172,error,error,172,https://root.cern,https://github.com/root-project/root/pull/4689#issuecomment-570193874,4,"['ERROR', 'Error', 'error']","['ERROR', 'Error', 'error']"
Availability,"@Axel-Naumann : I have to admit I have been stupid and my last posts have been wrong.; I did built root without builtin_llvm, so this could not have worked by designed.; I have rebuilt now with builtin_llvm and with your patch, and now I am only getting the warning message; ```; Error in <UnknownClass::InitInterpreter()>: LLVM SYMBOLS ARE EXPOSED TO CLING! This will cause problems; please hide them or dlopen() them after the call to TROOT::InitInterpreter()!; ```; But this is clear, since ROOT just checks for the presence of the LLVM symbols.; I am now rebuilding the ALICE software with this ROOT and checking whether the segfaults are gone.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4689#issuecomment-570267436:280,Error,Error,280,https://root.cern,https://github.com/root-project/root/pull/4689#issuecomment-570267436,1,['Error'],['Error']
Availability,"@Axel-Naumann : I think this patch is correct in any case, since the symbols should be hidden.; Unfortunately, it is not enough to solve our problem. My test case from #4668 still yields:; ```; Error in <UnknownClass::InitInterpreter()>: LLVM SYMBOLS ARE EXPOSED TO CLING! This will cause problems; please hide them or dlopen() them after the call to TROOT::InitInterpreter()!; : CommandLine Error: Option 'version' registered more than once!; LLVM ERROR: inconsistency in registered CommandLine options; ```; - The first line `LLVM SYMBOLS ARE EXPOSED....` is because the check in core/base/src/TROOT.cxx is not disabled, so this this is irrelevant. In fact, if your patch would work, this check should be removed.; - The second error `... inconsistency in registered....` however is the same problem we saw before, with the 2 LLVM instances clashing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4689#issuecomment-565367712:194,Error,Error,194,https://root.cern,https://github.com/root-project/root/pull/4689#issuecomment-565367712,4,"['ERROR', 'Error', 'error']","['ERROR', 'Error', 'error']"
Availability,"@Axel-Naumann ; Actually, you create error.; But let see if error will be seen on any platform.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4585#issuecomment-546960694:37,error,error,37,https://root.cern,https://github.com/root-project/root/pull/4585#issuecomment-546960694,2,['error'],['error']
Availability,"@Axel-Naumann ; As I could see, all errors has nothing to do with http/webgui classes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1852#issuecomment-381130923:36,error,errors,36,https://root.cern,https://github.com/root-project/root/pull/1852#issuecomment-381130923,1,['error'],['errors']
Availability,@Axel-Naumann ; In case simple `-m profile` can be helpful:. ```; ( lb-set-platform x86_64-centos7-gcc11-opt ; source /cvmfs/sft.cern.ch/lcg/views/LCG_102/${CMTCONFIG}/setup.sh ; echo $ROOTSYS ; time python -m profile ./tst100.py | tee root626.txt) ; ... ; real	0m14.144s; user	0m10.412s; sys	0m2.730s. ( lb-set-platform x86_64-centos7-gcc12-opt ; source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/${CMTCONFIG}/setup.sh ; echo $ROOTSYS ; time python -m profile ./tst100.py | tee root627.txt ); ... real	0m45.779s; user	0m36.429s; sys	0m4.734s. ```; output files: ; [root626.txt](https://gist.github.com/VanyaBelyaev/17884a2fb55deea182d27fe1b3076c70); [root627.txt](https://gist.github.com/VanyaBelyaev/c8bc792ead4f2a76c08edb0392046211),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11927#issuecomment-1361002552:179,echo,echo,179,https://root.cern,https://github.com/root-project/root/issues/11927#issuecomment-1361002552,4,['echo'],['echo']
Availability,@Axel-Naumann ; Maybe one should fix errors in `Alien` code - is it still maintained?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7617#issuecomment-803841261:37,error,errors,37,https://root.cern,https://github.com/root-project/root/issues/7617#issuecomment-803841261,1,['error'],['errors']
Availability,"@Axel-Naumann ; Should it be picked into 6.18 branch - error appears there time to time.; Like recently: https://epsft-jenkins.cern.ch/job/root-incremental-v6-18-00-patches/LABEL=ROOT-ubuntu1804-clangHEAD,SPEC=noimt/119/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4321#issuecomment-530009345:55,error,error,55,https://root.cern,https://github.com/root-project/root/pull/4321#issuecomment-530009345,1,['error'],['error']
Availability,"@Axel-Naumann ; ```cmake; if(CMAKE_CXX_COMPILER_ID STREQUAL ""GNU"" AND CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 5 AND CMAKE_CXX_COMPILER_VERSION VERSION_LESS 6); # gcc 5 has a bug in that it fails to put its internal -lgcc into the right place when linking.; # We need it to check cpu flags in src/InitUtils.cxx; # Here, we add an explicit link instruction according to the workaround posted here:; # https://bugs.launchpad.net/ubuntu/+source/gcc-5/+bug/1568899; target_link_libraries(RooFitCore PRIVATE -lgcc_s -lgcc); endif(); ```; This is the code in `roofit/roofitcore/CMakeLists.txt` So the linker error is solved if we run this `target_link_libraries` in this machine. I could not run the tests in the machine because `roottest` was `OFF` and when I tried to switch it on I got this error ; ```sh; Failed to find Python module pytest: Traceback (most recent call last):; File ""<string>"", line 1, in <module>; ModuleNotFoundError: No module named 'pytest'; CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:137 (message):; Could NOT find py_pytest (missing: PY_PYTEST); Call Stack (most recent call first):; /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:378 (_FPHSA_FAILURE_MESSAGE); /mnt/build/ws/BUILDTYPE/Release/LABEL/ROOT-fedora29/V/master/roottest/cmake/modules/RoottestMacros.cmake:1124 (find_package_handle_standard_args); /mnt/build/ws/BUILDTYPE/Release/LABEL/ROOT-fedora29/V/master/roottest/python/CMakeLists.txt:8 (find_python_module); ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6855#issuecomment-732021171:610,error,error,610,https://root.cern,https://github.com/root-project/root/issues/6855#issuecomment-732021171,3,"['Error', 'error']","['Error', 'error']"
Availability,@Axel-Naumann @amadio I think the errors are spurious. I do not merge since we are not in a hurry anyway.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2113#issuecomment-393299724:34,error,errors,34,https://root.cern,https://github.com/root-project/root/pull/2113#issuecomment-393299724,1,['error'],['errors']
Availability,"@Axel-Naumann @bellenot I think I know why `mac11.0/cxx17` is failing.; I see it is requested in list of `all modules` that `pyroot3` should be enabled, while Python3 is not available/installed on machine: ; ```AXEL: all modules = alien;arrow;asimage;asserts;builtin_afterimage;builtin_cfitsio;builtin_davix;builtin_fftw3;builtin_freetype;builtin_ftgl;builtin_gl2ps;builtin_glew;builtin_gsl;builtin_lz4;builtin_lzma;builtin_nlohmannjson;builtin_openssl;builtin_openui5;builtin_pcre;builtin_tbb;builtin_unuran;builtin_vc;builtin_vdt;builtin_veccore;builtin_xrootd;builtin_xxhash;builtin_zlib;builtin_zstd;cefweb;clad;cocoa;cuda;cudnn;daos;dataframe;davix;dcache;dev;distcc;fcgi;fftw3;fitsio;fortran;gdml;gfal;gsl_shared;gviz;http;imt;libcxx;mathmore;minuit2;mlp;monalisa;mpi;mysql;odbc;opengl;oracle;pgsql;pyroot;pyroot2;pyroot3;pyroot_legacy;pythia6;pythia6_nolink;pythia8;qt5web;r;roofit;shadowpw;spectrum;sqlite;ssl;test_distrdf_pyspark;tmva;tmva-cpu;tmva-gpu;tmva-pymva;tmva-rmva;tmva-```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8336#issuecomment-870516897:174,avail,available,174,https://root.cern,https://github.com/root-project/root/pull/8336#issuecomment-870516897,1,['avail'],['available']
Availability,"@Axel-Naumann @bellenot do you have any idea why I get these windows failures about an error that, as far as I can tell, has been fixed in master?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3602#issuecomment-479407803:69,failure,failures,69,https://root.cern,https://github.com/root-project/root/pull/3602#issuecomment-479407803,2,"['error', 'failure']","['error', 'failures']"
Availability,"@Axel-Naumann @eguiraud One of my dataframe tests fails because of this:; ```; 27/155 Test #1500: roottest-root-dataframe-test_snapshot .........................***Failed 13.13 sec; ...; --- /srv/root/src/roottest/root/dataframe/test_snapshot.ref	Tue Mar 17 09:11:36 2020; +++ /srv/root/build/roottest/root/dataframe/test_snapshot.log	Fri Apr 23 09:56:40 2021; @@ -1,4 +1,5 @@; ; +cling::DynamicLibraryManager::loadLibrary():/srv/root/build/roottest/root/dataframe/par:cannotdynamicallyloadposition-independentexecutable; ----Nowwithatreeintherootdirectory; Branch:b1; Branch:b1_square. -- END OUTDIFF OUTPUT --; CMake Error at /srv/root/build/RootTestDriver.cmake:264 (message):; compare 'stdout' error: 1; ```; Somehow ROOT should address the case of binaries built with -fpie, as at least Gentoo has enabled that by default in GCC to improve security. Other distros may do the same in the future. See e.g. https://docs.fedoraproject.org/en-US/packaging-guidelines/#_pie",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7936#issuecomment-825474655:619,Error,Error,619,https://root.cern,https://github.com/root-project/root/issues/7936#issuecomment-825474655,3,"['Error', 'error']","['Error', 'error']"
Availability,"@Axel-Naumann @lmoneta I don't see failures other than genvector from roottest on my machine after these changes. However, should we just remove the `genvector` build option instead and make it always `ON`? What do you think?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2155#issuecomment-395062648:35,failure,failures,35,https://root.cern,https://github.com/root-project/root/pull/2155#issuecomment-395062648,1,['failure'],['failures']
Availability,@Axel-Naumann @lmoneta that looks like a transitionary error to me. care to restart jenkins for slc6/gcc62?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1916#issuecomment-384468374:55,error,error,55,https://root.cern,https://github.com/root-project/root/pull/1916#issuecomment-384468374,1,['error'],['error']
Availability,"@Axel-Naumann @pcanal . Show we merge it? All errors has nothing to do.; Only problem I may expect - some external applications, which use that declaration without including of correct header file. Maybe it is better to do now - we will have more time before release",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2908#issuecomment-435409141:46,error,errors,46,https://root.cern,https://github.com/root-project/root/pull/2908#issuecomment-435409141,1,['error'],['errors']
Availability,"@Axel-Naumann @pcanal what do you think of these failures in `root_meta_evolution_baseClass_53410_v{1,2}`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5603#issuecomment-642182773:49,failure,failures,49,https://root.cern,https://github.com/root-project/root/pull/5603#issuecomment-642182773,1,['failure'],['failures']
Availability,@Axel-Naumann @vgvassilev The failure are unrelated. This looks ready to merge.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5486#issuecomment-629323675:30,failure,failure,30,https://root.cern,https://github.com/root-project/root/pull/5486#issuecomment-629323675,1,['failure'],['failure']
Availability,@Axel-Naumann Are the Davix failure expected?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9517#issuecomment-1010121119:28,failure,failure,28,https://root.cern,https://github.com/root-project/root/pull/9517#issuecomment-1010121119,1,['failure'],['failure']
Availability,"@Axel-Naumann As of 2 years ago, it was not working on linux between the JIT and the compiled code. Our test suites may or may not be exercising this, debugging it is hard. If the the C++ standard now says ""typeinfo must work across all compilation unit"" then we are good from that standard on. If not ... well absence of test failures says either we are not testing it either it is fixed. The ""extra"" requirement is because it is ""hard"" to debug (very not obviously related failure, you will first get side-tracked thinking there is some subtle (because valgrind might not complain) memory usage issue).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7776#issuecomment-812100227:327,failure,failures,327,https://root.cern,https://github.com/root-project/root/pull/7776#issuecomment-812100227,2,['failure'],"['failure', 'failures']"
Availability,@Axel-Naumann CI failure looks spurious too me.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4931#issuecomment-582406662:17,failure,failure,17,https://root.cern,https://github.com/root-project/root/pull/4931#issuecomment-582406662,1,['failure'],['failure']
Availability,"@Axel-Naumann Can/should I steer the build? Or will you do it at some point? If something else needs to be done before, just let me know. The build error with windows10/default should be related to the fact that a `struct` was forward-declared in some cases as a `class`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3513#issuecomment-472748364:148,error,error,148,https://root.cern,https://github.com/root-project/root/pull/3513#issuecomment-472748364,1,['error'],['error']
Availability,"@Axel-Naumann Hi, I'm sorry for late reply.; An workaround has worked for me. But, I'm not sure the workaround is sufficient to make all things work as is the past. However, it seems that nothing to be fixed in ROOT at this time, so I close the issue. Thanks for your ping!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1360#issuecomment-361487795:268,ping,ping,268,https://root.cern,https://github.com/root-project/root/pull/1360#issuecomment-361487795,1,['ping'],['ping']
Availability,"@Axel-Naumann Hi, it seems I got very similar errors as yesterday. Here is the information.; [build_err.log](https://github.com/root-project/root/files/11328201/build_err.log)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12648#issuecomment-1522648822:46,error,errors,46,https://root.cern,https://github.com/root-project/root/issues/12648#issuecomment-1522648822,1,['error'],['errors']
Availability,"@Axel-Naumann I also noticed that clang-tidy is broken here, because we don't build builtin_xrootd target. Should we?. ```; Found compiler error(s).; +RESULT_OUTPUT='/home/travis/build/root-project/root/net/netxng/src/TNetXNGSystem.cxx:28:10: error: '\''XrdCl/XrdClFileSystem.hh'\'' file not found [clang-diagnostic-error]; #include <XrdCl/XrdClFileSystem.hh>. ^'; The command ""if [ ""$TRAVIS_PULL_REQUEST"" != ""false"" ]; then; .ci/tidy_script.sh; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6031#issuecomment-666416856:139,error,error,139,https://root.cern,https://github.com/root-project/root/pull/6031#issuecomment-666416856,3,['error'],['error']
Availability,"@Axel-Naumann I can reproduce failures on my machine...; Here is quick reproducer:; https://github.com/root-project/root/blob/master/tree/treeplayer/test/treeprocmt/treeprocessormt_remotefiles.cxx#L13-L15; ```; root [1] auto fname = ""root://eospublic.cern.ch//eos/root-eos/cms_opendata_2012_nanoaod/ZZTo4mu.root"";; root [2] auto f = std::unique_ptr<TFile>(TFile::Open(fname));; root [3] f; (std::unique_ptr<TFile, std::default_delete<TFile> > &) std::unique_ptr -> nullptr; root [4]; ```; broken xrootd version?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7335#issuecomment-845206796:30,failure,failures,30,https://root.cern,https://github.com/root-project/root/pull/7335#issuecomment-845206796,1,['failure'],['failures']
Availability,"@Axel-Naumann I get a segfault when I try to compile `compile_20k.cxx` with gcc + libc++ following the instructions at https://releases.llvm.org/11.0.0/projects/libcxx/docs/UsingLibcxx.html#using-libc-with-gcc, i.e.:. ```bash; $ g++ -nostdinc++ -I/usr/include/c++/v1 compile_20k.cxx -nodefaultlibs -lc++ -lc++abi -lm -lc -lgcc_s -lgcc -c $(root-config --cflags); <tons of compile warnings>; g++: internal compiler error: Segmentation fault signal terminated program cc1plus; Please submit a full bug report, ...; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7604#issuecomment-804102008:414,error,error,414,https://root.cern,https://github.com/root-project/root/issues/7604#issuecomment-804102008,2,"['error', 'fault']","['error', 'fault']"
Availability,@Axel-Naumann I tested your fix with my CUDA system. The segmentation error is gone and all tests passes. Thanks for fixing it.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7433#issuecomment-800217829:70,error,error,70,https://root.cern,https://github.com/root-project/root/issues/7433#issuecomment-800217829,1,['error'],['error']
Availability,"@Axel-Naumann I've updated the patch to use `TUrl` and always redirect. I updated the code comment and release notes to match. The way to disable the redirection then will be to set `TFile.CrossProtocolRedirects` to `0` in `rootrc`. Now the behavior should be consistent between plain `TFile::Open` calls and `TChain`. @pcanal I tried moving the code after line 4057 and using `expandedUrl` but it started showing errors like this when using `TChain`:; ```; Error in <TNetXNGFile::Open>: [ERROR] Server responded with an error: [3001] Required argument not present; ```. So I moved it back where it was before and use only the input `url` to `TFile::Open` as is. I tested that this now works both for plain `TFile::Open` calls as well as with `TChain` and the redirection always happens as long as the file being opened is on EOS. The problem was that the `exapandedUrl` sometimes contained only the base EOS management URL, which broke it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11644#issuecomment-1310051645:414,error,errors,414,https://root.cern,https://github.com/root-project/root/pull/11644#issuecomment-1310051645,4,"['ERROR', 'Error', 'error']","['ERROR', 'Error', 'error', 'errors']"
Availability,"@Axel-Naumann Is it ported as expected? Please check for stupid errors ;). valgrind output with `unique_ptr`:. ```; ==2452== LEAK SUMMARY:; ==2452== definitely lost: 24 bytes in 2 blocks; ==2452== indirectly lost: 56 bytes in 1 blocks; ==2452== possibly lost: 61,086 bytes in 608 blocks; ==2452== still reachable: 75,293,328 bytes in 101,066 blocks; ==2452== of which reachable via heuristic:; ==2452== newarray : 25,424 bytes in 49 blocks; ==2452== multipleinheritance: 2,128 bytes in 3 blocks; ==2452== suppressed: 6,405,623 bytes in 65,951 blocks; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2362#issuecomment-408399051:64,error,errors,64,https://root.cern,https://github.com/root-project/root/pull/2362#issuecomment-408399051,1,['error'],['errors']
Availability,@Axel-Naumann Is that a possible replacement for the error function in core/clingutils/res/TClingUtils.h ? (see the PR #4717),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5481#issuecomment-620763017:53,error,error,53,https://root.cern,https://github.com/root-project/root/pull/5481#issuecomment-620763017,1,['error'],['error']
Availability,"@Axel-Naumann Many thanks for the detailed and friendly reply! :+1: . > Do you have a proposal for the latter? We can add a new boolean constructor argument, `failOnUnknownArgs = false` which we set to `true` in ROOT. Indeed, I believe the additional constructor argument is best. ; The only other solution which comes to mind (if it would not be possible to add a parameter) would be to (once more) use magic numbers for the `numOptions` parameter (similar to how `TApplication` ignores `argc` and `argv` if `numOptions==-1`), but that is certainly not a design pattern leading to modern, readable code, so better not spread it more ;-). ; `failOnUnknownArgs` sounds like a great choice of name, it clarifies the intent clearly. . > It would be wonderful to have that as unit test in `core/rint/test` [...]. It seems this does already exist, and has a unit test checking that errors are producted by `TRint` if unrecognitzed options are encountered ;-). Still, it seems I lack sufficient experience with `gtest`, since I don't understand why (for example) `TRint` with unsupported arguments does not `Terminate()` the test — so it's unclear to me how to write a test checking that it does not actually try to `Terminate()` when provided with a to-be-added `failOnUnknownArgs = false`. . In pseudo-steps, I think possible changes / additions to the existing test in `core/rint/test/TRintTests.cxx` to cover the use case as completely as possible could be:; 1. The existing test should be changed to set `failOnUnknownArgs = true` (after that is implemented). ; 2. A second test could be added, not setting `failOnUnknownArgs` (i.e. the default of `false` is used). This test then needs to check that no `stderr` is produced, and `Terminate()` is not called (here I'm unsure how to do these with `gtest`). ; 3. A third test could try to do the following, for complete coverage of the use case:; i. Create a `TRint (let's name it `myApp for simplicity here)`, passing in supported and unsupported option",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10090#issuecomment-1064634456:877,error,errors,877,https://root.cern,https://github.com/root-project/root/issues/10090#issuecomment-1064634456,2,['error'],['errors']
Availability,"@Axel-Naumann Should I directly remove all homebrew-related envs? I updated the CMake on my Mac as you said. But it seems only some warnings disappeared, those errors are still here.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12648#issuecomment-1523053408:160,error,errors,160,https://root.cern,https://github.com/root-project/root/issues/12648#issuecomment-1523053408,1,['error'],['errors']
Availability,"@Axel-Naumann The ROOT-Fedora32/noimt failure is unrelated:; ```; 07:32:51 -- Failed to find Python module pytest: Traceback (most recent call last):; 07:32:51 File ""<string>"", line 1, in <module>; 07:32:51 ModuleNotFoundError: No module named 'pytest'; 07:32:51 CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:164 (message):; 07:32:51 Could NOT find py_pytest (missing: PY_PYTEST); 07:32:51 Call Stack (most recent call first):; 07:32:51 /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:445 (_FPHSA_FAILURE_MESSAGE); 07:32:51 /home/sftnight/build/workspace/root-pullrequests-build/roottest/cmake/modules/RoottestMacros.cmake:1124 (find_package_handle_standard_args); 07:32:51 /home/sftnight/build/workspace/root-pullrequests-build/roottest/python/CMakeLists.txt:8 (find_python_module). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6952#issuecomment-746373723:38,failure,failure,38,https://root.cern,https://github.com/root-project/root/pull/6952#issuecomment-746373723,2,"['Error', 'failure']","['Error', 'failure']"
Availability,@Axel-Naumann The failure on ROOT-ubuntu16/nortcxxmod don't seem related to this PR but rather to the llvm 9 update:; ```; Error in cling::AutoLoadingVisitor::InsertIntoAutoLoadingState:; Missing FileEntry for testobject.h; requested to autoload type TestObj; Error in cling::AutoLoadingVisitor::InsertIntoAutoLoadingState:; Missing FileEntry for testobjectderived.h; requested to autoload type TestObjDerived; ```; and similar.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7286#issuecomment-786308076:18,failure,failure,18,https://root.cern,https://github.com/root-project/root/pull/7286#issuecomment-786308076,3,"['Error', 'failure']","['Error', 'failure']"
Availability,@Axel-Naumann The test failure seems both random and unrelated. Merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9764#issuecomment-1026392407:23,failure,failure,23,https://root.cern,https://github.com/root-project/root/pull/9764#issuecomment-1026392407,1,['failure'],['failure']
Availability,@Axel-Naumann This is great news ! Thank you for this insight.; I would be happy to test it as soon as it is released (or available),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13352#issuecomment-1660303040:122,avail,available,122,https://root.cern,https://github.com/root-project/root/issues/13352#issuecomment-1660303040,1,['avail'],['available']
Availability,@Axel-Naumann This is ready to merge. The last error where a roottest build glitch of sort (missing rootpcm files from ACliC),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6301#issuecomment-693665030:47,error,error,47,https://root.cern,https://github.com/root-project/root/pull/6301#issuecomment-693665030,1,['error'],['error']
Availability,"@Axel-Naumann When a file (or console) has been created without the `FILE_SHARE_READ | FILE_SHARE_WRITE` flags, there is no way to change this, but by closing it and re-opening it (or a new one) . And I suspect that a standard console doesn't have those flags, so when redirecting the output to a file with `.> blah.txt`, all the output is going to the file, without any echo on the console, and when typing `.>` to suppress the redirection, the file contains this kind of errors:; ```; Error 6 in textinput::TerminalDisplayWin attaching to console output: The handle is invalid. Error 6 in textinput::TerminalDisplayWin attaching / getting console info: The handle is invalid. Error 6 in textinput::TerminalDisplayWin writing to output: The handle is invalid.; ```; This patch solves those issues, even if I'm not sure if it is the root of the problem (it might be something else deep in the `MetaSema::actOnRedirectCommand` function).; NB I don't know if this can have any side effect, but I didn't see any so far...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5474#issuecomment-627959274:371,echo,echo,371,https://root.cern,https://github.com/root-project/root/pull/5474#issuecomment-627959274,5,"['Error', 'echo', 'error']","['Error', 'echo', 'errors']"
Availability,@Axel-Naumann Why we don't see any failures here? Either we have no xrootd on any PR builds or no runtime cxxmodules?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5175#issuecomment-602539942:35,failure,failures,35,https://root.cern,https://github.com/root-project/root/pull/5175#issuecomment-602539942,1,['failure'],['failures']
Availability,@Axel-Naumann Yesterday's latetest build was tried. Commit 7e2d21d728050081650f7a6bcdfa416d545e9d70 was tried just now. . cmake -DCMAKE_CXX_STANDARD=17 -DCMAKE_INSTALL_PREFIX=../root_install_master -Dall=ON -Dpython3=ON -DPYTHON3_EXECUTABLE=/opt/homebrew/bin/python3 -Dminuit2_mpi=ON -Dmpi=ON -Dminuit2_omp=ON -Dcxxmodules=ON -Dasimage=ON -Dbuiltin_afterimage=ON -Dbuiltin_cppzmq=ON -Dbuiltin_davix=ON -Dbuiltin_fftw3=ON -Dbuiltin_freetype=ON -Dbuiltin_gsl=ON -Dbuiltin_gtest=ON -Dbuiltin_openui5=ON -Dbuiltin_pcre=ON -Dbuiltin_tbb=ON -Dbuiltin_unuran=ON -Dbuiltin_veccore=ON -Dbuiltin_xrootd=ON -Dbuiltin_zeromq=ON -Dbuiltin_xxhash=ON -Dbuiltin_zlib=ON -Dbuiltin_zstd=ON -Dccache=ON -Dcefweb=ON -Dfcgi=ON -Dfftw3=ON -Dgviz=ON -Droofit_multiprocess=ON -Dtmva-pymva=ON -Dwebgui=ON -Dbuiltin_glew=ON -DVecGeom=OFF ../root. Here is the CMakeCache.txt file; [CMakeCache.txt](https://github.com/root-project/root/files/11317064/CMakeCache.txt). The fails begins with errors about glew.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12648#issuecomment-1521137429:962,error,errors,962,https://root.cern,https://github.com/root-project/root/issues/12648#issuecomment-1521137429,1,['error'],['errors']
Availability,@Axel-Naumann `projectroot.roottest-build.cling.parsing.roottest_cling_parsing_semicolon` failure looks 'real'?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7937#issuecomment-823969861:90,failure,failure,90,https://root.cern,https://github.com/root-project/root/pull/7937#issuecomment-823969861,1,['failure'],['failure']
Availability,"@Axel-Naumann as far as I understand your explanation should apply to whatever `std::something<MyClass>` is present in `OtherClass`, but actually if one replaces the `std::pair<int, MyClass>` in the original reproducer with `std::vector<MyClass>` or `std::array<MyClass, 2>` then the error vanishes. Am I missing something in your explanation?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10512#issuecomment-1117496527:284,error,error,284,https://root.cern,https://github.com/root-project/root/issues/10512#issuecomment-1117496527,1,['error'],['error']
Availability,"@Axel-Naumann by `This error is currently causing some developments for the LHCb experiment to be on stand-by` I just wanted to point out that this is a problem affecting the software developments of one of the LHC experiments (just in case you increase the priority of them rather than of other general issues). I also agree that the most straight-forward solution to us is changing the names of those functions. However, I have been always surprised that the ROOT interpreter includes the ""dangerous"" `using namespace std;` line, and I wonder if there is a way to avoid that (like via an instruction that can be passed to the interpreter). An important note is that the example above does not entirely reproduce the error that we see. We have run into a situation where `root -l -q test.cpp+` compiles and runs fine (also with `g++`) but `root -l -q test.cpp` doesn't, even in the situation where we include the line `using namespace std;`. I am currently struggling to create a more accurate minimal working example.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8370#issuecomment-858441493:23,error,error,23,https://root.cern,https://github.com/root-project/root/issues/8370#issuecomment-858441493,2,['error'],['error']
Availability,"@Axel-Naumann do you know what means next on ROOT-fedora27/noimt:; `09:35:57 From https://github.com/oshadura/root; 09:35:57 * [new branch] alfonso-zst-final -> oshadura-alfonso-zst-final; 09:35:57 Auto packing the repository in background for optimum performance.; 09:35:57 See ""git help gc"" for manual housekeeping.; 09:35:57 error: The last gc run reported the following. Please correct the root cause; 09:35:57 and remove .git/gc.log.; 09:35:57 Automatic cleanup will not be performed until the file is removed.; 09:35:57 ; 09:35:57 warning: There are too many unreachable loose objects; run 'git prune' to remove them.`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4323#issuecomment-540964530:328,error,error,328,https://root.cern,https://github.com/root-project/root/pull/4323#issuecomment-540964530,1,['error'],['error']
Availability,@Axel-Naumann failure is not related to my changes...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5738#issuecomment-635912560:14,failure,failure,14,https://root.cern,https://github.com/root-project/root/pull/5738#issuecomment-635912560,1,['failure'],['failure']
Availability,@Axel-Naumann failures are not related please let me know if it works for you!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4864#issuecomment-578847102:14,failure,failures,14,https://root.cern,https://github.com/root-project/root/pull/4864#issuecomment-578847102,1,['failure'],['failures']
Availability,"@Axel-Naumann failures seem unrelated, probably ready to merge",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5609#issuecomment-628130055:14,failure,failures,14,https://root.cern,https://github.com/root-project/root/pull/5609#issuecomment-628130055,1,['failure'],['failures']
Availability,@Axel-Naumann gentle ping,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12240#issuecomment-1430102111:21,ping,ping,21,https://root.cern,https://github.com/root-project/root/issues/12240#issuecomment-1430102111,1,['ping'],['ping']
Availability,@Axel-Naumann ping,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10690#issuecomment-1400524044:14,ping,ping,14,https://root.cern,https://github.com/root-project/root/pull/10690#issuecomment-1400524044,1,['ping'],['ping']
Availability,@Axel-Naumann ping (in Jakob's absence),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8429#issuecomment-1013562326:14,ping,ping,14,https://root.cern,https://github.com/root-project/root/pull/8429#issuecomment-1013562326,1,['ping'],['ping']
Availability,@Axel-Naumann ping :),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7094#issuecomment-771181027:14,ping,ping,14,https://root.cern,https://github.com/root-project/root/pull/7094#issuecomment-771181027,2,['ping'],['ping']
Availability,@Axel-Naumann ping.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9404#issuecomment-999890598:14,ping,ping,14,https://root.cern,https://github.com/root-project/root/pull/9404#issuecomment-999890598,2,['ping'],['ping']
Availability,@Axel-Naumann ping...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6606#issuecomment-831762538:14,ping,ping,14,https://root.cern,https://github.com/root-project/root/pull/6606#issuecomment-831762538,1,['ping'],['ping']
Availability,@Axel-Naumann ping? :),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2201#issuecomment-401099136:14,ping,ping,14,https://root.cern,https://github.com/root-project/root/pull/2201#issuecomment-401099136,1,['ping'],['ping']
Availability,"@Axel-Naumann thank you for configuring `liburing`, it looks like the tests ran and passed :) ; http://cdash.cern.ch/testDetails.php?test=2001040&build=11437. I am not sure about the python failures, and think the compiler warnings are maybe from using a newer gcc?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5919#issuecomment-668746900:190,failure,failures,190,https://root.cern,https://github.com/root-project/root/pull/5919#issuecomment-668746900,1,['failure'],['failures']
Availability,"@Axel-Naumann the assert failure was for a previous version of this PR, the one you reviewed already had the fix :). I think I addressed all comments in the newest revision, let's see if we get a green Jenkins with the current state of the master.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/807#issuecomment-320092642:25,failure,failure,25,https://root.cern,https://github.com/root-project/root/pull/807#issuecomment-320092642,1,['failure'],['failure']
Availability,@Axel-Naumann what's the hold up here? All the errors seem to be due to something else failing ...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2985#issuecomment-459792328:47,error,errors,47,https://root.cern,https://github.com/root-project/root/pull/2985#issuecomment-459792328,1,['error'],['errors']
Availability,"@Axel-Naumann yes, testing is one of the motivations, in particular continuous testing to prevent future regressions (now we can check against an external implementation, instead of just copying the current values and declaring them ""known-good""). The other reason, and why I think this might provide benefit for users, is performance: The original RANLUX implementation by James (at least its implementation in GSL) needs 40 seconds to sum 1 million numbers at luxury level 3, `gsl_rng_ranlux389` (luxury level 4) takes a bit more than 1 minute. The same sequence takes less than 8 seconds with `RanluxppCompatEngineJamesP[34]`, respectively (due to the LCG, you don't even pay for higher decorrelation!).; The difference is even larger for `std::ranlux48` (used directly, not through `std::uniform_real_distribution` which eats up more than one number per iteration): 2m55s compared to 12 seconds with `RanluxppCompatEngineStdRanlux48`. And because we can generate the same sequence, switching the generator won't change the output of a simulation / analysis / ... (only the interface is slightly different). Plus the users get the possibility to skip in the very same sequence without generating the intermediate numbers. Now we could argue that all users should switch to `RanluxppEngine2048`, which on top of that provides better seeding and even higher decorrelation. On the other hand, the implementations above have been around for some time now and are so widely available (`std::ranlux{24,48}` comes with any C++ compiler) that they will remain used...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8383#issuecomment-857732772:1472,avail,available,1472,https://root.cern,https://github.com/root-project/root/pull/8383#issuecomment-857732772,1,['avail'],['available']
Availability,"@Axel-Naumann, @amadio ping... What is the way forward for this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5786#issuecomment-648617819:23,ping,ping,23,https://root.cern,https://github.com/root-project/root/pull/5786#issuecomment-648617819,1,['ping'],['ping']
Availability,"@Axel-Naumann, @pcanal, it is debatable if should make `projectroot.roottest.python.JupyROOT.roottest_python_JupyROOT_cppcompleter_doctest` work. In [TTabCom](https://github.com/root-project/root/blob/master/core/rint/src/TTabCom.cxx#L458) we explicitly request to iterate over the currently available names. With GMI on if we write `TH1<tab>` we will get TH1{C,D,F,I,K,S} (and not TH1Editor from gui/ged) because `TH1` caused loading of Hist.pcm. If we type `TH<tab>` we will get {THashList,THashTable,THashTableIter}. I am leaning towards fixing the reference file... Do you see another way out?. EDIT1: The same holds of making `projectroot.bindings.pyroot.pythonizations.test.pyunittests_pyroot_pyz_rdataframe_asnumpy` work as it does call `gInterpreter->Declare(""TLorentzVector v;"")` where the `TCling::Declare` [promises](https://github.com/root-project/root/blob/master/core/metacling/src/TCling.cxx#L2936-L2961) that interface to behave as ""a compiler"" -- turning the GMI intentionally off...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5094#issuecomment-640116570:292,avail,available,292,https://root.cern,https://github.com/root-project/root/pull/5094#issuecomment-640116570,1,['avail'],['available']
Availability,"@Axel-Naumann, I shrunk down the demonstrator a bit further too. . In the release notes, I see three candidates.; https://sft.its.cern.ch/jira/browse/ROOT-10658 --> But looking further into it, the symptoms don't match to this affecting me. https://sft.its.cern.ch/jira/browse/ROOT-10663 --> This to me is the prime candidate, since it directly affects auto-loading which _seems_ to be at the core here. I took a look at the PR, https://github.com/root-project/root/pull/5713/files, but can't at a glance identify anything more. On the surface, https://sft.its.cern.ch/jira/browse/ROOT-10798 could also apply, but the fix really seems to boil down to something completely different.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8250#issuecomment-854857980:24,down,down,24,https://root.cern,https://github.com/root-project/root/issues/8250#issuecomment-854857980,2,['down'],['down']
Availability,"@Axel-Naumann, look like the failures are unrelated. It looks like this is a feature that can land.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1547#issuecomment-385176617:29,failure,failures,29,https://root.cern,https://github.com/root-project/root/pull/1547#issuecomment-385176617,1,['failure'],['failures']
Availability,"@Axel-Naumann, weren't these failures in the master and then fixed?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5443#issuecomment-618629617:29,failure,failures,29,https://root.cern,https://github.com/root-project/root/pull/5443#issuecomment-618629617,1,['failure'],['failures']
Availability,"@Axel-Naumann, what should we do - these failures seem unrelated...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11574#issuecomment-1413749430:41,failure,failures,41,https://root.cern,https://github.com/root-project/root/pull/11574#issuecomment-1413749430,1,['failure'],['failures']
Availability,@Axel-Naumann: This looks good to merge seems to me. The static analyser error about the missing include file TApplicationCommandLineOptionsHelp.h is because this include is generated at build time and of course not visible when the static analyser ran.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4529#issuecomment-542103453:73,error,error,73,https://root.cern,https://github.com/root-project/root/pull/4529#issuecomment-542103453,1,['error'],['error']
Availability,"@ChristianTackeGSI As @oshadura said, the error comes from a timeout (after 4 hours) while trying to checkout [roottest](https://github.com/root-project/roottest). This is due to a bug (?) in CI/git on Windows:; ```; 12:24:10 * Connection #0 to host github.com left intact; 12:24:10 bash: /dev/tty: No such device or address; 16:23:23 Cancelling nested steps due to timeout; 16:23:23 Sending interrupt signal to process; 16:23:30 ^CTerminate batch job (Y/N)? ; 16:23:30 ^Cscript returned exit code -1073741510; ```; Simply forking [roottest](https://github.com/root-project/roottest) prevent this timeout",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7031#issuecomment-809942554:42,error,error,42,https://root.cern,https://github.com/root-project/root/pull/7031#issuecomment-809942554,1,['error'],['error']
Availability,@ChristianTackeGSI to actually test and avoid failures on Windows you will need to fork roottest.git (there is a bug in CI). Sorry for this!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7031#issuecomment-809579803:46,failure,failures,46,https://root.cern,https://github.com/root-project/root/pull/7031#issuecomment-809579803,1,['failure'],['failures']
Availability,"@DenizCiger @Axel-Naumann , this added dependency on `#!/usr/bin/python` which on rhel8/9 is not available. Can this be changed to either `#!/usr/bin/python3` or `#!/usr/bin/env python` ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13354#issuecomment-1668496131:97,avail,available,97,https://root.cern,https://github.com/root-project/root/pull/13354#issuecomment-1668496131,1,['avail'],['available']
Availability,"@Dr15Jones , this is now available in last night's CMSSW ROOT6 build",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16737#issuecomment-2437687498:25,avail,available,25,https://root.cern,https://github.com/root-project/root/pull/16737#issuecomment-2437687498,1,['avail'],['available']
Availability,"@HDembinski , thank you very much for this nice improvements for the logging in Minuit2!!; I like the way you have implemented the MnPrint class. I think all the needed functionality is there and the PR looks good to me. ; Before merging let me look at it in detail and also try it. After a first look I don't see any particular problems. ; There some errors reported by the Travis CI, but I think those are unrelated to your changes. Cheers. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6705#issuecomment-720398708:352,error,errors,352,https://root.cern,https://github.com/root-project/root/pull/6705#issuecomment-720398708,1,['error'],['errors']
Availability,"@HDembinski Hi , ; there are some compiler errors in MnPrint and a warning in FumiliGradientCalculator.cxx.; If you could fix those , it would be great ! Thank you !!!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6705#issuecomment-734403356:43,error,errors,43,https://root.cern,https://github.com/root-project/root/pull/6705#issuecomment-734403356,1,['error'],['errors']
Availability,"@HDembinski please fork also [roottest,](https://github.com/root-project/roottest) to prevent build failure on `windows10/cxx14`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2215#issuecomment-600096635:100,failure,failure,100,https://root.cern,https://github.com/root-project/root/pull/2215#issuecomment-600096635,1,['failure'],['failure']
Availability,"@HDembinski yes those are known unrelated failure, it's #6753",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6762#issuecomment-723108142:42,failure,failure,42,https://root.cern,https://github.com/root-project/root/pull/6762#issuecomment-723108142,1,['failure'],['failure']
Availability,@Harshalzzzzzzz please fork also [roottest](https://github.com/root-project/roottest) to prevent failures (timeout) on Windows nodes. Thanks,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7141#issuecomment-775208966:97,failure,failures,97,https://root.cern,https://github.com/root-project/root/pull/7141#issuecomment-775208966,1,['failure'],['failures']
Availability,"@KrisThielemans can you share the full TBB and XRootD error files? The snippets above only show the last lines after `make` gave up, not what the actual error is (in case of TBB it's only a warning that is not fatal)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14520#issuecomment-1923273499:54,error,error,54,https://root.cern,https://github.com/root-project/root/issues/14520#issuecomment-1923273499,2,['error'],['error']
Availability,@KrisThielemans thanks a lot for reporting. I agree with @hahnjo . We did not see that error on any of our platforms unfortunately.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14520#issuecomment-2143500806:87,error,error,87,https://root.cern,https://github.com/root-project/root/issues/14520#issuecomment-2143500806,1,['error'],['error']
Availability,"@LadaOndris : So that's a SWAN issue in that case. I am not a SWAN expert. . In SWAN, Is there any log window showing the ROOT error messages?. @etejedor : to you have an idea ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12296#issuecomment-1438501382:127,error,error,127,https://root.cern,https://github.com/root-project/root/issues/12296#issuecomment-1438501382,1,['error'],['error']
Availability,"@LadaOndris I see you are using SWAN may be it swallowed the error message? do you get a message if you use the normal ROOT?. I tried to run your script but it gives me:. ```; % python3 nan.py ; Traceback (most recent call last):; File ""/Users/couet/roottest/nan.py"", line 8, in <module>; np.arange(num_values, dtype='float'),; NameError: name 'np' is not defined. ```. the script is:. ### nan.py. ```; import ROOT; canvas = ROOT.TCanvas(f""test_canvas"", ""title"", 400, 400); canvas.Draw(); canvas.cd(). num_values = 5; g = ROOT.TGraph(num_values,; np.arange(num_values, dtype='float'),; np.full(num_values, fill_value=np.nan)); g.SetMarkerSize(2); g.SetMarkerStyle(2); g.DrawClone('AP'); ```; What is `np`? can you provide a running script?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12296#issuecomment-1438421583:61,error,error,61,https://root.cern,https://github.com/root-project/root/issues/12296#issuecomment-1438421583,1,['error'],['error']
Availability,"@MarkusFrankATcernch, as @ferdymercury mentioned, the link to all classes is still available on the left side, along with all the other links that were previously in the top bar (in version 6.16). Only the placement has changed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15906#issuecomment-2185701254:83,avail,available,83,https://root.cern,https://github.com/root-project/root/issues/15906#issuecomment-2185701254,1,['avail'],['available']
Availability,@Moelf just checking if I overlooked anything: will you ping me when the PR is adjusted according to the discussion?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14982#issuecomment-2017667906:56,ping,ping,56,https://root.cern,https://github.com/root-project/root/pull/14982#issuecomment-2017667906,1,['ping'],['ping']
Availability,@Neel-Shah-29 : see my comments above for fixing the errors you are having.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11086#issuecomment-1222177951:53,error,errors,53,https://root.cern,https://github.com/root-project/root/pull/11086#issuecomment-1222177951,1,['error'],['errors']
Availability,"@Neumann-A please ignore failures here - we're currently in rough waters; we know which failures to expect and which not, we'll tell you if we need you to look at any failure.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12705#issuecomment-1536488885:25,failure,failures,25,https://root.cern,https://github.com/root-project/root/pull/12705#issuecomment-1536488885,3,['failure'],"['failure', 'failures']"
Availability,@SimeonEhrig you said (in https://github.com/root-project/cling/pull/284#issuecomment-545871201 ). > I have removed the part of the code that requires changes to the clang base. Yet the errors above seem to come from a missing llvm patch. Could you clarify?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4616#issuecomment-550074580:186,error,errors,186,https://root.cern,https://github.com/root-project/root/pull/4616#issuecomment-550074580,1,['error'],['errors']
Availability,"@StephanTLavavej Thanks a lot for your help! Unfortunately, I can only try with VS 17.10 preview 6 (the only one available for now), and hence cannot try to reproduce the issue and see if the PR properly fixes it. I will try again as soon as v17.11 preview is available",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15321#issuecomment-2098417723:113,avail,available,113,https://root.cern,https://github.com/root-project/root/issues/15321#issuecomment-2098417723,2,['avail'],['available']
Availability,@Teemperor ping. Please clang-format so we can merge. The change seems sensible afterall.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/832#issuecomment-320652186:11,ping,ping,11,https://root.cern,https://github.com/root-project/root/pull/832#issuecomment-320652186,1,['ping'],['ping']
Availability,@Teemperor ping...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/831#issuecomment-325218227:11,ping,ping,11,https://root.cern,https://github.com/root-project/root/pull/831#issuecomment-325218227,1,['ping'],['ping']
Availability,"@Teemperor, why don't we put an extra check `!rootcling || rootcling && ROOT_MODULES`? This patch was supposed to fix an error that libc/stl cannot be found in rootcling stage2. PS: We will see if we need to reopen once PR #1394 lands.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1395#issuecomment-347989780:121,error,error,121,https://root.cern,https://github.com/root-project/root/pull/1395#issuecomment-347989780,1,['error'],['error']
Availability,@Zeff020 Multiprocess is not supported on Windows (see [RootBuildOptions.cmake#L352-L355](https://github.com/root-project/root/blob/master/cmake/modules/RootBuildOptions.cmake#L352-L355)). The relevant code must be protected and not cause any compilation error,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11791#issuecomment-1344267851:255,error,error,255,https://root.cern,https://github.com/root-project/root/pull/11791#issuecomment-1344267851,1,['error'],['error']
Availability,@agarciamontoro Very nice speedups. Could you please take a look at the Jenkins failures? They seem relevant for this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/793#issuecomment-317667037:80,failure,failures,80,https://root.cern,https://github.com/root-project/root/pull/793#issuecomment-317667037,1,['failure'],['failures']
Availability,"@agheata What do we need to do to solve:; ```; Error in <TVirtualGeoConverter::Instance()>: ; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++; It appears that you are missing or having outdated support for VecGeom package. To enable it, configure ROOT with:; -Dvecgeom -DCMAKE_PREFIX_PATH=<vecgeom_prefix_path>/lib/CMake/VecGeom; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12315#issuecomment-1430164226:47,Error,Error,47,https://root.cern,https://github.com/root-project/root/pull/12315#issuecomment-1430164226,1,['Error'],['Error']
Availability,"@agheata it was a compile error with `dev=on` due to `-Werror`.; It was actually already fixed by https://github.com/root-project/root/pull/16142, but I temporarily put it on this PR so the CI could build correctly",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15853#issuecomment-2259837272:26,error,error,26,https://root.cern,https://github.com/root-project/root/pull/15853#issuecomment-2259837272,1,['error'],['error']
Availability,"@albert-github ; That's a nice idea, and could be something to think about. I think we will anyway to build the whole documentation every night because:; - the various modules refer to each other a lot,; - we want to run all the code available in the doc. We have test suites to validate de software but the documentation is surely an extra one.; - now it takes ""only"" a night so it is still doable to build it daily. If at some point the building becomes unmanageable the approach you suggest might be a solution.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8742#issuecomment-888362590:234,avail,available,234,https://root.cern,https://github.com/root-project/root/issues/8742#issuecomment-888362590,1,['avail'],['available']
Availability,"@albert-github BTW, why do you want to do it without internet? And what are the errors you got on Windows?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8742#issuecomment-887612527:80,error,errors,80,https://root.cern,https://github.com/root-project/root/issues/8742#issuecomment-887612527,1,['error'],['errors']
Availability,@alja Please check compiler error on Mac,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9005#issuecomment-922054367:28,error,error,28,https://root.cern,https://github.com/root-project/root/pull/9005#issuecomment-922054367,1,['error'],['error']
Availability,"@alja Should I merge it?; The only small doubt I have - probably we should use `override` specifier when implementing such ""complex"" interfaces. Otherwise at some point simple mistake in list of args will lead to error, which could be detected by compiler.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4030#issuecomment-509813570:213,error,error,213,https://root.cern,https://github.com/root-project/root/pull/4030#issuecomment-509813570,2,['error'],['error']
Availability,"@alja here is the error:; ```; REveManager.cxx(1115,48): error C2440: '<function-style-cast>': cannot convert from 'nullptr' to 'time_t' ; ```; see also https://godbolt.org/z/8crcWjYdh",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9048#issuecomment-930415903:18,error,error,18,https://root.cern,https://github.com/root-project/root/pull/9048#issuecomment-930415903,2,['error'],['error']
Availability,"@amadio , I have tested running the executable `tmva/sofie/test/emitFromONNX` on the machine directly. ; With the current master, I don't have the PCH dependency and I have : ; ```; sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ rm ../../../etc/allDict.cxx.pch; sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX ; terminate called after throwing an instance of 'std::bad_alloc'; what(): std::bad_alloc; Aborted (core dumped); ```; with your PR I have instead: ; ```; sftnight@SFT-ubuntu-1804-3:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX ; error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'; fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found; Segmentation fault (core dumped); ```. I think before merging, it would be nice to understand why after your changes in CMAKE affecting only libCore, a simple executable not using the ROOT I/O requires the PCH",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10690#issuecomment-1403728768:687,error,error,687,https://root.cern,https://github.com/root-project/root/pull/10690#issuecomment-1403728768,6,"['error', 'fault']","['error', 'fault']"
Availability,"@amadio . I have problem with roottest. I think, it has to do with new structure of cmake files. ; Here is output of cmake. ````; [shell] cmake /d/roottest (05.07. 12:23:42) !396 ; -- The C compiler identification is GNU 8.1.1; -- The CXX compiler identification is GNU 8.1.1; -- Check for working C compiler: /usr/bin/cc; -- Check for working C compiler: /usr/bin/cc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/bin/c++; -- Check for working CXX compiler: /usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Check for bitness: Found 64 bit architecture.; -- Found PythonInterp: /usr/bin/python3.6 (found version ""3.6.5"") ; -- Found PythonLibs: /usr/lib64/libpython2.7.so (found version ""2.7.15"") ; -- Scanning subdirectories for tests...; CMake Error at cmake/modules/RootCTestMacros.cmake:134 (ROOT_SHOW_OPTIONS):; Unknown CMake command ""ROOT_SHOW_OPTIONS"".; Call Stack (most recent call first):; root/meta/CMakeLists.txt:16 (ROOTTEST_ADD_TEST). -- Configuring incomplete, errors occurred!; See also ""/d/build/roottest/CMakeFiles/CMakeOutput.log"". ````",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2280#issuecomment-402678002:1029,Error,Error,1029,https://root.cern,https://github.com/root-project/root/pull/2280#issuecomment-402678002,2,"['Error', 'error']","['Error', 'errors']"
Availability,@amadio ; As idea: ; Can we provide build option which enables maximal-available c++ standard and root7 when at least c++14 is there? Or simply enable root7 an all platforms where it make sense? ; Otherwise it always a chalenge to test root7 features on Jenkins,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3831#issuecomment-493590447:71,avail,available,71,https://root.cern,https://github.com/root-project/root/pull/3831#issuecomment-493590447,2,['avail'],['available']
Availability,"@amadio ; I get the following error when building with `-Dbuiltin_vc=ON -Dbuiltin_veccore=ON`. ```; CMakeFiles/RIOObjs.dir/src/TFile.cxx.o: In function `runLibraryAbiCheck':; /home/arif7/CERN/build/include/Vc/version.h:115: undefined reference to `Vc_1::Common::checkLibraryAbi(unsigned int, unsigned int, char const*)'; CMakeFiles/RIOObjs.dir/src/TFileCacheRead.cxx.o: In function `runLibraryAbiCheck':; /home/arif7/CERN/build/include/Vc/version.h:115: undefined reference to `Vc_1::Common::checkLibraryAbi(unsigned int, unsigned int, char const*)'; collect2: error: ld returned 1 exit status; io/io/CMakeFiles/RIO.dir/build.make:157: recipe for target 'lib/libRIO.so' failed; make[2]: *** [lib/libRIO.so] Error 1; CMakeFiles/Makefile2:22576: recipe for target 'io/io/CMakeFiles/RIO.dir/all' failed; make[1]: *** [io/io/CMakeFiles/RIO.dir/all] Error 2; Makefile:151: recipe for target 'all' failed; make: *** [all] Error 2; ```. Is there some other flag I need to pass to cmake ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2236#issuecomment-399959816:30,error,error,30,https://root.cern,https://github.com/root-project/root/pull/2236#issuecomment-399959816,5,"['Error', 'error']","['Error', 'error']"
Availability,"@amadio @bluehood I do not get all these missing symbols errors and retriggered the build. If the PR builds pass, I am in favour to quickly merge so to proceed with the second part of the plan, i.e.:; - Add extern specialisation for all TVec operations; - Compile libVecOps with Ofast; - VDT On by default; - If VDT available, use VDT functions instead of standard ones; all this will be transparent for the user who will just see things boosted...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1896#issuecomment-383365704:57,error,errors,57,https://root.cern,https://github.com/root-project/root/pull/1896#issuecomment-383365704,2,"['avail', 'error']","['available', 'errors']"
Availability,@amadio Can you please run a Jenkins build again ?; I linked the VectorizedTMath file to all required libraries in the most recent commit. > https://cdash.cern.ch/index.php?project=ROOT&filtercount=1&showfilters=1&field1=buildname/string&compare1=63&value1=2236. The errors in the link do not come up now.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2236#issuecomment-448569088:267,error,errors,267,https://root.cern,https://github.com/root-project/root/pull/2236#issuecomment-448569088,1,['error'],['errors']
Availability,"@amadio I am getting next errors:. -- TEST COMMAND -- ; cd /mnt/build/workspace/root-pullrequests-build/build/roottest/root/io/stdarray; /usr/bin/timeout -s USR2 270s /usr/bin/root.exe -e '#define ClingWorkAroundMissingDynamicScope' -e '#define ClingWorkAroundUnnamedInclude' -e '#define ClingWorkAroundMissingSmartInclude' -e '#define ClingWorkAroundNoDotInclude' -e '#define ClingWorkAroundMissingAutoLoadingForTemplates' -e '#define ClingWorkAroundAutoParseUsingNamespace' -e '#define ClingWorkAroundTClassUpdateDouble32' -e '#define ClingWorkAroundAutoParseDeclaration' -e '#define ClingWorkAroundMissingUnloading' -e '#define ClingWorkAroundBrokenUnnamedReturn' -e '#define ClingWorkAroundUnnamedDetection2' -e 'gSystem->SetBuildDir(""/mnt/build/workspace/root-pullrequests-build/build/roottest/root/io/stdarray"",true)' -e 'gSystem->AddDynamicPath(""/mnt/build/workspace/root-pullrequests-build/build/roottest/root/io/stdarray"")' -e 'gROOT->SetMacroPath(""/mnt/build/workspace/root-pullrequests-build/roottest/root/io/stdarray"")' -e 'gInterpreter->AddIncludePath(""-I/mnt/build/workspace/root-pullrequests-build/build/roottest/root/io/stdarray"")' -e 'gSystem->AddIncludePath(""-I/mnt/build/workspace/root-pullrequests-build/build/roottest/root/io/stdarray"")' -q -l -b /mnt/build/workspace/root-pullrequests-build/roottest/root/io/stdarray/aclicModelWrite.C+; -- BEGIN TEST OUTPUT --; /usr/bin/timeout: failed to run command /usr/bin/root.exe: No such file or directory. ===============================. I am confused, it is because you uninstalled root binaries at fedora node?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3940#issuecomment-502695412:26,error,errors,26,https://root.cern,https://github.com/root-project/root/pull/3940#issuecomment-502695412,1,['error'],['errors']
Availability,"@amadio I cannot reproduce locally and valgrind does not complain. A `Snapshot` test that snapshots 33 tiny files and subsequently deletes them timed out. It could be a vm with a network fs and an overloaded bandwidth?. The failures on 32bits are more worrying to me, but again hard to reproduce",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2197#issuecomment-397609468:224,failure,failures,224,https://root.cern,https://github.com/root-project/root/pull/2197#issuecomment-397609468,1,['failure'],['failures']
Availability,"@amadio I know that the value `CUDA_STANDARD` is correct, however it ignores it. Adding the option `-DCMAKE_CUDA_STANDARD_REQUIRED=ON` the error changes but still insists that the standard is C++17.; ```; Target ""TMVA"" requires the language dialect ""CUDA17"" (with compiler; extensions), but CMake does not know the compile flags to use to enable it.; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5598#issuecomment-627418555:139,error,error,139,https://root.cern,https://github.com/root-project/root/pull/5598#issuecomment-627418555,1,['error'],['error']
Availability,"@amadio I recompiled first `Vc` with `gcc 6.4` and then ROOT with the same. Also, I used `-fabi-version=0` while building ROOT. But the same error pops up.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2236#issuecomment-400049633:141,error,error,141,https://root.cern,https://github.com/root-project/root/pull/2236#issuecomment-400049633,1,['error'],['error']
Availability,"@amadio I see that the Windows 10 build is failing. Unfortunately I am being denied access to the page due to lack of proper credentials. Can you please post the link to error log here, if it's not much trouble ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2236#issuecomment-453330275:170,error,error,170,https://root.cern,https://github.com/root-project/root/pull/2236#issuecomment-453330275,1,['error'],['error']
Availability,@amadio Oh....ignore that commit for now. I forgot a step whilst rebasing.; Currently there seems to another error while compiling with new changes from master.; I'm trying to figure it out. Will ask on mattermost if any help is required.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2236#issuecomment-422324755:109,error,error,109,https://root.cern,https://github.com/root-project/root/pull/2236#issuecomment-422324755,1,['error'],['error']
Availability,"@amadio The end goal is to allow index manipulations with TVec.; I don't know if there are other reasons, but one is to distinguish indexing with a mask `v[{true, false}]` from indexing with a list of indeces (currently unsupported, but possibly very useful) `v[{1,2}]`.; The second could also be done with something like `Take(v, {1,2})`, now that I think about it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2147#issuecomment-395308184:148,mask,mask,148,https://root.cern,https://github.com/root-project/root/pull/2147#issuecomment-395308184,1,['mask'],['mask']
Availability,"@amadio Update: This is (virtually) solved now. The error was not here but in TThreadExecutor; the solution is in #803, so I'll rebase my branch when that PR is merged and solve the minor clang complaints then.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/793#issuecomment-317759413:52,error,error,52,https://root.cern,https://github.com/root-project/root/pull/793#issuecomment-317759413,1,['error'],['error']
Availability,"@amadio `v[{true,false}]` is returning only the first element of a two-elements RVec. Users are not expected to write that, but it's what something like `v[v > 0]` boils down to. I think this syntax is nice to have. Now my understanding is that _if_ we also want to allow `v[idxs]` where `idxs` is a list of indeces which select part of `v`, we need a way to distinguish between boolean masks and integer masks, hence `RStrongBool`.; But the use-case for `v[idxs]` is not as clear to me as I thought. @dpiparo what is an example of this? (and what do you think about `Take(v, {1,2})`?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2147#issuecomment-395704533:170,down,down,170,https://root.cern,https://github.com/root-project/root/pull/2147#issuecomment-395704533,6,"['down', 'mask']","['down', 'masks']"
Availability,"@amadio ah yes I remember those. look at line 242 of the cxx file. If the calculation of negative log likelihood failes, because the walk got out of bounds it sets the value very high so the algorithm turns away from this point. Minuit needed this error but in a MCMC minimizer it does not matter if it gets out of bounds. I forgot about that problem, the error messages are unnecessary. Thats why they are turned off at line 243. Sorry just turning off the error message was not a good idea, beginners error. Do you have a better idea how to solve that problem?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1327#issuecomment-349219350:248,error,error,248,https://root.cern,https://github.com/root-project/root/pull/1327#issuecomment-349219350,4,['error'],['error']
Availability,"@amadio can we merge this, please? The build failure was due to the Vc PCH issue. Or is there a reason to hold this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/842#issuecomment-322399457:45,failure,failure,45,https://root.cern,https://github.com/root-project/root/pull/842#issuecomment-322399457,1,['failure'],['failure']
Availability,"@amadio regarding the failure in `dataframe_simple`, I have no idea why it should only write half of the data-points to disk, is there any way we could be missing a final flush of the `TBufferMerger`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1085#issuecomment-333372165:22,failure,failure,22,https://root.cern,https://github.com/root-project/root/pull/1085#issuecomment-333372165,1,['failure'],['failure']
Availability,"@amadio you will need to help me out here. I have no idea what the error is about. What sort of build is it that is failing? It seems to me that it's attempting a build with `builtin_vdt=TRUE`. But that worked for me with these changes just fine. Also, how the heck is a generated `ROOTConfig.cmake` file being used during the configuration of ROOT itself? :confused:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11844#issuecomment-1339152573:67,error,error,67,https://root.cern,https://github.com/root-project/root/pull/11844#issuecomment-1339152573,1,['error'],['error']
Availability,"@amadio, I don't think that's true. It is my impression that the merge request is built against the latest master (something the build log output supports). So rebuilding a PR _does_ potentially build different code each time. (To clarify, the initial build failure was in `math/vecops/CMakeFiles/VecOps.dir/G__VecOps.cxx.o`)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1958#issuecomment-385715531:258,failure,failure,258,https://root.cern,https://github.com/root-project/root/pull/1958#issuecomment-385715531,1,['failure'],['failure']
Availability,"@amadio, failures are not relative to my changes...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1063#issuecomment-332561386:9,failure,failures,9,https://root.cern,https://github.com/root-project/root/pull/1063#issuecomment-332561386,1,['failure'],['failures']
Availability,"@andresailer it looks like it might work (the errors look different), or did I miss something?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10759#issuecomment-1188667181:46,error,errors,46,https://root.cern,https://github.com/root-project/root/issues/10759#issuecomment-1188667181,1,['error'],['errors']
Availability,"@andresailer reports; ```; ...; Error in cling::AutoLoadingVisitor::InsertIntoAutoLoadingState:; Missing FileEntry for include/IOIMPL/TrackerPulseIOImpl.h; requested to autoload type IOIMPL::TrackerPulseIOImpl; Error in cling::AutoLoadingVisitor::InsertIntoAutoLoadingState:; Missing FileEntry for include/IOIMPL/TrackerRawDataIOImpl.h; requested to autoload type IOIMPL::TrackerRawDataIOImpl; Error in cling::AutoLoadingVisitor::InsertIntoAutoLoadingState:; Missing FileEntry for include/IOIMPL/VertexIOImpl.h; requested to autoload type IOIMPL::VertexIOImpl; Error in <TInterpreter::AutoParse>: Error parsing payload code for class EVENT::LCEvent with content:. #line 1 ""EVENT dictionary payload""; ...; Error in <TClass::LoadClassInfo>: no interpreter information for class EVENT::LCEvent is available even though it has a TClass initialization routine.; Error in <TClass::LoadClassInfo>: no interpreter information for class EVENT::LCEvent is available even though it has a TClass initialization routine.; Error in <TClass::LoadClassInfo>: no interpreter information for class EVENT::LCEvent is available even though it has a TClass initialization routine.; ```; and more, http://cdash.cern.ch/testDetails.php?test=16531307&build=211395 from `Test: LCIO_pyLCIO_import_test (Passed)` (cough cough) - this might be pre-existing before the llvm13 upgrade",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11921#issuecomment-1357852969:32,Error,Error,32,https://root.cern,https://github.com/root-project/root/pull/11921#issuecomment-1357852969,11,"['Error', 'avail']","['Error', 'available']"
Availability,"@arpi-r can you check please a failure, looks like <any> is not available as a part of std still on Ubuntu 16 and 18.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3531#issuecomment-473680548:31,failure,failure,31,https://root.cern,https://github.com/root-project/root/pull/3531#issuecomment-473680548,2,"['avail', 'failure']","['available', 'failure']"
Availability,"@arpi-r, what I am asking is to fix a failure on our CI node ROOT-ubuntu16/rtcxxmod, where it was not able to find <any> header: `error: header 'any' not found`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3531#issuecomment-474256525:38,failure,failure,38,https://root.cern,https://github.com/root-project/root/pull/3531#issuecomment-474256525,2,"['error', 'failure']","['error', 'failure']"
Availability,"@atolosadelgado I can reproduce it (and many more similar errors) using the XCode generator. We need to investigate if this is possible to fix at all within our current build system. Would you perhaps know a bit more about why it behaves differently from traditional ones (e.g. Unix Makefiles, Ninja)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14595#issuecomment-1932253739:58,error,errors,58,https://root.cern,https://github.com/root-project/root/issues/14595#issuecomment-1932253739,1,['error'],['errors']
Availability,"@bbockelm I fix several issues addressed in your comments. Could you look at it now?; clang-tidy-modernize fails due to ""sleep(0.2)"". I tried to change it to ""usleep(200000)"", however, the performance was much slower. Removing sleep function also causes slow down.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1010#issuecomment-332305935:259,down,down,259,https://root.cern,https://github.com/root-project/root/pull/1010#issuecomment-332305935,1,['down'],['down']
Availability,"@bbockelm we can start to review PR.. I cant reproduce failures on ROOT-performance-centos7-multicore/default both as separate build on node and or even in build directory, I suspect it could be a problem of ""very"" parallel builds (-j56). I will test and let you know..",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3947#issuecomment-503461511:55,failure,failures,55,https://root.cern,https://github.com/root-project/root/pull/3947#issuecomment-503461511,1,['failure'],['failures']
Availability,"@behrenhoff `-Dtesting=ON -Droottest=ON` (if I'm not mistaken you also need to clone the roottest repo next to the root repo for it to be picked up). `std::forward`-ing forwarding references is generally correct, this is TDataFrame's code expecting an rvalue and breaking upon receiving something else...probably my fault for not making the receiving code generic enough, but since everything works as it is and this is internal code anyway maybe we should keep the `std::move`s after all.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1585#issuecomment-363402143:316,fault,fault,316,https://root.cern,https://github.com/root-project/root/pull/1585#issuecomment-363402143,1,['fault'],['fault']
Availability,"@bellenot , @Axel-Naumann , we are trying to test latest ROOT 6.28 [changes](https://github.com/root-project/root/compare/96ca920f34bf6ec1e8f70ed253c7e4228ea0d3cc...v6-28-00-patches) and our CI tests are failing with `Too many open files` and system logs shows [a]. . Note that 96ca920f34bf6ec1e8f70ed253c7e4228ea0d3cc worked fine for CMSSW, it is just the last two commits on 6-28 patches branch which are causing this error. Could this PR be the reason for these failures?. [a]; ```; Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded; Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded; Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded; Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded; Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded; Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded; Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded; Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13793#issuecomment-1771483502:420,error,error,420,https://root.cern,https://github.com/root-project/root/pull/13793#issuecomment-1771483502,2,"['error', 'failure']","['error', 'failures']"
Availability,@bellenot : I could use some help with the errors :) http://cdash.cern.ch/viewBuildError.php?buildid=616819; Can you see what went wrong?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3283#issuecomment-456568074:43,error,errors,43,https://root.cern,https://github.com/root-project/root/pull/3283#issuecomment-456568074,1,['error'],['errors']
Availability,@bellenot ; Failure is:; ```; civetweb.obj : error LNK2019: unresolved external symbol _EVP_Digest referenced in function _send_websocket_handshake [C:\build\workspace\root-pullrequests-build\build\net\http\RHTTP.vcxproj]; civetweb.obj : error LNK2019: unresolved external symbol _EVP_get_digestbyname referenced in function _send_websocket_handshake [C:\build\workspace\root-pullrequests-build\build\net\http\RHTTP.vcxproj]; C:\build\workspace\root-pullrequests-build\build\bin\libRHTTP.dll : fatal error LNK1120: 2 unresolved externals [C:\build\workspace\root-pullrequests-build\build\net\http\RHTTP.vcxproj]; ```; Some extra ssl library is necessary for windows?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10380#issuecomment-1133600368:12,Failure,Failure,12,https://root.cern,https://github.com/root-project/root/pull/10380#issuecomment-1133600368,4,"['Failure', 'error']","['Failure', 'error']"
Availability,@bellenot ; Well just to build the documentation why should I connect to the Internet and especially don't know what is retrieved / send (this is of course always a concern). The problems in windows have to do with python usage. As I have a mixed system Windows / Cygwin this gives some problems. I now disabled the cygwin in the path and followed the instructions as provided. the cmake generation looks like not to give the word error anymore. Now building ...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8742#issuecomment-887632364:431,error,error,431,https://root.cern,https://github.com/root-project/root/issues/8742#issuecomment-887632364,1,['error'],['error']
Availability,@bellenot @Axel-Naumann small ping on this so it doesn't fall off the view (though there isn't much rush on this and I appreciate that there is plenty of other work that legitimately needs attention).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10755#issuecomment-1161279297:30,ping,ping,30,https://root.cern,https://github.com/root-project/root/pull/10755#issuecomment-1161279297,1,['ping'],['ping']
Availability,@bellenot @guitargeek . Seems to be now it can be compiled on Windows. I just enable new feature only when OpenSSL 3.0 is available.; Same kind of PR I submit to civetweb: https://github.com/civetweb/civetweb/pull/1080,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10380#issuecomment-1170081102:122,avail,available,122,https://root.cern,https://github.com/root-project/root/pull/10380#issuecomment-1170081102,1,['avail'],['available']
Availability,@bellenot Can you approve PR now? I fix compilation error on Windows,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6241#issuecomment-679904342:52,error,error,52,https://root.cern,https://github.com/root-project/root/pull/6241#issuecomment-679904342,1,['error'],['error']
Availability,"@bellenot Could the Windows failures have any relation to my changes? I think the permission errors could be a problem with the node itself, maybe?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10890#issuecomment-1174747459:28,failure,failures,28,https://root.cern,https://github.com/root-project/root/pull/10890#issuecomment-1174747459,2,"['error', 'failure']","['errors', 'failures']"
Availability,@bellenot I am confused by the errors here: https://github.com/root-project/root/pull/6327#issuecomment-706198898. It looks like it's picking up wrong the namespace?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6327#issuecomment-706222479:31,error,errors,31,https://root.cern,https://github.com/root-project/root/pull/6327#issuecomment-706222479,1,['error'],['errors']
Availability,@bellenot I do not understand the failures in the tests. But I am sure has nothing to do with the actual proposed changes. Can this be merged to be ready for tonight's LCG builds?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13946#issuecomment-1781299879:34,failure,failures,34,https://root.cern,https://github.com/root-project/root/pull/13946#issuecomment-1781299879,1,['failure'],['failures']
Availability,@bellenot Is the Windows error related to this PR or pre-existing?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10416#issuecomment-1106722803:25,error,error,25,https://root.cern,https://github.com/root-project/root/pull/10416#issuecomment-1106722803,1,['error'],['error']
Availability,"@bellenot Is this ready to be merged? The tests failures are fixed on master now, and are not related to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1088#issuecomment-333820231:48,failure,failures,48,https://root.cern,https://github.com/root-project/root/pull/1088#issuecomment-333820231,1,['failure'],['failures']
Availability,"@bellenot Maybe my guess is wrong, checking other PR https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/121249/consoleFull I see that python3.8 is actually available on this node. Do you know if CMake was updated on this node as well?; (FYI I just checked on my MacOS 11 and PR works)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8336#issuecomment-870521864:178,avail,available,178,https://root.cern,https://github.com/root-project/root/pull/8336#issuecomment-870521864,1,['avail'],['available']
Availability,"@bellenot Sorry, I indeed misread the windows error :(",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7132#issuecomment-783644412:46,error,error,46,https://root.cern,https://github.com/root-project/root/pull/7132#issuecomment-783644412,1,['error'],['error']
Availability,@bellenot Thanks a lot. The error has disappeared.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9607#issuecomment-1018220951:28,error,error,28,https://root.cern,https://github.com/root-project/root/issues/9607#issuecomment-1018220951,1,['error'],['error']
Availability,"@bellenot Thanks for your fix. But after updating source code with commit ed5c88e7e5fbe7205352480cb6847de5c5d3c189, we found new error under '/permissive-' as below:; `F:\gitP\root-project\root\gui\webdisplay\src\RWebDisplayHandle.cxx(288,66): error C2440: 'initializing': cannot convert from 'TString' to 'std::basic_string<char,std::char_traits<char>,std::allocator<char>>'`; Could you please help to take a look at the issue again?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9607#issuecomment-1017301685:129,error,error,129,https://root.cern,https://github.com/root-project/root/issues/9607#issuecomment-1017301685,2,['error'],['error']
Availability,"@bellenot The new test code contains an include path injection which on Windows ends up being:; ```; ... root.exe ... -e '.include C:/build/workspace/root-pullrequests-build/roottest/root/io/issue-7754/mwe/include' ....; ```; which comes from the CMake list:; ```; set(RootExternalIncludes -e "".include ${CMAKE_CURRENT_SOURCE_DIR}/mwe/include""); ```; but it does not work on Windows (it works on Linux); ```; rocessing C:/build/workspace/root-pullrequests-build/roottest/root/io/issue-7754/mwe/combined.cxx+(0)...; Info in <TWinNTSystem::ACLiC>: creating shared library C:/build/workspace/root-pullrequests-build/build/roottest/root/io/issue-7754/combined_cxx.dll; In file included from input_line_9:6:; In file included from C:/build/workspace/root-pullrequests-build/roottest/root/io/issue-7754/mwe/combined.cxx:2:; C:/build/workspace/root-pullrequests-build/roottest/root/io/issue-7754/mwe/src/SpectrometerChannelID.cc:7:10: fatal error: 'SpectrometerChannelID.hh' file not found; #include ""SpectrometerChannelID.hh""; ^~~~~~~~~~~~~~~~~~~~~~~~~~; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9585#issuecomment-1014551071:934,error,error,934,https://root.cern,https://github.com/root-project/root/pull/9585#issuecomment-1014551071,1,['error'],['error']
Availability,"@bellenot The windows failure is due:; ```; 23:43:52 CustomBuild:; 23:43:52 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/base/CMakeLists.txt; 23:43:52 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build/build/core/base/CMakeFiles/generate.stamp is up-to-date.; 23:43:52 Generating G__Core.cxx, ../../lib/libCore.rootmap; 23:43:52 In file included from input_line_1:1:; 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\new:6:; 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\exception:7:; 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\type_traits:6:; 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xstddef:6:; 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\cstddef:8:; 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xtr1common:6:; 23:43:52 80>C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\yvals.h(297,5): error G47C585C4: STL1000: Unexpected compiler version, expected Clang 6 or newer. [C:\build\workspace\root-pullrequests-build\build\core\base\G__Core.vcxproj]; 23:43:52 #error STL1000: Unexpected compiler version, expected Clang 6 or newer.; 23:43:52 ^; 23:43:52 Assertion failed: (DC->hasExternalVisibleStorage() || Pos != Map->end()) && ""no lookup entry for decl"", file c:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\ast\declbase.cpp, line 1362; 23:43:52 Exit code 0xc0000409; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2391#issuecomment-409023585:22,failure,failure,22,https://root.cern,https://github.com/root-project/root/pull/2391#issuecomment-409023585,3,"['error', 'failure']","['error', 'failure']"
Availability,"@bellenot Windows looks like broken on master :; ;(; ```; 16:37:53 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->; 16:37:53 ""C:\build\workspace\root-pullrequests-build\build\roofit\roofitcore\RooFitCore.vcxproj"" (default target) (340) ->; 16:37:53 (ClCompile target) -> ; 16:37:53 c:\build\workspace\root-pullrequests-build\root\roofit\roofitcore\src\mempoolforroosets.h(164): error C2065: '__PRETTY_FUNCTION__': undeclared identifier [C:\build\workspace\root-pullrequests-build\build\roofit\roofitcore\RooFitCore.vcxproj]; 16:37:53 c:\build\workspace\root-pullrequests-build\root\roofit\roofitcore\src\mempoolforroosets.h(164): error C2065: '__PRETTY_FUNCTION__': undeclared identifier [C:\build\workspace\root-pullrequests-build\build\roofit\roofitcore\RooFitCore.vcxproj]; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2930#issuecomment-436669471:423,error,error,423,https://root.cern,https://github.com/root-project/root/pull/2930#issuecomment-436669471,2,['error'],['error']
Availability,"@bellenot You see error messages in the begin? It is exactly this.; As I understand, @Axel-Naumann create list of supported options and all others disabled by default.; One need to add `builtin_civetweb` into such list.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14194#issuecomment-1846859708:18,error,error,18,https://root.cern,https://github.com/root-project/root/pull/14194#issuecomment-1846859708,1,['error'],['error']
Availability,"@bellenot any idea how to make windows happy on this one? :sweat_smile: . ```; 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->; 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\bindings\pyroot\PyROOT.vcxproj"" (default target) (310) ->; 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj"" (default target) (319) ->; 21:03:23 (Link target) -> ; 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::Slot & ROOT::Detail::RDF::CustomColExtraArgs::Slot::tag"" (?tag@Slot@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]; 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry & ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry::tag"" (?tag@SlotAndEntry@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]; 21:03:23 C:\build\workspace\root-pullrequests-build\build\bin\libROOTDataFrame.dll : fatal error LNK1120: 2 unresolved externals [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]; ```. ...uhm ok, maybe I know, it might be that windows does not like uninitialized static refs...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2232#issuecomment-399785767:478,error,error,478,https://root.cern,https://github.com/root-project/root/pull/2232#issuecomment-399785767,3,['error'],['error']
Availability,@bellenot can confirm but I think we never built the documentation on Windows. We do not really need it. I never do it myself and I do not think he did it either. The documentation is built every night via a jenkins task. For people wanting a local version of the documentation we provide a download page https://root.cern/reference/ . Building the full ROOT documentation is very long... several hours. Nobody does that. Only the developers build some part of it locally . And I do not think any of us does it on Windows.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8742#issuecomment-887644064:291,down,download,291,https://root.cern,https://github.com/root-project/root/issues/8742#issuecomment-887644064,1,['down'],['download']
Availability,@bellenot can we ignore these failures on windows?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2322#issuecomment-407723149:30,failure,failures,30,https://root.cern,https://github.com/root-project/root/pull/2322#issuecomment-407723149,1,['failure'],['failures']
Availability,@bellenot can you have a quick look? The failure on Windows is due to un-related tests,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11788#issuecomment-1330229156:41,failure,failure,41,https://root.cern,https://github.com/root-project/root/pull/11788#issuecomment-1330229156,1,['failure'],['failure']
Availability,@bellenot can you help with the windows build error?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7794#issuecomment-814347177:46,error,error,46,https://root.cern,https://github.com/root-project/root/pull/7794#issuecomment-814347177,1,['error'],['error']
Availability,@bellenot does this just boil down to enable PYROOT if the python executable is set?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8095#issuecomment-1925271905:30,down,down,30,https://root.cern,https://github.com/root-project/root/issues/8095#issuecomment-1925271905,1,['down'],['down']
Availability,@bellenot friendly ping :),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12149#issuecomment-1659256478:19,ping,ping,19,https://root.cern,https://github.com/root-project/root/pull/12149#issuecomment-1659256478,1,['ping'],['ping']
Availability,"@bellenot gentle ping on this. I'm not sure what the PR cadence is for backports, so if these are only done on an irregular basis by a shifter then please ignore my ping. Just thought I'd check.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10076#issuecomment-1074628153:17,ping,ping,17,https://root.cern,https://github.com/root-project/root/pull/10076#issuecomment-1074628153,2,['ping'],['ping']
Availability,@bellenot ping. That addresses an issue discussed here https://root-forum.cern.ch/t/compilation-error-using-the-cxxmodule-option-with-root-generate-dictionary/55465/9. cc: @LukasBreitwieser.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13213#issuecomment-1694681609:10,ping,ping,10,https://root.cern,https://github.com/root-project/root/pull/13213#issuecomment-1694681609,2,"['error', 'ping']","['error-using-the-cxxmodule-option-with-root-generate-dictionary', 'ping']"
Availability,@bellenot thank you for a help with .lib file! Now it works and looks like failure is not any more a fault of new LZMA builtins.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3290#issuecomment-456406726:75,failure,failure,75,https://root.cern,https://github.com/root-project/root/pull/3290#issuecomment-456406726,2,"['failure', 'fault']","['failure', 'fault']"
Availability,"@bellenot, . Bertrand,; Have you an idea that happens with the build system?; May be one should restart build?; Only first two messages - warning on MacOS and error on Windows are relevant and I fix them",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1371#issuecomment-347207861:159,error,error,159,https://root.cern,https://github.com/root-project/root/pull/1371#issuecomment-347207861,1,['error'],['error']
Availability,"@bellenot, I suspect the windows failure is due to the max_size limit of std::string. Could you confirm?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3687#issuecomment-483939857:33,failure,failure,33,https://root.cern,https://github.com/root-project/root/pull/3687#issuecomment-483939857,1,['failure'],['failure']
Availability,"@bellenot, the zlib problem is fixed now also on Windows, but there are sill build errors related to something else:; ```; (compiling source file '../BUILTIN_CFITSIO/eval_y.c'); ; C:\ROOT-CI\build\CFITSIO-prefix\src\BUILTIN_CFITSIO\cfortran.h(280,1): error C1189: #error: ""cfortran.h: Can't find your environment among: - GNU gcc (g77) on Linux. - MIPS cc and f77 2.0. (e.g. Silicon Graphics, DECstations, ...) - IBM AIX XL C and FORTRAN Compiler/6000 Version 01.01.0000.0000 - VAX VMS CC 3.1 and FORTRAN 5.4. - Alpha VMS DEC C 1.3 and DEC FORTRAN 6.0. - Alpha OSF DEC C and DEC Fortran for OSF/1 AXP Version 1.2 - Apollo DomainOS 10.2 (sys5.3) with f77 10.7 and cc 6.7. - CRAY - NEC SX-4 SUPER-UX - CONVEX - Sun - PowerStation Fortran with Visual C++ - HP9000s300/s700/s800 Latest test with: HP-UX A.08.07 A 9000/730 - LynxOS: cc or gcc with f2c. - VAXUltrix: vcc,cc or gcc with f2c. gcc or cc with f77. - f77 with vcc works; but missing link magic for f77 I/O. - NO fort. None of gcc, cc or vcc generate required names. - f2c/g77: Use #define f2cFortran, or cc -Df2cFortran - gfortran: Use #define gFortran, or cc -DgFortran (also necessary for g77 with -fno-f2c option) - NAG f90: Use #define NAGf90Fortran, or cc -DNAGf90Fortran - Absoft UNIX F77: Use #define AbsoftUNIXFortran or cc -DAbsoftUNIXFortran - Absoft Pro Fortran: Use #define AbsoftProFortran - Portland Group Fortran: Use #define pgiFortran - Intel Fortran: Use #define INTEL_COMPILER"" [C:\ROOT-CI\build\CFITSIO-prefix\src\BUILTIN_CFITSIO-build\cfitsio.vcxproj] [C:\ROOT-CI\build\builtins\cfitsio\BUILTIN_CFITSIO.vcxproj]; (compiling source file '../BUILTIN_CFITSIO/f77_wrap1.c'); ```; This PR has been much less trivial than I thought :laughing: . Maybe we can just avoid doing this check, as suggested in the source itself:; https://github.com/HEASARC/cfitsio/blob/f220e6e2c570f19228609ee081f735df0ddb204b/cfortran.h#L254",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15508#issuecomment-2112196842:83,error,errors,83,https://root.cern,https://github.com/root-project/root/pull/15508#issuecomment-2112196842,6,['error'],"['error', 'errors']"
Availability,"@bellenot, this seems to work very well! I was just triggering a CI rerun (the Windows 64 bit failures are unrelated and also seen in other PRs). Can the commits be squashed and merged?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12341#issuecomment-2121944475:94,failure,failures,94,https://root.cern,https://github.com/root-project/root/pull/12341#issuecomment-2121944475,1,['failure'],['failures']
Availability,@bellenot:; Another one...; [ 64%] Built target G__Netx; [ 64%] Building CXX object net/netx/CMakeFiles/Netx.dir/src/TXNetFile.cxx.o; /srv/ussapc/home/ussapc/sw/root-check-internet-connection/net/netx/src/TXNetFile.cxx:58:10: fatal error: XrdClient/XrdClient.hh: No such file or directory; #include <XrdClient/XrdClient.hh>; ^~~~~~~~~~~~~~~~~~~~~~~~; compilation terminated.; gmake[2]: *** [net/netx/CMakeFiles/Netx.dir/build.make:63: net/netx/CMakeFiles/Netx.dir/src/TXNetFile.cxx.o] Error 1; gmake[1]: *** [CMakeFiles/Makefile2:33171: net/netx/CMakeFiles/Netx.dir/all] Error 2; gmake: *** [Makefile:152: all] Error 2,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8292#issuecomment-872258432:232,error,error,232,https://root.cern,https://github.com/root-project/root/issues/8292#issuecomment-872258432,4,"['Error', 'error']","['Error', 'error']"
Availability,"@bendavid just fyi, #7898 by @Axel-Naumann should fix these test failures, it's a bug in cling. We should be able to merge this PR then.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7630#issuecomment-822391931:65,failure,failures,65,https://root.cern,https://github.com/root-project/root/pull/7630#issuecomment-822391931,1,['failure'],['failures']
Availability,"@bendavid the remaining failures are real (ignoring tmva), can you please take a look?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7499#issuecomment-995833738:24,failure,failures,24,https://root.cern,https://github.com/root-project/root/pull/7499#issuecomment-995833738,1,['failure'],['failures']
Availability,"@bendavid. ```; 2:09:55 In file included from input_line_7:20:; 12:09:55 In file included from C:/build/workspace/root-pullrequests-build/build/include\ROOT/TReentrantRWLock.hxx:26:; 12:09:55 In file included from C:/build/workspace/root-pullrequests-build/build/include\tbb/enumerable_thread_specific.h:23:; 12:09:55 In file included from C:/build/workspace/root-pullrequests-build/build/include\tbb/atomic.h:42:; 12:09:55 In file included from C:/build/workspace/root-pullrequests-build/build/include\tbb/tbb_machine.h:113:; 12:09:55 In file included from C:/build/workspace/root-pullrequests-build/build/include\tbb/tbb_stddef.h:119:; 12:09:55 C:/build/workspace/root-pullrequests-build/build/include\tbb/internal/_tbb_windef.h(28,2): error GAAAB8493: TBB requires linkage with multithreaded C/C++ runtime library. Choose multithreaded DLL runtime in project settings, or use /MD[d] compiler switch. [C:\build\workspace\root-pullrequests-build\build\core\thread\G__Thread.vcxproj]; 12:09:55 #error TBB requires linkage with multithreaded C/C++ runtime library. \; 12:09:55 ^; 12:09:56 CUSTOMBUILD : error : C:/build/workspace/root-pullrequests-build/build/bin/rootcling_stage1.exe: compilation failure (C:/build/workspace/root-pullrequests-build/build/bin/libThreada1d22a0ca9_dictUmbrella.h) [C:\build\workspace\root-pullrequests-build\build\core\thread\G__Thread.vcxproj]; 12:09:56 G__multimap2Dict.vcxproj -> C:\build\workspace\root-pullrequests-build\build\core\clingutils\G__multimap2Dict.dir\Release\G__multimap2Dict.lib; 12:09:56 G__unordered_mapDict.vcxproj -> C:\build\workspace\root-pullrequests-build\build\core\clingutils\G__unordered_mapDict.dir\Release\G__unordered_mapDict.lib; 12:09:57 G__forward_listDict.vcxproj -> C:\build\workspace\root-pullrequests-build\build\core\clingutils\G__forward_listDict.dir\Release\G__forward_listDict.lib; 12:09:57 Command exited with the value: 1; 12:09:57 MakeCommand:""C:\Program Files\CMake\bin\cmake.exe"" --build . --config ""Release"" -- /maxcpuco",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7260#issuecomment-790743698:738,error,error,738,https://root.cern,https://github.com/root-project/root/pull/7260#issuecomment-790743698,1,['error'],['error']
Availability,"@beniz, sorry for starting this after a long time, but I think it is good to have this library integrated in ROOT. ; I see now cameos can early build with cmake and this will make it easier to also download and install the library automatically. ; I will try to fix issues from the ROOT side myself, but feel free to comment and correct me",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7044#issuecomment-760951435:198,down,download,198,https://root.cern,https://github.com/root-project/root/pull/7044#issuecomment-760951435,1,['down'],['download']
Availability,@bernhardmgruber looks like it break compilation with ``` builtin_glew ``` : `CMake Error: failed to create symbolic link '/.../build/include/GL/eglew.h': no such file or directory`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6010#issuecomment-655979301:84,Error,Error,84,https://root.cern,https://github.com/root-project/root/pull/6010#issuecomment-655979301,1,['Error'],['Error']
Availability,"@bluehood @Axel-Naumann The HTTPS error is specific to macOS. As far as I can tell, Davix resp. libNeon does not find the default CAs on Mac. The same problem is for ROOT files, e.g. ```; TFile *f = TFile::Open(""https://root.cern.ch/files/h1big.root"");; ```. works on Linux but not on Mac. For this test, I could ifdef the URLs to HTTP on Mac. But perhaps we should rather solve the underlying CA store issue on Mac.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2608#issuecomment-421982623:34,error,error,34,https://root.cern,https://github.com/root-project/root/pull/2608#issuecomment-421982623,1,['error'],['error']
Availability,@bluehood @amadio @dpiparo The CMakeLists.txt file should already [turn off](https://github.com/root-project/root/pull/2322/files#diff-0e2476491161fbc84e4e5df06555d009R25) this data source when sqlite is not available. Am I missing something?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2322#issuecomment-416983038:208,avail,available,208,https://root.cern,https://github.com/root-project/root/pull/2322#issuecomment-416983038,1,['avail'],['available']
Availability,"@bluehood Ah, okay, no problem. I'm currently adding a test to check that both trees get written, but no, I don't know how to check printed errors. Is a test necessary for such a case? A quick check indicates that this PR only affects the printed error statement, not the saved output.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4964#issuecomment-585259930:140,error,errors,140,https://root.cern,https://github.com/root-project/root/pull/4964#issuecomment-585259930,2,['error'],"['error', 'errors']"
Availability,"@bluehood Currently, Update does not work _at all_ with MT, and it is possible for a user to get the wrong output without an error ever being thrown. This is independent of this merge request and effectively breaks ROOT for this use case, hence the ""critical"" priority on the [JIRA task](https://sft.its.cern.ch/jira/plugins/servlet/mobile#issue/ROOT-10573). It would probably be best to resolve the JIRA task before dealing with this MR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4965#issuecomment-592032641:125,error,error,125,https://root.cern,https://github.com/root-project/root/pull/4965#issuecomment-592032641,1,['error'],['error']
Availability,"@bluehood Do we want to support filling a histogram with the characters of a `std::string`? I could also just make some compile time error, that we don't support filling histograms from `std::string`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4850#issuecomment-590251094:133,error,error,133,https://root.cern,https://github.com/root-project/root/pull/4850#issuecomment-590251094,1,['error'],['error']
Availability,"@bluehood no, they address different problems. PR4649 is already merged and prevents errors being raised due to multiple threads writing to the same directory. This PR addresses the case of writing to an existing directory using the ""update"" option; it's just that no fix is required for MT since it already expects that it may write to an existing directory.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4964#issuecomment-585254273:85,error,errors,85,https://root.cern,https://github.com/root-project/root/pull/4964#issuecomment-585254273,1,['error'],['errors']
Availability,"@cdeil , #1680 was merged; you should be able to extract Minuit trivially now (I don't think packages have been produced yet, though). Look at [math/minuit2/README.md](https://github.com/root-project/root/blob/master/math/minuit2/README.md) and [math/minuit2/DEVELOP.md](https://github.com/root-project/root/blob/master/math/minuit2/DEVELOP.md). If you'd like to use setuptools instead of cmake, see https://github.com/GooFit/GooFit/blob/master/python/Minuit2/setup.py (not continuously tested, may need some modifications). @lmoneta, @amadio do you think it would be a good idea to at least merge 2f320cd ? That's a logical error (the whole file is only about 30 lines). The other change may be okay, but I'm not really sure you couldn't get around it with a const cast in user code, and making a non-mutex/atomic mutable doesn't seem to be ideal to me; but it would be fairly ""safe"". If it needs to be done here, what about making it an atomic then it would be logically correct to make it mutable. https://github.com/root-project/root/blob/9791bc8896da09284c273378fd0054a48732bc22/math/minuit2/src/MinimumBuilder.cxx#L12-L25",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1677#issuecomment-384403343:625,error,error,625,https://root.cern,https://github.com/root-project/root/pull/1677#issuecomment-384403343,1,['error'],['error']
Availability,"@cern.ch>; Date: Mon Apr 25 11:58:45 2022 +0200. [RF] Also compare parameter errors in RooFitResult::isIdentical(NoCov). The `RooFitResult::isIdentical` method so far only compared parameter; values and covariance matrix values. Even though comparing the final; parameter errors would be redundant with the covariance matrix checks,; it's still important to check parameter errors for two reasons:. 1. Initial parameter errors need to be compared, because the the; initial error determins the initial step size which influences the; minimization path. If initial errors are different, the final; parameter values are almost never identical. Catching differences in initial parameter errors informs the user; that differences in fit result are because of the starting; conditions. 2. In the case of `RooFitResult::isIdenticalNoCov`, we need to check; the error of final parameters because there is no comparison of; covariance matrix values. The signature of the public function `isIdenticalNoCov` is extended by a; tolerance parameter for the error comparison. This is expected to not; break user code, because the function was only introduced in 6.26 and is; so far only used in a single unit test (`testSumW2Error`). The `testRooAbsPdf` unit test didn't reset the initial parameter errors; correctly, which is now fixed.; + gcc --version; gcc (GCC) 12.0.1 20220413 (Red Hat 12.0.1-0); Copyright (C) 2022 Free Software Foundation, Inc.; This is free software; see the source for copying conditions. There is NO; warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. + cmake -GNinja -S source -B build -Dxrootd=OFF; (...skip...); -- ROOT Configuration. System Linux-5.16.9-200.rog.fc35.x86_64; Processor 8 core AMD Ryzen 7 5800HS with Radeon Graphics (x86_64); Build type Release; Install path /usr/local; Compiler GNU 12.0.1; Compiler flags:; C -fdiagnostics-color=always -Wno-implicit-fallthrough -pipe -Wall -W -pthread -O3 -DNDEBUG; C++ -fdiagnostics-color=always -std=c++17",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10478:1938,toler,tolerance,1938,https://root.cern,https://github.com/root-project/root/issues/10478,2,"['error', 'toler']","['error', 'tolerance']"
Availability,"@chissg I see in logs: ; ```; [2020-12-15T08:57:43.694Z] /usr/bin/ld: CMakeFiles/MathMore.dir/src/cblas.cxx.o: in function `ROOT::Math::Blas::AMultB(int, int, int, double const*, double const*, double*)':; [2020-12-15T08:57:43.694Z] cblas.cxx:(.text+0x30): undefined reference to `cblas_dgemm'; [2020-12-15T08:57:43.694Z] /usr/bin/ld: CMakeFiles/MathMore.dir/src/cblas.cxx.o: in function `ROOT::Math::Blas::ATMultB(int, int, int, double const*, double const*, double*)':; [2020-12-15T08:57:43.694Z] cblas.cxx:(.text+0x70): undefined reference to `cblas_dgemm'; [2020-12-15T08:57:43.694Z] collect2: error: ld returned 1 exit status; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6950#issuecomment-745150420:598,error,error,598,https://root.cern,https://github.com/root-project/root/pull/6950#issuecomment-745150420,1,['error'],['error']
Availability,"@chrisburr Did you build ROOT this time to test the fix? Believe me, It's easier to find the problems if you test it locally. You get the complete errors, we both save time and resources and you're not letting our cold machines crush your hope.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1379#issuecomment-349968443:147,error,errors,147,https://root.cern,https://github.com/root-project/root/pull/1379#issuecomment-349968443,1,['error'],['errors']
Availability,"@couet , ping.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10059#issuecomment-2241280424:9,ping,ping,9,https://root.cern,https://github.com/root-project/root/issues/10059#issuecomment-2241280424,1,['ping'],['ping']
Availability,@couet @Axel-Naumann . Errors on `fedora28/native` has nothing to do with submitted code,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2729#issuecomment-426402734:23,Error,Errors,23,https://root.cern,https://github.com/root-project/root/pull/2729#issuecomment-426402734,1,['Error'],['Errors']
Availability,@couet @Axel-Naumann the failure on mac1014/cxx17 in tutorial/v7/line.cxx is unclear and has happened in a couple of other PR but is not easily reproducible (even on the machine with the failure).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3964#issuecomment-503507609:25,failure,failure,25,https://root.cern,https://github.com/root-project/root/pull/3964#issuecomment-503507609,2,['failure'],['failure']
Availability,@couet Ping!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5108#issuecomment-598676065:7,Ping,Ping,7,https://root.cern,https://github.com/root-project/root/pull/5108#issuecomment-598676065,2,['Ping'],['Ping']
Availability,"@couet Thanks for the information. Is my interpretation correct that the documentation is created from an inplace position (i.e the `root/documentation/doxygen`) and directly written into the root directory of the user instead of a special build directory, in case this is the case this is, I think, not so nice and should be corrected. A big pity that a ROOT is required to just for generating the documentation. I'll give it a try... Looks like I'm already failing in an early stage on the VDT build as here I get errors about M_PI (and friends)like:; ```; In file included from /cygdrive/e/Programs/github_repositories/normal/root/build_normal/VDT-prefix/src/VDT/include/sincos.h:27,; from /cygdrive/e/Programs/github_repositories/normal/root/build_normal/VDT-prefix/src/VDT/include/sin.h:30,; from /cygdrive/e/Programs/github_repositories/normal/root/build_normal/VDT-prefix/src/VDT/include/vdtMath.h:6,; from /cygdrive/e/Programs/github_repositories/normal/root/build_normal/VDT-prefix/src/VDT/src/vdtMath_signatures.cc:2:; /cygdrive/e/Programs/github_repositories/normal/root/build_normal/VDT-prefix/src/VDT/include/vdtcore_common.h:40:25: error: ‘M_PI’ was not declared in this scope; 40 | const double TWOPI = 2.*M_PI;; | ^~~~; ```. During the cmake build I saw:; ```; -- Looking for VDT; -- Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY) (Required is at least version ""0.4""); -- VDT not found. Ensure that the installation of VDT is in the CMAKE_PREFIX_PATH; -- Switching ON 'builtin_vdt' option; ```. I'm using Cygwin with g++ (GCC) 10.2.0",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8742#issuecomment-887523622:516,error,errors,516,https://root.cern,https://github.com/root-project/root/issues/8742#issuecomment-887523622,2,['error'],"['error', 'errors']"
Availability,"@couet this is a real issue, I could reproduce it with a debug build of the current master branch (see [here](https://root-forum.cern.ch/t/rdataframe-multithreading-seg-faults-with-python-for-loops/53963/2)). Maybe it's an impression but it seems to happen more often if I move the first window before pressing enter at the prompt the first time. @dudarboh in order to let Olivier reproduce this, can you reproduce it on lxplus or in a docker container?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12496#issuecomment-1479809129:169,fault,faults-with-python-for-loops,169,https://root.cern,https://github.com/root-project/root/issues/12496#issuecomment-1479809129,1,['fault'],['faults-with-python-for-loops']
Availability,"@couet this might mean that you need to run clang one through the remote display, to sign the license and download what's missing. Just running `clang --help` in a terminal should be enough. Can you do it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7635#issuecomment-805065675:106,down,download,106,https://root.cern,https://github.com/root-project/root/pull/7635#issuecomment-805065675,1,['down'],['download']
Availability,"@couet you can merge at your convenience as far as I am concerned.; @ellert thanks for the changes you proposed. I have a curiosity: did you encounter any other failure related to dimensions on disk, especially with IO tests, with Fedora 41?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15735#issuecomment-2165518812:161,failure,failure,161,https://root.cern,https://github.com/root-project/root/pull/15735#issuecomment-2165518812,1,['failure'],['failure']
Availability,@dan131riley Can you look into those errors?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1706#issuecomment-371224351:37,error,errors,37,https://root.cern,https://github.com/root-project/root/pull/1706#issuecomment-371224351,1,['error'],['errors']
Availability,"@davidlange6, can we pick up this PR in the CXXMODULES IB and test if we bring down memory footprint?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10910#issuecomment-1178840502:79,down,down,79,https://root.cern,https://github.com/root-project/root/pull/10910#issuecomment-1178840502,1,['down'],['down']
Availability,"@davidrohr :; > The second error ... inconsistency in registered.... however is the same problem we saw before, with the 2 LLVM instances clashing. Damn. I tried with `LD_PRELOAD`ing libllvm and that worked *with* this PR, and failed *without* this PR. Can you come up with a reproducer for what you see?. I'll merge this nonetheless.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4689#issuecomment-566585572:27,error,error,27,https://root.cern,https://github.com/root-project/root/pull/4689#issuecomment-566585572,1,['error'],['error']
Availability,"@dciangot I forgot to ask, I will not be able to access the file in your mini reproducer?; (I am going to try to test it @ UNL but I wanted to ask anyway); ```;  │  ~/C/root-rntuple/builds │   bearer-tokens ?1  root -l https://212.189.205.141:31094//W.root  ✔ │ 4m 29s  │ 16:08:36 . root [0]; Attaching file https://212.189.205.141:31094//W.root as _file0...; Error in <TWebFile::GetHead>: https://212.189.205.141:31094//W.root?: Forbidden (403); Error in <TWebFile::GetFromWeb10>: https://212.189.205.141:31094//W.root?: Forbidden (403); (TFile *) nullptr; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6802#issuecomment-776812312:368,Error,Error,368,https://root.cern,https://github.com/root-project/root/issues/6802#issuecomment-776812312,2,['Error'],['Error']
Availability,"@dciangot sorry, I fixed a small typo and now I see that it will not crash anymore for your setup (I am getting _""Server certificate verification failed: issuer is not trusted after 3 attempts"",_ but it was expected?):; ```; root -l https://212.189.205.141:31094//W.root  ✔ │ 15:24:50 ; Error in <DavixStat>: can not stat the file with davix: Result (Neon): Server certificate verification failed: issuer is not trusted after 3 attempts (6); root [0]; Attaching file https://212.189.205.141:31094//W.root as _file0...; Error in <DavixOpen>: can not open file ""https://212.189.205.141:31094//W.root"" with davix: Result (Neon): Server certificate verification failed: issuer is not trusted after 3 attempts (6); (TFile *) nullptr; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6802#issuecomment-777501087:289,Error,Error,289,https://root.cern,https://github.com/root-project/root/issues/6802#issuecomment-777501087,2,['Error'],['Error']
Availability,"@dpiparo #3364 , which includes these changes, has been merged, but at least the change in `Histo1D` does not seem to resolve the issue and as far as I understand is redundant, do you agree?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3363#issuecomment-459746818:166,redundant,redundant,166,https://root.cern,https://github.com/root-project/root/pull/3363#issuecomment-459746818,1,['redundant'],['redundant']
Availability,"@dpiparo - is it possible to pull up the logs? Unfortunately, the error message says simply the error message is in a different log file.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/590#issuecomment-304902488:66,error,error,66,https://root.cern,https://github.com/root-project/root/pull/590#issuecomment-304902488,2,['error'],['error']
Availability,"@dpiparo . > Doxygen doc can be embedded from the start (it is in some places and it is not in others). ; > In addition this is the opportunity to comment a backend properly. Yes. Some of code was copy-pasted before Olivier redo doxygen formatting.; Now we need to do the same with that code. > The code can be clang-formatted. If it really needed - I can do this. I prefer to use it only for new commits. > The copyright statemets can be made uniform. That is best example? In ROOT sources there are many variants. > The guards ... are useless. Ok. This can be removed. > ClassDef and ClassImp are needed. I have them for TObject-derived classes. Do we need them for others?. > The 70 commits are the right granularity (is the code compiling for each one of them?). Yes, all commits can be compiled - when rallback to appropriate date all other used ROOT classes. > We need all these dictionaries and with streamers:. Yes, these are objects exchanged between server and clients. I uses JSON conversion for them. > The globbing of headers in the CMakeLists can be replaced by the explicit list . Ok. I will check which headers are really needed. > The code ... needs yet another read . This is wrapper for TVirtualX - some objects painters (including TCanvas) doing sometime direct X11 calls. Some of them I block, another map into SVG. > I absolutely do not want to slow you down but perhaps try and reduce the future maintenance cost with a minimal investment today. Most of the comments can be resolved by Olivier @couet We will discuss tomorrow how to proceed . > that was fast. It is result of approx 18 months of work",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2780#issuecomment-428706018:1376,down,down,1376,https://root.cern,https://github.com/root-project/root/pull/2780#issuecomment-428706018,2,"['down', 'mainten']","['down', 'maintenance']"
Availability,@dpiparo . Idea to have such auto-zoom functionality in interactive canvas. It is already implemented in JSROOT and also available in web-based canvas.; Can be see by pressing `Ctrl` + `*`. See on screenshot: ; ![autozoom](https://github.com/user-attachments/assets/d35e5d67-1fa8-491f-9e53-2b54ee310c12). From this point of view issue is resolved - once web-canvas will be switched as default.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14538#issuecomment-2255064975:121,avail,available,121,https://root.cern,https://github.com/root-project/root/issues/14538#issuecomment-2255064975,1,['avail'],['available']
Availability,"@dpiparo 3.73*3.09<<14.67 when it should be greater. Vec (maybe the problem here?) and MT+Vec are calls to the same exact function. The numerical results are within a tolerance of 1%, the speedups have been normalized to the number of calls. Maybe better caching? To be investigated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1068#issuecomment-333056415:167,toler,tolerance,167,https://root.cern,https://github.com/root-project/root/pull/1068#issuecomment-333056415,1,['toler'],['tolerance']
Availability,@dpiparo @amadio thank you very much ! I just recompiled with both options..; No error message anymore!!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10556#issuecomment-1932209776:81,error,error,81,https://root.cern,https://github.com/root-project/root/issues/10556#issuecomment-1932209776,1,['error'],['error']
Availability,"@dpiparo @bluehood From my side this is ready for review. I think it makes sense to have remote reading of files in a possible follow-up PR. Please let me know if you think it makes sense to add an integration test to roottest. In this case, how would I deal with the fact that this datasource depends on the sqlite availability?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2322#issuecomment-406598298:316,avail,availability,316,https://root.cern,https://github.com/root-project/root/pull/2322#issuecomment-406598298,1,['avail'],['availability']
Availability,"@dpiparo Failure is in `tutorial-v7-ntuple-ntpl007_mtFill`, has nothing to do with `TGxxx` classes",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16357#issuecomment-2326280738:9,Failure,Failure,9,https://root.cern,https://github.com/root-project/root/pull/16357#issuecomment-2326280738,1,['Failure'],['Failure']
Availability,"@dpiparo I have closed the two PRs that are included in this one and added the default labels instead of ""do not merge"". I will fix the `clang-format` issues and that would make this PR ready for merging on my part (the `roottest_root_multicore_tthrobj_ttreeview_regression_build` failures are expected and are fixed by [PR 63](https://github.com/root-project/roottest/pull/63) in root-project/roottest).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/835#issuecomment-320441681:281,failure,failures,281,https://root.cern,https://github.com/root-project/root/pull/835#issuecomment-320441681,1,['failure'],['failures']
Availability,"@dpiparo I thought rdf was reenabled on 32 bits at some point, do I remember incorrectly?. @amadio I don't have anything against a dataframe option that is usually on and is turned off on 32 bit machines. If I had time I'd check that we actually still need to disable rdf on 32 bits, but the failure was not easy to reproduce.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3957#issuecomment-501666340:292,failure,failure,292,https://root.cern,https://github.com/root-project/root/pull/3957#issuecomment-501666340,1,['failure'],['failure']
Availability,"@dpiparo I would say test_snapshotNFiles is pretty much the same as the reproducer: the best I could come up with (basically a stripped down test_snapshotNfiles with more workers and more files) can be found at the jira issue [here](https://sft.its.cern.ch/jira/browse/ROOT-8918?filter=12774). If need be, testing of the two fixes can happen independently, e.g. if this PR fixes the TTreeView issue, we should only see crashes due to `TSlotStack::Push` and `Pop` and no crashes due to `TTree::AddClone` and `SetEntryBase` (the three stacktraces distributed themselves quite evenly during debugging) when 32bc000 is reverted.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/828#issuecomment-319763124:136,down,down,136,https://root.cern,https://github.com/root-project/root/pull/828#issuecomment-319763124,1,['down'],['down']
Availability,@dpiparo The downside of entering the changes on github is that they disappear when you force-push.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3752#issuecomment-487569650:13,down,downside,13,https://root.cern,https://github.com/root-project/root/pull/3752#issuecomment-487569650,1,['down'],['downside']
Availability,"@dpiparo in filemerger test I am using R__FAST_MATH(```__FAST_MATH__```), to separate tolerances for fast math and normal builds, in case of clang builds everything works fine, but in case of gcc builds it never detect fast-math build, and as a result filemerger test is failing. I rechecked and the reason is that -Ofast is actually for gcc doesn't define ```__FAST_MATH__``` but only -ffast-math.; After this fix filemerger test is working properly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/971#issuecomment-328879766:86,toler,tolerances,86,https://root.cern,https://github.com/root-project/root/pull/971#issuecomment-328879766,1,['toler'],['tolerances']
Availability,@dpiparo looks like we got an error in one of the snapshot tests :disappointed:,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3153#issuecomment-446283516:30,error,error,30,https://root.cern,https://github.com/root-project/root/pull/3153#issuecomment-446283516,1,['error'],['error']
Availability,@dpiparo this fix should be included to avoid some of the sporadic failures,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13819#issuecomment-1755549541:67,failure,failures,67,https://root.cern,https://github.com/root-project/root/pull/13819#issuecomment-1755549541,1,['failure'],['failures']
Availability,"@dpiparo, I am against this PR switching OFF all tmva, because one or two tests fail intermittently for some weird and understood issue of new version of tensorflow or pytorch with old macOS version. It would be wiser first to install older versions on these mac nodes, and then if we observe still the failures I would switching off the failing tests, but not all tmva and even not pymva, if the other tests work fine. This will avoid to put us in a risky situation of releasing versions without testing them.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15099#issuecomment-2028794682:303,failure,failures,303,https://root.cern,https://github.com/root-project/root/pull/15099#issuecomment-2028794682,1,['failure'],['failures']
Availability,"@dudarboh the friend tree has less entries than the main tree. I think that's what's causing the problem. We should definitely have better diagnostics for this (i.e. give you a clear error message rather than the error you see), but this is not a supported usecase. . I could not reproduce the issue when truncating the tree in `test_default.root` to the same amount of entries as the friend. Can you?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9106#issuecomment-944297935:183,error,error,183,https://root.cern,https://github.com/root-project/root/issues/9106#issuecomment-944297935,4,['error'],['error']
Availability,@dvotaw please fork also roottest in order to prevent the build failure on `windows10/cxx14`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5218#issuecomment-604944061:64,failure,failure,64,https://root.cern,https://github.com/root-project/root/pull/5218#issuecomment-604944061,1,['failure'],['failure']
Availability,"@dwcasper sorry, you're right, it doesn't work with v6.24.06. If you want to try, you can either take a [nightly build](https://root.cern/download/nightly/?C=M;O=D), or wait for the upcoming v6.26.00.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9645#issuecomment-1020883574:138,down,download,138,https://root.cern,https://github.com/root-project/root/issues/9645#issuecomment-1020883574,1,['down'],['download']
Availability,"@egpbos Given my [comment](https://github.com/root-project/root/pull/8385#issuecomment-870570029) in your previous merge request, I am quite disappointed to learn that this has been merged as enabled by default when it depends on a yet unreleased version of ZeroMQ. This, for example, has caused failures in pretty much all the LCG builds today: https://cdash.cern.ch/index.php?project=LCGSoft&date=2021-11-29. Please disable `roofit_multiprocess` by default and re-enable it only when a *released version* of ZeroMQ has the functionality you need, adding the proper version in your call to `find_package()`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9078#issuecomment-981617370:296,failure,failures,296,https://root.cern,https://github.com/root-project/root/pull/9078#issuecomment-981617370,2,['failure'],['failures']
Availability,"@egpbos Please try again with the builtin enabled, the build failures are due to ZeroMQ not being found, since we have fail-on-missing=ON in our CI builds.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9078#issuecomment-945663907:61,failure,failures,61,https://root.cern,https://github.com/root-project/root/pull/9078#issuecomment-945663907,1,['failure'],['failures']
Availability,@eguiraud Can be https://github.com/root-project/root/pull/7469/commits/cb41756658bf8046f41ec60f126e680fba19c4fc reason for last errors I saw in Jenkins?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7469#issuecomment-796735600:129,error,errors,129,https://root.cern,https://github.com/root-project/root/pull/7469#issuecomment-796735600,1,['error'],['errors']
Availability,@eguiraud Do we understand the errors?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10729#issuecomment-1152403251:31,error,errors,31,https://root.cern,https://github.com/root-project/root/pull/10729#issuecomment-1152403251,1,['error'],['errors']
Availability,"@eguiraud FYI the Windows node rebooted, so I killed the build to avoid a too long time-out",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7502#issuecomment-815050610:31,reboot,rebooted,31,https://root.cern,https://github.com/root-project/root/pull/7502#issuecomment-815050610,1,['reboot'],['rebooted']
Availability,"@eguiraud I try to check truncating `test_default.root` as you proposed, but then:. Why this error doesn't happen in the single-threaded regime?; As you say if it is not supported case, the behaviour pretty undefined then?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9106#issuecomment-944301793:93,error,error,93,https://root.cern,https://github.com/root-project/root/issues/9106#issuecomment-944301793,1,['error'],['error']
Availability,"@eguiraud It finally compiled without error after using `g++` instead of `gcc`. ```; g++ -g -O1 $(root-config --libs --cflags) -o xAna_monoZ_preselect.o xAna_monoZ_preselect.C; ./xAna_monoZ_preselect.o ""../../../infiles_NCUGlobal/infiles_signal_Mx2-150_Mv-500_Mx1-1_ctau-1/NCUGlobalTuples_13.root"" ""testOutSignal.root""; ```. [massif.out.433729.txt](https://github.com/root-project/root/files/7423308/massif.out.433729.txt)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9087#issuecomment-952544605:38,error,error,38,https://root.cern,https://github.com/root-project/root/issues/9087#issuecomment-952544605,1,['error'],['error']
Availability,@eguiraud What is the error?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7132#issuecomment-779251074:22,error,error,22,https://root.cern,https://github.com/root-project/root/pull/7132#issuecomment-779251074,1,['error'],['error']
Availability,"@eguiraud Why I submit too many PRs, I see very often errors like here:; https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/110020/console; And `gtest-roofit-RDataFrameHelpers-test-testActionHelpers` appears very often",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7469#issuecomment-796749033:54,error,errors,54,https://root.cern,https://github.com/root-project/root/pull/7469#issuecomment-796749033,1,['error'],['errors']
Availability,"@eguiraud You couldn't see any error in the PR build on Windows, the tests are not yet enabled. It's what I'm trying to fix. 😉",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5612#issuecomment-628193079:31,error,error,31,https://root.cern,https://github.com/root-project/root/pull/5612#issuecomment-628193079,1,['error'],['error']
Availability,"@eguiraud You're right, of course, there were a few more spots to fix. It actually helped to make the code more robust for future changes of the sqlite3 library. Note that now there is a single, well-localized `ifdef` to prevent the use of `sqlite3_errstr` on sqlite3 < 3.7.15. I tested this on CentOS 6 with devtoolset 8. As @Axel-Naumann pointed out, there are cling-related issues (occurred when running unit tests) but the issues around `SQliteDS` are resolved.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5882#issuecomment-645246286:112,robust,robust,112,https://root.cern,https://github.com/root-project/root/pull/5882#issuecomment-645246286,1,['robust'],['robust']
Availability,"@eguiraud readShip fails becuase the branch `MCTrack.fPdgCode` used to have the wrong name:; ```; root [19] cbmsim->GetBranch(""MCTrack.fPdgCode"")->GetFullName(); (TString) ""MCTrack.MCTrack.fPdgCode""; ```; while it now properly returns:; ```; root [19] cbmsim->GetBranch(""MCTrack.fPdgCode"")->GetFullName(); (TString) ""MCTrack.fPdgCode""; ```; and a consequence (I did not investigate the mechanics) is:; ```; ERROR: expecting the type name Int_t for column MCTrack.fPdgCode and got 'ROOT::VecOps::RVec<Int_t>' instead!; ```; Could you take a look?. Thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6258#issuecomment-689840940:407,ERROR,ERROR,407,https://root.cern,https://github.com/root-project/root/pull/6258#issuecomment-689840940,1,['ERROR'],['ERROR']
Availability,@eguiraud the node is available now,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7226#issuecomment-780446682:22,avail,available,22,https://root.cern,https://github.com/root-project/root/pull/7226#issuecomment-780446682,1,['avail'],['available']
Availability,"@eguiraud: I simply *assumed* that you should always be able to program against TTEx, but you cannot. You have to `ifdef` - otherwise, you cannot compile. Or worse, you can actually compile albeit having committed wrong code, because in the `true` branch of your `ifdef`, you did everything right, but in the `false` branch (as happened in this PR), you have stuff that won't even compile.; Therefore, I never even remotely considered the possibility to put `ifdef`s concerning IMT into RooFit. Now that you mention it, it could obviously be done, but I'd rather have those in TTEx - single point of failure - than in `<insert everywhere where TTEx could be in use>`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6298#issuecomment-686577803:600,failure,failure,600,https://root.cern,https://github.com/root-project/root/pull/6298#issuecomment-686577803,2,['failure'],['failure']
Availability,"@ellert #11457 hopefully adds the missing piece to fix the remaining test failures. I observed those failures had to do with cases when internal memory management of ROOT played a role (mostly trees belonging to files being garbage collected). Setting the flags of the type of the object being nonified seems to fix those failures. If you have some time, please double check on your side.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10799#issuecomment-1260855212:74,failure,failures,74,https://root.cern,https://github.com/root-project/root/issues/10799#issuecomment-1260855212,3,['failure'],['failures']
Availability,"@ellert for me looks good, even though sadly we can't test it in CI! I remember that on aarch we had insignificant file size increase. Can I ask you please to add better explanation in commit (for the history) why tolerance was increased (e.g because of aach64 and ppc64le).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4025#issuecomment-507644748:214,toler,tolerance,214,https://root.cern,https://github.com/root-project/root/pull/4025#issuecomment-507644748,1,['toler'],['tolerance']
Availability,@ellert thanks for the PR! it's a known wart with the windows PR builds that they pick up errors/warnings from the PR description itself :sweat_smile:,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8366#issuecomment-856645860:90,error,errors,90,https://root.cern,https://github.com/root-project/root/pull/8366#issuecomment-856645860,1,['error'],['errors']
Availability,"@ellert, sorry, I skept over this. I cannot reproduce these failures using ROOT master in Fedora 34 with gcc 11.2.1 20210728 (RedHat 11.2.1-1). I think @vgvassilev already fixed this problem. Can you confirm that it works for you?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8073#issuecomment-995915924:60,failure,failures,60,https://root.cern,https://github.com/root-project/root/issues/8073#issuecomment-995915924,1,['failure'],['failures']
Availability,"@en. > Hi Ivan, thank you, I have some doubts about the changes:; > ; > * I don't think calling GetEntries more than once is actually expensive: the result is cached after the first call; > * the error message was listing the entry range in the usual start-inclusive/end-exclusive way (same as what happens in typical for loops), I'm not sure the patch is less ambiguous. Maybe we can say instead ""Start entry (X) must be lower than the available entries (Y). Ignoring entry range."".; > ; > Minor other thing, the commit message should use `[treereader]` insteadof `[DF]`. @eguiraud noted! This PR now only gives a clearer error message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10705#issuecomment-1148590657:196,error,error,196,https://root.cern,https://github.com/root-project/root/pull/10705#issuecomment-1148590657,6,"['avail', 'error']","['available', 'error']"
Availability,@etejedor @dpiparo I think that I've addressed all the point in the newest commit. A down-side is the quite lengthy implementation for finding the common data-type of the output array. Any opinions on that?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1856#issuecomment-381572681:85,down,down-side,85,https://root.cern,https://github.com/root-project/root/pull/1856#issuecomment-381572681,1,['down'],['down-side']
Availability,"@etejedor @dpiparo ok I'll go with it then.; The only downside is that it might make it _too_ easy for users to virtualize function calls in the event loop, but the common mode of operation of `RDataFrame` should not require casts to `RNode` anyway.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2182#issuecomment-399068651:54,down,downside,54,https://root.cern,https://github.com/root-project/root/pull/2182#issuecomment-399068651,1,['down'],['downside']
Availability,@etejedor Can we merge it now? All Jenkins failures has nothing to do with the PR,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4597#issuecomment-548355917:43,failure,failures,43,https://root.cern,https://github.com/root-project/root/pull/4597#issuecomment-548355917,1,['failure'],['failures']
Availability,"@etejedor Can you also please review the GetAsNumpy method, so that I can resolve the errors",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11357#issuecomment-1255832960:86,error,errors,86,https://root.cern,https://github.com/root-project/root/pull/11357#issuecomment-1255832960,1,['error'],['errors']
Availability,"@etejedor I took out the commit that assumed entries in `TEntryList` are always ordered, I will open a separate PR with only that commit where we can discuss that particular issue. I also added a commit that moves back the retrieval of the tree name to `TTreeView` construction time, so we still error out early even if the actual `TChain` construction is now done later, at processing time. AFAIK the PR is ready to merge if tests pass.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2116#issuecomment-394286698:296,error,error,296,https://root.cern,https://github.com/root-project/root/pull/2116#issuecomment-394286698,1,['error'],['error']
Availability,"@etejedor Thanks for pointing this out! Indeed, with current master and the fix in commit `c4077aa` all reproducers above work.; @maxgalli Ping :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6765#issuecomment-754074316:139,Ping,Ping,139,https://root.cern,https://github.com/root-project/root/issues/6765#issuecomment-754074316,1,['Ping'],['Ping']
Availability,@etejedor This seems to fix the problem with attaching a property to the class definition. I do not understand why we get an `bad argument to internal function` if we skip the proxy function ... Edit: These are the test failures: http://cdash.cern.ch/viewTest.php?onlyfailed&buildid=604404,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3170:220,failure,failures,220,https://root.cern,https://github.com/root-project/root/pull/3170,1,['failure'],['failures']
Availability,"@etejedor thanks for taking a look!. 1. correct. making concurrent usage of different RDFs from different threads safe is the topic of the recently created [ROOT-10694](https://sft.its.cern.ch/jira/browse/ROOT-10694); 2. avoiding re-jitting across computation graphs needs #5356 , but the general machinery is exercised by current tests (demonstrated by the current test failures) and tutorials (results I showed in the PPP were on df104, df105, df106). What kind of test would you like to see? (i.e. what should it test exactly?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5329#issuecomment-615292186:371,failure,failures,371,https://root.cern,https://github.com/root-project/root/pull/5329#issuecomment-615292186,1,['failure'],['failures']
Availability,"@ferdymercury . When changing documentation, please check that it does not have side effects.; Like this one:. https://github.com/root-project/root/pull/9656/files#diff-0cf5d82b8f81bcee3efc5f697afe4f3512c5cec711871d6b4079a80b04e90d21R125. It creates warnings and even compiler errors in dev builds.; I will fix it soon in #9674",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9656#issuecomment-1020241124:277,error,errors,277,https://root.cern,https://github.com/root-project/root/pull/9656#issuecomment-1020241124,1,['error'],['errors']
Availability,@ferdymercury ; Here are builtins and like llvm such errors need to be fixed in respective repositories.; Otherwise after next library upgrade all our fixes will gone away,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411#issuecomment-794207072:53,error,errors,53,https://root.cern,https://github.com/root-project/root/issues/7411#issuecomment-794207072,1,['error'],['errors']
Availability,"@ferdymercury ; I took the branch from https://github.com/root-project/root/pull/15314 . I issued the command suggested in you previous comment:. ```; cmake ../root-new-doc -Ddocu=ON -DDOCU_LOCATION=/tmp/docoutput -DDOCU_THREADS=8 -DDOCU_LOGFILE=/tmp/warnings.txt -DDOXYGEN_EXECUTABLE=/Users/couet/bin/doxygen -DDOCU_INPUT=""./mainpage.md;../../core""; ```. and I get:. ```; CMake Error at documentation/doxygen/CMakeLists.txt:58 (STRING):; STRING sub-command REGEX, mode REPLACE needs at least 6 arguments total to; command.; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15160#issuecomment-2074343395:379,Error,Error,379,https://root.cern,https://github.com/root-project/root/pull/15160#issuecomment-2074343395,1,['Error'],['Error']
Availability,"@ferdymercury Also this PR would benefit from a history cleaning, I feel like we could boil it down to ~4 commits",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8546#issuecomment-1953923580:95,down,down,95,https://root.cern,https://github.com/root-project/root/pull/8546#issuecomment-1953923580,1,['down'],['down']
Availability,"@ferdymercury I look through the messages and did not found critical errors. ; Most of nullptr access or dereferencing are false positives, other did not checked due to performance reasons. ; But if I oversee memory leak or use of uninitialized variable (beside large block in TTreeFormula::EvalInstance), please let us know here",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7430#issuecomment-800017654:69,error,errors,69,https://root.cern,https://github.com/root-project/root/issues/7430#issuecomment-800017654,1,['error'],['errors']
Availability,"@ferdymercury Thanks for this contribution! Test failures are unrelated, so let's merge",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7237#issuecomment-785852474:49,failure,failures,49,https://root.cern,https://github.com/root-project/root/pull/7237#issuecomment-785852474,1,['failure'],['failures']
Availability,@ferdymercury could you fork also [roottest](https://github.com/root-project/roottest) to prevent failures (timeout) on Windows nodes. Thanks,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7228#issuecomment-780368750:98,failure,failures,98,https://root.cern,https://github.com/root-project/root/pull/7228#issuecomment-780368750,1,['failure'],['failures']
Availability,"@ferdymercury à propos `roottest-root-hist-h2root`: I think this was clarified by the last round of tests. We see a failure on the GPU platform, which is known and unrelated to your changes. If you agree, I would proceed with the merge of this PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16773#issuecomment-2446062781:116,failure,failure,116,https://root.cern,https://github.com/root-project/root/pull/16773#issuecomment-2446062781,1,['failure'],['failure']
Availability,"@ferdymercury, the test failure on alma8 is real",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16570#issuecomment-2393371037:24,failure,failure,24,https://root.cern,https://github.com/root-project/root/pull/16570#issuecomment-2393371037,1,['failure'],['failure']
Availability,"@flagarde apologies for not making progress with this in a reasonable time. Would you be able to address the conflict by rebasing? We will then re-run the tests to see what the CMake error is. It might just be a CMake too old; we have bumped the required CMake version to 3.16 in the meantime, so that might have fixed itself.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8941#issuecomment-1007260850:183,error,error,183,https://root.cern,https://github.com/root-project/root/pull/8941#issuecomment-1007260850,1,['error'],['error']
Availability,"@fuhlig1 ; As I said I removed the faulty OpenGL doing `rm /opt/X11/lib/libGL.dylib`. Then reinstalling from ROOT sources worked. I can see the GL output. But doing that I have another problem [here](https://github.com/root-project/root/actions/runs/10852318554/job/30697011619?pr=16348):; ```; make[2]: *** No rule to make target `/usr/X11R6/lib/libGL.dylib', needed by `lib/libGLEW.dylib'. Stop.; make[1]: *** [builtins/glew/CMakeFiles/GLEW.dir/all] Error 2; ```; To cure that I had to reinstall XQuartz but then my ROOT installed from the sources points to the wrong OpenGL. Did you manage to make sure ROOT points the right OpenGL with XQuartz installed?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16523#issuecomment-2376700199:35,fault,faulty,35,https://root.cern,https://github.com/root-project/root/issues/16523#issuecomment-2376700199,2,"['Error', 'fault']","['Error', 'faulty']"
Availability,@gargvaibhav64 looks like we need some more adjustment. The header `bit` seems to be missing on that particular platform. Could you check if there is some documentation available hinting if that's expected?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5610#issuecomment-628217843:169,avail,available,169,https://root.cern,https://github.com/root-project/root/pull/5610#issuecomment-628217843,1,['avail'],['available']
Availability,"@gargvaibhav64, Jenkins failures for you: https://gist.github.com/oshadura/3bbb2f650bb77dbde1c2c187af363822 ; Please check if code compile locally",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5086#issuecomment-594060071:24,failure,failures,24,https://root.cern,https://github.com/root-project/root/pull/5086#issuecomment-594060071,1,['failure'],['failures']
Availability,"@gargvaibhav64, could you move your work here. So first we need to enumerate all top-most libc and std headers, in a similar way how it was done for the non-windows modulemap files. This would likely bring you back to the initial error you tried to fix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5294#issuecomment-609038567:230,error,error,230,https://root.cern,https://github.com/root-project/root/pull/5294#issuecomment-609038567,1,['error'],['error']
Availability,"@georgtroska Good, but then I don't understand why you got the linker error... I'll try to investigate more",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8292#issuecomment-872181320:70,error,error,70,https://root.cern,https://github.com/root-project/root/issues/8292#issuecomment-872181320,1,['error'],['error']
Availability,"@georgtroska you're right, but the issue says ""Compilation error on redhat 8.3 / no internet"" so I'm trying to solve the issue with ""no internet"". Am I missing something?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8292#issuecomment-865554304:59,error,error,59,https://root.cern,https://github.com/root-project/root/issues/8292#issuecomment-865554304,1,['error'],['error']
Availability,@gganis @pcanal gentle ping :),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11483#issuecomment-1341311062:23,ping,ping,23,https://root.cern,https://github.com/root-project/root/issues/11483#issuecomment-1341311062,1,['ping'],['ping']
Availability,@gganis ping!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6030#issuecomment-698188013:8,ping,ping,8,https://root.cern,https://github.com/root-project/root/pull/6030#issuecomment-698188013,1,['ping'],['ping']
Availability,@giordano can you take care of suggested changes by @henryiii? (you need at least add protection for Minuit2: `NOT CMAKE_PROJECT_NAME STREQUAL ROOT`). Failure in Jenkins:; ```; 10:57:03 CMake Error at cmake/modules/RootMacros.cmake:333 (message):; 10:57:03 Cannot find header Minuit2/ABObj.h to generate dictionary G__Minuit2 for.; 10:57:03 Did you forget to set the INCLUDE_DIRECTORIES property for the current; 10:57:03 directory?; 10:57:03 Call Stack (most recent call first):; 10:57:03 cmake/modules/RootMacros.cmake:1151 (ROOT_GENERATE_DICTIONARY); 10:57:03 math/minuit2/CMakeLists.txt:16 (ROOT_STANDARD_LIBRARY_PACKAGE); ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5016#issuecomment-587360906:151,Failure,Failure,151,https://root.cern,https://github.com/root-project/root/pull/5016#issuecomment-587360906,2,"['Error', 'Failure']","['Error', 'Failure']"
Availability,"@goi42 ah #4649 was merged some time ago, I see! I got it confused with #4965, sorry!. So this can go in, but I would like to have a test for the fixed usecase. I don't know how to check that `TFile` printed an Error, do you by chance? I'll ask around :D",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4964#issuecomment-585258137:211,Error,Error,211,https://root.cern,https://github.com/root-project/root/pull/4964#issuecomment-585258137,1,['Error'],['Error']
Availability,@goi42 please fork also [roottest](https://github.com/root-project/roottest) in order to prevent the failure on `windows10/cxx14`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4965#issuecomment-585182094:101,failure,failure,101,https://root.cern,https://github.com/root-project/root/pull/4965#issuecomment-585182094,1,['failure'],['failure']
Availability,"@grasph, that is a regular failure and it is not caused by your PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8717#issuecomment-885000349:27,failure,failure,27,https://root.cern,https://github.com/root-project/root/pull/8717#issuecomment-885000349,1,['failure'],['failure']
Availability,"@guitargeek , latest root master does not build. We get build errors like [a]. Looks like https://github.com/root-project/root/blob/master/roofit/roofitcore/inc/RooAbsCollection.h#L411-L418 also need cleanup ( note that note master is [6.35](https://github.com/root-project/root/commit/f1edc0f1b26a9ef675c035ba9160a17be2ad69dc) now); ```; In file included from input_line_10:17:; In file included from /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc12/lcg/root/6.33.01-18142fcd273e00e213ed1bd6cacf55cc/build/include/RooAbsAnaConvPdf.h:20:; In file included from /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc12/lcg/root/6.33.01-18142fcd273e00e213ed1bd6cacf55cc/build/include/RooAbsPdf.h:19:; In file included from /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc12/lcg/root/6.33.01-18142fcd273e00e213ed1bd6cacf55cc/build/include/RooAbsReal.h:20:; In file included from /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc12/lcg/root/6.33.01-18142fcd273e00e213ed1bd6cacf55cc/build/include/RooArgList.h:19:; /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc12/lcg/root/6.33.01-18142fcd273e00e213ed1bd6cacf55cc/build/include/RooAbsCollection.h:417:2: error: ""Please remove this unneeded code.""; #error ""Please remove this unneeded code.""; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16821#issuecomment-2458990554:62,error,errors,62,https://root.cern,https://github.com/root-project/root/pull/16821#issuecomment-2458990554,3,['error'],"['error', 'errors']"
Availability,"@guitargeek I think these windows issues should be resolved with my most recent commit, at least I ensured that compilation without MultiProcessing enabled gives no errors or warnings. I cannot fully test a windows compilation since I have no windows machine.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11791#issuecomment-1345665219:165,error,errors,165,https://root.cern,https://github.com/root-project/root/pull/11791#issuecomment-1345665219,1,['error'],['errors']
Availability,"@guitargeek Thanks for looking into this. I don't see any fixes for this issue, it would require to ""duplicate"" the definition in the class'es ""main"" translation unit, and there are quite a few definitions to go through. Here is an MRE with c++11, but should be identical for c++14:; ```; # root-config --version; 6.24/06; # root.exe --version; ROOT Version: 6.24/06; Built for linuxx8664gcc on Sep 02 2021, 14:20:23; From tags/v6-24-06@v6-24-06; # g++ --version; g++ (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11); Copyright (C) 2015 Free Software Foundation, Inc.; This is free software; see the source for copying conditions. There is NO; warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. # cat test.cxx ; #include <vector>; #include <TChain.h>. int func() {; std::vector<long long> v;; v.push_back(TChain::kBigNumber); // fail; v.push_back(TChain::kBigNumber - 1); // fine; return v.size();; }; # g++ -O0 -std=c++11 `root-config --cflags --libs` test.cxx -o test; /usr/lib/gcc/x86_64-redhat-linux/4.8.5/../../../../lib64/crt1.o: In function `_start':; (.text+0x20): undefined reference to `main'; /tmp/ccxkwRYF.o: In function `func()':; test.cxx:(.text+0x1a): undefined reference to `TChain::kBigNumber'; collect2: error: ld returned 1 exit status; ```. I don't mind if this gets closed with wontfix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9422#issuecomment-991995228:1238,error,error,1238,https://root.cern,https://github.com/root-project/root/issues/9422#issuecomment-991995228,1,['error'],['error']
Availability,"@guitargeek converted to DRAFT for now, please feel free to steal parts if need be (maybe the improved error messages for the asimov dataset generation are worthwhile having), for all the other parts you probably have better solutions in your current WIP PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12034#issuecomment-1384135770:103,error,error,103,https://root.cern,https://github.com/root-project/root/pull/12034#issuecomment-1384135770,1,['error'],['error']
Availability,"@guitargeek don't worry, I will not merge it before your approval. And FYI, cuda is ON if one set the `all` flag: https://github.com/root-project/root/blob/master/cmake/modules/RootBuildOptions.cmake#L222 so would you prefer not to set it to `ON` in this case? I would prefer to keep it the way it is and keep it ON if cuda is available (as in my PR); I'll let you decide what is the best option anyway (I never tried CUDA on Windows, and have no plan to do it anytime soon 😉 )",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15149#issuecomment-2039632226:327,avail,available,327,https://root.cern,https://github.com/root-project/root/pull/15149#issuecomment-2039632226,1,['avail'],['available']
Availability,@guitargeek ping. Is there anything else to be done here?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14018#issuecomment-1819026768:12,ping,ping,12,https://root.cern,https://github.com/root-project/root/pull/14018#issuecomment-1819026768,1,['ping'],['ping']
Availability,@guitargeek please fork also [roottest](https://github.com/root-project/roottest) to prevent failures (timeout) on Windows nodes. Thanks,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7126#issuecomment-772468037:93,failure,failures,93,https://root.cern,https://github.com/root-project/root/pull/7126#issuecomment-772468037,1,['failure'],['failures']
Availability,"@guitargeek sir, is the failure of the build has to do something with an error in my code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10171#issuecomment-1079701927:24,failure,failure,24,https://root.cern,https://github.com/root-project/root/pull/10171#issuecomment-1079701927,2,"['error', 'failure']","['error', 'failure']"
Availability,"@guitargeek thank you! I'm glad that ROOT doesn't have so many errors :) Yes, this is a strange issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13101#issuecomment-1609073890:63,error,errors,63,https://root.cern,https://github.com/root-project/root/issues/13101#issuecomment-1609073890,1,['error'],['errors']
Availability,@guitargeek the CI failures are unrelated to this PR. Ready for review :),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16507#issuecomment-2377634619:19,failure,failures,19,https://root.cern,https://github.com/root-project/root/pull/16507#issuecomment-2377634619,1,['failure'],['failures']
Availability,"@guitargeek the only failure I see (on Jenkins) was due to `Out of diskspace` error. But it's running on another node now, so we'll see. (and I'm cleaning up the Windows nodes right now)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13993#issuecomment-1788553171:21,failure,failure,21,https://root.cern,https://github.com/root-project/root/pull/13993#issuecomment-1788553171,2,"['error', 'failure']","['error', 'failure']"
Availability,"@guitargeek what's the status of this? Reading through the comments in https://github.com/root-project/root/issues/11221, I think this actually addresses the remaining ASan failures. Is there anything from the RooFit side holding this up, or shall I give this another test? (after I fixed the ASan build in general...)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11228#issuecomment-1265166506:173,failure,failures,173,https://root.cern,https://github.com/root-project/root/pull/11228#issuecomment-1265166506,1,['failure'],['failures']
Availability,"@guitargeek, could we get a reproducer for the windows failure by any chance?. In addition, maybe now it is a good time to check performance of clad. Do you think you can do this on this PR while we are working on getting things merged properly in the clad master?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14165#issuecomment-1925420859:55,failure,failure,55,https://root.cern,https://github.com/root-project/root/pull/14165#issuecomment-1925420859,1,['failure'],['failure']
Availability,"@hageboeck , nice PR. Do you think it's possible to have also an ASCII version of RooDatasets which is directly edible by RDataFrame via a RCsvDS? @etejedor ping",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3083#issuecomment-443998636:157,ping,ping,157,https://root.cern,https://github.com/root-project/root/pull/3083#issuecomment-443998636,1,['ping'],['ping']
Availability,"@hageboeck . > LGTM, I would advise squashing on merge. Why? These are three independent plugins and three commits. ; It would be easier to patch if I will made failure in one",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5255#issuecomment-606468999:161,failure,failure,161,https://root.cern,https://github.com/root-project/root/pull/5255#issuecomment-606468999,1,['failure'],['failure']
Availability,"@hageboeck : your suggestions work, except for:. ```; RooAbsData.cxx:2591:45: error: passing ‘const TNamed’ as ‘this’ argument discards qualifiers [-fpermissive]; 2591 | _namePtr->SetBit(RooNameReg::kRenamedArg);; ```. Any suggestion ? should I `const_cast` only on this line ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9684#issuecomment-1021091498:78,error,error,78,https://root.cern,https://github.com/root-project/root/pull/9684#issuecomment-1021091498,1,['error'],['error']
Availability,"@hageboeck I tried it locally and seems to be working as intended - I saw some errors though, but I think those are related to my environment. @couet I think it is essentially good to go :slightly_smiling_face:. Could you pay attention after merging this that things are working as expected in the machine where the documentation is being built?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5913#issuecomment-1173161292:79,error,errors,79,https://root.cern,https://github.com/root-project/root/pull/5913#issuecomment-1173161292,1,['error'],['errors']
Availability,"@hageboeck Thanks for the correction. The build failure looks like it has something to do with a Git test, but it’s not clear to me what went wrong.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6172#issuecomment-675412995:48,failure,failure,48,https://root.cern,https://github.com/root-project/root/pull/6172#issuecomment-675412995,2,['failure'],['failure']
Availability,@hageboeck do you know if these failures are something expected in projectroot.test.test_stressroostats_minuit2:; ```RooUnitTest ERROR: comparison of value 2.32635 fails comparison with reference 2.408916; Test 34 : HypoTestCalculator Significance - Simultaneous Pdf - Frequentist - Ratio-Of-Profiled-Likelihoods ............. FAILED; RooUnitTest ERROR: comparison of value 2.40892 fails comparison with reference 2.512144; Test 35 : HypoTestCalculator Significance - Simultaneous Pdf - Frequentist - Profile-Likelihood-One-Sided-Discovery .... FAILED```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6059#issuecomment-666214454:32,failure,failures,32,https://root.cern,https://github.com/root-project/root/pull/6059#issuecomment-666214454,3,"['ERROR', 'failure']","['ERROR', 'failures']"
Availability,@hageboeck new and improved logic that should fix the test failures -- can you take a look again please?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5356#issuecomment-619967582:59,failure,failures,59,https://root.cern,https://github.com/root-project/root/pull/5356#issuecomment-619967582,1,['failure'],['failures']
Availability,"@hageboeck not your fault, it's supposed to...but that's a problem for another time",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6170#issuecomment-673449404:20,fault,fault,20,https://root.cern,https://github.com/root-project/root/pull/6170#issuecomment-673449404,1,['fault'],['fault']
Availability,"@hageboeck the DataHandling ERROR you proposed is indeed the correct solution for this, but I would encourage the inclusion of documentation as well to make clear to users that there is no way to properly assign `wgtError` without calling the `StoreError` command arg in the constructor without relying on noticing a print statement at run time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4167#issuecomment-519959496:28,ERROR,ERROR,28,https://root.cern,https://github.com/root-project/root/pull/4167#issuecomment-519959496,1,['ERROR'],['ERROR']
Availability,"@hahnjo , I have opened https://github.com/cms-sw/root/pull/192 and will start testing it once ppc64le Integration Build (IB) based on ROOT master is available ( hopefully tomorrow morning)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13850#issuecomment-1865265443:150,avail,available,150,https://root.cern,https://github.com/root-project/root/pull/13850#issuecomment-1865265443,1,['avail'],['available']
Availability,"@hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈 . I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14055#issuecomment-2379654469:758,failure,failure,758,https://root.cern,https://github.com/root-project/root/issues/14055#issuecomment-2379654469,4,"['error', 'failure']","['errors', 'failure']"
Availability,"@hahnjo Sure I can. It's 6.28.04 with the relevant patches https://github.com/NixOS/nixpkgs/pull/215187. Will be reproducible with:; ```; nix-build https://github.com/NixOS/nixpkgs/archive/refs/heads/pr/root_6_28_00.tar.gz -A root; ```; Failures can be found on CI.; * for macOS: https://github.com/NixOS/nixpkgs/pull/215187/checks?check_run_id=15806349613; * for Linux: https://logs.ofborg.org/?key=nixos/nixpkgs.215187&attempt_id=3eee831f-5f43-4913-977c-a8086a7838a5; Latter comes with a different set of linker errors:; ```; [ 70%] Linking CXX executable src/rootcling_stage1; /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o): in function `getOptimizationLevel(llvm::opt::ArgList&, clang::InputKind, clang::DiagnosticsEngine&) [clone .isra.0]':; (.text._ZL20getOptimizationLevelRN4llvm3opt7ArgListEN5clang9InputKindERNS3_17DiagnosticsEngineE.isra.0+0xd4): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'; /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o): in function `clang::CompilerInvocation::ParseLangArgs(clang::LangOptions&, llvm::opt::ArgList&, clang::InputKind, llvm::Triple const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, clang::DiagnosticsEngine&) [clone .localalias]':; (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x9d): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList c",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12156#issuecomment-1674281649:237,Failure,Failures,237,https://root.cern,https://github.com/root-project/root/issues/12156#issuecomment-1674281649,2,"['Failure', 'error']","['Failures', 'errors']"
Availability,@hahnjo Thanks for the complete analysis. Indeed the error case (-1 return) is missing :(,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12650#issuecomment-1518043286:53,error,error,53,https://root.cern,https://github.com/root-project/root/pull/12650#issuecomment-1518043286,1,['error'],['error']
Availability,"@hahnjo Thanks for the input, I am also wary about the backwards-incompatible change in behaviour. Your idea of the ""lazy"" wrapper source is sound and I also don't see major blockers against implementing it. On the other hand, the current behaviour of RDataFrame, which does not open files at construction time but at JITting time, is not really a design choice but rather a side-effect of using `TChain` as the concrete IO backend for all TTree-based RDataFrame instances, whether the user is processing a single file or more. Every other data source, including the RNTuple data source, opens a file. We could foresee that even with chains of RNTuple we still want to open the first file right away to derive the schema and some metadata. From my current understanding and the time spent on this PR, my current belief is that the backwards-incompatible change is almost a bugfix, and opening just one file does not introduce practical penalties in users' workflows, rather it also allows for early error catching potentially. What do you think about this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13090#issuecomment-1886629392:999,error,error,999,https://root.cern,https://github.com/root-project/root/pull/13090#issuecomment-1886629392,1,['error'],['error']
Availability,"@hahnjo What happens if you open the `root://eoscms.cern.ch//eos/cms/store/user/cmsbuild/store/data/Commissioning2022/Cosmics/ALCARECO/TkAlCosmics0T-PromptReco-v1/000/348/776/00000/96538f53-2088-422c-91a5-841d735a81a8.root` file directly in e.g. ROOT prompt?; (unfortunately the details of that file open error are currently lost, maybe time for us to finally do something about it...)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13429#issuecomment-1686302471:305,error,error,305,https://root.cern,https://github.com/root-project/root/issues/13429#issuecomment-1686302471,1,['error'],['error']
Availability,"@hahnjo configure seems to finish without errors, but it still seems to target all possible archs:. ```; -- Targeting AArch64; -- Targeting AMDGPU; -- Targeting ARM; -- Targeting AVR; -- Targeting BPF; -- Targeting Hexagon; -- Targeting Lanai; -- Targeting Mips; -- Targeting MSP430; -- Targeting NVPTX; -- Targeting PowerPC; -- Targeting RISCV; -- Targeting Sparc; -- Targeting SystemZ; -- Targeting WebAssembly; -- Targeting X86; -- Targeting XCore; -- Clang version: 13.0.0; -- Not building amdgpu-arch: hsa-runtime64 not found; -- Building Cling as part of ROOT; -- Cling version (from VERSION file): ROOT_1.0~dev; ```. build ongoing",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14115#issuecomment-1827335476:42,error,errors,42,https://root.cern,https://github.com/root-project/root/pull/14115#issuecomment-1827335476,1,['error'],['errors']
Availability,"@hahnjo does the error report improve if you apply this patch ?. https://github.com/root-project/root/pull/14627. [EDIT: sorry for the noise, never mind, it's WriteFastArray, but from TBufferJSON, not TBufferFile, so unrelated]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11629#issuecomment-1933821829:17,error,error,17,https://root.cern,https://github.com/root-project/root/issues/11629#issuecomment-1933821829,1,['error'],['error']
Availability,"@hahnjo hm that's an interesting clue, but then I still don't fully understand why `RooFit::TestStatistics::RooUnbinnedL` would give a different answer, because it also just calls `RooAbsPdf::extendedTerm`, so it should still get the exact same result... Or is the problem that the FMA operation on the different parts of the sum (the likelihood is calculated over multiple event ranges in the test that is failing, which are summed afterwards) has higher rounding errors on non-x86 so that in the end the result indeed differs?. Or, even more problematically, could such FMA operations also cause similar rounding errors on x86 so that EXPECT_EQ indeed becomes impossible (and I just got lucky with the current parameters on x86)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12389#issuecomment-1544370239:465,error,errors,465,https://root.cern,https://github.com/root-project/root/pull/12389#issuecomment-1544370239,2,['error'],['errors']
Availability,"@hahnjo that's fair; but I suppose we still wanna enable it on all our main tested platforms, at least for the CI nodes.; I tried adding appending `-Wno-error` to the CMakeLists of some directories (like `interpreter`), but it didn't really work (I guess `-Werror` gets added after it so it suppresses the other flag) and even if it did it looks sketchy. Not sure what's the best way to approach this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15853#issuecomment-2173375106:153,error,error,153,https://root.cern,https://github.com/root-project/root/pull/15853#issuecomment-2173375106,1,['error'],['error']
Availability,"@hahnjo the problem is this build (default RelWithDebInfo) does not build cling with debug info and it is all optimized out. I did try building the interpreter in debug mode, but on my small machine it took about a full day and stopped with some error (was already quite some time ago). Not sure If I have the resources right now to try again.; I remember I had this modules.idx problem early on when I worked on the ""first"" batch of freebsd patches - it went away after some doing, not sure why, I was fixing some other issues as well in parallel and at some point it just started working. I did not investigate what exactly made it work. Apparently I should have :D. I suspect then it was some uninitialized string, that was what I was hunting down at the moment I think.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14075#issuecomment-1819856030:246,error,error,246,https://root.cern,https://github.com/root-project/root/issues/14075#issuecomment-1819856030,2,"['down', 'error']","['down', 'error']"
Availability,"@hahnjo there is no stack trace unfortunately, just the assertion failure message. Were you able to reproduce yourself? I can reproduce on both my laptop and desktop machines, Ubuntu and CentOS7 with master, but not e.g. on lxplus. As for the use of `isa_and_nonnull`, @Axel-Naumann can better comment.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8828#issuecomment-899293659:66,failure,failure,66,https://root.cern,https://github.com/root-project/root/issues/8828#issuecomment-899293659,1,['failure'],['failure']
Availability,"@hahnjo, I fixed the `clang::Parser::TryAltiVecToken` error in my local setup but it does not change the crash. ```diff; diff --git a/interpreter/cling/lib/Interpreter/Interpreter.cpp b/interpreter/cling/lib/Interpreter/Interpreter.cpp; index e3d2c64748..c14a0c84af 100644; --- a/interpreter/cling/lib/Interpreter/Interpreter.cpp; +++ b/interpreter/cling/lib/Interpreter/Interpreter.cpp; @@ -249,10 +249,9 @@ namespace cling {; // Enable incremental processing, which prevents the preprocessor destroying; // the lexer on EOF token.; PP.enableIncrementalProcessing();; -; - m_LookupHelper.reset(new LookupHelper(new Parser(PP, SemaRef,; - /*SkipFunctionBodies*/false,; - /*isTemp*/true), this));; + Parser* TempParser = new Parser(PP, SemaRef,/*SkipFunctionBodies*/false,/*isTemp*/true);; + TempParser->Initialize();; + m_LookupHelper.reset(new LookupHelper(TempParser, this));; if (!m_LookupHelper); return;; ; diff --git a/interpreter/llvm/src/tools/clang/lib/Parse/Parser.cpp b/interpreter/llvm/src/tools/clang/lib/Parse/Parser.cpp; index f3d7ec83d3..bbb2c21268 100644; --- a/interpreter/llvm/src/tools/clang/lib/Parse/Parser.cpp; +++ b/interpreter/llvm/src/tools/clang/lib/Parse/Parser.cpp; @@ -452,10 +452,11 @@ Parser::~Parser() {; ///; void Parser::Initialize() {; // Create the translation unit scope. Install it as the current scope.; + if (!IsTemporary) {; assert(getCurScope() == nullptr && ""A scope is already active?"");; EnterScope(Scope::DeclScope);; Actions.ActOnTranslationUnitScope(getCurScope());; -; + }; // Initialization for Objective-C context sensitive keywords recognition.; // Referenced in Parser::ParseObjCTypeQualifierList.; if (getLangOpts().ObjC) {; @@ -535,10 +536,12 @@ void Parser::Initialize() {; Ident_module = PP.getIdentifierInfo(""module"");; }; ; + if (!IsTemporary) {; Actions.Initialize();; ; // Prime the lexer look-ahead.; ConsumeToken();; + }; }; ; void Parser::LateTemplateParserCleanupCallback(void *P) {; ```. I think the JIT is really overwriting the stac",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8072#issuecomment-980788230:54,error,error,54,https://root.cern,https://github.com/root-project/root/issues/8072#issuecomment-980788230,1,['error'],['error']
Availability,"@hahnjo, looks like the test failures in #13139 that were fixed by this commit are gone. Any idea why?. @smuzaffar, can we test this PR for cmssw?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14777#issuecomment-1954936179:29,failure,failures,29,https://root.cern,https://github.com/root-project/root/pull/14777#issuecomment-1954936179,1,['failure'],['failures']
Availability,"@hahnjo, thanks for working on this! Could you share some more information about the test failures? . Just like you, I am quite puzzled why that fixes any tests... The only reason that I can think of is we did not properly reverted https://github.com/vgvassilev/clang/commit/fce26074d415c33196632442e344b5c43efba6e2 which does not seem the case... Can you remove the fixup patch to see current failures?. PS: Maybe somehow clad picks up old headers/libraries?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7488#issuecomment-824616694:90,failure,failures,90,https://root.cern,https://github.com/root-project/root/pull/7488#issuecomment-824616694,2,['failure'],['failures']
Availability,"@hahnjo, that when/if merged should fix your clad failures with llvm15...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12075#issuecomment-1398575698:50,failure,failures,50,https://root.cern,https://github.com/root-project/root/pull/12075#issuecomment-1398575698,1,['failure'],['failures']
Availability,"@hahnjo, you were opening this issue as ""Build broken with C++17 on CentOS 8"", and then only renamed it later to just because you understood the build was not actually broken ""Switching CMAKE_CXX_STANDARD breaks build"". This kind of re-interpretation biases the relevance of the issue, which is why I'm not a big fan of it and was trigger happy to close it. When reinterpreting issues like this, you have to ask yourself: would I have also opened an original issue for this too? Especially because of:. > The build errors when switching from CMAKE_CXX_STANDARD=14 (the default with GCC 8.4.1 on CentOS 8) to CMAKE_CXX_STANDARD=17 (for example to get ROOT7). ROOT 7 has now the same CMAKE_CXX_STANDARD requirements, so please give me a new example of why someone would do this. Anyone who reads this issue to consider fixing it will have this context in mind, which brings them to the conclusion that it's not relevant to fix. So why keep it open?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8642#issuecomment-2046845738:515,error,errors,515,https://root.cern,https://github.com/root-project/root/issues/8642#issuecomment-2046845738,1,['error'],['errors']
Availability,"@henryiii About 6.16, @Axel-Naumann can decide. I think the tag will come out tomorrow, so no new code is going in since a few days. However, for 6.16/02 it is probably ok. The Windows failure is unrelated (maybe @henryiii just needs to fork roottest as well as root), so I'm merging this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3273#issuecomment-455456872:185,failure,failure,185,https://root.cern,https://github.com/root-project/root/pull/3273#issuecomment-455456872,1,['failure'],['failure']
Availability,@henryiii Have you tried using the code after the patch? I remember seeing extra test failures with this patch compared to what we currently have (https://github.com/root-project/root/pull/1689#issuecomment-380143670).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1843#issuecomment-387644314:86,failure,failures,86,https://root.cern,https://github.com/root-project/root/pull/1843#issuecomment-387644314,1,['failure'],['failures']
Availability,"@henryiii I guess I can work around this problem with a `const_cast`, but `const_casts` are evil and should not be necessary to access a basic feature of the public interface. In my understanding this is an interface bug. I agree that my solution is not optimal either, so if you want to take a deeper look please do. In `iminuit`, we run MIGRAD with the class `MnMigrad`. If you look into `MnMigrad.h`, you will see that it only allows one to access the `ModularFunctionMinimizer` as a const reference. The `ModularFunctionMinimizer` allows us to access the `MinimumBuilder` as a const and non-const reference, but the latter is non available, because `ModularFunctionMinimizer` is already const. The only way to set the print level for `MnMigrad` that I can see is via; `MnMigrad.Minimizer().Builder().SetPrintLevel(...)`, and that only works when `SetPrintLevel(...)` is const. As far as I can see, it makes sense that `MnMigrad` only hands out a const reference. Otherwise, it would also be a (possibly cleaner) solution if `MnApplication` and its children offer a `Minimizer()` method which returns a non-const reference.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1677#issuecomment-384667376:634,avail,available,634,https://root.cern,https://github.com/root-project/root/pull/1677#issuecomment-384667376,1,['avail'],['available']
Availability,"@henryiii If you configure ROOT with `-Dtesting=ON -Droottest=ON`, then you can run the tests with `ctest -R minuit2`, but it may also be important to run `ctest -R roostats` (or all tests, really, since some mathcore tests also use Minuit2). However, to see the failures, just the Minuit2 tests are enough.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1689#issuecomment-371488120:263,failure,failures,263,https://root.cern,https://github.com/root-project/root/pull/1689#issuecomment-371488120,1,['failure'],['failures']
Availability,"@henryiii, I get:; ```bash; cd /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core; git remote add root git@github.com:chenrui333/homebrew-core.git; git fetch root; git checkout bump-root-6.24.00; brew install --build-from-source root; ==> Downloading https://homebrew.bintray.com/bottles/cmake-3.20.2.catalina.bottle.tar.gz; #=#=# ; curl: (22) The requested URL returned error: 403 Forbidden; Error: Failed to download resource ""cmake""; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7881#issuecomment-840047030:244,Down,Downloading,244,https://root.cern,https://github.com/root-project/root/issues/7881#issuecomment-840047030,4,"['Down', 'Error', 'down', 'error']","['Downloading', 'Error', 'download', 'error']"
Availability,@imaxoi rebase on master to get rid of the `dataframe_misc` test failure,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2313#issuecomment-412067083:65,failure,failure,65,https://root.cern,https://github.com/root-project/root/pull/2313#issuecomment-412067083,1,['failure'],['failure']
Availability,"@imaxoi the last three commits in the PR make many important changes to the initial implementation, and also improve readability and fix some bugs. So I think it does not make a lot of sense to have the initial implementation as a separate commit -- I would squash the last four commits together. Regarding the 32bit failures, at least for now you can ignore them and consider this PR complete, I'll take a look as soon as I can. Please resolve the warnings at RDFInterfaceUtils.hxx:301 though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2259#issuecomment-403286791:317,failure,failures,317,https://root.cern,https://github.com/root-project/root/pull/2259#issuecomment-403286791,1,['failure'],['failures']
Availability,"@imaxoi windows fails with these kind of errors (can you access the jenkins logs?):; ```; 14:28:11 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->; 14:28:11 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\test\dataframe_vecops.vcxproj"" (default target) (390) ->; 14:28:11 C:\build\workspace\root-pullrequests-build\build\include\ROOT/RDFInterfaceUtils.hxx(305): error C2466: cannot allocate an array of constant size 0 [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\test\dataframe_vecops.vcxproj]; ```. Can you please check what it does not like at `RDFInterfaceUtils.hxx:305`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2259#issuecomment-401342291:41,error,errors,41,https://root.cern,https://github.com/root-project/root/pull/2259#issuecomment-401342291,2,['error'],"['error', 'errors']"
Availability,"@jalopezg-git, on which build node I could reproduce the failure?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11874#issuecomment-1410949749:57,failure,failure,57,https://root.cern,https://github.com/root-project/root/pull/11874#issuecomment-1410949749,1,['failure'],['failure']
Availability,"@jblomer , we are trying to test latest root master changes in [CMSSW](https://github.com/cms-sw/cmsdist/pull/8973) and our build failed with errors like [a]. Looks like this change is causing cmssw to fail. I guess we need to update cmssw to use `model.GetDefaultEntry()->GetPtr<T>(name)` instead of `model.Get<T>(name)` ... right? What about `addField<T>()` calls?. We also want same cmssw code to work for ROOT 6.26 and above. So should we add some `#if ROOT_VERSION_CODE >= ROOT_VERSION(6,31,0)` blocks ?. [a] https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-6f60ec/37085/build-logs/PhysicsTools/NanoAOD/log.html; ```; /data/cmsbld/jenkins/workspace/ib-run-pr-tests/CMSSW_14_0_ROOT6_X_2024-01-28-2300/src/PhysicsTools/NanoAOD/plugins/rntuple/TriggerOutputFields.cc:126:38: error: 'class ROOT::Experimental::RNTupleModel' has no member named 'Get'; 126 | const auto* existing_field = model.Get<bool>(name);; | ^~~; /data/cmsbld/jenkins/workspace/ib-run-pr-tests/CMSSW_14_0_ROOT6_X_2024-01-28-2300/src/PhysicsTools/NanoAOD/plugins/rntuple/TriggerOutputFields.cc:126:42: error: expected primary-expression before 'bool'; 126 | const auto* existing_field = model.Get<bool>(name);; | ^~~~; /data/cmsbld/jenkins/workspace/ib-run-pr-tests/CMSSW_14_0_ROOT6_X_2024-01-28-2300/src/PhysicsTools/NanoAOD/plugins/rntuple/NanoAODRNTupleOutputModule.cc: In member function 'void NanoAODRNTupleOutputModule::CommonEventFields::createFields(ROOT::Experimental::RNTupleModel&)':; /data/cmsbld/jenkins/workspace/ib-run-pr-tests/CMSSW_14_0_ROOT6_X_2024-01-28-2300/src/PhysicsTools/NanoAOD/plugins/rntuple/NanoAODRNTupleOutputModule.cc:77:28: error: expected primary-expression before '>' token; 77 | model.AddField<UInt_t>(""run"", &m_run);; | ^; /data/cmsbld/jenkins/workspace/ib-run-pr-tests/CMSSW_14_0_ROOT6_X_2024-01-28-2300/src/PhysicsTools/NanoAOD/plugins/rntuple/NanoAODRNTupleOutputModule.cc:77:30: error: left operand of comma operator has no effect [-Werror=unused-value]; 77 | model.A",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14454#issuecomment-1914756475:142,error,errors,142,https://root.cern,https://github.com/root-project/root/pull/14454#issuecomment-1914756475,2,['error'],"['error', 'errors']"
Availability,"@jblomer : I added few tests equivalent to the Davix tests (sorry for the lack creativity) and I also took the liberty and modified `root://eospublic.cern.ch//eos/root-eos/xrootd.test` so it is in line with `http://root.cern.ch/files/davix.test`. ```; ctest -I 164,165; Test project /home/simonm/git/root-my/buildtmp; Start 164: gtest-net-davix-test-RRawFileDavix; 1/2 Test #164: gtest-net-davix-test-RRawFileDavix ..... Passed 0.20 sec; Start 165: gtest-net-netxng-test-RRawFileNetXNG; 2/2 Test #165: gtest-net-netxng-test-RRawFileNetXNG ... Passed 0.05 sec; ```. However running the full test suite yielded some failures:. ```; 99% tests passed, 18 tests failed out of 2101. Label Time Summary:; cling = 69.10 sec; longtest = 1541.18 sec; matrix = 0.22 sec; multithreaded = 206.29 sec; python_runtime_deps = 27.45 sec; regression = 68.69 sec; roottest = 69.32 sec; tutorial = 1559.92 sec. Total Test time (real) = 5594.32 sec. The following tests FAILED:; 	 3 - pyunittests-pyroot-dependency-versions (Failed); 	 56 - pyunittests-pyroot-numbadeclare (Failed); 	 57 - test-import-numba (Failed); 	918 - tutorial-dataframe-df026_AsNumpyArrays-py (Failed); 	920 - test-import-pandas (Failed); 	961 - tutorial-pyroot-pyroot004_NumbaDeclare-py (Failed); 	962 - test-import-numba (Failed); 	1219 - roottest-python-JupyROOT-cppcompleter_doctest (Failed); 	1220 - roottest-python-JupyROOT-handlers_doctest (Failed); 	1221 - roottest-python-JupyROOT-utils_doctest (Failed); 	1222 - roottest-python-JupyROOT-importROOT_notebook (Failed); 	1223 - roottest-python-JupyROOT-simpleCppMagic_notebook (Failed); 	1224 - roottest-python-JupyROOT-thread_local_notebook (Failed); 	1225 - roottest-python-JupyROOT-ROOT_kernel_notebook (Failed); 	1226 - roottest-python-JupyROOT-tpython_notebook (Failed); 	1227 - roottest-python-JupyROOT-Cpp_IMT_Canvas_notebook (Failed); 	1444 - roottest-root-html-runMakeIndex (Failed); 	1627 - roottest-root-meta-execTypedefList-auto (Failed); ```. I don't think it's related to the P",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9012#issuecomment-948823698:614,failure,failures,614,https://root.cern,https://github.com/root-project/root/pull/9012#issuecomment-948823698,1,['failure'],['failures']
Availability,"@jblomer : thanks a lot for your comments, I will address them shortly!; ; >One thing I'd like to discuss before merging is how we can unit test the code. If there is a stable, publicly available XRootD >service with test data, we can use the RRawFileDavix unit test as a blueprint. Otherwise, given that we have access to the xrootd >library, perhaps we can spawn a simple ad-hoc server in another thread. Well, I think one nice thing that we could do is to have an XRootD server with an HTTP plugin exporting same files with both root and HTTP protocols. Then we could simply run all the tests you currently have for the `RRawFileDavix` also for `RRawFileNetXNG`. If you have some stress tests we could even use them to benchmark the two protocols.; Could we use `root.cern.ch` to do this? Otherwise, I can create a small testing service, I would need to see what machine I can get.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9012#issuecomment-922713482:186,avail,available,186,https://root.cern,https://github.com/root-project/root/pull/9012#issuecomment-922713482,2,['avail'],['available']
Availability,"@jblomer @dpiparo both build failures are due to sqlite not being present on the machine.; @amadio suggests that the datasource be made optional in tree/dataframe/CMakeLists.txt, so it's not built when sqlite is not available.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2322#issuecomment-416272423:29,failure,failures,29,https://root.cern,https://github.com/root-project/root/pull/2322#issuecomment-416272423,2,"['avail', 'failure']","['available', 'failures']"
Availability,"@jblomer I added logging in 1916d13c83. Logged errors look like: ; ```text; [ RUN ] RIoUring.IsAvailable; io_uring is not available; Error initializing io_uring: Invalid argument; At:; ROOT::Internal::RIoUring::RIoUring(size_t) [/home/max/projects/rootdev/root/io/io/inc/ROOT/RIoUring.hxx:31]; ```. I ran into a weird error when I was messing around making the `io_uring_queue_init` fail with crazy ring sizes like 10000 where any other `io_uring_queue_init` calls (even from separate processes!) failed. It's possible there's a leak on our end, but am I pretty sure this is actually a resolved issue on the `liburing` side (https://github.com/axboe/liburing/issues/157). I am running an affected version (5.7.1) so that could be an explanation. I will keep an eye out for this in the future in case it's indeed my fault.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5919#issuecomment-664636722:47,error,errors,47,https://root.cern,https://github.com/root-project/root/pull/5919#issuecomment-664636722,5,"['Error', 'avail', 'error', 'fault']","['Error', 'available', 'error', 'errors', 'fault']"
Availability,@jblomer Very nice find. Thanks. The failure in roottest_root_multicore_tp_process_imt is unrelated (due to the performance vagaries of root.cern.ch).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2089#issuecomment-392032278:37,failure,failure,37,https://root.cern,https://github.com/root-project/root/pull/2089#issuecomment-392032278,1,['failure'],['failure']
Availability,"@jblomer due to recent modifications to the PR builds, jenkins does not rebase your branch over ROOT master before building anymore. As a result your branch is out of sync with roottest, and that's why you get these failures in `projectroot.roottest.root.dataframe.roottest_root_dataframe_misc`. Rebasing your PR branch on master should get rid of these failures. pinging @vgvassilev and @amadio just so they know.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2322#issuecomment-412618706:216,failure,failures,216,https://root.cern,https://github.com/root-project/root/pull/2322#issuecomment-412618706,3,"['failure', 'ping']","['failures', 'pinging']"
Availability,"@jblomer it very well might be... the error looks it likely comes from ring initialization repeatedly failing to allocate, until it reaches 0 and becomes an invalid argument error. I will improve the error message for this case. . I may have run into the same issue in the past (see https://github.com/root-project/root/pull/5919#issuecomment-664636722), which I believe stemmed from a timing issue for repeated ring exits and inits (https://github.com/axboe/liburing/issues/157#issuecomment-656731069). This may be the cause for some kernels, I'm not sure which are affected exactly but believe 5.7.9 and up have the fix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6162#issuecomment-678305168:38,error,error,38,https://root.cern,https://github.com/root-project/root/pull/6162#issuecomment-678305168,3,['error'],['error']
Availability,@jblomer seems that there's a problem with one of the changes in dataframe's CMakeLists:; ```; 09:31:20 CMake Error at tree/dataframe/CMakeLists.txt:34 (target_include_directories):; 09:31:20 target_include_directories called with invalid arguments; ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2608#issuecomment-419817093:110,Error,Error,110,https://root.cern,https://github.com/root-project/root/pull/2608#issuecomment-419817093,1,['Error'],['Error']
Availability,@jblomer thanks for this. Unfortunately I still see the segmentation fault when reading an RNTuple file while the job uses 10 or more threads.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16737#issuecomment-2438050598:69,fault,fault,69,https://root.cern,https://github.com/root-project/root/pull/16737#issuecomment-2438050598,1,['fault'],['fault']
Availability,@jblomer the failure at https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/145821/testReport/projectroot.tree.dataframe/test/gtest_tree_dataframe_test_datasource_ntuple/ seems real -- we get a different type name for mac 11..?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10621#issuecomment-1135499768:13,failure,failure,13,https://root.cern,https://github.com/root-project/root/pull/10621#issuecomment-1135499768,1,['failure'],['failure']
Availability,"@jblomer you can manually disable warnings in some specific points of the code using a ""NOLINT(error-type)"" comment, see https://github.com/root-project/root/issues/7412#issuecomment-794182724 without having to turn them off globally.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8773#issuecomment-892524873:95,error,error-type,95,https://root.cern,https://github.com/root-project/root/pull/8773#issuecomment-892524873,1,['error'],['error-type']
Availability,"@junaire tests *should* be clean in CI builds, as you can see for this PR. Any failures are introduced by the code changes, possibly due to exposing other issues (as was the case here, leading to this fix). And it's not only some obscure platforms, but both macOS and two of the three Linux platforms. But we should discuss this on the PR itself, not here...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11514#issuecomment-1273026077:79,failure,failures,79,https://root.cern,https://github.com/root-project/root/pull/11514#issuecomment-1273026077,1,['failure'],['failures']
Availability,"@kamahori Jenkins results of tests are not available for people without CERN account, I am sorry for this. Windows failure is not connected with your test, but is actually infrastructure configuration issue (you need to fork https://github.com/root-project/roottest and it will be gone).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5081#issuecomment-593975063:43,avail,available,43,https://root.cern,https://github.com/root-project/root/pull/5081#issuecomment-593975063,2,"['avail', 'failure']","['available', 'failure']"
Availability,@kamahori great job! ; No worries about Mac it has unrelated to your development error - outdated C++ modules.; I will review PR in the next couple days!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6221#issuecomment-693216661:81,error,error,81,https://root.cern,https://github.com/root-project/root/pull/6221#issuecomment-693216661,1,['error'],['error']
Availability,"@kamahori no worries about test failures, it is unrelated to your changes",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5081#issuecomment-603096683:32,failure,failures,32,https://root.cern,https://github.com/root-project/root/pull/5081#issuecomment-603096683,1,['failure'],['failures']
Availability,@kgertsenberger please fork also roottest to fix the Windows build error,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3961#issuecomment-505442308:67,error,error,67,https://root.cern,https://github.com/root-project/root/pull/3961#issuecomment-505442308,1,['error'],['error']
Availability,"@kgizdov please fork also roottest, to prevent timeout errors on `windows10/cxx14`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5084#issuecomment-594040578:55,error,errors,55,https://root.cern,https://github.com/root-project/root/pull/5084#issuecomment-594040578,1,['error'],['errors']
Availability,"@kgizdov the problem is the two cases are non-exhaustive: For versions before 3.11.0, our own forward declaration will always work. Starting with 3.11.2, `json_fwd.hpp` is always available. But in between, for 3.11.0 and 3.11.1, we can hit an ""external"" version of the library without `json_fwd.hpp` where our own forward declaration doesn't work (because of https://github.com/nlohmann/json/pull/3590). It's not clear to me how to make this case work, but I also don't think it's really that important.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11130#issuecomment-1218222161:179,avail,available,179,https://root.cern,https://github.com/root-project/root/issues/11130#issuecomment-1218222161,2,['avail'],['available']
Availability,@krasznaa : here are the shared libs loaded by the client:; ```; /usr/lib64/libnss_dns-2.17.so; /usr/lib64/libnss_files-2.17.so; /usr/lib64/libbz2.so.1.0.6; /usr/lib64/libelf-0.176.so; /usr/lib64/libpcre.so.1.2.0; /usr/lib64/libattr.so.1.1.0; /usr/lib64/libkeyutils.so.1.5; /usr/lib64/libkrb5support.so.0.1; /usr/lib64/libdw-0.176.so; /usr/lib64/libresolv-2.17.so; /usr/lib64/libgpg-error.so.0.10.0; /usr/lib64/libgcrypt.so.11.8.2; /usr/lib64/liblz4.so.1.8.3; /usr/lib64/liblzma.so.5.2.2; /usr/lib64/libselinux.so.1; /usr/lib64/libcap.so.2.22; /usr/lib64/libk5crypto.so.3.1; /usr/lib64/libcom_err.so.2.1; /usr/lib64/libkrb5.so.3.3; /usr/lib64/libgssapi_krb5.so.2.2; /usr/lib64/libxml2.so.2.9.1; /usr/lib64/libsystemd.so.0.6.0; /usr/lib64/libcrypto.so.1.0.2k; /usr/lib64/libssl.so.1.0.2k; /usr/lib64/libdl-2.17.so; /usr/lib64/librt-2.17.so; /usr/lib64/libz.so.1.2.7; /usr/lib64/libuuid.so.1.3.0; /usr/lib64/libpthread-2.17.so; /xrootd/build/src/libXrdXml.so.3.0.0; /usr/lib64/libc-2.17.so; /usr/lib64/libgcc_s-4.8.5-20150702.so.1; /usr/lib64/libm-2.17.so; /usr/lib64/libstdc++.so.6.0.19; /xrootd/build/src/libXrdUtils.so.3.0.0; /xrootd/build/src/libXrdAppUtils.so.2.0.0; /xrootd/build/src/XrdCl/libXrdCl.so.3.0.0; /usr/lib64/ld-2.17.so; ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6948#issuecomment-757877632:383,error,error,383,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-757877632,1,['error'],['error']
Availability,"@krasznaa, is it possible to make a dbg build for xrootd that would be available on cvmfs? Not sure if this is easy.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6948#issuecomment-760466574:71,avail,available,71,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-760466574,1,['avail'],['available']
Availability,@ktf @aalkin: ping: this is an alternative solution that works for me to solve the LLVM symbol issue.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4668#issuecomment-561067824:14,ping,ping,14,https://root.cern,https://github.com/root-project/root/pull/4668#issuecomment-561067824,1,['ping'],['ping']
Availability,"@ktf it does not look like it's the PR's fault:. ```; 10:21:39 CMake Error at cmake/modules/SearchInstalledSoftware.cmake:1617 (target_include_directories):; 10:21:39 Cannot specify include directories for imported target ""gtest"".; 10:21:39 Call Stack (most recent call first):; 10:21:39 CMakeLists.txt:183 (include); 10:21:39 ; 10:21:39 ; 10:21:39 CMake Error at cmake/modules/SearchInstalledSoftware.cmake:1618 (target_include_directories):; 10:21:39 Cannot specify include directories for imported target ""gmock"".; 10:21:39 Call Stack (most recent call first):; 10:21:39 CMakeLists.txt:183 (include); ```. Let's try again, might have been a glitch",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5393#issuecomment-616407242:41,fault,fault,41,https://root.cern,https://github.com/root-project/root/pull/5393#issuecomment-616407242,3,"['Error', 'fault']","['Error', 'fault']"
Availability,@ktf ping,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3433#issuecomment-616374787:5,ping,ping,5,https://root.cern,https://github.com/root-project/root/pull/3433#issuecomment-616374787,1,['ping'],['ping']
Availability,@ktf ping...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13808#issuecomment-1788523306:5,ping,ping,5,https://root.cern,https://github.com/root-project/root/pull/13808#issuecomment-1788523306,1,['ping'],['ping']
Availability,@ktf please fork also roottest to prevent build failure on `windows10/cxx14`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5394#issuecomment-616492995:48,failure,failure,48,https://root.cern,https://github.com/root-project/root/pull/5394#issuecomment-616492995,1,['failure'],['failure']
Availability,"@ktf, I believe there is a way to download the container of the failing build. Not sure how. @Axel-Naumann probably knows.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13808#issuecomment-1788856498:34,down,download,34,https://root.cern,https://github.com/root-project/root/pull/13808#issuecomment-1788856498,1,['down'],['download']
Availability,"@ktf, here is how to get the fedora38 debug build failure according to the bot:. ```; Grab the image:; $ docker run --shm-size=1g -m 16g --security-opt label=disable -it registry.cern.ch/root-ci/fedora38:buildready; Then:; ; ; (; rm -rf /github/home/ROOT-CI; mkdir -p /github/home/ROOT-CI; ); (; curl --output /github/home/ROOT-CI/artifacts.tar.gz https://s3.cern.ch/swift/v1/ROOT-build-artifacts/fedora38/master/Debug/c8bf26fbd62398395855e8d992e7688980a1d318/2023-10-05.tar.gz; ); (; cd /github/home/ROOT-CI && tar -xf /github/home/ROOT-CI/artifacts.tar.gz; ); (; cd '/github/home/ROOT-CI/src'; git checkout master; git fetch; git reset --hard @{u}; ); (; cd '/github/home/ROOT-CI/src'; ; git config user.email ""rootci@root.cern""; git config user.name 'ROOT Continous Integration'; ; git fetch origin refs/pull/13808/head:reduce-memory-usage; git checkout reduce-memory-usage; git rebase master; ); (; which cmake; cmake --version; which c++ || true; c++ --version || true; uname -a || true; cat /etc/os-release || true; sw_vers || true; uptime || true; df || true; ); (; cmake -S '/github/home/ROOT-CI/src' -B '/github/home/ROOT-CI/build' -N -L; ); (; cmake --build '/github/home/ROOT-CI/build' --config 'Debug' --parallel '16'; ); (; cd '/github/home/ROOT-CI/build'; ctest --output-on-failure --parallel 16 --output-junit TestResults.xml; )```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13808#issuecomment-1791153635:50,failure,failure,50,https://root.cern,https://github.com/root-project/root/pull/13808#issuecomment-1791153635,2,['failure'],['failure']
Availability,"@ktf, if you find a minute, a nice way to complement the development could be:; - A tutorial in C++ and Python to illustrate the usage of the source; - A set of doxygen comments to describe the api, for example usage of columns in the ctor; As we said, I am available to give a hand.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1712#issuecomment-371599881:258,avail,available,258,https://root.cern,https://github.com/root-project/root/pull/1712#issuecomment-371599881,1,['avail'],['available']
Availability,"@ktf, what is your build configuration? To see these asserts one needs to enable assertions in LLVM with `-DLLVM_ENABLE_ASSERTIONS=On`. However, I'd suggest to build ROOT with debug LLVM with `-DLLVM_BUILD_TYPE=Debug`. This way you will be able to debug the failure directly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13808#issuecomment-1788545068:258,failure,failure,258,https://root.cern,https://github.com/root-project/root/pull/13808#issuecomment-1788545068,1,['failure'],['failure']
Availability,"@ktf,. ```; cat /Users/vvassilev/Downloads/log\ 2.txt | grep 'on demand'; [89725:internal-dpl-aod-reader]: Loading 'Core' on demand for 'TArrayF'; [89725:internal-dpl-aod-reader]: Loading 'Cling_Runtime' on demand for 'T'; [89725:internal-dpl-aod-reader]: Loading 'Smatrix' on demand for 'MatRepStd'; [89725:internal-dpl-aod-reader]: Loading 'MathCore' on demand for 'R'; [89725:internal-dpl-aod-reader]: Loading 'std' on demand for 'complex'; [89725:internal-dpl-aod-reader]: Loading 'GenVector' on demand for 'Cartesian2D'; [89725:internal-dpl-aod-reader]: Loading 'ROOT_Foundation_Stage1_NoRTTI' on demand for 'TVirtualIsAProxy'; [89725:internal-dpl-aod-reader]: Loading 'Tree' on demand for 'TIOFeatures'; [89725:internal-dpl-aod-reader]: Loading 'MultiProc' on demand for 'ReadBuffer'; [89725:internal-dpl-aod-reader]: Loading 'Hist' on demand for 'TH1'; [89725:internal-dpl-aod-reader]: Loading 'TreePlayer' on demand for 'TTreeFormula'; [89725:internal-dpl-aod-reader]: Loading 'RIO' on demand for 'TMapFile'; [89725:internal-dpl-aod-reader]: Loading 'ROOT_Rtypes' on demand for 'UChar_t'; ```. Looks quite good. However, for some reason we pre-load a lot more modules than I expect. Do you have an up-to-date ROOTSYS/lib/modules.idx file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13000#issuecomment-1598833198:33,Down,Downloads,33,https://root.cern,https://github.com/root-project/root/issues/13000#issuecomment-1598833198,1,['Down'],['Downloads']
Availability,@linev ; When will this be released? I feel it's quite important. I have seen the compilation information and there are still errors on some platforms.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13706#issuecomment-1732180694:126,error,errors,126,https://root.cern,https://github.com/root-project/root/pull/13706#issuecomment-1732180694,1,['error'],['errors']
Availability,"@linev BTW, `Should resolve circular dependency error, detected only on Windows` is not true, it was detected only on `ubuntu16/rtcxxmod`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3702#issuecomment-483707712:48,error,error,48,https://root.cern,https://github.com/root-project/root/pull/3702#issuecomment-483707712,1,['error'],['error']
Availability,@linev I can't see the exact reason for clang-format error which is reported above.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9643#issuecomment-1017941394:53,error,error,53,https://root.cern,https://github.com/root-project/root/pull/9643#issuecomment-1017941394,1,['error'],['error']
Availability,"@linev I don't know, what errors? :D",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7469#issuecomment-796744651:26,error,errors,26,https://root.cern,https://github.com/root-project/root/pull/7469#issuecomment-796744651,1,['error'],['errors']
Availability,@linev I have made a backport of this PR to 6.26 in #9643.; The 6.24 get this changes except error handling in table representation of REveDataCollection. This one as I know is used only by CMS event display.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9643#issuecomment-1020507036:93,error,error,93,https://root.cern,https://github.com/root-project/root/pull/9643#issuecomment-1020507036,1,['error'],['error']
Availability,@linev I have removed the oboslete part. That was a useful report. There was no runtime error because xr.length was undefined. Thanks!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10655#issuecomment-1138810571:88,error,error,88,https://root.cern,https://github.com/root-project/root/pull/10655#issuecomment-1138810571,1,['error'],['error']
Availability,@linev I saw osx11 errors from the previous PR. std::timespec is not defined there. An option is to use defines for Big Sur.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9013#issuecomment-922091195:19,error,errors,19,https://root.cern,https://github.com/root-project/root/pull/9013#issuecomment-922091195,1,['error'],['errors']
Availability,@linev I see the same error with https://jsroot.gsi.de/files/tmp/bug.html:; ```; Uncaught (in promise) TypeError: Failed to resolve module specifier '../modules/core.mjs'. The base URL is about:blank because import() is called from a CORS-cross-origin script.; at JSRoot.core.js:325:21; at JSRoot.core.js:3:77; at JSRoot.core.js:5:3; ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10727#issuecomment-1152256527:22,error,error,22,https://root.cern,https://github.com/root-project/root/issues/10727#issuecomment-1152256527,1,['error'],['error']
Availability,@linev I think the build errors are not related to this change.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9013#issuecomment-925364830:25,error,errors,25,https://root.cern,https://github.com/root-project/root/pull/9013#issuecomment-925364830,1,['error'],['errors']
Availability,@linev Please feel free to merge once Jenkins is done and passes (you can ignore unrelated failures if they show up...).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1623#issuecomment-367052082:91,failure,failures,91,https://root.cern,https://github.com/root-project/root/pull/1623#issuecomment-367052082,1,['failure'],['failures']
Availability,"@linev Thanks for the changes. Yes, usually one uses the uncached variables in the build, and CMake modules provide them because maybe you will need more than one include dir, or to add an include dir for a dependency, etc. Not that it was broken before, but this way is more robust to changes in fcgi=ON/OFF. As for config/Makefile.in, we should ask Axel. In ROOT it's not used anymore after the configure-based build system was removed. We could just remove the file, but I think that dependent projects still use it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4127#issuecomment-516328534:276,robust,robust,276,https://root.cern,https://github.com/root-project/root/pull/4127#issuecomment-516328534,1,['robust'],['robust']
Availability,"@linev for me cxxmodules are broken but it is most luckily not CMake related issue (so there is nothing you can do). ```; While building module 'TreePlayer' imported from /home/oksana/CERN_sources/root-rntuple/tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx:35:; In file included from <module-includes>:17:; In file included from /home/oksana/CERN_sources/root-rntuple/builds/include/TSimpleAnalysis.h:29:; In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/9.3.0/../../../../include/c++/9.3.0/fstream:38:; In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/9.3.0/../../../../include/c++/9.3.0/istream:38:; In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/9.3.0/../../../../include/c++/9.3.0/ios:44:; In file included from /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/9.3.0/../../../../include/c++/9.3.0/bits/basic_ios.h:37:; /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/9.3.0/../../../../include/c++/9.3.0/bits/locale_facets.h:2611:5: error: inline declaration of 'ispunct' follows non-inline definition; ispunct(_CharT __c, const locale& __loc); ^; In module 'Core' imported from /home/oksana/CERN_sources/root-rntuple/builds/include/TBranchProxyDirector.h:15:; /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/9.3.0/../../../../include/c++/9.3.0/bits/locale_facets.h:2611:5: note: previous definition is here; ispunct(_CharT __c, const locale& __loc); ^. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5445#issuecomment-618913334:969,error,error,969,https://root.cern,https://github.com/root-project/root/pull/5445#issuecomment-618913334,1,['error'],['error']
Availability,"@linev here i am talking about case when we use clang for linux (for example sl6).; Your patch doesn't fix existing problem. I tried and I see next:; ```; [sftnight@lcgapp-slc6-x86-64-39 build]$ make -j8 | grep warning; /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc52/LABEL/slc6/root/net/http/civetweb/civetweb.c:2704:16: warning: implicit declaration of function 'pthread_setname_np' is invalid in C99 [-Wimplicit-function-declaration]; (void)pthread_setname_np(pthread_self(), threadName);; ```. The problem that I am trying to resolve here is that for the case of **clang & linux combination**, where pthread_setname_np() is not available but in the same time _GNU_SOURCE is defined. With my patch, the warning seems to be disappeared.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2581#issuecomment-418329569:674,avail,available,674,https://root.cern,https://github.com/root-project/root/pull/2581#issuecomment-418329569,1,['avail'],['available']
Availability,"@linev my last commit is the code editor fully completed with my solution; On the diff i think you should be able to see all the improvements it does; It also a lot of abstraction to the code, creating possibilities for function that can be used across all element created by my function, like the function getElementFromCurrentTab(). I have also started to repair the indentations of the different functions, and cleaned the imports; Could you please have a new look ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4613#issuecomment-549433937:358,repair,repair,358,https://root.cern,https://github.com/root-project/root/pull/4613#issuecomment-549433937,1,['repair'],['repair']
Availability,@linev there are some failures on Windows: are they spurious?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16357#issuecomment-2326277440:22,failure,failures,22,https://root.cern,https://github.com/root-project/root/pull/16357#issuecomment-2326277440,1,['failure'],['failures']
Availability,"@linev we indeed got rid of the `WARNING:discardable_shared_memory_manager.cc(197)] Less than 64MB of free space in temporary directory for shared memory files: 62` but it doesn't help against:. ```; [0816/133157.441508:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory; [0816/133157.441577:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory; [0816/133157.431096:ERROR:bus.cc(399)] Failed to connect to the bus: Failed to connect to socket /run/dbus/system_bus_socket: No such file or directory; [0816/133157.512121:WARNING:bluez_dbus_manager.cc(247)] Floss manager not present, cannot set Floss enable/disable.; [0816/133157.717034:WARNING:sandbox_linux.cc(393)] InitializeSandbox() called with multiple threads in process gpu-process.; [0816/133157.889292:ERROR:headless_command_handler.cc(357)] Abnormal renderer termination.; Error in <[ROOT.WebGUI] Error /github/home/ROOT-CI/src/gui/webdisplay/src/RWebDisplayHandle.cxx:983 in static bool ROOT::Experimental::RWebDisplayHandle::ProduceImages(const std::string&, const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<int>&, const std::vector<int>&, const char*)>: Fail to dump HTML code into /tmp/canvasdumpyMx7eW; ```. See e.g. `tutorial-rcanvas-rline.cxx` in https://github.com/root-project/root/runs/15945550223",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13466#issuecomment-1680757009:220,ERROR,ERROR,220,https://root.cern,https://github.com/root-project/root/pull/13466#issuecomment-1680757009,6,"['ERROR', 'Error']","['ERROR', 'Error']"
Availability,"@lmoneta , ping.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9636#issuecomment-2241280859:11,ping,ping,11,https://root.cern,https://github.com/root-project/root/issues/9636#issuecomment-2241280859,1,['ping'],['ping']
Availability,"@lmoneta , we are [testing](https://github.com/cms-sw/cmsdist/pull/7911) latest [root changes in cmssw](https://github.com/root-project/root/compare/f1e8d0c17d...4c13caa0ac) and we are getting error [a] in `ROOT::Fit::Fitter` code. Could it be related to change in this PR? Note that root master commit f1e8d0c17d works fine. . By the way, the CMSSW code which calls `Fitter::FitFCN` is https://github.com/cms-sw/cmssw/blob/6d2f66057131baacc2fcbdd203588c41c885b42c/RecoPPS/ProtonReconstruction/src/ProtonReconstructionAlgorithm.cc#L269-L281. FYI @[iarspider](https://github.com/iarspider). [a]; ```; #0 0x00002aac70829ae1 in poll () from /lib64/libc.so.6; #1 0x00002aac78b8872f in full_read.constprop () from /cvmfs/cms-ci.cern.ch/week0/cms-sw/cmsdist/7911/25338/CMSSW_12_5_ROOT6_X_2022-06-06-2300/lib/el8_amd64_gcc10/pluginFWCoreServicesPlugins.so; #2 0x00002aac78b890bc in edm::service::InitRootHandlers::stacktraceFromThread() () from /cvmfs/cms-ci.cern.ch/week0/cms-sw/cmsdist/7911/25338/CMSSW_12_5_ROOT6_X_2022-06-06-2300/lib/el8_amd64_gcc10/pluginFWCoreServicesPlugins.so; #3 0x00002aac78b8ba0b in sig_dostack_then_abort () from /cvmfs/cms-ci.cern.ch/week0/cms-sw/cmsdist/7911/25338/CMSSW_12_5_ROOT6_X_2022-06-06-2300/lib/el8_amd64_gcc10/pluginFWCoreServicesPlugins.so; #4 <signal handler called>; #5 __cxxabiv1::(anonymous namespace)::adjust_pointer<void> (offset=<error reading variable: Cannot access memory at address 0xfffffffffffffff0>, base=0x7ffc4c62b5b0) at ../../../../libstdc++-v3/libsupc++/tinfo.h:65; #6 __cxxabiv1::__dynamic_cast (src_ptr=0x7ffc4c62b5b0, src_type=0x2aac6e5a6df0 <typeinfo for ROOT::Math::IBaseFunctionMultiDimTempl<double>>, dst_type=0x2aac6e5a69f0 <typeinfo for ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDimTempl<double>, ROOT::Math::IParametricFunctionMultiDimTempl<double>, ROOT::Fit::BinData>>, src2dst=0) at ../../../../libstdc++-v3/libsupc++/dyncast.cc:55; #7 0x00002aac6e40b2d0 in ROOT::Fit::Fitter::GetDataFromFCN<ROOT::Fit::BasicFCN<ROOT::Math::IB",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10650#issuecomment-1149048876:193,error,error,193,https://root.cern,https://github.com/root-project/root/pull/10650#issuecomment-1149048876,1,['error'],['error']
Availability,"@lmoneta @sanjibansg ; I am getting the below error for the renge operator, can you please help me with it? I think the error is due to the stod function used to convert string input to double.; ![image](https://github.com/root-project/root/assets/84740927/59c70650-b744-47b1-a0d0-eea0abd10008)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12941#issuecomment-1575187111:46,error,error,46,https://root.cern,https://github.com/root-project/root/pull/12941#issuecomment-1575187111,2,['error'],['error']
Availability,@lmoneta Are you available to take a look at this one?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11949#issuecomment-1836188008:17,avail,available,17,https://root.cern,https://github.com/root-project/root/pull/11949#issuecomment-1836188008,1,['avail'],['available']
Availability,@lmoneta Do I need to check cmdList parameter for same name and then emit a warning/error about the same?; If yes then should I add the condition within [this](https://github.com/root-project/root/blob/master/roofit/roofitcore/src/RooAbsPdf.cxx#L1292) itself ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7417#issuecomment-810034450:84,error,error,84,https://root.cern,https://github.com/root-project/root/issues/7417#issuecomment-810034450,1,['error'],['error']
Availability,"@lmoneta I am closing this, your patch is perfectly fine. The iminuit tests that failed were all spurious. One of them was actually a faulty test that accidentally passed so far. Others failed merely because the gradient function is now called only later. I started some tests directly at the minimum of a function and then the fit converged on the seed already so that the gradient was never called at all. That is not a problem with the Minuit2 C++ code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7085#issuecomment-770029370:134,fault,faulty,134,https://root.cern,https://github.com/root-project/root/pull/7085#issuecomment-770029370,1,['fault'],['faulty']
Availability,@lmoneta I am using your branch to test with the cmake command:; ```; '/mnt/build/lcgsoft/releases/cmake-3.15.7-Linux-x86_64/bin/cmake' '-DCMAKE_BUILD_TYPE=Release' '-DCMAKE_INSTALL_PREFIX=/build/lcgsoft/releases/dev4cuda/ROOT/fix_cuda14/x86_64-centos7-gcc8-opt' '-Dpython=ON' '-Dpython3=ON' '-Dpython_version=3' '-Dbuiltin_lz4=ON' '-Dbuiltin_pcre=ON' '-Dbuiltin_xxhash=ON' '-Dbuiltin_ftgl=ON' '-Dbuiltin_afterimage=ON' '-Dbuiltin_glew=ON' '-Dbuiltin_unuran=ON' '-Dbuiltin_zstd=ON' '-Dcintex=ON' '-Dcuda=ON' '-Dtmva-gpu=ON' '-DCMAKE_CUDA_STANDARD=14' '-Ddavix=ON' '-Dexceptions=ON' '-Dexplicitlink=ON' '-Dfftw3=ON' '-Dgdml=ON' '-Dgsl_shared=ON' '-Dhttp=ON' '-Dgenvector=ON' '-Dvc=ON' '-Dmathmore=ON' '-Dminuit2=ON' '-Dmysql=ON' '-Dopengl=ON' '-Dpgsql=OFF' '-Dpythia6=OFF' '-Dpythia8=OFF' '-Dreflex=ON' '-Dr=OFF' '-Droofit=ON' '-Dssl=ON' '-Dunuran=ON' '-Dfortran=ON' '-Dxft=ON' '-Dxml=ON' '-Dxrootd=ON' '-Dzlib=ON' '-DCINTMAXSTRUCT=36000' '-DCINTMAXTYPEDEF=36000' '-DCINTLONGLINE=4096' '-Dfail-on-missing=ON' '-Dfitsio=ON' '-Doracle=OFF' '-Dgfal=OFF' '-DCMAKE_CXX_STANDARD=17' '-Ddcache=ON' '-Dgfal=ON' '-DGFAL_DIR=/build/lcgsoft/releases/dev4cuda/Grid/gfal/1.13.0-0/x86_64-centos7-gcc8-opt' '-DSRM_IFCE_DIR=/build/lcgsoft/releases/dev4cuda/Grid/srm-ifce/1.13.0-0/x86_64-centos7-gcc8-opt' '-Doracle=ON' '-DORACLE_HOME=/build/lcgsoft/releases/dev4cuda/oracle/19.3.0.0.0/x86_64-centos7-gcc8-opt' '-GUnix Makefiles' '/build/lcgsoft/root'; ```; And I am getting the following error:; ```; -- Configuring done; CMake Error at cmake/modules/RootMacros.cmake:894 (add_library):; CUDA_STANDARD is set to invalid value '17'; Call Stack (most recent call first):; cmake/modules/RootMacros.cmake:1295 (ROOT_LINKER_LIBRARY); tmva/tmva/CMakeLists.txt:53 (ROOT_STANDARD_LIBRARY_PACKAGE). -- Generating done; ```; Any idea?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5598#issuecomment-627358751:1471,error,error,1471,https://root.cern,https://github.com/root-project/root/pull/5598#issuecomment-627358751,2,"['Error', 'error']","['Error', 'error']"
Availability,"@lmoneta I changed the error to a warning, I hope we can merge now. :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6762#issuecomment-749547742:23,error,error,23,https://root.cern,https://github.com/root-project/root/pull/6762#issuecomment-749547742,1,['error'],['error']
Availability,@lmoneta I fixed the error and the warning. I tried `tutorials/fit/NumericalMinimization.C` with the fixed code on my computer and its works. I changed the line 55 to increase the print level to 4.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6705#issuecomment-734517609:21,error,error,21,https://root.cern,https://github.com/root-project/root/pull/6705#issuecomment-734517609,1,['error'],['error']
Availability,@lmoneta I ping you once again. What do you think about my idea?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7979#issuecomment-904554202:11,ping,ping,11,https://root.cern,https://github.com/root-project/root/issues/7979#issuecomment-904554202,1,['ping'],['ping']
Availability,@lmoneta Ping :),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7255#issuecomment-788871422:9,Ping,Ping,9,https://root.cern,https://github.com/root-project/root/pull/7255#issuecomment-788871422,1,['Ping'],['Ping']
Availability,@lmoneta Ping? :),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1183#issuecomment-337882181:9,Ping,Ping,9,https://root.cern,https://github.com/root-project/root/pull/1183#issuecomment-337882181,1,['Ping'],['Ping']
Availability,"@lmoneta The patch is ready for review. All logging is now done through `MnPrint`, which gained a static method `Log` with a severity level, a prefix for the actual message (usually set to the class name to indicate the origin of the message), and the actual message, which can consist of strings and streamable objects. For convenience, there are methods `Error`, `Warn`, `Info`, `Debug`, which use a globally set prefix for convenience and to make the code more readable and less redundant. The global prefix is set with a scope guard. Thanks to RAII, this works also for nested scopes. . Since I was going through all the code anyway, I replaced some c headers with the corresponding cxx headers (e.g. math.h with cmath). I did not touch Minuit2Minimizer, because it is only used by ROOT and I could not figure out how the logging works there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6705#issuecomment-717627738:357,Error,Error,357,https://root.cern,https://github.com/root-project/root/pull/6705#issuecomment-717627738,2,"['Error', 'redundant']","['Error', 'redundant']"
Availability,"@lmoneta This is likely to change the error message in case of incorrect user input, isn't it?. If so, did we (can we) check that the error message after is still 'comprehensible' for the user (if it is not the case, then we traded speed (in the successful case) for user frustration in error cases). Thanks,; Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2017#issuecomment-389591463:38,error,error,38,https://root.cern,https://github.com/root-project/root/pull/2017#issuecomment-389591463,3,['error'],['error']
Availability,"@lmoneta friendly ping :) I don't the think the failing test are connected to the PR, but I can't see the logs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8496#issuecomment-881678640:18,ping,ping,18,https://root.cern,https://github.com/root-project/root/pull/8496#issuecomment-881678640,1,['ping'],['ping']
Availability,@lmoneta ping,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10769#issuecomment-2124298882:9,ping,ping,9,https://root.cern,https://github.com/root-project/root/issues/10769#issuecomment-2124298882,1,['ping'],['ping']
Availability,@lmoneta ping!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1627#issuecomment-367793197:9,ping,ping,9,https://root.cern,https://github.com/root-project/root/pull/1627#issuecomment-367793197,1,['ping'],['ping']
Availability,"@lmoneta, it seems this PR is good to go, the failures are unrelated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9018#issuecomment-931977193:46,failure,failures,46,https://root.cern,https://github.com/root-project/root/pull/9018#issuecomment-931977193,1,['failure'],['failures']
Availability,"@lmoneta, shouldn't we link the whole archive of libVc.a into MathCore? We see some failures such as:; ```; root.exe -q -l -b test/testGenVectorVc.cxx . Processing test/testGenVectorVc.cxx...; IncrementalExecutor::executeFunction: symbol '_ZN4Vc_13SSE9c_general14signMaskDoubleE' unresolved while linking function '_GLOBAL__sub_I_cling_module_9'!; You are probably missing the definition of Vc_1::SSE::c_general::signMaskDouble; Maybe you need to load the corresponding shared library?; IncrementalExecutor::executeFunction: symbol '_ZN4Vc_13SSE9c_general13absMaskDoubleE' unresolved while linking function '_GLOBAL__sub_I_cling_module_9'!; You are probably missing the definition of Vc_1::SSE::c_general::absMaskDouble; Maybe you need to load the corresponding shared library?; IncrementalExecutor::executeFunction: symbol '_ZN4Vc_16Common10AllBitsSetE' unresolved while linking function '_GLOBAL__sub_I_cling_module_9'!; You are probably missing the definition of Vc_1::Common::AllBitsSet; Maybe you need to load the corresponding shared library?; warning: Failed to call `testGenVectorVc()` to execute the macro.; Add this function or rename the macro. Falling back to `.L`.; ```. Where: ; ```; nm externals/usr/local/lib/libVc.a | grep _ZN4Vc_13SSE9c_general14signMaskDoubleE; 0000000000000580 R _ZN4Vc_13SSE9c_general14signMaskDoubleE; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8788#issuecomment-890588377:84,failure,failures,84,https://root.cern,https://github.com/root-project/root/pull/8788#issuecomment-890588377,1,['failure'],['failures']
Availability,"@lmoneta, sorry failures are not connected to your changes, it is coming from the new 32b node (I disabled it).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4919#issuecomment-581816323:16,failure,failures,16,https://root.cern,https://github.com/root-project/root/pull/4919#issuecomment-581816323,1,['failure'],['failures']
Availability,"@lmoneta, this is ok to merge! (No test failures related to TMVA, this is true also for slc6/gcc49.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1958#issuecomment-386228851:40,failure,failures,40,https://root.cern,https://github.com/root-project/root/pull/1958#issuecomment-386228851,1,['failure'],['failures']
Availability,"@mario-krueger Thank you this catch! The errors are expected as they are (indirectly) suppose to catch change in the write of histograms; I will address them. However we did not catch this issue. Could you add a test (for example, how you discovered this). Thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7857#issuecomment-819068105:41,error,errors,41,https://root.cern,https://github.com/root-project/root/pull/7857#issuecomment-819068105,1,['error'],['errors']
Availability,"@marsupial I think this was fixed in more recent version of clang, but without this flag we got run-time undefined symbols errors. (I can re-investigate and give you more details if you need...)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1607#issuecomment-364155580:123,error,errors,123,https://root.cern,https://github.com/root-project/root/pull/1607#issuecomment-364155580,1,['error'],['errors']
Availability,"@marsupial, I can make the inclusion of `ConvertUTF.h` conditionally included if `LLVM_UTF8` is set. It is not clear to me what would be the benefit, though. There is more information about the virtual file changes here: https://reviews.llvm.org/D33275. I do not expect to mess up anything and I do not see any failures wrt to it. Can you give an example of which case you are thinking og?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/589#issuecomment-305095243:311,failure,failures,311,https://root.cern,https://github.com/root-project/root/pull/589#issuecomment-305095243,1,['failure'],['failures']
Availability,"@martamaja10 @pcanal @hageboeck @dpiparo The latest commits includes the final naming scheme for the API extension:. * `DefaultValueFor(colname, defaultval)`: lets the user provide one default value for the current entry of the input column, in case the value is missing.; * `FilterAvailable(colname)`: works in the same way as the traditional `Filter` operation, where the ""expression"" is ""is the value available?"". If so, the entry is kept, if not, it is discarded.; * `FilterMissing(colname)`: works in the same way as the traditional `Filter` operation, where the ""expression"" is ""is the value missing?"". If so, the entry is kept, if not, it is discarded.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15641#issuecomment-2368715973:404,avail,available,404,https://root.cern,https://github.com/root-project/root/pull/15641#issuecomment-2368715973,1,['avail'],['available']
Availability,"@maxgalli @etejedor any ideas on how we can make progress with this PR? Do we need to change configuration of node mac1014/cxx17?. Windows build seems to be ""green"":; ```; Error(s) when building project; 0 Compiler errors; 51 or more Compiler warnings; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4945#issuecomment-585718964:172,Error,Error,172,https://root.cern,https://github.com/root-project/root/pull/4945#issuecomment-585718964,2,"['Error', 'error']","['Error', 'errors']"
Availability,"@maxgalli `readFcc` fails because `writeFcc` fails. I have no idea what's causing the failure in `writeFcc`, but I assume it's safe to say it's not these changes since the test failed in the exact same way in another PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5083#issuecomment-603158050:86,failure,failure,86,https://root.cern,https://github.com/root-project/root/pull/5083#issuecomment-603158050,1,['failure'],['failure']
Availability,@mlassnig it is not related; it's a pre-existing failure. Sorry about that. The tests are green wrt this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1352#issuecomment-346401064:49,failure,failure,49,https://root.cern,https://github.com/root-project/root/pull/1352#issuecomment-346401064,1,['failure'],['failure']
Availability,@mrodozov please fork also [roottest](https://github.com/root-project/roottest) to avoid build failure on `windows10/cxx14`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6738#issuecomment-720461928:95,failure,failure,95,https://root.cern,https://github.com/root-project/root/pull/6738#issuecomment-720461928,1,['failure'],['failure']
Availability,@mxxo Please ping me when the splitting has been adjusted according to what we discussed and I should review again.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5619#issuecomment-633420193:13,ping,ping,13,https://root.cern,https://github.com/root-project/root/pull/5619#issuecomment-633420193,1,['ping'],['ping']
Availability,"@ntadej I tried to cherry-pick, but it only worked with three of the four fixes. Also, I only know that *merging* worked at the moment, but it's not clear whether it compiles or if tests work.; I will let it run and see, but to get the full fixes, you will have to wait for ROOT 6.22. The good news is that we will branch off the release candidate this week, so you could use the tag v6-22-00-rc1 or so when it's available.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5466#issuecomment-624594499:413,avail,available,413,https://root.cern,https://github.com/root-project/root/pull/5466#issuecomment-624594499,2,['avail'],['available']
Availability,"@odahme Here is a sample of the error output (that are many more of these lines in the full output).; The test failed on all Mac nodes. ```; Processing /Volumes/MacintoshHD2/ec/build/workspace/root-nightly-master-cxx14root7/BUILDTYPE/Release/COMPILER/native/LABEL/mac1012/root/tutorials/roofit/rf611_RooMCMarkovChainexample.C... [NON-XML-CHAR-0x1B][1mRooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby[NON-XML-CHAR-0x1B][0m ; Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University; All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, ; origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]; message : p.d.f normalization integral is zero or negative; server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0; [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, ; origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]; message : p.d.f normalization integral is zero or negative; server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0; [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, ; origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]; message : p.d.f normalization integral is zero or negative; server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0; [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, ; origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]; message : p.d.f normalization integral is zero or negative; server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0; [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, ; origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]; message : p.d.f normalization integral is zero or negative; server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0; [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, ; origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]; message : p.d.f normalization int",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1327#issuecomment-349216512:32,error,error,32,https://root.cern,https://github.com/root-project/root/pull/1327#issuecomment-349216512,5,"['ERROR', 'error']","['ERROR', 'error']"
Availability,"@odahme No, sorry, I'm not sure how to fix the problem, that's why I decided to revert the changes. Please discuss this with @lmoneta, as he can help you with that. Turning off the error messages is not a solution. Cheers,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1327#issuecomment-349229760:181,error,error,181,https://root.cern,https://github.com/root-project/root/pull/1327#issuecomment-349229760,1,['error'],['error']
Availability,@omazapa in case I tried from lxplus with different file: . ```; -bash-4.2$ root -l https://root.cern/files/Event.root; root [0]; Attaching file https://root.cern/files/Event.root as _file0...; Warning in <TClass::Init>: no dictionary for class Event is available; Warning in <TClass::Init>: no dictionary for class EventHeader is available; Warning in <TClass::Init>: no dictionary for class Track is available; (TFile *) 0x3d4d680; root [1]; ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8155#issuecomment-838829116:254,avail,available,254,https://root.cern,https://github.com/root-project/root/issues/8155#issuecomment-838829116,3,['avail'],['available']
Availability,@oshadura - are the build failures above related to the PR?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7068#issuecomment-774238915:26,failure,failures,26,https://root.cern,https://github.com/root-project/root/pull/7068#issuecomment-774238915,1,['failure'],['failures']
Availability,"@oshadura . There are also [real failures](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/116051/console) produced by new `root-webgui-ping` test, but I do not see any error output :(",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7901#issuecomment-829095490:33,failure,failures,33,https://root.cern,https://github.com/root-project/root/pull/7901#issuecomment-829095490,3,"['error', 'failure', 'ping']","['error', 'failures', 'ping']"
Availability,"@oshadura ; I have a question concerning xrootd & ROOT and it is does xrootd uses anything from ROOT as libraries/support/dependency ? ; I would've opened an issue but this is already open and it seems ROOT uses xrootd (or it might be using it); So what happens is that the xrootd works fine (at first), opens a file and then ROOT fails in . ```; Thread 1 ""cmsRun"" received signal SIGSEGV, Segmentation fault.; 0x00007ffff7567807 in TMutex::UnLock() (); ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7335#issuecomment-825601727:403,fault,fault,403,https://root.cern,https://github.com/root-project/root/pull/7335#issuecomment-825601727,1,['fault'],['fault']
Availability,@oshadura @yamaguchi1024 . I from my side start more precise testing with civetweb.; I see several other compiler errors and warnings - will try to fix them.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2629#issuecomment-422490016:114,error,errors,114,https://root.cern,https://github.com/root-project/root/pull/2629#issuecomment-422490016,1,['error'],['errors']
Availability,"@oshadura Thanks!; Moreover, Travis still has several errors:. ```; +RESULT_OUTPUT='/home/travis/build/root-project/root/main/src/hadd.cxx:117:10: error: '\''haddCommandLineOptionsHelp.h'\'' file not found [clang-diagnostic-error]; #include ""haddCommandLineOptionsHelp.h""; ^; /home/travis/build/root-project/root/core/zip/src/Bitshuffle_core.c:103:9: error: macro argument should be enclosed in parentheses [bugprone-macro-parentheses,-warnings-as-errors]; type_t* out_type = (type_t*) (out); \; ^~~~~~~; (); /home/travis/build/root-project/root/core/zip/src/Bitshuffle_core.c:321:15: error: Assigned value is garbage or undefined [clang-analyzer-core.uninitialized.Assign,-warnings-as-errors]; x = *((uint64_t*) &in_b[ii + jj]);; ^; ```. - The first one is unrelated to my change? (I did not edit hadd.cxx except the number of compression algorithms); - For the second one, if I add parenthesis it gets other errors.; - And for the last one I need some suggestions about how to fix:; https://github.com/root-project/root/blob/cab4dc9c3c4aabaf713d63abe844c5702e5bd2ac/core/zip/src/Bitshuffle_core.c#L319-L333",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6221#issuecomment-693229305:54,error,errors,54,https://root.cern,https://github.com/root-project/root/pull/6221#issuecomment-693229305,8,['error'],"['error', 'errors']"
Availability,@oshadura We seems to still have problems on some platforms:; ```; 23:36:33 [175/9590] Building C object builtins/zlib/CMakeFiles/ZLIB.dir/adler32.c.o; 23:36:33 FAILED: builtins/zlib/CMakeFiles/ZLIB.dir/adler32.c.o ; 23:36:33 ccache /cvmfs/sft.cern.ch/lcg/contrib/gcc/6.2/x86_64-slc6/bin/gcc -pipe -m64 -Wall -W -fPIC -pthread -O2 -DNDEBUG -fvisibility=hidden -Wno-unused-function -O3 -mpclmul -MD -MT builtins/zlib/CMakeFiles/ZLIB.dir/adler32.c.o -MF builtins/zlib/CMakeFiles/ZLIB.dir/adler32.c.o.d -o builtins/zlib/CMakeFiles/ZLIB.dir/adler32.c.o -c /mnt/build/jenkins/workspace/root-pullrequests-build/root/builtins/zlib/adler32.c; 23:36:33 {standard input}: Assembler messages:; 23:36:33 {standard input}:836: Error: suffix or operands invalid for `vpmaddubsw'; 23:36:33 {standard input}:837: Error: suffix or operands invalid for `vpmaddubsw'; 23:36:33 {standard input}:838: Error: suffix or operands invalid for `vpmaddwd'; 23:36:33 {standard input}:839: Error: suffix or operands invalid for `vpmaddwd'; 23:36:33 {standard input}:840: Error: suffix or operands invalid for `vpaddd'; 23:36:33 {standard input}:841: Error: suffix or operands invalid for `vpslld'; 23:36:33 {standard input}:843: Error: suffix or operands invalid for `vpaddd'; 23:36:33 {standard input}:844: Error: suffix or operands invalid for `vpaddd'; ```; Could you take a look?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1527#issuecomment-371649534:714,Error,Error,714,https://root.cern,https://github.com/root-project/root/pull/1527#issuecomment-371649534,8,['Error'],['Error']
Availability,"@oshadura Well, then I would have to **really** download a file (that's the only way to get `0` as return code) and then delete it if it is successful. I can do it that way if you prefer (that was my first approach) but I find it a bit too restrictive IMHO...; That was:; ```; #---Try to download a file to check internet connection-----------------------------------------; file(DOWNLOAD https://root.cern/files/test.txt ${CMAKE_CURRENT_BINARY_DIR}/test.txt; TIMEOUT 100 STATUS DOWNLOAD_STATUS; ); # Get the status code from the download status; list(GET DOWNLOAD_STATUS 0 STATUS_CODE); # Check if download was successful.; if(${STATUS_CODE} EQUAL 0); # success: remove the file and reset the NO_CONNECTION flag; file(REMOVE ${CMAKE_CURRENT_BINARY_DIR}/test.txt); set(NO_CONNECTION FALSE); else(); # failure: set the NO_CONNECTION flag; set(NO_CONNECTION TRUE); endif(); ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8520#issuecomment-866934563:48,down,download,48,https://root.cern,https://github.com/root-project/root/pull/8520#issuecomment-866934563,6,"['DOWN', 'down', 'failure']","['DOWNLOAD', 'download', 'failure']"
Availability,"@oshadura Yes, I had cloned rootest.git earlier, I just rebased my master branch to the current master. ; Can I see the error output please?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5086#issuecomment-599680680:120,error,error,120,https://root.cern,https://github.com/root-project/root/pull/5086#issuecomment-599680680,1,['error'],['error']
Availability,"@oshadura can you point me (us?) to the failure?. @bellenot as you seem to be much more knowledgeable about the windows things, could you take a look?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7031#issuecomment-809598561:40,failure,failure,40,https://root.cern,https://github.com/root-project/root/pull/7031#issuecomment-809598561,1,['failure'],['failure']
Availability,"@oshadura thanks for taking the lead on this!. @pcanal, @jblomer, I see here a good opportunity to finally disentangle the implicit dependency of Core on RIO due to the need to read the rdict.pcm files. Would it be possible to sink this work down in libFoundation? The benefits will be that you will get (b) and (d) (per https://github.com/root-project/root/pull/6532#discussion_r509533782) at relatively cheap implementation cost. The big advantage will be that regular ROOT Core will not depend on entire RIO for reading rdict.pcm files assuming we are aiming at a minimal version of IO capable of reading/writing root files. IMO, that'd disentangle a lot of the current complexities in ROOT's bootstrapping facilities.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6532#issuecomment-721652322:242,down,down,242,https://root.cern,https://github.com/root-project/root/pull/6532#issuecomment-721652322,1,['down'],['down']
Availability,"@oshadura, I think I found the bug, I will ping you if I need help.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3896#issuecomment-499223104:43,ping,ping,43,https://root.cern,https://github.com/root-project/root/pull/3896#issuecomment-499223104,1,['ping'],['ping']
Availability,"@osschar You can merge PR if you want, failures has nothing to do with your changes",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11180#issuecomment-1217539204:39,failure,failures,39,https://root.cern,https://github.com/root-project/root/pull/11180#issuecomment-1217539204,1,['failure'],['failures']
Availability,"@osschar the problem that it will not work... Having TGLIncludes.h (with #include <GL/glew.h>) make RGL depends on GLEW, and then as a consequence, I need to put graf3d\ftgl (FTGL) depends on RGL. Having this is creating circular dependency:. ```; CMake Error: The inter-target dependency graph contains the following strongly connected component (cycle):; ""FTGL"" of type SHARED_LIBRARY; depends on ""RGL"" (weak); ""RGL"" of type SHARED_LIBRARY; depends on ""FTGL"" (weak); At least one of these targets is not a STATIC_LIBRARY. Cyclic dependencies are allowed only among static libraries.; CMake Generate step failed. Build files cannot be regenerated correctly.; make: *** [Makefile:9096: cmake_check_build_system] Error 1; ```. Why it was not visible before because TGLIncludes.h were copied in ${CMAKE_BINARY_DIR}/include/ where it was picked up by whatever ROOT library you were building before. To achieve better modularity this could be fixed, in a way, I am proposing in this PR. -------------------------------------------------------------------------------------; Here is a test PR I opened to show you an error for your proposal: https://github.com/root-project/root/pull/4786; ```; C:\build\workspace\root-pullrequests-build\build\include\TGLIncludes.h(21,10): fatal error C1083: Cannot open include file: 'GL/glew.h': No such file or directory [C:\build\workspace\root-pullrequests-build\build\graf3d\ftgl\FTGL.vcxproj]; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4095#issuecomment-585676794:254,Error,Error,254,https://root.cern,https://github.com/root-project/root/pull/4095#issuecomment-585676794,4,"['Error', 'error']","['Error', 'error']"
Availability,"@p-bhagyashree and I have found an issue related to this one, which is hinted at in the last comment on the [forum post](https://root-forum.cern.ch/t/cannot-access-roomcstudy-genpardataset/46724/6) that was also linked in the description of this issue.; The comment mentions an error message, which we also observed (although the `prodpdf` is `simpdf` in our case):; ```; [#0] ERROR:InputArguments -- RooDataSet::merge(fitParData_prodpdf) ERROR: datasets have different size; ```; Looking through the source code, this is happening when attempting to merge the `fitParData` and `genParData`.; The reason that they are different sizes seems to be because [`genParData` is added to for every experiment that is generated](https://github.com/root-project/root/blob/v6-28-00/roofit/roofitcore/src/RooMCStudy.cxx#L368), while [`fitParData` is only added to if the fit succeeds](https://github.com/root-project/root/blob/v6-28-00/roofit/roofitcore/src/RooMCStudy.cxx#L683). The bug could presumably be fixed therefore by delaying the append to `genParData` and again only doing so if the fit is successful. This bug means that pull plots of constrained parameters appear completely different between a set of toys where all fits are successful (here they appear essentially Gaussian) and a set where one or more fits fail (here they are a delta function).; Should we open a new issue for this bug or can it be addressed here?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9490#issuecomment-1433404621:278,error,error,278,https://root.cern,https://github.com/root-project/root/issues/9490#issuecomment-1433404621,3,"['ERROR', 'error']","['ERROR', 'error']"
Availability,"@pavlo-svirin, I think I understand the problem. The errors are because we have to make the headers relative to the modulemap, meaning we have to prefix very header file in every modulemap with `../`. However, I think we should move back to the previous model where the modulemap are in the ROOTSYS/include folder. That'd help us progress with this PR. On a later stage, when/if we decide to resolve https://github.com/root-project/root/issues/16327",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16211#issuecomment-2346936729:53,error,errors,53,https://root.cern,https://github.com/root-project/root/pull/16211#issuecomment-2346936729,1,['error'],['errors']
Availability,"@pcanal , I am testing cms root master branch ( https://github.com/cms-sw/root/commits/cms/master/03d7710 ) without the revert of ofending commit (https://github.com/cms-sw/root/commit/f9834e30eaa01b5b8921e69bfe40681092303895 ) , once it is available then hopefully I will be able to provide you the instructions for reproducer",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7718#issuecomment-964896282:241,avail,available,241,https://root.cern,https://github.com/root-project/root/issues/7718#issuecomment-964896282,1,['avail'],['available']
Availability,"@pcanal , I am trying to test latest root v6-22 patches branch and we also get same failures there https://github.com/cms-sw/cmsdist/pull/6790#issuecomment-814504953",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7718#issuecomment-814603818:84,failure,failures,84,https://root.cern,https://github.com/root-project/root/issues/7718#issuecomment-814603818,1,['failure'],['failures']
Availability,"@pcanal , look like this has fixed CMSSW failures. CMSSW ROOT622 IBs (based on v6.22 patches branch + this PR) looks good now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6728#issuecomment-720298057:41,failure,failures,41,https://root.cern,https://github.com/root-project/root/pull/6728#issuecomment-720298057,1,['failure'],['failures']
Availability,"@pcanal , please use; ```; /cvmfs/cms-ci.cern.ch/week0/cms-sw/cmsdist/7442/20426/install.sh; cd CMSSW_12_2_ROOT6_X_2021-11-09-2300; ```; to create cmssw dev and then run the commands in https://github.com/root-project/root/issues/7718#issuecomment-815052660 and https://github.com/root-project/root/issues/7718#issuecomment-815212145 to reproduce the errors.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7718#issuecomment-965779440:351,error,errors,351,https://root.cern,https://github.com/root-project/root/issues/7718#issuecomment-965779440,1,['error'],['errors']
Availability,"@pcanal , this change is still part of root master and v6-26 branch and it causes runtime failures in cmssw [a]. Is there any plan to revert this for root master and v6-26 branches too?. [a] https://cmssdt.cern.ch/SDT/cgi-bin/logreader/slc7_amd64_gcc10/CMSSW_12_3_ROOT626_X_2022-01-11-0800/pyRelValMatrixLogs/run/134.807_RunDoubleEGPrpt2015C+RunDoubleEGPrpt2015C+HLTDR2_25ns+RECODR2_25nsreHLT_HIPM+HARVESTDR2/step2_RunDoubleEGPrpt2015C+RunDoubleEGPrpt2015C+HLTDR2_25ns+RECODR2_25nsreHLT_HIPM+HARVESTDR2.log#/; ```; cmsRun: /data/cmsbld/jenkins/workspace/build-any-ib/w/tmp/BUILDROOT/997e45a2cab6f1aa8d23229a1e263b28/opt/cmssw/slc7_amd64_gcc10/cms/cmssw/CMSSW_12_3_ROOT626_X_2022-01-11-0800/src/FWCore/Concurrency/src/WaitingTaskList.cc:57: void edm::WaitingTaskList::reset(): Assertion `m_head == nullptr' failed. A fatal system signal has occurred: abort signal; The following is the call stack containing the origin of the signal. Tue Jan 11 18:56:50 CET 2022; Thread 10 (Thread 0x2b61c6c00700 (LWP 19510) ""cmsRun""):; #0 0x00002b6177e159fd in nanosleep () from /lib64/libc.so.6; #1 0x00002b6177e15894 in sleep () from /lib64/libc.so.6; #2 0x00002b617d88eca0 in sig_pause_for_stacktrace () from /cvmfs/cms-ib.cern.ch/nweek-02715/slc7_amd64_gcc10/cms/cmssw/CMSSW_12_3_ROOT626_X_2022-01-11-0800/lib/slc7_amd64_gcc10/pluginFWCoreServicesPlugins.so; #3 <signal handler called>; #4 0x00002b61752e3570 in check_match () from /lib64/ld-linux-x86-64.so.2; #5 0x00002b61752e3dbb in do_lookup_x () from /lib64/ld-linux-x86-64.so.2; #6 0x00002b61752e409f in _dl_lookup_symbol_x () from /lib64/ld-linux-x86-64.so.2; #7 0x00002b61752e8dee in _dl_fixup () from /lib64/ld-linux-x86-64.so.2; #8 0x00002b61752f09ea in _dl_runtime_resolve_xsave () from /lib64/ld-linux-x86-64.so.2; #9 0x00002b61754a9961 in edm::WaitingTaskList::reset() () from /cvmfs/cms-ib.cern.ch/nweek-02715/slc7_amd64_gcc10/cms/cmssw/CMSSW_12_3_ROOT626_X_2022-01-11-0800/lib/slc7_amd64_gcc10/libFWCoreConcurrency.so; #10 0x00002b61757aa998 in edm",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7837#issuecomment-1010312773:90,failure,failures,90,https://root.cern,https://github.com/root-project/root/pull/7837#issuecomment-1010312773,1,['failure'],['failures']
Availability,"@pcanal , you can reproduce the error by doing the following on cmsdev20-25 VMs. This is based on root master (build in debug mode). ```; cd /build/pcanal; /cvmfs/cms-ci.cern.ch/week1/cms-sw/cmsdist/6788/14005/install.sh; cd CMSSW_11_3_ROOT6_X_2021-04-05-2300; eval `scram run -sh`; export CMS_PATH=/cvmfs/cms-ib.cern.ch; xrdcp root://eoscms.cern.ch//eos/cms/store/user/cmsbuild/store/relval/CMSSW_9_2_2/RelValProdTTbar_13/AODSIM/91X_mcRun2_asymptotic_v3-v1/10000/EEB99F74-DA4D-E711-A41C-0025905A48F2.root .; cp $CMSSW_BASE/src/PhysicsTools/PatAlgos/test/IntegrationTest_cfg.py .; sed -i -e ""s|= *filesRelValProdTTbarAODSIM|= cms.untracked.vstring('file://$CMSSW_BASE/EEB99F74-DA4D-E711-A41C-0025905A48F2.root')|"" IntegrationTest_cfg.py; cmsRun IntegrationTest_cfg.py. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7718#issuecomment-815052660:32,error,error,32,https://root.cern,https://github.com/root-project/root/issues/7718#issuecomment-815052660,1,['error'],['error']
Availability,"@pcanal , you can run the following to reproduce the error https://github.com/root-project/root/issues/7718#issuecomment-814425870. ```; # in cmssw area; cp $CMSSW_BASE/src/TopQuarkAnalysis/TopTools/test/ttJetPartonMatch_cfg.py .; sed -i -e ""s|(relValTTbar)|('file:///afs/cern.ch/user/c/cmsbuild/public/EEB99F74-DA4D-E711-A41C-0025905A48F2.root')|"" ttJetPartonMatch_cfg.py; cmsRun ttJetPartonMatch_cfg.py; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7718#issuecomment-815212145:53,error,error,53,https://root.cern,https://github.com/root-project/root/issues/7718#issuecomment-815212145,1,['error'],['error']
Availability,@pcanal - I believe I have addressed all review comments. I cannot reproduce the failure of `roottest-root-core-execStatusBitsCheck`; it's possible the fact I switched to an `enum class` avoids the underlying bug in that test?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/959#issuecomment-327899842:81,failure,failure,81,https://root.cern,https://github.com/root-project/root/pull/959#issuecomment-327899842,1,['failure'],['failure']
Availability,@pcanal - I believe all your above issues have been addressed. Note some of these items will revert suggestions from `clang-format`; expect a failure in the Travis-CI build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1003#issuecomment-331341113:142,failure,failure,142,https://root.cern,https://github.com/root-project/root/pull/1003#issuecomment-331341113,1,['failure'],['failure']
Availability,"@pcanal - release notes updated. I tried to reproduce the above test failure locally, but was unable to. Do you recognize it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/959#issuecomment-328403186:69,failure,failure,69,https://root.cern,https://github.com/root-project/root/pull/959#issuecomment-328403186,1,['failure'],['failure']
Availability,"@pcanal - thanks, but adding the header to the command line still does not work if that header does not include:. ```c++; #ifndef TwoInts_h; #define TwoInts_h. //#include <ROOT/RDataFrame.hxx>; //#include <ROOT/RVec.hxx>; //; //using namespace ROOT::VecOps;. struct TwoInts {; int a, b;; };. #endif /* TwoInts_h */; ```; ```bash; % rootcling -f mydict.cxx -rmf libmydict.rootmap -rml libmydict.so TwoInts.h LinkDef.h ; yana@iannas-macbook-pro AK-RDF % clang++ -mmacosx-version-min=11.6 -shared -o libmydict.so mydict.cxx `root-config --cflags --libs` ; mydict.cxx:56:70: error: no member named 'VecOps' in namespace 'ROOT'; static TGenericClassInfo *GenerateInitInstanceLocal(const ::ROOT::VecOps::RVec<ROOT::VecOps::RVec<int> >*); ~~~~~~~~^; mydict.cxx:56:89: error: no member named 'VecOps' in namespace 'ROOT'; static TGenericClassInfo *GenerateInitInstanceLocal(const ::ROOT::VecOps::RVec<ROOT::VecOps::RVec<int> >*); ~~~~~~^; mydict.cxx:56:105: error: expected '(' for function-style cast or type construction; static TGenericClassInfo *GenerateInitInstanceLocal(const ::ROOT::VecOps::RVec<ROOT::VecOps::RVec<int> >*); ~~~^; mydict.cxx:56:107: error: expected ')'; static TGenericClassInfo *GenerateInitInstanceLocal(const ::ROOT::VecOps::RVec<ROOT::VecOps::RVec<int> >*); ^; mydict.cxx:56:55: note: to match this '('; static TGenericClassInfo *GenerateInitInstanceLocal(const ::ROOT::VecOps::RVec<ROOT::VecOps::RVec<int> >*); ^; mydict.cxx:58:15: error: no member named 'VecOps' in namespace 'ROOT'; ::ROOT::VecOps::RVec<ROOT::VecOps::RVec<int> > *ptr = 0;; ~~~~~~~~^; mydict.cxx:58:34: error: no member named 'VecOps' in namespace 'ROOT'; ::ROOT::VecOps::RVec<ROOT::VecOps::RVec<int> > *ptr = 0;; ~~~~~~^; ...; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9920#issuecomment-1044024611:571,error,error,571,https://root.cern,https://github.com/root-project/root/issues/9920#issuecomment-1044024611,6,['error'],['error']
Availability,"@pcanal . I rebase PR and add commit for TList::RecursiveRemove(). ; I guess, it was logical error trying call recursive remove for object itself",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13506#issuecomment-1688309097:93,error,error,93,https://root.cern,https://github.com/root-project/root/pull/13506#issuecomment-1688309097,1,['error'],['error']
Availability,@pcanal : isn't this failure http://cdash.cern.ch/testDetails.php?test=64373639&build=651127 telling us that the test actually never worked correctly?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3746#issuecomment-487732368:21,failure,failure,21,https://root.cern,https://github.com/root-project/root/pull/3746#issuecomment-487732368,1,['failure'],['failure']
Availability,@pcanal ; And that about clang-tidy analyzer errors? ; It complains that virtual methods like `SysOpen` called in constructor - how it could works at all?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4253#issuecomment-523439561:45,error,errors,45,https://root.cern,https://github.com/root-project/root/pull/4253#issuecomment-523439561,1,['error'],['errors']
Availability,"@pcanal ; Hi Philippe, this failure is not only with modules. Just moving function definition of IPruneTool causes cmsUnload test failure with master, which can be seen in https://github.com/root-project/root/pull/2848 or https://github.com/root-project/root/commit/258d5c41f042dc260adfd24d5d51906a9c326236. This is very weird. Cling is failing to correctly unload AutoParse regardless of whether it has modules or not. I also thought that Cling was only partially removing transaction for AutoParse, but actually AutoParse was stored in one transaction so it wasn't a problem. I think the problem is that Cling is removing ""Names"" of SiStripCluster when unloading AutoParse (which is kind of expected) but then it complains that it doesn't know SiStripCluster even if libStrip.so is loaded.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2852#issuecomment-435040825:28,failure,failure,28,https://root.cern,https://github.com/root-project/root/pull/2852#issuecomment-435040825,2,['failure'],['failure']
Availability,"@pcanal ; Philippe, should I merge it? It is bugfix for the case when arbitrary objects were set to TCutG. In such case double deletion will cause seg fault",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4152#issuecomment-518659074:151,fault,fault,151,https://root.cern,https://github.com/root-project/root/pull/4152#issuecomment-518659074,1,['fault'],['fault']
Availability,"@pcanal @Axel-Naumann I spoke too soon. While I can request the dictionaries manually to get rid of the error I run into a problem when checking them:. In the pairdict example I can run the following in the root prompt. ```; root [2] c = TClass::GetClass(""std::pair<int,MyClass::MyEnum>"");; root [3] b = c->GetListOfBases(); (TList *) nullptr; ```. So the list of base classes doesn't exist. While for a `std::pair<int,int>` I get the correct base class to `__pair_base<int,int>` and it does have a class pointer:. ```; root [1] c = TClass::GetClass(""std::pair<int,int>"");; root [2] b = c->GetListOfBases(); (TList *) @0x7ffd1c3fce98; root [3] TBaseClass* bc = (TBaseClass*) *(b->begin()); (TBaseClass *) 0x1a678d0; root [4] *bc; (TBaseClass &) Name: __pair_base<int,int> Title:; root [5] bc->GetClassPointer(); (TClass *) 0x1a3e5f0; ```. Now after adding `#pragma link C++ class std::pair<int, MyClass::MyEnum>+;` to the `linkdef.h` the error message is gone but I get the following. ```; root [1] c = TClass::GetClass(""std::pair<int,MyClass::MyEnum>"");; root [2] b = c->GetListOfBases(); (TList *) @0x7fff4c93b268; root [3] TBaseClass* bc = (TBaseClass*) *(b->begin()); (TBaseClass *) 0x19c4bd0; root [4] *bc; (TBaseClass &) Name: __pair_base<int,MyClass::MyEnum> Title:; root [5] bc->GetClassPointer(); (TClass *) nullptr; ```. I do have the proper hierarchy but the `__pair_base` base class doesn't have a valid ClassPointer so I'm not convinced this is all working as intended. Now I can solve this weirdness as well by requesting the `std::_pair_base<T1,T2>` dictionaries as well. But at this point I am a bit skeptical so I would like some confirmation that this is not just some stupidity on my side. . I did make sure the example is reproducible with the vanilla ROOT 6.24 from `/cvmfs/sft.cern.ch/lcg/app/releases/ROOT/6.24.00/x86_64-ubuntu18-gcc75-opt`. ; That required a slight reordering of the compile flags but otherwise it produces exactly the same. ; The slightly updated version: [pa",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7960#issuecomment-832639691:104,error,error,104,https://root.cern,https://github.com/root-project/root/issues/7960#issuecomment-832639691,2,['error'],['error']
Availability,"@pcanal @Axel-Naumann I think I am ready here, TMVA and Windows failure is not connected with changes in this PR. C++ modules has a random failure of projectroot.roottest.root.tree.friend.roottest_root_tree_friend_make. Failure of filemerger test on centos7/clang39 is only reproducible with clang 3.9 (I tried with Yuka to reproduce using clang 7.0.0, we didn't see failure.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2889#issuecomment-435137819:64,failure,failure,64,https://root.cern,https://github.com/root-project/root/pull/2889#issuecomment-435137819,4,"['Failure', 'failure']","['Failure', 'failure']"
Availability,"@pcanal @Axel-Naumann Please check last commit: https://github.com/root-project/root/pull/7442/commits/00eba76434f292bb83e222f6cd9d0521b242fc2b Seems to be, potential error from `ExtractAutoloadKeys` was ignored",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7442#issuecomment-795338890:167,error,error,167,https://root.cern,https://github.com/root-project/root/pull/7442#issuecomment-795338890,1,['error'],['error']
Availability,@pcanal @Axel-Naumann So what do I do? Remove the ::Error()?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1175#issuecomment-335900921:52,Error,Error,52,https://root.cern,https://github.com/root-project/root/pull/1175#issuecomment-335900921,1,['Error'],['Error']
Availability,"@pcanal @Axel-Naumann it seems this patch gets rid of an error message we were testing for...?. ```; -- BEGIN OUTDIFF OUTPUT --; --- /home/sftnight/build/workspace/root-pullrequests-build/roottest/root/meta/expressiveErrorMessages.ref	Wed Apr 29 11:19:38 2020; +++ /home/sftnight/build/workspace/root-pullrequests-build/build/roottest/root/meta/expressiveErrorMessages.log	Thu May 14 11:20:57 2020; @@ -1,7 +1,4 @@; ; -expressiveErrorMessagesdictionarypayload:--:--:error:unknowntypename'bla'; -bla; -^; expressiveErrorMessagesdictionarypayload:--:--:error:expectedunqualified-id; classBexprMsg{};; ^. -- END OUTDIFF OUTPUT --; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5615#issuecomment-628576879:57,error,error,57,https://root.cern,https://github.com/root-project/root/pull/5615#issuecomment-628576879,3,['error'],['error']
Availability,"@pcanal @Axel-Naumann ping, what do you think of this patch?. (EDIT: without it, it's unclear to me how to check whether the TTreeReader loop completed successfully: sometimes it exits with `kEntryBeyondEnd`, sometimes with `kEntryNotFound` even if everything went fine)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8747#issuecomment-895044050:22,ping,ping,22,https://root.cern,https://github.com/root-project/root/pull/8747#issuecomment-895044050,1,['ping'],['ping']
Availability,"@pcanal @bbockelm . This pull request fix the bug here https://sft.its.cern.ch/jira/browse/ROOT-8468. The fist error is due to the dangling pointer. ""buffer"" never gets to be allocated in the function GetUnzipBuffer. The second error is deallocating the memory ""ptr"" point to. Therefore, fUnzipChunks[idxtounzip] becomes null pointer. It should work now. To test the parallel unzipping, simply random generate events and read them. /PATH/TO/TEST/eventexe 1000 6 99 1 1000 (generate 1000 events with zlib); /PATH/TO/TEST/eventexe 1000 6 99 20 1000 (unzip and read 1000 events in sequential manner); /PATH/TO/TEST/eventexe 1000 6 99 21 1000 (unzip and read 1000 events in parallel)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/319:111,error,error,111,https://root.cern,https://github.com/root-project/root/pull/319,2,['error'],['error']
Availability,"@pcanal @bbockelm ; The failed test cases seem to be transient failures that were shown as ""Time Out"".; I re-run all the failed tests on my desktop and all of them passed except this one:. [projectroot.roottest.root.multicore.roottest_root_multicore_tp_process_imt]. It is still shown as ""Time Out"" on my desktop. I also tried this particular test with latest upstream root. It can't pass either.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1010#issuecomment-365101355:63,failure,failures,63,https://root.cern,https://github.com/root-project/root/pull/1010#issuecomment-365101355,1,['failure'],['failures']
Availability,@pcanal @couet Ping? :),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1083#issuecomment-337882138:15,Ping,Ping,15,https://root.cern,https://github.com/root-project/root/pull/1083#issuecomment-337882138,1,['Ping'],['Ping']
Availability,"@pcanal @jblomer The failure on windows has nothing to do with this patch, there is a git failure due to a concurrency issue. I'll give a new try.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4888#issuecomment-580150404:21,failure,failure,21,https://root.cern,https://github.com/root-project/root/pull/4888#issuecomment-580150404,2,['failure'],['failure']
Availability,"@pcanal @jblomer, I agree with @vgvassilev - we had a chat today and it looks could be a pretty simple solution without any downsides and hacks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6532#issuecomment-721663576:124,down,downsides,124,https://root.cern,https://github.com/root-project/root/pull/6532#issuecomment-721663576,2,['down'],['downsides']
Availability,@pcanal Could you please give your ok here? I'd like to merge. I think the failures are unrelated and can be ignored (they have been fixed on master).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1089#issuecomment-333859788:75,failure,failures,75,https://root.cern,https://github.com/root-project/root/pull/1089#issuecomment-333859788,1,['failure'],['failures']
Availability,@pcanal Failure with `root_dataframe_test_splitcoll_arrayview` has nothing to do with the PR.; I just tried dummy PR #5155 - got same kind of errors,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5133#issuecomment-598911523:8,Failure,Failure,8,https://root.cern,https://github.com/root-project/root/pull/5133#issuecomment-598911523,2,"['Failure', 'error']","['Failure', 'errors']"
Availability,"@pcanal I am not sure I understand the first question, `fTreeName` should always be the name of a TTree. Regarding the python issue, as you see `python_ttree_ttree` started failing. The original code had this comment in the header - I don't know more than this:; ```; // We cannot use here the template method (TFile::GetObject) because the header will finish ; // in the PCH and the specialization will be available. PyROOT will not be able to specialize ; // the method for types other that TTree. ; ```. I can reinstate the comment if you wish, but it definitely looks like `TFile::GetObject` cannot be used in this header file. EDIT: I restored the original comment. Helped me, might help others in the future.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/828#issuecomment-319764334:407,avail,available,407,https://root.cern,https://github.com/root-project/root/pull/828#issuecomment-319764334,1,['avail'],['available']
Availability,@pcanal I changed the Error functions in constructors to ::Error and ignore the second error for now.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3612#issuecomment-478100282:22,Error,Error,22,https://root.cern,https://github.com/root-project/root/pull/3612#issuecomment-478100282,3,"['Error', 'error']","['Error', 'error']"
Availability,"@pcanal I changed the key for the `dirtodelete` map to include all 3 arguments: parent, name and pathname, as I think it's the only reliable way to know whether we're talking about the same directory or not.; The benchmarks remain basically the same as before and the tests are passing, so I think this could be a good solution.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16518#issuecomment-2396463160:132,reliab,reliable,132,https://root.cern,https://github.com/root-project/root/pull/16518#issuecomment-2396463160,1,['reliab'],['reliable']
Availability,"@pcanal I quickly tried with `std::array<int, 4>` but it looks like TTreeReaderArray has trouble with that type:. ```cpp; #include <ROOT/RDataFrame.hxx>; #include <array>. int foo() {; {; std::array<int, 4> a{1, 2, 3, 4};; TFile f(""f.root"", ""recreate"");; TTree t(""t"", ""t"");; t.Branch(""a"", &a);; t.Fill();; t.Write();; }. auto c = ROOT::RDataFrame(""t"", ""f.root""); .Filter([](std::array<int, 4> &a) { return a[0] == 1; }, {""a""}); .Filter(; [](ROOT::RVecI &v) {; return v.size() == 4 && v[0] == 1 && v[3] == 4;; },; {""a""}); .Count(); .GetValue();; return c;; }; ```. yields. ```; /tmp root -l -b -q foo.cpp+. Processing foo.cpp+...; Info in <TUnixSystem::ACLiC>: creating shared library /tmp/./foo_cpp.so; Error in <TTreeReaderValueBase::GetBranchDataType()>: Must use TTreeReaderArray to read branch a: it contains an array or a collection.; Error in <TTreeReaderValueBase::CreateProxy()>: The branch a contains data of type {UNDETERMINED TYPE}, which does not have a dictionary.; terminate called after throwing an instance of 'std::runtime_error'; what(): An error was encountered while processing the data. TTreeReader status code is: 6; ```. I'll put it on my to-do list to investigate further. As I mentioned above the safest way to fix this would be to switch from ""if this is not a Define, or a std::vector, or an RVec, or a TClonesArray, then it must be a C-style array and it needs special care"" to ""if this is not a C-style array, then no special care needed"", but even with your help I could not figure out how to code ""is this a C-style array?"".",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10268#issuecomment-1088451948:703,Error,Error,703,https://root.cern,https://github.com/root-project/root/pull/10268#issuecomment-1088451948,3,"['Error', 'error']","['Error', 'error']"
Availability,"@pcanal I reworked the error message for unimplemented merges in 0ccd1d3, thank you for the feedback :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6008#issuecomment-663685527:23,error,error,23,https://root.cern,https://github.com/root-project/root/pull/6008#issuecomment-663685527,2,['error'],['error']
Availability,"@pcanal I tracked this down to having libConverterVG.so leftover from a previous VecGeom-enabled installation in my lib folder. Removing the library manually solves the issue. Sorry for the noise, it shows the importance of cleaning up the installation folder after reconfiguring ROOT. I don't know if anything can/needs to be done on the cling side to detect this, so closing this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12326#issuecomment-1432874097:23,down,down,23,https://root.cern,https://github.com/root-project/root/issues/12326#issuecomment-1432874097,1,['down'],['down']
Availability,"@pcanal I use the class `MnMigrad` to minimize a function and I want to set the PrintLevel for that class. Quoting myself from two messages back:; We run MIGRAD with the class `MnMigrad`. If you look into `MnMigrad.h`, you will see that it only allows one to access the `ModularFunctionMinimizer` as a const reference. The `ModularFunctionMinimizer` allows us to access the `MinimumBuilder` as a const and non-const reference, but the latter is not available, because `ModularFunctionMinimizer` is already const. The only way to set the print level for `MnMigrad` that I can see is via; `MnMigrad.Minimizer().Builder().SetPrintLevel(...)`, and that only works when `SetPrintLevel(...)` is const.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1677#issuecomment-384994344:449,avail,available,449,https://root.cern,https://github.com/root-project/root/pull/1677#issuecomment-384994344,1,['avail'],['available']
Availability,"@pcanal I'd be okay with adjusting [roottest/root/meta/tclass/execState.C](https://github.com/root-project/roottest/blob/master/root/meta/tclass/execState.C) as follows:; ```diff; int execState() {; int result = 0;; ; - gROOT->ProcessLine(""class Event;"");; + gROOT->Declare(""class Event;"");; TClass *c = TClass::GetClass(""Event""); ; if (TClass::kForwardDeclared != c->GetState()) {; Error(""execState"",""State is %d instead of %d (TClass::kForwardDeclared)"",; ```; which should ""fix"" the test failure. What do you think?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9782#issuecomment-1027759510:383,Error,Error,383,https://root.cern,https://github.com/root-project/root/pull/9782#issuecomment-1027759510,2,"['Error', 'failure']","['Error', 'failure']"
Availability,"@pcanal I've added the requested tests. However, it is failing with the error; ```text; ***Failed Error regular expression found in output. Regex=[FAILED|Error in] 30.74 sec; ```; I'm not sure what's causing this problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4649#issuecomment-560429042:72,error,error,72,https://root.cern,https://github.com/root-project/root/pull/4649#issuecomment-560429042,3,"['Error', 'error']","['Error', 'error']"
Availability,@pcanal I've verified that the additional commit corrects the compilation error in the tests.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1706#issuecomment-371241426:74,error,error,74,https://root.cern,https://github.com/root-project/root/pull/1706#issuecomment-371241426,1,['error'],['error']
Availability,"@pcanal One more question: if I use `GetListOfRealData` on a class hierarchy where I only have a dictionary for the derived class but not for the base class, I get a segmentation fault. Is it expected?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8901#issuecomment-1089888401:179,fault,fault,179,https://root.cern,https://github.com/root-project/root/issues/8901#issuecomment-1089888401,1,['fault'],['fault']
Availability,@pcanal The failures above are from the modules build and the warnings are from the C++17 build. These were made visible recently because the build matrix for PRs was updated to include more builds.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2173#issuecomment-396226802:12,failure,failures,12,https://root.cern,https://github.com/root-project/root/pull/2173#issuecomment-396226802,1,['failure'],['failures']
Availability,"@pcanal The status bit check test seems a bit flaky as it also failed in the [nightlies](http://cdash.cern.ch/viewTest.php?onlyfailed&buildid=394075), albeit with a different problem (segfault, not error message).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/959#issuecomment-327865024:198,error,error,198,https://root.cern,https://github.com/root-project/root/pull/959#issuecomment-327865024,1,['error'],['error']
Availability,@pcanal This is just a documentatioon update. Can you please decide to merge or not ? ; It is clear the test failures have nothing to do with the PR,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1534#issuecomment-458600001:109,failure,failures,109,https://root.cern,https://github.com/root-project/root/pull/1534#issuecomment-458600001,2,['failure'],['failures']
Availability,"@pcanal Tutorials and tests were added, passing on all platforms (windows failure is about the file used in the tutorial being stuck by another process). Let me know what you think, thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15641#issuecomment-2345272455:74,failure,failure,74,https://root.cern,https://github.com/root-project/root/pull/15641#issuecomment-2345272455,1,['failure'],['failure']
Availability,"@pcanal Unfortunately, I can't see what output of the build. I do not have access permission. What are those failures about?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1010#issuecomment-360908288:109,failure,failures,109,https://root.cern,https://github.com/root-project/root/pull/1010#issuecomment-360908288,1,['failure'],['failures']
Availability,"@pcanal Weird. the `projectroot.roottest.root.tree.addresses.roottest_root_tree_addresses_make` failed once, on `mac11.0/cxx17` only, with the following error:; ```; Processing runiobug.C...; *********************************************************************************; * Row * fMarkerColor * fMarkerSize * graph.fMarkerStyle *; *********************************************************************************; * 0 * 2 * 1.2 * 21 *; * 1 * 3 * 1.3 * 24 *; *********************************************************************************; Running iobug.C(0,0,1,0,0). [...]. Running iobug.C(1,1,2,0,0); ********************************************************************************************; * Row * Instance * fMarkerColor * graphCl.fMarkerSize * graphCl.fMarkerStyle *; ********************************************************************************************; * 0 * 0 * 2 * 1.4 * 27 *; * 0 * 1 * 3 * 1.5 * 30 *; * 1 * 0 * 4 * 1.6 * 33 *; * 1 * 1 * 5 * 1.7 * 36 *; ********************************************************************************************; Running iobug.C(2,1,2,0,0). *** Break *** segmentation violation; [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info); [<unknown binary>] (no debug info); [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libRIO.6.25.01.so] int TStreamerInfo::WriteBufferAux<char**>(TBuffer&, char** const&, TStreamerInfo::TCompInfo* const*, int, int, int, int, int) (no debug info); [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libRIO.6.25.01.so] TStreamerInfoActions::VectorPtrLooper::GenericWrite(TBuffer&, void*, void const*, TStreamerInfoActions::TConfiguration const*) (no debug info); [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libRIO.6.25.01.so] TBufferFile::ApplySequenceVecPtr(TStreamerInfoActions::TActionSequence const&, void*, void*) (no debug info); [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libTree.6.25.01.so] TBranch::FillI",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8013#issuecomment-828444669:153,error,error,153,https://root.cern,https://github.com/root-project/root/pull/8013#issuecomment-828444669,1,['error'],['error']
Availability,"@pcanal Well, the testing time went down to 11 minutes, skipping the spurious rebuild (re-linking), and we keep the `--repeat until-pass` flag anyway, so to me the benefit is greater than the potential inconsistent builds...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16744#issuecomment-2438231683:36,down,down,36,https://root.cern,https://github.com/root-project/root/pull/16744#issuecomment-2438231683,1,['down'],['down']
Availability,"@pcanal actually my idea to transform the error into a warning does not work: without VecGeom support, the plugin mechanism already issues errors if I do:; ```; root [1] gROOT->GetPluginManager()->FindHandler(""TVirtualGeoConverter"")->LoadPlugin(); Module ConverterVG not found.; Error in <TCling::LoadPCM>: ROOT PCM /Users/agheata/root/root_install/lib/libConverterVG_rdict.pcm file does not exist; ... long list of PCM's tried by LoadPCM; (int) 0; ```; The return value looks wrong by the way, I would expect -1 in this case. Is there a way to check if a module was compiled without issuing errors?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12315#issuecomment-1430946012:42,error,error,42,https://root.cern,https://github.com/root-project/root/pull/12315#issuecomment-1430946012,4,"['Error', 'error']","['Error', 'error', 'errors']"
Availability,"@pcanal as per discussion with Axel and Stephan on the PPP channel on mattermost, I switched `std::throw_nested_exception` with a `Error` + re-throw.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5214#issuecomment-603882928:131,Error,Error,131,https://root.cern,https://github.com/root-project/root/pull/5214#issuecomment-603882928,1,['Error'],['Error']
Availability,@pcanal failure of projectroot.tree.dataframe.test.gtest_tree_dataframe_test_dataframe_snapshot is unrelated comparing to my changes,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4323#issuecomment-541685290:8,failure,failure,8,https://root.cern,https://github.com/root-project/root/pull/4323#issuecomment-541685290,1,['failure'],['failure']
Availability,@pcanal gtest added: b872271ba. Multicore test failure above is unrelated to this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4671#issuecomment-576257330:47,failure,failure,47,https://root.cern,https://github.com/root-project/root/pull/4671#issuecomment-576257330,1,['failure'],['failure']
Availability,@pcanal it looks like the error on Windows is unrelated...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10416#issuecomment-1108432841:26,error,error,26,https://root.cern,https://github.com/root-project/root/pull/10416#issuecomment-1108432841,1,['error'],['error']
Availability,"@pcanal it works for me (master on Ubuntu 20.04.6). E.g:; ```; ubuntu@root-cmake-devel:~/build/ninja$ rm -rf *-prefix builtins; ubuntu@root-cmake-devel:~/build/ninja$ ninja; [0/1] Re-running CMake...; CMake Deprecation Warning at CMakeLists.txt:35 (cmake_policy):; The OLD behavior for policy CMP0116 will be removed from a future version; of CMake. The cmake-policies(7) manual explains that the OLD behaviors of all; policies are deprecated and that a policy should be set to OLD only under; specific short-term circumstances. Projects should be ported to the NEW; behavior and not rely on setting a policy to OLD. -- Building ROOT version 6.33.01. ... [106/527] Performing download step (download, verify and extract) for 'BUILTIN_cppzmq'; -- Downloading...; dst='/home/ubuntu/build/ninja/builtins/zeromq/cppzmq/BUILTIN_cppzmq-prefix/src/cppzmq-4.8.1.tar.gz'; timeout='none'; inactivity timeout='none'; -- Using src='http://lcgpackages.web.cern.ch/lcgpackages/tarFiles/sources/cppzmq-4.8.1.tar.gz'; -- [download 100% complete]; -- verifying file...; file='/home/ubuntu/build/ninja/builtins/zeromq/cppzmq/BUILTIN_cppzmq-prefix/src/cppzmq-4.8.1.tar.gz'; -- Downloading... done; -- extracting...; src='/home/ubuntu/build/ninja/builtins/zeromq/cppzmq/BUILTIN_cppzmq-prefix/src/cppzmq-4.8.1.tar.gz'; dst='/home/ubuntu/build/ninja/builtins/zeromq/cppzmq/BUILTIN_cppzmq-prefix/src/BUILTIN_cppzmq'; -- extracting... [tar xfz]; -- extracting... [analysis]; -- extracting... [rename]; -- extracting... [clean up]; -- extracting... done; [287/527] Generating G__ROOTHist.cxx, ../../lib/ROOTHist.pcm. ... [106/527] Performing download step (download, verify and extract) for 'BUILTIN_cppzmq'; -- Downloading...; dst='/home/ubuntu/build/ninja/builtins/zeromq/cppzmq/BUILTIN_cppzmq-prefix/src/cppzmq-4.8.1.tar.gz'; timeout='none'; inactivity timeout='none'; -- Using src='http://lcgpackages.web.cern.ch/lcgpackages/tarFiles/sources/cppzmq-4.8.1.tar.gz'; -- [download 100% complete]; -- verifying file...; file='/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16227#issuecomment-2288847307:676,down,download,676,https://root.cern,https://github.com/root-project/root/issues/16227#issuecomment-2288847307,3,"['Down', 'down']","['Downloading', 'download']"
Availability,@pcanal ping (this is marked as critical),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6671#issuecomment-775101728:8,ping,ping,8,https://root.cern,https://github.com/root-project/root/issues/6671#issuecomment-775101728,1,['ping'],['ping']
Availability,@pcanal ping on this one...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6905#issuecomment-744665003:8,ping,ping,8,https://root.cern,https://github.com/root-project/root/pull/6905#issuecomment-744665003,1,['ping'],['ping']
Availability,@pcanal ping.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7068#issuecomment-778282396:8,ping,ping,8,https://root.cern,https://github.com/root-project/root/pull/7068#issuecomment-778282396,2,['ping'],['ping']
Availability,@pcanal ping...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5486#issuecomment-628016125:8,ping,ping,8,https://root.cern,https://github.com/root-project/root/pull/5486#issuecomment-628016125,1,['ping'],['ping']
Availability,@pcanal please consider for post-merge review whenever you're available.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2280#issuecomment-402445991:62,avail,available,62,https://root.cern,https://github.com/root-project/root/pull/2280#issuecomment-402445991,1,['avail'],['available']
Availability,"@pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. ```; [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'; module ""bits/ranges_base.h"" {; ^; /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here; #include <bits/ranges_base.h> // enable_borrowed_range, enable_view; ^; In file included from input_line_3:2:. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'; #include ""TIsAProxy.h""; ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files.; gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12276#issuecomment-1427500535:79,failure,failure,79,https://root.cern,https://github.com/root-project/root/pull/12276#issuecomment-1427500535,6,"['Error', 'error', 'failure']","['Error', 'error', 'failure']"
Availability,"@pcanal sadly we can't have the same name for struct and enum in struct where is was declared.; If to try with unnamed enum, then I have multiple conversion errors ``` error: no match for ‘operator==’ (operand types are ‘ROOT::RCompressionSetting::EAlgorithm’ and ‘ROOT::RCompressionSetting::EAlgorithm::<unnamed enum>’) ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3005#issuecomment-442560034:157,error,errors,157,https://root.cern,https://github.com/root-project/root/pull/3005#issuecomment-442560034,2,['error'],"['error', 'errors']"
Availability,@pcanal should I apply clang-format and fix clang-tidy errors for LZ4 codebase?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4429#issuecomment-535406978:55,error,errors,55,https://root.cern,https://github.com/root-project/root/pull/4429#issuecomment-535406978,1,['error'],['errors']
Availability,"@pcanal suggests the following patch which does seem to fix the crash for me:. ```patch; diff --git a/core/meta/src/TClass.cxx b/core/meta/src/TClass.cxx; index a36ff3f6f5..ba5dbc50d6 100644; --- a/core/meta/src/TClass.cxx; +++ b/core/meta/src/TClass.cxx; @@ -5414,7 +5414,7 @@ void TClass::Destructor(void *obj, Bool_t dtorOnly); // There is no dictionary at all, so this is an emulated; // class; however we do have the services of a collection proxy,; // so this is an emulated STL class.; - fCollectionProxy->Destructor(p, dtorOnly);; + GetCollectionProxy()->Destructor(p, dtorOnly);; } else if (!HasInterpreterInfo() && !fCollectionProxy) {; // There is no dictionary at all and we do not have; // the services of a collection proxy available, so; @@ -5540,7 +5540,7 @@ void TClass::DeleteArray(void *ary, Bool_t dtorOnly); // There is no dictionary at all, so this is an emulated; // class; however we do have the services of a collection proxy,; // so this is an emulated STL class.; - fCollectionProxy->DeleteArray(ary, dtorOnly);; + GetCollectionProxy()->DeleteArray(ary, dtorOnly);; } else if (!HasInterpreterInfo() && !fCollectionProxy) {; // There is no dictionary at all and we do not have; // the services of a collection proxy available, so; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10357#issuecomment-1092741818:738,avail,available,738,https://root.cern,https://github.com/root-project/root/issues/10357#issuecomment-1092741818,2,['avail'],['available']
Availability,@pcanal you overlooked a compilation error!. @ferdymercury I will have to revert this; could you create a new PR that works also on macOS?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8557#issuecomment-870228580:37,error,error,37,https://root.cern,https://github.com/root-project/root/pull/8557#issuecomment-870228580,1,['error'],['error']
Availability,"@pcanal, @gemmeren : This PR causes a crash in loading PyTorch model with torch.jit, due to the usage of std::regex, see this open pytorch issue; https://github.com/pytorch/pytorch/issues/49460. and the failures happening in Jenkins after this commit: ; https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu2204,SPEC=cxx20,V=master/3756/. Can we avoid here to use std::regexp ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14716#issuecomment-1949940758:203,failure,failures,203,https://root.cern,https://github.com/root-project/root/pull/14716#issuecomment-1949940758,1,['failure'],['failures']
Availability,"@pcanal, can you give us a hand here -- can you look at the runMakeIndex and execStatusBitsCheck failures?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6385#issuecomment-701675355:97,failure,failures,97,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-701675355,1,['failure'],['failures']
Availability,"@pcanal, could you give us a hand here?. This PR removes the generation of rootmap files when we have a module. It fails because of similar to this error:. ```; Fatal in <TClass::SetUnloaded>: The TClass for ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> > is being unloaded when in state 3. aborting; #0 0x00007fe869e2a07a in __GI___waitpid (pid=12953, stat_loc=stat_loc; entry=0x7ffd87834410, options=options; entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:29; #1 0x00007fe869da2fbb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148; #2 0x00007fe86af40302 in TUnixSystem::StackTrace() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so; #3 0x00007fe86ae177ba in DefaultErrorHandler(int, bool, char const*, char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so; #4 0x00007fe86ae17152 in ErrorHandler () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so; #5 0x00007fe86ae2ddbe in TObject::Fatal(char const*, char const*, ...) const () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so; #6 0x00007fe86aee13b6 in TClass::SetUnloaded() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so; #7 0x00007fe86ae94f94 in ROOT::RemoveClass(char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so; #8 0x00007fe86af00bef in ROOT::TGenericClassInfo::~TGenericClassInfo() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so; #9 0x00007fe869d97ff8 in __run_exit_handlers (status=1, listp=0x7fe86a1225f8 <__exit_funcs>, run_list_atexit=run_list_atexit; entry=true) at exit.c:82; ```. Here we are destroying a TGenericClassInfo object which has never been loaded. I would guess that without having rootmap files around we load less classes (i.e. only the ones we actually need). Could you give an example when this happens or even better tell how to fix it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2542#issuecomment-440651726:148,error,error,148,https://root.cern,https://github.com/root-project/root/pull/2542#issuecomment-440651726,2,"['Error', 'error']","['ErrorHandler', 'error']"
Availability,"@pcanal, do you have any intuition about what could have gone wrong that causes these failures in the `execCheckClusterRange` test because of different file sizes?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14268#issuecomment-1863121010:86,failure,failures,86,https://root.cern,https://github.com/root-project/root/pull/14268#issuecomment-1863121010,2,['failure'],['failures']
Availability,"@pcanal, https://github.com/root-project/root/pull/10294/commits/45c0f48f3c3c631d291e0a7a32fd1ba292e79160 fixed a bug in the template argument printing, however that broke the rootcling dictionary generation which was later fixed by https://github.com/root-project/root/pull/10294/commits/4417a2cd34effdc6ea59797c2d86b6ef8ca8717a. Now there are new failures associated with this change. Could you take a look and see if these failures are related to the changes or they are real bugs that were uncovered.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1136369502:349,failure,failures,349,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1136369502,2,['failure'],['failures']
Availability,"@pcanal, it looks like projectroot.roottest.cling.typedef_global.roottest_cling_typedef_global_scopeTest* failures actually bring the old behavior as described in https://github.com/root-project/roottest/blob/master/cling/typedef_global/output.ref-5. How do make this check conditional for modules vs non-modules?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3695#issuecomment-483165477:106,failure,failures,106,https://root.cern,https://github.com/root-project/root/pull/3695#issuecomment-483165477,1,['failure'],['failures']
Availability,"@pcanal, it's not just spurious error messages: @chrisburr mentioned that `hadd` (as an example) segfaults, while I do not remember reports of the ""spurious crashes"" you mention in our productions. I was discussing with @dpiparo about an option to temporarily enable compatibility of the written file with ROOT 6.24, along the lines of @sethrj suggestion.; This would save us from a deployment nightmare. We can easily add a ROOT option for the jobs that produce files we have to read with old versions of ROOT, but rebuilding legacy versions of the experiment software stack on a patched ROOT 6.24 is much more problematic.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14793#issuecomment-1999462389:32,error,error,32,https://root.cern,https://github.com/root-project/root/issues/14793#issuecomment-1999462389,1,['error'],['error']
Availability,"@pcanal, ping that's important for CMS CXXMODULE IB.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7398#issuecomment-798093150:9,ping,ping,9,https://root.cern,https://github.com/root-project/root/pull/7398#issuecomment-798093150,1,['ping'],['ping']
Availability,"@pcanal, ping.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7398#issuecomment-812401494:9,ping,ping,9,https://root.cern,https://github.com/root-project/root/pull/7398#issuecomment-812401494,4,['ping'],['ping']
Availability,"@pcanal, the errors from clang-tidy-modernize are in the source code of gtest. However, the error from clang-tidy is valid: it is from existing code which I moved and did not touch. I do not know how to fix it, I suspect @Axel-Naumann would be a better person to address this...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3891#issuecomment-502246028:13,error,errors,13,https://root.cern,https://github.com/root-project/root/pull/3891#issuecomment-502246028,2,['error'],"['error', 'errors']"
Availability,"@pcanal, the failures are real. What is the status of this PR?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16202#issuecomment-2352232871:13,failure,failures,13,https://root.cern,https://github.com/root-project/root/pull/16202#issuecomment-2352232871,1,['failure'],['failures']
Availability,"@pcanal, this patch is not checking existence of header files - see the original description of the PR. This patch was intended to check if a file was modified or not... So cms is a test case of this IMO. I am not sure what you are after here. IIRC, this patch was developed to cover some failures in both cms and root. None of them exist anymore it seems. Are you proposing to continue keeping this patch? If so, the cost of keeping such technical debt is we will have slow llvm upgrades.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10633#issuecomment-1151381723:289,failure,failures,289,https://root.cern,https://github.com/root-project/root/pull/10633#issuecomment-1151381723,1,['failure'],['failures']
Availability,"@pcanal, those failures seem unrelated to me. What's your take?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6095#issuecomment-666961237:15,failure,failures,15,https://root.cern,https://github.com/root-project/root/pull/6095#issuecomment-666961237,1,['failure'],['failures']
Availability,"@phsft-bot build again - is that ""failure"" real?!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2358#issuecomment-407744692:34,failure,failure,34,https://root.cern,https://github.com/root-project/root/pull/2358#issuecomment-407744692,1,['failure'],['failure']
Availability,@phsft-bot build again and hope that the TVec errors are fixed ;),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1958#issuecomment-385704757:46,error,errors,46,https://root.cern,https://github.com/root-project/root/pull/1958#issuecomment-385704757,1,['error'],['errors']
Availability,@phsft-bot build given that we had infrastructure errors before,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1954#issuecomment-385522746:50,error,errors,50,https://root.cern,https://github.com/root-project/root/pull/1954#issuecomment-385522746,1,['error'],['errors']
Availability,@phsft-bot build just on ROOT-performance-centos8-multicore/default because the error is unexpected.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6877#issuecomment-733960015:80,error,error,80,https://root.cern,https://github.com/root-project/root/pull/6877#issuecomment-733960015,1,['error'],['error']
Availability,@phsft-bot build just on ROOT-ubuntu16/rtcxxmod with flags -Dctest_test_exclude_none=ON. The error above looks unrelated..,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2435#issuecomment-455538434:93,error,error,93,https://root.cern,https://github.com/root-project/root/pull/2435#issuecomment-455538434,1,['error'],['error']
Availability,@phsft-bot build just on ROOT-ubuntu16/rtcxxmod with flags -Dctest_test_exclude_none=On. because that test failure was due to a stale old file?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3404#issuecomment-464078538:107,failure,failure,107,https://root.cern,https://github.com/root-project/root/pull/3404#issuecomment-464078538,1,['failure'],['failure']
Availability,@phsft-bot build just on ROOT-ubuntu2204/nortcxxmod. Restarting the build because the error was seen on ubuntu 22,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13617#issuecomment-1708195958:86,error,error,86,https://root.cern,https://github.com/root-project/root/pull/13617#issuecomment-1708195958,1,['error'],['error']
Availability,@phsft-bot build just on mac1013/native. This testKalman failure is persistent,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2396#issuecomment-435035350:57,failure,failure,57,https://root.cern,https://github.com/root-project/root/pull/2396#issuecomment-435035350,1,['failure'],['failure']
Availability,@phsft-bot build just on mac1014/cxx17 with flags -Druntime_cxxmodules=On. The PR is only relevant for unix. The failure on windows is due to some broken git state.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5082#issuecomment-593794036:113,failure,failure,113,https://root.cern,https://github.com/root-project/root/pull/5082#issuecomment-593794036,1,['failure'],['failure']
Availability,"@phsft-bot build just on mac1015/python3. @junaire, the failures do not seem caused by this patch but likely infrastructure.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10633#issuecomment-1136349058:56,failure,failures,56,https://root.cern,https://github.com/root-project/root/pull/10633#issuecomment-1136349058,1,['failure'],['failures']
Availability,"@phsft-bot build just on mac11.0/cxx17. I think the errored build above timed out before. I'm not sure what happened with the ROOT-debian10-i386/cxx14 build. The build itself was successful, or so it says at the end of the full log.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8694#issuecomment-905268545:52,error,errored,52,https://root.cern,https://github.com/root-project/root/pull/8694#issuecomment-905268545,1,['error'],['errored']
Availability,@phsft-bot build just on slc6/gcc62 with flags -Druntime_cxxmodules=On. We really need to fix the GH outages by repeating if we detect one...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1314#issuecomment-343696328:101,outage,outages,101,https://root.cern,https://github.com/root-project/root/pull/1314#issuecomment-343696328,1,['outage'],['outages']
Availability,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On. Looks like it was a glitch. I can not reproduce these failure even at the nodes.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4675#issuecomment-568019057:112,failure,failure,112,https://root.cern,https://github.com/root-project/root/pull/4675#issuecomment-568019057,1,['failure'],['failure']
Availability,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On. The previous run is reported as failing but a couple of arbitrary check show no failures :(,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4913#issuecomment-584872712:138,failure,failures,138,https://root.cern,https://github.com/root-project/root/pull/4913#issuecomment-584872712,1,['failure'],['failures']
Availability,@phsft-bot build!. And don't fail with spurious errors this time ;),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2836#issuecomment-439082457:48,error,errors,48,https://root.cern,https://github.com/root-project/root/pull/2836#issuecomment-439082457,1,['error'],['errors']
Availability,@phsft-bot build!. Seems like the failure is infrastructure but let's retrigger.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1073#issuecomment-334373236:34,failure,failure,34,https://root.cern,https://github.com/root-project/root/pull/1073#issuecomment-334373236,1,['failure'],['failure']
Availability,@phsft-bot build!. The failures seem unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10827#issuecomment-1166533397:23,failure,failures,23,https://root.cern,https://github.com/root-project/root/pull/10827#issuecomment-1166533397,1,['failure'],['failures']
Availability,@phsft-bot build!. To see if the Windows errors go away.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7910#issuecomment-822319198:41,error,errors,41,https://root.cern,https://github.com/root-project/root/pull/7910#issuecomment-822319198,1,['error'],['errors']
Availability,@phsft-bot build!; @lmoneta ping!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2314#issuecomment-407206358:28,ping,ping,28,https://root.cern,https://github.com/root-project/root/pull/2314#issuecomment-407206358,1,['ping'],['ping']
Availability,"@phsft-bot build, just to make sure the failures have nothing to do with this PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10771#issuecomment-1163257054:40,failure,failures,40,https://root.cern,https://github.com/root-project/root/pull/10771#issuecomment-1163257054,1,['failure'],['failures']
Availability,"@phsft-bot build, the failure should be gone after https://github.com/root-project/root/pull/10754",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10796#issuecomment-1162728570:22,failure,failure,22,https://root.cern,https://github.com/root-project/root/pull/10796#issuecomment-1162728570,1,['failure'],['failure']
Availability,@phsft-bot build. Let's see again about the CentoOS 8 error. I suspect that it's unrelated to this PR but related to the recent build node configuration change,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10746#issuecomment-1157597860:54,error,error,54,https://root.cern,https://github.com/root-project/root/pull/10746#issuecomment-1157597860,1,['error'],['error']
Availability,"@phsft-bot build; I can't see any test failures on the dashboard, let's run it again and see.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8176#issuecomment-841681475:39,failure,failures,39,https://root.cern,https://github.com/root-project/root/pull/8176#issuecomment-841681475,1,['failure'],['failures']
Availability,@phsft-bot please build. @pcanal the build failures look like an infrastructure issue unrelated to this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1003#issuecomment-331445923:43,failure,failures,43,https://root.cern,https://github.com/root-project/root/pull/1003#issuecomment-331445923,1,['failure'],['failures']
Availability,@phsft-bot to see if the Windows failures go away,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13953#issuecomment-1788890328:33,failure,failures,33,https://root.cern,https://github.com/root-project/root/pull/13953#issuecomment-1788890328,1,['failure'],['failures']
Availability,@rdisipio do you have still by chance the ROOT file example from your post https://root-forum.cern.ch/t/ttree-getentrywithindex-error-due-to-cast-long-int-t/28316? That we could convert into a test.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14967#issuecomment-2002483047:128,error,error-due-to-cast-long-int-t,128,https://root.cern,https://github.com/root-project/root/pull/14967#issuecomment-2002483047,1,['error'],['error-due-to-cast-long-int-t']
Availability,"@rdschaffer : my understanding is it is 'reliably' failing at the same sites, right? I can get access to CERN batch node, maybe we could then try together to run the job manually on the node and see if we can reproduce it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6948#issuecomment-758527726:41,reliab,reliably,41,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-758527726,1,['reliab'],['reliably']
Availability,"@rdschaffer : this is the full error reported:. ```; ==2505== Conditional jump or move depends on uninitialised value(s); ==2505== at 0x4C2D255: __strncmp_sse42 (vg_replace_strmem.c:649); ==2505== by 0x4E36472: connect (in /srv/workDir/e8d1c011-6cad-4b4c-b0ad-5b9f65b33eb0/lib64/wrapper.so); ==2505== by 0x3F7B62B8: XrdNetConnect::Connect(int, sockaddr const*, int, int) (in /cvmfs/atlas.cern.ch/repo/sw/software/21.2/AnalysisBaseExternals/21.2.139/InstallArea/x86_64-centos7-gcc8-opt/lib/libXrdUtils.so.2.0.0); ==2505== by 0x3FCEE754: XrdCl::Socket::ConnectToAddress(XrdNetAddr const&, unsigned short) (in /cvmfs/atlas.cern.ch/repo/sw/software/21.2/AnalysisBaseExternals/21.2.139/InstallArea/x86_64-centos7-gcc8-opt/lib/libXrdCl.so.2.0.0); ==2505== by 0x3FD59467: XrdCl::AsyncSocketHandler::Connect(long) (in /cvmfs/atlas.cern.ch/repo/sw/software/21.2/AnalysisBaseExternals/21.2.139/InstallArea/x86_64-centos7-gcc8-opt/lib/libXrdCl.so.2.0.0); ==2505== by 0x3FCF7B48: XrdCl::Stream::EnableLink(XrdCl::PathID&) (in /cvmfs/atlas.cern.ch/repo/sw/software/21.2/AnalysisBaseExternals/21.2.139/InstallArea/x86_64-centos7-gcc8-opt/lib/libXrdCl.so.2.0.0); ==2505== by 0x3FCF7DEC: XrdCl::Stream::Send(XrdCl::Message*, XrdCl::OutgoingMsgHandler*, bool, long) (in /cvmfs/atlas.cern.ch/repo/sw/software/21.2/AnalysisBaseExternals/21.2.139/InstallArea/x86_64-centos7-gcc8-opt/lib/libXrdCl.so.2.0.0); ==2505== by 0x3FD202FC: XrdCl::MessageUtils::SendMessage(XrdCl::URL const&, XrdCl::Message*, XrdCl::ResponseHandler*, XrdCl::MessageSendParams const&, XrdCl::LocalFileHandler*) (in /cvmfs/atlas.cern.ch/repo/sw/software/21.2/AnalysisBaseExternals/21.2.139/InstallArea/x86_64-centos7-gcc8-opt/lib/libXrdCl.so.2.0.0); ==2505== by 0x3FD2AC91: XrdCl::FileStateHandler::IssueRequest(XrdCl::URL const&, XrdCl::Message*, XrdCl::ResponseHandler*, XrdCl::MessageSendParams&) (in /cvmfs/atlas.cern.ch/repo/sw/software/21.2/AnalysisBaseExternals/21.2.139/InstallArea/x86_64-centos7-gcc8-opt/lib/libXrdCl.so.2.0.0); ==2505== by",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6948#issuecomment-759513859:31,error,error,31,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-759513859,1,['error'],['error']
Availability,@rlalik @couet ping,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6985#issuecomment-769022364:15,ping,ping,15,https://root.cern,https://github.com/root-project/root/issues/6985#issuecomment-769022364,1,['ping'],['ping']
Availability,"@rlalik ah no, I just wanted to say that your fix will be available only in the next ROOT release 6.24, otherwise you could _as well_ open PR to https://github.com/root-project/root/tree/v6-22-00-patches so it could be available in next patch 6.22 release - 6.22.08 (I am not sure when it is planned)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6987#issuecomment-755317526:58,avail,available,58,https://root.cern,https://github.com/root-project/root/pull/6987#issuecomment-755317526,2,['avail'],['available']
Availability,"@rlalik sorry for the late reply, was ROOT compiled with `CMAKE_CXX_STANDARD=17`? Downstream applications are expected to use the same C++ standard than ROOT was compiled with (for interpreter-related reasons). @oshadura what do you think?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6777#issuecomment-754483859:82,Down,Downstream,82,https://root.cern,https://github.com/root-project/root/issues/6777#issuecomment-754483859,1,['Down'],['Downstream']
Availability,"@sawenzel I get your point about thread safety, and agree that even the previous version was thread-unsafe, so I will deal with this later. The current version introduces a rather large critical section in `TGeoParallelWorld::InitSafetyVoxel` that blocks all concurrent threads even if they want to update the cache of different voxels, I would have pushed that lock a bit below where the update of the cache actually happens. But since this does not run in MT mode this is not critical now. Could you also do clang-formatting using ROOT style for the `bvh` part only (The entirety of TGeo is not yet formatted, but we will do it at some point), however the new files should be formatted. I looked and the internal thread pool is actually used for building the BVH in parallel, which is cool, but there may still be some unused headers, such as `sphere.h` - could you cross-check that and remove whatever is not needed?. The compilation errors on Mac are unrelated to your PR. Still, the compilation on alma8 with gcc8.5 fails, although it should not because the standard is set correctly to C++17 and the header <numeric> is included. ; ```; Error: /github/home/ROOT-CI/src/geom/geom/inc/bvh/v2/vec.h:99:17: error: ‘transform_reduce’ is not a member of ‘std’; ```; So @dpiparo what do we do about this since the `gcc` compliance with C++17 is known to be stable only starting with the gcc9 series? Why do we still test gcc8.5 with C++17?. I'll do also some more testing on my side for your PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16442#issuecomment-2360336308:937,error,errors,937,https://root.cern,https://github.com/root-project/root/pull/16442#issuecomment-2360336308,3,"['Error', 'error']","['Error', 'error', 'errors']"
Availability,"@silverweed FYI `-Wno-error` is not known by MSVC:; ```; cl : command line error D8021: invalid numeric argument '/Wno-error'; ```; You should use something like:; ```; if(NOT MSVC); set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wno-error"")`; endif(); ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15853#issuecomment-2379014109:22,error,error,22,https://root.cern,https://github.com/root-project/root/pull/15853#issuecomment-2379014109,4,['error'],['error']
Availability,@smuzaffar Can you put the file somewhere? I don't have the right certificate to download the file.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7718#issuecomment-815146690:81,down,download,81,https://root.cern,https://github.com/root-project/root/issues/7718#issuecomment-815146690,1,['down'],['download']
Availability,@smuzaffar the failure is during 1 thread. Even though the failure is in CMSSW this shouldn't ever happen for 1 thread alone. So it seems like ROOT is doing something to cause a problem.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7718#issuecomment-814357381:15,failure,failure,15,https://root.cern,https://github.com/root-project/root/issues/7718#issuecomment-814357381,2,['failure'],['failure']
Availability,"@smuzaffar, indeed, now the failure looks very basic. @davidlange6, I remember we've seen such a failure but did we manage ever to solve it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9592#issuecomment-1018305001:28,failure,failure,28,https://root.cern,https://github.com/root-project/root/pull/9592#issuecomment-1018305001,2,['failure'],['failure']
Availability,"@smuzaffar, is this compilation error that the bot reported relevant or it is some glitch?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10193#issuecomment-1075379805:32,error,error,32,https://root.cern,https://github.com/root-project/root/pull/10193#issuecomment-1075379805,1,['error'],['error']
Availability,"@smuzaffar, many thanks! This failure seems to be due to some patches that I failed to rebase properly. Can you prepare a debug build with `-DLLVM_BUILD_TYPE=Debug` to debug this issue?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1154356947:30,failure,failure,30,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1154356947,1,['failure'],['failure']
Availability,"@spacelg then there is nothing we can do for the time being. We'll have to wait until the compiler is available for testing. Please ping us when it is available, so we can fix the issue before the public release.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15336#issuecomment-2154260248:102,avail,available,102,https://root.cern,https://github.com/root-project/root/issues/15336#issuecomment-2154260248,3,"['avail', 'ping']","['available', 'ping']"
Availability,"@srimanob thanks a lot for the details!; I can confirm that #16232 fixes the issue with the reproducers you gave. However, despite it being green on our CI, [one test for cmssw](https://github.com/root-project/root/pull/16232#issuecomment-2299822796) has a failure most likely related to the change.; Unfortunately I have not been able to reproduce the crash and it is blocking us from merging the fix; do you think you could help us come up with a reproducer that we can more easily debug? I believe that once we fix that crash we can finally merge this fix.; Thanks again!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7955#issuecomment-2328081119:257,failure,failure,257,https://root.cern,https://github.com/root-project/root/issues/7955#issuecomment-2328081119,1,['failure'],['failure']
Availability,"@stwunsch . > The py3.8 warnings are also quite interesting:. I think those are just a consequence of the crash?. > it's not related to RDataFrame but it's a thingy with ROOT objects itself. Good! Can you edit the issue title/description accordingly please?. > Also weird, if i move the dask part out of the main function into the global scope, we get a runtime error about not properly spawned processes in the multiprocessing backend. This is independent of the number of returned ROOT objects in foo. This sounds like a completely different issue?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6765#issuecomment-723073944:362,error,error,362,https://root.cern,https://github.com/root-project/root/issues/6765#issuecomment-723073944,1,['error'],['error']
Availability,"@stwunsch @etejedor @dpiparo I think it's highly desirable to have a (silenceable) warning if `DeclareCppCallable` needs to skip numba and fallback to the ""Generic"" backend. The rationale is that, otherwise, I'm 100% sure that PyROOT+RDF users will love this feature and start using it _all the time_, shooting performance down with a bazooka without even realizing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3488#issuecomment-480243328:323,down,down,323,https://root.cern,https://github.com/root-project/root/pull/3488#issuecomment-480243328,1,['down'],['down']
Availability,@stwunsch I think the errors come from the usual problem with gcc5 and the C++11 string ABI..,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3107#issuecomment-444838812:22,error,errors,22,https://root.cern,https://github.com/root-project/root/pull/3107#issuecomment-444838812,1,['error'],['errors']
Availability,"@stwunsch PR didn't work on windows:; ```; [2021-03-18T12:42:40.576Z] '--disable-scripts' is not recognized as an internal or external command,; [2021-03-18T12:42:40.576Z] operable program or batch file.; [2021-03-18T12:42:40.576Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf3d/gl/inc/TGL5DDataSetEditor.h to C:/build/workspace/root-pullrequests-build/build/include; [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf2d/graf/inc/TDiamond.h to C:/build/workspace/root-pullrequests-build/build/include; [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/geom/geombuilder/inc/TGeoParaEditor.h to C:/build/workspace/root-pullrequests-build/build/include; [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/core/thread/inc/TRWLock.h to C:/build/workspace/root-pullrequests-build/build/include; [2021-03-18T12:42:40.977Z] Building Custom Rule C:/build/workspace/root-pullrequests-build/root/graf2d/win32gdk/CMakeLists.txt; [2021-03-18T12:42:40.977Z] Copying header C:/build/workspace/root-pullrequests-build/root/graf3d/g3d/inc/TCTUB.h to C:/build/workspace/root-pullrequests-build/build/include; [2021-03-18T12:42:40.977Z] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(230,5): error MSB6006: ""cmd.exe"" exited with code 9009. [C:\build\workspace\root-pullrequests-build\build\LZMA.vcxproj]; ```; Let's hope that @bellenot could probably help us...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7542#issuecomment-801921028:1388,error,error,1388,https://root.cern,https://github.com/root-project/root/pull/7542#issuecomment-801921028,1,['error'],['error']
Availability,"@stwunsch as discussed, my opinion is that the previous message was user-friendlier than an actual python runtime error, and to increase test coverage it should be enough to change `exit()` to `exit(1)`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5397#issuecomment-616458823:114,error,error,114,https://root.cern,https://github.com/root-project/root/pull/5397#issuecomment-616458823,1,['error'],['error']
Availability,"@stwunsch yes absolutely, the language has some mechanism to choose the ""closest"" overload, and if there is a tie, it's a compilation error (""ambiguos call to overloaded method"" or something like that). but I was not necessarily talking about compiler ambiguity: we also need to make sure that what happens in the various usecases is not ambiguous to the user, and/or is what the user most likely intended.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2621#issuecomment-421756589:134,error,error,134,https://root.cern,https://github.com/root-project/root/pull/2621#issuecomment-421756589,1,['error'],['error']
Availability,"@stwunsch your ""fix"" #6574 broke cmake conventions. If you break it, I think you should take care that it gets fixed in time. When my builds didn't do what they should, I didn't really expect that it's *again* the cache variables, which Guilherme and me had fixed before in order to customise builds.; You should be nicer towards users who want to customise their builds to report bugs to you guys with exact code locations etc (#7903). :-). @Axel-Naumann @oshadura ping?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6577#issuecomment-821318359:466,ping,ping,466,https://root.cern,https://github.com/root-project/root/issues/6577#issuecomment-821318359,1,['ping'],['ping']
Availability,"@stwunsch, the problem is twofold. First, `cling::printValue` relies on extra interpreter runtime, which is generally not available (the non-modules implementation resolves the problem by chance). This runtime (containing various printValue overloads) was designed to be made available if somebody requests it via 'standard' value printing request, that is, by calling an evaluate-aware interface. Second, the use of `cling::printValue` works around the intended way to communicate with the interpreter when it comes to extraction of execution results. We can make `cling::printValue` work by unconditionally including all runtime in question. That would slow down some usecases (notably outside of ROOT) for no good reason. In my opinion, `cling::printValue` is on the border of being a public API and internal implementation detail. Relying on it is rather dangerous because it can break (as it broke with modules). If you need to split the type information from the actual execution result I believe we need another way to do it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2201#issuecomment-398719939:122,avail,available,122,https://root.cern,https://github.com/root-project/root/pull/2201#issuecomment-398719939,3,"['avail', 'down']","['available', 'down']"
Availability,"@sudo-panda @vgvassilev FYI after these changes rootbench (https://github.com/root-project/rootbench) is not compiling anymore:; ```; /data/sftnight/workspace/root-benchmark/BUILDTYPE/Release/COMPILER/default/LABEL/performance-cc8/SPEC/default/rootbench/root/hist/hist/TFormulaGradientBenchmarks.cxx: In function ‘void BM_TFormulaPerf(benchmark::State&, const char*, F&&, bool)’:. /data/sftnight/workspace/root-benchmark/BUILDTYPE/Release/COMPILER/default/LABEL/performance-cc8/SPEC/default/rootbench/root/hist/hist/TFormulaGradientBenchmarks.cxx:30:13: error: ‘GradientStorage’ is not a member of ‘TFormula’; TFormula::GradientStorage result(Npar);; ^~~~~~~~~~~~~~~. /data/sftnight/workspace/root-benchmark/BUILDTYPE/Release/COMPILER/default/LABEL/performance-cc8/SPEC/default/rootbench/root/hist/hist/TFormulaGradientBenchmarks.cxx:38:19: error: ‘result’ was not declared in this scope; eval(h, f, x, result.data());; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8371#issuecomment-903671179:554,error,error,554,https://root.cern,https://github.com/root-project/root/pull/8371#issuecomment-903671179,2,['error'],['error']
Availability,@syamasak ping...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1360#issuecomment-361225142:10,ping,ping,10,https://root.cern,https://github.com/root-project/root/pull/1360#issuecomment-361225142,1,['ping'],['ping']
Availability,"@unelg just FYI your error message is independent of whether ROOT's png is too old or not: you are mixing library and header of libpng from two different versions, likely in your own build? Please don't :-) If what I say here doesn't make sense please post a reproducer of this error at https://root-forum.cern.ch - thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13825#issuecomment-1840834891:21,error,error,21,https://root.cern,https://github.com/root-project/root/issues/13825#issuecomment-1840834891,2,['error'],['error']
Availability,@vargasa please fork also rootest (https://github.com/root-project/roottest) to fix the build error on `windows10/cxx14`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5010#issuecomment-590952110:94,error,error,94,https://root.cern,https://github.com/root-project/root/pull/5010#issuecomment-590952110,1,['error'],['error']
Availability,"@vepadulano . It is ROOT file with ROOT object.; It only can be downloaded using `wget` or any other utility. . > Is it a read-only file?. File does not exists on the server - it is temporary TMemFile instance during http request. > What can users do with it?. ??? Open, draw histogram, analyze, ???",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14614#issuecomment-1932221114:64,down,downloaded,64,https://root.cern,https://github.com/root-project/root/pull/14614#issuecomment-1932221114,1,['down'],['downloaded']
Availability,"@vepadulano ; Build environment:; CPU architecture: Intel x86 kaby-lake; OS: Arch Linux; Linux kernel: 5.11.15-zen1-2-zen; Compiler: Clang 11.1.0; Linker: LLD 11.1.0; Stdlib: from GCC 10.2.0; Ninja: 1.10.2. Cmake Options:; -DCMAKE_ASM_COMPILER=/usr/bin/clang; -DCMAKE_C_COMPILER=/usr/bin/clang; -DCMAKE_CXX_COMPILER=/usr/bin/clang++; -DCMAKE_ASM_FLAGS=-march=native -ftree-vectorize; -DCMAKE_C_FLAGS=-march=native -ftree-vectorize; -DCMAKE_CXX_FLAGS=-march=native -ftree-vectorize -stdlib=libc++; -DLLVM_ENABLE_LIBCXX=ON; -DLLVM_ENABLE_LLD=ON; -DLLVM_ENABLE_LTO=full; -libcxx. Error example:; ```; RIoUring.hxx:54:72: error: implicit instantiation of undefined template 'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>'; throw std::runtime_error(""Error initializing io_uring: "" + std::string(std::strerror(-ret)));; ^; /usr/bin/../include/c++/v1/iosfwd:209:32: note: template is declared here; class _LIBCPP_TEMPLATE_VIS basic_string;; ```. ```; RIoUring.hxx:129:57: error: no member named 'to_string' in namespace 'std'; throw std::runtime_error(""batch "" + std::to_string(batch) + "": ""; ~~~~~^; ```. Adding #include <string> solves the problem",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7908#issuecomment-822355025:577,Error,Error,577,https://root.cern,https://github.com/root-project/root/pull/7908#issuecomment-822355025,4,"['Error', 'error']","['Error', 'error']"
Availability,"@vepadulano @Axel-Naumann with the last commit the situation is now the following:. explicit column list passed, a necessary size branch was omitted:; - compiled Snapshot throws an exception with a (hopefully) clear error message; - jitted Snapshot silently adds the required size branches. explicit column list passed, a necessary size branch is listed _after_ the branch that needs it:; - compiled and jitted Snapshot both work. no explicit column list passed:; - this is only possible with jitted Snapshots and this now works despite the fact that Snapshot reorders the column names in alphabetical order (which might put a size branch after the branch that needs it). In a subsequent PR I'll try to go back to Snapshot using the same ordering for the output columns as the ordering of the input columns -- it's not super straightforward.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10934#issuecomment-1190273501:216,error,error,216,https://root.cern,https://github.com/root-project/root/pull/10934#issuecomment-1190273501,2,['error'],['error']
Availability,"@vepadulano @dpiparo . This PR fixes. - https://github.com/root-project/root/issues/7196. This issue is very case-dependent.; When trying to calculate memory usage, normally the actual free memory on the system is `free + buffer + cached `. If shared memory usage is high (e.g mmaping a big cache) the calculation is slightly different:; `(free + buffer/cache) - shared`. The author of **htop** mentions on [this](https://stackoverflow.com/questions/55090900/how-can-i-calculate-memory-utilisation-of-a-linux-server-using-sar-report) question that htop uses this convention(in 2016):. - Total used memory = MemTotal - MemFree; - Non cache/buffer memory = Total used memory - (Buffers + Cached memory). Now htop (managed by htop-dev) uses this (on https://github.com/htop-dev/htop/blob/main/linux/LinuxMachine.c#L210):. ```; const memory_t usedDiff = freeMem + cachedMem + sreclaimableMem + buffersMem;; host->usedMem = (totalMem >= usedDiff) ? totalMem - usedDiff : totalMem - freeMem;; ```. This issue intends to merge the total used memory to include cached instead of just free which isn't strictly a correct solution. This PR implements the current approach utilised by **htop** which includes the following fields to calculate `MemUsed`, `MemAvailable` and `SwapUsed`:. ```; Int_t fMemAvailable; // available RAM in MB; Int_t fMemCached; // cached RAM in MB; Int_t fMemBuffer; // buffer RAM in MB; Int_t fMemShared; // shared RAM in MB; Int_t fSwapCached; // cached swap in MB; Int_t fSReclaimable // slab that might be reclaimed; ```. Results:. ```; ➜ ROOT free -h; total used free shared buff/cache available; Mem: 23Gi 3.4Gi 7.4Gi 214Mi 12Gi 19Gi; Swap: 7.6Gi 2.1Gi 5.5Gi; ```. ```; ➜ ROOT root -l; root [0] MemInfo_t memInfo; gSystem->GetMemInfo(&memInfo);; root [1] cout << memInfo.fMemTotal << "" "" << memInfo.fMemUsed << "" "" << memInfo.fMemFree << endl;; 23877 2786 7562; root [2] ; ```; Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14695:1304,avail,available,1304,https://root.cern,https://github.com/root-project/root/pull/14695,2,['avail'],['available']
Availability,"@vepadulano @eguiraud Same story here, what do you think about `GetDataSetInfo`? See the test here:. ```cpp; TEST(RDataFrameInterface, GetDataSetInfo); {; // trivial/empty datasource; ROOT::RDataFrame df1a(1);; EXPECT_EQ(df1a.GetDataSetInfo(), ""1 empty row"");. ROOT::RDataFrame df1b(2);; EXPECT_EQ(df1b.GetDataSetInfo(), ""2 empty rows"");. // ttree/tchain datasource; TTree tree(""some name"", ""some title"");; ROOT::RDataFrame df2(tree);; EXPECT_EQ(df2.GetDataSetInfo(), ""some name"");. // others with an actual fDataSource, like csv; auto df3 = ROOT::RDF::MakeCsvDataFrame(""RCsvDS_test_headers.csv"");; EXPECT_EQ(df3.GetDataSetInfo(), ""not available"");; }; ```. What about the name `GetDataSetInfo`, note the capitalising! What should we return for an `fDataSource`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7829#issuecomment-817817954:636,avail,available,636,https://root.cern,https://github.com/root-project/root/issues/7829#issuecomment-817817954,1,['avail'],['available']
Availability,"@vepadulano That looks great, many thanks! ; I see the tests don't explicitly test that `TRint` does not call `Terminate()` due to an error, but probably there's no easy way to do so. . I've right now pulled the patch and am recompiling my 6.26.00 installation with it, and will subsequently test several interactive programs (used in lab classes, an analysis framework on top of ROOT, and in some CLI tools) against it and report back. Hope to finish this either late today or tomorrow. From the code changes alone, I don't see what could go wrong — but better test ;-).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10090#issuecomment-1068044140:134,error,error,134,https://root.cern,https://github.com/root-project/root/issues/10090#issuecomment-1068044140,1,['error'],['error']
Availability,"@vepadulano did you found a fix for that ? I get spam by these ""Forward declarations"" messages each time I open my programs. Any fix or way to remove these messages. Except seing the error message, I couldn't find any issue in the execution of my code using MyClass",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16496#issuecomment-2390513615:183,error,error,183,https://root.cern,https://github.com/root-project/root/issues/16496#issuecomment-2390513615,1,['error'],['error']
Availability,"@vepadulano thanks for the reply! (got caught up with some other work in the meantime). the simpler reproducer does not throw any errors, and removing the extra outfile.Close() no longer does as well. I had rebooted my computer and re-sourced thisroot.sh, so maybe there was something bad being referenced? Not sure. Hopefully issues doesn't arise again. Thanks for the help!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11823#issuecomment-1347823222:130,error,errors,130,https://root.cern,https://github.com/root-project/root/issues/11823#issuecomment-1347823222,4,"['error', 'reboot']","['errors', 'rebooted']"
Availability,@vepadulano the test failures look real,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6570#issuecomment-720595438:21,failure,failures,21,https://root.cern,https://github.com/root-project/root/pull/6570#issuecomment-720595438,1,['failure'],['failures']
Availability,"@vepadulano, @lmoneta, sorry for the ping.; I see that some of the tests fail, but as far as I can tell the failures are not related to this PR.; Do you want me to do something, such as rebase the branch onto a more stable commit (which passes the tests) and try again?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13748#issuecomment-1790968724:37,ping,ping,37,https://root.cern,https://github.com/root-project/root/pull/13748#issuecomment-1790968724,2,"['failure', 'ping']","['failures', 'ping']"
Availability,"@vgvassilev , @yamaguchi1024 Is this PR still relevant ? Should we fix the failures and merge ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1761#issuecomment-458612343:75,failure,failures,75,https://root.cern,https://github.com/root-project/root/pull/1761#issuecomment-458612343,1,['failure'],['failures']
Availability,"@vgvassilev , I also tested this for our CXXMODULE IBs and most of relvals failed with errors like. https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-d3a1b7/21842/runTheMatrix-results/8.0_BeamHalo+BeamHalo+DIGICOS+RECOCOS+ALCABH+HARVESTCOS/step1_BeamHalo+BeamHalo+DIGICOS+RECOCOS+ALCABH+HARVESTCOS.log; ```; ----- Begin Fatal Exception 21-Jan-2022 04:35:59 CET-----------------------; An exception of category 'DictionaryNotFound' occurred while; [0] Constructing the EventProcessor; [1] Constructing module: class=BeamHaloProducer label='generator'; [2] Calling ProductRegistryHelper::addToRegistry, checking dictionaries for produced types; Exception Message:; No data dictionary found for the following classes:. map<string,ULong64_t>. Most likely each dictionary was never generated, but it may; be that it was generated in the wrong package. Please add; (or move) the specification '<class name=""whatever""/>' to; the appropriate classes_def.xml file along with any other; information needed there. For example, if this class has any; transient members, you need to specify them in classes_def.xml.; Also include the class header in classes.h. A type listed above might or might not be the same as a; type declared by a producer module with the function 'produces'.; Instead it might be the type of a data member, base class,; wrapped type, or other object needed by a produced type. Below; is some additional information which lists the types declared; to be produced by a producer module that are associated with; the types whose dictionaries were not found:. edm::HepMCProduct. ----- End Fatal Exception -------------------------------------------------; ```. this is a different error than what we get in out CXXMODULE IBs https://cmssdt.cern.ch/SDT/cgi-bin/buildlogs/raw/slc7_amd64_gcc10/CMSSW_12_3_CXXMODULE_X_2022-01-19-2300/pyRelValMatrixLogs/run/135.1_TTbar_13+TTbarFS_13+HARVESTUP15FS+MINIAODMCUP15FS/step3_TTbar_13+TTbarFS_13+HARVESTUP15FS+MINIAODMCUP15FS.log ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9592#issuecomment-1018294322:87,error,errors,87,https://root.cern,https://github.com/root-project/root/pull/9592#issuecomment-1018294322,2,['error'],"['error', 'errors']"
Availability,"@vgvassilev , `-DLLVM_BUILD_TYPE=Debug` did not help much. It failed again with the same error ( see https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-6342e6/25499/external/py3-hepdata-lib/0.8.1-23017aefcaec1f6e033b49c0652b0cd2/log )",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1154889634:89,error,error,89,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1154889634,1,['error'],['error']
Availability,"@vgvassilev , as @makortel mentioned above , you can do something like the following on lxplus to reproduce this build failure ; ```; #Login to lxplus and start cmssw-el8 container; > ssh lxplus; > cd cd /tmp/$(whoami); > source /cvmfs/cms.cern.ch/cmsset_default.sh; > cmssw-el8; # Create CMSSW area using PR artefacts; > /cvmfs/cms-ci.cern.ch/week1/cms-sw/root/208/41293/install.sh; > cd CMSSW_14_2_ROOT6_X_2024-09-03-2300/; > cmsenv; #Build root dict; > scram b -v -j 10 tmp/el8_amd64_gcc12/src/DataFormats/Histograms/src/DataFormatsHistograms/a/DataFormatsHistograms_xr.cc; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16232#issuecomment-2332023914:119,failure,failure,119,https://root.cern,https://github.com/root-project/root/pull/16232#issuecomment-2332023914,1,['failure'],['failure']
Availability,"@vgvassilev , cms tests failed. Looks like hepdata-lib package, see the build error [here](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-57f21d/29184/external/py3-hepdata-lib/0.10.1-d5a65a50fc66bb6ceb2097b9bc30c480/log); ```; Processing ./v0.10.1.tar.gz; Preparing metadata (setup.py): started; Running command python setup.py egg_info; input_line_1:1:2: fatal error: module 'libc' in AST file '/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc11/lcg/root/6.27.01-36c89006db8bc49d9c575f40a5e4973c/lib/std.pcm' found in a different module map file (/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc11/lcg/root/6.27.01-36c89006db8bc49d9c575f40a5e4973c/etc/cling/libc.modulemap) than when the importing AST file was built (/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.27.01-36c89006db8bc49d9c575f40a5e4973c/build/etc/cling/libc.modulemap); #include <new>; ^; input_line_1:1:2: note: imported by module 'std' in '/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc11/lcg/root/6.27.01-36c89006db8bc49d9c575f40a5e4973c/lib/std.pcm'; Warning in cling::IncrementalParser::CheckABICompatibility():; Failed to extract C++ standard library version.; Replaced symbol atexit cannot be found in JIT!; Replaced symbol at_quick_exit cannot be found in JIT!; <<< cling interactive line includer >>>: fatal error: module file '/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc11/lcg/root/6.27.01-36c89006db8bc49d9c575f40a5e4973c/lib/libc.pcm' is out of date and needs to be rebuilt; Failed to load module libc; Failed to load module std; Failed to load module _Builtin_intrinsics; Failed to load module _Builtin_intrinsics; Failed to load module std; Failed to load module libc; python3: /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.27.01-36c89006db8bc49d9c575f40a5e4973c/root-6.27.01/core/metacling/sr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1324017853:78,error,error,78,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1324017853,2,['error'],['error']
Availability,"@vgvassilev , cmssw [tests looks good](https://github.com/cms-sw/root/pull/206#issuecomment-2083540349). A unit test failure is not related to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15374#issuecomment-2083704174:117,failure,failure,117,https://root.cern,https://github.com/root-project/root/pull/15374#issuecomment-2083704174,1,['failure'],['failure']
Availability,"@vgvassilev , this failed to build for cmssw externals e.g. `hepdata-lib` failed to build with [error](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-6342e6/25491/external/py3-hepdata-lib/0.8.1-ec986c2493f655785ae2df5c3741f2df/log); ```; + pip3 install --no-clean --no-deps --no-index --no-build-isolation --no-cache-dir --disable-pip-version-check --user -v hepdata_lib-0.8.1.tar.gz; Using pip 22.0.4 from /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc10/external/py3-pip/22.0.4-84448601ef6fb03288e044db5008fd92/lib/python3.9/site-packages/pip (python 3.9); Processing ./hepdata_lib-0.8.1.tar.gz; Preparing metadata (setup.py): started; Running command python setup.py egg_info; input_line_1:1:2: fatal error: module 'libc' in AST file '/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc10/lcg/root/6.27.01-fcb9eae806144b267f209fdf3fa8dc2e/lib/std.pcm' found in a different module map file (/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc10/lcg/root/6.27.01-fcb9eae806144b267f209fdf3fa8dc2e/etc/cling/libc.modulemap) than when the importing AST file was built (/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc10/lcg/root/6.27.01-fcb9eae806144b267f209fdf3fa8dc2e/build/etc/cling/libc.modulemap); #include <new>; ^; input_line_1:1:2: note: imported by module 'std' in '/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc10/lcg/root/6.27.01-fcb9eae806144b267f209fdf3fa8dc2e/lib/std.pcm'; Warning in cling::IncrementalParser::CheckABICompatibility():; Failed to extract C++ standard library version.; Replaced symbol atexit cannot be found in JIT!; Replaced symbol at_quick_exit cannot be found in JIT!; <<< cling interactive line includer >>>: fatal error: module file '/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc10/lcg/root/6.27.01-fcb9eae806144b267f209fdf3fa8dc2e/lib/libc.pcm' is out of date and needs to be rebuilt",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1154135015:96,error,error,96,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1154135015,4,['error'],['error']
Availability,"@vgvassilev , though PR tests for https://github.com/cms-sw/root/pull/163 passed ( may be because it was a partial/incremental build of cmssw) but all tests in CMSSW IBs are failing with errors like ; ```; Error in <TCling::LoadPCM>: ROOT PCM /cvmfs/cms-ib.cern.ch/nweek-02721/slc7_amd64_gcc10/cms/cmssw/CMSSW_12_3_ROOT6_X_2022-02-20-0000/bin/slc7_amd64_gcc10/libNet_rdict.pcm file does not exist; Info in <TCling::LoadPCM>: In-memory ROOT PCM candidate /cvmfs/cms-ib.cern.ch/nweek-02721/slc7_amd64_gcc10/lcg/root/6.27.01-41fc432df04c8b3cb067f93c7cebe91f/lib/libASImageGui_rdict.pcm; ...; ...; terminate called after throwing an instance of 'edm::Exception'; what(): An exception of category 'FatalRootError' occurred.; Additional Info:; [a] Fatal Root Error: @SUB=TCling::LoadPCM; ROOT PCM /cvmfs/cms-ib.cern.ch/nweek-02721/slc7_amd64_gcc10/cms/cmssw/CMSSW_12_3_ROOT6_X_2022-02-20-0000/bin/slc7_amd64_gcc10/libPhysics_rdict.pcm file does not exist; ```. see the full log here https://cmssdt.cern.ch/SDT/cgi-bin/logreader/slc7_amd64_gcc10/CMSSW_12_3_ROOT6_X_2022-02-20-0000/pyRelValMatrixLogs/run/4.24_WMuSkim2011A+WMuSkim2011A+HLTDSKIM+RECODR1reHLT+HARVESTDR1reHLT/step2_WMuSkim2011A+WMuSkim2011A+HLTDSKIM+RECODR1reHLT+HARVESTDR1reHLT.log#/ . Somehow `cling` is looking for root pcm files under the CMSSW/bin/arch directory ( this is the directory from where the `cmsRun` executable was picked up)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9884#issuecomment-1046310352:187,error,errors,187,https://root.cern,https://github.com/root-project/root/pull/9884#issuecomment-1046310352,3,"['Error', 'error']","['Error', 'errors']"
Availability,"@vgvassilev ; > For example, I'd recommend to move the include_directories to target_include_directories outside of this PR. Not always it can be done easily. In several places I have to change from `target_include_directories` to `include_directories` to solve dependency issue between library and dictionary. We were discussing it in mattermost, but now I delete myself from discussion trying adding you. Maybe @oshadura could help us to recover it. Long story short - dictionary need information about library includes BEFORE `target_include_directories` for that library is called. There is workaround in cmake (generator expressions), but it is not flexible enough.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5181#issuecomment-606589395:440,recover,recover,440,https://root.cern,https://github.com/root-project/root/pull/5181#issuecomment-606589395,1,['recover'],['recover']
Availability,@vgvassilev @Axel-Naumann macos 10.14 failed with; ```; <<< cling interactive line includer >>>: fatal error: module file '/build/jenkins/workspace/root-pullrequests-build/build/lib/Hist.pcm' is out of date and needs to be rebuilt: module file out of date; ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6351#issuecomment-693476428:103,error,error,103,https://root.cern,https://github.com/root-project/root/pull/6351#issuecomment-693476428,1,['error'],['error']
Availability,@vgvassilev @Axel-Naumann ping!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7108#issuecomment-769822888:26,ping,ping,26,https://root.cern,https://github.com/root-project/root/issues/7108#issuecomment-769822888,1,['ping'],['ping']
Availability,"@vgvassilev Current master cannot be build, I getting fatal error in rootcling_stage1",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4992#issuecomment-586242477:60,error,error,60,https://root.cern,https://github.com/root-project/root/pull/4992#issuecomment-586242477,1,['error'],['error']
Availability,@vgvassilev FYI the error comes from https://github.com/vgvassilev/root/blob/improve_link_diag/interpreter/cling/lib/Utils/PlatformWin.cpp#L481 while looking for dynamic libraries (https://github.com/vgvassilev/root/blob/improve_link_diag/interpreter/cling/lib/Interpreter/DynamicLibraryManagerSymbol.cpp#L766); I'm looking into it,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6606#issuecomment-814652420:20,error,error,20,https://root.cern,https://github.com/root-project/root/pull/6606#issuecomment-814652420,1,['error'],['error']
Availability,@vgvassilev I think this needs you ;-) I'm getting a number of errors related to cxxmodules on GCC 12.2.0/libstdc++ (see [relevant output](https://gist.github.com/jalopezg-git/383aae28d9122bc820e1668b2a2172e5)).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11874#issuecomment-1410885010:63,error,errors,63,https://root.cern,https://github.com/root-project/root/pull/11874#issuecomment-1410885010,1,['error'],['errors']
Availability,"@vgvassilev I tried to build xeus-cling with clang 9 upgrade (I used your cling fork) and I found a problem. When I install Cling, the `ClingTargets.cmake` file is not copied to the installation folder. When I manually copy the `ClingTargets.cmake` to the installation folder and run the `CMakeLists.txt` from xeus-cling, I get the following error:. ```; cmake ../xeus-cling/ -D CMAKE_INSTALL_PREFIX=${CONDA_PREFIX} -D CMAKE_C_COMPILER=clang -D CMAKE_CXX_COMPILER=clang++ -DCMAKE_INSTALL_LIBDIR=${CONDA_PREFIX}/lib -DCMAKE_LINKER=/usr/bin/gold -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS=""-I/home/sehrig/workspace/cling9demo/install/include/cling/"" -DCMAKE_PREFIX_PATH=/home/sehrig/workspace/cling9demo/install/lib/cmake/cling/; -- The C compiler identification is Clang 11.0.0; -- The CXX compiler identification is Clang 11.0.0; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Check for working C compiler: /opt/spack-modules/linux-ubuntu20.04-skylake_avx512/gcc-10.2.0/llvm-11.0.0-ubn363okfkmwy6dpoozlbgidl4bks3wd/bin/clang - skipped; -- Detecting C compile features; -- Detecting C compile features - done; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working CXX compiler: /opt/spack-modules/linux-ubuntu20.04-skylake_avx512/gcc-10.2.0/llvm-11.0.0-ubn363okfkmwy6dpoozlbgidl4bks3wd/bin/clang++ - skipped; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Building xeus-cling v0.12.0; -- Found LLVM_CONFIG as /opt/spack-modules/linux-ubuntu20.04-skylake_avx512/gcc-10.2.0/llvm-11.0.0-ubn363okfkmwy6dpoozlbgidl4bks3wd/bin/llvm-config; -- Found nlohmann_json: /home/sehrig/application/miniconda3/envs/cling9demo/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.9.1"", minimum required is ""3.2.0"") ; -- Found LibUUID: /opt/spack-modules/linux-ubuntu20.04-skylake_avx512/gcc-10.2.0/libuuid-1.0.3-lxispdpiiahk26ye53cg5qn7bk24tywj/lib/libuuid.so ; -- Found OpenSSL: /op",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6385#issuecomment-784497193:342,error,error,342,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-784497193,1,['error'],['error']
Availability,@vgvassilev I will take a look on IO failures :),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3896#issuecomment-499057882:37,failure,failures,37,https://root.cern,https://github.com/root-project/root/pull/3896#issuecomment-499057882,1,['failure'],['failures']
Availability,@vgvassilev I've started building this for conda-forge and had a few issues with external LLVM/Clang/Cling so I switched to the builtins. This works from the build directory but it then has issues once installed. Do the errors below mean anything to you?. ```; input_line_1:1:2: fatal error: module 'libc' imported by AST file '/home/cburr/mambaforge/conda-bld/root_1609268594446/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placeh/lib/std.pcm' found in a different module map file (/home/cburr/mambaforge/conda-bld/root_1609268594446/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placeh/etc/cling/libc.modulemap) than when the importing AST file was built (/home/cburr/mambaforge/conda-bld/root_1609268594446/work/build-dir/etc/cling/libc.modulemap); #include <new>; ^; input_line_1:1:2: note: imported by module 'std' in '/home/cburr/mambaforge/conda-bld/root_1609268594446/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placeh/lib/std.pcm'; Warning in cling::IncrementalParser::CheckABICompatibility():; Failed to extract C++ standard library version.; 'at_quick_exit' not defined; <<< cling interactive line includer >>>: fatal error: module file '/home/cburr/mambaforge/conda-bld/root_1609268594446/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placeh/lib/libc.pcm' is out of date and needs to be rebuilt; Failed to load module libc; Failed to load module std; Failed to load module _Builtin_,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6385#issuecomment-752219096:220,error,errors,220,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752219096,2,['error'],"['error', 'errors']"
Availability,"@vgvassilev In theory, everybody with commit access can review and approve patches. In practice Lang's commits didn't touch the instruction selection, and I'd really prefer to get feedback from an expert on this. I'll ping the patch probably tomorrow, people might have been off last week.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7757#issuecomment-813881052:218,ping,ping,218,https://root.cern,https://github.com/root-project/root/pull/7757#issuecomment-813881052,2,['ping'],['ping']
Availability,"@vgvassilev Is `cxxmodules=ON` was working on mac? When I try, I very fast getting compilation errors already in standard Cocoa includes",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5445#issuecomment-618854318:95,error,errors,95,https://root.cern,https://github.com/root-project/root/pull/5445#issuecomment-618854318,1,['error'],['errors']
Availability,"@vgvassilev Let me clarify the disconnect. The title says ""Add **a** module for experimental/string_view""; The commit says:. That should fix a recent nightly failure with gcc11 avoiding to require; module ""bits/ranges_base.h"" in C++20 context. The code says:; ```; module ""experimental/string_view"" {; export *; header ""experimental/algorithm""; }; ```; ; The commit content as-is seems completely unrelated to the commit log as far as I could tell (without doing research on the relationship between `range_base`, `string_view` and `algorithm`.; ; So I pondered whether the fix was the right fix for a problem I did not know anything about ... ; ; The right thing to do would have probably be have been to request a complete explanation of what the original problem was, what was the mechanism leading to the error and why this solution was the best solution. This was obviously much more than this seemingly simple fix required. So instead I thought to ask for a very low cost, straight forward solution: simply copy/pasting the error with no additional effort to explain in detail. > Can you suggest a commit message which adds enough information which makes me happy as well?. That requires to paraphrase the error and add a few more details. ```; That should fix a recent nightly failure with gcc11. The failure presented during dictionary generation in a C++14 and C++17 build and incorrectly complained about needing the 'cplusplus20' feature for the 'std.bits/ranges_base.h' module. The issue was triggered by an inclusion of `<bits/ranges_base.h>` from `string_view`. This issue exists on gcc11 and gcc12 (and I guess any gcc that made changes to libstdc++ and the experimental/string_view header file). . It seems the issue is solved by exporting `algorithm` as part of the `string_view` module.; ```. Actually, I still don't know why adding `algorithm` fixes a problem with `range_base.h`, so I can't add that to the commit ... maybe it is something like ""... by avoiding to use the module m",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12276#issuecomment-1430326540:158,failure,failure,158,https://root.cern,https://github.com/root-project/root/pull/12276#issuecomment-1430326540,4,"['error', 'failure']","['error', 'failure']"
Availability,"@vgvassilev No, we still get the same errors. New build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30647/build.log). > For local testing, you can use /cvmfs/cms-ci.cern.ch/week0/cms-sw/cmsdist/8312/30647/install.sh to create a dev area with all the needed externals and cmssw changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12240#issuecomment-1432060211:38,error,errors,38,https://root.cern,https://github.com/root-project/root/issues/12240#issuecomment-1432060211,1,['error'],['errors']
Availability,@vgvassilev Re: **778b83c Create a virtual file entry for each input line.**; Here's a simple failure:; ```; ./bin/cling -Xclang -verify; [$]for (int i=0;i<1;++i) { val; } // expected-error {{use of undeclared identifier 'val'}}; [$].q; fatal error: cannot open file 'input_line_3': No such file or directory; ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/589#issuecomment-307291410:94,failure,failure,94,https://root.cern,https://github.com/root-project/root/pull/589#issuecomment-307291410,3,"['error', 'failure']","['error', 'failure']"
Availability,"@vgvassilev Seems to be, new errors in roottest appears after this PR?; [Like this one](https://lcgapp-services.cern.ch/root-jenkins/job/roottest-pullrequests-build/6173/testReport/projectroot.roottest.root.meta.rootcling-modules/module-dep-order/roottest_root_meta_rootcling_modules_module_dep_order_cxxmodules_implicit_build_error/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5613#issuecomment-631384298:29,error,errors,29,https://root.cern,https://github.com/root-project/root/pull/5613#issuecomment-631384298,1,['error'],['errors']
Availability,@vgvassilev We should merge this. The failure is due to the buildbot issue.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5800#issuecomment-678909831:38,failure,failure,38,https://root.cern,https://github.com/root-project/root/pull/5800#issuecomment-678909831,1,['failure'],['failure']
Availability,"@vgvassilev anything we can do to improve the error message, see https://github.com/root-project/root/issues/9594#issuecomment-1031255059 ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9594#issuecomment-1034611755:46,error,error,46,https://root.cern,https://github.com/root-project/root/issues/9594#issuecomment-1034611755,1,['error'],['error']
Availability,"@vgvassilev as I wrote on Mattermost, this change was particularly written to address Jun's problem. `roottest-root-html-runMakeIndex` is a separate thing that needs addressing anyhow; it's only now visible because all the other failures are gone. FWIW I don't agree that the workarounds (hacks) introduced in https://github.com/root-project/root/pull/10910 are a good way to go, as shown by the many failing tests. The scope of the changes is too big and there are valid reasons to do something with `Decl`s currently being defined, as evidenced by the many failing tests. Adding more conditions will eventually only lead to internally inconsistent states...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11514#issuecomment-1272983808:229,failure,failures,229,https://root.cern,https://github.com/root-project/root/pull/11514#issuecomment-1272983808,1,['failure'],['failures']
Availability,"@vgvassilev how did you address the comment https://github.com/root-project/root/pull/1787#pullrequestreview-106971834 by @pcanal:; > Please make sure that this does not hide a missing feature in GetFullyQualifiedType which is supposed to already have built-in the full qualification. I am collecting a set of tests (failures) of the clang version of `GetFullyQualifiedName`. Adding ""your cases"" to that list might be a way of addressing Philippe's comment. Do you have such test cases?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1787#issuecomment-383011266:317,failure,failures,317,https://root.cern,https://github.com/root-project/root/pull/1787#issuecomment-383011266,1,['failure'],['failures']
Availability,@vgvassilev ping,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12252#issuecomment-1427700860:12,ping,ping,12,https://root.cern,https://github.com/root-project/root/pull/12252#issuecomment-1427700860,1,['ping'],['ping']
Availability,"@vgvassilev ping - I'd like to land this to get greener cling builds, esp before we merge llvm13.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9904#issuecomment-1142076939:12,ping,ping,12,https://root.cern,https://github.com/root-project/root/pull/9904#issuecomment-1142076939,1,['ping'],['ping']
Availability,"@vgvassilev sure: `gtest-math-mathcore-test-CladDerivatorTests` crashes with an illegal instruction somewhere in the JITed code, while `gtest-hist-hist-test-TFormulaGradientTests` shows:; ```; 105: Running main() from /home/jhahnfel/ROOT/build/googletest-prefix/src/googletest/googletest/src/gtest_main.cc; 105: [==========] Running 7 tests from 1 test suite.; 105: [----------] Global test environment set-up.; 105: [----------] 7 tests from TFormulaGradientPar; 105: [ RUN ] TFormulaGradientPar.Sanity; 105: /home/jhahnfel/ROOT/src/hist/hist/test/TFormulaGradientTests.cxx:34: Failure; 105: Expected equality of these values:; 105: x[0] * std::cos(30); 105: Which is: 0.15425146; 105: result[0]; 105: Which is: 0; 105: [ FAILED ] TFormulaGradientPar.Sanity (134 ms); 105: [ RUN ] TFormulaGradientPar.ResultUpsize; 105: /home/jhahnfel/ROOT/src/hist/hist/test/TFormulaGradientTests.cxx:52: Failure; 105: Expected equality of these values:; 105: std::cos(30); 105: Which is: 0.15425146; 105: result[1]; 105: Which is: 0; 105: [ FAILED ] TFormulaGradientPar.ResultUpsize (6 ms); 105: [ RUN ] TFormulaGradientPar.ResultDownsize; 105: /home/jhahnfel/ROOT/src/hist/hist/test/TFormulaGradientTests.cxx:69: Failure; 105: Expected equality of these values:; 105: std::cos(60); 105: Which is: -0.95241296; 105: result[0]; 105: Which is: 0; 105: [ FAILED ] TFormulaGradientPar.ResultDownsize (6 ms); 105: [ RUN ] TFormulaGradientPar.GausCrossCheck; 105: [ OK ] TFormulaGradientPar.GausCrossCheck (6 ms); 105: [ RUN ] TFormulaGradientPar.BreitWignerCrossCheck; 105: [ OK ] TFormulaGradientPar.BreitWignerCrossCheck (6 ms); 105: [ RUN ] TFormulaGradientPar.BreitWignerCrossCheckAccuracyDemo; 105: [ OK ] TFormulaGradientPar.BreitWignerCrossCheckAccuracyDemo (0 ms); 105: [ RUN ] TFormulaGradientPar.GetGradFormula; 105: [ OK ] TFormulaGradientPar.GetGradFormula (1 ms); 105: [----------] 7 tests from TFormulaGradientPar (159 ms total); 105:; 105: [----------] Global test environment tear-down; 105: [==========]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7488#issuecomment-824624007:579,Failure,Failure,579,https://root.cern,https://github.com/root-project/root/pull/7488#issuecomment-824624007,2,['Failure'],['Failure']
Availability,"@vgvassilev thanks, but there is no change, same error. I am also getting cmake warnings:. ```Make Deprecation Warning at interpreter/llvm-project/cmake/Modules/CMakePolicy.cmake:6 (cmake_policy): ; The OLD behavior for policy CMP0114 will be removed from a future version; of CMake. The cmake-policies(7) manual explains that the OLD behaviors of all; policies are deprecated and that a policy should be set to OLD only under; specific short-term circumstances. Projects should be ported to the NEW; behavior and not rely on setting a policy to OLD.; Call Stack (most recent call first):; interpreter/llvm-project/llvm/CMakeLists.txt:6 (include). CMake Deprecation Warning at interpreter/llvm-project/cmake/Modules/CMakePolicy.cmake:11 (cmake_policy):; The OLD behavior for policy CMP0116 will be removed from a future version; of CMake. The cmake-policies(7) manual explains that the OLD behaviors of all; policies are deprecated and that a policy should be set to OLD only under; specific short-term circumstances. Projects should be ported to the NEW; behavior and not rely on setting a policy to OLD.; Call Stack (most recent call first):; interpreter/llvm-project/llvm/CMakeLists.txt:6 (include). CMake Warning (dev) at /home/mkrzewic/src/roottest/CMakeLists.txt:132 (exec_program):; Policy CMP0153 is not set: The exec_program command should not be called.; Run ""cmake --help-policy CMP0153"" for policy details. Use the cmake_policy; command to set the policy and suppress this warning. Use execute_process() instead.; This warning is for project developers. Use -Wno-dev to suppress it. CMake Warning (dev) at /home/mkrzewic/src/roottest/CMakeLists.txt:134 (exec_program):; Policy CMP0153 is not set: The exec_program command should not be called.; Run ""cmake --help-policy CMP0153"" for policy details. Use the cmake_policy; command to set the policy and suppress this warning. Use execute_process() instead.; This warning is for project developers. Use -Wno-dev to suppress it. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14492#issuecomment-1940817998:49,error,error,49,https://root.cern,https://github.com/root-project/root/issues/14492#issuecomment-1940817998,1,['error'],['error']
Availability,"@vgvassilev the failure is in a `nortcxxmod`, that's why I wondered about this case. The previous implementation looking at the `SourceLocation`s worked, so there must be *some* differences...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11514#issuecomment-1273276497:16,failure,failure,16,https://root.cern,https://github.com/root-project/root/pull/11514#issuecomment-1273276497,1,['failure'],['failure']
Availability,"@vgvassilev well, we use the same modulemap for building/runtime at the moment, so the names would be anyway equal :) Also if you try to trick root by placing other PCMs there you'll get an error because we check the clang version that generated the PCM before loading it, so you would have to do some serious work to get around this check.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/878#issuecomment-324616774:190,error,error,190,https://root.cern,https://github.com/root-project/root/pull/878#issuecomment-324616774,1,['error'],['error']
Availability,@vgvassilev what do we do with this? It fixes a couple of issues in current master's cling-test even if not all of them. I'd prefer to see this in master before we merge the llvm upgrade to start from a state with less cling test failures...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9904#issuecomment-1122801114:230,failure,failures,230,https://root.cern,https://github.com/root-project/root/pull/9904#issuecomment-1122801114,1,['failure'],['failures']
Availability,"@vgvassilev yes the bulk of the code is from LLVM SmallVector but see my comment above: we patch it to add a feature, and it does not work with (our version of) cppyy as-is. So exposing LLVM's SmallVectore as a core library would not help here, we'd still need to roll our own SmallVector-based RVec. > I thought we have a way to do that with TMemFile already. It's a different ""level"" of adoption: this is after deserialization, TMemFile might make an on-disk blob available as a memory buffer but that would be before deserialization.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7502#issuecomment-813913397:466,avail,available,466,https://root.cern,https://github.com/root-project/root/pull/7502#issuecomment-813913397,1,['avail'],['available']
Availability,"@vgvassilev, here is the PR so solve the LLVM library conflicts when interfacing ROOT with Julia. I've limited the change to the interpreter package. I have 25 out of the 2140 tests that fail. It's likely to be due to my local environment. If it can easily be tested with the jenkins system, it will be faster that me trying to investigate the test failures. . Note. The parallel compilation is not working properly, independently of my changes: it fails many times and need to be restarted or build some package in single process mode. Is it a know problem ?. # This Pull request:. ## Changes or fixes:. Adds -Bsymbolic linker option for libCling.so in order get the symbols resolved internally; ; This is expected to solve conflicts when interfacing with other software using LLVM, like Julia. See https://github.com/JuliaHEP/ROOT.jl/issues/17#issuecomment-882719292. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8717:349,failure,failures,349,https://root.cern,https://github.com/root-project/root/pull/8717,1,['failure'],['failures']
Availability,"@wdconinc sorry, pinged wrong person. The mentioned commit (aka PR #12845) contains the fix, but I don't know when that incompatibility was introduced.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14793#issuecomment-1983553170:17,ping,pinged,17,https://root.cern,https://github.com/root-project/root/issues/14793#issuecomment-1983553170,1,['ping'],['pinged']
Availability,"@wlav ; ""So the only upside there seems to be is removing of this teeny-weeny inconvenience of having to setup PYTHONPATH if you install in /usr/local. But A) most from-source builders don't do that, they use bin/thisroot.sh, which sets up PYTHONPATH; and B) installing in /usr/local is not recommended to begin with, b/c of the same problem with remnants."". A) it's also valid when installing as user to ~/.local (like when you install a python module with --user); B) of course, users shouldn't install anything to /usr[/local] without using package management, but it will simplify packaging too by not having to install an ugly script somewhere that sets PYTHONPATH. As for the downsides, I think this solution is just simpler (not mentioning cleaner), maybe this will get you less bug reports.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/73#issuecomment-138831372:682,down,downsides,682,https://root.cern,https://github.com/root-project/root/pull/73#issuecomment-138831372,1,['down'],['downsides']
Availability,"@wlav, do you maybe have already experience will these kind of errors?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16748#issuecomment-2442662748:63,error,errors,63,https://root.cern,https://github.com/root-project/root/pull/16748#issuecomment-2442662748,1,['error'],['errors']
Availability,"@wmyyy BTW, this error comes from the `CMakeLists.txt` of `FREETYE`, not from ROOT itself.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9347#issuecomment-982472058:17,error,error,17,https://root.cern,https://github.com/root-project/root/issues/9347#issuecomment-982472058,1,['error'],['error']
Availability,"@wmyyy so I can't build with ASAN on Windows (see errors above). But it's weird that you don't have the same errors. And about the ""The items cannot be built in parallel."", it's fine, it's only an informative message",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9445#issuecomment-1010722493:50,error,errors,50,https://root.cern,https://github.com/root-project/root/issues/9445#issuecomment-1010722493,2,['error'],['errors']
Availability,"@wolfv great to see you down here :smile: thank you for the snippet!; @SylvainCorlay let's be clear (haven't clarified it enough during the discussion in Sarajevo) that `RTensor` is not xtensor2, it is not meant to have broadcasting nor lazy execution, and it's nowhere near an expression system. It's there because the machine learning classes were missing a multidimensional container with shape information, which they obviously terribly need. I completely agree with @stwunsch that adopting xtensor is an larger, more complex, _ongoing_ discussion :smile:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2593#issuecomment-421270850:24,down,down,24,https://root.cern,https://github.com/root-project/root/pull/2593#issuecomment-421270850,2,['down'],['down']
Availability,"@xkzl @dpiparo . MacOS 15 has two versions/branches (don't ask me why). 15.0 and 15.1. We have these two versions available on our build machines. I just built the master head version of ROOT on both of them and I have tested TBrowser with both the Cocoa Version ( option `-web=off`) and the web version (without the web off):. On both versions with both options, **all is fine** on our build machines (macphsft34 for 15.0 and macphsft35 for 15.1).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16428#issuecomment-2351582939:114,avail,available,114,https://root.cern,https://github.com/root-project/root/issues/16428#issuecomment-2351582939,1,['avail'],['available']
Availability,"@xloem I don't think it was your fault. It was probably an infrastructure failure. To see build errors, you can go to cdash.cern.ch and look on the day the PR was built at the very end you can see the builds by PR number. For example, here's a link to the mac build of this PR: http://cdash.cern.ch/buildSummary.php?buildid=628427.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3442#issuecomment-466923926:33,fault,fault,33,https://root.cern,https://github.com/root-project/root/pull/3442#issuecomment-466923926,3,"['error', 'failure', 'fault']","['errors', 'failure', 'fault']"
Availability,"@xvallspl I guess we need to understand the failure in `TFormula` before merging, right?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/824#issuecomment-319099636:44,failure,failure,44,https://root.cern,https://github.com/root-project/root/pull/824#issuecomment-319099636,1,['failure'],['failure']
Availability,"@xvallspl as reported by Jenkins in multiple builds, this PR leads to failures in `pyunittests-pyroot-import-load-libs` and `roottest-root-tree-fastcloning-execCheckClusterRange` (can reproduce locally). The first looks like it just needs an update to the whitelist, not sure about the second one.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7040#issuecomment-760992810:70,failure,failures,70,https://root.cern,https://github.com/root-project/root/pull/7040#issuecomment-760992810,1,['failure'],['failures']
Availability,"@yamaguchi1024, the failure seems related to the removal of `#include ""TObject.h""`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2755#issuecomment-427759314:20,failure,failure,20,https://root.cern,https://github.com/root-project/root/pull/2755#issuecomment-427759314,1,['failure'],['failure']
Availability,@zzxuanyuan It looks like this cannot compile without TBB. Could you please take a look at the errors and update the PR accordingly? Thanks!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/785#issuecomment-317657340:95,error,errors,95,https://root.cern,https://github.com/root-project/root/pull/785#issuecomment-317657340,1,['error'],['errors']
Availability,"A PR is available now, please let me know if you would like this to be back ported to the 6.26 branch",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10586#issuecomment-1128966283:8,avail,available,8,https://root.cern,https://github.com/root-project/root/issues/10586#issuecomment-1128966283,1,['avail'],['available']
Availability,"A `@pythonization` decorator was already being used internally in ROOT to register pythonizor functions for ROOT classes. Such decorator has been redesigned and made available to users via the ROOT module to pythonize their classes. The decorator accepts two parameters: the target of the pythonization (a string or an iterable of strings) and - optionally - a boolean that says if the string(s) are full class names or prefixes. Let's see this better with examples. If I want to pythonize class `C`, I can define a pythonizor function like this:; ```python; from ROOT import pythonization. @pythonization(""C""); def pythonizor_C(klass, name):; ...; ```; where `klass` is the Python proxy class for `C` and `name` is the name of the class (i.e. ""C""). The reason I kept `name` as parameter is for convenience for the user, since she might want to do some more complex filtering than what the decorator offers (this will be more useful in the examples for prefixes below). If I want to apply the same pythonizor to more than one class, e.g. `C` and `B`, I can do:; ```python; @pythonization([ ""C"", ""B"" ]); def pythonizor_C_B(klass, name):; ...; ```; Note that classes in namespaces also work, e.g. `@pythonization(""NS1::C"")` or `@pythonization([""NS1::C"", ""NS1::NS2::B""])` are also valid. Regarding prefixes, I wanted to provide an option to match multiple classes without specifying their names one by one. This can be useful, for instance, for templated classes, since we might want to apply the same pythonizor to any instantiation of the templated class no matter with what type it was instantiated (note that pythonizors are not applied to templates but to classes). So it is also possible to do (this time picking a real example from ROOT):; ```python; @pythonization(""ROOT::VecOps::RVec<"", is_prefix=True); def pythonizor_RVec(klass, name):; ...; ```; The `is_prefix` argument (`False` by default) tells that I want to match anything that starts with `ROOT::VecOps::RVec<`, e.g. `ROOT::VecOps::RVec",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9128:166,avail,available,166,https://root.cern,https://github.com/root-project/root/pull/9128,1,['avail'],['available']
Availability,A bisect revealed that the valgrind errors were introduced by previous changes. They will be resolved by a different PR. Will merge this in the meanwhile.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5488#issuecomment-621678546:36,error,errors,36,https://root.cern,https://github.com/root-project/root/pull/5488#issuecomment-621678546,1,['error'],['errors']
Availability,"A bit more information on this one. This is a standalone reproducer:. ```python; import cppyy. cppyy.cppdef('''; class MyClass {; public:; virtual ~MyClass() {}; protected:; virtual int BufferFill(double, double) {return -2;}; virtual int BufferFill(double, double, double);. void SetBins(int*, double*) { };; int Fill(const double*) { return -1; };. private:; int Fill(double) { return -1;}; void SetBins(int, double, double, int, double, double) { }; };; '''). class MyPyClass(cppyy.gbl.MyClass):; pass; ```. which prints similar errors to the ones reported for `TProfile`. There are two kinds of errors:; 1. ` using MyClass::BufferFill;` is repeated in the `Dispatcher1` class: this happens because there are two protected overloads of `BufferFill`. Should be easy to fix.; 2. `using MyClass::SetBins;` (or `Fill`) is inserted in the `Dispatcher1` class since there is a protected overload for `SetBins` (and `Fill`). However, both `SetBins` and `Fill` also have private overloads, hence the error. This is trickier, since we can't pull in specific overloads with `using`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6345#issuecomment-713525206:532,error,errors,532,https://root.cern,https://github.com/root-project/root/issues/6345#issuecomment-713525206,3,['error'],"['error', 'errors']"
Availability,"A bit more research: ; Apparently on lxplus also 6.24 cannot correctly use `dill`; ```; [vpadulan@lxplus706 ~]$source /cvmfs/sft.cern.ch/lcg/views/dev4/latest/x86_64-centos7-gcc10-opt/setup.sh; [vpadulan@lxplus706 ~]$root --version; ROOT Version: 6.24/00; Built for linuxx8664gcc on Apr 14 2021, 14:33:50; From tags/v6-24-00@v6-24-00; [vpadulan@lxplus706 ~]$python -c ""import ROOT; import dill; print(type(dill.loads(dill.dumps(ROOT.TH1D()))))""; TBufferFile::WriteObjectAny:0: RuntimeWarning: since TROOT has no public constructor; which can be called without argument, objects of this class; can not be read with the current library. You will need to; add a default constructor before attempting to read it.; Error in <TClass::New>: cannot create object of class TROOT; Error in <TBufferFile::ReadObject>: could not create object of class TROOT; Error in <TSystem::TSystem>: only one instance of TSystem allowed; input_line_35:5:21: error: allocating an object of abstract class type 'TInterpreter'; *ret = new TInterpreter;; ```. But it seems that might be due to the `dill` version:; ```; [vpadulan@lxplus706 ~]$python; Python 3.8.6 (default, Dec 11 2020, 21:40:36) ; [GCC 10.1.0] on linux; Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.; >>> import dill; >>> dill.__file__; '/cvmfs/sft-nightlies.cern.ch/lcg/views/dev4/Mon/x86_64-centos7-gcc10-opt/lib/python3.8/site-packages/dill/__init__.py'; >>> dill.__version__; '0.3.2'; >>> quit(); ```. Because on my machine I can correctly run the reproducer with 6.22/08 and ROOT master, as I posted above. Indeed, I have `dill` 0.3.3 on my laptop. If I install `0.3.2` instead I get the same error from ROOT; ```; vpadulan@fedorathinkpad-T550 [~]: python -m pip install dill==0.3.2; Defaulting to user installation because normal site-packages is not writeable; Collecting dill==0.3.2; Downloading dill-0.3.2.zip (177 kB); |████████████████████████████████| 177 kB 762 kB/s ; Building wheels for collected packages: dill; Building",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6370#issuecomment-822597548:710,Error,Error,710,https://root.cern,https://github.com/root-project/root/issues/6370#issuecomment-822597548,4,"['Error', 'error']","['Error', 'error']"
Availability,"A commit from earlier this year (https://github.com/root-project/root/commit/3d545273d7763e09aa85449ba86be5d2493f7f13) adjusted the handling of default units in ROOT's geometry system. Although this commit is an ostensible improvement, reducing points of maintenance, there are some consequences that were maybe not anticipated. I refer to the [units README file](https://github.com/root-project/root/blob/master/geom/geom/README_units.md). In that file it states:. > To ensure backwards compatibility ROOT's default system of units is - as it was before - based on centimeters, seconds and GigaElectronVolts, ie. the defaults are equivalent to:; > ; > ```c++; > TGeoManager::SetDefaultUnits(kRootUnits);; > ```. Unfortunately, this statement is not true. As you see from the definition of the `TGeoManager::fgDefaultUnits` static data member https://github.com/root-project/root/blob/49d0be0b9455e026e6d68e2e651113af3f1e4654/geom/geom/src/TGeoManager.cxx#L302 the default units are G4 units, which it has been for some time (perhaps the beginning?). There was thus an inconsistency with the default units and with those assumed by TGDMLParse, which, before the above commit, made an unconditional assumption of ROOT units. The above commit addresses this inconsistency, but the neutrino community at Fermilab (specifically the LArSoft project and the experiments it supports) experienced an [unintended consequence](https://github.com/LArSoft/larcorealg/pull/18)--the default units are now honored by the TGDML parser, but they are simply G4 units instead of ROOT units. In order to make ROOT units the default, we use the workaround:. ```c++; TGeoManager::LockDefaultUnits(false);; TGeoManager::SetDefaultUnits(TGeoManager::kRootUnits);; TGeoManager::LockDefaultUnits(true);; ```. as the units are locked upon library load: https://github.com/root-project/root/blob/612b68ea1f70c3f5ce7deb8a6b664b8a08987991/geom/geom/src/TGeoManager.cxx#L304. This issue requests two things:. - Please correct the RE",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8695:255,mainten,maintenance,255,https://root.cern,https://github.com/root-project/root/issues/8695,1,['mainten'],['maintenance']
Availability,"A compilable TTreeReader-only repro:. ```cpp; #include <TTreeReader.h>; #include <TTreeReaderValue.h>; #include <TFile.h>; #include <TTree.h>; #include <TROOT.h>; #include <string>; #include <iostream>. void MakeTree(); {; TFile f(""f.root"", ""recreate"");; TTree t(""t"", ""t"");; std::string s(""foo"");; t.Branch(""s"", &s);; t.Fill();; f.Write();; f.Close();; }. int main() {; MakeTree();. TFile f(""f.root"");; TTreeReader r(""t"", &f);; TTreeReaderValue<std::string> rv(r, ""s"");. gROOT->GetType(""std::string""); // this is what breaks it. while (r.Next()); std::cout << *rv << '\n';. return 0;; }; ```. This prints:. ```; Error in <TTreeReaderValueBase::CreateProxy()>: The branch s contains data of type string. It cannot be accessed by a TTreeReaderValue<string>; ```. The difference between runs with/without the `GetType(""std::string"")` seems to be that at the following line `fDict != branchActualType` when `GetType` is called, while `fDict == branchActualType` in the sane case. I did not have time to go deeper. https://github.com/root-project/root/blob/bbe45e9a9cee3adce3843225e1d4fc82c95bdb17/tree/treeplayer/src/TTreeReaderValue.cxx#L557",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7169#issuecomment-776878698:612,Error,Error,612,https://root.cern,https://github.com/root-project/root/issues/7169#issuecomment-776878698,1,['Error'],['Error']
Availability,A few data points:; - ROOT 6.26.8 + python3.9: error; - ROOT 6.26.10 + python3.9: error; - ROOT 6.26.8 + python3.10: error; - macOS homebrew ROOT 6.26.6 + python3.10: no error,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12182#issuecomment-1419179465:47,error,error,47,https://root.cern,https://github.com/root-project/root/issues/12182#issuecomment-1419179465,4,['error'],['error']
Availability,"A few fixes concerning the AsNumpy functionality, related to the iteration of a `vector<string>` and the use of stl strings as keys of Python dictionaries. This should fix the AsNumpy test failure here:; https://github.com/root-project/root/pull/5036#issuecomment-588256573",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5048:189,failure,failure,189,https://root.cern,https://github.com/root-project/root/pull/5048,1,['failure'],['failure']
Availability,"A fix is available in the master branch, @Om4143 can you please confirm that this works for you?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14283#issuecomment-1886568096:9,avail,available,9,https://root.cern,https://github.com/root-project/root/issues/14283#issuecomment-1886568096,1,['avail'],['available']
Availability,"A follow-up from the [discussion on #12664](https://github.com/root-project/root/pull/12664#discussion_r1175726403). The main questions are:. 1. Is a ""dense representation"" (bit vector + default constructed elements for non-available items) really needed; 2. Where is the break-even for the dense representation vs. the sparse representation; 3. Does a ""modified dense"" representation make sense? The modified dense representation would skip creating unavailable items. In order to avoid counting all the 1-bits from the start of the cluster, this representation would need to additionally store the cumulative number of 1 bits per page, e.g. in the page meta-data or in a separate column. To help answer the question, we should fill a table with size figures for the following tests with a few MB of data:. - Nullable field of `bool`, `char`, `float`, `double`, `struct` of a few tens of bytes; - Fill levels 0%, 10%, 50%, 90%, 100%; - Using sparse, dense, modified dense representation; - zstd compressed and uncompressed. For typical compression ratios, the data should follow a typical distribution, e.g. Gauss.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12842:224,avail,available,224,https://root.cern,https://github.com/root-project/root/issues/12842,1,['avail'],['available']
Availability,A function-static does not guarantee the lifetime to be sufficiently; extended - at least on CentOS7. Use a unique_ptr which guarantees the; reference to stay valid for as long as the referencee is alive. Fixes crash at exit on CentOS7.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7343:198,alive,alive,198,https://root.cern,https://github.com/root-project/root/pull/7343,1,['alive'],['alive']
Availability,A function-static does not guarantee the lifetime to be sufficiently; extended - at least on CentOS7. Use a unique_ptr which guarantees the; reference to stay valid for as long as the referencee is alive. Fixes crash at exit on CentOS7. (cherry picked from commit 80c14bb948df53d54596cbbabe725e6ef0acc8e8),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7349:198,alive,alive,198,https://root.cern,https://github.com/root-project/root/pull/7349,1,['alive'],['alive']
Availability,"A non-RDF reproducer would be:; ```python; >>> import ROOT; >>> ROOT.std.vector['std::complex<double'].value_type; 'std::complex<double>'; >>> ROOT.std.vector['_Complex double'].value_type; Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; AttributeError: <class cppyy.gbl.std.vector<_Complex double> at 0x3938048> has no attribute 'value_type'. Full details:; type object 'vector<_Complex double>' has no attribute 'value_type'; 'std::vector<_Complex double>::value_type' is not a known C++ class; 'value_type' is not a known C++ template; 'value_type' is not a known C++ enum; ```. Our pythonization of `std::vector` relies on `value_type` to be always present, which is not the case currently as we can see in the example above. If I try to do the same in C++ (@Axel-Naumann ?):; ```c++; root [0] auto t1 = std::vector<std::complex<double>>::value_type();; root [1] t1; (std::complex<double> &) @0x7f69aae08010; root [2] auto t2 = std::vector<_Complex double>::value_type();; error: call to 'setValueNoAlloc' is ambiguous; /home/etejedor/root/fork/build/etc/cling/Interpreter/RuntimeUniverse.h:75:12: note: candidate function; void setValueNoAlloc(void* vpI, void* vpV, void* vpQT, char vpOn,; ^; /home/etejedor/root/fork/build/etc/cling/Interpreter/RuntimeUniverse.h:88:12: note: candidate function; void setValueNoAlloc(void* vpI, void* vpV, void* vpQT, char vpOn,; ^; /home/etejedor/root/fork/build/etc/cling/Interpreter/RuntimeUniverse.h:102:12: note: candidate function; void setValueNoAlloc(void* vpI, void* vpV, void* vpQT, char vpOn,; ^; /home/etejedor/root/fork/build/etc/cling/Interpreter/RuntimeUniverse.h:117:12: note: candidate function; void setValueNoAlloc(void* vpI, void* vpV, void* vpQT, char vpOn,; ^; ```. A workaround would be not to use `value_type` from our `std::vector` pythonization and just check the element type of the vector via the name of the class.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10522#issuecomment-1118545105:1002,error,error,1002,https://root.cern,https://github.com/root-project/root/issues/10522#issuecomment-1118545105,1,['error'],['error']
Availability,"A number of test failures have to be fixed in the experimental PyROOT builds:. https://epsft-jenkins.cern.ch/job/root-exp-pyroot/8/. This PR temporarily disables those failing tests for the experimental PyROOT builds, and they will be re-enabled progressively as they are fixed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3255:17,failure,failures,17,https://root.cern,https://github.com/root-project/root/pull/3255,1,['failure'],['failures']
Availability,"A number of test failures have to be fixed in the experimental PyROOT builds:. https://epsft-jenkins.cern.ch/job/root-exp-pyroot/9/. This PR temporarily flags those tests as ""will fail"" for the experimental PyROOT builds, and they will be restored progressively as they are fixed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3260:17,failure,failures,17,https://root.cern,https://github.com/root-project/root/pull/3260,1,['failure'],['failures']
Availability,"A one-line fix, but should be backported!. If the parameter was negative, it was slipping past this line and causing nan error to come back from the function!",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12838:121,error,error,121,https://root.cern,https://github.com/root-project/root/pull/12838,1,['error'],['error']
Availability,"A potential reason might be that it is not handling the negative height correctly. See https://docs.microsoft.com/en-us/previous-versions//dd183376(v=vs.85)?redirectedfrom=MSDN; ```; biHeight; The height of the bitmap, in pixels.; If biHeight is positive, the bitmap is a bottom-up DIB and its origin is the lower-left corner.; If biHeight is negative, the bitmap is a top-down DIB and its origin is the upper-left corner.; ```. See https://github.com/root-project/root/blob/master/graf2d/asimage/src/libAfterImage/bmp.c#L199",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8125#issuecomment-834806573:373,down,down,373,https://root.cern,https://github.com/root-project/root/issues/8125#issuecomment-834806573,1,['down'],['down']
Availability,"A previous commit dropped the use of PyROOT_PyUnicode_AsStringChecked, which in Py2 corresponds to PyString_AsString, which accepts unicode objects. This PR should fix this test failure seen in the nightlies:; http://cdash.cern.ch/testSummary.php?project=1&name=roottest-python-JupyROOT-simpleCppMagic_notebook&date=2019-09-10",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4372:178,failure,failure,178,https://root.cern,https://github.com/root-project/root/pull/4372,1,['failure'],['failure']
Availability,"A priori a 2nd running of EndOfProcessCleanups should be 'harmless' (i.e. what ever list of things to delete would be empty on the 2nd run). The issue here (well there https://github.com/root-project/root/issues/10743) does not seems to be the 2nd running of EndOfProcessCleanups but rather that there is a bad interaction between the 'early' running of the cleanups and that something in RDataFrame is not properly informed that something is delete early. The early cleanups is necessary because of the following issue. * The python code (directly or indirectly) can load libraries (Ls); * The python code (directly or indirectly) can open TFile (Fs) and can elect to never delete them; * The python code (directly or indirectly) can attach objects based on the Libraries on to the TFile. Then the order of execution at tear down will be. (1) tear down python; (2) unload the loaded libraries (Ls); (3) execute the atexit registered by TROOT, ; (4) this includes EndOfProcessCleanups; (5) this includes flushing and closing the TFiles. During (5) the object attached the TFile (usually just histogram and `TTree` but can also be object from the user libraries. However if the libraries for the user objects are already unloaded, their code (including a Streamer function or even their dictionary) are gone and this result in crash at best or worse in data loss. In order to prevent that we introduced (in https://github.com/root-project/root/commit/7a592f5d62dda6c76f230bfa6fd879e5fa80582a and friends), running the `EndOfProcessCleanups` of cleanups as soon as possible (i.e. as soon as we can detect the process is starting to tear down). (i.e. make it part of (1)). More likely that not this means than rather than removing early this call to `EndOfProcessCleanups`, the solution is to inform `RDataFrame` of those early deletion (depending whether the things that are deleted that are annoying `RDataFrame`, they may or may not be having the trouble described above, so another solution might be ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10753#issuecomment-1155610874:826,down,down,826,https://root.cern,https://github.com/root-project/root/pull/10753#issuecomment-1155610874,2,['down'],['down']
Availability,"A proof that the problem exists before this PR is:; ```; cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_BUILD_TYPE=""Debug"" -DLLVM_BUILD_TYPE=""Debug"" -Dbuiltin_clang=""On"" -Dbuiltin_gsl=""On"" -Dbuiltin_llvm=""On"" -Dpython=""On"" -Droottest=""On"" -Druntime_cxxmodules=""On"" -Dx11=""Off"" /home/performance-test/src_master ; -- ROOT default compression algorithm: zlib; -- Found GCC. Major version 7, minor version 4; -- Found a 64bit system; -- Found GNU compiler collection; -- ROOT Platform: linux; -- ROOT Architecture: linuxx8664gcc; -- Build Type: Debug; -- Compiler Flags: -std=c++11 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread ; -- Looking for ZLib; -- Looking for Freetype; -- Looking for LZMA; -- Found LZMA includes at /usr/include; -- Found LZMA library at /usr/lib/x86_64-linux-gnu/liblzma.so; -- Building AfterImage library included in ROOT itself; -- Looking for GSL; -- Downloading and building GSL version 2.1; -- Looking for python; -- Enabled support for: builtin_afterimage builtin_clang builtin_ftgl builtin_glew builtin_gsl builtin_llvm builtin_lz4 builtin_openssl builtin_pcre builtin_tbb builtin_vdt builtin_xxhash clad exceptions explicitlink gdml http imt mathmore mlp python roofit runtime_cxxmodules shared ssl tmva spectrum vdt; -- Native target architecture is X86; -- Threads disabled.; -- Doxygen disabled.; -- Go bindings disabled.; -- LLVM host triple: x86_64-unknown-linux-gnu; -- LLVM default target triple: x86_64-unknown-linux-gnu; -- Building with -fPIC; -- Constructing LLVMBuild project information; -- Linker detection: GNU ld; -- SysLibs: rt;dl;tinfo;-lpthread;/usr/lib/x86_64-linux-gnu/libz.so; -- Targeting X86; -- Clang version: 5.0.0; -- Cling version (from VERSION file): ROOT_0.6~dev; -- Cling will look for C++ headers in '/usr/include/c++/7:/usr/include/x86_64-linux-gnu/c++/7:/usr/include/c++/7/backward' at runtime.; -- And then fallback to: 'x86_64-linux-gnu-g++-7'; Recording the git rev",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3891#issuecomment-502686211:945,Down,Downloading,945,https://root.cern,https://github.com/root-project/root/pull/3891#issuecomment-502686211,1,['Down'],['Downloading']
Availability,"A recent refactoring in RDF introduced an incompatibility with gcc; 7.5.0: clang and that gcc version disagree on the address of the; std::map argument passed to InitColumnReaders.; RCustomColumn<...>::InitSlot, the _jitted_ caller, sees the correct; address, but InitColumnReaders<...>, the _compiled_ callee, sees a; different address. For reasons known only to gcc 7.5.0, ~~moving the first function; argument to the last position~~ reducing the number of function; arguments (by aggregating some of them in a helper struct) resolves; the ABI incompatibility.; Valgrind could see an access to invalid memory before, and it does; not anymore. This should fix [this crash](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/94/testReport/junit/projectroot.root/dataframe/roottest_root_dataframe_test_snapshot/) in the conda nightly builds and [these test failures](https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu18.04,SPEC=nortcxxmod,V=master/2614/) in ROOT's nightlies on ubuntu 18.04.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6231:881,failure,failures,881,https://root.cern,https://github.com/root-project/root/pull/6231,1,['failure'],['failures']
Availability,"A reproducer:. ```cpp; #include <ROOT/RDataFrame.hxx>. int main() {; {; auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 42; });; df.Snapshot(""t"", ""f.root"");; df.Snapshot(""fr"", ""fr.root"");; }. TFile f(""f.root"");; auto *t = f.Get<TTree>(""t"");; TFile frf(""fr.root"");; auto *fr = frf.Get<TTree>(""fr"");; t->AddFriend(fr);; ROOT::RDataFrame df(*t);; df.Filter(""x > 0 && fr.x > 0"").Count().GetValue();; }; ```. errors out with:. ```; input_line_32:2:67: error: use of undeclared identifier 'fr'; auto func0(const Int_t var0, const Int_t var1){return var0 > 0 && fr.var0 > 0; ^; ```. The reason is that in this case we substitute column names with `var0`, `var1` placeholder names starting with `""x""`, resulting in the broken expression with `fr.var0`. I think a possible fix is to perform these substitutions from the longest to the shortest column names. First reported at https://root-forum.cern.ch/t/rdataframe-string-filter-question/50872 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11002:411,error,errors,411,https://root.cern,https://github.com/root-project/root/issues/11002,2,['error'],"['error', 'errors']"
Availability,"A simpler reproducer, generating a tree with:. ```cpp; void generate_tree() {; TFile f(""file.root"", ""RECREATE"");; TTree t(""tree"", ""tree"");; std::string x(""foo"");; t.Branch(""x"", &x);; t.Fill();; f.Write();; f.Close();; }; ```. and then running:; ```python; # tree generated in C++; import ROOT. df = ROOT.RDataFrame('tree', 'file.root'); hist = df.Histo1D('x'). ROOT.std.string. print(hist.GetEntries()); ```. triggers the same error. The culprit here is the lookup of `std::string`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7169#issuecomment-776729215:427,error,error,427,https://root.cern,https://github.com/root-project/root/issues/7169#issuecomment-776729215,2,['error'],['error']
Availability,"A solution is proposed in https://github.com/root-project/root/pull/7935. For the minimum example to reproduce the error, one doesn't need the linked list and it's helpful to do the print every 60000 iterations to be a multiple of the arena size (otherwise one also observes cyclic memory increase that is difficult to distinguish from the leak).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7933#issuecomment-823196820:115,error,error,115,https://root.cern,https://github.com/root-project/root/issues/7933#issuecomment-823196820,1,['error'],['error']
Availability,"A stripped down version of the header that segfaults:; ```; // test.h; #include ""LoKi/Particles.h"". using EQUALTO = LoKi::EqualToValue<const LHCb::Particle*>;; const auto TRTYPE = LoKi::Particles::TrackType{};. // Remove ANY of the lines below and the segfault disappears.; const auto ISDOWN = EQUALTO{TRTYPE, LHCb::Track::Types::Downstream};; const auto ISLONG = EQUALTO{TRTYPE, LHCb::Track::Types::Long};; const auto MUONBDT_CATBOOST = LoKi::Particles::MuonMVA2{};; const auto ISMUONPID = LoKi::Particles::IsMuon{};; const auto ISMUONLOOSE = LoKi::Particles::IsMuonLoose{};; const auto ISMUONTIGHT = LoKi::Particles::IsMuonTight{};; const auto ISUP = EQUALTO{TRTYPE, LHCb::Track::Types::Upstream};; const auto KEY = LoKi::Particles::Key{};; const auto M = LoKi::Particles::Mass{};; const auto LV01 = LoKi::Particles::DecayAngle{1};; const auto LV02 = LoKi::Particles::DecayAngle{2};; const auto LV03 = LoKi::Particles::DecayAngle{3};; const auto LV04 = LoKi::Particles::DecayAngle{4};; const auto M0 = LoKi::Particles::Mass{};; const auto M1 = LoKi::Particles::InvariantMass{1};; const auto M12 = LoKi::Particles::InvariantMass{1, 2};; const auto M13 = LoKi::Particles::InvariantMass{1, 3};; const auto M14 = LoKi::Particles::InvariantMass{1, 4};; const auto M2 = LoKi::Particles::InvariantMass{2};; const auto M23 = LoKi::Particles::InvariantMass{2, 3};; const auto M24 = LoKi::Particles::InvariantMass{2, 4};; const auto M34 = LoKi::Particles::InvariantMass{3, 4};; const auto MM = LoKi::Particles::MeasuredMass{};; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15511#issuecomment-2115300347:11,down,down,11,https://root.cern,https://github.com/root-project/root/issues/15511#issuecomment-2115300347,2,"['Down', 'down']","['Downstream', 'down']"
Availability,"A suggestion to maybe fix the TMVA failures: maybe It's the openblas incompatibility with NumPy that we also saw on alma9, which we can about by disabling `tmva-cpu`?. * https://github.com/root-project/root/pull/15302; * https://github.com/root-project/root/issues/15309",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15393#issuecomment-2089995823:35,failure,failures,35,https://root.cern,https://github.com/root-project/root/pull/15393#issuecomment-2089995823,1,['failure'],['failures']
Availability,"A surprisingly related problem appeared sporadically in Jenkins CI builds after the patch to avoid re-jitting distributed RDataFrame tasks. See for example https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/186294/testReport/projectroot.roottest.python.distrdf/dask/roottest_python_distrdf_dask_test_all/ . Here is a copy-paste of the failure for when the CI log will be deleted. ```python; **=================================== FAILURES ===================================; _______________ TestDefinePerSample.test_definepersample_simple ________________. self = <check_definepersample.TestDefinePerSample object at 0x139017700>; connection = <Client: 'tcp://127.0.0.1:58532' processes=2 threads=2, memory=4.00 GiB>. def test_definepersample_simple(self, connection):; """"""; Test DefinePerSample operation on three samples using a predefined; string of operations.; """"""; ; df = Dask.RDataFrame(self.maintreename, self.filenames, daskclient=connection); ; # Associate a number to each sample; definepersample_code = """"""; if(rdfsampleinfo_.Contains(\""{}\"")) return 1;; else if (rdfsampleinfo_.Contains(\""{}\"")) return 2;; else if (rdfsampleinfo_.Contains(\""{}\"")) return 3;; else return 0;; """""".format(*self.samples); ; df1 = df.DefinePerSample(""sampleid"", definepersample_code); ; # Filter by the sample number. Each filtered dataframe should contain; # 10 entries, equal to the number of entries per sample; samplescounts = [df1.Filter(""sampleid == {}"".format(id)).Count() for id in [1, 2, 3]]; ; for count in samplescounts:; > assert count.GetValue() == 10; E AssertionError. ../../../../../roottest/python/distrdf/dask/check_definepersample.py:62: AssertionError; ---------------------------- Captured stderr setup -----------------------------; RDataFrame::Run: event loop was interrupted; 2023-09-30 20:12:08,054 - distributed.worker - WARNING - Compute Failed; Key: dask_mapper-2d1d1d8c-3a72-43e4-9753-d94b58f79b62; Function: execute_task; args: ((<function DaskBackend.dask",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12043#issuecomment-1744864978:357,failure,failure,357,https://root.cern,https://github.com/root-project/root/issues/12043#issuecomment-1744864978,2,"['FAILURE', 'failure']","['FAILURES', 'failure']"
Availability,A very common source of confusion for users is compilation errors coming from ROOT when the C++ standard they use to compile their application is different from the C++ standard with which ROOT was compiled. Some examples:. - https://root-forum.cern.ch/t/solution-for-rstringview-hxx37-error/44639; - https://mattermost.web.cern.ch/root/pl/xiyid5urd7nqtgt381czew1wso; - https://root-forum.cern.ch/t/compiler-error-related-to-c-17-string-view-with-gcc9-1/34727. It would be nice if we could catch this case in a frequently-included header or similar and provide a human-friendly error message instead.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8063:59,error,errors,59,https://root.cern,https://github.com/root-project/root/issues/8063,4,['error'],"['error', 'error-related-to-c-', 'errors']"
Availability,"A way I can see this fixed is through a ""passthrough Define"", which basically reads the content of a column and passes it to another one, *without* jitting, following the example above; ```; TObject& f(TObject& o){return o}; ; [...]; auto df = df.Define(""nots"", f, {""s.""});; [...]; ```; If this is acceptable, it is required to ; a. Document this carefully; b. Make sure a way to do the same is available from python",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14404#issuecomment-2131416484:395,avail,available,395,https://root.cern,https://github.com/root-project/root/issues/14404#issuecomment-2131416484,1,['avail'],['available']
Availability,ACLiC now synthesizes a modulemap with a suffix _ACLiC_dict.modulemap. The file contains the source file to be compiled and the corresponding library.; ; The modulemap is then passed to rootcling via -fmodule-map-file= flag to avoid naming clashes with possibly existing other modulemap files.; ; This patch teaches cling to work with the -fmodule-map-file= flag.; ; ACLiC supports automatic inclusion of Rtypes.h (making ClassDef macro available). Modules are built in isolation and are resilient to #include of Rtypes.h at rootcling startup time. We make module Core (containing Rtypes.h) visible via a newly implemented callback. Depends on #3798,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3850:437,avail,available,437,https://root.cern,https://github.com/root-project/root/pull/3850,2,"['avail', 'resilien']","['available', 'resilient']"
Availability,"ADT/APFloat.h(1166,26): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\Analysis\RetainSummaryManager.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\tools\clang\lib\Analysis\obj.clangAnalysis.vcxproj] ; - [2022-02-11T14:33:56.946Z] C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\include\llvm/ADT/SmallVector.h(397,1): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\lib\CodeGen\SelectionDAG\ScheduleDAGVLIW.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\lib\CodeGen\SelectionDAG\LLVMSelectionDAG.vcxproj] ; - [2022-02-11T14:33:56.947Z] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility(135,35): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\AST\Comment.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\tools\clang\lib\AST\obj.clangAST.vcxproj] ; - [2022-02-11T14:33:56.947Z] C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\include\clang/Basic/Sanitizers.def(44,1): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\Driver\ToolChains\CrossWindows.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\tools\clang\lib\Driver\obj.clangDriver.vcxproj] ; - [2022-02-11T14:33:56.947Z] C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\include\llvm/IR/Metadata.h(134,56): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\lib\Transforms\IPO\FunctionImport.cpp) ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9855#issuecomment-1036274599:1267,error,error,1267,https://root.cern,https://github.com/root-project/root/pull/9855#issuecomment-1036274599,1,['error'],['error']
Availability,"ADT/SmallVector.h(421,1): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\lib\CodeGen\MachineDominators.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\lib\CodeGen\LLVMCodeGen.vcxproj] ; - [2022-02-04T09:51:28.642Z] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility(276,1): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\Frontend\CreateInvocationFromCommandLine.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\tools\clang\lib\Frontend\obj.clangFrontend.vcxproj] ; - [2022-02-04T09:51:28.642Z] C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\include\llvm/Support/Casting.h(177,1): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\lib\Transforms\Scalar\LoopStrengthReduce.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\lib\Transforms\Scalar\LLVMScalarOpts.vcxproj] ; - [2022-02-04T09:51:28.642Z] C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\include\clang/AST/OpenMPClause.h(3785,1): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\AST\ASTTypeTraits.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\tools\clang\lib\AST\obj.clangAST.vcxproj] ; - [2022-02-04T09:51:28.642Z] C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\include\llvm/IR/ValueHandle.h(363,30): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\lib\CodeGen\MachineOptimizationRemarkEmitter.cpp) [C:\b",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9804#issuecomment-1029817819:3447,error,error,3447,https://root.cern,https://github.com/root-project/root/pull/9804#issuecomment-1029817819,1,['error'],['error']
Availability,"AFAIK the new autoloading is not available for COFF?. Do we understand (as in reproduced and debugged) where the original issue is coming from? Let's *first* do that and *then* try to repair, please.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10330#issuecomment-1088602981:33,avail,available,33,https://root.cern,https://github.com/root-project/root/pull/10330#issuecomment-1088602981,2,"['avail', 'repair']","['available', 'repair']"
Availability,AILED: cd /mnt/build/workspace/root-pullrequests-build/build/core/thread && /usr/local/bin/cmake -E env LD_LIBRARY_PATH=/mnt/build/workspace/root-pullrequests-build/build/lib: /mnt/build/workspace/root-pullrequests-build/build/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Thread.cxx -s /mnt/build/workspace/root-pullrequests-build/build/lib/libThread.so -m libCore_rdict.pcm -excludePath /mnt/build/workspace/root-pullrequests-build/root -excludePath /mnt/build/workspace/root-pullrequests-build/build -rml libThread.so -rmf /mnt/build/workspace/root-pullrequests-build/build/lib/libThread.rootmap -I/mnt/build/workspace/root-pullrequests-build/root -I/mnt/build/workspace/root-pullrequests-build/build/etc/cling/ -I/mnt/build/workspace/root-pullrequests-build/build/include -I/mnt/build/workspace/root-pullrequests-build/root/core/thread/inc -I/mnt/build/workspace/root-pullrequests-build/root/core/thread -I/mnt/build/workspace/root-pullrequests-build/root/core/thread/inc -I/mnt/build/workspace/root-pullrequests-build/root/core/thread/inc -I/mnt/build/workspace/root-pullrequests-build/build/include -I/mnt/build/workspace/root-pullrequests-build/root/core/thread -writeEmptyRootPCM TPosixCondition.h TPosixMutex.h TPosixThread.h TPosixThreadFactory.h PosixThreadInc.h TAtomicCount.h TCondition.h TConditionImp.h ThreadLocalStorage.h TMutex.h TMutexImp.h TRWLock.h TSemaphore.h TThreadFactory.h TThread.h TThreadImp.h TThreadPool.h ROOT/RConcurrentHashColl.hxx ROOT/TReentrantRWLock.hxx ROOT/TRWSpinLock.hxx ROOT/TSpinMutex.hxx ROOT/TThreadedObject.hxx /mnt/build/workspace/root-pullrequests-build/root/core/thread/inc/LinkDef.h ; - /mnt/build/workspace/root-pullrequests-build/build/include/ROOT/TThreadedObject.hxx:164:35: error: no matching function for call to 'max' ; - Error: /mnt/build/workspace/root-pullrequests-build/build/core/rootcling_stage1/src/rootcling_stage1: compilation failure (/mnt/build/workspace/root-pullrequests-build/build/lib/libThreadf062367906_dictUmbrella.h),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5049#issuecomment-590268774:1892,error,error,1892,https://root.cern,https://github.com/root-project/root/pull/5049#issuecomment-590268774,3,"['Error', 'error', 'failure']","['Error', 'error', 'failure']"
Availability,"AL::MakeKerasConcat}, {""Add"", TMVA::Experimental::SOFIE::PyKeras::INTERNAL::MakeKerasBinary}, {""Subtract"", TMVA::Experimental::SOFIE::PyKeras::INTERNAL::MakeKerasBinary}, {""Multiply"", TMVA::Experimental::SOFIE::PyKeras::INTERNAL::MakeKerasBinary}, {""Softmax"", TMVA::Experimental::SOFIE::PyKeras::INTERNAL::MakeKerasSoftmax}, {""tanh"", TMVA::Experimental::SOFIE::PyKeras::INTERNAL::MakeKerasTanh}, {""LeakyReLU"", TMVA::Experimental::SOFIE::PyKeras::INTERNAL::MakeKerasLeakyRelu}, {""Dropout"", &lt;expression error&gt;}}’ from ‘&lt;brace-enclosed initializer list&gt;’ to ‘const KerasMethodMap’ {aka ‘const std::unordered_map&lt;std::__cxx11::basic_string&lt;char&gt;, std::unique_ptr&lt;TMVA::Experimental::SOFIE::ROperator&gt; (*)(_object*)&gt;’} ; - [2023-01-20T19:30:34.244Z] /data/sftnight/workspace/root-pullrequests-build/root/tmva/pymva/src/RModelParser_Keras.cxx:82:28: error: expected unqualified-id before ‘,’ token ; - [2023-01-20T19:30:34.244Z] /data/sftnight/workspace/root-pullrequests-build/root/tmva/pymva/src/RModelParser_Keras.cxx:85:4: error: expected unqualified-id before ‘{’ token ; - [2023-01-20T19:30:34.244Z] /data/sftnight/workspace/root-pullrequests-build/root/tmva/pymva/src/RModelParser_Keras.cxx:85:28: error: expected unqualified-id before ‘,’ token ; - [2023-01-20T19:30:34.244Z] /data/sftnight/workspace/root-pullrequests-build/root/tmva/pymva/src/RModelParser_Keras.cxx:86:4: error: expected unqualified-id before ‘{’ token ; - [2023-01-20T19:30:34.244Z] /data/sftnight/workspace/root-pullrequests-build/root/tmva/pymva/src/RModelParser_Keras.cxx:86:28: error: expected unqualified-id before ‘,’ token ; - [2023-01-20T19:30:34.244Z] /data/sftnight/workspace/root-pullrequests-build/root/tmva/pymva/src/RModelParser_Keras.cxx:87:4: error: expected unqualified-id before ‘{’ token ; - [2023-01-20T19:30:34.244Z] /data/sftnight/workspace/root-pullrequests-build/root/tmva/pymva/src/RModelParser_Keras.cxx:87:34: error: expected unqualified-id before ‘,’ token . And 16 more",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12076#issuecomment-1398839517:2205,error,error,2205,https://root.cern,https://github.com/root-project/root/pull/12076#issuecomment-1398839517,6,['error'],['error']
Availability,"AMPE MC Event nTuple Tree *; *Entries : 30000 : Total = 42024515 bytes File Size = 5331016 *; * : : Tree compression factor = 7.90 *; ******************************************************************************; *Br 0 :NUD_total_ADC : nud_total_adc/D *; *Entries : 30000 : Total Size= 241261 bytes File Size = 7509 *; *Baskets : 8 : Basket Size= 32000 bytes Compression= 32.06 *; *............................................................................*; ```. ```; DmpMCEvtNtup->Draw(""NUD_total_ADC""); ```; works, while; ```; root [13] TTreeReader r(DmpMCEvtNtup);; root [14] TTreeReaderValue<double> rv(r, ""NUD_total_ADC"");; root [15] r.Next(); Error in <TTreeReaderValueBase::GetBranchDataType()>: The branch NUD_total_ADC was created using a leaf list and cannot be represented as a C++ type. Please access one of its siblings using a TTreeReaderArray:; Error in <TTreeReaderValueBase::GetBranchDataType()>: NUD_total_ADC.nud_total_adc; Error in <TTreeReaderValueBase::CreateProxy()>: The branch NUD_total_ADC contains data of type {UNDETERMINED TYPE}, which does not have a dictionary.; (bool) false; ```. does not. `TTreeReader` instead requires the full leaf name:. ```; root [1] TTreeReader r(DmpMCEvtNtup);; root [2] TTreeReaderValue<double> rv(r, ""NUD_total_ADC.nud_total_adc"");; root [3] r.Next(); (bool) true; root [4] *rv; (double) -999.00000; ```. ### Expected behavior; <!--; A clear and concise description of what you expected to happen.; -->. `TTreeReader` should support the same set of ""valid branch names"" that `TTree::Draw` supports. ### Setup; <!--; 1. ROOT version; 2. Operating system; 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself.; -->. Reproduced with 6.22/02 and master@4ea4d8943 . ### Additional context; <!--; Add any other context about the problem here.; -->. This looks similar to https://sft.its.cern.ch/jira/browse/ROOT-7984 and it is (at least part of) the cause of https://sft.its.cern.ch/jira/browse/ROOT-9558 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6881:1725,Error,Error,1725,https://root.cern,https://github.com/root-project/root/issues/6881,2,"['Error', 'down']","['Error', 'download']"
Availability,"AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT); for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"".; -->. ### Description. Files TXNetFile.h, TXNetFileStager.h, and TXNetSystem.h are missing in pre-built ROOT v6.26.02 from downloads. I tried to build ROOT from both 6.24.06 and 6.26.02 git tags using exactly the same CMake flags and found that TXNetFile.h and two others are missing in 6.26.02 again. ### Expected behavior; The files enumerated above should be included in the pre-build ROOT archive, and also should be built and installed by `make install`. ### To Reproduce; Download 6.26.02 release from https://root.cern/install/all_releases/ then call (all files are attached below). `tar tzf root_v6.26.02.Linux-ubuntu20-x86_64-gcc9.4.tar.gz root/include | grep /TXNet`. it prints nothing. ### Setup; 1. ROOT version: 6.26.02; 2. Operating system: Ubuntu 20; 3. How you obtained ROOT: binary download and also built it. ### Additional context; <!--; Add any other context about the problem here.; -->; you may also notice that the headers list for 6.26.02 is considerably shorter:; ```; $ wc -l root-v6.24.06-headers.txt root-v6.26.02-headers.txt; 2970 root-v6.24.06-headers.txt; 2840 root-v6.26.02-headers.txt; ```; Headers included in 6.24.06 but missing in 6.26.02:; ```; $ diff -u root-v6.24.06-headers.txt root-v6.26.02-headers.txt > root-headers-diff.txt; $ grep -c '^-\./' root-headers-diff.txt ; 238; ```; Headers missing in 6.24.06 but included in 6.26.02:; ```; $ grep -c '^+\./' root-headers-diff.txt ; 108; ```; Thank you!; ### Attachments; [root-v6.24.06-headers.txt](https://github.com/root-project/root/files/8646800/root-v6.24.06-headers.txt); [root-v6.26.02-headers.txt](https://github.com/root-project/root/files/8646801/root-v6.26.02-headers.txt); [root-headers-diff.txt](https://github.com/root-project/root/files/8646803/root-headers-diff.txt)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10539:1154,down,download,1154,https://root.cern,https://github.com/root-project/root/issues/10539,1,['down'],['download']
Availability,AXEL DEBUG: Node name is null; Build failed on ROOT-fedora29/python3.; [See cdash ](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-2717-ROOT-fedora29-python3&date=2020-04-20).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77415/console).; ### Errors:; - [2020-04-20T19:06:04.655Z] CMake Error at /mnt/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:909 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2717#issuecomment-616750282:349,Error,Errors,349,https://root.cern,https://github.com/root-project/root/pull/2717#issuecomment-616750282,2,['Error'],"['Error', 'Errors']"
Availability,AXEL DEBUG: Node name is null; Build failed on ROOT-fedora30/cxx14.; [See cdash ](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-2717-ROOT-fedora30-cxx14&date=2020-04-20).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77416/console).; ### Errors:; - [2020-04-20T19:15:40.813Z] CMake Error at /build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:909 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2717#issuecomment-616754821:345,Error,Errors,345,https://root.cern,https://github.com/root-project/root/pull/2717#issuecomment-616754821,2,['Error'],"['Error', 'Errors']"
Availability,AXEL DEBUG: Node name is null; Build failed on ROOT-fedora31/noimt.; [See cdash ](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-2717-ROOT-fedora31-noimt&date=2020-04-20).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77417/console).; ### Errors:; - [2020-04-20T19:07:59.538Z] CMake Error at /build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:909 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2717#issuecomment-616751218:345,Error,Errors,345,https://root.cern,https://github.com/root-project/root/pull/2717#issuecomment-616751218,2,['Error'],"['Error', 'Errors']"
Availability,AXEL DEBUG: Node name is null; Build failed on ROOT-performance-centos7-multicore/default.; [See cdash ](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-2717-ROOT-performance-centos7-multicore-default&date=2020-04-20).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77414/console).; ### Errors:; - [2020-04-20T19:06:05.516Z] CMake Error at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:909 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2717#issuecomment-616750301:391,Error,Errors,391,https://root.cern,https://github.com/root-project/root/pull/2717#issuecomment-616750301,2,['Error'],"['Error', 'Errors']"
Availability,AXEL DEBUG: Node name is null; Build failed on ROOT-ubuntu16/nortcxxmod.; [See cdash ](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-2717-ROOT-ubuntu16-nortcxxmod&date=2020-04-20).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77418/console).; ### Errors:; - [2020-04-20T19:23:08.506Z] CMake Error at /mnt/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:909 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2717#issuecomment-616758476:355,Error,Errors,355,https://root.cern,https://github.com/root-project/root/pull/2717#issuecomment-616758476,2,['Error'],"['Error', 'Errors']"
Availability,AXEL DEBUG: Node name is null; Build failed on mac1015/cxx17.; [See cdash ](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-2717-mac1015-cxx17&date=2020-04-20).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77419/console).; ### Errors:; - [2020-04-20T19:06:08.364Z] CMake Error at /Users/sftnight/build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:909 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2717#issuecomment-616750312:333,Error,Errors,333,https://root.cern,https://github.com/root-project/root/pull/2717#issuecomment-616750312,2,['Error'],"['Error', 'Errors']"
Availability,AXEL DEBUG: Node name is null; Build failed on windows10/cxx14.; [See cdash ](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-2717-windows10-cxx14&date=2020-04-20).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77420/console).; ### Errors:; - [2020-04-20T19:06:24.342Z] CMake Error at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:909 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2717#issuecomment-616750445:337,Error,Errors,337,https://root.cern,https://github.com/root-project/root/pull/2717#issuecomment-616750445,2,['Error'],"['Error', 'Errors']"
Availability,AXEL DEBUG: got a stepstartnodeAXEL DEBUG: got a stepstartnodeAXEL DEBUG: got a stepstartnodeAXEL DEBUG: got a stepstartnodeAXEL DEBUG: got an actionAXEL DEBUG: got a workspace; AXEL DEBUG: got a computer: root-jenkins-01.cern.ch; AXEL DEBUG: got a stepstartnodeAXEL DEBUG: got a stepstartnodeAXEL DEBUG: got a stepstartnodeAXEL DEBUG: got a stepstartnodeAXEL DEBUG: got a stepstartnodeAXEL DEBUG: got a stepstartnodeAXEL DEBUG: got a stepstartnodeAXEL DEBUG: got a stepstartnodeAXEL DEBUG: got a stepstartnodeAXEL DEBUG: got a stepstartnodeAXEL DEBUG: got a stepstartnodeAXEL DEBUG: got a stepstartnodeAXEL DEBUG: got a stepstartnodeAXEL DEBUG: got a stepstartnodeAXEL DEBUG: got a stepstartnodeAXEL DEBUG: got a stepstartnodeAXEL DEBUG: got a stepstartnodeAXEL DEBUG: got a stepstartnodeAXEL DEBUG: got a stepstartnodeAXEL DEBUG: got a stepstartnodeAXEL DEBUG: got a stepstartnodeAXEL DEBUG: got a stepstartnodeAXEL DEBUG: got an actionAXEL DEBUG: got a workspace; AXEL DEBUG: got a computer: olhswep22.cern.ch; Build failed on ROOT-performance-centos7-multicore/default.; [See cdash ](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5402-ROOT-performance-centos7-multicore-default&date=2020-04-21).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77623/console).; ### Errors:; - [2020-04-21T12:16:14.317Z] CMake Error at CMakeLists.txt:9 (message): ; - [2020-04-21T12:16:14.317Z] CMake Error at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:941 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5402#issuecomment-617143091:1374,Error,Errors,1374,https://root.cern,https://github.com/root-project/root/pull/5402#issuecomment-617143091,3,['Error'],"['Error', 'Errors']"
Availability,AXEL DEBUG: null workspace; Build failed on ROOT-debian10-i386/cxx14.; [See cdash ](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5415-ROOT-debian10-i386-cxx14&date=2020-04-21).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77606/console).; ### Errors:; - [2020-04-21T12:56:28.483Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:873 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5415#issuecomment-617161888:352,Error,Errors,352,https://root.cern,https://github.com/root-project/root/pull/5415#issuecomment-617161888,2,['Error'],"['Error', 'Errors']"
Availability,AXEL DEBUG: null workspace; Build failed on ROOT-fedora29/python3.; [See cdash ](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5415-ROOT-fedora29-python3&date=2020-04-21).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77608/console).; ### Errors:; - [2020-04-21T12:59:34.627Z] CMake Error at /mnt/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:873 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5415#issuecomment-617163535:346,Error,Errors,346,https://root.cern,https://github.com/root-project/root/pull/5415#issuecomment-617163535,2,['Error'],"['Error', 'Errors']"
Availability,"About cuDNN, it's not respecting fail-on-missing. We have to fix that. The default should be the same as CUDA in my opinion, but as it requires an nvidia account to download and install, I strongly suggest to have it off by default. @Axel-Naumann, what do you think?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5105#issuecomment-596621072:165,down,download,165,https://root.cern,https://github.com/root-project/root/pull/5105#issuecomment-596621072,1,['down'],['download']
Availability,Access of deleted object during hadd tear down.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9017:42,down,down,42,https://root.cern,https://github.com/root-project/root/issues/9017,1,['down'],['down']
Availability,"According to https://github.com/root-project/root/issues/9137, we get bogus data if a friend is shorter than the main tree. The `datasetspec` test acknowledges this, but still checks the results in the MT case. This miraculously seems to work most of the time, but we sometimes see failures in the nightlies, especially on macOS, so remove it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12025:282,failure,failures,282,https://root.cern,https://github.com/root-project/root/pull/12025,1,['failure'],['failures']
Availability,"According to the [documentation](https://en.cppreference.com/w/cpp/container/list/merge), the lists need to be sorted before merging them. This fixes a `Debug Assertion Failed! Expression sequence not ordered` error on Windows.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13262:210,error,error,210,https://root.cern,https://github.com/root-project/root/pull/13262,1,['error'],['error']
Availability,"According to the [documentation](https://en.cppreference.com/w/cpp/container/list/merge), the lists need to be sorted merging them. This fixes a Runtime Check Error on Windows.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13260:159,Error,Error,159,https://root.cern,https://github.com/root-project/root/pull/13260,1,['Error'],['Error']
Availability,"According to the console logs the tests did not execute successfully, partly because of dynamic linking errors with libAsan. . Moreover, a lot of these tests seem to be old and abandonned due to the deprecation of `cint`. Any suggestions about what to do next? @bellenot @pcanal",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8921:104,error,errors,104,https://root.cern,https://github.com/root-project/root/issues/8921,1,['error'],['errors']
Availability,"According to the console logs, this looks like a real failure. . `AddressSanitizer: heap-buffer-overflow`. libAsan seems to have detected a real error in the code. ### How it could be improved; The tests should be translated into CMake code and then the error(s) should be adressed",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8917:54,failure,failure,54,https://root.cern,https://github.com/root-project/root/issues/8917,3,"['error', 'failure']","['error', 'failure']"
Availability,"According to the console logs, this looks like a real failure. However the tests should first be translated into CMake so that they work with ASAN enabled and then tested for corectness.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8922:54,failure,failure,54,https://root.cern,https://github.com/root-project/root/issues/8922,1,['failure'],['failure']
Availability,According to the list of changes in Python 3.11:. https://docs.python.org/3.11/whatsnew/3.11.html. types defined with the Py_TPFLAGS_HAVE_GC flag set but with no traverse function (PyTypeObject.tp_traverse) will cause an error. The above is true for a few types that are defined in cppyy. This commit removes the aforementioned flag from those type definitions with no traverse function. It also sets the right flags for the nonified object type; this fixes the teardown GC crashes observed when the internal memory management of ROOT was involved (e.g. the garbage collection of a tree that belongs to a file). This PR fixes https://github.com/root-project/root/issues/10799,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11457:221,error,error,221,https://root.cern,https://github.com/root-project/root/pull/11457,1,['error'],['error']
Availability,According to the list of changes in Python 3.11:; ; https://docs.python.org/3.11/whatsnew/3.11.html; ; types defined with the Py_TPFLAGS_HAVE_GC flag set but with no; traverse function (PyTypeObject.tp_traverse) will cause an error.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11713:226,error,error,226,https://root.cern,https://github.com/root-project/root/issues/11713,1,['error'],['error']
Availability,"Actually I don't see this line in any builds. ; Anyway, I would suggest to merge the PR and then lets later in the nightly if we get this error again and if we need to add this dependency.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10690#issuecomment-1402252096:138,error,error,138,https://root.cern,https://github.com/root-project/root/pull/10690#issuecomment-1402252096,1,['error'],['error']
Availability,"Actually I got to admit I have no idea why there are tests failing on ROOT-ubuntu16/nortcxxmod.; Acccording to the error message this seems to be related to the function TGraph::AllocateArrays which I did not touch at all, so this might be an unrelated issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4698#issuecomment-566533676:115,error,error,115,https://root.cern,https://github.com/root-project/root/pull/4698#issuecomment-566533676,1,['error'],['error']
Availability,"Actually I think it's different to that issue. In the other issue he wanted pyROOT to throw one of the exceptions, but it at least is telling the user what the exception types were from each of the c++ methods it tried. In my case, I'm unhappy that pyROOT seems to be hiding the exceptions that c++ threw behind a TypeError, rather than saying the correct exception type (which was a runtime error, and ideally to print the message associated to that).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16405#issuecomment-2345636538:392,error,error,392,https://root.cern,https://github.com/root-project/root/issues/16405#issuecomment-2345636538,1,['error'],['error']
Availability,Actually root should be the directory where the starlight source are located. So it could be something like; `cmake /home/physics/starlight` if you have downloaded the sources in your home directory.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11626#issuecomment-1288506877:153,down,downloaded,153,https://root.cern,https://github.com/root-project/root/issues/11626#issuecomment-1288506877,1,['down'],['downloaded']
Availability,"Actually, I tested only the token in the environment variable. In fact, trying out the token-in-file way, I get this error (*), any idea @oshadura ?. (*); [root@0cfc7b46c606 ~]# echo ""$MY_TOKEN"" > /tmp/bt_u`id -u`; [root@0cfc7b46c606 ~]# root -l https://212.189.205.141:31094//W.root; *** Error in `/usr/local/bin/root.exe': free(): corrupted unsorted chunks: 0x0000000002141130 ***; ======= Backtrace: =========; /lib64/libc.so.6(+0x81299)[0x7fb90c775299]; /lib64/libc.so.6(fclose+0x177)[0x7fb90c7621b7]; /usr/local/lib/libRDAVIX.so(_Z15findTokenInFileRKSsRSs+0xa4)[0x7fb9001205b4]; /usr/local/lib/libRDAVIX.so(_Z13DiscoverTokenv+0x2f2)[0x7fb900123d82]; /usr/local/lib/libRDAVIX.so(_ZN18TDavixFileInternal11parseConfigEv+0x14a)[0x7fb90012426a]; /usr/local/lib/libRDAVIX.so(_ZN18TDavixFileInternal4initEv+0xa9)[0x7fb9001256a9]; /usr/local/lib/libRDAVIX.so(_ZN12TDavixSystemC1Ev+0xe2)[0x7fb900128b62]; [0x7fb90dfab07e]; /usr/local/lib/libCling.so(+0x54406a)[0x7fb9088f006a]; /usr/local/lib/libCling.so(+0x544f68)[0x7fb9088f0f68]; /usr/local/lib/libCling.so(+0x54505b)[0x7fb9088f105b]; /usr/local/lib/libCore.so(_ZN11TMethodCall7ExecuteEPvRl+0x50)[0x7fb90d7a4be0]; /usr/local/lib/libCore.so(_ZN7TSystem10FindHelperEPKcPv+0x4df)[0x7fb90d70a58f]; /usr/local/lib/libCore.so(_ZN11TUnixSystem11GetPathInfoEPKcR10FileStat_t+0x13)[0x7fb90d7dda33]; /usr/local/lib/libCore.so(_ZN7TSystem11GetPathInfoEPKcPlPxS2_S2_+0x8c)[0x7fb90d70083c]; /usr/local/lib/libCore.so(_ZN12TApplication10GetOptionsEPiPPc+0x115a)[0x7fb90d6a127a]; /usr/local/lib/libCore.so(_ZN12TApplicationC1EPKcPiPPcPvi+0x299)[0x7fb90d6a19a9]; /usr/local/lib/libRint.so(_ZN5TRintC1EPKcPiPPcPvib+0x21)[0x7fb90dc24951]; /usr/local/bin/root.exe[0x4008ac]; /lib64/libc.so.6(__libc_start_main+0xf5)[0x7fb90c716555]; /usr/local/bin/root.exe[0x400918]; ======= Memory map: ========; 00400000-00401000 r-xp 00000000 fd:01 347746 /usr/local/bin/root.exe; 00600000-00601000 r--p 00000000 fd:01 347746 /usr/local/bin/root.exe; 00601000-00602000 rw-p 00001000 f",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6802#issuecomment-776756405:117,error,error,117,https://root.cern,https://github.com/root-project/root/issues/6802#issuecomment-776756405,3,"['Error', 'echo', 'error']","['Error', 'echo', 'error']"
Availability,"Actually, it may be ok to _build_ uring support for ROOT, which depends only on the availability of the liburing user space library. When run in a container, it is well possible that the kernel does provide uring after all. So really, I think we need better runtime diagnostics.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12701#issuecomment-1520049807:84,avail,availability,84,https://root.cern,https://github.com/root-project/root/issues/12701#issuecomment-1520049807,1,['avail'],['availability']
Availability,"Add a new option in PyKeras to select the number of running threads when running keras with tensorflow. If nothing is specified, tensor flow normally runs by default on all available cores",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2566:173,avail,available,173,https://root.cern,https://github.com/root-project/root/pull/2566,1,['avail'],['available']
Availability,"Add a number of functions that could replace the way user interacts with the C++ elements of the distributed, fully pythonic RDF analysis, so that this is more natural and clear as well as less error prone compared to the previous method. ; The new functions are: ; - DeclareHeaders; - DeclareSharedLibs ; - DeclareFiles ; - DeclareCppCode. The functions work with both Spark and Dask backends. . The tests are introduced in roottest PR: https://github.com/root-project/roottest/pull/1177",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16309:194,error,error,194,https://root.cern,https://github.com/root-project/root/pull/16309,1,['error'],['error']
Availability,Add detailed error message if RNTupleWriter::Write() fails,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14677:13,error,error,13,https://root.cern,https://github.com/root-project/root/pull/14677,1,['error'],['error']
Availability,Add error message for failing TGrid::Connect issues,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16426:4,error,error,4,https://root.cern,https://github.com/root-project/root/pull/16426,1,['error'],['error']
Availability,"Add error message for overflow in converting double to ULong64_t. ## Changes or fixes:; This routine returns now an unsigned 64 bit integer; For large values, larger than 1.84e+19, we print an error message; advising to use the Trandom::PoissonD for such large values,; and return the max value UINT64_MAX. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #6927",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14668:4,error,error,4,https://root.cern,https://github.com/root-project/root/pull/14668,2,['error'],['error']
Availability,Add link for the instructions for standalone builds of Minuit2 using cmake. . Remove deadline to download old tar file version.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9897:97,down,download,97,https://root.cern,https://github.com/root-project/root/pull/9897,1,['down'],['download']
Availability,"Add more error-checking to the `NTupleDescriptor` build process (sibling PR of #5934); Intent after #5985 lands is to make `EnsureValidDescriptor` private, remove `GetDescriptor` and `MoveDescriptor` ; and expose a new method. `RNTupleDescriptorBuilder::MakeDescriptor() -> RResult<RNTupleDescriptor>` . that we can call `Inspect` and `Unwrap` on. . The actual `NTupleDescriptor` validity check is a bit sparse right now (I don't really know many `Column` or `Cluster` invariants).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5989:9,error,error-checking,9,https://root.cern,https://github.com/root-project/root/pull/5989,1,['error'],['error-checking']
Availability,"Add null checks to some important high-level RNTuple APIs. In general, they are not the most complicated errors but it would be nice to be completely segfault free. e.g.; ```cpp; auto model = RNTupleModel::Create();; model->AddField(nullptr);; ```. Before: ; ```; *** Break *** segmentation violation; ```; After: ; ```; C++ exception with description ""null field; At:; void ROOT::Experimental::RNTupleModel::AddField(std::unique_ptr<ROOT::Experimental::Detail::RFieldBase>) [/home/max/projects/rootdev/root/tree/ntuple/v7/src/RNTupleModel.cxx:56]; "" thrown in the test body.; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7751:105,error,errors,105,https://root.cern,https://github.com/root-project/root/pull/7751,1,['error'],['errors']
Availability,Add redundant 'virtual' destructor declarations,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14093:4,redundant,redundant,4,https://root.cern,https://github.com/root-project/root/pull/14093,1,['redundant'],['redundant']
Availability,"Add the concept of column representations to fields. Every fields can have a set of possible column representations for writing and additional column representations for reading. When reading, the column representation is fixed by the on-disk data. On writing, there is a default column representation but the user can pick a different one. This provides the framework to store data in different encodings (e.g., split, unsplit) and to load data from ""compatible columns"", e.g. `kInt32` column into `std::int64` type. As an example, the PR adds support for split and unsplit storage of `double`s. Follow-up PRs will complete the available encodings and select split encode as the default for writing.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12133:629,avail,available,629,https://root.cern,https://github.com/root-project/root/pull/12133,1,['avail'],['available']
Availability,Add the fact TMathText rendering is not available for PDF,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5372:40,avail,available,40,https://root.cern,https://github.com/root-project/root/pull/5372,1,['avail'],['available']
Availability,Add the physical column ID to the error message shown when a different compression setting than expected is encountered. This should help in locating potential bugs/mistakes.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15654:34,error,error,34,https://root.cern,https://github.com/root-project/root/pull/15654,1,['error'],['error']
Availability,"Add tree inference backend using jitted evaluation of the forest. Preliminary benchmarks look promising and show a clear improvement due to the jitting (100 trees, depth 3, 100k events):. ```; XGB: 2.30692 microsec/event; BranchlessForest: 0.962279 microsec/event; BranchlessJittedForest: 0.67292 microsec/event; ```. WIP: Still needs some error-handling and doxygen markup.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4476:340,error,error-handling,340,https://root.cern,https://github.com/root-project/root/pull/4476,1,['error'],['error-handling']
Availability,Add up and down arrow keys handling (resolves #7180),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7220:11,down,down,11,https://root.cern,https://github.com/root-project/root/pull/7220,1,['down'],['down']
Availability,"Add yet another fence in TClass::GetClass to avoid lookups and memory consumption. This PR aims to fix #9029. Give the sophisticated implementation of TClass::GetClass, perhaps it would be good to collect some feedback, especially by @pcanal . # This Pull request:; This PR avoids lookups and parsing in some cases.; One of the principles of the TClass::GetClass method implementation is to avoid as much as possible. . ## Changes or fixes:; This commit adds yet another fence in TClass::GetClass, checking if the name in input is the name of a known fundamental type or typedef to it.; In order to avoid code duplication, a routine previously available within the implementation of TClassEdit has been made available with a public API. ## Checklist:. - [v ] tested changes locally; - [v ] updated the docs (if necessary). This PR fixes #9029",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13341:644,avail,available,644,https://root.cern,https://github.com/root-project/root/pull/13341,2,['avail'],['available']
Availability,"Added 'nproc' for the processing units available, needed during the build process.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5079:39,avail,available,39,https://root.cern,https://github.com/root-project/root/pull/5079,1,['avail'],['available']
Availability,Added class TGraphMultiErrors for graph with multidimensional y-Errors,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3452:64,Error,Errors,64,https://root.cern,https://github.com/root-project/root/pull/3452,1,['Error'],['Errors']
Availability,Added missing newline in error message,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/832:25,error,error,25,https://root.cern,https://github.com/root-project/root/pull/832,1,['error'],['error']
Availability,"Added new features to GeoCad library. - New features are used to export partial geometries to STEP files.; - Added 3 new member functions TGeoToStep::CreatePartialGeometry taking; different arguments.; - The first takes a file_name and a max_level, and defaults to the; previous (default arguments) behavior. The max_level sets the node depth; that will be exported in the STEP file.; - The second version, in addition to the previous version, has a part_name argument.; This is the name of a volume that is associated with a level 1 node.; Only this node and its children down to max_level will be exported.; - Similarly, a third version takes a map of part_name/max_level key/value pairs.; This allows the multiple level 1 nodes to be selected and exported to; different max_levels. 	modified: geom/geocad/inc/TGeoToStep.h; 	modified: geom/geocad/inc/TOCCToStep.h; 	modified: geom/geocad/src/TGeoToStep.cxx; 	modified: geom/geocad/src/TOCCToStep.cxx",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1442:573,down,down,573,https://root.cern,https://github.com/root-project/root/pull/1442,1,['down'],['down']
Availability,"Added tests for the C++ mechanisms, and attempt at fixing the ubuntu18 failure (see last commit) with a much more simplified approach w.r.t. https://github.com/root-project/root/pull/12981, which should not be needed anymore (let's see what the CI thinks).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12363#issuecomment-1585596942:71,failure,failure,71,https://root.cern,https://github.com/root-project/root/pull/12363#issuecomment-1585596942,2,['failure'],['failure']
Availability,"Adding @vepadulano in the loop, since it looks like the faulty commit could well be [this one](https://github.com/root-project/root/commit/37b06ebc33fe192c20bee5d48a496d51ee591aa0#diff-dd81606cd750b320d9ed46d043eb5e5dceaf7e7dbcf2d4934cae69bbfc27138f). But I'm still trying to find what could be the real issue among all the recent changes...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15136#issuecomment-2037290338:56,fault,faulty,56,https://root.cern,https://github.com/root-project/root/issues/15136#issuecomment-2037290338,1,['fault'],['faulty']
Availability,"Adding a point that @pcanal mentioned during yesterday's meeting: As far as I understood, this only happens after some other libraries have been loaded? I tested `.L libceleritas_root.so` as the first action in a fresh `root` REPL, what else did you execute before that to make the error appear?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10162#issuecomment-1088326588:282,error,error,282,https://root.cern,https://github.com/root-project/root/issues/10162#issuecomment-1088326588,1,['error'],['error']
Availability,"Adding an `static_assert` helps a but on the complier error report but it does not stop from trying different instantiations.; ```; In module 'Imt':; /Users/mato/Development/root/builddir/include/ROOT/TExecutor.hxx:240:4: error: static assertion failed due to requirement 'std::is_invocable_v<(lambda at /Users/mato/Development/root/reproducer2.C:5:18), std::vector<int, std::allocator<int> > >': redfunc does not have the correct signature; static_assert(std::is_invocable_v<R, std::vector<InvokeResult_t<F,INTEGER>>>, ""redfunc does not have the correct signature"");; ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~; /Users/mato/Development/root/reproducer2.C:12:15: note: in instantiation of function template specialization 'ROOT::Internal::TExecutor::MapReduce<(lambda at /Users/mato/Development/root/reproducer2.C:8:21), unsigned long, (lambda at /Users/mato/Development/root/reproducer2.C:5:18), void>' requested here; auto n = ex.MapReduce(printRange, ROOT::TSeq<std::size_t>(0, nChunk), reducer, nChunk);; ^; In module 'Imt':; /Users/mato/Development/root/builddir/include/ROOT/TExecutor.hxx:244:11: error: no matching member function for call to 'Reduce'; return Reduce(Map(func, args), redfunc);; ^~~~~~; /Users/mato/Development/root/builddir/include/ROOT/TExecutorCRTP.hxx:151:36: note: candidate template ignored: substitution failure [with T = int, R = (lambda at /Users/mato/Development/root/reproducer2.C:5:18)]: no matching function for call to object of type '(lambda at /Users/mato/Development/root/reproducer2.C:5:18)'; template<class T, class R> auto Reduce(const std::vector<T> &objs, R redfunc) -> decltype(redfunc(objs));; ^ ~~~~~~~; /Users/mato/Development/root/builddir/include/ROOT/TExecutorCRTP.hxx:150:25: note: candidate function not viable: requires single argument 'mergeObjs', but 2 arguments were provided; template<class T> T* Reduce(const std::vector<T*> &mergeObjs);; ...; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7871#issuecomment-1943749347:54,error,error,54,https://root.cern,https://github.com/root-project/root/issues/7871#issuecomment-1943749347,4,"['error', 'failure']","['error', 'failure']"
Availability,Additional runtime modules failures are because of the (legitimate) warning that we can't find modules sometimes. Will be fixed in a future PR where we add more paths to clang's PrebuiltModulePaths.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1394#issuecomment-348922174:27,failure,failures,27,https://root.cern,https://github.com/root-project/root/pull/1394#issuecomment-348922174,1,['failure'],['failures']
Availability,Address [cling] shutdown issues/tear-down-ordering challenges,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4399:37,down,down-ordering,37,https://root.cern,https://github.com/root-project/root/pull/4399,2,['down'],['down-ordering']
Availability,"Address a number of AddressSanitizer failures with Python tests, due to the way we need to preload the ASan runtime and our configuration. If I count correctly (there were a number of failures introduced last night, so I don't have a proper baseline), this fixes 7 tests:; * `pyunittests-pyroot-import-load-libs`; * `tutorial-roofit-rf104_classfactory-py`; * `roottest-python-JupyROOT-simpleCppMagic_notebook`; * `roottest-python-JupyROOT-thread_local_notebook`; * `roottest-python-JupyROOT-ROOT_kernel_notebook`; * `roottest-python-basic-basic`; * `roottest-python-regression-regression`. Moreover, `tutorial-rcanvas-df104-py` will show a proper AdressSanitizer failure.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11621:37,failure,failures,37,https://root.cern,https://github.com/root-project/root/pull/11621,3,['failure'],"['failure', 'failures']"
Availability,Address gcc9 warning about redundant move.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3944:27,redundant,redundant,27,https://root.cern,https://github.com/root-project/root/pull/3944,2,['redundant'],['redundant']
Availability,"Address: https://github.com/root-project/root/pull/12650#issuecomment-1517450219. From @hahnjo:. Hi @pcanal, our AddressSanitizer build reports a heap-buffer-overflow: https://lcgapp-services.cern.ch/root-jenkins/job/root-asan/LABEL=ROOT-centos8,SPEC=asan,V=master/lastCompletedBuild/testReport/projectroot.roottest.root.tree/stl/roottest_root_tree_stl_make/. I bisected this to commit https://github.com/root-project/root/commit/2fa93de2a51e248a56418d8c6488b043746d0925; the error message says ""0x60700022d458 is located 8 bytes to the left of 80-byte region"". However, the stack trace points to the loop immediately after the added condition to perform the binary search. Could you take a look, please? What does TMath::BinarySearch return in case the element is not found?. Answer: yep it was missing the error handling (return value of -1)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12695:476,error,error,476,https://root.cern,https://github.com/root-project/root/pull/12695,2,['error'],['error']
Availability,Addressed failures through #6789,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6563#issuecomment-727805714:10,failure,failures,10,https://root.cern,https://github.com/root-project/root/issues/6563#issuecomment-727805714,1,['failure'],['failures']
Availability,"Addressed the comment of @amadio, test failures in PyROOT experimental are unrelated. This is ready to be merged.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3854#issuecomment-495200126:39,failure,failures,39,https://root.cern,https://github.com/root-project/root/pull/3854#issuecomment-495200126,1,['failure'],['failures']
Availability,"Addresses one of the issues on https://github.com/root-project/root/issues/8365. Namely, TThread::Printf() causing a data race with TApplication::Run(). ```; TApplication::IsRunning() const (TApplication.h:148); TThread::XARequest(char const*, int, void**, int*) (TThread.cxx:1029); This conflicts with a previous write of size 1 by thread #1; TApplication::Run(bool) (TApplication.cxx:1622); ```. After this fix, the error disappears from helgrind.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8379:418,error,error,418,https://root.cern,https://github.com/root-project/root/pull/8379,1,['error'],['error']
Availability,Adds TBB-based counter types for global read-write locks and use one by default when TBB is available. This gives a 7% speedup in a medium sized test filling histograms from CMS NanoAOD with RDF and 256 threads. This implements the last part of the improvements originally discussed in https://github.com/root-project/root/pull/6919,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7260:92,avail,available,92,https://root.cern,https://github.com/root-project/root/pull/7260,1,['avail'],['available']
Availability,"Adds a `RRawFile` class in the `ROOT::Experimental::Detail` namespace for accessing files byte-wise or line-wise. This is supposed to be used in RNTuple as well as in the CSV and SQlite `RDataSource` classes. Files are addressed by URLs (e.g. http://server/file or file:///local/path) and derived classes of `RRawFile` implement the protocol-dependent low-level read routine. The class allows for; - unified access to files, either local or remote; - Automatic handling of UNIX and Windows line breaks ; - Control of the I/O buffer mechanism. Current todos:; - [ ] Use upcoming `RStatus` / `RException` based error handling; - [ ] Use RRawFile in RCsvDS and RSqliteDS and compare the performance to the current implementation ; - [x] Implementation of Davix based I/O, using ROOT's plugin infrastructure in order to avoid a dependency of RIO to RDAVIX; - [x] Revised I/O buffering mechanism to avoid buffer thrashing on `Readln`",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3030:609,error,error,609,https://root.cern,https://github.com/root-project/root/pull/3030,1,['error'],['error']
Availability,"Adds a new constructor to the RNTuple RDF data source that takes an ntuple name and a list of files. The data source then treats these files as a chain. Slightly simplifies the prototype construction in the RNTuple data source: instead of constructing full column reader prototypes, only the corresponding field prototypes are constructed. Multi-threaded work scheduling is as follows:. - As long as there are more files than slots: every slots get a file; - For the tail: slots get distributed over the remaining files and align on cluster boundaries. Some optimizations for follow-up PRs:. - Load the next ranges in the background. In particular that would open the next batch of files in the backgound; - Clone page sources without reopening the file; - The next set of ranges currently gives up to number of slots ranges. However, it would make more sense to use resource constraints such as available memory or number of open file descriptors as a limit and let slots work on more ranges at a time.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13329:896,avail,available,896,https://root.cern,https://github.com/root-project/root/pull/13329,1,['avail'],['available']
Availability,"Adds a new static method, `RFieldBase::Check()`, that produces a support status report of a type wrt. to RNTuple I/O. The method uses `RFieldBase::Create()` internally. Instead of throwing an exception when a (sub) type fails to be constructed, in the case of `Check()` an `RInvalidField` is inserted in the field tree instead. The invalid fields are then collected to produce a report of failures. @Dr15Jones FYI.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14906:389,failure,failures,389,https://root.cern,https://github.com/root-project/root/pull/14906,1,['failure'],['failures']
Availability,"Adds a nullable field as a base class for unique pointer support. A follow-up PR will add `std::optional` support using the same base class. The nullable field is usually stored like a collection that can have zero or one element per entry. Optionally, nullable fields can be stored in ""dense mode"", with a bitmap mask and default-constructed values for the null entries.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12664:314,mask,mask,314,https://root.cern,https://github.com/root-project/root/pull/12664,1,['mask'],['mask']
Availability,Adjust commit message which I think caused a false positive on windows because of this string: `test/ntuple_storage_daos.cxx:5:33: error:`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8172#issuecomment-840572493:131,error,error,131,https://root.cern,https://github.com/root-project/root/pull/8172#issuecomment-840572493,1,['error'],['error']
Availability,"Adjust test for failures on aarch64, ppc64le and s390x",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14164:16,failure,failures,16,https://root.cern,https://github.com/root-project/root/pull/14164,1,['failure'],['failures']
Availability,"Adjust the spec.json file used for the test accordingly. Note that RDataFrame does not error out if a number beyond the last entry available is specified, it just interrupts the event loop early. This issue is; tracked at #13800.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13801:87,error,error,87,https://root.cern,https://github.com/root-project/root/pull/13801,2,"['avail', 'error']","['available', 'error']"
Availability,Adresses most issues from #7426. * Check nullptr in proposed places; * Mark `// NOLINT` when return static members ; * Use references in several loops like `for (auto &entry : arr)`; * Fix potential logic error in `TStreamerElement::GetSequenceType`; * Use std::vector<std::string> for tokens in `TDataMember::ExtractOptionsFromComment`; * Use static std::string in `TCling::TypeName` instead of self-maintained char buffer; * Fix potential leak when calling `TClass::AdoptMemberStreamer`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7444:205,error,error,205,https://root.cern,https://github.com/root-project/root/pull/7444,1,['error'],['error']
Availability,"After #10005 is merged, the test `tutorial-fit-minuit2GausFit` will fail due to a `stack-use-after-scope`:; ```; 505: READ of size 8 at 0x7fa73033ca68 thread T0; 505: #0 0x7fa71035ba11 in ROOT::Minuit2::MnFcn::ErrorDef() const /home/jhahnfel/ROOT/src/math/minuit2/src/MnFcn.cxx:36:11; 505: #1 0x7fa71031298f in ROOT::Minuit2::InitialGradientCalculator::operator()(ROOT::Minuit2::MinimumParameters const&) const /home/jhahnfel/ROOT/src/math/minuit2/src/InitialGradientCalculator.cxx:63:30; 505: #2 0x7fa7103e185a in ROOT::Minuit2::Numerical2PGradientCalculator::operator()(ROOT::Minuit2::MinimumParameters const&) const /home/jhahnfel/ROOT/src/math/minuit2/src/Numerical2PGradientCalculator.cxx:39:27; 505: #3 0x7fa710305d22 in ROOT::Minuit2::FumiliGradientCalculator::operator()(ROOT::Minuit2::MinimumParameters const&) const::$_0::operator()(std::ostream&) const /home/jhahnfel/ROOT/src/math/minuit2/src/FumiliGradientCalculator.cxx:98:29; 505: #4 0x7fa7103059ff in decltype((fp0(fp)) , ((void)())) ROOT::Minuit2::MnPrint::HandleLambda<ROOT::Minuit2::FumiliGradientCalculator::operator()(ROOT::Minuit2::MinimumParameters const&) const::$_0>(std::ostream&, ROOT::Minuit2::FumiliGradientCalculator::operator()(ROOT::Minuit2::MinimumParameters const&) const::$_0 const&, int) /home/jhahnfel/ROOT/src/math/minuit2/inc/Minuit2/MnPrint.h:171:7; 505: #5 0x7fa7103059ce in void ROOT::Minuit2::MnPrint::StreamArgs<ROOT::Minuit2::FumiliGradientCalculator::operator()(ROOT::Minuit2::MinimumParameters const&) const::$_0>(std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >&, ROOT::Minuit2::FumiliGradientCalculator::operator()(ROOT::Minuit2::MinimumParameters const&) const::$_0 const&) /home/jhahnfel/ROOT/src/math/minuit2/inc/Minuit2/MnPrint.h:187:7; 505: #6 0x7fa71030576b in void ROOT::Minuit2::MnPrint::Log<ROOT::Minuit2::FumiliGradientCalculator::operator()(ROOT::Minuit2::MinimumParameters const&) const::$_0>(ROOT::Minuit2::MnPrint::Verbosity, ROOT::Minuit2::FumiliGra",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10014:210,Error,ErrorDef,210,https://root.cern,https://github.com/root-project/root/issues/10014,1,['Error'],['ErrorDef']
Availability,After #9673 compilation in `dev` mode is broken - warnings are converted to errors. Plus update Oracle code to use namespace clearly - should help for Doxygen documentation,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9674:76,error,errors,76,https://root.cern,https://github.com/root-project/root/pull/9674,1,['error'],['errors']
Availability,"After [those changes](https://github.com/root-project/root/commit/060e8d7afd8c47f61eee9f72004388b1a60d77f2), related to C++ modules on Windows, the following tests:. roottest-root-dataframe-writeFcc (Failed); roottest-root-dataframe-test_readFcc (Failed); roottest-root-dataframe-regression_snapshot (Failed); roottest-root-dataframe-test_glob (Failed); roottest-root-dataframe-test_reduce (Failed); roottest-root-dataframe-ctors (Failed). Are failing with the following errors:. ```; 1306: Processing C:/Users/sftnight/git/roottest/root/dataframe/test_ctors.C+...; 1306: Info in <TWinNTSystem::ACLiC>: creating shared library C:/Users/sftnight/build/release/roottest/root/dataframe/test_ctors_C.dll; 1306: In file included from input_line_9:9:; 1306: In file included from C:/Users/sftnight/git/roottest/root/dataframe/test_ctors.C:4:; 1306: In file included from C:/Users/sftnight/build/release/include\ROOT/RDataFrame.hxx:20:; 1306: In file included from C:/Users/sftnight/build/release/include\ROOT/RDF/RInterface.hxx:15:; 1306: In file included from C:/Users/sftnight/build/release/include\ROOT/RDF/ActionHelpers.hxx:25:; 1306: C:/Users/sftnight/build/release/include\ROOT/RVec.hxx:1434:36: error: use of undeclared identifier 'M_PI'; 1306: T DeltaPhi(T v1, T v2, const T c = M_PI); 1306: ^; 1306: C:/Users/sftnight/build/release/include\ROOT/RVec.hxx:1455:68: error: use of undeclared identifier 'M_PI'; 1306: RVec<T> DeltaPhi(const RVec<T>& v1, const RVec<T>& v2, const T c = M_PI); 1306: ^; 1306: C:/Users/sftnight/build/release/include\ROOT/RVec.hxx:1473:55: error: use of undeclared identifier 'M_PI'; 1306: RVec<T> DeltaPhi(const RVec<T>& v1, T v2, const T c = M_PI); 1306: ^; 1306: C:/Users/sftnight/build/release/include\ROOT/RVec.hxx:1491:55: error: use of undeclared identifier 'M_PI'; 1306: RVec<T> DeltaPhi(T v1, const RVec<T>& v2, const T c = M_PI); 1306: ^; 1306: C:/Users/sftnight/build/release/include\ROOT/RVec.hxx:1510:113: error: use of undeclared identifier 'M_PI'; 1306: RVec",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6727:471,error,errors,471,https://root.cern,https://github.com/root-project/root/pull/6727,1,['error'],['errors']
Availability,"After a few private discussions, I could not find a better compromise than `std::cerr` to report the event loop was interrupted: `Error` (and probably `Warning`) are a no-go if we want to keep the original exception information, because because certain experiment frameworks modify `Error` itself to throw. `Info` and `Print` send the wrong message. This way, independently of users catching the exception caught or not, they should have a full understanding of what happened.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5214#issuecomment-604439784:130,Error,Error,130,https://root.cern,https://github.com/root-project/root/pull/5214#issuecomment-604439784,2,['Error'],['Error']
Availability,"After applying all updates on CentOS 8 Stream, `roottest-root-treeformula-stl-make` started crashing reproducibly both with GCC 8.5.0 and Clang 13 (assuming I didn't do something stupid). ### Output; ```; Processing runmapvector.C...; Warning in <TClass::Init>: no dictionary for class MyEvent is available; ***********************************; * Row * Instance * data.firs *; ***********************************; * 0 * 0 * 3 *; ***********************************; ***********************************; * Row * Instance * data.seco *; ***********************************; * 0 * 0 * 5 *; * 0 * 1 * 7 *; ***********************************; free(): invalid next size (fast); ```. ### Backtrace; ```; #0 0x00007ffff6674a4f in raise () from /lib64/libc.so.6; #1 0x00007ffff6647db5 in abort () from /lib64/libc.so.6; #2 0x00007ffff66b7057 in __libc_message () from /lib64/libc.so.6; #3 0x00007ffff66be1bc in malloc_printerr () from /lib64/libc.so.6; #4 0x00007ffff66bfb58 in _int_free () from /lib64/libc.so.6; #5 0x00007ffff77bb30f in TClass::Destructor (this=this@entry=0x20ee770, obj=<optimized out>, dtorOnly=dtorOnly@entry=false) at /home/jhahnfel/ROOT/src/core/meta/src/TClass.cxx:5460 ; #6 0x00007fffe03c2cf3 in TBranchElement::ReleaseObject (this=0x26cebe0) at /home/jhahnfel/ROOT/src/tree/tree/src/TBranchElement.cxx:4671 ; #7 0x00007fffe03c539b in TBranchElement::ResetAddress (this=this@entry=0x26cebe0) at /home/jhahnfel/ROOT/src/tree/tree/src/TBranchElement.cxx:4734 ; #8 0x00007fffe03c5411 in TBranchElement::~TBranchElement (this=0x26cebe0, __in_chrg=<optimized out>) at /home/jhahnfel/ROOT/src/tree/tree/src/TBranchElement.cxx:982 ; #9 0x00007fffe03c5949 in TBranchElement::~TBranchElement (this=0x26cebe0, __in_chrg=<optimized out>) at /home/jhahnfel/ROOT/src/tree/tree/src/TBranchElement.cxx:975 ; #10 0x00007ffff778b8f8 in TObjArray::Delete (this=this@entry=0x1e683a8) at /home/jhahnfel/ROOT/src/core/cont/src/TObjArray.cxx:376 ; #11 0x00007fffe04281c0 in TTree::~TTree (this=0x1e68250, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9543:297,avail,available,297,https://root.cern,https://github.com/root-project/root/issues/9543,1,['avail'],['available']
Availability,"After calling the RDataFrame.Redefine method, saving the Snapshot containing the redefined column will raise an error. . Reproducer:; ```; import ROOT; import numpy as np; rdf = ROOT.RDF.MakeNumpyDataFrame({""bar"": np.arange(0, 10, 1)}); rdf = rdf.Redefine(""bar"", ""bar + 1""); rdf.Snapshot(""output"", ""output.root""); ```. This gives:; ```; TypeError: Template method resolution failed:; none of the 3 overloaded methods succeeded. Full details:; ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Snapshot(basic_string_view<char,char_traits<char> > treename, basic_string_view<char,char_traits<char> > filename, initializer_list<string> columnList, const ROOT::RDF::RSnapshotOptions& options = ROOT::RDF::RSnapshotOptions()) =>; TypeError: takes at least 3 arguments (2 given); ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Snapshot(basic_string_view<char,char_traits<char> > treename, basic_string_view<char,char_traits<char> > filename, const vector<string>& columnList, const ROOT::RDF::RSnapshotOptions& options = ROOT::RDF::RSnapshotOptions()) =>; TypeError: takes at least 3 arguments (2 given); ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Snapshot(basic_string_view<char,char_traits<char> > treename, basic_string_view<char,char_traits<char> > filename, basic_string_view<char,char_traits<char> > columnNameRegexp = """", const ROOT::RDF::RSnapshotOptions& options = ROOT::RDF::RSnapshotOptions()) =>; logic_error: Error: column ""bar"" was passed to Snapshot twice. This is not supported: only one of the columns would be readable with RDataFrame.; ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Snapshot(bas",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10233:112,error,error,112,https://root.cern,https://github.com/root-project/root/issues/10233,1,['error'],['error']
Availability,"After considering with @lmoneta, I disabled the hanging stress test. It was meant to test the pub-sub connection between master and workers, but this is in fact already done in the `Messenger` constructor now. The ctor connection check is also more robust than the stress test, so it is unnecessary. I also removed remaining debug prints. Ready to merge, from my side.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9078#issuecomment-979458753:249,robust,robust,249,https://root.cern,https://github.com/root-project/root/pull/9078#issuecomment-979458753,1,['robust'],['robust']
Availability,"After discussing with @yamaguchi1024 and @oshadura, the rtcxxmod test failures might be due to a cling bug. I suggest to wait with this PR until that's resolved.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3222#issuecomment-453516511:70,failure,failures,70,https://root.cern,https://github.com/root-project/root/pull/3222#issuecomment-453516511,1,['failure'],['failures']
Availability,"After discussion, we decided to go back to the original simpler design for this PR, which effectively accounts for the following usecase: user wants to open a file, write some stuff to it or read objects and get information from them, in an ""encapsulated"" environment, finally closing the file. The ROOT objects attached to the file will be `None`ified at the end of the context, but they can be detached with the `SetDirectory` method. The other use case imagined, where a user wants to `cd` into some file to get objects from it and then let those objects survive while returning to the previous directory, is addressed by #10167 . Notably, that behaviour will keep the file alive, so that also the special objects like TTree and RNTuple can properly survive the `with` context",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9947#issuecomment-1072702588:677,alive,alive,677,https://root.cern,https://github.com/root-project/root/pull/9947#issuecomment-1072702588,2,['alive'],['alive']
Availability,"After ending Python 2 support, the build configuration can be simplified further:. * don't use the deprecated `PYTHONLIBS_FOUND` (https://cmake.org/cmake/help/latest/module/FindPythonLibs.html). * remove unused `FundNumPy.cmake` (the `FindPython` takes care of that). * remove some unnessecary aliases. * avoid redundant printouts and checks in CMake. * profit from targets like `Python3::Python` and `Python3::NumPy`",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15401:311,redundant,redundant,311,https://root.cern,https://github.com/root-project/root/pull/15401,1,['redundant'],['redundant']
Availability,"After even more permutations of gcc/Kokkos/CUDA, it seems to be related to the version of CUDA. If I use CUDA 11.2, all is ok. With CUDA 11.7, I see this error.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11495#issuecomment-1270008917:154,error,error,154,https://root.cern,https://github.com/root-project/root/issues/11495#issuecomment-1270008917,1,['error'],['error']
Availability,"After fixing the CMake file, I am getting this error:; ```; terminate called after throwing an instance of 'std::runtime_error'; what(): Model file PyTorchModelConvolution.pt not found!; Aborted (core dumped); make[2]: *** [tmva/pymva/test/CMakeFiles/SofieCompileModels_PyTorch.dir/build.make:77: SofieCompileModels_PyTorch] Error 134; make[1]: *** [CMakeFiles/Makefile2:55168: tmva/pymva/test/CMakeFiles/SofieCompileModels_PyTorch.dir/all] Error 2; make: *** [Makefile:183: all] Error 2; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9119#issuecomment-967308800:47,error,error,47,https://root.cern,https://github.com/root-project/root/pull/9119#issuecomment-967308800,4,"['Error', 'error']","['Error', 'error']"
Availability,"After fixing the last comment of @xvallspl and the clang errors (and if Jenkins does not complain), this PR can be merged if you agree. The last commit tests the gradient using directly a `Chi2FCN` object, with the following speedups against the scalar serial case (the test computes the gradient of a function with 4 parameters) in my machine:; * Scalar multithread case: ~2.3x; * Vectorial serial case: ~2.2x; * Vectorial multithread case: ~6.1x. The case of a general fit through `ROOT::Fit::Fitter` with gradient enabled is not yet implemented, but I think that can be done in the next PR. Of course, if you do have some more comments in the last commits, I'm all ears.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/793#issuecomment-317646597:57,error,errors,57,https://root.cern,https://github.com/root-project/root/pull/793#issuecomment-317646597,1,['error'],['errors']
Availability,"After having install XPM headers, I tried to build root to not repeat the same error but had this:; Making include/compiledata.h; g++ -O2 -DNDEBUG -pipe -m64 -std=c++11 -Wshadow -Wall -W -Woverloaded-virtual -fPIC -Iinclude -pthread -MMD -MP -o core/base/src/TObject.o -c /home/julien/projects/root/core/base/src/TObject.cxx; In file included from include/TObject.h:16:0,; from /home/julien/projects/root/core/base/src/TObject.cxx:38:; include/RConfigure.h:39:2: error: invalid preprocessing directive #@; #@has_found_attribute_always_inline@ R__HAS_ATTRIBUTE_ALWAYS_INLINE /**/; ^. I searched about this error and found https://root-forum.cern.ch/t/compile-error-related-to-directive-in-rconfigure-h/23546/3. I also tried to follow the INSTALL file but:; 1) there's not ""root"" directory but there's a ""rootx"" directory; however ""cmake ../rootx"" (from <main dir>/build) displays some config and seems ok; 2) ""cmake --build ."" does nothing (no console message, no build) idem for ""make -j"". In brief, I don't know how to build :-(. I'm on x86-64 with Debian testing:; gcc (Debian 7.2.0-12) 7.2.1 20171025; cmake version 3.9.3; ldd (Debian GLIBC 2.24-17) 2.24",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1239#issuecomment-341512534:79,error,error,79,https://root.cern,https://github.com/root-project/root/pull/1239#issuecomment-341512534,4,['error'],"['error', 'error-related-to-directive-in-rconfigure-h']"
Availability,"After https://sft.its.cern.ch/jira/browse/ROOT-10849 is fixed, we are now left with three test failures:. * projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleWriteRead; * projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleRead; * projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6331:95,failure,failures,95,https://root.cern,https://github.com/root-project/root/issues/6331,1,['failure'],['failures']
Availability,"After installing the appropriate debuginfo, I have a bit more information:. ```; Program received signal SIGSEGV, Segmentation fault.; CPyCppyy::pp_get (pyprop=0x7fffdc42ebb0, pyobj=0x7fffdc42ec40) at /usr/src/debug/root-6.22.02-1.fc32.x86_64/bindings/pyroot/cppyy/CPyCppyy/src/CPPDataMember.cxx:33; 33 if (it->first == pyprop->fOffset) {; (gdb) bt; #0 CPyCppyy::pp_get (pyprop=0x7fffdc42ebb0, pyobj=0x7fffdc42ec40) at /usr/src/debug/root-6.22.02-1.fc32.x86_64/bindings/pyroot/cppyy/CPyCppyy/src/CPPDataMember.cxx:33; #1 0x00007ffff7b6bd27 in _PyObject_GenericGetAttrWithDict () from /lib64/libpython3.8.so.1.0; #2 0x00007ffff7b5f713 in _PyEval_EvalFrameDefault () from /lib64/libpython3.8.so.1.0; #3 0x00007ffff7b5dd54 in _PyEval_EvalCodeWithName () from /lib64/libpython3.8.so.1.0; #4 0x00007ffff7bd8e79 in PyEval_EvalCodeEx () from /lib64/libpython3.8.so.1.0; #5 0x00007ffff7bd8e3b in PyEval_EvalCode () from /lib64/libpython3.8.so.1.0; #6 0x00007ffff7bfa068 in run_eval_code_obj () from /lib64/libpython3.8.so.1.0; #7 0x00007ffff7bf9783 in run_mod () from /lib64/libpython3.8.so.1.0; #8 0x00007ffff7ae59ce in PyRun_FileExFlags () from /lib64/libpython3.8.so.1.0; #9 0x00007ffff7ae5186 in PyRun_SimpleFileExFlags () from /lib64/libpython3.8.so.1.0; #10 0x00007ffff7adc351 in Py_RunMain.cold () from /lib64/libpython3.8.so.1.0; #11 0x00007ffff7bcc969 in Py_BytesMain () from /lib64/libpython3.8.so.1.0; #12 0x00007ffff7db2042 in __libc_start_main () from /lib64/libc.so.6; #13 0x000055555555507e in _start (); (gdb) list; 28 {; 29 // cache lookup for low level views; 30 if (pyprop->fFlags & kIsCachable) {; 31 CPyCppyy::CI_DatamemberCache_t& cache = pyobj->GetDatamemberCache();; 32 for (auto it = cache.begin(); it != cache.end(); ++it) {; 33 if (it->first == pyprop->fOffset) {; 34 if (it->second) {; 35 Py_INCREF(it->second);; 36 return it->second;; 37 } else. (gdb) p *pyprop; $3 = {ob_base = {ob_refcnt = 2, ob_type = 0x7fffe9da7240 <CPyCppyy::CPPDataMember_Type>}, fOffset = 24, fFlags = 12, ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6468#issuecomment-699684843:127,fault,fault,127,https://root.cern,https://github.com/root-project/root/issues/6468#issuecomment-699684843,1,['fault'],['fault']
Availability,"After investigation, it turns out that the issue is slightly different than described above: `rootcling` *does* correctly honor the `-W` flag and the dictionary compiles fine. What's causing the problem is that upon loading the dictionary, some code is parsed again. This time it's under the Cling compilation flags and that's causing the error, unless changed with `EXTRA_CLING_ARGS=""-Wno-narrowing""` on the command line. I propose we close this issue (and the JIRA equivalent).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14574#issuecomment-1941076291:339,error,error,339,https://root.cern,https://github.com/root-project/root/issues/14574#issuecomment-1941076291,1,['error'],['error']
Availability,"After iterating over the shape factors and filling a temporary vector of; `ParamHistFunc` pointers that all point to args in the proto workspace,; there was another iteration over this vector, importing the objects; again into the workspace that are already in it. The problem was that the original objects were then deleted, but since; they were already in the workspace the workspace contents were deleted,; which caused segfaults down the line. Needs to be backported to 6.26. Second commit unrelated to the bugfix, just some code modernizations. Closes #10687.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10740:433,down,down,433,https://root.cern,https://github.com/root-project/root/pull/10740,1,['down'],['down']
Availability,"After merging #12380, @Nowakus noticed issues when trying to fill entries for a model that includes the ATLAS' `DataVector<T>` type.; This is because a proxied collection, notably those deriving from `TGenCollectionProxy`, apparently rely on an active object also for using iterators. This PR should fix the error below.; ```; TGenCollectionProxy FATAL Size> Logic error - no proxy object set.; ```. ## Checklist:; - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12466:308,error,error,308,https://root.cern,https://github.com/root-project/root/pull/12466,2,['error'],['error']
Availability,"After merging https://github.com/root-project/root/pull/13139, the tutorial failures are gone. I've changed the assignees to include @pcanal and @linev since the only remaining failure is `roottest-root-core-execStatusBitsCheck` regarding `RBrowserDataCleanup`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13058#issuecomment-1621123553:76,failure,failures,76,https://root.cern,https://github.com/root-project/root/issues/13058#issuecomment-1621123553,2,['failure'],"['failure', 'failures']"
Availability,"After modifying the logic to catch the error and fail the transaction rather than unloading the decl directly, repeated attempts at template instantiation from pyroot now behaves similarly to with TInterpreter::Declare. The remaining problems with incomplete rollback are almost certainly related to the issue which @jalopezg-git referred to, and can be fixed by his forthcoming PR. Still TODO for this PR:; Capture and print the relevant errors and warnings during template instantiation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12449#issuecomment-1475425727:39,error,error,39,https://root.cern,https://github.com/root-project/root/pull/12449#issuecomment-1475425727,3,"['error', 'rollback']","['error', 'errors', 'rollback']"
Availability,"After more investigation, it is less clear to me how the valgrind report and the `AddDataset` function are related. Still, the logic of the function seems faulty any way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14433#issuecomment-1910477019:155,fault,faulty,155,https://root.cern,https://github.com/root-project/root/issues/14433#issuecomment-1910477019,2,['fault'],['faulty']
Availability,"After recent change I get compiler error with `-Ddev=On` option like:. ```; tmva/sofie/inc/TMVA/ROperator_Conv.hxx: In instantiation of ‘std::vector<std::vector<long unsigned int> > TMVA::Experimental::SOFIE::ROperator_Conv<T>::ShapeInference(std::vector<std::vector<long unsigned int> >) [with T = float]’:; /home/linev/git/webgui/tmva/sofie/inc/TMVA/ROperator_Conv.hxx:89:37: required from here; /home/linev/git/webgui/tmva/sofie/inc/TMVA/ROperator_Conv.hxx:99:19: error: comparison of unsigned expression in ‘< 0’ is always false [-Werror=type-limits]; 99 | if (fDim < 0 || fDim > 2) {; | ~~~~~^~~; ```. Looking in the code, and error message `std::runtime_error(""TMVA SOFIE Conv Op Shape inference only accept tensor with 3, 4 or 5 dimensions"")`, I suspect that these checks are wrong. One should have `if (fDim < 1 || fDim > 3)`. But while `fDim` is unsigned integer, one better ; checks original size `if (input[i].size() < 3 || input[i].size() > 5)`. Please fix",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9453:35,error,error,35,https://root.cern,https://github.com/root-project/root/issues/9453,3,['error'],['error']
Availability,"After recent fixes on the interaction between Python and AddressSanitizer (https://github.com/root-project/root/pull/11621), there is now a `global-buffer-overflow` reported for `tutorial-rcanvas-df104-py`:; ```; 1148: ==4075620==ERROR: AddressSanitizer: global-buffer-overflow on address 0x7f7b0e15ea65 at pc 0x7f7b14df7aaa bp 0x7fff988d9ab0 sp 0x7fff988d9258; 1148: READ of size 156 at 0x7f7b0e15ea65 thread T0; 1148: #0 0x7f7b14df7aa9 in __asan_memcpy (/usr/lib64/clang/14.0.6/lib/linux/libclang_rt.asan-x86_64.so+0x101aa9) (BuildId: e896d268897cea67bde300bc334ab7b2bfb702db); 1148: #1 0x7f7b0fa19ba1 in TString::Replace(int, int, char const*, int) /home/jhahnfel/ROOT/src/core/base/src/TString.cxx:1069:16; 1148: #2 0x7f7b0e2d9e7d in TString::Append(char const*) /home/jhahnfel/ROOT/src/core/base/inc/TString.h:565:10; 1148: #3 0x7f7b0e2d9e7d in TBufferJSON::JsonWriteBasic(bool) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:3963:11; 1148: #4 0x7f7b0e2d9e7d in TBufferJSON::WriteBool(bool) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:3724:4; 1148: #5 0x7f7b0e5a62bc in operator<<(TBuffer&, bool) /home/jhahnfel/ROOT/src/core/base/inc/TBuffer.h:361:60; 1148: #6 0x7f7b0e5a62bc in int TStreamerInfoActions::WriteBasicType<bool>(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*) /home/jhahnfel/ROOT/src/io/io/src/TStreamerInfoActions.cxx:253:11; 1148: #7 0x7f7b0e21d31d in TStreamerInfoActions::TConfiguredAction::operator()(TBuffer&, void*) const /home/jhahnfel/ROOT/src/io/io/inc/TStreamerInfoActions.h:123:17; 1148: #8 0x7f7b0e21d31d in TBufferText::ApplySequence(TStreamerInfoActions::TActionSequence const&, void*) /home/jhahnfel/ROOT/src/io/io/src/TBufferText.cxx:91:10; 1148: #9 0x7f7b0e21e1c1 in TBufferText::WriteClassBuffer(TClass const*, void*) /home/jhahnfel/ROOT/src/io/io/src/TBufferText.cxx:211:4; 1148: #10 0x7f7ae6a268ba in TFormula::Streamer(TBuffer&) /home/jhahnfel/ROOT/src/hist/hist/src/TFormula.cxx:3901:9; 1148: #11 0x7f7b0e2278c8 in TClass::Streamer(voi",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11629:230,ERROR,ERROR,230,https://root.cern,https://github.com/root-project/root/issues/11629,1,['ERROR'],['ERROR']
Availability,"After reconfiguring with -Ddataframe=OFF, further problems encountered in TMVA:. ~~~~; In file included from /home/frankland/software/sources/root/tmva/tmva/inc/TMVA/NeuralNet.h:46,; from /home/frankland/software/sources/root/tmva/tmva/src/NeuralNet.cxx:3:; /home/frankland/software/sources/root/core/base/inc/TApplication.h:87:12: error: ‘Longptr_t’ does not name a type; did you mean ‘Long64_t’?; 87 | virtual Longptr_t ProcessRemote(const char *line, Int_t *error = 0);; | ^~~~~~~~~; | Long64_t; /home/frankland/software/sources/root/core/base/inc/TApplication.h:114:12: error: ‘Longptr_t’ does not name a type; did you mean ‘Long64_t’?; 114 | virtual Longptr_t ProcessLine(const char *line, Bool_t sync = kFALSE, Int_t *error = 0);; | ^~~~~~~~~; | Long64_t; /home/frankland/software/sources/root/core/base/inc/TApplication.h:115:12: error: ‘Longptr_t’ does not name a type; did you mean ‘Long64_t’?; 115 | virtual Longptr_t ProcessFile(const char *file, Int_t *error = 0, Bool_t keep = kFALSE);; | ^~~~~~~~~; | Long64_t; /home/frankland/software/sources/root/core/base/inc/TApplication.h:158:11: error: ‘Longptr_t’ does not name a type; did you mean ‘Long64_t’?; 158 | static Longptr_t ExecuteFile(const char *file, Int_t *error = 0, Bool_t keep = kFALSE);; | ^~~~~~~~~; | Long64_t; In file included from /home/frankland/software/sources/root/tree/tree/inc/TTree.h:36,; from /home/frankland/software/sources/root/tmva/tmva/inc/TMVA/DataSet.h:45,; from /home/frankland/software/sources/root/tmva/tmva/inc/TMVA/MethodBase.h:54,; from /home/frankland/software/sources/root/tmva/tmva/inc/TMVA/NeuralNet.icc:15,; from /home/frankland/software/sources/root/tmva/tmva/inc/TMVA/NeuralNet.h:1307,; from /home/frankland/software/sources/root/tmva/tmva/src/NeuralNet.cxx:3:; /home/frankland/software/sources/root/core/meta/inc/TClass.h:272:12: error: ‘Longptr_t’ does not name a type; did you mean ‘Long64_t’?; 272 | mutable Longptr_t fOffsetStreamer; //!saved info to call Streamer; | ^~~~~~~~~; | Long64_t;",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8178#issuecomment-841799499:332,error,error,332,https://root.cern,https://github.com/root-project/root/issues/8178#issuecomment-841799499,6,['error'],['error']
Availability,"After removing globbing in core module, if to fetch a fresh master; some headers were not able to get a valid relative path causing next error:; -- /home/oksana/CERN_sources/root/builds/include/TArrayF.h; CMake Error at cmake/modules/RootNewMacros.cmake:292 (message):; Header path '/home/oksana/CERN_sources/root/builds/include/TArrayF.h'; TArrayF.h is not relative!; Call Stack (most recent call first):; core/base/CMakeLists.txt:232 (ROOT_GENERATE_DICTIONARY); Adding extra replacement pattern, matching - $CMAKE_BUILD_DIR/include, fixes issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2554:137,error,error,137,https://root.cern,https://github.com/root-project/root/pull/2554,2,"['Error', 'error']","['Error', 'error']"
Availability,After some trial and error I've realized that this task is too hard for me 😅,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8732#issuecomment-887551435:21,error,error,21,https://root.cern,https://github.com/root-project/root/pull/8732#issuecomment-887551435,1,['error'],['error']
Availability,"After the changes from https://github.com/root-project/root/pull/8562 and https://github.com/root-project/root/pull/8572, I am left only with this data race:. - TList::NewLink vs TList::FindObject; ![image](https://user-images.githubusercontent.com/10653970/123883394-f225bf00-d916-11eb-869f-ab5d021c6f68.png). - And then I see this error, that might be the reason of the freeze of my program.; ![image](https://user-images.githubusercontent.com/10653970/123883669-7b3cf600-d917-11eb-8ac9-67a1e782282b.png)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8365#issuecomment-871005764:333,error,error,333,https://root.cern,https://github.com/root-project/root/issues/8365#issuecomment-871005764,1,['error'],['error']
Availability,"After the commits of 14.10.2020, several roofit tutorials fail with this kind of error:; ```; Info in <TWinNTSystem::ACLiC>: creating shared library C:/build/night/LABEL/windows10/SPEC/default/V/master/build/runtutorials/MyPdfV3_cxx.dll; Assertion failed: !CurTokenLexer && ""Cannot #include a file inside a macro!"", file C:\build\night\LABEL\windows10\SPEC\default\V\master\root\interpreter\llvm\src\tools\clang\lib\Lex\PPLexerChange.cpp, line 73; ```; So let's disable them until the problem is understood and fixed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6647:81,error,error,81,https://root.cern,https://github.com/root-project/root/pull/6647,1,['error'],['error']
Availability,After the discussion at #8828 I have the impression that this shouldn't get merged. We might want to have an `Error()` call or similar instead. @hahnjo what's your opinion?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9089#issuecomment-950705276:110,Error,Error,110,https://root.cern,https://github.com/root-project/root/pull/9089#issuecomment-950705276,1,['Error'],['Error']
Availability,"After the latest LLVM upgrade, changes in cling's symbol resolution; logic cause some unresolved symbol failures in RDF jitting. Adding RJittedAction to the rootmap should help cling autoloading; and work around the problem.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7586:104,failure,failures,104,https://root.cern,https://github.com/root-project/root/pull/7586,2,['failure'],['failures']
Availability,"After the latest commit, I tested this on my Mac machine and I see the following categories of errors for the test; ```; Traceback (most recent call last):; File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 113, in test_XGBRegression_branchless; _test_XGBRegression(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""); File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 39, in _test_XGBRegression; ROOT.TMVA.Experimental.SaveXGBoost(xgb, ""myModel"", ""testXGBRegression{}.root"".format(label), num_inputs=10); File ""/Users/vpadulan/Programs/rootproject/rootbuild/xgboost-testing/lib/ROOT/_pythonization/_tmva/_tree_inference.py"", line 93, in SaveXGBoost; fill_arrays(tree, 0, len_inputs * i_tree, len_thresholds * i_tree); File ""/Users/vpadulan/Programs/rootproject/rootbuild/xgboost-testing/lib/ROOT/_pythonization/_tmva/_tree_inference.py"", line 72, in fill_arrays; thresholds[thresholds_base + index] = node[""leaf""]; ~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^; TypeError: float& std::vector<float>::operator[](vector<float>::size_type __n) =>; TypeError: must be real number, not NoneType; ```. ```; ======================================================================; FAIL: test_XGBBinary_branchless (__main__.RBDT.test_XGBBinary_branchless); Test BranchlessForest backend for model trained with binary XGBClassifier; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 77, in test_XGBBinary_branchless; _test_XGBBinary(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""); File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 29, in _test_XGBBinary; np.testing.assert_array_almost_equal(y_xgb, y_bdt); File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextli",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15183#issuecomment-2046134260:95,error,errors,95,https://root.cern,https://github.com/root-project/root/pull/15183#issuecomment-2046134260,1,['error'],['errors']
Availability,"After the recent updates to ROOT master, only these test failures remain:; ```txt; 384:test-stressgraphics-chrome; 1403:tutorial-roofit-rf617_simulation_based_inference_multidimensional-py; 1404:tutorial-roofit-rf618_mixture_models-py; 1634:roottest-python-cling-class; 1726:roottest-python-numba-numba; 1731:roottest-python-regression-regression; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16748#issuecomment-2459588584:57,failure,failures,57,https://root.cern,https://github.com/root-project/root/pull/16748#issuecomment-2459588584,1,['failure'],['failures']
Availability,"After the upgrade to LLVM 13, the test `roottest-root-meta-tclass-execInitOrder` will *crash* with AddressSanitizer instrumentation:; ```; 2187: Processing /home/jhahnfel/ROOT/src/roottest/root/meta/tclass/execInitOrder.cxx+...; 2187: Error in <TClass::LoadClassInfo>: no interpreter information for class Derived is available even though it has a TClass initialization routine.; 2187: Error in <TClass::LoadClassInfo>: no interpreter information for class Derived is available even though it has a TClass initialization routine.; 2187: Error in <TClass::LoadClassInfo>: no interpreter information for class Derived is available even though it has a TClass initialization routine.; 2187: Error in <TClass::LoadClassInfo>: no interpreter information for class Derived is available even though it has a TClass initialization routine.; 2187: Derived is found to inherit from TObject; 2187:; 2187: *** Break *** segmentation violation; 2187:; 2187:; 2187:; 2187: ===========================================================; 2187: There was a crash.; 2187: This is the entire stack trace of all threads:; 2187: ===========================================================; 2187: #0 0x00007f2a616e15db in waitpid () from /lib64/libc.so.6; 2187: #1 0x00007f2a61643ce7 in do_system () from /lib64/libc.so.6; 2187: #2 0x00007f2a630125cb in TUnixSystem::StackTrace (this=<optimized out>) at /home/jhahnfel/ROOT/src/core/unix/src/TUnixSystem.cxx:2395; 2187: #3 0x00007f2a6301c2df in TUnixSystem::DispatchSignals (this=0x617000000080, sig=kSigSegmentationViolation) at /home/jhahnfel/ROOT/src/core/unix/src/TUnixSystem.cxx:3615; 2187: #4 <signal handler called>; 2187: #5 0x00000000002d353e in __interceptor_strcmp.part.325 (); 2187: #6 0x00007f2a62e33daf in TClassTable::AddAlternate (normName=0x7f2a6007c780 <.str> ""UserClassViaTypedef"", alternate=0x7f2a6007c7c0 <.str> ""UserClass_t"") at /home/jhahnfel/ROOT/src/core/cont/src/TClassTable.cxx:447; 2187: #7 0x00007f2a62e382ed in ROOT::AddClassAlternate (normName=",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11867:235,Error,Error,235,https://root.cern,https://github.com/root-project/root/issues/11867,8,"['Error', 'avail']","['Error', 'available']"
Availability,"After this bug fix: https://github.com/root-project/root/pull/3914. Testing now in a newer version, ROOT 6.24/07. Operating system:; ```; cat /etc/redhat-release. CentOS Linux release 7.8.2003 (Core); ```. ROOT version:; ```; ------------------------------------------------------------------; | Welcome to ROOT 6.24/07 https://root.cern |; | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on Apr 21 2022, 09:57:00 |; | From tag , 2 September 2021 |; | With g++ (GCC) 10.3.0 |; | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------; ```. Setup:; ```; scram list -a | grep CMSSW_12_4_0; export SCRAM_ARCH=slc7_amd64_gcc10; cmsrel CMSSW_12_4_0; cd CMSSW_12_4_0/src; cmsenv; ```. This works without errors in ROOT 6.24/07:; ```; hadd -v 0 target.root file_1.root file_2.root; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11372#issuecomment-1247078921:820,error,errors,820,https://root.cern,https://github.com/root-project/root/issues/11372#issuecomment-1247078921,1,['error'],['errors']
Availability,"After updating ROOT to 026a1a701b, the first error is gone. But dictionary generation still fails due to ""Missing lambda call operator"". Build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30616/build.log)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12240#issuecomment-1429784113:45,error,error,45,https://root.cern,https://github.com/root-project/root/issues/12240#issuecomment-1429784113,1,['error'],['error']
Availability,"After updating Visual Studio 2019 to the version `16.10.0`, there is a `fatal error C1001: Internal compiler error` when compiling `G__MathCore.cxx`; See the bug report at Microsoft: [[v16.10.0] Fatal error C1001: Internal compiler error](https://developercommunity.visualstudio.com/t/v16100-fatal-error-c1001-internal-compiler-error/1437980?from=email&viewtype=all); And the proposed workaround:. 1. Remove the `auto` return type from `FunctorGradHandler::Clone()`. This function is the cause of the ICE and replacing `auto` with `ImplFunc*` will resolve the issue.; 2. Only if fixing the source is not an option, add `/d1deducedReturnEncoding-` to your build. This will disable the recent compiler work around deduced return types. Keep in mind that this option should only be used as a last resort because it is not a permanent switch. Interestingly enough, the `auto` return type was introduced as a workaround for another compiler error with `VS 2019 (16.4.3)`",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8327:78,error,error,78,https://root.cern,https://github.com/root-project/root/pull/8327,7,['error'],"['error', 'error-']"
Availability,"After upgrading ROOT to 6.30, one of our applications also started giving us the error mentioned in this thread; ```; Fatal in <operator new>: with std::align_val_t is not implemented yet; ```; A little research led me to this: https://root-forum.cern.ch/t/aborting-with-std-align-val-t-is-not-implemented-yet-rhel-9-2/55989. If I understand correctly, this is the situation:. - `TMapFile` requires linking with libNew; - libNew is broken with -std=c++17 or higher (missing `operator new` overload); - ROOT 6.30 requires C++17; - Hence `TMapFile` (and actually all of `libNew`) is currently unusable in ROOT 6.30. There are no workarounds. Please elaborate if I am missing something. This is a bit of an issue. You do realize that EPEL 9 provides just such a broken version (ROOT 6.30.02 with -std=c++17). Hence, on RHEL 9/Alma 9 etc. (i.e. the current go-to version of Linux at many labs), anyone who needs to use `TMapFile` (or `libNew`) must downgrade to ROOT 6.28 and, possibly, compile by hand with -std=c++14. Additionally, on the latest version of macOS, Sonoma, only ROOT 6.30+ is supported. Hence, any code that uses `TMapFile` is inevitably broken at this time on the current version of macOS. The only ""workaround"" would be to downgrade (i.e. reinstall) the OS.; ; If I might make a suggestion: I would mention, or better: highlight, such regressions in the [release notes](https://root.cern/doc/v630/release-notes.html#release-6.3004) of a new version. Or better yet, not consider a new release ready until such significant regressions are resolved. Also, broken functionality could be caught at compile time instead of letting user code hit a runtime `abort()`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13511#issuecomment-1932384223:81,error,error,81,https://root.cern,https://github.com/root-project/root/issues/13511#issuecomment-1932384223,3,"['down', 'error']","['downgrade', 'error']"
Availability,Again jenkins errors has nothing to do with PR,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4233#issuecomment-522104852:14,error,errors,14,https://root.cern,https://github.com/root-project/root/pull/4233#issuecomment-522104852,1,['error'],['errors']
Availability,"Again, failures due to networking and package problems, unrelated to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5793#issuecomment-640164062:7,failure,failures,7,https://root.cern,https://github.com/root-project/root/pull/5793#issuecomment-640164062,1,['failure'],['failures']
Availability,"Agreed today at I/O meeting that we need to remind ourselves and investigate these questions. I'm okay with merging this PR if e.g. @hahnjo could create a new issue with the above questions - this seems to indicate a bug, whether it's a missing error message or an ignored linkdef entry or whatever it is.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13238#issuecomment-1645710400:245,error,error,245,https://root.cern,https://github.com/root-project/root/pull/13238#issuecomment-1645710400,1,['error'],['error']
Availability,"Agreed! I'll make sure that is taken care of first, at the very least by throwing an exception if `fUpdate` is used with a multi-thread RDF. Again I am not sure that it can work at all, I need to go down the rabbit hole.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4965#issuecomment-592034386:199,down,down,199,https://root.cern,https://github.com/root-project/root/pull/4965#issuecomment-592034386,1,['down'],['down']
Availability,"Ah , I see. What is the error you get with C++17 and Cuda 11 ? Is Cuda 11 supporting C++ 17 now ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6058#issuecomment-663590311:24,error,error,24,https://root.cern,https://github.com/root-project/root/pull/6058#issuecomment-663590311,1,['error'],['error']
Availability,"Ah I didn't realize that was you too! Nice, thanks a lot for your contribution! I'm thinking now how this can be further extended to cover also the class of crystal ball functions with asymmetric Gaussian core. Right, there has been no new release in some time. Hmm what about this line in the error message here:; ```; ld: library not found for -lCheckFix; ```; What is `CheckFix`, is that also some custom library? I don't think it's part of ROOT. Maybe it's also a Mac related issue, which I can't reproduce on Linux unfortunately.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7249#issuecomment-782167119:294,error,error,294,https://root.cern,https://github.com/root-project/root/issues/7249#issuecomment-782167119,1,['error'],['error']
Availability,"Ah I understand now, yes in the case the condition is true, `fTsumwxy` is not update.; This is certainly an error, I will make a PR fixing this.; Thank you for finding this out!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11746#issuecomment-1322456835:108,error,error,108,https://root.cern,https://github.com/root-project/root/issues/11746#issuecomment-1322456835,1,['error'],['error']
Availability,"Ah I was hoping for something like `in valgrind, you can see...` or similar :-) OK we'll discuss, many people are on vacation these days so please give us a couple of weeks! Can you ping me mid Sept if you haven't heard back? And thanks for sharing this proposal!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13146#issuecomment-1671134691:182,ping,ping,182,https://root.cern,https://github.com/root-project/root/pull/13146#issuecomment-1671134691,1,['ping'],['ping']
Availability,"Ah no, my bad sorry, the exception-throwing-on-error is not even in 6.24, it's only in the development branch (and soon will be in v6.26). So what you see is expected (but starting from the next ROOT version you'll also get an exception and a non-zero exit code).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9366#issuecomment-1006454702:47,error,error,47,https://root.cern,https://github.com/root-project/root/issues/9366#issuecomment-1006454702,1,['error'],['error']
Availability,"Ah okay I see! Okay then it should not be a compile error, but indeed a warning would be very appreciated :+1:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10824#issuecomment-1165627024:52,error,error,52,https://root.cern,https://github.com/root-project/root/issues/10824#issuecomment-1165627024,1,['error'],['error']
Availability,"Ah that makes sense. Extending the defintion of strings to add metadata to paths (globbing, the `#` syntax in `TFile::Open`, ...) is always going to be error prone. > but probably we want to have a more authoritative list of all the tokens that should make the file name not be parsed as a glob. This feels like an impossible task to define. Maybe a simplier solution would be to not support `?` when globbing and only apply globbing to the text before the query string? Or maybe just have a dedicated method (or argument type) for creating a RDataFrame from a glob rather than relying on huristics?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16475#issuecomment-2366982360:152,error,error,152,https://root.cern,https://github.com/root-project/root/issues/16475#issuecomment-2366982360,2,['error'],['error']
Availability,"Ah wait, I now see that your error refers to `libcpp_string_view.h` indeed. But you're using 6.22/06, you will get no errors if you use master. The backport in 6.22 will be available in next patch release 6.22/10",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8513#issuecomment-866591211:29,error,error,29,https://root.cern,https://github.com/root-project/root/issues/8513#issuecomment-866591211,3,"['avail', 'error']","['available', 'error', 'errors']"
Availability,"Ah! I missed that there was a binary available for Ubuntu 22 of v6-26-02. Many thanks @ferdymercury for pointing this out, and also @eguiraud for clarifying that it is built for Python 3. So far it ""just works"" :); Please feel free to close this issue at your discretion (assuming there is no intent to adding Ubuntu 22 support previous minor versions).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10518#issuecomment-1120421029:37,avail,available,37,https://root.cern,https://github.com/root-project/root/issues/10518#issuecomment-1120421029,1,['avail'],['available']
Availability,"Ah, I know what this is, the ""important"" error message is:. ```; Error in <TBranch::TBranch>: Illegal leaf: Lambda_DTFL_KS_M/Lambda_DTFL_KS_M[Lambda_DTFL_KS_nPV]/F. If this is a variable size C array it's possible that the branch holding the size is not available.; ```. in other words at the point `Snapshot` creates the branch `Lambda_DTFL_KS_M[Lambda_DTFL_KS_nPV]`, the branch that contains the size, `Lambda_DTFL_KS_nPV`, has not been declared yet. And indeed we changed the order in which `Snapshot` creates output branches between 6.24 and 6.26, internally. Resolving https://github.com/root-project/root/issues/6932 would fix this issue, and I think it's the way to go. In the meanwhile, you can work around the issue by explicitly pass to `Snapshot` the list of columns to write, putting `Lambda_DTFL_KS_nPV` before `Lambda_DTFL_KS_M`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10920#issuecomment-1177751857:41,error,error,41,https://root.cern,https://github.com/root-project/root/issues/10920#issuecomment-1177751857,3,"['Error', 'avail', 'error']","['Error', 'available', 'error']"
Availability,"Ah, I need to update a test reference, the error message slightly changed",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11307#issuecomment-1235374946:43,error,error,43,https://root.cern,https://github.com/root-project/root/pull/11307#issuecomment-1235374946,1,['error'],['error']
Availability,"Ah, I see [this PR](https://github.com/root-project/root/pull/15404) also had the LibXml2 failure in the mac14 workflow: https://github.com/root-project/root/actions/runs/8956800442/job/24599041512. So indeed, CI failures unrelated to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12202#issuecomment-2094756264:90,failure,failure,90,https://root.cern,https://github.com/root-project/root/pull/12202#issuecomment-2094756264,2,['failure'],"['failure', 'failures']"
Availability,"Ah, I see that error too now, just needed to enable ROOT 7 in the cmake config. So the issue is related to the latest nlohmann json release, and comes from these two PRs:. * https://github.com/root-project/root/pull/9278 ROOT forward declares nlohmann json manually; * https://github.com/nlohmann/json/pull/3590 nlohmann json added an ABI-tagged inline namespace, breaking out forward declarations. This is unfortunate, and we can't just update the forward declarations because they will change with each nlohmann json version now. I assigned this issue to @Axel-Naumann, because probably he remembers best why the manual forward declaration was introduced. Optimally, we'll find a solution where the official `json_fwd` header can be used again.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11130#issuecomment-1208713792:15,error,error,15,https://root.cern,https://github.com/root-project/root/issues/11130#issuecomment-1208713792,1,['error'],['error']
Availability,"Ah, but it doesn't hang outside of `ctest`!. <details>; <summary>sanitizer output of full debug build</summary>. ```; ==1219199==ERROR: AddressSanitizer: heap-use-after-free on address 0x61600011cf20 at pc 0x7fa0de6cd426 bp 0x7fa09adf51c0 sp 0x7fa09adf51b0; READ of size 4 at 0x61600011cf20 thread T1; #0 0x7fa0de6cd425 in TClass::Size() const /home/jhahnfel/ROOT/src/core/meta/src/TClass.cxx:5706:8; #1 0x7fa0d8ab118a in TBufferFile::ReadFastArray(void*, TClass const*, int, TMemberStreamer*, TClass const*) /home/jhahnfel/ROOT/src/io/io/src/TBufferFile.cxx:1605:25; #2 0x7fa0d8daf80a in TStreamerInfoActions::ReadSTLObjectWiseFastArray(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short, unsigned int) /home/jhahnfel/ROOT/src/io/io/src/TStreamerInfoActions.cxx:1364:11; #3 0x7fa0d8d9bf5a in int TStreamerInfoActions::ReadSTL<&TStreamerInfoActions::ReadSTLMemberWiseSameClass(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short), &TStreamerInfoActions::ReadSTLObjectWiseFastArray(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short, unsigned int)>(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*) /home/jhahnfel/ROOT/src/io/io/src/TStreamerInfoActions.cxx:1407:10; #4 0x7fa0d8ac70a3 in TStreamerInfoActions::TConfiguredAction::operator()(TBuffer&, void*) const /home/jhahnfel/ROOT/src/io/io/inc/TStreamerInfoActions.h:123:17; #5 0x7fa0d8ac267e in TBufferFile::ApplySequence(TStreamerInfoActions::TActionSequence const&, void*) /home/jhahnfel/ROOT/src/io/io/src/TBufferFile.cxx:3580:10; #6 0x7fa0d8ac13d4 in TBufferFile::ReadClassBuffer(TClass const*, void*, TClass const*) /home/jhahnfel/ROOT/src/io/io/src/TBufferFile.cxx:3499:4; #7 0x7fa0de30778e in TProtoClass::Streamer(TBuffer&) /home/jhahnfel/ROOT/build-asan-debug-clang/core/G__Core.cxx:26435:12; #8 0x7fa0de6ebc39 in TClass::StreamerTObjectInitialized(TClass const*, void*, TBuffer&, TClass const*) /home/jhahnfel/ROOT/src/core/meta/src/TClass.cxx:6817:10; #9 0x7fa0d8ac492a in TC",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12715#issuecomment-1554235372:129,ERROR,ERROR,129,https://root.cern,https://github.com/root-project/root/issues/12715#issuecomment-1554235372,1,['ERROR'],['ERROR']
Availability,"Ah, sorry @AdvaitDhingra . Here it is:. ```; [ RUN ] TString.Basics; Error in <TString::Replace>: Negative number of replacement characters!; /Users/sftnight/build/workspace/root-pullrequests-build/root/test/unit_testing_support/ROOTUnitTestSupport.h:79: Failure; Value of: Seen; Expected: starts with ""Error in <TString::Append>: ""; Actual: ""Error in <TString::Replace>: Negative number of replacement characters!\n""; /Users/sftnight/build/workspace/root-pullrequests-build/root/test/unit_testing_support/ROOTUnitTestSupport.h:86: Failure; Value of: Seen; Expected: is equal to ""Error in <TString::Append>: Negative length!\n""; Actual: ""Error in <TString::Replace>: Negative number of replacement characters!\n""; ```. (you can also run the test locally if you compile ROOT with your changes). Anyway, looks like our expected error message does not match the actual error message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7132#issuecomment-778183289:69,Error,Error,69,https://root.cern,https://github.com/root-project/root/pull/7132#issuecomment-778183289,9,"['Error', 'Failure', 'error']","['Error', 'Failure', 'error']"
Availability,"Ah, sorry I missed that!. Well, the `RooMomentMorphFuncND` makes the mistake of having a pointer to the last cached normalization set as a data member, and it is not excluded from IO:; https://github.com/root-project/root/blob/master/roofit/roofit/inc/RooMomentMorphFuncND.h#L133. You can therefore make the writing work if you first evaluate your function with a normalization set, and make sure that the normalization set is still alive during `writeToFile()` such that the pointer is not invalid:. ```C++; RooArgSet nset{*myy};; morph_ND->getVal(&nset);; ; morph_ND->Print();; w->import(*morph_ND);; w->Print();; w->writeToFile(""test_workspace.root"");; ```. This is of course annoying, and I will quickly fix this. The `_curNormSet` member should be excluded from IO. But at least you have a workaround until the next ROOT release!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11876#issuecomment-1384348020:433,alive,alive,433,https://root.cern,https://github.com/root-project/root/issues/11876#issuecomment-1384348020,1,['alive'],['alive']
Availability,"Ah, sorry, I just realized that on my Windows system I just installed it from the website. I have switched to my Ubuntu system, where I have built ROOT from source, and I now get this error:; ```; advait@advait-dhingra:~/Documents/Coding/HeatSimulation$ cmake .; CMake Error at CMakeLists.txt:11 (find_package):; By not providing ""FindROOT.cmake"" in CMAKE_MODULE_PATH this project has; asked CMake to find a package configuration file provided by ""ROOT"", but; CMake did not find one. Could not find a package configuration file provided by ""ROOT"" with any of; the following names:. ROOTConfig.cmake; root-config.cmake. Add the installation prefix of ""ROOT"" to CMAKE_PREFIX_PATH or set; ""ROOT_DIR"" to a directory containing one of the above files. If ""ROOT""; provides a separate development package or SDK, be sure it has been; installed. -- Configuring incomplete, errors occurred!; See also ""/home/advait/Documents/Coding/HeatSimulation/CMakeFiles/CMakeOutput.log"". ```; I have root in my PATH (as the command `root`).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7982#issuecomment-825609610:184,error,error,184,https://root.cern,https://github.com/root-project/root/issues/7982#issuecomment-825609610,3,"['Error', 'error']","['Error', 'error', 'errors']"
Availability,"Ah, well, I was kind of assuming that this is mostly relevant/important together with implicit multithreading, in which case TBB needs to be available anyway. Presumably the TBB issue on Windows is eventually solvable (and besides, does anyone really use Root on Windows with a large number of cores?). If you still think it's useful I can try to make the further optimisation described above and make a separate PR for this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6919#issuecomment-800531343:141,avail,available,141,https://root.cern,https://github.com/root-project/root/pull/6919#issuecomment-800531343,1,['avail'],['available']
Availability,"Aha, now I understand more of the rationale behind the code. Updating a class `K` seems to work, at least `GetDataMember(""i"")` returns something after giving the full definition (while it is `nullptr` before) - I hope this is tested somewhere? I didn't check, if not we should definitely have a test case here!. Regarding the namespaces, the following test gives what I would expect:; ```; root [0] namespace std { namespace ns { } }; root [1] auto c = TClass::GetClass(""ns"");; root [2] c->GetDataMember(""a""); (TDataMember *) nullptr; root [3] namespace std { namespace ns { int a = 0; } }; root [4] c->GetDataMember(""a""); (TDataMember *) 0x27eed80; root [5] namespace ns { int b = 1; }; root [6] c->GetDataMember(""b""); (TDataMember *) nullptr; ```. The only thing that doesn't work is getting a `TClass` of `::ns`, ie; ```; root [7] TClass::GetClass(""ns"")->GetDataMember(""b""); (TDataMember *) nullptr; ```. I think this is fine since you cannot use `ns` anyway:; ```; root [8] ns::b; ROOT_prompt_8:1:1: error: reference to 'ns' is ambiguous; ns::b; ^; ROOT_prompt_5:1:11: note: candidate found by name lookup is 'ns'; namespace ns { int b = 1; }; ^; ROOT_prompt_3:1:27: note: candidate found by name lookup is 'std::ns'; namespace std { namespace ns { int a = 0; } }; ^; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8828#issuecomment-939752234:1004,error,error,1004,https://root.cern,https://github.com/root-project/root/issues/8828#issuecomment-939752234,1,['error'],['error']
Availability,All Jenkins failures has nothing to do with PR,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6664#issuecomment-713340133:12,failure,failures,12,https://root.cern,https://github.com/root-project/root/pull/6664#issuecomment-713340133,1,['failure'],['failures']
Availability,"All actions and transformations now use the same method to decide what columns to act no: `ROOT::Internal::TDF::SelectColumnNames`. The method picks the necessary number of default columns if the user-provided list is absent. Throws in case of error. The two separate old mechanisms to achieve the same (`PickBranchNames` and `GetBranchNames`+`GetDefaultBranchNames`) have been completely removed. This PR does not introduce conflicts with #764, also related to TDF.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/768:244,error,error,244,https://root.cern,https://github.com/root-project/root/pull/768,1,['error'],['error']
Availability,"All checks passed on all platforms, so the problem with the CI failures in #15616 on some platforms is really on the RooFit side.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15875#issuecomment-2187513181:63,failure,failures,63,https://root.cern,https://github.com/root-project/root/pull/15875#issuecomment-2187513181,1,['failure'],['failures']
Availability,All comments above addressed. The failures are a glitch.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16263#issuecomment-2303751057:34,failure,failures,34,https://root.cern,https://github.com/root-project/root/pull/16263#issuecomment-2303751057,1,['failure'],['failures']
Availability,All errors are unrelated. Merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6952#issuecomment-746615224:4,error,errors,4,https://root.cern,https://github.com/root-project/root/pull/6952#issuecomment-746615224,1,['error'],['errors']
Availability,All errors has nothing to do with PR,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6702#issuecomment-716377712:4,error,errors,4,https://root.cern,https://github.com/root-project/root/pull/6702#issuecomment-716377712,1,['error'],['errors']
Availability,All errors has nothing to do with PR - merge,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4523#issuecomment-540937974:4,error,errors,4,https://root.cern,https://github.com/root-project/root/pull/4523#issuecomment-540937974,1,['error'],['errors']
Availability,"All errors seem unrelated. @etejedor will hopefully look at the Python errors when he's back. And I haven't seen the cling symbol errors in my PR - which is why I merged it, and apparently I broke cling :-( I'll have to debug tomorrow...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5919#issuecomment-668792555:4,error,errors,4,https://root.cern,https://github.com/root-project/root/pull/5919#issuecomment-668792555,3,['error'],['errors']
Availability,All failures are unrelated,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12055#issuecomment-1396931496:4,failure,failures,4,https://root.cern,https://github.com/root-project/root/pull/12055#issuecomment-1396931496,1,['failure'],['failures']
Availability,All failures has nothing to do with PR,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4287#issuecomment-525315451:4,failure,failures,4,https://root.cern,https://github.com/root-project/root/pull/4287#issuecomment-525315451,1,['failure'],['failures']
Availability,All failures has nothing to do with PR - merging,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6256#issuecomment-680967282:4,failure,failures,4,https://root.cern,https://github.com/root-project/root/pull/6256#issuecomment-680967282,1,['failure'],['failures']
Availability,"All failures look unrelated, merging",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12944#issuecomment-1577018097:4,failure,failures,4,https://root.cern,https://github.com/root-project/root/pull/12944#issuecomment-1577018097,1,['failure'],['failures']
Availability,All failures not related to PR changes,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16705#issuecomment-2421640634:4,failure,failures,4,https://root.cern,https://github.com/root-project/root/pull/16705#issuecomment-2421640634,1,['failure'],['failures']
Availability,All failures were due to git transfer issues.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1789#issuecomment-376537879:4,failure,failures,4,https://root.cern,https://github.com/root-project/root/pull/1789#issuecomment-376537879,1,['failure'],['failures']
Availability,All green except for that infrastructure failure.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1992#issuecomment-388318058:41,failure,failure,41,https://root.cern,https://github.com/root-project/root/pull/1992#issuecomment-388318058,1,['failure'],['failure']
Availability,"All green now, besides an unrelated failure that @egpbos should learn about",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15376#issuecomment-2099245931:36,failure,failure,36,https://root.cern,https://github.com/root-project/root/pull/15376#issuecomment-2099245931,2,['failure'],['failure']
Availability,All jenkins failures just upload errors on cdash,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6847#issuecomment-731206096:12,failure,failures,12,https://root.cern,https://github.com/root-project/root/pull/6847#issuecomment-731206096,2,"['error', 'failure']","['errors', 'failures']"
Availability,"All non-M1 errors are pre-existing.; All M1-errors are independent of the PR (I notified @lmoneta ); tbb seems to build, at least, so it's a step into the right direction: merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7020#issuecomment-759583779:11,error,errors,11,https://root.cern,https://github.com/root-project/root/pull/7020#issuecomment-759583779,2,['error'],['errors']
Availability,"All of the code example/output in the PR description corresponds to with this PR included. Repeating the lookup without diagnostic suppression doesn't give the correct error message again; (this corresponds to the ""call attempt 1"" case in the output from test.py in the PR description). ie with superfluous debug output snipped out:; ```; declare ret True; creating helper; calling helper; call attempt 0; In file included from input_line_52:1:; /home/b/bendavid/pyrootdebug3/test.h:10:9: error: cannot assign to variable 'res' with const-qualified type 'const std::size_t' (aka 'const unsigned long'); res = T{0, 0}.size();; ~~~ ^; /home/b/bendavid/pyrootdebug3/test.h:18:10: note: in instantiation of member function 'Helper<std::vector<double, std::allocator<double> > >::operator()' requested here; return helper();; ^; note: in instantiation of function template specialization 'call_helper<Helper<std::vector<double, std::allocator<double> > > >' requested here; /home/b/bendavid/pyrootdebug3/test.h:9:23: note: variable 'res' declared const here; const std::size_t res = 0;; ~~~~~~~~~~~~~~~~~~^~~~~~~; /home/b/bendavid/pyrootdebug3/test.h:18:10: error: called object type 'Helper<std::vector<double, std::allocator<double> > > *' is not a function or function pointer; return helper();; ^~~~~~; note: in instantiation of function template specialization 'call_helper<Helper<std::vector<double, std::allocator<double> > > *>' requested here; helper call failed; Template method resolution failed:; Failed to instantiate ""call_helper(Helper<vector<double> >&)""; Failed to instantiate ""call_helper(Helper<vector<double> >*)""; Failed to instantiate ""call_helper(Helper<vector<double> >)""; call attempt 1; /home/b/bendavid/pyrootdebug3/test.h:18:10: error: called object type 'Helper<std::vector<double, std::allocator<double> > > *' is not a function or function pointer; return helper();; ^~~~~~; note: in instantiation of function template specialization 'call_helper<Helper<std::vector<double, s",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12449#issuecomment-1460106107:168,error,error,168,https://root.cern,https://github.com/root-project/root/pull/12449#issuecomment-1460106107,2,['error'],['error']
Availability,All test failures are unrelated to RooFit.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3509#issuecomment-472801704:9,failure,failures,9,https://root.cern,https://github.com/root-project/root/pull/3509#issuecomment-472801704,1,['failure'],['failures']
Availability,"All test passing, failure is due to UNSTABLE. @Axel-Naumann this is ready to merge",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4835#issuecomment-578984122:18,failure,failure,18,https://root.cern,https://github.com/root-project/root/pull/4835#issuecomment-578984122,1,['failure'],['failure']
Availability,All tests failures has nothing to do with PR - merging,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5133#issuecomment-599373277:10,failure,failures,10,https://root.cern,https://github.com/root-project/root/pull/5133#issuecomment-599373277,1,['failure'],['failures']
Availability,"All the RooFit tutorials were replicated in the `root/roofitcore/test` directory to be used as tests, which are never run as part of the unit tests. Actually, the RooFit tutorials made their way into a unit test in the `stressRooFit` test suite, which is run by `ctest` also in the CI. That means the tutorial files in `root/roofitcore/test` are redundant, and also badly out of sync with the actual tutorials and stressRooFit because they are never tested automatically.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11361:346,redundant,redundant,346,https://root.cern,https://github.com/root-project/root/pull/11361,1,['redundant'],['redundant']
Availability,All the errors are pre-existing and unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6669#issuecomment-715598290:8,error,errors,8,https://root.cern,https://github.com/root-project/root/pull/6669#issuecomment-715598290,1,['error'],['errors']
Availability,All the errors seems infrastructure related (python not found and remote file access) but there are too many of them to know if this PR works or not ... so waiting for the infrastructure to settle.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5891#issuecomment-646357052:8,error,errors,8,https://root.cern,https://github.com/root-project/root/pull/5891#issuecomment-646357052,1,['error'],['errors']
Availability,All the failures are unrelated to RooFit.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11425#issuecomment-1256334826:8,failure,failures,8,https://root.cern,https://github.com/root-project/root/pull/11425#issuecomment-1256334826,1,['failure'],['failures']
Availability,All the test failure left are pre-existing.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11334#issuecomment-1243627660:13,failure,failure,13,https://root.cern,https://github.com/root-project/root/pull/11334#issuecomment-1243627660,1,['failure'],['failure']
Availability,All the test failures are timeouts and should not be related to this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1568#issuecomment-362276546:13,failure,failures,13,https://root.cern,https://github.com/root-project/root/pull/1568#issuecomment-362276546,1,['failure'],['failures']
Availability,All the unit test failures appear to be due to the extra bytes serialized in the tree. Working on an equivalent `roottest` PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1217#issuecomment-338427667:18,failure,failures,18,https://root.cern,https://github.com/root-project/root/pull/1217#issuecomment-338427667,1,['failure'],['failures']
Availability,"Allocate (GSLRngWrapper.h:99); ==12320== by 0x8223765: ROOT::Math::GSLMCIntegrator::GSLMCIntegrator(char const*, double, double, unsigned int) (GSLMCIntegrator.cxx:117); ==12320== by 0x108BF5: main (mcintegrator.cpp:8); ==12320==; ==12320== LEAK SUMMARY:; ==12320== definitely lost: 319,984 bytes in 19,999 blocks; ==12320== indirectly lost: 98,770,000 bytes in 19,754 blocks; ==12320== possibly lost: 1,225,000 bytes in 245 blocks; ==12320== still reachable: 340,874 bytes in 4,262 blocks; ==12320== suppressed: 0 bytes in 0 blocks; ==12320== Reachable blocks (those to which a pointer was found) are not shown.; ==12320== To see them, rerun with: --leak-check=full --show-leak-kinds=all; ==12320==; ==12320== For counts of detected and suppressed errors, rerun with: -v; ==12320== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0); ```. After fix:; ```; valgrind --tool=memcheck --leak-check=full --show-leak-kinds=definite \; --undef-value-errors=no ./mcintegrator. ==14294== Memcheck, a memory error detector; ==14294== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.; ==14294== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info; ==14294== Command: ./mcintegrator; ==14294==; ==14294==; ==14294== HEAP SUMMARY:; ==14294== in use at exit: 335,858 bytes in 4,260 blocks; ==14294== total heap usage: 67,782 allocs, 63,522 frees, 101,539,078 bytes allocated; ==14294==; ==14294== LEAK SUMMARY:; ==14294== definitely lost: 0 bytes in 0 blocks; ==14294== indirectly lost: 0 bytes in 0 blocks; ==14294== possibly lost: 0 bytes in 0 blocks; ==14294== still reachable: 335,858 bytes in 4,260 blocks; ==14294== suppressed: 0 bytes in 0 blocks; ==14294== Reachable blocks (those to which a pointer was found) are not shown.; ==14294== To see them, rerun with: --leak-check=full --show-leak-kinds=all; ==14294==; ==14294== For counts of detected and suppressed errors, rerun with: -v; ==14294== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0); ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/928:3012,error,error,3012,https://root.cern,https://github.com/root-project/root/pull/928,4,"['ERROR', 'error']","['ERROR', 'error', 'errors']"
Availability,"Allow to select the system of units in TGeo at run-time and allow to switch to; Geant4 (mm,ns,MeV) from the TGeo default TGeo (mm,s,keV). Example:; ```; #include ""TGeant4SystemOfUnits.h""; ....; TGeant4Unit::setUnitType(TGeant4Unit::kTGeant4Units); ```; Then the material properties shall be as described in TGeant4SystemOfUnits.h. The default is:; ```; #include ""TGeoSystemOfUnits.h""; ....; TGeo4Unit::setUnitType(TGeoUnit::kTGeoUnits); ```; Please note: ; 1) This code is not necessary. If users do nothing the behavior stays as it is now.; 2) Units have to be set *before* the first TElement or TMaterial constructor is called,; Otherwise a fatal error is issued (TError::Fatal).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4006:649,error,error,649,https://root.cern,https://github.com/root-project/root/pull/4006,1,['error'],['error']
Availability,Allow user-defined safety to be drawn in TGeoManager::CheckPoint,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14851:54,CheckPoint,CheckPoint,54,https://root.cern,https://github.com/root-project/root/pull/14851,1,['CheckPoint'],['CheckPoint']
Availability,"Allow users to adjust the number of entries per cluster and the number of elements per page using `RNTupleWriteOptions`. ; I also took the opportunity to fix some whitespace errors in `RNTupleOptions.hxx`. Fixes #7853. Usage (see tests as well): ; ```cpp; RNTupleWriteOptions opt;; opt.SetNClusterEntries(100000);; opt.SetNElementsPerPage(40000);; auto ntuple = RNTupleWriter::Recreate(; std::move(model), ""ntuple"", fileGuard.GetPath(), opt; );; ```. As was pointed out in https://github.com/root-project/root/pull/7112#issue-564081466, there are some `NElementsPerPage` inputs that could cause compression problems (i.e. those where the total page memory is larger than `0xffffff`). Should we have some error checking at the `RNTupleWriteOptions` level? Or maybe this should be considered a bug on the compression side of things. cc @jalopezg-r00t",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8113:174,error,errors,174,https://root.cern,https://github.com/root-project/root/pull/8113,2,['error'],"['error', 'errors']"
Availability,"Allows for direct processing of sqlite files under HTTP(S) URLs provided that Davix is available. Replaces #2578. I think it would be nice to have a unit test for reading of remote files. Unfortunately, Davix does not understand the `http:///path/to/file` trick to use a URL on local paths. Can we upload tree/dataframe/test/RSqliteDS_test.sqlite to https://root.cern.ch/... for testing?",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2608:87,avail,available,87,https://root.cern,https://github.com/root-project/root/pull/2608,1,['avail'],['available']
Availability,"Allows to change label on the axis by the value. It is more robust method, ; which continue working when zooming or axis limits or just canvas resolution changes.; Example is following:; ```; axis->ChangeValueLabel(30.,-1,-1,-1,kBlue,-1,""value of 30"");; ```. Old `TAxis::ChangeLabel` method using index is working as before. Use `strlcpy` instead of `strncpy` where it makes sense, update tutorial and release notes",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13468:60,robust,robust,60,https://root.cern,https://github.com/root-project/root/pull/13468,1,['robust'],['robust']
Availability,Almost there... I'll take a look into the tutorial failure.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6700#issuecomment-800868470:51,failure,failure,51,https://root.cern,https://github.com/root-project/root/pull/6700#issuecomment-800868470,1,['failure'],['failure']
Availability,"Almost, now I have a different problem having to do with json:; ```; [ 91%] Building CXX object roofit/roofitcore/CMakeFiles/RooFitCore.dir/src/TestStatistics/RooSumL.cxx.o; In file included from /build/root/src/root-6.26.06/graf3d/eve7/src/REveBoxSet.cxx:20:; /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous; 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n); | ^~~~~~~~; In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,; from /usr/include/nlohmann/detail/exceptions.hpp:22,; from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,; from /usr/include/nlohmann/adl_serializer.hpp:14,; from /usr/include/nlohmann/json.hpp:35:; /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’; 61 | using json = basic_json<>;; | ^~~~; .....; ```; Any remedy for that?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11130#issuecomment-1207464193:300,error,error,300,https://root.cern,https://github.com/root-project/root/issues/11130#issuecomment-1207464193,1,['error'],['error']
Availability,"Along the way, this PR removes the `RFieldFuse` helper class. Instead, the RField class knows its field ID where available. This simplifies connecting fields to a page storage and gives the process more flexibility. The PR also adds an `RRecordField` for untyped `struct`s. @mxxo That should fix the problem you saw with NanoAOD printing.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7341:113,avail,available,113,https://root.cern,https://github.com/root-project/root/pull/7341,1,['avail'],['available']
Availability,"Already merged in v6-24-00-patches, still pending for v6-26-00-patches due to unrelated CI errors",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11080#issuecomment-1204388985:91,error,errors,91,https://root.cern,https://github.com/root-project/root/issues/11080#issuecomment-1204388985,1,['error'],['errors']
Availability,"Alright, I think I managed to hunt down and fix the underlying issues that required removing the `assert` and disabling the IR verifier: https://reviews.llvm.org/D142352 and https://reviews.llvm.org/D142443 Assuming these go through upstream, we could either revert the ""hacky"" LLVM patch (and replace it by two backports for LLVM 13), or just wait for the next LLVM upgrade (and close this PR). What do you think @Axel-Naumann @vgvassilev?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12074#issuecomment-1401661431:35,down,down,35,https://root.cern,https://github.com/root-project/root/pull/12074#issuecomment-1401661431,1,['down'],['down']
Availability,"Alright, I think I understand what's going on (even though it's not fully clear to me why the story changes to an error in C++20): `REntry::GetPtr<T>` instantiates `RField<T>::TypeName()` to check the type name and despite the `if constexpr (std::is_void_v<T>)` check, it seems the compiler does ""something"" with `RField<void>`. In this PR, as mentioned above, the base class destructor changes to `virtual ~RFieldBase() = default;` in the header so the compiler sees it and apparently tries to instantiate also `GenerateValue`. There are a couple of solutions: First we can move `~RFieldBase()` back into the source file:; ```diff; diff --git a/tree/ntuple/v7/inc/ROOT/RField.hxx b/tree/ntuple/v7/inc/ROOT/RField.hxx; index deb9d5f4a3..cd0b5dd89e 100644; --- a/tree/ntuple/v7/inc/ROOT/RField.hxx; +++ b/tree/ntuple/v7/inc/ROOT/RField.hxx; @@ -570,7 +570,7 @@ public:; RFieldBase(RFieldBase&&) = default;; RFieldBase& operator =(const RFieldBase&) = delete;; RFieldBase& operator =(RFieldBase&&) = default;; - virtual ~RFieldBase() = default;; + virtual ~RFieldBase();; ; /// Copies the field and its sub fields using a possibly new name and a new, unconnected set of columns; std::unique_ptr<RFieldBase> Clone(std::string_view newName) const;; diff --git a/tree/ntuple/v7/src/RField.cxx b/tree/ntuple/v7/src/RField.cxx; index ef04fec76c..41d4962ac5 100644; --- a/tree/ntuple/v7/src/RField.cxx; +++ b/tree/ntuple/v7/src/RField.cxx; @@ -410,6 +410,10 @@ ROOT::Experimental::RFieldBase::RFieldBase(std::string_view name, std::string_vi; {; }; ; +ROOT::Experimental::RFieldBase::~RFieldBase(); +{; +}; +; std::string ROOT::Experimental::RFieldBase::GetQualifiedFieldName() const; {; std::string result = GetFieldName();; ```. Alternatively it helps to switch the `if constexpr` around to avoid the compiler instantiate the `RField<void>`:; ```diff; diff --git a/tree/ntuple/v7/inc/ROOT/REntry.hxx b/tree/ntuple/v7/inc/ROOT/REntry.hxx; index 1f3ec47095..b7b70b24cb 100644; --- a/tree/ntuple/v7/inc/ROOT/RE",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14468#issuecomment-1916371964:114,error,error,114,https://root.cern,https://github.com/root-project/root/pull/14468#issuecomment-1916371964,2,['error'],['error']
Availability,"Alright, final milestone: all tests pass on all platforms! :partying_face: (I cancelled the Jenkins build on `ROOT-debian10-i386`, not available at the moment). I updated the PR summary with some numbers on resource consumption, but looks all good for me. With that, the upgrade is ready from a technical point of view.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13273#issuecomment-1835684559:135,avail,available,135,https://root.cern,https://github.com/root-project/root/pull/13273#issuecomment-1835684559,1,['avail'],['available']
Availability,"Alright, let's see :). 1. [GetSize](https://root.cern.ch/doc/master/classTCollection.html#af0ca154693eeb1e9d9a0ff3a8d43e466) returns the capacity of the object, you need to use `GetEntries` for the number of elements (I know, terrible naming). That should solve number 1.; 2. that's annoying (and a bug to fix, of course) but you can work around it by passing the list through a `std::sort` and a [`std::unique`](https://en.cppreference.com/w/cpp/algorithm/unique) to remove duplicates; 3. as the error message says, you need to generate dictionaries for `RVec<ROOT::Math::PtEtaPhiMVector>` for ROOT to know how to read/write that type. For 3., some examples on generating dictionaries are at https://github.com/eguiraud/root_dictionaries_tutorial .; As a quick workaround, adding these lines before the `reproduce` function:. ```cpp; #ifdef __CLING__; #pragma link off all globals;; #pragma link off all classes;; #pragma link off all functions;; #pragma link C++ nestedclasses;; #pragma link C++ class ROOT::VecOps::RVec<ROOT::Math::PtEtaPhiMVector>;; #endif; ```. and then executing `root -l -b -q reproduce.C+` should generate the dictionaries you need. Then compiling and executing `reproduce.C` in that same directory should work (it does for me). I hope this helps!; Enrico",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9240#issuecomment-964982216:497,error,error,497,https://root.cern,https://github.com/root-project/root/issues/9240#issuecomment-964982216,1,['error'],['error']
Availability,"Alright, this looks better now in master, but there is still an error somewhere... ![image](https://user-images.githubusercontent.com/10653970/149142474-1e85146d-e8ea-488d-a109-d20deab8d3b9.png). Hmm weird, doxygen version is 1.9.3 as per the log. Could you share the corrupt index.qhp file ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8781#issuecomment-1011007761:64,error,error,64,https://root.cern,https://github.com/root-project/root/issues/8781#issuecomment-1011007761,1,['error'],['error']
Availability,"Alright, with this new version all tests pass on my machine. I think the current version is essentially equivalent to what we already have now, except for the avoidance of the modulo operations in the beginning. I also have a last commit to add, but even though it's a bug fix, some tests do not work because of it, so I want to merge it separately. Here is the diff in any case:; ```diff; commit 02e4b62489d8764ef1b3c243183d8cf2f745979b (fill); Author: Guilherme Amadio <amadio@cern.ch>; Date: Wed Sep 27 15:01:38 2017 +0200. Fix errors that are not reported when fDirectory == nullptr. diff --git a/tree/tree/src/TTree.cxx b/tree/tree/src/TTree.cxx; index bc23e6ef82..7bb57aa8e8 100644; --- a/tree/tree/src/TTree.cxx; +++ b/tree/tree/src/TTree.cxx; @@ -4564,18 +4564,12 @@ Int_t TTree::Fill(); // If above, close the current file and continue on a new file.; // Currently, the automatic change of file is restricted; // to the case where the tree is in the top level directory.; - if (!fDirectory); - return nbytes;; + if (fDirectory); + if (TFile *file = fDirectory->GetFile()); + if ((TDirectory *)file == fDirectory && (file->GetEND() > fgMaxTreeSize)); + ChangeFile(file);; ; - TFile* file = fDirectory->GetFile();; - if (file && (file->GetEND() > fgMaxTreeSize)); - if (fDirectory == (TDirectory *)file); - ChangeFile(file);; -; - if (nerror); - return -1;; -; - return nbytes;; + return nerror ? -1 : nbytes;; }; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1058#issuecomment-332520137:531,error,errors,531,https://root.cern,https://github.com/root-project/root/pull/1058#issuecomment-332520137,1,['error'],['errors']
Availability,"Also I am confused about the fact that `TBranch::GetEntriesSerialized` will simply ignore destructive DeserializeType as well. ```; 1512 if (R__unlikely(leaf->GetDeserializeType() == TLeaf::DeserializeType::kDestructive)) {; 1513 Error(""GetEntriesSerialized"", ""Encountered a branch with destructive deserialization; failing.\n"");; 1514 return -1;; ```. so my question remains: how can I bulk read a bunch of `int`s?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6520#issuecomment-703566990:230,Error,Error,230,https://root.cern,https://github.com/root-project/root/issues/6520#issuecomment-703566990,1,['Error'],['Error']
Availability,Also backports for 6.20 and 6.18 are required - original error message was about for v6.18.04,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5209#issuecomment-603294300:57,error,error,57,https://root.cern,https://github.com/root-project/root/pull/5209#issuecomment-603294300,1,['error'],['error']
Availability,Also it doesn't change performance at all with cling modules. (Also with non-modules); Without this patch:; ```; Processing /home/yuka/CERN/ROOT/memory.C...; cpu time = 0.233852 seconds; sys time = 0.092215 seconds; res memory = 210.836 Mbytes; vir memory = 346.195 Mbytes; ```. With this patch:; ```; Processing /home/yuka/CERN/ROOT/memory.C... ; cpu time = 0.248781 seconds ; sys time = 0.067224 seconds ; res memory = 210.258 Mbytes ; vir memory = 345.773 Mbytes ; ```. So I think there is not downside for this,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2591#issuecomment-422947446:497,down,downside,497,https://root.cern,https://github.com/root-project/root/pull/2591#issuecomment-422947446,1,['down'],['downside']
Availability,Also now verify all downloaded software before installing.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1253:20,down,downloaded,20,https://root.cern,https://github.com/root-project/root/pull/1253,1,['down'],['downloaded']
Availability,Also provide improved solution for THttpServer shutdown - handling of websocket close done async and does not block civetweb threads. Improves reliability of cleanup process.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1371:143,reliab,reliability,143,https://root.cern,https://github.com/root-project/root/pull/1371,1,['reliab'],['reliability']
Availability,Also reported on the forum:. https://root-forum.cern.ch/t/error-building-root-at-xrootd/51065/3. that the failure is still there on 6.26/06.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10578#issuecomment-1206284635:58,error,error-building-root-at-xrootd,58,https://root.cern,https://github.com/root-project/root/issues/10578#issuecomment-1206284635,2,"['error', 'failure']","['error-building-root-at-xrootd', 'failure']"
Availability,Also see https://root-forum.cern.ch/t/cmake-configuration-error-since-76f472aca2/25576,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/777#issuecomment-315741208:58,error,error-since-,58,https://root.cern,https://github.com/root-project/root/pull/777#issuecomment-315741208,1,['error'],['error-since-']
Availability,"Also support the `Offset(""bin"")` feature in simultaneous fits with the; legacy evaluation backend (e.g., the old test statistic classes). In this case, The top-level `RooNLLVar` actually doesn't do anything; but contains pointers to the NLLs for the individual channels. The; function call to enable the offsetting must be delegated to those. A unit test that covers this is also implemented. Note that for the new CPU evaluation backend, this is working already. A second commit in this PR is fixing a copy-paste error in the functions that define the evaluation backend.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13890:514,error,error,514,https://root.cern,https://github.com/root-project/root/pull/13890,1,['error'],['error']
Availability,"Also weird, if i move the dask part out of the main function into the global scope, we get a runtime error about not properly spawned processes in the multiprocessing backend. This is independent of the number of returned ROOT objects in `foo`. ```python; from dask.distributed import Client, LocalCluster. def foo(n):; import ROOT; h1 = ROOT.TH1F(); h2 = ROOT.TH1F(); return h1, h2. cluster = LocalCluster(); client = Client(cluster); future = client.map(foo, range(4)); client.gather(future); ```. ```; RuntimeError: ; An attempt has been made to start a new process before the; current process has finished its bootstrapping phase. This probably means that you are not using fork to start your; child processes and you have forgotten to use the proper idiom; in the main module:. if __name__ == '__main__':; freeze_support(); ... The ""freeze_support()"" line can be omitted if the program; is not going to be frozen to produce an executable.; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6765#issuecomment-723059676:101,error,error,101,https://root.cern,https://github.com/root-project/root/issues/6765#issuecomment-723059676,1,['error'],['error']
Availability,"Also, `ctest -R minuit2` gives me; ```; 82% tests passed, 3 tests failed out of 17. Label Time Summary:; tutorial = 5.25 sec*proc (3 tests). Total Test time (real) = 19.52 sec. The following tests FAILED:; 	 80 - minuit2-Quad1FMain (Failed); 	 90 - minuit2-ReneTest (Failed); 	 93 - minuit2-testMinimizer (Failed); Errors while running CTest; ```; However, these may not be due to your changes. The first of the 3 tests above also fails on the master branch for me. The error is similar between tests:; ```; Start 80: minuit2-Quad1FMain. 80: Test command: /usr/bin/cmake ""-DCMD=/home/amadio/build/gcc7.3/math/minuit2/test/Quad1FMain"" ""-DSYS=/home/amadio/build/gcc7.3"" ""-P"" ""/home/amadio/src/root/cmake/modules/RootTestDriver.cmake""; 80: Test timeout computed to be: 1500; 80: Info --> MPIProcess::StartMPI: Start MPI on #0 processor; 80: Error --> MPIProcess::MPIProcess: more processors than elements!; 80: application called MPI_Abort(MPI_COMM_WORLD, -1) - process 0; 80: [unset]: write_line error; fd=-1 buf=:cmd=abort exitcode=-1; 80: :; 80: system msg for write_line failure : Bad file descriptor; 80: Info --> MPITerminate:: End MPI on #0 processor; 80: CMake Error at /home/amadio/src/root/cmake/modules/RootTestDriver.cmake:232 (message):; 80: error code: 255; 80: ; 80: ; 1/1 Test #80: minuit2-Quad1FMain ...............***Failed 0.03 sec; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1689#issuecomment-369928210:315,Error,Errors,315,https://root.cern,https://github.com/root-project/root/pull/1689#issuecomment-369928210,7,"['Error', 'error', 'failure']","['Error', 'Errors', 'error', 'failure']"
Availability,"Also, check this out:; https://codecogs.com/library/maths/special/bessel/kelvin.php; > Source code is available when you buy a [Commercial](https://codecogs.com/pages/licences/com.php) licence. And then in the commercial license it says:; > You **cannot** distribute source code behind the CodeCogs Software. By the way, other components of codecogs have different license options, for example [this one](https://www.codecogs.com/library/engineering/fluid_mechanics/waves/dispersion.php):; > Source code is available when you agree to a [GP Licence](https://www.codecogs.com/pages/licences/gpl.php) or buy a [Commercial Licence](https://www.codecogs.com/pages/licences/com.php). Maybe the Kelvin functions were also possible to be used with the GPL in the past, but at least now this doesn't seem to be possible, as only the commercial license gives you access to the source code. With this, I would also come to the conclusion that that the code needs to be removed ASAP.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13688#issuecomment-1729420363:102,avail,available,102,https://root.cern,https://github.com/root-project/root/pull/13688#issuecomment-1729420363,2,['avail'],['available']
Availability,"Also, throw an exception with a helpful error message if the user attempts to use `RooFit::Slice()` with a comma-separates list of category states, which is not supported. This addresses a question on the forum:; https://root-forum.cern.ch/t/plotting-two-categories-of-simultaneous-fit-in-a-single-plot/56250",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13637:40,error,error,40,https://root.cern,https://github.com/root-project/root/pull/13637,1,['error'],['error']
Availability,"Alternatively this could be steered by whether the build is done with implicit multithreading enabled, rather than directly checking the availability of TBB (since this seems to not be sufficient in the windows case) Thoughts?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7260#issuecomment-798941294:137,avail,availability,137,https://root.cern,https://github.com/root-project/root/pull/7260#issuecomment-798941294,1,['avail'],['availability']
Availability,Alternatively you can run `valgrind` to get more information on this kind of failure:; ```; valgrind --suppressions=$ROOTSYS/etc/valgrind-root.supp --log-file=val.01.log myexecutable myargs; ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12370#issuecomment-1446778005:77,failure,failure,77,https://root.cern,https://github.com/root-project/root/issues/12370#issuecomment-1446778005,1,['failure'],['failure']
Availability,"Although these failures are worrying in a release branch, they are not related to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6017#issuecomment-656529150:15,failure,failures,15,https://root.cern,https://github.com/root-project/root/pull/6017#issuecomment-656529150,1,['failure'],['failures']
Availability,"Am skeptical this could ever have worked even in older releases, because looking at the code I see the method ""MakeSingleChannelWorkspace"" where the measurement object is passed, and therefore it is assuming any parameter in the constant list *must* be present in the channel???. Tomas do you get the same error message about ""cannot find the variable"" in 6.28, but it succeeds? It might be blind luck that it did. . If so the fix is a simple one to just skip over said variable if its not found in the channel.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14225#issuecomment-1858155447:306,error,error,306,https://root.cern,https://github.com/root-project/root/issues/14225#issuecomment-1858155447,2,['error'],['error']
Availability,"An attempt to build ROOT against the system Python3 on MacOS11/12 results in a build with no errors, but with some test failures:. https://lcgapp-services.cern.ch/root-jenkins/job/root-nightly-master/LABEL=mac12,SPEC=soversion,V=master/3084/. The following is the relevant error:. ```; cling::DynamicLibraryManager::loadLibrary(): dlopen(/Users/sftnight/build/jenkins/night/LABEL/mac12/SPEC/soversion/V/master/build/lib/libROOTTPython.6.25.02.so, 0x0009): Library not loaded: @rpath/Python3.framework/Versions/3.8/Python3; ```. According to:. ```; $ otool -l lib/libROOTTPython.so | grep -C2 Python3; cmd LC_LOAD_DYLIB; cmdsize 72; name @rpath/Python3.framework/Versions/3.8/Python3 (offset 24); time stamp 2 Thu Jan 1 01:00:02 1970; current version 3.8.0; --; cmd LC_RPATH; cmdsize 104; path /Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib (offset 12); Load command 20; cmd LC_FUNCTION_STARTS; ```. RPATH is set, but the dylib load directive doesn't match.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9793:93,error,errors,93,https://root.cern,https://github.com/root-project/root/issues/9793,3,"['error', 'failure']","['error', 'errors', 'failures']"
Availability,"An empty list of linked libraries was interpreted as failure to extract; the list of linked libraries; the default ""-lCore -lRint..."" was taken instead.; When running python, no libs show up as linked. That caused ""-lRint"" to be claimed; as linked, which was preventing gSystem.Load(""libRint"") within python, claiming; that it is already loaded (as it is linked). Instead, if the library signaling the end of linked libraries is seen, and so far; no libraries have been found as linked, set the list-of-linked-libraries to "" "",; i.e. not empty, triggering the ""success"" path in TSystem::GetLibraries(), and correctly; reporting the linked libraries. This fixes JupyROOT-cppcompleter-doctest, JupyROOT-ROOT-kernel-notebook not finding; TTabCom::TTabCom() because loadling libRint was mistakenly a no-op.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5864:53,failure,failure,53,https://root.cern,https://github.com/root-project/root/pull/5864,1,['failure'],['failure']
Availability,An error when using Minuit in tutorial_tmva_TMVARegression,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6773:3,error,error,3,https://root.cern,https://github.com/root-project/root/issues/6773,1,['error'],['error']
Availability,"Analysis/MemorySSA.h(423,1): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\clang\lib\CodeGen\CGDebugInfo.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm-project\llvm\tools\clang\lib\CodeGen\obj.clangCodeGen.vcxproj] ; - [2024-02-16T18:41:23.079Z] C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\clang\include\clang/AST/ExprCXX.h(3132,1): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\clang\lib\CodeGen\CGDeclCXX.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm-project\llvm\tools\clang\lib\CodeGen\obj.clangCodeGen.vcxproj] ; - [2024-02-16T18:41:23.079Z] C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstddef(111): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\clang\lib\AST\DeclOpenMP.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm-project\llvm\tools\clang\lib\AST\obj.clangAST.vcxproj] ; - [2024-02-16T18:41:23.079Z] C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\llvm\include\llvm/ADT/SmallVector.h(852,1): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\clang\lib\CodeGen\CGCUDARuntime.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm-project\llvm\tools\clang\lib\CodeGen\obj.clangCodeGen.vcxproj] ; - [2024-02-16T18:41:23.079Z] C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\llvm\include\llvm/ADT/APInt.h(1361,1): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\clang\lib\AST\ExprConcepts",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14747#issuecomment-1949130756:1276,error,error,1276,https://root.cern,https://github.com/root-project/root/pull/14747#issuecomment-1949130756,1,['error'],['error']
Availability,"Analysis\AnalysisDeclContext.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\tools\clang\lib\Analysis\obj.clangAnalysis.vcxproj] ; - [2022-02-09T17:22:24.221Z] C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\include\llvm/IR/Instruction.h(763,14): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\lib\Transforms\InstCombine\InstCombineLoadStoreAlloca.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\lib\Transforms\InstCombine\LLVMInstCombine.vcxproj] ; - [2022-02-09T17:22:24.221Z] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(687,5): error MSB8071: Cannot parse tool output 'C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\include\llvm/ADT/DenseMap.h(152,1): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\lib\CodeGen\PatchableFunction.cpp)' with regex '^In file included from .*$': Exception of type 'System.OutOfMemoryException' was thrown. [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\lib\CodeGen\LLVMCodeGen.vcxproj] ; - [2022-02-09T17:22:24.748Z] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\tuple(610,1): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\lib\CodeGen\SelectionDAG\InstrEmitter.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\lib\CodeGen\SelectionDAG\LLVMSelectionDAG.vcxproj] ; - [2022-02-09T17:22:24.748Z] C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\include\llvm/CodeGen/MachineMemOperand.h(115,1): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullreq",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8728#issuecomment-1034017013:3872,error,error,3872,https://root.cern,https://github.com/root-project/root/pull/8728#issuecomment-1034017013,1,['error'],['error']
Availability,And FYI I notified @guitargeek about the RooStat failures on Windows (looks like race conditions in utility file creation),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14059#issuecomment-1813960564:49,failure,failures,49,https://root.cern,https://github.com/root-project/root/pull/14059#issuecomment-1813960564,1,['failure'],['failures']
Availability,And I agree with your changes from Warnings to Error and Warnings to Info in bcd7ade,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6705#issuecomment-732289782:47,Error,Error,47,https://root.cern,https://github.com/root-project/root/pull/6705#issuecomment-732289782,1,['Error'],['Error']
Availability,"And I`ll shoot that theory down myself .... from failed jobs (with Debug); from 18th Dec. BNL storage is IPv4 only, with many hosts.; $ host dcgftp.usatlas.bnl.gov; dcgftp.usatlas.bnl.gov has address 192.12.15.228; dcgftp.usatlas.bnl.gov has address 192.12.15.242; ... [dcgftp.usatlas.bnl.gov:1096 #0.0] Attempting connection to; [::ffff:10.42.38.56]:1096. Romania storage has both but nodes only IPv4, so like Tokyo; $ host tbit00.nipne.ro; tbit00.nipne.ro has address 81.180.86.115; tbit00.nipne.ro has IPv6 address 2001:b30:4202:100::19. [tbit00.nipne.ro:1094] Found 1 address(es): [::ffff:81.180.86.115]:1094. EOS has both, as do the nodes, but it still fails.; [eosatlas.cern.ch:1094] Found 2 address(es):; [::ffff:128.142.32.205]:1094, [2001:1458:301:62::100:9]:1094; [2020-12-18 15:22:25.587803 +0100][Debug ][AsyncSock ]; [eosatlas.cern.ch:1094 #0.0] Attempting connection to; [2001:1458:301:62::100:9]:1094. Cheers,; Rod. On Mon, 11 Jan 2021 at 14:57, Rodney Walker <; rodney.walker@physik.uni-muenchen.de> wrote:. > Hi,; > saw it, and already tried to reproduce. Naturally it works fine on lxplus,; > using the same container commands.; > You added XRD_LOGLEVEL=Debug to previous jobs already, e.g.; > https://bigpanda.cern.ch/job?pandaid=4925837464; >; > [lcg-se01.icepp.jp:1094] Found 1 address(es): [::ffff:157.82.116.96]:1094; >; > On lxplus I see; > [lcg-fs118.icepp.jp:1095] Found 2 address(es):; > [::ffff:157.82.117.118]:1095, [2404:d540:1:589:2:3:1:118]:1095; > and then it uses the IPv6 one; > [lcg-fs118.icepp.jp:1095 #0.0] Attempting connection to; > [2404:d540:1:589:2:3:1:118]:1095; >; > It is desperation, but I wonder if it fails on nodes not supporting IPv6; > in combination with storage that does.; >; > Cheers,; > Rod.; >; > On Mon, 11 Jan 2021 at 14:46, rdschaffer <notifications@github.com> wrote:; >; >> OK, pilot grid job fails at BNL (pilot job is the first test job to see; >> how many files to read and to test the job, I believe):; >>; >>; >> https://bigpanda.cer",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6948#issuecomment-757978504:27,down,down,27,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-757978504,1,['down'],['down']
Availability,"And after I revert d8383fcb0a66e33ea7a8c8c78032d21f062e4f22, I get this:. ```; [ 67%] Generating G__MathCore.cxx, ../../lib/libMathCore_rdict.pcm, ../../lib/libMathCore.rootmap; Failed to deduce type for 'static std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> ROOT::Internal::TTypeNameExtraction<T>::Get() [with T = ROOT::Detail::TTypedIter<TBaseClass>]'; Deduced type is 'T'; Child aborted; gmake[2]: *** [math/mathcore/CMakeFiles/G__MathCore.dir/build.make:213: math/mathcore/G__MathCore.cxx] Error 1; gmake[1]: *** [CMakeFiles/Makefile2:19283: math/mathcore/CMakeFiles/G__MathCore.dir/all] Error 2; gmake: *** [Makefile:163: all] Error 2; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1389#issuecomment-347631681:526,Error,Error,526,https://root.cern,https://github.com/root-project/root/pull/1389#issuecomment-347631681,3,['Error'],['Error']
Availability,And discussing with @vgvassilev the failures on mac1014/python3,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5856#issuecomment-643193794:36,failure,failures,36,https://root.cern,https://github.com/root-project/root/pull/5856#issuecomment-643193794,1,['failure'],['failures']
Availability,And error in `projectroot.roottest.root.io.json.roottest_root_io_json_make` caused by new member in TH1 class,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1503#issuecomment-357039889:4,error,error,4,https://root.cern,https://github.com/root-project/root/pull/1503#issuecomment-357039889,1,['error'],['error']
Availability,"And interestingly enough, if I comment out the `clingArgsStorage.push_back(""-O1"");` in `TCling.cxx`, the test failures on Windows `x64` decrease from about 30 down to 13",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9809#issuecomment-1046847415:110,failure,failures,110,https://root.cern,https://github.com/root-project/root/issues/9809#issuecomment-1046847415,2,"['down', 'failure']","['down', 'failures']"
Availability,"And once again, github refuses tar files and silently disappears zip files.; It is again available on lxplus at ~ssnyder/fwddict-crash.tar. Here's the contents:. setup:; ```; export LCG_ROOT=/cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat; export LCG_CONFIG=x86_64-el9-gcc13-dbg; . $LCG_ROOT/ROOT/v6-28-00-patches/$LCG_CONFIG/ROOT-env.sh. export LD_LIBRARY_PATH=build:$LD_LIBRARY_PATH; ```. build.sh:; ```; #!/bin/sh. #ATEAM-942. mkdir -p build. genreflex AthContainers/AthContainersDict.h -o build/AthContainersDict.cc -IAthContainers -s AthContainers/selection.xml --rootmap=build/AthContainersDict.rootmap --rootmap-lib=libAthContainersDict.so --std=c++20; g++ --std=c++20 -c -fPIC -g -o build/AthContainersDict.o build/AthContainersDict.cc -I$ROOTSYS/include ; g++ -g -shared -o build/libAthContainersDict.so build/AthContainersDict.o -L$ROOTSYS/lib -lCore. genreflex xAODTracking/xAODTrackingDict.h -o build/xAODTrackingDict.cc -IAthContainers -s xAODTracking/selection.xml --rootmap=build/xAODTrackingDict.rootmap --rootmap-lib=libxAODTrackingDict.so --std=c++20; g++ --std=c++20 -c -fPIC -g -o build/xAODTrackingDict.o build/xAODTrackingDict.cc -I$ROOTSYS/include ; g++ -g -shared -o build/libxAODTrackingDict.so build/xAODTrackingDict.o -L$ROOTSYS/lib -lCore. genreflex xAODEgamma/xAODEgammaDict.h -o build/xAODEgammaDict.cc -IAthContainers -s xAODEgamma/selection.xml --rootmap=build/xAODEgammaDict.rootmap --rootmap-lib=libxAODEgammaDict.so --std=c++20; g++ --std=c++20 -c -fPIC -g -o build/xAODEgammaDict.o build/xAODEgammaDict.cc -I$ROOTSYS/include ; g++ -g -shared -o build/libxAODEgammaDict.so build/xAODEgammaDict.o -L$ROOTSYS/lib -lCore; ```. test.py:; ```; import ROOT; getattr( ROOT, 'DataVector<TrackParticle_v1>', None ); getattr( ROOT, 'DataVector<Egamma_v1>', None ); ```. AthContainers/AthContainersDict.h:; ```; #include ""AthContainers/DataVector.h""; ```. AthContainers/DataVector.h; ```; #ifndef ATHCONTAINERS_DATAVECTOR_H; #define ATHCONTAINERS_DATAVECTOR_H. class AuxEle",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14186#issuecomment-1841600992:89,avail,available,89,https://root.cern,https://github.com/root-project/root/issues/14186#issuecomment-1841600992,1,['avail'],['available']
Availability,"And then call ""make"".; Let me know if you find further errors. Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9966#issuecomment-1076358158:55,error,errors,55,https://root.cern,https://github.com/root-project/root/pull/9966#issuecomment-1076358158,1,['error'],['errors']
Availability,"And we can combine both issues with the following code:. ```python; from dask.distributed import Client, LocalCluster. def foo(n):; import ROOT; h1 = ROOT.TH1F(); h2 = ROOT.TH1F(); return h1, h2. def main():; cluster = LocalCluster(); client = Client(cluster); future = client.map(foo, range(4)); client.gather(future). # If we do this: Segfault; if __name__ == '__main__':; main(). # If we do that: Runtime error; main(); ```. So dask does some weird import of the script itself in the worker processes?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6765#issuecomment-723061104:408,error,error,408,https://root.cern,https://github.com/root-project/root/issues/6765#issuecomment-723061104,1,['error'],['error']
Availability,"And when building with gcc and only asan like:; ```; cmake -DCMAKE_BUILD_TYPE=""Release"" -Dasan=ON -Dtesting=ON -DPYTHON_EXECUTABLE=/usr/bin/python3 /home/linev/git/webgui ; ```; I getting failure by simply starting ROOT: . ```; ==11405==ERROR: AddressSanitizer: use-after-poison on address 0x621000160c68 at pc 0x7fae6dbe9aa1 bp 0x7fff179941b0 sp 0x7fff179941a8; READ of size 8 at 0x621000160c68 thread T0; #0 0x7fae6dbe9aa0 in clang::LookupResult::configure() (/home/linev/build/asan/lib/libCling.so+0x9be9aa0) (BuildId: b992d84f780d9cdfaac57feecd814f7d11e56300); #1 0x7fae66c6d0ec in clad::plugin::CladPlugin::CheckBuiltins() [clone .part.0] (/home/linev/build/asan/lib/libCling.so+0x2c6d0ec) (BuildId: b992d84f780d9cdfaac57feecd814f7d11e56300); ```. Full error output: [start_log.txt](https://github.com/root-project/root/files/10519690/start_log.txt)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11629#issuecomment-1406573290:188,failure,failure,188,https://root.cern,https://github.com/root-project/root/issues/11629#issuecomment-1406573290,5,"['ERROR', 'error', 'failure']","['ERROR', 'error', 'failure']"
Availability,And when does the error appear?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10656#issuecomment-1148722764:18,error,error,18,https://root.cern,https://github.com/root-project/root/pull/10656#issuecomment-1148722764,1,['error'],['error']
Availability,"Another compilation failure is caused by this error:; ```cc; [1/1065] Building CXX object core/base/CMakeFiles/Base.dir/src/TString.cxx.o ; FAILED: core/base/CMakeFiles/Base.dir/src/TString.cxx.o ; /usr/bin/g++ -I/builddir/root-6.24.06/core/base/inc -I/builddir/root-6.24.06/build/builtins/pcre/PCRE-prefix/src/PCRE-build -I/builddir/root-6.24.06/core/base/res -I/builddir/root-6.24.06/co; re/foundation/res -I/builddir/root-6.24.06/core/clib/inc -I/builddir/root-6.24.06/core/meta/inc -I/builddir/root-6.24.06/core/cont/inc -I/builddir/root-6.24.06/core/thread/inc -I/builddir/roo; t-6.24.06/core/gui/inc -I/builddir/root-6.24.06/core/foundation/inc -I/builddir/root-6.24.06/build/ginclude -DNDEBUG -fstack-clash-protection -D_FORTIFY_SOURCE=2 -mtune=generic -O2 -fdiagnost; ics-color=always -std=c++14 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -DNDEBUG -fPIC -std=c++14 -MD -MT core/base/CMak; eFiles/Base.dir/src/TString.cxx.o -MF core/base/CMakeFiles/Base.dir/src/TString.cxx.o.d -o core/base/CMakeFiles/Base.dir/src/TString.cxx.o -c /builddir/root-6.24.06/core/base/src/TString.cxx ; In file included from /builddir/root-6.24.06/core/base/src/TString.cxx:44: ; /builddir/root-6.24.06/core/base/src/TString.cxx: In member function 'void TString::FormImp(const char*, __va_list_tag*)': ; /builddir/root-6.24.06/core/base/inc/Varargs.h:48:35: error: '__va_copy' was not declared in this scope; did you mean 'va_copy'? 48 | # define R__VA_COPY(to, from) __va_copy((to), (from)) ; | ^~~~~~~~~ ; /builddir/root-6.24.06/core/base/src/TString.cxx:2269:4: note: in expansion of macro 'R__VA_COPY'; 2269 | R__VA_COPY(sap, ap); ; | ^~~~~~~~~~ ; /builddir/root-6.24.06/core/base/src/TString.cxx: In function 'char* SlowFormat(const char*, __va_list_tag*, int)':; /builddir/root-6.24.06/core/base/inc/Varargs.h:48:35: error: '__va_copy' was not declared in this scope; did you mean 'va_copy'? ; 48 | # define R__VA_COPY(to, from) __va_cop",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9253#issuecomment-962883062:20,failure,failure,20,https://root.cern,https://github.com/root-project/root/issues/9253#issuecomment-962883062,2,"['error', 'failure']","['error', 'failure']"
Availability,"Another little change, this makes some nice features available in python such as ```""var"" in collection```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8177:53,avail,available,53,https://root.cern,https://github.com/root-project/root/pull/8177,1,['avail'],['available']
Availability,"Another reproducer:. ```; ~ root -l; root [0] Long32_t ba;; ROOT_prompt_0:1:9: error: expected ';' after expression; Long32_t ba;; ^; ;; ROOT_prompt_0:1:10: error: use of undeclared identifier 'ba'; Long32_t ba;; ^; root [1] Long64_t ba;; root.exe: ../../../../../../../../root_dbg/interpreter/llvm/src/tools/clang/lib/Sema/SemaDecl.cpp:12576: clang::Decl* clang::Sema::ActOnFinishFunctionBody(clang::Decl*, clang::Stmt*, bool): Assertion `!Cleanup.exprNeedsCleanups() && ""Unaccounted cleanups in function""' failed.; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6439#issuecomment-702023276:79,error,error,79,https://root.cern,https://github.com/root-project/root/issues/6439#issuecomment-702023276,2,['error'],['error']
Availability,Another set of unrelated failures. @guitargeek can we move forward here?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14794#issuecomment-1978270191:25,failure,failures,25,https://root.cern,https://github.com/root-project/root/pull/14794#issuecomment-1978270191,1,['failure'],['failures']
Availability,"Another stack trace:; ```; Error in ROOT::AddClass(): adding class with no name when real name is N4ROOT8Internal34TCheckHashRecurveRemoveConsistencyE; Fatal in <TClassTable::Add>: Trying to add class with empty name to TClassTable; aborting; #0 0x00007f888f092cbe in __GI___waitpid (pid=32497, stat_loc=stat_loc; entry=0x7ffea63dbc28, options=options; entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:29; #1 0x00007f888f00938f in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148; #2 0x00007f88900a1c0f in TUnixSystem::StackTrace (this=0x7ef1) at /home/amadio/src/root/core/unix/src/TUnixSystem.cxx:2412; #3 0x00007f888ff780e8 in DefaultErrorHandler (level=32497, abort_bool=40, location=0x0, msg=0x7f888f092cbe <__GI___waitpid+46> ""H="") at /home/amadio/src/root/core/base/src/TError.cxx:192; #4 0x00007f888ff77f16 in ErrorHandler (level=32497, location=0x7ffea63dbc28 """", fmt=0x0, ap=0x7f888f092cbe <__GI___waitpid+46>) at /home/amadio/src/root/core/base/src/TError.cxx:251; #5 0x00007f888ff77b04 in Fatal (location=0x7ef1 <error: Cannot access memory at address 0x7ef1>, fmt=0x7ffea63dbc28 """") at /home/amadio/src/root/core/base/src/TError.cxx:350; #6 0x00007f888ffed889 in TClassTable::Add (cname=0x7ef1 <error: Cannot access memory at address 0x7ef1>, id=-17368, info=..., dict=0x7f888f092cbe <__GI___waitpid+46>, pragmabits=-1892108864) at /home/amadio/src/root/core/cont/src/TClassTable.cxx:347; #7 0x00007f888ffecd91 in ROOT::AddClass (cname=0x7ef1 <error: Cannot access memory at address 0x7ef1>, id=-17368, info=..., dict=0x7f888f092cbe <__GI___waitpid+46>, pragmabits=-1892108864) at /home/amadio/src/root/core/cont/src/TClassTable.cxx:751; #8 0x00007f888ffecb94 in TClassTable::TClassTable (this=0x7ef1) at /home/amadio/src/root/core/cont/src/TClassTable.cxx:236; #9 0x00007f888fe70e34 in TROOT::InitInterpreter (this=0x7ef1) at /home/amadio/src/root/core/base/src/TROOT.cxx:2020; #10 0x00007f888fe6fffc in ROOT::Internal::GetROOT2 () at /home/amadio/src/root/core/base/src",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1389#issuecomment-347620537:27,Error,Error,27,https://root.cern,https://github.com/root-project/root/pull/1389#issuecomment-347620537,2,['Error'],"['Error', 'ErrorHandler']"
Availability,"Another very simple example, less serious because at least it fails, but still problematic because it makes debugging very difficult. test.h:; ```cpp; template <typename T>; int some_template_function(const T &x) {; return x.size();; }; ```. test.py:; ```python; import ROOT. ret = ROOT.gInterpreter.Declare('#include ""test.h""'). print(""declare ret"", ret). res0 = ROOT.some_template_function(ROOT.std.vector[""double""]()); print(""res0"", res0). res1 = ROOT.some_template_function(0.0); print(""res1"", res1); ```. output:; ```; declare ret True; res0 0; Traceback (most recent call last):; File ""/home/b/bendavid/pyrootdebug2/test.py"", line 10, in <module>; res1 = ROOT.some_template_function(0.0); TypeError: Template method resolution failed:; int ::some_template_function(const vector<double>& x) =>; TypeError: could not convert argument 1; Failed to instantiate ""some_template_function(double)""; ```; ; Compare to the same in c++ ; ```; #include ""test.h"". const int res = some_template_function(0.0);; ```; ; Then the output of clang++ with nice error message is:; ```; In file included from test.cpp:1:; ./test.h:3:11: error: member reference base type 'const double' is not a structure or union; return x.size();; ~^~~~~; test.cpp:3:17: note: in instantiation of function template specialization 'some_template_function<double>' requested here; const int res = some_template_function(0.0);; ^; 1 error generated.; ```. So in the pyroot case all of the useful compiler errors are suppressed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11854#issuecomment-1410720055:1047,error,error,1047,https://root.cern,https://github.com/root-project/root/issues/11854#issuecomment-1410720055,8,['error'],"['error', 'errors']"
Availability,Any ideas on the remaining windows failure would also be welcome (it doesn't happen on linux and I don't have a windows setup to test with at the moment),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12449#issuecomment-1479783119:35,failure,failure,35,https://root.cern,https://github.com/root-project/root/pull/12449#issuecomment-1479783119,1,['failure'],['failure']
Availability,"Apologies for the brevity before. In my attempts to set the alignment differently on the first and last labels, I found only one value seemed to be set. On trying to make a minimal reproducer, I'm finding that for certain, changing the LabelFont is not working if all labels are not set correctly. ```; python; >>> import ROOT; >>> h = ROOT.TH1D(""h"", """", 5, 0, 5); >>> for bin in range(h.GetXaxis().GetNbins()+1):; ... h.GetXaxis().ChangeLabel(bin, 10*bin, 4*bin, -1, -1, -1, """"); ...; >>> h.Draw(); Info in <TCanvas::MakeDefCanvas>: created default TCanvas with name c1; >>> h = ROOT.TH1D(""h"", """", 5, 0, 5); for bin in range(11):; ... if bin < 2:; ... align = 11; ... elif bin > 7:; ... align = 12; ... else:; ... align = 13; ... h.GetXaxis().ChangeLabel(bin, 15*bin, .1, align, -1, 43, """"); ...; >>> h.Draw(); ```; Produced the attached axis, so the rotations are working, but a separate test suggests that alignments are not when the rotation is different than 0 (setting the rotation to 90 seems to produce identical alignment for all labels, as far as I can tell). Setting the pixel size to e.g. 10, of course, blows up those labels to greater-than-canvas size, they're being interpreted as fractions still. That is actually related to a problem I had a few days ago, accidentally passing fractional instead of integer (>1) values for size when the font precision is changed to absolute scale, but I'm not sure it's worth a warning or error message when it's being set. So, separate from the documentation: what is the appropriate way to find the number of labels? Trying to use the TAxis::GetLabels() method didn't lead me anywhere, maybe there's a good example somewhere though; <img width=""694"" alt=""ChangeLabels"" src=""https://user-images.githubusercontent.com/38217274/161010205-85424185-a64a-4829-992e-1982f16588d5.png"">; ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10279#issuecomment-1084252582:1440,error,error,1440,https://root.cern,https://github.com/root-project/root/issues/10279#issuecomment-1084252582,1,['error'],['error']
Availability,"Apologies for the delay. Turning on LLVM debug really increases the build size, so I had to turn my test setup upside down. In any case, building with LLVM debug in particular triggers an [assert](https://github.com/root-project/root/blob/a88664672571c352f77b9d267e58600cbf9a3b78/interpreter/llvm/src/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp#L479) to fail before the segfault happens, both with and without runtime_cxxmodules, and both before and after the commit I had identified before:; ```console; make[2]: Entering directory '/data/root-build-runtime_cxxmodules-ON'; [100%] Generating lib/modules.idx; cd /mnt/root-build-runtime_cxxmodules-ON/lib && /usr/bin/cmake -E remove -f modules.idx modules.timestamp; cd /mnt/root-build-runtime_cxxmodules-ON/lib && LD_LIBRARY_PATH=/mnt/root-build-runtime_cxxmodules-ON/lib: ROOTIGNOREPREFIX=1 ROOT_HIST=0 /mnt/root-build-runtime_cxxmodules-ON/bin/root.exe -l -q -b; resolveAArch64Relocation, LocalAddress: 0x55849bc010 FinalAddress: 0x55849bc010 Value: 0x7f7a5f8eb000 Type: 0x113 Addend: 0x0; root.exe: /mnt/root/interpreter/llvm/src/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp:488: void llvm::RuntimeDyldELF::resolveAArch64Relocation(const llvm::SectionEntry&, uint64_t, uint64_t, uint32_t, int64_t): Assertion `isInt<33>(Result) && ""overflow check failed for relocation""' failed.; Aborted (core dumped); make[2]: *** [CMakeFiles/modules_idx.dir/build.make:145: lib/modules.idx] Error 134; make[2]: Leaving directory '/data/root-build-runtime_cxxmodules-ON'; make[1]: *** [CMakeFiles/Makefile2:7643: CMakeFiles/modules_idx.dir/all] Error 2; make[1]: Leaving directory '/data/root-build-runtime_cxxmodules-ON'; make: *** [Makefile:156: all] Error 2; make: Leaving directory '/data/root-build-runtime_cxxmodules-ON'; ```; (The same happens with runtime_cxxmodules=OFF, just with different addresses.). The resolveAArch64Relocation diagnostic output is added by (since I only wanted debugging for the failing assert):; ```diff; diff --git ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13845#issuecomment-1791689926:118,down,down,118,https://root.cern,https://github.com/root-project/root/issues/13845#issuecomment-1791689926,1,['down'],['down']
Availability,"Apologies for the late reply.; It is true these hard-coded conditions look to me arbitrary and they can be dropped. ; they were introduced many years ago only in the ROOT implementation, see ; https://github.com/root-project/root/commit/3f944083fe77f0417904ad3180fb71eb846d4cc8; but they are not part of the original CERNLIB code.; In addition, some years ago we have added the possibility to use both the relative and the absolute tolerance, see line 338 (before only the relative tolerance was used). ; ```; if ( ( relerr < epsrel || abserr < epsabs ) && ifncls >= minpts) fStatus = 0; ; ```. With these changes there is really no need to maintain these lines and we can revert this old commit.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11826#issuecomment-1794987208:432,toler,tolerance,432,https://root.cern,https://github.com/root-project/root/pull/11826#issuecomment-1794987208,2,['toler'],['tolerance']
Availability,"Apologies, I said something in error. All the aforementioned tests can be found successfully running in the CI. I think we are dealing with a difference between the container setup of the CI and the local setup.; @pcanal could you double-check your setup against the one of the container (see [here](https://github.com/root-project/root-ci-images/blob/main/alma9/packages.txt) and the requirements.txt file)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16720#issuecomment-2424221788:31,error,error,31,https://root.cern,https://github.com/root-project/root/issues/16720#issuecomment-2424221788,1,['error'],['error']
Availability,"Apologies, rebasing the branch introduced some errors in using the Python environment in the SOFIE Keras test. I have fixed them now, it should work.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11055#issuecomment-1201425504:47,error,errors,47,https://root.cern,https://github.com/root-project/root/pull/11055#issuecomment-1201425504,1,['error'],['errors']
Availability,"Apparently it is the test itself that is not runnable a second time :(:(; ```; jupyter-pcanal-rootdevel:quick-devel pcanal$ ctest -R gtest-tmva-pymva-TestRModelParserPyTorch; Test project /home/pcanal/root_working/build/quick-devel; Start 349: gtest-tmva-pymva-TestRModelParserPyTorch; 1/1 Test #349: gtest-tmva-pymva-TestRModelParserPyTorch ... Passed 15.87 sec. 100% tests passed, 0 tests failed out of 1. Total Test time (real) = 16.13 sec; jupyter-pcanal-rootdevel:quick-devel pcanal$ ctest -R gtest-tmva-pymva-TestRModelParserPyTorch; Test project /home/pcanal/root_working/build/quick-devel; Start 349: gtest-tmva-pymva-TestRModelParserPyTorch; 1/1 Test #349: gtest-tmva-pymva-TestRModelParserPyTorch ...***Failed 9.29 sec. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 9.55 sec. The following tests FAILED:; 349 - gtest-tmva-pymva-TestRModelParserPyTorch (Failed); Errors while running CTest; Output from these tests are in: /home/pcanal/root_working/build/quick-devel/Testing/Temporary/LastTest.log; Use ""--rerun-failed --output-on-failure"" to re-run the failed cases verbosely.; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16719#issuecomment-2424123514:893,Error,Errors,893,https://root.cern,https://github.com/root-project/root/issues/16719#issuecomment-2424123514,2,"['Error', 'failure']","['Errors', 'failure']"
Availability,"Apparently xrootd 5.3.1 have a different sha256 hash (not clear how it could happened or if maybe in PR I was using old). Failure was detected on centos8 rootbench machine (https://lcgapp-services.cern.ch/root-jenkins/job/root-benchmark/):; ```; -- verifying file...; file='/data/sftnight/workspace/root-benchmark/BUILDTYPE/Release/COMPILER/default/LABEL/performance-cc8/SPEC/nortcxxmod/build/builtins/xrootd/XROOTD-prefix/src/v5.3.1.tar.gz'; -- SHA256 hash of; /data/sftnight/workspace/root-benchmark/BUILDTYPE/Release/COMPILER/default/LABEL/performance-cc8/SPEC/nortcxxmod/build/builtins/xrootd/XROOTD-prefix/src/v5.3.1.tar.gz; does not match expected value; expected: '1194ba435dc1e243f3cdb8273f6385407183799faf7622a582a828f4aff6807d'; actual: '0800b4c6444591a6514c5b81b2c4c79439875136ab2267ce4bed99cb94ead6e6'; -- Hash mismatch, removing...; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9103:122,Failure,Failure,122,https://root.cern,https://github.com/root-project/root/pull/9103,1,['Failure'],['Failure']
Availability,"Apple has switched to high-resolution timing for APFS, giving mu second resolution.; Ninja supports that since 1.9.0. BUT the binutils by Apple just write out zeros,; causing wrong time stamps and causing re-build events. CMake has worked around that by touching the library generated by Apple binutils,; to update its timestamp. That means:; On Apple (assuming Apple filesystem), with a recent Ninja, CMake has to be >= 3.14.4. This will be toned down to a WARNING message later - but for now, until we find the; CI nodes suffering from this, keep it as a FATAL_ERROR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6196:448,down,down,448,https://root.cern,https://github.com/root-project/root/pull/6196,1,['down'],['down']
Availability,"Applied clang-format fixes, other CI failures are unrelated, merging",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12972#issuecomment-1582778557:37,failure,failures,37,https://root.cern,https://github.com/root-project/root/pull/12972#issuecomment-1582778557,1,['failure'],['failures']
Availability,"Applies the clang-tidy suggestions from the following checks, which are the same as in the CMSSW `.clang-tidy`, only that the checks that replace copies with `const` references are removed:. ```; ,boost-use-to-string,; ,misc-definitions-in-headers,; ,misc-string-compare,; ,misc-uniqueptr-reset-release,; ,modernize-deprecated-headers,; ,modernize-make-shared,; ,modernize-make-unique,; ,modernize-use-bool-literals,; ,modernize-use-equals-delete,; ,modernize-use-nullptr,; ,modernize-use-override,; ,performance-inefficient-algorithm,; ,performance-inefficient-vector-operation,; ,performance-faster-string-find,; ,performance-move-const-arg,; ,readability-container-size-empty,; ,readability-redundant-string-cstr,; ,readability-static-definition-in-anonymous-namespace,; ,readability-uniqueptr-delete-release; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14011:694,redundant,redundant-string-cstr,694,https://root.cern,https://github.com/root-project/root/pull/14011,2,['redundant'],['redundant-string-cstr']
Availability,"Apply changes suggested in the `Notes` section of the `isspace` [C++ standard](https://en.cppreference.com/w/cpp/string/byte/isspace) This fixes the following error when reading the character `'ò' (-14 )` in stressgraphics:; ```; Debug Assertion Failed!; Program:; C:\root-dev\build\x86\debug_test\test\Debug\stressGraphics.exe; File: minkernel\crts\ucrt\src\appcrt\convert\isctype.cpp; Line 36; Expression c > = -1 && c < = 255; ```. From `isspace((Int_t)c)`, in `core\base\src\Stringio.cxx`, in `std::istream& TString::ReadToken(std::istream& strm)`:; ```; while ((wid == 0 || Length() < (Int_t)wid) &&; strm.get(c).good() && (hitSpace = isspace((Int_t)c)) == 0) {; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13584:159,error,error,159,https://root.cern,https://github.com/root-project/root/pull/13584,1,['error'],['error']
Availability,Apply fixes for when RooFitMore (MathMore) is not available,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4920:50,avail,available,50,https://root.cern,https://github.com/root-project/root/pull/4920,1,['avail'],['available']
Availability,Apply fixes for when RooFitMore (MathMore) is not available.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4919:50,avail,available,50,https://root.cern,https://github.com/root-project/root/pull/4919,1,['avail'],['available']
Availability,"Approx 10 years ago I create [file](https://root.cern/js/files/legends.root) with canvas from [`TLegend` docu](https://root.cern/doc/master/classTLegend.html). Now it is impossible to correctly read produced canvas and draw `TF1` object in it:. ```; root https://root.cern/js/files/legends.root -e ""legends->Draw()""; ```. Command produce a lot of error output like:; ```; Error in <TClingCallFunc::make_wrapper>: Failed to compile; ==== SOURCE BEGIN ====; #pragma clang diagnostic push; #pragma clang diagnostic ignored ""-Wformat-security""; __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))); extern ""C"" void __cf_1(void* obj, int nargs, void** args, void* ret); {; if (ret) {; new (ret) (double) (((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));; return;; }; else {; (void)(((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));; return;; }; }; #pragma clang diagnostic pop; ==== SOURCE END ====; Error in <prepareFuncPtr>: Compiled function pointer is null; Error in <TFormula::InputFormulaIntoCling>: Error compiling formula expression in Cling; Error in <TFormula::ProcessFormula>: Formula ""1000*TMath::Abs(sin(x)/x)"" is invalid !; Error in <TFormula::Eval>: Formula is invalid and not ready to execute ; TMath::Abs is unknown.; Error in <TFormula::Eval>: Formula is invalid and not ready to execute ; TMath::Abs is unknown.; Error in <TFormula::Eval>: Formula is invalid and not ready to execute ; TMath::Abs is unknown.; Error in <TFormula::Eval>: Formula is invalid and not ready to execute ; TMath::Abs is unknown.; Error in <TFormula::Eval>: Formula is invalid and not ready to execute ; TMath::Abs is unknown.; ```. Producing segfault when trying to quit ROOT session.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12559:347,error,error,347,https://root.cern,https://github.com/root-project/root/issues/12559,11,"['Error', 'error']","['Error', 'error']"
Availability,Are the errors my fault?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3236#issuecomment-454147735:8,error,errors,8,https://root.cern,https://github.com/root-project/root/pull/3236#issuecomment-454147735,2,"['error', 'fault']","['errors', 'fault']"
Availability,Are the test failure pre-existing?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3830#issuecomment-493466718:13,failure,failure,13,https://root.cern,https://github.com/root-project/root/pull/3830#issuecomment-493466718,1,['failure'],['failure']
Availability,"Are those tests failing because of the changes in this PR or were they already failing? I see on my laptop (I don't see the failure messages in Jenkins) that `testNaNPacker` fails on `FitAddPdf_DegenerateCoeff` with output:. ```; [#0] WARNING:Eval -- RooAddPdf::updateCoefCache(sum WARNING: sum of PDF coefficients not in range [0-1], value=1.3; [#0] WARNING:Eval -- RooAddPdf::updateCoefCache(sum WARNING: sum of PDF coefficients not in range [0-1], value=1.3; [#0] WARNING:Eval -- RooAddPdf::updateCoefCache(sum WARNING: sum of PDF coefficients not in range [0-1], value=1.3; [#0] WARNING:Eval -- RooAddPdf::updateCoefCache(sum WARNING: sum of PDF coefficients not in range [0-1], value=1.3; [#0] WARNING:Eval -- RooAddPdf::updateCoefCache(sum WARNING: sum of PDF coefficients not in range [0-1], value=1.3; [#0] WARNING:Eval -- RooAddPdf::updateCoefCache(sum WARNING: sum of PDF coefficients not in range [0-1], value=1.3; [#0] WARNING:Eval -- RooAddPdf::updateCoefCache(sum WARNING: sum of PDF coefficients not in range [0-1], value=1.3; [#0] WARNING:Eval -- RooAddPdf::updateCoefCache(sum WARNING: sum of PDF coefficients not in range [0-1], value=1.3; [#0] WARNING:Eval -- RooAddPdf::updateCoefCache(sum WARNING: sum of PDF coefficients not in range [0-1], value=1.3; [#0] WARNING:Eval -- RooAddPdf::updateCoefCache(sum WARNING: sum of PDF coefficients not in range [0-1], value=1.3 (no more will be printed); ../roofit/roofitcore/test/testNaNPacker.cxx:228: Failure; Warning in <ROOT::Math::Fitter::CalculateHessErrors>: Error when calculating Hessian; Value of: a1Final.getVal() < 0. || a1Final.getVal() > 1. || a2Final.getVal() < 0. || a2Final.getVal() > 1.; Actual: false; Expected: true; Recovery strength=0; ```. RooFit stress tests give the following output:. ```; /Users/pbos/projects/apcocsm/roofit-dev/root/cmake-build-debug/test/stressRooFit. RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby ; Copyright (C) 2000-2013 NIKHEF, University of California & Stanford Universit",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8596#issuecomment-881412597:124,failure,failure,124,https://root.cern,https://github.com/root-project/root/pull/8596#issuecomment-881412597,1,['failure'],['failure']
Availability,"Are you running from `/usr/bin/`, i.e. is that your current working directory? If so, I can reproduce that with GCC:. ```; $ cat map; #!/usr/bin/perl -w; $ echo '#include <map>' | g++ -x c++ -I. -fsyntax-only -; In file included from <stdin>:1:; ./map:1:2: error: invalid preprocessing directive #!; 1 | #!/usr/bin/perl -w; | ^; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8904#issuecomment-908157662:156,echo,echo,156,https://root.cern,https://github.com/root-project/root/issues/8904#issuecomment-908157662,2,"['echo', 'error']","['echo', 'error']"
Availability,"Are you sure the PCH is needed for running that test ? The test is not using any dictionary or ROOT I/O but only depends on the SOFIE libraries and protobuffer. I have removed the PCH dependency since some time and I have not seen this error before. ; It is true that the target `SOFIECompileModules_ONNX` is having issue on ubunutu 18, but this is due to the old Protobuf version of the machine and I need to disable `tmva-sofie` on Ubuntu18.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10690#issuecomment-1401927484:236,error,error,236,https://root.cern,https://github.com/root-project/root/pull/10690#issuecomment-1401927484,1,['error'],['error']
Availability,"Argh, Professor Jenkins doesn't like me. Tests don't compile. How do I compile / run tests locally (I need complete error messages or the console output)? Putting std::move instead of std::forward on a T&& seems wrong. I just re-ran make (with success), so I probably didn't compile tests and that's why this is now causing a problem. As for the other comments:; a) agree with const removal in TDFNodes.cxx; b) the const fCanGrow: clang-tidy suggested me to replace = default with =delete. I thought it might be more useful to be able to copy, thus I removed const instead. But I cannot really comment on that, not having used any v7 stuff yet. Finally the large modernize-loops: I think I should improve loop variable names before it is committed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1585#issuecomment-363247629:116,error,error,116,https://root.cern,https://github.com/root-project/root/pull/1585#issuecomment-363247629,1,['error'],['error']
Availability,"ArrayRef.h(163,1): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\Lex\PPMacroExpansion.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\tools\clang\lib\Lex\obj.clangLex.vcxproj] ; - [2022-02-03T18:37:29.106Z] C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\include\clang/Basic/Builtins.def(250,1): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\Lex\LiteralSupport.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\tools\clang\lib\Lex\obj.clangLex.vcxproj] ; - [2022-02-03T18:37:29.107Z] C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\CodeGen\CodeGenTypeCache.h(17,10): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\CodeGen\CGNonTrivialStruct.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\tools\clang\lib\CodeGen\obj.clangCodeGen.vcxproj] ; - [2022-02-03T18:37:29.107Z] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility(188,1): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\lib\Transforms\IPO\PruneEH.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\lib\Transforms\IPO\LLVMipo.vcxproj] ; - [2022-02-03T18:37:29.107Z] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory(738,65): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\CodeGen\CGObjC.cpp) [C:\build\workspace\root-pullrequ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9799#issuecomment-1029292319:1253,error,error,1253,https://root.cern,https://github.com/root-project/root/pull/9799#issuecomment-1029292319,1,['error'],['error']
Availability,"ArrayRef.h(92,1): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\AST\ASTDumper.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\tools\clang\lib\AST\obj.clangAST.vcxproj] ; - [2022-02-07T14:04:17.178Z] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility(313,72): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\Frontend\VerifyDiagnosticConsumer.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\tools\clang\lib\Frontend\obj.clangFrontend.vcxproj] ; - [2022-02-07T14:04:18.139Z] C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\include\llvm/Support/Allocator.h(87,69): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\Frontend\Rewrite\RewriteMacros.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\tools\clang\lib\Frontend\Rewrite\obj.clangRewriteFrontend.vcxproj] ; - [2022-02-07T14:04:18.139Z] c1xx : fatal error C1356: unable to find mspdbcore.dll [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\tools\clang\lib\Serialization\obj.clangSerialization.vcxproj] ; - [2022-02-07T14:04:18.139Z] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\functional(981,1): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\lib\Transforms\IPO\Attributor.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\lib\Transforms\IPO\LLVMipo.vcxproj] ; - [2022-02-07T14:04:18.139Z] C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\lib\Transf",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9529#issuecomment-1031504706:3295,error,error,3295,https://root.cern,https://github.com/root-project/root/pull/9529#issuecomment-1031504706,1,['error'],['error']
Availability,"As @jalopezg-git mentioned, bool(foo) appears as a declaration (bool foo). The following simple C++ code also fails to compile with a re-declaration error and I think that should be the expected behavior.; ```C++; #include<iostream>; int main() {; int i = 54;; bool(i);; }; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8304#issuecomment-1943877354:149,error,error,149,https://root.cern,https://github.com/root-project/root/issues/8304#issuecomment-1943877354,2,['error'],['error']
Availability,"As a completely anecdotical evidence, I have been running on the `root-ubuntu-2004-1` machine the distributed RDF test which used to fail, which included calls to DefinePerSample. After applying this patch, currently ~1800 iterations of the test passed without failures. ```; test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated <- check_backend.py PASSED; test_all.py::TestDefinePerSample::test_definepersample_simple <- check_definepersample.py PASSED; test_all.py::TestDefinePerSample::test_definepersample_withinitialization <- check_definepersample.py PASSED; =============================== warnings summary ===============================; test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated; /home/sftnight/vpadulan/rootproject/rootbuild/master-like-jenkins/lib/ROOT/_facade.py:154: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.; Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations; return _orig_ihook(name, *args, **kwds). test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated; /usr/local/lib/python3.8/dist-packages/dask_jobqueue/core.py:20: FutureWarning: tmpfile is deprecated and will be removed in a future release. Please use dask.utils.tmpfile instead.; from distributed.utils import tmpfile. -- Docs: https://docs.pytest.org/en/latest/warnings.html; ==================== 3 passed, 2 warnings in 32.72 seconds =====================. Running test 1864; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13787#issuecomment-1744852013:261,failure,failures,261,https://root.cern,https://github.com/root-project/root/pull/13787#issuecomment-1744852013,2,['failure'],['failures']
Availability,"As a first quick reply, along the lines of our private discussion on the forum: if there are errors like those you mention printed on screen during the processing, indeed you can expect the output to not be all ok. In particular RDataFrame does not deal well with disappearing/reappearing branches. The TTree schema is expected to be constant across the whole dataset being processed. I am not 100% what the effect will be in this case, it also depends on how TTreeReader, TChain and TTree (which RDataFrame uses internally for I/O) react in these cases. With that said RDataFrame should do its best to diagnose this and throw an exception rather than continuing the processing until the end. Please provide a recipe to reproduce the problem (e.g. dataset + minimal code) so we can debug further.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9366#issuecomment-984557118:93,error,errors,93,https://root.cern,https://github.com/root-project/root/issues/9366#issuecomment-984557118,1,['error'],['errors']
Availability,"As a result of discussing #9947 , the following two use cases have arised (in terms of what a user would want to do with a TFile):. 1. Open the file, `cd` into it, write/read stuff to/from it, `cd` out of it (thus restoring the `gDirectory` to the previous open file or something like `gROOT`; 2. Open a file, write/read stuff to/from it, close the file and forget about it and its content. While case 2 can be better addressed with the original idea of the TFile pythonization of the PR linked above, case 1 is actually the purpose of the `TDirectory::TContext` class. Currently, there is no easy way to use this class in Python because it's an RAII construct that fulfills its mission at destruction time. Python scopes are quite different to C++ scopes, and calling the destructor of the TContext explicitly would mean calling the `__destruct__` magic method (which is maybe not even intended for public usage). Thus. a much more pythonic approach is to enable usage of `TContext` as a Python context manager. This allows for example the following:. ```python; import ROOT; from ROOT import TDirectory. with TDirectory.TContext():; # Open some file here; file = ROOT.TFile(...); # Retrieve contents from the file; histo = file.Get(""myhisto""); ```; where after the `with` statement, the current directory is restored to ROOT.gROOT. Or also. ```python; import ROOT; from ROOT import TDirectory. file1 = ROOT.TFile(""file1.root""); file2 = ROOT.TFile(""file2.root""). with TDirectory.TContext(file1, file2):; histo = ROOT.TH1F(...); histo.Write(); ```. where inside the `with` statement the current directory would be `file2`, and afterwards it would be set to `file1`. As an aside, this functionality would not modify anything of the TFile itself, e.g. it would not close it after the `with`. This means that all objects created or read from the file in the with statement would still be alive and accessible afterwards",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10167:1885,alive,alive,1885,https://root.cern,https://github.com/root-project/root/pull/10167,1,['alive'],['alive']
Availability,"As a side note, it appears that `dataframe_simple` printouts:; ```; [ RUN ] MT/RDFSimpleTests.WritingToFundamentalType/0; input_line_164:2:41: error: cannot assign to variable 'var0' with const-qualified type 'const int'; auto func22(const int var0){return var0 = 42; ~~~~ ^; input_line_164:2:23: note: variable 'var0' declared const here; auto func22(const int var0){return var0 = 42; ~~~~~~~~~~^~~~; [ OK ] MT/RDFSimpleTests.WritingToFundamentalType/0 (1 ms); ```; but it does not make that sub-test fails. Is that intentional?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11552#issuecomment-1276684488:143,error,error,143,https://root.cern,https://github.com/root-project/root/pull/11552#issuecomment-1276684488,1,['error'],['error']
Availability,"As a side note, the error mentions:; ```; /cvmfs/sft-nightlies.cern.ch/lcg/views/dev4/Mon/x86_64-el9-gcc13-dbg/include/concepts/compare.hpp:35:39: error: reference to 'ranges' is ambiguous; concept compares_as = same_as<ranges::common_comparison_category_t<T, Cat>, Cat>;; ^; ```. Shouldn't this header file _also_ be improved by fully qualifying ranges here? (i.e. would the same problem happens in a compilation unit where the user of this header and `string_view` want to use `using namespace std;`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13001#issuecomment-1589699539:20,error,error,20,https://root.cern,https://github.com/root-project/root/issues/13001#issuecomment-1589699539,2,['error'],['error']
Availability,"As alternative ideas:; - a new function SafeFill(x, w, tol) where the user can define his tolerance tol.; - a static function IsInOverflow(binc, w, tol) that checks whether a histogram bin is in overflow depending on its content and a potential weight w to be added. From my point of view, I will just go towards TH1D or TH1L and away from TTree::Draw",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6671#issuecomment-2047251559:90,toler,tolerance,90,https://root.cern,https://github.com/root-project/root/issues/6671#issuecomment-2047251559,1,['toler'],['tolerance']
Availability,"As discussed in #12376, the release candidate tag was to be bumped to RC2 after late model extension + split encoding is available. In principle, it's safe to do it now. ## Checklist:; - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13566:121,avail,available,121,https://root.cern,https://github.com/root-project/root/pull/13566,1,['avail'],['available']
Availability,"As discussed in ROOT-8011, TPython can't work with the ROOT C++; kernel for Jupyter because the current implementation relies; on a plain shared library to run the cell code and capture; its output and error. In particular, a crash happens when; the library, libJupyROOT, tries to get the __main__ module; in TPython's initialization. Turning libJupyROOT into a C extension module makes TPython's; initialization succeed, since Python is fully operational. This PR also fixes an issue when setting the CPPYY_BACKEND_LIBRARY variable.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5334:202,error,error,202,https://root.cern,https://github.com/root-project/root/pull/5334,1,['error'],['error']
Availability,"As discussed in https://github.com/root-project/root/issues/9362#issuecomment-985632761, keep wired output; of candle plot which appears for low statistic - it should indicate large errors. Plus exclude some calculations when scaling options disabled for violin and/or candle plots",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9385:182,error,errors,182,https://root.cern,https://github.com/root-project/root/pull/9385,1,['error'],['errors']
Availability,"As discussed with Axel, we now only fail with a non-zero exit code on errors to keep the old behavior for users. If we introduce warnings in root (outside roottest), Jenkins should still pickup the warning, so this keeps the desired effect that we see if people do suspicious things in ROOT itself.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/831#issuecomment-324339196:70,error,errors,70,https://root.cern,https://github.com/root-project/root/pull/831#issuecomment-324339196,1,['error'],['errors']
Availability,"As explained in https://github.com/root-project/root/issues/8745, if we look up the `Detail` namespace first and then define something else in it, there is an assertion failure. That crash does not happen if there is no prior lookup. Example:. ```; root [0] auto c = TClass::GetClass(""Detail""); (TClass *) @0x7fffd0908fc0; root [1] namespace Detail { int i; }; root.exe: /home/etejedor/root/fork/root/interpreter/llvm/src/include/llvm/Support/Casting.h:105: static bool llvm::isa_impl_cl<To, const From*>::doit(const From*) [with To = clang::TagType; From = clang::Type]: Assertion `Val && ""isa<> used on a null pointer""' failed.; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8828:169,failure,failure,169,https://root.cern,https://github.com/root-project/root/issues/8828,1,['failure'],['failure']
Availability,As fas as I can tell the problem was solved by [IO: Fix StreamerInfo record write during file update. by pcanal · Pull Request #13842 · root-project/root · GitHub](https://github.com/root-project/root/pull/13842) which is available in ~~v6.28/06~~ v6.28/08 and up.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14171#issuecomment-1839245491:222,avail,available,222,https://root.cern,https://github.com/root-project/root/issues/14171#issuecomment-1839245491,1,['avail'],['available']
Availability,"As found here:; https://gitlab.kitware.com/cmake/cmake/-/issues/21947. we need to specify:; target_link_options(target-name PRIVATE ${Python3_LINK_OPTIONS}). so that libROOTTPython and libPyMVA are linked with the right; RPATH, when linking against the XCode Python(3) on MacOS(11,12). Otherwise, the following error appears when loading the libraries:; cling::DynamicLibraryManager::loadLibrary():; dlopen(.../mac12/SPEC/soversion/V/master/build/lib/libROOTTPython.6.25.02.so, 0x0009):; Library not loaded: @rpath/Python3.framework/Versions/3.8/Python3. Fixes #9793 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9802:311,error,error,311,https://root.cern,https://github.com/root-project/root/pull/9802,1,['error'],['error']
Availability,"As mentioned [here](https://github.com/root-project/root/commit/24a1193e66b2499940fb581acf0144228bfdcd6e#diff-e181029772a3e9aeffcda7614c4b0b4af48d409768e3c48b8077f245a78f38c9R200-R204) in some setups the compiler is actually a symlink to `ccache`. When ROOT is compiled with such a wrapper, it stores `ccache` as the compiler in `compiledata.h` (with `#define CLING_CXX_RLTV ""ccache ""`) and then ROOT cannot figure out compiler include paths at runtime:. ```sh; $ root; ERROR in cling::CIFactory::createCI(): cannot extract standard library include paths!; Invoking:; LC_ALL=C ccache -xc++ -E -v /dev/null 2>&1 | sed -n -e '/^.include/,${' -e '/^ \/.*++/p' -e '}'; Results was:; With exit code 0; ------------------------------------------------------------------; | Welcome to ROOT 6.26/02 https://root.cern |; | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on Apr 12 2022, 16:28:03 |; | From tags/v6-26-02@v6-26-02 |; | With |; | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10556:470,ERROR,ERROR,470,https://root.cern,https://github.com/root-project/root/issues/10556,1,['ERROR'],['ERROR']
Availability,As mentioned in the Python docs:; https://docs.python.org/3.11/whatsnew/3.11.html. Already available upstream in:; https://github.com/wlav/CPyCppyy/commit/a8f41df0618f40ecc9a2a0b5a51fd12ddf2e6673,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12514:91,avail,available,91,https://root.cern,https://github.com/root-project/root/pull/12514,1,['avail'],['available']
Availability,"As noted in #14593, the build fails during a `rootcling` execution when setting `CLING_DEBUG=1` in the environment with; ```; error: invalid integral value '0 -fno-omit-frame-pointer' in '-O0 -fno-omit-frame-pointer'; ```. Upon investigation, it only works in the ROOT prompt because TCling turns on basic `-O1` unless in `rootcling`. This overrides the (misformed) `""-O0 -fno-omit-frame-pointer""`. Split the argument in two entries and move it after inserting the user-provided arguments to properly apply also on the prompt by now taking precedence over `-O1`. Closes #14593",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14667:126,error,error,126,https://root.cern,https://github.com/root-project/root/pull/14667,1,['error'],['error']
Availability,"As per Jira ticket ROOT-8483:. Creating a TTreeReaderValue after having looped over a TTreeReader prompts an error message at runtime. This error mentions calling `TTreeReader::Reset` as a solution, but said method does not exist.; Assuming `TTreeReader::Restart` was meant, the patch is trivial.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/304:109,error,error,109,https://root.cern,https://github.com/root-project/root/pull/304,2,['error'],['error']
Availability,"As per discussion with Axel:. - [x] instead of `R__DEPRECATE`, use a runtime printout: it's not possible to have `R__DEPRECATE` fire for users that inherit from `RDataSource` but not for ROOT builds, and maintain backwards-compatibility. But it's possible with a runtime error.; - [x] put a R__DEPRECATE in there even if it does not fire, e.g. as an attribute of an unused dummy struct.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9509#issuecomment-1008301736:271,error,error,271,https://root.cern,https://github.com/root-project/root/pull/9509#issuecomment-1008301736,1,['error'],['error']
Availability,"As per the discussion with Vincenzo, we think we can provide the desired functionality without exposing `RSnapshotOptions::fOutputFormat` to users (until we can actually provide an output format other than TTree) and without breaking backwards-compatibility. P.S.; we can always discuss separately whether we want to error out at construction time if an input file does not exist (I think we might want to) -- but the discussion does not have to be entangled with this PR and feature implementation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13090#issuecomment-1650675285:317,error,error,317,https://root.cern,https://github.com/root-project/root/pull/13090#issuecomment-1650675285,1,['error'],['error']
Availability,"As pointed out by @bellenot , we need to cover the case in which the specified flags are (wrongly) `-Dpyroot=OFF` and `-Dpyroot_legacy=ON`. The proposed solution in this PR shows a fatal error message saying ""please reconfigure with pyroot=ON too"". Alternatively, we could automatically enable `pyroot` if `pyroot_legacy` has been set to ON. To be discussed with the reviewers. This assumes:; 1. `-Dpyroot=ON` means ""build me PyROOT"".; 2. `-Dpyroot_legacy=ON` means ""from the PyROOTs you have, build me the old one!"". So (1) activates PyROOT and (2) selects which PyROOT to build. Please shout if you have a different point of view.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5790:187,error,error,187,https://root.cern,https://github.com/root-project/root/pull/5790,1,['error'],['error']
Availability,"As pointed out by a user in this forum post:; https://root-forum.cern.ch/t/pyroot-6-and-gvirtualx-eeventtype-etc/28702/9; and explained in:; https://sft.its.cern.ch/jira/browse/ROOT-9364; importing gVirtualX from PyROOT leads to an error. This PR fixes the issue, which is due to gVirtualX being added to the list of globals with a wrong type.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1887:232,error,error,232,https://root.cern,https://github.com/root-project/root/pull/1887,1,['error'],['error']
Availability,"As reported [on the Forum](https://root-forum.cern.ch/t/build-error-in-the-v6-26-00-patches-branch-fails-to-build-on-ubuntu-18-04/49149):; This is Ubuntu 18.04 LTS / x86_64 / gcc, g++, gfortran 7.5.0 / cmake 3.20.3 here. The building of the current “v6-26-00-patches” branch (as of 2022.03.12) generates an error (“--std=c++14”):; ```; (...); In file included from /tmp/ROOT/v6-26-00-patches/roofit/roofitZMQ/src/ZeroMQSvc.cpp:14:0:; /tmp/ROOT/v6-26-00-patches/roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h: In member function ‘void ZmqLingeringSocketPtrDeleter<PERIOD>::operator()(zmq::socket_t*)’:; /tmp/ROOT/v6-26-00-patches/roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h:60:24: error: ‘class zmq::socket_t’ has no member named ‘set’; did you mean ‘send’?; socket->set(zmq::sockopt::linger, PERIOD);; ^~~; send; /tmp/ROOT/v6-26-00-patches/roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h:60:33: error: ‘zmq::sockopt’ has not been declared; socket->set(zmq::sockopt::linger, PERIOD);; ^~~~~~~; /tmp/ROOT/v6-26-00-patches/roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h: At global scope:; /tmp/ROOT/v6-26-00-patches/roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h:79:36: error: ‘unique_ptr’ in namespace ‘std’ does not name a template type; using ZmqLingeringSocketPtr = std::unique_ptr<zmq::socket_t, ZmqLingeringSocketPtrDeleter<PERIOD>>;; ^~~~~~~~~~; (...); /tmp/ROOT/v6-26-00-patches/roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h:103:6: error: no matching function for call to ‘zmq::socket_t::recv(std::reference_wrapper<zmq::message_t>&, int&)’; In file included from /tmp/ROOT/v6-26-00-patches/roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQSvc.h:17:0,; from /tmp/ROOT/v6-26-00-patches/roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQPoller.h:17,; from /tmp/ROOT/v6-26-00-patches/roofit/roofitZMQ/src/ZeroMQPoller.cpp:14:; /usr/include/zmq.hpp:625:23: note: candidate: size_t zmq::socket_t::recv(void*, size_t, int); inline size_t recv (void *buf_, size_t len_, int flags_ = 0); ^~~~; /usr/include/zmq.hpp:625:23: note: no known conv",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10107:62,error,error-in-the-,62,https://root.cern,https://github.com/root-project/root/issues/10107,4,['error'],"['error', 'error-in-the-']"
Availability,"As reported at https://github.com/root-project/root/pull/8564#issuecomment-870427298, ""The Debian i686 errors are due to a node upgrade"".",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8562#issuecomment-870857710:103,error,errors,103,https://root.cern,https://github.com/root-project/root/pull/8562#issuecomment-870857710,1,['error'],['errors']
Availability,"As reported at https://github.com/root-project/roottest/pull/946#issuecomment-1519645135 and can be seen in the test; `roottest-root-meta-race-12552-exec_dlopenrace-auto`. The relevant output is below and the problem is a (real) quirk of the test. It linked to the repeated unload and loading of the same library in parallel. During the unloading and loading cycle the TClass object representing the user classes (from that library) are created and deleted and it seems that the pointer value is captured and used outside the main lock (and this is done concurrently we the deletion). This needs to be fixed but is unlikely to happen in the wild. ```; ==1544443==ERROR: AddressSanitizer: heap-use-after-free on address 0x616000617c20 at pc 0x7f8857c557ae bp 0x7f88265b3e60 sp 0x7f88265b3e50; READ of size 4 at 0x616000617c20 thread T1; #0 0x7f8857c557ad in TClass::Size() const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5706:8; #1 0x7f8851923388 in TBufferFile::ReadFastArray(void*, TClass const*, int, TMemberStreamer*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:1605:25; #2 0x7f8851cc28c1 in TStreamerInfoActions::ReadSTLObjectWiseFastArray(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short, unsigned int) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TStreamerInfoActions.cxx:1364:11; #3 0x7f8851cc28c1 in int TStreamerInfoActions::ReadSTL<&(TStreamerInfoActions::ReadSTLMemberWiseSameClass(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short)), &(TStreamerInfoActions::ReadSTLObjectWiseFastArray(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short, unsigned int))>(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TStreamerInfoActions.cxx:1407:10; #4 0x7f8851931ee7 in TStreamerInfoActions::TConfigu",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12715:663,ERROR,ERROR,663,https://root.cern,https://github.com/root-project/root/issues/12715,1,['ERROR'],['ERROR']
Availability,"As reported at: https://github.com/cms-sw/cmssw/issues/36908#issuecomment-1036397481. The problem is the rules are applied to a data member nested inside an object nested inside an STL collection that is a new data member of the class reco::HaloClusterCandidateHCAL, since it is a ""new"" member compared to the layout on file, none of the objects; from the new member down to the object on which the rules need to be run) are actually streamed and the code gathering the information to run the rule got a bit lost ; it is likely (I am checking as we speak) that in previous release the rule was not even attempted to be run ... which might actually be the desired behavior in this specific case.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9899:367,down,down,367,https://root.cern,https://github.com/root-project/root/issues/9899,1,['down'],['down']
Availability,"As reported by CMSSW tests (for example: https://github.com/cms-sw/cmsdist/pull/6314#issuecomment-713547097) where the data appear odd/corrupted, there is an issue in TStreamerInfo::GenerateInfoForPair (which is almost always used for std::pair in the tip of v6.22 and master). The problem is when calculating the offset of the second data member, TStreamerInfo::GenerateInfoForPair uses (unwittingly, of course :) ), the value zero for the size of the enums. In addition (see https://github.com/root-project/root/issues/6725), the TEnum size information is no yet available in rootpcm files. (i.e. a fix to this bug will work only for default size enums until #6725 is fixed).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6726:565,avail,available,565,https://root.cern,https://github.com/root-project/root/issues/6726,1,['avail'],['available']
Availability,"As reported in ROOT-9463, the result of GetColumnNames is redundant. A simple reproducer:; ```; TFile f(""f.root"", ""recreate"");; TTree t(""t"", ""t"");; int a;; t.Branch(""a"", &a);; a = 42;; t.Fill();; t.Write();; f.Close();; ROOT::RDataFrame df(""t"", ""f.root"");. for (auto x : df.GetColumnNames()); std::cout <<x <<std::endl;; ```. This redundancy is now not exposed to the user. **It would be nice** to have more tests on real use cases.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2443:58,redundant,redundant,58,https://root.cern,https://github.com/root-project/root/pull/2443,1,['redundant'],['redundant']
Availability,"As reported in https://root-forum.cern.ch/t/pure-virtual-method-called-on-hadding-tfiles-with-tfriendelements/46836/6; (see there for reproducer), hadd at tear down accesses already deleted objects. In version of ROOT equal or newer than v6.22/08 and v6.24/00, the problem appears only in a slow merge. (for example `hadd -f0 output.root testroot_1,root testroot_2.root`) . The resulting stack trace is:. ```; ==1241== Process terminating with default action of signal 6 (SIGABRT); ==1241== at 0x5BB618B: raise (raise.c:51); ==1241== by 0x5B9592D: abort (abort.c:100); ==1241== by 0x58C2910: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28); ==1241== by 0x58CE38B: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28); ==1241== by 0x58CE3F6: std::terminate() (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28); ==1241== by 0x58CF154: __cxa_pure_virtual (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28); ==1241== by 0x551449A: TCollection::RecursiveRemove(TObject*) (TCollection.cxx:579); ==1241== by 0x4A345D0: TTree::RecursiveRemove(TObject*) (TTree.cxx:7857); ==1241== by 0x551F16F: TList::RecursiveRemove(TObject*) (TList.cxx:813); ==1241== by 0x5518879: THashList::RecursiveRemove(TObject*) (THashList.cxx:354); ==1241== by 0x543C003: TROOT::RecursiveRemove(TObject*) (TROOT.cxx:2455); ==1241== by 0x496B26E: ROOT::CallRecursiveRemoveIfNeeded(TObject&) (TROOT.h:398); ==1241== by 0x5512E61: TCollection::~TCollection() (TCollection.cxx:189); ==1241== by 0x5506D19: TSeqCollection::~TSeqCollection() (TSeqCollection.h:37); ==1241== by 0x551BE8E: TList::~TList() (TList.cxx:92); ==1241== by 0x551BEAD: TList::~TList() (TList.cxx:95); ==1241== by 0x4A1DE02: TTree::~TTree() (TTree.cxx:975); ==1241== by 0x4A1E2C7: TTree::~TTree() (TTree.cxx:1023); ==1241== by 0x4A308E9: TTree::Merge(TCollection*, TFileMergeInfo*) (TTree.cxx:6908); ==1241== by 0x4960BA2: ROOT::merge_TTree(void*, TCollection*, TFileMergeInfo*) (G__Tree.cxx:4209); ==1241== by 0x4E739D6: TFileMerger::MergeOne(TDirectory*, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9017:160,down,down,160,https://root.cern,https://github.com/root-project/root/issues/9017,1,['down'],['down']
Availability,"As reported in https://root-forum.cern.ch/t/very-large-errors-when-using-roofit-asymptoticerror/52003 some large errors are obtained when using `RooFit::AsymptoticError`. Other problems have been reported when using extended fits, see [ROOT-10827](https://sft.its.cern.ch/jira/browse/ROOT-10827) Missing contribution of extended term in the error Correction for extended weighted likelihood fits. Or when computing the derivatives needed for the asymptotic correction, see [ROOT-10866](https://sft.its.cern.ch/jira/browse/ROOT-10866) Numerical instabilities when calculating the derivatives for the asymptotically correct errors.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11660:55,error,errors-when-using-roofit-asymptoticerror,55,https://root.cern,https://github.com/root-project/root/issues/11660,4,['error'],"['error', 'errors', 'errors-when-using-roofit-asymptoticerror']"
Availability,"As seen (and worked around) in https://github.com/root-project/root/pull/12503 reading a file containing a class containing a `std::unique_ptr<std::vector<double>>` leads to an error like:; ```; TStreamerInfo::BuildOld: Cannot convert RooVectorDataStore::RealFullVector::_vecEL from type: vector<double> to type: vector<double>, skip element; ```; This is technically due to the fact that `TStreamerInfo::Build` calculates (incorrectly) the data member type to be `kAnyp` while `BuildOld` calculates (correctly) it to be `kSTLp`. Reproducer:. ```; // MyClass.h. #ifndef MyClass_h; #define MyClass_h. #include <memory>; #include <vector>. class MyClass; {; public:; std::unique_ptr<std::vector<int>> _vec;; ClassDef(MyClass, 1);; };. #endif; ```; ```; // readMyClass.C. void readMyClass(); {; TFile f(""f.root"", ""read"");; auto obj = f.Get<MyClass>(""obj"");. for(int x : *obj->_vec) {; std::cout << x << std::endl;; }; }; ```; ```; // writeMyClass.C. void writeMyClass(); {; MyClass obj;; obj._vec = std::make_unique<std::vector<int>>();; obj._vec->push_back(1);; obj._vec->push_back(2);; obj._vec->push_back(3);. TFile f(""f.root"", ""recreate"");; f.WriteObject(&obj, ""obj"");; }; ```; ```; root.exe -l -q -e '.L MyClass.h+' -e '.x writeMyClass.C'; root.exe -l -q -e '.L MyClass.h+' -e '.x readMyClass.C'; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12684:177,error,error,177,https://root.cern,https://github.com/root-project/root/issues/12684,1,['error'],['error']
Availability,"As seen above, CentOS 8 is quite unhappy about the changes here. I bisected the failures (except for `fit/graph2dfit.C` and `hist/hstack.C`, which will be taken care of by https://github.com/root-project/root/pull/11830) to commit 3ac1d584c821d21e4fae789f595eddf5833848c0. @linev do you see an obvious problem / have an idea?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11822#issuecomment-1337446119:80,failure,failures,80,https://root.cern,https://github.com/root-project/root/pull/11822#issuecomment-1337446119,1,['failure'],['failures']
Availability,"As seen by CMS on https://github.com/cms-sw/cmssw/issues/33466. The following piece of lookup:; ```; {; auto cls = TClass::GetClass(""std::vector<int>"");; auto meth = cls->GetMethodWithPrototype(""operator[]"",""int"",true,ROOT::kConversionMatch);; auto args = meth->GetListOfMethodArgs();; auto methArg = dynamic_cast<TMethodArg*>(args->First());; cout << args->GetEntries() << endl;; cout << methArg->GetTypeName() << endl;; }; ```; print; ```; 1; vector<TClass*>::size_type; ```; where one would expect; ```; 1; vector<int>::size_type; ```; This has catastrophic consequence when combined with autoloading of library. In the user's case the search is about `std::vector<reco::RecoTauPiZero>` but the argument found is `vector<ROOT::Experimental::REveTableEntry>::size_type` which ends up with a batch job trying to load ` libREve` and thus `libGui` and thus requiring the reading of `$HOME/.root.mimes` which fails badly if `$HOME` is not set (case of somce condor jobs) which issues a Fatal error.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7955:990,error,error,990,https://root.cern,https://github.com/root-project/root/issues/7955,1,['error'],['error']
Availability,"As seen in #9601, using `EXCEPT_NEAR` with an absolute error is not so good, because if the numbers are large the hardcoded absolute error can be smaller than the double precision. In these cases, `EXPECT_DOUBLE_EQ` is recommended instead. @ellert, I'm suggesting this as an alternative to what you suggested in #9601, but without magic numbers of two. Can you maybe check if this approach with `EXPECT_DOUBLE_EQ` also works? Thanks!",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14048:55,error,error,55,https://root.cern,https://github.com/root-project/root/pull/14048,2,['error'],['error']
Availability,"As seen in https://github.com/cms-sw/cmssw/issues/33361, in some normal usage circumstances, TTreeCache::FillBuffer will issue an Error message (turned into an exception by CMSSW):; ```; fCurrentClusterStart=11348 fEntryCurrent=11392 fNextClusterStart=11394; but fEntryCurrent should not be in between the two ; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8048:130,Error,Error,130,https://root.cern,https://github.com/root-project/root/issues/8048,1,['Error'],['Error']
Availability,"As seen in https://lcgapp-services.cern.ch/root-jenkins/job/root-nightly-master/3440/LABEL=ROOT-centos9,SPEC=noimt,V=master/testReport/junit/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simple_lz4_compr_level1 : ; ```; hadd Target file: hsimple401.root; hadd compression setting for all output: 401; hadd Source file 1: hsimple.root; hadd Target path: hsimple401.root:/; -- TEST COMMAND -- ; cd /home/sftnight/build/night/LABEL/ROOT-centos9/SPEC/noimt/V/master/build/roottest/root/io/filemerger; /usr/bin/timeout -s USR2 270s /home/sftnight/build/night/LABEL/ROOT-centos9/SPEC/noimt/V/master/build/bin/root.exe -q -l -b /home/sftnight/build/night/LABEL/ROOT-centos9/SPEC/noimt/V/master/roottest/root/io/filemerger/testSimpleFile.C(""hsimple401.root"",25000,401,418980,7); -- BEGIN TEST OUTPUT --. Processing /home/sftnight/build/night/LABEL/ROOT-centos9/SPEC/noimt/V/master/roottest/root/io/filemerger/testSimpleFile.C(""hsimple401.root"",25000,401,418980,7)...; Checking hsimple401.root; (int) 1000. -- END TEST OUTPUT --; -- BEGIN TEST ERROR --; Error in <testSimpleFile>: Disk size of hsimple401.root should have been 418980 but is 418988 (tolerance 7 bytes). -- END TEST ERROR --; CMake Error at /home/sftnight/build/night/LABEL/ROOT-centos9/SPEC/noimt/V/master/build/RootTestDriver.cmake:186 (message):; got exit code 255 but expected 0; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12438:1057,ERROR,ERROR,1057,https://root.cern,https://github.com/root-project/root/issues/12438,5,"['ERROR', 'Error', 'toler']","['ERROR', 'Error', 'tolerance']"
Availability,"As seen in https://root-forum.cern.ch/t/draw-short-integers-as-numbers-not-characters/52530/10,; in that case we get:; ```; Error in <TTreeReaderArrayBase::CreateContentProxy()>: The branch Jet_idx contains data of type char. It cannot be accessed by a TTreeReaderArray<signed char>; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11837:124,Error,Error,124,https://root.cern,https://github.com/root-project/root/issues/11837,1,['Error'],['Error']
Availability,As seen in https://root-forum.cern.ch/t/ttreereaderarray-with-enum-type/54283:; ```; TTreeReaderArray<someEnum> test_someEnum ...; ```; leads to error like; ```; Error in <TTreeReaderArrayBase::CreateProxy()>: The template argument type T of T accessing branch test_struct.e1 (which contains data of type Int_t) is not known to ROOT. You will need to create a dictionary for it.; ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12661:145,error,error,145,https://root.cern,https://github.com/root-project/root/issues/12661,2,"['Error', 'error']","['Error', 'error']"
Availability,"As seen in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/38, there is missing dependency on Rint that leads to out of order creation:. ```; <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature; <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'; Error: Module 'MathCore.pcm' failed to load.; Error: Error loading the default rootcling header files.; make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1; ```. while indeed. ```; $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm; -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm; -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm; -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm; -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm; -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm; ```. This out of order build is seen when using `CMake` with `gnu make` on Ubuntu 22 (on WSL). On the same platform, using `Ninja` leads to the creation in the right order.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11686:62,error,error-rint-pcm-is-out-of-date-cannot-read-module-signature,62,https://root.cern,https://github.com/root-project/root/issues/11686,6,"['Error', 'error']","['Error', 'error', 'error-rint-pcm-is-out-of-date-cannot-read-module-signature']"
Availability,"As seen in the [build logs for the most recent Windows build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/131507/console) ([this thread comment](https://github.com/root-project/root/pull/9349#issuecomment-984563179)), the Windows configuration now correctly fails when trying to manually set `roofit_multiprocess=ON` with log message:. ```; 13:01:05 CMake Error at cmake/modules/RootBuildOptions.cmake:353 (message):; 13:01:05 >>> Option 'roofit_multiprocess' is not supported on Windows.; 13:01:05 Call Stack (most recent call first):; 13:01:05 CMakeLists.txt:157 (include); ```. The other builds run as previously (they are not affected by the changes in the configuration, which only takes out `WIN32` from `if` statements). I will now fixup rebase the two commits into the 8 main commits of this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9349#issuecomment-984569246:385,Error,Error,385,https://root.cern,https://github.com/root-project/root/pull/9349#issuecomment-984569246,1,['Error'],['Error']
Availability,As shown in the code attached in https://root-forum.cern.ch/t/error-on-fitresult-scan/51014; one cannot use FitResult::Scan when the Fitter class has been deleted.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11154:62,error,error-on-fitresult-scan,62,https://root.cern,https://github.com/root-project/root/issues/11154,1,['error'],['error-on-fitresult-scan']
Availability,As suggested in:. https://sft.its.cern.ch/jira/browse/ROOT-9915. we implemented a way to raise an error when a file is opened (for reading) using TFile constructor or TFile::Open().,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4493:98,error,error,98,https://root.cern,https://github.com/root-project/root/pull/4493,1,['error'],['error']
Availability,"As suggestion, this header-only CLI parser (https://github.com/CLIUtils/CLI11) could be included and would save code maintenance on ROOT's side / errors with parsing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14038#issuecomment-2223288456:117,mainten,maintenance,117,https://root.cern,https://github.com/root-project/root/pull/14038#issuecomment-2223288456,2,"['error', 'mainten']","['errors', 'maintenance']"
Availability,"As the error message shows, asking for `std::is_copy_assignable<MyClass>::value` triggers the parsing of `MyClass`, which also parses `OtherClass` as a side effect of parsing the dictionary. That latter class has a `std::something<MyClass>` which needs to instantiate `std::is_copy_assignable<MyClass>` which we are currently instantiating (that's what started the whole parsing). It cannot complete the definition of `MyClass` because we are currently autoparsing that. I.e. we are running into a recursive template instantiation issue here. @pcanal @vgvassilev ideas what we could do?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10512#issuecomment-1117317866:7,error,error,7,https://root.cern,https://github.com/root-project/root/issues/10512#issuecomment-1117317866,1,['error'],['error']
Availability,"As the regex match was done with a prefix `^` and without a trailing `$` I think this is more of a ""does this directory live in the `${CMAKE_SOURCE_DIR}`"" question. I don't think STREQUAL is suitable as it does not match against required directory names and yields error on the same part as #7009",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8234#issuecomment-851957347:265,error,error,265,https://root.cern,https://github.com/root-project/root/pull/8234#issuecomment-851957347,1,['error'],['error']
Availability,"As the test failures are only related to HistFactory, I think it is better to split this PR in a non-HistFactory and a HistFactory part. The non-HistFactory part is now opened: https://github.com/root-project/root/pull/12392. Once that one is merged, I will rebase this PR such that only the HistFactory commits remain.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12340#issuecomment-1448129203:12,failure,failures,12,https://root.cern,https://github.com/root-project/root/pull/12340#issuecomment-1448129203,1,['failure'],['failures']
Availability,"As the title reads: TChain Add does not properly resolve globs with `?#`. Consider:; ```cpp; auto dfWriter0 = ROOT::RDataFrame(5).Define(""z"", ""42"");; dfWriter0.Snapshot<int>(""tree"", ""specTestFile0.root"", {""z""});; dfWriter0.Snapshot<int>(""tree"", ""specTestFile00.root"", {""z""});; dfWriter0.Snapshot<int>(""tree"", ""specTestFile000.root"", {""z""});. TChain c{};; c.Add(""specTestFile0*.root?#tree"");; for(auto i = 0u; i < c.GetEntries(); ++i); 	c.GetEntry(i);. gSystem->Unlink((""specTestFile0.root""));; gSystem->Unlink((""specTestFile00.root""));; gSystem->Unlink((""specTestFile000.root""));; ```; Current behaviour --> invalid parsing:; ```; Error in <TChain::LoadTree>: Cannot find tree with name in file [...]/specTestFile0.root#tree; Error in <TChain::LoadTree>: Cannot find tree with name in file [...]/specTestFile00.root#tree; Error in <TChain::LoadTree>: Cannot find tree with name in file [...]/specTestFile000.root#tree; ```; ; @vepadulano and I just saw [here](https://root.cern/doc/master/classTChain.html#a78a896924ac6c7d3691b7e013bcbfb1c) that the question mark is a valid wildcard in the glob expansion of `Add`. Note that in this particular minimal reproducer, I can alternatively use:; ```cpp; TChain c{""tree""};; c.Add(""specTestFile0*.root"");; ```; I used precisely this example in order to show that even a single `Add` results in undesired behaviour.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11483:631,Error,Error,631,https://root.cern,https://github.com/root-project/root/issues/11483,3,['Error'],['Error']
Availability,"As there is one RLoopManager per computation graph, when aliases; were managed by RLoopManager they were computation-graph-wide.; It is desirable to make Alias definitions behave coherently with; Defines instead, i.e. have Aliases be only accessible in the branch; of the computation graph in which they were defined, and only in; nodes that are downstream of the one where the alias is added. This resolves #7381, ""[DF] Let Aliases be defined per computation graph; branch, not globally"".",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9519:346,down,downstream,346,https://root.cern,https://github.com/root-project/root/pull/9519,1,['down'],['downstream']
Availability,"As there is one RLoopManager per computation graph, when aliases; were managed by RLoopManager they were computation-graph-wide.; It is desirable to make Alias definitions behave coherently with; Defines instead, i.e. have Aliases be only accessible in the branch; of the computation graph in which they were defined, and only in; nodes that are downstream of the one where the alias is added. This resolves #7381, ""[DF] Let Aliases be defined per computation graph; branch, not globally"". In particular, in this commit:; - move alias management from RLoopManager to RBookedColumns; - remove alias-managing logic from RLoopManager; - refactor several functions so they only take RBookedColumns as input; rather than a list of defined names plus a map of aliases; (CheckForDefinition, CheckForRedefinition, FindUnknownColumns,; GetValidatedColumnNames, BookFilterJit, FindUsedColumns,; ParseRDFExpression); - use RBookedColumns::ResolveAlias instead of ResolveAlias helper function; - adapt dataframe_utils test to the new signature of FindUnknownColumns. Note that this is a backward-incompatible change for user code that; relied on this global definition of Aliases. We expect this to be an; exceedingly rare usecase, and if such code exists it will produce a; clear error message.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9496:346,down,downstream,346,https://root.cern,https://github.com/root-project/root/pull/9496,2,"['down', 'error']","['downstream', 'error']"
Availability,As this error is now unsilenced in 6.28 we can at least remove the blocker.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11769#issuecomment-1409915097:8,error,error,8,https://root.cern,https://github.com/root-project/root/issues/11769#issuecomment-1409915097,1,['error'],['error']
Availability,"As you @osschar suggested, https://github.com/root-project/root/pull/8796 fixes the failure on CentOS8. Can you confirm it also fixes the issue you see, @osschar ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8767#issuecomment-892595951:84,failure,failure,84,https://root.cern,https://github.com/root-project/root/issues/8767#issuecomment-892595951,1,['failure'],['failure']
Availability,"Aside, while discussing #7201 and constructing an example, I ran into that same `is_equal` redefinition mentioned above. All you need to do is this (from a ROOT build, not master):; ```; >>> import cppyy; >>> cppyy.gbl.TPython.Eval(""1+1""); ```; and you get that error, which in turn tells me it's a pure ROOT issue, not a cppyy one, which doesn't have `TPython`. (You're certainly off the mark above in thinking it's ""jitted on the fly"" in Utilitiy.cxx, even in the ROOT fork of cppyy: what you point to is only the instantiation, not the declaration.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7502#issuecomment-806067670:262,error,error,262,https://root.cern,https://github.com/root-project/root/pull/7502#issuecomment-806067670,1,['error'],['error']
Availability,"Asking to build again, since Jenkins was down during last build and got stuck",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3821#issuecomment-493075073:41,down,down,41,https://root.cern,https://github.com/root-project/root/pull/3821#issuecomment-493075073,1,['down'],['down']
Availability,"Asoka,. There was a mistake in your ping command, did you see the 'ping' in the ; middle, so actually it was pinging host ping. Regards,. Di. On 2021-05-12 10:43 a.m., Asoka De Silva wrote:; > hmm ... that was really unexpected for me for lxplus ...; >; > ***@***.*** ~]$ ping -c 10 ping webdav.lcg.triumf.ca ; > <http://webdav.lcg.triumf.ca>; > PING (137.138.28.175) 56(124) bytes of data.; >; > --- ping statistics ---; > 10 packets transmitted, 0 received, 100% packet loss, time 8999ms; >; > ***@***.*** ~]$; >; > Vitaliy, shouldn't we expect that to be accessible from lxplus ?; >; > regards,; > Asoka; >; >> On May 12, 2021, at 10:37 AM, Di Qing ***@***.*** ; >> ***@***.***>> wrote:; >>; >> Maybe the connections were from commodity network? Are you able to ; >> ping webdav.lcg.triumf.ca <http://webdav.lcg.triumf.ca>?; >>; >> Thanks,; >>; >> Di; >>; >>> On May 12, 2021, at 10:29 AM, Asoka De Silva ***@***.*** ; >>> ***@***.***>> wrote:; >>>; >>> ﻿ Hi Axel,; >>>; >>> I don't know but I'll add Simon and Di who are the Tier-1 experts ; >>> and may have ideas.; >>>; >>> Simon and Di, Axel has this issue and me a similar one - any ideas ?; >>>; >>>; >>>>; >>>>> s I crosscheck (to see whether it's related to the Davix redirect ; >>>>> issue #8155 ; >>>>> <https://can01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Froot-project%2Froot%2Fissues%2F8155&data=04%7C01%7Cdqing%40triumf.ca%7Cb7cde810efc1452a4eab08d9156d8727%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564382428498460%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=uCliumeh1X0KTsDzvHcojQm9qfvqZ96DsLCqoTBDdgs%3D&reserved=0> ) ; >>>>> I tried with curl but I get; >>>>>; >>>>> |$ curl -v ; >>>>> https://webdav.lcg.triumf.ca:2880/atlas/atlaslocalgroupdisk/rucio/user/desilva/a1/a8/myFile.1.root ; >>>>> <https://can01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fwebdav.lcg.triumf.ca%3A2880%2Fatlas%2Fatlaslocalgroupdisk%2Frucio%2Fuser%2Fdesi",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-839989913:36,ping,ping,36,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-839989913,9,"['PING', 'ping']","['PING', 'ping', 'pinging']"
Availability,Assertion failure in TMVA `can't dereference value-initialized vector iterator`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13498:10,failure,failure,10,https://root.cern,https://github.com/root-project/root/issues/13498,1,['failure'],['failure']
Availability,Assertion failure in TMVA with `vector iterators incompatible` error on Windows,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13497:10,failure,failure,10,https://root.cern,https://github.com/root-project/root/issues/13497,2,"['error', 'failure']","['error', 'failure']"
Availability,"Assigning to @pcanal - but expect a higher response time. This is a well known issue with TTree: not all code paths allow for robust handling of data errors (even though here, Philippe seems to suggest that it can indeed be caught). Having access to this file could indeed be very useful. We should then be able to create another, public file from that which we can use for testing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9154#issuecomment-950921176:126,robust,robust,126,https://root.cern,https://github.com/root-project/root/issues/9154#issuecomment-950921176,2,"['error', 'robust']","['errors', 'robust']"
Availability,"Assuming that `page_size` is a power of 2, the calculation of the base address of the page can be simplified and avoid a division. According to POSIX, either `MS_SYNC` or `MS_ASYNC` must be specified when calling `msync()`. Failure to include one of these flags will cause `msync()` to fail on some systems. When `msync()` returns -1, the pointer is only considered invalid when errno is set to `ENOMEM`. In principle, the other possible values for errno won't happen, but if they do, that should be considered an error, hence the assert condition needed an update. `EBUSY` shouldn't happen since we do not add `MS_INVALIDATE` to flags, and `EINVAL` shouldn't happen because we always pass a multiple of the page size to msync(). `EFAULT` is only used in Linux 2.4.18 and earlier instead of `ENOMEM`. See #4136 for more information.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4159:224,Failure,Failure,224,https://root.cern,https://github.com/root-project/root/pull/4159,2,"['Failure', 'error']","['Failure', 'error']"
Availability,"AsymmErrors(n, x, y, xerr_lo, xerr_hi, yerr_lo, yerr_hi); print(reproducer.GetErrorXlow(1), reproducer.GetErrorXhigh(1), reproducer.GetErrorYlow(1), reproducer.GetErrorYhigh(1)); [vpadulan@lxplus706 ~]$python github-7393-reproducer.py ; 6.465722853820043e+170 0.0 0.0 8.005628501318925e+261; ```. Whereas printing the index `0` elements of the data member arrays reported the correct values for them (although issue number 1 above is still present); ```; [vpadulan@lxplus706 ~]$cat github-7393-reproducer.py; import numpy as np; import ROOT; n = 1; x = np.array([1]); y = np.array([2]); xerr_hi, xerr_lo = np.array([0.1]), np.array([0.1]); yerr_hi, yerr_lo = np.array([0.2]), np.array([0.2]); reproducer = ROOT.TGraphAsymmErrors(n, x, y, xerr_lo, xerr_hi, yerr_lo, yerr_hi); print(reproducer.GetErrorXlow(0), reproducer.GetErrorXhigh(0), reproducer.GetErrorYlow(0), reproducer.GetErrorYhigh(0)); [vpadulan@lxplus706 ~]$python github-7393-reproducer.py ; 0.1 0.1 0.2 0.2; ```. 6.22/00 already shows the correct error raised as @AlkaidCheng confirmed above, although the out-of-bound access is still permitted if one insists a bit; ```; [vpadulan@lxplus706 ~]$source /cvmfs/sft.cern.ch/lcg/views/LCG_98python3/x86_64-centos7-gcc9-opt/setup.sh; [vpadulan@lxplus706 ~]$root --version; ROOT Version: 6.22/00; Built for linuxx8664gcc on Jun 14 2020, 15:54:05; From tags/v6-22-00@v6-22-00; [vpadulan@lxplus706 ~]$cat github-7393-reproducer.py; import numpy as np; import ROOT; n = 1; x = np.array([1.0]); y = np.array([2.0]); xerr_hi, xerr_lo = np.array([0.1]), np.array([0.1]); yerr_hi, yerr_lo = np.array([0.2]), np.array([0.2]); reproducer = ROOT.TGraphAsymmErrors(n, x, y, xerr_lo, xerr_hi, yerr_lo, yerr_hi); print(reproducer.GetErrorXlow(1), reproducer.GetErrorXhigh(1), reproducer.GetErrorYlow(1), reproducer.GetErrorYhigh(1)); [vpadulan@lxplus706 ~]$python github-7393-reproducer.py ; 6.465722853820043e+170 8.114724e-317 0.0 8.005628501318925e+261; ```; To be discussed in a separate issue probably",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7393#issuecomment-822586476:1798,error,error,1798,https://root.cern,https://github.com/root-project/root/issues/7393#issuecomment-822586476,1,['error'],['error']
Availability,"At least on my machine substituting `Declare` with `ProcessLine` fixed the test failure, let's see what the CI has to say",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14358#issuecomment-1894171975:80,failure,failure,80,https://root.cern,https://github.com/root-project/root/pull/14358#issuecomment-1894171975,1,['failure'],['failure']
Availability,"At least these test and tutorial failures are already fixed in my branch, so I hope it will be temporary temporary until we land that patch. But I'm completely fine to use `FIXME_TEMPORARILY_EXCLUDED_FOR_RUNTIME_CXXMODULES` if you have a strong opinion.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1992#issuecomment-387664342:33,failure,failures,33,https://root.cern,https://github.com/root-project/root/pull/1992#issuecomment-387664342,1,['failure'],['failures']
Availability,"At least with the [llvm13 branch](https://github.com/vgvassilev/root/tree/llvm13) on macOS, `cling::DynamicLibraryManager::searchLibrariesForSymbol` sometimes finds non-exported symbols and confuses the rest of the autoloading infrastructure because the symbol is not available after loading that library. ### Reproducer. Slightly modify the new `AutoloadLibraryGenerator`:; ```diff; diff --git a/core/metacling/src/TClingCallbacks.cxx b/core/metacling/src/TClingCallbacks.cxx; index 1401f04ee6..b538695533 100644; --- a/core/metacling/src/TClingCallbacks.cxx; +++ b/core/metacling/src/TClingCallbacks.cxx; @@ -188,6 +188,8 @@ public:; continue;; }. + printf(""found symbol '%s' in '%s'\n"", (*name).str().c_str(), libName.c_str());; +; found[libName].push_back(name);; }. ```. Then execute the following Python file:; ```py; import ROOT; print(ROOT.kTRUE); ```. The output (on `macitois22`) is:; ```; found symbol '__ZN5cling7runtime8internal15setValueNoAllocEPvS2_S2_cy' in '/Users/sftnight/jhahnfel/root.build.asserts/lib/libCling.so' ; found symbol '__ZL5kTRUE' in '/Users/sftnight/jhahnfel/root.build.asserts/lib/libRIO.so'; 1; ```; where `kTRUE` should not be found. Or at least the symbols is still not available after loading `libRIO`, and:; ```; $ nm /Users/sftnight/jhahnfel/root.build.asserts/lib/libRIO.so | grep kTRUE; 0000000000272988 s __ZL5kTRUE; ```; From the `man`-page of `nm`:; > If the symbol is local (non-external), the symbol's type is instead represented by the corresponding lowercase letter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10970:268,avail,available,268,https://root.cern,https://github.com/root-project/root/issues/10970,2,['avail'],['available']
Availability,"At some point in `RooGenProdProj::createIntegral()`, an intermediate integral object that should only live during the scope of the function is accidentally put in the `saveSet` output parameter. This needs to be fixed. Thanks to the following forum post for noticing this: https://root-forum.cern.ch/t/error-inputarguments-rooargset-error-argument-with-name-is-already-in-this-set-in-roomcstudy/57571",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14253:302,error,error-inputarguments-rooargset-error-argument-with-name-is-already-in-this-set-in-roomcstudy,302,https://root.cern,https://github.com/root-project/root/pull/14253,1,['error'],['error-inputarguments-rooargset-error-argument-with-name-is-already-in-this-set-in-roomcstudy']
Availability,"At the very end of the build, there is a problem with linking libraries:. [100%] Linking CXX shared library ../../lib/libRMySQL.so; ld: library not found for -lzlib; clang: error: linker command failed with exit code 1 (use -v to see invocation); make[2]: *** [lib/libRMySQL.6.28.04.so] Error 1; make[1]: *** [sql/mysql/CMakeFiles/RMySQL.dir/all] Error 2; make: *** [all] Error 2. However, this library is present in the system and during the cmake it is found:; cmake:; -- Looking for ZLib; -- Found ZLIB: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/lib/libz.tbd (found version ""1.2.11""). The temporary, one-time solution that worked for me was to edit the file created by cmake:; [build directory]/sql/mysql/CMakeFiles/RMySQL.dir/link.txt; I removed the ""-lzlib -lzstd"" part from the list of libraries and the link completed without problems. It looks like the problem is in the build system; Best regards.; Yury. - [ ] Checked for duplicates; <!--; Please search in; * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue); * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT); for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"".; -->. ### Describe the bug; <!--; A clear and concise description of what the wrong behavior is.; -->. ### Expected behavior; <!--; A clear and concise description of what you expected to happen.; -->. ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->. ### Setup; <!--; 1. ROOT version; 2. Operating system; 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself.; -->. ### Additional context; <!--; Add ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12820:173,error,error,173,https://root.cern,https://github.com/root-project/root/issues/12820,4,"['Error', 'error']","['Error', 'error']"
Availability,"At this point `R__ASSERT` is confusing and unusable, it is used as a `run-time pre-requisite check` in lots of places (but not all) and for that ""need"" to not behave like `assert` which is confusing and in some place use as a typical `assert` (detecting supposedly ""impossible"" cases). I think that we ought to:; * Add two new (because user may or may not be using R__ASSERT and relying on its behavior) behavior; * `R__DEBUG_ASSERT` or `R__REQUIRE` that behaves like `assert` but use `::Fatal` (or better yet the new error logger :) ); * `R__VALIDATE` that behaves like the current R__ASSERT; * Open a ticket to remind us to replace (eventually all) the usage of `R__ASSERT` which the appropriate new macro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8587#issuecomment-873129755:518,error,error,518,https://root.cern,https://github.com/root-project/root/pull/8587#issuecomment-873129755,1,['error'],['error']
Availability,"Attribute lookup of the `RDF` property of the `ROOTFacade` class can; potentially lead to issues with the facade not being initialised yet at; that moment. This can happen since creation of the distributed RDataFrame; module is also part of the logic of the `RDF` property. An example of such issues can be reproduced by adding the line; `from DistRDF import CppWorkflow` to the `__init__.py` file. Without; this commit, it would trigger this error:. ```python; >>> import DistRDF; Traceback (most recent call last):; File "".../lib/ROOT/_facade.py"", line 326, in RDF; ns.Experimental.Distributed = _create_rdf_experimental_distributed_module(ns.Experimental); File "".../lib/ROOT/_facade.py"", line 65, in _create_rdf_experimental_distributed_module; return DistRDF.create_distributed_module(parent); AttributeError: partially initialized module 'DistRDF' has no attribute 'create_distributed_module' (most likely due to a circular import). During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; File "".../lib/DistRDF/__init__.py"", line 20, in <module>; from DistRDF import CppWorkflow; File "".../lib/DistRDF/CppWorkflow.py"", line 16, in <module>; RunGraphs = ROOT.RDF.RunGraphs; File "".../lib/ROOT/_facade.py"", line 328, in RDF; raise Exception('Failed to pythonize the namespace RDF'); Exception: Failed to pythonize the namespace RDF; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10069:443,error,error,443,https://root.cern,https://github.com/root-project/root/pull/10069,1,['error'],['error']
Availability,Avoid Snapshot errors when updating directories,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4964:15,error,errors,15,https://root.cern,https://github.com/root-project/root/pull/4964,1,['error'],['errors']
Availability,Avoid failure of v7/line.cxx tutorial in such case. Disable headless in CEF and QWebEngine plugins.; Both do not provide any functionality without X-server running,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4880:6,failure,failure,6,https://root.cern,https://github.com/root-project/root/pull/4880,1,['failure'],['failure']
Availability,Avoid generating gif output files in tutorials. Gif might not be available on some machine snd if a tutorial generates a gif it will produce an error when generating the doxygen documentation.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9588:65,avail,available,65,https://root.cern,https://github.com/root-project/root/pull/9588,2,"['avail', 'error']","['available', 'error']"
Availability,Avoid redundant read (both unzipping and unstreaming in case basket are not perfectly aligned and same size),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4568:6,redundant,redundant,6,https://root.cern,https://github.com/root-project/root/pull/4568,1,['redundant'],['redundant']
Availability,Avoid spurrious errors message about iteration not set in ClassInfo.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1300:16,error,errors,16,https://root.cern,https://github.com/root-project/root/pull/1300,1,['error'],['errors']
Availability,Avoid template instantiation during tear down.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5462:41,down,down,41,https://root.cern,https://github.com/root-project/root/pull/5462,1,['down'],['down']
Availability,"Avoid using forward-declared class as default template arguments in; `RooMinimizer` and `MinuitFcnGrad`. This is the fix for the following test failures in the nightlies:. ```; projectroot.roottest.python.cling.roottest_python_cling_class; projectroot.roottest.python.cling.roottest_python_cling_api; projectroot.roottest.root.meta.tclass.regression.roottest_root_meta_tclass_regression_execNormalizationInfPy; projectroot.roottest.python.cling.roottest_python_cling_cling; projectroot.roottest.root.meta.enumPayloadManipulation.roottest_root_meta_enumPayloadManipulation_checkEnumFwdDecl; ```. For sure we know that these failures got introduced by; root-project#8700. The failures that we see since [root-project#8700](root-project#8700), here are the comments where the bot reported them first:; First Ubuntu 16 fail:; [root-project#8700 (comment)](root-project#8700 (comment)). First Windows 10 fail:; [root-project#8700 (comment)](root-project#8700 (comment)). I narrowed down the origin of this regression to a small part of the; diff of the full PR. The bad guy is some change in one of these files:. * roofit/roofitcore/inc/RooMinimizer.h; * roofit/roofitcore/test/CMakeLists.txt; * roofit/roofitcore/test/TestStatistics/testLikelihoodSerial.cxx. What was fishy in `RooMinimizer.h` was the usage of a forward-declared; class as default template argument. The default template arguments are; commented out now, because these will only become relevant in later; developments by @egpbos.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8997:144,failure,failures,144,https://root.cern,https://github.com/root-project/root/pull/8997,4,"['down', 'failure']","['down', 'failures']"
Availability,"Axel decides, but in my opinion package creation shouldn't fail just because a markdown file cannot be converted to HTML. Either the HTML converted file can be committed along side the markdown, or if it's not possible to convert, just rename to plain text to avoid the failure.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5786#issuecomment-648631591:270,failure,failure,270,https://root.cern,https://github.com/root-project/root/pull/5786#issuecomment-648631591,1,['failure'],['failure']
Availability,"Axel has observed a flaky test on fedora30, which collects too late objects being already out of scope and the fails the test of the refcounts. I've put invokations of the GC now always before we test refcounts to prevent such failures.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6127:227,failure,failures,227,https://root.cern,https://github.com/root-project/root/pull/6127,1,['failure'],['failures']
Availability,"BBUnique (1070 ms); 76: [ RUN ] RWLock.VeryLargeconcurrentReadsSpin; 76: [ OK ] RWLock.VeryLargeconcurrentReadsSpin (392 ms); 76: [ RUN ] RWLock.concurrentReadsAndWritesTL; 76: [ OK ] RWLock.concurrentReadsAndWritesTL (3193 ms); 76: [ RUN ] RWLock.LargeconcurrentReadsAndWritesTL; 76: [ OK ] RWLock.LargeconcurrentReadsAndWritesTL (3102 ms); 76: [ RUN ] RWLock.VeryLargeconcurrentReadsAndWritesTL; 76: [ OK ] RWLock.VeryLargeconcurrentReadsAndWritesTL (6246 ms); 76: [ RUN ] RWLock.VeryLargeconcurrentReadsTL; 76: [ OK ] RWLock.VeryLargeconcurrentReadsTL (1072 ms); 76: [----------] 110 tests from RWLock (213032 ms total); 76: ; 76: [----------] 10 tests from TThreadedObject; 76: [ RUN ] TThreadedObject.CreateAndDestroy; 76: [ OK ] TThreadedObject.CreateAndDestroy (1 ms); 76: [ RUN ] TThreadedObject.Get; 76: [ OK ] TThreadedObject.Get (10 ms); 76: [ RUN ] TThreadedObject.GetAtSlot; 76: [ OK ] TThreadedObject.GetAtSlot (0 ms); 76: [ RUN ] TThreadedObject.GetAtSlotUnchecked; 76: [ OK ] TThreadedObject.GetAtSlotUnchecked (0 ms); 76: [ RUN ] TThreadedObject.GetAtSlotRaw; 76: [ OK ] TThreadedObject.GetAtSlotRaw (0 ms); 76: [ RUN ] TThreadedObject.SetAtSlot; 76: [ OK ] TThreadedObject.SetAtSlot (0 ms); 76: [ RUN ] TThreadedObject.Merge; 76: [ OK ] TThreadedObject.Merge (159 ms); 76: [ RUN ] TThreadedObject.SnapshotMerge; 76: [ OK ] TThreadedObject.SnapshotMerge (1 ms); 76: [ RUN ] TThreadedObject.GrowSlots; 76: [ OK ] TThreadedObject.GrowSlots (0 ms); 76: [ RUN ] TThreadedObject.GetNSlots; 76: [ OK ] TThreadedObject.GetNSlots (1 ms); 76: [----------] 10 tests from TThreadedObject (172 ms total); 76: ; 76: [----------] Global test environment tear-down; 76: [==========] 126 tests from 3 test suites ran. (213929 ms total); 76: [ PASSED ] 126 tests.; 1/1 Test #76: gtest-core-thread-test-corethreadtestUnit ... Passed 214.25 sec. The following tests passed:; gtest-core-thread-test-corethreadtestUnit. 100% tests passed, 0 tests failed out of 1. Total Test time (real) = 215.09 sec; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6919#issuecomment-742071485:14166,down,down,14166,https://root.cern,https://github.com/root-project/root/pull/6919#issuecomment-742071485,1,['down'],['down']
Availability,"BTW, even after fixing `RootMacros.cmake`, there are still a lot of those warnings:; ```; RegularExpression::compile(): Nested *?+.; RegularExpression::compile(): Error in compile.; RegularExpression::compile(): Nested *?+.; RegularExpression::compile(): Error in compile.; RegularExpression::compile(): Nested *?+.; RegularExpression::compile(): Error in compile.; RegularExpression::compile(): Nested *?+.; RegularExpression::compile(): Error in compile.; RegularExpression::compile(): Nested *?+.; RegularExpression::compile(): Error in compile.; RegularExpression::compile(): Nested *?+.; RegularExpression::compile(): Error in compile.; ```; coming from somewhere else (trying to figure out)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13731#issuecomment-1737545997:163,Error,Error,163,https://root.cern,https://github.com/root-project/root/issues/13731#issuecomment-1737545997,6,['Error'],['Error']
Availability,"BTW, the failure above is not your fault, but a problem with the current CI. You need to fork also `roottest` to make it go away.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11844#issuecomment-1339224082:9,failure,failure,9,https://root.cern,https://github.com/root-project/root/pull/11844#issuecomment-1339224082,2,"['failure', 'fault']","['failure', 'fault']"
Availability,"Back to this. I got sanitizer errors with ROOT master, like for example:; ```; Generating G__ROOTVecOps.cxx, ../../bin/libROOTVecOps_rdict.pcm, ../../bin/libROOTVecOps.rootmap; =================================================================; ==13496==ERROR: AddressSanitizer: heap-use-after-free on address 0x1262507beddc at pc 0x7ffdb6b7a85c bp 0x008d589d7da0 sp 0x008d589d7da8; READ of size 4 at 0x1262507beddc thread T0; #0 0x7ffdb6b7a85b in ROOT::Internal::DeleteChangesMemoryImpl(void) C:\root-dev\git\master\core\base\src\TObject.cxx:120; #1 0x7ffdb6b7a543 in ROOT::Internal::DeleteChangesMemory(void) C:\root-dev\git\master\core\base\src\TObject.cxx:129; #2 0x7ffdb6c4f848 in ROOT::Detail::HasBeenDeleted C:\root-dev\git\master\core\base\inc\TObject.h:403; #3 0x7ffdb6c4f848 in TList::FindLink(class TObject const *, int &) const C:\root-dev\git\master\core\cont\src\TList.cxx:644; #4 0x7ffdb6c519d5 in TList::Remove(class TObject *) C:\root-dev\git\master\core\cont\src\TList.cxx:827; #5 0x7ffdb6c44e76 in THashList::RecursiveRemove(class TObject *) C:\root-dev\git\master\core\cont\src\THashList.cxx:335; #6 0x7ffdb6bb56a5 in TROOT::RecursiveRemove(class TObject *) C:\root-dev\git\master\core\base\src\TROOT.cxx:2502; #7 0x7ffdb6b54712 in ROOT::CallRecursiveRemoveIfNeeded(class TObject &) C:\root-dev\git\master\core\base\inc\TROOT.h:400; #8 0x7ffdb6b7993d in TObject::~TObject(void) C:\root-dev\git\master\core\base\src\TObject.cxx:163; #9 0x7ffdb6cc03ae in ROOT::Internal::TCheckHashRecursiveRemoveConsistency::~TCheckHashRecursiveRemoveConsistency(void) C:\root-dev\git\master\core\meta\src\TCheckHashRecursiveRemoveConsistency.h; :68; #10 0x7ffdb6cd5c65 in TClass::HasConsistentHashMember(void) C:\root-dev\git\master\core\meta\inc\TClass.h:504; #11 0x7ffdb6cd5838 in ROOT::Internal::HasConsistentHashMember(class TClass &) C:\root-dev\git\master\core\meta\src\TClass.cxx:7373; #12 0x7ffdb6c54bc2 in TPair::CheckTObjectHashConsistency(void) const C:\root-dev\git\master\core\cont\inc\",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9445#issuecomment-2370893163:30,error,errors,30,https://root.cern,https://github.com/root-project/root/issues/9445#issuecomment-2370893163,2,"['ERROR', 'error']","['ERROR', 'errors']"
Availability,Back-port [Fix build errors with clang-tblgen in Debug mode using MSVC 2019 v16.6](https://github.com/llvm/llvm-project/commit/28a6713e107); After updating MSVS19 from v16.4 to v16.6 I faced with a build errors compiling in Debug mode.; It complains on clang-tblgen.exe and llvm-tblgen.exe cmd line args.; VS compiler had a bug. It dynamically creates an object with constexpr ctor in Debug mode. This bug was fixed in VS2019 v16.5.; A workaround was implemented for that and everything works until v16.5 comes.; The workaround became irrelevant since v16.5 and caused build errors.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6125:21,error,errors,21,https://root.cern,https://github.com/root-project/root/pull/6125,3,['error'],['errors']
Availability,Back-port a fix for build errors with clang-tblgen in Debug mode,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6125:26,error,errors,26,https://root.cern,https://github.com/root-project/root/pull/6125,1,['error'],['errors']
Availability,Backport in 6.20 the fix the support in TMVA for GPU (Cuda) when cuDNN is not available (ROOT-10597),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5103:78,avail,available,78,https://root.cern,https://github.com/root-project/root/pull/5103,1,['avail'],['available']
Availability,Backport of RVec mask fix (v6.26),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12596:17,mask,mask,17,https://root.cern,https://github.com/root-project/root/pull/12596,1,['mask'],['mask']
Availability,"Backport of https://github.com/root-project/root/pull/8364. The downsteam code, -- like RooAddPdf::getValV for example -- assume; that a nullptr is passed when no normalization is requested. The case of; an empty norm set is not handled correctly in RooAddPdf::getValV,; leading to wrong results. However, some calling code passes an empty norm set to; RooAbsReal::getVal instead of a `nullptr` in an attempt to disable; normalization. This commit suggests to solve this ambiguity at the highest possible; level: right at the beginning of RooAbsReal::getVal. If the; normalization set is empty, the pointer pointing to it will be set to; `nullptr`. This fixes issue #8307. To give some context: the code in RooAddPdf that doesn't handle the ambiguity correctly was introduced in f6d1543, which was also backported to 6.24. Hence, a backport to 6.24 is necessary also for this PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8372:64,down,downsteam,64,https://root.cern,https://github.com/root-project/root/pull/8372,1,['down'],['downsteam']
Availability,Backport of the following PR to fix 6.28 nightly failures:. * https://github.com/root-project/root/pull/13533,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13778:49,failure,failures,49,https://root.cern,https://github.com/root-project/root/pull/13778,1,['failure'],['failures']
Availability,Backport: correct for Logx when drawing histogram errors,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5358:50,error,errors,50,https://root.cern,https://github.com/root-project/root/pull/5358,1,['error'],['errors']
Availability,"Backporting some PRs to avoid test failures in the nightlies:; * https://github.com/root-project/root/pull/12693; * https://github.com/root-project/root/pull/13712; * https://github.com/root-project/root/pull/13718; * https://github.com/root-project/root/pull/13765; * https://github.com/root-project/root/pull/13524; * https://github.com/root-project/root/pull/13525; * https://github.com/root-project/root/pull/13613. After these trivial backports, the only PR that needs to be backported to fix the remaining failures is this one:; * https://github.com/root-project/root/pull/13533. However, this would not be a simple conflict-less backport because the changes interact with new feature development for ROOT 6.30. It's maybe better if @lmoneta takes care of this.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13777:35,failure,failures,35,https://root.cern,https://github.com/root-project/root/pull/13777,2,['failure'],['failures']
Availability,"Backports of recent fixes and improvements for the release. In particular, fixes unused variable warnings and makes the build system more robust.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15531:138,robust,robust,138,https://root.cern,https://github.com/root-project/root/pull/15531,1,['robust'],['robust']
Availability,"Backtrace for `core/rootcling_stage1/src/rootcling_stage1`:. ```; : CommandLine Error: Option 'W' registered more than once!; LLVM ERROR: inconsistency in registered CommandLine options. Program received signal SIGABRT, Aborted.; __pthread_kill_implementation (threadid=<optimized out>, signo=signo@entry=6, no_tid=no_tid@entry=0) at ./nptl/pthread_kill.c:44; 44	./nptl/pthread_kill.c: No such file or directory.; (gdb) where; #0 __pthread_kill_implementation (threadid=<optimized out>, signo=signo@entry=6, no_tid=no_tid@entry=0) at ./nptl/pthread_kill.c:44; #1 0x00007ffff1ca9d2f in __pthread_kill_internal (signo=6, threadid=<optimized out>) at ./nptl/pthread_kill.c:78; #2 0x00007ffff1c5aef2 in __GI_raise (sig=sig@entry=6) at ../sysdeps/posix/raise.c:26; #3 0x00007ffff1c45472 in __GI_abort () at ./stdlib/abort.c:79; #4 0x00007ffff2b39e7d in llvm::report_fatal_error(llvm::Twine const&, bool) () from /usr/lib/llvm-13/lib/libLLVM-13.so.1; #5 0x00007ffff2b39ca6 in llvm::report_fatal_error(char const*, bool) () from /usr/lib/llvm-13/lib/libLLVM-13.so.1; #6 0x00007ffff2b271f4 in ?? () from /usr/lib/llvm-13/lib/libLLVM-13.so.1; #7 0x00007ffff2b191eb in llvm::cl::Option::addArgument() () from /usr/lib/llvm-13/lib/libLLVM-13.so.1; #8 0x0000555555d0f50a in llvm::cl::list<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, llvm::cl::parser<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::list<char [2], llvm::cl::FormattingFlags, llvm::cl::NumOccurrencesFlag, llvm::cl::desc, llvm::cl::cat>(char const (&) [2], llvm::cl::FormattingFlags const&, llvm::cl::NumOccurrencesFlag const&, llvm::cl::desc const&, llvm::cl::cat const&) (); #9 0x0000555555c780e0 in __static_initialization_and_destruction_0(int, int) [clone .constprop.0] (); #10 0x00007ffff1c462b6 in call_init (env=<optimized out>, argv=0x7fffffffdd58, argc=1) at ../csu/libc-start.c:145; #11 __libc_start_main_impl (main=0x555555c78d70 <main>, argc=1, argv=0x7fff",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12156#issuecomment-1407693900:80,Error,Error,80,https://root.cern,https://github.com/root-project/root/issues/12156#issuecomment-1407693900,2,"['ERROR', 'Error']","['ERROR', 'Error']"
Availability,"Backtrace:; ```; * thread #1, queue = 'com.apple.main-thread', stop reason = breakpoint 1.1; * frame #0: 0x000000011a9d279c libCling.so`clang::TextDiagnosticPrinter::HandleDiagnostic(this=0x0000600002109a40, Level=Error, Info=0x00007ff7bfef1b30) at TextDiagnosticPrinter.cpp:112:40; frame #1: 0x0000000119cb30b1 libCling.so`(anonymous namespace)::FilteringDiagConsumer::HandleDiagnostic(this=0x0000600002605e00, DiagLevel=Error, Info=0x00007ff7bfef1b30) at IncrementalParser.cpp:196:22; frame #2: 0x00000001196dc5a2 libCling.so`CheckModuleBuildClient::HandleDiagnostic(this=0x0000600000c39b30, DiagLevel=Error, Info=0x00007ff7bfef1b30) at rootcling_impl.cxx:3599:18; frame #3: 0x000000011fb92e34 libCling.so`clang::DiagnosticIDs::EmitDiag(this=0x000060000000c090, Diag=0x0000000103008e00, DiagLevel=Error) const at DiagnosticIDs.cpp:804:16; frame #4: 0x000000011fb92c27 libCling.so`clang::DiagnosticIDs::ProcessDiag(this=0x000060000000c090, Diag=0x0000000103008e00) const at DiagnosticIDs.cpp:796:3; frame #5: 0x000000011fb838a9 libCling.so`clang::DiagnosticsEngine::ProcessDiag(this=0x0000000103008e00) at Diagnostic.h:1032:19; frame #6: 0x000000011fb8383b libCling.so`clang::DiagnosticsEngine::EmitCurrentDiagnostic(this=0x0000000103008e00, Force=false) at Diagnostic.cpp:556:15; frame #7: 0x0000000119835bbf libCling.so`clang::DiagnosticBuilder::Emit(this=0x00007ff7bfef4d98) at Diagnostic.h:1315:28; frame #8: 0x0000000119835b59 libCling.so`clang::DiagnosticBuilder::~DiagnosticBuilder(this=0x00007ff7bfef4d98) at Diagnostic.h:1356:26; frame #9: 0x00000001198345c5 libCling.so`clang::DiagnosticBuilder::~DiagnosticBuilder(this=0x00007ff7bfef4d98) at Diagnostic.h:1356:24; frame #10: 0x000000011acaf2d8 libCling.so`clang::ASTReader::diagnoseOdrViolations(this=0x0000000102887a00) at ASTReader.cpp:9572:7; frame #11: 0x000000011acbdf09 libCling.so`clang::ASTReader::FinishedDeserializing(this=0x0000000102887a00) at ASTReader.cpp:11674:5; frame #12: 0x0000000119cd953d libCling.so`cling::ExternalAST",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12788#issuecomment-1538921951:214,Error,Error,214,https://root.cern,https://github.com/root-project/root/issues/12788#issuecomment-1538921951,4,['Error'],['Error']
Availability,Bad error handling with pyroot template instantiations,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11854:4,error,error,4,https://root.cern,https://github.com/root-project/root/issues/11854,1,['error'],['error']
Availability,"BarImp.h TGuiFactory.h TInspectorImp.h TObjectSpy.h TToggleGroup.h TToggle.h TBaseClass.h TClassGenerator.h TClass.h TClassRef.h TClassStreamer.h TDataMember.h TDataType.h TDictAttributeMap.h TDictionary.h TEnumConstant.h TEnum.h TFileMergeInfo.h TFunction.h TFunctionTemplate.h TGenericClassInfo.h TGlobal.h TInterpreter.h TInterpreterValue.h TIsAProxy.h TListOfDataMembers.h TListOfEnums.h TListOfEnumsWithLock.h TListOfFunctions.h TListOfFunctionTemplates.h TMemberStreamer.h TMethodArg.h TMethodCall.h TMethod.h TProtoClass.h TRealData.h TSchemaHelper.h TSchemaRule.h TSchemaRuleSet.h TStatusBitsChecker.h TStreamerElement.h TStreamer.h TVirtualIsAProxy.h TVirtualRefProxy.h TVirtualStreamerInfo.h TVirtualArray.h TVirtualObject.h Getline.h /home/cai/root/root-6.26.06/core/base/inc/LinkDef.h ; Segmentation fault; gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:470: core/G__Core.cxx] Error 1; gmake[1]: *** [CMakeFiles/Makefile2:33018: core/CMakeFiles/G__Core.dir/all] Error 2; gmake: *** [Makefile:156: all] Error 2. I've tried some times, the build never success, here I come for help. reeBSD# gcc --version ; gcc (FreeBSD Ports Collection) 11.3.0; Copyright (C) 2021 Free Software Foundation, Inc.; This is free software; see the source for copying conditions. There is NO; warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. the compiler I installed:; FreeBSD# c++ --version; FreeBSD clang version 13.0.0 (git@github.com:llvm/llvm-project.git llvmorg-13.0.0-0-gd7b669b3a303); Target: x86_64-unknown-freebsd13.1; Thread model: posix; InstalledDir: /usr/bin; FreeBSD# clang --version; FreeBSD clang version 13.0.0 (git@github.com:llvm/llvm-project.git llvmorg-13.0.0-0-gd7b669b3a303); Target: x86_64-unknown-freebsd13.1; Thread model: posix; InstalledDir: /usr/bin; -->. ### Expected behavior; <!--; A clear and concise description of what you expected to happen.; -->. ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issu",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11430:7203,Error,Error,7203,https://root.cern,https://github.com/root-project/root/issues/11430,2,['Error'],['Error']
Availability,"Base classes for attributes defined in gpad, but also some classes like; RPad uses line or fill attributes. Later attributes can be extracted; into separate library. Should resolve circular dependency error, detected only on Windows",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3702:201,error,error,201,https://root.cern,https://github.com/root-project/root/pull/3702,1,['error'],['error']
Availability,"Based on the following patch by @wlav :; https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/signaltrycatch.diff. Adds a new exception handler used by cppyy to provide a better debugging experience in presence of errors:; https://cppyy.readthedocs.io/en/latest/debugging.html. It also adds SIGABRT and provides support for signal handling on Windows. The original cppyy patch has been modified to make it backwards compatible, since it eliminated the use of gApplication for exception handling in Unix. In this version, if there is an exception handler (e.g. we are using PyROOT, which defines it via cppyy) we will rely on that handler to treat the exception,; otherwise we fall back to the previous behaviour which relied on gApplication. Windows-related changes to be reviewed by @bellenot.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4671:227,error,errors,227,https://root.cern,https://github.com/root-project/root/pull/4671,1,['error'],['errors']
Availability,Based on those errors it should resolve the ticket. Let's ask OP on the ticket to try now.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1297#issuecomment-342920631:15,error,errors,15,https://root.cern,https://github.com/root-project/root/pull/1297#issuecomment-342920631,1,['error'],['errors']
Availability,"Basic refactoring of test/stressMathCore.cxx to be smaller, more manageable files, and to use Google Test. The functionality is the same, but is now using Google Test for assertions instead of doing logical operations on an integer as the test result. Ping @lmoneta",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/594:252,Ping,Ping,252,https://root.cern,https://github.com/root-project/root/pull/594,1,['Ping'],['Ping']
Availability,"Basically, the problem was twofold:; 1. Using the number of entries for scaling the basket size can be really incorrect -- rather, we want the cluster size. This is only available it OptimizeBaskets is called via AutoFlush.; 2. We only need to set aside extra metadata if there is an entry offset buffer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1998:170,avail,available,170,https://root.cern,https://github.com/root-project/root/pull/1998,1,['avail'],['available']
Availability,"Basically, this boils down to limitations in the current implementation of `cling::utils::getWrapPoint()`. I will be working on this in the next few days.; The separate issue ROOT-9202 is also being investigated an will be fixed soon.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8064#issuecomment-841886465:22,down,down,22,https://root.cern,https://github.com/root-project/root/issues/8064#issuecomment-841886465,1,['down'],['down']
Availability,"Batch mode, which is now only supported by Chrome, allows to run; JS code loaded from file and dump result to output file - no any; communication with host application required. Now extra headless mode is introduced, which allows to run client; code in the headless browser and communicate with it. It was original; way to produce batch images, therefore need to rename some methods; to clearly separate from old functionality. Adjust `tutorials/webgui/ping` tutorial to let it run in ""headless"" mode when -b specified.; In such case macro waits until 200 round-trip packets arrived and automatically ends.; Can be used in PR/Nightly testings. Testes on Windows/Mac/Linux",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7839:453,ping,ping,453,https://root.cern,https://github.com/root-project/root/pull/7839,1,['ping'],['ping']
Availability,Be explicit about reason for error in distributed execution,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14633:29,error,error,29,https://root.cern,https://github.com/root-project/root/pull/14633,1,['error'],['error']
Availability,"Because RDataFrame is not available on 32bit, we have to disable the; experimental parts of TMVA which are dependent on it as well.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3957:26,avail,available,26,https://root.cern,https://github.com/root-project/root/pull/3957,1,['avail'],['available']
Availability,"Because of limited flaoting point precision, an error message was issued; on 32 bit architectures. The concerned check for equality check is now; a bit more forgiving.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4212:48,error,error,48,https://root.cern,https://github.com/root-project/root/pull/4212,1,['error'],['error']
Availability,"Because of limited floating point precision, an error message was issued; on 32 bit architectures. The concerned check for equality is now; a bit more forgiving. (cherry picked from commit b8235e91725d94dc6231e8006e2de53dc1b2671e)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4218:48,error,error,48,https://root.cern,https://github.com/root-project/root/pull/4218,1,['error'],['error']
Availability,"Because of these errors (see e.g. https://bit.ly/31y2jSa):. ```; Plugin dlopen(libXrdSecgsi-4.so, 256): image not found sec.protocol libXrdSecgsi-4.so; Secsss: 0x30 cryptography load failed; Protocol not supported; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5946:17,error,errors,17,https://root.cern,https://github.com/root-project/root/pull/5946,2,['error'],['errors']
Availability,"Because of these errors (see e.g. https://bit.ly/31y2jSa):. ```; Plugin dlopen(libXrdSecgsi-4.so, 256): image not found sec.protocol libXrdSecgsi-4.so; Secsss: 0x30 cryptography load failed; Protocol not supported; ```. @hageboeck i'm not sure whether this interferes with #5938",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5943:17,error,errors,17,https://root.cern,https://github.com/root-project/root/pull/5943,1,['error'],['errors']
Availability,Because the XOR mode was not properly implemented on Cocoa the fit panel range di not work.; This problem was mentioned here: https://root-forum.cern.ch/t/bugs-in-tfit-errors-when-trying-to-fit-a-histogram/43789. An issue was opened there: https://github.com/root-project/root/issues/7340. The fix was provided by Timur,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7492:168,error,errors-when-trying-to-fit-a-histogram,168,https://root.cern,https://github.com/root-project/root/pull/7492,1,['error'],['errors-when-trying-to-fit-a-histogram']
Availability,"Because the new dataframe tutorial use xrootd to read the files remotely, we have to veto them if xrootd is not found.; This should fix the failures on cdash from last night.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2828:140,failure,failures,140,https://root.cern,https://github.com/root-project/root/pull/2828,1,['failure'],['failures']
Availability,"Befor we switched JSROOT to the local instances of the JS libraries, we could use jupyter with all features right after sourcing `thisroot.*`. Due to the switch, the path to the JS libraries was broken, which is now fixed by this PR. This makes `root --notebook` redundant in this case. Still to be added is the correct behaviour when ROOT is installed. I'll line out here how it should be done:. 1. We should abandon the `.rootnb` folder in `HOME` and use the default `.jupyter` folder.; 2. There, we have to add our config to the `jupyter_notebook_config.py` file, which is basically nothing else than `c.NotebookApp.extra_static_paths.append('/path/to/root/js')`.; 3. I think we should just get rid of the custom css things, which would be made default if installed into `.jupyter`.; 4. Install the ROOT kernel in `/usr/share/jupyter/kernels/root`, such as all other kernels. I would go first with this PR, which only improves the current behaviour. Next I'll have a look into a proper installation of our jupyter related files, but I'll make another PR for that. **Edit:** I've fixed the installation to a prefix. This just fixes the current issues but keeps the old installation/sourcing behaviour of jupyroot. We can refactor in another RP later!",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6155:263,redundant,redundant,263,https://root.cern,https://github.com/root-project/root/pull/6155,1,['redundant'],['redundant']
Availability,"Before the crash, two output files are produced. `Run2012B_SingleMu10x.root` seems well-formed, while trying to open `Run2012B_SingleMu10x_1.root` results in . ```; Error in <TFile::ReadBuffer>: error reading all requested bytes from file Run2012B_SingleMu10x_1.root, got 272 of 300; Error in <TFile::Init>: Run2012B_SingleMu10x_1.root failed to read the file type data.; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10102#issuecomment-1065875177:165,Error,Error,165,https://root.cern,https://github.com/root-project/root/issues/10102#issuecomment-1065875177,3,"['Error', 'error']","['Error', 'error']"
Availability,"Before this commit, in single-thread event loops RDF was throwing; in case TTreeReader had an error flag at the end of the loop.; Now multi-thread loops perform the same check at the end of each task.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8748:94,error,error,94,https://root.cern,https://github.com/root-project/root/pull/8748,1,['error'],['error']
Availability,"Before this commit, whenever a function was constructing a node; of the computation graph it had to ""remember"" to also register; that node with the RLoopManager, which needs to know which nodes; are around so it can tell them e.g. to execute task initialization; and task finalization logic.; Deregistration happened in the node's destructors. With this patch, registration happen in the constructor and; deregistration in the destructor of a node, i.e. this logic is; where a reader might expect it to be and new code does not have; to ""remember"" to register objects with the RLoopManager. Jitted nodes of the computation graph (e.g. RJittedAction,; RJittedDefine) don't need to register themselves with the; RLoopManager: the _concrete_ nodes will be registered right; before the event loop, at jitting time, and that is good enough.; RJittedFilter is an exception: RLoopManager needs to know what; filters have been booked even before the event loop (i.e. before; concrete filters are instantiated by jitted code) in order to; return a correct list from RLoopManager::GetFiltersNames().; So RJittedFilters register themselves with RLoopManager at; construction time and deregister themselves in; RJittedFilter::SetFilter, i.e. when they can be sure that the; concrete filter has been instantiated in jitted code and it has; been registered with RLoopManager, making the RJittedFilter; registration redundant. To the reviewers: I'll make the naming more uniform (Register/Deregister instead of Book/Deregister) in a subsequent PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10653:1401,redundant,redundant,1401,https://root.cern,https://github.com/root-project/root/pull/10653,1,['redundant'],['redundant']
Availability,"Before this patch RDF would first, eagerly, declare a dummy lambda; that contained the user-defined expression to check verify the cling; could understand it; then, lazily, the actual lambda variable used; by the nodes of the computation graph was jitted, together with all; other declarations required by RDF, just before the event loop. With this patch, the first declaration serves both purposes: it checks; that the expression is just-in-time compilable _and_ jits precisely the; definition that will be required during the event loop. This removes; redundant logic and results in strictly less work required of the; interpreter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5487:554,redundant,redundant,554,https://root.cern,https://github.com/root-project/root/pull/5487,1,['redundant'],['redundant']
Availability,Before this patch we skipped running CleanUpTask if the status; of the TTreeReader after a single-thread event loop over ROOT data; encountered an error.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8337:147,error,error,147,https://root.cern,https://github.com/root-project/root/pull/8337,2,['error'],['error']
Availability,"Before this patch, RCustomColumnBase's destructor could access; RLoopManager after deletion in some cases, e.g. when jitting code after; the computation graph was already out of scope or when the RLoopManager; was kept alive only by another node's shared_ptr to it. I think we never; saw a crash due to this bug because the use is _right after_ deletion,; and there is never an allocation between deletion and use. Valgrind; still sees it though. Thanks to the previous commit, all the logic that entangled RLoopManager; and RCustomColumns can actually be removed, and in particular; RCustomColumnBase's destructor does not need to access RLoopManager; anymore, fixing the use after delete. A minimal reproducer for the use after delete:. ```cpp; auto f = ROOT::RDataFrame(1).Filter([] { return true; });; ```. Before RFilter is destructed, it deletes its fPrevNode (shared_ptr to; the previous node), which triggers destruction of RLoopManager. Later,; RFilterBase is destructed, which triggers destruction of its registered; custom columns (in this case, the default ""rdfentry_"" or ""rdfslot_""; columns) and ~RCustomColumnBase tries to access RLoopManager.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5544:219,alive,alive,219,https://root.cern,https://github.com/root-project/root/pull/5544,1,['alive'],['alive']
Availability,"Before this patch, each node in the computation graph was; re-creating or re-requesting column readers for datasource and TTree/TChain; columns separately. We now create column readers for datasource and TTree/TChain columns early and; store them in RLoopManager which then gives out pointers to the; same RColumnReaderBase objects to all nodes. This is the first part of a series of changes aimed at; centralizing ownership and creation of all kinds of column; readers (defines and variations will come in a subsequent PR).; Sharing column readers among nodes of the computation; graph saves some redundant work and it is a pre-requisite for bulk; processing at the level of RDF.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10793:598,redundant,redundant,598,https://root.cern,https://github.com/root-project/root/pull/10793,1,['redundant'],['redundant']
Availability,"Before this patch, friend branches or leaves were listed in the output of `GetColumnNames` twice, as `friendname.bname` and as `bname`. Now we only list the longer version. This fixes #8450 as a side-effect. This PR also adds a test and improves the related docs. Rationale for the change in behavior of `GetColumnNames`: currently, in RDataFrame we have (fairly convoluted) logic to retrieve 3 different lists of branch names given a TTree/TChain:. 1. a user-readable of list of available column names returned by `df.GetColumnNames()`; 2. a larger list of all valid spellings for all column names, used to validate user inputs (this includes all names returned by `df.GetColumnNames()` plus alternative spellings such as `branchname.leafname` when `branchname == leafname`, shorthands for `friendname.branchname` as just `branchname`, etc.; 3. a list of only top-level branches that we use as the list of branches to `Snapshot` by default. Before this patch `df.GetColumnNames()` returned multiple valid spellings for the same friend branch. That can be confusing, so I'd rather (try to) return only one valid spelling for each available branch/leaf. For consistency with `Display` and to not withhold information from users, among the two valid spellings we always show the ""fully qualified friendname.branchname"". Users can still use the shorthand ""branchname"" if it's not ambiguous, as the relevant documentation now points out.; I think this solution is the sweet spot between not being surprising (to users and to RDF developers), being easy to implement without further complicating or completely refactoring the branch-retrieval logic and being somewhat backward-compatible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8529:480,avail,available,480,https://root.cern,https://github.com/root-project/root/pull/8529,2,['avail'],['available']
Availability,"Before this patch, given a TTree with a branch with name _different_; from its leaf, e.g. like this:. ```; *Br 0 :NUD_total_ADC : nud_total_adc/D; ```. RDataFrame only added ""branchname.leafname"" to the list of available; columns (i.e. ""NUD_total_ADC.nud_total_adc"" in the example). In comparison, in a similar situation `TTree::Draw` also accepts; just ""NUD_total_ADC"" as it assumes that the desired leaf is the; first sub-leaf of the specified branch. With this patch, RDataFrame also considers ""NUD_total_ADC"" as a valid; column name as long as it has only one sub-leaf. This, together with previous fixes in TTreeReader, fixes ROOT-9558.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7918:211,avail,available,211,https://root.cern,https://github.com/root-project/root/pull/7918,1,['avail'],['available']
Availability,"Before this patch, if a RLoopManager went out of scope before running; its event loop (a rare occurrence, but indeed possible, especially in; interactive sessions), we were leaking certain weak_ptrs and shared_ptrs; to components of the computation graph, that were meant to be used by; lazily jitted code that was never actually jitted in the end. With this change, when _any_ RLoopManager runs the event loop, we; trigger execution of _all_ jitted code that was registered, even if; it was registered by an RLoopManager that is now out of scope. In the; latter case, the code only performs clean-up of the heap-allocated; weak_ptrs and shared_ptrs and exits. We still ""leak"" in the odd case; in which RDF jitted code is registered but the application never actually; triggers any RDF event loops, in which case the code to be lazily jitted; remains in the pipeline until the end of the application, and parts of; the computation graph are kept alive indefinitely by heap-allocated shared_ptrs. For this to work, we need to detect when compiled objects went out of scope and we don't actually have to run the jitted code but just perform the clean-up, so we switch from heap-allocated shared_ptrs to heap-allocated weak_ptrs for those objects.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5488:946,alive,alive,946,https://root.cern,https://github.com/root-project/root/pull/5488,1,['alive'],['alive']
Availability,"Before this patch, in order to assert that the column type; returned by a Vary expression matched the type of the column we; always asked cling to provide a type id for the existing column; via TypeName2TypeID(GetColumnType(colName)). That failed if the; column had a type not known to the interpreter, e.g. because it; was Define'd and the expression returned a user-defined type. With this patch we use the typeid information coming from the; RDefine node if it is available, otherwise we try with cling. A corresponding test is coming soon in another PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10602:467,avail,available,467,https://root.cern,https://github.com/root-project/root/pull/10602,1,['avail'],['available']
Availability,"Before we can merge (or even test) this, the version needs to be uploaded at https://lcgpackages.web.cern.ch/tarFiles/sources/. The checksum of the github files are not stable (somehow the files are 'routinely' regenerated sometimes with different version of tar or gzip), so we can not rely on downloading it directly from github.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10725#issuecomment-1151358394:295,down,downloading,295,https://root.cern,https://github.com/root-project/root/pull/10725#issuecomment-1151358394,1,['down'],['downloading']
Availability,"Before, ""make version"" needed to have ROOT built to run root.exe, to then rebuild ROOT. Cut down on rebuilds during releases by relying on a python script instead.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5095:92,down,down,92,https://root.cern,https://github.com/root-project/root/pull/5095,1,['down'],['down']
Availability,"Before, MetaParser might have pointed to a StringRef whose storage; was gone, see asan failure in roottest/cling/other/runfileClose.C below. This was caused by recursive uses of MetaParser; see stack trace below:; the inner recursion returned, but as the same MetaParser object was used; by both frames, the objects cursor now pointed to freed memory. Instead, create a MetaParser (and MetaLexer) object per input. That way,; their lifetime corresponds to the lifetime of their input.; ```; =================================================================; ==529104==ERROR: AddressSanitizer: stack-use-after-return on address 0x7ffff3afd82a at pc 0x7fffea18df6d bp 0x7fffffff8170 sp 0x7fffffff8168; READ of size 1 at 0x7ffff3afd82a thread T0; [Detaching after fork from child process 529183]; #0 0x7fffea18df6c in cling::MetaLexer::Lex(cling::Token&) src/interpreter/cling/lib/MetaProcessor/MetaLexer.cpp:58:11; #1 0x7fffea190d7c in cling::MetaParser::lookAhead(unsigned int) src/interpreter/cling/lib/MetaProcessor/MetaParser.cpp:89:15; #2 0x7fffea190bd5 in cling::MetaParser::consumeToken() src/interpreter/cling/lib/MetaProcessor/MetaParser.cpp:49:5; #3 0x7fffea191d4d in cling::MetaParser::isLCommand(cling::MetaSema::ActionResult&) src/interpreter/cling/lib/MetaProcessor/MetaParser.cpp:147:9; #4 0x7fffea1914dd in cling::MetaParser::isCommand(cling::MetaSema::ActionResult&, cling::Value*) src/interpreter/cling/lib/MetaProcessor/MetaParser.cpp:123:12; #5 0x7fffea191216 in cling::MetaParser::isMetaCommand(cling::MetaSema::ActionResult&, cling::Value*) src/interpreter/cling/lib/MetaProcessor/MetaParser.cpp:101:33; #6 0x7fffea14e5aa in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) src/interpreter/cling/lib/MetaProcessor/MetaProcessor.cpp:317:24; #7 0x7fffe99b67b7 in HandleInterpreterException(cling::MetaProcessor*, char const*, cling::Interpreter::CompilationResult&, cling::Value*) src/core/metacling/src/TCling.cxx:2431:29; ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8041:87,failure,failure,87,https://root.cern,https://github.com/root-project/root/pull/8041,2,"['ERROR', 'failure']","['ERROR', 'failure']"
Availability,"Before, cling used the first specialization, which is often incorrect. Instead pass the ""current"" specialization as context down to the relevant functions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8124:124,down,down,124,https://root.cern,https://github.com/root-project/root/pull/8124,1,['down'],['down']
Availability,"Before, if one wanted to slice over mulitple categories in; `RooAbsReal::plotOn`, one had to repeatedly use the Slice command; argument. This is problematic for the keyword pythonizations in pyROOT,; because keyword arguments in python can't be repeated. With this change, it is also not necessary anymore to repeat any command; arguements in RooFit. This will help to solve Jira issue [ROOT-2784](https://sft.its.cern.ch/jira/browse/ROOT-2784), as; we can just always throw an error (or issue a warning) if a RooCmdArg is repeated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8406:478,error,error,478,https://root.cern,https://github.com/root-project/root/pull/8406,1,['error'],['error']
Availability,"Before:; ```; Segmentation fault; ```. After:; ```; rootcling_stage1 0x000000010ea2ba98 llvm::sys::PrintStackTrace(llvm::raw_ostream&) + 40; 1 rootcling_stage1 0x000000010ea2ad46 llvm::sys::RunSignalHandlers() + 86; 2 rootcling_stage1 0x000000010ea2bffe SignalHandler(int) + 270; 3 libsystem_platform.dylib 0x00007fff65610b3d _sigtramp + 29; 4 rootcling_stage1 0x000000010c7b68dd clang::operator==(clang::QualType const&, clang::QualType const&) + 29; 5 rootcling_stage1 0x000000010d531b20 clang::Preprocessor::getModuleHeaderToIncludeForDiagnostics(clang::SourceLocation, clang::Module*, clang::SourceLocation) + 48; 6 rootcling_stage1 0x000000010d95bfc7 clang::Sema::diagnoseMissingImport(clang::SourceLocation, clang::NamedDecl*, clang::SourceLocation, llvm::ArrayRef<clang::Module*>, clang::Sema::MissingImportKind, bool) + 535; 7 rootcling_stage1 0x000000010d95b6eb clang::Sema::diagnoseMissingImport(clang::SourceLocation, clang::NamedDecl*, clang::Sema::MissingImportKind, bool) + 395; 8 rootcling_stage1 0x000000010d95b199 clang::Sema::diagnoseTypo(clang::TypoCorrection const&, clang::PartialDiagnostic const&, clang::PartialDiagnostic const&, bool) + 441; 9 rootcling_stage1 0x000000010d95af83 clang::Sema::diagnoseTypo(clang::TypoCorrection const&, clang::PartialDiagnostic const&, bool) + 51; 10 rootcling_stage1 0x000000010d6f0a39 clang::Sema::DiagnoseUnknownTypeName(clang::IdentifierInfo*&, clang::SourceLocation, clang::Scope*, clang::CXXScopeSpec*, clang::OpaquePtr<clang::QualType>&, bool) + 985; 11 rootcling_stage1 0x000000010d57ef20 clang::Parser::ParseImplicitInt(clang::DeclSpec&, clang::CXXScopeSpec*, clang::Parser::ParsedTemplateInfo const&, clang::AccessSpecifier, clang::Parser::DeclSpecContext, clang::Parser::ParsedAttributesWithRange&) + 2288; 12 rootcling_stage1 0x000000010d579427 clang::Parser::ParseDeclarationSpecifiers(clang::DeclSpec&, clang::Parser::ParsedTemplateInfo const&, clang::AccessSpecifier, clang::Parser::DeclSpecContext, clang::Parser::LateParsedAttr",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3586:27,fault,fault,27,https://root.cern,https://github.com/root-project/root/pull/3586,1,['fault'],['fault']
Availability,"Benchmark numbers in the PR description have been updated to reflect the latest changes. The PR is not a WIP anymore, the test failures in `pyroot_dependency_versions` and `roottest_python_cpp_cpp` are unrelated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7502#issuecomment-873919881:127,failure,failures,127,https://root.cern,https://github.com/root-project/root/pull/7502#issuecomment-873919881,1,['failure'],['failures']
Availability,"Benchmarks.cxx:1:; /home/rembserj/spaces/master/root/src/build/include/ROOT/RDF/ActionHelpers.hxx: In instantiation of ‘void ROOT::Internal::RDF::SnapshotHelperMT<ColTypes>::UpdateCArraysPtrs(unsigned int, ColTypes& ..., std::index_sequence<S ...>) [with long unsigned int ...S = {}; ColTypes = {}; std::index_sequence<S ...> = std::integer_sequence<long unsigned int>]’:; /home/rembserj/spaces/master/root/src/build/include/ROOT/RDF/ActionHelpers.hxx:1747:27: required from ‘void ROOT::Internal::RDF::SnapshotHelperMT<ColTypes>::Exec(unsigned int, ColTypes& ...) [with ColTypes = {}]’; /home/rembserj/spaces/master/root/src/build/include/ROOT/RDF/RAction.hxx:104:19: required from ‘void ROOT::Internal::RDF::RAction<Helper, PrevNode, ColumnTypes_t>::CallExec(unsigned int, Long64_t, ROOT::TypeTraits::TypeList<ColTypes ...>, std::index_sequence<_Ind ...>) [with ColTypes = {}; long unsigned int ...S = {}; Helper = ROOT::Internal::RDF::SnapshotHelperMT<>; PrevNode = ROOT::Detail::RDF::RLoopManager; ColumnTypes_t = ROOT::TypeTraits::TypeList<>; Long64_t = long long int; std::index_sequence<_Ind ...> = std::integer_sequence<long unsigned int>]’; /home/rembserj/spaces/master/root/src/build/include/ROOT/RDF/RAction.hxx:112:18: required from ‘void ROOT::Internal::RDF::RAction<Helper, PrevNode, ColumnTypes_t>::Run(unsigned int, Long64_t) [with Helper = ROOT::Internal::RDF::SnapshotHelperMT<>; PrevNode = ROOT::Detail::RDF::RLoopManager; ColumnTypes_t = ROOT::TypeTraits::TypeList<>; Long64_t = long long int]’; /home/rembserj/spaces/master/root/src/build/include/ROOT/RDF/RAction.hxx:108:9: required from here; /home/rembserj/spaces/master/root/src/build/include/ROOT/RDF/ActionHelpers.hxx:1760:40: error: parameter ‘slot’ set but not used [-Werror=unused-but-set-parameter]; 1760 | void UpdateCArraysPtrs(unsigned int slot, ColTypes &... values, std::index_sequence<S...> /*dummy*/); ```. I'm sure similar warnings also pop up in other places, but I just; happened to notice them in `rootbench`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14044:2059,error,error,2059,https://root.cern,https://github.com/root-project/root/pull/14044,1,['error'],['error']
Availability,Better errors on failures,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14514:7,error,errors,7,https://root.cern,https://github.com/root-project/root/pull/14514,2,"['error', 'failure']","['errors', 'failures']"
Availability,"Between silently not running tutorials (like we were doing until this PR, thank you very much for spotting and fixing it) and leaving those very rare users that run our full test suite with a few red python tutorials/tests (with error messages that say ""please install pandas/numba""), I'd say the latter is preferable :smile: . There might be a third option I don't see at the moment. In any case, I'm leaving the approval in the hands of who knows better than me :D",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5938#issuecomment-650302807:229,error,error,229,https://root.cern,https://github.com/root-project/root/pull/5938#issuecomment-650302807,1,['error'],['error']
Availability,Bits.h TBtree.h TClassTable.h TClonesArray.h TCollection.h TCollectionProxyInfo.h TExMap.h THashList.h THashTable.h TIterator.h TList.h TMap.h TObjArray.h TObjectTable.h TOrdCollection.h TRefArray.h TRefTable.h TSeqCollection.h TSortedList.h TVirtualCollectionProxy.h ESTLType.h RStringView.h TClassEdit.h TError.h ThreadLocalStorage.h ROOT/RLogger.hxx ROOT/RNotFn.hxx ROOT/RRangeCast.hxx ROOT/RSpan.hxx ROOT/RStringView.hxx ROOT/StringUtils.hxx ROOT/span.hxx ROOT/TypeTraits.hxx TUnixSystem.h root_std_complex.h GuiTypes.h TApplicationImp.h TBrowser.h TBrowserImp.h TCanvasImp.h TClassMenuItem.h TContextMenu.h TContextMenuImp.h TControlBarImp.h TGuiFactory.h TInspectorImp.h TObjectSpy.h TToggleGroup.h TToggle.h TBaseClass.h TClassGenerator.h TClass.h TClassRef.h TClassStreamer.h TDataMember.h TDataType.h TDictAttributeMap.h TDictionary.h TEnumConstant.h TEnum.h TFileMergeInfo.h TFunction.h TFunctionTemplate.h TGenericClassInfo.h TGlobal.h TInterpreter.h TInterpreterValue.h TIsAProxy.h TListOfDataMembers.h TListOfEnums.h TListOfEnumsWithLock.h TListOfFunctions.h TListOfFunctionTemplates.h TMemberStreamer.h TMethodArg.h TMethodCall.h TMethod.h TProtoClass.h TRealData.h TSchemaHelper.h TSchemaRule.h TSchemaRuleSet.h TStatusBitsChecker.h TStreamerElement.h TStreamer.h TVirtualIsAProxy.h TVirtualRefProxy.h TVirtualStreamerInfo.h TVirtualArray.h TVirtualObject.h Getline.h /scratch/greenc/test-products/root/v6_27_99f1/source/root-6.27.99/core/base/inc/LinkDef.h; 1.	/scratch/greenc/test-products/clang/v14_0_6c/Linux64bit+3.10-2.17/include/c++/v1/ctype.h:38:2: current parser token 'include_next'; 2.	/scratch/greenc/test-products/clang/v14_0_6c/Linux64bit+3.10-2.17/include/c++/v1/__config:827:1 <Spelling=/scratch/greenc/test-products/clang/v14_0_6c/Linux64bit+3.10-2.17/include/c++/v1/__config:824:37>: parsing namespace 'std'; 3.	/usr/include/string.h:159:3: current parser token 'include'; 4.	<eof> parser at end of file; 5.	<module-includes>:1:8: serializing; Segmentation fault; ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10861#issuecomment-1377607040:64105,fault,fault,64105,https://root.cern,https://github.com/root-project/root/issues/10861#issuecomment-1377607040,1,['fault'],['fault']
Availability,"Both gcc and cmake where compiled manually. I don't think gcc 8 is available in the Debian 9 repository.; However I suspect the actual Debian version matters less than the gcc version, so the issue probably exists on Debian 10 as well (but I don't have one to check). PR #2012 seems to be fixing the same issue with gcc 8.1, but there is no mention of which OS was used there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8477#issuecomment-866073903:67,avail,available,67,https://root.cern,https://github.com/root-project/root/pull/8477#issuecomment-866073903,1,['avail'],['available']
Availability,"Both on CentOS 8 Stream and Arch Linux, when compiling with Clang 13.0.0, there are a number of RooFit test failures due to crashes. Example crash when running `tutorials/roofit/rf201_composite.C`:; ```; root.exe: /home/jhahnfel/ROOT/src/roofit/roofitcore/inc/RooSTLRefCountList.h:113: std::size_t RooSTLRefCountList<RooAbsArg>::size() const [T = RooAbsArg]: Assertion `_storage.size() == _refCount.size()' failed.; ```. ### Backtrace; ```; #0 0x00007ffff66c2a4f in raise () from /lib64/libc.so.6; #1 0x00007ffff6695db5 in abort () from /lib64/libc.so.6; #2 0x00007ffff6695c89 in __assert_fail_base.cold.0 () from /lib64/libc.so.6; #3 0x00007ffff66bb3a6 in __assert_fail () from /lib64/libc.so.6; #4 0x00007fffe0dea553 in RooSTLRefCountList<RooAbsArg>::size (this=0x1aa32f8); at /home/jhahnfel/ROOT/src/roofit/roofitcore/inc/RooSTLRefCountList.h:113; #5 RooSTLRefCountList<RooAbsArg>::findByNamePointer (this=this@entry=0x1aa32f8, item=item@entry=0x7fffffff72d0); at /home/jhahnfel/ROOT/src/roofit/roofitcore/inc/RooSTLRefCountList.h:153; #6 0x00007fffe0de1848 in RooAbsArg::findServer (this=0x1aa32b0, arg=...); at /home/jhahnfel/ROOT/src/roofit/roofitcore/inc/RooAbsArg.h:211; #7 RooAbsArg::dependsOn (this=this@entry=0x1aa32b0, testArg=..., ignoreArg=ignoreArg@entry=0x0, valueOnly=false); at /home/jhahnfel/ROOT/src/roofit/roofitcore/src/RooAbsArg.cxx:870; #8 0x00007fffe0de1a80 in RooAbsArg::dependsOn (this=0x1aa32b0, serverList=..., ignoreArg=0x0, valueOnly=false); at /home/jhahnfel/ROOT/src/roofit/roofitcore/src/RooAbsArg.cxx:847; #9 RooAbsArg::observableOverlaps (this=<optimized out>, nset=<optimized out>, testArg=...); at /home/jhahnfel/ROOT/src/roofit/roofitcore/src/RooAbsArg.cxx:923; #10 0x00007fffe0e6d04d in RooAddPdf::checkObservables (this=<optimized out>, nset=<optimized out>); at /home/jhahnfel/ROOT/src/roofit/roofitcore/src/RooAddPdf.cxx:832; #11 0x00007fffe0de178d in RooAbsArg::recursiveCheckObservables (this=0x7fffffff6bc8, nset=0x7fffffff6360); at /home/jhahnfel/ROOT/sr",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9547:108,failure,failures,108,https://root.cern,https://github.com/root-project/root/issues/9547,1,['failure'],['failures']
Availability,"Both tests fail due to the change in the default value for `IgnorePromptDiags`, but see comments below. > * [projectroot.roottest.root.dataframe.roottest_root_dataframe_test_ROOT9975](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/172473/testReport/projectroot.roottest.root/dataframe/roottest_root_dataframe_test_ROOT9975/); > . Taking a look at the [test](https://github.com/root-project/roottest/blob/master/root/dataframe/test_ROOT9975.C), to return something from the entry point of a macro seems legal even if the function is `void`-returning. I guess that's why https://github.com/root-project/root/blob/master/interpreter/cling/lib/Interpreter/IncrementalParser.cpp#L173 is there.; I would vote for either dropping that legacy behavior or always filtering the diagnostic. Any personal preferences, @Axel-Naumann @hahnjo @vgvassilev ?. > * [projectroot.roottest.root.core.roottest_root_core_execStatusBitsCheck](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/172473/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/). This seems a legitimate error that was being filtered (see [here](https://github.com/root-project/roottest/blob/master/root/core/execStatusBitsCheck.C#L4)); I think the test should be fixed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12654#issuecomment-1506825011:1133,error,error,1133,https://root.cern,https://github.com/root-project/root/pull/12654#issuecomment-1506825011,1,['error'],['error']
Availability,Both the windows error (preventing actual runs) and the fedora27/noimt error are git related.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3762#issuecomment-489686202:17,error,error,17,https://root.cern,https://github.com/root-project/root/pull/3762#issuecomment-489686202,2,['error'],['error']
Availability,Both timeout errors are reported on the first try to pull from the gut repository. A retry solved the issue. Merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1241#issuecomment-339920962:13,error,errors,13,https://root.cern,https://github.com/root-project/root/pull/1241#issuecomment-339920962,1,['error'],['errors']
Availability,Break segmentation violation error when merging the jobs on the grid,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6977:29,error,error,29,https://root.cern,https://github.com/root-project/root/issues/6977,1,['error'],['error']
Availability,"Bring down the number of address sanitizer failures to ~ 36. In detail:; - Add use-after-scope checks for clang builds.; - Disable new/delete and malloc/free consistency checks.; Since interpreted code cannot be instrumented, address sanitizer cannot; check whether memory is managed consistently.; (Technical details: asan replaces new, delete, malloc and free. In non-instrumented code, the new/delete replacement doesn't work, though. To asan it therefore looks like something was `new`ed in instrumented code, but `free`d in JITted code and vice versa.); - Change the order in which libaries are `LD_PRELOADED`. Address sanitizer needs the config first, and runtimes later. Otherwise, it will ignore the configs.; - Fix a regex, so address sanitizer is `LD_PRELOADED` only when python is used. Before, it would be loaded twice for command lines such as `root.exe .... ..../python/....`",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5660:6,down,down,6,https://root.cern,https://github.com/root-project/root/pull/5660,2,"['down', 'failure']","['down', 'failures']"
Availability,Browser will read all data and all scripts from HTML file directly - ; no need to manage access to file system. Make more robust batch mode of web canvas,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16643:122,robust,robust,122,https://root.cern,https://github.com/root-project/root/pull/16643,1,['robust'],['robust']
Availability,"Btw, this also helps `stressGraphics` quite a bit, down to 33s from 43s - compared to 19s at `-O0`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9342#issuecomment-981630142:51,down,down,51,https://root.cern,https://github.com/root-project/root/pull/9342#issuecomment-981630142,1,['down'],['down']
Availability,"Buffer overflow is UB whether you are writing C or C++. Taking the address of an element one past the end of an array is fine, but dereferencing it / writing to it are both UB. If you try your example with `f.at(2)` in this scenario, it will fail with the following error: ; ```; terminate called after throwing an instance of 'std::out_of_range'; what(): vector::_M_range_check: __n (which is 2) >= this->size() (which is 2); ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9166#issuecomment-949904556:266,error,error,266,https://root.cern,https://github.com/root-project/root/issues/9166#issuecomment-949904556,1,['error'],['error']
Availability,Bug reports: https://gitlab.kitware.com/cmake/cmake/-/issues/19662; and; https://github.com/microsoft/vcpkg/pull/7967. -- Looking for GLEW; CMake Error at cmake/modules/SearchInstalledSoftware.cmake:520 (message):; Please enable builtin Glew due bug in latest CMake (use cmake option; -Dbuiltin_glew=ON).; Call Stack (most recent call first):; CMakeLists.txt:168 (include),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5238:146,Error,Error,146,https://root.cern,https://github.com/root-project/root/pull/5238,1,['Error'],['Error']
Availability,Build and test failures on RHEL+EPEL 8 ppc64le,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12372:15,failure,failures,15,https://root.cern,https://github.com/root-project/root/issues/12372,1,['failure'],['failures']
Availability,Build can not recover from partial 'cleanup',MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16227:14,recover,recover,14,https://root.cern,https://github.com/root-project/root/issues/16227,1,['recover'],['recover']
Availability,Build error after upgrading to macOS 15 Sequoia,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16449:6,error,error,6,https://root.cern,https://github.com/root-project/root/issues/16449,1,['error'],['error']
Availability,"Build error with ""nlohmann/json.hpp: No such file or directory"" in spack (unit tests build, with --test=root option)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14769:6,error,error,6,https://root.cern,https://github.com/root-project/root/issues/14769,1,['error'],['error']
Availability,Build failed on ROOT-centos7/default.; Running on lcgapp-centos7-x86-64-24.cern.ch:/build/jenkins/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/107762/console).; ### Errors:; - [2021-02-24T10:46:01.488Z] /mnt/build/jenkins/workspace/root-pullrequests-build/root/tree/dataframe/test/dataframe_snapshot.cxx:1081:26: error: no match for ‘operator&lt;’ (operand types are ‘int’ and ‘std::initializer_list&lt;int&gt;’) ; - [2021-02-24T10:46:01.491Z] /mnt/build/jenkins/workspace/root-pullrequests-build/root/tree/dataframe/test/dataframe_snapshot.cxx:1125:41: error: no matching function for call to ‘TTree::SetMaxTreeSize(std::initializer_list&lt;long long int&gt;&)’,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7278#issuecomment-784986531:249,Error,Errors,249,https://root.cern,https://github.com/root-project/root/pull/7278#issuecomment-784986531,3,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-centos7/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48511/console).; ### Errors:; - error: Failed to merge in the changes.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2091#issuecomment-439485284:137,Error,Errors,137,https://root.cern,https://github.com/root-project/root/pull/2091#issuecomment-439485284,2,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-centos7/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48521/console).; ### Errors:; - cc: error: CMakeFiles/GLEW.dir/src/glew.c.o: No such file or directory ; - error: unable to read PCH file /mnt/build/jenkins/workspace/root-pullrequests-build/build/etc/allDict.cxx.pch: 'No such file or directory',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2917#issuecomment-439522343:137,Error,Errors,137,https://root.cern,https://github.com/root-project/root/pull/2917#issuecomment-439522343,3,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-centos7/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48526/console).; ### Errors:; - cc: error: CMakeFiles/GLEW.dir/src/glew.c.o: No such file or directory ; - error: unable to read PCH file /mnt/build/jenkins/workspace/root-pullrequests-build/build/etc/allDict.cxx.pch: 'No such file or directory',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2989#issuecomment-439605617:137,Error,Errors,137,https://root.cern,https://github.com/root-project/root/pull/2989#issuecomment-439605617,3,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-centos7/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48531/console).; ### Errors:; - cc: error: CMakeFiles/GLEW.dir/src/glew.c.o: No such file or directory ; - error: unable to read PCH file /mnt/build/jenkins/workspace/root-pullrequests-build/build/etc/allDict.cxx.pch: 'No such file or directory',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2917#issuecomment-439610238:137,Error,Errors,137,https://root.cern,https://github.com/root-project/root/pull/2917#issuecomment-439610238,3,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-centos7/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48536/console).; ### Errors:; - c++: error: CMakeFiles/RGL.dir/src/TGLContext.cxx.o: No such file or directory ; - c++: error: CMakeFiles/RGL.dir/src/TGLContextPrivate.cxx.o: No such file or directory ; - c++: error: CMakeFiles/RGL.dir/src/TGLFormat.cxx.o: No such file or directory ; - c++: error: CMakeFiles/RGL.dir/src/TGLWidget.cxx.o: No such file or directory ; - error: unable to read PCH file /mnt/build/jenkins/workspace/root-pullrequests-build/build/etc/allDict.cxx.pch: 'No such file or directory',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2917#issuecomment-439612991:137,Error,Errors,137,https://root.cern,https://github.com/root-project/root/pull/2917#issuecomment-439612991,6,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-centos7/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48541/console).; ### Errors:; - c++: error: CMakeFiles/RGL.dir/src/TGLContext.cxx.o: No such file or directory ; - c++: error: CMakeFiles/RGL.dir/src/TGLContextPrivate.cxx.o: No such file or directory ; - c++: error: CMakeFiles/RGL.dir/src/TGLFormat.cxx.o: No such file or directory ; - c++: error: CMakeFiles/RGL.dir/src/TGLWidget.cxx.o: No such file or directory ; - error: unable to read PCH file /mnt/build/jenkins/workspace/root-pullrequests-build/build/etc/allDict.cxx.pch: 'No such file or directory',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2998#issuecomment-439620612:137,Error,Errors,137,https://root.cern,https://github.com/root-project/root/pull/2998#issuecomment-439620612,6,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-centos7/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48546/console).; ### Errors:; - c++: error: CMakeFiles/RGL.dir/src/TGLContext.cxx.o: No such file or directory ; - c++: error: CMakeFiles/RGL.dir/src/TGLContextPrivate.cxx.o: No such file or directory ; - c++: error: CMakeFiles/RGL.dir/src/TGLFormat.cxx.o: No such file or directory ; - c++: error: CMakeFiles/RGL.dir/src/TGLWidget.cxx.o: No such file or directory ; - error: unable to read PCH file /mnt/build/jenkins/workspace/root-pullrequests-build/build/etc/allDict.cxx.pch: 'No such file or directory',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2999#issuecomment-439625040:137,Error,Errors,137,https://root.cern,https://github.com/root-project/root/pull/2999#issuecomment-439625040,6,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-centos7/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48556/console).; ### Errors:; - c++: error: /mnt/build/jenkins/workspace/root-pullrequests-build/build/tree/tree/test/G__ElementStruct.cxx: No such file or directory ; - c++: error: CMakeFiles/ElementStruct.dir/G__ElementStruct.cxx.o: No such file or directory ; - c++: error: /mnt/build/jenkins/workspace/root-pullrequests-build/build/io/xmlparser/G__XMLParser.cxx: No such file or directory ; - c++: error: CMakeFiles/XMLParser.dir/G__XMLParser.cxx.o: No such file or directory ; - c++: error: /mnt/build/jenkins/workspace/root-pullrequests-build/build/net/http/G__RHTTP.cxx: No such file or directory ; - c++: error: /mnt/build/jenkins/workspace/root-pullrequests-build/build/io/xml/G__XMLIO.cxx: No such file or directory ; - c++: error: CMakeFiles/RHTTP.dir/G__RHTTP.cxx.o: No such file or directory ; - c++: error: CMakeFiles/XMLIO.dir/G__XMLIO.cxx.o: No such file or directory ; - c++: error: /mnt/build/jenkins/workspace/root-pullrequests-build/build/net/net/G__Net.cxx: No such file or directory ; - c++: error: CMakeFiles/Net.dir/G__Net.cxx.o: No such file or directory . And 4 more,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2999#issuecomment-439636040:137,Error,Errors,137,https://root.cern,https://github.com/root-project/root/pull/2999#issuecomment-439636040,11,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-centos7/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48561/console).; ### Errors:; - c++: error: CMakeFiles/RGL.dir/src/TGLContext.cxx.o: No such file or directory ; - c++: error: CMakeFiles/RGL.dir/src/TGLContextPrivate.cxx.o: No such file or directory ; - c++: error: CMakeFiles/RGL.dir/src/TGLFormat.cxx.o: No such file or directory ; - c++: error: CMakeFiles/RGL.dir/src/TGLWidget.cxx.o: No such file or directory ; - error: unable to read PCH file /mnt/build/jenkins/workspace/root-pullrequests-build/build/etc/allDict.cxx.pch: 'No such file or directory',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2999#issuecomment-439639078:137,Error,Errors,137,https://root.cern,https://github.com/root-project/root/pull/2999#issuecomment-439639078,6,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-centos7/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48566/console).; ### Errors:; - c++: error: CMakeFiles/RGL.dir/src/TGLContext.cxx.o: No such file or directory ; - c++: error: CMakeFiles/RGL.dir/src/TGLContextPrivate.cxx.o: No such file or directory ; - c++: error: CMakeFiles/RGL.dir/src/TGLFormat.cxx.o: No such file or directory ; - c++: error: CMakeFiles/RGL.dir/src/TGLWidget.cxx.o: No such file or directory ; - error: unable to read PCH file /mnt/build/jenkins/workspace/root-pullrequests-build/build/etc/allDict.cxx.pch: 'No such file or directory',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3000#issuecomment-439640972:137,Error,Errors,137,https://root.cern,https://github.com/root-project/root/pull/3000#issuecomment-439640972,6,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-centos7/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48571/console).; ### Errors:; - c++: error: CMakeFiles/RGL.dir/src/TGLContext.cxx.o: No such file or directory ; - c++: error: CMakeFiles/RGL.dir/src/TGLContextPrivate.cxx.o: No such file or directory ; - c++: error: CMakeFiles/RGL.dir/src/TGLFormat.cxx.o: No such file or directory ; - c++: error: CMakeFiles/RGL.dir/src/TGLWidget.cxx.o: No such file or directory ; - error: unable to read PCH file /mnt/build/jenkins/workspace/root-pullrequests-build/build/etc/allDict.cxx.pch: 'No such file or directory',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2989#issuecomment-439709218:137,Error,Errors,137,https://root.cern,https://github.com/root-project/root/pull/2989#issuecomment-439709218,6,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-centos7/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48576/console).; ### Errors:; - c++: error: CMakeFiles/RGL.dir/src/TGLContext.cxx.o: No such file or directory ; - c++: error: CMakeFiles/RGL.dir/src/TGLContextPrivate.cxx.o: No such file or directory ; - c++: error: CMakeFiles/RGL.dir/src/TGLFormat.cxx.o: No such file or directory ; - c++: error: CMakeFiles/RGL.dir/src/TGLWidget.cxx.o: No such file or directory ; - error: unable to read PCH file /mnt/build/jenkins/workspace/root-pullrequests-build/build/etc/allDict.cxx.pch: 'No such file or directory',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2854#issuecomment-439822080:137,Error,Errors,137,https://root.cern,https://github.com/root-project/root/pull/2854#issuecomment-439822080,6,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-centos7/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48581/console).; ### Errors:; - c++: error: CMakeFiles/RGL.dir/src/TGLContext.cxx.o: No such file or directory ; - c++: error: CMakeFiles/RGL.dir/src/TGLContextPrivate.cxx.o: No such file or directory ; - c++: error: CMakeFiles/RGL.dir/src/TGLFormat.cxx.o: No such file or directory ; - c++: error: CMakeFiles/RGL.dir/src/TGLWidget.cxx.o: No such file or directory ; - error: unable to read PCH file /mnt/build/jenkins/workspace/root-pullrequests-build/build/etc/allDict.cxx.pch: 'No such file or directory',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3001#issuecomment-439831748:137,Error,Errors,137,https://root.cern,https://github.com/root-project/root/pull/3001#issuecomment-439831748,6,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-centos7/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48591/console).; ### Errors:; - c++: error: CMakeFiles/RGL.dir/src/TGLContext.cxx.o: No such file or directory ; - c++: error: CMakeFiles/RGL.dir/src/TGLContextPrivate.cxx.o: No such file or directory ; - c++: error: CMakeFiles/RGL.dir/src/TGLFormat.cxx.o: No such file or directory ; - c++: error: CMakeFiles/RGL.dir/src/TGLWidget.cxx.o: No such file or directory ; - error: unable to read PCH file /mnt/build/jenkins/workspace/root-pullrequests-build/build/etc/allDict.cxx.pch: 'No such file or directory',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2990#issuecomment-439840922:137,Error,Errors,137,https://root.cern,https://github.com/root-project/root/pull/2990#issuecomment-439840922,6,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-centos7/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48596/console).; ### Errors:; - c++: error: CMakeFiles/RGL.dir/src/TGLContext.cxx.o: No such file or directory ; - c++: error: CMakeFiles/RGL.dir/src/TGLContextPrivate.cxx.o: No such file or directory ; - c++: error: CMakeFiles/RGL.dir/src/TGLFormat.cxx.o: No such file or directory ; - c++: error: CMakeFiles/RGL.dir/src/TGLWidget.cxx.o: No such file or directory ; - error: unable to read PCH file /mnt/build/jenkins/workspace/root-pullrequests-build/build/etc/allDict.cxx.pch: 'No such file or directory',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2989#issuecomment-439849546:137,Error,Errors,137,https://root.cern,https://github.com/root-project/root/pull/2989#issuecomment-439849546,6,"['Error', 'error']","['Errors', 'error']"
Availability,"Build failed on ROOT-centos7/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48606/console).; ### Errors:; - /usr/include/c++/4.8.2/ext/new_allocator.h:120:4: error: cannot allocate an object of abstract type ‘ROOT::Detail::RDF::RCustomColumn&lt;ROOT::RDF::RInterface&lt;Proxied, DataSource&gt;::AddDefaultColumns() [with Proxied = ROOT::Detail::RDF::RLoopManager; DataSource = void]::__lambda143, ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry&gt;’ ; - /usr/include/c++/4.8.2/ext/new_allocator.h:120:4: error: cannot allocate an object of abstract type ‘ROOT::Detail::RDF::RCustomColumn&lt;ROOT::RDF::RInterface&lt;Proxied, DataSource&gt;::AddDefaultColumns() [with Proxied = ROOT::Detail::RDF::RLoopManager; DataSource = void]::__lambda144, ROOT::Detail::RDF::CustomColExtraArgs::Slot&gt;’ ; - /usr/include/c++/4.8.2/ext/new_allocator.h:120:4: error: cannot allocate an object of abstract type ‘ROOT::Detail::RDF::RCustomColumn&lt;ROOT::RDF::RInterface&lt;Proxied, DataSource&gt;::AddDefaultColumns() [with Proxied = ROOT::Detail::RDF::RLoopManager; DataSource = ROOT::RDF::RTrivialDS]::__lambda143, ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry&gt;’ ; - /usr/include/c++/4.8.2/ext/new_allocator.h:120:4: error: cannot allocate an object of abstract type ‘ROOT::Detail::RDF::RCustomColumn&lt;ROOT::RDF::RInterface&lt;Proxied, DataSource&gt;::AddDefaultColumns() [with Proxied = ROOT::Detail::RDF::RLoopManager; DataSource = ROOT::RDF::RTrivialDS]::__lambda144, ROOT::Detail::RDF::CustomColExtraArgs::Slot&gt;’ ; - c++: error: CMakeFiles/ROOTDataFrame.dir/src/RDataFrame.cxx.o: No such file or directory ; - c++: error: CMakeFiles/ROOTDataFrame.dir/src/RTrivialDS.cxx.o: No such file or directory ; - /usr/include/c++/4.8.2/ext/new_allocator.h:120:4: error: cannot allocate an object of abstract type ‘ROOT::Detail::RDF::RCustomColumn&lt;RDataFrameSeq_MultipleTriggerRun_Test::TestBody()::__lambda145, ROOT::Detail::RDF::CustomColExtraArgs::None&gt;’",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2956#issuecomment-439857633:137,Error,Errors,137,https://root.cern,https://github.com/root-project/root/pull/2956#issuecomment-439857633,3,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-centos7/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48611/console).; ### Errors:; - c++: error: CMakeFiles/RGL.dir/src/TGLContext.cxx.o: No such file or directory ; - c++: error: CMakeFiles/RGL.dir/src/TGLContextPrivate.cxx.o: No such file or directory ; - c++: error: CMakeFiles/RGL.dir/src/TGLFormat.cxx.o: No such file or directory ; - c++: error: CMakeFiles/RGL.dir/src/TGLWidget.cxx.o: No such file or directory ; - error: unable to read PCH file /mnt/build/jenkins/workspace/root-pullrequests-build/build/etc/allDict.cxx.pch: 'No such file or directory',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2984#issuecomment-439865601:137,Error,Errors,137,https://root.cern,https://github.com/root-project/root/pull/2984#issuecomment-439865601,6,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-centos7/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48616/console).; ### Errors:; - c++: error: CMakeFiles/RGL.dir/src/TGLContext.cxx.o: No such file or directory ; - c++: error: CMakeFiles/RGL.dir/src/TGLContextPrivate.cxx.o: No such file or directory ; - c++: error: CMakeFiles/RGL.dir/src/TGLFormat.cxx.o: No such file or directory ; - c++: error: CMakeFiles/RGL.dir/src/TGLWidget.cxx.o: No such file or directory ; - error: unable to read PCH file /mnt/build/jenkins/workspace/root-pullrequests-build/build/etc/allDict.cxx.pch: 'No such file or directory',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2992#issuecomment-439872906:137,Error,Errors,137,https://root.cern,https://github.com/root-project/root/pull/2992#issuecomment-439872906,6,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-centos7/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48621/console).; ### Errors:; - c++: error: CMakeFiles/RGL.dir/src/TGLContext.cxx.o: No such file or directory ; - c++: error: CMakeFiles/RGL.dir/src/TGLContextPrivate.cxx.o: No such file or directory ; - c++: error: CMakeFiles/RGL.dir/src/TGLFormat.cxx.o: No such file or directory ; - c++: error: CMakeFiles/RGL.dir/src/TGLWidget.cxx.o: No such file or directory ; - error: unable to read PCH file /mnt/build/jenkins/workspace/root-pullrequests-build/build/etc/allDict.cxx.pch: 'No such file or directory',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2903#issuecomment-439880248:137,Error,Errors,137,https://root.cern,https://github.com/root-project/root/pull/2903#issuecomment-439880248,6,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-centos7/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48626/console).; ### Errors:; - c++: error: CMakeFiles/RGL.dir/src/TGLContext.cxx.o: No such file or directory ; - c++: error: CMakeFiles/RGL.dir/src/TGLContextPrivate.cxx.o: No such file or directory ; - c++: error: CMakeFiles/RGL.dir/src/TGLFormat.cxx.o: No such file or directory ; - c++: error: CMakeFiles/RGL.dir/src/TGLWidget.cxx.o: No such file or directory ; - error: unable to read PCH file /mnt/build/jenkins/workspace/root-pullrequests-build/build/etc/allDict.cxx.pch: 'No such file or directory',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2956#issuecomment-439905649:137,Error,Errors,137,https://root.cern,https://github.com/root-project/root/pull/2956#issuecomment-439905649,6,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-centos7/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48636/console).; ### Errors:; - /usr/include/GL/glxew.h:1659:32: error: expected initializer before ‘glxewIsSupported’ ; - /usr/include/GL/glxew.h:1663:32: error: expected initializer before ‘glxewGetExtension’ ; - /usr/include/GL/glxew.h:1659:32: error: expected initializer before ‘glxewIsSupported’ ; - /usr/include/GL/glxew.h:1663:32: error: expected initializer before ‘glxewGetExtension’ ; - /usr/include/GL/glxew.h:1659:32: error: expected initializer before ‘glxewIsSupported’ ; - /usr/include/GL/glxew.h:1663:32: error: expected initializer before ‘glxewGetExtension’ ; - /usr/include/GL/glxew.h:1659:32: error: expected initializer before ‘glxewIsSupported’ ; - /usr/include/GL/glxew.h:1663:32: error: expected initializer before ‘glxewGetExtension’ ; - c++: error: CMakeFiles/RGL.dir/src/TGLContext.cxx.o: No such file or directory ; - c++: error: CMakeFiles/RGL.dir/src/TGLContextPrivate.cxx.o: No such file or directory . And 3 more,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2989#issuecomment-439915872:137,Error,Errors,137,https://root.cern,https://github.com/root-project/root/pull/2989#issuecomment-439915872,11,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-centos7/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48646/console).; ### Errors:; - /usr/include/GL/glxew.h:1659:32: error: expected initializer before ‘glxewIsSupported’ ; - /usr/include/GL/glxew.h:1663:32: error: expected initializer before ‘glxewGetExtension’ ; - /usr/include/GL/glxew.h:1659:32: error: expected initializer before ‘glxewIsSupported’ ; - /usr/include/GL/glxew.h:1663:32: error: expected initializer before ‘glxewGetExtension’ ; - /usr/include/GL/glxew.h:1659:32: error: expected initializer before ‘glxewIsSupported’ ; - /usr/include/GL/glxew.h:1663:32: error: expected initializer before ‘glxewGetExtension’ ; - /usr/include/GL/glxew.h:1659:32: error: expected initializer before ‘glxewIsSupported’ ; - /usr/include/GL/glxew.h:1663:32: error: expected initializer before ‘glxewGetExtension’ ; - c++: error: CMakeFiles/RGL.dir/src/TGLContext.cxx.o: No such file or directory ; - c++: error: CMakeFiles/RGL.dir/src/TGLContextPrivate.cxx.o: No such file or directory . And 3 more,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3003#issuecomment-439928694:137,Error,Errors,137,https://root.cern,https://github.com/root-project/root/pull/3003#issuecomment-439928694,11,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-centos7/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48651/console).; ### Errors:; - /usr/include/GL/glxew.h:1659:32: error: expected initializer before ‘glxewIsSupported’ ; - /usr/include/GL/glxew.h:1663:32: error: expected initializer before ‘glxewGetExtension’ ; - /usr/include/GL/glxew.h:1659:32: error: expected initializer before ‘glxewIsSupported’ ; - /usr/include/GL/glxew.h:1663:32: error: expected initializer before ‘glxewGetExtension’ ; - /usr/include/GL/glxew.h:1659:32: error: expected initializer before ‘glxewIsSupported’ ; - /usr/include/GL/glxew.h:1663:32: error: expected initializer before ‘glxewGetExtension’ ; - /usr/include/GL/glxew.h:1659:32: error: expected initializer before ‘glxewIsSupported’ ; - /usr/include/GL/glxew.h:1663:32: error: expected initializer before ‘glxewGetExtension’ ; - c++: error: CMakeFiles/RGL.dir/src/TGLContext.cxx.o: No such file or directory ; - c++: error: CMakeFiles/RGL.dir/src/TGLContextPrivate.cxx.o: No such file or directory . And 3 more,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2989#issuecomment-439948981:137,Error,Errors,137,https://root.cern,https://github.com/root-project/root/pull/2989#issuecomment-439948981,11,"['Error', 'error']","['Errors', 'error']"
Availability,"Build failed on ROOT-centos7/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48656/console).; ### Errors:; - /usr/include/GL/glxew.h:1659:32: error: expected ‘=’, ‘,’, ‘;’, ‘asm’ or ‘__attribute__’ before ‘glxewIsSupported’ ; - /usr/include/GL/glxew.h:1663:32: error: expected ‘=’, ‘,’, ‘;’, ‘asm’ or ‘__attribute__’ before ‘glxewGetExtension’ ; - cc: error: CMakeFiles/GLEW.dir/src/glew.c.o: No such file or directory ; - /usr/include/GL/glxew.h:1659:32: error: expected initializer before ‘glxewIsSupported’ ; - /usr/include/GL/glxew.h:1663:32: error: expected initializer before ‘glxewGetExtension’ ; - /usr/include/GL/glxew.h:1659:32: error: expected initializer before ‘glxewIsSupported’ ; - /usr/include/GL/glxew.h:1663:32: error: expected initializer before ‘glxewGetExtension’ ; - /usr/include/GL/glxew.h:1659:32: error: expected initializer before ‘glxewIsSupported’ ; - /usr/include/GL/glxew.h:1663:32: error: expected initializer before ‘glxewGetExtension’ ; - /usr/include/GL/glxew.h:1659:32: error: expected initializer before ‘glxewIsSupported’ . And 2 more",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2983#issuecomment-439956783:137,Error,Errors,137,https://root.cern,https://github.com/root-project/root/pull/2983#issuecomment-439956783,11,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-centos7/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48661/console).; ### Errors:; - /usr/include/GL/glxew.h:1659:32: error: expected initializer before ‘glxewIsSupported’ ; - /usr/include/GL/glxew.h:1663:32: error: expected initializer before ‘glxewGetExtension’ ; - /usr/include/GL/glxew.h:1659:32: error: expected initializer before ‘glxewIsSupported’ ; - /usr/include/GL/glxew.h:1663:32: error: expected initializer before ‘glxewGetExtension’ ; - /usr/include/GL/glxew.h:1659:32: error: expected initializer before ‘glxewIsSupported’ ; - /usr/include/GL/glxew.h:1663:32: error: expected initializer before ‘glxewGetExtension’ ; - /usr/include/GL/glxew.h:1659:32: error: expected initializer before ‘glxewIsSupported’ ; - /usr/include/GL/glxew.h:1663:32: error: expected initializer before ‘glxewGetExtension’ ; - c++: error: CMakeFiles/RGL.dir/src/TGLContext.cxx.o: No such file or directory ; - c++: error: CMakeFiles/RGL.dir/src/TGLContextPrivate.cxx.o: No such file or directory . And 3 more,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2989#issuecomment-439958539:137,Error,Errors,137,https://root.cern,https://github.com/root-project/root/pull/2989#issuecomment-439958539,11,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-centos7/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48666/console).; ### Errors:; - /usr/include/GL/glxew.h:1659:32: error: expected initializer before ‘glxewIsSupported’ ; - /usr/include/GL/glxew.h:1663:32: error: expected initializer before ‘glxewGetExtension’ ; - /usr/include/GL/glxew.h:1659:32: error: expected initializer before ‘glxewIsSupported’ ; - /usr/include/GL/glxew.h:1663:32: error: expected initializer before ‘glxewGetExtension’ ; - /usr/include/GL/glxew.h:1659:32: error: expected initializer before ‘glxewIsSupported’ ; - /usr/include/GL/glxew.h:1663:32: error: expected initializer before ‘glxewGetExtension’ ; - /usr/include/GL/glxew.h:1659:32: error: expected initializer before ‘glxewIsSupported’ ; - /usr/include/GL/glxew.h:1663:32: error: expected initializer before ‘glxewGetExtension’ ; - c++: error: CMakeFiles/RGL.dir/src/TGLContext.cxx.o: No such file or directory ; - c++: error: CMakeFiles/RGL.dir/src/TGLContextPrivate.cxx.o: No such file or directory . And 3 more,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3004#issuecomment-439959898:137,Error,Errors,137,https://root.cern,https://github.com/root-project/root/pull/3004#issuecomment-439959898,11,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-centos7/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48676/console).; ### Errors:; - /usr/include/GL/glxew.h:1659:32: error: expected initializer before ‘glxewIsSupported’ ; - /usr/include/GL/glxew.h:1663:32: error: expected initializer before ‘glxewGetExtension’ ; - /usr/include/GL/glxew.h:1659:32: error: expected initializer before ‘glxewIsSupported’ ; - /usr/include/GL/glxew.h:1663:32: error: expected initializer before ‘glxewGetExtension’ ; - /usr/include/GL/glxew.h:1659:32: error: expected initializer before ‘glxewIsSupported’ ; - /usr/include/GL/glxew.h:1663:32: error: expected initializer before ‘glxewGetExtension’ ; - /usr/include/GL/glxew.h:1659:32: error: expected initializer before ‘glxewIsSupported’ ; - /usr/include/GL/glxew.h:1663:32: error: expected initializer before ‘glxewGetExtension’ ; - c++: error: CMakeFiles/RGL.dir/src/TGLContext.cxx.o: No such file or directory ; - c++: error: CMakeFiles/RGL.dir/src/TGLContextPrivate.cxx.o: No such file or directory . And 3 more,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2853#issuecomment-439965255:137,Error,Errors,137,https://root.cern,https://github.com/root-project/root/pull/2853#issuecomment-439965255,11,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-centos7/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48681/console).; ### Errors:; - ../../root/test/stress.cxx:1239:48: error: ‘kLZMA’ is not a member of ‘ROOT’ ; - c++: error: CMakeFiles/stress.dir/stress.cxx.o: No such file or directory ; - /usr/include/GL/glxew.h:1659:32: error: expected initializer before ‘glxewIsSupported’ ; - /usr/include/GL/glxew.h:1663:32: error: expected initializer before ‘glxewGetExtension’ ; - /usr/include/GL/glxew.h:1659:32: error: expected initializer before ‘glxewIsSupported’ ; - /usr/include/GL/glxew.h:1663:32: error: expected initializer before ‘glxewGetExtension’ ; - /usr/include/GL/glxew.h:1659:32: error: expected initializer before ‘glxewIsSupported’ ; - /usr/include/GL/glxew.h:1663:32: error: expected initializer before ‘glxewGetExtension’ ; - /usr/include/GL/glxew.h:1659:32: error: expected initializer before ‘glxewIsSupported’ ; - /usr/include/GL/glxew.h:1663:32: error: expected initializer before ‘glxewGetExtension’ . And 16 more,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3005#issuecomment-439967494:137,Error,Errors,137,https://root.cern,https://github.com/root-project/root/pull/3005#issuecomment-439967494,11,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-centos7/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48686/console).; ### Errors:; - /usr/include/GL/glxew.h:1659:32: error: expected initializer before ‘glxewIsSupported’ ; - /usr/include/GL/glxew.h:1663:32: error: expected initializer before ‘glxewGetExtension’ ; - /usr/include/GL/glxew.h:1659:32: error: expected initializer before ‘glxewIsSupported’ ; - /usr/include/GL/glxew.h:1663:32: error: expected initializer before ‘glxewGetExtension’ ; - /usr/include/GL/glxew.h:1659:32: error: expected initializer before ‘glxewIsSupported’ ; - /usr/include/GL/glxew.h:1663:32: error: expected initializer before ‘glxewGetExtension’ ; - /usr/include/GL/glxew.h:1659:32: error: expected initializer before ‘glxewIsSupported’ ; - /usr/include/GL/glxew.h:1663:32: error: expected initializer before ‘glxewGetExtension’ ; - c++: error: CMakeFiles/RGL.dir/src/TGLContext.cxx.o: No such file or directory ; - c++: error: CMakeFiles/RGL.dir/src/TGLContextPrivate.cxx.o: No such file or directory . And 3 more,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3006#issuecomment-439978262:137,Error,Errors,137,https://root.cern,https://github.com/root-project/root/pull/3006#issuecomment-439978262,11,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-centos7/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48691/console).; ### Errors:; - /usr/include/GL/glxew.h:1659:32: error: expected initializer before ‘glxewIsSupported’ ; - /usr/include/GL/glxew.h:1663:32: error: expected initializer before ‘glxewGetExtension’ ; - /usr/include/GL/glxew.h:1659:32: error: expected initializer before ‘glxewIsSupported’ ; - /usr/include/GL/glxew.h:1663:32: error: expected initializer before ‘glxewGetExtension’ ; - /usr/include/GL/glxew.h:1659:32: error: expected initializer before ‘glxewIsSupported’ ; - /usr/include/GL/glxew.h:1663:32: error: expected initializer before ‘glxewGetExtension’ ; - /usr/include/GL/glxew.h:1659:32: error: expected initializer before ‘glxewIsSupported’ ; - /usr/include/GL/glxew.h:1663:32: error: expected initializer before ‘glxewGetExtension’ ; - c++: error: CMakeFiles/RGL.dir/src/TGLContext.cxx.o: No such file or directory ; - c++: error: CMakeFiles/RGL.dir/src/TGLContextPrivate.cxx.o: No such file or directory . And 3 more,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3007#issuecomment-440078869:137,Error,Errors,137,https://root.cern,https://github.com/root-project/root/pull/3007#issuecomment-440078869,11,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-centos7/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48696/console).; ### Errors:; - /usr/include/GL/glxew.h:1659:32: error: expected initializer before ‘glxewIsSupported’ ; - /usr/include/GL/glxew.h:1663:32: error: expected initializer before ‘glxewGetExtension’ ; - /usr/include/GL/glxew.h:1659:32: error: expected initializer before ‘glxewIsSupported’ ; - /usr/include/GL/glxew.h:1663:32: error: expected initializer before ‘glxewGetExtension’ ; - /usr/include/GL/glxew.h:1659:32: error: expected initializer before ‘glxewIsSupported’ ; - /usr/include/GL/glxew.h:1663:32: error: expected initializer before ‘glxewGetExtension’ ; - /usr/include/GL/glxew.h:1659:32: error: expected initializer before ‘glxewIsSupported’ ; - /usr/include/GL/glxew.h:1663:32: error: expected initializer before ‘glxewGetExtension’ ; - c++: error: CMakeFiles/RGL.dir/src/TGLContext.cxx.o: No such file or directory ; - c++: error: CMakeFiles/RGL.dir/src/TGLContextPrivate.cxx.o: No such file or directory . And 3 more,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3007#issuecomment-440115191:137,Error,Errors,137,https://root.cern,https://github.com/root-project/root/pull/3007#issuecomment-440115191,11,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-centos7/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48701/console).; ### Errors:; - error: Failed to merge in the changes.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2989#issuecomment-440178444:137,Error,Errors,137,https://root.cern,https://github.com/root-project/root/pull/2989#issuecomment-440178444,2,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-centos7/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48706/console).; ### Errors:; - collect2: error: ld returned 1 exit status ; - error: unable to read PCH file /mnt/build/jenkins/workspace/root-pullrequests-build/build/etc/allDict.cxx.pch: 'No such file or directory',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3004#issuecomment-440188184:137,Error,Errors,137,https://root.cern,https://github.com/root-project/root/pull/3004#issuecomment-440188184,3,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-centos7/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48711/console).; ### Errors:; - collect2: error: ld returned 1 exit status ; - error: unable to read PCH file /mnt/build/jenkins/workspace/root-pullrequests-build/build/etc/allDict.cxx.pch: 'No such file or directory',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3008#issuecomment-440189426:137,Error,Errors,137,https://root.cern,https://github.com/root-project/root/pull/3008#issuecomment-440189426,3,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-centos7/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48716/console).; ### Errors:; - collect2: error: ld returned 1 exit status ; - error: unable to read PCH file /mnt/build/jenkins/workspace/root-pullrequests-build/build/etc/allDict.cxx.pch: 'No such file or directory',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3010#issuecomment-440244864:137,Error,Errors,137,https://root.cern,https://github.com/root-project/root/pull/3010#issuecomment-440244864,3,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-centos7/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48721/console).; ### Errors:; - collect2: error: ld returned 1 exit status ; - error: unable to read PCH file /mnt/build/jenkins/workspace/root-pullrequests-build/build/etc/allDict.cxx.pch: 'No such file or directory',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2854#issuecomment-440265983:137,Error,Errors,137,https://root.cern,https://github.com/root-project/root/pull/2854#issuecomment-440265983,3,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-centos7/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48726/console).; ### Errors:; - collect2: error: ld returned 1 exit status ; - error: unable to read PCH file /mnt/build/jenkins/workspace/root-pullrequests-build/build/etc/allDict.cxx.pch: 'No such file or directory',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2912#issuecomment-440267175:137,Error,Errors,137,https://root.cern,https://github.com/root-project/root/pull/2912#issuecomment-440267175,3,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-centos7/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48736/console).; ### Errors:; - collect2: error: ld returned 1 exit status ; - error: unable to read PCH file /mnt/build/jenkins/workspace/root-pullrequests-build/build/etc/allDict.cxx.pch: 'No such file or directory',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3006#issuecomment-440268533:137,Error,Errors,137,https://root.cern,https://github.com/root-project/root/pull/3006#issuecomment-440268533,3,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-centos7/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48741/console).; ### Errors:; - collect2: error: ld returned 1 exit status ; - error: unable to read PCH file /mnt/build/jenkins/workspace/root-pullrequests-build/build/etc/allDict.cxx.pch: 'No such file or directory',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2999#issuecomment-440285250:137,Error,Errors,137,https://root.cern,https://github.com/root-project/root/pull/2999#issuecomment-440285250,3,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-centos7/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48746/console).; ### Errors:; - collect2: error: ld returned 1 exit status ; - error: unable to read PCH file /mnt/build/jenkins/workspace/root-pullrequests-build/build/etc/allDict.cxx.pch: 'No such file or directory',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2854#issuecomment-440286638:137,Error,Errors,137,https://root.cern,https://github.com/root-project/root/pull/2854#issuecomment-440286638,3,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-centos7/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48751/console).; ### Errors:; - collect2: error: ld returned 1 exit status ; - error: unable to read PCH file /mnt/build/jenkins/workspace/root-pullrequests-build/build/etc/allDict.cxx.pch: 'No such file or directory',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3011#issuecomment-440335340:137,Error,Errors,137,https://root.cern,https://github.com/root-project/root/pull/3011#issuecomment-440335340,3,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-centos7/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48756/console).; ### Errors:; - collect2: error: ld returned 1 exit status ; - error: unable to read PCH file /mnt/build/jenkins/workspace/root-pullrequests-build/build/etc/allDict.cxx.pch: 'No such file or directory',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3012#issuecomment-440337026:137,Error,Errors,137,https://root.cern,https://github.com/root-project/root/pull/3012#issuecomment-440337026,3,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-centos7/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48761/console).; ### Errors:; - collect2: error: ld returned 1 exit status ; - error: unable to read PCH file /mnt/build/jenkins/workspace/root-pullrequests-build/build/etc/allDict.cxx.pch: 'No such file or directory',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3013#issuecomment-440338492:137,Error,Errors,137,https://root.cern,https://github.com/root-project/root/pull/3013#issuecomment-440338492,3,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-centos7/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48766/console).; ### Errors:; - collect2: error: ld returned 1 exit status ; - error: unable to read PCH file /mnt/build/jenkins/workspace/root-pullrequests-build/build/etc/allDict.cxx.pch: 'No such file or directory',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2542#issuecomment-440340056:137,Error,Errors,137,https://root.cern,https://github.com/root-project/root/pull/2542#issuecomment-440340056,3,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-centos7/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48771/console).; ### Errors:; - collect2: error: ld returned 1 exit status ; - collect2: error: ld returned 1 exit status ; - error: unable to read PCH file /mnt/build/jenkins/workspace/root-pullrequests-build/build/etc/allDict.cxx.pch: 'No such file or directory',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3014#issuecomment-440370868:137,Error,Errors,137,https://root.cern,https://github.com/root-project/root/pull/3014#issuecomment-440370868,4,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-centos7/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48776/console).; ### Errors:; - collect2: error: ld returned 1 exit status ; - collect2: error: ld returned 1 exit status ; - error: unable to read PCH file /mnt/build/jenkins/workspace/root-pullrequests-build/build/etc/allDict.cxx.pch: 'No such file or directory',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3015#issuecomment-440379564:137,Error,Errors,137,https://root.cern,https://github.com/root-project/root/pull/3015#issuecomment-440379564,4,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-centos7/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48786/console).; ### Errors:; - collect2: error: ld returned 1 exit status ; - error: unable to read PCH file /mnt/build/jenkins/workspace/root-pullrequests-build/build/etc/allDict.cxx.pch: 'No such file or directory',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3017#issuecomment-440397691:137,Error,Errors,137,https://root.cern,https://github.com/root-project/root/pull/3017#issuecomment-440397691,3,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-centos7/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48791/console).; ### Errors:; - collect2: error: ld returned 1 exit status ; - error: unable to read PCH file /mnt/build/jenkins/workspace/root-pullrequests-build/build/etc/allDict.cxx.pch: 'No such file or directory',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2912#issuecomment-440399097:137,Error,Errors,137,https://root.cern,https://github.com/root-project/root/pull/2912#issuecomment-440399097,3,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-centos7/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48801/console).; ### Errors:; - collect2: error: ld returned 1 exit status ; - error: unable to read PCH file /mnt/build/jenkins/workspace/root-pullrequests-build/build/etc/allDict.cxx.pch: 'No such file or directory',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2755#issuecomment-440590868:137,Error,Errors,137,https://root.cern,https://github.com/root-project/root/pull/2755#issuecomment-440590868,3,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-centos7/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48806/console).; ### Errors:; - collect2: error: ld returned 1 exit status ; - error: unable to read PCH file /mnt/build/jenkins/workspace/root-pullrequests-build/build/etc/allDict.cxx.pch: 'No such file or directory',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1761#issuecomment-440595355:137,Error,Errors,137,https://root.cern,https://github.com/root-project/root/pull/1761#issuecomment-440595355,3,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-centos7/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48811/console).; ### Errors:; - collect2: error: ld returned 1 exit status ; - error: unable to read PCH file /mnt/build/jenkins/workspace/root-pullrequests-build/build/etc/allDict.cxx.pch: 'No such file or directory',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3018#issuecomment-440596485:137,Error,Errors,137,https://root.cern,https://github.com/root-project/root/pull/3018#issuecomment-440596485,3,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-centos7/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48816/console).; ### Errors:; - collect2: error: ld returned 1 exit status ; - error: unable to read PCH file /mnt/build/jenkins/workspace/root-pullrequests-build/build/etc/allDict.cxx.pch: 'No such file or directory',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2912#issuecomment-440597751:137,Error,Errors,137,https://root.cern,https://github.com/root-project/root/pull/2912#issuecomment-440597751,3,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-centos7/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48821/console).; ### Errors:; - collect2: error: ld returned 1 exit status ; - error: unable to read PCH file /mnt/build/jenkins/workspace/root-pullrequests-build/build/etc/allDict.cxx.pch: 'No such file or directory',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3019#issuecomment-440598908:137,Error,Errors,137,https://root.cern,https://github.com/root-project/root/pull/3019#issuecomment-440598908,3,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-centos7/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48826/console).; ### Errors:; - collect2: error: ld returned 1 exit status ; - error: unable to read PCH file /mnt/build/jenkins/workspace/root-pullrequests-build/build/etc/allDict.cxx.pch: 'No such file or directory',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3020#issuecomment-440609684:137,Error,Errors,137,https://root.cern,https://github.com/root-project/root/pull/3020#issuecomment-440609684,3,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-centos7/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48831/console).; ### Errors:; - collect2: error: ld returned 1 exit status ; - error: unable to read PCH file /mnt/build/jenkins/workspace/root-pullrequests-build/build/etc/allDict.cxx.pch: 'No such file or directory',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3021#issuecomment-440611041:137,Error,Errors,137,https://root.cern,https://github.com/root-project/root/pull/3021#issuecomment-440611041,3,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-centos7/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48841/console).; ### Errors:; - collect2: error: ld returned 1 exit status ; - collect2: error: ld returned 1 exit status ; - error: unable to read PCH file /mnt/build/jenkins/workspace/root-pullrequests-build/build/etc/allDict.cxx.pch: 'No such file or directory',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3023#issuecomment-440614280:137,Error,Errors,137,https://root.cern,https://github.com/root-project/root/pull/3023#issuecomment-440614280,4,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-centos7/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48846/console).; ### Errors:; - collect2: error: ld returned 1 exit status ; - error: unable to read PCH file /mnt/build/jenkins/workspace/root-pullrequests-build/build/etc/allDict.cxx.pch: 'No such file or directory',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3022#issuecomment-440615475:137,Error,Errors,137,https://root.cern,https://github.com/root-project/root/pull/3022#issuecomment-440615475,3,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-centos7/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48851/console).; ### Errors:; - collect2: error: ld returned 1 exit status ; - error: unable to read PCH file /mnt/build/jenkins/workspace/root-pullrequests-build/build/etc/allDict.cxx.pch: 'No such file or directory',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3022#issuecomment-440627257:137,Error,Errors,137,https://root.cern,https://github.com/root-project/root/pull/3022#issuecomment-440627257,3,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-centos7/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48856/console).; ### Errors:; - collect2: error: ld returned 1 exit status ; - error: unable to read PCH file /mnt/build/jenkins/workspace/root-pullrequests-build/build/etc/allDict.cxx.pch: 'No such file or directory',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3012#issuecomment-440650623:137,Error,Errors,137,https://root.cern,https://github.com/root-project/root/pull/3012#issuecomment-440650623,3,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-centos7/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48861/console).; ### Errors:; - collect2: error: ld returned 1 exit status ; - error: unable to read PCH file /mnt/build/jenkins/workspace/root-pullrequests-build/build/etc/allDict.cxx.pch: 'No such file or directory',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2122#issuecomment-440656964:137,Error,Errors,137,https://root.cern,https://github.com/root-project/root/pull/2122#issuecomment-440656964,3,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-centos7/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48866/console).; ### Errors:; - collect2: error: ld returned 1 exit status ; - error: unable to read PCH file /mnt/build/jenkins/workspace/root-pullrequests-build/build/etc/allDict.cxx.pch: 'No such file or directory',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3022#issuecomment-440669424:137,Error,Errors,137,https://root.cern,https://github.com/root-project/root/pull/3022#issuecomment-440669424,3,"['Error', 'error']","['Errors', 'error']"
Availability,"Build failed on ROOT-centos7/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48901/console).; ### Errors:; - /mnt/build/jenkins/workspace/root-pullrequests-build/build/include/ROOT/RConfig.h:48:4: error: #error ""ROOT requires support for C++11 or higher."" ; - /mnt/build/jenkins/workspace/root-pullrequests-build/build/include/ROOT/RConfig.h:50:5: error: #error ""Pass `-std=c++11` as compiler argument."" ; - /usr/include/c++/4.8.2/bits/c++0x_warning.h:32:2: error: #error This file requires compiler and library support for the ISO C++ 2011 standard. This support is currently experimental, and must be enabled with the -std=c++11 or -std=gnu++11 compiler options. ; - /usr/include/c++/4.8.2/bits/atomic_base.h:70:3: error: ‘constexpr’ does not name a type ; - /usr/include/c++/4.8.2/bits/atomic_base.h:76:3: error: ‘constexpr’ does not name a type ; - /usr/include/c++/4.8.2/bits/atomic_base.h:83:3: error: ‘constexpr’ does not name a type ; - /usr/include/c++/4.8.2/bits/atomic_base.h:90:3: error: ‘constexpr’ does not name a type ; - /usr/include/c++/4.8.2/bits/atomic_base.h:98:41: error: expected initializer before ‘noexcept’ ; - /usr/include/c++/4.8.2/bits/atomic_base.h:102:41: error: expected initializer before ‘noexcept’ ; - /usr/include/c++/4.8.2/bits/atomic_base.h:108:30: error: expected initializer before ‘noexcept’ . And 332558 more. ### Warnings:; - /mnt/build/jenkins/workspace/root-pullrequests-build/build/include/TArray.h:58:4: warning: identifier ‘decltype’ is a keyword in C++11 [-Wc++0x-compat] ; - /mnt/build/jenkins/workspace/root-pullrequests-build/build/include/ROOT/span.hxx:196:5: warning: identifier ‘static_assert’ is a keyword in C++11 [-Wc++0x-compat] ; - /mnt/build/jenkins/workspace/root-pullrequests-build/build/include/TIsAProxy.h:43:34: warning: defaulted and deleted functions only available with -std=c++11 or -std=gnu++11 [enabled by default] ; - /mnt/build/jenkins/workspace/root-pullrequests-build/build/include/TIsAP",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2917#issuecomment-440725109:137,Error,Errors,137,https://root.cern,https://github.com/root-project/root/pull/2917#issuecomment-440725109,10,"['Error', 'error']","['Errors', 'error']"
Availability,"Build failed on ROOT-centos7/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48906/console).; ### Errors:; - /mnt/build/jenkins/workspace/root-pullrequests-build/build/include/ROOT/RConfig.h:48:4: error: #error ""ROOT requires support for C++11 or higher."" ; - /mnt/build/jenkins/workspace/root-pullrequests-build/build/include/ROOT/RConfig.h:50:5: error: #error ""Pass `-std=c++11` as compiler argument."" ; - /mnt/build/jenkins/workspace/root-pullrequests-build/build/include/ROOT/RConfig.h:48:4: error: #error ""ROOT requires support for C++11 or higher."" ; - /mnt/build/jenkins/workspace/root-pullrequests-build/build/include/ROOT/RConfig.h:50:5: error: #error ""Pass `-std=c++11` as compiler argument."" ; - /usr/include/c++/4.8.2/bits/c++0x_warning.h:32:2: error: #error This file requires compiler and library support for the ISO C++ 2011 standard. This support is currently experimental, and must be enabled with the -std=c++11 or -std=gnu++11 compiler options. ; - /usr/include/c++/4.8.2/bits/atomic_base.h:70:3: error: ‘constexpr’ does not name a type ; - /usr/include/c++/4.8.2/bits/atomic_base.h:76:3: error: ‘constexpr’ does not name a type ; - /usr/include/c++/4.8.2/bits/atomic_base.h:83:3: error: ‘constexpr’ does not name a type ; - /usr/include/c++/4.8.2/bits/atomic_base.h:90:3: error: ‘constexpr’ does not name a type ; - /usr/include/c++/4.8.2/bits/atomic_base.h:98:41: error: expected initializer before ‘noexcept’ . And 332556 more. ### Warnings:; - /mnt/build/jenkins/workspace/root-pullrequests-build/build/include/TStorage.h:86:4: warning: identifier ‘decltype’ is a keyword in C++11 [-Wc++0x-compat] ; - /mnt/build/jenkins/workspace/root-pullrequests-build/build/include/ROOT/span.hxx:196:5: warning: identifier ‘static_assert’ is a keyword in C++11 [-Wc++0x-compat] ; - /mnt/build/jenkins/workspace/root-pullrequests-build/root/core/foundation/res/TSchemaType.h:14:23: warning: defaulted and deleted functions only available with -std=c++11",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3024#issuecomment-440731780:137,Error,Errors,137,https://root.cern,https://github.com/root-project/root/pull/3024#issuecomment-440731780,11,"['Error', 'error']","['Errors', 'error']"
Availability,"Build failed on ROOT-centos7/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48911/console).; ### Errors:; - /mnt/build/jenkins/workspace/root-pullrequests-build/build/include/ROOT/RConfig.h:48:4: error: #error ""ROOT requires support for C++11 or higher."" ; - /mnt/build/jenkins/workspace/root-pullrequests-build/build/include/ROOT/RConfig.h:50:5: error: #error ""Pass `-std=c++11` as compiler argument."" ; - /usr/include/c++/4.8.2/bits/c++0x_warning.h:32:2: error: #error This file requires compiler and library support for the ISO C++ 2011 standard. This support is currently experimental, and must be enabled with the -std=c++11 or -std=gnu++11 compiler options. ; - /usr/include/c++/4.8.2/bits/atomic_base.h:70:3: error: ‘constexpr’ does not name a type ; - /usr/include/c++/4.8.2/bits/atomic_base.h:76:3: error: ‘constexpr’ does not name a type ; - /usr/include/c++/4.8.2/bits/atomic_base.h:83:3: error: ‘constexpr’ does not name a type ; - /usr/include/c++/4.8.2/bits/atomic_base.h:90:3: error: ‘constexpr’ does not name a type ; - /usr/include/c++/4.8.2/bits/atomic_base.h:98:41: error: expected initializer before ‘noexcept’ ; - /usr/include/c++/4.8.2/bits/atomic_base.h:102:41: error: expected initializer before ‘noexcept’ ; - /usr/include/c++/4.8.2/bits/atomic_base.h:108:30: error: expected initializer before ‘noexcept’ . And 332625 more. ### Warnings:; - /mnt/build/jenkins/workspace/root-pullrequests-build/build/include/TArray.h:58:4: warning: identifier ‘decltype’ is a keyword in C++11 [-Wc++0x-compat] ; - /mnt/build/jenkins/workspace/root-pullrequests-build/build/include/ROOT/span.hxx:196:5: warning: identifier ‘static_assert’ is a keyword in C++11 [-Wc++0x-compat] ; - /mnt/build/jenkins/workspace/root-pullrequests-build/build/include/TIsAProxy.h:43:34: warning: defaulted and deleted functions only available with -std=c++11 or -std=gnu++11 [enabled by default] ; - /mnt/build/jenkins/workspace/root-pullrequests-build/build/include/TIsAP",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3005#issuecomment-440733246:137,Error,Errors,137,https://root.cern,https://github.com/root-project/root/pull/3005#issuecomment-440733246,10,"['Error', 'error']","['Errors', 'error']"
Availability,"Build failed on ROOT-centos7/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48916/console).; ### Errors:; - /mnt/build/jenkins/workspace/root-pullrequests-build/build/include/ROOT/RConfig.h:48:4: error: #error ""ROOT requires support for C++11 or higher."" ; - /mnt/build/jenkins/workspace/root-pullrequests-build/build/include/ROOT/RConfig.h:50:5: error: #error ""Pass `-std=c++11` as compiler argument."" ; - /mnt/build/jenkins/workspace/root-pullrequests-build/build/include/ROOT/RConfig.h:48:4: error: #error ""ROOT requires support for C++11 or higher."" ; - /mnt/build/jenkins/workspace/root-pullrequests-build/build/include/ROOT/RConfig.h:50:5: error: #error ""Pass `-std=c++11` as compiler argument."" ; - /usr/include/c++/4.8.2/bits/c++0x_warning.h:32:2: error: #error This file requires compiler and library support for the ISO C++ 2011 standard. This support is currently experimental, and must be enabled with the -std=c++11 or -std=gnu++11 compiler options. ; - /mnt/build/jenkins/workspace/root-pullrequests-build/root/core/foundation/src/RConversionRuleParser.cxx:18:59: error: ‘&gt;&gt;’ should be ‘&gt; &gt;’ within a nested template argument list ; - /mnt/build/jenkins/workspace/root-pullrequests-build/root/core/foundation/src/RConversionRuleParser.cxx:20:86: error: in C++98 ‘subPairs’ must be initialized by constructor, not by ‘{...}’ ; - /mnt/build/jenkins/workspace/root-pullrequests-build/root/core/foundation/src/RConversionRuleParser.cxx:20:86: error: no matching function for call to ‘std::vector&lt;std::pair&lt;std::basic_string&lt;char&gt;, std::basic_string&lt;char&gt; &gt; &gt;::vector(&lt;brace-enclosed initializer list&gt;)’ ; - /mnt/build/jenkins/workspace/root-pullrequests-build/root/core/foundation/src/RConversionRuleParser.cxx:22:25: error: ISO C++ forbids declaration of ‘subPair’ with no type [-fpermissive] ; - /mnt/build/jenkins/workspace/root-pullrequests-build/root/core/foundation/src/RConversionRuleParser.cxx:22:35: ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2917#issuecomment-440734689:137,Error,Errors,137,https://root.cern,https://github.com/root-project/root/pull/2917#issuecomment-440734689,11,"['Error', 'error']","['Errors', 'error']"
Availability,"Build failed on ROOT-centos7/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48921/console).; ### Errors:; - /mnt/build/jenkins/workspace/root-pullrequests-build/build/include/ROOT/RConfig.h:48:4: error: #error ""ROOT requires support for C++11 or higher."" ; - /mnt/build/jenkins/workspace/root-pullrequests-build/build/include/ROOT/RConfig.h:50:5: error: #error ""Pass `-std=c++11` as compiler argument."" ; - /usr/include/c++/4.8.2/bits/c++0x_warning.h:32:2: error: #error This file requires compiler and library support for the ISO C++ 2011 standard. This support is currently experimental, and must be enabled with the -std=c++11 or -std=gnu++11 compiler options. ; - /usr/include/c++/4.8.2/bits/atomic_base.h:70:3: error: ‘constexpr’ does not name a type ; - /usr/include/c++/4.8.2/bits/atomic_base.h:76:3: error: ‘constexpr’ does not name a type ; - /usr/include/c++/4.8.2/bits/atomic_base.h:83:3: error: ‘constexpr’ does not name a type ; - /usr/include/c++/4.8.2/bits/atomic_base.h:90:3: error: ‘constexpr’ does not name a type ; - /usr/include/c++/4.8.2/bits/atomic_base.h:98:41: error: expected initializer before ‘noexcept’ ; - /usr/include/c++/4.8.2/bits/atomic_base.h:102:41: error: expected initializer before ‘noexcept’ ; - /usr/include/c++/4.8.2/bits/atomic_base.h:108:30: error: expected initializer before ‘noexcept’ . And 336450 more. ### Warnings:; - /mnt/build/jenkins/workspace/root-pullrequests-build/build/include/TArray.h:58:4: warning: identifier ‘decltype’ is a keyword in C++11 [-Wc++0x-compat] ; - /mnt/build/jenkins/workspace/root-pullrequests-build/build/include/ROOT/span.hxx:196:5: warning: identifier ‘static_assert’ is a keyword in C++11 [-Wc++0x-compat] ; - /mnt/build/jenkins/workspace/root-pullrequests-build/build/include/TIsAProxy.h:43:34: warning: defaulted and deleted functions only available with -std=c++11 or -std=gnu++11 [enabled by default] ; - /mnt/build/jenkins/workspace/root-pullrequests-build/build/include/TIsAP",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3011#issuecomment-440736032:137,Error,Errors,137,https://root.cern,https://github.com/root-project/root/pull/3011#issuecomment-440736032,10,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-centos7/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49054/console).; ### Errors:; - error: Failed to merge in the changes.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2856#issuecomment-441205161:137,Error,Errors,137,https://root.cern,https://github.com/root-project/root/pull/2856#issuecomment-441205161,2,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-centos7/python3.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49083/console).; ### Errors:; - ../../../root/core/dictgen/src/rootcling_impl.cxx:4772:52: error: invalid conversion from ‘void (*)(const char*)’ to ‘RScanner::DeclCallback {aka void (*)(const clang::RecordDecl*)}’ [-fpermissive] ; - ../../../root/core/dictgen/res/Scanner.h:108:17: error: initializing argument 1 of ‘void (* RScanner::SetRecordDeclCallback(RScanner::DeclCallback))(const clang::RecordDecl*)’ [-fpermissive] ; - c++: error: /mnt/build/jenkins/workspace/root-pullrequests-build/build/core/base/G__Core.cxx: No such file or directory,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3034#issuecomment-441253600:139,Error,Errors,139,https://root.cern,https://github.com/root-project/root/pull/3034#issuecomment-441253600,4,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-centos7/python3.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49457/console).; ### Errors:; - ../../../root/tree/dataframe/src/RLoopManager.cxx:109:33: error: ‘class TTreeReader’ has no member named ‘GetEntriesRange’ ; - c++: error: CMakeFiles/ROOTDataFrame.dir/src/RLoopManager.cxx.o: No such file or directory,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3068#issuecomment-442902236:139,Error,Errors,139,https://root.cern,https://github.com/root-project/root/pull/3068#issuecomment-442902236,3,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-centos7/python3.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49545/console).; ### Errors:; - /mnt/build/jenkins/workspace/root-pullrequests-build/root/tree/dataframe/test/datasource_sqlite.cxx:201:4: error: ‘EnableImplicitMT’ is not a member of ‘ROOT’ ; - /mnt/build/jenkins/workspace/root-pullrequests-build/root/tree/dataframe/test/datasource_sqlite.cxx:217:4: error: ‘DisableImplicitMT’ is not a member of ‘ROOT’,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3077#issuecomment-443504286:139,Error,Errors,139,https://root.cern,https://github.com/root-project/root/pull/3077#issuecomment-443504286,3,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-centos7/python3.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49555/console).; ### Errors:; - error: Failed to merge in the changes.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3078#issuecomment-443550848:139,Error,Errors,139,https://root.cern,https://github.com/root-project/root/pull/3078#issuecomment-443550848,2,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-centos7/python3.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49695/console).; ### Errors:; - error: Failed to merge in the changes.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3094#issuecomment-444252948:139,Error,Errors,139,https://root.cern,https://github.com/root-project/root/pull/3094#issuecomment-444252948,2,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-centos7/python3.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/50005/console).; ### Errors:; - /mnt/build/jenkins/workspace/root-pullrequests-build/build/include/ROOT/RDF/ActionHelpers.hxx:488:41: error: ‘class std::vector&lt;bool&gt;’ has no member named ‘emplace_back’,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3135#issuecomment-445357418:139,Error,Errors,139,https://root.cern,https://github.com/root-project/root/pull/3135#issuecomment-445357418,2,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-centos7/python3.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/50025/console).; ### Errors:; - error: Failed to merge in the changes.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3139#issuecomment-445394394:139,Error,Errors,139,https://root.cern,https://github.com/root-project/root/pull/3139#issuecomment-445394394,2,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-centos7/python3.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/50065/console).; ### Errors:; - error: Failed to merge in the changes.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3144#issuecomment-445431079:139,Error,Errors,139,https://root.cern,https://github.com/root-project/root/pull/3144#issuecomment-445431079,2,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-centos7/python3.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/50095/console).; ### Errors:; - /mnt/build/jenkins/workspace/root-pullrequests-build/build/include/ROOT/RDF/ActionHelpers.hxx:488:41: error: ‘class std::vector&lt;bool&gt;’ has no member named ‘emplace_back’,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3135#issuecomment-445785897:139,Error,Errors,139,https://root.cern,https://github.com/root-project/root/pull/3135#issuecomment-445785897,2,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-centos7/python3.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/50207/console).; ### Errors:; - error: Failed to merge in the changes.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3030#issuecomment-446302855:139,Error,Errors,139,https://root.cern,https://github.com/root-project/root/pull/3030#issuecomment-446302855,2,"['Error', 'error']","['Errors', 'error']"
Availability,"Build failed on ROOT-centos7/python3.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/50212/console).; ### Errors:; - /mnt/build/jenkins/workspace/root-pullrequests-build/build/include/ROOT/RVec.hxx:327:7: error: ‘using Impl_t = std::conditional&lt;true, std::vector&lt;bool&gt;, std::vector&lt;bool, ROOT::Detail::VecOps::RAdoptAllocator&lt;bool&gt; &gt; &gt;::type’ has no member named ‘emplace_back’ ; - /mnt/build/jenkins/workspace/root-pullrequests-build/build/include/ROOT/RVec.hxx:327:7: error: ‘using Impl_t = std::conditional&lt;true, std::vector&lt;bool&gt;, std::vector&lt;bool, ROOT::Detail::VecOps::RAdoptAllocator&lt;bool&gt; &gt; &gt;::type’ has no member named ‘emplace_back’",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3135#issuecomment-446343183:139,Error,Errors,139,https://root.cern,https://github.com/root-project/root/pull/3135#issuecomment-446343183,3,"['Error', 'error']","['Errors', 'error']"
Availability,"Build failed on ROOT-centos7/python3.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/50217/console).; ### Errors:; - /mnt/build/jenkins/workspace/root-pullrequests-build/build/include/ROOT/RVec.hxx:327:7: error: ‘using Impl_t = std::conditional&lt;true, std::vector&lt;bool&gt;, std::vector&lt;bool, ROOT::Detail::VecOps::RAdoptAllocator&lt;bool&gt; &gt; &gt;::type’ has no member named ‘emplace_back’",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3135#issuecomment-446397943:139,Error,Errors,139,https://root.cern,https://github.com/root-project/root/pull/3135#issuecomment-446397943,2,"['Error', 'error']","['Errors', 'error']"
Availability,"Build failed on ROOT-centos7/python3.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/50232/console).; ### Errors:; - /mnt/build/jenkins/workspace/root-pullrequests-build/build/include/ROOT/RVec.hxx:327:7: error: ‘using Impl_t = std::conditional&lt;true, std::vector&lt;bool&gt;, std::vector&lt;bool, ROOT::Detail::VecOps::RAdoptAllocator&lt;bool&gt; &gt; &gt;::type’ has no member named ‘emplace_back’",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3135#issuecomment-446506526:139,Error,Errors,139,https://root.cern,https://github.com/root-project/root/pull/3135#issuecomment-446506526,2,"['Error', 'error']","['Errors', 'error']"
Availability,"Build failed on ROOT-centos7/python3.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/50363/console).; ### Errors:; - /mnt/build/jenkins/workspace/root-pullrequests-build/build/include/ROOT/RVec.hxx:327:7: error: ‘using Impl_t = std::conditional&lt;true, std::vector&lt;bool&gt;, std::vector&lt;bool, ROOT::Detail::VecOps::RAdoptAllocator&lt;bool&gt; &gt; &gt;::type’ has no member named ‘emplace_back’",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3169#issuecomment-446954256:139,Error,Errors,139,https://root.cern,https://github.com/root-project/root/pull/3169#issuecomment-446954256,2,"['Error', 'error']","['Errors', 'error']"
Availability,"Build failed on ROOT-centos7/python3.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/50539/console).; ### Errors:; - /mnt/build/jenkins/workspace/root-pullrequests-build/build/include/ROOT/RVec.hxx:327:7: error: ‘using Impl_t = std::conditional&lt;true, std::vector&lt;bool&gt;, std::vector&lt;bool, ROOT::Detail::VecOps::RAdoptAllocator&lt;bool&gt; &gt; &gt;::type’ has no member named ‘emplace_back’ ; - /mnt/build/jenkins/workspace/root-pullrequests-build/build/include/ROOT/RDF/ActionHelpers.hxx:433:7: error: ‘class std::vector&lt;bool&gt;’ has no member named ‘emplace_back’ ; - /mnt/build/jenkins/workspace/root-pullrequests-build/build/include/ROOT/RVec.hxx:327:7: error: ‘using Impl_t = std::conditional&lt;true, std::vector&lt;bool&gt;, std::vector&lt;bool, ROOT::Detail::VecOps::RAdoptAllocator&lt;bool&gt; &gt; &gt;::type’ has no member named ‘emplace_back’",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3169#issuecomment-448329195:139,Error,Errors,139,https://root.cern,https://github.com/root-project/root/pull/3169#issuecomment-448329195,4,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-centos7/python3.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/50549/console).; ### Errors:; - /mnt/build/jenkins/workspace/root-pullrequests-build/root/tree/dataframe/src/RSlotStack.cxx:24:4: error: ‘lock_guard’ is not a member of ‘std’ ; - /mnt/build/jenkins/workspace/root-pullrequests-build/root/tree/dataframe/src/RSlotStack.cxx:24:36: error: expected primary-expression before ‘&gt;’ token ; - /mnt/build/jenkins/workspace/root-pullrequests-build/root/tree/dataframe/src/RSlotStack.cxx:24:54: error: ‘guard’ was not declared in this scope ; - /mnt/build/jenkins/workspace/root-pullrequests-build/root/tree/dataframe/src/RSlotStack.cxx:31:4: error: ‘lock_guard’ is not a member of ‘std’ ; - /mnt/build/jenkins/workspace/root-pullrequests-build/root/tree/dataframe/src/RSlotStack.cxx:31:36: error: expected primary-expression before ‘&gt;’ token ; - /mnt/build/jenkins/workspace/root-pullrequests-build/root/tree/dataframe/src/RSlotStack.cxx:31:54: error: ‘guard’ was not declared in this scope,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3189#issuecomment-448373507:139,Error,Errors,139,https://root.cern,https://github.com/root-project/root/pull/3189#issuecomment-448373507,7,"['Error', 'error']","['Errors', 'error']"
Availability,"Build failed on ROOT-centos7/python3.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/50559/console).; ### Errors:; - /mnt/build/jenkins/workspace/root-pullrequests-build/build/include/ROOT/RVec.hxx:327:7: error: ‘using Impl_t = std::conditional&lt;true, std::vector&lt;bool&gt;, std::vector&lt;bool, ROOT::Detail::VecOps::RAdoptAllocator&lt;bool&gt; &gt; &gt;::type’ has no member named ‘emplace_back’",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3169#issuecomment-448403912:139,Error,Errors,139,https://root.cern,https://github.com/root-project/root/pull/3169#issuecomment-448403912,2,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-centos8/default.; Running on null:/home/sftnight/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5500-ROOT-centos8-default&date=2020-05-04).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/80219/console).; ### Errors:; - [2020-05-04T13:56:11.670Z] CMake Error at cmake/modules/SearchInstalledSoftware.cmake:1538 (message): ; - [2020-05-04T13:56:11.670Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:969 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5500#issuecomment-623479385:387,Error,Errors,387,https://root.cern,https://github.com/root-project/root/pull/5500#issuecomment-623479385,3,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-1053-ROOT-debian10-i386-cxx14&date=2020-09-14).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/95742/console).; ### Errors:; - [2020-09-14T15:37:01.438Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:982 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1053#issuecomment-692139169:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/1053#issuecomment-692139169,2,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-3012-ROOT-debian10-i386-cxx14&date=2020-05-22).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83128/console).; ### Errors:; - [2020-05-22T07:53:18.489Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:937 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3012#issuecomment-632552626:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/3012#issuecomment-632552626,2,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-4015-ROOT-debian10-i386-cxx14&date=2020-08-05).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/91567/console).; ### Errors:; - [2020-08-05T14:29:46.991Z] /home/sftnight/build/workspace/root-pullrequests-build/root/roofit/roofit/src/RooExpPoly.cxx:239:40: error: ‘RooMath’ has not been declared ; - [2020-08-05T14:29:46.991Z] /home/sftnight/build/workspace/root-pullrequests-build/root/roofit/roofit/src/RooExpPoly.cxx:239:64: error: ‘RooMath’ has not been declared ; - [2020-08-05T14:29:46.991Z] /home/sftnight/build/workspace/root-pullrequests-build/root/roofit/roofit/src/RooExpPoly.cxx:240:40: error: ‘RooMath’ has not been declared ; - [2020-08-05T14:29:46.991Z] home/sftnight/build/workspace/root-pullrequests-build/root/roofit/roofit/src/RooExpPoly.cxx:240:64: error: ‘RooMath’ has not been declared . ### Warnings:; - [2020-08-05T14:29:46.991Z] /home/sftnight/build/workspace/root-pullrequests-build/root/roofit/roofit/src/RooExpPoly.cxx:250:47: warning: unused parameter ‘code’ [-Wunused-parameter],MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4015#issuecomment-669227159:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/4015#issuecomment-669227159,5,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-4211-ROOT-debian10-i386-cxx14&date=2020-09-14).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/95734/console).; ### Errors:; - [2020-09-14T15:33:36.016Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:982 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4211#issuecomment-692137197:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/4211#issuecomment-692137197,2,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5094-ROOT-debian10-i386-cxx14&date=2020-05-14).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/82154/console).; ### Errors:; - [2020-05-14T20:23:28.329Z] collect2: error: ld returned 1 exit status ; - [2020-05-14T20:23:34.899Z] /usr/bin/ld: error: ../../interpreter/llvm/src/lib/libclangSema.a(Sema.cpp.o)(.rodata) is too large (0x14abe bytes) ; - [2020-05-14T20:23:34.899Z] /usr/bin/ld: error: ../../interpreter/llvm/src/lib/libclangSema.a(SemaAttr.cpp.o)(.text) is too large (0x2ffa bytes) ; - [2020-05-14T20:23:34.899Z] /usr/bin/ld: error: ../../interpreter/llvm/src/lib/libclangSema.a(SemaCXXScopeSpec.cpp.o)(.text) is too large (0x4256 bytes) ; - [2020-05-14T20:23:34.899Z] /usr/bin/ld: error: ../../interpreter/llvm/src/lib/libclangSema.a(SemaCast.cpp.o)(.text) is too large (0xa63e bytes) ; - [2020-05-14T20:23:34.899Z] /usr/bin/ld: error: ../../interpreter/llvm/src/lib/libclangSema.a(SemaChecking.cpp.o)(.text) is too large (0x3ae83 bytes) ; - [2020-05-14T20:23:34.899Z] /usr/bin/ld: error: ../../interpreter/llvm/src/lib/libclangSema.a(SemaCodeComplete.cpp.o)(.text) is too large (0x2a589 bytes) ; - [2020-05-14T20:23:34.899Z] /usr/bin/ld: error: ../../interpreter/llvm/src/lib/libclangSema.a(SemaCoroutine.cpp.o)(.text) is too large (0x620d bytes) ; - [2020-05-14T20:23:34.899Z] /usr/bin/ld: error: ../../interpreter/llvm/src/lib/libclangSema.a(SemaCUDA.cpp.o)(.text) is too large (0x4f75 bytes) ; - [2020-05-14T20:23:34.899Z] /usr/bin/ld: error: ../../interpreter/llvm/src/lib/libclangSema.a(SemaDecl.cpp.o)(.text) is too large (0x4be8d bytes) . And 893 more,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5094#issuecomment-628867645:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5094#issuecomment-628867645,11,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5094-ROOT-debian10-i386-cxx14&date=2020-05-17).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/82543/console).; ### Errors:; - [2020-05-17T06:55:49.848Z] 1108/1917 Test #843: tutorial-v7-concurrentfill.cxx ....................................................................***Failed Error regular expression found in output. Regex=[: error:] 0.99 sec . ### Failing tests:; - [projectroot.test.test_stressHistFactory](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/82543/testReport/projectroot/test/test_stressHistFactory/); - [projectroot.roottest.root.multicore.roottest_root_multicore_tsenums](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/82543/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tsenums/); - [projectroot.test.fit.test_fit_testFitPerf](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/82543/testReport/projectroot.test/fit/test_fit_testFitPerf/); - [projectroot.runtutorials.tutorial_multicore_imt101_parTreeProcessing](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/82543/testReport/projectroot/runtutorials/tutorial_multicore_imt101_parTreeProcessing/); - [projectroot.runtutorials.tutorial_roostats_StandardBayesianNumericalDemo](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/82543/testReport/projectroot/runtutorials/tutorial_roostats_StandardBayesianNumericalDemo/); - [projectroot.runtutorials.tutorial_roostats_StandardBayesianMCMCDemo](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/82543/testReport/projectroot/runtutorials/tutorial_roostats_StandardBayesianMCMCDemo/); - [projectroot.runtutorials.tutorial_roo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5094#issuecomment-629755255:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5094#issuecomment-629755255,3,"['Error', 'error']","['Error', 'Errors', 'error']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5094-ROOT-debian10-i386-cxx14&date=2020-05-28).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83933/console).; ### Errors:; - [2020-05-28T09:59:40.311Z] /home/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:1123:61: error: ‘clingInterp’ was not declared in this scope,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5094#issuecomment-635243898:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5094#issuecomment-635243898,2,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5094-ROOT-debian10-i386-cxx14&date=2020-06-11).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86344/console).; ### Errors:; - [2020-06-10T22:47:05.222Z] 1054/1922 Test #777: tutorial-tmva-TMVAGAexample .......................................................................***Failed Error regular expression found in output. Regex=[: error:] 0.30 sec . ### Failing tests:; - [projectroot.runtutorials.tutorial_fitsio_FITS_tutorial6](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86344/testReport/projectroot/runtutorials/tutorial_fitsio_FITS_tutorial6/); - [projectroot.test.test_stresshistofit_interpreted](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86344/testReport/projectroot/test/test_stresshistofit_interpreted/); - [projectroot.runtutorials.tutorial_multicore_mt102_readNtuplesFillHistosAndFit](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86344/testReport/projectroot/runtutorials/tutorial_multicore_mt102_readNtuplesFillHistosAndFit/); - [projectroot.runtutorials.tutorial_tmva_TMVAGAexample](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86344/testReport/projectroot/runtutorials/tutorial_tmva_TMVAGAexample/); - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86344/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleRead/); - [projectroot.roottest.root.treeformula.schemaEvolution.roottest_root_treeformula_schemaEvolution_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86344/testReport/projectroot.roottest,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5094#issuecomment-642314415:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5094#issuecomment-642314415,3,"['Error', 'error']","['Error', 'Errors', 'error']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5094-ROOT-debian10-i386-cxx14&date=2020-06-13).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86756/console).; ### Errors:; - [2020-06-13T06:28:40.040Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:943 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5094#issuecomment-643578434:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5094#issuecomment-643578434,2,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5094-ROOT-debian10-i386-cxx14&date=2020-06-13).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86764/console).; ### Errors:; - [2020-06-13T06:32:07.900Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:943 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5094#issuecomment-643578762:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5094#issuecomment-643578762,2,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5094-ROOT-debian10-i386-cxx14&date=2020-06-14).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86772/console).; ### Errors:; - [2020-06-14T04:12:15.412Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:943 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5094#issuecomment-643715855:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5094#issuecomment-643715855,2,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5094-ROOT-debian10-i386-cxx14&date=2020-06-14).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86812/console).; ### Errors:; - [2020-06-14T18:05:14.159Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:943 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5094#issuecomment-643801151:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5094#issuecomment-643801151,2,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5094-ROOT-debian10-i386-cxx14&date=2020-06-14).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86820/console).; ### Errors:; - [2020-06-14T18:22:32.750Z] /home/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:1319:1: error: a function-definition is not allowed here before ‘{’ token ; - [2020-06-14T18:22:32.750Z] /home/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:1354:16: error: expected primary-expression before ‘const’ ; - [2020-06-14T18:22:32.750Z] /home/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:1354:34: error: expected primary-expression before ‘const’ ; - [2020-06-14T18:22:32.750Z] /home/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:1354:53: error: expected primary-expression before ‘const’ ; - [2020-06-14T18:22:32.750Z] /home/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:1354:77: error: cannot call constructor ‘TCling::TCling’ directly [-fpermissive] ; - [2020-06-14T18:22:32.750Z] /home/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:1615:17: error: no matching function for call to ‘TCling::~TCling()’ ; - [2020-06-14T18:22:32.750Z] /home/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:1633:24: error: qualified-id in declaration before ‘(’ token ; - [2020-06-14T18:22:32.750Z] /home/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:1652:22: error: qualified-id in declaration before ‘(’ token ; - [2020-06-14T18:22:32.750Z] /home/sftnight/build/workspace/root-pullrequests-build/root/core/metacl,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5094#issuecomment-643803424:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5094#issuecomment-643803424,4,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5123-ROOT-debian10-i386-cxx14&date=2020-05-04).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/80163/console).; ### Errors:; - [2020-05-04T16:07:43.683Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:912 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5123#issuecomment-623555855:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5123#issuecomment-623555855,2,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5181-ROOT-debian10-i386-cxx14&date=2020-04-22).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77785/console).; ### Errors:; - [2020-04-22T07:25:18.393Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:873 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5181#issuecomment-617601357:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5181#issuecomment-617601357,2,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5324-ROOT-debian10-i386-cxx14&date=2020-08-05).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/91486/console).; ### Errors:; - [2020-08-05T09:08:02.552Z] CMake Error at roofit/CMakeLists.txt:16 (add_subdirectory): ; - [2020-08-05T09:08:26.965Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:1043 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5324#issuecomment-669077897:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5324#issuecomment-669077897,3,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5377-ROOT-debian10-i386-cxx14&date=2020-06-16).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86996/console).; ### Errors:; - [2020-06-16T08:39:29.196Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:943 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5377#issuecomment-644622723:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5377#issuecomment-644622723,2,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5377-ROOT-debian10-i386-cxx14&date=2020-06-16).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/87012/console).; ### Errors:; - [2020-06-16T09:57:27.439Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:943 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5377#issuecomment-644663842:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5377#issuecomment-644663842,2,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5377-ROOT-debian10-i386-cxx14&date=2020-06-16).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/87020/console).; ### Errors:; - [2020-06-16T10:04:41.993Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:943 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5377#issuecomment-644667470:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5377#issuecomment-644667470,2,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5377-ROOT-debian10-i386-cxx14&date=2020-06-16).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/87036/console).; ### Errors:; - [2020-06-16T11:13:39.414Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:943 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5377#issuecomment-644698585:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5377#issuecomment-644698585,2,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5377-ROOT-debian10-i386-cxx14&date=2020-06-16).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/87100/console).; ### Errors:; - [2020-06-16T18:22:36.271Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:950 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5377#issuecomment-644931060:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5377#issuecomment-644931060,2,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5428-ROOT-debian10-i386-cxx14&date=2020-05-04).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/80155/console).; ### Errors:; - [2020-05-04T16:07:31.694Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:912 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5428#issuecomment-623555723:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5428#issuecomment-623555723,2,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5445-ROOT-debian10-i386-cxx14&date=2020-04-24).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/78346/console).; ### Errors:; - [2020-04-24T11:29:55.764Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:873 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5445#issuecomment-618956828:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5445#issuecomment-618956828,2,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5452-ROOT-debian10-i386-cxx14&date=2020-04-24).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/78498/console).; ### Errors:; - [2020-04-24T15:49:31.924Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:873 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5452#issuecomment-619093131:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5452#issuecomment-619093131,2,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5455-ROOT-debian10-i386-cxx14&date=2020-04-24).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/78458/console).; ### Errors:; - [2020-04-24T15:17:33.161Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:873 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5455#issuecomment-619074356:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5455#issuecomment-619074356,2,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5458-ROOT-debian10-i386-cxx14&date=2020-04-30).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/79762/console).; ### Errors:; - [2020-04-30T20:01:17.774Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:900 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5458#issuecomment-622077572:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5458#issuecomment-622077572,2,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5459-ROOT-debian10-i386-cxx14&date=2020-04-25).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/78610/console).; ### Errors:; - [2020-04-24T22:20:35.271Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:873 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5459#issuecomment-619262816:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5459#issuecomment-619262816,2,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5477-ROOT-debian10-i386-cxx14&date=2020-04-30).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/79649/console).; ### Errors:; - [2020-04-30T13:42:56.871Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:900 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5477#issuecomment-621860002:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5477#issuecomment-621860002,2,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5479-ROOT-debian10-i386-cxx14&date=2020-04-29).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/79246/console).; ### Errors:; - [2020-04-29T07:53:09.058Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:873 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5479#issuecomment-621046867:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5479#issuecomment-621046867,2,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5484-ROOT-debian10-i386-cxx14&date=2020-04-29).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/79391/console).; ### Errors:; - [2020-04-29T20:41:22.603Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:873 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5484#issuecomment-621451938:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5484#issuecomment-621451938,2,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5486-ROOT-debian10-i386-cxx14&date=2020-05-08).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/81344/console).; ### Errors:; - [2020-05-08T16:03:45.349Z] /home/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:5903:69: error: expected ‘)’ before ‘!’ token,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5486#issuecomment-625887841:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5486#issuecomment-625887841,2,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5487-ROOT-debian10-i386-cxx14&date=2020-04-29).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/79319/console).; ### Errors:; - [2020-04-29T15:58:37.550Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:873 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5487#issuecomment-621304594:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5487#issuecomment-621304594,2,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5504-ROOT-debian10-i386-cxx14&date=2020-04-30).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/79722/console).; ### Errors:; - [2020-04-30T18:24:33.571Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:900 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5504#issuecomment-622022913:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5504#issuecomment-622022913,2,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5508-ROOT-debian10-i386-cxx14&date=2020-05-04).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/80107/console).; ### Errors:; - [2020-05-04T13:32:19.532Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:901 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5508#issuecomment-623465924:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5508#issuecomment-623465924,2,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5510-ROOT-debian10-i386-cxx14&date=2020-04-30).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/79609/console).; ### Errors:; - [2020-04-30T12:38:51.096Z] /home/sftnight/build/workspace/root-pullrequests-build/root/core/dictgen/src/rootcling_impl.cxx:4604:35: error: invalid initialization of reference of type ‘std::ostream&’ {aka ‘std::basic_ostream&lt;char&gt;&’} from expression of type ‘std::ostream*’ {aka ‘std::basic_ostream&lt;char&gt;*’} ; - [2020-04-30T12:38:51.096Z] /home/sftnight/build/workspace/root-pullrequests-build/root/core/dictgen/src/rootcling_impl.cxx:4862:35: error: invalid initialization of reference of type ‘std::ostream&’ {aka ‘std::basic_ostream&lt;char&gt;&’} from expression of type ‘std::ostream*’ {aka ‘std::basic_ostream&lt;char&gt;*’},MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5510#issuecomment-621807637:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5510#issuecomment-621807637,3,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5528-ROOT-debian10-i386-cxx14&date=2020-05-04).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/80010/console).; ### Errors:; - [2020-05-04T07:57:25.952Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/roottest/CMakeLists.txt:158 (ROOTTEST_ADD_TESTDIRS): ; - [2020-05-04T07:57:26.516Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:968 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5528#issuecomment-623315652:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5528#issuecomment-623315652,3,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5533-ROOT-debian10-i386-cxx14&date=2020-05-05).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/80436/console).; ### Errors:; - [2020-05-05T10:04:32.426Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:914 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5533#issuecomment-623966378:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5533#issuecomment-623966378,2,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5540-ROOT-debian10-i386-cxx14&date=2020-05-05).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/80476/console).; ### Errors:; - [2020-05-05T13:29:53.635Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:914 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5540#issuecomment-624055986:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5540#issuecomment-624055986,2,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5542-ROOT-debian10-i386-cxx14&date=2020-05-05).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/80532/console).; ### Errors:; - [2020-05-05T16:17:58.862Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:914 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5542#issuecomment-624153180:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5542#issuecomment-624153180,2,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5543-ROOT-debian10-i386-cxx14&date=2020-05-05).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/80516/console).; ### Errors:; - [2020-05-05T15:14:13.837Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:914 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5543#issuecomment-624115989:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5543#issuecomment-624115989,2,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5554-ROOT-debian10-i386-cxx14&date=2020-05-06).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/80764/console).; ### Errors:; - [2020-05-06T17:20:17.124Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:914 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5554#issuecomment-624779694:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5554#issuecomment-624779694,2,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5556-ROOT-debian10-i386-cxx14&date=2020-05-06).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/80724/console).; ### Errors:; - [2020-05-06T15:41:22.686Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:914 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5556#issuecomment-624725726:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5556#issuecomment-624725726,2,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5558-ROOT-debian10-i386-cxx14&date=2020-05-06).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/80805/console).; ### Errors:; - [2020-05-06T20:10:56.154Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:920 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5558#issuecomment-624864243:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5558#issuecomment-624864243,2,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5560-ROOT-debian10-i386-cxx14&date=2020-05-06).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/80772/console).; ### Errors:; - [2020-05-06T17:20:32.613Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:914 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5560#issuecomment-624779827:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5560#issuecomment-624779827,2,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5590-ROOT-debian10-i386-cxx14&date=2020-05-11).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/81553/console).; ### Errors:; - [2020-05-11T14:02:30.655Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:920 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5590#issuecomment-626720817:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5590#issuecomment-626720817,2,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5593-ROOT-debian10-i386-cxx14&date=2020-05-11).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/81626/console).; ### Errors:; - [2020-05-11T17:18:47.373Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:924 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5593#issuecomment-626836747:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5593#issuecomment-626836747,2,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5595-ROOT-debian10-i386-cxx14&date=2020-05-12).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/81788/console).; ### Errors:; - [2020-05-12T18:05:55.756Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:931 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5595#issuecomment-627503869:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5595#issuecomment-627503869,2,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5602-ROOT-debian10-i386-cxx14&date=2020-05-12).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/81812/console).; ### Errors:; - [2020-05-12T20:29:38.347Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:931 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5602#issuecomment-627576285:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5602#issuecomment-627576285,2,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5603-ROOT-debian10-i386-cxx14&date=2020-06-11).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86456/console).; ### Errors:; - [2020-06-11T11:46:39.350Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:943 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5603#issuecomment-642591134:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5603#issuecomment-642591134,2,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5619-ROOT-debian10-i386-cxx14&date=2020-05-18).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/82615/console).; ### Errors:; - [2020-05-18T14:46:50.149Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:931 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5619#issuecomment-630231727:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5619#issuecomment-630231727,2,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5619-ROOT-debian10-i386-cxx14&date=2020-05-25).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83499/console).; ### Errors:; - [2020-05-25T20:53:35.672Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:937 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5619#issuecomment-633713400:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5619#issuecomment-633713400,2,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5619-ROOT-debian10-i386-cxx14&date=2020-05-27).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83852/console).; ### Errors:; - [2020-05-27T19:44:32.121Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:937 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5619#issuecomment-634900841:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5619#issuecomment-634900841,2,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5649-ROOT-debian10-i386-cxx14&date=2020-05-19).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/82789/console).; ### Errors:; - [2020-05-19T14:09:43.318Z] collect2: error: ld returned 1 exit status ; - [2020-05-19T14:09:45.396Z] collect2: error: ld returned 1 exit status,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5649#issuecomment-630844302:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5649#issuecomment-630844302,3,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5650-ROOT-debian10-i386-cxx14&date=2020-05-19).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/82749/console).; ### Errors:; - [2020-05-19T11:14:55.364Z] orkspace/root-pullrequests-build/build/googletest-prefix/src/googletest/googletest/include/gtest/gtest.h:1527:11: error: no match for ‘operator==’ (operand types are ‘const unsigned int’ and ‘const ROOT::TNumSlots’) ; - [2020-05-19T11:15:02.245Z] orkspace/root-pullrequests-build/build/googletest-prefix/src/googletest/googletest/include/gtest/gtest.h:1527:11: error: no match for ‘operator==’ (operand types are ‘const unsigned int’ and ‘const ROOT::TNumSlots’),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5650#issuecomment-630752991:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5650#issuecomment-630752991,3,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5650-ROOT-debian10-i386-cxx14&date=2020-05-19).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/82797/console).; ### Errors:; - [2020-05-19T14:24:57.331Z] collect2: error: ld returned 1 exit status ; - [2020-05-19T14:24:59.600Z] collect2: error: ld returned 1 exit status,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5650#issuecomment-630854198:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5650#issuecomment-630854198,3,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5651-ROOT-debian10-i386-cxx14&date=2020-05-19).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/82757/console).; ### Errors:; - [2020-05-19T12:56:40.199Z] /home/sftnight/build/workspace/root-pullrequests-build/build/googletest-prefix/src/googletest/googletest/include/gtest/gtest.h:1527:11: error: no match for ‘operator==’ (operand types are ‘const unsigned int’ and ‘const ROOT::TNumSlots’) ; - [2020-05-19T12:56:44.568Z] /home/sftnight/build/workspace/root-pullrequests-build/build/googletest-prefix/src/googletest/googletest/include/gtest/gtest.h:1527:11: error: no match for ‘operator==’ (operand types are ‘const unsigned int’ and ‘const ROOT::TNumSlots’),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5651#issuecomment-630798616:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5651#issuecomment-630798616,3,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5651-ROOT-debian10-i386-cxx14&date=2020-05-19).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/82813/console).; ### Errors:; - [2020-05-19T15:14:47.244Z] collect2: error: ld returned 1 exit status ; - [2020-05-19T15:14:47.500Z] collect2: error: ld returned 1 exit status,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5651#issuecomment-630889196:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5651#issuecomment-630889196,3,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5652-ROOT-debian10-i386-cxx14&date=2020-05-19).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/82765/console).; ### Errors:; - [2020-05-19T13:12:43.111Z] collect2: error: ld returned 1 exit status ; - [2020-05-19T13:12:49.732Z] collect2: error: ld returned 1 exit status,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5652#issuecomment-630808097:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5652#issuecomment-630808097,3,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5653-ROOT-debian10-i386-cxx14&date=2020-05-19).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/82773/console).; ### Errors:; - [2020-05-19T13:28:57.912Z] collect2: error: ld returned 1 exit status,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5653#issuecomment-630818729:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5653#issuecomment-630818729,2,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5654-ROOT-debian10-i386-cxx14&date=2020-05-19).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/82805/console).; ### Errors:; - [2020-05-19T14:57:32.844Z] collect2: error: ld returned 1 exit status ; - [2020-05-19T14:57:34.212Z] collect2: error: ld returned 1 exit status,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5654#issuecomment-630876652:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5654#issuecomment-630876652,3,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5655-ROOT-debian10-i386-cxx14&date=2020-05-19).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/82821/console).; ### Errors:; - [2020-05-19T16:00:52.450Z] collect2: error: ld returned 1 exit status ; - [2020-05-19T16:00:55.534Z] collect2: error: ld returned 1 exit status,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5655#issuecomment-630916947:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5655#issuecomment-630916947,3,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5696-ROOT-debian10-i386-cxx14&date=2020-05-25).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83451/console).; ### Errors:; - [2020-05-25T16:31:17.230Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:937 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5696#issuecomment-633644396:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5696#issuecomment-633644396,2,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5699-ROOT-debian10-i386-cxx14&date=2020-05-26).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83620/console).; ### Errors:; - [2020-05-26T17:31:15.112Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:937 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5699#issuecomment-634167611:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5699#issuecomment-634167611,2,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5700-ROOT-debian10-i386-cxx14&date=2020-05-26).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83612/console).; ### Errors:; - [2020-05-26T17:30:05.150Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:937 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5700#issuecomment-634167015:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5700#issuecomment-634167015,2,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5701-ROOT-debian10-i386-cxx14&date=2020-05-26).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83628/console).; ### Errors:; - [2020-05-26T17:32:15.027Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:937 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5701#issuecomment-634168109:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5701#issuecomment-634168109,2,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5725-ROOT-debian10-i386-cxx14&date=2020-06-04).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/84969/console).; ### Errors:; - [2020-06-04T07:44:53.428Z] /home/sftnight/build/workspace/root-pullrequests-build/root/hist/histv7/src/RAxis.cxx:364:35: error: use of deleted function ‘ROOT::Experimental::RAxisBase::BinningCompatibility::BinningCompatibility(const ROOT::Experimental::RAxisBase::BinningCompatibility&)’ ; - [2020-06-04T07:44:53.428Z] /home/sftnight/build/workspace/root-pullrequests-build/root/hist/histv7/inc/ROOT/RAxis.hxx:849:38: error: union member ‘ROOT::Experimental::RAxisBase::BinningCompatibility::&lt;unnamed union&gt;::fLabeled’ with non-trivial ‘ROOT::Experimental::RAxisBase::LabeledBinningCompatibility::LabeledBinningCompatibility(const ROOT::Experimental::RAxisBase::LabeledBinningCompatibility&)’ ; - [2020-06-04T07:44:53.428Z] /home/sftnight/build/workspace/root-pullrequests-build/root/hist/histv7/src/RAxis.cxx:368:7: error: use of deleted function ‘ROOT::Experimental::RAxisBase::BinningCompatibility::BinningCompatibility(const ROOT::Experimental::RAxisBase::BinningCompatibility&)’ ; - [2020-06-04T07:44:53.428Z] /home/sftnight/build/workspace/root-pullrequests-build/root/hist/histv7/src/RAxis.cxx:373:65: error: use of deleted function ‘ROOT::Experimental::RAxisBase::BinningCompatibility::BinningCompatibility(const ROOT::Experimental::RAxisBase::BinningCompatibility&)’,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5725#issuecomment-638669917:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5725#issuecomment-638669917,5,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5731-ROOT-debian10-i386-cxx14&date=2020-05-28).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/84030/console).; ### Errors:; - [2020-05-28T20:33:32.225Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:937 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5731#issuecomment-635591938:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5731#issuecomment-635591938,2,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5759-ROOT-debian10-i386-cxx14&date=2020-06-02).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/84552/console).; ### Errors:; - [2020-06-02T08:36:26.565Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:937 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5759#issuecomment-637384552:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5759#issuecomment-637384552,2,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5762-ROOT-debian10-i386-cxx14&date=2020-06-03).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/84705/console).; ### Errors:; - [2020-06-02T23:39:34.713Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:937 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5762#issuecomment-637863069:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5762#issuecomment-637863069,2,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5771-ROOT-debian10-i386-cxx14&date=2020-06-03).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/84881/console).; ### Errors:; - [2020-06-03T17:43:18.042Z] CMake Error at cmake/modules/SearchInstalledSoftware.cmake:1516 (message): ; - [2020-06-03T17:43:18.042Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:1005 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5771#issuecomment-638350273:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5771#issuecomment-638350273,3,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5780-ROOT-debian10-i386-cxx14&date=2020-06-05).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/85114/console).; ### Errors:; - [2020-06-04T22:34:10.228Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:943 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5780#issuecomment-639152896:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5780#issuecomment-639152896,2,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5784-ROOT-debian10-i386-cxx14&date=2020-06-04).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/85065/console).; ### Errors:; - [2020-06-04T21:16:46.026Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:943 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5784#issuecomment-639121024:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5784#issuecomment-639121024,2,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5786-ROOT-debian10-i386-cxx14&date=2020-06-05).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/85170/console).; ### Errors:; - [2020-06-05T01:04:25.441Z] CMake Error at cmake/modules/RootCPack.cmake:44 (message): ; - [2020-06-05T01:04:25.441Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:1011 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5786#issuecomment-639197964:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5786#issuecomment-639197964,3,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5786-ROOT-debian10-i386-cxx14&date=2020-06-05).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/85428/console).; ### Errors:; - [2020-06-05T17:17:47.070Z] CMake Error at cmake/modules/RootCPack.cmake:48 (configure_file): ; - [2020-06-05T17:17:47.070Z] CMake Error at /usr/share/cmake-3.13/Modules/CPack.cmake:508 (message): ; - [2020-06-05T17:17:47.070Z] CMake Error at /usr/share/cmake-3.13/Modules/CPack.cmake:508 (message): ; - [2020-06-05T17:17:47.070Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:1011 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5786#issuecomment-639644378:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5786#issuecomment-639644378,5,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5791-ROOT-debian10-i386-cxx14&date=2020-06-05).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/85210/console).; ### Errors:; - [2020-06-05T03:17:35.699Z] /home/sftnight/build/workspace/root-pullrequests-build/build/include/Math/GoFTest.h:189:9: error: no template named 'vector' in namespace 'std' ; - [2020-06-05T03:17:35.699Z] /home/sftnight/build/workspace/root-pullrequests-build/build/include/Math/GoFTest.h:191:9: error: no template named 'vector' in namespace 'std' ; - [2020-06-05T03:17:35.699Z] /home/sftnight/build/workspace/root-pullrequests-build/build/include/Math/GoFTest.h:191:21: error: no member named 'vector' in namespace 'std' ; - [2020-06-05T03:17:35.699Z] /home/sftnight/build/workspace/root-pullrequests-build/build/include/Math/GoFTest.h:191:28: error: unexpected type name 'Double_t': expected expression ; - [2020-06-05T03:17:35.699Z] /home/sftnight/build/workspace/root-pullrequests-build/build/include/Math/GoFTest.h:191:38: error: expected member name or ';' after declaration specifiers ; - [2020-06-05T03:17:35.699Z] /home/sftnight/build/workspace/root-pullrequests-build/build/include/Math/GoFTest.h:205:41: error: no template named 'vector' in namespace 'std' ; - [2020-06-05T03:17:35.699Z] /home/sftnight/build/workspace/root-pullrequests-build/build/include/Math/GoFTest.h:214:25: error: no template named 'vector' in namespace 'std' ; - [2020-06-05T03:17:35.699Z] /home/sftnight/build/workspace/root-pullrequests-build/build/include/Math/GoFTest.h:214:69: error: no template named 'vector' in namespace 'std' ; - [2020-06-05T03:17:35.699Z] /home/sftnight/build/workspace/root-pullrequests-build/build/include/Math/RandomFunctions.h:288:12: error: no template named 'vector' in nam,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5791#issuecomment-639234080:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5791#issuecomment-639234080,4,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5827-ROOT-debian10-i386-cxx14&date=2020-06-09).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/85875/console).; ### Errors:; - [2020-06-09T02:08:50.660Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:943 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5827#issuecomment-640984920:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5827#issuecomment-640984920,2,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5828-ROOT-debian10-i386-cxx14&date=2020-06-09).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86103/console).; ### Errors:; - [2020-06-09T20:12:39.158Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:943 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5828#issuecomment-641544082:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5828#issuecomment-641544082,2,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5829-ROOT-debian10-i386-cxx14&date=2020-06-09).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/85973/console).; ### Errors:; - [2020-06-09T08:17:23.049Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:943 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5829#issuecomment-641115485:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5829#issuecomment-641115485,2,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5836-ROOT-debian10-i386-cxx14&date=2020-06-10).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86152/console).; ### Errors:; - [2020-06-09T23:29:21.609Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:943 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5836#issuecomment-641633155:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5836#issuecomment-641633155,2,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5837-ROOT-debian10-i386-cxx14&date=2020-06-09).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86119/console).; ### Errors:; - [2020-06-09T20:13:06.825Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:943 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5837#issuecomment-641544271:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5837#issuecomment-641544271,2,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5843-ROOT-debian10-i386-cxx14&date=2020-06-17).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/87222/console).; ### Errors:; - [2020-06-17T13:16:21.255Z] CMake Error at cmake/modules/SearchInstalledSoftware.cmake:1548 (message): ; - [2020-06-17T13:16:21.255Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:1020 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5843#issuecomment-645366969:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5843#issuecomment-645366969,3,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5845-ROOT-debian10-i386-cxx14&date=2020-06-11).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86521/console).; ### Errors:; - [2020-06-11T14:38:32.790Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:943 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5845#issuecomment-642700889:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5845#issuecomment-642700889,2,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5848-ROOT-debian10-i386-cxx14&date=2020-06-11).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86352/console).; ### Errors:; - [2020-06-11T00:04:23.171Z] /home/sftnight/build/workspace/root-pullrequests-build/build/include/ROOT/RNTupleDescriptor.hxx:340:15: error: no member named 'iota' in namespace 'std',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5848#issuecomment-642328811:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5848#issuecomment-642328811,2,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5848-ROOT-debian10-i386-cxx14&date=2020-06-18).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/87376/console).; ### Errors:; - [2020-06-18T20:45:21.356Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:966 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5848#issuecomment-646296420:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5848#issuecomment-646296420,2,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5860-ROOT-debian10-i386-cxx14&date=2020-06-15).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86916/console).; ### Errors:; - [2020-06-15T18:28:10.284Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/build/interpreter/llvm/src/tools/cling/tools/plugins/clad/clad-prefix/src/clad-stamp/clad-build-Release.cmake:16 (message): ; - [2020-06-15T18:29:07.045Z] collect2: fatal error: ld terminated with signal 9 [Killed],MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5860#issuecomment-644301191:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5860#issuecomment-644301191,3,"['Error', 'error']","['Error', 'Errors', 'error']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5874-ROOT-debian10-i386-cxx14&date=2020-06-15).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86908/console).; ### Errors:; - [2020-06-15T18:10:13.946Z] collect2: fatal error: ld terminated with signal 9 [Killed],MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5874#issuecomment-644288185:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5874#issuecomment-644288185,2,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5876-ROOT-debian10-i386-cxx14&date=2020-06-16).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86932/console).; ### Errors:; - [2020-06-15T22:49:54.759Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:943 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5876#issuecomment-644428929:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5876#issuecomment-644428929,2,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5879-ROOT-debian10-i386-cxx14&date=2020-06-17).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/87254/console).; ### Errors:; - [2020-06-17T16:37:25.872Z] CMake Error at cmake/modules/SearchInstalledSoftware.cmake:1548 (message): ; - [2020-06-17T16:37:26.170Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:1027 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5879#issuecomment-645484458:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5879#issuecomment-645484458,3,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5879-ROOT-debian10-i386-cxx14&date=2020-06-17).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/87262/console).; ### Errors:; - [2020-06-17T16:53:27.334Z] CMake Error at cmake/modules/SearchInstalledSoftware.cmake:1548 (message): ; - [2020-06-17T16:53:27.334Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:1027 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5879#issuecomment-645494231:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5879#issuecomment-645494231,3,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5879-ROOT-debian10-i386-cxx14&date=2020-06-18).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/87326/console).; ### Errors:; - [2020-06-18T13:42:28.902Z] CMake Error at cmake/modules/SearchInstalledSoftware.cmake:1548 (message): ; - [2020-06-18T13:42:28.902Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:1030 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5879#issuecomment-646025051:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5879#issuecomment-646025051,3,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5884-ROOT-debian10-i386-cxx14&date=2020-07-09).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/89388/console).; ### Errors:; - [2020-07-09T11:08:05.057Z] 1126/1932 Test #860: tutorial-v7-draw_mt.cxx ...........................................................................***Failed Error regular expression found in output. Regex=[: error:] 0.86 sec . ### Failing tests:; - [projectroot.roofit.histfactory.test.gtest_roofit_histfactory_test_testHistFactory](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/89388/testReport/projectroot.roofit.histfactory/test/gtest_roofit_histfactory_test_testHistFactory/); - [projectroot.runtutorials.tutorial_v7_draw_mt.cxx](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/89388/testReport/projectroot/runtutorials/tutorial_v7_draw_mt_cxx/); - [projectroot.roottest.python.JupyROOT.roottest_python_JupyROOT_cppcompleter_doctest](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/89388/testReport/projectroot.roottest.python/JupyROOT/roottest_python_JupyROOT_cppcompleter_doctest/); - [projectroot.test.test_stresshistofit_interpreted](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/89388/testReport/projectroot/test/test_stresshistofit_interpreted/); - [projectroot.roottest.root.tree.reader.roottest_root_tree_reader_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/89388/testReport/projectroot.roottest.root.tree/reader/roottest_root_tree_reader_make/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5884#issuecomment-656073236:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5884#issuecomment-656073236,3,"['Error', 'error']","['Error', 'Errors', 'error']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5885-ROOT-debian10-i386-cxx14&date=2020-06-17).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/87214/console).; ### Errors:; - [2020-06-17T13:15:53.809Z] CMake Error at cmake/modules/SearchInstalledSoftware.cmake:1548 (message): ; - [2020-06-17T13:15:53.809Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:1020 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5885#issuecomment-645366708:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5885#issuecomment-645366708,3,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5886-ROOT-debian10-i386-cxx14&date=2020-06-17).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/87230/console).; ### Errors:; - [2020-06-17T15:04:21.650Z] CMake Error at cmake/modules/SearchInstalledSoftware.cmake:1552 (message): ; - [2020-06-17T15:04:21.650Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:1020 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5886#issuecomment-645431333:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5886#issuecomment-645431333,3,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5886-ROOT-debian10-i386-cxx14&date=2020-06-18).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/87302/console).; ### Errors:; - [2020-06-18T11:10:24.373Z] CMake Error at cmake/modules/SearchInstalledSoftware.cmake:1552 (message): ; - [2020-06-18T11:10:24.631Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:1030 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5886#issuecomment-645948821:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5886#issuecomment-645948821,3,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5887-ROOT-debian10-i386-cxx14&date=2020-06-17).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/87238/console).; ### Errors:; - [2020-06-17T15:23:18.527Z] CMake Error at cmake/modules/SearchInstalledSoftware.cmake:1548 (message): ; - [2020-06-17T15:23:18.804Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:1020 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5887#issuecomment-645442777:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5887#issuecomment-645442777,3,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5888-ROOT-debian10-i386-cxx14&date=2020-06-17).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/87246/console).; ### Errors:; - [2020-06-17T16:04:17.265Z] CMake Error at cmake/modules/SearchInstalledSoftware.cmake:1548 (message): ; - [2020-06-17T16:04:17.265Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:1027 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5888#issuecomment-645466459:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5888#issuecomment-645466459,3,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5889-ROOT-debian10-i386-cxx14&date=2020-06-18).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/87286/console).; ### Errors:; - [2020-06-18T07:16:19.616Z] CMake Error at cmake/modules/SearchInstalledSoftware.cmake:1549 (message): ; - [2020-06-18T07:16:19.616Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:1027 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5889#issuecomment-645828377:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5889#issuecomment-645828377,3,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5889-ROOT-debian10-i386-cxx14&date=2020-06-18).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/87310/console).; ### Errors:; - [2020-06-18T11:25:23.986Z] CMake Error at cmake/modules/SearchInstalledSoftware.cmake:1549 (message): ; - [2020-06-18T11:25:24.245Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:1030 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5889#issuecomment-645955509:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5889#issuecomment-645955509,3,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5889-ROOT-debian10-i386-cxx14&date=2020-06-19).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/87440/console).; ### Errors:; - [2020-06-19T09:20:30.059Z] CMake Error at cmake/modules/SearchInstalledSoftware.cmake:1549 (message): ; - [2020-06-19T09:20:30.059Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:1034 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5889#issuecomment-646531590:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5889#issuecomment-646531590,3,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5890-ROOT-debian10-i386-cxx14&date=2020-06-17).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/87270/console).; ### Errors:; - [2020-06-17T20:44:19.096Z] CMake Error at cmake/modules/SearchInstalledSoftware.cmake:1548 (message): ; - [2020-06-17T20:44:19.096Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:1027 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5890#issuecomment-645614593:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5890#issuecomment-645614593,3,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5891-ROOT-debian10-i386-cxx14&date=2020-06-18).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/87278/console).; ### Errors:; - [2020-06-17T23:49:23.267Z] CMake Error at cmake/modules/SearchInstalledSoftware.cmake:1548 (message): ; - [2020-06-17T23:49:23.267Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:1027 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5891#issuecomment-645684708:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5891#issuecomment-645684708,3,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5891-ROOT-debian10-i386-cxx14&date=2020-06-18).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/87407/console).; ### Errors:; - [2020-06-18T21:50:17.784Z] CMake Error at cmake/modules/SearchInstalledSoftware.cmake:1548 (message): ; - [2020-06-18T21:50:17.784Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:1034 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5891#issuecomment-646323512:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5891#issuecomment-646323512,3,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5892-ROOT-debian10-i386-cxx14&date=2020-06-18).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/87294/console).; ### Errors:; - [2020-06-18T08:07:21.802Z] CMake Error at cmake/modules/SearchInstalledSoftware.cmake:1548 (message): ; - [2020-06-18T08:07:21.802Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:1027 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5892#issuecomment-645854564:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5892#issuecomment-645854564,3,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5893-ROOT-debian10-i386-cxx14&date=2020-06-18).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/87318/console).; ### Errors:; - [2020-06-18T13:18:25.441Z] CMake Error at cmake/modules/SearchInstalledSoftware.cmake:1548 (message): ; - [2020-06-18T13:18:25.441Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:1030 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5893#issuecomment-646011526:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5893#issuecomment-646011526,3,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5893-ROOT-debian10-i386-cxx14&date=2020-06-18).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/87334/console).; ### Errors:; - [2020-06-18T13:50:20.374Z] CMake Error at cmake/modules/SearchInstalledSoftware.cmake:1548 (message): ; - [2020-06-18T13:50:20.633Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:1030 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5893#issuecomment-646029438:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5893#issuecomment-646029438,3,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5893-ROOT-debian10-i386-cxx14&date=2020-06-18).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/87342/console).; ### Errors:; - [2020-06-18T13:51:07.883Z] CMake Error at cmake/modules/SearchInstalledSoftware.cmake:1548 (message): ; - [2020-06-18T13:51:07.883Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:1030 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5893#issuecomment-646029884:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5893#issuecomment-646029884,3,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5893-ROOT-debian10-i386-cxx14&date=2020-06-18).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/87351/console).; ### Errors:; - [2020-06-18T14:55:21.113Z] CMake Error at cmake/modules/SearchInstalledSoftware.cmake:1548 (message): ; - [2020-06-18T14:55:21.113Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:1032 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5893#issuecomment-646073346:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5893#issuecomment-646073346,3,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5893-ROOT-debian10-i386-cxx14&date=2020-06-19).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/87432/console).; ### Errors:; - [2020-06-19T09:20:05.898Z] CMake Error at cmake/modules/SearchInstalledSoftware.cmake:1548 (message): ; - [2020-06-19T09:20:05.898Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:1034 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5893#issuecomment-646531396:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5893#issuecomment-646531396,3,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5894-ROOT-debian10-i386-cxx14&date=2020-06-18).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/87360/console).; ### Errors:; - [2020-06-18T15:40:31.101Z] CMake Error at cmake/modules/SearchInstalledSoftware.cmake:1548 (message): ; - [2020-06-18T15:40:31.101Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:1034 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5894#issuecomment-646107962:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5894#issuecomment-646107962,3,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5894-ROOT-debian10-i386-cxx14&date=2020-06-18).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/87368/console).; ### Errors:; - [2020-06-18T15:41:28.041Z] CMake Error at cmake/modules/SearchInstalledSoftware.cmake:1548 (message): ; - [2020-06-18T15:41:28.042Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:1034 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5894#issuecomment-646108741:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5894#issuecomment-646108741,3,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5907-ROOT-debian10-i386-cxx14&date=2020-06-22).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/87589/console).; ### Errors:; - [2020-06-22T19:00:19.156Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:1034 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5907#issuecomment-647714564:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5907#issuecomment-647714564,2,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5919-ROOT-debian10-i386-cxx14&date=2020-08-05).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/91543/console).; ### Errors:; - [2020-08-05T13:13:27.086Z] CMake Error at cmake/modules/SearchInstalledSoftware.cmake:1143 (message): ; - [2020-08-05T13:13:27.086Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:1048 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5919#issuecomment-669185668:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5919#issuecomment-669185668,3,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5921-ROOT-debian10-i386-cxx14&date=2020-06-24).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/87834/console).; ### Errors:; - [2020-06-24T14:25:45.602Z] collect2: error: ld returned 1 exit status,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5921#issuecomment-648853967:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5921#issuecomment-648853967,2,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5931-ROOT-debian10-i386-cxx14&date=2020-06-25).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/88055/console).; ### Errors:; - [2020-06-25T15:51:42.847Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:966 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5931#issuecomment-649639057:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5931#issuecomment-649639057,2,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5934-ROOT-debian10-i386-cxx14&date=2020-07-01).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/88705/console).; ### Errors:; - [2020-07-01T17:04:26.863Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:970 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5934#issuecomment-652539469:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5934#issuecomment-652539469,2,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5945-ROOT-debian10-i386-cxx14&date=2020-07-01).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/88609/console).; ### Errors:; - [2020-07-01T05:45:58.802Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/build/interpreter/llvm/src/tools/cling/tools/plugins/clad/clad-prefix/src/clad-stamp/clad-configure-Release.cmake:16 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5945#issuecomment-652205230:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5945#issuecomment-652205230,2,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5965-ROOT-debian10-i386-cxx14&date=2020-07-01).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/88721/console).; ### Errors:; - [2020-07-01T19:00:24.493Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:970 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5965#issuecomment-652592760:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5965#issuecomment-652592760,2,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5973-ROOT-debian10-i386-cxx14&date=2020-07-02).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/88858/console).; ### Errors:; - [2020-07-02T17:54:50.104Z] /home/sftnight/build/workspace/root-pullrequests-build/root/hist/hist/src/TAxis.cxx:1131:71: error: expected ‘;’ before ‘return’,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5973#issuecomment-653144633:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5973#issuecomment-653144633,2,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5986-ROOT-debian10-i386-cxx14&date=2020-07-06).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/89010/console).; ### Errors:; - [2020-07-06T17:00:09.683Z] /home/sftnight/build/workspace/root-pullrequests-build/build/include/ROOT/RHist.hxx:105:31: error: expected expression ; - [2020-07-06T17:00:09.683Z] /home/sftnight/build/workspace/root-pullrequests-build/build/include/ROOT/RHist.hxx:142:49: error: no member named 'apply' in namespace 'std' ; - [2020-07-06T17:00:09.683Z] /home/sftnight/build/workspace/root-pullrequests-build/build/include/ROOT/RHist.hxx:170:41: error: no member named 'apply' in namespace 'std' ; - [2020-07-06T17:00:09.683Z] /home/sftnight/build/workspace/root-pullrequests-build/build/include/ROOT/RHist.hxx:183:41: error: no member named 'apply' in namespace 'std' ; - [2020-07-06T17:00:09.683Z] /home/sftnight/build/workspace/root-pullrequests-build/build/include/ROOT/RHistImpl.hxx:34:1: error: too few template parameters in template redeclaration ; - [2020-07-06T17:00:09.683Z] /home/sftnight/build/workspace/root-pullrequests-build/build/include/ROOT/RHistImpl.hxx:74:31: error: no template named 'CoordArray_t' in namespace 'ROOT::Experimental::Hist' ; - [2020-07-06T17:00:09.683Z] /home/sftnight/build/workspace/root-pullrequests-build/build/include/ROOT/RHistImpl.hxx:102:34: error: unknown type name 'CoordArray_t' ; - [2020-07-06T17:00:09.683Z] /home/sftnight/build/workspace/root-pullrequests-build/build/include/ROOT/RHistImpl.hxx:105:41: error: unknown type name 'CoordArray_t' ; - [2020-07-06T17:00:09.683Z] /home/sftnight/build/workspace/root-pullrequests-build/build/include/ROOT/RHistImpl.hxx:113:12: error: unknown type name 'CoordArray_t' ; - [2020-07-06T17:00:09.683Z] ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5986#issuecomment-654355854:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/5986#issuecomment-654355854,4,"['Error', 'error']","['Errors', 'error']"
Availability,"Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-6007-ROOT-debian10-i386-cxx14&date=2020-08-05).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/91518/console).; ### Errors:; - [2020-08-05T11:52:45.261Z] /home/sftnight/build/workspace/root-pullrequests-build/root/math/mathcore/inc/Fit/Chi2FCN.h:124:9: error: ‘void ROOT::Fit::Chi2FCN&lt;DerivFunType, ModelFunType&gt;::Gradient(const double*, double*) const [with DerivFunType = ROOT::Math::IBaseFunctionMultiDimTempl&lt;double&gt;; ModelFunType = ROOT::Math::IParametricFunctionMultiDimTempl&lt;double&gt;]’ marked ‘override’, but does not override ; - [2020-08-05T11:52:45.261Z] /home/sftnight/build/workspace/root-pullrequests-build/root/math/mathcore/inc/Fit/Chi2FCN.h:154:11: error: ‘double ROOT::Fit::Chi2FCN&lt;DerivFunType, ModelFunType&gt;::DoDerivative(const double*, unsigned int) const [with DerivFunType = ROOT::Math::IBaseFunctionMultiDimTempl&lt;double&gt;; ModelFunType = ROOT::Math::IParametricFunctionMultiDimTempl&lt;double&gt;]’ marked ‘override’, but does not override ; - [2020-08-05T11:52:45.262Z] /home/sftnight/build/workspace/root-pullrequests-build/root/math/mathcore/inc/Fit/LogLikelihoodFCN.h:129:9: error: ‘void ROOT::Fit::LogLikelihoodFCN&lt;DerivFunType, ModelFunType&gt;::Gradient(const double*, double*) const [with DerivFunType = ROOT::Math::IBaseFunctionMultiDimTempl&lt;double&gt;; ModelFunType = ROOT::Math::IParametricFunctionMultiDimTempl&lt;double&gt;]’ marked ‘override’, but does not override ; - [2020-08-05T11:52:45.262Z] /home/sftnight/build/workspace/root-pullrequests-build/root/math/mathcore/inc/Fit/LogLikelihoodFCN.h:164:11: error: ‘double ROOT::Fit::LogLikelihoodFCN&lt;DerivFunType, ModelFunType&gt;::DoDerivative(const double*, unsigned int) const [with DerivFu",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6007#issuecomment-669149252:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/6007#issuecomment-669149252,2,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-6098-ROOT-debian10-i386-cxx14&date=2020-07-29).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/90931/console).; ### Errors:; - [2020-07-29T13:14:54.666Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:975 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6098#issuecomment-665656763:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/6098#issuecomment-665656763,2,['Error'],"['Error', 'Errors']"
Availability,"Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-6103-ROOT-debian10-i386-cxx14&date=2020-07-31).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/91068/console).; ### Errors:; - [2020-07-31T11:52:13.880Z] /home/sftnight/build/workspace/root-pullrequests-build/root/hist/histv7/inc/ROOT/RFitImpl.hxx:106:18: error: no match for call to ‘(TF1) (ROOT::Experimental::Detail::RHistBinRef&lt;ROOT::Experimental::Detail::RHistImplBase&lt;ROOT::Experimental::Detail::RHistData&lt;1, double, std::vector&lt;double&gt;, ROOT::Experimental::RHistStatContent, ROOT::Experimental::RHistStatUncertainty&gt; &gt; &gt;&)’ ; - [2020-07-31T11:52:13.880Z] /home/sftnight/build/workspace/root-pullrequests-build/root/hist/histv7/inc/ROOT/RFitImpl.hxx:113:13: error: no matching function for call to ‘ROOT::Fit::BinData::Add(ROOT::Experimental::Detail::RHistBinRef&lt;ROOT::Experimental::Detail::RHistImplBase&lt;ROOT::Experimental::Detail::RHistData&lt;1, double, std::vector&lt;double&gt;, ROOT::Experimental::RHistStatContent, ROOT::Experimental::RHistStatUncertainty&gt; &gt; &gt;::CoordArray_t, double)’ ; - [2020-07-31T11:52:13.880Z] /home/sftnight/build/workspace/root-pullrequests-build/root/hist/histv7/inc/ROOT/RFitImpl.hxx:116:35: error: cannot bind non-const lvalue reference of type ‘double&’ to an rvalue of type ‘double’ ; - [2020-07-31T11:52:13.880Z] /home/sftnight/build/workspace/root-pullrequests-build/root/hist/histv7/inc/ROOT/RFitImpl.hxx:118:13: error: no matching function for call to ‘ROOT::Fit::BinData::Add(ROOT::Experimental::Detail::RHistBinRef&lt;ROOT::Experimental::Detail::RHistImplBase&lt;ROOT::Experimental::Detail::RHistData&lt;1, double, std::vector&lt;double&gt;, ROOT::Experimental::RHistStatContent, ROOT::Experimental::RHistStatUncertainty&gt; &gt;",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6103#issuecomment-667082453:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/6103#issuecomment-667082453,2,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-6105-ROOT-debian10-i386-cxx14&date=2020-08-12).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/92514/console).; ### Errors:; - [2020-08-12T20:18:59.236Z] /home/sftnight/build/workspace/root-pullrequests-build/build/include/ROOT/RPageStorage.hxx:167:58: error: use of undeclared identifier 'RPageSource' ; - [2020-08-12T20:18:59.236Z] /home/sftnight/build/workspace/root-pullrequests-build/build/include/ROOT/RPageStorage.hxx:167:81: error: expected a type ; - [2020-08-12T20:18:59.236Z] /home/sftnight/build/workspace/root-pullrequests-build/build/include/ROOT/RPageStorage.hxx:167:81: error: expected ')',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6105#issuecomment-673089779:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/6105#issuecomment-673089779,4,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-6136-ROOT-debian10-i386-cxx14&date=2020-08-07).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/91731/console).; ### Errors:; - [2020-08-07T08:47:06.747Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:980 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6136#issuecomment-670406944:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/6136#issuecomment-670406944,2,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-6137-ROOT-debian10-i386-cxx14&date=2020-08-07).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/91739/console).; ### Errors:; - [2020-08-07T08:47:19.067Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:980 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6137#issuecomment-670407029:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/6137#issuecomment-670407029,2,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-6138-ROOT-debian10-i386-cxx14&date=2020-08-07).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/91747/console).; ### Errors:; - [2020-08-07T08:47:33.821Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:980 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6138#issuecomment-670407167:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/6138#issuecomment-670407167,2,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-6154-ROOT-debian10-i386-cxx14&date=2020-08-11).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/92122/console).; ### Errors:; - [2020-08-11T04:10:02.832Z] /home/sftnight/build/workspace/root-pullrequests-build/root/interpreter/cling/lib/Interpreter/DynamicLibraryManagerSymbol.cpp:550:7: error: ‘export_directory_iterator’ was not declared in this scope ; - [2020-08-11T04:10:02.832Z] /home/sftnight/build/workspace/root-pullrequests-build/root/interpreter/cling/lib/Interpreter/DynamicLibraryManagerSymbol.cpp:551:32: error: expected ‘;’ before ‘E’ ; - [2020-08-11T04:10:02.832Z] /home/sftnight/build/workspace/root-pullrequests-build/root/interpreter/cling/lib/Interpreter/DynamicLibraryManagerSymbol.cpp:553:14: error: ‘I’ was not declared in this scope ; - [2020-08-11T04:10:02.832Z] /home/sftnight/build/workspace/root-pullrequests-build/root/interpreter/cling/lib/Interpreter/DynamicLibraryManagerSymbol.cpp:553:19: error: ‘E’ was not declared in this scope ; - [2020-08-11T04:10:02.832Z] /home/sftnight/build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Support/Casting.h:59:23: error: incomplete type ‘llvm::object::COFFObjectFile’ used in nested name specifier,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6154#issuecomment-671712914:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/6154#issuecomment-671712914,6,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-6172-ROOT-debian10-i386-cxx14&date=2020-08-18).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/92979/console).; ### Errors:; - [2020-08-18T07:24:58.465Z] /home/sftnight/build/workspace/root-pullrequests-build/root/roofit/roofit/src/RooDSCBShape.cxx:41:10: fatal error: &lt;stdexcept&gt;: No such file or directory,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6172#issuecomment-675306511:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/6172#issuecomment-675306511,2,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-6189-ROOT-debian10-i386-cxx14&date=2020-08-13).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/92730/console).; ### Errors:; - [2020-08-13T20:20:46.313Z] /home/sftnight/build/workspace/root-pullrequests-build/root/core/imt/test/testRTaskArena.cxx:156:9: error: ‘condition_variable’ is not a member of ‘std’ ; - [2020-08-13T20:20:46.314Z] /home/sftnight/build/workspace/root-pullrequests-build/root/core/imt/test/testRTaskArena.cxx:157:9: error: ‘mutex’ is not a member of ‘std’ ; - [2020-08-13T20:20:46.314Z] /home/sftnight/build/workspace/root-pullrequests-build/root/core/imt/test/testRTaskArena.cxx:169:21: error: ‘unique_lock’ is not a member of ‘std’ ; - [2020-08-13T20:20:46.314Z] /home/sftnight/build/workspace/root-pullrequests-build/root/core/imt/test/testRTaskArena.cxx:169:38: error: ‘mutex’ is not a member of ‘std’ ; - [2020-08-13T20:20:46.314Z] /home/sftnight/build/workspace/root-pullrequests-build/root/core/imt/test/testRTaskArena.cxx:169:50: error: ‘m’ was not declared in this scope ; - [2020-08-13T20:20:46.314Z] /home/sftnight/build/workspace/root-pullrequests-build/root/core/imt/test/testRTaskArena.cxx:169:45: error: ‘lock’ was not declared in this scope ; - [2020-08-13T20:20:46.314Z] /home/sftnight/build/workspace/root-pullrequests-build/root/core/imt/test/testRTaskArena.cxx:170:30: error: ‘cv’ was not declared in this scope ; - [2020-08-13T20:20:46.314Z] /home/sftnight/build/workspace/root-pullrequests-build/root/core/imt/test/testRTaskArena.cxx:186:12: error: ‘unique_lock’ is not a member of ‘std’ ; - [2020-08-13T20:20:46.314Z] /home/sftnight/build/workspace/root-pullrequests-build/root/core/imt/test/testRTaskArena.cxx:186:29: error: ‘mutex’ is not a member of ‘std’ ; - [2020-08,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6189#issuecomment-673690840:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/6189#issuecomment-673690840,4,"['Error', 'error']","['Errors', 'error']"
Availability,"Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-6211-ROOT-debian10-i386-cxx14&date=2020-08-18).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/93093/console).; ### Errors:; - [2020-08-18T15:25:03.945Z] /home/sftnight/build/workspace/root-pullrequests-build/root/interpreter/cling/lib/Interpreter/CIFactory.cpp:688:58: error: no match for call to ‘({anonymous}::collectModuleMaps(clang::CompilerInstance&, llvm::SmallVectorImpl&lt;std::__cxx11::basic_string&lt;char&gt; &gt;&)::&lt;lambda(llvm::StringRef, const string&, const string&, std::__cxx11::string&, bool, bool)&gt;) (llvm::StringRef, const char [15], llvm::StringRef, std::__cxx11::string&)’",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6211#issuecomment-675546639:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/6211#issuecomment-675546639,2,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-6247-ROOT-debian10-i386-cxx14&date=2020-08-22).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/93621/console).; ### Errors:; - [2020-08-22T11:07:46.141Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:982 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6247#issuecomment-678627233:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/6247#issuecomment-678627233,2,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-6267-ROOT-debian10-i386-cxx14&date=2020-08-28).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/94154/console).; ### Errors:; - [2020-08-28T14:32:57.136Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:982 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6267#issuecomment-682625044:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/6267#issuecomment-682625044,2,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-6282-ROOT-debian10-i386-cxx14&date=2020-09-01).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/94418/console).; ### Errors:; - [2020-09-01T12:14:03.997Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:982 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6282#issuecomment-684808066:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/6282#issuecomment-684808066,2,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-6290-ROOT-debian10-i386-cxx14&date=2020-09-02).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/94626/console).; ### Errors:; - [2020-09-02T17:12:30.318Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:982 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6290#issuecomment-685875563:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/6290#issuecomment-685875563,2,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-6295-ROOT-debian10-i386-cxx14&date=2020-09-02).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/94610/console).; ### Errors:; - [2020-09-02T16:35:41.087Z] /home/sftnight/build/workspace/root-pullrequests-build/root/interpreter/cling/lib/Interpreter/ForwardDeclPrinter.cpp:493:43: error: ‘EST_ComputedNoexcept’ was not declared in this scope,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6295#issuecomment-685855399:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/6295#issuecomment-685855399,2,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-6301-ROOT-debian10-i386-cxx14&date=2020-09-17).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/96143/console).; ### Errors:; - [2020-09-17T18:24:18.589Z] /home/sftnight/build/workspace/root-pullrequests-build/root/core/thread/src/TReentrantRWLock.cxx:323:84: error: ‘local’ was not declared in this scope ; - [2020-09-17T18:24:18.589Z] /home/sftnight/build/workspace/root-pullrequests-build/root/core/thread/src/TReentrantRWLock.cxx:323:38: error: ‘R__MAYBE_ASSERT_WITH_LOCAL_LOCK’ was not declared in this scope ; - [2020-09-17T18:24:18.589Z] /home/sftnight/build/workspace/root-pullrequests-build/root/core/thread/src/TReentrantRWLock.cxx:323:38: error: ‘R__MAYBE_ASSERT_WITH_LOCAL_LOCK’ was not declared in this scope ; - [2020-09-17T18:24:18.589Z] /home/sftnight/build/workspace/root-pullrequests-build/root/core/thread/src/TReentrantRWLock.cxx:323:38: error: ‘R__MAYBE_ASSERT_WITH_LOCAL_LOCK’ was not declared in this scope ; - [2020-09-17T18:24:18.589Z] /home/sftnight/build/workspace/root-pullrequests-build/root/core/thread/src/TReentrantRWLock.cxx:323:38: error: ‘R__MAYBE_ASSERT_WITH_LOCAL_LOCK’ was not declared in this scope ; - [2020-09-17T18:24:18.589Z] /home/sftnight/build/workspace/root-pullrequests-build/root/core/thread/src/TReentrantRWLock.cxx:323:38: error: ‘R__MAYBE_ASSERT_WITH_LOCAL_LOCK’ was not declared in this scope ; - [2020-09-17T18:24:18.589Z] /home/sftnight/build/workspace/root-pullrequests-build/root/core/thread/src/TReentrantRWLock.cxx:323:38: error: ‘R__MAYBE_ASSERT_WITH_LOCAL_LOCK’ was not declared in this scope,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6301#issuecomment-694416285:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/6301#issuecomment-694416285,8,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-6307-ROOT-debian10-i386-cxx14&date=2020-09-04).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/94843/console).; ### Errors:; - [2020-09-04T20:08:51.293Z] /home/sftnight/build/workspace/root-pullrequests-build/root/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:3372:5: error: case label ‘OPTIMIZE_PRAGMA_OPTIONS’ not within a switch statement ; - [2020-09-04T20:08:51.293Z] /home/sftnight/build/workspace/root-pullrequests-build/root/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:3380:5: error: case label ‘MSSTRUCT_PRAGMA_OPTIONS’ not within a switch statement ; - [2020-09-04T20:08:51.293Z] /home/sftnight/build/workspace/root-pullrequests-build/root/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:3388:5: error: case label ‘POINTERS_TO_MEMBERS_PRAGMA_OPTIONS’ not within a switch statement ; - [2020-09-04T20:08:51.293Z] /home/sftnight/build/workspace/root-pullrequests-build/root/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:3397:5: error: case label ‘UNUSED_LOCAL_TYPEDEF_NAME_CANDIDATES’ not within a switch statement ; - [2020-09-04T20:08:51.293Z] /home/sftnight/build/workspace/root-pullrequests-build/root/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:3403:5: error: case label ‘CUDA_PRAGMA_FORCE_HOST_DEVICE_DEPTH’ not within a switch statement ; - [2020-09-04T20:08:51.293Z] /home/sftnight/build/workspace/root-pullrequests-build/root/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:3411:5: error: case label ‘PACK_PRAGMA_OPTIONS’ not within a switch statement ; - [2020-09-04T20:08:51.293Z] /home/sftnight/build/workspace/root-pullrequests-build/root/interpreter/llvm/src/tools/clang/lib/Seria,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6307#issuecomment-687357868:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/6307#issuecomment-687357868,3,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-6313-ROOT-debian10-i386-cxx14&date=2020-09-07).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/95020/console).; ### Errors:; - [2020-09-07T13:54:27.914Z] CMake Error at bindings/jupyroot/CMakeLists.txt:73 (install): ; - [2020-09-07T13:55:06.167Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:1050 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6313#issuecomment-688341891:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/6313#issuecomment-688341891,3,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-6323-ROOT-debian10-i386-cxx14&date=2020-09-08).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/95270/console).; ### Errors:; - [2020-09-08T16:51:32.447Z] /home/sftnight/build/workspace/root-pullrequests-build/root/roofit/roofitcore/test/testRooAbsCollection.cxx:35:19: error: ambiguous overload for ‘operator[]’ (operand types are ‘RooArgSet’ and ‘long unsigned int’),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6323#issuecomment-689007009:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/6323#issuecomment-689007009,2,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-6355-ROOT-debian10-i386-cxx14&date=2020-09-15).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/95918/console).; ### Errors:; - [2020-09-15T17:13:48.047Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:982 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6355#issuecomment-692853344:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/6355#issuecomment-692853344,2,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-6385-ROOT-debian10-i386-cxx14&date=2020-09-19).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/96255/console).; ### Errors:; - [2020-09-19T20:23:49.199Z] CMake Error at cmake/modules/SearchInstalledSoftware.cmake:16 (_find_package): ; - [2020-09-19T20:23:49.199Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:1050 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6385#issuecomment-695352560:401,Error,Errors,401,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-695352560,3,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/100109/console).; ### Errors:; - [2020-10-25T10:41:07.860Z] /home/sftnight/build/workspace/root-pullrequests-build/build/include/Minuit2/MnPrint.h:130:69: error: use of undeclared identifier 't' ; - [2020-10-25T10:41:07.860Z] /home/sftnight/build/workspace/root-pullrequests-build/build/include/Minuit2/MnPrint.h:132:24: error: no member named 'Warning' in 'ROOT::Minuit2::MnPrintLevel' ; - [2020-10-25T10:41:07.860Z] /home/sftnight/build/workspace/root-pullrequests-build/build/include/Minuit2/MnPrint.h:133:71: error: use of undeclared identifier 't' ; - [2020-10-25T10:41:07.860Z] /home/sftnight/build/workspace/root-pullrequests-build/build/include/Minuit2/MnPrint.h:137:68: error: use of undeclared identifier 't' ; - [2020-10-25T10:41:07.860Z] /home/sftnight/build/workspace/root-pullrequests-build/build/include/Minuit2/MnPrint.h:139:13: error: label at end of compound statement: expected statement,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6705#issuecomment-716125935:237,Error,Errors,237,https://root.cern,https://github.com/root-project/root/pull/6705#issuecomment-716125935,6,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/100245/console).; ### Errors:; - [2020-10-27T12:24:55.522Z] CMake Error at cmake/modules/SearchInstalledSoftware.cmake:1798: ; - [2020-10-27T12:24:55.522Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:1065 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6710#issuecomment-717207843:237,Error,Errors,237,https://root.cern,https://github.com/root-project/root/pull/6710#issuecomment-717207843,3,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/100325/console).; ### Errors:; - [2020-10-27T20:42:01.910Z] 1123/1960 Test #852: tutorial-v7-ntuple-ntpl003_lhcbOpenData ...........................................................***Failed Error regular expression found in output. Regex=[: error:] 0.38 sec . ### Failing tests:; - [projectroot.runtutorials.tutorial_v7_ntuple_ntpl003_lhcbOpenData](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/100325/testReport/projectroot/runtutorials/tutorial_v7_ntuple_ntpl003_lhcbOpenData/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6680#issuecomment-717538925:237,Error,Errors,237,https://root.cern,https://github.com/root-project/root/pull/6680#issuecomment-717538925,3,"['Error', 'error']","['Error', 'Errors', 'error']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/100811/console).; ### Errors:; - [2020-11-02T19:30:19.433Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:1002 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6744#issuecomment-720678682:237,Error,Errors,237,https://root.cern,https://github.com/root-project/root/pull/6744#issuecomment-720678682,2,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/100861/console).; ### Errors:; - [2020-11-03T13:14:03.847Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:1002 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6385#issuecomment-721108121:237,Error,Errors,237,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-721108121,2,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/100877/console).; ### Errors:; - [2020-11-03T16:46:28.741Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:1002 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6750#issuecomment-721246500:237,Error,Errors,237,https://root.cern,https://github.com/root-project/root/pull/6750#issuecomment-721246500,2,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/100885/console).; ### Errors:; - [2020-11-03T17:34:26.655Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:1002 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6385#issuecomment-721274703:237,Error,Errors,237,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-721274703,2,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/100893/console).; ### Errors:; - [2020-11-03T17:56:58.991Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:1002 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6385#issuecomment-721286411:237,Error,Errors,237,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-721286411,2,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/101013/console).; ### Errors:; - [2020-11-04T20:07:41.851Z] /home/sftnight/build/workspace/root-pullrequests-build/root/io/io/src/TStreamerInfo.cxx:581:77: error: ‘silent’ was not declared in this scope,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6559#issuecomment-721948648:237,Error,Errors,237,https://root.cern,https://github.com/root-project/root/pull/6559#issuecomment-721948648,2,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/101398/console).; ### Errors:; - [2020-11-09T13:19:45.034Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:1002 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6781#issuecomment-724008559:237,Error,Errors,237,https://root.cern,https://github.com/root-project/root/pull/6781#issuecomment-724008559,2,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/101768/console).; ### Errors:; - [2020-11-12T20:42:22.572Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:1009 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6385#issuecomment-726330759:237,Error,Errors,237,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-726330759,2,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/102209/console).; ### Errors:; - [2020-11-18T21:28:36.140Z] /home/sftnight/build/workspace/root-pullrequests-build/root/tree/ntuple/v7/src/RPageStorageFile.cxx:145:19: error: ‘class std::unique_ptr&lt;ROOT::Experimental::Detail::RColumnElementBase&gt;’ has no member named ‘GetBitsOnStorage’,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6763#issuecomment-729967294:237,Error,Errors,237,https://root.cern,https://github.com/root-project/root/pull/6763#issuecomment-729967294,2,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/102398/console).; ### Errors:; - [2020-11-22T01:33:38.293Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/roottest/cmake/modules/RoottestMacros.cmake:451 (add_executable): ; - [2020-11-22T01:33:38.293Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/roottest/cmake/modules/RoottestMacros.cmake:451 (add_executable): ; - [2020-11-22T01:33:38.293Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:1077 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6854#issuecomment-731662885:237,Error,Errors,237,https://root.cern,https://github.com/root-project/root/pull/6854#issuecomment-731662885,4,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/102496/console).; ### Errors:; - [2020-11-23T13:04:55.544Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:1009 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6841#issuecomment-732149049:237,Error,Errors,237,https://root.cern,https://github.com/root-project/root/pull/6841#issuecomment-732149049,2,['Error'],"['Error', 'Errors']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/102545/console).; ### Errors:; - [2020-11-23T19:18:14.216Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/roottest/cmake/modules/RoottestMacros.cmake:451 (add_executable): ; - [2020-11-23T19:18:14.216Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/roottest/cmake/modules/RoottestMacros.cmake:451 (add_executable): ; - [2020-11-23T19:18:14.610Z] CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:1077 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6854#issuecomment-732370567:237,Error,Errors,237,https://root.cern,https://github.com/root-project/root/pull/6854#issuecomment-732370567,4,['Error'],"['Error', 'Errors']"
Availability,"Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/102657/console).; ### Errors:; - [2020-11-24T16:52:50.094Z] /home/sftnight/build/workspace/root-pullrequests-build/root/core/foundation/src/RLogger.cxx:70:37: error: no matching function for call to ‘atomic_init(std::atomic&lt;long long int&gt;*, int)’ ; - [2020-11-24T16:52:50.094Z] /home/sftnight/build/workspace/root-pullrequests-build/root/core/foundation/src/RLogger.cxx:71:35: error: no matching function for call to ‘atomic_init(std::atomic&lt;long long int&gt;*, int)’ ; - [2020-11-24T16:52:50.094Z] /home/sftnight/build/workspace/root-pullrequests-build/root/core/foundation/src/RLogger.cxx:140:12: error: ‘transform’ is not a member of ‘std’",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6875#issuecomment-733105702:237,Error,Errors,237,https://root.cern,https://github.com/root-project/root/pull/6875#issuecomment-733105702,4,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/102706/console).; ### Errors:; - [2020-11-25T08:22:49.011Z] /home/sftnight/build/workspace/root-pullrequests-build/root/core/foundation/src/RLogger.cxx:140:12: error: ‘transform’ is not a member of ‘std’,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6875#issuecomment-733546648:237,Error,Errors,237,https://root.cern,https://github.com/root-project/root/pull/6875#issuecomment-733546648,2,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/102727/console).; ### Errors:; - [2020-11-25T12:10:12.132Z] /home/sftnight/build/workspace/root-pullrequests-build/root/tree/ntuple/v7/inc/ROOT/RDaos.hxx:21:10: fatal error: daos.h: No such file or directory ; - [2020-11-25T12:10:13.730Z] /home/sftnight/build/workspace/root-pullrequests-build/root/tree/ntuple/v7/inc/ROOT/RDaos.hxx:21:10: fatal error: daos.h: No such file or directory,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6825#issuecomment-733669048:237,Error,Errors,237,https://root.cern,https://github.com/root-project/root/pull/6825#issuecomment-733669048,3,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/102734/console).; ### Errors:; - [2020-11-25T12:28:43.192Z] /home/sftnight/build/workspace/root-pullrequests-build/root/tree/ntuple/v7/inc/ROOT/RDaos.hxx:21:10: fatal error: daos.h: No such file or directory,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6825#issuecomment-733677667:237,Error,Errors,237,https://root.cern,https://github.com/root-project/root/pull/6825#issuecomment-733677667,2,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/102741/console).; ### Errors:; - [2020-11-25T13:18:58.319Z] /home/sftnight/build/workspace/root-pullrequests-build/root/tree/ntuple/v7/inc/ROOT/RDaos.hxx:21:10: fatal error: daos.h: No such file or directory ; - [2020-11-25T13:19:00.110Z] /home/sftnight/build/workspace/root-pullrequests-build/root/tree/ntuple/v7/inc/ROOT/RDaos.hxx:21:10: fatal error: daos.h: No such file or directory,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6825#issuecomment-733701826:237,Error,Errors,237,https://root.cern,https://github.com/root-project/root/pull/6825#issuecomment-733701826,3,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/103656/console).; ### Errors:; - [2020-12-10T10:08:28.538Z] /home/sftnight/build/workspace/root-pullrequests-build/root/tmva/pymva/src/MethodPyTorch.cxx:202:12: error: ‘_Py_fopen’ was not declared in this scope,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6935#issuecomment-742420480:237,Error,Errors,237,https://root.cern,https://github.com/root-project/root/pull/6935#issuecomment-742420480,2,"['Error', 'error']","['Errors', 'error']"
Availability,Build failed on ROOT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/103677/console).; ### Errors:; - [2020-12-10T13:51:42.817Z] /home/sftnight/build/workspace/root-pullrequests-build/root/interpreter/cling/include/cling/Interpreter/RuntimeOptions.h:17:14: error: ISO C++ forbids declaration of ‘Config’ with no type [-fpermissive] ; - [2020-12-10T13:51:42.817Z] /home/sftnight/build/workspace/root-pullrequests-build/root/interpreter/cling/include/cling/Interpreter/RuntimeOptions.h:17:18: error: only constructors take member initializers ; - [2020-12-10T13:51:46.046Z] /home/sftnight/build/workspace/root-pullrequests-build/root/interpreter/cling/include/cling/Interpreter/RuntimeOptions.h:17:14: error: ISO C++ forbids declaration of ‘Config’ with no type [-fpermissive] ; - [2020-12-10T13:51:46.046Z] /home/sftnight/build/workspace/root-pullrequests-build/root/interpreter/cling/include/cling/Interpreter/RuntimeOptions.h:17:18: error: only constructors take member initializers ; - [2020-12-10T13:51:50.262Z] /home/sftnight/build/workspace/root-pullrequests-build/root/interpreter/cling/include/cling/Interpreter/RuntimeOptions.h:17:14: error: ISO C++ forbids declaration of ‘Config’ with no type [-fpermissive] ; - [2020-12-10T13:51:50.262Z] /home/sftnight/build/workspace/root-pullrequests-build/root/interpreter/cling/include/cling/Interpreter/RuntimeOptions.h:17:18: error: only constructors take member initializers ; - [2020-12-10T13:51:50.262Z] /home/sftnight/build/workspace/root-pullrequests-build/root/interpreter/cling/include/cling/Interpreter/RuntimeOptions.h:17:14: error: ISO C++ forbids declaration of ‘Config’ with no type [-fpermissive] ; - [2020-12-10T13:51:50.262Z] /home/sftnight/build/workspace/root-pullrequests-build/root/interpreter/cling/include/cling/Interpreter/RuntimeOptions.h:17:18: error: only constructors take membe,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6928#issuecomment-742533457:237,Error,Errors,237,https://root.cern,https://github.com/root-project/root/pull/6928#issuecomment-742533457,4,"['Error', 'error']","['Errors', 'error']"
